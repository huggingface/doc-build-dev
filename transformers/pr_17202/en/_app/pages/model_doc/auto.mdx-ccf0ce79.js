import{S as S8t,i as R8t,s as B8t,e as a,k as l,w as F,t as o,M as P8t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as I8t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as yGr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function q8t(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,f6,pf,je,We,gi,yn,m6,Ln,xn,g6,hi,$n,h6,pi,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),f6=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),m6=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),g6=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),h6=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var S$=s(p);m=r(S$,"NewModelConfig"),S$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var R$=s(ci);hf=r(R$,"model_type"),R$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var B$=s(fi);mi=r(B$,'"new-model"'),B$.forEach(t),f6=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),m6=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var P$=s(Ln);xn=r(P$,"PreTrainedModel"),P$.forEach(t),g6=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var uf=s(hi);$n=r(uf,"config_class"),uf.forEach(t),h6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var I$=s(pi);_f=r(I$,"NewModelConfig"),I$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,f6),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,m6),e(je,Ln),e(Ln,xn),e(je,g6),e(je,hi),e(hi,$n),e(je,h6),e(je,pi),e(pi,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function N8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D8t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function G8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O8t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function V8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,f6,pf,je,We,gi,yn,m6,Ln,xn,g6,hi,$n,h6,pi,_f,Ca,Qe,Ae,S$,_i,R$,B$,Eo,wa,P$,uf,I$,hGe,tqe,ui,bf,Bee,p6,pGe,Pee,_Ge,aqe,kn,uGe,Iee,bGe,vGe,qee,FGe,TGe,nqe,_6,sqe,q$,MGe,lqe,vf,iqe,bi,Ff,Nee,u6,EGe,jee,CGe,dqe,Co,b6,wGe,v6,AGe,N$,yGe,LGe,xGe,F6,$Ge,Dee,kGe,SGe,RGe,Er,T6,BGe,Gee,PGe,IGe,vi,qGe,Oee,NGe,jGe,Vee,DGe,GGe,OGe,A,Tf,Xee,VGe,XGe,j$,zGe,WGe,QGe,Mf,zee,HGe,UGe,D$,JGe,YGe,KGe,Ef,Wee,ZGe,eOe,G$,oOe,rOe,tOe,Cf,Qee,aOe,nOe,O$,sOe,lOe,iOe,wf,Hee,dOe,cOe,V$,fOe,mOe,gOe,Af,Uee,hOe,pOe,X$,_Oe,uOe,bOe,yf,Jee,vOe,FOe,z$,TOe,MOe,EOe,Lf,Yee,COe,wOe,W$,AOe,yOe,LOe,xf,Kee,xOe,$Oe,Q$,kOe,SOe,ROe,$f,Zee,BOe,POe,H$,IOe,qOe,NOe,kf,eoe,jOe,DOe,U$,GOe,OOe,VOe,Sf,ooe,XOe,zOe,J$,WOe,QOe,HOe,Rf,roe,UOe,JOe,Y$,YOe,KOe,ZOe,Bf,toe,eVe,oVe,K$,rVe,tVe,aVe,Pf,aoe,nVe,sVe,Z$,lVe,iVe,dVe,If,noe,cVe,fVe,ek,mVe,gVe,hVe,qf,soe,pVe,_Ve,ok,uVe,bVe,vVe,Nf,loe,FVe,TVe,rk,MVe,EVe,CVe,jf,ioe,wVe,AVe,tk,yVe,LVe,xVe,Df,doe,$Ve,kVe,ak,SVe,RVe,BVe,Gf,coe,PVe,IVe,nk,qVe,NVe,jVe,Of,foe,DVe,GVe,sk,OVe,VVe,XVe,Vf,moe,zVe,WVe,lk,QVe,HVe,UVe,Xf,goe,JVe,YVe,ik,KVe,ZVe,eXe,zf,hoe,oXe,rXe,dk,tXe,aXe,nXe,Wf,poe,sXe,lXe,ck,iXe,dXe,cXe,Qf,_oe,fXe,mXe,fk,gXe,hXe,pXe,Hf,uoe,_Xe,uXe,mk,bXe,vXe,FXe,Uf,boe,TXe,MXe,gk,EXe,CXe,wXe,Jf,voe,AXe,yXe,hk,LXe,xXe,$Xe,Yf,Foe,kXe,SXe,pk,RXe,BXe,PXe,Kf,Toe,IXe,qXe,_k,NXe,jXe,DXe,Zf,Moe,GXe,OXe,uk,VXe,XXe,zXe,em,Eoe,WXe,QXe,bk,HXe,UXe,JXe,om,Coe,YXe,KXe,vk,ZXe,eze,oze,rm,woe,rze,tze,Fk,aze,nze,sze,tm,Aoe,lze,ize,Tk,dze,cze,fze,am,yoe,mze,gze,Mk,hze,pze,_ze,nm,Loe,uze,bze,Ek,vze,Fze,Tze,sm,xoe,Mze,Eze,Ck,Cze,wze,Aze,lm,$oe,yze,Lze,wk,xze,$ze,kze,im,koe,Sze,Rze,Ak,Bze,Pze,Ize,dm,Soe,qze,Nze,yk,jze,Dze,Gze,cm,Roe,Oze,Vze,Lk,Xze,zze,Wze,fm,Boe,Qze,Hze,xk,Uze,Jze,Yze,mm,Poe,Kze,Zze,$k,eWe,oWe,rWe,gm,Ioe,tWe,aWe,kk,nWe,sWe,lWe,hm,qoe,iWe,dWe,Sk,cWe,fWe,mWe,pm,Noe,gWe,hWe,Rk,pWe,_We,uWe,_m,joe,bWe,vWe,Bk,FWe,TWe,MWe,um,Doe,EWe,CWe,Pk,wWe,AWe,yWe,bm,Goe,LWe,xWe,Ik,$We,kWe,SWe,vm,Ooe,RWe,BWe,qk,PWe,IWe,qWe,Fm,Voe,NWe,jWe,Nk,DWe,GWe,OWe,Tm,Xoe,VWe,XWe,jk,zWe,WWe,QWe,Mm,zoe,HWe,UWe,Dk,JWe,YWe,KWe,Em,Woe,ZWe,eQe,Gk,oQe,rQe,tQe,Cm,Qoe,aQe,nQe,Ok,sQe,lQe,iQe,wm,Hoe,dQe,cQe,Vk,fQe,mQe,gQe,Am,Uoe,hQe,pQe,Xk,_Qe,uQe,bQe,ym,Joe,vQe,FQe,zk,TQe,MQe,EQe,Lm,Yoe,CQe,wQe,Wk,AQe,yQe,LQe,xm,Koe,xQe,$Qe,Qk,kQe,SQe,RQe,$m,Zoe,BQe,PQe,Hk,IQe,qQe,NQe,km,ere,jQe,DQe,Uk,GQe,OQe,VQe,Sm,ore,XQe,zQe,Jk,WQe,QQe,HQe,Rm,rre,UQe,JQe,Yk,YQe,KQe,ZQe,Bm,tre,eHe,oHe,Kk,rHe,tHe,aHe,Pm,are,nHe,sHe,Zk,lHe,iHe,dHe,Im,nre,cHe,fHe,eS,mHe,gHe,hHe,qm,sre,pHe,_He,oS,uHe,bHe,vHe,Nm,lre,FHe,THe,rS,MHe,EHe,CHe,jm,ire,wHe,AHe,tS,yHe,LHe,xHe,Dm,dre,$He,kHe,aS,SHe,RHe,BHe,Gm,cre,PHe,IHe,nS,qHe,NHe,jHe,Om,fre,DHe,GHe,sS,OHe,VHe,XHe,Vm,mre,zHe,WHe,lS,QHe,HHe,UHe,Xm,gre,JHe,YHe,iS,KHe,ZHe,eUe,zm,hre,oUe,rUe,dS,tUe,aUe,nUe,Wm,pre,sUe,lUe,cS,iUe,dUe,cUe,Qm,_re,fUe,mUe,fS,gUe,hUe,pUe,Hm,ure,_Ue,uUe,mS,bUe,vUe,FUe,Um,bre,TUe,MUe,gS,EUe,CUe,wUe,Jm,vre,AUe,yUe,hS,LUe,xUe,$Ue,Ym,Fre,kUe,SUe,pS,RUe,BUe,PUe,Km,Tre,IUe,qUe,_S,NUe,jUe,DUe,Zm,Mre,GUe,OUe,uS,VUe,XUe,zUe,eg,Ere,WUe,QUe,bS,HUe,UUe,JUe,og,Cre,YUe,KUe,vS,ZUe,eJe,oJe,rg,wre,rJe,tJe,FS,aJe,nJe,sJe,tg,Are,lJe,iJe,TS,dJe,cJe,fJe,ag,yre,mJe,gJe,MS,hJe,pJe,_Je,ng,Lre,uJe,bJe,ES,vJe,FJe,TJe,sg,xre,MJe,EJe,CS,CJe,wJe,AJe,lg,$re,yJe,LJe,wS,xJe,$Je,kJe,ig,kre,SJe,RJe,AS,BJe,PJe,IJe,dg,Sre,qJe,NJe,yS,jJe,DJe,GJe,cg,Rre,OJe,VJe,LS,XJe,zJe,WJe,fg,Bre,QJe,HJe,xS,UJe,JJe,YJe,mg,Pre,KJe,ZJe,$S,eYe,oYe,rYe,gg,Ire,tYe,aYe,kS,nYe,sYe,lYe,hg,qre,iYe,dYe,SS,cYe,fYe,mYe,pg,Nre,gYe,hYe,RS,pYe,_Ye,uYe,_g,jre,bYe,vYe,BS,FYe,TYe,MYe,ug,Dre,EYe,CYe,PS,wYe,AYe,yYe,bg,Gre,LYe,xYe,IS,$Ye,kYe,SYe,vg,Ore,RYe,BYe,qS,PYe,IYe,qYe,Fg,NYe,Tg,M6,jYe,Vre,DYe,cqe,Fi,Mg,Xre,E6,GYe,zre,OYe,fqe,wo,C6,VYe,w6,XYe,NS,zYe,WYe,QYe,A6,HYe,Wre,UYe,JYe,YYe,Cr,y6,KYe,Qre,ZYe,eKe,Aa,oKe,Hre,rKe,tKe,Ure,aKe,nKe,Jre,sKe,lKe,iKe,k,Sn,Yre,dKe,cKe,jS,fKe,mKe,DS,gKe,hKe,pKe,Rn,Kre,_Ke,uKe,GS,bKe,vKe,OS,FKe,TKe,MKe,Bn,Zre,EKe,CKe,VS,wKe,AKe,XS,yKe,LKe,xKe,Eg,ete,$Ke,kKe,zS,SKe,RKe,BKe,Pn,ote,PKe,IKe,WS,qKe,NKe,QS,jKe,DKe,GKe,Cg,rte,OKe,VKe,HS,XKe,zKe,WKe,wg,tte,QKe,HKe,US,UKe,JKe,YKe,Ag,ate,KKe,ZKe,JS,eZe,oZe,rZe,In,nte,tZe,aZe,YS,nZe,sZe,KS,lZe,iZe,dZe,qn,ste,cZe,fZe,ZS,mZe,gZe,eR,hZe,pZe,_Ze,Nn,lte,uZe,bZe,oR,vZe,FZe,rR,TZe,MZe,EZe,yg,ite,CZe,wZe,tR,AZe,yZe,LZe,Lg,dte,xZe,$Ze,aR,kZe,SZe,RZe,xg,cte,BZe,PZe,nR,IZe,qZe,NZe,jn,fte,jZe,DZe,sR,GZe,OZe,lR,VZe,XZe,zZe,$g,mte,WZe,QZe,iR,HZe,UZe,JZe,Dn,gte,YZe,KZe,dR,ZZe,eeo,cR,oeo,reo,teo,Gn,hte,aeo,neo,fR,seo,leo,mR,ieo,deo,ceo,On,pte,feo,meo,gR,geo,heo,hR,peo,_eo,ueo,kg,_te,beo,veo,pR,Feo,Teo,Meo,Vn,ute,Eeo,Ceo,_R,weo,Aeo,uR,yeo,Leo,xeo,Xn,bte,$eo,keo,bR,Seo,Reo,vR,Beo,Peo,Ieo,zn,vte,qeo,Neo,FR,jeo,Deo,TR,Geo,Oeo,Veo,Wn,Fte,Xeo,zeo,MR,Weo,Qeo,ER,Heo,Ueo,Jeo,Qn,Tte,Yeo,Keo,CR,Zeo,eoo,wR,ooo,roo,too,Hn,Mte,aoo,noo,AR,soo,loo,yR,ioo,doo,coo,Sg,Ete,foo,moo,LR,goo,hoo,poo,Un,Cte,_oo,uoo,xR,boo,voo,$R,Foo,Too,Moo,Rg,wte,Eoo,Coo,kR,woo,Aoo,yoo,Jn,Ate,Loo,xoo,SR,$oo,koo,RR,Soo,Roo,Boo,Yn,yte,Poo,Ioo,BR,qoo,Noo,PR,joo,Doo,Goo,Kn,Lte,Ooo,Voo,IR,Xoo,zoo,qR,Woo,Qoo,Hoo,Zn,xte,Uoo,Joo,NR,Yoo,Koo,jR,Zoo,ero,oro,es,$te,rro,tro,DR,aro,nro,GR,sro,lro,iro,Bg,kte,dro,cro,OR,fro,mro,gro,os,Ste,hro,pro,VR,_ro,uro,XR,bro,vro,Fro,rs,Rte,Tro,Mro,zR,Ero,Cro,WR,wro,Aro,yro,ts,Bte,Lro,xro,QR,$ro,kro,HR,Sro,Rro,Bro,as,Pte,Pro,Iro,UR,qro,Nro,JR,jro,Dro,Gro,ns,Ite,Oro,Vro,YR,Xro,zro,KR,Wro,Qro,Hro,ss,qte,Uro,Jro,ZR,Yro,Kro,eB,Zro,eto,oto,Pg,Nte,rto,tto,oB,ato,nto,sto,ls,jte,lto,ito,rB,dto,cto,tB,fto,mto,gto,Ig,Dte,hto,pto,aB,_to,uto,bto,qg,Gte,vto,Fto,nB,Tto,Mto,Eto,is,Ote,Cto,wto,sB,Ato,yto,lB,Lto,xto,$to,ds,Vte,kto,Sto,iB,Rto,Bto,dB,Pto,Ito,qto,cs,Xte,Nto,jto,cB,Dto,Gto,fB,Oto,Vto,Xto,Ng,zte,zto,Wto,mB,Qto,Hto,Uto,fs,Wte,Jto,Yto,gB,Kto,Zto,hB,eao,oao,rao,ms,Qte,tao,aao,pB,nao,sao,_B,lao,iao,dao,gs,Hte,cao,fao,uB,mao,gao,bB,hao,pao,_ao,hs,Ute,uao,bao,vB,vao,Fao,FB,Tao,Mao,Eao,ps,Jte,Cao,wao,TB,Aao,yao,MB,Lao,xao,$ao,jg,Yte,kao,Sao,EB,Rao,Bao,Pao,_s,Kte,Iao,qao,CB,Nao,jao,wB,Dao,Gao,Oao,Dg,Zte,Vao,Xao,AB,zao,Wao,Qao,Gg,eae,Hao,Uao,yB,Jao,Yao,Kao,Og,oae,Zao,eno,LB,ono,rno,tno,Vg,rae,ano,nno,xB,sno,lno,ino,us,tae,dno,cno,$B,fno,mno,kB,gno,hno,pno,Xg,aae,_no,uno,SB,bno,vno,Fno,bs,nae,Tno,Mno,RB,Eno,Cno,BB,wno,Ano,yno,vs,sae,Lno,xno,PB,$no,kno,IB,Sno,Rno,Bno,Fs,lae,Pno,Ino,qB,qno,Nno,NB,jno,Dno,Gno,Ts,iae,Ono,Vno,jB,Xno,zno,DB,Wno,Qno,Hno,Ms,dae,Uno,Jno,GB,Yno,Kno,OB,Zno,eso,oso,Es,cae,rso,tso,VB,aso,nso,XB,sso,lso,iso,zg,fae,dso,cso,zB,fso,mso,gso,Wg,mae,hso,pso,WB,_so,uso,bso,Cs,gae,vso,Fso,QB,Tso,Mso,HB,Eso,Cso,wso,ws,hae,Aso,yso,UB,Lso,xso,JB,$so,kso,Sso,As,pae,Rso,Bso,YB,Pso,Iso,KB,qso,Nso,jso,Qg,_ae,Dso,Gso,ZB,Oso,Vso,Xso,Hg,uae,zso,Wso,eP,Qso,Hso,Uso,Ug,bae,Jso,Yso,oP,Kso,Zso,elo,ys,vae,olo,rlo,rP,tlo,alo,tP,nlo,slo,llo,Jg,Fae,ilo,dlo,aP,clo,flo,mlo,Yg,Tae,glo,hlo,nP,plo,_lo,ulo,Kg,Mae,blo,vlo,sP,Flo,Tlo,Mlo,Ls,Eae,Elo,Clo,lP,wlo,Alo,iP,ylo,Llo,xlo,Zg,Cae,$lo,klo,dP,Slo,Rlo,Blo,eh,wae,Plo,Ilo,cP,qlo,Nlo,jlo,xs,Aae,Dlo,Glo,fP,Olo,Vlo,mP,Xlo,zlo,Wlo,$s,yae,Qlo,Hlo,gP,Ulo,Jlo,hP,Ylo,Klo,Zlo,ks,Lae,eio,oio,pP,rio,tio,_P,aio,nio,sio,Ss,xae,lio,iio,uP,dio,cio,bP,fio,mio,gio,oh,hio,rh,L6,pio,$ae,_io,mqe,Ti,th,kae,x6,uio,Sae,bio,gqe,Ao,$6,vio,k6,Fio,vP,Tio,Mio,Eio,S6,Cio,Rae,wio,Aio,yio,He,R6,Lio,Bae,xio,$io,ya,kio,Pae,Sio,Rio,Iae,Bio,Pio,qae,Iio,qio,Nio,Z,ah,Nae,jio,Dio,FP,Gio,Oio,Vio,nh,jae,Xio,zio,TP,Wio,Qio,Hio,sh,Dae,Uio,Jio,MP,Yio,Kio,Zio,lh,Gae,edo,odo,EP,rdo,tdo,ado,ih,Oae,ndo,sdo,CP,ldo,ido,ddo,dh,Vae,cdo,fdo,wP,mdo,gdo,hdo,ch,Xae,pdo,_do,AP,udo,bdo,vdo,fh,zae,Fdo,Tdo,yP,Mdo,Edo,Cdo,mh,Wae,wdo,Ado,LP,ydo,Ldo,xdo,gh,Qae,$do,kdo,xP,Sdo,Rdo,Bdo,hh,Hae,Pdo,Ido,$P,qdo,Ndo,jdo,ph,Uae,Ddo,Gdo,kP,Odo,Vdo,Xdo,_h,Jae,zdo,Wdo,SP,Qdo,Hdo,Udo,uh,Yae,Jdo,Ydo,RP,Kdo,Zdo,eco,bh,Kae,oco,rco,BP,tco,aco,nco,vh,Zae,sco,lco,PP,ico,dco,cco,Fh,ene,fco,mco,IP,gco,hco,pco,Th,one,_co,uco,qP,bco,vco,Fco,Mh,rne,Tco,Mco,NP,Eco,Cco,wco,Eh,tne,Aco,yco,jP,Lco,xco,$co,Ch,ane,kco,Sco,DP,Rco,Bco,Pco,wh,nne,Ico,qco,GP,Nco,jco,Dco,Ah,sne,Gco,Oco,OP,Vco,Xco,zco,yh,lne,Wco,Qco,VP,Hco,Uco,Jco,Lh,ine,Yco,Kco,XP,Zco,efo,ofo,xh,dne,rfo,tfo,zP,afo,nfo,sfo,$h,lfo,kh,ifo,Sh,B6,dfo,cne,cfo,hqe,Mi,Rh,fne,P6,ffo,mne,mfo,pqe,yo,I6,gfo,q6,hfo,WP,pfo,_fo,ufo,N6,bfo,gne,vfo,Ffo,Tfo,Ue,j6,Mfo,hne,Efo,Cfo,Ei,wfo,pne,Afo,yfo,_ne,Lfo,xfo,$fo,pe,Bh,une,kfo,Sfo,QP,Rfo,Bfo,Pfo,Ph,bne,Ifo,qfo,vne,Nfo,jfo,Dfo,Ih,Fne,Gfo,Ofo,HP,Vfo,Xfo,zfo,qh,Tne,Wfo,Qfo,UP,Hfo,Ufo,Jfo,Nh,Mne,Yfo,Kfo,JP,Zfo,emo,omo,jh,Ene,rmo,tmo,YP,amo,nmo,smo,Dh,Cne,lmo,imo,KP,dmo,cmo,fmo,Gh,wne,mmo,gmo,ZP,hmo,pmo,_mo,Oh,Ane,umo,bmo,eI,vmo,Fmo,Tmo,Vh,yne,Mmo,Emo,oI,Cmo,wmo,Amo,Xh,Lne,ymo,Lmo,rI,xmo,$mo,kmo,zh,xne,Smo,Rmo,tI,Bmo,Pmo,Imo,Wh,$ne,qmo,Nmo,aI,jmo,Dmo,Gmo,Qh,kne,Omo,Vmo,nI,Xmo,zmo,Wmo,Hh,Sne,Qmo,Hmo,sI,Umo,Jmo,Ymo,Uh,Rne,Kmo,Zmo,lI,ego,ogo,rgo,Jh,tgo,Yh,ago,Kh,D6,ngo,Bne,sgo,_qe,Ci,Zh,Pne,G6,lgo,Ine,igo,uqe,Lo,O6,dgo,wi,cgo,iI,fgo,mgo,dI,ggo,hgo,pgo,V6,_go,qne,ugo,bgo,vgo,tt,X6,Fgo,Nne,Tgo,Mgo,Ai,Ego,jne,Cgo,wgo,cI,Ago,ygo,Lgo,ep,xgo,Je,z6,$go,Dne,kgo,Sgo,La,Rgo,Gne,Bgo,Pgo,One,Igo,qgo,Vne,Ngo,jgo,Dgo,x,op,Xne,Ggo,Ogo,fI,Vgo,Xgo,zgo,rp,zne,Wgo,Qgo,mI,Hgo,Ugo,Jgo,tp,Wne,Ygo,Kgo,gI,Zgo,eho,oho,ap,Qne,rho,tho,hI,aho,nho,sho,np,Hne,lho,iho,pI,dho,cho,fho,sp,Une,mho,gho,_I,hho,pho,_ho,lp,Jne,uho,bho,uI,vho,Fho,Tho,ip,Yne,Mho,Eho,bI,Cho,who,Aho,dp,Kne,yho,Lho,vI,xho,$ho,kho,cp,Zne,Sho,Rho,FI,Bho,Pho,Iho,fp,ese,qho,Nho,TI,jho,Dho,Gho,mp,ose,Oho,Vho,MI,Xho,zho,Who,gp,rse,Qho,Hho,EI,Uho,Jho,Yho,hp,tse,Kho,Zho,CI,epo,opo,rpo,pp,ase,tpo,apo,wI,npo,spo,lpo,_p,nse,ipo,dpo,AI,cpo,fpo,mpo,up,sse,gpo,hpo,yI,ppo,_po,upo,bp,lse,bpo,vpo,LI,Fpo,Tpo,Mpo,vp,ise,Epo,Cpo,xI,wpo,Apo,ypo,Fp,dse,Lpo,xpo,$I,$po,kpo,Spo,Tp,cse,Rpo,Bpo,kI,Ppo,Ipo,qpo,Mp,fse,Npo,jpo,SI,Dpo,Gpo,Opo,Ep,mse,Vpo,Xpo,RI,zpo,Wpo,Qpo,Cp,gse,Hpo,Upo,BI,Jpo,Ypo,Kpo,wp,hse,Zpo,e_o,PI,o_o,r_o,t_o,Ap,pse,a_o,n_o,II,s_o,l_o,i_o,yp,_se,d_o,c_o,qI,f_o,m_o,g_o,Lp,use,h_o,p_o,NI,__o,u_o,b_o,xp,bse,v_o,F_o,jI,T_o,M_o,E_o,$p,vse,C_o,w_o,DI,A_o,y_o,L_o,kp,Fse,x_o,$_o,GI,k_o,S_o,R_o,Sp,Tse,B_o,P_o,OI,I_o,q_o,N_o,Rs,Mse,j_o,D_o,VI,G_o,O_o,XI,V_o,X_o,z_o,Rp,Ese,W_o,Q_o,zI,H_o,U_o,J_o,Bp,Cse,Y_o,K_o,WI,Z_o,euo,ouo,Pp,wse,ruo,tuo,QI,auo,nuo,suo,Ip,Ase,luo,iuo,HI,duo,cuo,fuo,qp,yse,muo,guo,UI,huo,puo,_uo,Np,Lse,uuo,buo,JI,vuo,Fuo,Tuo,jp,xse,Muo,Euo,YI,Cuo,wuo,Auo,Dp,$se,yuo,Luo,KI,xuo,$uo,kuo,Gp,kse,Suo,Ruo,ZI,Buo,Puo,Iuo,Op,Sse,quo,Nuo,eq,juo,Duo,Guo,Vp,Rse,Ouo,Vuo,oq,Xuo,zuo,Wuo,Xp,Bse,Quo,Huo,rq,Uuo,Juo,Yuo,zp,Pse,Kuo,Zuo,tq,e2o,o2o,r2o,Wp,Ise,t2o,a2o,aq,n2o,s2o,l2o,Qp,qse,i2o,d2o,nq,c2o,f2o,m2o,Hp,Nse,g2o,h2o,sq,p2o,_2o,u2o,Up,jse,b2o,v2o,lq,F2o,T2o,M2o,Jp,Dse,E2o,C2o,iq,w2o,A2o,y2o,Yp,Gse,L2o,x2o,dq,$2o,k2o,S2o,Kp,Ose,R2o,B2o,cq,P2o,I2o,q2o,Zp,Vse,N2o,j2o,fq,D2o,G2o,O2o,e_,Xse,V2o,X2o,mq,z2o,W2o,Q2o,o_,zse,H2o,U2o,gq,J2o,Y2o,K2o,r_,Wse,Z2o,e1o,hq,o1o,r1o,t1o,t_,Qse,a1o,n1o,pq,s1o,l1o,i1o,a_,Hse,d1o,c1o,_q,f1o,m1o,g1o,n_,Use,h1o,p1o,uq,_1o,u1o,b1o,s_,Jse,v1o,F1o,bq,T1o,M1o,E1o,l_,Yse,C1o,w1o,vq,A1o,y1o,L1o,i_,Kse,x1o,$1o,Fq,k1o,S1o,R1o,d_,Zse,B1o,P1o,Tq,I1o,q1o,N1o,c_,ele,j1o,D1o,Mq,G1o,O1o,V1o,f_,ole,X1o,z1o,Eq,W1o,Q1o,H1o,m_,rle,U1o,J1o,Cq,Y1o,K1o,Z1o,g_,tle,ebo,obo,wq,rbo,tbo,abo,h_,ale,nbo,sbo,Aq,lbo,ibo,dbo,p_,nle,cbo,fbo,yq,mbo,gbo,hbo,__,sle,pbo,_bo,Lq,ubo,bbo,vbo,u_,lle,Fbo,Tbo,xq,Mbo,Ebo,Cbo,b_,ile,wbo,Abo,$q,ybo,Lbo,xbo,v_,dle,$bo,kbo,kq,Sbo,Rbo,Bbo,F_,cle,Pbo,Ibo,Sq,qbo,Nbo,jbo,T_,fle,Dbo,Gbo,Rq,Obo,Vbo,Xbo,M_,mle,zbo,Wbo,Bq,Qbo,Hbo,Ubo,E_,gle,Jbo,Ybo,Pq,Kbo,Zbo,evo,C_,hle,ovo,rvo,Iq,tvo,avo,nvo,w_,ple,svo,lvo,qq,ivo,dvo,cvo,A_,_le,fvo,mvo,Nq,gvo,hvo,pvo,y_,ule,_vo,uvo,jq,bvo,vvo,Fvo,L_,ble,Tvo,Mvo,Dq,Evo,Cvo,wvo,x_,vle,Avo,yvo,Gq,Lvo,xvo,$vo,$_,Fle,kvo,Svo,Oq,Rvo,Bvo,Pvo,k_,Tle,Ivo,qvo,Vq,Nvo,jvo,Dvo,S_,Mle,Gvo,Ovo,Xq,Vvo,Xvo,zvo,R_,Ele,Wvo,Qvo,zq,Hvo,Uvo,Jvo,B_,Cle,Yvo,Kvo,Wq,Zvo,eFo,oFo,P_,wle,rFo,tFo,Qq,aFo,nFo,sFo,I_,Ale,lFo,iFo,Hq,dFo,cFo,fFo,q_,yle,mFo,gFo,Uq,hFo,pFo,_Fo,N_,Lle,uFo,bFo,Jq,vFo,FFo,TFo,j_,xle,MFo,EFo,Yq,CFo,wFo,AFo,D_,$le,yFo,LFo,Kq,xFo,$Fo,kFo,G_,kle,SFo,RFo,Zq,BFo,PFo,IFo,O_,Sle,qFo,NFo,eN,jFo,DFo,GFo,V_,Rle,OFo,VFo,oN,XFo,zFo,WFo,X_,Ble,QFo,HFo,rN,UFo,JFo,YFo,z_,Ple,KFo,ZFo,tN,e0o,o0o,r0o,W_,t0o,Ile,a0o,n0o,qle,s0o,l0o,Q_,bqe,yi,H_,Nle,W6,i0o,jle,d0o,vqe,xo,Q6,c0o,Li,f0o,aN,m0o,g0o,nN,h0o,p0o,_0o,H6,u0o,Dle,b0o,v0o,F0o,at,U6,T0o,Gle,M0o,E0o,xi,C0o,Ole,w0o,A0o,sN,y0o,L0o,x0o,U_,$0o,Ye,J6,k0o,Vle,S0o,R0o,xa,B0o,Xle,P0o,I0o,zle,q0o,N0o,Wle,j0o,D0o,G0o,G,J_,Qle,O0o,V0o,lN,X0o,z0o,W0o,Y_,Hle,Q0o,H0o,iN,U0o,J0o,Y0o,K_,Ule,K0o,Z0o,dN,eTo,oTo,rTo,Z_,Jle,tTo,aTo,cN,nTo,sTo,lTo,eu,Yle,iTo,dTo,fN,cTo,fTo,mTo,ou,Kle,gTo,hTo,mN,pTo,_To,uTo,ru,Zle,bTo,vTo,gN,FTo,TTo,MTo,tu,eie,ETo,CTo,hN,wTo,ATo,yTo,au,oie,LTo,xTo,pN,$To,kTo,STo,nu,rie,RTo,BTo,_N,PTo,ITo,qTo,su,tie,NTo,jTo,uN,DTo,GTo,OTo,lu,aie,VTo,XTo,bN,zTo,WTo,QTo,iu,nie,HTo,UTo,vN,JTo,YTo,KTo,du,sie,ZTo,e7o,FN,o7o,r7o,t7o,cu,lie,a7o,n7o,TN,s7o,l7o,i7o,fu,iie,d7o,c7o,MN,f7o,m7o,g7o,mu,die,h7o,p7o,EN,_7o,u7o,b7o,gu,cie,v7o,F7o,CN,T7o,M7o,E7o,hu,fie,C7o,w7o,wN,A7o,y7o,L7o,pu,mie,x7o,$7o,AN,k7o,S7o,R7o,_u,gie,B7o,P7o,yN,I7o,q7o,N7o,uu,hie,j7o,D7o,LN,G7o,O7o,V7o,bu,pie,X7o,z7o,xN,W7o,Q7o,H7o,vu,_ie,U7o,J7o,$N,Y7o,K7o,Z7o,Fu,uie,eMo,oMo,kN,rMo,tMo,aMo,Tu,bie,nMo,sMo,SN,lMo,iMo,dMo,Mu,vie,cMo,fMo,RN,mMo,gMo,hMo,Eu,Fie,pMo,_Mo,BN,uMo,bMo,vMo,Cu,Tie,FMo,TMo,PN,MMo,EMo,CMo,wu,Mie,wMo,AMo,IN,yMo,LMo,xMo,Au,Eie,$Mo,kMo,qN,SMo,RMo,BMo,yu,Cie,PMo,IMo,NN,qMo,NMo,jMo,Lu,wie,DMo,GMo,jN,OMo,VMo,XMo,xu,Aie,zMo,WMo,DN,QMo,HMo,UMo,$u,yie,JMo,YMo,GN,KMo,ZMo,e4o,ku,Lie,o4o,r4o,ON,t4o,a4o,n4o,Su,xie,s4o,l4o,VN,i4o,d4o,c4o,Ru,$ie,f4o,m4o,XN,g4o,h4o,p4o,Bu,kie,_4o,u4o,zN,b4o,v4o,F4o,Pu,Sie,T4o,M4o,WN,E4o,C4o,w4o,Iu,Rie,A4o,y4o,QN,L4o,x4o,$4o,qu,Bie,k4o,S4o,HN,R4o,B4o,P4o,Nu,Pie,I4o,q4o,UN,N4o,j4o,D4o,ju,G4o,Iie,O4o,V4o,qie,X4o,z4o,Du,Fqe,$i,Gu,Nie,Y6,W4o,jie,Q4o,Tqe,$o,K6,H4o,ki,U4o,JN,J4o,Y4o,YN,K4o,Z4o,eEo,Z6,oEo,Die,rEo,tEo,aEo,nt,ey,nEo,Gie,sEo,lEo,Si,iEo,Oie,dEo,cEo,KN,fEo,mEo,gEo,Ou,hEo,Ke,oy,pEo,Vie,_Eo,uEo,$a,bEo,Xie,vEo,FEo,zie,TEo,MEo,Wie,EEo,CEo,wEo,z,Vu,Qie,AEo,yEo,ZN,LEo,xEo,$Eo,Xu,Hie,kEo,SEo,ej,REo,BEo,PEo,zu,Uie,IEo,qEo,oj,NEo,jEo,DEo,Wu,Jie,GEo,OEo,rj,VEo,XEo,zEo,Qu,Yie,WEo,QEo,tj,HEo,UEo,JEo,Hu,Kie,YEo,KEo,aj,ZEo,eCo,oCo,Uu,Zie,rCo,tCo,nj,aCo,nCo,sCo,Ju,ede,lCo,iCo,sj,dCo,cCo,fCo,Yu,ode,mCo,gCo,lj,hCo,pCo,_Co,Ku,rde,uCo,bCo,ij,vCo,FCo,TCo,Zu,tde,MCo,ECo,dj,CCo,wCo,ACo,e2,ade,yCo,LCo,cj,xCo,$Co,kCo,o2,nde,SCo,RCo,fj,BCo,PCo,ICo,r2,sde,qCo,NCo,mj,jCo,DCo,GCo,t2,lde,OCo,VCo,gj,XCo,zCo,WCo,a2,ide,QCo,HCo,hj,UCo,JCo,YCo,n2,dde,KCo,ZCo,pj,e5o,o5o,r5o,s2,cde,t5o,a5o,_j,n5o,s5o,l5o,l2,fde,i5o,d5o,uj,c5o,f5o,m5o,i2,mde,g5o,h5o,bj,p5o,_5o,u5o,d2,gde,b5o,v5o,vj,F5o,T5o,M5o,c2,hde,E5o,C5o,Fj,w5o,A5o,y5o,f2,pde,L5o,x5o,Tj,$5o,k5o,S5o,m2,_de,R5o,B5o,Mj,P5o,I5o,q5o,g2,ude,N5o,j5o,Ej,D5o,G5o,O5o,h2,bde,V5o,X5o,Cj,z5o,W5o,Q5o,p2,vde,H5o,U5o,wj,J5o,Y5o,K5o,_2,Fde,Z5o,e3o,Aj,o3o,r3o,t3o,u2,Tde,a3o,n3o,yj,s3o,l3o,i3o,b2,Mde,d3o,c3o,Lj,f3o,m3o,g3o,v2,Ede,h3o,p3o,xj,_3o,u3o,b3o,F2,Cde,v3o,F3o,$j,T3o,M3o,E3o,T2,wde,C3o,w3o,kj,A3o,y3o,L3o,M2,Ade,x3o,$3o,Sj,k3o,S3o,R3o,E2,yde,B3o,P3o,Rj,I3o,q3o,N3o,C2,Lde,j3o,D3o,Bj,G3o,O3o,V3o,w2,xde,X3o,z3o,Pj,W3o,Q3o,H3o,A2,U3o,$de,J3o,Y3o,kde,K3o,Z3o,y2,Mqe,Ri,L2,Sde,ry,ewo,Rde,owo,Eqe,ko,ty,rwo,Bi,two,Ij,awo,nwo,qj,swo,lwo,iwo,ay,dwo,Bde,cwo,fwo,mwo,st,ny,gwo,Pde,hwo,pwo,Pi,_wo,Ide,uwo,bwo,Nj,vwo,Fwo,Two,x2,Mwo,Ze,sy,Ewo,qde,Cwo,wwo,ka,Awo,Nde,ywo,Lwo,jde,xwo,$wo,Dde,kwo,Swo,Rwo,Q,$2,Gde,Bwo,Pwo,jj,Iwo,qwo,Nwo,k2,Ode,jwo,Dwo,Dj,Gwo,Owo,Vwo,S2,Vde,Xwo,zwo,Gj,Wwo,Qwo,Hwo,R2,Xde,Uwo,Jwo,Oj,Ywo,Kwo,Zwo,B2,zde,eAo,oAo,Vj,rAo,tAo,aAo,P2,Wde,nAo,sAo,Xj,lAo,iAo,dAo,I2,Qde,cAo,fAo,zj,mAo,gAo,hAo,q2,Hde,pAo,_Ao,Wj,uAo,bAo,vAo,N2,Ude,FAo,TAo,Qj,MAo,EAo,CAo,j2,Jde,wAo,AAo,Hj,yAo,LAo,xAo,D2,Yde,$Ao,kAo,Uj,SAo,RAo,BAo,G2,Kde,PAo,IAo,Jj,qAo,NAo,jAo,O2,Zde,DAo,GAo,Yj,OAo,VAo,XAo,V2,ece,zAo,WAo,Kj,QAo,HAo,UAo,X2,oce,JAo,YAo,Zj,KAo,ZAo,e6o,z2,rce,o6o,r6o,eD,t6o,a6o,n6o,W2,tce,s6o,l6o,oD,i6o,d6o,c6o,Q2,ace,f6o,m6o,rD,g6o,h6o,p6o,H2,nce,_6o,u6o,tD,b6o,v6o,F6o,U2,sce,T6o,M6o,aD,E6o,C6o,w6o,J2,lce,A6o,y6o,nD,L6o,x6o,$6o,Y2,ice,k6o,S6o,sD,R6o,B6o,P6o,K2,dce,I6o,q6o,lD,N6o,j6o,D6o,Z2,cce,G6o,O6o,iD,V6o,X6o,z6o,e1,fce,W6o,Q6o,dD,H6o,U6o,J6o,o1,mce,Y6o,K6o,cD,Z6o,eyo,oyo,r1,gce,ryo,tyo,fD,ayo,nyo,syo,t1,hce,lyo,iyo,mD,dyo,cyo,fyo,a1,pce,myo,gyo,gD,hyo,pyo,_yo,n1,_ce,uyo,byo,hD,vyo,Fyo,Tyo,s1,uce,Myo,Eyo,bce,Cyo,wyo,Ayo,l1,vce,yyo,Lyo,pD,xyo,$yo,kyo,i1,Fce,Syo,Ryo,_D,Byo,Pyo,Iyo,d1,Tce,qyo,Nyo,uD,jyo,Dyo,Gyo,c1,Mce,Oyo,Vyo,bD,Xyo,zyo,Wyo,f1,Qyo,Ece,Hyo,Uyo,Cce,Jyo,Yyo,m1,Cqe,Ii,g1,wce,ly,Kyo,Ace,Zyo,wqe,So,iy,eLo,qi,oLo,vD,rLo,tLo,FD,aLo,nLo,sLo,dy,lLo,yce,iLo,dLo,cLo,lt,cy,fLo,Lce,mLo,gLo,Ni,hLo,xce,pLo,_Lo,TD,uLo,bLo,vLo,h1,FLo,eo,fy,TLo,$ce,MLo,ELo,Sa,CLo,kce,wLo,ALo,Sce,yLo,LLo,Rce,xLo,$Lo,kLo,_e,p1,Bce,SLo,RLo,MD,BLo,PLo,ILo,_1,Pce,qLo,NLo,ED,jLo,DLo,GLo,u1,Ice,OLo,VLo,CD,XLo,zLo,WLo,b1,qce,QLo,HLo,wD,ULo,JLo,YLo,v1,Nce,KLo,ZLo,AD,e8o,o8o,r8o,F1,jce,t8o,a8o,yD,n8o,s8o,l8o,T1,Dce,i8o,d8o,LD,c8o,f8o,m8o,M1,Gce,g8o,h8o,xD,p8o,_8o,u8o,E1,Oce,b8o,v8o,$D,F8o,T8o,M8o,C1,Vce,E8o,C8o,kD,w8o,A8o,y8o,w1,Xce,L8o,x8o,SD,$8o,k8o,S8o,A1,zce,R8o,B8o,RD,P8o,I8o,q8o,y1,Wce,N8o,j8o,BD,D8o,G8o,O8o,L1,Qce,V8o,X8o,PD,z8o,W8o,Q8o,x1,Hce,H8o,U8o,ID,J8o,Y8o,K8o,$1,Uce,Z8o,e9o,qD,o9o,r9o,t9o,k1,a9o,Jce,n9o,s9o,Yce,l9o,i9o,S1,Aqe,ji,R1,Kce,my,d9o,Zce,c9o,yqe,Ro,gy,f9o,Di,m9o,ND,g9o,h9o,jD,p9o,_9o,u9o,hy,b9o,efe,v9o,F9o,T9o,it,py,M9o,ofe,E9o,C9o,Gi,w9o,rfe,A9o,y9o,DD,L9o,x9o,$9o,B1,k9o,oo,_y,S9o,tfe,R9o,B9o,Ra,P9o,afe,I9o,q9o,nfe,N9o,j9o,sfe,D9o,G9o,O9o,q,P1,lfe,V9o,X9o,GD,z9o,W9o,Q9o,I1,ife,H9o,U9o,OD,J9o,Y9o,K9o,q1,dfe,Z9o,exo,VD,oxo,rxo,txo,N1,cfe,axo,nxo,XD,sxo,lxo,ixo,j1,ffe,dxo,cxo,zD,fxo,mxo,gxo,D1,mfe,hxo,pxo,WD,_xo,uxo,bxo,G1,gfe,vxo,Fxo,QD,Txo,Mxo,Exo,O1,hfe,Cxo,wxo,HD,Axo,yxo,Lxo,V1,pfe,xxo,$xo,UD,kxo,Sxo,Rxo,X1,_fe,Bxo,Pxo,JD,Ixo,qxo,Nxo,z1,ufe,jxo,Dxo,YD,Gxo,Oxo,Vxo,W1,bfe,Xxo,zxo,KD,Wxo,Qxo,Hxo,Q1,vfe,Uxo,Jxo,ZD,Yxo,Kxo,Zxo,H1,Ffe,e$o,o$o,eG,r$o,t$o,a$o,U1,Tfe,n$o,s$o,oG,l$o,i$o,d$o,J1,Mfe,c$o,f$o,rG,m$o,g$o,h$o,Y1,Efe,p$o,_$o,tG,u$o,b$o,v$o,K1,Cfe,F$o,T$o,aG,M$o,E$o,C$o,Z1,wfe,w$o,A$o,nG,y$o,L$o,x$o,eb,Afe,$$o,k$o,sG,S$o,R$o,B$o,ob,yfe,P$o,I$o,lG,q$o,N$o,j$o,rb,Lfe,D$o,G$o,iG,O$o,V$o,X$o,tb,xfe,z$o,W$o,dG,Q$o,H$o,U$o,ab,$fe,J$o,Y$o,cG,K$o,Z$o,eko,nb,kfe,oko,rko,fG,tko,ako,nko,sb,Sfe,sko,lko,mG,iko,dko,cko,lb,Rfe,fko,mko,gG,gko,hko,pko,ib,Bfe,_ko,uko,hG,bko,vko,Fko,db,Pfe,Tko,Mko,pG,Eko,Cko,wko,cb,Ife,Ako,yko,_G,Lko,xko,$ko,fb,qfe,kko,Sko,uG,Rko,Bko,Pko,mb,Nfe,Iko,qko,bG,Nko,jko,Dko,gb,jfe,Gko,Oko,vG,Vko,Xko,zko,hb,Dfe,Wko,Qko,FG,Hko,Uko,Jko,pb,Gfe,Yko,Kko,TG,Zko,eSo,oSo,_b,Ofe,rSo,tSo,MG,aSo,nSo,sSo,ub,Vfe,lSo,iSo,EG,dSo,cSo,fSo,bb,Xfe,mSo,gSo,CG,hSo,pSo,_So,vb,zfe,uSo,bSo,wG,vSo,FSo,TSo,Fb,Wfe,MSo,ESo,AG,CSo,wSo,ASo,Tb,Qfe,ySo,LSo,yG,xSo,$So,kSo,Mb,Hfe,SSo,RSo,LG,BSo,PSo,ISo,Eb,Ufe,qSo,NSo,xG,jSo,DSo,GSo,Cb,Jfe,OSo,VSo,$G,XSo,zSo,WSo,wb,Yfe,QSo,HSo,kG,USo,JSo,YSo,Ab,Kfe,KSo,ZSo,SG,eRo,oRo,rRo,yb,tRo,Zfe,aRo,nRo,eme,sRo,lRo,Lb,Lqe,Oi,xb,ome,uy,iRo,rme,dRo,xqe,Bo,by,cRo,Vi,fRo,RG,mRo,gRo,BG,hRo,pRo,_Ro,vy,uRo,tme,bRo,vRo,FRo,dt,Fy,TRo,ame,MRo,ERo,Xi,CRo,nme,wRo,ARo,PG,yRo,LRo,xRo,$b,$Ro,ro,Ty,kRo,sme,SRo,RRo,Ba,BRo,lme,PRo,IRo,ime,qRo,NRo,dme,jRo,DRo,GRo,Y,kb,cme,ORo,VRo,IG,XRo,zRo,WRo,Sb,fme,QRo,HRo,qG,URo,JRo,YRo,Rb,mme,KRo,ZRo,NG,eBo,oBo,rBo,Bb,gme,tBo,aBo,jG,nBo,sBo,lBo,Pb,hme,iBo,dBo,DG,cBo,fBo,mBo,Ib,pme,gBo,hBo,GG,pBo,_Bo,uBo,qb,_me,bBo,vBo,OG,FBo,TBo,MBo,Nb,ume,EBo,CBo,VG,wBo,ABo,yBo,jb,bme,LBo,xBo,XG,$Bo,kBo,SBo,Db,vme,RBo,BBo,zG,PBo,IBo,qBo,Gb,Fme,NBo,jBo,WG,DBo,GBo,OBo,Ob,Tme,VBo,XBo,QG,zBo,WBo,QBo,Vb,Mme,HBo,UBo,HG,JBo,YBo,KBo,Xb,Eme,ZBo,ePo,UG,oPo,rPo,tPo,zb,Cme,aPo,nPo,JG,sPo,lPo,iPo,Wb,wme,dPo,cPo,YG,fPo,mPo,gPo,Qb,Ame,hPo,pPo,KG,_Po,uPo,bPo,Hb,yme,vPo,FPo,ZG,TPo,MPo,EPo,Ub,Lme,CPo,wPo,eO,APo,yPo,LPo,Jb,xme,xPo,$Po,oO,kPo,SPo,RPo,Yb,$me,BPo,PPo,rO,IPo,qPo,NPo,Kb,kme,jPo,DPo,tO,GPo,OPo,VPo,Zb,Sme,XPo,zPo,aO,WPo,QPo,HPo,ev,Rme,UPo,JPo,nO,YPo,KPo,ZPo,ov,Bme,eIo,oIo,sO,rIo,tIo,aIo,rv,Pme,nIo,sIo,lO,lIo,iIo,dIo,tv,Ime,cIo,fIo,iO,mIo,gIo,hIo,av,qme,pIo,_Io,dO,uIo,bIo,vIo,nv,Nme,FIo,TIo,cO,MIo,EIo,CIo,sv,wIo,jme,AIo,yIo,Dme,LIo,xIo,lv,$qe,zi,iv,Gme,My,$Io,Ome,kIo,kqe,Po,Ey,SIo,Wi,RIo,fO,BIo,PIo,mO,IIo,qIo,NIo,Cy,jIo,Vme,DIo,GIo,OIo,ct,wy,VIo,Xme,XIo,zIo,Qi,WIo,zme,QIo,HIo,gO,UIo,JIo,YIo,dv,KIo,to,Ay,ZIo,Wme,eqo,oqo,Pa,rqo,Qme,tqo,aqo,Hme,nqo,sqo,Ume,lqo,iqo,dqo,Yr,cv,Jme,cqo,fqo,hO,mqo,gqo,hqo,fv,Yme,pqo,_qo,pO,uqo,bqo,vqo,mv,Kme,Fqo,Tqo,_O,Mqo,Eqo,Cqo,gv,Zme,wqo,Aqo,uO,yqo,Lqo,xqo,hv,ege,$qo,kqo,bO,Sqo,Rqo,Bqo,pv,Pqo,oge,Iqo,qqo,rge,Nqo,jqo,_v,Sqe,Hi,uv,tge,yy,Dqo,age,Gqo,Rqe,Io,Ly,Oqo,Ui,Vqo,vO,Xqo,zqo,FO,Wqo,Qqo,Hqo,xy,Uqo,nge,Jqo,Yqo,Kqo,ft,$y,Zqo,sge,eNo,oNo,Ji,rNo,lge,tNo,aNo,TO,nNo,sNo,lNo,bv,iNo,ao,ky,dNo,ige,cNo,fNo,Ia,mNo,dge,gNo,hNo,cge,pNo,_No,fge,uNo,bNo,vNo,U,vv,mge,FNo,TNo,MO,MNo,ENo,CNo,Fv,gge,wNo,ANo,EO,yNo,LNo,xNo,Tv,hge,$No,kNo,CO,SNo,RNo,BNo,Mv,pge,PNo,INo,wO,qNo,NNo,jNo,Ev,_ge,DNo,GNo,AO,ONo,VNo,XNo,Cv,uge,zNo,WNo,yO,QNo,HNo,UNo,wv,bge,JNo,YNo,LO,KNo,ZNo,ejo,Av,vge,ojo,rjo,xO,tjo,ajo,njo,yv,Fge,sjo,ljo,$O,ijo,djo,cjo,Lv,Tge,fjo,mjo,kO,gjo,hjo,pjo,xv,Mge,_jo,ujo,SO,bjo,vjo,Fjo,$v,Ege,Tjo,Mjo,RO,Ejo,Cjo,wjo,kv,Cge,Ajo,yjo,BO,Ljo,xjo,$jo,Sv,wge,kjo,Sjo,PO,Rjo,Bjo,Pjo,Rv,Age,Ijo,qjo,IO,Njo,jjo,Djo,Bv,yge,Gjo,Ojo,qO,Vjo,Xjo,zjo,Pv,Lge,Wjo,Qjo,NO,Hjo,Ujo,Jjo,Iv,xge,Yjo,Kjo,jO,Zjo,eDo,oDo,qv,$ge,rDo,tDo,DO,aDo,nDo,sDo,Nv,kge,lDo,iDo,GO,dDo,cDo,fDo,jv,Sge,mDo,gDo,OO,hDo,pDo,_Do,Dv,Rge,uDo,bDo,VO,vDo,FDo,TDo,Gv,Bge,MDo,EDo,XO,CDo,wDo,ADo,Ov,Pge,yDo,LDo,zO,xDo,$Do,kDo,Vv,Ige,SDo,RDo,WO,BDo,PDo,IDo,Xv,qge,qDo,NDo,QO,jDo,DDo,GDo,zv,Nge,ODo,VDo,HO,XDo,zDo,WDo,Wv,jge,QDo,HDo,UO,UDo,JDo,YDo,Qv,Dge,KDo,ZDo,JO,eGo,oGo,rGo,Hv,Gge,tGo,aGo,YO,nGo,sGo,lGo,Uv,Oge,iGo,dGo,KO,cGo,fGo,mGo,Jv,Vge,gGo,hGo,ZO,pGo,_Go,uGo,Yv,Xge,bGo,vGo,eV,FGo,TGo,MGo,Kv,EGo,zge,CGo,wGo,Wge,AGo,yGo,Zv,Bqe,Yi,eF,Qge,Sy,LGo,Hge,xGo,Pqe,qo,Ry,$Go,Ki,kGo,oV,SGo,RGo,rV,BGo,PGo,IGo,By,qGo,Uge,NGo,jGo,DGo,mt,Py,GGo,Jge,OGo,VGo,Zi,XGo,Yge,zGo,WGo,tV,QGo,HGo,UGo,oF,JGo,no,Iy,YGo,Kge,KGo,ZGo,qa,eOo,Zge,oOo,rOo,ehe,tOo,aOo,ohe,nOo,sOo,lOo,V,rF,rhe,iOo,dOo,aV,cOo,fOo,mOo,tF,the,gOo,hOo,nV,pOo,_Oo,uOo,aF,ahe,bOo,vOo,sV,FOo,TOo,MOo,nF,nhe,EOo,COo,lV,wOo,AOo,yOo,sF,she,LOo,xOo,iV,$Oo,kOo,SOo,lF,lhe,ROo,BOo,dV,POo,IOo,qOo,iF,ihe,NOo,jOo,cV,DOo,GOo,OOo,dF,dhe,VOo,XOo,fV,zOo,WOo,QOo,cF,che,HOo,UOo,mV,JOo,YOo,KOo,fF,fhe,ZOo,eVo,gV,oVo,rVo,tVo,mF,mhe,aVo,nVo,hV,sVo,lVo,iVo,gF,ghe,dVo,cVo,pV,fVo,mVo,gVo,hF,hhe,hVo,pVo,_V,_Vo,uVo,bVo,pF,phe,vVo,FVo,uV,TVo,MVo,EVo,_F,_he,CVo,wVo,bV,AVo,yVo,LVo,uF,uhe,xVo,$Vo,vV,kVo,SVo,RVo,bF,bhe,BVo,PVo,FV,IVo,qVo,NVo,vF,vhe,jVo,DVo,TV,GVo,OVo,VVo,FF,Fhe,XVo,zVo,MV,WVo,QVo,HVo,TF,The,UVo,JVo,EV,YVo,KVo,ZVo,MF,Mhe,eXo,oXo,CV,rXo,tXo,aXo,EF,Ehe,nXo,sXo,wV,lXo,iXo,dXo,CF,Che,cXo,fXo,AV,mXo,gXo,hXo,wF,whe,pXo,_Xo,yV,uXo,bXo,vXo,AF,Ahe,FXo,TXo,LV,MXo,EXo,CXo,yF,yhe,wXo,AXo,xV,yXo,LXo,xXo,LF,Lhe,$Xo,kXo,$V,SXo,RXo,BXo,xF,xhe,PXo,IXo,kV,qXo,NXo,jXo,$F,$he,DXo,GXo,SV,OXo,VXo,XXo,kF,khe,zXo,WXo,RV,QXo,HXo,UXo,SF,She,JXo,YXo,BV,KXo,ZXo,ezo,RF,Rhe,ozo,rzo,PV,tzo,azo,nzo,BF,Bhe,szo,lzo,IV,izo,dzo,czo,PF,Phe,fzo,mzo,qV,gzo,hzo,pzo,IF,Ihe,_zo,uzo,NV,bzo,vzo,Fzo,qF,qhe,Tzo,Mzo,jV,Ezo,Czo,wzo,NF,Nhe,Azo,yzo,DV,Lzo,xzo,$zo,jF,jhe,kzo,Szo,GV,Rzo,Bzo,Pzo,DF,Dhe,Izo,qzo,OV,Nzo,jzo,Dzo,GF,Gzo,Ghe,Ozo,Vzo,Ohe,Xzo,zzo,OF,Iqe,ed,VF,Vhe,qy,Wzo,Xhe,Qzo,qqe,No,Ny,Hzo,od,Uzo,VV,Jzo,Yzo,XV,Kzo,Zzo,eWo,jy,oWo,zhe,rWo,tWo,aWo,gt,Dy,nWo,Whe,sWo,lWo,rd,iWo,Qhe,dWo,cWo,zV,fWo,mWo,gWo,XF,hWo,so,Gy,pWo,Hhe,_Wo,uWo,Na,bWo,Uhe,vWo,FWo,Jhe,TWo,MWo,Yhe,EWo,CWo,wWo,Khe,zF,Zhe,AWo,yWo,WV,LWo,xWo,$Wo,WF,kWo,epe,SWo,RWo,ope,BWo,PWo,QF,Nqe,td,HF,rpe,Oy,IWo,tpe,qWo,jqe,jo,Vy,NWo,ad,jWo,QV,DWo,GWo,HV,OWo,VWo,XWo,Xy,zWo,ape,WWo,QWo,HWo,ht,zy,UWo,npe,JWo,YWo,nd,KWo,spe,ZWo,eQo,UV,oQo,rQo,tQo,UF,aQo,lo,Wy,nQo,lpe,sQo,lQo,ja,iQo,ipe,dQo,cQo,dpe,fQo,mQo,cpe,gQo,hQo,pQo,Fe,JF,fpe,_Qo,uQo,JV,bQo,vQo,FQo,YF,mpe,TQo,MQo,YV,EQo,CQo,wQo,KF,gpe,AQo,yQo,KV,LQo,xQo,$Qo,Bs,hpe,kQo,SQo,ZV,RQo,BQo,eX,PQo,IQo,qQo,ZF,ppe,NQo,jQo,oX,DQo,GQo,OQo,pt,_pe,VQo,XQo,rX,zQo,WQo,tX,QQo,HQo,aX,UQo,JQo,YQo,e0,upe,KQo,ZQo,nX,eHo,oHo,rHo,o0,bpe,tHo,aHo,sX,nHo,sHo,lHo,r0,vpe,iHo,dHo,lX,cHo,fHo,mHo,t0,Fpe,gHo,hHo,iX,pHo,_Ho,uHo,a0,Tpe,bHo,vHo,dX,FHo,THo,MHo,n0,Mpe,EHo,CHo,cX,wHo,AHo,yHo,s0,Epe,LHo,xHo,fX,$Ho,kHo,SHo,l0,RHo,Cpe,BHo,PHo,wpe,IHo,qHo,i0,Dqe,sd,d0,Ape,Qy,NHo,ype,jHo,Gqe,Do,Hy,DHo,ld,GHo,mX,OHo,VHo,gX,XHo,zHo,WHo,Uy,QHo,Lpe,HHo,UHo,JHo,_t,Jy,YHo,xpe,KHo,ZHo,id,eUo,$pe,oUo,rUo,hX,tUo,aUo,nUo,c0,sUo,io,Yy,lUo,kpe,iUo,dUo,Da,cUo,Spe,fUo,mUo,Rpe,gUo,hUo,Bpe,pUo,_Uo,uUo,Ppe,f0,Ipe,bUo,vUo,pX,FUo,TUo,MUo,m0,EUo,qpe,CUo,wUo,Npe,AUo,yUo,g0,Oqe,dd,h0,jpe,Ky,LUo,Dpe,xUo,Vqe,Go,Zy,$Uo,cd,kUo,_X,SUo,RUo,uX,BUo,PUo,IUo,eL,qUo,Gpe,NUo,jUo,DUo,ut,oL,GUo,Ope,OUo,VUo,fd,XUo,Vpe,zUo,WUo,bX,QUo,HUo,UUo,p0,JUo,co,rL,YUo,Xpe,KUo,ZUo,Ga,eJo,zpe,oJo,rJo,Wpe,tJo,aJo,Qpe,nJo,sJo,lJo,ke,_0,Hpe,iJo,dJo,vX,cJo,fJo,mJo,u0,Upe,gJo,hJo,FX,pJo,_Jo,uJo,b0,Jpe,bJo,vJo,TX,FJo,TJo,MJo,v0,Ype,EJo,CJo,MX,wJo,AJo,yJo,F0,Kpe,LJo,xJo,EX,$Jo,kJo,SJo,T0,Zpe,RJo,BJo,CX,PJo,IJo,qJo,M0,e_e,NJo,jJo,wX,DJo,GJo,OJo,E0,o_e,VJo,XJo,AX,zJo,WJo,QJo,C0,r_e,HJo,UJo,yX,JJo,YJo,KJo,w0,ZJo,t_e,eYo,oYo,a_e,rYo,tYo,A0,Xqe,md,y0,n_e,tL,aYo,s_e,nYo,zqe,Oo,aL,sYo,gd,lYo,LX,iYo,dYo,xX,cYo,fYo,mYo,nL,gYo,l_e,hYo,pYo,_Yo,bt,sL,uYo,i_e,bYo,vYo,hd,FYo,d_e,TYo,MYo,$X,EYo,CYo,wYo,L0,AYo,fo,lL,yYo,c_e,LYo,xYo,Oa,$Yo,f_e,kYo,SYo,m_e,RYo,BYo,g_e,PYo,IYo,qYo,Kr,x0,h_e,NYo,jYo,kX,DYo,GYo,OYo,$0,p_e,VYo,XYo,SX,zYo,WYo,QYo,k0,__e,HYo,UYo,RX,JYo,YYo,KYo,S0,u_e,ZYo,eKo,BX,oKo,rKo,tKo,R0,b_e,aKo,nKo,PX,sKo,lKo,iKo,B0,dKo,v_e,cKo,fKo,F_e,mKo,gKo,P0,Wqe,pd,I0,T_e,iL,hKo,M_e,pKo,Qqe,Vo,dL,_Ko,_d,uKo,IX,bKo,vKo,qX,FKo,TKo,MKo,cL,EKo,E_e,CKo,wKo,AKo,vt,fL,yKo,C_e,LKo,xKo,ud,$Ko,w_e,kKo,SKo,NX,RKo,BKo,PKo,q0,IKo,mo,mL,qKo,A_e,NKo,jKo,Va,DKo,y_e,GKo,OKo,L_e,VKo,XKo,x_e,zKo,WKo,QKo,Se,N0,$_e,HKo,UKo,jX,JKo,YKo,KKo,j0,k_e,ZKo,eZo,DX,oZo,rZo,tZo,D0,S_e,aZo,nZo,GX,sZo,lZo,iZo,G0,R_e,dZo,cZo,OX,fZo,mZo,gZo,O0,B_e,hZo,pZo,VX,_Zo,uZo,bZo,V0,P_e,vZo,FZo,XX,TZo,MZo,EZo,X0,I_e,CZo,wZo,zX,AZo,yZo,LZo,z0,q_e,xZo,$Zo,WX,kZo,SZo,RZo,W0,N_e,BZo,PZo,QX,IZo,qZo,NZo,Q0,jZo,j_e,DZo,GZo,D_e,OZo,VZo,H0,Hqe,bd,U0,G_e,gL,XZo,O_e,zZo,Uqe,Xo,hL,WZo,vd,QZo,HX,HZo,UZo,UX,JZo,YZo,KZo,pL,ZZo,V_e,eer,oer,rer,Ft,_L,ter,X_e,aer,ner,Fd,ser,z_e,ler,ier,JX,der,cer,fer,J0,mer,go,uL,ger,W_e,her,per,Xa,_er,Q_e,uer,ber,H_e,ver,Fer,U_e,Ter,Mer,Eer,bL,Y0,J_e,Cer,wer,YX,Aer,yer,Ler,K0,Y_e,xer,$er,KX,ker,Ser,Rer,Z0,Ber,K_e,Per,Ier,Z_e,qer,Ner,eT,Jqe,Td,oT,eue,vL,jer,oue,Der,Yqe,zo,FL,Ger,Md,Oer,ZX,Ver,Xer,ez,zer,Wer,Qer,TL,Her,rue,Uer,Jer,Yer,Tt,ML,Ker,tue,Zer,eor,Ed,oor,aue,ror,tor,oz,aor,nor,sor,rT,lor,ho,EL,ior,nue,dor,cor,za,mor,sue,gor,hor,lue,por,_or,iue,uor,bor,vor,Zr,tT,due,For,Tor,rz,Mor,Eor,Cor,aT,cue,wor,Aor,tz,yor,Lor,xor,nT,fue,$or,kor,az,Sor,Ror,Bor,sT,mue,Por,Ior,nz,qor,Nor,jor,lT,gue,Dor,Gor,sz,Oor,Vor,Xor,iT,zor,hue,Wor,Qor,pue,Hor,Uor,dT,Kqe,Cd,cT,_ue,CL,Jor,uue,Yor,Zqe,Wo,wL,Kor,wd,Zor,lz,err,orr,iz,rrr,trr,arr,AL,nrr,bue,srr,lrr,irr,Mt,yL,drr,vue,crr,frr,Ad,mrr,Fue,grr,hrr,dz,prr,_rr,urr,fT,brr,po,LL,vrr,Tue,Frr,Trr,Wa,Mrr,Mue,Err,Crr,Eue,wrr,Arr,Cue,yrr,Lrr,xrr,yd,mT,wue,$rr,krr,cz,Srr,Rrr,Brr,gT,Aue,Prr,Irr,fz,qrr,Nrr,jrr,hT,yue,Drr,Grr,mz,Orr,Vrr,Xrr,pT,zrr,Lue,Wrr,Qrr,xue,Hrr,Urr,_T,eNe,Ld,uT,$ue,xL,Jrr,kue,Yrr,oNe,Qo,$L,Krr,xd,Zrr,gz,etr,otr,hz,rtr,ttr,atr,kL,ntr,Sue,str,ltr,itr,Et,SL,dtr,Rue,ctr,ftr,$d,mtr,Bue,gtr,htr,pz,ptr,_tr,utr,bT,btr,_o,RL,vtr,Pue,Ftr,Ttr,Qa,Mtr,Iue,Etr,Ctr,que,wtr,Atr,Nue,ytr,Ltr,xtr,BL,vT,jue,$tr,ktr,_z,Str,Rtr,Btr,FT,Due,Ptr,Itr,uz,qtr,Ntr,jtr,TT,Dtr,Gue,Gtr,Otr,Oue,Vtr,Xtr,MT,rNe,kd,ET,Vue,PL,ztr,Xue,Wtr,tNe,Ho,IL,Qtr,Sd,Htr,bz,Utr,Jtr,vz,Ytr,Ktr,Ztr,qL,ear,zue,oar,rar,tar,Ct,NL,aar,Wue,nar,sar,Rd,lar,Que,iar,dar,Fz,car,far,mar,CT,gar,uo,jL,har,Hue,par,_ar,Ha,uar,Uue,bar,Far,Jue,Tar,Mar,Yue,Ear,Car,war,Kue,wT,Zue,Aar,yar,Tz,Lar,xar,$ar,AT,kar,e2e,Sar,Rar,o2e,Bar,Par,yT,aNe,Bd,LT,r2e,DL,Iar,t2e,qar,nNe,Uo,GL,Nar,Pd,jar,Mz,Dar,Gar,Ez,Oar,Var,Xar,OL,zar,a2e,War,Qar,Har,wt,VL,Uar,n2e,Jar,Yar,Id,Kar,s2e,Zar,enr,Cz,onr,rnr,tnr,xT,anr,bo,XL,nnr,l2e,snr,lnr,Ua,inr,i2e,dnr,cnr,d2e,fnr,mnr,c2e,gnr,hnr,pnr,Ja,$T,f2e,_nr,unr,wz,bnr,vnr,Fnr,kT,m2e,Tnr,Mnr,Az,Enr,Cnr,wnr,ST,g2e,Anr,ynr,yz,Lnr,xnr,$nr,RT,h2e,knr,Snr,Lz,Rnr,Bnr,Pnr,BT,Inr,p2e,qnr,Nnr,_2e,jnr,Dnr,PT,sNe,qd,IT,u2e,zL,Gnr,b2e,Onr,lNe,Jo,WL,Vnr,Nd,Xnr,xz,znr,Wnr,$z,Qnr,Hnr,Unr,QL,Jnr,v2e,Ynr,Knr,Znr,At,HL,esr,F2e,osr,rsr,jd,tsr,T2e,asr,nsr,kz,ssr,lsr,isr,qT,dsr,vo,UL,csr,M2e,fsr,msr,Ya,gsr,E2e,hsr,psr,C2e,_sr,usr,w2e,bsr,vsr,Fsr,A2e,NT,y2e,Tsr,Msr,Sz,Esr,Csr,wsr,jT,Asr,L2e,ysr,Lsr,x2e,xsr,$sr,DT,iNe,Dd,GT,$2e,JL,ksr,k2e,Ssr,dNe,Yo,YL,Rsr,Gd,Bsr,Rz,Psr,Isr,Bz,qsr,Nsr,jsr,KL,Dsr,S2e,Gsr,Osr,Vsr,yt,ZL,Xsr,R2e,zsr,Wsr,Od,Qsr,B2e,Hsr,Usr,Pz,Jsr,Ysr,Ksr,OT,Zsr,wr,e8,elr,P2e,olr,rlr,Ka,tlr,I2e,alr,nlr,q2e,slr,llr,N2e,ilr,dlr,clr,N,VT,j2e,flr,mlr,Iz,glr,hlr,plr,XT,D2e,_lr,ulr,qz,blr,vlr,Flr,zT,G2e,Tlr,Mlr,Nz,Elr,Clr,wlr,WT,O2e,Alr,ylr,jz,Llr,xlr,$lr,QT,V2e,klr,Slr,Dz,Rlr,Blr,Plr,HT,X2e,Ilr,qlr,Gz,Nlr,jlr,Dlr,UT,z2e,Glr,Olr,Oz,Vlr,Xlr,zlr,JT,W2e,Wlr,Qlr,Vz,Hlr,Ulr,Jlr,YT,Q2e,Ylr,Klr,Xz,Zlr,eir,oir,KT,H2e,rir,tir,zz,air,nir,sir,ZT,U2e,lir,iir,Wz,dir,cir,fir,e7,J2e,mir,gir,Qz,hir,pir,_ir,o7,Y2e,uir,bir,Hz,vir,Fir,Tir,r7,K2e,Mir,Eir,Uz,Cir,wir,Air,t7,Z2e,yir,Lir,Jz,xir,$ir,kir,a7,e1e,Sir,Rir,Yz,Bir,Pir,Iir,n7,o1e,qir,Nir,Kz,jir,Dir,Gir,Ps,r1e,Oir,Vir,Zz,Xir,zir,eW,Wir,Qir,Hir,s7,t1e,Uir,Jir,oW,Yir,Kir,Zir,l7,a1e,edr,odr,rW,rdr,tdr,adr,i7,n1e,ndr,sdr,tW,ldr,idr,ddr,d7,s1e,cdr,fdr,aW,mdr,gdr,hdr,c7,l1e,pdr,_dr,nW,udr,bdr,vdr,f7,i1e,Fdr,Tdr,sW,Mdr,Edr,Cdr,m7,d1e,wdr,Adr,lW,ydr,Ldr,xdr,g7,c1e,$dr,kdr,iW,Sdr,Rdr,Bdr,h7,f1e,Pdr,Idr,dW,qdr,Ndr,jdr,p7,m1e,Ddr,Gdr,cW,Odr,Vdr,Xdr,_7,g1e,zdr,Wdr,fW,Qdr,Hdr,Udr,u7,h1e,Jdr,Ydr,mW,Kdr,Zdr,ecr,b7,p1e,ocr,rcr,gW,tcr,acr,ncr,v7,_1e,scr,lcr,hW,icr,dcr,ccr,F7,u1e,fcr,mcr,pW,gcr,hcr,pcr,T7,b1e,_cr,ucr,_W,bcr,vcr,Fcr,M7,v1e,Tcr,Mcr,uW,Ecr,Ccr,wcr,E7,F1e,Acr,ycr,bW,Lcr,xcr,$cr,C7,T1e,kcr,Scr,vW,Rcr,Bcr,Pcr,w7,M1e,Icr,qcr,FW,Ncr,jcr,Dcr,A7,E1e,Gcr,Ocr,TW,Vcr,Xcr,zcr,y7,C1e,Wcr,Qcr,MW,Hcr,Ucr,Jcr,L7,w1e,Ycr,Kcr,EW,Zcr,efr,ofr,x7,A1e,rfr,tfr,CW,afr,nfr,sfr,$7,y1e,lfr,ifr,wW,dfr,cfr,ffr,k7,L1e,mfr,gfr,AW,hfr,pfr,_fr,S7,x1e,ufr,bfr,yW,vfr,Ffr,Tfr,R7,$1e,Mfr,Efr,LW,Cfr,wfr,Afr,B7,cNe,Vd,P7,k1e,o8,yfr,S1e,Lfr,fNe,Ko,r8,xfr,Xd,$fr,xW,kfr,Sfr,$W,Rfr,Bfr,Pfr,t8,Ifr,R1e,qfr,Nfr,jfr,Lt,a8,Dfr,B1e,Gfr,Ofr,zd,Vfr,P1e,Xfr,zfr,kW,Wfr,Qfr,Hfr,I7,Ufr,Ar,n8,Jfr,I1e,Yfr,Kfr,Za,Zfr,q1e,emr,omr,N1e,rmr,tmr,j1e,amr,nmr,smr,se,q7,D1e,lmr,imr,SW,dmr,cmr,fmr,N7,G1e,mmr,gmr,RW,hmr,pmr,_mr,j7,O1e,umr,bmr,BW,vmr,Fmr,Tmr,D7,V1e,Mmr,Emr,PW,Cmr,wmr,Amr,G7,X1e,ymr,Lmr,IW,xmr,$mr,kmr,O7,z1e,Smr,Rmr,qW,Bmr,Pmr,Imr,V7,W1e,qmr,Nmr,NW,jmr,Dmr,Gmr,X7,Q1e,Omr,Vmr,jW,Xmr,zmr,Wmr,z7,H1e,Qmr,Hmr,DW,Umr,Jmr,Ymr,W7,U1e,Kmr,Zmr,GW,egr,ogr,rgr,Q7,J1e,tgr,agr,OW,ngr,sgr,lgr,H7,Y1e,igr,dgr,VW,cgr,fgr,mgr,U7,K1e,ggr,hgr,XW,pgr,_gr,ugr,J7,Z1e,bgr,vgr,zW,Fgr,Tgr,Mgr,Y7,ebe,Egr,Cgr,WW,wgr,Agr,ygr,K7,obe,Lgr,xgr,QW,$gr,kgr,Sgr,Z7,rbe,Rgr,Bgr,HW,Pgr,Igr,qgr,eM,tbe,Ngr,jgr,UW,Dgr,Ggr,Ogr,oM,abe,Vgr,Xgr,JW,zgr,Wgr,Qgr,rM,nbe,Hgr,Ugr,YW,Jgr,Ygr,Kgr,tM,sbe,Zgr,ehr,KW,ohr,rhr,thr,aM,lbe,ahr,nhr,ZW,shr,lhr,ihr,nM,ibe,dhr,chr,eQ,fhr,mhr,ghr,sM,mNe,Wd,lM,dbe,s8,hhr,cbe,phr,gNe,Zo,l8,_hr,Qd,uhr,oQ,bhr,vhr,rQ,Fhr,Thr,Mhr,i8,Ehr,fbe,Chr,whr,Ahr,xt,d8,yhr,mbe,Lhr,xhr,Hd,$hr,gbe,khr,Shr,tQ,Rhr,Bhr,Phr,iM,Ihr,yr,c8,qhr,hbe,Nhr,jhr,en,Dhr,pbe,Ghr,Ohr,_be,Vhr,Xhr,ube,zhr,Whr,Qhr,Te,dM,bbe,Hhr,Uhr,aQ,Jhr,Yhr,Khr,cM,vbe,Zhr,epr,nQ,opr,rpr,tpr,fM,Fbe,apr,npr,sQ,spr,lpr,ipr,mM,Tbe,dpr,cpr,lQ,fpr,mpr,gpr,gM,Mbe,hpr,ppr,iQ,_pr,upr,bpr,hM,Ebe,vpr,Fpr,dQ,Tpr,Mpr,Epr,pM,Cbe,Cpr,wpr,cQ,Apr,ypr,Lpr,_M,wbe,xpr,$pr,fQ,kpr,Spr,Rpr,uM,Abe,Bpr,Ppr,mQ,Ipr,qpr,Npr,bM,ybe,jpr,Dpr,gQ,Gpr,Opr,Vpr,vM,Lbe,Xpr,zpr,hQ,Wpr,Qpr,Hpr,FM,xbe,Upr,Jpr,pQ,Ypr,Kpr,Zpr,TM,hNe,Ud,MM,$be,f8,e_r,kbe,o_r,pNe,er,m8,r_r,Jd,t_r,_Q,a_r,n_r,uQ,s_r,l_r,i_r,g8,d_r,Sbe,c_r,f_r,m_r,$t,h8,g_r,Rbe,h_r,p_r,Yd,__r,Bbe,u_r,b_r,bQ,v_r,F_r,T_r,EM,M_r,Lr,p8,E_r,Pbe,C_r,w_r,on,A_r,Ibe,y_r,L_r,qbe,x_r,$_r,Nbe,k_r,S_r,R_r,rn,CM,jbe,B_r,P_r,vQ,I_r,q_r,N_r,wM,Dbe,j_r,D_r,FQ,G_r,O_r,V_r,AM,Gbe,X_r,z_r,TQ,W_r,Q_r,H_r,yM,Obe,U_r,J_r,MQ,Y_r,K_r,Z_r,LM,_Ne,Kd,xM,Vbe,_8,eur,Xbe,our,uNe,or,u8,rur,Zd,tur,EQ,aur,nur,CQ,sur,lur,iur,b8,dur,zbe,cur,fur,mur,kt,v8,gur,Wbe,hur,pur,ec,_ur,Qbe,uur,bur,wQ,vur,Fur,Tur,$M,Mur,xr,F8,Eur,Hbe,Cur,wur,tn,Aur,Ube,yur,Lur,Jbe,xur,$ur,Ybe,kur,Sur,Rur,ie,kM,Kbe,Bur,Pur,AQ,Iur,qur,Nur,SM,Zbe,jur,Dur,yQ,Gur,Our,Vur,RM,eve,Xur,zur,LQ,Wur,Qur,Hur,BM,ove,Uur,Jur,xQ,Yur,Kur,Zur,PM,rve,e2r,o2r,$Q,r2r,t2r,a2r,IM,tve,n2r,s2r,kQ,l2r,i2r,d2r,qM,ave,c2r,f2r,SQ,m2r,g2r,h2r,NM,nve,p2r,_2r,RQ,u2r,b2r,v2r,jM,sve,F2r,T2r,BQ,M2r,E2r,C2r,DM,lve,w2r,A2r,PQ,y2r,L2r,x2r,GM,ive,$2r,k2r,IQ,S2r,R2r,B2r,OM,dve,P2r,I2r,qQ,q2r,N2r,j2r,VM,cve,D2r,G2r,NQ,O2r,V2r,X2r,XM,fve,z2r,W2r,jQ,Q2r,H2r,U2r,zM,mve,J2r,Y2r,DQ,K2r,Z2r,e1r,WM,gve,o1r,r1r,GQ,t1r,a1r,n1r,QM,hve,s1r,l1r,OQ,i1r,d1r,c1r,HM,pve,f1r,m1r,VQ,g1r,h1r,p1r,UM,_ve,_1r,u1r,XQ,b1r,v1r,F1r,JM,uve,T1r,M1r,zQ,E1r,C1r,w1r,YM,bNe,oc,KM,bve,T8,A1r,vve,y1r,vNe,rr,M8,L1r,rc,x1r,WQ,$1r,k1r,QQ,S1r,R1r,B1r,E8,P1r,Fve,I1r,q1r,N1r,St,C8,j1r,Tve,D1r,G1r,tc,O1r,Mve,V1r,X1r,HQ,z1r,W1r,Q1r,ZM,H1r,$r,w8,U1r,Eve,J1r,Y1r,an,K1r,Cve,Z1r,ebr,wve,obr,rbr,Ave,tbr,abr,nbr,ye,e4,yve,sbr,lbr,UQ,ibr,dbr,cbr,o4,Lve,fbr,mbr,JQ,gbr,hbr,pbr,r4,xve,_br,ubr,YQ,bbr,vbr,Fbr,t4,$ve,Tbr,Mbr,KQ,Ebr,Cbr,wbr,a4,kve,Abr,ybr,ZQ,Lbr,xbr,$br,n4,Sve,kbr,Sbr,eH,Rbr,Bbr,Pbr,s4,Rve,Ibr,qbr,oH,Nbr,jbr,Dbr,l4,Bve,Gbr,Obr,rH,Vbr,Xbr,zbr,i4,Pve,Wbr,Qbr,tH,Hbr,Ubr,Jbr,d4,Ive,Ybr,Kbr,aH,Zbr,evr,ovr,c4,FNe,ac,f4,qve,A8,rvr,Nve,tvr,TNe,tr,y8,avr,nc,nvr,nH,svr,lvr,sH,ivr,dvr,cvr,L8,fvr,jve,mvr,gvr,hvr,Rt,x8,pvr,Dve,_vr,uvr,sc,bvr,Gve,vvr,Fvr,lH,Tvr,Mvr,Evr,m4,Cvr,kr,$8,wvr,Ove,Avr,yvr,nn,Lvr,Vve,xvr,$vr,Xve,kvr,Svr,zve,Rvr,Bvr,Pvr,ee,g4,Wve,Ivr,qvr,iH,Nvr,jvr,Dvr,h4,Qve,Gvr,Ovr,dH,Vvr,Xvr,zvr,p4,Hve,Wvr,Qvr,cH,Hvr,Uvr,Jvr,_4,Uve,Yvr,Kvr,fH,Zvr,eFr,oFr,u4,Jve,rFr,tFr,mH,aFr,nFr,sFr,b4,Yve,lFr,iFr,gH,dFr,cFr,fFr,v4,Kve,mFr,gFr,hH,hFr,pFr,_Fr,F4,Zve,uFr,bFr,pH,vFr,FFr,TFr,T4,eFe,MFr,EFr,_H,CFr,wFr,AFr,M4,oFe,yFr,LFr,uH,xFr,$Fr,kFr,E4,rFe,SFr,RFr,bH,BFr,PFr,IFr,C4,tFe,qFr,NFr,vH,jFr,DFr,GFr,w4,aFe,OFr,VFr,FH,XFr,zFr,WFr,A4,nFe,QFr,HFr,TH,UFr,JFr,YFr,y4,sFe,KFr,ZFr,MH,e0r,o0r,r0r,L4,lFe,t0r,a0r,EH,n0r,s0r,l0r,x4,iFe,i0r,d0r,CH,c0r,f0r,m0r,$4,dFe,g0r,h0r,wH,p0r,_0r,u0r,k4,cFe,b0r,v0r,AH,F0r,T0r,M0r,S4,fFe,E0r,C0r,yH,w0r,A0r,y0r,R4,mFe,L0r,x0r,LH,$0r,k0r,S0r,B4,gFe,R0r,B0r,xH,P0r,I0r,q0r,P4,hFe,N0r,j0r,$H,D0r,G0r,O0r,I4,pFe,V0r,X0r,kH,z0r,W0r,Q0r,q4,_Fe,H0r,U0r,SH,J0r,Y0r,K0r,N4,uFe,Z0r,eTr,RH,oTr,rTr,tTr,j4,MNe,lc,D4,bFe,k8,aTr,vFe,nTr,ENe,ar,S8,sTr,ic,lTr,BH,iTr,dTr,PH,cTr,fTr,mTr,R8,gTr,FFe,hTr,pTr,_Tr,Bt,B8,uTr,TFe,bTr,vTr,dc,FTr,MFe,TTr,MTr,IH,ETr,CTr,wTr,G4,ATr,Sr,P8,yTr,EFe,LTr,xTr,sn,$Tr,CFe,kTr,STr,wFe,RTr,BTr,AFe,PTr,ITr,qTr,he,O4,yFe,NTr,jTr,qH,DTr,GTr,OTr,V4,LFe,VTr,XTr,NH,zTr,WTr,QTr,X4,xFe,HTr,UTr,jH,JTr,YTr,KTr,z4,$Fe,ZTr,e7r,DH,o7r,r7r,t7r,W4,kFe,a7r,n7r,GH,s7r,l7r,i7r,Q4,SFe,d7r,c7r,OH,f7r,m7r,g7r,H4,RFe,h7r,p7r,VH,_7r,u7r,b7r,U4,BFe,v7r,F7r,XH,T7r,M7r,E7r,J4,PFe,C7r,w7r,zH,A7r,y7r,L7r,Y4,IFe,x7r,$7r,WH,k7r,S7r,R7r,K4,qFe,B7r,P7r,QH,I7r,q7r,N7r,Z4,NFe,j7r,D7r,HH,G7r,O7r,V7r,eE,jFe,X7r,z7r,UH,W7r,Q7r,H7r,oE,DFe,U7r,J7r,JH,Y7r,K7r,Z7r,rE,GFe,eMr,oMr,YH,rMr,tMr,aMr,tE,OFe,nMr,sMr,KH,lMr,iMr,dMr,aE,VFe,cMr,fMr,ZH,mMr,gMr,hMr,nE,CNe,cc,sE,XFe,I8,pMr,zFe,_Mr,wNe,nr,q8,uMr,fc,bMr,eU,vMr,FMr,oU,TMr,MMr,EMr,N8,CMr,WFe,wMr,AMr,yMr,Pt,j8,LMr,QFe,xMr,$Mr,mc,kMr,HFe,SMr,RMr,rU,BMr,PMr,IMr,lE,qMr,Rr,D8,NMr,UFe,jMr,DMr,ln,GMr,JFe,OMr,VMr,YFe,XMr,zMr,KFe,WMr,QMr,HMr,G8,iE,ZFe,UMr,JMr,tU,YMr,KMr,ZMr,dE,e0e,e4r,o4r,aU,r4r,t4r,a4r,cE,ANe,gc,fE,o0e,O8,n4r,r0e,s4r,yNe,sr,V8,l4r,hc,i4r,nU,d4r,c4r,sU,f4r,m4r,g4r,X8,h4r,t0e,p4r,_4r,u4r,It,z8,b4r,a0e,v4r,F4r,pc,T4r,n0e,M4r,E4r,lU,C4r,w4r,A4r,mE,y4r,Br,W8,L4r,s0e,x4r,$4r,dn,k4r,l0e,S4r,R4r,i0e,B4r,P4r,d0e,I4r,q4r,N4r,c0e,gE,f0e,j4r,D4r,iU,G4r,O4r,V4r,hE,LNe,_c,pE,m0e,Q8,X4r,g0e,z4r,xNe,lr,H8,W4r,uc,Q4r,dU,H4r,U4r,cU,J4r,Y4r,K4r,U8,Z4r,h0e,eEr,oEr,rEr,qt,J8,tEr,p0e,aEr,nEr,bc,sEr,_0e,lEr,iEr,fU,dEr,cEr,fEr,_E,mEr,Pr,Y8,gEr,u0e,hEr,pEr,cn,_Er,b0e,uEr,bEr,v0e,vEr,FEr,F0e,TEr,MEr,EEr,de,uE,T0e,CEr,wEr,mU,AEr,yEr,LEr,bE,M0e,xEr,$Er,gU,kEr,SEr,REr,vE,E0e,BEr,PEr,hU,IEr,qEr,NEr,FE,C0e,jEr,DEr,pU,GEr,OEr,VEr,TE,w0e,XEr,zEr,_U,WEr,QEr,HEr,ME,A0e,UEr,JEr,uU,YEr,KEr,ZEr,EE,y0e,eCr,oCr,bU,rCr,tCr,aCr,CE,L0e,nCr,sCr,vU,lCr,iCr,dCr,wE,x0e,cCr,fCr,FU,mCr,gCr,hCr,AE,$0e,pCr,_Cr,TU,uCr,bCr,vCr,yE,k0e,FCr,TCr,MU,MCr,ECr,CCr,LE,S0e,wCr,ACr,EU,yCr,LCr,xCr,xE,R0e,$Cr,kCr,CU,SCr,RCr,BCr,$E,B0e,PCr,ICr,wU,qCr,NCr,jCr,kE,P0e,DCr,GCr,AU,OCr,VCr,XCr,SE,I0e,zCr,WCr,yU,QCr,HCr,UCr,RE,q0e,JCr,YCr,LU,KCr,ZCr,e5r,BE,N0e,o5r,r5r,xU,t5r,a5r,n5r,PE,j0e,s5r,l5r,$U,i5r,d5r,c5r,IE,D0e,f5r,m5r,kU,g5r,h5r,p5r,qE,$Ne,vc,NE,G0e,K8,_5r,O0e,u5r,kNe,ir,Z8,b5r,Fc,v5r,SU,F5r,T5r,RU,M5r,E5r,C5r,e9,w5r,V0e,A5r,y5r,L5r,Nt,o9,x5r,X0e,$5r,k5r,Tc,S5r,z0e,R5r,B5r,BU,P5r,I5r,q5r,jE,N5r,Ir,r9,j5r,W0e,D5r,G5r,fn,O5r,Q0e,V5r,X5r,H0e,z5r,W5r,U0e,Q5r,H5r,U5r,ce,DE,J0e,J5r,Y5r,PU,K5r,Z5r,e3r,GE,Y0e,o3r,r3r,IU,t3r,a3r,n3r,OE,K0e,s3r,l3r,qU,i3r,d3r,c3r,VE,Z0e,f3r,m3r,NU,g3r,h3r,p3r,XE,eTe,_3r,u3r,jU,b3r,v3r,F3r,zE,oTe,T3r,M3r,DU,E3r,C3r,w3r,WE,rTe,A3r,y3r,GU,L3r,x3r,$3r,QE,tTe,k3r,S3r,OU,R3r,B3r,P3r,HE,aTe,I3r,q3r,VU,N3r,j3r,D3r,UE,nTe,G3r,O3r,XU,V3r,X3r,z3r,JE,sTe,W3r,Q3r,zU,H3r,U3r,J3r,YE,lTe,Y3r,K3r,WU,Z3r,ewr,owr,KE,iTe,rwr,twr,QU,awr,nwr,swr,ZE,dTe,lwr,iwr,HU,dwr,cwr,fwr,eC,cTe,mwr,gwr,UU,hwr,pwr,_wr,oC,fTe,uwr,bwr,JU,vwr,Fwr,Twr,rC,mTe,Mwr,Ewr,YU,Cwr,wwr,Awr,tC,gTe,ywr,Lwr,KU,xwr,$wr,kwr,aC,hTe,Swr,Rwr,ZU,Bwr,Pwr,Iwr,nC,pTe,qwr,Nwr,eJ,jwr,Dwr,Gwr,sC,SNe,Mc,lC,_Te,t9,Owr,uTe,Vwr,RNe,dr,a9,Xwr,Ec,zwr,oJ,Wwr,Qwr,rJ,Hwr,Uwr,Jwr,n9,Ywr,bTe,Kwr,Zwr,eAr,jt,s9,oAr,vTe,rAr,tAr,Cc,aAr,FTe,nAr,sAr,tJ,lAr,iAr,dAr,iC,cAr,qr,l9,fAr,TTe,mAr,gAr,mn,hAr,MTe,pAr,_Ar,ETe,uAr,bAr,CTe,vAr,FAr,TAr,wTe,dC,ATe,MAr,EAr,aJ,CAr,wAr,AAr,cC,BNe,wc,fC,yTe,i9,yAr,LTe,LAr,PNe,cr,d9,xAr,Ac,$Ar,nJ,kAr,SAr,sJ,RAr,BAr,PAr,c9,IAr,xTe,qAr,NAr,jAr,Dt,f9,DAr,$Te,GAr,OAr,yc,VAr,kTe,XAr,zAr,lJ,WAr,QAr,HAr,mC,UAr,Nr,m9,JAr,STe,YAr,KAr,gn,ZAr,RTe,e6r,o6r,BTe,r6r,t6r,PTe,a6r,n6r,s6r,ITe,gC,qTe,l6r,i6r,iJ,d6r,c6r,f6r,hC,INe,Lc,pC,NTe,g9,m6r,jTe,g6r,qNe,fr,h9,h6r,xc,p6r,dJ,_6r,u6r,cJ,b6r,v6r,F6r,p9,T6r,DTe,M6r,E6r,C6r,Gt,_9,w6r,GTe,A6r,y6r,$c,L6r,OTe,x6r,$6r,fJ,k6r,S6r,R6r,_C,B6r,jr,u9,P6r,VTe,I6r,q6r,hn,N6r,XTe,j6r,D6r,zTe,G6r,O6r,WTe,V6r,X6r,z6r,re,uC,QTe,W6r,Q6r,mJ,H6r,U6r,J6r,bC,HTe,Y6r,K6r,gJ,Z6r,eyr,oyr,vC,UTe,ryr,tyr,hJ,ayr,nyr,syr,FC,JTe,lyr,iyr,pJ,dyr,cyr,fyr,TC,YTe,myr,gyr,_J,hyr,pyr,_yr,MC,KTe,uyr,byr,uJ,vyr,Fyr,Tyr,EC,ZTe,Myr,Eyr,bJ,Cyr,wyr,Ayr,CC,e7e,yyr,Lyr,vJ,xyr,$yr,kyr,wC,o7e,Syr,Ryr,FJ,Byr,Pyr,Iyr,AC,r7e,qyr,Nyr,TJ,jyr,Dyr,Gyr,yC,t7e,Oyr,Vyr,MJ,Xyr,zyr,Wyr,LC,a7e,Qyr,Hyr,EJ,Uyr,Jyr,Yyr,xC,n7e,Kyr,Zyr,CJ,eLr,oLr,rLr,$C,s7e,tLr,aLr,wJ,nLr,sLr,lLr,kC,l7e,iLr,dLr,AJ,cLr,fLr,mLr,SC,i7e,gLr,hLr,yJ,pLr,_Lr,uLr,RC,d7e,bLr,vLr,LJ,FLr,TLr,MLr,BC,c7e,ELr,CLr,xJ,wLr,ALr,yLr,PC,f7e,LLr,xLr,$J,$Lr,kLr,SLr,IC,m7e,RLr,BLr,kJ,PLr,ILr,qLr,qC,g7e,NLr,jLr,SJ,DLr,GLr,OLr,NC,h7e,VLr,XLr,RJ,zLr,WLr,QLr,jC,p7e,HLr,ULr,BJ,JLr,YLr,KLr,DC,_7e,ZLr,e8r,PJ,o8r,r8r,t8r,GC,u7e,a8r,n8r,IJ,s8r,l8r,i8r,OC,NNe,kc,VC,b7e,b9,d8r,v7e,c8r,jNe,mr,v9,f8r,Sc,m8r,qJ,g8r,h8r,NJ,p8r,_8r,u8r,F9,b8r,F7e,v8r,F8r,T8r,Ot,T9,M8r,T7e,E8r,C8r,Rc,w8r,M7e,A8r,y8r,jJ,L8r,x8r,$8r,XC,k8r,Dr,M9,S8r,E7e,R8r,B8r,pn,P8r,C7e,I8r,q8r,w7e,N8r,j8r,A7e,D8r,G8r,O8r,Re,zC,y7e,V8r,X8r,DJ,z8r,W8r,Q8r,WC,L7e,H8r,U8r,GJ,J8r,Y8r,K8r,QC,x7e,Z8r,e9r,OJ,o9r,r9r,t9r,HC,$7e,a9r,n9r,VJ,s9r,l9r,i9r,UC,k7e,d9r,c9r,XJ,f9r,m9r,g9r,JC,S7e,h9r,p9r,zJ,_9r,u9r,b9r,YC,R7e,v9r,F9r,WJ,T9r,M9r,E9r,KC,B7e,C9r,w9r,QJ,A9r,y9r,L9r,ZC,P7e,x9r,$9r,HJ,k9r,S9r,R9r,e5,DNe,Bc,o5,I7e,E9,B9r,q7e,P9r,GNe,gr,C9,I9r,Pc,q9r,UJ,N9r,j9r,JJ,D9r,G9r,O9r,w9,V9r,N7e,X9r,z9r,W9r,Vt,A9,Q9r,j7e,H9r,U9r,Ic,J9r,D7e,Y9r,K9r,YJ,Z9r,exr,oxr,r5,rxr,Gr,y9,txr,G7e,axr,nxr,_n,sxr,O7e,lxr,ixr,V7e,dxr,cxr,X7e,fxr,mxr,gxr,Me,t5,z7e,hxr,pxr,KJ,_xr,uxr,bxr,a5,W7e,vxr,Fxr,ZJ,Txr,Mxr,Exr,n5,Q7e,Cxr,wxr,eY,Axr,yxr,Lxr,s5,H7e,xxr,$xr,oY,kxr,Sxr,Rxr,l5,U7e,Bxr,Pxr,rY,Ixr,qxr,Nxr,i5,J7e,jxr,Dxr,tY,Gxr,Oxr,Vxr,d5,Y7e,Xxr,zxr,aY,Wxr,Qxr,Hxr,c5,K7e,Uxr,Jxr,nY,Yxr,Kxr,Zxr,f5,Z7e,e$r,o$r,sY,r$r,t$r,a$r,m5,eMe,n$r,s$r,lY,l$r,i$r,d$r,g5,oMe,c$r,f$r,iY,m$r,g$r,h$r,h5,rMe,p$r,_$r,dY,u$r,b$r,v$r,p5,ONe,qc,_5,tMe,L9,F$r,aMe,T$r,VNe,hr,x9,M$r,Nc,E$r,cY,C$r,w$r,fY,A$r,y$r,L$r,$9,x$r,nMe,$$r,k$r,S$r,Xt,k9,R$r,sMe,B$r,P$r,jc,I$r,lMe,q$r,N$r,mY,j$r,D$r,G$r,u5,O$r,Or,S9,V$r,iMe,X$r,z$r,un,W$r,dMe,Q$r,H$r,cMe,U$r,J$r,fMe,Y$r,K$r,Z$r,Le,b5,mMe,ekr,okr,gY,rkr,tkr,akr,v5,gMe,nkr,skr,hY,lkr,ikr,dkr,F5,hMe,ckr,fkr,pY,mkr,gkr,hkr,T5,pMe,pkr,_kr,_Y,ukr,bkr,vkr,M5,_Me,Fkr,Tkr,uY,Mkr,Ekr,Ckr,E5,uMe,wkr,Akr,bY,ykr,Lkr,xkr,C5,bMe,$kr,kkr,vY,Skr,Rkr,Bkr,w5,vMe,Pkr,Ikr,FY,qkr,Nkr,jkr,A5,FMe,Dkr,Gkr,TY,Okr,Vkr,Xkr,y5,TMe,zkr,Wkr,MY,Qkr,Hkr,Ukr,L5,XNe,Dc,x5,MMe,R9,Jkr,EMe,Ykr,zNe,pr,B9,Kkr,Gc,Zkr,EY,eSr,oSr,CY,rSr,tSr,aSr,P9,nSr,CMe,sSr,lSr,iSr,zt,I9,dSr,wMe,cSr,fSr,Oc,mSr,AMe,gSr,hSr,wY,pSr,_Sr,uSr,$5,bSr,Vr,q9,vSr,yMe,FSr,TSr,bn,MSr,LMe,ESr,CSr,xMe,wSr,ASr,$Me,ySr,LSr,xSr,Be,k5,kMe,$Sr,kSr,AY,SSr,RSr,BSr,S5,SMe,PSr,ISr,yY,qSr,NSr,jSr,R5,RMe,DSr,GSr,LY,OSr,VSr,XSr,B5,BMe,zSr,WSr,xY,QSr,HSr,USr,P5,PMe,JSr,YSr,$Y,KSr,ZSr,eRr,I5,IMe,oRr,rRr,kY,tRr,aRr,nRr,q5,qMe,sRr,lRr,SY,iRr,dRr,cRr,N5,NMe,fRr,mRr,RY,gRr,hRr,pRr,j5,jMe,_Rr,uRr,BY,bRr,vRr,FRr,D5,WNe,Vc,G5,DMe,N9,TRr,GMe,MRr,QNe,_r,j9,ERr,Xc,CRr,PY,wRr,ARr,IY,yRr,LRr,xRr,D9,$Rr,OMe,kRr,SRr,RRr,Wt,G9,BRr,VMe,PRr,IRr,zc,qRr,XMe,NRr,jRr,qY,DRr,GRr,ORr,O5,VRr,Xr,O9,XRr,zMe,zRr,WRr,vn,QRr,WMe,HRr,URr,QMe,JRr,YRr,HMe,KRr,ZRr,eBr,xe,V5,UMe,oBr,rBr,NY,tBr,aBr,nBr,X5,JMe,sBr,lBr,jY,iBr,dBr,cBr,z5,YMe,fBr,mBr,DY,gBr,hBr,pBr,W5,KMe,_Br,uBr,GY,bBr,vBr,FBr,Q5,ZMe,TBr,MBr,OY,EBr,CBr,wBr,H5,e4e,ABr,yBr,VY,LBr,xBr,$Br,U5,o4e,kBr,SBr,XY,RBr,BBr,PBr,J5,r4e,IBr,qBr,zY,NBr,jBr,DBr,Y5,t4e,GBr,OBr,WY,VBr,XBr,zBr,K5,a4e,WBr,QBr,QY,HBr,UBr,JBr,Z5,HNe,Wc,e3,n4e,V9,YBr,s4e,KBr,UNe,ur,X9,ZBr,Qc,ePr,HY,oPr,rPr,UY,tPr,aPr,nPr,z9,sPr,l4e,lPr,iPr,dPr,Qt,W9,cPr,i4e,fPr,mPr,Hc,gPr,d4e,hPr,pPr,JY,_Pr,uPr,bPr,o3,vPr,zr,Q9,FPr,c4e,TPr,MPr,Fn,EPr,f4e,CPr,wPr,m4e,APr,yPr,g4e,LPr,xPr,$Pr,$e,r3,h4e,kPr,SPr,YY,RPr,BPr,PPr,t3,p4e,IPr,qPr,KY,NPr,jPr,DPr,a3,_4e,GPr,OPr,ZY,VPr,XPr,zPr,n3,u4e,WPr,QPr,eK,HPr,UPr,JPr,s3,b4e,YPr,KPr,oK,ZPr,eIr,oIr,l3,v4e,rIr,tIr,rK,aIr,nIr,sIr,i3,F4e,lIr,iIr,tK,dIr,cIr,fIr,d3,T4e,mIr,gIr,aK,hIr,pIr,_Ir,c3,M4e,uIr,bIr,nK,vIr,FIr,TIr,f3,E4e,MIr,EIr,sK,CIr,wIr,AIr,m3,JNe,Uc,g3,C4e,H9,yIr,w4e,LIr,YNe,br,U9,xIr,Jc,$Ir,lK,kIr,SIr,iK,RIr,BIr,PIr,J9,IIr,A4e,qIr,NIr,jIr,Ht,Y9,DIr,y4e,GIr,OIr,Yc,VIr,L4e,XIr,zIr,dK,WIr,QIr,HIr,h3,UIr,Wr,K9,JIr,x4e,YIr,KIr,Tn,ZIr,$4e,eqr,oqr,k4e,rqr,tqr,S4e,aqr,nqr,sqr,De,p3,R4e,lqr,iqr,cK,dqr,cqr,fqr,_3,B4e,mqr,gqr,fK,hqr,pqr,_qr,u3,P4e,uqr,bqr,mK,vqr,Fqr,Tqr,b3,I4e,Mqr,Eqr,gK,Cqr,wqr,Aqr,v3,q4e,yqr,Lqr,hK,xqr,$qr,kqr,F3,N4e,Sqr,Rqr,pK,Bqr,Pqr,Iqr,T3,j4e,qqr,Nqr,_K,jqr,Dqr,Gqr,M3,D4e,Oqr,Vqr,uK,Xqr,zqr,Wqr,E3,KNe,Kc,C3,G4e,Z9,Qqr,O4e,Hqr,ZNe,vr,ex,Uqr,Zc,Jqr,bK,Yqr,Kqr,vK,Zqr,eNr,oNr,ox,rNr,V4e,tNr,aNr,nNr,Ut,rx,sNr,X4e,lNr,iNr,ef,dNr,z4e,cNr,fNr,FK,mNr,gNr,hNr,w3,pNr,Qr,tx,_Nr,W4e,uNr,bNr,Mn,vNr,Q4e,FNr,TNr,H4e,MNr,ENr,U4e,CNr,wNr,ANr,Ge,A3,J4e,yNr,LNr,TK,xNr,$Nr,kNr,y3,Y4e,SNr,RNr,MK,BNr,PNr,INr,L3,K4e,qNr,NNr,EK,jNr,DNr,GNr,x3,Z4e,ONr,VNr,CK,XNr,zNr,WNr,$3,eEe,QNr,HNr,wK,UNr,JNr,YNr,k3,oEe,KNr,ZNr,AK,ejr,ojr,rjr,S3,rEe,tjr,ajr,yK,njr,sjr,ljr,R3,tEe,ijr,djr,LK,cjr,fjr,mjr,B3,eje,of,P3,aEe,ax,gjr,nEe,hjr,oje,Fr,nx,pjr,rf,_jr,xK,ujr,bjr,$K,vjr,Fjr,Tjr,sx,Mjr,sEe,Ejr,Cjr,wjr,Jt,lx,Ajr,lEe,yjr,Ljr,tf,xjr,iEe,$jr,kjr,kK,Sjr,Rjr,Bjr,I3,Pjr,Hr,ix,Ijr,dEe,qjr,Njr,En,jjr,cEe,Djr,Gjr,fEe,Ojr,Vjr,mEe,Xjr,zjr,Wjr,gEe,q3,hEe,Qjr,Hjr,SK,Ujr,Jjr,Yjr,N3,rje,af,j3,pEe,dx,Kjr,_Ee,Zjr,tje,Tr,cx,eDr,nf,oDr,RK,rDr,tDr,BK,aDr,nDr,sDr,fx,lDr,uEe,iDr,dDr,cDr,Yt,mx,fDr,bEe,mDr,gDr,sf,hDr,vEe,pDr,_Dr,PK,uDr,bDr,vDr,D3,FDr,Ur,gx,TDr,FEe,MDr,EDr,Cn,CDr,TEe,wDr,ADr,MEe,yDr,LDr,EEe,xDr,$Dr,kDr,hx,G3,CEe,SDr,RDr,IK,BDr,PDr,IDr,O3,wEe,qDr,NDr,qK,jDr,DDr,GDr,V3,aje,lf,X3,AEe,px,ODr,yEe,VDr,nje,Mr,_x,XDr,df,zDr,NK,WDr,QDr,jK,HDr,UDr,JDr,ux,YDr,LEe,KDr,ZDr,eGr,Kt,bx,oGr,xEe,rGr,tGr,cf,aGr,$Ee,nGr,sGr,DK,lGr,iGr,dGr,z3,cGr,Jr,vx,fGr,kEe,mGr,gGr,wn,hGr,SEe,pGr,_Gr,REe,uGr,bGr,BEe,vGr,FGr,TGr,PEe,W3,IEe,MGr,EGr,GK,CGr,wGr,AGr,Q3,sje;return d=new oe({}),Ca=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),p6=new oe({}),_6=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new yGr({props:{warning:!0,$$slots:{default:[q8t]},$$scope:{ctx:L}}}),u6=new oe({}),b6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L616"}}),T6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L639"}}),Fg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),M6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L762"}}),E6=new oe({}),C6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L399"}}),y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17202/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L413"}}),oh=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),L6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L609"}}),x6=new oe({}),$6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),R6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17202/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),$h=new yGr({props:{$$slots:{default:[D8t]},$$scope:{ctx:L}}}),kh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[G8t]},$$scope:{ctx:L}}}),B6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L328"}}),P6=new oe({}),I6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L87"}}),j6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L101"}}),Jh=new yGr({props:{$$slots:{default:[O8t]},$$scope:{ctx:L}}}),Yh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),D6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L254"}}),G6=new oe({}),O6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L755"}}),X6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (Bloom model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),ep=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Q_=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),W6=new oe({}),Q6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L762"}}),U6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (Bloom model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),U_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),J6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Du=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),Y6=new oe({}),K6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L777"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (Bloom model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Ou=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),y2=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),ry=new oe({}),ty=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L784"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),x2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),m1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),ly=new oe({}),iy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L791"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),h1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),S1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),my=new oe({}),gy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L800"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),B1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[e9t]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Lb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[o9t]},$$scope:{ctx:L}}}),uy=new oe({}),by=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L834"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),$b=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[r9t]},$$scope:{ctx:L}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),lv=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[t9t]},$$scope:{ctx:L}}}),My=new oe({}),Ey=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L841"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),dv=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[a9t]},$$scope:{ctx:L}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),_v=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[n9t]},$$scope:{ctx:L}}}),yy=new oe({}),Ly=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L827"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),bv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[s9t]},$$scope:{ctx:L}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[l9t]},$$scope:{ctx:L}}}),Sy=new oe({}),Ry=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L809"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[i9t]},$$scope:{ctx:L}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),OF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[d9t]},$$scope:{ctx:L}}}),qy=new oe({}),Ny=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L816"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),XF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[c9t]},$$scope:{ctx:L}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[f9t]},$$scope:{ctx:L}}}),Oy=new oe({}),Vy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L850"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[m9t]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),i0=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[g9t]},$$scope:{ctx:L}}}),Qy=new oe({}),Hy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L889"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[h9t]},$$scope:{ctx:L}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[p9t]},$$scope:{ctx:L}}}),Ky=new oe({}),Zy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L896"}}),oL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[_9t]},$$scope:{ctx:L}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),A0=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[u9t]},$$scope:{ctx:L}}}),tL=new oe({}),aL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L919"}}),sL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[b9t]},$$scope:{ctx:L}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[v9t]},$$scope:{ctx:L}}}),iL=new oe({}),dL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L903"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[F9t]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[T9t]},$$scope:{ctx:L}}}),gL=new oe({}),hL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L910"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[M9t]},$$scope:{ctx:L}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[E9t]},$$scope:{ctx:L}}}),vL=new oe({}),FL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L928"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[C9t]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[w9t]},$$scope:{ctx:L}}}),CL=new oe({}),wL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L935"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[A9t]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[y9t]},$$scope:{ctx:L}}}),xL=new oe({}),$L=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L882"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[L9t]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[x9t]},$$scope:{ctx:L}}}),PL=new oe({}),IL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L857"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[$9t]},$$scope:{ctx:L}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),yT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[k9t]},$$scope:{ctx:L}}}),DL=new oe({}),GL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L864"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),xT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[S9t]},$$scope:{ctx:L}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[R9t]},$$scope:{ctx:L}}}),zL=new oe({}),WL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L873"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[B9t]},$$scope:{ctx:L}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[P9t]},$$scope:{ctx:L}}}),JL=new oe({}),YL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[I9t]},$$scope:{ctx:L}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),B7=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[q9t]},$$scope:{ctx:L}}}),o8=new oe({}),r8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),a8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),I7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[N9t]},$$scope:{ctx:L}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[j9t]},$$scope:{ctx:L}}}),s8=new oe({}),l8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),d8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[D9t]},$$scope:{ctx:L}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),TM=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[G9t]},$$scope:{ctx:L}}}),f8=new oe({}),m8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),h8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),EM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[O9t]},$$scope:{ctx:L}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[V9t]},$$scope:{ctx:L}}}),_8=new oe({}),u8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),v8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[X9t]},$$scope:{ctx:L}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[z9t]},$$scope:{ctx:L}}}),T8=new oe({}),M8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),C8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[W9t]},$$scope:{ctx:L}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Q9t]},$$scope:{ctx:L}}}),A8=new oe({}),y8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),x8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[H9t]},$$scope:{ctx:L}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[U9t]},$$scope:{ctx:L}}}),k8=new oe({}),S8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),B8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[J9t]},$$scope:{ctx:L}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),nE=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Y9t]},$$scope:{ctx:L}}}),I8=new oe({}),q8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),j8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),lE=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[K9t]},$$scope:{ctx:L}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),O8=new oe({}),V8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),Q8=new oe({}),H8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),K8=new oe({}),Z8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),o9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),t9=new oe({}),a9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),s9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),i9=new oe({}),d9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),f9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),g9=new oe({}),h9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),_9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),b9=new oe({}),v9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),T9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),E9=new oe({}),C9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),A9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),L9=new oe({}),x9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),k9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),u5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),R9=new oe({}),B9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),I9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),N9=new oe({}),j9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),G9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),V9=new oe({}),X9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),W9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),m3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),H9=new oe({}),U9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),h3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),E3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),Z9=new oe({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),w3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),ax=new oe({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),N3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),dx=new oe({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),D3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),px=new oe({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),f6=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),m6=o("AutoConfig"),Ln=o(", "),xn=a("a"),g6=o("AutoModel"),hi=o(`, and
`),$n=a("a"),h6=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),S$=o("will create a model that is an instance of "),_i=a("a"),R$=o("BertModel"),B$=o("."),Eo=l(),wa=a("p"),P$=o("There is one class of "),uf=a("code"),I$=o("AutoModel"),hGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),tqe=l(),ui=a("h2"),bf=a("a"),Bee=a("span"),F(p6.$$.fragment),pGe=l(),Pee=a("span"),_Ge=o("Extending the Auto Classes"),aqe=l(),kn=a("p"),uGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Iee=a("code"),bGe=o("NewModel"),vGe=o(", make sure you have a "),qee=a("code"),FGe=o("NewModelConfig"),TGe=o(` then you can add those to the auto
classes like this:`),nqe=l(),F(_6.$$.fragment),sqe=l(),q$=a("p"),MGe=o("You will then be able to use the auto classes like you would usually do!"),lqe=l(),F(vf.$$.fragment),iqe=l(),bi=a("h2"),Ff=a("a"),Nee=a("span"),F(u6.$$.fragment),EGe=l(),jee=a("span"),CGe=o("AutoConfig"),dqe=l(),Co=a("div"),F(b6.$$.fragment),wGe=l(),v6=a("p"),AGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),N$=a("a"),yGe=o("from_pretrained()"),LGe=o(" class method."),xGe=l(),F6=a("p"),$Ge=o("This class cannot be instantiated directly using "),Dee=a("code"),kGe=o("__init__()"),SGe=o(" (throws an error)."),RGe=l(),Er=a("div"),F(T6.$$.fragment),BGe=l(),Gee=a("p"),PGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),IGe=l(),vi=a("p"),qGe=o("The configuration class to instantiate is selected based on the "),Oee=a("code"),NGe=o("model_type"),jGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Vee=a("code"),DGe=o("pretrained_model_name_or_path"),GGe=o(":"),OGe=l(),A=a("ul"),Tf=a("li"),Xee=a("strong"),VGe=o("albert"),XGe=o(" \u2014 "),j$=a("a"),zGe=o("AlbertConfig"),WGe=o(" (ALBERT model)"),QGe=l(),Mf=a("li"),zee=a("strong"),HGe=o("bart"),UGe=o(" \u2014 "),D$=a("a"),JGe=o("BartConfig"),YGe=o(" (BART model)"),KGe=l(),Ef=a("li"),Wee=a("strong"),ZGe=o("beit"),eOe=o(" \u2014 "),G$=a("a"),oOe=o("BeitConfig"),rOe=o(" (BEiT model)"),tOe=l(),Cf=a("li"),Qee=a("strong"),aOe=o("bert"),nOe=o(" \u2014 "),O$=a("a"),sOe=o("BertConfig"),lOe=o(" (BERT model)"),iOe=l(),wf=a("li"),Hee=a("strong"),dOe=o("bert-generation"),cOe=o(" \u2014 "),V$=a("a"),fOe=o("BertGenerationConfig"),mOe=o(" (Bert Generation model)"),gOe=l(),Af=a("li"),Uee=a("strong"),hOe=o("big_bird"),pOe=o(" \u2014 "),X$=a("a"),_Oe=o("BigBirdConfig"),uOe=o(" (BigBird model)"),bOe=l(),yf=a("li"),Jee=a("strong"),vOe=o("bigbird_pegasus"),FOe=o(" \u2014 "),z$=a("a"),TOe=o("BigBirdPegasusConfig"),MOe=o(" (BigBirdPegasus model)"),EOe=l(),Lf=a("li"),Yee=a("strong"),COe=o("blenderbot"),wOe=o(" \u2014 "),W$=a("a"),AOe=o("BlenderbotConfig"),yOe=o(" (Blenderbot model)"),LOe=l(),xf=a("li"),Kee=a("strong"),xOe=o("blenderbot-small"),$Oe=o(" \u2014 "),Q$=a("a"),kOe=o("BlenderbotSmallConfig"),SOe=o(" (BlenderbotSmall model)"),ROe=l(),$f=a("li"),Zee=a("strong"),BOe=o("bloom"),POe=o(" \u2014 "),H$=a("a"),IOe=o("BloomConfig"),qOe=o(" (Bloom model)"),NOe=l(),kf=a("li"),eoe=a("strong"),jOe=o("camembert"),DOe=o(" \u2014 "),U$=a("a"),GOe=o("CamembertConfig"),OOe=o(" (CamemBERT model)"),VOe=l(),Sf=a("li"),ooe=a("strong"),XOe=o("canine"),zOe=o(" \u2014 "),J$=a("a"),WOe=o("CanineConfig"),QOe=o(" (Canine model)"),HOe=l(),Rf=a("li"),roe=a("strong"),UOe=o("clip"),JOe=o(" \u2014 "),Y$=a("a"),YOe=o("CLIPConfig"),KOe=o(" (CLIP model)"),ZOe=l(),Bf=a("li"),toe=a("strong"),eVe=o("convbert"),oVe=o(" \u2014 "),K$=a("a"),rVe=o("ConvBertConfig"),tVe=o(" (ConvBERT model)"),aVe=l(),Pf=a("li"),aoe=a("strong"),nVe=o("convnext"),sVe=o(" \u2014 "),Z$=a("a"),lVe=o("ConvNextConfig"),iVe=o(" (ConvNext model)"),dVe=l(),If=a("li"),noe=a("strong"),cVe=o("ctrl"),fVe=o(" \u2014 "),ek=a("a"),mVe=o("CTRLConfig"),gVe=o(" (CTRL model)"),hVe=l(),qf=a("li"),soe=a("strong"),pVe=o("data2vec-audio"),_Ve=o(" \u2014 "),ok=a("a"),uVe=o("Data2VecAudioConfig"),bVe=o(" (Data2VecAudio model)"),vVe=l(),Nf=a("li"),loe=a("strong"),FVe=o("data2vec-text"),TVe=o(" \u2014 "),rk=a("a"),MVe=o("Data2VecTextConfig"),EVe=o(" (Data2VecText model)"),CVe=l(),jf=a("li"),ioe=a("strong"),wVe=o("data2vec-vision"),AVe=o(" \u2014 "),tk=a("a"),yVe=o("Data2VecVisionConfig"),LVe=o(" (Data2VecVision model)"),xVe=l(),Df=a("li"),doe=a("strong"),$Ve=o("deberta"),kVe=o(" \u2014 "),ak=a("a"),SVe=o("DebertaConfig"),RVe=o(" (DeBERTa model)"),BVe=l(),Gf=a("li"),coe=a("strong"),PVe=o("deberta-v2"),IVe=o(" \u2014 "),nk=a("a"),qVe=o("DebertaV2Config"),NVe=o(" (DeBERTa-v2 model)"),jVe=l(),Of=a("li"),foe=a("strong"),DVe=o("decision_transformer"),GVe=o(" \u2014 "),sk=a("a"),OVe=o("DecisionTransformerConfig"),VVe=o(" (Decision Transformer model)"),XVe=l(),Vf=a("li"),moe=a("strong"),zVe=o("deit"),WVe=o(" \u2014 "),lk=a("a"),QVe=o("DeiTConfig"),HVe=o(" (DeiT model)"),UVe=l(),Xf=a("li"),goe=a("strong"),JVe=o("detr"),YVe=o(" \u2014 "),ik=a("a"),KVe=o("DetrConfig"),ZVe=o(" (DETR model)"),eXe=l(),zf=a("li"),hoe=a("strong"),oXe=o("distilbert"),rXe=o(" \u2014 "),dk=a("a"),tXe=o("DistilBertConfig"),aXe=o(" (DistilBERT model)"),nXe=l(),Wf=a("li"),poe=a("strong"),sXe=o("dpr"),lXe=o(" \u2014 "),ck=a("a"),iXe=o("DPRConfig"),dXe=o(" (DPR model)"),cXe=l(),Qf=a("li"),_oe=a("strong"),fXe=o("dpt"),mXe=o(" \u2014 "),fk=a("a"),gXe=o("DPTConfig"),hXe=o(" (DPT model)"),pXe=l(),Hf=a("li"),uoe=a("strong"),_Xe=o("electra"),uXe=o(" \u2014 "),mk=a("a"),bXe=o("ElectraConfig"),vXe=o(" (ELECTRA model)"),FXe=l(),Uf=a("li"),boe=a("strong"),TXe=o("encoder-decoder"),MXe=o(" \u2014 "),gk=a("a"),EXe=o("EncoderDecoderConfig"),CXe=o(" (Encoder decoder model)"),wXe=l(),Jf=a("li"),voe=a("strong"),AXe=o("flaubert"),yXe=o(" \u2014 "),hk=a("a"),LXe=o("FlaubertConfig"),xXe=o(" (FlauBERT model)"),$Xe=l(),Yf=a("li"),Foe=a("strong"),kXe=o("flava"),SXe=o(" \u2014 "),pk=a("a"),RXe=o("FlavaConfig"),BXe=o(" (Flava model)"),PXe=l(),Kf=a("li"),Toe=a("strong"),IXe=o("fnet"),qXe=o(" \u2014 "),_k=a("a"),NXe=o("FNetConfig"),jXe=o(" (FNet model)"),DXe=l(),Zf=a("li"),Moe=a("strong"),GXe=o("fsmt"),OXe=o(" \u2014 "),uk=a("a"),VXe=o("FSMTConfig"),XXe=o(" (FairSeq Machine-Translation model)"),zXe=l(),em=a("li"),Eoe=a("strong"),WXe=o("funnel"),QXe=o(" \u2014 "),bk=a("a"),HXe=o("FunnelConfig"),UXe=o(" (Funnel Transformer model)"),JXe=l(),om=a("li"),Coe=a("strong"),YXe=o("glpn"),KXe=o(" \u2014 "),vk=a("a"),ZXe=o("GLPNConfig"),eze=o(" (GLPN model)"),oze=l(),rm=a("li"),woe=a("strong"),rze=o("gpt2"),tze=o(" \u2014 "),Fk=a("a"),aze=o("GPT2Config"),nze=o(" (OpenAI GPT-2 model)"),sze=l(),tm=a("li"),Aoe=a("strong"),lze=o("gpt_neo"),ize=o(" \u2014 "),Tk=a("a"),dze=o("GPTNeoConfig"),cze=o(" (GPT Neo model)"),fze=l(),am=a("li"),yoe=a("strong"),mze=o("gptj"),gze=o(" \u2014 "),Mk=a("a"),hze=o("GPTJConfig"),pze=o(" (GPT-J model)"),_ze=l(),nm=a("li"),Loe=a("strong"),uze=o("hubert"),bze=o(" \u2014 "),Ek=a("a"),vze=o("HubertConfig"),Fze=o(" (Hubert model)"),Tze=l(),sm=a("li"),xoe=a("strong"),Mze=o("ibert"),Eze=o(" \u2014 "),Ck=a("a"),Cze=o("IBertConfig"),wze=o(" (I-BERT model)"),Aze=l(),lm=a("li"),$oe=a("strong"),yze=o("imagegpt"),Lze=o(" \u2014 "),wk=a("a"),xze=o("ImageGPTConfig"),$ze=o(" (ImageGPT model)"),kze=l(),im=a("li"),koe=a("strong"),Sze=o("layoutlm"),Rze=o(" \u2014 "),Ak=a("a"),Bze=o("LayoutLMConfig"),Pze=o(" (LayoutLM model)"),Ize=l(),dm=a("li"),Soe=a("strong"),qze=o("layoutlmv2"),Nze=o(" \u2014 "),yk=a("a"),jze=o("LayoutLMv2Config"),Dze=o(" (LayoutLMv2 model)"),Gze=l(),cm=a("li"),Roe=a("strong"),Oze=o("led"),Vze=o(" \u2014 "),Lk=a("a"),Xze=o("LEDConfig"),zze=o(" (LED model)"),Wze=l(),fm=a("li"),Boe=a("strong"),Qze=o("longformer"),Hze=o(" \u2014 "),xk=a("a"),Uze=o("LongformerConfig"),Jze=o(" (Longformer model)"),Yze=l(),mm=a("li"),Poe=a("strong"),Kze=o("luke"),Zze=o(" \u2014 "),$k=a("a"),eWe=o("LukeConfig"),oWe=o(" (LUKE model)"),rWe=l(),gm=a("li"),Ioe=a("strong"),tWe=o("lxmert"),aWe=o(" \u2014 "),kk=a("a"),nWe=o("LxmertConfig"),sWe=o(" (LXMERT model)"),lWe=l(),hm=a("li"),qoe=a("strong"),iWe=o("m2m_100"),dWe=o(" \u2014 "),Sk=a("a"),cWe=o("M2M100Config"),fWe=o(" (M2M100 model)"),mWe=l(),pm=a("li"),Noe=a("strong"),gWe=o("marian"),hWe=o(" \u2014 "),Rk=a("a"),pWe=o("MarianConfig"),_We=o(" (Marian model)"),uWe=l(),_m=a("li"),joe=a("strong"),bWe=o("maskformer"),vWe=o(" \u2014 "),Bk=a("a"),FWe=o("MaskFormerConfig"),TWe=o(" (MaskFormer model)"),MWe=l(),um=a("li"),Doe=a("strong"),EWe=o("mbart"),CWe=o(" \u2014 "),Pk=a("a"),wWe=o("MBartConfig"),AWe=o(" (mBART model)"),yWe=l(),bm=a("li"),Goe=a("strong"),LWe=o("megatron-bert"),xWe=o(" \u2014 "),Ik=a("a"),$We=o("MegatronBertConfig"),kWe=o(" (MegatronBert model)"),SWe=l(),vm=a("li"),Ooe=a("strong"),RWe=o("mobilebert"),BWe=o(" \u2014 "),qk=a("a"),PWe=o("MobileBertConfig"),IWe=o(" (MobileBERT model)"),qWe=l(),Fm=a("li"),Voe=a("strong"),NWe=o("mpnet"),jWe=o(" \u2014 "),Nk=a("a"),DWe=o("MPNetConfig"),GWe=o(" (MPNet model)"),OWe=l(),Tm=a("li"),Xoe=a("strong"),VWe=o("mt5"),XWe=o(" \u2014 "),jk=a("a"),zWe=o("MT5Config"),WWe=o(" (mT5 model)"),QWe=l(),Mm=a("li"),zoe=a("strong"),HWe=o("nystromformer"),UWe=o(" \u2014 "),Dk=a("a"),JWe=o("NystromformerConfig"),YWe=o(" (Nystromformer model)"),KWe=l(),Em=a("li"),Woe=a("strong"),ZWe=o("openai-gpt"),eQe=o(" \u2014 "),Gk=a("a"),oQe=o("OpenAIGPTConfig"),rQe=o(" (OpenAI GPT model)"),tQe=l(),Cm=a("li"),Qoe=a("strong"),aQe=o("opt"),nQe=o(" \u2014 "),Ok=a("a"),sQe=o("OPTConfig"),lQe=o(" (OPT model)"),iQe=l(),wm=a("li"),Hoe=a("strong"),dQe=o("pegasus"),cQe=o(" \u2014 "),Vk=a("a"),fQe=o("PegasusConfig"),mQe=o(" (Pegasus model)"),gQe=l(),Am=a("li"),Uoe=a("strong"),hQe=o("perceiver"),pQe=o(" \u2014 "),Xk=a("a"),_Qe=o("PerceiverConfig"),uQe=o(" (Perceiver model)"),bQe=l(),ym=a("li"),Joe=a("strong"),vQe=o("plbart"),FQe=o(" \u2014 "),zk=a("a"),TQe=o("PLBartConfig"),MQe=o(" (PLBart model)"),EQe=l(),Lm=a("li"),Yoe=a("strong"),CQe=o("poolformer"),wQe=o(" \u2014 "),Wk=a("a"),AQe=o("PoolFormerConfig"),yQe=o(" (PoolFormer model)"),LQe=l(),xm=a("li"),Koe=a("strong"),xQe=o("prophetnet"),$Qe=o(" \u2014 "),Qk=a("a"),kQe=o("ProphetNetConfig"),SQe=o(" (ProphetNet model)"),RQe=l(),$m=a("li"),Zoe=a("strong"),BQe=o("qdqbert"),PQe=o(" \u2014 "),Hk=a("a"),IQe=o("QDQBertConfig"),qQe=o(" (QDQBert model)"),NQe=l(),km=a("li"),ere=a("strong"),jQe=o("rag"),DQe=o(" \u2014 "),Uk=a("a"),GQe=o("RagConfig"),OQe=o(" (RAG model)"),VQe=l(),Sm=a("li"),ore=a("strong"),XQe=o("realm"),zQe=o(" \u2014 "),Jk=a("a"),WQe=o("RealmConfig"),QQe=o(" (Realm model)"),HQe=l(),Rm=a("li"),rre=a("strong"),UQe=o("reformer"),JQe=o(" \u2014 "),Yk=a("a"),YQe=o("ReformerConfig"),KQe=o(" (Reformer model)"),ZQe=l(),Bm=a("li"),tre=a("strong"),eHe=o("regnet"),oHe=o(" \u2014 "),Kk=a("a"),rHe=o("RegNetConfig"),tHe=o(" (RegNet model)"),aHe=l(),Pm=a("li"),are=a("strong"),nHe=o("rembert"),sHe=o(" \u2014 "),Zk=a("a"),lHe=o("RemBertConfig"),iHe=o(" (RemBERT model)"),dHe=l(),Im=a("li"),nre=a("strong"),cHe=o("resnet"),fHe=o(" \u2014 "),eS=a("a"),mHe=o("ResNetConfig"),gHe=o(" (ResNet model)"),hHe=l(),qm=a("li"),sre=a("strong"),pHe=o("retribert"),_He=o(" \u2014 "),oS=a("a"),uHe=o("RetriBertConfig"),bHe=o(" (RetriBERT model)"),vHe=l(),Nm=a("li"),lre=a("strong"),FHe=o("roberta"),THe=o(" \u2014 "),rS=a("a"),MHe=o("RobertaConfig"),EHe=o(" (RoBERTa model)"),CHe=l(),jm=a("li"),ire=a("strong"),wHe=o("roformer"),AHe=o(" \u2014 "),tS=a("a"),yHe=o("RoFormerConfig"),LHe=o(" (RoFormer model)"),xHe=l(),Dm=a("li"),dre=a("strong"),$He=o("segformer"),kHe=o(" \u2014 "),aS=a("a"),SHe=o("SegformerConfig"),RHe=o(" (SegFormer model)"),BHe=l(),Gm=a("li"),cre=a("strong"),PHe=o("sew"),IHe=o(" \u2014 "),nS=a("a"),qHe=o("SEWConfig"),NHe=o(" (SEW model)"),jHe=l(),Om=a("li"),fre=a("strong"),DHe=o("sew-d"),GHe=o(" \u2014 "),sS=a("a"),OHe=o("SEWDConfig"),VHe=o(" (SEW-D model)"),XHe=l(),Vm=a("li"),mre=a("strong"),zHe=o("speech-encoder-decoder"),WHe=o(" \u2014 "),lS=a("a"),QHe=o("SpeechEncoderDecoderConfig"),HHe=o(" (Speech Encoder decoder model)"),UHe=l(),Xm=a("li"),gre=a("strong"),JHe=o("speech_to_text"),YHe=o(" \u2014 "),iS=a("a"),KHe=o("Speech2TextConfig"),ZHe=o(" (Speech2Text model)"),eUe=l(),zm=a("li"),hre=a("strong"),oUe=o("speech_to_text_2"),rUe=o(" \u2014 "),dS=a("a"),tUe=o("Speech2Text2Config"),aUe=o(" (Speech2Text2 model)"),nUe=l(),Wm=a("li"),pre=a("strong"),sUe=o("splinter"),lUe=o(" \u2014 "),cS=a("a"),iUe=o("SplinterConfig"),dUe=o(" (Splinter model)"),cUe=l(),Qm=a("li"),_re=a("strong"),fUe=o("squeezebert"),mUe=o(" \u2014 "),fS=a("a"),gUe=o("SqueezeBertConfig"),hUe=o(" (SqueezeBERT model)"),pUe=l(),Hm=a("li"),ure=a("strong"),_Ue=o("swin"),uUe=o(" \u2014 "),mS=a("a"),bUe=o("SwinConfig"),vUe=o(" (Swin model)"),FUe=l(),Um=a("li"),bre=a("strong"),TUe=o("t5"),MUe=o(" \u2014 "),gS=a("a"),EUe=o("T5Config"),CUe=o(" (T5 model)"),wUe=l(),Jm=a("li"),vre=a("strong"),AUe=o("tapas"),yUe=o(" \u2014 "),hS=a("a"),LUe=o("TapasConfig"),xUe=o(" (TAPAS model)"),$Ue=l(),Ym=a("li"),Fre=a("strong"),kUe=o("trajectory_transformer"),SUe=o(" \u2014 "),pS=a("a"),RUe=o("TrajectoryTransformerConfig"),BUe=o(" (Trajectory Transformer model)"),PUe=l(),Km=a("li"),Tre=a("strong"),IUe=o("transfo-xl"),qUe=o(" \u2014 "),_S=a("a"),NUe=o("TransfoXLConfig"),jUe=o(" (Transformer-XL model)"),DUe=l(),Zm=a("li"),Mre=a("strong"),GUe=o("trocr"),OUe=o(" \u2014 "),uS=a("a"),VUe=o("TrOCRConfig"),XUe=o(" (TrOCR model)"),zUe=l(),eg=a("li"),Ere=a("strong"),WUe=o("unispeech"),QUe=o(" \u2014 "),bS=a("a"),HUe=o("UniSpeechConfig"),UUe=o(" (UniSpeech model)"),JUe=l(),og=a("li"),Cre=a("strong"),YUe=o("unispeech-sat"),KUe=o(" \u2014 "),vS=a("a"),ZUe=o("UniSpeechSatConfig"),eJe=o(" (UniSpeechSat model)"),oJe=l(),rg=a("li"),wre=a("strong"),rJe=o("van"),tJe=o(" \u2014 "),FS=a("a"),aJe=o("VanConfig"),nJe=o(" (VAN model)"),sJe=l(),tg=a("li"),Are=a("strong"),lJe=o("vilt"),iJe=o(" \u2014 "),TS=a("a"),dJe=o("ViltConfig"),cJe=o(" (ViLT model)"),fJe=l(),ag=a("li"),yre=a("strong"),mJe=o("vision-encoder-decoder"),gJe=o(" \u2014 "),MS=a("a"),hJe=o("VisionEncoderDecoderConfig"),pJe=o(" (Vision Encoder decoder model)"),_Je=l(),ng=a("li"),Lre=a("strong"),uJe=o("vision-text-dual-encoder"),bJe=o(" \u2014 "),ES=a("a"),vJe=o("VisionTextDualEncoderConfig"),FJe=o(" (VisionTextDualEncoder model)"),TJe=l(),sg=a("li"),xre=a("strong"),MJe=o("visual_bert"),EJe=o(" \u2014 "),CS=a("a"),CJe=o("VisualBertConfig"),wJe=o(" (VisualBert model)"),AJe=l(),lg=a("li"),$re=a("strong"),yJe=o("vit"),LJe=o(" \u2014 "),wS=a("a"),xJe=o("ViTConfig"),$Je=o(" (ViT model)"),kJe=l(),ig=a("li"),kre=a("strong"),SJe=o("vit_mae"),RJe=o(" \u2014 "),AS=a("a"),BJe=o("ViTMAEConfig"),PJe=o(" (ViTMAE model)"),IJe=l(),dg=a("li"),Sre=a("strong"),qJe=o("wav2vec2"),NJe=o(" \u2014 "),yS=a("a"),jJe=o("Wav2Vec2Config"),DJe=o(" (Wav2Vec2 model)"),GJe=l(),cg=a("li"),Rre=a("strong"),OJe=o("wav2vec2-conformer"),VJe=o(" \u2014 "),LS=a("a"),XJe=o("Wav2Vec2ConformerConfig"),zJe=o(" (Wav2Vec2-Conformer model)"),WJe=l(),fg=a("li"),Bre=a("strong"),QJe=o("wavlm"),HJe=o(" \u2014 "),xS=a("a"),UJe=o("WavLMConfig"),JJe=o(" (WavLM model)"),YJe=l(),mg=a("li"),Pre=a("strong"),KJe=o("xglm"),ZJe=o(" \u2014 "),$S=a("a"),eYe=o("XGLMConfig"),oYe=o(" (XGLM model)"),rYe=l(),gg=a("li"),Ire=a("strong"),tYe=o("xlm"),aYe=o(" \u2014 "),kS=a("a"),nYe=o("XLMConfig"),sYe=o(" (XLM model)"),lYe=l(),hg=a("li"),qre=a("strong"),iYe=o("xlm-prophetnet"),dYe=o(" \u2014 "),SS=a("a"),cYe=o("XLMProphetNetConfig"),fYe=o(" (XLMProphetNet model)"),mYe=l(),pg=a("li"),Nre=a("strong"),gYe=o("xlm-roberta"),hYe=o(" \u2014 "),RS=a("a"),pYe=o("XLMRobertaConfig"),_Ye=o(" (XLM-RoBERTa model)"),uYe=l(),_g=a("li"),jre=a("strong"),bYe=o("xlm-roberta-xl"),vYe=o(" \u2014 "),BS=a("a"),FYe=o("XLMRobertaXLConfig"),TYe=o(" (XLM-RoBERTa-XL model)"),MYe=l(),ug=a("li"),Dre=a("strong"),EYe=o("xlnet"),CYe=o(" \u2014 "),PS=a("a"),wYe=o("XLNetConfig"),AYe=o(" (XLNet model)"),yYe=l(),bg=a("li"),Gre=a("strong"),LYe=o("yolos"),xYe=o(" \u2014 "),IS=a("a"),$Ye=o("YolosConfig"),kYe=o(" (YOLOS model)"),SYe=l(),vg=a("li"),Ore=a("strong"),RYe=o("yoso"),BYe=o(" \u2014 "),qS=a("a"),PYe=o("YosoConfig"),IYe=o(" (YOSO model)"),qYe=l(),F(Fg.$$.fragment),NYe=l(),Tg=a("div"),F(M6.$$.fragment),jYe=l(),Vre=a("p"),DYe=o("Register a new configuration for this class."),cqe=l(),Fi=a("h2"),Mg=a("a"),Xre=a("span"),F(E6.$$.fragment),GYe=l(),zre=a("span"),OYe=o("AutoTokenizer"),fqe=l(),wo=a("div"),F(C6.$$.fragment),VYe=l(),w6=a("p"),XYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),NS=a("a"),zYe=o("AutoTokenizer.from_pretrained()"),WYe=o(" class method."),QYe=l(),A6=a("p"),HYe=o("This class cannot be instantiated directly using "),Wre=a("code"),UYe=o("__init__()"),JYe=o(" (throws an error)."),YYe=l(),Cr=a("div"),F(y6.$$.fragment),KYe=l(),Qre=a("p"),ZYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),eKe=l(),Aa=a("p"),oKe=o("The tokenizer class to instantiate is selected based on the "),Hre=a("code"),rKe=o("model_type"),tKe=o(` property of the config object (either
passed as an argument or loaded from `),Ure=a("code"),aKe=o("pretrained_model_name_or_path"),nKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jre=a("code"),sKe=o("pretrained_model_name_or_path"),lKe=o(":"),iKe=l(),k=a("ul"),Sn=a("li"),Yre=a("strong"),dKe=o("albert"),cKe=o(" \u2014 "),jS=a("a"),fKe=o("AlbertTokenizer"),mKe=o(" or "),DS=a("a"),gKe=o("AlbertTokenizerFast"),hKe=o(" (ALBERT model)"),pKe=l(),Rn=a("li"),Kre=a("strong"),_Ke=o("bart"),uKe=o(" \u2014 "),GS=a("a"),bKe=o("BartTokenizer"),vKe=o(" or "),OS=a("a"),FKe=o("BartTokenizerFast"),TKe=o(" (BART model)"),MKe=l(),Bn=a("li"),Zre=a("strong"),EKe=o("barthez"),CKe=o(" \u2014 "),VS=a("a"),wKe=o("BarthezTokenizer"),AKe=o(" or "),XS=a("a"),yKe=o("BarthezTokenizerFast"),LKe=o(" (BARThez model)"),xKe=l(),Eg=a("li"),ete=a("strong"),$Ke=o("bartpho"),kKe=o(" \u2014 "),zS=a("a"),SKe=o("BartphoTokenizer"),RKe=o(" (BARTpho model)"),BKe=l(),Pn=a("li"),ote=a("strong"),PKe=o("bert"),IKe=o(" \u2014 "),WS=a("a"),qKe=o("BertTokenizer"),NKe=o(" or "),QS=a("a"),jKe=o("BertTokenizerFast"),DKe=o(" (BERT model)"),GKe=l(),Cg=a("li"),rte=a("strong"),OKe=o("bert-generation"),VKe=o(" \u2014 "),HS=a("a"),XKe=o("BertGenerationTokenizer"),zKe=o(" (Bert Generation model)"),WKe=l(),wg=a("li"),tte=a("strong"),QKe=o("bert-japanese"),HKe=o(" \u2014 "),US=a("a"),UKe=o("BertJapaneseTokenizer"),JKe=o(" (BertJapanese model)"),YKe=l(),Ag=a("li"),ate=a("strong"),KKe=o("bertweet"),ZKe=o(" \u2014 "),JS=a("a"),eZe=o("BertweetTokenizer"),oZe=o(" (Bertweet model)"),rZe=l(),In=a("li"),nte=a("strong"),tZe=o("big_bird"),aZe=o(" \u2014 "),YS=a("a"),nZe=o("BigBirdTokenizer"),sZe=o(" or "),KS=a("a"),lZe=o("BigBirdTokenizerFast"),iZe=o(" (BigBird model)"),dZe=l(),qn=a("li"),ste=a("strong"),cZe=o("bigbird_pegasus"),fZe=o(" \u2014 "),ZS=a("a"),mZe=o("PegasusTokenizer"),gZe=o(" or "),eR=a("a"),hZe=o("PegasusTokenizerFast"),pZe=o(" (BigBirdPegasus model)"),_Ze=l(),Nn=a("li"),lte=a("strong"),uZe=o("blenderbot"),bZe=o(" \u2014 "),oR=a("a"),vZe=o("BlenderbotTokenizer"),FZe=o(" or "),rR=a("a"),TZe=o("BlenderbotTokenizerFast"),MZe=o(" (Blenderbot model)"),EZe=l(),yg=a("li"),ite=a("strong"),CZe=o("blenderbot-small"),wZe=o(" \u2014 "),tR=a("a"),AZe=o("BlenderbotSmallTokenizer"),yZe=o(" (BlenderbotSmall model)"),LZe=l(),Lg=a("li"),dte=a("strong"),xZe=o("bloom"),$Ze=o(" \u2014 "),aR=a("a"),kZe=o("BloomTokenizerFast"),SZe=o(" (Bloom model)"),RZe=l(),xg=a("li"),cte=a("strong"),BZe=o("byt5"),PZe=o(" \u2014 "),nR=a("a"),IZe=o("ByT5Tokenizer"),qZe=o(" (ByT5 model)"),NZe=l(),jn=a("li"),fte=a("strong"),jZe=o("camembert"),DZe=o(" \u2014 "),sR=a("a"),GZe=o("CamembertTokenizer"),OZe=o(" or "),lR=a("a"),VZe=o("CamembertTokenizerFast"),XZe=o(" (CamemBERT model)"),zZe=l(),$g=a("li"),mte=a("strong"),WZe=o("canine"),QZe=o(" \u2014 "),iR=a("a"),HZe=o("CanineTokenizer"),UZe=o(" (Canine model)"),JZe=l(),Dn=a("li"),gte=a("strong"),YZe=o("clip"),KZe=o(" \u2014 "),dR=a("a"),ZZe=o("CLIPTokenizer"),eeo=o(" or "),cR=a("a"),oeo=o("CLIPTokenizerFast"),reo=o(" (CLIP model)"),teo=l(),Gn=a("li"),hte=a("strong"),aeo=o("convbert"),neo=o(" \u2014 "),fR=a("a"),seo=o("ConvBertTokenizer"),leo=o(" or "),mR=a("a"),ieo=o("ConvBertTokenizerFast"),deo=o(" (ConvBERT model)"),ceo=l(),On=a("li"),pte=a("strong"),feo=o("cpm"),meo=o(" \u2014 "),gR=a("a"),geo=o("CpmTokenizer"),heo=o(" or "),hR=a("a"),peo=o("CpmTokenizerFast"),_eo=o(" (CPM model)"),ueo=l(),kg=a("li"),_te=a("strong"),beo=o("ctrl"),veo=o(" \u2014 "),pR=a("a"),Feo=o("CTRLTokenizer"),Teo=o(" (CTRL model)"),Meo=l(),Vn=a("li"),ute=a("strong"),Eeo=o("data2vec-text"),Ceo=o(" \u2014 "),_R=a("a"),weo=o("RobertaTokenizer"),Aeo=o(" or "),uR=a("a"),yeo=o("RobertaTokenizerFast"),Leo=o(" (Data2VecText model)"),xeo=l(),Xn=a("li"),bte=a("strong"),$eo=o("deberta"),keo=o(" \u2014 "),bR=a("a"),Seo=o("DebertaTokenizer"),Reo=o(" or "),vR=a("a"),Beo=o("DebertaTokenizerFast"),Peo=o(" (DeBERTa model)"),Ieo=l(),zn=a("li"),vte=a("strong"),qeo=o("deberta-v2"),Neo=o(" \u2014 "),FR=a("a"),jeo=o("DebertaV2Tokenizer"),Deo=o(" or "),TR=a("a"),Geo=o("DebertaV2TokenizerFast"),Oeo=o(" (DeBERTa-v2 model)"),Veo=l(),Wn=a("li"),Fte=a("strong"),Xeo=o("distilbert"),zeo=o(" \u2014 "),MR=a("a"),Weo=o("DistilBertTokenizer"),Qeo=o(" or "),ER=a("a"),Heo=o("DistilBertTokenizerFast"),Ueo=o(" (DistilBERT model)"),Jeo=l(),Qn=a("li"),Tte=a("strong"),Yeo=o("dpr"),Keo=o(" \u2014 "),CR=a("a"),Zeo=o("DPRQuestionEncoderTokenizer"),eoo=o(" or "),wR=a("a"),ooo=o("DPRQuestionEncoderTokenizerFast"),roo=o(" (DPR model)"),too=l(),Hn=a("li"),Mte=a("strong"),aoo=o("electra"),noo=o(" \u2014 "),AR=a("a"),soo=o("ElectraTokenizer"),loo=o(" or "),yR=a("a"),ioo=o("ElectraTokenizerFast"),doo=o(" (ELECTRA model)"),coo=l(),Sg=a("li"),Ete=a("strong"),foo=o("flaubert"),moo=o(" \u2014 "),LR=a("a"),goo=o("FlaubertTokenizer"),hoo=o(" (FlauBERT model)"),poo=l(),Un=a("li"),Cte=a("strong"),_oo=o("fnet"),uoo=o(" \u2014 "),xR=a("a"),boo=o("FNetTokenizer"),voo=o(" or "),$R=a("a"),Foo=o("FNetTokenizerFast"),Too=o(" (FNet model)"),Moo=l(),Rg=a("li"),wte=a("strong"),Eoo=o("fsmt"),Coo=o(" \u2014 "),kR=a("a"),woo=o("FSMTTokenizer"),Aoo=o(" (FairSeq Machine-Translation model)"),yoo=l(),Jn=a("li"),Ate=a("strong"),Loo=o("funnel"),xoo=o(" \u2014 "),SR=a("a"),$oo=o("FunnelTokenizer"),koo=o(" or "),RR=a("a"),Soo=o("FunnelTokenizerFast"),Roo=o(" (Funnel Transformer model)"),Boo=l(),Yn=a("li"),yte=a("strong"),Poo=o("gpt2"),Ioo=o(" \u2014 "),BR=a("a"),qoo=o("GPT2Tokenizer"),Noo=o(" or "),PR=a("a"),joo=o("GPT2TokenizerFast"),Doo=o(" (OpenAI GPT-2 model)"),Goo=l(),Kn=a("li"),Lte=a("strong"),Ooo=o("gpt_neo"),Voo=o(" \u2014 "),IR=a("a"),Xoo=o("GPT2Tokenizer"),zoo=o(" or "),qR=a("a"),Woo=o("GPT2TokenizerFast"),Qoo=o(" (GPT Neo model)"),Hoo=l(),Zn=a("li"),xte=a("strong"),Uoo=o("gptj"),Joo=o(" \u2014 "),NR=a("a"),Yoo=o("GPT2Tokenizer"),Koo=o(" or "),jR=a("a"),Zoo=o("GPT2TokenizerFast"),ero=o(" (GPT-J model)"),oro=l(),es=a("li"),$te=a("strong"),rro=o("herbert"),tro=o(" \u2014 "),DR=a("a"),aro=o("HerbertTokenizer"),nro=o(" or "),GR=a("a"),sro=o("HerbertTokenizerFast"),lro=o(" (HerBERT model)"),iro=l(),Bg=a("li"),kte=a("strong"),dro=o("hubert"),cro=o(" \u2014 "),OR=a("a"),fro=o("Wav2Vec2CTCTokenizer"),mro=o(" (Hubert model)"),gro=l(),os=a("li"),Ste=a("strong"),hro=o("ibert"),pro=o(" \u2014 "),VR=a("a"),_ro=o("RobertaTokenizer"),uro=o(" or "),XR=a("a"),bro=o("RobertaTokenizerFast"),vro=o(" (I-BERT model)"),Fro=l(),rs=a("li"),Rte=a("strong"),Tro=o("layoutlm"),Mro=o(" \u2014 "),zR=a("a"),Ero=o("LayoutLMTokenizer"),Cro=o(" or "),WR=a("a"),wro=o("LayoutLMTokenizerFast"),Aro=o(" (LayoutLM model)"),yro=l(),ts=a("li"),Bte=a("strong"),Lro=o("layoutlmv2"),xro=o(" \u2014 "),QR=a("a"),$ro=o("LayoutLMv2Tokenizer"),kro=o(" or "),HR=a("a"),Sro=o("LayoutLMv2TokenizerFast"),Rro=o(" (LayoutLMv2 model)"),Bro=l(),as=a("li"),Pte=a("strong"),Pro=o("layoutxlm"),Iro=o(" \u2014 "),UR=a("a"),qro=o("LayoutXLMTokenizer"),Nro=o(" or "),JR=a("a"),jro=o("LayoutXLMTokenizerFast"),Dro=o(" (LayoutXLM model)"),Gro=l(),ns=a("li"),Ite=a("strong"),Oro=o("led"),Vro=o(" \u2014 "),YR=a("a"),Xro=o("LEDTokenizer"),zro=o(" or "),KR=a("a"),Wro=o("LEDTokenizerFast"),Qro=o(" (LED model)"),Hro=l(),ss=a("li"),qte=a("strong"),Uro=o("longformer"),Jro=o(" \u2014 "),ZR=a("a"),Yro=o("LongformerTokenizer"),Kro=o(" or "),eB=a("a"),Zro=o("LongformerTokenizerFast"),eto=o(" (Longformer model)"),oto=l(),Pg=a("li"),Nte=a("strong"),rto=o("luke"),tto=o(" \u2014 "),oB=a("a"),ato=o("LukeTokenizer"),nto=o(" (LUKE model)"),sto=l(),ls=a("li"),jte=a("strong"),lto=o("lxmert"),ito=o(" \u2014 "),rB=a("a"),dto=o("LxmertTokenizer"),cto=o(" or "),tB=a("a"),fto=o("LxmertTokenizerFast"),mto=o(" (LXMERT model)"),gto=l(),Ig=a("li"),Dte=a("strong"),hto=o("m2m_100"),pto=o(" \u2014 "),aB=a("a"),_to=o("M2M100Tokenizer"),uto=o(" (M2M100 model)"),bto=l(),qg=a("li"),Gte=a("strong"),vto=o("marian"),Fto=o(" \u2014 "),nB=a("a"),Tto=o("MarianTokenizer"),Mto=o(" (Marian model)"),Eto=l(),is=a("li"),Ote=a("strong"),Cto=o("mbart"),wto=o(" \u2014 "),sB=a("a"),Ato=o("MBartTokenizer"),yto=o(" or "),lB=a("a"),Lto=o("MBartTokenizerFast"),xto=o(" (mBART model)"),$to=l(),ds=a("li"),Vte=a("strong"),kto=o("mbart50"),Sto=o(" \u2014 "),iB=a("a"),Rto=o("MBart50Tokenizer"),Bto=o(" or "),dB=a("a"),Pto=o("MBart50TokenizerFast"),Ito=o(" (mBART-50 model)"),qto=l(),cs=a("li"),Xte=a("strong"),Nto=o("megatron-bert"),jto=o(" \u2014 "),cB=a("a"),Dto=o("BertTokenizer"),Gto=o(" or "),fB=a("a"),Oto=o("BertTokenizerFast"),Vto=o(" (MegatronBert model)"),Xto=l(),Ng=a("li"),zte=a("strong"),zto=o("mluke"),Wto=o(" \u2014 "),mB=a("a"),Qto=o("MLukeTokenizer"),Hto=o(" (mLUKE model)"),Uto=l(),fs=a("li"),Wte=a("strong"),Jto=o("mobilebert"),Yto=o(" \u2014 "),gB=a("a"),Kto=o("MobileBertTokenizer"),Zto=o(" or "),hB=a("a"),eao=o("MobileBertTokenizerFast"),oao=o(" (MobileBERT model)"),rao=l(),ms=a("li"),Qte=a("strong"),tao=o("mpnet"),aao=o(" \u2014 "),pB=a("a"),nao=o("MPNetTokenizer"),sao=o(" or "),_B=a("a"),lao=o("MPNetTokenizerFast"),iao=o(" (MPNet model)"),dao=l(),gs=a("li"),Hte=a("strong"),cao=o("mt5"),fao=o(" \u2014 "),uB=a("a"),mao=o("MT5Tokenizer"),gao=o(" or "),bB=a("a"),hao=o("MT5TokenizerFast"),pao=o(" (mT5 model)"),_ao=l(),hs=a("li"),Ute=a("strong"),uao=o("nystromformer"),bao=o(" \u2014 "),vB=a("a"),vao=o("AlbertTokenizer"),Fao=o(" or "),FB=a("a"),Tao=o("AlbertTokenizerFast"),Mao=o(" (Nystromformer model)"),Eao=l(),ps=a("li"),Jte=a("strong"),Cao=o("openai-gpt"),wao=o(" \u2014 "),TB=a("a"),Aao=o("OpenAIGPTTokenizer"),yao=o(" or "),MB=a("a"),Lao=o("OpenAIGPTTokenizerFast"),xao=o(" (OpenAI GPT model)"),$ao=l(),jg=a("li"),Yte=a("strong"),kao=o("opt"),Sao=o(" \u2014 "),EB=a("a"),Rao=o("GPT2Tokenizer"),Bao=o(" (OPT model)"),Pao=l(),_s=a("li"),Kte=a("strong"),Iao=o("pegasus"),qao=o(" \u2014 "),CB=a("a"),Nao=o("PegasusTokenizer"),jao=o(" or "),wB=a("a"),Dao=o("PegasusTokenizerFast"),Gao=o(" (Pegasus model)"),Oao=l(),Dg=a("li"),Zte=a("strong"),Vao=o("perceiver"),Xao=o(" \u2014 "),AB=a("a"),zao=o("PerceiverTokenizer"),Wao=o(" (Perceiver model)"),Qao=l(),Gg=a("li"),eae=a("strong"),Hao=o("phobert"),Uao=o(" \u2014 "),yB=a("a"),Jao=o("PhobertTokenizer"),Yao=o(" (PhoBERT model)"),Kao=l(),Og=a("li"),oae=a("strong"),Zao=o("plbart"),eno=o(" \u2014 "),LB=a("a"),ono=o("PLBartTokenizer"),rno=o(" (PLBart model)"),tno=l(),Vg=a("li"),rae=a("strong"),ano=o("prophetnet"),nno=o(" \u2014 "),xB=a("a"),sno=o("ProphetNetTokenizer"),lno=o(" (ProphetNet model)"),ino=l(),us=a("li"),tae=a("strong"),dno=o("qdqbert"),cno=o(" \u2014 "),$B=a("a"),fno=o("BertTokenizer"),mno=o(" or "),kB=a("a"),gno=o("BertTokenizerFast"),hno=o(" (QDQBert model)"),pno=l(),Xg=a("li"),aae=a("strong"),_no=o("rag"),uno=o(" \u2014 "),SB=a("a"),bno=o("RagTokenizer"),vno=o(" (RAG model)"),Fno=l(),bs=a("li"),nae=a("strong"),Tno=o("realm"),Mno=o(" \u2014 "),RB=a("a"),Eno=o("RealmTokenizer"),Cno=o(" or "),BB=a("a"),wno=o("RealmTokenizerFast"),Ano=o(" (Realm model)"),yno=l(),vs=a("li"),sae=a("strong"),Lno=o("reformer"),xno=o(" \u2014 "),PB=a("a"),$no=o("ReformerTokenizer"),kno=o(" or "),IB=a("a"),Sno=o("ReformerTokenizerFast"),Rno=o(" (Reformer model)"),Bno=l(),Fs=a("li"),lae=a("strong"),Pno=o("rembert"),Ino=o(" \u2014 "),qB=a("a"),qno=o("RemBertTokenizer"),Nno=o(" or "),NB=a("a"),jno=o("RemBertTokenizerFast"),Dno=o(" (RemBERT model)"),Gno=l(),Ts=a("li"),iae=a("strong"),Ono=o("retribert"),Vno=o(" \u2014 "),jB=a("a"),Xno=o("RetriBertTokenizer"),zno=o(" or "),DB=a("a"),Wno=o("RetriBertTokenizerFast"),Qno=o(" (RetriBERT model)"),Hno=l(),Ms=a("li"),dae=a("strong"),Uno=o("roberta"),Jno=o(" \u2014 "),GB=a("a"),Yno=o("RobertaTokenizer"),Kno=o(" or "),OB=a("a"),Zno=o("RobertaTokenizerFast"),eso=o(" (RoBERTa model)"),oso=l(),Es=a("li"),cae=a("strong"),rso=o("roformer"),tso=o(" \u2014 "),VB=a("a"),aso=o("RoFormerTokenizer"),nso=o(" or "),XB=a("a"),sso=o("RoFormerTokenizerFast"),lso=o(" (RoFormer model)"),iso=l(),zg=a("li"),fae=a("strong"),dso=o("speech_to_text"),cso=o(" \u2014 "),zB=a("a"),fso=o("Speech2TextTokenizer"),mso=o(" (Speech2Text model)"),gso=l(),Wg=a("li"),mae=a("strong"),hso=o("speech_to_text_2"),pso=o(" \u2014 "),WB=a("a"),_so=o("Speech2Text2Tokenizer"),uso=o(" (Speech2Text2 model)"),bso=l(),Cs=a("li"),gae=a("strong"),vso=o("splinter"),Fso=o(" \u2014 "),QB=a("a"),Tso=o("SplinterTokenizer"),Mso=o(" or "),HB=a("a"),Eso=o("SplinterTokenizerFast"),Cso=o(" (Splinter model)"),wso=l(),ws=a("li"),hae=a("strong"),Aso=o("squeezebert"),yso=o(" \u2014 "),UB=a("a"),Lso=o("SqueezeBertTokenizer"),xso=o(" or "),JB=a("a"),$so=o("SqueezeBertTokenizerFast"),kso=o(" (SqueezeBERT model)"),Sso=l(),As=a("li"),pae=a("strong"),Rso=o("t5"),Bso=o(" \u2014 "),YB=a("a"),Pso=o("T5Tokenizer"),Iso=o(" or "),KB=a("a"),qso=o("T5TokenizerFast"),Nso=o(" (T5 model)"),jso=l(),Qg=a("li"),_ae=a("strong"),Dso=o("tapas"),Gso=o(" \u2014 "),ZB=a("a"),Oso=o("TapasTokenizer"),Vso=o(" (TAPAS model)"),Xso=l(),Hg=a("li"),uae=a("strong"),zso=o("tapex"),Wso=o(" \u2014 "),eP=a("a"),Qso=o("TapexTokenizer"),Hso=o(" (TAPEX model)"),Uso=l(),Ug=a("li"),bae=a("strong"),Jso=o("transfo-xl"),Yso=o(" \u2014 "),oP=a("a"),Kso=o("TransfoXLTokenizer"),Zso=o(" (Transformer-XL model)"),elo=l(),ys=a("li"),vae=a("strong"),olo=o("visual_bert"),rlo=o(" \u2014 "),rP=a("a"),tlo=o("BertTokenizer"),alo=o(" or "),tP=a("a"),nlo=o("BertTokenizerFast"),slo=o(" (VisualBert model)"),llo=l(),Jg=a("li"),Fae=a("strong"),ilo=o("wav2vec2"),dlo=o(" \u2014 "),aP=a("a"),clo=o("Wav2Vec2CTCTokenizer"),flo=o(" (Wav2Vec2 model)"),mlo=l(),Yg=a("li"),Tae=a("strong"),glo=o("wav2vec2-conformer"),hlo=o(" \u2014 "),nP=a("a"),plo=o("Wav2Vec2CTCTokenizer"),_lo=o(" (Wav2Vec2-Conformer model)"),ulo=l(),Kg=a("li"),Mae=a("strong"),blo=o("wav2vec2_phoneme"),vlo=o(" \u2014 "),sP=a("a"),Flo=o("Wav2Vec2PhonemeCTCTokenizer"),Tlo=o(" (Wav2Vec2Phoneme model)"),Mlo=l(),Ls=a("li"),Eae=a("strong"),Elo=o("xglm"),Clo=o(" \u2014 "),lP=a("a"),wlo=o("XGLMTokenizer"),Alo=o(" or "),iP=a("a"),ylo=o("XGLMTokenizerFast"),Llo=o(" (XGLM model)"),xlo=l(),Zg=a("li"),Cae=a("strong"),$lo=o("xlm"),klo=o(" \u2014 "),dP=a("a"),Slo=o("XLMTokenizer"),Rlo=o(" (XLM model)"),Blo=l(),eh=a("li"),wae=a("strong"),Plo=o("xlm-prophetnet"),Ilo=o(" \u2014 "),cP=a("a"),qlo=o("XLMProphetNetTokenizer"),Nlo=o(" (XLMProphetNet model)"),jlo=l(),xs=a("li"),Aae=a("strong"),Dlo=o("xlm-roberta"),Glo=o(" \u2014 "),fP=a("a"),Olo=o("XLMRobertaTokenizer"),Vlo=o(" or "),mP=a("a"),Xlo=o("XLMRobertaTokenizerFast"),zlo=o(" (XLM-RoBERTa model)"),Wlo=l(),$s=a("li"),yae=a("strong"),Qlo=o("xlm-roberta-xl"),Hlo=o(" \u2014 "),gP=a("a"),Ulo=o("RobertaTokenizer"),Jlo=o(" or "),hP=a("a"),Ylo=o("RobertaTokenizerFast"),Klo=o(" (XLM-RoBERTa-XL model)"),Zlo=l(),ks=a("li"),Lae=a("strong"),eio=o("xlnet"),oio=o(" \u2014 "),pP=a("a"),rio=o("XLNetTokenizer"),tio=o(" or "),_P=a("a"),aio=o("XLNetTokenizerFast"),nio=o(" (XLNet model)"),sio=l(),Ss=a("li"),xae=a("strong"),lio=o("yoso"),iio=o(" \u2014 "),uP=a("a"),dio=o("AlbertTokenizer"),cio=o(" or "),bP=a("a"),fio=o("AlbertTokenizerFast"),mio=o(" (YOSO model)"),gio=l(),F(oh.$$.fragment),hio=l(),rh=a("div"),F(L6.$$.fragment),pio=l(),$ae=a("p"),_io=o("Register a new tokenizer in this mapping."),mqe=l(),Ti=a("h2"),th=a("a"),kae=a("span"),F(x6.$$.fragment),uio=l(),Sae=a("span"),bio=o("AutoFeatureExtractor"),gqe=l(),Ao=a("div"),F($6.$$.fragment),vio=l(),k6=a("p"),Fio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vP=a("a"),Tio=o("AutoFeatureExtractor.from_pretrained()"),Mio=o(" class method."),Eio=l(),S6=a("p"),Cio=o("This class cannot be instantiated directly using "),Rae=a("code"),wio=o("__init__()"),Aio=o(" (throws an error)."),yio=l(),He=a("div"),F(R6.$$.fragment),Lio=l(),Bae=a("p"),xio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),$io=l(),ya=a("p"),kio=o("The feature extractor class to instantiate is selected based on the "),Pae=a("code"),Sio=o("model_type"),Rio=o(` property of the config object
(either passed as an argument or loaded from `),Iae=a("code"),Bio=o("pretrained_model_name_or_path"),Pio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),qae=a("code"),Iio=o("pretrained_model_name_or_path"),qio=o(":"),Nio=l(),Z=a("ul"),ah=a("li"),Nae=a("strong"),jio=o("beit"),Dio=o(" \u2014 "),FP=a("a"),Gio=o("BeitFeatureExtractor"),Oio=o(" (BEiT model)"),Vio=l(),nh=a("li"),jae=a("strong"),Xio=o("clip"),zio=o(" \u2014 "),TP=a("a"),Wio=o("CLIPFeatureExtractor"),Qio=o(" (CLIP model)"),Hio=l(),sh=a("li"),Dae=a("strong"),Uio=o("convnext"),Jio=o(" \u2014 "),MP=a("a"),Yio=o("ConvNextFeatureExtractor"),Kio=o(" (ConvNext model)"),Zio=l(),lh=a("li"),Gae=a("strong"),edo=o("data2vec-audio"),odo=o(" \u2014 "),EP=a("a"),rdo=o("Wav2Vec2FeatureExtractor"),tdo=o(" (Data2VecAudio model)"),ado=l(),ih=a("li"),Oae=a("strong"),ndo=o("data2vec-vision"),sdo=o(" \u2014 "),CP=a("a"),ldo=o("BeitFeatureExtractor"),ido=o(" (Data2VecVision model)"),ddo=l(),dh=a("li"),Vae=a("strong"),cdo=o("deit"),fdo=o(" \u2014 "),wP=a("a"),mdo=o("DeiTFeatureExtractor"),gdo=o(" (DeiT model)"),hdo=l(),ch=a("li"),Xae=a("strong"),pdo=o("detr"),_do=o(" \u2014 "),AP=a("a"),udo=o("DetrFeatureExtractor"),bdo=o(" (DETR model)"),vdo=l(),fh=a("li"),zae=a("strong"),Fdo=o("dpt"),Tdo=o(" \u2014 "),yP=a("a"),Mdo=o("DPTFeatureExtractor"),Edo=o(" (DPT model)"),Cdo=l(),mh=a("li"),Wae=a("strong"),wdo=o("flava"),Ado=o(" \u2014 "),LP=a("a"),ydo=o("FlavaFeatureExtractor"),Ldo=o(" (Flava model)"),xdo=l(),gh=a("li"),Qae=a("strong"),$do=o("glpn"),kdo=o(" \u2014 "),xP=a("a"),Sdo=o("GLPNFeatureExtractor"),Rdo=o(" (GLPN model)"),Bdo=l(),hh=a("li"),Hae=a("strong"),Pdo=o("hubert"),Ido=o(" \u2014 "),$P=a("a"),qdo=o("Wav2Vec2FeatureExtractor"),Ndo=o(" (Hubert model)"),jdo=l(),ph=a("li"),Uae=a("strong"),Ddo=o("layoutlmv2"),Gdo=o(" \u2014 "),kP=a("a"),Odo=o("LayoutLMv2FeatureExtractor"),Vdo=o(" (LayoutLMv2 model)"),Xdo=l(),_h=a("li"),Jae=a("strong"),zdo=o("maskformer"),Wdo=o(" \u2014 "),SP=a("a"),Qdo=o("MaskFormerFeatureExtractor"),Hdo=o(" (MaskFormer model)"),Udo=l(),uh=a("li"),Yae=a("strong"),Jdo=o("perceiver"),Ydo=o(" \u2014 "),RP=a("a"),Kdo=o("PerceiverFeatureExtractor"),Zdo=o(" (Perceiver model)"),eco=l(),bh=a("li"),Kae=a("strong"),oco=o("poolformer"),rco=o(" \u2014 "),BP=a("a"),tco=o("PoolFormerFeatureExtractor"),aco=o(" (PoolFormer model)"),nco=l(),vh=a("li"),Zae=a("strong"),sco=o("regnet"),lco=o(" \u2014 "),PP=a("a"),ico=o("ConvNextFeatureExtractor"),dco=o(" (RegNet model)"),cco=l(),Fh=a("li"),ene=a("strong"),fco=o("resnet"),mco=o(" \u2014 "),IP=a("a"),gco=o("ConvNextFeatureExtractor"),hco=o(" (ResNet model)"),pco=l(),Th=a("li"),one=a("strong"),_co=o("segformer"),uco=o(" \u2014 "),qP=a("a"),bco=o("SegformerFeatureExtractor"),vco=o(" (SegFormer model)"),Fco=l(),Mh=a("li"),rne=a("strong"),Tco=o("speech_to_text"),Mco=o(" \u2014 "),NP=a("a"),Eco=o("Speech2TextFeatureExtractor"),Cco=o(" (Speech2Text model)"),wco=l(),Eh=a("li"),tne=a("strong"),Aco=o("swin"),yco=o(" \u2014 "),jP=a("a"),Lco=o("ViTFeatureExtractor"),xco=o(" (Swin model)"),$co=l(),Ch=a("li"),ane=a("strong"),kco=o("van"),Sco=o(" \u2014 "),DP=a("a"),Rco=o("ConvNextFeatureExtractor"),Bco=o(" (VAN model)"),Pco=l(),wh=a("li"),nne=a("strong"),Ico=o("vit"),qco=o(" \u2014 "),GP=a("a"),Nco=o("ViTFeatureExtractor"),jco=o(" (ViT model)"),Dco=l(),Ah=a("li"),sne=a("strong"),Gco=o("vit_mae"),Oco=o(" \u2014 "),OP=a("a"),Vco=o("ViTFeatureExtractor"),Xco=o(" (ViTMAE model)"),zco=l(),yh=a("li"),lne=a("strong"),Wco=o("wav2vec2"),Qco=o(" \u2014 "),VP=a("a"),Hco=o("Wav2Vec2FeatureExtractor"),Uco=o(" (Wav2Vec2 model)"),Jco=l(),Lh=a("li"),ine=a("strong"),Yco=o("wav2vec2-conformer"),Kco=o(" \u2014 "),XP=a("a"),Zco=o("Wav2Vec2FeatureExtractor"),efo=o(" (Wav2Vec2-Conformer model)"),ofo=l(),xh=a("li"),dne=a("strong"),rfo=o("yolos"),tfo=o(" \u2014 "),zP=a("a"),afo=o("YolosFeatureExtractor"),nfo=o(" (YOLOS model)"),sfo=l(),F($h.$$.fragment),lfo=l(),F(kh.$$.fragment),ifo=l(),Sh=a("div"),F(B6.$$.fragment),dfo=l(),cne=a("p"),cfo=o("Register a new feature extractor for this class."),hqe=l(),Mi=a("h2"),Rh=a("a"),fne=a("span"),F(P6.$$.fragment),ffo=l(),mne=a("span"),mfo=o("AutoProcessor"),pqe=l(),yo=a("div"),F(I6.$$.fragment),gfo=l(),q6=a("p"),hfo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),WP=a("a"),pfo=o("AutoProcessor.from_pretrained()"),_fo=o(" class method."),ufo=l(),N6=a("p"),bfo=o("This class cannot be instantiated directly using "),gne=a("code"),vfo=o("__init__()"),Ffo=o(" (throws an error)."),Tfo=l(),Ue=a("div"),F(j6.$$.fragment),Mfo=l(),hne=a("p"),Efo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Cfo=l(),Ei=a("p"),wfo=o("The processor class to instantiate is selected based on the "),pne=a("code"),Afo=o("model_type"),yfo=o(` property of the config object (either
passed as an argument or loaded from `),_ne=a("code"),Lfo=o("pretrained_model_name_or_path"),xfo=o(" if possible):"),$fo=l(),pe=a("ul"),Bh=a("li"),une=a("strong"),kfo=o("clip"),Sfo=o(" \u2014 "),QP=a("a"),Rfo=o("CLIPProcessor"),Bfo=o(" (CLIP model)"),Pfo=l(),Ph=a("li"),bne=a("strong"),Ifo=o("flava"),qfo=o(" \u2014 "),vne=a("code"),Nfo=o("FLAVAProcessor"),jfo=o(" (Flava model)"),Dfo=l(),Ih=a("li"),Fne=a("strong"),Gfo=o("layoutlmv2"),Ofo=o(" \u2014 "),HP=a("a"),Vfo=o("LayoutLMv2Processor"),Xfo=o(" (LayoutLMv2 model)"),zfo=l(),qh=a("li"),Tne=a("strong"),Wfo=o("layoutxlm"),Qfo=o(" \u2014 "),UP=a("a"),Hfo=o("LayoutXLMProcessor"),Ufo=o(" (LayoutXLM model)"),Jfo=l(),Nh=a("li"),Mne=a("strong"),Yfo=o("sew"),Kfo=o(" \u2014 "),JP=a("a"),Zfo=o("Wav2Vec2Processor"),emo=o(" (SEW model)"),omo=l(),jh=a("li"),Ene=a("strong"),rmo=o("sew-d"),tmo=o(" \u2014 "),YP=a("a"),amo=o("Wav2Vec2Processor"),nmo=o(" (SEW-D model)"),smo=l(),Dh=a("li"),Cne=a("strong"),lmo=o("speech_to_text"),imo=o(" \u2014 "),KP=a("a"),dmo=o("Speech2TextProcessor"),cmo=o(" (Speech2Text model)"),fmo=l(),Gh=a("li"),wne=a("strong"),mmo=o("speech_to_text_2"),gmo=o(" \u2014 "),ZP=a("a"),hmo=o("Speech2Text2Processor"),pmo=o(" (Speech2Text2 model)"),_mo=l(),Oh=a("li"),Ane=a("strong"),umo=o("trocr"),bmo=o(" \u2014 "),eI=a("a"),vmo=o("TrOCRProcessor"),Fmo=o(" (TrOCR model)"),Tmo=l(),Vh=a("li"),yne=a("strong"),Mmo=o("unispeech"),Emo=o(" \u2014 "),oI=a("a"),Cmo=o("Wav2Vec2Processor"),wmo=o(" (UniSpeech model)"),Amo=l(),Xh=a("li"),Lne=a("strong"),ymo=o("unispeech-sat"),Lmo=o(" \u2014 "),rI=a("a"),xmo=o("Wav2Vec2Processor"),$mo=o(" (UniSpeechSat model)"),kmo=l(),zh=a("li"),xne=a("strong"),Smo=o("vilt"),Rmo=o(" \u2014 "),tI=a("a"),Bmo=o("ViltProcessor"),Pmo=o(" (ViLT model)"),Imo=l(),Wh=a("li"),$ne=a("strong"),qmo=o("vision-text-dual-encoder"),Nmo=o(" \u2014 "),aI=a("a"),jmo=o("VisionTextDualEncoderProcessor"),Dmo=o(" (VisionTextDualEncoder model)"),Gmo=l(),Qh=a("li"),kne=a("strong"),Omo=o("wav2vec2"),Vmo=o(" \u2014 "),nI=a("a"),Xmo=o("Wav2Vec2Processor"),zmo=o(" (Wav2Vec2 model)"),Wmo=l(),Hh=a("li"),Sne=a("strong"),Qmo=o("wav2vec2-conformer"),Hmo=o(" \u2014 "),sI=a("a"),Umo=o("Wav2Vec2Processor"),Jmo=o(" (Wav2Vec2-Conformer model)"),Ymo=l(),Uh=a("li"),Rne=a("strong"),Kmo=o("wavlm"),Zmo=o(" \u2014 "),lI=a("a"),ego=o("Wav2Vec2Processor"),ogo=o(" (WavLM model)"),rgo=l(),F(Jh.$$.fragment),tgo=l(),F(Yh.$$.fragment),ago=l(),Kh=a("div"),F(D6.$$.fragment),ngo=l(),Bne=a("p"),sgo=o("Register a new processor for this class."),_qe=l(),Ci=a("h2"),Zh=a("a"),Pne=a("span"),F(G6.$$.fragment),lgo=l(),Ine=a("span"),igo=o("AutoModel"),uqe=l(),Lo=a("div"),F(O6.$$.fragment),dgo=l(),wi=a("p"),cgo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iI=a("a"),fgo=o("from_pretrained()"),mgo=o(" class method or the "),dI=a("a"),ggo=o("from_config()"),hgo=o(` class
method.`),pgo=l(),V6=a("p"),_go=o("This class cannot be instantiated directly using "),qne=a("code"),ugo=o("__init__()"),bgo=o(" (throws an error)."),vgo=l(),tt=a("div"),F(X6.$$.fragment),Fgo=l(),Nne=a("p"),Tgo=o("Instantiates one of the base model classes of the library from a configuration."),Mgo=l(),Ai=a("p"),Ego=o(`Note:
Loading a model from its configuration file does `),jne=a("strong"),Cgo=o("not"),wgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cI=a("a"),Ago=o("from_pretrained()"),ygo=o(" to load the model weights."),Lgo=l(),F(ep.$$.fragment),xgo=l(),Je=a("div"),F(z6.$$.fragment),$go=l(),Dne=a("p"),kgo=o("Instantiate one of the base model classes of the library from a pretrained model."),Sgo=l(),La=a("p"),Rgo=o("The model class to instantiate is selected based on the "),Gne=a("code"),Bgo=o("model_type"),Pgo=o(` property of the config object (either
passed as an argument or loaded from `),One=a("code"),Igo=o("pretrained_model_name_or_path"),qgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vne=a("code"),Ngo=o("pretrained_model_name_or_path"),jgo=o(":"),Dgo=l(),x=a("ul"),op=a("li"),Xne=a("strong"),Ggo=o("albert"),Ogo=o(" \u2014 "),fI=a("a"),Vgo=o("AlbertModel"),Xgo=o(" (ALBERT model)"),zgo=l(),rp=a("li"),zne=a("strong"),Wgo=o("bart"),Qgo=o(" \u2014 "),mI=a("a"),Hgo=o("BartModel"),Ugo=o(" (BART model)"),Jgo=l(),tp=a("li"),Wne=a("strong"),Ygo=o("beit"),Kgo=o(" \u2014 "),gI=a("a"),Zgo=o("BeitModel"),eho=o(" (BEiT model)"),oho=l(),ap=a("li"),Qne=a("strong"),rho=o("bert"),tho=o(" \u2014 "),hI=a("a"),aho=o("BertModel"),nho=o(" (BERT model)"),sho=l(),np=a("li"),Hne=a("strong"),lho=o("bert-generation"),iho=o(" \u2014 "),pI=a("a"),dho=o("BertGenerationEncoder"),cho=o(" (Bert Generation model)"),fho=l(),sp=a("li"),Une=a("strong"),mho=o("big_bird"),gho=o(" \u2014 "),_I=a("a"),hho=o("BigBirdModel"),pho=o(" (BigBird model)"),_ho=l(),lp=a("li"),Jne=a("strong"),uho=o("bigbird_pegasus"),bho=o(" \u2014 "),uI=a("a"),vho=o("BigBirdPegasusModel"),Fho=o(" (BigBirdPegasus model)"),Tho=l(),ip=a("li"),Yne=a("strong"),Mho=o("blenderbot"),Eho=o(" \u2014 "),bI=a("a"),Cho=o("BlenderbotModel"),who=o(" (Blenderbot model)"),Aho=l(),dp=a("li"),Kne=a("strong"),yho=o("blenderbot-small"),Lho=o(" \u2014 "),vI=a("a"),xho=o("BlenderbotSmallModel"),$ho=o(" (BlenderbotSmall model)"),kho=l(),cp=a("li"),Zne=a("strong"),Sho=o("bloom"),Rho=o(" \u2014 "),FI=a("a"),Bho=o("BloomModel"),Pho=o(" (Bloom model)"),Iho=l(),fp=a("li"),ese=a("strong"),qho=o("camembert"),Nho=o(" \u2014 "),TI=a("a"),jho=o("CamembertModel"),Dho=o(" (CamemBERT model)"),Gho=l(),mp=a("li"),ose=a("strong"),Oho=o("canine"),Vho=o(" \u2014 "),MI=a("a"),Xho=o("CanineModel"),zho=o(" (Canine model)"),Who=l(),gp=a("li"),rse=a("strong"),Qho=o("clip"),Hho=o(" \u2014 "),EI=a("a"),Uho=o("CLIPModel"),Jho=o(" (CLIP model)"),Yho=l(),hp=a("li"),tse=a("strong"),Kho=o("convbert"),Zho=o(" \u2014 "),CI=a("a"),epo=o("ConvBertModel"),opo=o(" (ConvBERT model)"),rpo=l(),pp=a("li"),ase=a("strong"),tpo=o("convnext"),apo=o(" \u2014 "),wI=a("a"),npo=o("ConvNextModel"),spo=o(" (ConvNext model)"),lpo=l(),_p=a("li"),nse=a("strong"),ipo=o("ctrl"),dpo=o(" \u2014 "),AI=a("a"),cpo=o("CTRLModel"),fpo=o(" (CTRL model)"),mpo=l(),up=a("li"),sse=a("strong"),gpo=o("data2vec-audio"),hpo=o(" \u2014 "),yI=a("a"),ppo=o("Data2VecAudioModel"),_po=o(" (Data2VecAudio model)"),upo=l(),bp=a("li"),lse=a("strong"),bpo=o("data2vec-text"),vpo=o(" \u2014 "),LI=a("a"),Fpo=o("Data2VecTextModel"),Tpo=o(" (Data2VecText model)"),Mpo=l(),vp=a("li"),ise=a("strong"),Epo=o("data2vec-vision"),Cpo=o(" \u2014 "),xI=a("a"),wpo=o("Data2VecVisionModel"),Apo=o(" (Data2VecVision model)"),ypo=l(),Fp=a("li"),dse=a("strong"),Lpo=o("deberta"),xpo=o(" \u2014 "),$I=a("a"),$po=o("DebertaModel"),kpo=o(" (DeBERTa model)"),Spo=l(),Tp=a("li"),cse=a("strong"),Rpo=o("deberta-v2"),Bpo=o(" \u2014 "),kI=a("a"),Ppo=o("DebertaV2Model"),Ipo=o(" (DeBERTa-v2 model)"),qpo=l(),Mp=a("li"),fse=a("strong"),Npo=o("decision_transformer"),jpo=o(" \u2014 "),SI=a("a"),Dpo=o("DecisionTransformerModel"),Gpo=o(" (Decision Transformer model)"),Opo=l(),Ep=a("li"),mse=a("strong"),Vpo=o("deit"),Xpo=o(" \u2014 "),RI=a("a"),zpo=o("DeiTModel"),Wpo=o(" (DeiT model)"),Qpo=l(),Cp=a("li"),gse=a("strong"),Hpo=o("detr"),Upo=o(" \u2014 "),BI=a("a"),Jpo=o("DetrModel"),Ypo=o(" (DETR model)"),Kpo=l(),wp=a("li"),hse=a("strong"),Zpo=o("distilbert"),e_o=o(" \u2014 "),PI=a("a"),o_o=o("DistilBertModel"),r_o=o(" (DistilBERT model)"),t_o=l(),Ap=a("li"),pse=a("strong"),a_o=o("dpr"),n_o=o(" \u2014 "),II=a("a"),s_o=o("DPRQuestionEncoder"),l_o=o(" (DPR model)"),i_o=l(),yp=a("li"),_se=a("strong"),d_o=o("dpt"),c_o=o(" \u2014 "),qI=a("a"),f_o=o("DPTModel"),m_o=o(" (DPT model)"),g_o=l(),Lp=a("li"),use=a("strong"),h_o=o("electra"),p_o=o(" \u2014 "),NI=a("a"),__o=o("ElectraModel"),u_o=o(" (ELECTRA model)"),b_o=l(),xp=a("li"),bse=a("strong"),v_o=o("flaubert"),F_o=o(" \u2014 "),jI=a("a"),T_o=o("FlaubertModel"),M_o=o(" (FlauBERT model)"),E_o=l(),$p=a("li"),vse=a("strong"),C_o=o("flava"),w_o=o(" \u2014 "),DI=a("a"),A_o=o("FlavaModel"),y_o=o(" (Flava model)"),L_o=l(),kp=a("li"),Fse=a("strong"),x_o=o("fnet"),$_o=o(" \u2014 "),GI=a("a"),k_o=o("FNetModel"),S_o=o(" (FNet model)"),R_o=l(),Sp=a("li"),Tse=a("strong"),B_o=o("fsmt"),P_o=o(" \u2014 "),OI=a("a"),I_o=o("FSMTModel"),q_o=o(" (FairSeq Machine-Translation model)"),N_o=l(),Rs=a("li"),Mse=a("strong"),j_o=o("funnel"),D_o=o(" \u2014 "),VI=a("a"),G_o=o("FunnelModel"),O_o=o(" or "),XI=a("a"),V_o=o("FunnelBaseModel"),X_o=o(" (Funnel Transformer model)"),z_o=l(),Rp=a("li"),Ese=a("strong"),W_o=o("glpn"),Q_o=o(" \u2014 "),zI=a("a"),H_o=o("GLPNModel"),U_o=o(" (GLPN model)"),J_o=l(),Bp=a("li"),Cse=a("strong"),Y_o=o("gpt2"),K_o=o(" \u2014 "),WI=a("a"),Z_o=o("GPT2Model"),euo=o(" (OpenAI GPT-2 model)"),ouo=l(),Pp=a("li"),wse=a("strong"),ruo=o("gpt_neo"),tuo=o(" \u2014 "),QI=a("a"),auo=o("GPTNeoModel"),nuo=o(" (GPT Neo model)"),suo=l(),Ip=a("li"),Ase=a("strong"),luo=o("gptj"),iuo=o(" \u2014 "),HI=a("a"),duo=o("GPTJModel"),cuo=o(" (GPT-J model)"),fuo=l(),qp=a("li"),yse=a("strong"),muo=o("hubert"),guo=o(" \u2014 "),UI=a("a"),huo=o("HubertModel"),puo=o(" (Hubert model)"),_uo=l(),Np=a("li"),Lse=a("strong"),uuo=o("ibert"),buo=o(" \u2014 "),JI=a("a"),vuo=o("IBertModel"),Fuo=o(" (I-BERT model)"),Tuo=l(),jp=a("li"),xse=a("strong"),Muo=o("imagegpt"),Euo=o(" \u2014 "),YI=a("a"),Cuo=o("ImageGPTModel"),wuo=o(" (ImageGPT model)"),Auo=l(),Dp=a("li"),$se=a("strong"),yuo=o("layoutlm"),Luo=o(" \u2014 "),KI=a("a"),xuo=o("LayoutLMModel"),$uo=o(" (LayoutLM model)"),kuo=l(),Gp=a("li"),kse=a("strong"),Suo=o("layoutlmv2"),Ruo=o(" \u2014 "),ZI=a("a"),Buo=o("LayoutLMv2Model"),Puo=o(" (LayoutLMv2 model)"),Iuo=l(),Op=a("li"),Sse=a("strong"),quo=o("led"),Nuo=o(" \u2014 "),eq=a("a"),juo=o("LEDModel"),Duo=o(" (LED model)"),Guo=l(),Vp=a("li"),Rse=a("strong"),Ouo=o("longformer"),Vuo=o(" \u2014 "),oq=a("a"),Xuo=o("LongformerModel"),zuo=o(" (Longformer model)"),Wuo=l(),Xp=a("li"),Bse=a("strong"),Quo=o("luke"),Huo=o(" \u2014 "),rq=a("a"),Uuo=o("LukeModel"),Juo=o(" (LUKE model)"),Yuo=l(),zp=a("li"),Pse=a("strong"),Kuo=o("lxmert"),Zuo=o(" \u2014 "),tq=a("a"),e2o=o("LxmertModel"),o2o=o(" (LXMERT model)"),r2o=l(),Wp=a("li"),Ise=a("strong"),t2o=o("m2m_100"),a2o=o(" \u2014 "),aq=a("a"),n2o=o("M2M100Model"),s2o=o(" (M2M100 model)"),l2o=l(),Qp=a("li"),qse=a("strong"),i2o=o("marian"),d2o=o(" \u2014 "),nq=a("a"),c2o=o("MarianModel"),f2o=o(" (Marian model)"),m2o=l(),Hp=a("li"),Nse=a("strong"),g2o=o("maskformer"),h2o=o(" \u2014 "),sq=a("a"),p2o=o("MaskFormerModel"),_2o=o(" (MaskFormer model)"),u2o=l(),Up=a("li"),jse=a("strong"),b2o=o("mbart"),v2o=o(" \u2014 "),lq=a("a"),F2o=o("MBartModel"),T2o=o(" (mBART model)"),M2o=l(),Jp=a("li"),Dse=a("strong"),E2o=o("megatron-bert"),C2o=o(" \u2014 "),iq=a("a"),w2o=o("MegatronBertModel"),A2o=o(" (MegatronBert model)"),y2o=l(),Yp=a("li"),Gse=a("strong"),L2o=o("mobilebert"),x2o=o(" \u2014 "),dq=a("a"),$2o=o("MobileBertModel"),k2o=o(" (MobileBERT model)"),S2o=l(),Kp=a("li"),Ose=a("strong"),R2o=o("mpnet"),B2o=o(" \u2014 "),cq=a("a"),P2o=o("MPNetModel"),I2o=o(" (MPNet model)"),q2o=l(),Zp=a("li"),Vse=a("strong"),N2o=o("mt5"),j2o=o(" \u2014 "),fq=a("a"),D2o=o("MT5Model"),G2o=o(" (mT5 model)"),O2o=l(),e_=a("li"),Xse=a("strong"),V2o=o("nystromformer"),X2o=o(" \u2014 "),mq=a("a"),z2o=o("NystromformerModel"),W2o=o(" (Nystromformer model)"),Q2o=l(),o_=a("li"),zse=a("strong"),H2o=o("openai-gpt"),U2o=o(" \u2014 "),gq=a("a"),J2o=o("OpenAIGPTModel"),Y2o=o(" (OpenAI GPT model)"),K2o=l(),r_=a("li"),Wse=a("strong"),Z2o=o("opt"),e1o=o(" \u2014 "),hq=a("a"),o1o=o("OPTModel"),r1o=o(" (OPT model)"),t1o=l(),t_=a("li"),Qse=a("strong"),a1o=o("pegasus"),n1o=o(" \u2014 "),pq=a("a"),s1o=o("PegasusModel"),l1o=o(" (Pegasus model)"),i1o=l(),a_=a("li"),Hse=a("strong"),d1o=o("perceiver"),c1o=o(" \u2014 "),_q=a("a"),f1o=o("PerceiverModel"),m1o=o(" (Perceiver model)"),g1o=l(),n_=a("li"),Use=a("strong"),h1o=o("plbart"),p1o=o(" \u2014 "),uq=a("a"),_1o=o("PLBartModel"),u1o=o(" (PLBart model)"),b1o=l(),s_=a("li"),Jse=a("strong"),v1o=o("poolformer"),F1o=o(" \u2014 "),bq=a("a"),T1o=o("PoolFormerModel"),M1o=o(" (PoolFormer model)"),E1o=l(),l_=a("li"),Yse=a("strong"),C1o=o("prophetnet"),w1o=o(" \u2014 "),vq=a("a"),A1o=o("ProphetNetModel"),y1o=o(" (ProphetNet model)"),L1o=l(),i_=a("li"),Kse=a("strong"),x1o=o("qdqbert"),$1o=o(" \u2014 "),Fq=a("a"),k1o=o("QDQBertModel"),S1o=o(" (QDQBert model)"),R1o=l(),d_=a("li"),Zse=a("strong"),B1o=o("reformer"),P1o=o(" \u2014 "),Tq=a("a"),I1o=o("ReformerModel"),q1o=o(" (Reformer model)"),N1o=l(),c_=a("li"),ele=a("strong"),j1o=o("regnet"),D1o=o(" \u2014 "),Mq=a("a"),G1o=o("RegNetModel"),O1o=o(" (RegNet model)"),V1o=l(),f_=a("li"),ole=a("strong"),X1o=o("rembert"),z1o=o(" \u2014 "),Eq=a("a"),W1o=o("RemBertModel"),Q1o=o(" (RemBERT model)"),H1o=l(),m_=a("li"),rle=a("strong"),U1o=o("resnet"),J1o=o(" \u2014 "),Cq=a("a"),Y1o=o("ResNetModel"),K1o=o(" (ResNet model)"),Z1o=l(),g_=a("li"),tle=a("strong"),ebo=o("retribert"),obo=o(" \u2014 "),wq=a("a"),rbo=o("RetriBertModel"),tbo=o(" (RetriBERT model)"),abo=l(),h_=a("li"),ale=a("strong"),nbo=o("roberta"),sbo=o(" \u2014 "),Aq=a("a"),lbo=o("RobertaModel"),ibo=o(" (RoBERTa model)"),dbo=l(),p_=a("li"),nle=a("strong"),cbo=o("roformer"),fbo=o(" \u2014 "),yq=a("a"),mbo=o("RoFormerModel"),gbo=o(" (RoFormer model)"),hbo=l(),__=a("li"),sle=a("strong"),pbo=o("segformer"),_bo=o(" \u2014 "),Lq=a("a"),ubo=o("SegformerModel"),bbo=o(" (SegFormer model)"),vbo=l(),u_=a("li"),lle=a("strong"),Fbo=o("sew"),Tbo=o(" \u2014 "),xq=a("a"),Mbo=o("SEWModel"),Ebo=o(" (SEW model)"),Cbo=l(),b_=a("li"),ile=a("strong"),wbo=o("sew-d"),Abo=o(" \u2014 "),$q=a("a"),ybo=o("SEWDModel"),Lbo=o(" (SEW-D model)"),xbo=l(),v_=a("li"),dle=a("strong"),$bo=o("speech_to_text"),kbo=o(" \u2014 "),kq=a("a"),Sbo=o("Speech2TextModel"),Rbo=o(" (Speech2Text model)"),Bbo=l(),F_=a("li"),cle=a("strong"),Pbo=o("splinter"),Ibo=o(" \u2014 "),Sq=a("a"),qbo=o("SplinterModel"),Nbo=o(" (Splinter model)"),jbo=l(),T_=a("li"),fle=a("strong"),Dbo=o("squeezebert"),Gbo=o(" \u2014 "),Rq=a("a"),Obo=o("SqueezeBertModel"),Vbo=o(" (SqueezeBERT model)"),Xbo=l(),M_=a("li"),mle=a("strong"),zbo=o("swin"),Wbo=o(" \u2014 "),Bq=a("a"),Qbo=o("SwinModel"),Hbo=o(" (Swin model)"),Ubo=l(),E_=a("li"),gle=a("strong"),Jbo=o("t5"),Ybo=o(" \u2014 "),Pq=a("a"),Kbo=o("T5Model"),Zbo=o(" (T5 model)"),evo=l(),C_=a("li"),hle=a("strong"),ovo=o("tapas"),rvo=o(" \u2014 "),Iq=a("a"),tvo=o("TapasModel"),avo=o(" (TAPAS model)"),nvo=l(),w_=a("li"),ple=a("strong"),svo=o("trajectory_transformer"),lvo=o(" \u2014 "),qq=a("a"),ivo=o("TrajectoryTransformerModel"),dvo=o(" (Trajectory Transformer model)"),cvo=l(),A_=a("li"),_le=a("strong"),fvo=o("transfo-xl"),mvo=o(" \u2014 "),Nq=a("a"),gvo=o("TransfoXLModel"),hvo=o(" (Transformer-XL model)"),pvo=l(),y_=a("li"),ule=a("strong"),_vo=o("unispeech"),uvo=o(" \u2014 "),jq=a("a"),bvo=o("UniSpeechModel"),vvo=o(" (UniSpeech model)"),Fvo=l(),L_=a("li"),ble=a("strong"),Tvo=o("unispeech-sat"),Mvo=o(" \u2014 "),Dq=a("a"),Evo=o("UniSpeechSatModel"),Cvo=o(" (UniSpeechSat model)"),wvo=l(),x_=a("li"),vle=a("strong"),Avo=o("van"),yvo=o(" \u2014 "),Gq=a("a"),Lvo=o("VanModel"),xvo=o(" (VAN model)"),$vo=l(),$_=a("li"),Fle=a("strong"),kvo=o("vilt"),Svo=o(" \u2014 "),Oq=a("a"),Rvo=o("ViltModel"),Bvo=o(" (ViLT model)"),Pvo=l(),k_=a("li"),Tle=a("strong"),Ivo=o("vision-text-dual-encoder"),qvo=o(" \u2014 "),Vq=a("a"),Nvo=o("VisionTextDualEncoderModel"),jvo=o(" (VisionTextDualEncoder model)"),Dvo=l(),S_=a("li"),Mle=a("strong"),Gvo=o("visual_bert"),Ovo=o(" \u2014 "),Xq=a("a"),Vvo=o("VisualBertModel"),Xvo=o(" (VisualBert model)"),zvo=l(),R_=a("li"),Ele=a("strong"),Wvo=o("vit"),Qvo=o(" \u2014 "),zq=a("a"),Hvo=o("ViTModel"),Uvo=o(" (ViT model)"),Jvo=l(),B_=a("li"),Cle=a("strong"),Yvo=o("vit_mae"),Kvo=o(" \u2014 "),Wq=a("a"),Zvo=o("ViTMAEModel"),eFo=o(" (ViTMAE model)"),oFo=l(),P_=a("li"),wle=a("strong"),rFo=o("wav2vec2"),tFo=o(" \u2014 "),Qq=a("a"),aFo=o("Wav2Vec2Model"),nFo=o(" (Wav2Vec2 model)"),sFo=l(),I_=a("li"),Ale=a("strong"),lFo=o("wav2vec2-conformer"),iFo=o(" \u2014 "),Hq=a("a"),dFo=o("Wav2Vec2ConformerModel"),cFo=o(" (Wav2Vec2-Conformer model)"),fFo=l(),q_=a("li"),yle=a("strong"),mFo=o("wavlm"),gFo=o(" \u2014 "),Uq=a("a"),hFo=o("WavLMModel"),pFo=o(" (WavLM model)"),_Fo=l(),N_=a("li"),Lle=a("strong"),uFo=o("xglm"),bFo=o(" \u2014 "),Jq=a("a"),vFo=o("XGLMModel"),FFo=o(" (XGLM model)"),TFo=l(),j_=a("li"),xle=a("strong"),MFo=o("xlm"),EFo=o(" \u2014 "),Yq=a("a"),CFo=o("XLMModel"),wFo=o(" (XLM model)"),AFo=l(),D_=a("li"),$le=a("strong"),yFo=o("xlm-prophetnet"),LFo=o(" \u2014 "),Kq=a("a"),xFo=o("XLMProphetNetModel"),$Fo=o(" (XLMProphetNet model)"),kFo=l(),G_=a("li"),kle=a("strong"),SFo=o("xlm-roberta"),RFo=o(" \u2014 "),Zq=a("a"),BFo=o("XLMRobertaModel"),PFo=o(" (XLM-RoBERTa model)"),IFo=l(),O_=a("li"),Sle=a("strong"),qFo=o("xlm-roberta-xl"),NFo=o(" \u2014 "),eN=a("a"),jFo=o("XLMRobertaXLModel"),DFo=o(" (XLM-RoBERTa-XL model)"),GFo=l(),V_=a("li"),Rle=a("strong"),OFo=o("xlnet"),VFo=o(" \u2014 "),oN=a("a"),XFo=o("XLNetModel"),zFo=o(" (XLNet model)"),WFo=l(),X_=a("li"),Ble=a("strong"),QFo=o("yolos"),HFo=o(" \u2014 "),rN=a("a"),UFo=o("YolosModel"),JFo=o(" (YOLOS model)"),YFo=l(),z_=a("li"),Ple=a("strong"),KFo=o("yoso"),ZFo=o(" \u2014 "),tN=a("a"),e0o=o("YosoModel"),o0o=o(" (YOSO model)"),r0o=l(),W_=a("p"),t0o=o("The model is set in evaluation mode by default using "),Ile=a("code"),a0o=o("model.eval()"),n0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qle=a("code"),s0o=o("model.train()"),l0o=l(),F(Q_.$$.fragment),bqe=l(),yi=a("h2"),H_=a("a"),Nle=a("span"),F(W6.$$.fragment),i0o=l(),jle=a("span"),d0o=o("AutoModelForPreTraining"),vqe=l(),xo=a("div"),F(Q6.$$.fragment),c0o=l(),Li=a("p"),f0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aN=a("a"),m0o=o("from_pretrained()"),g0o=o(" class method or the "),nN=a("a"),h0o=o("from_config()"),p0o=o(` class
method.`),_0o=l(),H6=a("p"),u0o=o("This class cannot be instantiated directly using "),Dle=a("code"),b0o=o("__init__()"),v0o=o(" (throws an error)."),F0o=l(),at=a("div"),F(U6.$$.fragment),T0o=l(),Gle=a("p"),M0o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),E0o=l(),xi=a("p"),C0o=o(`Note:
Loading a model from its configuration file does `),Ole=a("strong"),w0o=o("not"),A0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sN=a("a"),y0o=o("from_pretrained()"),L0o=o(" to load the model weights."),x0o=l(),F(U_.$$.fragment),$0o=l(),Ye=a("div"),F(J6.$$.fragment),k0o=l(),Vle=a("p"),S0o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),R0o=l(),xa=a("p"),B0o=o("The model class to instantiate is selected based on the "),Xle=a("code"),P0o=o("model_type"),I0o=o(` property of the config object (either
passed as an argument or loaded from `),zle=a("code"),q0o=o("pretrained_model_name_or_path"),N0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=a("code"),j0o=o("pretrained_model_name_or_path"),D0o=o(":"),G0o=l(),G=a("ul"),J_=a("li"),Qle=a("strong"),O0o=o("albert"),V0o=o(" \u2014 "),lN=a("a"),X0o=o("AlbertForPreTraining"),z0o=o(" (ALBERT model)"),W0o=l(),Y_=a("li"),Hle=a("strong"),Q0o=o("bart"),H0o=o(" \u2014 "),iN=a("a"),U0o=o("BartForConditionalGeneration"),J0o=o(" (BART model)"),Y0o=l(),K_=a("li"),Ule=a("strong"),K0o=o("bert"),Z0o=o(" \u2014 "),dN=a("a"),eTo=o("BertForPreTraining"),oTo=o(" (BERT model)"),rTo=l(),Z_=a("li"),Jle=a("strong"),tTo=o("big_bird"),aTo=o(" \u2014 "),cN=a("a"),nTo=o("BigBirdForPreTraining"),sTo=o(" (BigBird model)"),lTo=l(),eu=a("li"),Yle=a("strong"),iTo=o("bloom"),dTo=o(" \u2014 "),fN=a("a"),cTo=o("BloomForCausalLM"),fTo=o(" (Bloom model)"),mTo=l(),ou=a("li"),Kle=a("strong"),gTo=o("camembert"),hTo=o(" \u2014 "),mN=a("a"),pTo=o("CamembertForMaskedLM"),_To=o(" (CamemBERT model)"),uTo=l(),ru=a("li"),Zle=a("strong"),bTo=o("ctrl"),vTo=o(" \u2014 "),gN=a("a"),FTo=o("CTRLLMHeadModel"),TTo=o(" (CTRL model)"),MTo=l(),tu=a("li"),eie=a("strong"),ETo=o("data2vec-text"),CTo=o(" \u2014 "),hN=a("a"),wTo=o("Data2VecTextForMaskedLM"),ATo=o(" (Data2VecText model)"),yTo=l(),au=a("li"),oie=a("strong"),LTo=o("deberta"),xTo=o(" \u2014 "),pN=a("a"),$To=o("DebertaForMaskedLM"),kTo=o(" (DeBERTa model)"),STo=l(),nu=a("li"),rie=a("strong"),RTo=o("deberta-v2"),BTo=o(" \u2014 "),_N=a("a"),PTo=o("DebertaV2ForMaskedLM"),ITo=o(" (DeBERTa-v2 model)"),qTo=l(),su=a("li"),tie=a("strong"),NTo=o("distilbert"),jTo=o(" \u2014 "),uN=a("a"),DTo=o("DistilBertForMaskedLM"),GTo=o(" (DistilBERT model)"),OTo=l(),lu=a("li"),aie=a("strong"),VTo=o("electra"),XTo=o(" \u2014 "),bN=a("a"),zTo=o("ElectraForPreTraining"),WTo=o(" (ELECTRA model)"),QTo=l(),iu=a("li"),nie=a("strong"),HTo=o("flaubert"),UTo=o(" \u2014 "),vN=a("a"),JTo=o("FlaubertWithLMHeadModel"),YTo=o(" (FlauBERT model)"),KTo=l(),du=a("li"),sie=a("strong"),ZTo=o("flava"),e7o=o(" \u2014 "),FN=a("a"),o7o=o("FlavaForPreTraining"),r7o=o(" (Flava model)"),t7o=l(),cu=a("li"),lie=a("strong"),a7o=o("fnet"),n7o=o(" \u2014 "),TN=a("a"),s7o=o("FNetForPreTraining"),l7o=o(" (FNet model)"),i7o=l(),fu=a("li"),iie=a("strong"),d7o=o("fsmt"),c7o=o(" \u2014 "),MN=a("a"),f7o=o("FSMTForConditionalGeneration"),m7o=o(" (FairSeq Machine-Translation model)"),g7o=l(),mu=a("li"),die=a("strong"),h7o=o("funnel"),p7o=o(" \u2014 "),EN=a("a"),_7o=o("FunnelForPreTraining"),u7o=o(" (Funnel Transformer model)"),b7o=l(),gu=a("li"),cie=a("strong"),v7o=o("gpt2"),F7o=o(" \u2014 "),CN=a("a"),T7o=o("GPT2LMHeadModel"),M7o=o(" (OpenAI GPT-2 model)"),E7o=l(),hu=a("li"),fie=a("strong"),C7o=o("ibert"),w7o=o(" \u2014 "),wN=a("a"),A7o=o("IBertForMaskedLM"),y7o=o(" (I-BERT model)"),L7o=l(),pu=a("li"),mie=a("strong"),x7o=o("layoutlm"),$7o=o(" \u2014 "),AN=a("a"),k7o=o("LayoutLMForMaskedLM"),S7o=o(" (LayoutLM model)"),R7o=l(),_u=a("li"),gie=a("strong"),B7o=o("longformer"),P7o=o(" \u2014 "),yN=a("a"),I7o=o("LongformerForMaskedLM"),q7o=o(" (Longformer model)"),N7o=l(),uu=a("li"),hie=a("strong"),j7o=o("lxmert"),D7o=o(" \u2014 "),LN=a("a"),G7o=o("LxmertForPreTraining"),O7o=o(" (LXMERT model)"),V7o=l(),bu=a("li"),pie=a("strong"),X7o=o("megatron-bert"),z7o=o(" \u2014 "),xN=a("a"),W7o=o("MegatronBertForPreTraining"),Q7o=o(" (MegatronBert model)"),H7o=l(),vu=a("li"),_ie=a("strong"),U7o=o("mobilebert"),J7o=o(" \u2014 "),$N=a("a"),Y7o=o("MobileBertForPreTraining"),K7o=o(" (MobileBERT model)"),Z7o=l(),Fu=a("li"),uie=a("strong"),eMo=o("mpnet"),oMo=o(" \u2014 "),kN=a("a"),rMo=o("MPNetForMaskedLM"),tMo=o(" (MPNet model)"),aMo=l(),Tu=a("li"),bie=a("strong"),nMo=o("openai-gpt"),sMo=o(" \u2014 "),SN=a("a"),lMo=o("OpenAIGPTLMHeadModel"),iMo=o(" (OpenAI GPT model)"),dMo=l(),Mu=a("li"),vie=a("strong"),cMo=o("retribert"),fMo=o(" \u2014 "),RN=a("a"),mMo=o("RetriBertModel"),gMo=o(" (RetriBERT model)"),hMo=l(),Eu=a("li"),Fie=a("strong"),pMo=o("roberta"),_Mo=o(" \u2014 "),BN=a("a"),uMo=o("RobertaForMaskedLM"),bMo=o(" (RoBERTa model)"),vMo=l(),Cu=a("li"),Tie=a("strong"),FMo=o("splinter"),TMo=o(" \u2014 "),PN=a("a"),MMo=o("SplinterForPreTraining"),EMo=o(" (Splinter model)"),CMo=l(),wu=a("li"),Mie=a("strong"),wMo=o("squeezebert"),AMo=o(" \u2014 "),IN=a("a"),yMo=o("SqueezeBertForMaskedLM"),LMo=o(" (SqueezeBERT model)"),xMo=l(),Au=a("li"),Eie=a("strong"),$Mo=o("t5"),kMo=o(" \u2014 "),qN=a("a"),SMo=o("T5ForConditionalGeneration"),RMo=o(" (T5 model)"),BMo=l(),yu=a("li"),Cie=a("strong"),PMo=o("tapas"),IMo=o(" \u2014 "),NN=a("a"),qMo=o("TapasForMaskedLM"),NMo=o(" (TAPAS model)"),jMo=l(),Lu=a("li"),wie=a("strong"),DMo=o("transfo-xl"),GMo=o(" \u2014 "),jN=a("a"),OMo=o("TransfoXLLMHeadModel"),VMo=o(" (Transformer-XL model)"),XMo=l(),xu=a("li"),Aie=a("strong"),zMo=o("unispeech"),WMo=o(" \u2014 "),DN=a("a"),QMo=o("UniSpeechForPreTraining"),HMo=o(" (UniSpeech model)"),UMo=l(),$u=a("li"),yie=a("strong"),JMo=o("unispeech-sat"),YMo=o(" \u2014 "),GN=a("a"),KMo=o("UniSpeechSatForPreTraining"),ZMo=o(" (UniSpeechSat model)"),e4o=l(),ku=a("li"),Lie=a("strong"),o4o=o("visual_bert"),r4o=o(" \u2014 "),ON=a("a"),t4o=o("VisualBertForPreTraining"),a4o=o(" (VisualBert model)"),n4o=l(),Su=a("li"),xie=a("strong"),s4o=o("vit_mae"),l4o=o(" \u2014 "),VN=a("a"),i4o=o("ViTMAEForPreTraining"),d4o=o(" (ViTMAE model)"),c4o=l(),Ru=a("li"),$ie=a("strong"),f4o=o("wav2vec2"),m4o=o(" \u2014 "),XN=a("a"),g4o=o("Wav2Vec2ForPreTraining"),h4o=o(" (Wav2Vec2 model)"),p4o=l(),Bu=a("li"),kie=a("strong"),_4o=o("wav2vec2-conformer"),u4o=o(" \u2014 "),zN=a("a"),b4o=o("Wav2Vec2ConformerForPreTraining"),v4o=o(" (Wav2Vec2-Conformer model)"),F4o=l(),Pu=a("li"),Sie=a("strong"),T4o=o("xlm"),M4o=o(" \u2014 "),WN=a("a"),E4o=o("XLMWithLMHeadModel"),C4o=o(" (XLM model)"),w4o=l(),Iu=a("li"),Rie=a("strong"),A4o=o("xlm-roberta"),y4o=o(" \u2014 "),QN=a("a"),L4o=o("XLMRobertaForMaskedLM"),x4o=o(" (XLM-RoBERTa model)"),$4o=l(),qu=a("li"),Bie=a("strong"),k4o=o("xlm-roberta-xl"),S4o=o(" \u2014 "),HN=a("a"),R4o=o("XLMRobertaXLForMaskedLM"),B4o=o(" (XLM-RoBERTa-XL model)"),P4o=l(),Nu=a("li"),Pie=a("strong"),I4o=o("xlnet"),q4o=o(" \u2014 "),UN=a("a"),N4o=o("XLNetLMHeadModel"),j4o=o(" (XLNet model)"),D4o=l(),ju=a("p"),G4o=o("The model is set in evaluation mode by default using "),Iie=a("code"),O4o=o("model.eval()"),V4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=a("code"),X4o=o("model.train()"),z4o=l(),F(Du.$$.fragment),Fqe=l(),$i=a("h2"),Gu=a("a"),Nie=a("span"),F(Y6.$$.fragment),W4o=l(),jie=a("span"),Q4o=o("AutoModelForCausalLM"),Tqe=l(),$o=a("div"),F(K6.$$.fragment),H4o=l(),ki=a("p"),U4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JN=a("a"),J4o=o("from_pretrained()"),Y4o=o(" class method or the "),YN=a("a"),K4o=o("from_config()"),Z4o=o(` class
method.`),eEo=l(),Z6=a("p"),oEo=o("This class cannot be instantiated directly using "),Die=a("code"),rEo=o("__init__()"),tEo=o(" (throws an error)."),aEo=l(),nt=a("div"),F(ey.$$.fragment),nEo=l(),Gie=a("p"),sEo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lEo=l(),Si=a("p"),iEo=o(`Note:
Loading a model from its configuration file does `),Oie=a("strong"),dEo=o("not"),cEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=a("a"),fEo=o("from_pretrained()"),mEo=o(" to load the model weights."),gEo=l(),F(Ou.$$.fragment),hEo=l(),Ke=a("div"),F(oy.$$.fragment),pEo=l(),Vie=a("p"),_Eo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uEo=l(),$a=a("p"),bEo=o("The model class to instantiate is selected based on the "),Xie=a("code"),vEo=o("model_type"),FEo=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),TEo=o("pretrained_model_name_or_path"),MEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=a("code"),EEo=o("pretrained_model_name_or_path"),CEo=o(":"),wEo=l(),z=a("ul"),Vu=a("li"),Qie=a("strong"),AEo=o("bart"),yEo=o(" \u2014 "),ZN=a("a"),LEo=o("BartForCausalLM"),xEo=o(" (BART model)"),$Eo=l(),Xu=a("li"),Hie=a("strong"),kEo=o("bert"),SEo=o(" \u2014 "),ej=a("a"),REo=o("BertLMHeadModel"),BEo=o(" (BERT model)"),PEo=l(),zu=a("li"),Uie=a("strong"),IEo=o("bert-generation"),qEo=o(" \u2014 "),oj=a("a"),NEo=o("BertGenerationDecoder"),jEo=o(" (Bert Generation model)"),DEo=l(),Wu=a("li"),Jie=a("strong"),GEo=o("big_bird"),OEo=o(" \u2014 "),rj=a("a"),VEo=o("BigBirdForCausalLM"),XEo=o(" (BigBird model)"),zEo=l(),Qu=a("li"),Yie=a("strong"),WEo=o("bigbird_pegasus"),QEo=o(" \u2014 "),tj=a("a"),HEo=o("BigBirdPegasusForCausalLM"),UEo=o(" (BigBirdPegasus model)"),JEo=l(),Hu=a("li"),Kie=a("strong"),YEo=o("blenderbot"),KEo=o(" \u2014 "),aj=a("a"),ZEo=o("BlenderbotForCausalLM"),eCo=o(" (Blenderbot model)"),oCo=l(),Uu=a("li"),Zie=a("strong"),rCo=o("blenderbot-small"),tCo=o(" \u2014 "),nj=a("a"),aCo=o("BlenderbotSmallForCausalLM"),nCo=o(" (BlenderbotSmall model)"),sCo=l(),Ju=a("li"),ede=a("strong"),lCo=o("bloom"),iCo=o(" \u2014 "),sj=a("a"),dCo=o("BloomForCausalLM"),cCo=o(" (Bloom model)"),fCo=l(),Yu=a("li"),ode=a("strong"),mCo=o("camembert"),gCo=o(" \u2014 "),lj=a("a"),hCo=o("CamembertForCausalLM"),pCo=o(" (CamemBERT model)"),_Co=l(),Ku=a("li"),rde=a("strong"),uCo=o("ctrl"),bCo=o(" \u2014 "),ij=a("a"),vCo=o("CTRLLMHeadModel"),FCo=o(" (CTRL model)"),TCo=l(),Zu=a("li"),tde=a("strong"),MCo=o("data2vec-text"),ECo=o(" \u2014 "),dj=a("a"),CCo=o("Data2VecTextForCausalLM"),wCo=o(" (Data2VecText model)"),ACo=l(),e2=a("li"),ade=a("strong"),yCo=o("electra"),LCo=o(" \u2014 "),cj=a("a"),xCo=o("ElectraForCausalLM"),$Co=o(" (ELECTRA model)"),kCo=l(),o2=a("li"),nde=a("strong"),SCo=o("gpt2"),RCo=o(" \u2014 "),fj=a("a"),BCo=o("GPT2LMHeadModel"),PCo=o(" (OpenAI GPT-2 model)"),ICo=l(),r2=a("li"),sde=a("strong"),qCo=o("gpt_neo"),NCo=o(" \u2014 "),mj=a("a"),jCo=o("GPTNeoForCausalLM"),DCo=o(" (GPT Neo model)"),GCo=l(),t2=a("li"),lde=a("strong"),OCo=o("gptj"),VCo=o(" \u2014 "),gj=a("a"),XCo=o("GPTJForCausalLM"),zCo=o(" (GPT-J model)"),WCo=l(),a2=a("li"),ide=a("strong"),QCo=o("marian"),HCo=o(" \u2014 "),hj=a("a"),UCo=o("MarianForCausalLM"),JCo=o(" (Marian model)"),YCo=l(),n2=a("li"),dde=a("strong"),KCo=o("mbart"),ZCo=o(" \u2014 "),pj=a("a"),e5o=o("MBartForCausalLM"),o5o=o(" (mBART model)"),r5o=l(),s2=a("li"),cde=a("strong"),t5o=o("megatron-bert"),a5o=o(" \u2014 "),_j=a("a"),n5o=o("MegatronBertForCausalLM"),s5o=o(" (MegatronBert model)"),l5o=l(),l2=a("li"),fde=a("strong"),i5o=o("openai-gpt"),d5o=o(" \u2014 "),uj=a("a"),c5o=o("OpenAIGPTLMHeadModel"),f5o=o(" (OpenAI GPT model)"),m5o=l(),i2=a("li"),mde=a("strong"),g5o=o("opt"),h5o=o(" \u2014 "),bj=a("a"),p5o=o("OPTForCausalLM"),_5o=o(" (OPT model)"),u5o=l(),d2=a("li"),gde=a("strong"),b5o=o("pegasus"),v5o=o(" \u2014 "),vj=a("a"),F5o=o("PegasusForCausalLM"),T5o=o(" (Pegasus model)"),M5o=l(),c2=a("li"),hde=a("strong"),E5o=o("plbart"),C5o=o(" \u2014 "),Fj=a("a"),w5o=o("PLBartForCausalLM"),A5o=o(" (PLBart model)"),y5o=l(),f2=a("li"),pde=a("strong"),L5o=o("prophetnet"),x5o=o(" \u2014 "),Tj=a("a"),$5o=o("ProphetNetForCausalLM"),k5o=o(" (ProphetNet model)"),S5o=l(),m2=a("li"),_de=a("strong"),R5o=o("qdqbert"),B5o=o(" \u2014 "),Mj=a("a"),P5o=o("QDQBertLMHeadModel"),I5o=o(" (QDQBert model)"),q5o=l(),g2=a("li"),ude=a("strong"),N5o=o("reformer"),j5o=o(" \u2014 "),Ej=a("a"),D5o=o("ReformerModelWithLMHead"),G5o=o(" (Reformer model)"),O5o=l(),h2=a("li"),bde=a("strong"),V5o=o("rembert"),X5o=o(" \u2014 "),Cj=a("a"),z5o=o("RemBertForCausalLM"),W5o=o(" (RemBERT model)"),Q5o=l(),p2=a("li"),vde=a("strong"),H5o=o("roberta"),U5o=o(" \u2014 "),wj=a("a"),J5o=o("RobertaForCausalLM"),Y5o=o(" (RoBERTa model)"),K5o=l(),_2=a("li"),Fde=a("strong"),Z5o=o("roformer"),e3o=o(" \u2014 "),Aj=a("a"),o3o=o("RoFormerForCausalLM"),r3o=o(" (RoFormer model)"),t3o=l(),u2=a("li"),Tde=a("strong"),a3o=o("speech_to_text_2"),n3o=o(" \u2014 "),yj=a("a"),s3o=o("Speech2Text2ForCausalLM"),l3o=o(" (Speech2Text2 model)"),i3o=l(),b2=a("li"),Mde=a("strong"),d3o=o("transfo-xl"),c3o=o(" \u2014 "),Lj=a("a"),f3o=o("TransfoXLLMHeadModel"),m3o=o(" (Transformer-XL model)"),g3o=l(),v2=a("li"),Ede=a("strong"),h3o=o("trocr"),p3o=o(" \u2014 "),xj=a("a"),_3o=o("TrOCRForCausalLM"),u3o=o(" (TrOCR model)"),b3o=l(),F2=a("li"),Cde=a("strong"),v3o=o("xglm"),F3o=o(" \u2014 "),$j=a("a"),T3o=o("XGLMForCausalLM"),M3o=o(" (XGLM model)"),E3o=l(),T2=a("li"),wde=a("strong"),C3o=o("xlm"),w3o=o(" \u2014 "),kj=a("a"),A3o=o("XLMWithLMHeadModel"),y3o=o(" (XLM model)"),L3o=l(),M2=a("li"),Ade=a("strong"),x3o=o("xlm-prophetnet"),$3o=o(" \u2014 "),Sj=a("a"),k3o=o("XLMProphetNetForCausalLM"),S3o=o(" (XLMProphetNet model)"),R3o=l(),E2=a("li"),yde=a("strong"),B3o=o("xlm-roberta"),P3o=o(" \u2014 "),Rj=a("a"),I3o=o("XLMRobertaForCausalLM"),q3o=o(" (XLM-RoBERTa model)"),N3o=l(),C2=a("li"),Lde=a("strong"),j3o=o("xlm-roberta-xl"),D3o=o(" \u2014 "),Bj=a("a"),G3o=o("XLMRobertaXLForCausalLM"),O3o=o(" (XLM-RoBERTa-XL model)"),V3o=l(),w2=a("li"),xde=a("strong"),X3o=o("xlnet"),z3o=o(" \u2014 "),Pj=a("a"),W3o=o("XLNetLMHeadModel"),Q3o=o(" (XLNet model)"),H3o=l(),A2=a("p"),U3o=o("The model is set in evaluation mode by default using "),$de=a("code"),J3o=o("model.eval()"),Y3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kde=a("code"),K3o=o("model.train()"),Z3o=l(),F(y2.$$.fragment),Mqe=l(),Ri=a("h2"),L2=a("a"),Sde=a("span"),F(ry.$$.fragment),ewo=l(),Rde=a("span"),owo=o("AutoModelForMaskedLM"),Eqe=l(),ko=a("div"),F(ty.$$.fragment),rwo=l(),Bi=a("p"),two=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ij=a("a"),awo=o("from_pretrained()"),nwo=o(" class method or the "),qj=a("a"),swo=o("from_config()"),lwo=o(` class
method.`),iwo=l(),ay=a("p"),dwo=o("This class cannot be instantiated directly using "),Bde=a("code"),cwo=o("__init__()"),fwo=o(" (throws an error)."),mwo=l(),st=a("div"),F(ny.$$.fragment),gwo=l(),Pde=a("p"),hwo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pwo=l(),Pi=a("p"),_wo=o(`Note:
Loading a model from its configuration file does `),Ide=a("strong"),uwo=o("not"),bwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nj=a("a"),vwo=o("from_pretrained()"),Fwo=o(" to load the model weights."),Two=l(),F(x2.$$.fragment),Mwo=l(),Ze=a("div"),F(sy.$$.fragment),Ewo=l(),qde=a("p"),Cwo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wwo=l(),ka=a("p"),Awo=o("The model class to instantiate is selected based on the "),Nde=a("code"),ywo=o("model_type"),Lwo=o(` property of the config object (either
passed as an argument or loaded from `),jde=a("code"),xwo=o("pretrained_model_name_or_path"),$wo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dde=a("code"),kwo=o("pretrained_model_name_or_path"),Swo=o(":"),Rwo=l(),Q=a("ul"),$2=a("li"),Gde=a("strong"),Bwo=o("albert"),Pwo=o(" \u2014 "),jj=a("a"),Iwo=o("AlbertForMaskedLM"),qwo=o(" (ALBERT model)"),Nwo=l(),k2=a("li"),Ode=a("strong"),jwo=o("bart"),Dwo=o(" \u2014 "),Dj=a("a"),Gwo=o("BartForConditionalGeneration"),Owo=o(" (BART model)"),Vwo=l(),S2=a("li"),Vde=a("strong"),Xwo=o("bert"),zwo=o(" \u2014 "),Gj=a("a"),Wwo=o("BertForMaskedLM"),Qwo=o(" (BERT model)"),Hwo=l(),R2=a("li"),Xde=a("strong"),Uwo=o("big_bird"),Jwo=o(" \u2014 "),Oj=a("a"),Ywo=o("BigBirdForMaskedLM"),Kwo=o(" (BigBird model)"),Zwo=l(),B2=a("li"),zde=a("strong"),eAo=o("camembert"),oAo=o(" \u2014 "),Vj=a("a"),rAo=o("CamembertForMaskedLM"),tAo=o(" (CamemBERT model)"),aAo=l(),P2=a("li"),Wde=a("strong"),nAo=o("convbert"),sAo=o(" \u2014 "),Xj=a("a"),lAo=o("ConvBertForMaskedLM"),iAo=o(" (ConvBERT model)"),dAo=l(),I2=a("li"),Qde=a("strong"),cAo=o("data2vec-text"),fAo=o(" \u2014 "),zj=a("a"),mAo=o("Data2VecTextForMaskedLM"),gAo=o(" (Data2VecText model)"),hAo=l(),q2=a("li"),Hde=a("strong"),pAo=o("deberta"),_Ao=o(" \u2014 "),Wj=a("a"),uAo=o("DebertaForMaskedLM"),bAo=o(" (DeBERTa model)"),vAo=l(),N2=a("li"),Ude=a("strong"),FAo=o("deberta-v2"),TAo=o(" \u2014 "),Qj=a("a"),MAo=o("DebertaV2ForMaskedLM"),EAo=o(" (DeBERTa-v2 model)"),CAo=l(),j2=a("li"),Jde=a("strong"),wAo=o("distilbert"),AAo=o(" \u2014 "),Hj=a("a"),yAo=o("DistilBertForMaskedLM"),LAo=o(" (DistilBERT model)"),xAo=l(),D2=a("li"),Yde=a("strong"),$Ao=o("electra"),kAo=o(" \u2014 "),Uj=a("a"),SAo=o("ElectraForMaskedLM"),RAo=o(" (ELECTRA model)"),BAo=l(),G2=a("li"),Kde=a("strong"),PAo=o("flaubert"),IAo=o(" \u2014 "),Jj=a("a"),qAo=o("FlaubertWithLMHeadModel"),NAo=o(" (FlauBERT model)"),jAo=l(),O2=a("li"),Zde=a("strong"),DAo=o("fnet"),GAo=o(" \u2014 "),Yj=a("a"),OAo=o("FNetForMaskedLM"),VAo=o(" (FNet model)"),XAo=l(),V2=a("li"),ece=a("strong"),zAo=o("funnel"),WAo=o(" \u2014 "),Kj=a("a"),QAo=o("FunnelForMaskedLM"),HAo=o(" (Funnel Transformer model)"),UAo=l(),X2=a("li"),oce=a("strong"),JAo=o("ibert"),YAo=o(" \u2014 "),Zj=a("a"),KAo=o("IBertForMaskedLM"),ZAo=o(" (I-BERT model)"),e6o=l(),z2=a("li"),rce=a("strong"),o6o=o("layoutlm"),r6o=o(" \u2014 "),eD=a("a"),t6o=o("LayoutLMForMaskedLM"),a6o=o(" (LayoutLM model)"),n6o=l(),W2=a("li"),tce=a("strong"),s6o=o("longformer"),l6o=o(" \u2014 "),oD=a("a"),i6o=o("LongformerForMaskedLM"),d6o=o(" (Longformer model)"),c6o=l(),Q2=a("li"),ace=a("strong"),f6o=o("mbart"),m6o=o(" \u2014 "),rD=a("a"),g6o=o("MBartForConditionalGeneration"),h6o=o(" (mBART model)"),p6o=l(),H2=a("li"),nce=a("strong"),_6o=o("megatron-bert"),u6o=o(" \u2014 "),tD=a("a"),b6o=o("MegatronBertForMaskedLM"),v6o=o(" (MegatronBert model)"),F6o=l(),U2=a("li"),sce=a("strong"),T6o=o("mobilebert"),M6o=o(" \u2014 "),aD=a("a"),E6o=o("MobileBertForMaskedLM"),C6o=o(" (MobileBERT model)"),w6o=l(),J2=a("li"),lce=a("strong"),A6o=o("mpnet"),y6o=o(" \u2014 "),nD=a("a"),L6o=o("MPNetForMaskedLM"),x6o=o(" (MPNet model)"),$6o=l(),Y2=a("li"),ice=a("strong"),k6o=o("nystromformer"),S6o=o(" \u2014 "),sD=a("a"),R6o=o("NystromformerForMaskedLM"),B6o=o(" (Nystromformer model)"),P6o=l(),K2=a("li"),dce=a("strong"),I6o=o("perceiver"),q6o=o(" \u2014 "),lD=a("a"),N6o=o("PerceiverForMaskedLM"),j6o=o(" (Perceiver model)"),D6o=l(),Z2=a("li"),cce=a("strong"),G6o=o("qdqbert"),O6o=o(" \u2014 "),iD=a("a"),V6o=o("QDQBertForMaskedLM"),X6o=o(" (QDQBert model)"),z6o=l(),e1=a("li"),fce=a("strong"),W6o=o("reformer"),Q6o=o(" \u2014 "),dD=a("a"),H6o=o("ReformerForMaskedLM"),U6o=o(" (Reformer model)"),J6o=l(),o1=a("li"),mce=a("strong"),Y6o=o("rembert"),K6o=o(" \u2014 "),cD=a("a"),Z6o=o("RemBertForMaskedLM"),eyo=o(" (RemBERT model)"),oyo=l(),r1=a("li"),gce=a("strong"),ryo=o("roberta"),tyo=o(" \u2014 "),fD=a("a"),ayo=o("RobertaForMaskedLM"),nyo=o(" (RoBERTa model)"),syo=l(),t1=a("li"),hce=a("strong"),lyo=o("roformer"),iyo=o(" \u2014 "),mD=a("a"),dyo=o("RoFormerForMaskedLM"),cyo=o(" (RoFormer model)"),fyo=l(),a1=a("li"),pce=a("strong"),myo=o("squeezebert"),gyo=o(" \u2014 "),gD=a("a"),hyo=o("SqueezeBertForMaskedLM"),pyo=o(" (SqueezeBERT model)"),_yo=l(),n1=a("li"),_ce=a("strong"),uyo=o("tapas"),byo=o(" \u2014 "),hD=a("a"),vyo=o("TapasForMaskedLM"),Fyo=o(" (TAPAS model)"),Tyo=l(),s1=a("li"),uce=a("strong"),Myo=o("wav2vec2"),Eyo=o(" \u2014 "),bce=a("code"),Cyo=o("Wav2Vec2ForMaskedLM"),wyo=o(" (Wav2Vec2 model)"),Ayo=l(),l1=a("li"),vce=a("strong"),yyo=o("xlm"),Lyo=o(" \u2014 "),pD=a("a"),xyo=o("XLMWithLMHeadModel"),$yo=o(" (XLM model)"),kyo=l(),i1=a("li"),Fce=a("strong"),Syo=o("xlm-roberta"),Ryo=o(" \u2014 "),_D=a("a"),Byo=o("XLMRobertaForMaskedLM"),Pyo=o(" (XLM-RoBERTa model)"),Iyo=l(),d1=a("li"),Tce=a("strong"),qyo=o("xlm-roberta-xl"),Nyo=o(" \u2014 "),uD=a("a"),jyo=o("XLMRobertaXLForMaskedLM"),Dyo=o(" (XLM-RoBERTa-XL model)"),Gyo=l(),c1=a("li"),Mce=a("strong"),Oyo=o("yoso"),Vyo=o(" \u2014 "),bD=a("a"),Xyo=o("YosoForMaskedLM"),zyo=o(" (YOSO model)"),Wyo=l(),f1=a("p"),Qyo=o("The model is set in evaluation mode by default using "),Ece=a("code"),Hyo=o("model.eval()"),Uyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=a("code"),Jyo=o("model.train()"),Yyo=l(),F(m1.$$.fragment),Cqe=l(),Ii=a("h2"),g1=a("a"),wce=a("span"),F(ly.$$.fragment),Kyo=l(),Ace=a("span"),Zyo=o("AutoModelForSeq2SeqLM"),wqe=l(),So=a("div"),F(iy.$$.fragment),eLo=l(),qi=a("p"),oLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vD=a("a"),rLo=o("from_pretrained()"),tLo=o(" class method or the "),FD=a("a"),aLo=o("from_config()"),nLo=o(` class
method.`),sLo=l(),dy=a("p"),lLo=o("This class cannot be instantiated directly using "),yce=a("code"),iLo=o("__init__()"),dLo=o(" (throws an error)."),cLo=l(),lt=a("div"),F(cy.$$.fragment),fLo=l(),Lce=a("p"),mLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gLo=l(),Ni=a("p"),hLo=o(`Note:
Loading a model from its configuration file does `),xce=a("strong"),pLo=o("not"),_Lo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TD=a("a"),uLo=o("from_pretrained()"),bLo=o(" to load the model weights."),vLo=l(),F(h1.$$.fragment),FLo=l(),eo=a("div"),F(fy.$$.fragment),TLo=l(),$ce=a("p"),MLo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ELo=l(),Sa=a("p"),CLo=o("The model class to instantiate is selected based on the "),kce=a("code"),wLo=o("model_type"),ALo=o(` property of the config object (either
passed as an argument or loaded from `),Sce=a("code"),yLo=o("pretrained_model_name_or_path"),LLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=a("code"),xLo=o("pretrained_model_name_or_path"),$Lo=o(":"),kLo=l(),_e=a("ul"),p1=a("li"),Bce=a("strong"),SLo=o("bart"),RLo=o(" \u2014 "),MD=a("a"),BLo=o("BartForConditionalGeneration"),PLo=o(" (BART model)"),ILo=l(),_1=a("li"),Pce=a("strong"),qLo=o("bigbird_pegasus"),NLo=o(" \u2014 "),ED=a("a"),jLo=o("BigBirdPegasusForConditionalGeneration"),DLo=o(" (BigBirdPegasus model)"),GLo=l(),u1=a("li"),Ice=a("strong"),OLo=o("blenderbot"),VLo=o(" \u2014 "),CD=a("a"),XLo=o("BlenderbotForConditionalGeneration"),zLo=o(" (Blenderbot model)"),WLo=l(),b1=a("li"),qce=a("strong"),QLo=o("blenderbot-small"),HLo=o(" \u2014 "),wD=a("a"),ULo=o("BlenderbotSmallForConditionalGeneration"),JLo=o(" (BlenderbotSmall model)"),YLo=l(),v1=a("li"),Nce=a("strong"),KLo=o("encoder-decoder"),ZLo=o(" \u2014 "),AD=a("a"),e8o=o("EncoderDecoderModel"),o8o=o(" (Encoder decoder model)"),r8o=l(),F1=a("li"),jce=a("strong"),t8o=o("fsmt"),a8o=o(" \u2014 "),yD=a("a"),n8o=o("FSMTForConditionalGeneration"),s8o=o(" (FairSeq Machine-Translation model)"),l8o=l(),T1=a("li"),Dce=a("strong"),i8o=o("led"),d8o=o(" \u2014 "),LD=a("a"),c8o=o("LEDForConditionalGeneration"),f8o=o(" (LED model)"),m8o=l(),M1=a("li"),Gce=a("strong"),g8o=o("m2m_100"),h8o=o(" \u2014 "),xD=a("a"),p8o=o("M2M100ForConditionalGeneration"),_8o=o(" (M2M100 model)"),u8o=l(),E1=a("li"),Oce=a("strong"),b8o=o("marian"),v8o=o(" \u2014 "),$D=a("a"),F8o=o("MarianMTModel"),T8o=o(" (Marian model)"),M8o=l(),C1=a("li"),Vce=a("strong"),E8o=o("mbart"),C8o=o(" \u2014 "),kD=a("a"),w8o=o("MBartForConditionalGeneration"),A8o=o(" (mBART model)"),y8o=l(),w1=a("li"),Xce=a("strong"),L8o=o("mt5"),x8o=o(" \u2014 "),SD=a("a"),$8o=o("MT5ForConditionalGeneration"),k8o=o(" (mT5 model)"),S8o=l(),A1=a("li"),zce=a("strong"),R8o=o("pegasus"),B8o=o(" \u2014 "),RD=a("a"),P8o=o("PegasusForConditionalGeneration"),I8o=o(" (Pegasus model)"),q8o=l(),y1=a("li"),Wce=a("strong"),N8o=o("plbart"),j8o=o(" \u2014 "),BD=a("a"),D8o=o("PLBartForConditionalGeneration"),G8o=o(" (PLBart model)"),O8o=l(),L1=a("li"),Qce=a("strong"),V8o=o("prophetnet"),X8o=o(" \u2014 "),PD=a("a"),z8o=o("ProphetNetForConditionalGeneration"),W8o=o(" (ProphetNet model)"),Q8o=l(),x1=a("li"),Hce=a("strong"),H8o=o("t5"),U8o=o(" \u2014 "),ID=a("a"),J8o=o("T5ForConditionalGeneration"),Y8o=o(" (T5 model)"),K8o=l(),$1=a("li"),Uce=a("strong"),Z8o=o("xlm-prophetnet"),e9o=o(" \u2014 "),qD=a("a"),o9o=o("XLMProphetNetForConditionalGeneration"),r9o=o(" (XLMProphetNet model)"),t9o=l(),k1=a("p"),a9o=o("The model is set in evaluation mode by default using "),Jce=a("code"),n9o=o("model.eval()"),s9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=a("code"),l9o=o("model.train()"),i9o=l(),F(S1.$$.fragment),Aqe=l(),ji=a("h2"),R1=a("a"),Kce=a("span"),F(my.$$.fragment),d9o=l(),Zce=a("span"),c9o=o("AutoModelForSequenceClassification"),yqe=l(),Ro=a("div"),F(gy.$$.fragment),f9o=l(),Di=a("p"),m9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ND=a("a"),g9o=o("from_pretrained()"),h9o=o(" class method or the "),jD=a("a"),p9o=o("from_config()"),_9o=o(` class
method.`),u9o=l(),hy=a("p"),b9o=o("This class cannot be instantiated directly using "),efe=a("code"),v9o=o("__init__()"),F9o=o(" (throws an error)."),T9o=l(),it=a("div"),F(py.$$.fragment),M9o=l(),ofe=a("p"),E9o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),C9o=l(),Gi=a("p"),w9o=o(`Note:
Loading a model from its configuration file does `),rfe=a("strong"),A9o=o("not"),y9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DD=a("a"),L9o=o("from_pretrained()"),x9o=o(" to load the model weights."),$9o=l(),F(B1.$$.fragment),k9o=l(),oo=a("div"),F(_y.$$.fragment),S9o=l(),tfe=a("p"),R9o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),B9o=l(),Ra=a("p"),P9o=o("The model class to instantiate is selected based on the "),afe=a("code"),I9o=o("model_type"),q9o=o(` property of the config object (either
passed as an argument or loaded from `),nfe=a("code"),N9o=o("pretrained_model_name_or_path"),j9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=a("code"),D9o=o("pretrained_model_name_or_path"),G9o=o(":"),O9o=l(),q=a("ul"),P1=a("li"),lfe=a("strong"),V9o=o("albert"),X9o=o(" \u2014 "),GD=a("a"),z9o=o("AlbertForSequenceClassification"),W9o=o(" (ALBERT model)"),Q9o=l(),I1=a("li"),ife=a("strong"),H9o=o("bart"),U9o=o(" \u2014 "),OD=a("a"),J9o=o("BartForSequenceClassification"),Y9o=o(" (BART model)"),K9o=l(),q1=a("li"),dfe=a("strong"),Z9o=o("bert"),exo=o(" \u2014 "),VD=a("a"),oxo=o("BertForSequenceClassification"),rxo=o(" (BERT model)"),txo=l(),N1=a("li"),cfe=a("strong"),axo=o("big_bird"),nxo=o(" \u2014 "),XD=a("a"),sxo=o("BigBirdForSequenceClassification"),lxo=o(" (BigBird model)"),ixo=l(),j1=a("li"),ffe=a("strong"),dxo=o("bigbird_pegasus"),cxo=o(" \u2014 "),zD=a("a"),fxo=o("BigBirdPegasusForSequenceClassification"),mxo=o(" (BigBirdPegasus model)"),gxo=l(),D1=a("li"),mfe=a("strong"),hxo=o("camembert"),pxo=o(" \u2014 "),WD=a("a"),_xo=o("CamembertForSequenceClassification"),uxo=o(" (CamemBERT model)"),bxo=l(),G1=a("li"),gfe=a("strong"),vxo=o("canine"),Fxo=o(" \u2014 "),QD=a("a"),Txo=o("CanineForSequenceClassification"),Mxo=o(" (Canine model)"),Exo=l(),O1=a("li"),hfe=a("strong"),Cxo=o("convbert"),wxo=o(" \u2014 "),HD=a("a"),Axo=o("ConvBertForSequenceClassification"),yxo=o(" (ConvBERT model)"),Lxo=l(),V1=a("li"),pfe=a("strong"),xxo=o("ctrl"),$xo=o(" \u2014 "),UD=a("a"),kxo=o("CTRLForSequenceClassification"),Sxo=o(" (CTRL model)"),Rxo=l(),X1=a("li"),_fe=a("strong"),Bxo=o("data2vec-text"),Pxo=o(" \u2014 "),JD=a("a"),Ixo=o("Data2VecTextForSequenceClassification"),qxo=o(" (Data2VecText model)"),Nxo=l(),z1=a("li"),ufe=a("strong"),jxo=o("deberta"),Dxo=o(" \u2014 "),YD=a("a"),Gxo=o("DebertaForSequenceClassification"),Oxo=o(" (DeBERTa model)"),Vxo=l(),W1=a("li"),bfe=a("strong"),Xxo=o("deberta-v2"),zxo=o(" \u2014 "),KD=a("a"),Wxo=o("DebertaV2ForSequenceClassification"),Qxo=o(" (DeBERTa-v2 model)"),Hxo=l(),Q1=a("li"),vfe=a("strong"),Uxo=o("distilbert"),Jxo=o(" \u2014 "),ZD=a("a"),Yxo=o("DistilBertForSequenceClassification"),Kxo=o(" (DistilBERT model)"),Zxo=l(),H1=a("li"),Ffe=a("strong"),e$o=o("electra"),o$o=o(" \u2014 "),eG=a("a"),r$o=o("ElectraForSequenceClassification"),t$o=o(" (ELECTRA model)"),a$o=l(),U1=a("li"),Tfe=a("strong"),n$o=o("flaubert"),s$o=o(" \u2014 "),oG=a("a"),l$o=o("FlaubertForSequenceClassification"),i$o=o(" (FlauBERT model)"),d$o=l(),J1=a("li"),Mfe=a("strong"),c$o=o("fnet"),f$o=o(" \u2014 "),rG=a("a"),m$o=o("FNetForSequenceClassification"),g$o=o(" (FNet model)"),h$o=l(),Y1=a("li"),Efe=a("strong"),p$o=o("funnel"),_$o=o(" \u2014 "),tG=a("a"),u$o=o("FunnelForSequenceClassification"),b$o=o(" (Funnel Transformer model)"),v$o=l(),K1=a("li"),Cfe=a("strong"),F$o=o("gpt2"),T$o=o(" \u2014 "),aG=a("a"),M$o=o("GPT2ForSequenceClassification"),E$o=o(" (OpenAI GPT-2 model)"),C$o=l(),Z1=a("li"),wfe=a("strong"),w$o=o("gpt_neo"),A$o=o(" \u2014 "),nG=a("a"),y$o=o("GPTNeoForSequenceClassification"),L$o=o(" (GPT Neo model)"),x$o=l(),eb=a("li"),Afe=a("strong"),$$o=o("gptj"),k$o=o(" \u2014 "),sG=a("a"),S$o=o("GPTJForSequenceClassification"),R$o=o(" (GPT-J model)"),B$o=l(),ob=a("li"),yfe=a("strong"),P$o=o("ibert"),I$o=o(" \u2014 "),lG=a("a"),q$o=o("IBertForSequenceClassification"),N$o=o(" (I-BERT model)"),j$o=l(),rb=a("li"),Lfe=a("strong"),D$o=o("layoutlm"),G$o=o(" \u2014 "),iG=a("a"),O$o=o("LayoutLMForSequenceClassification"),V$o=o(" (LayoutLM model)"),X$o=l(),tb=a("li"),xfe=a("strong"),z$o=o("layoutlmv2"),W$o=o(" \u2014 "),dG=a("a"),Q$o=o("LayoutLMv2ForSequenceClassification"),H$o=o(" (LayoutLMv2 model)"),U$o=l(),ab=a("li"),$fe=a("strong"),J$o=o("led"),Y$o=o(" \u2014 "),cG=a("a"),K$o=o("LEDForSequenceClassification"),Z$o=o(" (LED model)"),eko=l(),nb=a("li"),kfe=a("strong"),oko=o("longformer"),rko=o(" \u2014 "),fG=a("a"),tko=o("LongformerForSequenceClassification"),ako=o(" (Longformer model)"),nko=l(),sb=a("li"),Sfe=a("strong"),sko=o("mbart"),lko=o(" \u2014 "),mG=a("a"),iko=o("MBartForSequenceClassification"),dko=o(" (mBART model)"),cko=l(),lb=a("li"),Rfe=a("strong"),fko=o("megatron-bert"),mko=o(" \u2014 "),gG=a("a"),gko=o("MegatronBertForSequenceClassification"),hko=o(" (MegatronBert model)"),pko=l(),ib=a("li"),Bfe=a("strong"),_ko=o("mobilebert"),uko=o(" \u2014 "),hG=a("a"),bko=o("MobileBertForSequenceClassification"),vko=o(" (MobileBERT model)"),Fko=l(),db=a("li"),Pfe=a("strong"),Tko=o("mpnet"),Mko=o(" \u2014 "),pG=a("a"),Eko=o("MPNetForSequenceClassification"),Cko=o(" (MPNet model)"),wko=l(),cb=a("li"),Ife=a("strong"),Ako=o("nystromformer"),yko=o(" \u2014 "),_G=a("a"),Lko=o("NystromformerForSequenceClassification"),xko=o(" (Nystromformer model)"),$ko=l(),fb=a("li"),qfe=a("strong"),kko=o("openai-gpt"),Sko=o(" \u2014 "),uG=a("a"),Rko=o("OpenAIGPTForSequenceClassification"),Bko=o(" (OpenAI GPT model)"),Pko=l(),mb=a("li"),Nfe=a("strong"),Iko=o("perceiver"),qko=o(" \u2014 "),bG=a("a"),Nko=o("PerceiverForSequenceClassification"),jko=o(" (Perceiver model)"),Dko=l(),gb=a("li"),jfe=a("strong"),Gko=o("plbart"),Oko=o(" \u2014 "),vG=a("a"),Vko=o("PLBartForSequenceClassification"),Xko=o(" (PLBart model)"),zko=l(),hb=a("li"),Dfe=a("strong"),Wko=o("qdqbert"),Qko=o(" \u2014 "),FG=a("a"),Hko=o("QDQBertForSequenceClassification"),Uko=o(" (QDQBert model)"),Jko=l(),pb=a("li"),Gfe=a("strong"),Yko=o("reformer"),Kko=o(" \u2014 "),TG=a("a"),Zko=o("ReformerForSequenceClassification"),eSo=o(" (Reformer model)"),oSo=l(),_b=a("li"),Ofe=a("strong"),rSo=o("rembert"),tSo=o(" \u2014 "),MG=a("a"),aSo=o("RemBertForSequenceClassification"),nSo=o(" (RemBERT model)"),sSo=l(),ub=a("li"),Vfe=a("strong"),lSo=o("roberta"),iSo=o(" \u2014 "),EG=a("a"),dSo=o("RobertaForSequenceClassification"),cSo=o(" (RoBERTa model)"),fSo=l(),bb=a("li"),Xfe=a("strong"),mSo=o("roformer"),gSo=o(" \u2014 "),CG=a("a"),hSo=o("RoFormerForSequenceClassification"),pSo=o(" (RoFormer model)"),_So=l(),vb=a("li"),zfe=a("strong"),uSo=o("squeezebert"),bSo=o(" \u2014 "),wG=a("a"),vSo=o("SqueezeBertForSequenceClassification"),FSo=o(" (SqueezeBERT model)"),TSo=l(),Fb=a("li"),Wfe=a("strong"),MSo=o("tapas"),ESo=o(" \u2014 "),AG=a("a"),CSo=o("TapasForSequenceClassification"),wSo=o(" (TAPAS model)"),ASo=l(),Tb=a("li"),Qfe=a("strong"),ySo=o("transfo-xl"),LSo=o(" \u2014 "),yG=a("a"),xSo=o("TransfoXLForSequenceClassification"),$So=o(" (Transformer-XL model)"),kSo=l(),Mb=a("li"),Hfe=a("strong"),SSo=o("xlm"),RSo=o(" \u2014 "),LG=a("a"),BSo=o("XLMForSequenceClassification"),PSo=o(" (XLM model)"),ISo=l(),Eb=a("li"),Ufe=a("strong"),qSo=o("xlm-roberta"),NSo=o(" \u2014 "),xG=a("a"),jSo=o("XLMRobertaForSequenceClassification"),DSo=o(" (XLM-RoBERTa model)"),GSo=l(),Cb=a("li"),Jfe=a("strong"),OSo=o("xlm-roberta-xl"),VSo=o(" \u2014 "),$G=a("a"),XSo=o("XLMRobertaXLForSequenceClassification"),zSo=o(" (XLM-RoBERTa-XL model)"),WSo=l(),wb=a("li"),Yfe=a("strong"),QSo=o("xlnet"),HSo=o(" \u2014 "),kG=a("a"),USo=o("XLNetForSequenceClassification"),JSo=o(" (XLNet model)"),YSo=l(),Ab=a("li"),Kfe=a("strong"),KSo=o("yoso"),ZSo=o(" \u2014 "),SG=a("a"),eRo=o("YosoForSequenceClassification"),oRo=o(" (YOSO model)"),rRo=l(),yb=a("p"),tRo=o("The model is set in evaluation mode by default using "),Zfe=a("code"),aRo=o("model.eval()"),nRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),sRo=o("model.train()"),lRo=l(),F(Lb.$$.fragment),Lqe=l(),Oi=a("h2"),xb=a("a"),ome=a("span"),F(uy.$$.fragment),iRo=l(),rme=a("span"),dRo=o("AutoModelForMultipleChoice"),xqe=l(),Bo=a("div"),F(by.$$.fragment),cRo=l(),Vi=a("p"),fRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RG=a("a"),mRo=o("from_pretrained()"),gRo=o(" class method or the "),BG=a("a"),hRo=o("from_config()"),pRo=o(` class
method.`),_Ro=l(),vy=a("p"),uRo=o("This class cannot be instantiated directly using "),tme=a("code"),bRo=o("__init__()"),vRo=o(" (throws an error)."),FRo=l(),dt=a("div"),F(Fy.$$.fragment),TRo=l(),ame=a("p"),MRo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ERo=l(),Xi=a("p"),CRo=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),wRo=o("not"),ARo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),yRo=o("from_pretrained()"),LRo=o(" to load the model weights."),xRo=l(),F($b.$$.fragment),$Ro=l(),ro=a("div"),F(Ty.$$.fragment),kRo=l(),sme=a("p"),SRo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),RRo=l(),Ba=a("p"),BRo=o("The model class to instantiate is selected based on the "),lme=a("code"),PRo=o("model_type"),IRo=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),qRo=o("pretrained_model_name_or_path"),NRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),jRo=o("pretrained_model_name_or_path"),DRo=o(":"),GRo=l(),Y=a("ul"),kb=a("li"),cme=a("strong"),ORo=o("albert"),VRo=o(" \u2014 "),IG=a("a"),XRo=o("AlbertForMultipleChoice"),zRo=o(" (ALBERT model)"),WRo=l(),Sb=a("li"),fme=a("strong"),QRo=o("bert"),HRo=o(" \u2014 "),qG=a("a"),URo=o("BertForMultipleChoice"),JRo=o(" (BERT model)"),YRo=l(),Rb=a("li"),mme=a("strong"),KRo=o("big_bird"),ZRo=o(" \u2014 "),NG=a("a"),eBo=o("BigBirdForMultipleChoice"),oBo=o(" (BigBird model)"),rBo=l(),Bb=a("li"),gme=a("strong"),tBo=o("camembert"),aBo=o(" \u2014 "),jG=a("a"),nBo=o("CamembertForMultipleChoice"),sBo=o(" (CamemBERT model)"),lBo=l(),Pb=a("li"),hme=a("strong"),iBo=o("canine"),dBo=o(" \u2014 "),DG=a("a"),cBo=o("CanineForMultipleChoice"),fBo=o(" (Canine model)"),mBo=l(),Ib=a("li"),pme=a("strong"),gBo=o("convbert"),hBo=o(" \u2014 "),GG=a("a"),pBo=o("ConvBertForMultipleChoice"),_Bo=o(" (ConvBERT model)"),uBo=l(),qb=a("li"),_me=a("strong"),bBo=o("data2vec-text"),vBo=o(" \u2014 "),OG=a("a"),FBo=o("Data2VecTextForMultipleChoice"),TBo=o(" (Data2VecText model)"),MBo=l(),Nb=a("li"),ume=a("strong"),EBo=o("deberta-v2"),CBo=o(" \u2014 "),VG=a("a"),wBo=o("DebertaV2ForMultipleChoice"),ABo=o(" (DeBERTa-v2 model)"),yBo=l(),jb=a("li"),bme=a("strong"),LBo=o("distilbert"),xBo=o(" \u2014 "),XG=a("a"),$Bo=o("DistilBertForMultipleChoice"),kBo=o(" (DistilBERT model)"),SBo=l(),Db=a("li"),vme=a("strong"),RBo=o("electra"),BBo=o(" \u2014 "),zG=a("a"),PBo=o("ElectraForMultipleChoice"),IBo=o(" (ELECTRA model)"),qBo=l(),Gb=a("li"),Fme=a("strong"),NBo=o("flaubert"),jBo=o(" \u2014 "),WG=a("a"),DBo=o("FlaubertForMultipleChoice"),GBo=o(" (FlauBERT model)"),OBo=l(),Ob=a("li"),Tme=a("strong"),VBo=o("fnet"),XBo=o(" \u2014 "),QG=a("a"),zBo=o("FNetForMultipleChoice"),WBo=o(" (FNet model)"),QBo=l(),Vb=a("li"),Mme=a("strong"),HBo=o("funnel"),UBo=o(" \u2014 "),HG=a("a"),JBo=o("FunnelForMultipleChoice"),YBo=o(" (Funnel Transformer model)"),KBo=l(),Xb=a("li"),Eme=a("strong"),ZBo=o("ibert"),ePo=o(" \u2014 "),UG=a("a"),oPo=o("IBertForMultipleChoice"),rPo=o(" (I-BERT model)"),tPo=l(),zb=a("li"),Cme=a("strong"),aPo=o("longformer"),nPo=o(" \u2014 "),JG=a("a"),sPo=o("LongformerForMultipleChoice"),lPo=o(" (Longformer model)"),iPo=l(),Wb=a("li"),wme=a("strong"),dPo=o("megatron-bert"),cPo=o(" \u2014 "),YG=a("a"),fPo=o("MegatronBertForMultipleChoice"),mPo=o(" (MegatronBert model)"),gPo=l(),Qb=a("li"),Ame=a("strong"),hPo=o("mobilebert"),pPo=o(" \u2014 "),KG=a("a"),_Po=o("MobileBertForMultipleChoice"),uPo=o(" (MobileBERT model)"),bPo=l(),Hb=a("li"),yme=a("strong"),vPo=o("mpnet"),FPo=o(" \u2014 "),ZG=a("a"),TPo=o("MPNetForMultipleChoice"),MPo=o(" (MPNet model)"),EPo=l(),Ub=a("li"),Lme=a("strong"),CPo=o("nystromformer"),wPo=o(" \u2014 "),eO=a("a"),APo=o("NystromformerForMultipleChoice"),yPo=o(" (Nystromformer model)"),LPo=l(),Jb=a("li"),xme=a("strong"),xPo=o("qdqbert"),$Po=o(" \u2014 "),oO=a("a"),kPo=o("QDQBertForMultipleChoice"),SPo=o(" (QDQBert model)"),RPo=l(),Yb=a("li"),$me=a("strong"),BPo=o("rembert"),PPo=o(" \u2014 "),rO=a("a"),IPo=o("RemBertForMultipleChoice"),qPo=o(" (RemBERT model)"),NPo=l(),Kb=a("li"),kme=a("strong"),jPo=o("roberta"),DPo=o(" \u2014 "),tO=a("a"),GPo=o("RobertaForMultipleChoice"),OPo=o(" (RoBERTa model)"),VPo=l(),Zb=a("li"),Sme=a("strong"),XPo=o("roformer"),zPo=o(" \u2014 "),aO=a("a"),WPo=o("RoFormerForMultipleChoice"),QPo=o(" (RoFormer model)"),HPo=l(),ev=a("li"),Rme=a("strong"),UPo=o("squeezebert"),JPo=o(" \u2014 "),nO=a("a"),YPo=o("SqueezeBertForMultipleChoice"),KPo=o(" (SqueezeBERT model)"),ZPo=l(),ov=a("li"),Bme=a("strong"),eIo=o("xlm"),oIo=o(" \u2014 "),sO=a("a"),rIo=o("XLMForMultipleChoice"),tIo=o(" (XLM model)"),aIo=l(),rv=a("li"),Pme=a("strong"),nIo=o("xlm-roberta"),sIo=o(" \u2014 "),lO=a("a"),lIo=o("XLMRobertaForMultipleChoice"),iIo=o(" (XLM-RoBERTa model)"),dIo=l(),tv=a("li"),Ime=a("strong"),cIo=o("xlm-roberta-xl"),fIo=o(" \u2014 "),iO=a("a"),mIo=o("XLMRobertaXLForMultipleChoice"),gIo=o(" (XLM-RoBERTa-XL model)"),hIo=l(),av=a("li"),qme=a("strong"),pIo=o("xlnet"),_Io=o(" \u2014 "),dO=a("a"),uIo=o("XLNetForMultipleChoice"),bIo=o(" (XLNet model)"),vIo=l(),nv=a("li"),Nme=a("strong"),FIo=o("yoso"),TIo=o(" \u2014 "),cO=a("a"),MIo=o("YosoForMultipleChoice"),EIo=o(" (YOSO model)"),CIo=l(),sv=a("p"),wIo=o("The model is set in evaluation mode by default using "),jme=a("code"),AIo=o("model.eval()"),yIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),LIo=o("model.train()"),xIo=l(),F(lv.$$.fragment),$qe=l(),zi=a("h2"),iv=a("a"),Gme=a("span"),F(My.$$.fragment),$Io=l(),Ome=a("span"),kIo=o("AutoModelForNextSentencePrediction"),kqe=l(),Po=a("div"),F(Ey.$$.fragment),SIo=l(),Wi=a("p"),RIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fO=a("a"),BIo=o("from_pretrained()"),PIo=o(" class method or the "),mO=a("a"),IIo=o("from_config()"),qIo=o(` class
method.`),NIo=l(),Cy=a("p"),jIo=o("This class cannot be instantiated directly using "),Vme=a("code"),DIo=o("__init__()"),GIo=o(" (throws an error)."),OIo=l(),ct=a("div"),F(wy.$$.fragment),VIo=l(),Xme=a("p"),XIo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zIo=l(),Qi=a("p"),WIo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),QIo=o("not"),HIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=a("a"),UIo=o("from_pretrained()"),JIo=o(" to load the model weights."),YIo=l(),F(dv.$$.fragment),KIo=l(),to=a("div"),F(Ay.$$.fragment),ZIo=l(),Wme=a("p"),eqo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oqo=l(),Pa=a("p"),rqo=o("The model class to instantiate is selected based on the "),Qme=a("code"),tqo=o("model_type"),aqo=o(` property of the config object (either
passed as an argument or loaded from `),Hme=a("code"),nqo=o("pretrained_model_name_or_path"),sqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=a("code"),lqo=o("pretrained_model_name_or_path"),iqo=o(":"),dqo=l(),Yr=a("ul"),cv=a("li"),Jme=a("strong"),cqo=o("bert"),fqo=o(" \u2014 "),hO=a("a"),mqo=o("BertForNextSentencePrediction"),gqo=o(" (BERT model)"),hqo=l(),fv=a("li"),Yme=a("strong"),pqo=o("fnet"),_qo=o(" \u2014 "),pO=a("a"),uqo=o("FNetForNextSentencePrediction"),bqo=o(" (FNet model)"),vqo=l(),mv=a("li"),Kme=a("strong"),Fqo=o("megatron-bert"),Tqo=o(" \u2014 "),_O=a("a"),Mqo=o("MegatronBertForNextSentencePrediction"),Eqo=o(" (MegatronBert model)"),Cqo=l(),gv=a("li"),Zme=a("strong"),wqo=o("mobilebert"),Aqo=o(" \u2014 "),uO=a("a"),yqo=o("MobileBertForNextSentencePrediction"),Lqo=o(" (MobileBERT model)"),xqo=l(),hv=a("li"),ege=a("strong"),$qo=o("qdqbert"),kqo=o(" \u2014 "),bO=a("a"),Sqo=o("QDQBertForNextSentencePrediction"),Rqo=o(" (QDQBert model)"),Bqo=l(),pv=a("p"),Pqo=o("The model is set in evaluation mode by default using "),oge=a("code"),Iqo=o("model.eval()"),qqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rge=a("code"),Nqo=o("model.train()"),jqo=l(),F(_v.$$.fragment),Sqe=l(),Hi=a("h2"),uv=a("a"),tge=a("span"),F(yy.$$.fragment),Dqo=l(),age=a("span"),Gqo=o("AutoModelForTokenClassification"),Rqe=l(),Io=a("div"),F(Ly.$$.fragment),Oqo=l(),Ui=a("p"),Vqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vO=a("a"),Xqo=o("from_pretrained()"),zqo=o(" class method or the "),FO=a("a"),Wqo=o("from_config()"),Qqo=o(` class
method.`),Hqo=l(),xy=a("p"),Uqo=o("This class cannot be instantiated directly using "),nge=a("code"),Jqo=o("__init__()"),Yqo=o(" (throws an error)."),Kqo=l(),ft=a("div"),F($y.$$.fragment),Zqo=l(),sge=a("p"),eNo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),oNo=l(),Ji=a("p"),rNo=o(`Note:
Loading a model from its configuration file does `),lge=a("strong"),tNo=o("not"),aNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=a("a"),nNo=o("from_pretrained()"),sNo=o(" to load the model weights."),lNo=l(),F(bv.$$.fragment),iNo=l(),ao=a("div"),F(ky.$$.fragment),dNo=l(),ige=a("p"),cNo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fNo=l(),Ia=a("p"),mNo=o("The model class to instantiate is selected based on the "),dge=a("code"),gNo=o("model_type"),hNo=o(` property of the config object (either
passed as an argument or loaded from `),cge=a("code"),pNo=o("pretrained_model_name_or_path"),_No=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=a("code"),uNo=o("pretrained_model_name_or_path"),bNo=o(":"),vNo=l(),U=a("ul"),vv=a("li"),mge=a("strong"),FNo=o("albert"),TNo=o(" \u2014 "),MO=a("a"),MNo=o("AlbertForTokenClassification"),ENo=o(" (ALBERT model)"),CNo=l(),Fv=a("li"),gge=a("strong"),wNo=o("bert"),ANo=o(" \u2014 "),EO=a("a"),yNo=o("BertForTokenClassification"),LNo=o(" (BERT model)"),xNo=l(),Tv=a("li"),hge=a("strong"),$No=o("big_bird"),kNo=o(" \u2014 "),CO=a("a"),SNo=o("BigBirdForTokenClassification"),RNo=o(" (BigBird model)"),BNo=l(),Mv=a("li"),pge=a("strong"),PNo=o("camembert"),INo=o(" \u2014 "),wO=a("a"),qNo=o("CamembertForTokenClassification"),NNo=o(" (CamemBERT model)"),jNo=l(),Ev=a("li"),_ge=a("strong"),DNo=o("canine"),GNo=o(" \u2014 "),AO=a("a"),ONo=o("CanineForTokenClassification"),VNo=o(" (Canine model)"),XNo=l(),Cv=a("li"),uge=a("strong"),zNo=o("convbert"),WNo=o(" \u2014 "),yO=a("a"),QNo=o("ConvBertForTokenClassification"),HNo=o(" (ConvBERT model)"),UNo=l(),wv=a("li"),bge=a("strong"),JNo=o("data2vec-text"),YNo=o(" \u2014 "),LO=a("a"),KNo=o("Data2VecTextForTokenClassification"),ZNo=o(" (Data2VecText model)"),ejo=l(),Av=a("li"),vge=a("strong"),ojo=o("deberta"),rjo=o(" \u2014 "),xO=a("a"),tjo=o("DebertaForTokenClassification"),ajo=o(" (DeBERTa model)"),njo=l(),yv=a("li"),Fge=a("strong"),sjo=o("deberta-v2"),ljo=o(" \u2014 "),$O=a("a"),ijo=o("DebertaV2ForTokenClassification"),djo=o(" (DeBERTa-v2 model)"),cjo=l(),Lv=a("li"),Tge=a("strong"),fjo=o("distilbert"),mjo=o(" \u2014 "),kO=a("a"),gjo=o("DistilBertForTokenClassification"),hjo=o(" (DistilBERT model)"),pjo=l(),xv=a("li"),Mge=a("strong"),_jo=o("electra"),ujo=o(" \u2014 "),SO=a("a"),bjo=o("ElectraForTokenClassification"),vjo=o(" (ELECTRA model)"),Fjo=l(),$v=a("li"),Ege=a("strong"),Tjo=o("flaubert"),Mjo=o(" \u2014 "),RO=a("a"),Ejo=o("FlaubertForTokenClassification"),Cjo=o(" (FlauBERT model)"),wjo=l(),kv=a("li"),Cge=a("strong"),Ajo=o("fnet"),yjo=o(" \u2014 "),BO=a("a"),Ljo=o("FNetForTokenClassification"),xjo=o(" (FNet model)"),$jo=l(),Sv=a("li"),wge=a("strong"),kjo=o("funnel"),Sjo=o(" \u2014 "),PO=a("a"),Rjo=o("FunnelForTokenClassification"),Bjo=o(" (Funnel Transformer model)"),Pjo=l(),Rv=a("li"),Age=a("strong"),Ijo=o("gpt2"),qjo=o(" \u2014 "),IO=a("a"),Njo=o("GPT2ForTokenClassification"),jjo=o(" (OpenAI GPT-2 model)"),Djo=l(),Bv=a("li"),yge=a("strong"),Gjo=o("ibert"),Ojo=o(" \u2014 "),qO=a("a"),Vjo=o("IBertForTokenClassification"),Xjo=o(" (I-BERT model)"),zjo=l(),Pv=a("li"),Lge=a("strong"),Wjo=o("layoutlm"),Qjo=o(" \u2014 "),NO=a("a"),Hjo=o("LayoutLMForTokenClassification"),Ujo=o(" (LayoutLM model)"),Jjo=l(),Iv=a("li"),xge=a("strong"),Yjo=o("layoutlmv2"),Kjo=o(" \u2014 "),jO=a("a"),Zjo=o("LayoutLMv2ForTokenClassification"),eDo=o(" (LayoutLMv2 model)"),oDo=l(),qv=a("li"),$ge=a("strong"),rDo=o("longformer"),tDo=o(" \u2014 "),DO=a("a"),aDo=o("LongformerForTokenClassification"),nDo=o(" (Longformer model)"),sDo=l(),Nv=a("li"),kge=a("strong"),lDo=o("megatron-bert"),iDo=o(" \u2014 "),GO=a("a"),dDo=o("MegatronBertForTokenClassification"),cDo=o(" (MegatronBert model)"),fDo=l(),jv=a("li"),Sge=a("strong"),mDo=o("mobilebert"),gDo=o(" \u2014 "),OO=a("a"),hDo=o("MobileBertForTokenClassification"),pDo=o(" (MobileBERT model)"),_Do=l(),Dv=a("li"),Rge=a("strong"),uDo=o("mpnet"),bDo=o(" \u2014 "),VO=a("a"),vDo=o("MPNetForTokenClassification"),FDo=o(" (MPNet model)"),TDo=l(),Gv=a("li"),Bge=a("strong"),MDo=o("nystromformer"),EDo=o(" \u2014 "),XO=a("a"),CDo=o("NystromformerForTokenClassification"),wDo=o(" (Nystromformer model)"),ADo=l(),Ov=a("li"),Pge=a("strong"),yDo=o("qdqbert"),LDo=o(" \u2014 "),zO=a("a"),xDo=o("QDQBertForTokenClassification"),$Do=o(" (QDQBert model)"),kDo=l(),Vv=a("li"),Ige=a("strong"),SDo=o("rembert"),RDo=o(" \u2014 "),WO=a("a"),BDo=o("RemBertForTokenClassification"),PDo=o(" (RemBERT model)"),IDo=l(),Xv=a("li"),qge=a("strong"),qDo=o("roberta"),NDo=o(" \u2014 "),QO=a("a"),jDo=o("RobertaForTokenClassification"),DDo=o(" (RoBERTa model)"),GDo=l(),zv=a("li"),Nge=a("strong"),ODo=o("roformer"),VDo=o(" \u2014 "),HO=a("a"),XDo=o("RoFormerForTokenClassification"),zDo=o(" (RoFormer model)"),WDo=l(),Wv=a("li"),jge=a("strong"),QDo=o("squeezebert"),HDo=o(" \u2014 "),UO=a("a"),UDo=o("SqueezeBertForTokenClassification"),JDo=o(" (SqueezeBERT model)"),YDo=l(),Qv=a("li"),Dge=a("strong"),KDo=o("xlm"),ZDo=o(" \u2014 "),JO=a("a"),eGo=o("XLMForTokenClassification"),oGo=o(" (XLM model)"),rGo=l(),Hv=a("li"),Gge=a("strong"),tGo=o("xlm-roberta"),aGo=o(" \u2014 "),YO=a("a"),nGo=o("XLMRobertaForTokenClassification"),sGo=o(" (XLM-RoBERTa model)"),lGo=l(),Uv=a("li"),Oge=a("strong"),iGo=o("xlm-roberta-xl"),dGo=o(" \u2014 "),KO=a("a"),cGo=o("XLMRobertaXLForTokenClassification"),fGo=o(" (XLM-RoBERTa-XL model)"),mGo=l(),Jv=a("li"),Vge=a("strong"),gGo=o("xlnet"),hGo=o(" \u2014 "),ZO=a("a"),pGo=o("XLNetForTokenClassification"),_Go=o(" (XLNet model)"),uGo=l(),Yv=a("li"),Xge=a("strong"),bGo=o("yoso"),vGo=o(" \u2014 "),eV=a("a"),FGo=o("YosoForTokenClassification"),TGo=o(" (YOSO model)"),MGo=l(),Kv=a("p"),EGo=o("The model is set in evaluation mode by default using "),zge=a("code"),CGo=o("model.eval()"),wGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wge=a("code"),AGo=o("model.train()"),yGo=l(),F(Zv.$$.fragment),Bqe=l(),Yi=a("h2"),eF=a("a"),Qge=a("span"),F(Sy.$$.fragment),LGo=l(),Hge=a("span"),xGo=o("AutoModelForQuestionAnswering"),Pqe=l(),qo=a("div"),F(Ry.$$.fragment),$Go=l(),Ki=a("p"),kGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oV=a("a"),SGo=o("from_pretrained()"),RGo=o(" class method or the "),rV=a("a"),BGo=o("from_config()"),PGo=o(` class
method.`),IGo=l(),By=a("p"),qGo=o("This class cannot be instantiated directly using "),Uge=a("code"),NGo=o("__init__()"),jGo=o(" (throws an error)."),DGo=l(),mt=a("div"),F(Py.$$.fragment),GGo=l(),Jge=a("p"),OGo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VGo=l(),Zi=a("p"),XGo=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),zGo=o("not"),WGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=a("a"),QGo=o("from_pretrained()"),HGo=o(" to load the model weights."),UGo=l(),F(oF.$$.fragment),JGo=l(),no=a("div"),F(Iy.$$.fragment),YGo=l(),Kge=a("p"),KGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZGo=l(),qa=a("p"),eOo=o("The model class to instantiate is selected based on the "),Zge=a("code"),oOo=o("model_type"),rOo=o(` property of the config object (either
passed as an argument or loaded from `),ehe=a("code"),tOo=o("pretrained_model_name_or_path"),aOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=a("code"),nOo=o("pretrained_model_name_or_path"),sOo=o(":"),lOo=l(),V=a("ul"),rF=a("li"),rhe=a("strong"),iOo=o("albert"),dOo=o(" \u2014 "),aV=a("a"),cOo=o("AlbertForQuestionAnswering"),fOo=o(" (ALBERT model)"),mOo=l(),tF=a("li"),the=a("strong"),gOo=o("bart"),hOo=o(" \u2014 "),nV=a("a"),pOo=o("BartForQuestionAnswering"),_Oo=o(" (BART model)"),uOo=l(),aF=a("li"),ahe=a("strong"),bOo=o("bert"),vOo=o(" \u2014 "),sV=a("a"),FOo=o("BertForQuestionAnswering"),TOo=o(" (BERT model)"),MOo=l(),nF=a("li"),nhe=a("strong"),EOo=o("big_bird"),COo=o(" \u2014 "),lV=a("a"),wOo=o("BigBirdForQuestionAnswering"),AOo=o(" (BigBird model)"),yOo=l(),sF=a("li"),she=a("strong"),LOo=o("bigbird_pegasus"),xOo=o(" \u2014 "),iV=a("a"),$Oo=o("BigBirdPegasusForQuestionAnswering"),kOo=o(" (BigBirdPegasus model)"),SOo=l(),lF=a("li"),lhe=a("strong"),ROo=o("camembert"),BOo=o(" \u2014 "),dV=a("a"),POo=o("CamembertForQuestionAnswering"),IOo=o(" (CamemBERT model)"),qOo=l(),iF=a("li"),ihe=a("strong"),NOo=o("canine"),jOo=o(" \u2014 "),cV=a("a"),DOo=o("CanineForQuestionAnswering"),GOo=o(" (Canine model)"),OOo=l(),dF=a("li"),dhe=a("strong"),VOo=o("convbert"),XOo=o(" \u2014 "),fV=a("a"),zOo=o("ConvBertForQuestionAnswering"),WOo=o(" (ConvBERT model)"),QOo=l(),cF=a("li"),che=a("strong"),HOo=o("data2vec-text"),UOo=o(" \u2014 "),mV=a("a"),JOo=o("Data2VecTextForQuestionAnswering"),YOo=o(" (Data2VecText model)"),KOo=l(),fF=a("li"),fhe=a("strong"),ZOo=o("deberta"),eVo=o(" \u2014 "),gV=a("a"),oVo=o("DebertaForQuestionAnswering"),rVo=o(" (DeBERTa model)"),tVo=l(),mF=a("li"),mhe=a("strong"),aVo=o("deberta-v2"),nVo=o(" \u2014 "),hV=a("a"),sVo=o("DebertaV2ForQuestionAnswering"),lVo=o(" (DeBERTa-v2 model)"),iVo=l(),gF=a("li"),ghe=a("strong"),dVo=o("distilbert"),cVo=o(" \u2014 "),pV=a("a"),fVo=o("DistilBertForQuestionAnswering"),mVo=o(" (DistilBERT model)"),gVo=l(),hF=a("li"),hhe=a("strong"),hVo=o("electra"),pVo=o(" \u2014 "),_V=a("a"),_Vo=o("ElectraForQuestionAnswering"),uVo=o(" (ELECTRA model)"),bVo=l(),pF=a("li"),phe=a("strong"),vVo=o("flaubert"),FVo=o(" \u2014 "),uV=a("a"),TVo=o("FlaubertForQuestionAnsweringSimple"),MVo=o(" (FlauBERT model)"),EVo=l(),_F=a("li"),_he=a("strong"),CVo=o("fnet"),wVo=o(" \u2014 "),bV=a("a"),AVo=o("FNetForQuestionAnswering"),yVo=o(" (FNet model)"),LVo=l(),uF=a("li"),uhe=a("strong"),xVo=o("funnel"),$Vo=o(" \u2014 "),vV=a("a"),kVo=o("FunnelForQuestionAnswering"),SVo=o(" (Funnel Transformer model)"),RVo=l(),bF=a("li"),bhe=a("strong"),BVo=o("gptj"),PVo=o(" \u2014 "),FV=a("a"),IVo=o("GPTJForQuestionAnswering"),qVo=o(" (GPT-J model)"),NVo=l(),vF=a("li"),vhe=a("strong"),jVo=o("ibert"),DVo=o(" \u2014 "),TV=a("a"),GVo=o("IBertForQuestionAnswering"),OVo=o(" (I-BERT model)"),VVo=l(),FF=a("li"),Fhe=a("strong"),XVo=o("layoutlmv2"),zVo=o(" \u2014 "),MV=a("a"),WVo=o("LayoutLMv2ForQuestionAnswering"),QVo=o(" (LayoutLMv2 model)"),HVo=l(),TF=a("li"),The=a("strong"),UVo=o("led"),JVo=o(" \u2014 "),EV=a("a"),YVo=o("LEDForQuestionAnswering"),KVo=o(" (LED model)"),ZVo=l(),MF=a("li"),Mhe=a("strong"),eXo=o("longformer"),oXo=o(" \u2014 "),CV=a("a"),rXo=o("LongformerForQuestionAnswering"),tXo=o(" (Longformer model)"),aXo=l(),EF=a("li"),Ehe=a("strong"),nXo=o("lxmert"),sXo=o(" \u2014 "),wV=a("a"),lXo=o("LxmertForQuestionAnswering"),iXo=o(" (LXMERT model)"),dXo=l(),CF=a("li"),Che=a("strong"),cXo=o("mbart"),fXo=o(" \u2014 "),AV=a("a"),mXo=o("MBartForQuestionAnswering"),gXo=o(" (mBART model)"),hXo=l(),wF=a("li"),whe=a("strong"),pXo=o("megatron-bert"),_Xo=o(" \u2014 "),yV=a("a"),uXo=o("MegatronBertForQuestionAnswering"),bXo=o(" (MegatronBert model)"),vXo=l(),AF=a("li"),Ahe=a("strong"),FXo=o("mobilebert"),TXo=o(" \u2014 "),LV=a("a"),MXo=o("MobileBertForQuestionAnswering"),EXo=o(" (MobileBERT model)"),CXo=l(),yF=a("li"),yhe=a("strong"),wXo=o("mpnet"),AXo=o(" \u2014 "),xV=a("a"),yXo=o("MPNetForQuestionAnswering"),LXo=o(" (MPNet model)"),xXo=l(),LF=a("li"),Lhe=a("strong"),$Xo=o("nystromformer"),kXo=o(" \u2014 "),$V=a("a"),SXo=o("NystromformerForQuestionAnswering"),RXo=o(" (Nystromformer model)"),BXo=l(),xF=a("li"),xhe=a("strong"),PXo=o("qdqbert"),IXo=o(" \u2014 "),kV=a("a"),qXo=o("QDQBertForQuestionAnswering"),NXo=o(" (QDQBert model)"),jXo=l(),$F=a("li"),$he=a("strong"),DXo=o("reformer"),GXo=o(" \u2014 "),SV=a("a"),OXo=o("ReformerForQuestionAnswering"),VXo=o(" (Reformer model)"),XXo=l(),kF=a("li"),khe=a("strong"),zXo=o("rembert"),WXo=o(" \u2014 "),RV=a("a"),QXo=o("RemBertForQuestionAnswering"),HXo=o(" (RemBERT model)"),UXo=l(),SF=a("li"),She=a("strong"),JXo=o("roberta"),YXo=o(" \u2014 "),BV=a("a"),KXo=o("RobertaForQuestionAnswering"),ZXo=o(" (RoBERTa model)"),ezo=l(),RF=a("li"),Rhe=a("strong"),ozo=o("roformer"),rzo=o(" \u2014 "),PV=a("a"),tzo=o("RoFormerForQuestionAnswering"),azo=o(" (RoFormer model)"),nzo=l(),BF=a("li"),Bhe=a("strong"),szo=o("splinter"),lzo=o(" \u2014 "),IV=a("a"),izo=o("SplinterForQuestionAnswering"),dzo=o(" (Splinter model)"),czo=l(),PF=a("li"),Phe=a("strong"),fzo=o("squeezebert"),mzo=o(" \u2014 "),qV=a("a"),gzo=o("SqueezeBertForQuestionAnswering"),hzo=o(" (SqueezeBERT model)"),pzo=l(),IF=a("li"),Ihe=a("strong"),_zo=o("xlm"),uzo=o(" \u2014 "),NV=a("a"),bzo=o("XLMForQuestionAnsweringSimple"),vzo=o(" (XLM model)"),Fzo=l(),qF=a("li"),qhe=a("strong"),Tzo=o("xlm-roberta"),Mzo=o(" \u2014 "),jV=a("a"),Ezo=o("XLMRobertaForQuestionAnswering"),Czo=o(" (XLM-RoBERTa model)"),wzo=l(),NF=a("li"),Nhe=a("strong"),Azo=o("xlm-roberta-xl"),yzo=o(" \u2014 "),DV=a("a"),Lzo=o("XLMRobertaXLForQuestionAnswering"),xzo=o(" (XLM-RoBERTa-XL model)"),$zo=l(),jF=a("li"),jhe=a("strong"),kzo=o("xlnet"),Szo=o(" \u2014 "),GV=a("a"),Rzo=o("XLNetForQuestionAnsweringSimple"),Bzo=o(" (XLNet model)"),Pzo=l(),DF=a("li"),Dhe=a("strong"),Izo=o("yoso"),qzo=o(" \u2014 "),OV=a("a"),Nzo=o("YosoForQuestionAnswering"),jzo=o(" (YOSO model)"),Dzo=l(),GF=a("p"),Gzo=o("The model is set in evaluation mode by default using "),Ghe=a("code"),Ozo=o("model.eval()"),Vzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=a("code"),Xzo=o("model.train()"),zzo=l(),F(OF.$$.fragment),Iqe=l(),ed=a("h2"),VF=a("a"),Vhe=a("span"),F(qy.$$.fragment),Wzo=l(),Xhe=a("span"),Qzo=o("AutoModelForTableQuestionAnswering"),qqe=l(),No=a("div"),F(Ny.$$.fragment),Hzo=l(),od=a("p"),Uzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),VV=a("a"),Jzo=o("from_pretrained()"),Yzo=o(" class method or the "),XV=a("a"),Kzo=o("from_config()"),Zzo=o(` class
method.`),eWo=l(),jy=a("p"),oWo=o("This class cannot be instantiated directly using "),zhe=a("code"),rWo=o("__init__()"),tWo=o(" (throws an error)."),aWo=l(),gt=a("div"),F(Dy.$$.fragment),nWo=l(),Whe=a("p"),sWo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lWo=l(),rd=a("p"),iWo=o(`Note:
Loading a model from its configuration file does `),Qhe=a("strong"),dWo=o("not"),cWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=a("a"),fWo=o("from_pretrained()"),mWo=o(" to load the model weights."),gWo=l(),F(XF.$$.fragment),hWo=l(),so=a("div"),F(Gy.$$.fragment),pWo=l(),Hhe=a("p"),_Wo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uWo=l(),Na=a("p"),bWo=o("The model class to instantiate is selected based on the "),Uhe=a("code"),vWo=o("model_type"),FWo=o(` property of the config object (either
passed as an argument or loaded from `),Jhe=a("code"),TWo=o("pretrained_model_name_or_path"),MWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=a("code"),EWo=o("pretrained_model_name_or_path"),CWo=o(":"),wWo=l(),Khe=a("ul"),zF=a("li"),Zhe=a("strong"),AWo=o("tapas"),yWo=o(" \u2014 "),WV=a("a"),LWo=o("TapasForQuestionAnswering"),xWo=o(" (TAPAS model)"),$Wo=l(),WF=a("p"),kWo=o("The model is set in evaluation mode by default using "),epe=a("code"),SWo=o("model.eval()"),RWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=a("code"),BWo=o("model.train()"),PWo=l(),F(QF.$$.fragment),Nqe=l(),td=a("h2"),HF=a("a"),rpe=a("span"),F(Oy.$$.fragment),IWo=l(),tpe=a("span"),qWo=o("AutoModelForImageClassification"),jqe=l(),jo=a("div"),F(Vy.$$.fragment),NWo=l(),ad=a("p"),jWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QV=a("a"),DWo=o("from_pretrained()"),GWo=o(" class method or the "),HV=a("a"),OWo=o("from_config()"),VWo=o(` class
method.`),XWo=l(),Xy=a("p"),zWo=o("This class cannot be instantiated directly using "),ape=a("code"),WWo=o("__init__()"),QWo=o(" (throws an error)."),HWo=l(),ht=a("div"),F(zy.$$.fragment),UWo=l(),npe=a("p"),JWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YWo=l(),nd=a("p"),KWo=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),ZWo=o("not"),eQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),oQo=o("from_pretrained()"),rQo=o(" to load the model weights."),tQo=l(),F(UF.$$.fragment),aQo=l(),lo=a("div"),F(Wy.$$.fragment),nQo=l(),lpe=a("p"),sQo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lQo=l(),ja=a("p"),iQo=o("The model class to instantiate is selected based on the "),ipe=a("code"),dQo=o("model_type"),cQo=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),fQo=o("pretrained_model_name_or_path"),mQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),gQo=o("pretrained_model_name_or_path"),hQo=o(":"),pQo=l(),Fe=a("ul"),JF=a("li"),fpe=a("strong"),_Qo=o("beit"),uQo=o(" \u2014 "),JV=a("a"),bQo=o("BeitForImageClassification"),vQo=o(" (BEiT model)"),FQo=l(),YF=a("li"),mpe=a("strong"),TQo=o("convnext"),MQo=o(" \u2014 "),YV=a("a"),EQo=o("ConvNextForImageClassification"),CQo=o(" (ConvNext model)"),wQo=l(),KF=a("li"),gpe=a("strong"),AQo=o("data2vec-vision"),yQo=o(" \u2014 "),KV=a("a"),LQo=o("Data2VecVisionForImageClassification"),xQo=o(" (Data2VecVision model)"),$Qo=l(),Bs=a("li"),hpe=a("strong"),kQo=o("deit"),SQo=o(" \u2014 "),ZV=a("a"),RQo=o("DeiTForImageClassification"),BQo=o(" or "),eX=a("a"),PQo=o("DeiTForImageClassificationWithTeacher"),IQo=o(" (DeiT model)"),qQo=l(),ZF=a("li"),ppe=a("strong"),NQo=o("imagegpt"),jQo=o(" \u2014 "),oX=a("a"),DQo=o("ImageGPTForImageClassification"),GQo=o(" (ImageGPT model)"),OQo=l(),pt=a("li"),_pe=a("strong"),VQo=o("perceiver"),XQo=o(" \u2014 "),rX=a("a"),zQo=o("PerceiverForImageClassificationLearned"),WQo=o(" or "),tX=a("a"),QQo=o("PerceiverForImageClassificationFourier"),HQo=o(" or "),aX=a("a"),UQo=o("PerceiverForImageClassificationConvProcessing"),JQo=o(" (Perceiver model)"),YQo=l(),e0=a("li"),upe=a("strong"),KQo=o("poolformer"),ZQo=o(" \u2014 "),nX=a("a"),eHo=o("PoolFormerForImageClassification"),oHo=o(" (PoolFormer model)"),rHo=l(),o0=a("li"),bpe=a("strong"),tHo=o("regnet"),aHo=o(" \u2014 "),sX=a("a"),nHo=o("RegNetForImageClassification"),sHo=o(" (RegNet model)"),lHo=l(),r0=a("li"),vpe=a("strong"),iHo=o("resnet"),dHo=o(" \u2014 "),lX=a("a"),cHo=o("ResNetForImageClassification"),fHo=o(" (ResNet model)"),mHo=l(),t0=a("li"),Fpe=a("strong"),gHo=o("segformer"),hHo=o(" \u2014 "),iX=a("a"),pHo=o("SegformerForImageClassification"),_Ho=o(" (SegFormer model)"),uHo=l(),a0=a("li"),Tpe=a("strong"),bHo=o("swin"),vHo=o(" \u2014 "),dX=a("a"),FHo=o("SwinForImageClassification"),THo=o(" (Swin model)"),MHo=l(),n0=a("li"),Mpe=a("strong"),EHo=o("van"),CHo=o(" \u2014 "),cX=a("a"),wHo=o("VanForImageClassification"),AHo=o(" (VAN model)"),yHo=l(),s0=a("li"),Epe=a("strong"),LHo=o("vit"),xHo=o(" \u2014 "),fX=a("a"),$Ho=o("ViTForImageClassification"),kHo=o(" (ViT model)"),SHo=l(),l0=a("p"),RHo=o("The model is set in evaluation mode by default using "),Cpe=a("code"),BHo=o("model.eval()"),PHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=a("code"),IHo=o("model.train()"),qHo=l(),F(i0.$$.fragment),Dqe=l(),sd=a("h2"),d0=a("a"),Ape=a("span"),F(Qy.$$.fragment),NHo=l(),ype=a("span"),jHo=o("AutoModelForVision2Seq"),Gqe=l(),Do=a("div"),F(Hy.$$.fragment),DHo=l(),ld=a("p"),GHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mX=a("a"),OHo=o("from_pretrained()"),VHo=o(" class method or the "),gX=a("a"),XHo=o("from_config()"),zHo=o(` class
method.`),WHo=l(),Uy=a("p"),QHo=o("This class cannot be instantiated directly using "),Lpe=a("code"),HHo=o("__init__()"),UHo=o(" (throws an error)."),JHo=l(),_t=a("div"),F(Jy.$$.fragment),YHo=l(),xpe=a("p"),KHo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ZHo=l(),id=a("p"),eUo=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),oUo=o("not"),rUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),tUo=o("from_pretrained()"),aUo=o(" to load the model weights."),nUo=l(),F(c0.$$.fragment),sUo=l(),io=a("div"),F(Yy.$$.fragment),lUo=l(),kpe=a("p"),iUo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dUo=l(),Da=a("p"),cUo=o("The model class to instantiate is selected based on the "),Spe=a("code"),fUo=o("model_type"),mUo=o(` property of the config object (either
passed as an argument or loaded from `),Rpe=a("code"),gUo=o("pretrained_model_name_or_path"),hUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),pUo=o("pretrained_model_name_or_path"),_Uo=o(":"),uUo=l(),Ppe=a("ul"),f0=a("li"),Ipe=a("strong"),bUo=o("vision-encoder-decoder"),vUo=o(" \u2014 "),pX=a("a"),FUo=o("VisionEncoderDecoderModel"),TUo=o(" (Vision Encoder decoder model)"),MUo=l(),m0=a("p"),EUo=o("The model is set in evaluation mode by default using "),qpe=a("code"),CUo=o("model.eval()"),wUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=a("code"),AUo=o("model.train()"),yUo=l(),F(g0.$$.fragment),Oqe=l(),dd=a("h2"),h0=a("a"),jpe=a("span"),F(Ky.$$.fragment),LUo=l(),Dpe=a("span"),xUo=o("AutoModelForAudioClassification"),Vqe=l(),Go=a("div"),F(Zy.$$.fragment),$Uo=l(),cd=a("p"),kUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_X=a("a"),SUo=o("from_pretrained()"),RUo=o(" class method or the "),uX=a("a"),BUo=o("from_config()"),PUo=o(` class
method.`),IUo=l(),eL=a("p"),qUo=o("This class cannot be instantiated directly using "),Gpe=a("code"),NUo=o("__init__()"),jUo=o(" (throws an error)."),DUo=l(),ut=a("div"),F(oL.$$.fragment),GUo=l(),Ope=a("p"),OUo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),VUo=l(),fd=a("p"),XUo=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),zUo=o("not"),WUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),QUo=o("from_pretrained()"),HUo=o(" to load the model weights."),UUo=l(),F(p0.$$.fragment),JUo=l(),co=a("div"),F(rL.$$.fragment),YUo=l(),Xpe=a("p"),KUo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ZUo=l(),Ga=a("p"),eJo=o("The model class to instantiate is selected based on the "),zpe=a("code"),oJo=o("model_type"),rJo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),tJo=o("pretrained_model_name_or_path"),aJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),nJo=o("pretrained_model_name_or_path"),sJo=o(":"),lJo=l(),ke=a("ul"),_0=a("li"),Hpe=a("strong"),iJo=o("data2vec-audio"),dJo=o(" \u2014 "),vX=a("a"),cJo=o("Data2VecAudioForSequenceClassification"),fJo=o(" (Data2VecAudio model)"),mJo=l(),u0=a("li"),Upe=a("strong"),gJo=o("hubert"),hJo=o(" \u2014 "),FX=a("a"),pJo=o("HubertForSequenceClassification"),_Jo=o(" (Hubert model)"),uJo=l(),b0=a("li"),Jpe=a("strong"),bJo=o("sew"),vJo=o(" \u2014 "),TX=a("a"),FJo=o("SEWForSequenceClassification"),TJo=o(" (SEW model)"),MJo=l(),v0=a("li"),Ype=a("strong"),EJo=o("sew-d"),CJo=o(" \u2014 "),MX=a("a"),wJo=o("SEWDForSequenceClassification"),AJo=o(" (SEW-D model)"),yJo=l(),F0=a("li"),Kpe=a("strong"),LJo=o("unispeech"),xJo=o(" \u2014 "),EX=a("a"),$Jo=o("UniSpeechForSequenceClassification"),kJo=o(" (UniSpeech model)"),SJo=l(),T0=a("li"),Zpe=a("strong"),RJo=o("unispeech-sat"),BJo=o(" \u2014 "),CX=a("a"),PJo=o("UniSpeechSatForSequenceClassification"),IJo=o(" (UniSpeechSat model)"),qJo=l(),M0=a("li"),e_e=a("strong"),NJo=o("wav2vec2"),jJo=o(" \u2014 "),wX=a("a"),DJo=o("Wav2Vec2ForSequenceClassification"),GJo=o(" (Wav2Vec2 model)"),OJo=l(),E0=a("li"),o_e=a("strong"),VJo=o("wav2vec2-conformer"),XJo=o(" \u2014 "),AX=a("a"),zJo=o("Wav2Vec2ConformerForSequenceClassification"),WJo=o(" (Wav2Vec2-Conformer model)"),QJo=l(),C0=a("li"),r_e=a("strong"),HJo=o("wavlm"),UJo=o(" \u2014 "),yX=a("a"),JJo=o("WavLMForSequenceClassification"),YJo=o(" (WavLM model)"),KJo=l(),w0=a("p"),ZJo=o("The model is set in evaluation mode by default using "),t_e=a("code"),eYo=o("model.eval()"),oYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=a("code"),rYo=o("model.train()"),tYo=l(),F(A0.$$.fragment),Xqe=l(),md=a("h2"),y0=a("a"),n_e=a("span"),F(tL.$$.fragment),aYo=l(),s_e=a("span"),nYo=o("AutoModelForAudioFrameClassification"),zqe=l(),Oo=a("div"),F(aL.$$.fragment),sYo=l(),gd=a("p"),lYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),LX=a("a"),iYo=o("from_pretrained()"),dYo=o(" class method or the "),xX=a("a"),cYo=o("from_config()"),fYo=o(` class
method.`),mYo=l(),nL=a("p"),gYo=o("This class cannot be instantiated directly using "),l_e=a("code"),hYo=o("__init__()"),pYo=o(" (throws an error)."),_Yo=l(),bt=a("div"),F(sL.$$.fragment),uYo=l(),i_e=a("p"),bYo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),vYo=l(),hd=a("p"),FYo=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),TYo=o("not"),MYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),EYo=o("from_pretrained()"),CYo=o(" to load the model weights."),wYo=l(),F(L0.$$.fragment),AYo=l(),fo=a("div"),F(lL.$$.fragment),yYo=l(),c_e=a("p"),LYo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xYo=l(),Oa=a("p"),$Yo=o("The model class to instantiate is selected based on the "),f_e=a("code"),kYo=o("model_type"),SYo=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),RYo=o("pretrained_model_name_or_path"),BYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),PYo=o("pretrained_model_name_or_path"),IYo=o(":"),qYo=l(),Kr=a("ul"),x0=a("li"),h_e=a("strong"),NYo=o("data2vec-audio"),jYo=o(" \u2014 "),kX=a("a"),DYo=o("Data2VecAudioForAudioFrameClassification"),GYo=o(" (Data2VecAudio model)"),OYo=l(),$0=a("li"),p_e=a("strong"),VYo=o("unispeech-sat"),XYo=o(" \u2014 "),SX=a("a"),zYo=o("UniSpeechSatForAudioFrameClassification"),WYo=o(" (UniSpeechSat model)"),QYo=l(),k0=a("li"),__e=a("strong"),HYo=o("wav2vec2"),UYo=o(" \u2014 "),RX=a("a"),JYo=o("Wav2Vec2ForAudioFrameClassification"),YYo=o(" (Wav2Vec2 model)"),KYo=l(),S0=a("li"),u_e=a("strong"),ZYo=o("wav2vec2-conformer"),eKo=o(" \u2014 "),BX=a("a"),oKo=o("Wav2Vec2ConformerForAudioFrameClassification"),rKo=o(" (Wav2Vec2-Conformer model)"),tKo=l(),R0=a("li"),b_e=a("strong"),aKo=o("wavlm"),nKo=o(" \u2014 "),PX=a("a"),sKo=o("WavLMForAudioFrameClassification"),lKo=o(" (WavLM model)"),iKo=l(),B0=a("p"),dKo=o("The model is set in evaluation mode by default using "),v_e=a("code"),cKo=o("model.eval()"),fKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=a("code"),mKo=o("model.train()"),gKo=l(),F(P0.$$.fragment),Wqe=l(),pd=a("h2"),I0=a("a"),T_e=a("span"),F(iL.$$.fragment),hKo=l(),M_e=a("span"),pKo=o("AutoModelForCTC"),Qqe=l(),Vo=a("div"),F(dL.$$.fragment),_Ko=l(),_d=a("p"),uKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),IX=a("a"),bKo=o("from_pretrained()"),vKo=o(" class method or the "),qX=a("a"),FKo=o("from_config()"),TKo=o(` class
method.`),MKo=l(),cL=a("p"),EKo=o("This class cannot be instantiated directly using "),E_e=a("code"),CKo=o("__init__()"),wKo=o(" (throws an error)."),AKo=l(),vt=a("div"),F(fL.$$.fragment),yKo=l(),C_e=a("p"),LKo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),xKo=l(),ud=a("p"),$Ko=o(`Note:
Loading a model from its configuration file does `),w_e=a("strong"),kKo=o("not"),SKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),RKo=o("from_pretrained()"),BKo=o(" to load the model weights."),PKo=l(),F(q0.$$.fragment),IKo=l(),mo=a("div"),F(mL.$$.fragment),qKo=l(),A_e=a("p"),NKo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jKo=l(),Va=a("p"),DKo=o("The model class to instantiate is selected based on the "),y_e=a("code"),GKo=o("model_type"),OKo=o(` property of the config object (either
passed as an argument or loaded from `),L_e=a("code"),VKo=o("pretrained_model_name_or_path"),XKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=a("code"),zKo=o("pretrained_model_name_or_path"),WKo=o(":"),QKo=l(),Se=a("ul"),N0=a("li"),$_e=a("strong"),HKo=o("data2vec-audio"),UKo=o(" \u2014 "),jX=a("a"),JKo=o("Data2VecAudioForCTC"),YKo=o(" (Data2VecAudio model)"),KKo=l(),j0=a("li"),k_e=a("strong"),ZKo=o("hubert"),eZo=o(" \u2014 "),DX=a("a"),oZo=o("HubertForCTC"),rZo=o(" (Hubert model)"),tZo=l(),D0=a("li"),S_e=a("strong"),aZo=o("sew"),nZo=o(" \u2014 "),GX=a("a"),sZo=o("SEWForCTC"),lZo=o(" (SEW model)"),iZo=l(),G0=a("li"),R_e=a("strong"),dZo=o("sew-d"),cZo=o(" \u2014 "),OX=a("a"),fZo=o("SEWDForCTC"),mZo=o(" (SEW-D model)"),gZo=l(),O0=a("li"),B_e=a("strong"),hZo=o("unispeech"),pZo=o(" \u2014 "),VX=a("a"),_Zo=o("UniSpeechForCTC"),uZo=o(" (UniSpeech model)"),bZo=l(),V0=a("li"),P_e=a("strong"),vZo=o("unispeech-sat"),FZo=o(" \u2014 "),XX=a("a"),TZo=o("UniSpeechSatForCTC"),MZo=o(" (UniSpeechSat model)"),EZo=l(),X0=a("li"),I_e=a("strong"),CZo=o("wav2vec2"),wZo=o(" \u2014 "),zX=a("a"),AZo=o("Wav2Vec2ForCTC"),yZo=o(" (Wav2Vec2 model)"),LZo=l(),z0=a("li"),q_e=a("strong"),xZo=o("wav2vec2-conformer"),$Zo=o(" \u2014 "),WX=a("a"),kZo=o("Wav2Vec2ConformerForCTC"),SZo=o(" (Wav2Vec2-Conformer model)"),RZo=l(),W0=a("li"),N_e=a("strong"),BZo=o("wavlm"),PZo=o(" \u2014 "),QX=a("a"),IZo=o("WavLMForCTC"),qZo=o(" (WavLM model)"),NZo=l(),Q0=a("p"),jZo=o("The model is set in evaluation mode by default using "),j_e=a("code"),DZo=o("model.eval()"),GZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=a("code"),OZo=o("model.train()"),VZo=l(),F(H0.$$.fragment),Hqe=l(),bd=a("h2"),U0=a("a"),G_e=a("span"),F(gL.$$.fragment),XZo=l(),O_e=a("span"),zZo=o("AutoModelForSpeechSeq2Seq"),Uqe=l(),Xo=a("div"),F(hL.$$.fragment),WZo=l(),vd=a("p"),QZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HX=a("a"),HZo=o("from_pretrained()"),UZo=o(" class method or the "),UX=a("a"),JZo=o("from_config()"),YZo=o(` class
method.`),KZo=l(),pL=a("p"),ZZo=o("This class cannot be instantiated directly using "),V_e=a("code"),eer=o("__init__()"),oer=o(" (throws an error)."),rer=l(),Ft=a("div"),F(_L.$$.fragment),ter=l(),X_e=a("p"),aer=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ner=l(),Fd=a("p"),ser=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),ler=o("not"),ier=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),der=o("from_pretrained()"),cer=o(" to load the model weights."),fer=l(),F(J0.$$.fragment),mer=l(),go=a("div"),F(uL.$$.fragment),ger=l(),W_e=a("p"),her=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),per=l(),Xa=a("p"),_er=o("The model class to instantiate is selected based on the "),Q_e=a("code"),uer=o("model_type"),ber=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),ver=o("pretrained_model_name_or_path"),Fer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),Ter=o("pretrained_model_name_or_path"),Mer=o(":"),Eer=l(),bL=a("ul"),Y0=a("li"),J_e=a("strong"),Cer=o("speech-encoder-decoder"),wer=o(" \u2014 "),YX=a("a"),Aer=o("SpeechEncoderDecoderModel"),yer=o(" (Speech Encoder decoder model)"),Ler=l(),K0=a("li"),Y_e=a("strong"),xer=o("speech_to_text"),$er=o(" \u2014 "),KX=a("a"),ker=o("Speech2TextForConditionalGeneration"),Ser=o(" (Speech2Text model)"),Rer=l(),Z0=a("p"),Ber=o("The model is set in evaluation mode by default using "),K_e=a("code"),Per=o("model.eval()"),Ier=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=a("code"),qer=o("model.train()"),Ner=l(),F(eT.$$.fragment),Jqe=l(),Td=a("h2"),oT=a("a"),eue=a("span"),F(vL.$$.fragment),jer=l(),oue=a("span"),Der=o("AutoModelForAudioXVector"),Yqe=l(),zo=a("div"),F(FL.$$.fragment),Ger=l(),Md=a("p"),Oer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ZX=a("a"),Ver=o("from_pretrained()"),Xer=o(" class method or the "),ez=a("a"),zer=o("from_config()"),Wer=o(` class
method.`),Qer=l(),TL=a("p"),Her=o("This class cannot be instantiated directly using "),rue=a("code"),Uer=o("__init__()"),Jer=o(" (throws an error)."),Yer=l(),Tt=a("div"),F(ML.$$.fragment),Ker=l(),tue=a("p"),Zer=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eor=l(),Ed=a("p"),oor=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),ror=o("not"),tor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),aor=o("from_pretrained()"),nor=o(" to load the model weights."),sor=l(),F(rT.$$.fragment),lor=l(),ho=a("div"),F(EL.$$.fragment),ior=l(),nue=a("p"),dor=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),cor=l(),za=a("p"),mor=o("The model class to instantiate is selected based on the "),sue=a("code"),gor=o("model_type"),hor=o(` property of the config object (either
passed as an argument or loaded from `),lue=a("code"),por=o("pretrained_model_name_or_path"),_or=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=a("code"),uor=o("pretrained_model_name_or_path"),bor=o(":"),vor=l(),Zr=a("ul"),tT=a("li"),due=a("strong"),For=o("data2vec-audio"),Tor=o(" \u2014 "),rz=a("a"),Mor=o("Data2VecAudioForXVector"),Eor=o(" (Data2VecAudio model)"),Cor=l(),aT=a("li"),cue=a("strong"),wor=o("unispeech-sat"),Aor=o(" \u2014 "),tz=a("a"),yor=o("UniSpeechSatForXVector"),Lor=o(" (UniSpeechSat model)"),xor=l(),nT=a("li"),fue=a("strong"),$or=o("wav2vec2"),kor=o(" \u2014 "),az=a("a"),Sor=o("Wav2Vec2ForXVector"),Ror=o(" (Wav2Vec2 model)"),Bor=l(),sT=a("li"),mue=a("strong"),Por=o("wav2vec2-conformer"),Ior=o(" \u2014 "),nz=a("a"),qor=o("Wav2Vec2ConformerForXVector"),Nor=o(" (Wav2Vec2-Conformer model)"),jor=l(),lT=a("li"),gue=a("strong"),Dor=o("wavlm"),Gor=o(" \u2014 "),sz=a("a"),Oor=o("WavLMForXVector"),Vor=o(" (WavLM model)"),Xor=l(),iT=a("p"),zor=o("The model is set in evaluation mode by default using "),hue=a("code"),Wor=o("model.eval()"),Qor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),Hor=o("model.train()"),Uor=l(),F(dT.$$.fragment),Kqe=l(),Cd=a("h2"),cT=a("a"),_ue=a("span"),F(CL.$$.fragment),Jor=l(),uue=a("span"),Yor=o("AutoModelForMaskedImageModeling"),Zqe=l(),Wo=a("div"),F(wL.$$.fragment),Kor=l(),wd=a("p"),Zor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lz=a("a"),err=o("from_pretrained()"),orr=o(" class method or the "),iz=a("a"),rrr=o("from_config()"),trr=o(` class
method.`),arr=l(),AL=a("p"),nrr=o("This class cannot be instantiated directly using "),bue=a("code"),srr=o("__init__()"),lrr=o(" (throws an error)."),irr=l(),Mt=a("div"),F(yL.$$.fragment),drr=l(),vue=a("p"),crr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),frr=l(),Ad=a("p"),mrr=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),grr=o("not"),hrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=a("a"),prr=o("from_pretrained()"),_rr=o(" to load the model weights."),urr=l(),F(fT.$$.fragment),brr=l(),po=a("div"),F(LL.$$.fragment),vrr=l(),Tue=a("p"),Frr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Trr=l(),Wa=a("p"),Mrr=o("The model class to instantiate is selected based on the "),Mue=a("code"),Err=o("model_type"),Crr=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),wrr=o("pretrained_model_name_or_path"),Arr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),yrr=o("pretrained_model_name_or_path"),Lrr=o(":"),xrr=l(),yd=a("ul"),mT=a("li"),wue=a("strong"),$rr=o("deit"),krr=o(" \u2014 "),cz=a("a"),Srr=o("DeiTForMaskedImageModeling"),Rrr=o(" (DeiT model)"),Brr=l(),gT=a("li"),Aue=a("strong"),Prr=o("swin"),Irr=o(" \u2014 "),fz=a("a"),qrr=o("SwinForMaskedImageModeling"),Nrr=o(" (Swin model)"),jrr=l(),hT=a("li"),yue=a("strong"),Drr=o("vit"),Grr=o(" \u2014 "),mz=a("a"),Orr=o("ViTForMaskedImageModeling"),Vrr=o(" (ViT model)"),Xrr=l(),pT=a("p"),zrr=o("The model is set in evaluation mode by default using "),Lue=a("code"),Wrr=o("model.eval()"),Qrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),Hrr=o("model.train()"),Urr=l(),F(_T.$$.fragment),eNe=l(),Ld=a("h2"),uT=a("a"),$ue=a("span"),F(xL.$$.fragment),Jrr=l(),kue=a("span"),Yrr=o("AutoModelForObjectDetection"),oNe=l(),Qo=a("div"),F($L.$$.fragment),Krr=l(),xd=a("p"),Zrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),gz=a("a"),etr=o("from_pretrained()"),otr=o(" class method or the "),hz=a("a"),rtr=o("from_config()"),ttr=o(` class
method.`),atr=l(),kL=a("p"),ntr=o("This class cannot be instantiated directly using "),Sue=a("code"),str=o("__init__()"),ltr=o(" (throws an error)."),itr=l(),Et=a("div"),F(SL.$$.fragment),dtr=l(),Rue=a("p"),ctr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ftr=l(),$d=a("p"),mtr=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),gtr=o("not"),htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),ptr=o("from_pretrained()"),_tr=o(" to load the model weights."),utr=l(),F(bT.$$.fragment),btr=l(),_o=a("div"),F(RL.$$.fragment),vtr=l(),Pue=a("p"),Ftr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ttr=l(),Qa=a("p"),Mtr=o("The model class to instantiate is selected based on the "),Iue=a("code"),Etr=o("model_type"),Ctr=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),ytr=o("pretrained_model_name_or_path"),Ltr=o(":"),xtr=l(),BL=a("ul"),vT=a("li"),jue=a("strong"),$tr=o("detr"),ktr=o(" \u2014 "),_z=a("a"),Str=o("DetrForObjectDetection"),Rtr=o(" (DETR model)"),Btr=l(),FT=a("li"),Due=a("strong"),Ptr=o("yolos"),Itr=o(" \u2014 "),uz=a("a"),qtr=o("YolosForObjectDetection"),Ntr=o(" (YOLOS model)"),jtr=l(),TT=a("p"),Dtr=o("The model is set in evaluation mode by default using "),Gue=a("code"),Gtr=o("model.eval()"),Otr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),Vtr=o("model.train()"),Xtr=l(),F(MT.$$.fragment),rNe=l(),kd=a("h2"),ET=a("a"),Vue=a("span"),F(PL.$$.fragment),ztr=l(),Xue=a("span"),Wtr=o("AutoModelForImageSegmentation"),tNe=l(),Ho=a("div"),F(IL.$$.fragment),Qtr=l(),Sd=a("p"),Htr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),bz=a("a"),Utr=o("from_pretrained()"),Jtr=o(" class method or the "),vz=a("a"),Ytr=o("from_config()"),Ktr=o(` class
method.`),Ztr=l(),qL=a("p"),ear=o("This class cannot be instantiated directly using "),zue=a("code"),oar=o("__init__()"),rar=o(" (throws an error)."),tar=l(),Ct=a("div"),F(NL.$$.fragment),aar=l(),Wue=a("p"),nar=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),sar=l(),Rd=a("p"),lar=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),iar=o("not"),dar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),car=o("from_pretrained()"),far=o(" to load the model weights."),mar=l(),F(CT.$$.fragment),gar=l(),uo=a("div"),F(jL.$$.fragment),har=l(),Hue=a("p"),par=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_ar=l(),Ha=a("p"),uar=o("The model class to instantiate is selected based on the "),Uue=a("code"),bar=o("model_type"),Far=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),Tar=o("pretrained_model_name_or_path"),Mar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),Ear=o("pretrained_model_name_or_path"),Car=o(":"),war=l(),Kue=a("ul"),wT=a("li"),Zue=a("strong"),Aar=o("detr"),yar=o(" \u2014 "),Tz=a("a"),Lar=o("DetrForSegmentation"),xar=o(" (DETR model)"),$ar=l(),AT=a("p"),kar=o("The model is set in evaluation mode by default using "),e2e=a("code"),Sar=o("model.eval()"),Rar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o2e=a("code"),Bar=o("model.train()"),Par=l(),F(yT.$$.fragment),aNe=l(),Bd=a("h2"),LT=a("a"),r2e=a("span"),F(DL.$$.fragment),Iar=l(),t2e=a("span"),qar=o("AutoModelForSemanticSegmentation"),nNe=l(),Uo=a("div"),F(GL.$$.fragment),Nar=l(),Pd=a("p"),jar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Mz=a("a"),Dar=o("from_pretrained()"),Gar=o(" class method or the "),Ez=a("a"),Oar=o("from_config()"),Var=o(` class
method.`),Xar=l(),OL=a("p"),zar=o("This class cannot be instantiated directly using "),a2e=a("code"),War=o("__init__()"),Qar=o(" (throws an error)."),Har=l(),wt=a("div"),F(VL.$$.fragment),Uar=l(),n2e=a("p"),Jar=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Yar=l(),Id=a("p"),Kar=o(`Note:
Loading a model from its configuration file does `),s2e=a("strong"),Zar=o("not"),enr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),onr=o("from_pretrained()"),rnr=o(" to load the model weights."),tnr=l(),F(xT.$$.fragment),anr=l(),bo=a("div"),F(XL.$$.fragment),nnr=l(),l2e=a("p"),snr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lnr=l(),Ua=a("p"),inr=o("The model class to instantiate is selected based on the "),i2e=a("code"),dnr=o("model_type"),cnr=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),fnr=o("pretrained_model_name_or_path"),mnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),gnr=o("pretrained_model_name_or_path"),hnr=o(":"),pnr=l(),Ja=a("ul"),$T=a("li"),f2e=a("strong"),_nr=o("beit"),unr=o(" \u2014 "),wz=a("a"),bnr=o("BeitForSemanticSegmentation"),vnr=o(" (BEiT model)"),Fnr=l(),kT=a("li"),m2e=a("strong"),Tnr=o("data2vec-vision"),Mnr=o(" \u2014 "),Az=a("a"),Enr=o("Data2VecVisionForSemanticSegmentation"),Cnr=o(" (Data2VecVision model)"),wnr=l(),ST=a("li"),g2e=a("strong"),Anr=o("dpt"),ynr=o(" \u2014 "),yz=a("a"),Lnr=o("DPTForSemanticSegmentation"),xnr=o(" (DPT model)"),$nr=l(),RT=a("li"),h2e=a("strong"),knr=o("segformer"),Snr=o(" \u2014 "),Lz=a("a"),Rnr=o("SegformerForSemanticSegmentation"),Bnr=o(" (SegFormer model)"),Pnr=l(),BT=a("p"),Inr=o("The model is set in evaluation mode by default using "),p2e=a("code"),qnr=o("model.eval()"),Nnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_2e=a("code"),jnr=o("model.train()"),Dnr=l(),F(PT.$$.fragment),sNe=l(),qd=a("h2"),IT=a("a"),u2e=a("span"),F(zL.$$.fragment),Gnr=l(),b2e=a("span"),Onr=o("AutoModelForInstanceSegmentation"),lNe=l(),Jo=a("div"),F(WL.$$.fragment),Vnr=l(),Nd=a("p"),Xnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),xz=a("a"),znr=o("from_pretrained()"),Wnr=o(" class method or the "),$z=a("a"),Qnr=o("from_config()"),Hnr=o(` class
method.`),Unr=l(),QL=a("p"),Jnr=o("This class cannot be instantiated directly using "),v2e=a("code"),Ynr=o("__init__()"),Knr=o(" (throws an error)."),Znr=l(),At=a("div"),F(HL.$$.fragment),esr=l(),F2e=a("p"),osr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),rsr=l(),jd=a("p"),tsr=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),asr=o("not"),nsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),ssr=o("from_pretrained()"),lsr=o(" to load the model weights."),isr=l(),F(qT.$$.fragment),dsr=l(),vo=a("div"),F(UL.$$.fragment),csr=l(),M2e=a("p"),fsr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),msr=l(),Ya=a("p"),gsr=o("The model class to instantiate is selected based on the "),E2e=a("code"),hsr=o("model_type"),psr=o(` property of the config object (either
passed as an argument or loaded from `),C2e=a("code"),_sr=o("pretrained_model_name_or_path"),usr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=a("code"),bsr=o("pretrained_model_name_or_path"),vsr=o(":"),Fsr=l(),A2e=a("ul"),NT=a("li"),y2e=a("strong"),Tsr=o("maskformer"),Msr=o(" \u2014 "),Sz=a("a"),Esr=o("MaskFormerForInstanceSegmentation"),Csr=o(" (MaskFormer model)"),wsr=l(),jT=a("p"),Asr=o("The model is set in evaluation mode by default using "),L2e=a("code"),ysr=o("model.eval()"),Lsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x2e=a("code"),xsr=o("model.train()"),$sr=l(),F(DT.$$.fragment),iNe=l(),Dd=a("h2"),GT=a("a"),$2e=a("span"),F(JL.$$.fragment),ksr=l(),k2e=a("span"),Ssr=o("TFAutoModel"),dNe=l(),Yo=a("div"),F(YL.$$.fragment),Rsr=l(),Gd=a("p"),Bsr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Rz=a("a"),Psr=o("from_pretrained()"),Isr=o(" class method or the "),Bz=a("a"),qsr=o("from_config()"),Nsr=o(` class
method.`),jsr=l(),KL=a("p"),Dsr=o("This class cannot be instantiated directly using "),S2e=a("code"),Gsr=o("__init__()"),Osr=o(" (throws an error)."),Vsr=l(),yt=a("div"),F(ZL.$$.fragment),Xsr=l(),R2e=a("p"),zsr=o("Instantiates one of the base model classes of the library from a configuration."),Wsr=l(),Od=a("p"),Qsr=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),Hsr=o("not"),Usr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),Jsr=o("from_pretrained()"),Ysr=o(" to load the model weights."),Ksr=l(),F(OT.$$.fragment),Zsr=l(),wr=a("div"),F(e8.$$.fragment),elr=l(),P2e=a("p"),olr=o("Instantiate one of the base model classes of the library from a pretrained model."),rlr=l(),Ka=a("p"),tlr=o("The model class to instantiate is selected based on the "),I2e=a("code"),alr=o("model_type"),nlr=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),slr=o("pretrained_model_name_or_path"),llr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),ilr=o("pretrained_model_name_or_path"),dlr=o(":"),clr=l(),N=a("ul"),VT=a("li"),j2e=a("strong"),flr=o("albert"),mlr=o(" \u2014 "),Iz=a("a"),glr=o("TFAlbertModel"),hlr=o(" (ALBERT model)"),plr=l(),XT=a("li"),D2e=a("strong"),_lr=o("bart"),ulr=o(" \u2014 "),qz=a("a"),blr=o("TFBartModel"),vlr=o(" (BART model)"),Flr=l(),zT=a("li"),G2e=a("strong"),Tlr=o("bert"),Mlr=o(" \u2014 "),Nz=a("a"),Elr=o("TFBertModel"),Clr=o(" (BERT model)"),wlr=l(),WT=a("li"),O2e=a("strong"),Alr=o("blenderbot"),ylr=o(" \u2014 "),jz=a("a"),Llr=o("TFBlenderbotModel"),xlr=o(" (Blenderbot model)"),$lr=l(),QT=a("li"),V2e=a("strong"),klr=o("blenderbot-small"),Slr=o(" \u2014 "),Dz=a("a"),Rlr=o("TFBlenderbotSmallModel"),Blr=o(" (BlenderbotSmall model)"),Plr=l(),HT=a("li"),X2e=a("strong"),Ilr=o("camembert"),qlr=o(" \u2014 "),Gz=a("a"),Nlr=o("TFCamembertModel"),jlr=o(" (CamemBERT model)"),Dlr=l(),UT=a("li"),z2e=a("strong"),Glr=o("clip"),Olr=o(" \u2014 "),Oz=a("a"),Vlr=o("TFCLIPModel"),Xlr=o(" (CLIP model)"),zlr=l(),JT=a("li"),W2e=a("strong"),Wlr=o("convbert"),Qlr=o(" \u2014 "),Vz=a("a"),Hlr=o("TFConvBertModel"),Ulr=o(" (ConvBERT model)"),Jlr=l(),YT=a("li"),Q2e=a("strong"),Ylr=o("convnext"),Klr=o(" \u2014 "),Xz=a("a"),Zlr=o("TFConvNextModel"),eir=o(" (ConvNext model)"),oir=l(),KT=a("li"),H2e=a("strong"),rir=o("ctrl"),tir=o(" \u2014 "),zz=a("a"),air=o("TFCTRLModel"),nir=o(" (CTRL model)"),sir=l(),ZT=a("li"),U2e=a("strong"),lir=o("data2vec-vision"),iir=o(" \u2014 "),Wz=a("a"),dir=o("TFData2VecVisionModel"),cir=o(" (Data2VecVision model)"),fir=l(),e7=a("li"),J2e=a("strong"),mir=o("deberta"),gir=o(" \u2014 "),Qz=a("a"),hir=o("TFDebertaModel"),pir=o(" (DeBERTa model)"),_ir=l(),o7=a("li"),Y2e=a("strong"),uir=o("deberta-v2"),bir=o(" \u2014 "),Hz=a("a"),vir=o("TFDebertaV2Model"),Fir=o(" (DeBERTa-v2 model)"),Tir=l(),r7=a("li"),K2e=a("strong"),Mir=o("distilbert"),Eir=o(" \u2014 "),Uz=a("a"),Cir=o("TFDistilBertModel"),wir=o(" (DistilBERT model)"),Air=l(),t7=a("li"),Z2e=a("strong"),yir=o("dpr"),Lir=o(" \u2014 "),Jz=a("a"),xir=o("TFDPRQuestionEncoder"),$ir=o(" (DPR model)"),kir=l(),a7=a("li"),e1e=a("strong"),Sir=o("electra"),Rir=o(" \u2014 "),Yz=a("a"),Bir=o("TFElectraModel"),Pir=o(" (ELECTRA model)"),Iir=l(),n7=a("li"),o1e=a("strong"),qir=o("flaubert"),Nir=o(" \u2014 "),Kz=a("a"),jir=o("TFFlaubertModel"),Dir=o(" (FlauBERT model)"),Gir=l(),Ps=a("li"),r1e=a("strong"),Oir=o("funnel"),Vir=o(" \u2014 "),Zz=a("a"),Xir=o("TFFunnelModel"),zir=o(" or "),eW=a("a"),Wir=o("TFFunnelBaseModel"),Qir=o(" (Funnel Transformer model)"),Hir=l(),s7=a("li"),t1e=a("strong"),Uir=o("gpt2"),Jir=o(" \u2014 "),oW=a("a"),Yir=o("TFGPT2Model"),Kir=o(" (OpenAI GPT-2 model)"),Zir=l(),l7=a("li"),a1e=a("strong"),edr=o("gptj"),odr=o(" \u2014 "),rW=a("a"),rdr=o("TFGPTJModel"),tdr=o(" (GPT-J model)"),adr=l(),i7=a("li"),n1e=a("strong"),ndr=o("hubert"),sdr=o(" \u2014 "),tW=a("a"),ldr=o("TFHubertModel"),idr=o(" (Hubert model)"),ddr=l(),d7=a("li"),s1e=a("strong"),cdr=o("layoutlm"),fdr=o(" \u2014 "),aW=a("a"),mdr=o("TFLayoutLMModel"),gdr=o(" (LayoutLM model)"),hdr=l(),c7=a("li"),l1e=a("strong"),pdr=o("led"),_dr=o(" \u2014 "),nW=a("a"),udr=o("TFLEDModel"),bdr=o(" (LED model)"),vdr=l(),f7=a("li"),i1e=a("strong"),Fdr=o("longformer"),Tdr=o(" \u2014 "),sW=a("a"),Mdr=o("TFLongformerModel"),Edr=o(" (Longformer model)"),Cdr=l(),m7=a("li"),d1e=a("strong"),wdr=o("lxmert"),Adr=o(" \u2014 "),lW=a("a"),ydr=o("TFLxmertModel"),Ldr=o(" (LXMERT model)"),xdr=l(),g7=a("li"),c1e=a("strong"),$dr=o("marian"),kdr=o(" \u2014 "),iW=a("a"),Sdr=o("TFMarianModel"),Rdr=o(" (Marian model)"),Bdr=l(),h7=a("li"),f1e=a("strong"),Pdr=o("mbart"),Idr=o(" \u2014 "),dW=a("a"),qdr=o("TFMBartModel"),Ndr=o(" (mBART model)"),jdr=l(),p7=a("li"),m1e=a("strong"),Ddr=o("mobilebert"),Gdr=o(" \u2014 "),cW=a("a"),Odr=o("TFMobileBertModel"),Vdr=o(" (MobileBERT model)"),Xdr=l(),_7=a("li"),g1e=a("strong"),zdr=o("mpnet"),Wdr=o(" \u2014 "),fW=a("a"),Qdr=o("TFMPNetModel"),Hdr=o(" (MPNet model)"),Udr=l(),u7=a("li"),h1e=a("strong"),Jdr=o("mt5"),Ydr=o(" \u2014 "),mW=a("a"),Kdr=o("TFMT5Model"),Zdr=o(" (mT5 model)"),ecr=l(),b7=a("li"),p1e=a("strong"),ocr=o("openai-gpt"),rcr=o(" \u2014 "),gW=a("a"),tcr=o("TFOpenAIGPTModel"),acr=o(" (OpenAI GPT model)"),ncr=l(),v7=a("li"),_1e=a("strong"),scr=o("pegasus"),lcr=o(" \u2014 "),hW=a("a"),icr=o("TFPegasusModel"),dcr=o(" (Pegasus model)"),ccr=l(),F7=a("li"),u1e=a("strong"),fcr=o("rembert"),mcr=o(" \u2014 "),pW=a("a"),gcr=o("TFRemBertModel"),hcr=o(" (RemBERT model)"),pcr=l(),T7=a("li"),b1e=a("strong"),_cr=o("roberta"),ucr=o(" \u2014 "),_W=a("a"),bcr=o("TFRobertaModel"),vcr=o(" (RoBERTa model)"),Fcr=l(),M7=a("li"),v1e=a("strong"),Tcr=o("roformer"),Mcr=o(" \u2014 "),uW=a("a"),Ecr=o("TFRoFormerModel"),Ccr=o(" (RoFormer model)"),wcr=l(),E7=a("li"),F1e=a("strong"),Acr=o("speech_to_text"),ycr=o(" \u2014 "),bW=a("a"),Lcr=o("TFSpeech2TextModel"),xcr=o(" (Speech2Text model)"),$cr=l(),C7=a("li"),T1e=a("strong"),kcr=o("swin"),Scr=o(" \u2014 "),vW=a("a"),Rcr=o("TFSwinModel"),Bcr=o(" (Swin model)"),Pcr=l(),w7=a("li"),M1e=a("strong"),Icr=o("t5"),qcr=o(" \u2014 "),FW=a("a"),Ncr=o("TFT5Model"),jcr=o(" (T5 model)"),Dcr=l(),A7=a("li"),E1e=a("strong"),Gcr=o("tapas"),Ocr=o(" \u2014 "),TW=a("a"),Vcr=o("TFTapasModel"),Xcr=o(" (TAPAS model)"),zcr=l(),y7=a("li"),C1e=a("strong"),Wcr=o("transfo-xl"),Qcr=o(" \u2014 "),MW=a("a"),Hcr=o("TFTransfoXLModel"),Ucr=o(" (Transformer-XL model)"),Jcr=l(),L7=a("li"),w1e=a("strong"),Ycr=o("vit"),Kcr=o(" \u2014 "),EW=a("a"),Zcr=o("TFViTModel"),efr=o(" (ViT model)"),ofr=l(),x7=a("li"),A1e=a("strong"),rfr=o("vit_mae"),tfr=o(" \u2014 "),CW=a("a"),afr=o("TFViTMAEModel"),nfr=o(" (ViTMAE model)"),sfr=l(),$7=a("li"),y1e=a("strong"),lfr=o("wav2vec2"),ifr=o(" \u2014 "),wW=a("a"),dfr=o("TFWav2Vec2Model"),cfr=o(" (Wav2Vec2 model)"),ffr=l(),k7=a("li"),L1e=a("strong"),mfr=o("xlm"),gfr=o(" \u2014 "),AW=a("a"),hfr=o("TFXLMModel"),pfr=o(" (XLM model)"),_fr=l(),S7=a("li"),x1e=a("strong"),ufr=o("xlm-roberta"),bfr=o(" \u2014 "),yW=a("a"),vfr=o("TFXLMRobertaModel"),Ffr=o(" (XLM-RoBERTa model)"),Tfr=l(),R7=a("li"),$1e=a("strong"),Mfr=o("xlnet"),Efr=o(" \u2014 "),LW=a("a"),Cfr=o("TFXLNetModel"),wfr=o(" (XLNet model)"),Afr=l(),F(B7.$$.fragment),cNe=l(),Vd=a("h2"),P7=a("a"),k1e=a("span"),F(o8.$$.fragment),yfr=l(),S1e=a("span"),Lfr=o("TFAutoModelForPreTraining"),fNe=l(),Ko=a("div"),F(r8.$$.fragment),xfr=l(),Xd=a("p"),$fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xW=a("a"),kfr=o("from_pretrained()"),Sfr=o(" class method or the "),$W=a("a"),Rfr=o("from_config()"),Bfr=o(` class
method.`),Pfr=l(),t8=a("p"),Ifr=o("This class cannot be instantiated directly using "),R1e=a("code"),qfr=o("__init__()"),Nfr=o(" (throws an error)."),jfr=l(),Lt=a("div"),F(a8.$$.fragment),Dfr=l(),B1e=a("p"),Gfr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ofr=l(),zd=a("p"),Vfr=o(`Note:
Loading a model from its configuration file does `),P1e=a("strong"),Xfr=o("not"),zfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=a("a"),Wfr=o("from_pretrained()"),Qfr=o(" to load the model weights."),Hfr=l(),F(I7.$$.fragment),Ufr=l(),Ar=a("div"),F(n8.$$.fragment),Jfr=l(),I1e=a("p"),Yfr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kfr=l(),Za=a("p"),Zfr=o("The model class to instantiate is selected based on the "),q1e=a("code"),emr=o("model_type"),omr=o(` property of the config object (either
passed as an argument or loaded from `),N1e=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(":"),smr=l(),se=a("ul"),q7=a("li"),D1e=a("strong"),lmr=o("albert"),imr=o(" \u2014 "),SW=a("a"),dmr=o("TFAlbertForPreTraining"),cmr=o(" (ALBERT model)"),fmr=l(),N7=a("li"),G1e=a("strong"),mmr=o("bart"),gmr=o(" \u2014 "),RW=a("a"),hmr=o("TFBartForConditionalGeneration"),pmr=o(" (BART model)"),_mr=l(),j7=a("li"),O1e=a("strong"),umr=o("bert"),bmr=o(" \u2014 "),BW=a("a"),vmr=o("TFBertForPreTraining"),Fmr=o(" (BERT model)"),Tmr=l(),D7=a("li"),V1e=a("strong"),Mmr=o("camembert"),Emr=o(" \u2014 "),PW=a("a"),Cmr=o("TFCamembertForMaskedLM"),wmr=o(" (CamemBERT model)"),Amr=l(),G7=a("li"),X1e=a("strong"),ymr=o("ctrl"),Lmr=o(" \u2014 "),IW=a("a"),xmr=o("TFCTRLLMHeadModel"),$mr=o(" (CTRL model)"),kmr=l(),O7=a("li"),z1e=a("strong"),Smr=o("distilbert"),Rmr=o(" \u2014 "),qW=a("a"),Bmr=o("TFDistilBertForMaskedLM"),Pmr=o(" (DistilBERT model)"),Imr=l(),V7=a("li"),W1e=a("strong"),qmr=o("electra"),Nmr=o(" \u2014 "),NW=a("a"),jmr=o("TFElectraForPreTraining"),Dmr=o(" (ELECTRA model)"),Gmr=l(),X7=a("li"),Q1e=a("strong"),Omr=o("flaubert"),Vmr=o(" \u2014 "),jW=a("a"),Xmr=o("TFFlaubertWithLMHeadModel"),zmr=o(" (FlauBERT model)"),Wmr=l(),z7=a("li"),H1e=a("strong"),Qmr=o("funnel"),Hmr=o(" \u2014 "),DW=a("a"),Umr=o("TFFunnelForPreTraining"),Jmr=o(" (Funnel Transformer model)"),Ymr=l(),W7=a("li"),U1e=a("strong"),Kmr=o("gpt2"),Zmr=o(" \u2014 "),GW=a("a"),egr=o("TFGPT2LMHeadModel"),ogr=o(" (OpenAI GPT-2 model)"),rgr=l(),Q7=a("li"),J1e=a("strong"),tgr=o("layoutlm"),agr=o(" \u2014 "),OW=a("a"),ngr=o("TFLayoutLMForMaskedLM"),sgr=o(" (LayoutLM model)"),lgr=l(),H7=a("li"),Y1e=a("strong"),igr=o("lxmert"),dgr=o(" \u2014 "),VW=a("a"),cgr=o("TFLxmertForPreTraining"),fgr=o(" (LXMERT model)"),mgr=l(),U7=a("li"),K1e=a("strong"),ggr=o("mobilebert"),hgr=o(" \u2014 "),XW=a("a"),pgr=o("TFMobileBertForPreTraining"),_gr=o(" (MobileBERT model)"),ugr=l(),J7=a("li"),Z1e=a("strong"),bgr=o("mpnet"),vgr=o(" \u2014 "),zW=a("a"),Fgr=o("TFMPNetForMaskedLM"),Tgr=o(" (MPNet model)"),Mgr=l(),Y7=a("li"),ebe=a("strong"),Egr=o("openai-gpt"),Cgr=o(" \u2014 "),WW=a("a"),wgr=o("TFOpenAIGPTLMHeadModel"),Agr=o(" (OpenAI GPT model)"),ygr=l(),K7=a("li"),obe=a("strong"),Lgr=o("roberta"),xgr=o(" \u2014 "),QW=a("a"),$gr=o("TFRobertaForMaskedLM"),kgr=o(" (RoBERTa model)"),Sgr=l(),Z7=a("li"),rbe=a("strong"),Rgr=o("t5"),Bgr=o(" \u2014 "),HW=a("a"),Pgr=o("TFT5ForConditionalGeneration"),Igr=o(" (T5 model)"),qgr=l(),eM=a("li"),tbe=a("strong"),Ngr=o("tapas"),jgr=o(" \u2014 "),UW=a("a"),Dgr=o("TFTapasForMaskedLM"),Ggr=o(" (TAPAS model)"),Ogr=l(),oM=a("li"),abe=a("strong"),Vgr=o("transfo-xl"),Xgr=o(" \u2014 "),JW=a("a"),zgr=o("TFTransfoXLLMHeadModel"),Wgr=o(" (Transformer-XL model)"),Qgr=l(),rM=a("li"),nbe=a("strong"),Hgr=o("vit_mae"),Ugr=o(" \u2014 "),YW=a("a"),Jgr=o("TFViTMAEForPreTraining"),Ygr=o(" (ViTMAE model)"),Kgr=l(),tM=a("li"),sbe=a("strong"),Zgr=o("xlm"),ehr=o(" \u2014 "),KW=a("a"),ohr=o("TFXLMWithLMHeadModel"),rhr=o(" (XLM model)"),thr=l(),aM=a("li"),lbe=a("strong"),ahr=o("xlm-roberta"),nhr=o(" \u2014 "),ZW=a("a"),shr=o("TFXLMRobertaForMaskedLM"),lhr=o(" (XLM-RoBERTa model)"),ihr=l(),nM=a("li"),ibe=a("strong"),dhr=o("xlnet"),chr=o(" \u2014 "),eQ=a("a"),fhr=o("TFXLNetLMHeadModel"),mhr=o(" (XLNet model)"),ghr=l(),F(sM.$$.fragment),mNe=l(),Wd=a("h2"),lM=a("a"),dbe=a("span"),F(s8.$$.fragment),hhr=l(),cbe=a("span"),phr=o("TFAutoModelForCausalLM"),gNe=l(),Zo=a("div"),F(l8.$$.fragment),_hr=l(),Qd=a("p"),uhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oQ=a("a"),bhr=o("from_pretrained()"),vhr=o(" class method or the "),rQ=a("a"),Fhr=o("from_config()"),Thr=o(` class
method.`),Mhr=l(),i8=a("p"),Ehr=o("This class cannot be instantiated directly using "),fbe=a("code"),Chr=o("__init__()"),whr=o(" (throws an error)."),Ahr=l(),xt=a("div"),F(d8.$$.fragment),yhr=l(),mbe=a("p"),Lhr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xhr=l(),Hd=a("p"),$hr=o(`Note:
Loading a model from its configuration file does `),gbe=a("strong"),khr=o("not"),Shr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=a("a"),Rhr=o("from_pretrained()"),Bhr=o(" to load the model weights."),Phr=l(),F(iM.$$.fragment),Ihr=l(),yr=a("div"),F(c8.$$.fragment),qhr=l(),hbe=a("p"),Nhr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jhr=l(),en=a("p"),Dhr=o("The model class to instantiate is selected based on the "),pbe=a("code"),Ghr=o("model_type"),Ohr=o(` property of the config object (either
passed as an argument or loaded from `),_be=a("code"),Vhr=o("pretrained_model_name_or_path"),Xhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),zhr=o("pretrained_model_name_or_path"),Whr=o(":"),Qhr=l(),Te=a("ul"),dM=a("li"),bbe=a("strong"),Hhr=o("bert"),Uhr=o(" \u2014 "),aQ=a("a"),Jhr=o("TFBertLMHeadModel"),Yhr=o(" (BERT model)"),Khr=l(),cM=a("li"),vbe=a("strong"),Zhr=o("camembert"),epr=o(" \u2014 "),nQ=a("a"),opr=o("TFCamembertForCausalLM"),rpr=o(" (CamemBERT model)"),tpr=l(),fM=a("li"),Fbe=a("strong"),apr=o("ctrl"),npr=o(" \u2014 "),sQ=a("a"),spr=o("TFCTRLLMHeadModel"),lpr=o(" (CTRL model)"),ipr=l(),mM=a("li"),Tbe=a("strong"),dpr=o("gpt2"),cpr=o(" \u2014 "),lQ=a("a"),fpr=o("TFGPT2LMHeadModel"),mpr=o(" (OpenAI GPT-2 model)"),gpr=l(),gM=a("li"),Mbe=a("strong"),hpr=o("gptj"),ppr=o(" \u2014 "),iQ=a("a"),_pr=o("TFGPTJForCausalLM"),upr=o(" (GPT-J model)"),bpr=l(),hM=a("li"),Ebe=a("strong"),vpr=o("openai-gpt"),Fpr=o(" \u2014 "),dQ=a("a"),Tpr=o("TFOpenAIGPTLMHeadModel"),Mpr=o(" (OpenAI GPT model)"),Epr=l(),pM=a("li"),Cbe=a("strong"),Cpr=o("rembert"),wpr=o(" \u2014 "),cQ=a("a"),Apr=o("TFRemBertForCausalLM"),ypr=o(" (RemBERT model)"),Lpr=l(),_M=a("li"),wbe=a("strong"),xpr=o("roberta"),$pr=o(" \u2014 "),fQ=a("a"),kpr=o("TFRobertaForCausalLM"),Spr=o(" (RoBERTa model)"),Rpr=l(),uM=a("li"),Abe=a("strong"),Bpr=o("roformer"),Ppr=o(" \u2014 "),mQ=a("a"),Ipr=o("TFRoFormerForCausalLM"),qpr=o(" (RoFormer model)"),Npr=l(),bM=a("li"),ybe=a("strong"),jpr=o("transfo-xl"),Dpr=o(" \u2014 "),gQ=a("a"),Gpr=o("TFTransfoXLLMHeadModel"),Opr=o(" (Transformer-XL model)"),Vpr=l(),vM=a("li"),Lbe=a("strong"),Xpr=o("xlm"),zpr=o(" \u2014 "),hQ=a("a"),Wpr=o("TFXLMWithLMHeadModel"),Qpr=o(" (XLM model)"),Hpr=l(),FM=a("li"),xbe=a("strong"),Upr=o("xlnet"),Jpr=o(" \u2014 "),pQ=a("a"),Ypr=o("TFXLNetLMHeadModel"),Kpr=o(" (XLNet model)"),Zpr=l(),F(TM.$$.fragment),hNe=l(),Ud=a("h2"),MM=a("a"),$be=a("span"),F(f8.$$.fragment),e_r=l(),kbe=a("span"),o_r=o("TFAutoModelForImageClassification"),pNe=l(),er=a("div"),F(m8.$$.fragment),r_r=l(),Jd=a("p"),t_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_Q=a("a"),a_r=o("from_pretrained()"),n_r=o(" class method or the "),uQ=a("a"),s_r=o("from_config()"),l_r=o(` class
method.`),i_r=l(),g8=a("p"),d_r=o("This class cannot be instantiated directly using "),Sbe=a("code"),c_r=o("__init__()"),f_r=o(" (throws an error)."),m_r=l(),$t=a("div"),F(h8.$$.fragment),g_r=l(),Rbe=a("p"),h_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),p_r=l(),Yd=a("p"),__r=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),u_r=o("not"),b_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),v_r=o("from_pretrained()"),F_r=o(" to load the model weights."),T_r=l(),F(EM.$$.fragment),M_r=l(),Lr=a("div"),F(p8.$$.fragment),E_r=l(),Pbe=a("p"),C_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),w_r=l(),on=a("p"),A_r=o("The model class to instantiate is selected based on the "),Ibe=a("code"),y_r=o("model_type"),L_r=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),x_r=o("pretrained_model_name_or_path"),$_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),k_r=o("pretrained_model_name_or_path"),S_r=o(":"),R_r=l(),rn=a("ul"),CM=a("li"),jbe=a("strong"),B_r=o("convnext"),P_r=o(" \u2014 "),vQ=a("a"),I_r=o("TFConvNextForImageClassification"),q_r=o(" (ConvNext model)"),N_r=l(),wM=a("li"),Dbe=a("strong"),j_r=o("data2vec-vision"),D_r=o(" \u2014 "),FQ=a("a"),G_r=o("TFData2VecVisionForImageClassification"),O_r=o(" (Data2VecVision model)"),V_r=l(),AM=a("li"),Gbe=a("strong"),X_r=o("swin"),z_r=o(" \u2014 "),TQ=a("a"),W_r=o("TFSwinForImageClassification"),Q_r=o(" (Swin model)"),H_r=l(),yM=a("li"),Obe=a("strong"),U_r=o("vit"),J_r=o(" \u2014 "),MQ=a("a"),Y_r=o("TFViTForImageClassification"),K_r=o(" (ViT model)"),Z_r=l(),F(LM.$$.fragment),_Ne=l(),Kd=a("h2"),xM=a("a"),Vbe=a("span"),F(_8.$$.fragment),eur=l(),Xbe=a("span"),our=o("TFAutoModelForMaskedLM"),uNe=l(),or=a("div"),F(u8.$$.fragment),rur=l(),Zd=a("p"),tur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EQ=a("a"),aur=o("from_pretrained()"),nur=o(" class method or the "),CQ=a("a"),sur=o("from_config()"),lur=o(` class
method.`),iur=l(),b8=a("p"),dur=o("This class cannot be instantiated directly using "),zbe=a("code"),cur=o("__init__()"),fur=o(" (throws an error)."),mur=l(),kt=a("div"),F(v8.$$.fragment),gur=l(),Wbe=a("p"),hur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pur=l(),ec=a("p"),_ur=o(`Note:
Loading a model from its configuration file does `),Qbe=a("strong"),uur=o("not"),bur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),vur=o("from_pretrained()"),Fur=o(" to load the model weights."),Tur=l(),F($M.$$.fragment),Mur=l(),xr=a("div"),F(F8.$$.fragment),Eur=l(),Hbe=a("p"),Cur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wur=l(),tn=a("p"),Aur=o("The model class to instantiate is selected based on the "),Ube=a("code"),yur=o("model_type"),Lur=o(` property of the config object (either
passed as an argument or loaded from `),Jbe=a("code"),xur=o("pretrained_model_name_or_path"),$ur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=a("code"),kur=o("pretrained_model_name_or_path"),Sur=o(":"),Rur=l(),ie=a("ul"),kM=a("li"),Kbe=a("strong"),Bur=o("albert"),Pur=o(" \u2014 "),AQ=a("a"),Iur=o("TFAlbertForMaskedLM"),qur=o(" (ALBERT model)"),Nur=l(),SM=a("li"),Zbe=a("strong"),jur=o("bert"),Dur=o(" \u2014 "),yQ=a("a"),Gur=o("TFBertForMaskedLM"),Our=o(" (BERT model)"),Vur=l(),RM=a("li"),eve=a("strong"),Xur=o("camembert"),zur=o(" \u2014 "),LQ=a("a"),Wur=o("TFCamembertForMaskedLM"),Qur=o(" (CamemBERT model)"),Hur=l(),BM=a("li"),ove=a("strong"),Uur=o("convbert"),Jur=o(" \u2014 "),xQ=a("a"),Yur=o("TFConvBertForMaskedLM"),Kur=o(" (ConvBERT model)"),Zur=l(),PM=a("li"),rve=a("strong"),e2r=o("deberta"),o2r=o(" \u2014 "),$Q=a("a"),r2r=o("TFDebertaForMaskedLM"),t2r=o(" (DeBERTa model)"),a2r=l(),IM=a("li"),tve=a("strong"),n2r=o("deberta-v2"),s2r=o(" \u2014 "),kQ=a("a"),l2r=o("TFDebertaV2ForMaskedLM"),i2r=o(" (DeBERTa-v2 model)"),d2r=l(),qM=a("li"),ave=a("strong"),c2r=o("distilbert"),f2r=o(" \u2014 "),SQ=a("a"),m2r=o("TFDistilBertForMaskedLM"),g2r=o(" (DistilBERT model)"),h2r=l(),NM=a("li"),nve=a("strong"),p2r=o("electra"),_2r=o(" \u2014 "),RQ=a("a"),u2r=o("TFElectraForMaskedLM"),b2r=o(" (ELECTRA model)"),v2r=l(),jM=a("li"),sve=a("strong"),F2r=o("flaubert"),T2r=o(" \u2014 "),BQ=a("a"),M2r=o("TFFlaubertWithLMHeadModel"),E2r=o(" (FlauBERT model)"),C2r=l(),DM=a("li"),lve=a("strong"),w2r=o("funnel"),A2r=o(" \u2014 "),PQ=a("a"),y2r=o("TFFunnelForMaskedLM"),L2r=o(" (Funnel Transformer model)"),x2r=l(),GM=a("li"),ive=a("strong"),$2r=o("layoutlm"),k2r=o(" \u2014 "),IQ=a("a"),S2r=o("TFLayoutLMForMaskedLM"),R2r=o(" (LayoutLM model)"),B2r=l(),OM=a("li"),dve=a("strong"),P2r=o("longformer"),I2r=o(" \u2014 "),qQ=a("a"),q2r=o("TFLongformerForMaskedLM"),N2r=o(" (Longformer model)"),j2r=l(),VM=a("li"),cve=a("strong"),D2r=o("mobilebert"),G2r=o(" \u2014 "),NQ=a("a"),O2r=o("TFMobileBertForMaskedLM"),V2r=o(" (MobileBERT model)"),X2r=l(),XM=a("li"),fve=a("strong"),z2r=o("mpnet"),W2r=o(" \u2014 "),jQ=a("a"),Q2r=o("TFMPNetForMaskedLM"),H2r=o(" (MPNet model)"),U2r=l(),zM=a("li"),mve=a("strong"),J2r=o("rembert"),Y2r=o(" \u2014 "),DQ=a("a"),K2r=o("TFRemBertForMaskedLM"),Z2r=o(" (RemBERT model)"),e1r=l(),WM=a("li"),gve=a("strong"),o1r=o("roberta"),r1r=o(" \u2014 "),GQ=a("a"),t1r=o("TFRobertaForMaskedLM"),a1r=o(" (RoBERTa model)"),n1r=l(),QM=a("li"),hve=a("strong"),s1r=o("roformer"),l1r=o(" \u2014 "),OQ=a("a"),i1r=o("TFRoFormerForMaskedLM"),d1r=o(" (RoFormer model)"),c1r=l(),HM=a("li"),pve=a("strong"),f1r=o("tapas"),m1r=o(" \u2014 "),VQ=a("a"),g1r=o("TFTapasForMaskedLM"),h1r=o(" (TAPAS model)"),p1r=l(),UM=a("li"),_ve=a("strong"),_1r=o("xlm"),u1r=o(" \u2014 "),XQ=a("a"),b1r=o("TFXLMWithLMHeadModel"),v1r=o(" (XLM model)"),F1r=l(),JM=a("li"),uve=a("strong"),T1r=o("xlm-roberta"),M1r=o(" \u2014 "),zQ=a("a"),E1r=o("TFXLMRobertaForMaskedLM"),C1r=o(" (XLM-RoBERTa model)"),w1r=l(),F(YM.$$.fragment),bNe=l(),oc=a("h2"),KM=a("a"),bve=a("span"),F(T8.$$.fragment),A1r=l(),vve=a("span"),y1r=o("TFAutoModelForSeq2SeqLM"),vNe=l(),rr=a("div"),F(M8.$$.fragment),L1r=l(),rc=a("p"),x1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WQ=a("a"),$1r=o("from_pretrained()"),k1r=o(" class method or the "),QQ=a("a"),S1r=o("from_config()"),R1r=o(` class
method.`),B1r=l(),E8=a("p"),P1r=o("This class cannot be instantiated directly using "),Fve=a("code"),I1r=o("__init__()"),q1r=o(" (throws an error)."),N1r=l(),St=a("div"),F(C8.$$.fragment),j1r=l(),Tve=a("p"),D1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G1r=l(),tc=a("p"),O1r=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),V1r=o("not"),X1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),z1r=o("from_pretrained()"),W1r=o(" to load the model weights."),Q1r=l(),F(ZM.$$.fragment),H1r=l(),$r=a("div"),F(w8.$$.fragment),U1r=l(),Eve=a("p"),J1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y1r=l(),an=a("p"),K1r=o("The model class to instantiate is selected based on the "),Cve=a("code"),Z1r=o("model_type"),ebr=o(` property of the config object (either
passed as an argument or loaded from `),wve=a("code"),obr=o("pretrained_model_name_or_path"),rbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=a("code"),tbr=o("pretrained_model_name_or_path"),abr=o(":"),nbr=l(),ye=a("ul"),e4=a("li"),yve=a("strong"),sbr=o("bart"),lbr=o(" \u2014 "),UQ=a("a"),ibr=o("TFBartForConditionalGeneration"),dbr=o(" (BART model)"),cbr=l(),o4=a("li"),Lve=a("strong"),fbr=o("blenderbot"),mbr=o(" \u2014 "),JQ=a("a"),gbr=o("TFBlenderbotForConditionalGeneration"),hbr=o(" (Blenderbot model)"),pbr=l(),r4=a("li"),xve=a("strong"),_br=o("blenderbot-small"),ubr=o(" \u2014 "),YQ=a("a"),bbr=o("TFBlenderbotSmallForConditionalGeneration"),vbr=o(" (BlenderbotSmall model)"),Fbr=l(),t4=a("li"),$ve=a("strong"),Tbr=o("encoder-decoder"),Mbr=o(" \u2014 "),KQ=a("a"),Ebr=o("TFEncoderDecoderModel"),Cbr=o(" (Encoder decoder model)"),wbr=l(),a4=a("li"),kve=a("strong"),Abr=o("led"),ybr=o(" \u2014 "),ZQ=a("a"),Lbr=o("TFLEDForConditionalGeneration"),xbr=o(" (LED model)"),$br=l(),n4=a("li"),Sve=a("strong"),kbr=o("marian"),Sbr=o(" \u2014 "),eH=a("a"),Rbr=o("TFMarianMTModel"),Bbr=o(" (Marian model)"),Pbr=l(),s4=a("li"),Rve=a("strong"),Ibr=o("mbart"),qbr=o(" \u2014 "),oH=a("a"),Nbr=o("TFMBartForConditionalGeneration"),jbr=o(" (mBART model)"),Dbr=l(),l4=a("li"),Bve=a("strong"),Gbr=o("mt5"),Obr=o(" \u2014 "),rH=a("a"),Vbr=o("TFMT5ForConditionalGeneration"),Xbr=o(" (mT5 model)"),zbr=l(),i4=a("li"),Pve=a("strong"),Wbr=o("pegasus"),Qbr=o(" \u2014 "),tH=a("a"),Hbr=o("TFPegasusForConditionalGeneration"),Ubr=o(" (Pegasus model)"),Jbr=l(),d4=a("li"),Ive=a("strong"),Ybr=o("t5"),Kbr=o(" \u2014 "),aH=a("a"),Zbr=o("TFT5ForConditionalGeneration"),evr=o(" (T5 model)"),ovr=l(),F(c4.$$.fragment),FNe=l(),ac=a("h2"),f4=a("a"),qve=a("span"),F(A8.$$.fragment),rvr=l(),Nve=a("span"),tvr=o("TFAutoModelForSequenceClassification"),TNe=l(),tr=a("div"),F(y8.$$.fragment),avr=l(),nc=a("p"),nvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nH=a("a"),svr=o("from_pretrained()"),lvr=o(" class method or the "),sH=a("a"),ivr=o("from_config()"),dvr=o(` class
method.`),cvr=l(),L8=a("p"),fvr=o("This class cannot be instantiated directly using "),jve=a("code"),mvr=o("__init__()"),gvr=o(" (throws an error)."),hvr=l(),Rt=a("div"),F(x8.$$.fragment),pvr=l(),Dve=a("p"),_vr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uvr=l(),sc=a("p"),bvr=o(`Note:
Loading a model from its configuration file does `),Gve=a("strong"),vvr=o("not"),Fvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),Tvr=o("from_pretrained()"),Mvr=o(" to load the model weights."),Evr=l(),F(m4.$$.fragment),Cvr=l(),kr=a("div"),F($8.$$.fragment),wvr=l(),Ove=a("p"),Avr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yvr=l(),nn=a("p"),Lvr=o("The model class to instantiate is selected based on the "),Vve=a("code"),xvr=o("model_type"),$vr=o(` property of the config object (either
passed as an argument or loaded from `),Xve=a("code"),kvr=o("pretrained_model_name_or_path"),Svr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=a("code"),Rvr=o("pretrained_model_name_or_path"),Bvr=o(":"),Pvr=l(),ee=a("ul"),g4=a("li"),Wve=a("strong"),Ivr=o("albert"),qvr=o(" \u2014 "),iH=a("a"),Nvr=o("TFAlbertForSequenceClassification"),jvr=o(" (ALBERT model)"),Dvr=l(),h4=a("li"),Qve=a("strong"),Gvr=o("bert"),Ovr=o(" \u2014 "),dH=a("a"),Vvr=o("TFBertForSequenceClassification"),Xvr=o(" (BERT model)"),zvr=l(),p4=a("li"),Hve=a("strong"),Wvr=o("camembert"),Qvr=o(" \u2014 "),cH=a("a"),Hvr=o("TFCamembertForSequenceClassification"),Uvr=o(" (CamemBERT model)"),Jvr=l(),_4=a("li"),Uve=a("strong"),Yvr=o("convbert"),Kvr=o(" \u2014 "),fH=a("a"),Zvr=o("TFConvBertForSequenceClassification"),eFr=o(" (ConvBERT model)"),oFr=l(),u4=a("li"),Jve=a("strong"),rFr=o("ctrl"),tFr=o(" \u2014 "),mH=a("a"),aFr=o("TFCTRLForSequenceClassification"),nFr=o(" (CTRL model)"),sFr=l(),b4=a("li"),Yve=a("strong"),lFr=o("deberta"),iFr=o(" \u2014 "),gH=a("a"),dFr=o("TFDebertaForSequenceClassification"),cFr=o(" (DeBERTa model)"),fFr=l(),v4=a("li"),Kve=a("strong"),mFr=o("deberta-v2"),gFr=o(" \u2014 "),hH=a("a"),hFr=o("TFDebertaV2ForSequenceClassification"),pFr=o(" (DeBERTa-v2 model)"),_Fr=l(),F4=a("li"),Zve=a("strong"),uFr=o("distilbert"),bFr=o(" \u2014 "),pH=a("a"),vFr=o("TFDistilBertForSequenceClassification"),FFr=o(" (DistilBERT model)"),TFr=l(),T4=a("li"),eFe=a("strong"),MFr=o("electra"),EFr=o(" \u2014 "),_H=a("a"),CFr=o("TFElectraForSequenceClassification"),wFr=o(" (ELECTRA model)"),AFr=l(),M4=a("li"),oFe=a("strong"),yFr=o("flaubert"),LFr=o(" \u2014 "),uH=a("a"),xFr=o("TFFlaubertForSequenceClassification"),$Fr=o(" (FlauBERT model)"),kFr=l(),E4=a("li"),rFe=a("strong"),SFr=o("funnel"),RFr=o(" \u2014 "),bH=a("a"),BFr=o("TFFunnelForSequenceClassification"),PFr=o(" (Funnel Transformer model)"),IFr=l(),C4=a("li"),tFe=a("strong"),qFr=o("gpt2"),NFr=o(" \u2014 "),vH=a("a"),jFr=o("TFGPT2ForSequenceClassification"),DFr=o(" (OpenAI GPT-2 model)"),GFr=l(),w4=a("li"),aFe=a("strong"),OFr=o("gptj"),VFr=o(" \u2014 "),FH=a("a"),XFr=o("TFGPTJForSequenceClassification"),zFr=o(" (GPT-J model)"),WFr=l(),A4=a("li"),nFe=a("strong"),QFr=o("layoutlm"),HFr=o(" \u2014 "),TH=a("a"),UFr=o("TFLayoutLMForSequenceClassification"),JFr=o(" (LayoutLM model)"),YFr=l(),y4=a("li"),sFe=a("strong"),KFr=o("longformer"),ZFr=o(" \u2014 "),MH=a("a"),e0r=o("TFLongformerForSequenceClassification"),o0r=o(" (Longformer model)"),r0r=l(),L4=a("li"),lFe=a("strong"),t0r=o("mobilebert"),a0r=o(" \u2014 "),EH=a("a"),n0r=o("TFMobileBertForSequenceClassification"),s0r=o(" (MobileBERT model)"),l0r=l(),x4=a("li"),iFe=a("strong"),i0r=o("mpnet"),d0r=o(" \u2014 "),CH=a("a"),c0r=o("TFMPNetForSequenceClassification"),f0r=o(" (MPNet model)"),m0r=l(),$4=a("li"),dFe=a("strong"),g0r=o("openai-gpt"),h0r=o(" \u2014 "),wH=a("a"),p0r=o("TFOpenAIGPTForSequenceClassification"),_0r=o(" (OpenAI GPT model)"),u0r=l(),k4=a("li"),cFe=a("strong"),b0r=o("rembert"),v0r=o(" \u2014 "),AH=a("a"),F0r=o("TFRemBertForSequenceClassification"),T0r=o(" (RemBERT model)"),M0r=l(),S4=a("li"),fFe=a("strong"),E0r=o("roberta"),C0r=o(" \u2014 "),yH=a("a"),w0r=o("TFRobertaForSequenceClassification"),A0r=o(" (RoBERTa model)"),y0r=l(),R4=a("li"),mFe=a("strong"),L0r=o("roformer"),x0r=o(" \u2014 "),LH=a("a"),$0r=o("TFRoFormerForSequenceClassification"),k0r=o(" (RoFormer model)"),S0r=l(),B4=a("li"),gFe=a("strong"),R0r=o("tapas"),B0r=o(" \u2014 "),xH=a("a"),P0r=o("TFTapasForSequenceClassification"),I0r=o(" (TAPAS model)"),q0r=l(),P4=a("li"),hFe=a("strong"),N0r=o("transfo-xl"),j0r=o(" \u2014 "),$H=a("a"),D0r=o("TFTransfoXLForSequenceClassification"),G0r=o(" (Transformer-XL model)"),O0r=l(),I4=a("li"),pFe=a("strong"),V0r=o("xlm"),X0r=o(" \u2014 "),kH=a("a"),z0r=o("TFXLMForSequenceClassification"),W0r=o(" (XLM model)"),Q0r=l(),q4=a("li"),_Fe=a("strong"),H0r=o("xlm-roberta"),U0r=o(" \u2014 "),SH=a("a"),J0r=o("TFXLMRobertaForSequenceClassification"),Y0r=o(" (XLM-RoBERTa model)"),K0r=l(),N4=a("li"),uFe=a("strong"),Z0r=o("xlnet"),eTr=o(" \u2014 "),RH=a("a"),oTr=o("TFXLNetForSequenceClassification"),rTr=o(" (XLNet model)"),tTr=l(),F(j4.$$.fragment),MNe=l(),lc=a("h2"),D4=a("a"),bFe=a("span"),F(k8.$$.fragment),aTr=l(),vFe=a("span"),nTr=o("TFAutoModelForMultipleChoice"),ENe=l(),ar=a("div"),F(S8.$$.fragment),sTr=l(),ic=a("p"),lTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BH=a("a"),iTr=o("from_pretrained()"),dTr=o(" class method or the "),PH=a("a"),cTr=o("from_config()"),fTr=o(` class
method.`),mTr=l(),R8=a("p"),gTr=o("This class cannot be instantiated directly using "),FFe=a("code"),hTr=o("__init__()"),pTr=o(" (throws an error)."),_Tr=l(),Bt=a("div"),F(B8.$$.fragment),uTr=l(),TFe=a("p"),bTr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vTr=l(),dc=a("p"),FTr=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),TTr=o("not"),MTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),ETr=o("from_pretrained()"),CTr=o(" to load the model weights."),wTr=l(),F(G4.$$.fragment),ATr=l(),Sr=a("div"),F(P8.$$.fragment),yTr=l(),EFe=a("p"),LTr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xTr=l(),sn=a("p"),$Tr=o("The model class to instantiate is selected based on the "),CFe=a("code"),kTr=o("model_type"),STr=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),RTr=o("pretrained_model_name_or_path"),BTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),PTr=o("pretrained_model_name_or_path"),ITr=o(":"),qTr=l(),he=a("ul"),O4=a("li"),yFe=a("strong"),NTr=o("albert"),jTr=o(" \u2014 "),qH=a("a"),DTr=o("TFAlbertForMultipleChoice"),GTr=o(" (ALBERT model)"),OTr=l(),V4=a("li"),LFe=a("strong"),VTr=o("bert"),XTr=o(" \u2014 "),NH=a("a"),zTr=o("TFBertForMultipleChoice"),WTr=o(" (BERT model)"),QTr=l(),X4=a("li"),xFe=a("strong"),HTr=o("camembert"),UTr=o(" \u2014 "),jH=a("a"),JTr=o("TFCamembertForMultipleChoice"),YTr=o(" (CamemBERT model)"),KTr=l(),z4=a("li"),$Fe=a("strong"),ZTr=o("convbert"),e7r=o(" \u2014 "),DH=a("a"),o7r=o("TFConvBertForMultipleChoice"),r7r=o(" (ConvBERT model)"),t7r=l(),W4=a("li"),kFe=a("strong"),a7r=o("distilbert"),n7r=o(" \u2014 "),GH=a("a"),s7r=o("TFDistilBertForMultipleChoice"),l7r=o(" (DistilBERT model)"),i7r=l(),Q4=a("li"),SFe=a("strong"),d7r=o("electra"),c7r=o(" \u2014 "),OH=a("a"),f7r=o("TFElectraForMultipleChoice"),m7r=o(" (ELECTRA model)"),g7r=l(),H4=a("li"),RFe=a("strong"),h7r=o("flaubert"),p7r=o(" \u2014 "),VH=a("a"),_7r=o("TFFlaubertForMultipleChoice"),u7r=o(" (FlauBERT model)"),b7r=l(),U4=a("li"),BFe=a("strong"),v7r=o("funnel"),F7r=o(" \u2014 "),XH=a("a"),T7r=o("TFFunnelForMultipleChoice"),M7r=o(" (Funnel Transformer model)"),E7r=l(),J4=a("li"),PFe=a("strong"),C7r=o("longformer"),w7r=o(" \u2014 "),zH=a("a"),A7r=o("TFLongformerForMultipleChoice"),y7r=o(" (Longformer model)"),L7r=l(),Y4=a("li"),IFe=a("strong"),x7r=o("mobilebert"),$7r=o(" \u2014 "),WH=a("a"),k7r=o("TFMobileBertForMultipleChoice"),S7r=o(" (MobileBERT model)"),R7r=l(),K4=a("li"),qFe=a("strong"),B7r=o("mpnet"),P7r=o(" \u2014 "),QH=a("a"),I7r=o("TFMPNetForMultipleChoice"),q7r=o(" (MPNet model)"),N7r=l(),Z4=a("li"),NFe=a("strong"),j7r=o("rembert"),D7r=o(" \u2014 "),HH=a("a"),G7r=o("TFRemBertForMultipleChoice"),O7r=o(" (RemBERT model)"),V7r=l(),eE=a("li"),jFe=a("strong"),X7r=o("roberta"),z7r=o(" \u2014 "),UH=a("a"),W7r=o("TFRobertaForMultipleChoice"),Q7r=o(" (RoBERTa model)"),H7r=l(),oE=a("li"),DFe=a("strong"),U7r=o("roformer"),J7r=o(" \u2014 "),JH=a("a"),Y7r=o("TFRoFormerForMultipleChoice"),K7r=o(" (RoFormer model)"),Z7r=l(),rE=a("li"),GFe=a("strong"),eMr=o("xlm"),oMr=o(" \u2014 "),YH=a("a"),rMr=o("TFXLMForMultipleChoice"),tMr=o(" (XLM model)"),aMr=l(),tE=a("li"),OFe=a("strong"),nMr=o("xlm-roberta"),sMr=o(" \u2014 "),KH=a("a"),lMr=o("TFXLMRobertaForMultipleChoice"),iMr=o(" (XLM-RoBERTa model)"),dMr=l(),aE=a("li"),VFe=a("strong"),cMr=o("xlnet"),fMr=o(" \u2014 "),ZH=a("a"),mMr=o("TFXLNetForMultipleChoice"),gMr=o(" (XLNet model)"),hMr=l(),F(nE.$$.fragment),CNe=l(),cc=a("h2"),sE=a("a"),XFe=a("span"),F(I8.$$.fragment),pMr=l(),zFe=a("span"),_Mr=o("TFAutoModelForNextSentencePrediction"),wNe=l(),nr=a("div"),F(q8.$$.fragment),uMr=l(),fc=a("p"),bMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eU=a("a"),vMr=o("from_pretrained()"),FMr=o(" class method or the "),oU=a("a"),TMr=o("from_config()"),MMr=o(` class
method.`),EMr=l(),N8=a("p"),CMr=o("This class cannot be instantiated directly using "),WFe=a("code"),wMr=o("__init__()"),AMr=o(" (throws an error)."),yMr=l(),Pt=a("div"),F(j8.$$.fragment),LMr=l(),QFe=a("p"),xMr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Mr=l(),mc=a("p"),kMr=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),SMr=o("not"),RMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),BMr=o("from_pretrained()"),PMr=o(" to load the model weights."),IMr=l(),F(lE.$$.fragment),qMr=l(),Rr=a("div"),F(D8.$$.fragment),NMr=l(),UFe=a("p"),jMr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DMr=l(),ln=a("p"),GMr=o("The model class to instantiate is selected based on the "),JFe=a("code"),OMr=o("model_type"),VMr=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),XMr=o("pretrained_model_name_or_path"),zMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),WMr=o("pretrained_model_name_or_path"),QMr=o(":"),HMr=l(),G8=a("ul"),iE=a("li"),ZFe=a("strong"),UMr=o("bert"),JMr=o(" \u2014 "),tU=a("a"),YMr=o("TFBertForNextSentencePrediction"),KMr=o(" (BERT model)"),ZMr=l(),dE=a("li"),e0e=a("strong"),e4r=o("mobilebert"),o4r=o(" \u2014 "),aU=a("a"),r4r=o("TFMobileBertForNextSentencePrediction"),t4r=o(" (MobileBERT model)"),a4r=l(),F(cE.$$.fragment),ANe=l(),gc=a("h2"),fE=a("a"),o0e=a("span"),F(O8.$$.fragment),n4r=l(),r0e=a("span"),s4r=o("TFAutoModelForTableQuestionAnswering"),yNe=l(),sr=a("div"),F(V8.$$.fragment),l4r=l(),hc=a("p"),i4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nU=a("a"),d4r=o("from_pretrained()"),c4r=o(" class method or the "),sU=a("a"),f4r=o("from_config()"),m4r=o(` class
method.`),g4r=l(),X8=a("p"),h4r=o("This class cannot be instantiated directly using "),t0e=a("code"),p4r=o("__init__()"),_4r=o(" (throws an error)."),u4r=l(),It=a("div"),F(z8.$$.fragment),b4r=l(),a0e=a("p"),v4r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),F4r=l(),pc=a("p"),T4r=o(`Note:
Loading a model from its configuration file does `),n0e=a("strong"),M4r=o("not"),E4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),C4r=o("from_pretrained()"),w4r=o(" to load the model weights."),A4r=l(),F(mE.$$.fragment),y4r=l(),Br=a("div"),F(W8.$$.fragment),L4r=l(),s0e=a("p"),x4r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$4r=l(),dn=a("p"),k4r=o("The model class to instantiate is selected based on the "),l0e=a("code"),S4r=o("model_type"),R4r=o(` property of the config object (either
passed as an argument or loaded from `),i0e=a("code"),B4r=o("pretrained_model_name_or_path"),P4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=a("code"),I4r=o("pretrained_model_name_or_path"),q4r=o(":"),N4r=l(),c0e=a("ul"),gE=a("li"),f0e=a("strong"),j4r=o("tapas"),D4r=o(" \u2014 "),iU=a("a"),G4r=o("TFTapasForQuestionAnswering"),O4r=o(" (TAPAS model)"),V4r=l(),F(hE.$$.fragment),LNe=l(),_c=a("h2"),pE=a("a"),m0e=a("span"),F(Q8.$$.fragment),X4r=l(),g0e=a("span"),z4r=o("TFAutoModelForTokenClassification"),xNe=l(),lr=a("div"),F(H8.$$.fragment),W4r=l(),uc=a("p"),Q4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dU=a("a"),H4r=o("from_pretrained()"),U4r=o(" class method or the "),cU=a("a"),J4r=o("from_config()"),Y4r=o(` class
method.`),K4r=l(),U8=a("p"),Z4r=o("This class cannot be instantiated directly using "),h0e=a("code"),eEr=o("__init__()"),oEr=o(" (throws an error)."),rEr=l(),qt=a("div"),F(J8.$$.fragment),tEr=l(),p0e=a("p"),aEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nEr=l(),bc=a("p"),sEr=o(`Note:
Loading a model from its configuration file does `),_0e=a("strong"),lEr=o("not"),iEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),dEr=o("from_pretrained()"),cEr=o(" to load the model weights."),fEr=l(),F(_E.$$.fragment),mEr=l(),Pr=a("div"),F(Y8.$$.fragment),gEr=l(),u0e=a("p"),hEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pEr=l(),cn=a("p"),_Er=o("The model class to instantiate is selected based on the "),b0e=a("code"),uEr=o("model_type"),bEr=o(` property of the config object (either
passed as an argument or loaded from `),v0e=a("code"),vEr=o("pretrained_model_name_or_path"),FEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=a("code"),TEr=o("pretrained_model_name_or_path"),MEr=o(":"),EEr=l(),de=a("ul"),uE=a("li"),T0e=a("strong"),CEr=o("albert"),wEr=o(" \u2014 "),mU=a("a"),AEr=o("TFAlbertForTokenClassification"),yEr=o(" (ALBERT model)"),LEr=l(),bE=a("li"),M0e=a("strong"),xEr=o("bert"),$Er=o(" \u2014 "),gU=a("a"),kEr=o("TFBertForTokenClassification"),SEr=o(" (BERT model)"),REr=l(),vE=a("li"),E0e=a("strong"),BEr=o("camembert"),PEr=o(" \u2014 "),hU=a("a"),IEr=o("TFCamembertForTokenClassification"),qEr=o(" (CamemBERT model)"),NEr=l(),FE=a("li"),C0e=a("strong"),jEr=o("convbert"),DEr=o(" \u2014 "),pU=a("a"),GEr=o("TFConvBertForTokenClassification"),OEr=o(" (ConvBERT model)"),VEr=l(),TE=a("li"),w0e=a("strong"),XEr=o("deberta"),zEr=o(" \u2014 "),_U=a("a"),WEr=o("TFDebertaForTokenClassification"),QEr=o(" (DeBERTa model)"),HEr=l(),ME=a("li"),A0e=a("strong"),UEr=o("deberta-v2"),JEr=o(" \u2014 "),uU=a("a"),YEr=o("TFDebertaV2ForTokenClassification"),KEr=o(" (DeBERTa-v2 model)"),ZEr=l(),EE=a("li"),y0e=a("strong"),eCr=o("distilbert"),oCr=o(" \u2014 "),bU=a("a"),rCr=o("TFDistilBertForTokenClassification"),tCr=o(" (DistilBERT model)"),aCr=l(),CE=a("li"),L0e=a("strong"),nCr=o("electra"),sCr=o(" \u2014 "),vU=a("a"),lCr=o("TFElectraForTokenClassification"),iCr=o(" (ELECTRA model)"),dCr=l(),wE=a("li"),x0e=a("strong"),cCr=o("flaubert"),fCr=o(" \u2014 "),FU=a("a"),mCr=o("TFFlaubertForTokenClassification"),gCr=o(" (FlauBERT model)"),hCr=l(),AE=a("li"),$0e=a("strong"),pCr=o("funnel"),_Cr=o(" \u2014 "),TU=a("a"),uCr=o("TFFunnelForTokenClassification"),bCr=o(" (Funnel Transformer model)"),vCr=l(),yE=a("li"),k0e=a("strong"),FCr=o("layoutlm"),TCr=o(" \u2014 "),MU=a("a"),MCr=o("TFLayoutLMForTokenClassification"),ECr=o(" (LayoutLM model)"),CCr=l(),LE=a("li"),S0e=a("strong"),wCr=o("longformer"),ACr=o(" \u2014 "),EU=a("a"),yCr=o("TFLongformerForTokenClassification"),LCr=o(" (Longformer model)"),xCr=l(),xE=a("li"),R0e=a("strong"),$Cr=o("mobilebert"),kCr=o(" \u2014 "),CU=a("a"),SCr=o("TFMobileBertForTokenClassification"),RCr=o(" (MobileBERT model)"),BCr=l(),$E=a("li"),B0e=a("strong"),PCr=o("mpnet"),ICr=o(" \u2014 "),wU=a("a"),qCr=o("TFMPNetForTokenClassification"),NCr=o(" (MPNet model)"),jCr=l(),kE=a("li"),P0e=a("strong"),DCr=o("rembert"),GCr=o(" \u2014 "),AU=a("a"),OCr=o("TFRemBertForTokenClassification"),VCr=o(" (RemBERT model)"),XCr=l(),SE=a("li"),I0e=a("strong"),zCr=o("roberta"),WCr=o(" \u2014 "),yU=a("a"),QCr=o("TFRobertaForTokenClassification"),HCr=o(" (RoBERTa model)"),UCr=l(),RE=a("li"),q0e=a("strong"),JCr=o("roformer"),YCr=o(" \u2014 "),LU=a("a"),KCr=o("TFRoFormerForTokenClassification"),ZCr=o(" (RoFormer model)"),e5r=l(),BE=a("li"),N0e=a("strong"),o5r=o("xlm"),r5r=o(" \u2014 "),xU=a("a"),t5r=o("TFXLMForTokenClassification"),a5r=o(" (XLM model)"),n5r=l(),PE=a("li"),j0e=a("strong"),s5r=o("xlm-roberta"),l5r=o(" \u2014 "),$U=a("a"),i5r=o("TFXLMRobertaForTokenClassification"),d5r=o(" (XLM-RoBERTa model)"),c5r=l(),IE=a("li"),D0e=a("strong"),f5r=o("xlnet"),m5r=o(" \u2014 "),kU=a("a"),g5r=o("TFXLNetForTokenClassification"),h5r=o(" (XLNet model)"),p5r=l(),F(qE.$$.fragment),$Ne=l(),vc=a("h2"),NE=a("a"),G0e=a("span"),F(K8.$$.fragment),_5r=l(),O0e=a("span"),u5r=o("TFAutoModelForQuestionAnswering"),kNe=l(),ir=a("div"),F(Z8.$$.fragment),b5r=l(),Fc=a("p"),v5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SU=a("a"),F5r=o("from_pretrained()"),T5r=o(" class method or the "),RU=a("a"),M5r=o("from_config()"),E5r=o(` class
method.`),C5r=l(),e9=a("p"),w5r=o("This class cannot be instantiated directly using "),V0e=a("code"),A5r=o("__init__()"),y5r=o(" (throws an error)."),L5r=l(),Nt=a("div"),F(o9.$$.fragment),x5r=l(),X0e=a("p"),$5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),k5r=l(),Tc=a("p"),S5r=o(`Note:
Loading a model from its configuration file does `),z0e=a("strong"),R5r=o("not"),B5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=a("a"),P5r=o("from_pretrained()"),I5r=o(" to load the model weights."),q5r=l(),F(jE.$$.fragment),N5r=l(),Ir=a("div"),F(r9.$$.fragment),j5r=l(),W0e=a("p"),D5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G5r=l(),fn=a("p"),O5r=o("The model class to instantiate is selected based on the "),Q0e=a("code"),V5r=o("model_type"),X5r=o(` property of the config object (either
passed as an argument or loaded from `),H0e=a("code"),z5r=o("pretrained_model_name_or_path"),W5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=a("code"),Q5r=o("pretrained_model_name_or_path"),H5r=o(":"),U5r=l(),ce=a("ul"),DE=a("li"),J0e=a("strong"),J5r=o("albert"),Y5r=o(" \u2014 "),PU=a("a"),K5r=o("TFAlbertForQuestionAnswering"),Z5r=o(" (ALBERT model)"),e3r=l(),GE=a("li"),Y0e=a("strong"),o3r=o("bert"),r3r=o(" \u2014 "),IU=a("a"),t3r=o("TFBertForQuestionAnswering"),a3r=o(" (BERT model)"),n3r=l(),OE=a("li"),K0e=a("strong"),s3r=o("camembert"),l3r=o(" \u2014 "),qU=a("a"),i3r=o("TFCamembertForQuestionAnswering"),d3r=o(" (CamemBERT model)"),c3r=l(),VE=a("li"),Z0e=a("strong"),f3r=o("convbert"),m3r=o(" \u2014 "),NU=a("a"),g3r=o("TFConvBertForQuestionAnswering"),h3r=o(" (ConvBERT model)"),p3r=l(),XE=a("li"),eTe=a("strong"),_3r=o("deberta"),u3r=o(" \u2014 "),jU=a("a"),b3r=o("TFDebertaForQuestionAnswering"),v3r=o(" (DeBERTa model)"),F3r=l(),zE=a("li"),oTe=a("strong"),T3r=o("deberta-v2"),M3r=o(" \u2014 "),DU=a("a"),E3r=o("TFDebertaV2ForQuestionAnswering"),C3r=o(" (DeBERTa-v2 model)"),w3r=l(),WE=a("li"),rTe=a("strong"),A3r=o("distilbert"),y3r=o(" \u2014 "),GU=a("a"),L3r=o("TFDistilBertForQuestionAnswering"),x3r=o(" (DistilBERT model)"),$3r=l(),QE=a("li"),tTe=a("strong"),k3r=o("electra"),S3r=o(" \u2014 "),OU=a("a"),R3r=o("TFElectraForQuestionAnswering"),B3r=o(" (ELECTRA model)"),P3r=l(),HE=a("li"),aTe=a("strong"),I3r=o("flaubert"),q3r=o(" \u2014 "),VU=a("a"),N3r=o("TFFlaubertForQuestionAnsweringSimple"),j3r=o(" (FlauBERT model)"),D3r=l(),UE=a("li"),nTe=a("strong"),G3r=o("funnel"),O3r=o(" \u2014 "),XU=a("a"),V3r=o("TFFunnelForQuestionAnswering"),X3r=o(" (Funnel Transformer model)"),z3r=l(),JE=a("li"),sTe=a("strong"),W3r=o("gptj"),Q3r=o(" \u2014 "),zU=a("a"),H3r=o("TFGPTJForQuestionAnswering"),U3r=o(" (GPT-J model)"),J3r=l(),YE=a("li"),lTe=a("strong"),Y3r=o("longformer"),K3r=o(" \u2014 "),WU=a("a"),Z3r=o("TFLongformerForQuestionAnswering"),ewr=o(" (Longformer model)"),owr=l(),KE=a("li"),iTe=a("strong"),rwr=o("mobilebert"),twr=o(" \u2014 "),QU=a("a"),awr=o("TFMobileBertForQuestionAnswering"),nwr=o(" (MobileBERT model)"),swr=l(),ZE=a("li"),dTe=a("strong"),lwr=o("mpnet"),iwr=o(" \u2014 "),HU=a("a"),dwr=o("TFMPNetForQuestionAnswering"),cwr=o(" (MPNet model)"),fwr=l(),eC=a("li"),cTe=a("strong"),mwr=o("rembert"),gwr=o(" \u2014 "),UU=a("a"),hwr=o("TFRemBertForQuestionAnswering"),pwr=o(" (RemBERT model)"),_wr=l(),oC=a("li"),fTe=a("strong"),uwr=o("roberta"),bwr=o(" \u2014 "),JU=a("a"),vwr=o("TFRobertaForQuestionAnswering"),Fwr=o(" (RoBERTa model)"),Twr=l(),rC=a("li"),mTe=a("strong"),Mwr=o("roformer"),Ewr=o(" \u2014 "),YU=a("a"),Cwr=o("TFRoFormerForQuestionAnswering"),wwr=o(" (RoFormer model)"),Awr=l(),tC=a("li"),gTe=a("strong"),ywr=o("xlm"),Lwr=o(" \u2014 "),KU=a("a"),xwr=o("TFXLMForQuestionAnsweringSimple"),$wr=o(" (XLM model)"),kwr=l(),aC=a("li"),hTe=a("strong"),Swr=o("xlm-roberta"),Rwr=o(" \u2014 "),ZU=a("a"),Bwr=o("TFXLMRobertaForQuestionAnswering"),Pwr=o(" (XLM-RoBERTa model)"),Iwr=l(),nC=a("li"),pTe=a("strong"),qwr=o("xlnet"),Nwr=o(" \u2014 "),eJ=a("a"),jwr=o("TFXLNetForQuestionAnsweringSimple"),Dwr=o(" (XLNet model)"),Gwr=l(),F(sC.$$.fragment),SNe=l(),Mc=a("h2"),lC=a("a"),_Te=a("span"),F(t9.$$.fragment),Owr=l(),uTe=a("span"),Vwr=o("TFAutoModelForVision2Seq"),RNe=l(),dr=a("div"),F(a9.$$.fragment),Xwr=l(),Ec=a("p"),zwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oJ=a("a"),Wwr=o("from_pretrained()"),Qwr=o(" class method or the "),rJ=a("a"),Hwr=o("from_config()"),Uwr=o(` class
method.`),Jwr=l(),n9=a("p"),Ywr=o("This class cannot be instantiated directly using "),bTe=a("code"),Kwr=o("__init__()"),Zwr=o(" (throws an error)."),eAr=l(),jt=a("div"),F(s9.$$.fragment),oAr=l(),vTe=a("p"),rAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tAr=l(),Cc=a("p"),aAr=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),nAr=o("not"),sAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),lAr=o("from_pretrained()"),iAr=o(" to load the model weights."),dAr=l(),F(iC.$$.fragment),cAr=l(),qr=a("div"),F(l9.$$.fragment),fAr=l(),TTe=a("p"),mAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gAr=l(),mn=a("p"),hAr=o("The model class to instantiate is selected based on the "),MTe=a("code"),pAr=o("model_type"),_Ar=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),uAr=o("pretrained_model_name_or_path"),bAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),vAr=o("pretrained_model_name_or_path"),FAr=o(":"),TAr=l(),wTe=a("ul"),dC=a("li"),ATe=a("strong"),MAr=o("vision-encoder-decoder"),EAr=o(" \u2014 "),aJ=a("a"),CAr=o("TFVisionEncoderDecoderModel"),wAr=o(" (Vision Encoder decoder model)"),AAr=l(),F(cC.$$.fragment),BNe=l(),wc=a("h2"),fC=a("a"),yTe=a("span"),F(i9.$$.fragment),yAr=l(),LTe=a("span"),LAr=o("TFAutoModelForSpeechSeq2Seq"),PNe=l(),cr=a("div"),F(d9.$$.fragment),xAr=l(),Ac=a("p"),$Ar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nJ=a("a"),kAr=o("from_pretrained()"),SAr=o(" class method or the "),sJ=a("a"),RAr=o("from_config()"),BAr=o(` class
method.`),PAr=l(),c9=a("p"),IAr=o("This class cannot be instantiated directly using "),xTe=a("code"),qAr=o("__init__()"),NAr=o(" (throws an error)."),jAr=l(),Dt=a("div"),F(f9.$$.fragment),DAr=l(),$Te=a("p"),GAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),OAr=l(),yc=a("p"),VAr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),XAr=o("not"),zAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),WAr=o("from_pretrained()"),QAr=o(" to load the model weights."),HAr=l(),F(mC.$$.fragment),UAr=l(),Nr=a("div"),F(m9.$$.fragment),JAr=l(),STe=a("p"),YAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),KAr=l(),gn=a("p"),ZAr=o("The model class to instantiate is selected based on the "),RTe=a("code"),e6r=o("model_type"),o6r=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),r6r=o("pretrained_model_name_or_path"),t6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),a6r=o("pretrained_model_name_or_path"),n6r=o(":"),s6r=l(),ITe=a("ul"),gC=a("li"),qTe=a("strong"),l6r=o("speech_to_text"),i6r=o(" \u2014 "),iJ=a("a"),d6r=o("TFSpeech2TextForConditionalGeneration"),c6r=o(" (Speech2Text model)"),f6r=l(),F(hC.$$.fragment),INe=l(),Lc=a("h2"),pC=a("a"),NTe=a("span"),F(g9.$$.fragment),m6r=l(),jTe=a("span"),g6r=o("FlaxAutoModel"),qNe=l(),fr=a("div"),F(h9.$$.fragment),h6r=l(),xc=a("p"),p6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dJ=a("a"),_6r=o("from_pretrained()"),u6r=o(" class method or the "),cJ=a("a"),b6r=o("from_config()"),v6r=o(` class
method.`),F6r=l(),p9=a("p"),T6r=o("This class cannot be instantiated directly using "),DTe=a("code"),M6r=o("__init__()"),E6r=o(" (throws an error)."),C6r=l(),Gt=a("div"),F(_9.$$.fragment),w6r=l(),GTe=a("p"),A6r=o("Instantiates one of the base model classes of the library from a configuration."),y6r=l(),$c=a("p"),L6r=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),x6r=o("not"),$6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),k6r=o("from_pretrained()"),S6r=o(" to load the model weights."),R6r=l(),F(_C.$$.fragment),B6r=l(),jr=a("div"),F(u9.$$.fragment),P6r=l(),VTe=a("p"),I6r=o("Instantiate one of the base model classes of the library from a pretrained model."),q6r=l(),hn=a("p"),N6r=o("The model class to instantiate is selected based on the "),XTe=a("code"),j6r=o("model_type"),D6r=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),G6r=o("pretrained_model_name_or_path"),O6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),V6r=o("pretrained_model_name_or_path"),X6r=o(":"),z6r=l(),re=a("ul"),uC=a("li"),QTe=a("strong"),W6r=o("albert"),Q6r=o(" \u2014 "),mJ=a("a"),H6r=o("FlaxAlbertModel"),U6r=o(" (ALBERT model)"),J6r=l(),bC=a("li"),HTe=a("strong"),Y6r=o("bart"),K6r=o(" \u2014 "),gJ=a("a"),Z6r=o("FlaxBartModel"),eyr=o(" (BART model)"),oyr=l(),vC=a("li"),UTe=a("strong"),ryr=o("beit"),tyr=o(" \u2014 "),hJ=a("a"),ayr=o("FlaxBeitModel"),nyr=o(" (BEiT model)"),syr=l(),FC=a("li"),JTe=a("strong"),lyr=o("bert"),iyr=o(" \u2014 "),pJ=a("a"),dyr=o("FlaxBertModel"),cyr=o(" (BERT model)"),fyr=l(),TC=a("li"),YTe=a("strong"),myr=o("big_bird"),gyr=o(" \u2014 "),_J=a("a"),hyr=o("FlaxBigBirdModel"),pyr=o(" (BigBird model)"),_yr=l(),MC=a("li"),KTe=a("strong"),uyr=o("blenderbot"),byr=o(" \u2014 "),uJ=a("a"),vyr=o("FlaxBlenderbotModel"),Fyr=o(" (Blenderbot model)"),Tyr=l(),EC=a("li"),ZTe=a("strong"),Myr=o("blenderbot-small"),Eyr=o(" \u2014 "),bJ=a("a"),Cyr=o("FlaxBlenderbotSmallModel"),wyr=o(" (BlenderbotSmall model)"),Ayr=l(),CC=a("li"),e7e=a("strong"),yyr=o("clip"),Lyr=o(" \u2014 "),vJ=a("a"),xyr=o("FlaxCLIPModel"),$yr=o(" (CLIP model)"),kyr=l(),wC=a("li"),o7e=a("strong"),Syr=o("distilbert"),Ryr=o(" \u2014 "),FJ=a("a"),Byr=o("FlaxDistilBertModel"),Pyr=o(" (DistilBERT model)"),Iyr=l(),AC=a("li"),r7e=a("strong"),qyr=o("electra"),Nyr=o(" \u2014 "),TJ=a("a"),jyr=o("FlaxElectraModel"),Dyr=o(" (ELECTRA model)"),Gyr=l(),yC=a("li"),t7e=a("strong"),Oyr=o("gpt2"),Vyr=o(" \u2014 "),MJ=a("a"),Xyr=o("FlaxGPT2Model"),zyr=o(" (OpenAI GPT-2 model)"),Wyr=l(),LC=a("li"),a7e=a("strong"),Qyr=o("gpt_neo"),Hyr=o(" \u2014 "),EJ=a("a"),Uyr=o("FlaxGPTNeoModel"),Jyr=o(" (GPT Neo model)"),Yyr=l(),xC=a("li"),n7e=a("strong"),Kyr=o("gptj"),Zyr=o(" \u2014 "),CJ=a("a"),eLr=o("FlaxGPTJModel"),oLr=o(" (GPT-J model)"),rLr=l(),$C=a("li"),s7e=a("strong"),tLr=o("marian"),aLr=o(" \u2014 "),wJ=a("a"),nLr=o("FlaxMarianModel"),sLr=o(" (Marian model)"),lLr=l(),kC=a("li"),l7e=a("strong"),iLr=o("mbart"),dLr=o(" \u2014 "),AJ=a("a"),cLr=o("FlaxMBartModel"),fLr=o(" (mBART model)"),mLr=l(),SC=a("li"),i7e=a("strong"),gLr=o("mt5"),hLr=o(" \u2014 "),yJ=a("a"),pLr=o("FlaxMT5Model"),_Lr=o(" (mT5 model)"),uLr=l(),RC=a("li"),d7e=a("strong"),bLr=o("pegasus"),vLr=o(" \u2014 "),LJ=a("a"),FLr=o("FlaxPegasusModel"),TLr=o(" (Pegasus model)"),MLr=l(),BC=a("li"),c7e=a("strong"),ELr=o("roberta"),CLr=o(" \u2014 "),xJ=a("a"),wLr=o("FlaxRobertaModel"),ALr=o(" (RoBERTa model)"),yLr=l(),PC=a("li"),f7e=a("strong"),LLr=o("roformer"),xLr=o(" \u2014 "),$J=a("a"),$Lr=o("FlaxRoFormerModel"),kLr=o(" (RoFormer model)"),SLr=l(),IC=a("li"),m7e=a("strong"),RLr=o("t5"),BLr=o(" \u2014 "),kJ=a("a"),PLr=o("FlaxT5Model"),ILr=o(" (T5 model)"),qLr=l(),qC=a("li"),g7e=a("strong"),NLr=o("vision-text-dual-encoder"),jLr=o(" \u2014 "),SJ=a("a"),DLr=o("FlaxVisionTextDualEncoderModel"),GLr=o(" (VisionTextDualEncoder model)"),OLr=l(),NC=a("li"),h7e=a("strong"),VLr=o("vit"),XLr=o(" \u2014 "),RJ=a("a"),zLr=o("FlaxViTModel"),WLr=o(" (ViT model)"),QLr=l(),jC=a("li"),p7e=a("strong"),HLr=o("wav2vec2"),ULr=o(" \u2014 "),BJ=a("a"),JLr=o("FlaxWav2Vec2Model"),YLr=o(" (Wav2Vec2 model)"),KLr=l(),DC=a("li"),_7e=a("strong"),ZLr=o("xglm"),e8r=o(" \u2014 "),PJ=a("a"),o8r=o("FlaxXGLMModel"),r8r=o(" (XGLM model)"),t8r=l(),GC=a("li"),u7e=a("strong"),a8r=o("xlm-roberta"),n8r=o(" \u2014 "),IJ=a("a"),s8r=o("FlaxXLMRobertaModel"),l8r=o(" (XLM-RoBERTa model)"),i8r=l(),F(OC.$$.fragment),NNe=l(),kc=a("h2"),VC=a("a"),b7e=a("span"),F(b9.$$.fragment),d8r=l(),v7e=a("span"),c8r=o("FlaxAutoModelForCausalLM"),jNe=l(),mr=a("div"),F(v9.$$.fragment),f8r=l(),Sc=a("p"),m8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qJ=a("a"),g8r=o("from_pretrained()"),h8r=o(" class method or the "),NJ=a("a"),p8r=o("from_config()"),_8r=o(` class
method.`),u8r=l(),F9=a("p"),b8r=o("This class cannot be instantiated directly using "),F7e=a("code"),v8r=o("__init__()"),F8r=o(" (throws an error)."),T8r=l(),Ot=a("div"),F(T9.$$.fragment),M8r=l(),T7e=a("p"),E8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C8r=l(),Rc=a("p"),w8r=o(`Note:
Loading a model from its configuration file does `),M7e=a("strong"),A8r=o("not"),y8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),L8r=o("from_pretrained()"),x8r=o(" to load the model weights."),$8r=l(),F(XC.$$.fragment),k8r=l(),Dr=a("div"),F(M9.$$.fragment),S8r=l(),E7e=a("p"),R8r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),B8r=l(),pn=a("p"),P8r=o("The model class to instantiate is selected based on the "),C7e=a("code"),I8r=o("model_type"),q8r=o(` property of the config object (either
passed as an argument or loaded from `),w7e=a("code"),N8r=o("pretrained_model_name_or_path"),j8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=a("code"),D8r=o("pretrained_model_name_or_path"),G8r=o(":"),O8r=l(),Re=a("ul"),zC=a("li"),y7e=a("strong"),V8r=o("bart"),X8r=o(" \u2014 "),DJ=a("a"),z8r=o("FlaxBartForCausalLM"),W8r=o(" (BART model)"),Q8r=l(),WC=a("li"),L7e=a("strong"),H8r=o("bert"),U8r=o(" \u2014 "),GJ=a("a"),J8r=o("FlaxBertForCausalLM"),Y8r=o(" (BERT model)"),K8r=l(),QC=a("li"),x7e=a("strong"),Z8r=o("big_bird"),e9r=o(" \u2014 "),OJ=a("a"),o9r=o("FlaxBigBirdForCausalLM"),r9r=o(" (BigBird model)"),t9r=l(),HC=a("li"),$7e=a("strong"),a9r=o("electra"),n9r=o(" \u2014 "),VJ=a("a"),s9r=o("FlaxElectraForCausalLM"),l9r=o(" (ELECTRA model)"),i9r=l(),UC=a("li"),k7e=a("strong"),d9r=o("gpt2"),c9r=o(" \u2014 "),XJ=a("a"),f9r=o("FlaxGPT2LMHeadModel"),m9r=o(" (OpenAI GPT-2 model)"),g9r=l(),JC=a("li"),S7e=a("strong"),h9r=o("gpt_neo"),p9r=o(" \u2014 "),zJ=a("a"),_9r=o("FlaxGPTNeoForCausalLM"),u9r=o(" (GPT Neo model)"),b9r=l(),YC=a("li"),R7e=a("strong"),v9r=o("gptj"),F9r=o(" \u2014 "),WJ=a("a"),T9r=o("FlaxGPTJForCausalLM"),M9r=o(" (GPT-J model)"),E9r=l(),KC=a("li"),B7e=a("strong"),C9r=o("roberta"),w9r=o(" \u2014 "),QJ=a("a"),A9r=o("FlaxRobertaForCausalLM"),y9r=o(" (RoBERTa model)"),L9r=l(),ZC=a("li"),P7e=a("strong"),x9r=o("xglm"),$9r=o(" \u2014 "),HJ=a("a"),k9r=o("FlaxXGLMForCausalLM"),S9r=o(" (XGLM model)"),R9r=l(),F(e5.$$.fragment),DNe=l(),Bc=a("h2"),o5=a("a"),I7e=a("span"),F(E9.$$.fragment),B9r=l(),q7e=a("span"),P9r=o("FlaxAutoModelForPreTraining"),GNe=l(),gr=a("div"),F(C9.$$.fragment),I9r=l(),Pc=a("p"),q9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UJ=a("a"),N9r=o("from_pretrained()"),j9r=o(" class method or the "),JJ=a("a"),D9r=o("from_config()"),G9r=o(` class
method.`),O9r=l(),w9=a("p"),V9r=o("This class cannot be instantiated directly using "),N7e=a("code"),X9r=o("__init__()"),z9r=o(" (throws an error)."),W9r=l(),Vt=a("div"),F(A9.$$.fragment),Q9r=l(),j7e=a("p"),H9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),U9r=l(),Ic=a("p"),J9r=o(`Note:
Loading a model from its configuration file does `),D7e=a("strong"),Y9r=o("not"),K9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),Z9r=o("from_pretrained()"),exr=o(" to load the model weights."),oxr=l(),F(r5.$$.fragment),rxr=l(),Gr=a("div"),F(y9.$$.fragment),txr=l(),G7e=a("p"),axr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nxr=l(),_n=a("p"),sxr=o("The model class to instantiate is selected based on the "),O7e=a("code"),lxr=o("model_type"),ixr=o(` property of the config object (either
passed as an argument or loaded from `),V7e=a("code"),dxr=o("pretrained_model_name_or_path"),cxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=a("code"),fxr=o("pretrained_model_name_or_path"),mxr=o(":"),gxr=l(),Me=a("ul"),t5=a("li"),z7e=a("strong"),hxr=o("albert"),pxr=o(" \u2014 "),KJ=a("a"),_xr=o("FlaxAlbertForPreTraining"),uxr=o(" (ALBERT model)"),bxr=l(),a5=a("li"),W7e=a("strong"),vxr=o("bart"),Fxr=o(" \u2014 "),ZJ=a("a"),Txr=o("FlaxBartForConditionalGeneration"),Mxr=o(" (BART model)"),Exr=l(),n5=a("li"),Q7e=a("strong"),Cxr=o("bert"),wxr=o(" \u2014 "),eY=a("a"),Axr=o("FlaxBertForPreTraining"),yxr=o(" (BERT model)"),Lxr=l(),s5=a("li"),H7e=a("strong"),xxr=o("big_bird"),$xr=o(" \u2014 "),oY=a("a"),kxr=o("FlaxBigBirdForPreTraining"),Sxr=o(" (BigBird model)"),Rxr=l(),l5=a("li"),U7e=a("strong"),Bxr=o("electra"),Pxr=o(" \u2014 "),rY=a("a"),Ixr=o("FlaxElectraForPreTraining"),qxr=o(" (ELECTRA model)"),Nxr=l(),i5=a("li"),J7e=a("strong"),jxr=o("mbart"),Dxr=o(" \u2014 "),tY=a("a"),Gxr=o("FlaxMBartForConditionalGeneration"),Oxr=o(" (mBART model)"),Vxr=l(),d5=a("li"),Y7e=a("strong"),Xxr=o("mt5"),zxr=o(" \u2014 "),aY=a("a"),Wxr=o("FlaxMT5ForConditionalGeneration"),Qxr=o(" (mT5 model)"),Hxr=l(),c5=a("li"),K7e=a("strong"),Uxr=o("roberta"),Jxr=o(" \u2014 "),nY=a("a"),Yxr=o("FlaxRobertaForMaskedLM"),Kxr=o(" (RoBERTa model)"),Zxr=l(),f5=a("li"),Z7e=a("strong"),e$r=o("roformer"),o$r=o(" \u2014 "),sY=a("a"),r$r=o("FlaxRoFormerForMaskedLM"),t$r=o(" (RoFormer model)"),a$r=l(),m5=a("li"),eMe=a("strong"),n$r=o("t5"),s$r=o(" \u2014 "),lY=a("a"),l$r=o("FlaxT5ForConditionalGeneration"),i$r=o(" (T5 model)"),d$r=l(),g5=a("li"),oMe=a("strong"),c$r=o("wav2vec2"),f$r=o(" \u2014 "),iY=a("a"),m$r=o("FlaxWav2Vec2ForPreTraining"),g$r=o(" (Wav2Vec2 model)"),h$r=l(),h5=a("li"),rMe=a("strong"),p$r=o("xlm-roberta"),_$r=o(" \u2014 "),dY=a("a"),u$r=o("FlaxXLMRobertaForMaskedLM"),b$r=o(" (XLM-RoBERTa model)"),v$r=l(),F(p5.$$.fragment),ONe=l(),qc=a("h2"),_5=a("a"),tMe=a("span"),F(L9.$$.fragment),F$r=l(),aMe=a("span"),T$r=o("FlaxAutoModelForMaskedLM"),VNe=l(),hr=a("div"),F(x9.$$.fragment),M$r=l(),Nc=a("p"),E$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cY=a("a"),C$r=o("from_pretrained()"),w$r=o(" class method or the "),fY=a("a"),A$r=o("from_config()"),y$r=o(` class
method.`),L$r=l(),$9=a("p"),x$r=o("This class cannot be instantiated directly using "),nMe=a("code"),$$r=o("__init__()"),k$r=o(" (throws an error)."),S$r=l(),Xt=a("div"),F(k9.$$.fragment),R$r=l(),sMe=a("p"),B$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P$r=l(),jc=a("p"),I$r=o(`Note:
Loading a model from its configuration file does `),lMe=a("strong"),q$r=o("not"),N$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),j$r=o("from_pretrained()"),D$r=o(" to load the model weights."),G$r=l(),F(u5.$$.fragment),O$r=l(),Or=a("div"),F(S9.$$.fragment),V$r=l(),iMe=a("p"),X$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z$r=l(),un=a("p"),W$r=o("The model class to instantiate is selected based on the "),dMe=a("code"),Q$r=o("model_type"),H$r=o(` property of the config object (either
passed as an argument or loaded from `),cMe=a("code"),U$r=o("pretrained_model_name_or_path"),J$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=a("code"),Y$r=o("pretrained_model_name_or_path"),K$r=o(":"),Z$r=l(),Le=a("ul"),b5=a("li"),mMe=a("strong"),ekr=o("albert"),okr=o(" \u2014 "),gY=a("a"),rkr=o("FlaxAlbertForMaskedLM"),tkr=o(" (ALBERT model)"),akr=l(),v5=a("li"),gMe=a("strong"),nkr=o("bart"),skr=o(" \u2014 "),hY=a("a"),lkr=o("FlaxBartForConditionalGeneration"),ikr=o(" (BART model)"),dkr=l(),F5=a("li"),hMe=a("strong"),ckr=o("bert"),fkr=o(" \u2014 "),pY=a("a"),mkr=o("FlaxBertForMaskedLM"),gkr=o(" (BERT model)"),hkr=l(),T5=a("li"),pMe=a("strong"),pkr=o("big_bird"),_kr=o(" \u2014 "),_Y=a("a"),ukr=o("FlaxBigBirdForMaskedLM"),bkr=o(" (BigBird model)"),vkr=l(),M5=a("li"),_Me=a("strong"),Fkr=o("distilbert"),Tkr=o(" \u2014 "),uY=a("a"),Mkr=o("FlaxDistilBertForMaskedLM"),Ekr=o(" (DistilBERT model)"),Ckr=l(),E5=a("li"),uMe=a("strong"),wkr=o("electra"),Akr=o(" \u2014 "),bY=a("a"),ykr=o("FlaxElectraForMaskedLM"),Lkr=o(" (ELECTRA model)"),xkr=l(),C5=a("li"),bMe=a("strong"),$kr=o("mbart"),kkr=o(" \u2014 "),vY=a("a"),Skr=o("FlaxMBartForConditionalGeneration"),Rkr=o(" (mBART model)"),Bkr=l(),w5=a("li"),vMe=a("strong"),Pkr=o("roberta"),Ikr=o(" \u2014 "),FY=a("a"),qkr=o("FlaxRobertaForMaskedLM"),Nkr=o(" (RoBERTa model)"),jkr=l(),A5=a("li"),FMe=a("strong"),Dkr=o("roformer"),Gkr=o(" \u2014 "),TY=a("a"),Okr=o("FlaxRoFormerForMaskedLM"),Vkr=o(" (RoFormer model)"),Xkr=l(),y5=a("li"),TMe=a("strong"),zkr=o("xlm-roberta"),Wkr=o(" \u2014 "),MY=a("a"),Qkr=o("FlaxXLMRobertaForMaskedLM"),Hkr=o(" (XLM-RoBERTa model)"),Ukr=l(),F(L5.$$.fragment),XNe=l(),Dc=a("h2"),x5=a("a"),MMe=a("span"),F(R9.$$.fragment),Jkr=l(),EMe=a("span"),Ykr=o("FlaxAutoModelForSeq2SeqLM"),zNe=l(),pr=a("div"),F(B9.$$.fragment),Kkr=l(),Gc=a("p"),Zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EY=a("a"),eSr=o("from_pretrained()"),oSr=o(" class method or the "),CY=a("a"),rSr=o("from_config()"),tSr=o(` class
method.`),aSr=l(),P9=a("p"),nSr=o("This class cannot be instantiated directly using "),CMe=a("code"),sSr=o("__init__()"),lSr=o(" (throws an error)."),iSr=l(),zt=a("div"),F(I9.$$.fragment),dSr=l(),wMe=a("p"),cSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fSr=l(),Oc=a("p"),mSr=o(`Note:
Loading a model from its configuration file does `),AMe=a("strong"),gSr=o("not"),hSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),pSr=o("from_pretrained()"),_Sr=o(" to load the model weights."),uSr=l(),F($5.$$.fragment),bSr=l(),Vr=a("div"),F(q9.$$.fragment),vSr=l(),yMe=a("p"),FSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),TSr=l(),bn=a("p"),MSr=o("The model class to instantiate is selected based on the "),LMe=a("code"),ESr=o("model_type"),CSr=o(` property of the config object (either
passed as an argument or loaded from `),xMe=a("code"),wSr=o("pretrained_model_name_or_path"),ASr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Me=a("code"),ySr=o("pretrained_model_name_or_path"),LSr=o(":"),xSr=l(),Be=a("ul"),k5=a("li"),kMe=a("strong"),$Sr=o("bart"),kSr=o(" \u2014 "),AY=a("a"),SSr=o("FlaxBartForConditionalGeneration"),RSr=o(" (BART model)"),BSr=l(),S5=a("li"),SMe=a("strong"),PSr=o("blenderbot"),ISr=o(" \u2014 "),yY=a("a"),qSr=o("FlaxBlenderbotForConditionalGeneration"),NSr=o(" (Blenderbot model)"),jSr=l(),R5=a("li"),RMe=a("strong"),DSr=o("blenderbot-small"),GSr=o(" \u2014 "),LY=a("a"),OSr=o("FlaxBlenderbotSmallForConditionalGeneration"),VSr=o(" (BlenderbotSmall model)"),XSr=l(),B5=a("li"),BMe=a("strong"),zSr=o("encoder-decoder"),WSr=o(" \u2014 "),xY=a("a"),QSr=o("FlaxEncoderDecoderModel"),HSr=o(" (Encoder decoder model)"),USr=l(),P5=a("li"),PMe=a("strong"),JSr=o("marian"),YSr=o(" \u2014 "),$Y=a("a"),KSr=o("FlaxMarianMTModel"),ZSr=o(" (Marian model)"),eRr=l(),I5=a("li"),IMe=a("strong"),oRr=o("mbart"),rRr=o(" \u2014 "),kY=a("a"),tRr=o("FlaxMBartForConditionalGeneration"),aRr=o(" (mBART model)"),nRr=l(),q5=a("li"),qMe=a("strong"),sRr=o("mt5"),lRr=o(" \u2014 "),SY=a("a"),iRr=o("FlaxMT5ForConditionalGeneration"),dRr=o(" (mT5 model)"),cRr=l(),N5=a("li"),NMe=a("strong"),fRr=o("pegasus"),mRr=o(" \u2014 "),RY=a("a"),gRr=o("FlaxPegasusForConditionalGeneration"),hRr=o(" (Pegasus model)"),pRr=l(),j5=a("li"),jMe=a("strong"),_Rr=o("t5"),uRr=o(" \u2014 "),BY=a("a"),bRr=o("FlaxT5ForConditionalGeneration"),vRr=o(" (T5 model)"),FRr=l(),F(D5.$$.fragment),WNe=l(),Vc=a("h2"),G5=a("a"),DMe=a("span"),F(N9.$$.fragment),TRr=l(),GMe=a("span"),MRr=o("FlaxAutoModelForSequenceClassification"),QNe=l(),_r=a("div"),F(j9.$$.fragment),ERr=l(),Xc=a("p"),CRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PY=a("a"),wRr=o("from_pretrained()"),ARr=o(" class method or the "),IY=a("a"),yRr=o("from_config()"),LRr=o(` class
method.`),xRr=l(),D9=a("p"),$Rr=o("This class cannot be instantiated directly using "),OMe=a("code"),kRr=o("__init__()"),SRr=o(" (throws an error)."),RRr=l(),Wt=a("div"),F(G9.$$.fragment),BRr=l(),VMe=a("p"),PRr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),IRr=l(),zc=a("p"),qRr=o(`Note:
Loading a model from its configuration file does `),XMe=a("strong"),NRr=o("not"),jRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),DRr=o("from_pretrained()"),GRr=o(" to load the model weights."),ORr=l(),F(O5.$$.fragment),VRr=l(),Xr=a("div"),F(O9.$$.fragment),XRr=l(),zMe=a("p"),zRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WRr=l(),vn=a("p"),QRr=o("The model class to instantiate is selected based on the "),WMe=a("code"),HRr=o("model_type"),URr=o(` property of the config object (either
passed as an argument or loaded from `),QMe=a("code"),JRr=o("pretrained_model_name_or_path"),YRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(":"),eBr=l(),xe=a("ul"),V5=a("li"),UMe=a("strong"),oBr=o("albert"),rBr=o(" \u2014 "),NY=a("a"),tBr=o("FlaxAlbertForSequenceClassification"),aBr=o(" (ALBERT model)"),nBr=l(),X5=a("li"),JMe=a("strong"),sBr=o("bart"),lBr=o(" \u2014 "),jY=a("a"),iBr=o("FlaxBartForSequenceClassification"),dBr=o(" (BART model)"),cBr=l(),z5=a("li"),YMe=a("strong"),fBr=o("bert"),mBr=o(" \u2014 "),DY=a("a"),gBr=o("FlaxBertForSequenceClassification"),hBr=o(" (BERT model)"),pBr=l(),W5=a("li"),KMe=a("strong"),_Br=o("big_bird"),uBr=o(" \u2014 "),GY=a("a"),bBr=o("FlaxBigBirdForSequenceClassification"),vBr=o(" (BigBird model)"),FBr=l(),Q5=a("li"),ZMe=a("strong"),TBr=o("distilbert"),MBr=o(" \u2014 "),OY=a("a"),EBr=o("FlaxDistilBertForSequenceClassification"),CBr=o(" (DistilBERT model)"),wBr=l(),H5=a("li"),e4e=a("strong"),ABr=o("electra"),yBr=o(" \u2014 "),VY=a("a"),LBr=o("FlaxElectraForSequenceClassification"),xBr=o(" (ELECTRA model)"),$Br=l(),U5=a("li"),o4e=a("strong"),kBr=o("mbart"),SBr=o(" \u2014 "),XY=a("a"),RBr=o("FlaxMBartForSequenceClassification"),BBr=o(" (mBART model)"),PBr=l(),J5=a("li"),r4e=a("strong"),IBr=o("roberta"),qBr=o(" \u2014 "),zY=a("a"),NBr=o("FlaxRobertaForSequenceClassification"),jBr=o(" (RoBERTa model)"),DBr=l(),Y5=a("li"),t4e=a("strong"),GBr=o("roformer"),OBr=o(" \u2014 "),WY=a("a"),VBr=o("FlaxRoFormerForSequenceClassification"),XBr=o(" (RoFormer model)"),zBr=l(),K5=a("li"),a4e=a("strong"),WBr=o("xlm-roberta"),QBr=o(" \u2014 "),QY=a("a"),HBr=o("FlaxXLMRobertaForSequenceClassification"),UBr=o(" (XLM-RoBERTa model)"),JBr=l(),F(Z5.$$.fragment),HNe=l(),Wc=a("h2"),e3=a("a"),n4e=a("span"),F(V9.$$.fragment),YBr=l(),s4e=a("span"),KBr=o("FlaxAutoModelForQuestionAnswering"),UNe=l(),ur=a("div"),F(X9.$$.fragment),ZBr=l(),Qc=a("p"),ePr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HY=a("a"),oPr=o("from_pretrained()"),rPr=o(" class method or the "),UY=a("a"),tPr=o("from_config()"),aPr=o(` class
method.`),nPr=l(),z9=a("p"),sPr=o("This class cannot be instantiated directly using "),l4e=a("code"),lPr=o("__init__()"),iPr=o(" (throws an error)."),dPr=l(),Qt=a("div"),F(W9.$$.fragment),cPr=l(),i4e=a("p"),fPr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mPr=l(),Hc=a("p"),gPr=o(`Note:
Loading a model from its configuration file does `),d4e=a("strong"),hPr=o("not"),pPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),_Pr=o("from_pretrained()"),uPr=o(" to load the model weights."),bPr=l(),F(o3.$$.fragment),vPr=l(),zr=a("div"),F(Q9.$$.fragment),FPr=l(),c4e=a("p"),TPr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MPr=l(),Fn=a("p"),EPr=o("The model class to instantiate is selected based on the "),f4e=a("code"),CPr=o("model_type"),wPr=o(` property of the config object (either
passed as an argument or loaded from `),m4e=a("code"),APr=o("pretrained_model_name_or_path"),yPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=a("code"),LPr=o("pretrained_model_name_or_path"),xPr=o(":"),$Pr=l(),$e=a("ul"),r3=a("li"),h4e=a("strong"),kPr=o("albert"),SPr=o(" \u2014 "),YY=a("a"),RPr=o("FlaxAlbertForQuestionAnswering"),BPr=o(" (ALBERT model)"),PPr=l(),t3=a("li"),p4e=a("strong"),IPr=o("bart"),qPr=o(" \u2014 "),KY=a("a"),NPr=o("FlaxBartForQuestionAnswering"),jPr=o(" (BART model)"),DPr=l(),a3=a("li"),_4e=a("strong"),GPr=o("bert"),OPr=o(" \u2014 "),ZY=a("a"),VPr=o("FlaxBertForQuestionAnswering"),XPr=o(" (BERT model)"),zPr=l(),n3=a("li"),u4e=a("strong"),WPr=o("big_bird"),QPr=o(" \u2014 "),eK=a("a"),HPr=o("FlaxBigBirdForQuestionAnswering"),UPr=o(" (BigBird model)"),JPr=l(),s3=a("li"),b4e=a("strong"),YPr=o("distilbert"),KPr=o(" \u2014 "),oK=a("a"),ZPr=o("FlaxDistilBertForQuestionAnswering"),eIr=o(" (DistilBERT model)"),oIr=l(),l3=a("li"),v4e=a("strong"),rIr=o("electra"),tIr=o(" \u2014 "),rK=a("a"),aIr=o("FlaxElectraForQuestionAnswering"),nIr=o(" (ELECTRA model)"),sIr=l(),i3=a("li"),F4e=a("strong"),lIr=o("mbart"),iIr=o(" \u2014 "),tK=a("a"),dIr=o("FlaxMBartForQuestionAnswering"),cIr=o(" (mBART model)"),fIr=l(),d3=a("li"),T4e=a("strong"),mIr=o("roberta"),gIr=o(" \u2014 "),aK=a("a"),hIr=o("FlaxRobertaForQuestionAnswering"),pIr=o(" (RoBERTa model)"),_Ir=l(),c3=a("li"),M4e=a("strong"),uIr=o("roformer"),bIr=o(" \u2014 "),nK=a("a"),vIr=o("FlaxRoFormerForQuestionAnswering"),FIr=o(" (RoFormer model)"),TIr=l(),f3=a("li"),E4e=a("strong"),MIr=o("xlm-roberta"),EIr=o(" \u2014 "),sK=a("a"),CIr=o("FlaxXLMRobertaForQuestionAnswering"),wIr=o(" (XLM-RoBERTa model)"),AIr=l(),F(m3.$$.fragment),JNe=l(),Uc=a("h2"),g3=a("a"),C4e=a("span"),F(H9.$$.fragment),yIr=l(),w4e=a("span"),LIr=o("FlaxAutoModelForTokenClassification"),YNe=l(),br=a("div"),F(U9.$$.fragment),xIr=l(),Jc=a("p"),$Ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lK=a("a"),kIr=o("from_pretrained()"),SIr=o(" class method or the "),iK=a("a"),RIr=o("from_config()"),BIr=o(` class
method.`),PIr=l(),J9=a("p"),IIr=o("This class cannot be instantiated directly using "),A4e=a("code"),qIr=o("__init__()"),NIr=o(" (throws an error)."),jIr=l(),Ht=a("div"),F(Y9.$$.fragment),DIr=l(),y4e=a("p"),GIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OIr=l(),Yc=a("p"),VIr=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),XIr=o("not"),zIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=a("a"),WIr=o("from_pretrained()"),QIr=o(" to load the model weights."),HIr=l(),F(h3.$$.fragment),UIr=l(),Wr=a("div"),F(K9.$$.fragment),JIr=l(),x4e=a("p"),YIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KIr=l(),Tn=a("p"),ZIr=o("The model class to instantiate is selected based on the "),$4e=a("code"),eqr=o("model_type"),oqr=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),rqr=o("pretrained_model_name_or_path"),tqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),aqr=o("pretrained_model_name_or_path"),nqr=o(":"),sqr=l(),De=a("ul"),p3=a("li"),R4e=a("strong"),lqr=o("albert"),iqr=o(" \u2014 "),cK=a("a"),dqr=o("FlaxAlbertForTokenClassification"),cqr=o(" (ALBERT model)"),fqr=l(),_3=a("li"),B4e=a("strong"),mqr=o("bert"),gqr=o(" \u2014 "),fK=a("a"),hqr=o("FlaxBertForTokenClassification"),pqr=o(" (BERT model)"),_qr=l(),u3=a("li"),P4e=a("strong"),uqr=o("big_bird"),bqr=o(" \u2014 "),mK=a("a"),vqr=o("FlaxBigBirdForTokenClassification"),Fqr=o(" (BigBird model)"),Tqr=l(),b3=a("li"),I4e=a("strong"),Mqr=o("distilbert"),Eqr=o(" \u2014 "),gK=a("a"),Cqr=o("FlaxDistilBertForTokenClassification"),wqr=o(" (DistilBERT model)"),Aqr=l(),v3=a("li"),q4e=a("strong"),yqr=o("electra"),Lqr=o(" \u2014 "),hK=a("a"),xqr=o("FlaxElectraForTokenClassification"),$qr=o(" (ELECTRA model)"),kqr=l(),F3=a("li"),N4e=a("strong"),Sqr=o("roberta"),Rqr=o(" \u2014 "),pK=a("a"),Bqr=o("FlaxRobertaForTokenClassification"),Pqr=o(" (RoBERTa model)"),Iqr=l(),T3=a("li"),j4e=a("strong"),qqr=o("roformer"),Nqr=o(" \u2014 "),_K=a("a"),jqr=o("FlaxRoFormerForTokenClassification"),Dqr=o(" (RoFormer model)"),Gqr=l(),M3=a("li"),D4e=a("strong"),Oqr=o("xlm-roberta"),Vqr=o(" \u2014 "),uK=a("a"),Xqr=o("FlaxXLMRobertaForTokenClassification"),zqr=o(" (XLM-RoBERTa model)"),Wqr=l(),F(E3.$$.fragment),KNe=l(),Kc=a("h2"),C3=a("a"),G4e=a("span"),F(Z9.$$.fragment),Qqr=l(),O4e=a("span"),Hqr=o("FlaxAutoModelForMultipleChoice"),ZNe=l(),vr=a("div"),F(ex.$$.fragment),Uqr=l(),Zc=a("p"),Jqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bK=a("a"),Yqr=o("from_pretrained()"),Kqr=o(" class method or the "),vK=a("a"),Zqr=o("from_config()"),eNr=o(` class
method.`),oNr=l(),ox=a("p"),rNr=o("This class cannot be instantiated directly using "),V4e=a("code"),tNr=o("__init__()"),aNr=o(" (throws an error)."),nNr=l(),Ut=a("div"),F(rx.$$.fragment),sNr=l(),X4e=a("p"),lNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iNr=l(),ef=a("p"),dNr=o(`Note:
Loading a model from its configuration file does `),z4e=a("strong"),cNr=o("not"),fNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=a("a"),mNr=o("from_pretrained()"),gNr=o(" to load the model weights."),hNr=l(),F(w3.$$.fragment),pNr=l(),Qr=a("div"),F(tx.$$.fragment),_Nr=l(),W4e=a("p"),uNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bNr=l(),Mn=a("p"),vNr=o("The model class to instantiate is selected based on the "),Q4e=a("code"),FNr=o("model_type"),TNr=o(` property of the config object (either
passed as an argument or loaded from `),H4e=a("code"),MNr=o("pretrained_model_name_or_path"),ENr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=a("code"),CNr=o("pretrained_model_name_or_path"),wNr=o(":"),ANr=l(),Ge=a("ul"),A3=a("li"),J4e=a("strong"),yNr=o("albert"),LNr=o(" \u2014 "),TK=a("a"),xNr=o("FlaxAlbertForMultipleChoice"),$Nr=o(" (ALBERT model)"),kNr=l(),y3=a("li"),Y4e=a("strong"),SNr=o("bert"),RNr=o(" \u2014 "),MK=a("a"),BNr=o("FlaxBertForMultipleChoice"),PNr=o(" (BERT model)"),INr=l(),L3=a("li"),K4e=a("strong"),qNr=o("big_bird"),NNr=o(" \u2014 "),EK=a("a"),jNr=o("FlaxBigBirdForMultipleChoice"),DNr=o(" (BigBird model)"),GNr=l(),x3=a("li"),Z4e=a("strong"),ONr=o("distilbert"),VNr=o(" \u2014 "),CK=a("a"),XNr=o("FlaxDistilBertForMultipleChoice"),zNr=o(" (DistilBERT model)"),WNr=l(),$3=a("li"),eEe=a("strong"),QNr=o("electra"),HNr=o(" \u2014 "),wK=a("a"),UNr=o("FlaxElectraForMultipleChoice"),JNr=o(" (ELECTRA model)"),YNr=l(),k3=a("li"),oEe=a("strong"),KNr=o("roberta"),ZNr=o(" \u2014 "),AK=a("a"),ejr=o("FlaxRobertaForMultipleChoice"),ojr=o(" (RoBERTa model)"),rjr=l(),S3=a("li"),rEe=a("strong"),tjr=o("roformer"),ajr=o(" \u2014 "),yK=a("a"),njr=o("FlaxRoFormerForMultipleChoice"),sjr=o(" (RoFormer model)"),ljr=l(),R3=a("li"),tEe=a("strong"),ijr=o("xlm-roberta"),djr=o(" \u2014 "),LK=a("a"),cjr=o("FlaxXLMRobertaForMultipleChoice"),fjr=o(" (XLM-RoBERTa model)"),mjr=l(),F(B3.$$.fragment),eje=l(),of=a("h2"),P3=a("a"),aEe=a("span"),F(ax.$$.fragment),gjr=l(),nEe=a("span"),hjr=o("FlaxAutoModelForNextSentencePrediction"),oje=l(),Fr=a("div"),F(nx.$$.fragment),pjr=l(),rf=a("p"),_jr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xK=a("a"),ujr=o("from_pretrained()"),bjr=o(" class method or the "),$K=a("a"),vjr=o("from_config()"),Fjr=o(` class
method.`),Tjr=l(),sx=a("p"),Mjr=o("This class cannot be instantiated directly using "),sEe=a("code"),Ejr=o("__init__()"),Cjr=o(" (throws an error)."),wjr=l(),Jt=a("div"),F(lx.$$.fragment),Ajr=l(),lEe=a("p"),yjr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ljr=l(),tf=a("p"),xjr=o(`Note:
Loading a model from its configuration file does `),iEe=a("strong"),$jr=o("not"),kjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=a("a"),Sjr=o("from_pretrained()"),Rjr=o(" to load the model weights."),Bjr=l(),F(I3.$$.fragment),Pjr=l(),Hr=a("div"),F(ix.$$.fragment),Ijr=l(),dEe=a("p"),qjr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Njr=l(),En=a("p"),jjr=o("The model class to instantiate is selected based on the "),cEe=a("code"),Djr=o("model_type"),Gjr=o(` property of the config object (either
passed as an argument or loaded from `),fEe=a("code"),Ojr=o("pretrained_model_name_or_path"),Vjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=a("code"),Xjr=o("pretrained_model_name_or_path"),zjr=o(":"),Wjr=l(),gEe=a("ul"),q3=a("li"),hEe=a("strong"),Qjr=o("bert"),Hjr=o(" \u2014 "),SK=a("a"),Ujr=o("FlaxBertForNextSentencePrediction"),Jjr=o(" (BERT model)"),Yjr=l(),F(N3.$$.fragment),rje=l(),af=a("h2"),j3=a("a"),pEe=a("span"),F(dx.$$.fragment),Kjr=l(),_Ee=a("span"),Zjr=o("FlaxAutoModelForImageClassification"),tje=l(),Tr=a("div"),F(cx.$$.fragment),eDr=l(),nf=a("p"),oDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RK=a("a"),rDr=o("from_pretrained()"),tDr=o(" class method or the "),BK=a("a"),aDr=o("from_config()"),nDr=o(` class
method.`),sDr=l(),fx=a("p"),lDr=o("This class cannot be instantiated directly using "),uEe=a("code"),iDr=o("__init__()"),dDr=o(" (throws an error)."),cDr=l(),Yt=a("div"),F(mx.$$.fragment),fDr=l(),bEe=a("p"),mDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gDr=l(),sf=a("p"),hDr=o(`Note:
Loading a model from its configuration file does `),vEe=a("strong"),pDr=o("not"),_Dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=a("a"),uDr=o("from_pretrained()"),bDr=o(" to load the model weights."),vDr=l(),F(D3.$$.fragment),FDr=l(),Ur=a("div"),F(gx.$$.fragment),TDr=l(),FEe=a("p"),MDr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EDr=l(),Cn=a("p"),CDr=o("The model class to instantiate is selected based on the "),TEe=a("code"),wDr=o("model_type"),ADr=o(` property of the config object (either
passed as an argument or loaded from `),MEe=a("code"),yDr=o("pretrained_model_name_or_path"),LDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=a("code"),xDr=o("pretrained_model_name_or_path"),$Dr=o(":"),kDr=l(),hx=a("ul"),G3=a("li"),CEe=a("strong"),SDr=o("beit"),RDr=o(" \u2014 "),IK=a("a"),BDr=o("FlaxBeitForImageClassification"),PDr=o(" (BEiT model)"),IDr=l(),O3=a("li"),wEe=a("strong"),qDr=o("vit"),NDr=o(" \u2014 "),qK=a("a"),jDr=o("FlaxViTForImageClassification"),DDr=o(" (ViT model)"),GDr=l(),F(V3.$$.fragment),aje=l(),lf=a("h2"),X3=a("a"),AEe=a("span"),F(px.$$.fragment),ODr=l(),yEe=a("span"),VDr=o("FlaxAutoModelForVision2Seq"),nje=l(),Mr=a("div"),F(_x.$$.fragment),XDr=l(),df=a("p"),zDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NK=a("a"),WDr=o("from_pretrained()"),QDr=o(" class method or the "),jK=a("a"),HDr=o("from_config()"),UDr=o(` class
method.`),JDr=l(),ux=a("p"),YDr=o("This class cannot be instantiated directly using "),LEe=a("code"),KDr=o("__init__()"),ZDr=o(" (throws an error)."),eGr=l(),Kt=a("div"),F(bx.$$.fragment),oGr=l(),xEe=a("p"),rGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tGr=l(),cf=a("p"),aGr=o(`Note:
Loading a model from its configuration file does `),$Ee=a("strong"),nGr=o("not"),sGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("a"),lGr=o("from_pretrained()"),iGr=o(" to load the model weights."),dGr=l(),F(z3.$$.fragment),cGr=l(),Jr=a("div"),F(vx.$$.fragment),fGr=l(),kEe=a("p"),mGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gGr=l(),wn=a("p"),hGr=o("The model class to instantiate is selected based on the "),SEe=a("code"),pGr=o("model_type"),_Gr=o(` property of the config object (either
passed as an argument or loaded from `),REe=a("code"),uGr=o("pretrained_model_name_or_path"),bGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BEe=a("code"),vGr=o("pretrained_model_name_or_path"),FGr=o(":"),TGr=l(),PEe=a("ul"),W3=a("li"),IEe=a("strong"),MGr=o("vision-encoder-decoder"),EGr=o(" \u2014 "),GK=a("a"),CGr=o("FlaxVisionEncoderDecoderModel"),wGr=o(" (Vision Encoder decoder model)"),AGr=l(),F(Q3.$$.fragment),this.h()},l(f){const u=P8t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Fx=s(p);m=n(Fx,"A",{id:!0,class:!0,href:!0});var qEe=s(m);_=n(qEe,"SPAN",{});var NEe=s(_);T(d.$$.fragment,NEe),NEe.forEach(t),qEe.forEach(t),h=i(Fx),Mo=n(Fx,"SPAN",{});var jEe=s(Mo);ci=r(jEe,"Auto Classes"),jEe.forEach(t),Fx.forEach(t),hf=i(f),rt=n(f,"P",{});var Tx=s(rt);fi=r(Tx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(Tx,"CODE",{});var DEe=s(mi);f6=r(DEe,"from_pretrained()"),DEe.forEach(t),pf=r(Tx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Tx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var GEe=s(yn);m6=r(GEe,"AutoConfig"),GEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var OEe=s(xn);g6=r(OEe,"AutoModel"),OEe.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var VEe=s($n);h6=r(VEe,"AutoTokenizer"),VEe.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Mx=s(Ae);S$=r(Mx,"will create a model that is an instance of "),_i=n(Mx,"A",{href:!0});var XEe=s(_i);R$=r(XEe,"BertModel"),XEe.forEach(t),B$=r(Mx,"."),Mx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Ex=s(wa);P$=r(Ex,"There is one class of "),uf=n(Ex,"CODE",{});var zEe=s(uf);I$=r(zEe,"AutoModel"),zEe.forEach(t),hGe=r(Ex," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ex.forEach(t),tqe=i(f),ui=n(f,"H2",{class:!0});var Cx=s(ui);bf=n(Cx,"A",{id:!0,class:!0,href:!0});var WEe=s(bf);Bee=n(WEe,"SPAN",{});var QEe=s(Bee);T(p6.$$.fragment,QEe),QEe.forEach(t),WEe.forEach(t),pGe=i(Cx),Pee=n(Cx,"SPAN",{});var HEe=s(Pee);_Ge=r(HEe,"Extending the Auto Classes"),HEe.forEach(t),Cx.forEach(t),aqe=i(f),kn=n(f,"P",{});var ff=s(kn);uGe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Iee=n(ff,"CODE",{});var UEe=s(Iee);bGe=r(UEe,"NewModel"),UEe.forEach(t),vGe=r(ff,", make sure you have a "),qee=n(ff,"CODE",{});var JEe=s(qee);FGe=r(JEe,"NewModelConfig"),JEe.forEach(t),TGe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),nqe=i(f),T(_6.$$.fragment,f),sqe=i(f),q$=n(f,"P",{});var YEe=s(q$);MGe=r(YEe,"You will then be able to use the auto classes like you would usually do!"),YEe.forEach(t),lqe=i(f),T(vf.$$.fragment,f),iqe=i(f),bi=n(f,"H2",{class:!0});var wx=s(bi);Ff=n(wx,"A",{id:!0,class:!0,href:!0});var KEe=s(Ff);Nee=n(KEe,"SPAN",{});var ZEe=s(Nee);T(u6.$$.fragment,ZEe),ZEe.forEach(t),KEe.forEach(t),EGe=i(wx),jee=n(wx,"SPAN",{});var eCe=s(jee);CGe=r(eCe,"AutoConfig"),eCe.forEach(t),wx.forEach(t),dqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(b6.$$.fragment,et),wGe=i(et),v6=n(et,"P",{});var Ax=s(v6);AGe=r(Ax,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),N$=n(Ax,"A",{href:!0});var oCe=s(N$);yGe=r(oCe,"from_pretrained()"),oCe.forEach(t),LGe=r(Ax," class method."),Ax.forEach(t),xGe=i(et),F6=n(et,"P",{});var yx=s(F6);$Ge=r(yx,"This class cannot be instantiated directly using "),Dee=n(yx,"CODE",{});var rCe=s(Dee);kGe=r(rCe,"__init__()"),rCe.forEach(t),SGe=r(yx," (throws an error)."),yx.forEach(t),RGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(T6.$$.fragment,ot),BGe=i(ot),Gee=n(ot,"P",{});var tCe=s(Gee);PGe=r(tCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),tCe.forEach(t),IGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);qGe=r(mf,"The configuration class to instantiate is selected based on the "),Oee=n(mf,"CODE",{});var aCe=s(Oee);NGe=r(aCe,"model_type"),aCe.forEach(t),jGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Vee=n(mf,"CODE",{});var nCe=s(Vee);DGe=r(nCe,"pretrained_model_name_or_path"),nCe.forEach(t),GGe=r(mf,":"),mf.forEach(t),OGe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var H3=s(Tf);Xee=n(H3,"STRONG",{});var sCe=s(Xee);VGe=r(sCe,"albert"),sCe.forEach(t),XGe=r(H3," \u2014 "),j$=n(H3,"A",{href:!0});var lCe=s(j$);zGe=r(lCe,"AlbertConfig"),lCe.forEach(t),WGe=r(H3," (ALBERT model)"),H3.forEach(t),QGe=i(y),Mf=n(y,"LI",{});var U3=s(Mf);zee=n(U3,"STRONG",{});var iCe=s(zee);HGe=r(iCe,"bart"),iCe.forEach(t),UGe=r(U3," \u2014 "),D$=n(U3,"A",{href:!0});var dCe=s(D$);JGe=r(dCe,"BartConfig"),dCe.forEach(t),YGe=r(U3," (BART model)"),U3.forEach(t),KGe=i(y),Ef=n(y,"LI",{});var J3=s(Ef);Wee=n(J3,"STRONG",{});var cCe=s(Wee);ZGe=r(cCe,"beit"),cCe.forEach(t),eOe=r(J3," \u2014 "),G$=n(J3,"A",{href:!0});var fCe=s(G$);oOe=r(fCe,"BeitConfig"),fCe.forEach(t),rOe=r(J3," (BEiT model)"),J3.forEach(t),tOe=i(y),Cf=n(y,"LI",{});var Y3=s(Cf);Qee=n(Y3,"STRONG",{});var mCe=s(Qee);aOe=r(mCe,"bert"),mCe.forEach(t),nOe=r(Y3," \u2014 "),O$=n(Y3,"A",{href:!0});var gCe=s(O$);sOe=r(gCe,"BertConfig"),gCe.forEach(t),lOe=r(Y3," (BERT model)"),Y3.forEach(t),iOe=i(y),wf=n(y,"LI",{});var K3=s(wf);Hee=n(K3,"STRONG",{});var hCe=s(Hee);dOe=r(hCe,"bert-generation"),hCe.forEach(t),cOe=r(K3," \u2014 "),V$=n(K3,"A",{href:!0});var pCe=s(V$);fOe=r(pCe,"BertGenerationConfig"),pCe.forEach(t),mOe=r(K3," (Bert Generation model)"),K3.forEach(t),gOe=i(y),Af=n(y,"LI",{});var Z3=s(Af);Uee=n(Z3,"STRONG",{});var _Ce=s(Uee);hOe=r(_Ce,"big_bird"),_Ce.forEach(t),pOe=r(Z3," \u2014 "),X$=n(Z3,"A",{href:!0});var uCe=s(X$);_Oe=r(uCe,"BigBirdConfig"),uCe.forEach(t),uOe=r(Z3," (BigBird model)"),Z3.forEach(t),bOe=i(y),yf=n(y,"LI",{});var ew=s(yf);Jee=n(ew,"STRONG",{});var bCe=s(Jee);vOe=r(bCe,"bigbird_pegasus"),bCe.forEach(t),FOe=r(ew," \u2014 "),z$=n(ew,"A",{href:!0});var vCe=s(z$);TOe=r(vCe,"BigBirdPegasusConfig"),vCe.forEach(t),MOe=r(ew," (BigBirdPegasus model)"),ew.forEach(t),EOe=i(y),Lf=n(y,"LI",{});var ow=s(Lf);Yee=n(ow,"STRONG",{});var FCe=s(Yee);COe=r(FCe,"blenderbot"),FCe.forEach(t),wOe=r(ow," \u2014 "),W$=n(ow,"A",{href:!0});var TCe=s(W$);AOe=r(TCe,"BlenderbotConfig"),TCe.forEach(t),yOe=r(ow," (Blenderbot model)"),ow.forEach(t),LOe=i(y),xf=n(y,"LI",{});var rw=s(xf);Kee=n(rw,"STRONG",{});var MCe=s(Kee);xOe=r(MCe,"blenderbot-small"),MCe.forEach(t),$Oe=r(rw," \u2014 "),Q$=n(rw,"A",{href:!0});var ECe=s(Q$);kOe=r(ECe,"BlenderbotSmallConfig"),ECe.forEach(t),SOe=r(rw," (BlenderbotSmall model)"),rw.forEach(t),ROe=i(y),$f=n(y,"LI",{});var tw=s($f);Zee=n(tw,"STRONG",{});var CCe=s(Zee);BOe=r(CCe,"bloom"),CCe.forEach(t),POe=r(tw," \u2014 "),H$=n(tw,"A",{href:!0});var wCe=s(H$);IOe=r(wCe,"BloomConfig"),wCe.forEach(t),qOe=r(tw," (Bloom model)"),tw.forEach(t),NOe=i(y),kf=n(y,"LI",{});var aw=s(kf);eoe=n(aw,"STRONG",{});var ACe=s(eoe);jOe=r(ACe,"camembert"),ACe.forEach(t),DOe=r(aw," \u2014 "),U$=n(aw,"A",{href:!0});var yCe=s(U$);GOe=r(yCe,"CamembertConfig"),yCe.forEach(t),OOe=r(aw," (CamemBERT model)"),aw.forEach(t),VOe=i(y),Sf=n(y,"LI",{});var nw=s(Sf);ooe=n(nw,"STRONG",{});var LCe=s(ooe);XOe=r(LCe,"canine"),LCe.forEach(t),zOe=r(nw," \u2014 "),J$=n(nw,"A",{href:!0});var xCe=s(J$);WOe=r(xCe,"CanineConfig"),xCe.forEach(t),QOe=r(nw," (Canine model)"),nw.forEach(t),HOe=i(y),Rf=n(y,"LI",{});var sw=s(Rf);roe=n(sw,"STRONG",{});var $Ce=s(roe);UOe=r($Ce,"clip"),$Ce.forEach(t),JOe=r(sw," \u2014 "),Y$=n(sw,"A",{href:!0});var kCe=s(Y$);YOe=r(kCe,"CLIPConfig"),kCe.forEach(t),KOe=r(sw," (CLIP model)"),sw.forEach(t),ZOe=i(y),Bf=n(y,"LI",{});var lw=s(Bf);toe=n(lw,"STRONG",{});var SCe=s(toe);eVe=r(SCe,"convbert"),SCe.forEach(t),oVe=r(lw," \u2014 "),K$=n(lw,"A",{href:!0});var RCe=s(K$);rVe=r(RCe,"ConvBertConfig"),RCe.forEach(t),tVe=r(lw," (ConvBERT model)"),lw.forEach(t),aVe=i(y),Pf=n(y,"LI",{});var iw=s(Pf);aoe=n(iw,"STRONG",{});var BCe=s(aoe);nVe=r(BCe,"convnext"),BCe.forEach(t),sVe=r(iw," \u2014 "),Z$=n(iw,"A",{href:!0});var PCe=s(Z$);lVe=r(PCe,"ConvNextConfig"),PCe.forEach(t),iVe=r(iw," (ConvNext model)"),iw.forEach(t),dVe=i(y),If=n(y,"LI",{});var dw=s(If);noe=n(dw,"STRONG",{});var ICe=s(noe);cVe=r(ICe,"ctrl"),ICe.forEach(t),fVe=r(dw," \u2014 "),ek=n(dw,"A",{href:!0});var qCe=s(ek);mVe=r(qCe,"CTRLConfig"),qCe.forEach(t),gVe=r(dw," (CTRL model)"),dw.forEach(t),hVe=i(y),qf=n(y,"LI",{});var cw=s(qf);soe=n(cw,"STRONG",{});var NCe=s(soe);pVe=r(NCe,"data2vec-audio"),NCe.forEach(t),_Ve=r(cw," \u2014 "),ok=n(cw,"A",{href:!0});var jCe=s(ok);uVe=r(jCe,"Data2VecAudioConfig"),jCe.forEach(t),bVe=r(cw," (Data2VecAudio model)"),cw.forEach(t),vVe=i(y),Nf=n(y,"LI",{});var fw=s(Nf);loe=n(fw,"STRONG",{});var DCe=s(loe);FVe=r(DCe,"data2vec-text"),DCe.forEach(t),TVe=r(fw," \u2014 "),rk=n(fw,"A",{href:!0});var GCe=s(rk);MVe=r(GCe,"Data2VecTextConfig"),GCe.forEach(t),EVe=r(fw," (Data2VecText model)"),fw.forEach(t),CVe=i(y),jf=n(y,"LI",{});var mw=s(jf);ioe=n(mw,"STRONG",{});var OCe=s(ioe);wVe=r(OCe,"data2vec-vision"),OCe.forEach(t),AVe=r(mw," \u2014 "),tk=n(mw,"A",{href:!0});var VCe=s(tk);yVe=r(VCe,"Data2VecVisionConfig"),VCe.forEach(t),LVe=r(mw," (Data2VecVision model)"),mw.forEach(t),xVe=i(y),Df=n(y,"LI",{});var gw=s(Df);doe=n(gw,"STRONG",{});var XCe=s(doe);$Ve=r(XCe,"deberta"),XCe.forEach(t),kVe=r(gw," \u2014 "),ak=n(gw,"A",{href:!0});var zCe=s(ak);SVe=r(zCe,"DebertaConfig"),zCe.forEach(t),RVe=r(gw," (DeBERTa model)"),gw.forEach(t),BVe=i(y),Gf=n(y,"LI",{});var hw=s(Gf);coe=n(hw,"STRONG",{});var WCe=s(coe);PVe=r(WCe,"deberta-v2"),WCe.forEach(t),IVe=r(hw," \u2014 "),nk=n(hw,"A",{href:!0});var QCe=s(nk);qVe=r(QCe,"DebertaV2Config"),QCe.forEach(t),NVe=r(hw," (DeBERTa-v2 model)"),hw.forEach(t),jVe=i(y),Of=n(y,"LI",{});var pw=s(Of);foe=n(pw,"STRONG",{});var HCe=s(foe);DVe=r(HCe,"decision_transformer"),HCe.forEach(t),GVe=r(pw," \u2014 "),sk=n(pw,"A",{href:!0});var UCe=s(sk);OVe=r(UCe,"DecisionTransformerConfig"),UCe.forEach(t),VVe=r(pw," (Decision Transformer model)"),pw.forEach(t),XVe=i(y),Vf=n(y,"LI",{});var _w=s(Vf);moe=n(_w,"STRONG",{});var JCe=s(moe);zVe=r(JCe,"deit"),JCe.forEach(t),WVe=r(_w," \u2014 "),lk=n(_w,"A",{href:!0});var LGr=s(lk);QVe=r(LGr,"DeiTConfig"),LGr.forEach(t),HVe=r(_w," (DeiT model)"),_w.forEach(t),UVe=i(y),Xf=n(y,"LI",{});var YCe=s(Xf);goe=n(YCe,"STRONG",{});var xGr=s(goe);JVe=r(xGr,"detr"),xGr.forEach(t),YVe=r(YCe," \u2014 "),ik=n(YCe,"A",{href:!0});var $Gr=s(ik);KVe=r($Gr,"DetrConfig"),$Gr.forEach(t),ZVe=r(YCe," (DETR model)"),YCe.forEach(t),eXe=i(y),zf=n(y,"LI",{});var KCe=s(zf);hoe=n(KCe,"STRONG",{});var kGr=s(hoe);oXe=r(kGr,"distilbert"),kGr.forEach(t),rXe=r(KCe," \u2014 "),dk=n(KCe,"A",{href:!0});var SGr=s(dk);tXe=r(SGr,"DistilBertConfig"),SGr.forEach(t),aXe=r(KCe," (DistilBERT model)"),KCe.forEach(t),nXe=i(y),Wf=n(y,"LI",{});var ZCe=s(Wf);poe=n(ZCe,"STRONG",{});var RGr=s(poe);sXe=r(RGr,"dpr"),RGr.forEach(t),lXe=r(ZCe," \u2014 "),ck=n(ZCe,"A",{href:!0});var BGr=s(ck);iXe=r(BGr,"DPRConfig"),BGr.forEach(t),dXe=r(ZCe," (DPR model)"),ZCe.forEach(t),cXe=i(y),Qf=n(y,"LI",{});var e5e=s(Qf);_oe=n(e5e,"STRONG",{});var PGr=s(_oe);fXe=r(PGr,"dpt"),PGr.forEach(t),mXe=r(e5e," \u2014 "),fk=n(e5e,"A",{href:!0});var IGr=s(fk);gXe=r(IGr,"DPTConfig"),IGr.forEach(t),hXe=r(e5e," (DPT model)"),e5e.forEach(t),pXe=i(y),Hf=n(y,"LI",{});var o5e=s(Hf);uoe=n(o5e,"STRONG",{});var qGr=s(uoe);_Xe=r(qGr,"electra"),qGr.forEach(t),uXe=r(o5e," \u2014 "),mk=n(o5e,"A",{href:!0});var NGr=s(mk);bXe=r(NGr,"ElectraConfig"),NGr.forEach(t),vXe=r(o5e," (ELECTRA model)"),o5e.forEach(t),FXe=i(y),Uf=n(y,"LI",{});var r5e=s(Uf);boe=n(r5e,"STRONG",{});var jGr=s(boe);TXe=r(jGr,"encoder-decoder"),jGr.forEach(t),MXe=r(r5e," \u2014 "),gk=n(r5e,"A",{href:!0});var DGr=s(gk);EXe=r(DGr,"EncoderDecoderConfig"),DGr.forEach(t),CXe=r(r5e," (Encoder decoder model)"),r5e.forEach(t),wXe=i(y),Jf=n(y,"LI",{});var t5e=s(Jf);voe=n(t5e,"STRONG",{});var GGr=s(voe);AXe=r(GGr,"flaubert"),GGr.forEach(t),yXe=r(t5e," \u2014 "),hk=n(t5e,"A",{href:!0});var OGr=s(hk);LXe=r(OGr,"FlaubertConfig"),OGr.forEach(t),xXe=r(t5e," (FlauBERT model)"),t5e.forEach(t),$Xe=i(y),Yf=n(y,"LI",{});var a5e=s(Yf);Foe=n(a5e,"STRONG",{});var VGr=s(Foe);kXe=r(VGr,"flava"),VGr.forEach(t),SXe=r(a5e," \u2014 "),pk=n(a5e,"A",{href:!0});var XGr=s(pk);RXe=r(XGr,"FlavaConfig"),XGr.forEach(t),BXe=r(a5e," (Flava model)"),a5e.forEach(t),PXe=i(y),Kf=n(y,"LI",{});var n5e=s(Kf);Toe=n(n5e,"STRONG",{});var zGr=s(Toe);IXe=r(zGr,"fnet"),zGr.forEach(t),qXe=r(n5e," \u2014 "),_k=n(n5e,"A",{href:!0});var WGr=s(_k);NXe=r(WGr,"FNetConfig"),WGr.forEach(t),jXe=r(n5e," (FNet model)"),n5e.forEach(t),DXe=i(y),Zf=n(y,"LI",{});var s5e=s(Zf);Moe=n(s5e,"STRONG",{});var QGr=s(Moe);GXe=r(QGr,"fsmt"),QGr.forEach(t),OXe=r(s5e," \u2014 "),uk=n(s5e,"A",{href:!0});var HGr=s(uk);VXe=r(HGr,"FSMTConfig"),HGr.forEach(t),XXe=r(s5e," (FairSeq Machine-Translation model)"),s5e.forEach(t),zXe=i(y),em=n(y,"LI",{});var l5e=s(em);Eoe=n(l5e,"STRONG",{});var UGr=s(Eoe);WXe=r(UGr,"funnel"),UGr.forEach(t),QXe=r(l5e," \u2014 "),bk=n(l5e,"A",{href:!0});var JGr=s(bk);HXe=r(JGr,"FunnelConfig"),JGr.forEach(t),UXe=r(l5e," (Funnel Transformer model)"),l5e.forEach(t),JXe=i(y),om=n(y,"LI",{});var i5e=s(om);Coe=n(i5e,"STRONG",{});var YGr=s(Coe);YXe=r(YGr,"glpn"),YGr.forEach(t),KXe=r(i5e," \u2014 "),vk=n(i5e,"A",{href:!0});var KGr=s(vk);ZXe=r(KGr,"GLPNConfig"),KGr.forEach(t),eze=r(i5e," (GLPN model)"),i5e.forEach(t),oze=i(y),rm=n(y,"LI",{});var d5e=s(rm);woe=n(d5e,"STRONG",{});var ZGr=s(woe);rze=r(ZGr,"gpt2"),ZGr.forEach(t),tze=r(d5e," \u2014 "),Fk=n(d5e,"A",{href:!0});var eOr=s(Fk);aze=r(eOr,"GPT2Config"),eOr.forEach(t),nze=r(d5e," (OpenAI GPT-2 model)"),d5e.forEach(t),sze=i(y),tm=n(y,"LI",{});var c5e=s(tm);Aoe=n(c5e,"STRONG",{});var oOr=s(Aoe);lze=r(oOr,"gpt_neo"),oOr.forEach(t),ize=r(c5e," \u2014 "),Tk=n(c5e,"A",{href:!0});var rOr=s(Tk);dze=r(rOr,"GPTNeoConfig"),rOr.forEach(t),cze=r(c5e," (GPT Neo model)"),c5e.forEach(t),fze=i(y),am=n(y,"LI",{});var f5e=s(am);yoe=n(f5e,"STRONG",{});var tOr=s(yoe);mze=r(tOr,"gptj"),tOr.forEach(t),gze=r(f5e," \u2014 "),Mk=n(f5e,"A",{href:!0});var aOr=s(Mk);hze=r(aOr,"GPTJConfig"),aOr.forEach(t),pze=r(f5e," (GPT-J model)"),f5e.forEach(t),_ze=i(y),nm=n(y,"LI",{});var m5e=s(nm);Loe=n(m5e,"STRONG",{});var nOr=s(Loe);uze=r(nOr,"hubert"),nOr.forEach(t),bze=r(m5e," \u2014 "),Ek=n(m5e,"A",{href:!0});var sOr=s(Ek);vze=r(sOr,"HubertConfig"),sOr.forEach(t),Fze=r(m5e," (Hubert model)"),m5e.forEach(t),Tze=i(y),sm=n(y,"LI",{});var g5e=s(sm);xoe=n(g5e,"STRONG",{});var lOr=s(xoe);Mze=r(lOr,"ibert"),lOr.forEach(t),Eze=r(g5e," \u2014 "),Ck=n(g5e,"A",{href:!0});var iOr=s(Ck);Cze=r(iOr,"IBertConfig"),iOr.forEach(t),wze=r(g5e," (I-BERT model)"),g5e.forEach(t),Aze=i(y),lm=n(y,"LI",{});var h5e=s(lm);$oe=n(h5e,"STRONG",{});var dOr=s($oe);yze=r(dOr,"imagegpt"),dOr.forEach(t),Lze=r(h5e," \u2014 "),wk=n(h5e,"A",{href:!0});var cOr=s(wk);xze=r(cOr,"ImageGPTConfig"),cOr.forEach(t),$ze=r(h5e," (ImageGPT model)"),h5e.forEach(t),kze=i(y),im=n(y,"LI",{});var p5e=s(im);koe=n(p5e,"STRONG",{});var fOr=s(koe);Sze=r(fOr,"layoutlm"),fOr.forEach(t),Rze=r(p5e," \u2014 "),Ak=n(p5e,"A",{href:!0});var mOr=s(Ak);Bze=r(mOr,"LayoutLMConfig"),mOr.forEach(t),Pze=r(p5e," (LayoutLM model)"),p5e.forEach(t),Ize=i(y),dm=n(y,"LI",{});var _5e=s(dm);Soe=n(_5e,"STRONG",{});var gOr=s(Soe);qze=r(gOr,"layoutlmv2"),gOr.forEach(t),Nze=r(_5e," \u2014 "),yk=n(_5e,"A",{href:!0});var hOr=s(yk);jze=r(hOr,"LayoutLMv2Config"),hOr.forEach(t),Dze=r(_5e," (LayoutLMv2 model)"),_5e.forEach(t),Gze=i(y),cm=n(y,"LI",{});var u5e=s(cm);Roe=n(u5e,"STRONG",{});var pOr=s(Roe);Oze=r(pOr,"led"),pOr.forEach(t),Vze=r(u5e," \u2014 "),Lk=n(u5e,"A",{href:!0});var _Or=s(Lk);Xze=r(_Or,"LEDConfig"),_Or.forEach(t),zze=r(u5e," (LED model)"),u5e.forEach(t),Wze=i(y),fm=n(y,"LI",{});var b5e=s(fm);Boe=n(b5e,"STRONG",{});var uOr=s(Boe);Qze=r(uOr,"longformer"),uOr.forEach(t),Hze=r(b5e," \u2014 "),xk=n(b5e,"A",{href:!0});var bOr=s(xk);Uze=r(bOr,"LongformerConfig"),bOr.forEach(t),Jze=r(b5e," (Longformer model)"),b5e.forEach(t),Yze=i(y),mm=n(y,"LI",{});var v5e=s(mm);Poe=n(v5e,"STRONG",{});var vOr=s(Poe);Kze=r(vOr,"luke"),vOr.forEach(t),Zze=r(v5e," \u2014 "),$k=n(v5e,"A",{href:!0});var FOr=s($k);eWe=r(FOr,"LukeConfig"),FOr.forEach(t),oWe=r(v5e," (LUKE model)"),v5e.forEach(t),rWe=i(y),gm=n(y,"LI",{});var F5e=s(gm);Ioe=n(F5e,"STRONG",{});var TOr=s(Ioe);tWe=r(TOr,"lxmert"),TOr.forEach(t),aWe=r(F5e," \u2014 "),kk=n(F5e,"A",{href:!0});var MOr=s(kk);nWe=r(MOr,"LxmertConfig"),MOr.forEach(t),sWe=r(F5e," (LXMERT model)"),F5e.forEach(t),lWe=i(y),hm=n(y,"LI",{});var T5e=s(hm);qoe=n(T5e,"STRONG",{});var EOr=s(qoe);iWe=r(EOr,"m2m_100"),EOr.forEach(t),dWe=r(T5e," \u2014 "),Sk=n(T5e,"A",{href:!0});var COr=s(Sk);cWe=r(COr,"M2M100Config"),COr.forEach(t),fWe=r(T5e," (M2M100 model)"),T5e.forEach(t),mWe=i(y),pm=n(y,"LI",{});var M5e=s(pm);Noe=n(M5e,"STRONG",{});var wOr=s(Noe);gWe=r(wOr,"marian"),wOr.forEach(t),hWe=r(M5e," \u2014 "),Rk=n(M5e,"A",{href:!0});var AOr=s(Rk);pWe=r(AOr,"MarianConfig"),AOr.forEach(t),_We=r(M5e," (Marian model)"),M5e.forEach(t),uWe=i(y),_m=n(y,"LI",{});var E5e=s(_m);joe=n(E5e,"STRONG",{});var yOr=s(joe);bWe=r(yOr,"maskformer"),yOr.forEach(t),vWe=r(E5e," \u2014 "),Bk=n(E5e,"A",{href:!0});var LOr=s(Bk);FWe=r(LOr,"MaskFormerConfig"),LOr.forEach(t),TWe=r(E5e," (MaskFormer model)"),E5e.forEach(t),MWe=i(y),um=n(y,"LI",{});var C5e=s(um);Doe=n(C5e,"STRONG",{});var xOr=s(Doe);EWe=r(xOr,"mbart"),xOr.forEach(t),CWe=r(C5e," \u2014 "),Pk=n(C5e,"A",{href:!0});var $Or=s(Pk);wWe=r($Or,"MBartConfig"),$Or.forEach(t),AWe=r(C5e," (mBART model)"),C5e.forEach(t),yWe=i(y),bm=n(y,"LI",{});var w5e=s(bm);Goe=n(w5e,"STRONG",{});var kOr=s(Goe);LWe=r(kOr,"megatron-bert"),kOr.forEach(t),xWe=r(w5e," \u2014 "),Ik=n(w5e,"A",{href:!0});var SOr=s(Ik);$We=r(SOr,"MegatronBertConfig"),SOr.forEach(t),kWe=r(w5e," (MegatronBert model)"),w5e.forEach(t),SWe=i(y),vm=n(y,"LI",{});var A5e=s(vm);Ooe=n(A5e,"STRONG",{});var ROr=s(Ooe);RWe=r(ROr,"mobilebert"),ROr.forEach(t),BWe=r(A5e," \u2014 "),qk=n(A5e,"A",{href:!0});var BOr=s(qk);PWe=r(BOr,"MobileBertConfig"),BOr.forEach(t),IWe=r(A5e," (MobileBERT model)"),A5e.forEach(t),qWe=i(y),Fm=n(y,"LI",{});var y5e=s(Fm);Voe=n(y5e,"STRONG",{});var POr=s(Voe);NWe=r(POr,"mpnet"),POr.forEach(t),jWe=r(y5e," \u2014 "),Nk=n(y5e,"A",{href:!0});var IOr=s(Nk);DWe=r(IOr,"MPNetConfig"),IOr.forEach(t),GWe=r(y5e," (MPNet model)"),y5e.forEach(t),OWe=i(y),Tm=n(y,"LI",{});var L5e=s(Tm);Xoe=n(L5e,"STRONG",{});var qOr=s(Xoe);VWe=r(qOr,"mt5"),qOr.forEach(t),XWe=r(L5e," \u2014 "),jk=n(L5e,"A",{href:!0});var NOr=s(jk);zWe=r(NOr,"MT5Config"),NOr.forEach(t),WWe=r(L5e," (mT5 model)"),L5e.forEach(t),QWe=i(y),Mm=n(y,"LI",{});var x5e=s(Mm);zoe=n(x5e,"STRONG",{});var jOr=s(zoe);HWe=r(jOr,"nystromformer"),jOr.forEach(t),UWe=r(x5e," \u2014 "),Dk=n(x5e,"A",{href:!0});var DOr=s(Dk);JWe=r(DOr,"NystromformerConfig"),DOr.forEach(t),YWe=r(x5e," (Nystromformer model)"),x5e.forEach(t),KWe=i(y),Em=n(y,"LI",{});var $5e=s(Em);Woe=n($5e,"STRONG",{});var GOr=s(Woe);ZWe=r(GOr,"openai-gpt"),GOr.forEach(t),eQe=r($5e," \u2014 "),Gk=n($5e,"A",{href:!0});var OOr=s(Gk);oQe=r(OOr,"OpenAIGPTConfig"),OOr.forEach(t),rQe=r($5e," (OpenAI GPT model)"),$5e.forEach(t),tQe=i(y),Cm=n(y,"LI",{});var k5e=s(Cm);Qoe=n(k5e,"STRONG",{});var VOr=s(Qoe);aQe=r(VOr,"opt"),VOr.forEach(t),nQe=r(k5e," \u2014 "),Ok=n(k5e,"A",{href:!0});var XOr=s(Ok);sQe=r(XOr,"OPTConfig"),XOr.forEach(t),lQe=r(k5e," (OPT model)"),k5e.forEach(t),iQe=i(y),wm=n(y,"LI",{});var S5e=s(wm);Hoe=n(S5e,"STRONG",{});var zOr=s(Hoe);dQe=r(zOr,"pegasus"),zOr.forEach(t),cQe=r(S5e," \u2014 "),Vk=n(S5e,"A",{href:!0});var WOr=s(Vk);fQe=r(WOr,"PegasusConfig"),WOr.forEach(t),mQe=r(S5e," (Pegasus model)"),S5e.forEach(t),gQe=i(y),Am=n(y,"LI",{});var R5e=s(Am);Uoe=n(R5e,"STRONG",{});var QOr=s(Uoe);hQe=r(QOr,"perceiver"),QOr.forEach(t),pQe=r(R5e," \u2014 "),Xk=n(R5e,"A",{href:!0});var HOr=s(Xk);_Qe=r(HOr,"PerceiverConfig"),HOr.forEach(t),uQe=r(R5e," (Perceiver model)"),R5e.forEach(t),bQe=i(y),ym=n(y,"LI",{});var B5e=s(ym);Joe=n(B5e,"STRONG",{});var UOr=s(Joe);vQe=r(UOr,"plbart"),UOr.forEach(t),FQe=r(B5e," \u2014 "),zk=n(B5e,"A",{href:!0});var JOr=s(zk);TQe=r(JOr,"PLBartConfig"),JOr.forEach(t),MQe=r(B5e," (PLBart model)"),B5e.forEach(t),EQe=i(y),Lm=n(y,"LI",{});var P5e=s(Lm);Yoe=n(P5e,"STRONG",{});var YOr=s(Yoe);CQe=r(YOr,"poolformer"),YOr.forEach(t),wQe=r(P5e," \u2014 "),Wk=n(P5e,"A",{href:!0});var KOr=s(Wk);AQe=r(KOr,"PoolFormerConfig"),KOr.forEach(t),yQe=r(P5e," (PoolFormer model)"),P5e.forEach(t),LQe=i(y),xm=n(y,"LI",{});var I5e=s(xm);Koe=n(I5e,"STRONG",{});var ZOr=s(Koe);xQe=r(ZOr,"prophetnet"),ZOr.forEach(t),$Qe=r(I5e," \u2014 "),Qk=n(I5e,"A",{href:!0});var eVr=s(Qk);kQe=r(eVr,"ProphetNetConfig"),eVr.forEach(t),SQe=r(I5e," (ProphetNet model)"),I5e.forEach(t),RQe=i(y),$m=n(y,"LI",{});var q5e=s($m);Zoe=n(q5e,"STRONG",{});var oVr=s(Zoe);BQe=r(oVr,"qdqbert"),oVr.forEach(t),PQe=r(q5e," \u2014 "),Hk=n(q5e,"A",{href:!0});var rVr=s(Hk);IQe=r(rVr,"QDQBertConfig"),rVr.forEach(t),qQe=r(q5e," (QDQBert model)"),q5e.forEach(t),NQe=i(y),km=n(y,"LI",{});var N5e=s(km);ere=n(N5e,"STRONG",{});var tVr=s(ere);jQe=r(tVr,"rag"),tVr.forEach(t),DQe=r(N5e," \u2014 "),Uk=n(N5e,"A",{href:!0});var aVr=s(Uk);GQe=r(aVr,"RagConfig"),aVr.forEach(t),OQe=r(N5e," (RAG model)"),N5e.forEach(t),VQe=i(y),Sm=n(y,"LI",{});var j5e=s(Sm);ore=n(j5e,"STRONG",{});var nVr=s(ore);XQe=r(nVr,"realm"),nVr.forEach(t),zQe=r(j5e," \u2014 "),Jk=n(j5e,"A",{href:!0});var sVr=s(Jk);WQe=r(sVr,"RealmConfig"),sVr.forEach(t),QQe=r(j5e," (Realm model)"),j5e.forEach(t),HQe=i(y),Rm=n(y,"LI",{});var D5e=s(Rm);rre=n(D5e,"STRONG",{});var lVr=s(rre);UQe=r(lVr,"reformer"),lVr.forEach(t),JQe=r(D5e," \u2014 "),Yk=n(D5e,"A",{href:!0});var iVr=s(Yk);YQe=r(iVr,"ReformerConfig"),iVr.forEach(t),KQe=r(D5e," (Reformer model)"),D5e.forEach(t),ZQe=i(y),Bm=n(y,"LI",{});var G5e=s(Bm);tre=n(G5e,"STRONG",{});var dVr=s(tre);eHe=r(dVr,"regnet"),dVr.forEach(t),oHe=r(G5e," \u2014 "),Kk=n(G5e,"A",{href:!0});var cVr=s(Kk);rHe=r(cVr,"RegNetConfig"),cVr.forEach(t),tHe=r(G5e," (RegNet model)"),G5e.forEach(t),aHe=i(y),Pm=n(y,"LI",{});var O5e=s(Pm);are=n(O5e,"STRONG",{});var fVr=s(are);nHe=r(fVr,"rembert"),fVr.forEach(t),sHe=r(O5e," \u2014 "),Zk=n(O5e,"A",{href:!0});var mVr=s(Zk);lHe=r(mVr,"RemBertConfig"),mVr.forEach(t),iHe=r(O5e," (RemBERT model)"),O5e.forEach(t),dHe=i(y),Im=n(y,"LI",{});var V5e=s(Im);nre=n(V5e,"STRONG",{});var gVr=s(nre);cHe=r(gVr,"resnet"),gVr.forEach(t),fHe=r(V5e," \u2014 "),eS=n(V5e,"A",{href:!0});var hVr=s(eS);mHe=r(hVr,"ResNetConfig"),hVr.forEach(t),gHe=r(V5e," (ResNet model)"),V5e.forEach(t),hHe=i(y),qm=n(y,"LI",{});var X5e=s(qm);sre=n(X5e,"STRONG",{});var pVr=s(sre);pHe=r(pVr,"retribert"),pVr.forEach(t),_He=r(X5e," \u2014 "),oS=n(X5e,"A",{href:!0});var _Vr=s(oS);uHe=r(_Vr,"RetriBertConfig"),_Vr.forEach(t),bHe=r(X5e," (RetriBERT model)"),X5e.forEach(t),vHe=i(y),Nm=n(y,"LI",{});var z5e=s(Nm);lre=n(z5e,"STRONG",{});var uVr=s(lre);FHe=r(uVr,"roberta"),uVr.forEach(t),THe=r(z5e," \u2014 "),rS=n(z5e,"A",{href:!0});var bVr=s(rS);MHe=r(bVr,"RobertaConfig"),bVr.forEach(t),EHe=r(z5e," (RoBERTa model)"),z5e.forEach(t),CHe=i(y),jm=n(y,"LI",{});var W5e=s(jm);ire=n(W5e,"STRONG",{});var vVr=s(ire);wHe=r(vVr,"roformer"),vVr.forEach(t),AHe=r(W5e," \u2014 "),tS=n(W5e,"A",{href:!0});var FVr=s(tS);yHe=r(FVr,"RoFormerConfig"),FVr.forEach(t),LHe=r(W5e," (RoFormer model)"),W5e.forEach(t),xHe=i(y),Dm=n(y,"LI",{});var Q5e=s(Dm);dre=n(Q5e,"STRONG",{});var TVr=s(dre);$He=r(TVr,"segformer"),TVr.forEach(t),kHe=r(Q5e," \u2014 "),aS=n(Q5e,"A",{href:!0});var MVr=s(aS);SHe=r(MVr,"SegformerConfig"),MVr.forEach(t),RHe=r(Q5e," (SegFormer model)"),Q5e.forEach(t),BHe=i(y),Gm=n(y,"LI",{});var H5e=s(Gm);cre=n(H5e,"STRONG",{});var EVr=s(cre);PHe=r(EVr,"sew"),EVr.forEach(t),IHe=r(H5e," \u2014 "),nS=n(H5e,"A",{href:!0});var CVr=s(nS);qHe=r(CVr,"SEWConfig"),CVr.forEach(t),NHe=r(H5e," (SEW model)"),H5e.forEach(t),jHe=i(y),Om=n(y,"LI",{});var U5e=s(Om);fre=n(U5e,"STRONG",{});var wVr=s(fre);DHe=r(wVr,"sew-d"),wVr.forEach(t),GHe=r(U5e," \u2014 "),sS=n(U5e,"A",{href:!0});var AVr=s(sS);OHe=r(AVr,"SEWDConfig"),AVr.forEach(t),VHe=r(U5e," (SEW-D model)"),U5e.forEach(t),XHe=i(y),Vm=n(y,"LI",{});var J5e=s(Vm);mre=n(J5e,"STRONG",{});var yVr=s(mre);zHe=r(yVr,"speech-encoder-decoder"),yVr.forEach(t),WHe=r(J5e," \u2014 "),lS=n(J5e,"A",{href:!0});var LVr=s(lS);QHe=r(LVr,"SpeechEncoderDecoderConfig"),LVr.forEach(t),HHe=r(J5e," (Speech Encoder decoder model)"),J5e.forEach(t),UHe=i(y),Xm=n(y,"LI",{});var Y5e=s(Xm);gre=n(Y5e,"STRONG",{});var xVr=s(gre);JHe=r(xVr,"speech_to_text"),xVr.forEach(t),YHe=r(Y5e," \u2014 "),iS=n(Y5e,"A",{href:!0});var $Vr=s(iS);KHe=r($Vr,"Speech2TextConfig"),$Vr.forEach(t),ZHe=r(Y5e," (Speech2Text model)"),Y5e.forEach(t),eUe=i(y),zm=n(y,"LI",{});var K5e=s(zm);hre=n(K5e,"STRONG",{});var kVr=s(hre);oUe=r(kVr,"speech_to_text_2"),kVr.forEach(t),rUe=r(K5e," \u2014 "),dS=n(K5e,"A",{href:!0});var SVr=s(dS);tUe=r(SVr,"Speech2Text2Config"),SVr.forEach(t),aUe=r(K5e," (Speech2Text2 model)"),K5e.forEach(t),nUe=i(y),Wm=n(y,"LI",{});var Z5e=s(Wm);pre=n(Z5e,"STRONG",{});var RVr=s(pre);sUe=r(RVr,"splinter"),RVr.forEach(t),lUe=r(Z5e," \u2014 "),cS=n(Z5e,"A",{href:!0});var BVr=s(cS);iUe=r(BVr,"SplinterConfig"),BVr.forEach(t),dUe=r(Z5e," (Splinter model)"),Z5e.forEach(t),cUe=i(y),Qm=n(y,"LI",{});var e3e=s(Qm);_re=n(e3e,"STRONG",{});var PVr=s(_re);fUe=r(PVr,"squeezebert"),PVr.forEach(t),mUe=r(e3e," \u2014 "),fS=n(e3e,"A",{href:!0});var IVr=s(fS);gUe=r(IVr,"SqueezeBertConfig"),IVr.forEach(t),hUe=r(e3e," (SqueezeBERT model)"),e3e.forEach(t),pUe=i(y),Hm=n(y,"LI",{});var o3e=s(Hm);ure=n(o3e,"STRONG",{});var qVr=s(ure);_Ue=r(qVr,"swin"),qVr.forEach(t),uUe=r(o3e," \u2014 "),mS=n(o3e,"A",{href:!0});var NVr=s(mS);bUe=r(NVr,"SwinConfig"),NVr.forEach(t),vUe=r(o3e," (Swin model)"),o3e.forEach(t),FUe=i(y),Um=n(y,"LI",{});var r3e=s(Um);bre=n(r3e,"STRONG",{});var jVr=s(bre);TUe=r(jVr,"t5"),jVr.forEach(t),MUe=r(r3e," \u2014 "),gS=n(r3e,"A",{href:!0});var DVr=s(gS);EUe=r(DVr,"T5Config"),DVr.forEach(t),CUe=r(r3e," (T5 model)"),r3e.forEach(t),wUe=i(y),Jm=n(y,"LI",{});var t3e=s(Jm);vre=n(t3e,"STRONG",{});var GVr=s(vre);AUe=r(GVr,"tapas"),GVr.forEach(t),yUe=r(t3e," \u2014 "),hS=n(t3e,"A",{href:!0});var OVr=s(hS);LUe=r(OVr,"TapasConfig"),OVr.forEach(t),xUe=r(t3e," (TAPAS model)"),t3e.forEach(t),$Ue=i(y),Ym=n(y,"LI",{});var a3e=s(Ym);Fre=n(a3e,"STRONG",{});var VVr=s(Fre);kUe=r(VVr,"trajectory_transformer"),VVr.forEach(t),SUe=r(a3e," \u2014 "),pS=n(a3e,"A",{href:!0});var XVr=s(pS);RUe=r(XVr,"TrajectoryTransformerConfig"),XVr.forEach(t),BUe=r(a3e," (Trajectory Transformer model)"),a3e.forEach(t),PUe=i(y),Km=n(y,"LI",{});var n3e=s(Km);Tre=n(n3e,"STRONG",{});var zVr=s(Tre);IUe=r(zVr,"transfo-xl"),zVr.forEach(t),qUe=r(n3e," \u2014 "),_S=n(n3e,"A",{href:!0});var WVr=s(_S);NUe=r(WVr,"TransfoXLConfig"),WVr.forEach(t),jUe=r(n3e," (Transformer-XL model)"),n3e.forEach(t),DUe=i(y),Zm=n(y,"LI",{});var s3e=s(Zm);Mre=n(s3e,"STRONG",{});var QVr=s(Mre);GUe=r(QVr,"trocr"),QVr.forEach(t),OUe=r(s3e," \u2014 "),uS=n(s3e,"A",{href:!0});var HVr=s(uS);VUe=r(HVr,"TrOCRConfig"),HVr.forEach(t),XUe=r(s3e," (TrOCR model)"),s3e.forEach(t),zUe=i(y),eg=n(y,"LI",{});var l3e=s(eg);Ere=n(l3e,"STRONG",{});var UVr=s(Ere);WUe=r(UVr,"unispeech"),UVr.forEach(t),QUe=r(l3e," \u2014 "),bS=n(l3e,"A",{href:!0});var JVr=s(bS);HUe=r(JVr,"UniSpeechConfig"),JVr.forEach(t),UUe=r(l3e," (UniSpeech model)"),l3e.forEach(t),JUe=i(y),og=n(y,"LI",{});var i3e=s(og);Cre=n(i3e,"STRONG",{});var YVr=s(Cre);YUe=r(YVr,"unispeech-sat"),YVr.forEach(t),KUe=r(i3e," \u2014 "),vS=n(i3e,"A",{href:!0});var KVr=s(vS);ZUe=r(KVr,"UniSpeechSatConfig"),KVr.forEach(t),eJe=r(i3e," (UniSpeechSat model)"),i3e.forEach(t),oJe=i(y),rg=n(y,"LI",{});var d3e=s(rg);wre=n(d3e,"STRONG",{});var ZVr=s(wre);rJe=r(ZVr,"van"),ZVr.forEach(t),tJe=r(d3e," \u2014 "),FS=n(d3e,"A",{href:!0});var eXr=s(FS);aJe=r(eXr,"VanConfig"),eXr.forEach(t),nJe=r(d3e," (VAN model)"),d3e.forEach(t),sJe=i(y),tg=n(y,"LI",{});var c3e=s(tg);Are=n(c3e,"STRONG",{});var oXr=s(Are);lJe=r(oXr,"vilt"),oXr.forEach(t),iJe=r(c3e," \u2014 "),TS=n(c3e,"A",{href:!0});var rXr=s(TS);dJe=r(rXr,"ViltConfig"),rXr.forEach(t),cJe=r(c3e," (ViLT model)"),c3e.forEach(t),fJe=i(y),ag=n(y,"LI",{});var f3e=s(ag);yre=n(f3e,"STRONG",{});var tXr=s(yre);mJe=r(tXr,"vision-encoder-decoder"),tXr.forEach(t),gJe=r(f3e," \u2014 "),MS=n(f3e,"A",{href:!0});var aXr=s(MS);hJe=r(aXr,"VisionEncoderDecoderConfig"),aXr.forEach(t),pJe=r(f3e," (Vision Encoder decoder model)"),f3e.forEach(t),_Je=i(y),ng=n(y,"LI",{});var m3e=s(ng);Lre=n(m3e,"STRONG",{});var nXr=s(Lre);uJe=r(nXr,"vision-text-dual-encoder"),nXr.forEach(t),bJe=r(m3e," \u2014 "),ES=n(m3e,"A",{href:!0});var sXr=s(ES);vJe=r(sXr,"VisionTextDualEncoderConfig"),sXr.forEach(t),FJe=r(m3e," (VisionTextDualEncoder model)"),m3e.forEach(t),TJe=i(y),sg=n(y,"LI",{});var g3e=s(sg);xre=n(g3e,"STRONG",{});var lXr=s(xre);MJe=r(lXr,"visual_bert"),lXr.forEach(t),EJe=r(g3e," \u2014 "),CS=n(g3e,"A",{href:!0});var iXr=s(CS);CJe=r(iXr,"VisualBertConfig"),iXr.forEach(t),wJe=r(g3e," (VisualBert model)"),g3e.forEach(t),AJe=i(y),lg=n(y,"LI",{});var h3e=s(lg);$re=n(h3e,"STRONG",{});var dXr=s($re);yJe=r(dXr,"vit"),dXr.forEach(t),LJe=r(h3e," \u2014 "),wS=n(h3e,"A",{href:!0});var cXr=s(wS);xJe=r(cXr,"ViTConfig"),cXr.forEach(t),$Je=r(h3e," (ViT model)"),h3e.forEach(t),kJe=i(y),ig=n(y,"LI",{});var p3e=s(ig);kre=n(p3e,"STRONG",{});var fXr=s(kre);SJe=r(fXr,"vit_mae"),fXr.forEach(t),RJe=r(p3e," \u2014 "),AS=n(p3e,"A",{href:!0});var mXr=s(AS);BJe=r(mXr,"ViTMAEConfig"),mXr.forEach(t),PJe=r(p3e," (ViTMAE model)"),p3e.forEach(t),IJe=i(y),dg=n(y,"LI",{});var _3e=s(dg);Sre=n(_3e,"STRONG",{});var gXr=s(Sre);qJe=r(gXr,"wav2vec2"),gXr.forEach(t),NJe=r(_3e," \u2014 "),yS=n(_3e,"A",{href:!0});var hXr=s(yS);jJe=r(hXr,"Wav2Vec2Config"),hXr.forEach(t),DJe=r(_3e," (Wav2Vec2 model)"),_3e.forEach(t),GJe=i(y),cg=n(y,"LI",{});var u3e=s(cg);Rre=n(u3e,"STRONG",{});var pXr=s(Rre);OJe=r(pXr,"wav2vec2-conformer"),pXr.forEach(t),VJe=r(u3e," \u2014 "),LS=n(u3e,"A",{href:!0});var _Xr=s(LS);XJe=r(_Xr,"Wav2Vec2ConformerConfig"),_Xr.forEach(t),zJe=r(u3e," (Wav2Vec2-Conformer model)"),u3e.forEach(t),WJe=i(y),fg=n(y,"LI",{});var b3e=s(fg);Bre=n(b3e,"STRONG",{});var uXr=s(Bre);QJe=r(uXr,"wavlm"),uXr.forEach(t),HJe=r(b3e," \u2014 "),xS=n(b3e,"A",{href:!0});var bXr=s(xS);UJe=r(bXr,"WavLMConfig"),bXr.forEach(t),JJe=r(b3e," (WavLM model)"),b3e.forEach(t),YJe=i(y),mg=n(y,"LI",{});var v3e=s(mg);Pre=n(v3e,"STRONG",{});var vXr=s(Pre);KJe=r(vXr,"xglm"),vXr.forEach(t),ZJe=r(v3e," \u2014 "),$S=n(v3e,"A",{href:!0});var FXr=s($S);eYe=r(FXr,"XGLMConfig"),FXr.forEach(t),oYe=r(v3e," (XGLM model)"),v3e.forEach(t),rYe=i(y),gg=n(y,"LI",{});var F3e=s(gg);Ire=n(F3e,"STRONG",{});var TXr=s(Ire);tYe=r(TXr,"xlm"),TXr.forEach(t),aYe=r(F3e," \u2014 "),kS=n(F3e,"A",{href:!0});var MXr=s(kS);nYe=r(MXr,"XLMConfig"),MXr.forEach(t),sYe=r(F3e," (XLM model)"),F3e.forEach(t),lYe=i(y),hg=n(y,"LI",{});var T3e=s(hg);qre=n(T3e,"STRONG",{});var EXr=s(qre);iYe=r(EXr,"xlm-prophetnet"),EXr.forEach(t),dYe=r(T3e," \u2014 "),SS=n(T3e,"A",{href:!0});var CXr=s(SS);cYe=r(CXr,"XLMProphetNetConfig"),CXr.forEach(t),fYe=r(T3e," (XLMProphetNet model)"),T3e.forEach(t),mYe=i(y),pg=n(y,"LI",{});var M3e=s(pg);Nre=n(M3e,"STRONG",{});var wXr=s(Nre);gYe=r(wXr,"xlm-roberta"),wXr.forEach(t),hYe=r(M3e," \u2014 "),RS=n(M3e,"A",{href:!0});var AXr=s(RS);pYe=r(AXr,"XLMRobertaConfig"),AXr.forEach(t),_Ye=r(M3e," (XLM-RoBERTa model)"),M3e.forEach(t),uYe=i(y),_g=n(y,"LI",{});var E3e=s(_g);jre=n(E3e,"STRONG",{});var yXr=s(jre);bYe=r(yXr,"xlm-roberta-xl"),yXr.forEach(t),vYe=r(E3e," \u2014 "),BS=n(E3e,"A",{href:!0});var LXr=s(BS);FYe=r(LXr,"XLMRobertaXLConfig"),LXr.forEach(t),TYe=r(E3e," (XLM-RoBERTa-XL model)"),E3e.forEach(t),MYe=i(y),ug=n(y,"LI",{});var C3e=s(ug);Dre=n(C3e,"STRONG",{});var xXr=s(Dre);EYe=r(xXr,"xlnet"),xXr.forEach(t),CYe=r(C3e," \u2014 "),PS=n(C3e,"A",{href:!0});var $Xr=s(PS);wYe=r($Xr,"XLNetConfig"),$Xr.forEach(t),AYe=r(C3e," (XLNet model)"),C3e.forEach(t),yYe=i(y),bg=n(y,"LI",{});var w3e=s(bg);Gre=n(w3e,"STRONG",{});var kXr=s(Gre);LYe=r(kXr,"yolos"),kXr.forEach(t),xYe=r(w3e," \u2014 "),IS=n(w3e,"A",{href:!0});var SXr=s(IS);$Ye=r(SXr,"YolosConfig"),SXr.forEach(t),kYe=r(w3e," (YOLOS model)"),w3e.forEach(t),SYe=i(y),vg=n(y,"LI",{});var A3e=s(vg);Ore=n(A3e,"STRONG",{});var RXr=s(Ore);RYe=r(RXr,"yoso"),RXr.forEach(t),BYe=r(A3e," \u2014 "),qS=n(A3e,"A",{href:!0});var BXr=s(qS);PYe=r(BXr,"YosoConfig"),BXr.forEach(t),IYe=r(A3e," (YOSO model)"),A3e.forEach(t),y.forEach(t),qYe=i(ot),T(Fg.$$.fragment,ot),ot.forEach(t),NYe=i(et),Tg=n(et,"DIV",{class:!0});var lje=s(Tg);T(M6.$$.fragment,lje),jYe=i(lje),Vre=n(lje,"P",{});var PXr=s(Vre);DYe=r(PXr,"Register a new configuration for this class."),PXr.forEach(t),lje.forEach(t),et.forEach(t),cqe=i(f),Fi=n(f,"H2",{class:!0});var ije=s(Fi);Mg=n(ije,"A",{id:!0,class:!0,href:!0});var IXr=s(Mg);Xre=n(IXr,"SPAN",{});var qXr=s(Xre);T(E6.$$.fragment,qXr),qXr.forEach(t),IXr.forEach(t),GYe=i(ije),zre=n(ije,"SPAN",{});var NXr=s(zre);OYe=r(NXr,"AutoTokenizer"),NXr.forEach(t),ije.forEach(t),fqe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(C6.$$.fragment,Is),VYe=i(Is),w6=n(Is,"P",{});var dje=s(w6);XYe=r(dje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),NS=n(dje,"A",{href:!0});var jXr=s(NS);zYe=r(jXr,"AutoTokenizer.from_pretrained()"),jXr.forEach(t),WYe=r(dje," class method."),dje.forEach(t),QYe=i(Is),A6=n(Is,"P",{});var cje=s(A6);HYe=r(cje,"This class cannot be instantiated directly using "),Wre=n(cje,"CODE",{});var DXr=s(Wre);UYe=r(DXr,"__init__()"),DXr.forEach(t),JYe=r(cje," (throws an error)."),cje.forEach(t),YYe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(y6.$$.fragment,qs),KYe=i(qs),Qre=n(qs,"P",{});var GXr=s(Qre);ZYe=r(GXr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),GXr.forEach(t),eKe=i(qs),Aa=n(qs,"P",{});var uw=s(Aa);oKe=r(uw,"The tokenizer class to instantiate is selected based on the "),Hre=n(uw,"CODE",{});var OXr=s(Hre);rKe=r(OXr,"model_type"),OXr.forEach(t),tKe=r(uw,` property of the config object (either
passed as an argument or loaded from `),Ure=n(uw,"CODE",{});var VXr=s(Ure);aKe=r(VXr,"pretrained_model_name_or_path"),VXr.forEach(t),nKe=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jre=n(uw,"CODE",{});var XXr=s(Jre);sKe=r(XXr,"pretrained_model_name_or_path"),XXr.forEach(t),lKe=r(uw,":"),uw.forEach(t),iKe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Lx=s(Sn);Yre=n(Lx,"STRONG",{});var zXr=s(Yre);dKe=r(zXr,"albert"),zXr.forEach(t),cKe=r(Lx," \u2014 "),jS=n(Lx,"A",{href:!0});var WXr=s(jS);fKe=r(WXr,"AlbertTokenizer"),WXr.forEach(t),mKe=r(Lx," or "),DS=n(Lx,"A",{href:!0});var QXr=s(DS);gKe=r(QXr,"AlbertTokenizerFast"),QXr.forEach(t),hKe=r(Lx," (ALBERT model)"),Lx.forEach(t),pKe=i(S),Rn=n(S,"LI",{});var xx=s(Rn);Kre=n(xx,"STRONG",{});var HXr=s(Kre);_Ke=r(HXr,"bart"),HXr.forEach(t),uKe=r(xx," \u2014 "),GS=n(xx,"A",{href:!0});var UXr=s(GS);bKe=r(UXr,"BartTokenizer"),UXr.forEach(t),vKe=r(xx," or "),OS=n(xx,"A",{href:!0});var JXr=s(OS);FKe=r(JXr,"BartTokenizerFast"),JXr.forEach(t),TKe=r(xx," (BART model)"),xx.forEach(t),MKe=i(S),Bn=n(S,"LI",{});var $x=s(Bn);Zre=n($x,"STRONG",{});var YXr=s(Zre);EKe=r(YXr,"barthez"),YXr.forEach(t),CKe=r($x," \u2014 "),VS=n($x,"A",{href:!0});var KXr=s(VS);wKe=r(KXr,"BarthezTokenizer"),KXr.forEach(t),AKe=r($x," or "),XS=n($x,"A",{href:!0});var ZXr=s(XS);yKe=r(ZXr,"BarthezTokenizerFast"),ZXr.forEach(t),LKe=r($x," (BARThez model)"),$x.forEach(t),xKe=i(S),Eg=n(S,"LI",{});var y3e=s(Eg);ete=n(y3e,"STRONG",{});var ezr=s(ete);$Ke=r(ezr,"bartpho"),ezr.forEach(t),kKe=r(y3e," \u2014 "),zS=n(y3e,"A",{href:!0});var ozr=s(zS);SKe=r(ozr,"BartphoTokenizer"),ozr.forEach(t),RKe=r(y3e," (BARTpho model)"),y3e.forEach(t),BKe=i(S),Pn=n(S,"LI",{});var kx=s(Pn);ote=n(kx,"STRONG",{});var rzr=s(ote);PKe=r(rzr,"bert"),rzr.forEach(t),IKe=r(kx," \u2014 "),WS=n(kx,"A",{href:!0});var tzr=s(WS);qKe=r(tzr,"BertTokenizer"),tzr.forEach(t),NKe=r(kx," or "),QS=n(kx,"A",{href:!0});var azr=s(QS);jKe=r(azr,"BertTokenizerFast"),azr.forEach(t),DKe=r(kx," (BERT model)"),kx.forEach(t),GKe=i(S),Cg=n(S,"LI",{});var L3e=s(Cg);rte=n(L3e,"STRONG",{});var nzr=s(rte);OKe=r(nzr,"bert-generation"),nzr.forEach(t),VKe=r(L3e," \u2014 "),HS=n(L3e,"A",{href:!0});var szr=s(HS);XKe=r(szr,"BertGenerationTokenizer"),szr.forEach(t),zKe=r(L3e," (Bert Generation model)"),L3e.forEach(t),WKe=i(S),wg=n(S,"LI",{});var x3e=s(wg);tte=n(x3e,"STRONG",{});var lzr=s(tte);QKe=r(lzr,"bert-japanese"),lzr.forEach(t),HKe=r(x3e," \u2014 "),US=n(x3e,"A",{href:!0});var izr=s(US);UKe=r(izr,"BertJapaneseTokenizer"),izr.forEach(t),JKe=r(x3e," (BertJapanese model)"),x3e.forEach(t),YKe=i(S),Ag=n(S,"LI",{});var $3e=s(Ag);ate=n($3e,"STRONG",{});var dzr=s(ate);KKe=r(dzr,"bertweet"),dzr.forEach(t),ZKe=r($3e," \u2014 "),JS=n($3e,"A",{href:!0});var czr=s(JS);eZe=r(czr,"BertweetTokenizer"),czr.forEach(t),oZe=r($3e," (Bertweet model)"),$3e.forEach(t),rZe=i(S),In=n(S,"LI",{});var Sx=s(In);nte=n(Sx,"STRONG",{});var fzr=s(nte);tZe=r(fzr,"big_bird"),fzr.forEach(t),aZe=r(Sx," \u2014 "),YS=n(Sx,"A",{href:!0});var mzr=s(YS);nZe=r(mzr,"BigBirdTokenizer"),mzr.forEach(t),sZe=r(Sx," or "),KS=n(Sx,"A",{href:!0});var gzr=s(KS);lZe=r(gzr,"BigBirdTokenizerFast"),gzr.forEach(t),iZe=r(Sx," (BigBird model)"),Sx.forEach(t),dZe=i(S),qn=n(S,"LI",{});var Rx=s(qn);ste=n(Rx,"STRONG",{});var hzr=s(ste);cZe=r(hzr,"bigbird_pegasus"),hzr.forEach(t),fZe=r(Rx," \u2014 "),ZS=n(Rx,"A",{href:!0});var pzr=s(ZS);mZe=r(pzr,"PegasusTokenizer"),pzr.forEach(t),gZe=r(Rx," or "),eR=n(Rx,"A",{href:!0});var _zr=s(eR);hZe=r(_zr,"PegasusTokenizerFast"),_zr.forEach(t),pZe=r(Rx," (BigBirdPegasus model)"),Rx.forEach(t),_Ze=i(S),Nn=n(S,"LI",{});var Bx=s(Nn);lte=n(Bx,"STRONG",{});var uzr=s(lte);uZe=r(uzr,"blenderbot"),uzr.forEach(t),bZe=r(Bx," \u2014 "),oR=n(Bx,"A",{href:!0});var bzr=s(oR);vZe=r(bzr,"BlenderbotTokenizer"),bzr.forEach(t),FZe=r(Bx," or "),rR=n(Bx,"A",{href:!0});var vzr=s(rR);TZe=r(vzr,"BlenderbotTokenizerFast"),vzr.forEach(t),MZe=r(Bx," (Blenderbot model)"),Bx.forEach(t),EZe=i(S),yg=n(S,"LI",{});var k3e=s(yg);ite=n(k3e,"STRONG",{});var Fzr=s(ite);CZe=r(Fzr,"blenderbot-small"),Fzr.forEach(t),wZe=r(k3e," \u2014 "),tR=n(k3e,"A",{href:!0});var Tzr=s(tR);AZe=r(Tzr,"BlenderbotSmallTokenizer"),Tzr.forEach(t),yZe=r(k3e," (BlenderbotSmall model)"),k3e.forEach(t),LZe=i(S),Lg=n(S,"LI",{});var S3e=s(Lg);dte=n(S3e,"STRONG",{});var Mzr=s(dte);xZe=r(Mzr,"bloom"),Mzr.forEach(t),$Ze=r(S3e," \u2014 "),aR=n(S3e,"A",{href:!0});var Ezr=s(aR);kZe=r(Ezr,"BloomTokenizerFast"),Ezr.forEach(t),SZe=r(S3e," (Bloom model)"),S3e.forEach(t),RZe=i(S),xg=n(S,"LI",{});var R3e=s(xg);cte=n(R3e,"STRONG",{});var Czr=s(cte);BZe=r(Czr,"byt5"),Czr.forEach(t),PZe=r(R3e," \u2014 "),nR=n(R3e,"A",{href:!0});var wzr=s(nR);IZe=r(wzr,"ByT5Tokenizer"),wzr.forEach(t),qZe=r(R3e," (ByT5 model)"),R3e.forEach(t),NZe=i(S),jn=n(S,"LI",{});var Px=s(jn);fte=n(Px,"STRONG",{});var Azr=s(fte);jZe=r(Azr,"camembert"),Azr.forEach(t),DZe=r(Px," \u2014 "),sR=n(Px,"A",{href:!0});var yzr=s(sR);GZe=r(yzr,"CamembertTokenizer"),yzr.forEach(t),OZe=r(Px," or "),lR=n(Px,"A",{href:!0});var Lzr=s(lR);VZe=r(Lzr,"CamembertTokenizerFast"),Lzr.forEach(t),XZe=r(Px," (CamemBERT model)"),Px.forEach(t),zZe=i(S),$g=n(S,"LI",{});var B3e=s($g);mte=n(B3e,"STRONG",{});var xzr=s(mte);WZe=r(xzr,"canine"),xzr.forEach(t),QZe=r(B3e," \u2014 "),iR=n(B3e,"A",{href:!0});var $zr=s(iR);HZe=r($zr,"CanineTokenizer"),$zr.forEach(t),UZe=r(B3e," (Canine model)"),B3e.forEach(t),JZe=i(S),Dn=n(S,"LI",{});var Ix=s(Dn);gte=n(Ix,"STRONG",{});var kzr=s(gte);YZe=r(kzr,"clip"),kzr.forEach(t),KZe=r(Ix," \u2014 "),dR=n(Ix,"A",{href:!0});var Szr=s(dR);ZZe=r(Szr,"CLIPTokenizer"),Szr.forEach(t),eeo=r(Ix," or "),cR=n(Ix,"A",{href:!0});var Rzr=s(cR);oeo=r(Rzr,"CLIPTokenizerFast"),Rzr.forEach(t),reo=r(Ix," (CLIP model)"),Ix.forEach(t),teo=i(S),Gn=n(S,"LI",{});var qx=s(Gn);hte=n(qx,"STRONG",{});var Bzr=s(hte);aeo=r(Bzr,"convbert"),Bzr.forEach(t),neo=r(qx," \u2014 "),fR=n(qx,"A",{href:!0});var Pzr=s(fR);seo=r(Pzr,"ConvBertTokenizer"),Pzr.forEach(t),leo=r(qx," or "),mR=n(qx,"A",{href:!0});var Izr=s(mR);ieo=r(Izr,"ConvBertTokenizerFast"),Izr.forEach(t),deo=r(qx," (ConvBERT model)"),qx.forEach(t),ceo=i(S),On=n(S,"LI",{});var Nx=s(On);pte=n(Nx,"STRONG",{});var qzr=s(pte);feo=r(qzr,"cpm"),qzr.forEach(t),meo=r(Nx," \u2014 "),gR=n(Nx,"A",{href:!0});var Nzr=s(gR);geo=r(Nzr,"CpmTokenizer"),Nzr.forEach(t),heo=r(Nx," or "),hR=n(Nx,"A",{href:!0});var jzr=s(hR);peo=r(jzr,"CpmTokenizerFast"),jzr.forEach(t),_eo=r(Nx," (CPM model)"),Nx.forEach(t),ueo=i(S),kg=n(S,"LI",{});var P3e=s(kg);_te=n(P3e,"STRONG",{});var Dzr=s(_te);beo=r(Dzr,"ctrl"),Dzr.forEach(t),veo=r(P3e," \u2014 "),pR=n(P3e,"A",{href:!0});var Gzr=s(pR);Feo=r(Gzr,"CTRLTokenizer"),Gzr.forEach(t),Teo=r(P3e," (CTRL model)"),P3e.forEach(t),Meo=i(S),Vn=n(S,"LI",{});var jx=s(Vn);ute=n(jx,"STRONG",{});var Ozr=s(ute);Eeo=r(Ozr,"data2vec-text"),Ozr.forEach(t),Ceo=r(jx," \u2014 "),_R=n(jx,"A",{href:!0});var Vzr=s(_R);weo=r(Vzr,"RobertaTokenizer"),Vzr.forEach(t),Aeo=r(jx," or "),uR=n(jx,"A",{href:!0});var Xzr=s(uR);yeo=r(Xzr,"RobertaTokenizerFast"),Xzr.forEach(t),Leo=r(jx," (Data2VecText model)"),jx.forEach(t),xeo=i(S),Xn=n(S,"LI",{});var Dx=s(Xn);bte=n(Dx,"STRONG",{});var zzr=s(bte);$eo=r(zzr,"deberta"),zzr.forEach(t),keo=r(Dx," \u2014 "),bR=n(Dx,"A",{href:!0});var Wzr=s(bR);Seo=r(Wzr,"DebertaTokenizer"),Wzr.forEach(t),Reo=r(Dx," or "),vR=n(Dx,"A",{href:!0});var Qzr=s(vR);Beo=r(Qzr,"DebertaTokenizerFast"),Qzr.forEach(t),Peo=r(Dx," (DeBERTa model)"),Dx.forEach(t),Ieo=i(S),zn=n(S,"LI",{});var Gx=s(zn);vte=n(Gx,"STRONG",{});var Hzr=s(vte);qeo=r(Hzr,"deberta-v2"),Hzr.forEach(t),Neo=r(Gx," \u2014 "),FR=n(Gx,"A",{href:!0});var Uzr=s(FR);jeo=r(Uzr,"DebertaV2Tokenizer"),Uzr.forEach(t),Deo=r(Gx," or "),TR=n(Gx,"A",{href:!0});var Jzr=s(TR);Geo=r(Jzr,"DebertaV2TokenizerFast"),Jzr.forEach(t),Oeo=r(Gx," (DeBERTa-v2 model)"),Gx.forEach(t),Veo=i(S),Wn=n(S,"LI",{});var Ox=s(Wn);Fte=n(Ox,"STRONG",{});var Yzr=s(Fte);Xeo=r(Yzr,"distilbert"),Yzr.forEach(t),zeo=r(Ox," \u2014 "),MR=n(Ox,"A",{href:!0});var Kzr=s(MR);Weo=r(Kzr,"DistilBertTokenizer"),Kzr.forEach(t),Qeo=r(Ox," or "),ER=n(Ox,"A",{href:!0});var Zzr=s(ER);Heo=r(Zzr,"DistilBertTokenizerFast"),Zzr.forEach(t),Ueo=r(Ox," (DistilBERT model)"),Ox.forEach(t),Jeo=i(S),Qn=n(S,"LI",{});var Vx=s(Qn);Tte=n(Vx,"STRONG",{});var eWr=s(Tte);Yeo=r(eWr,"dpr"),eWr.forEach(t),Keo=r(Vx," \u2014 "),CR=n(Vx,"A",{href:!0});var oWr=s(CR);Zeo=r(oWr,"DPRQuestionEncoderTokenizer"),oWr.forEach(t),eoo=r(Vx," or "),wR=n(Vx,"A",{href:!0});var rWr=s(wR);ooo=r(rWr,"DPRQuestionEncoderTokenizerFast"),rWr.forEach(t),roo=r(Vx," (DPR model)"),Vx.forEach(t),too=i(S),Hn=n(S,"LI",{});var Xx=s(Hn);Mte=n(Xx,"STRONG",{});var tWr=s(Mte);aoo=r(tWr,"electra"),tWr.forEach(t),noo=r(Xx," \u2014 "),AR=n(Xx,"A",{href:!0});var aWr=s(AR);soo=r(aWr,"ElectraTokenizer"),aWr.forEach(t),loo=r(Xx," or "),yR=n(Xx,"A",{href:!0});var nWr=s(yR);ioo=r(nWr,"ElectraTokenizerFast"),nWr.forEach(t),doo=r(Xx," (ELECTRA model)"),Xx.forEach(t),coo=i(S),Sg=n(S,"LI",{});var I3e=s(Sg);Ete=n(I3e,"STRONG",{});var sWr=s(Ete);foo=r(sWr,"flaubert"),sWr.forEach(t),moo=r(I3e," \u2014 "),LR=n(I3e,"A",{href:!0});var lWr=s(LR);goo=r(lWr,"FlaubertTokenizer"),lWr.forEach(t),hoo=r(I3e," (FlauBERT model)"),I3e.forEach(t),poo=i(S),Un=n(S,"LI",{});var zx=s(Un);Cte=n(zx,"STRONG",{});var iWr=s(Cte);_oo=r(iWr,"fnet"),iWr.forEach(t),uoo=r(zx," \u2014 "),xR=n(zx,"A",{href:!0});var dWr=s(xR);boo=r(dWr,"FNetTokenizer"),dWr.forEach(t),voo=r(zx," or "),$R=n(zx,"A",{href:!0});var cWr=s($R);Foo=r(cWr,"FNetTokenizerFast"),cWr.forEach(t),Too=r(zx," (FNet model)"),zx.forEach(t),Moo=i(S),Rg=n(S,"LI",{});var q3e=s(Rg);wte=n(q3e,"STRONG",{});var fWr=s(wte);Eoo=r(fWr,"fsmt"),fWr.forEach(t),Coo=r(q3e," \u2014 "),kR=n(q3e,"A",{href:!0});var mWr=s(kR);woo=r(mWr,"FSMTTokenizer"),mWr.forEach(t),Aoo=r(q3e," (FairSeq Machine-Translation model)"),q3e.forEach(t),yoo=i(S),Jn=n(S,"LI",{});var Wx=s(Jn);Ate=n(Wx,"STRONG",{});var gWr=s(Ate);Loo=r(gWr,"funnel"),gWr.forEach(t),xoo=r(Wx," \u2014 "),SR=n(Wx,"A",{href:!0});var hWr=s(SR);$oo=r(hWr,"FunnelTokenizer"),hWr.forEach(t),koo=r(Wx," or "),RR=n(Wx,"A",{href:!0});var pWr=s(RR);Soo=r(pWr,"FunnelTokenizerFast"),pWr.forEach(t),Roo=r(Wx," (Funnel Transformer model)"),Wx.forEach(t),Boo=i(S),Yn=n(S,"LI",{});var Qx=s(Yn);yte=n(Qx,"STRONG",{});var _Wr=s(yte);Poo=r(_Wr,"gpt2"),_Wr.forEach(t),Ioo=r(Qx," \u2014 "),BR=n(Qx,"A",{href:!0});var uWr=s(BR);qoo=r(uWr,"GPT2Tokenizer"),uWr.forEach(t),Noo=r(Qx," or "),PR=n(Qx,"A",{href:!0});var bWr=s(PR);joo=r(bWr,"GPT2TokenizerFast"),bWr.forEach(t),Doo=r(Qx," (OpenAI GPT-2 model)"),Qx.forEach(t),Goo=i(S),Kn=n(S,"LI",{});var Hx=s(Kn);Lte=n(Hx,"STRONG",{});var vWr=s(Lte);Ooo=r(vWr,"gpt_neo"),vWr.forEach(t),Voo=r(Hx," \u2014 "),IR=n(Hx,"A",{href:!0});var FWr=s(IR);Xoo=r(FWr,"GPT2Tokenizer"),FWr.forEach(t),zoo=r(Hx," or "),qR=n(Hx,"A",{href:!0});var TWr=s(qR);Woo=r(TWr,"GPT2TokenizerFast"),TWr.forEach(t),Qoo=r(Hx," (GPT Neo model)"),Hx.forEach(t),Hoo=i(S),Zn=n(S,"LI",{});var Ux=s(Zn);xte=n(Ux,"STRONG",{});var MWr=s(xte);Uoo=r(MWr,"gptj"),MWr.forEach(t),Joo=r(Ux," \u2014 "),NR=n(Ux,"A",{href:!0});var EWr=s(NR);Yoo=r(EWr,"GPT2Tokenizer"),EWr.forEach(t),Koo=r(Ux," or "),jR=n(Ux,"A",{href:!0});var CWr=s(jR);Zoo=r(CWr,"GPT2TokenizerFast"),CWr.forEach(t),ero=r(Ux," (GPT-J model)"),Ux.forEach(t),oro=i(S),es=n(S,"LI",{});var Jx=s(es);$te=n(Jx,"STRONG",{});var wWr=s($te);rro=r(wWr,"herbert"),wWr.forEach(t),tro=r(Jx," \u2014 "),DR=n(Jx,"A",{href:!0});var AWr=s(DR);aro=r(AWr,"HerbertTokenizer"),AWr.forEach(t),nro=r(Jx," or "),GR=n(Jx,"A",{href:!0});var yWr=s(GR);sro=r(yWr,"HerbertTokenizerFast"),yWr.forEach(t),lro=r(Jx," (HerBERT model)"),Jx.forEach(t),iro=i(S),Bg=n(S,"LI",{});var N3e=s(Bg);kte=n(N3e,"STRONG",{});var LWr=s(kte);dro=r(LWr,"hubert"),LWr.forEach(t),cro=r(N3e," \u2014 "),OR=n(N3e,"A",{href:!0});var xWr=s(OR);fro=r(xWr,"Wav2Vec2CTCTokenizer"),xWr.forEach(t),mro=r(N3e," (Hubert model)"),N3e.forEach(t),gro=i(S),os=n(S,"LI",{});var Yx=s(os);Ste=n(Yx,"STRONG",{});var $Wr=s(Ste);hro=r($Wr,"ibert"),$Wr.forEach(t),pro=r(Yx," \u2014 "),VR=n(Yx,"A",{href:!0});var kWr=s(VR);_ro=r(kWr,"RobertaTokenizer"),kWr.forEach(t),uro=r(Yx," or "),XR=n(Yx,"A",{href:!0});var SWr=s(XR);bro=r(SWr,"RobertaTokenizerFast"),SWr.forEach(t),vro=r(Yx," (I-BERT model)"),Yx.forEach(t),Fro=i(S),rs=n(S,"LI",{});var Kx=s(rs);Rte=n(Kx,"STRONG",{});var RWr=s(Rte);Tro=r(RWr,"layoutlm"),RWr.forEach(t),Mro=r(Kx," \u2014 "),zR=n(Kx,"A",{href:!0});var BWr=s(zR);Ero=r(BWr,"LayoutLMTokenizer"),BWr.forEach(t),Cro=r(Kx," or "),WR=n(Kx,"A",{href:!0});var PWr=s(WR);wro=r(PWr,"LayoutLMTokenizerFast"),PWr.forEach(t),Aro=r(Kx," (LayoutLM model)"),Kx.forEach(t),yro=i(S),ts=n(S,"LI",{});var Zx=s(ts);Bte=n(Zx,"STRONG",{});var IWr=s(Bte);Lro=r(IWr,"layoutlmv2"),IWr.forEach(t),xro=r(Zx," \u2014 "),QR=n(Zx,"A",{href:!0});var qWr=s(QR);$ro=r(qWr,"LayoutLMv2Tokenizer"),qWr.forEach(t),kro=r(Zx," or "),HR=n(Zx,"A",{href:!0});var NWr=s(HR);Sro=r(NWr,"LayoutLMv2TokenizerFast"),NWr.forEach(t),Rro=r(Zx," (LayoutLMv2 model)"),Zx.forEach(t),Bro=i(S),as=n(S,"LI",{});var e$=s(as);Pte=n(e$,"STRONG",{});var jWr=s(Pte);Pro=r(jWr,"layoutxlm"),jWr.forEach(t),Iro=r(e$," \u2014 "),UR=n(e$,"A",{href:!0});var DWr=s(UR);qro=r(DWr,"LayoutXLMTokenizer"),DWr.forEach(t),Nro=r(e$," or "),JR=n(e$,"A",{href:!0});var GWr=s(JR);jro=r(GWr,"LayoutXLMTokenizerFast"),GWr.forEach(t),Dro=r(e$," (LayoutXLM model)"),e$.forEach(t),Gro=i(S),ns=n(S,"LI",{});var o$=s(ns);Ite=n(o$,"STRONG",{});var OWr=s(Ite);Oro=r(OWr,"led"),OWr.forEach(t),Vro=r(o$," \u2014 "),YR=n(o$,"A",{href:!0});var VWr=s(YR);Xro=r(VWr,"LEDTokenizer"),VWr.forEach(t),zro=r(o$," or "),KR=n(o$,"A",{href:!0});var XWr=s(KR);Wro=r(XWr,"LEDTokenizerFast"),XWr.forEach(t),Qro=r(o$," (LED model)"),o$.forEach(t),Hro=i(S),ss=n(S,"LI",{});var r$=s(ss);qte=n(r$,"STRONG",{});var zWr=s(qte);Uro=r(zWr,"longformer"),zWr.forEach(t),Jro=r(r$," \u2014 "),ZR=n(r$,"A",{href:!0});var WWr=s(ZR);Yro=r(WWr,"LongformerTokenizer"),WWr.forEach(t),Kro=r(r$," or "),eB=n(r$,"A",{href:!0});var QWr=s(eB);Zro=r(QWr,"LongformerTokenizerFast"),QWr.forEach(t),eto=r(r$," (Longformer model)"),r$.forEach(t),oto=i(S),Pg=n(S,"LI",{});var j3e=s(Pg);Nte=n(j3e,"STRONG",{});var HWr=s(Nte);rto=r(HWr,"luke"),HWr.forEach(t),tto=r(j3e," \u2014 "),oB=n(j3e,"A",{href:!0});var UWr=s(oB);ato=r(UWr,"LukeTokenizer"),UWr.forEach(t),nto=r(j3e," (LUKE model)"),j3e.forEach(t),sto=i(S),ls=n(S,"LI",{});var t$=s(ls);jte=n(t$,"STRONG",{});var JWr=s(jte);lto=r(JWr,"lxmert"),JWr.forEach(t),ito=r(t$," \u2014 "),rB=n(t$,"A",{href:!0});var YWr=s(rB);dto=r(YWr,"LxmertTokenizer"),YWr.forEach(t),cto=r(t$," or "),tB=n(t$,"A",{href:!0});var KWr=s(tB);fto=r(KWr,"LxmertTokenizerFast"),KWr.forEach(t),mto=r(t$," (LXMERT model)"),t$.forEach(t),gto=i(S),Ig=n(S,"LI",{});var D3e=s(Ig);Dte=n(D3e,"STRONG",{});var ZWr=s(Dte);hto=r(ZWr,"m2m_100"),ZWr.forEach(t),pto=r(D3e," \u2014 "),aB=n(D3e,"A",{href:!0});var eQr=s(aB);_to=r(eQr,"M2M100Tokenizer"),eQr.forEach(t),uto=r(D3e," (M2M100 model)"),D3e.forEach(t),bto=i(S),qg=n(S,"LI",{});var G3e=s(qg);Gte=n(G3e,"STRONG",{});var oQr=s(Gte);vto=r(oQr,"marian"),oQr.forEach(t),Fto=r(G3e," \u2014 "),nB=n(G3e,"A",{href:!0});var rQr=s(nB);Tto=r(rQr,"MarianTokenizer"),rQr.forEach(t),Mto=r(G3e," (Marian model)"),G3e.forEach(t),Eto=i(S),is=n(S,"LI",{});var a$=s(is);Ote=n(a$,"STRONG",{});var tQr=s(Ote);Cto=r(tQr,"mbart"),tQr.forEach(t),wto=r(a$," \u2014 "),sB=n(a$,"A",{href:!0});var aQr=s(sB);Ato=r(aQr,"MBartTokenizer"),aQr.forEach(t),yto=r(a$," or "),lB=n(a$,"A",{href:!0});var nQr=s(lB);Lto=r(nQr,"MBartTokenizerFast"),nQr.forEach(t),xto=r(a$," (mBART model)"),a$.forEach(t),$to=i(S),ds=n(S,"LI",{});var n$=s(ds);Vte=n(n$,"STRONG",{});var sQr=s(Vte);kto=r(sQr,"mbart50"),sQr.forEach(t),Sto=r(n$," \u2014 "),iB=n(n$,"A",{href:!0});var lQr=s(iB);Rto=r(lQr,"MBart50Tokenizer"),lQr.forEach(t),Bto=r(n$," or "),dB=n(n$,"A",{href:!0});var iQr=s(dB);Pto=r(iQr,"MBart50TokenizerFast"),iQr.forEach(t),Ito=r(n$," (mBART-50 model)"),n$.forEach(t),qto=i(S),cs=n(S,"LI",{});var s$=s(cs);Xte=n(s$,"STRONG",{});var dQr=s(Xte);Nto=r(dQr,"megatron-bert"),dQr.forEach(t),jto=r(s$," \u2014 "),cB=n(s$,"A",{href:!0});var cQr=s(cB);Dto=r(cQr,"BertTokenizer"),cQr.forEach(t),Gto=r(s$," or "),fB=n(s$,"A",{href:!0});var fQr=s(fB);Oto=r(fQr,"BertTokenizerFast"),fQr.forEach(t),Vto=r(s$," (MegatronBert model)"),s$.forEach(t),Xto=i(S),Ng=n(S,"LI",{});var O3e=s(Ng);zte=n(O3e,"STRONG",{});var mQr=s(zte);zto=r(mQr,"mluke"),mQr.forEach(t),Wto=r(O3e," \u2014 "),mB=n(O3e,"A",{href:!0});var gQr=s(mB);Qto=r(gQr,"MLukeTokenizer"),gQr.forEach(t),Hto=r(O3e," (mLUKE model)"),O3e.forEach(t),Uto=i(S),fs=n(S,"LI",{});var l$=s(fs);Wte=n(l$,"STRONG",{});var hQr=s(Wte);Jto=r(hQr,"mobilebert"),hQr.forEach(t),Yto=r(l$," \u2014 "),gB=n(l$,"A",{href:!0});var pQr=s(gB);Kto=r(pQr,"MobileBertTokenizer"),pQr.forEach(t),Zto=r(l$," or "),hB=n(l$,"A",{href:!0});var _Qr=s(hB);eao=r(_Qr,"MobileBertTokenizerFast"),_Qr.forEach(t),oao=r(l$," (MobileBERT model)"),l$.forEach(t),rao=i(S),ms=n(S,"LI",{});var i$=s(ms);Qte=n(i$,"STRONG",{});var uQr=s(Qte);tao=r(uQr,"mpnet"),uQr.forEach(t),aao=r(i$," \u2014 "),pB=n(i$,"A",{href:!0});var bQr=s(pB);nao=r(bQr,"MPNetTokenizer"),bQr.forEach(t),sao=r(i$," or "),_B=n(i$,"A",{href:!0});var vQr=s(_B);lao=r(vQr,"MPNetTokenizerFast"),vQr.forEach(t),iao=r(i$," (MPNet model)"),i$.forEach(t),dao=i(S),gs=n(S,"LI",{});var d$=s(gs);Hte=n(d$,"STRONG",{});var FQr=s(Hte);cao=r(FQr,"mt5"),FQr.forEach(t),fao=r(d$," \u2014 "),uB=n(d$,"A",{href:!0});var TQr=s(uB);mao=r(TQr,"MT5Tokenizer"),TQr.forEach(t),gao=r(d$," or "),bB=n(d$,"A",{href:!0});var MQr=s(bB);hao=r(MQr,"MT5TokenizerFast"),MQr.forEach(t),pao=r(d$," (mT5 model)"),d$.forEach(t),_ao=i(S),hs=n(S,"LI",{});var c$=s(hs);Ute=n(c$,"STRONG",{});var EQr=s(Ute);uao=r(EQr,"nystromformer"),EQr.forEach(t),bao=r(c$," \u2014 "),vB=n(c$,"A",{href:!0});var CQr=s(vB);vao=r(CQr,"AlbertTokenizer"),CQr.forEach(t),Fao=r(c$," or "),FB=n(c$,"A",{href:!0});var wQr=s(FB);Tao=r(wQr,"AlbertTokenizerFast"),wQr.forEach(t),Mao=r(c$," (Nystromformer model)"),c$.forEach(t),Eao=i(S),ps=n(S,"LI",{});var f$=s(ps);Jte=n(f$,"STRONG",{});var AQr=s(Jte);Cao=r(AQr,"openai-gpt"),AQr.forEach(t),wao=r(f$," \u2014 "),TB=n(f$,"A",{href:!0});var yQr=s(TB);Aao=r(yQr,"OpenAIGPTTokenizer"),yQr.forEach(t),yao=r(f$," or "),MB=n(f$,"A",{href:!0});var LQr=s(MB);Lao=r(LQr,"OpenAIGPTTokenizerFast"),LQr.forEach(t),xao=r(f$," (OpenAI GPT model)"),f$.forEach(t),$ao=i(S),jg=n(S,"LI",{});var V3e=s(jg);Yte=n(V3e,"STRONG",{});var xQr=s(Yte);kao=r(xQr,"opt"),xQr.forEach(t),Sao=r(V3e," \u2014 "),EB=n(V3e,"A",{href:!0});var $Qr=s(EB);Rao=r($Qr,"GPT2Tokenizer"),$Qr.forEach(t),Bao=r(V3e," (OPT model)"),V3e.forEach(t),Pao=i(S),_s=n(S,"LI",{});var m$=s(_s);Kte=n(m$,"STRONG",{});var kQr=s(Kte);Iao=r(kQr,"pegasus"),kQr.forEach(t),qao=r(m$," \u2014 "),CB=n(m$,"A",{href:!0});var SQr=s(CB);Nao=r(SQr,"PegasusTokenizer"),SQr.forEach(t),jao=r(m$," or "),wB=n(m$,"A",{href:!0});var RQr=s(wB);Dao=r(RQr,"PegasusTokenizerFast"),RQr.forEach(t),Gao=r(m$," (Pegasus model)"),m$.forEach(t),Oao=i(S),Dg=n(S,"LI",{});var X3e=s(Dg);Zte=n(X3e,"STRONG",{});var BQr=s(Zte);Vao=r(BQr,"perceiver"),BQr.forEach(t),Xao=r(X3e," \u2014 "),AB=n(X3e,"A",{href:!0});var PQr=s(AB);zao=r(PQr,"PerceiverTokenizer"),PQr.forEach(t),Wao=r(X3e," (Perceiver model)"),X3e.forEach(t),Qao=i(S),Gg=n(S,"LI",{});var z3e=s(Gg);eae=n(z3e,"STRONG",{});var IQr=s(eae);Hao=r(IQr,"phobert"),IQr.forEach(t),Uao=r(z3e," \u2014 "),yB=n(z3e,"A",{href:!0});var qQr=s(yB);Jao=r(qQr,"PhobertTokenizer"),qQr.forEach(t),Yao=r(z3e," (PhoBERT model)"),z3e.forEach(t),Kao=i(S),Og=n(S,"LI",{});var W3e=s(Og);oae=n(W3e,"STRONG",{});var NQr=s(oae);Zao=r(NQr,"plbart"),NQr.forEach(t),eno=r(W3e," \u2014 "),LB=n(W3e,"A",{href:!0});var jQr=s(LB);ono=r(jQr,"PLBartTokenizer"),jQr.forEach(t),rno=r(W3e," (PLBart model)"),W3e.forEach(t),tno=i(S),Vg=n(S,"LI",{});var Q3e=s(Vg);rae=n(Q3e,"STRONG",{});var DQr=s(rae);ano=r(DQr,"prophetnet"),DQr.forEach(t),nno=r(Q3e," \u2014 "),xB=n(Q3e,"A",{href:!0});var GQr=s(xB);sno=r(GQr,"ProphetNetTokenizer"),GQr.forEach(t),lno=r(Q3e," (ProphetNet model)"),Q3e.forEach(t),ino=i(S),us=n(S,"LI",{});var g$=s(us);tae=n(g$,"STRONG",{});var OQr=s(tae);dno=r(OQr,"qdqbert"),OQr.forEach(t),cno=r(g$," \u2014 "),$B=n(g$,"A",{href:!0});var VQr=s($B);fno=r(VQr,"BertTokenizer"),VQr.forEach(t),mno=r(g$," or "),kB=n(g$,"A",{href:!0});var XQr=s(kB);gno=r(XQr,"BertTokenizerFast"),XQr.forEach(t),hno=r(g$," (QDQBert model)"),g$.forEach(t),pno=i(S),Xg=n(S,"LI",{});var H3e=s(Xg);aae=n(H3e,"STRONG",{});var zQr=s(aae);_no=r(zQr,"rag"),zQr.forEach(t),uno=r(H3e," \u2014 "),SB=n(H3e,"A",{href:!0});var WQr=s(SB);bno=r(WQr,"RagTokenizer"),WQr.forEach(t),vno=r(H3e," (RAG model)"),H3e.forEach(t),Fno=i(S),bs=n(S,"LI",{});var h$=s(bs);nae=n(h$,"STRONG",{});var QQr=s(nae);Tno=r(QQr,"realm"),QQr.forEach(t),Mno=r(h$," \u2014 "),RB=n(h$,"A",{href:!0});var HQr=s(RB);Eno=r(HQr,"RealmTokenizer"),HQr.forEach(t),Cno=r(h$," or "),BB=n(h$,"A",{href:!0});var UQr=s(BB);wno=r(UQr,"RealmTokenizerFast"),UQr.forEach(t),Ano=r(h$," (Realm model)"),h$.forEach(t),yno=i(S),vs=n(S,"LI",{});var p$=s(vs);sae=n(p$,"STRONG",{});var JQr=s(sae);Lno=r(JQr,"reformer"),JQr.forEach(t),xno=r(p$," \u2014 "),PB=n(p$,"A",{href:!0});var YQr=s(PB);$no=r(YQr,"ReformerTokenizer"),YQr.forEach(t),kno=r(p$," or "),IB=n(p$,"A",{href:!0});var KQr=s(IB);Sno=r(KQr,"ReformerTokenizerFast"),KQr.forEach(t),Rno=r(p$," (Reformer model)"),p$.forEach(t),Bno=i(S),Fs=n(S,"LI",{});var _$=s(Fs);lae=n(_$,"STRONG",{});var ZQr=s(lae);Pno=r(ZQr,"rembert"),ZQr.forEach(t),Ino=r(_$," \u2014 "),qB=n(_$,"A",{href:!0});var eHr=s(qB);qno=r(eHr,"RemBertTokenizer"),eHr.forEach(t),Nno=r(_$," or "),NB=n(_$,"A",{href:!0});var oHr=s(NB);jno=r(oHr,"RemBertTokenizerFast"),oHr.forEach(t),Dno=r(_$," (RemBERT model)"),_$.forEach(t),Gno=i(S),Ts=n(S,"LI",{});var u$=s(Ts);iae=n(u$,"STRONG",{});var rHr=s(iae);Ono=r(rHr,"retribert"),rHr.forEach(t),Vno=r(u$," \u2014 "),jB=n(u$,"A",{href:!0});var tHr=s(jB);Xno=r(tHr,"RetriBertTokenizer"),tHr.forEach(t),zno=r(u$," or "),DB=n(u$,"A",{href:!0});var aHr=s(DB);Wno=r(aHr,"RetriBertTokenizerFast"),aHr.forEach(t),Qno=r(u$," (RetriBERT model)"),u$.forEach(t),Hno=i(S),Ms=n(S,"LI",{});var b$=s(Ms);dae=n(b$,"STRONG",{});var nHr=s(dae);Uno=r(nHr,"roberta"),nHr.forEach(t),Jno=r(b$," \u2014 "),GB=n(b$,"A",{href:!0});var sHr=s(GB);Yno=r(sHr,"RobertaTokenizer"),sHr.forEach(t),Kno=r(b$," or "),OB=n(b$,"A",{href:!0});var lHr=s(OB);Zno=r(lHr,"RobertaTokenizerFast"),lHr.forEach(t),eso=r(b$," (RoBERTa model)"),b$.forEach(t),oso=i(S),Es=n(S,"LI",{});var v$=s(Es);cae=n(v$,"STRONG",{});var iHr=s(cae);rso=r(iHr,"roformer"),iHr.forEach(t),tso=r(v$," \u2014 "),VB=n(v$,"A",{href:!0});var dHr=s(VB);aso=r(dHr,"RoFormerTokenizer"),dHr.forEach(t),nso=r(v$," or "),XB=n(v$,"A",{href:!0});var cHr=s(XB);sso=r(cHr,"RoFormerTokenizerFast"),cHr.forEach(t),lso=r(v$," (RoFormer model)"),v$.forEach(t),iso=i(S),zg=n(S,"LI",{});var U3e=s(zg);fae=n(U3e,"STRONG",{});var fHr=s(fae);dso=r(fHr,"speech_to_text"),fHr.forEach(t),cso=r(U3e," \u2014 "),zB=n(U3e,"A",{href:!0});var mHr=s(zB);fso=r(mHr,"Speech2TextTokenizer"),mHr.forEach(t),mso=r(U3e," (Speech2Text model)"),U3e.forEach(t),gso=i(S),Wg=n(S,"LI",{});var J3e=s(Wg);mae=n(J3e,"STRONG",{});var gHr=s(mae);hso=r(gHr,"speech_to_text_2"),gHr.forEach(t),pso=r(J3e," \u2014 "),WB=n(J3e,"A",{href:!0});var hHr=s(WB);_so=r(hHr,"Speech2Text2Tokenizer"),hHr.forEach(t),uso=r(J3e," (Speech2Text2 model)"),J3e.forEach(t),bso=i(S),Cs=n(S,"LI",{});var F$=s(Cs);gae=n(F$,"STRONG",{});var pHr=s(gae);vso=r(pHr,"splinter"),pHr.forEach(t),Fso=r(F$," \u2014 "),QB=n(F$,"A",{href:!0});var _Hr=s(QB);Tso=r(_Hr,"SplinterTokenizer"),_Hr.forEach(t),Mso=r(F$," or "),HB=n(F$,"A",{href:!0});var uHr=s(HB);Eso=r(uHr,"SplinterTokenizerFast"),uHr.forEach(t),Cso=r(F$," (Splinter model)"),F$.forEach(t),wso=i(S),ws=n(S,"LI",{});var T$=s(ws);hae=n(T$,"STRONG",{});var bHr=s(hae);Aso=r(bHr,"squeezebert"),bHr.forEach(t),yso=r(T$," \u2014 "),UB=n(T$,"A",{href:!0});var vHr=s(UB);Lso=r(vHr,"SqueezeBertTokenizer"),vHr.forEach(t),xso=r(T$," or "),JB=n(T$,"A",{href:!0});var FHr=s(JB);$so=r(FHr,"SqueezeBertTokenizerFast"),FHr.forEach(t),kso=r(T$," (SqueezeBERT model)"),T$.forEach(t),Sso=i(S),As=n(S,"LI",{});var M$=s(As);pae=n(M$,"STRONG",{});var THr=s(pae);Rso=r(THr,"t5"),THr.forEach(t),Bso=r(M$," \u2014 "),YB=n(M$,"A",{href:!0});var MHr=s(YB);Pso=r(MHr,"T5Tokenizer"),MHr.forEach(t),Iso=r(M$," or "),KB=n(M$,"A",{href:!0});var EHr=s(KB);qso=r(EHr,"T5TokenizerFast"),EHr.forEach(t),Nso=r(M$," (T5 model)"),M$.forEach(t),jso=i(S),Qg=n(S,"LI",{});var Y3e=s(Qg);_ae=n(Y3e,"STRONG",{});var CHr=s(_ae);Dso=r(CHr,"tapas"),CHr.forEach(t),Gso=r(Y3e," \u2014 "),ZB=n(Y3e,"A",{href:!0});var wHr=s(ZB);Oso=r(wHr,"TapasTokenizer"),wHr.forEach(t),Vso=r(Y3e," (TAPAS model)"),Y3e.forEach(t),Xso=i(S),Hg=n(S,"LI",{});var K3e=s(Hg);uae=n(K3e,"STRONG",{});var AHr=s(uae);zso=r(AHr,"tapex"),AHr.forEach(t),Wso=r(K3e," \u2014 "),eP=n(K3e,"A",{href:!0});var yHr=s(eP);Qso=r(yHr,"TapexTokenizer"),yHr.forEach(t),Hso=r(K3e," (TAPEX model)"),K3e.forEach(t),Uso=i(S),Ug=n(S,"LI",{});var Z3e=s(Ug);bae=n(Z3e,"STRONG",{});var LHr=s(bae);Jso=r(LHr,"transfo-xl"),LHr.forEach(t),Yso=r(Z3e," \u2014 "),oP=n(Z3e,"A",{href:!0});var xHr=s(oP);Kso=r(xHr,"TransfoXLTokenizer"),xHr.forEach(t),Zso=r(Z3e," (Transformer-XL model)"),Z3e.forEach(t),elo=i(S),ys=n(S,"LI",{});var E$=s(ys);vae=n(E$,"STRONG",{});var $Hr=s(vae);olo=r($Hr,"visual_bert"),$Hr.forEach(t),rlo=r(E$," \u2014 "),rP=n(E$,"A",{href:!0});var kHr=s(rP);tlo=r(kHr,"BertTokenizer"),kHr.forEach(t),alo=r(E$," or "),tP=n(E$,"A",{href:!0});var SHr=s(tP);nlo=r(SHr,"BertTokenizerFast"),SHr.forEach(t),slo=r(E$," (VisualBert model)"),E$.forEach(t),llo=i(S),Jg=n(S,"LI",{});var ewe=s(Jg);Fae=n(ewe,"STRONG",{});var RHr=s(Fae);ilo=r(RHr,"wav2vec2"),RHr.forEach(t),dlo=r(ewe," \u2014 "),aP=n(ewe,"A",{href:!0});var BHr=s(aP);clo=r(BHr,"Wav2Vec2CTCTokenizer"),BHr.forEach(t),flo=r(ewe," (Wav2Vec2 model)"),ewe.forEach(t),mlo=i(S),Yg=n(S,"LI",{});var owe=s(Yg);Tae=n(owe,"STRONG",{});var PHr=s(Tae);glo=r(PHr,"wav2vec2-conformer"),PHr.forEach(t),hlo=r(owe," \u2014 "),nP=n(owe,"A",{href:!0});var IHr=s(nP);plo=r(IHr,"Wav2Vec2CTCTokenizer"),IHr.forEach(t),_lo=r(owe," (Wav2Vec2-Conformer model)"),owe.forEach(t),ulo=i(S),Kg=n(S,"LI",{});var rwe=s(Kg);Mae=n(rwe,"STRONG",{});var qHr=s(Mae);blo=r(qHr,"wav2vec2_phoneme"),qHr.forEach(t),vlo=r(rwe," \u2014 "),sP=n(rwe,"A",{href:!0});var NHr=s(sP);Flo=r(NHr,"Wav2Vec2PhonemeCTCTokenizer"),NHr.forEach(t),Tlo=r(rwe," (Wav2Vec2Phoneme model)"),rwe.forEach(t),Mlo=i(S),Ls=n(S,"LI",{});var C$=s(Ls);Eae=n(C$,"STRONG",{});var jHr=s(Eae);Elo=r(jHr,"xglm"),jHr.forEach(t),Clo=r(C$," \u2014 "),lP=n(C$,"A",{href:!0});var DHr=s(lP);wlo=r(DHr,"XGLMTokenizer"),DHr.forEach(t),Alo=r(C$," or "),iP=n(C$,"A",{href:!0});var GHr=s(iP);ylo=r(GHr,"XGLMTokenizerFast"),GHr.forEach(t),Llo=r(C$," (XGLM model)"),C$.forEach(t),xlo=i(S),Zg=n(S,"LI",{});var twe=s(Zg);Cae=n(twe,"STRONG",{});var OHr=s(Cae);$lo=r(OHr,"xlm"),OHr.forEach(t),klo=r(twe," \u2014 "),dP=n(twe,"A",{href:!0});var VHr=s(dP);Slo=r(VHr,"XLMTokenizer"),VHr.forEach(t),Rlo=r(twe," (XLM model)"),twe.forEach(t),Blo=i(S),eh=n(S,"LI",{});var awe=s(eh);wae=n(awe,"STRONG",{});var XHr=s(wae);Plo=r(XHr,"xlm-prophetnet"),XHr.forEach(t),Ilo=r(awe," \u2014 "),cP=n(awe,"A",{href:!0});var zHr=s(cP);qlo=r(zHr,"XLMProphetNetTokenizer"),zHr.forEach(t),Nlo=r(awe," (XLMProphetNet model)"),awe.forEach(t),jlo=i(S),xs=n(S,"LI",{});var w$=s(xs);Aae=n(w$,"STRONG",{});var WHr=s(Aae);Dlo=r(WHr,"xlm-roberta"),WHr.forEach(t),Glo=r(w$," \u2014 "),fP=n(w$,"A",{href:!0});var QHr=s(fP);Olo=r(QHr,"XLMRobertaTokenizer"),QHr.forEach(t),Vlo=r(w$," or "),mP=n(w$,"A",{href:!0});var HHr=s(mP);Xlo=r(HHr,"XLMRobertaTokenizerFast"),HHr.forEach(t),zlo=r(w$," (XLM-RoBERTa model)"),w$.forEach(t),Wlo=i(S),$s=n(S,"LI",{});var A$=s($s);yae=n(A$,"STRONG",{});var UHr=s(yae);Qlo=r(UHr,"xlm-roberta-xl"),UHr.forEach(t),Hlo=r(A$," \u2014 "),gP=n(A$,"A",{href:!0});var JHr=s(gP);Ulo=r(JHr,"RobertaTokenizer"),JHr.forEach(t),Jlo=r(A$," or "),hP=n(A$,"A",{href:!0});var YHr=s(hP);Ylo=r(YHr,"RobertaTokenizerFast"),YHr.forEach(t),Klo=r(A$," (XLM-RoBERTa-XL model)"),A$.forEach(t),Zlo=i(S),ks=n(S,"LI",{});var y$=s(ks);Lae=n(y$,"STRONG",{});var KHr=s(Lae);eio=r(KHr,"xlnet"),KHr.forEach(t),oio=r(y$," \u2014 "),pP=n(y$,"A",{href:!0});var ZHr=s(pP);rio=r(ZHr,"XLNetTokenizer"),ZHr.forEach(t),tio=r(y$," or "),_P=n(y$,"A",{href:!0});var eUr=s(_P);aio=r(eUr,"XLNetTokenizerFast"),eUr.forEach(t),nio=r(y$," (XLNet model)"),y$.forEach(t),sio=i(S),Ss=n(S,"LI",{});var L$=s(Ss);xae=n(L$,"STRONG",{});var oUr=s(xae);lio=r(oUr,"yoso"),oUr.forEach(t),iio=r(L$," \u2014 "),uP=n(L$,"A",{href:!0});var rUr=s(uP);dio=r(rUr,"AlbertTokenizer"),rUr.forEach(t),cio=r(L$," or "),bP=n(L$,"A",{href:!0});var tUr=s(bP);fio=r(tUr,"AlbertTokenizerFast"),tUr.forEach(t),mio=r(L$," (YOSO model)"),L$.forEach(t),S.forEach(t),gio=i(qs),T(oh.$$.fragment,qs),qs.forEach(t),hio=i(Is),rh=n(Is,"DIV",{class:!0});var fje=s(rh);T(L6.$$.fragment,fje),pio=i(fje),$ae=n(fje,"P",{});var aUr=s($ae);_io=r(aUr,"Register a new tokenizer in this mapping."),aUr.forEach(t),fje.forEach(t),Is.forEach(t),mqe=i(f),Ti=n(f,"H2",{class:!0});var mje=s(Ti);th=n(mje,"A",{id:!0,class:!0,href:!0});var nUr=s(th);kae=n(nUr,"SPAN",{});var sUr=s(kae);T(x6.$$.fragment,sUr),sUr.forEach(t),nUr.forEach(t),uio=i(mje),Sae=n(mje,"SPAN",{});var lUr=s(Sae);bio=r(lUr,"AutoFeatureExtractor"),lUr.forEach(t),mje.forEach(t),gqe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T($6.$$.fragment,Ns),vio=i(Ns),k6=n(Ns,"P",{});var gje=s(k6);Fio=r(gje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vP=n(gje,"A",{href:!0});var iUr=s(vP);Tio=r(iUr,"AutoFeatureExtractor.from_pretrained()"),iUr.forEach(t),Mio=r(gje," class method."),gje.forEach(t),Eio=i(Ns),S6=n(Ns,"P",{});var hje=s(S6);Cio=r(hje,"This class cannot be instantiated directly using "),Rae=n(hje,"CODE",{});var dUr=s(Rae);wio=r(dUr,"__init__()"),dUr.forEach(t),Aio=r(hje," (throws an error)."),hje.forEach(t),yio=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(R6.$$.fragment,Zt),Lio=i(Zt),Bae=n(Zt,"P",{});var cUr=s(Bae);xio=r(cUr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),cUr.forEach(t),$io=i(Zt),ya=n(Zt,"P",{});var bw=s(ya);kio=r(bw,"The feature extractor class to instantiate is selected based on the "),Pae=n(bw,"CODE",{});var fUr=s(Pae);Sio=r(fUr,"model_type"),fUr.forEach(t),Rio=r(bw,` property of the config object
(either passed as an argument or loaded from `),Iae=n(bw,"CODE",{});var mUr=s(Iae);Bio=r(mUr,"pretrained_model_name_or_path"),mUr.forEach(t),Pio=r(bw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),qae=n(bw,"CODE",{});var gUr=s(qae);Iio=r(gUr,"pretrained_model_name_or_path"),gUr.forEach(t),qio=r(bw,":"),bw.forEach(t),Nio=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);ah=n(te,"LI",{});var nwe=s(ah);Nae=n(nwe,"STRONG",{});var hUr=s(Nae);jio=r(hUr,"beit"),hUr.forEach(t),Dio=r(nwe," \u2014 "),FP=n(nwe,"A",{href:!0});var pUr=s(FP);Gio=r(pUr,"BeitFeatureExtractor"),pUr.forEach(t),Oio=r(nwe," (BEiT model)"),nwe.forEach(t),Vio=i(te),nh=n(te,"LI",{});var swe=s(nh);jae=n(swe,"STRONG",{});var _Ur=s(jae);Xio=r(_Ur,"clip"),_Ur.forEach(t),zio=r(swe," \u2014 "),TP=n(swe,"A",{href:!0});var uUr=s(TP);Wio=r(uUr,"CLIPFeatureExtractor"),uUr.forEach(t),Qio=r(swe," (CLIP model)"),swe.forEach(t),Hio=i(te),sh=n(te,"LI",{});var lwe=s(sh);Dae=n(lwe,"STRONG",{});var bUr=s(Dae);Uio=r(bUr,"convnext"),bUr.forEach(t),Jio=r(lwe," \u2014 "),MP=n(lwe,"A",{href:!0});var vUr=s(MP);Yio=r(vUr,"ConvNextFeatureExtractor"),vUr.forEach(t),Kio=r(lwe," (ConvNext model)"),lwe.forEach(t),Zio=i(te),lh=n(te,"LI",{});var iwe=s(lh);Gae=n(iwe,"STRONG",{});var FUr=s(Gae);edo=r(FUr,"data2vec-audio"),FUr.forEach(t),odo=r(iwe," \u2014 "),EP=n(iwe,"A",{href:!0});var TUr=s(EP);rdo=r(TUr,"Wav2Vec2FeatureExtractor"),TUr.forEach(t),tdo=r(iwe," (Data2VecAudio model)"),iwe.forEach(t),ado=i(te),ih=n(te,"LI",{});var dwe=s(ih);Oae=n(dwe,"STRONG",{});var MUr=s(Oae);ndo=r(MUr,"data2vec-vision"),MUr.forEach(t),sdo=r(dwe," \u2014 "),CP=n(dwe,"A",{href:!0});var EUr=s(CP);ldo=r(EUr,"BeitFeatureExtractor"),EUr.forEach(t),ido=r(dwe," (Data2VecVision model)"),dwe.forEach(t),ddo=i(te),dh=n(te,"LI",{});var cwe=s(dh);Vae=n(cwe,"STRONG",{});var CUr=s(Vae);cdo=r(CUr,"deit"),CUr.forEach(t),fdo=r(cwe," \u2014 "),wP=n(cwe,"A",{href:!0});var wUr=s(wP);mdo=r(wUr,"DeiTFeatureExtractor"),wUr.forEach(t),gdo=r(cwe," (DeiT model)"),cwe.forEach(t),hdo=i(te),ch=n(te,"LI",{});var fwe=s(ch);Xae=n(fwe,"STRONG",{});var AUr=s(Xae);pdo=r(AUr,"detr"),AUr.forEach(t),_do=r(fwe," \u2014 "),AP=n(fwe,"A",{href:!0});var yUr=s(AP);udo=r(yUr,"DetrFeatureExtractor"),yUr.forEach(t),bdo=r(fwe," (DETR model)"),fwe.forEach(t),vdo=i(te),fh=n(te,"LI",{});var mwe=s(fh);zae=n(mwe,"STRONG",{});var LUr=s(zae);Fdo=r(LUr,"dpt"),LUr.forEach(t),Tdo=r(mwe," \u2014 "),yP=n(mwe,"A",{href:!0});var xUr=s(yP);Mdo=r(xUr,"DPTFeatureExtractor"),xUr.forEach(t),Edo=r(mwe," (DPT model)"),mwe.forEach(t),Cdo=i(te),mh=n(te,"LI",{});var gwe=s(mh);Wae=n(gwe,"STRONG",{});var $Ur=s(Wae);wdo=r($Ur,"flava"),$Ur.forEach(t),Ado=r(gwe," \u2014 "),LP=n(gwe,"A",{href:!0});var kUr=s(LP);ydo=r(kUr,"FlavaFeatureExtractor"),kUr.forEach(t),Ldo=r(gwe," (Flava model)"),gwe.forEach(t),xdo=i(te),gh=n(te,"LI",{});var hwe=s(gh);Qae=n(hwe,"STRONG",{});var SUr=s(Qae);$do=r(SUr,"glpn"),SUr.forEach(t),kdo=r(hwe," \u2014 "),xP=n(hwe,"A",{href:!0});var RUr=s(xP);Sdo=r(RUr,"GLPNFeatureExtractor"),RUr.forEach(t),Rdo=r(hwe," (GLPN model)"),hwe.forEach(t),Bdo=i(te),hh=n(te,"LI",{});var pwe=s(hh);Hae=n(pwe,"STRONG",{});var BUr=s(Hae);Pdo=r(BUr,"hubert"),BUr.forEach(t),Ido=r(pwe," \u2014 "),$P=n(pwe,"A",{href:!0});var PUr=s($P);qdo=r(PUr,"Wav2Vec2FeatureExtractor"),PUr.forEach(t),Ndo=r(pwe," (Hubert model)"),pwe.forEach(t),jdo=i(te),ph=n(te,"LI",{});var _we=s(ph);Uae=n(_we,"STRONG",{});var IUr=s(Uae);Ddo=r(IUr,"layoutlmv2"),IUr.forEach(t),Gdo=r(_we," \u2014 "),kP=n(_we,"A",{href:!0});var qUr=s(kP);Odo=r(qUr,"LayoutLMv2FeatureExtractor"),qUr.forEach(t),Vdo=r(_we," (LayoutLMv2 model)"),_we.forEach(t),Xdo=i(te),_h=n(te,"LI",{});var uwe=s(_h);Jae=n(uwe,"STRONG",{});var NUr=s(Jae);zdo=r(NUr,"maskformer"),NUr.forEach(t),Wdo=r(uwe," \u2014 "),SP=n(uwe,"A",{href:!0});var jUr=s(SP);Qdo=r(jUr,"MaskFormerFeatureExtractor"),jUr.forEach(t),Hdo=r(uwe," (MaskFormer model)"),uwe.forEach(t),Udo=i(te),uh=n(te,"LI",{});var bwe=s(uh);Yae=n(bwe,"STRONG",{});var DUr=s(Yae);Jdo=r(DUr,"perceiver"),DUr.forEach(t),Ydo=r(bwe," \u2014 "),RP=n(bwe,"A",{href:!0});var GUr=s(RP);Kdo=r(GUr,"PerceiverFeatureExtractor"),GUr.forEach(t),Zdo=r(bwe," (Perceiver model)"),bwe.forEach(t),eco=i(te),bh=n(te,"LI",{});var vwe=s(bh);Kae=n(vwe,"STRONG",{});var OUr=s(Kae);oco=r(OUr,"poolformer"),OUr.forEach(t),rco=r(vwe," \u2014 "),BP=n(vwe,"A",{href:!0});var VUr=s(BP);tco=r(VUr,"PoolFormerFeatureExtractor"),VUr.forEach(t),aco=r(vwe," (PoolFormer model)"),vwe.forEach(t),nco=i(te),vh=n(te,"LI",{});var Fwe=s(vh);Zae=n(Fwe,"STRONG",{});var XUr=s(Zae);sco=r(XUr,"regnet"),XUr.forEach(t),lco=r(Fwe," \u2014 "),PP=n(Fwe,"A",{href:!0});var zUr=s(PP);ico=r(zUr,"ConvNextFeatureExtractor"),zUr.forEach(t),dco=r(Fwe," (RegNet model)"),Fwe.forEach(t),cco=i(te),Fh=n(te,"LI",{});var Twe=s(Fh);ene=n(Twe,"STRONG",{});var WUr=s(ene);fco=r(WUr,"resnet"),WUr.forEach(t),mco=r(Twe," \u2014 "),IP=n(Twe,"A",{href:!0});var QUr=s(IP);gco=r(QUr,"ConvNextFeatureExtractor"),QUr.forEach(t),hco=r(Twe," (ResNet model)"),Twe.forEach(t),pco=i(te),Th=n(te,"LI",{});var Mwe=s(Th);one=n(Mwe,"STRONG",{});var HUr=s(one);_co=r(HUr,"segformer"),HUr.forEach(t),uco=r(Mwe," \u2014 "),qP=n(Mwe,"A",{href:!0});var UUr=s(qP);bco=r(UUr,"SegformerFeatureExtractor"),UUr.forEach(t),vco=r(Mwe," (SegFormer model)"),Mwe.forEach(t),Fco=i(te),Mh=n(te,"LI",{});var Ewe=s(Mh);rne=n(Ewe,"STRONG",{});var JUr=s(rne);Tco=r(JUr,"speech_to_text"),JUr.forEach(t),Mco=r(Ewe," \u2014 "),NP=n(Ewe,"A",{href:!0});var YUr=s(NP);Eco=r(YUr,"Speech2TextFeatureExtractor"),YUr.forEach(t),Cco=r(Ewe," (Speech2Text model)"),Ewe.forEach(t),wco=i(te),Eh=n(te,"LI",{});var Cwe=s(Eh);tne=n(Cwe,"STRONG",{});var KUr=s(tne);Aco=r(KUr,"swin"),KUr.forEach(t),yco=r(Cwe," \u2014 "),jP=n(Cwe,"A",{href:!0});var ZUr=s(jP);Lco=r(ZUr,"ViTFeatureExtractor"),ZUr.forEach(t),xco=r(Cwe," (Swin model)"),Cwe.forEach(t),$co=i(te),Ch=n(te,"LI",{});var wwe=s(Ch);ane=n(wwe,"STRONG",{});var eJr=s(ane);kco=r(eJr,"van"),eJr.forEach(t),Sco=r(wwe," \u2014 "),DP=n(wwe,"A",{href:!0});var oJr=s(DP);Rco=r(oJr,"ConvNextFeatureExtractor"),oJr.forEach(t),Bco=r(wwe," (VAN model)"),wwe.forEach(t),Pco=i(te),wh=n(te,"LI",{});var Awe=s(wh);nne=n(Awe,"STRONG",{});var rJr=s(nne);Ico=r(rJr,"vit"),rJr.forEach(t),qco=r(Awe," \u2014 "),GP=n(Awe,"A",{href:!0});var tJr=s(GP);Nco=r(tJr,"ViTFeatureExtractor"),tJr.forEach(t),jco=r(Awe," (ViT model)"),Awe.forEach(t),Dco=i(te),Ah=n(te,"LI",{});var ywe=s(Ah);sne=n(ywe,"STRONG",{});var aJr=s(sne);Gco=r(aJr,"vit_mae"),aJr.forEach(t),Oco=r(ywe," \u2014 "),OP=n(ywe,"A",{href:!0});var nJr=s(OP);Vco=r(nJr,"ViTFeatureExtractor"),nJr.forEach(t),Xco=r(ywe," (ViTMAE model)"),ywe.forEach(t),zco=i(te),yh=n(te,"LI",{});var Lwe=s(yh);lne=n(Lwe,"STRONG",{});var sJr=s(lne);Wco=r(sJr,"wav2vec2"),sJr.forEach(t),Qco=r(Lwe," \u2014 "),VP=n(Lwe,"A",{href:!0});var lJr=s(VP);Hco=r(lJr,"Wav2Vec2FeatureExtractor"),lJr.forEach(t),Uco=r(Lwe," (Wav2Vec2 model)"),Lwe.forEach(t),Jco=i(te),Lh=n(te,"LI",{});var xwe=s(Lh);ine=n(xwe,"STRONG",{});var iJr=s(ine);Yco=r(iJr,"wav2vec2-conformer"),iJr.forEach(t),Kco=r(xwe," \u2014 "),XP=n(xwe,"A",{href:!0});var dJr=s(XP);Zco=r(dJr,"Wav2Vec2FeatureExtractor"),dJr.forEach(t),efo=r(xwe," (Wav2Vec2-Conformer model)"),xwe.forEach(t),ofo=i(te),xh=n(te,"LI",{});var $we=s(xh);dne=n($we,"STRONG",{});var cJr=s(dne);rfo=r(cJr,"yolos"),cJr.forEach(t),tfo=r($we," \u2014 "),zP=n($we,"A",{href:!0});var fJr=s(zP);afo=r(fJr,"YolosFeatureExtractor"),fJr.forEach(t),nfo=r($we," (YOLOS model)"),$we.forEach(t),te.forEach(t),sfo=i(Zt),T($h.$$.fragment,Zt),lfo=i(Zt),T(kh.$$.fragment,Zt),Zt.forEach(t),ifo=i(Ns),Sh=n(Ns,"DIV",{class:!0});var pje=s(Sh);T(B6.$$.fragment,pje),dfo=i(pje),cne=n(pje,"P",{});var mJr=s(cne);cfo=r(mJr,"Register a new feature extractor for this class."),mJr.forEach(t),pje.forEach(t),Ns.forEach(t),hqe=i(f),Mi=n(f,"H2",{class:!0});var _je=s(Mi);Rh=n(_je,"A",{id:!0,class:!0,href:!0});var gJr=s(Rh);fne=n(gJr,"SPAN",{});var hJr=s(fne);T(P6.$$.fragment,hJr),hJr.forEach(t),gJr.forEach(t),ffo=i(_je),mne=n(_je,"SPAN",{});var pJr=s(mne);mfo=r(pJr,"AutoProcessor"),pJr.forEach(t),_je.forEach(t),pqe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(I6.$$.fragment,js),gfo=i(js),q6=n(js,"P",{});var uje=s(q6);hfo=r(uje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),WP=n(uje,"A",{href:!0});var _Jr=s(WP);pfo=r(_Jr,"AutoProcessor.from_pretrained()"),_Jr.forEach(t),_fo=r(uje," class method."),uje.forEach(t),ufo=i(js),N6=n(js,"P",{});var bje=s(N6);bfo=r(bje,"This class cannot be instantiated directly using "),gne=n(bje,"CODE",{});var uJr=s(gne);vfo=r(uJr,"__init__()"),uJr.forEach(t),Ffo=r(bje," (throws an error)."),bje.forEach(t),Tfo=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(j6.$$.fragment,ea),Mfo=i(ea),hne=n(ea,"P",{});var bJr=s(hne);Efo=r(bJr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),bJr.forEach(t),Cfo=i(ea),Ei=n(ea,"P",{});var OK=s(Ei);wfo=r(OK,"The processor class to instantiate is selected based on the "),pne=n(OK,"CODE",{});var vJr=s(pne);Afo=r(vJr,"model_type"),vJr.forEach(t),yfo=r(OK,` property of the config object (either
passed as an argument or loaded from `),_ne=n(OK,"CODE",{});var FJr=s(_ne);Lfo=r(FJr,"pretrained_model_name_or_path"),FJr.forEach(t),xfo=r(OK," if possible):"),OK.forEach(t),$fo=i(ea),pe=n(ea,"UL",{});var be=s(pe);Bh=n(be,"LI",{});var kwe=s(Bh);une=n(kwe,"STRONG",{});var TJr=s(une);kfo=r(TJr,"clip"),TJr.forEach(t),Sfo=r(kwe," \u2014 "),QP=n(kwe,"A",{href:!0});var MJr=s(QP);Rfo=r(MJr,"CLIPProcessor"),MJr.forEach(t),Bfo=r(kwe," (CLIP model)"),kwe.forEach(t),Pfo=i(be),Ph=n(be,"LI",{});var Swe=s(Ph);bne=n(Swe,"STRONG",{});var EJr=s(bne);Ifo=r(EJr,"flava"),EJr.forEach(t),qfo=r(Swe," \u2014 "),vne=n(Swe,"CODE",{});var CJr=s(vne);Nfo=r(CJr,"FLAVAProcessor"),CJr.forEach(t),jfo=r(Swe," (Flava model)"),Swe.forEach(t),Dfo=i(be),Ih=n(be,"LI",{});var Rwe=s(Ih);Fne=n(Rwe,"STRONG",{});var wJr=s(Fne);Gfo=r(wJr,"layoutlmv2"),wJr.forEach(t),Ofo=r(Rwe," \u2014 "),HP=n(Rwe,"A",{href:!0});var AJr=s(HP);Vfo=r(AJr,"LayoutLMv2Processor"),AJr.forEach(t),Xfo=r(Rwe," (LayoutLMv2 model)"),Rwe.forEach(t),zfo=i(be),qh=n(be,"LI",{});var Bwe=s(qh);Tne=n(Bwe,"STRONG",{});var yJr=s(Tne);Wfo=r(yJr,"layoutxlm"),yJr.forEach(t),Qfo=r(Bwe," \u2014 "),UP=n(Bwe,"A",{href:!0});var LJr=s(UP);Hfo=r(LJr,"LayoutXLMProcessor"),LJr.forEach(t),Ufo=r(Bwe," (LayoutXLM model)"),Bwe.forEach(t),Jfo=i(be),Nh=n(be,"LI",{});var Pwe=s(Nh);Mne=n(Pwe,"STRONG",{});var xJr=s(Mne);Yfo=r(xJr,"sew"),xJr.forEach(t),Kfo=r(Pwe," \u2014 "),JP=n(Pwe,"A",{href:!0});var $Jr=s(JP);Zfo=r($Jr,"Wav2Vec2Processor"),$Jr.forEach(t),emo=r(Pwe," (SEW model)"),Pwe.forEach(t),omo=i(be),jh=n(be,"LI",{});var Iwe=s(jh);Ene=n(Iwe,"STRONG",{});var kJr=s(Ene);rmo=r(kJr,"sew-d"),kJr.forEach(t),tmo=r(Iwe," \u2014 "),YP=n(Iwe,"A",{href:!0});var SJr=s(YP);amo=r(SJr,"Wav2Vec2Processor"),SJr.forEach(t),nmo=r(Iwe," (SEW-D model)"),Iwe.forEach(t),smo=i(be),Dh=n(be,"LI",{});var qwe=s(Dh);Cne=n(qwe,"STRONG",{});var RJr=s(Cne);lmo=r(RJr,"speech_to_text"),RJr.forEach(t),imo=r(qwe," \u2014 "),KP=n(qwe,"A",{href:!0});var BJr=s(KP);dmo=r(BJr,"Speech2TextProcessor"),BJr.forEach(t),cmo=r(qwe," (Speech2Text model)"),qwe.forEach(t),fmo=i(be),Gh=n(be,"LI",{});var Nwe=s(Gh);wne=n(Nwe,"STRONG",{});var PJr=s(wne);mmo=r(PJr,"speech_to_text_2"),PJr.forEach(t),gmo=r(Nwe," \u2014 "),ZP=n(Nwe,"A",{href:!0});var IJr=s(ZP);hmo=r(IJr,"Speech2Text2Processor"),IJr.forEach(t),pmo=r(Nwe," (Speech2Text2 model)"),Nwe.forEach(t),_mo=i(be),Oh=n(be,"LI",{});var jwe=s(Oh);Ane=n(jwe,"STRONG",{});var qJr=s(Ane);umo=r(qJr,"trocr"),qJr.forEach(t),bmo=r(jwe," \u2014 "),eI=n(jwe,"A",{href:!0});var NJr=s(eI);vmo=r(NJr,"TrOCRProcessor"),NJr.forEach(t),Fmo=r(jwe," (TrOCR model)"),jwe.forEach(t),Tmo=i(be),Vh=n(be,"LI",{});var Dwe=s(Vh);yne=n(Dwe,"STRONG",{});var jJr=s(yne);Mmo=r(jJr,"unispeech"),jJr.forEach(t),Emo=r(Dwe," \u2014 "),oI=n(Dwe,"A",{href:!0});var DJr=s(oI);Cmo=r(DJr,"Wav2Vec2Processor"),DJr.forEach(t),wmo=r(Dwe," (UniSpeech model)"),Dwe.forEach(t),Amo=i(be),Xh=n(be,"LI",{});var Gwe=s(Xh);Lne=n(Gwe,"STRONG",{});var GJr=s(Lne);ymo=r(GJr,"unispeech-sat"),GJr.forEach(t),Lmo=r(Gwe," \u2014 "),rI=n(Gwe,"A",{href:!0});var OJr=s(rI);xmo=r(OJr,"Wav2Vec2Processor"),OJr.forEach(t),$mo=r(Gwe," (UniSpeechSat model)"),Gwe.forEach(t),kmo=i(be),zh=n(be,"LI",{});var Owe=s(zh);xne=n(Owe,"STRONG",{});var VJr=s(xne);Smo=r(VJr,"vilt"),VJr.forEach(t),Rmo=r(Owe," \u2014 "),tI=n(Owe,"A",{href:!0});var XJr=s(tI);Bmo=r(XJr,"ViltProcessor"),XJr.forEach(t),Pmo=r(Owe," (ViLT model)"),Owe.forEach(t),Imo=i(be),Wh=n(be,"LI",{});var Vwe=s(Wh);$ne=n(Vwe,"STRONG",{});var zJr=s($ne);qmo=r(zJr,"vision-text-dual-encoder"),zJr.forEach(t),Nmo=r(Vwe," \u2014 "),aI=n(Vwe,"A",{href:!0});var WJr=s(aI);jmo=r(WJr,"VisionTextDualEncoderProcessor"),WJr.forEach(t),Dmo=r(Vwe," (VisionTextDualEncoder model)"),Vwe.forEach(t),Gmo=i(be),Qh=n(be,"LI",{});var Xwe=s(Qh);kne=n(Xwe,"STRONG",{});var QJr=s(kne);Omo=r(QJr,"wav2vec2"),QJr.forEach(t),Vmo=r(Xwe," \u2014 "),nI=n(Xwe,"A",{href:!0});var HJr=s(nI);Xmo=r(HJr,"Wav2Vec2Processor"),HJr.forEach(t),zmo=r(Xwe," (Wav2Vec2 model)"),Xwe.forEach(t),Wmo=i(be),Hh=n(be,"LI",{});var zwe=s(Hh);Sne=n(zwe,"STRONG",{});var UJr=s(Sne);Qmo=r(UJr,"wav2vec2-conformer"),UJr.forEach(t),Hmo=r(zwe," \u2014 "),sI=n(zwe,"A",{href:!0});var JJr=s(sI);Umo=r(JJr,"Wav2Vec2Processor"),JJr.forEach(t),Jmo=r(zwe," (Wav2Vec2-Conformer model)"),zwe.forEach(t),Ymo=i(be),Uh=n(be,"LI",{});var Wwe=s(Uh);Rne=n(Wwe,"STRONG",{});var YJr=s(Rne);Kmo=r(YJr,"wavlm"),YJr.forEach(t),Zmo=r(Wwe," \u2014 "),lI=n(Wwe,"A",{href:!0});var KJr=s(lI);ego=r(KJr,"Wav2Vec2Processor"),KJr.forEach(t),ogo=r(Wwe," (WavLM model)"),Wwe.forEach(t),be.forEach(t),rgo=i(ea),T(Jh.$$.fragment,ea),tgo=i(ea),T(Yh.$$.fragment,ea),ea.forEach(t),ago=i(js),Kh=n(js,"DIV",{class:!0});var vje=s(Kh);T(D6.$$.fragment,vje),ngo=i(vje),Bne=n(vje,"P",{});var ZJr=s(Bne);sgo=r(ZJr,"Register a new processor for this class."),ZJr.forEach(t),vje.forEach(t),js.forEach(t),_qe=i(f),Ci=n(f,"H2",{class:!0});var Fje=s(Ci);Zh=n(Fje,"A",{id:!0,class:!0,href:!0});var eYr=s(Zh);Pne=n(eYr,"SPAN",{});var oYr=s(Pne);T(G6.$$.fragment,oYr),oYr.forEach(t),eYr.forEach(t),lgo=i(Fje),Ine=n(Fje,"SPAN",{});var rYr=s(Ine);igo=r(rYr,"AutoModel"),rYr.forEach(t),Fje.forEach(t),uqe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(O6.$$.fragment,Ds),dgo=i(Ds),wi=n(Ds,"P",{});var VK=s(wi);cgo=r(VK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iI=n(VK,"A",{href:!0});var tYr=s(iI);fgo=r(tYr,"from_pretrained()"),tYr.forEach(t),mgo=r(VK," class method or the "),dI=n(VK,"A",{href:!0});var aYr=s(dI);ggo=r(aYr,"from_config()"),aYr.forEach(t),hgo=r(VK,` class
method.`),VK.forEach(t),pgo=i(Ds),V6=n(Ds,"P",{});var Tje=s(V6);_go=r(Tje,"This class cannot be instantiated directly using "),qne=n(Tje,"CODE",{});var nYr=s(qne);ugo=r(nYr,"__init__()"),nYr.forEach(t),bgo=r(Tje," (throws an error)."),Tje.forEach(t),vgo=i(Ds),tt=n(Ds,"DIV",{class:!0});var vw=s(tt);T(X6.$$.fragment,vw),Fgo=i(vw),Nne=n(vw,"P",{});var sYr=s(Nne);Tgo=r(sYr,"Instantiates one of the base model classes of the library from a configuration."),sYr.forEach(t),Mgo=i(vw),Ai=n(vw,"P",{});var XK=s(Ai);Ego=r(XK,`Note:
Loading a model from its configuration file does `),jne=n(XK,"STRONG",{});var lYr=s(jne);Cgo=r(lYr,"not"),lYr.forEach(t),wgo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cI=n(XK,"A",{href:!0});var iYr=s(cI);Ago=r(iYr,"from_pretrained()"),iYr.forEach(t),ygo=r(XK," to load the model weights."),XK.forEach(t),Lgo=i(vw),T(ep.$$.fragment,vw),vw.forEach(t),xgo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(z6.$$.fragment,oa),$go=i(oa),Dne=n(oa,"P",{});var dYr=s(Dne);kgo=r(dYr,"Instantiate one of the base model classes of the library from a pretrained model."),dYr.forEach(t),Sgo=i(oa),La=n(oa,"P",{});var Fw=s(La);Rgo=r(Fw,"The model class to instantiate is selected based on the "),Gne=n(Fw,"CODE",{});var cYr=s(Gne);Bgo=r(cYr,"model_type"),cYr.forEach(t),Pgo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),One=n(Fw,"CODE",{});var fYr=s(One);Igo=r(fYr,"pretrained_model_name_or_path"),fYr.forEach(t),qgo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vne=n(Fw,"CODE",{});var mYr=s(Vne);Ngo=r(mYr,"pretrained_model_name_or_path"),mYr.forEach(t),jgo=r(Fw,":"),Fw.forEach(t),Dgo=i(oa),x=n(oa,"UL",{});var $=s(x);op=n($,"LI",{});var Qwe=s(op);Xne=n(Qwe,"STRONG",{});var gYr=s(Xne);Ggo=r(gYr,"albert"),gYr.forEach(t),Ogo=r(Qwe," \u2014 "),fI=n(Qwe,"A",{href:!0});var hYr=s(fI);Vgo=r(hYr,"AlbertModel"),hYr.forEach(t),Xgo=r(Qwe," (ALBERT model)"),Qwe.forEach(t),zgo=i($),rp=n($,"LI",{});var Hwe=s(rp);zne=n(Hwe,"STRONG",{});var pYr=s(zne);Wgo=r(pYr,"bart"),pYr.forEach(t),Qgo=r(Hwe," \u2014 "),mI=n(Hwe,"A",{href:!0});var _Yr=s(mI);Hgo=r(_Yr,"BartModel"),_Yr.forEach(t),Ugo=r(Hwe," (BART model)"),Hwe.forEach(t),Jgo=i($),tp=n($,"LI",{});var Uwe=s(tp);Wne=n(Uwe,"STRONG",{});var uYr=s(Wne);Ygo=r(uYr,"beit"),uYr.forEach(t),Kgo=r(Uwe," \u2014 "),gI=n(Uwe,"A",{href:!0});var bYr=s(gI);Zgo=r(bYr,"BeitModel"),bYr.forEach(t),eho=r(Uwe," (BEiT model)"),Uwe.forEach(t),oho=i($),ap=n($,"LI",{});var Jwe=s(ap);Qne=n(Jwe,"STRONG",{});var vYr=s(Qne);rho=r(vYr,"bert"),vYr.forEach(t),tho=r(Jwe," \u2014 "),hI=n(Jwe,"A",{href:!0});var FYr=s(hI);aho=r(FYr,"BertModel"),FYr.forEach(t),nho=r(Jwe," (BERT model)"),Jwe.forEach(t),sho=i($),np=n($,"LI",{});var Ywe=s(np);Hne=n(Ywe,"STRONG",{});var TYr=s(Hne);lho=r(TYr,"bert-generation"),TYr.forEach(t),iho=r(Ywe," \u2014 "),pI=n(Ywe,"A",{href:!0});var MYr=s(pI);dho=r(MYr,"BertGenerationEncoder"),MYr.forEach(t),cho=r(Ywe," (Bert Generation model)"),Ywe.forEach(t),fho=i($),sp=n($,"LI",{});var Kwe=s(sp);Une=n(Kwe,"STRONG",{});var EYr=s(Une);mho=r(EYr,"big_bird"),EYr.forEach(t),gho=r(Kwe," \u2014 "),_I=n(Kwe,"A",{href:!0});var CYr=s(_I);hho=r(CYr,"BigBirdModel"),CYr.forEach(t),pho=r(Kwe," (BigBird model)"),Kwe.forEach(t),_ho=i($),lp=n($,"LI",{});var Zwe=s(lp);Jne=n(Zwe,"STRONG",{});var wYr=s(Jne);uho=r(wYr,"bigbird_pegasus"),wYr.forEach(t),bho=r(Zwe," \u2014 "),uI=n(Zwe,"A",{href:!0});var AYr=s(uI);vho=r(AYr,"BigBirdPegasusModel"),AYr.forEach(t),Fho=r(Zwe," (BigBirdPegasus model)"),Zwe.forEach(t),Tho=i($),ip=n($,"LI",{});var eAe=s(ip);Yne=n(eAe,"STRONG",{});var yYr=s(Yne);Mho=r(yYr,"blenderbot"),yYr.forEach(t),Eho=r(eAe," \u2014 "),bI=n(eAe,"A",{href:!0});var LYr=s(bI);Cho=r(LYr,"BlenderbotModel"),LYr.forEach(t),who=r(eAe," (Blenderbot model)"),eAe.forEach(t),Aho=i($),dp=n($,"LI",{});var oAe=s(dp);Kne=n(oAe,"STRONG",{});var xYr=s(Kne);yho=r(xYr,"blenderbot-small"),xYr.forEach(t),Lho=r(oAe," \u2014 "),vI=n(oAe,"A",{href:!0});var $Yr=s(vI);xho=r($Yr,"BlenderbotSmallModel"),$Yr.forEach(t),$ho=r(oAe," (BlenderbotSmall model)"),oAe.forEach(t),kho=i($),cp=n($,"LI",{});var rAe=s(cp);Zne=n(rAe,"STRONG",{});var kYr=s(Zne);Sho=r(kYr,"bloom"),kYr.forEach(t),Rho=r(rAe," \u2014 "),FI=n(rAe,"A",{href:!0});var SYr=s(FI);Bho=r(SYr,"BloomModel"),SYr.forEach(t),Pho=r(rAe," (Bloom model)"),rAe.forEach(t),Iho=i($),fp=n($,"LI",{});var tAe=s(fp);ese=n(tAe,"STRONG",{});var RYr=s(ese);qho=r(RYr,"camembert"),RYr.forEach(t),Nho=r(tAe," \u2014 "),TI=n(tAe,"A",{href:!0});var BYr=s(TI);jho=r(BYr,"CamembertModel"),BYr.forEach(t),Dho=r(tAe," (CamemBERT model)"),tAe.forEach(t),Gho=i($),mp=n($,"LI",{});var aAe=s(mp);ose=n(aAe,"STRONG",{});var PYr=s(ose);Oho=r(PYr,"canine"),PYr.forEach(t),Vho=r(aAe," \u2014 "),MI=n(aAe,"A",{href:!0});var IYr=s(MI);Xho=r(IYr,"CanineModel"),IYr.forEach(t),zho=r(aAe," (Canine model)"),aAe.forEach(t),Who=i($),gp=n($,"LI",{});var nAe=s(gp);rse=n(nAe,"STRONG",{});var qYr=s(rse);Qho=r(qYr,"clip"),qYr.forEach(t),Hho=r(nAe," \u2014 "),EI=n(nAe,"A",{href:!0});var NYr=s(EI);Uho=r(NYr,"CLIPModel"),NYr.forEach(t),Jho=r(nAe," (CLIP model)"),nAe.forEach(t),Yho=i($),hp=n($,"LI",{});var sAe=s(hp);tse=n(sAe,"STRONG",{});var jYr=s(tse);Kho=r(jYr,"convbert"),jYr.forEach(t),Zho=r(sAe," \u2014 "),CI=n(sAe,"A",{href:!0});var DYr=s(CI);epo=r(DYr,"ConvBertModel"),DYr.forEach(t),opo=r(sAe," (ConvBERT model)"),sAe.forEach(t),rpo=i($),pp=n($,"LI",{});var lAe=s(pp);ase=n(lAe,"STRONG",{});var GYr=s(ase);tpo=r(GYr,"convnext"),GYr.forEach(t),apo=r(lAe," \u2014 "),wI=n(lAe,"A",{href:!0});var OYr=s(wI);npo=r(OYr,"ConvNextModel"),OYr.forEach(t),spo=r(lAe," (ConvNext model)"),lAe.forEach(t),lpo=i($),_p=n($,"LI",{});var iAe=s(_p);nse=n(iAe,"STRONG",{});var VYr=s(nse);ipo=r(VYr,"ctrl"),VYr.forEach(t),dpo=r(iAe," \u2014 "),AI=n(iAe,"A",{href:!0});var XYr=s(AI);cpo=r(XYr,"CTRLModel"),XYr.forEach(t),fpo=r(iAe," (CTRL model)"),iAe.forEach(t),mpo=i($),up=n($,"LI",{});var dAe=s(up);sse=n(dAe,"STRONG",{});var zYr=s(sse);gpo=r(zYr,"data2vec-audio"),zYr.forEach(t),hpo=r(dAe," \u2014 "),yI=n(dAe,"A",{href:!0});var WYr=s(yI);ppo=r(WYr,"Data2VecAudioModel"),WYr.forEach(t),_po=r(dAe," (Data2VecAudio model)"),dAe.forEach(t),upo=i($),bp=n($,"LI",{});var cAe=s(bp);lse=n(cAe,"STRONG",{});var QYr=s(lse);bpo=r(QYr,"data2vec-text"),QYr.forEach(t),vpo=r(cAe," \u2014 "),LI=n(cAe,"A",{href:!0});var HYr=s(LI);Fpo=r(HYr,"Data2VecTextModel"),HYr.forEach(t),Tpo=r(cAe," (Data2VecText model)"),cAe.forEach(t),Mpo=i($),vp=n($,"LI",{});var fAe=s(vp);ise=n(fAe,"STRONG",{});var UYr=s(ise);Epo=r(UYr,"data2vec-vision"),UYr.forEach(t),Cpo=r(fAe," \u2014 "),xI=n(fAe,"A",{href:!0});var JYr=s(xI);wpo=r(JYr,"Data2VecVisionModel"),JYr.forEach(t),Apo=r(fAe," (Data2VecVision model)"),fAe.forEach(t),ypo=i($),Fp=n($,"LI",{});var mAe=s(Fp);dse=n(mAe,"STRONG",{});var YYr=s(dse);Lpo=r(YYr,"deberta"),YYr.forEach(t),xpo=r(mAe," \u2014 "),$I=n(mAe,"A",{href:!0});var KYr=s($I);$po=r(KYr,"DebertaModel"),KYr.forEach(t),kpo=r(mAe," (DeBERTa model)"),mAe.forEach(t),Spo=i($),Tp=n($,"LI",{});var gAe=s(Tp);cse=n(gAe,"STRONG",{});var ZYr=s(cse);Rpo=r(ZYr,"deberta-v2"),ZYr.forEach(t),Bpo=r(gAe," \u2014 "),kI=n(gAe,"A",{href:!0});var eKr=s(kI);Ppo=r(eKr,"DebertaV2Model"),eKr.forEach(t),Ipo=r(gAe," (DeBERTa-v2 model)"),gAe.forEach(t),qpo=i($),Mp=n($,"LI",{});var hAe=s(Mp);fse=n(hAe,"STRONG",{});var oKr=s(fse);Npo=r(oKr,"decision_transformer"),oKr.forEach(t),jpo=r(hAe," \u2014 "),SI=n(hAe,"A",{href:!0});var rKr=s(SI);Dpo=r(rKr,"DecisionTransformerModel"),rKr.forEach(t),Gpo=r(hAe," (Decision Transformer model)"),hAe.forEach(t),Opo=i($),Ep=n($,"LI",{});var pAe=s(Ep);mse=n(pAe,"STRONG",{});var tKr=s(mse);Vpo=r(tKr,"deit"),tKr.forEach(t),Xpo=r(pAe," \u2014 "),RI=n(pAe,"A",{href:!0});var aKr=s(RI);zpo=r(aKr,"DeiTModel"),aKr.forEach(t),Wpo=r(pAe," (DeiT model)"),pAe.forEach(t),Qpo=i($),Cp=n($,"LI",{});var _Ae=s(Cp);gse=n(_Ae,"STRONG",{});var nKr=s(gse);Hpo=r(nKr,"detr"),nKr.forEach(t),Upo=r(_Ae," \u2014 "),BI=n(_Ae,"A",{href:!0});var sKr=s(BI);Jpo=r(sKr,"DetrModel"),sKr.forEach(t),Ypo=r(_Ae," (DETR model)"),_Ae.forEach(t),Kpo=i($),wp=n($,"LI",{});var uAe=s(wp);hse=n(uAe,"STRONG",{});var lKr=s(hse);Zpo=r(lKr,"distilbert"),lKr.forEach(t),e_o=r(uAe," \u2014 "),PI=n(uAe,"A",{href:!0});var iKr=s(PI);o_o=r(iKr,"DistilBertModel"),iKr.forEach(t),r_o=r(uAe," (DistilBERT model)"),uAe.forEach(t),t_o=i($),Ap=n($,"LI",{});var bAe=s(Ap);pse=n(bAe,"STRONG",{});var dKr=s(pse);a_o=r(dKr,"dpr"),dKr.forEach(t),n_o=r(bAe," \u2014 "),II=n(bAe,"A",{href:!0});var cKr=s(II);s_o=r(cKr,"DPRQuestionEncoder"),cKr.forEach(t),l_o=r(bAe," (DPR model)"),bAe.forEach(t),i_o=i($),yp=n($,"LI",{});var vAe=s(yp);_se=n(vAe,"STRONG",{});var fKr=s(_se);d_o=r(fKr,"dpt"),fKr.forEach(t),c_o=r(vAe," \u2014 "),qI=n(vAe,"A",{href:!0});var mKr=s(qI);f_o=r(mKr,"DPTModel"),mKr.forEach(t),m_o=r(vAe," (DPT model)"),vAe.forEach(t),g_o=i($),Lp=n($,"LI",{});var FAe=s(Lp);use=n(FAe,"STRONG",{});var gKr=s(use);h_o=r(gKr,"electra"),gKr.forEach(t),p_o=r(FAe," \u2014 "),NI=n(FAe,"A",{href:!0});var hKr=s(NI);__o=r(hKr,"ElectraModel"),hKr.forEach(t),u_o=r(FAe," (ELECTRA model)"),FAe.forEach(t),b_o=i($),xp=n($,"LI",{});var TAe=s(xp);bse=n(TAe,"STRONG",{});var pKr=s(bse);v_o=r(pKr,"flaubert"),pKr.forEach(t),F_o=r(TAe," \u2014 "),jI=n(TAe,"A",{href:!0});var _Kr=s(jI);T_o=r(_Kr,"FlaubertModel"),_Kr.forEach(t),M_o=r(TAe," (FlauBERT model)"),TAe.forEach(t),E_o=i($),$p=n($,"LI",{});var MAe=s($p);vse=n(MAe,"STRONG",{});var uKr=s(vse);C_o=r(uKr,"flava"),uKr.forEach(t),w_o=r(MAe," \u2014 "),DI=n(MAe,"A",{href:!0});var bKr=s(DI);A_o=r(bKr,"FlavaModel"),bKr.forEach(t),y_o=r(MAe," (Flava model)"),MAe.forEach(t),L_o=i($),kp=n($,"LI",{});var EAe=s(kp);Fse=n(EAe,"STRONG",{});var vKr=s(Fse);x_o=r(vKr,"fnet"),vKr.forEach(t),$_o=r(EAe," \u2014 "),GI=n(EAe,"A",{href:!0});var FKr=s(GI);k_o=r(FKr,"FNetModel"),FKr.forEach(t),S_o=r(EAe," (FNet model)"),EAe.forEach(t),R_o=i($),Sp=n($,"LI",{});var CAe=s(Sp);Tse=n(CAe,"STRONG",{});var TKr=s(Tse);B_o=r(TKr,"fsmt"),TKr.forEach(t),P_o=r(CAe," \u2014 "),OI=n(CAe,"A",{href:!0});var MKr=s(OI);I_o=r(MKr,"FSMTModel"),MKr.forEach(t),q_o=r(CAe," (FairSeq Machine-Translation model)"),CAe.forEach(t),N_o=i($),Rs=n($,"LI",{});var x$=s(Rs);Mse=n(x$,"STRONG",{});var EKr=s(Mse);j_o=r(EKr,"funnel"),EKr.forEach(t),D_o=r(x$," \u2014 "),VI=n(x$,"A",{href:!0});var CKr=s(VI);G_o=r(CKr,"FunnelModel"),CKr.forEach(t),O_o=r(x$," or "),XI=n(x$,"A",{href:!0});var wKr=s(XI);V_o=r(wKr,"FunnelBaseModel"),wKr.forEach(t),X_o=r(x$," (Funnel Transformer model)"),x$.forEach(t),z_o=i($),Rp=n($,"LI",{});var wAe=s(Rp);Ese=n(wAe,"STRONG",{});var AKr=s(Ese);W_o=r(AKr,"glpn"),AKr.forEach(t),Q_o=r(wAe," \u2014 "),zI=n(wAe,"A",{href:!0});var yKr=s(zI);H_o=r(yKr,"GLPNModel"),yKr.forEach(t),U_o=r(wAe," (GLPN model)"),wAe.forEach(t),J_o=i($),Bp=n($,"LI",{});var AAe=s(Bp);Cse=n(AAe,"STRONG",{});var LKr=s(Cse);Y_o=r(LKr,"gpt2"),LKr.forEach(t),K_o=r(AAe," \u2014 "),WI=n(AAe,"A",{href:!0});var xKr=s(WI);Z_o=r(xKr,"GPT2Model"),xKr.forEach(t),euo=r(AAe," (OpenAI GPT-2 model)"),AAe.forEach(t),ouo=i($),Pp=n($,"LI",{});var yAe=s(Pp);wse=n(yAe,"STRONG",{});var $Kr=s(wse);ruo=r($Kr,"gpt_neo"),$Kr.forEach(t),tuo=r(yAe," \u2014 "),QI=n(yAe,"A",{href:!0});var kKr=s(QI);auo=r(kKr,"GPTNeoModel"),kKr.forEach(t),nuo=r(yAe," (GPT Neo model)"),yAe.forEach(t),suo=i($),Ip=n($,"LI",{});var LAe=s(Ip);Ase=n(LAe,"STRONG",{});var SKr=s(Ase);luo=r(SKr,"gptj"),SKr.forEach(t),iuo=r(LAe," \u2014 "),HI=n(LAe,"A",{href:!0});var RKr=s(HI);duo=r(RKr,"GPTJModel"),RKr.forEach(t),cuo=r(LAe," (GPT-J model)"),LAe.forEach(t),fuo=i($),qp=n($,"LI",{});var xAe=s(qp);yse=n(xAe,"STRONG",{});var BKr=s(yse);muo=r(BKr,"hubert"),BKr.forEach(t),guo=r(xAe," \u2014 "),UI=n(xAe,"A",{href:!0});var PKr=s(UI);huo=r(PKr,"HubertModel"),PKr.forEach(t),puo=r(xAe," (Hubert model)"),xAe.forEach(t),_uo=i($),Np=n($,"LI",{});var $Ae=s(Np);Lse=n($Ae,"STRONG",{});var IKr=s(Lse);uuo=r(IKr,"ibert"),IKr.forEach(t),buo=r($Ae," \u2014 "),JI=n($Ae,"A",{href:!0});var qKr=s(JI);vuo=r(qKr,"IBertModel"),qKr.forEach(t),Fuo=r($Ae," (I-BERT model)"),$Ae.forEach(t),Tuo=i($),jp=n($,"LI",{});var kAe=s(jp);xse=n(kAe,"STRONG",{});var NKr=s(xse);Muo=r(NKr,"imagegpt"),NKr.forEach(t),Euo=r(kAe," \u2014 "),YI=n(kAe,"A",{href:!0});var jKr=s(YI);Cuo=r(jKr,"ImageGPTModel"),jKr.forEach(t),wuo=r(kAe," (ImageGPT model)"),kAe.forEach(t),Auo=i($),Dp=n($,"LI",{});var SAe=s(Dp);$se=n(SAe,"STRONG",{});var DKr=s($se);yuo=r(DKr,"layoutlm"),DKr.forEach(t),Luo=r(SAe," \u2014 "),KI=n(SAe,"A",{href:!0});var GKr=s(KI);xuo=r(GKr,"LayoutLMModel"),GKr.forEach(t),$uo=r(SAe," (LayoutLM model)"),SAe.forEach(t),kuo=i($),Gp=n($,"LI",{});var RAe=s(Gp);kse=n(RAe,"STRONG",{});var OKr=s(kse);Suo=r(OKr,"layoutlmv2"),OKr.forEach(t),Ruo=r(RAe," \u2014 "),ZI=n(RAe,"A",{href:!0});var VKr=s(ZI);Buo=r(VKr,"LayoutLMv2Model"),VKr.forEach(t),Puo=r(RAe," (LayoutLMv2 model)"),RAe.forEach(t),Iuo=i($),Op=n($,"LI",{});var BAe=s(Op);Sse=n(BAe,"STRONG",{});var XKr=s(Sse);quo=r(XKr,"led"),XKr.forEach(t),Nuo=r(BAe," \u2014 "),eq=n(BAe,"A",{href:!0});var zKr=s(eq);juo=r(zKr,"LEDModel"),zKr.forEach(t),Duo=r(BAe," (LED model)"),BAe.forEach(t),Guo=i($),Vp=n($,"LI",{});var PAe=s(Vp);Rse=n(PAe,"STRONG",{});var WKr=s(Rse);Ouo=r(WKr,"longformer"),WKr.forEach(t),Vuo=r(PAe," \u2014 "),oq=n(PAe,"A",{href:!0});var QKr=s(oq);Xuo=r(QKr,"LongformerModel"),QKr.forEach(t),zuo=r(PAe," (Longformer model)"),PAe.forEach(t),Wuo=i($),Xp=n($,"LI",{});var IAe=s(Xp);Bse=n(IAe,"STRONG",{});var HKr=s(Bse);Quo=r(HKr,"luke"),HKr.forEach(t),Huo=r(IAe," \u2014 "),rq=n(IAe,"A",{href:!0});var UKr=s(rq);Uuo=r(UKr,"LukeModel"),UKr.forEach(t),Juo=r(IAe," (LUKE model)"),IAe.forEach(t),Yuo=i($),zp=n($,"LI",{});var qAe=s(zp);Pse=n(qAe,"STRONG",{});var JKr=s(Pse);Kuo=r(JKr,"lxmert"),JKr.forEach(t),Zuo=r(qAe," \u2014 "),tq=n(qAe,"A",{href:!0});var YKr=s(tq);e2o=r(YKr,"LxmertModel"),YKr.forEach(t),o2o=r(qAe," (LXMERT model)"),qAe.forEach(t),r2o=i($),Wp=n($,"LI",{});var NAe=s(Wp);Ise=n(NAe,"STRONG",{});var KKr=s(Ise);t2o=r(KKr,"m2m_100"),KKr.forEach(t),a2o=r(NAe," \u2014 "),aq=n(NAe,"A",{href:!0});var ZKr=s(aq);n2o=r(ZKr,"M2M100Model"),ZKr.forEach(t),s2o=r(NAe," (M2M100 model)"),NAe.forEach(t),l2o=i($),Qp=n($,"LI",{});var jAe=s(Qp);qse=n(jAe,"STRONG",{});var eZr=s(qse);i2o=r(eZr,"marian"),eZr.forEach(t),d2o=r(jAe," \u2014 "),nq=n(jAe,"A",{href:!0});var oZr=s(nq);c2o=r(oZr,"MarianModel"),oZr.forEach(t),f2o=r(jAe," (Marian model)"),jAe.forEach(t),m2o=i($),Hp=n($,"LI",{});var DAe=s(Hp);Nse=n(DAe,"STRONG",{});var rZr=s(Nse);g2o=r(rZr,"maskformer"),rZr.forEach(t),h2o=r(DAe," \u2014 "),sq=n(DAe,"A",{href:!0});var tZr=s(sq);p2o=r(tZr,"MaskFormerModel"),tZr.forEach(t),_2o=r(DAe," (MaskFormer model)"),DAe.forEach(t),u2o=i($),Up=n($,"LI",{});var GAe=s(Up);jse=n(GAe,"STRONG",{});var aZr=s(jse);b2o=r(aZr,"mbart"),aZr.forEach(t),v2o=r(GAe," \u2014 "),lq=n(GAe,"A",{href:!0});var nZr=s(lq);F2o=r(nZr,"MBartModel"),nZr.forEach(t),T2o=r(GAe," (mBART model)"),GAe.forEach(t),M2o=i($),Jp=n($,"LI",{});var OAe=s(Jp);Dse=n(OAe,"STRONG",{});var sZr=s(Dse);E2o=r(sZr,"megatron-bert"),sZr.forEach(t),C2o=r(OAe," \u2014 "),iq=n(OAe,"A",{href:!0});var lZr=s(iq);w2o=r(lZr,"MegatronBertModel"),lZr.forEach(t),A2o=r(OAe," (MegatronBert model)"),OAe.forEach(t),y2o=i($),Yp=n($,"LI",{});var VAe=s(Yp);Gse=n(VAe,"STRONG",{});var iZr=s(Gse);L2o=r(iZr,"mobilebert"),iZr.forEach(t),x2o=r(VAe," \u2014 "),dq=n(VAe,"A",{href:!0});var dZr=s(dq);$2o=r(dZr,"MobileBertModel"),dZr.forEach(t),k2o=r(VAe," (MobileBERT model)"),VAe.forEach(t),S2o=i($),Kp=n($,"LI",{});var XAe=s(Kp);Ose=n(XAe,"STRONG",{});var cZr=s(Ose);R2o=r(cZr,"mpnet"),cZr.forEach(t),B2o=r(XAe," \u2014 "),cq=n(XAe,"A",{href:!0});var fZr=s(cq);P2o=r(fZr,"MPNetModel"),fZr.forEach(t),I2o=r(XAe," (MPNet model)"),XAe.forEach(t),q2o=i($),Zp=n($,"LI",{});var zAe=s(Zp);Vse=n(zAe,"STRONG",{});var mZr=s(Vse);N2o=r(mZr,"mt5"),mZr.forEach(t),j2o=r(zAe," \u2014 "),fq=n(zAe,"A",{href:!0});var gZr=s(fq);D2o=r(gZr,"MT5Model"),gZr.forEach(t),G2o=r(zAe," (mT5 model)"),zAe.forEach(t),O2o=i($),e_=n($,"LI",{});var WAe=s(e_);Xse=n(WAe,"STRONG",{});var hZr=s(Xse);V2o=r(hZr,"nystromformer"),hZr.forEach(t),X2o=r(WAe," \u2014 "),mq=n(WAe,"A",{href:!0});var pZr=s(mq);z2o=r(pZr,"NystromformerModel"),pZr.forEach(t),W2o=r(WAe," (Nystromformer model)"),WAe.forEach(t),Q2o=i($),o_=n($,"LI",{});var QAe=s(o_);zse=n(QAe,"STRONG",{});var _Zr=s(zse);H2o=r(_Zr,"openai-gpt"),_Zr.forEach(t),U2o=r(QAe," \u2014 "),gq=n(QAe,"A",{href:!0});var uZr=s(gq);J2o=r(uZr,"OpenAIGPTModel"),uZr.forEach(t),Y2o=r(QAe," (OpenAI GPT model)"),QAe.forEach(t),K2o=i($),r_=n($,"LI",{});var HAe=s(r_);Wse=n(HAe,"STRONG",{});var bZr=s(Wse);Z2o=r(bZr,"opt"),bZr.forEach(t),e1o=r(HAe," \u2014 "),hq=n(HAe,"A",{href:!0});var vZr=s(hq);o1o=r(vZr,"OPTModel"),vZr.forEach(t),r1o=r(HAe," (OPT model)"),HAe.forEach(t),t1o=i($),t_=n($,"LI",{});var UAe=s(t_);Qse=n(UAe,"STRONG",{});var FZr=s(Qse);a1o=r(FZr,"pegasus"),FZr.forEach(t),n1o=r(UAe," \u2014 "),pq=n(UAe,"A",{href:!0});var TZr=s(pq);s1o=r(TZr,"PegasusModel"),TZr.forEach(t),l1o=r(UAe," (Pegasus model)"),UAe.forEach(t),i1o=i($),a_=n($,"LI",{});var JAe=s(a_);Hse=n(JAe,"STRONG",{});var MZr=s(Hse);d1o=r(MZr,"perceiver"),MZr.forEach(t),c1o=r(JAe," \u2014 "),_q=n(JAe,"A",{href:!0});var EZr=s(_q);f1o=r(EZr,"PerceiverModel"),EZr.forEach(t),m1o=r(JAe," (Perceiver model)"),JAe.forEach(t),g1o=i($),n_=n($,"LI",{});var YAe=s(n_);Use=n(YAe,"STRONG",{});var CZr=s(Use);h1o=r(CZr,"plbart"),CZr.forEach(t),p1o=r(YAe," \u2014 "),uq=n(YAe,"A",{href:!0});var wZr=s(uq);_1o=r(wZr,"PLBartModel"),wZr.forEach(t),u1o=r(YAe," (PLBart model)"),YAe.forEach(t),b1o=i($),s_=n($,"LI",{});var KAe=s(s_);Jse=n(KAe,"STRONG",{});var AZr=s(Jse);v1o=r(AZr,"poolformer"),AZr.forEach(t),F1o=r(KAe," \u2014 "),bq=n(KAe,"A",{href:!0});var yZr=s(bq);T1o=r(yZr,"PoolFormerModel"),yZr.forEach(t),M1o=r(KAe," (PoolFormer model)"),KAe.forEach(t),E1o=i($),l_=n($,"LI",{});var ZAe=s(l_);Yse=n(ZAe,"STRONG",{});var LZr=s(Yse);C1o=r(LZr,"prophetnet"),LZr.forEach(t),w1o=r(ZAe," \u2014 "),vq=n(ZAe,"A",{href:!0});var xZr=s(vq);A1o=r(xZr,"ProphetNetModel"),xZr.forEach(t),y1o=r(ZAe," (ProphetNet model)"),ZAe.forEach(t),L1o=i($),i_=n($,"LI",{});var e6e=s(i_);Kse=n(e6e,"STRONG",{});var $Zr=s(Kse);x1o=r($Zr,"qdqbert"),$Zr.forEach(t),$1o=r(e6e," \u2014 "),Fq=n(e6e,"A",{href:!0});var kZr=s(Fq);k1o=r(kZr,"QDQBertModel"),kZr.forEach(t),S1o=r(e6e," (QDQBert model)"),e6e.forEach(t),R1o=i($),d_=n($,"LI",{});var o6e=s(d_);Zse=n(o6e,"STRONG",{});var SZr=s(Zse);B1o=r(SZr,"reformer"),SZr.forEach(t),P1o=r(o6e," \u2014 "),Tq=n(o6e,"A",{href:!0});var RZr=s(Tq);I1o=r(RZr,"ReformerModel"),RZr.forEach(t),q1o=r(o6e," (Reformer model)"),o6e.forEach(t),N1o=i($),c_=n($,"LI",{});var r6e=s(c_);ele=n(r6e,"STRONG",{});var BZr=s(ele);j1o=r(BZr,"regnet"),BZr.forEach(t),D1o=r(r6e," \u2014 "),Mq=n(r6e,"A",{href:!0});var PZr=s(Mq);G1o=r(PZr,"RegNetModel"),PZr.forEach(t),O1o=r(r6e," (RegNet model)"),r6e.forEach(t),V1o=i($),f_=n($,"LI",{});var t6e=s(f_);ole=n(t6e,"STRONG",{});var IZr=s(ole);X1o=r(IZr,"rembert"),IZr.forEach(t),z1o=r(t6e," \u2014 "),Eq=n(t6e,"A",{href:!0});var qZr=s(Eq);W1o=r(qZr,"RemBertModel"),qZr.forEach(t),Q1o=r(t6e," (RemBERT model)"),t6e.forEach(t),H1o=i($),m_=n($,"LI",{});var a6e=s(m_);rle=n(a6e,"STRONG",{});var NZr=s(rle);U1o=r(NZr,"resnet"),NZr.forEach(t),J1o=r(a6e," \u2014 "),Cq=n(a6e,"A",{href:!0});var jZr=s(Cq);Y1o=r(jZr,"ResNetModel"),jZr.forEach(t),K1o=r(a6e," (ResNet model)"),a6e.forEach(t),Z1o=i($),g_=n($,"LI",{});var n6e=s(g_);tle=n(n6e,"STRONG",{});var DZr=s(tle);ebo=r(DZr,"retribert"),DZr.forEach(t),obo=r(n6e," \u2014 "),wq=n(n6e,"A",{href:!0});var GZr=s(wq);rbo=r(GZr,"RetriBertModel"),GZr.forEach(t),tbo=r(n6e," (RetriBERT model)"),n6e.forEach(t),abo=i($),h_=n($,"LI",{});var s6e=s(h_);ale=n(s6e,"STRONG",{});var OZr=s(ale);nbo=r(OZr,"roberta"),OZr.forEach(t),sbo=r(s6e," \u2014 "),Aq=n(s6e,"A",{href:!0});var VZr=s(Aq);lbo=r(VZr,"RobertaModel"),VZr.forEach(t),ibo=r(s6e," (RoBERTa model)"),s6e.forEach(t),dbo=i($),p_=n($,"LI",{});var l6e=s(p_);nle=n(l6e,"STRONG",{});var XZr=s(nle);cbo=r(XZr,"roformer"),XZr.forEach(t),fbo=r(l6e," \u2014 "),yq=n(l6e,"A",{href:!0});var zZr=s(yq);mbo=r(zZr,"RoFormerModel"),zZr.forEach(t),gbo=r(l6e," (RoFormer model)"),l6e.forEach(t),hbo=i($),__=n($,"LI",{});var i6e=s(__);sle=n(i6e,"STRONG",{});var WZr=s(sle);pbo=r(WZr,"segformer"),WZr.forEach(t),_bo=r(i6e," \u2014 "),Lq=n(i6e,"A",{href:!0});var QZr=s(Lq);ubo=r(QZr,"SegformerModel"),QZr.forEach(t),bbo=r(i6e," (SegFormer model)"),i6e.forEach(t),vbo=i($),u_=n($,"LI",{});var d6e=s(u_);lle=n(d6e,"STRONG",{});var HZr=s(lle);Fbo=r(HZr,"sew"),HZr.forEach(t),Tbo=r(d6e," \u2014 "),xq=n(d6e,"A",{href:!0});var UZr=s(xq);Mbo=r(UZr,"SEWModel"),UZr.forEach(t),Ebo=r(d6e," (SEW model)"),d6e.forEach(t),Cbo=i($),b_=n($,"LI",{});var c6e=s(b_);ile=n(c6e,"STRONG",{});var JZr=s(ile);wbo=r(JZr,"sew-d"),JZr.forEach(t),Abo=r(c6e," \u2014 "),$q=n(c6e,"A",{href:!0});var YZr=s($q);ybo=r(YZr,"SEWDModel"),YZr.forEach(t),Lbo=r(c6e," (SEW-D model)"),c6e.forEach(t),xbo=i($),v_=n($,"LI",{});var f6e=s(v_);dle=n(f6e,"STRONG",{});var KZr=s(dle);$bo=r(KZr,"speech_to_text"),KZr.forEach(t),kbo=r(f6e," \u2014 "),kq=n(f6e,"A",{href:!0});var ZZr=s(kq);Sbo=r(ZZr,"Speech2TextModel"),ZZr.forEach(t),Rbo=r(f6e," (Speech2Text model)"),f6e.forEach(t),Bbo=i($),F_=n($,"LI",{});var m6e=s(F_);cle=n(m6e,"STRONG",{});var eet=s(cle);Pbo=r(eet,"splinter"),eet.forEach(t),Ibo=r(m6e," \u2014 "),Sq=n(m6e,"A",{href:!0});var oet=s(Sq);qbo=r(oet,"SplinterModel"),oet.forEach(t),Nbo=r(m6e," (Splinter model)"),m6e.forEach(t),jbo=i($),T_=n($,"LI",{});var g6e=s(T_);fle=n(g6e,"STRONG",{});var ret=s(fle);Dbo=r(ret,"squeezebert"),ret.forEach(t),Gbo=r(g6e," \u2014 "),Rq=n(g6e,"A",{href:!0});var tet=s(Rq);Obo=r(tet,"SqueezeBertModel"),tet.forEach(t),Vbo=r(g6e," (SqueezeBERT model)"),g6e.forEach(t),Xbo=i($),M_=n($,"LI",{});var h6e=s(M_);mle=n(h6e,"STRONG",{});var aet=s(mle);zbo=r(aet,"swin"),aet.forEach(t),Wbo=r(h6e," \u2014 "),Bq=n(h6e,"A",{href:!0});var net=s(Bq);Qbo=r(net,"SwinModel"),net.forEach(t),Hbo=r(h6e," (Swin model)"),h6e.forEach(t),Ubo=i($),E_=n($,"LI",{});var p6e=s(E_);gle=n(p6e,"STRONG",{});var set=s(gle);Jbo=r(set,"t5"),set.forEach(t),Ybo=r(p6e," \u2014 "),Pq=n(p6e,"A",{href:!0});var iet=s(Pq);Kbo=r(iet,"T5Model"),iet.forEach(t),Zbo=r(p6e," (T5 model)"),p6e.forEach(t),evo=i($),C_=n($,"LI",{});var _6e=s(C_);hle=n(_6e,"STRONG",{});var det=s(hle);ovo=r(det,"tapas"),det.forEach(t),rvo=r(_6e," \u2014 "),Iq=n(_6e,"A",{href:!0});var cet=s(Iq);tvo=r(cet,"TapasModel"),cet.forEach(t),avo=r(_6e," (TAPAS model)"),_6e.forEach(t),nvo=i($),w_=n($,"LI",{});var u6e=s(w_);ple=n(u6e,"STRONG",{});var fet=s(ple);svo=r(fet,"trajectory_transformer"),fet.forEach(t),lvo=r(u6e," \u2014 "),qq=n(u6e,"A",{href:!0});var met=s(qq);ivo=r(met,"TrajectoryTransformerModel"),met.forEach(t),dvo=r(u6e," (Trajectory Transformer model)"),u6e.forEach(t),cvo=i($),A_=n($,"LI",{});var b6e=s(A_);_le=n(b6e,"STRONG",{});var get=s(_le);fvo=r(get,"transfo-xl"),get.forEach(t),mvo=r(b6e," \u2014 "),Nq=n(b6e,"A",{href:!0});var het=s(Nq);gvo=r(het,"TransfoXLModel"),het.forEach(t),hvo=r(b6e," (Transformer-XL model)"),b6e.forEach(t),pvo=i($),y_=n($,"LI",{});var v6e=s(y_);ule=n(v6e,"STRONG",{});var pet=s(ule);_vo=r(pet,"unispeech"),pet.forEach(t),uvo=r(v6e," \u2014 "),jq=n(v6e,"A",{href:!0});var _et=s(jq);bvo=r(_et,"UniSpeechModel"),_et.forEach(t),vvo=r(v6e," (UniSpeech model)"),v6e.forEach(t),Fvo=i($),L_=n($,"LI",{});var F6e=s(L_);ble=n(F6e,"STRONG",{});var uet=s(ble);Tvo=r(uet,"unispeech-sat"),uet.forEach(t),Mvo=r(F6e," \u2014 "),Dq=n(F6e,"A",{href:!0});var bet=s(Dq);Evo=r(bet,"UniSpeechSatModel"),bet.forEach(t),Cvo=r(F6e," (UniSpeechSat model)"),F6e.forEach(t),wvo=i($),x_=n($,"LI",{});var T6e=s(x_);vle=n(T6e,"STRONG",{});var vet=s(vle);Avo=r(vet,"van"),vet.forEach(t),yvo=r(T6e," \u2014 "),Gq=n(T6e,"A",{href:!0});var Fet=s(Gq);Lvo=r(Fet,"VanModel"),Fet.forEach(t),xvo=r(T6e," (VAN model)"),T6e.forEach(t),$vo=i($),$_=n($,"LI",{});var M6e=s($_);Fle=n(M6e,"STRONG",{});var Tet=s(Fle);kvo=r(Tet,"vilt"),Tet.forEach(t),Svo=r(M6e," \u2014 "),Oq=n(M6e,"A",{href:!0});var Met=s(Oq);Rvo=r(Met,"ViltModel"),Met.forEach(t),Bvo=r(M6e," (ViLT model)"),M6e.forEach(t),Pvo=i($),k_=n($,"LI",{});var E6e=s(k_);Tle=n(E6e,"STRONG",{});var Eet=s(Tle);Ivo=r(Eet,"vision-text-dual-encoder"),Eet.forEach(t),qvo=r(E6e," \u2014 "),Vq=n(E6e,"A",{href:!0});var Cet=s(Vq);Nvo=r(Cet,"VisionTextDualEncoderModel"),Cet.forEach(t),jvo=r(E6e," (VisionTextDualEncoder model)"),E6e.forEach(t),Dvo=i($),S_=n($,"LI",{});var C6e=s(S_);Mle=n(C6e,"STRONG",{});var wet=s(Mle);Gvo=r(wet,"visual_bert"),wet.forEach(t),Ovo=r(C6e," \u2014 "),Xq=n(C6e,"A",{href:!0});var Aet=s(Xq);Vvo=r(Aet,"VisualBertModel"),Aet.forEach(t),Xvo=r(C6e," (VisualBert model)"),C6e.forEach(t),zvo=i($),R_=n($,"LI",{});var w6e=s(R_);Ele=n(w6e,"STRONG",{});var yet=s(Ele);Wvo=r(yet,"vit"),yet.forEach(t),Qvo=r(w6e," \u2014 "),zq=n(w6e,"A",{href:!0});var Let=s(zq);Hvo=r(Let,"ViTModel"),Let.forEach(t),Uvo=r(w6e," (ViT model)"),w6e.forEach(t),Jvo=i($),B_=n($,"LI",{});var A6e=s(B_);Cle=n(A6e,"STRONG",{});var xet=s(Cle);Yvo=r(xet,"vit_mae"),xet.forEach(t),Kvo=r(A6e," \u2014 "),Wq=n(A6e,"A",{href:!0});var $et=s(Wq);Zvo=r($et,"ViTMAEModel"),$et.forEach(t),eFo=r(A6e," (ViTMAE model)"),A6e.forEach(t),oFo=i($),P_=n($,"LI",{});var y6e=s(P_);wle=n(y6e,"STRONG",{});var ket=s(wle);rFo=r(ket,"wav2vec2"),ket.forEach(t),tFo=r(y6e," \u2014 "),Qq=n(y6e,"A",{href:!0});var Set=s(Qq);aFo=r(Set,"Wav2Vec2Model"),Set.forEach(t),nFo=r(y6e," (Wav2Vec2 model)"),y6e.forEach(t),sFo=i($),I_=n($,"LI",{});var L6e=s(I_);Ale=n(L6e,"STRONG",{});var Ret=s(Ale);lFo=r(Ret,"wav2vec2-conformer"),Ret.forEach(t),iFo=r(L6e," \u2014 "),Hq=n(L6e,"A",{href:!0});var Bet=s(Hq);dFo=r(Bet,"Wav2Vec2ConformerModel"),Bet.forEach(t),cFo=r(L6e," (Wav2Vec2-Conformer model)"),L6e.forEach(t),fFo=i($),q_=n($,"LI",{});var x6e=s(q_);yle=n(x6e,"STRONG",{});var Pet=s(yle);mFo=r(Pet,"wavlm"),Pet.forEach(t),gFo=r(x6e," \u2014 "),Uq=n(x6e,"A",{href:!0});var Iet=s(Uq);hFo=r(Iet,"WavLMModel"),Iet.forEach(t),pFo=r(x6e," (WavLM model)"),x6e.forEach(t),_Fo=i($),N_=n($,"LI",{});var $6e=s(N_);Lle=n($6e,"STRONG",{});var qet=s(Lle);uFo=r(qet,"xglm"),qet.forEach(t),bFo=r($6e," \u2014 "),Jq=n($6e,"A",{href:!0});var Net=s(Jq);vFo=r(Net,"XGLMModel"),Net.forEach(t),FFo=r($6e," (XGLM model)"),$6e.forEach(t),TFo=i($),j_=n($,"LI",{});var k6e=s(j_);xle=n(k6e,"STRONG",{});var jet=s(xle);MFo=r(jet,"xlm"),jet.forEach(t),EFo=r(k6e," \u2014 "),Yq=n(k6e,"A",{href:!0});var Det=s(Yq);CFo=r(Det,"XLMModel"),Det.forEach(t),wFo=r(k6e," (XLM model)"),k6e.forEach(t),AFo=i($),D_=n($,"LI",{});var S6e=s(D_);$le=n(S6e,"STRONG",{});var Get=s($le);yFo=r(Get,"xlm-prophetnet"),Get.forEach(t),LFo=r(S6e," \u2014 "),Kq=n(S6e,"A",{href:!0});var Oet=s(Kq);xFo=r(Oet,"XLMProphetNetModel"),Oet.forEach(t),$Fo=r(S6e," (XLMProphetNet model)"),S6e.forEach(t),kFo=i($),G_=n($,"LI",{});var R6e=s(G_);kle=n(R6e,"STRONG",{});var Vet=s(kle);SFo=r(Vet,"xlm-roberta"),Vet.forEach(t),RFo=r(R6e," \u2014 "),Zq=n(R6e,"A",{href:!0});var Xet=s(Zq);BFo=r(Xet,"XLMRobertaModel"),Xet.forEach(t),PFo=r(R6e," (XLM-RoBERTa model)"),R6e.forEach(t),IFo=i($),O_=n($,"LI",{});var B6e=s(O_);Sle=n(B6e,"STRONG",{});var zet=s(Sle);qFo=r(zet,"xlm-roberta-xl"),zet.forEach(t),NFo=r(B6e," \u2014 "),eN=n(B6e,"A",{href:!0});var Wet=s(eN);jFo=r(Wet,"XLMRobertaXLModel"),Wet.forEach(t),DFo=r(B6e," (XLM-RoBERTa-XL model)"),B6e.forEach(t),GFo=i($),V_=n($,"LI",{});var P6e=s(V_);Rle=n(P6e,"STRONG",{});var Qet=s(Rle);OFo=r(Qet,"xlnet"),Qet.forEach(t),VFo=r(P6e," \u2014 "),oN=n(P6e,"A",{href:!0});var Het=s(oN);XFo=r(Het,"XLNetModel"),Het.forEach(t),zFo=r(P6e," (XLNet model)"),P6e.forEach(t),WFo=i($),X_=n($,"LI",{});var I6e=s(X_);Ble=n(I6e,"STRONG",{});var Uet=s(Ble);QFo=r(Uet,"yolos"),Uet.forEach(t),HFo=r(I6e," \u2014 "),rN=n(I6e,"A",{href:!0});var Jet=s(rN);UFo=r(Jet,"YolosModel"),Jet.forEach(t),JFo=r(I6e," (YOLOS model)"),I6e.forEach(t),YFo=i($),z_=n($,"LI",{});var q6e=s(z_);Ple=n(q6e,"STRONG",{});var Yet=s(Ple);KFo=r(Yet,"yoso"),Yet.forEach(t),ZFo=r(q6e," \u2014 "),tN=n(q6e,"A",{href:!0});var Ket=s(tN);e0o=r(Ket,"YosoModel"),Ket.forEach(t),o0o=r(q6e," (YOSO model)"),q6e.forEach(t),$.forEach(t),r0o=i(oa),W_=n(oa,"P",{});var N6e=s(W_);t0o=r(N6e,"The model is set in evaluation mode by default using "),Ile=n(N6e,"CODE",{});var Zet=s(Ile);a0o=r(Zet,"model.eval()"),Zet.forEach(t),n0o=r(N6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qle=n(N6e,"CODE",{});var eot=s(qle);s0o=r(eot,"model.train()"),eot.forEach(t),N6e.forEach(t),l0o=i(oa),T(Q_.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),bqe=i(f),yi=n(f,"H2",{class:!0});var Mje=s(yi);H_=n(Mje,"A",{id:!0,class:!0,href:!0});var oot=s(H_);Nle=n(oot,"SPAN",{});var rot=s(Nle);T(W6.$$.fragment,rot),rot.forEach(t),oot.forEach(t),i0o=i(Mje),jle=n(Mje,"SPAN",{});var tot=s(jle);d0o=r(tot,"AutoModelForPreTraining"),tot.forEach(t),Mje.forEach(t),vqe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(Q6.$$.fragment,Gs),c0o=i(Gs),Li=n(Gs,"P",{});var zK=s(Li);f0o=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aN=n(zK,"A",{href:!0});var aot=s(aN);m0o=r(aot,"from_pretrained()"),aot.forEach(t),g0o=r(zK," class method or the "),nN=n(zK,"A",{href:!0});var not=s(nN);h0o=r(not,"from_config()"),not.forEach(t),p0o=r(zK,` class
method.`),zK.forEach(t),_0o=i(Gs),H6=n(Gs,"P",{});var Eje=s(H6);u0o=r(Eje,"This class cannot be instantiated directly using "),Dle=n(Eje,"CODE",{});var sot=s(Dle);b0o=r(sot,"__init__()"),sot.forEach(t),v0o=r(Eje," (throws an error)."),Eje.forEach(t),F0o=i(Gs),at=n(Gs,"DIV",{class:!0});var Tw=s(at);T(U6.$$.fragment,Tw),T0o=i(Tw),Gle=n(Tw,"P",{});var lot=s(Gle);M0o=r(lot,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lot.forEach(t),E0o=i(Tw),xi=n(Tw,"P",{});var WK=s(xi);C0o=r(WK,`Note:
Loading a model from its configuration file does `),Ole=n(WK,"STRONG",{});var iot=s(Ole);w0o=r(iot,"not"),iot.forEach(t),A0o=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sN=n(WK,"A",{href:!0});var dot=s(sN);y0o=r(dot,"from_pretrained()"),dot.forEach(t),L0o=r(WK," to load the model weights."),WK.forEach(t),x0o=i(Tw),T(U_.$$.fragment,Tw),Tw.forEach(t),$0o=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(J6.$$.fragment,ra),k0o=i(ra),Vle=n(ra,"P",{});var cot=s(Vle);S0o=r(cot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cot.forEach(t),R0o=i(ra),xa=n(ra,"P",{});var Mw=s(xa);B0o=r(Mw,"The model class to instantiate is selected based on the "),Xle=n(Mw,"CODE",{});var fot=s(Xle);P0o=r(fot,"model_type"),fot.forEach(t),I0o=r(Mw,` property of the config object (either
passed as an argument or loaded from `),zle=n(Mw,"CODE",{});var mot=s(zle);q0o=r(mot,"pretrained_model_name_or_path"),mot.forEach(t),N0o=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=n(Mw,"CODE",{});var got=s(Wle);j0o=r(got,"pretrained_model_name_or_path"),got.forEach(t),D0o=r(Mw,":"),Mw.forEach(t),G0o=i(ra),G=n(ra,"UL",{});var O=s(G);J_=n(O,"LI",{});var j6e=s(J_);Qle=n(j6e,"STRONG",{});var hot=s(Qle);O0o=r(hot,"albert"),hot.forEach(t),V0o=r(j6e," \u2014 "),lN=n(j6e,"A",{href:!0});var pot=s(lN);X0o=r(pot,"AlbertForPreTraining"),pot.forEach(t),z0o=r(j6e," (ALBERT model)"),j6e.forEach(t),W0o=i(O),Y_=n(O,"LI",{});var D6e=s(Y_);Hle=n(D6e,"STRONG",{});var _ot=s(Hle);Q0o=r(_ot,"bart"),_ot.forEach(t),H0o=r(D6e," \u2014 "),iN=n(D6e,"A",{href:!0});var uot=s(iN);U0o=r(uot,"BartForConditionalGeneration"),uot.forEach(t),J0o=r(D6e," (BART model)"),D6e.forEach(t),Y0o=i(O),K_=n(O,"LI",{});var G6e=s(K_);Ule=n(G6e,"STRONG",{});var bot=s(Ule);K0o=r(bot,"bert"),bot.forEach(t),Z0o=r(G6e," \u2014 "),dN=n(G6e,"A",{href:!0});var vot=s(dN);eTo=r(vot,"BertForPreTraining"),vot.forEach(t),oTo=r(G6e," (BERT model)"),G6e.forEach(t),rTo=i(O),Z_=n(O,"LI",{});var O6e=s(Z_);Jle=n(O6e,"STRONG",{});var Fot=s(Jle);tTo=r(Fot,"big_bird"),Fot.forEach(t),aTo=r(O6e," \u2014 "),cN=n(O6e,"A",{href:!0});var Tot=s(cN);nTo=r(Tot,"BigBirdForPreTraining"),Tot.forEach(t),sTo=r(O6e," (BigBird model)"),O6e.forEach(t),lTo=i(O),eu=n(O,"LI",{});var V6e=s(eu);Yle=n(V6e,"STRONG",{});var Mot=s(Yle);iTo=r(Mot,"bloom"),Mot.forEach(t),dTo=r(V6e," \u2014 "),fN=n(V6e,"A",{href:!0});var Eot=s(fN);cTo=r(Eot,"BloomForCausalLM"),Eot.forEach(t),fTo=r(V6e," (Bloom model)"),V6e.forEach(t),mTo=i(O),ou=n(O,"LI",{});var X6e=s(ou);Kle=n(X6e,"STRONG",{});var Cot=s(Kle);gTo=r(Cot,"camembert"),Cot.forEach(t),hTo=r(X6e," \u2014 "),mN=n(X6e,"A",{href:!0});var wot=s(mN);pTo=r(wot,"CamembertForMaskedLM"),wot.forEach(t),_To=r(X6e," (CamemBERT model)"),X6e.forEach(t),uTo=i(O),ru=n(O,"LI",{});var z6e=s(ru);Zle=n(z6e,"STRONG",{});var Aot=s(Zle);bTo=r(Aot,"ctrl"),Aot.forEach(t),vTo=r(z6e," \u2014 "),gN=n(z6e,"A",{href:!0});var yot=s(gN);FTo=r(yot,"CTRLLMHeadModel"),yot.forEach(t),TTo=r(z6e," (CTRL model)"),z6e.forEach(t),MTo=i(O),tu=n(O,"LI",{});var W6e=s(tu);eie=n(W6e,"STRONG",{});var Lot=s(eie);ETo=r(Lot,"data2vec-text"),Lot.forEach(t),CTo=r(W6e," \u2014 "),hN=n(W6e,"A",{href:!0});var xot=s(hN);wTo=r(xot,"Data2VecTextForMaskedLM"),xot.forEach(t),ATo=r(W6e," (Data2VecText model)"),W6e.forEach(t),yTo=i(O),au=n(O,"LI",{});var Q6e=s(au);oie=n(Q6e,"STRONG",{});var $ot=s(oie);LTo=r($ot,"deberta"),$ot.forEach(t),xTo=r(Q6e," \u2014 "),pN=n(Q6e,"A",{href:!0});var kot=s(pN);$To=r(kot,"DebertaForMaskedLM"),kot.forEach(t),kTo=r(Q6e," (DeBERTa model)"),Q6e.forEach(t),STo=i(O),nu=n(O,"LI",{});var H6e=s(nu);rie=n(H6e,"STRONG",{});var Sot=s(rie);RTo=r(Sot,"deberta-v2"),Sot.forEach(t),BTo=r(H6e," \u2014 "),_N=n(H6e,"A",{href:!0});var Rot=s(_N);PTo=r(Rot,"DebertaV2ForMaskedLM"),Rot.forEach(t),ITo=r(H6e," (DeBERTa-v2 model)"),H6e.forEach(t),qTo=i(O),su=n(O,"LI",{});var U6e=s(su);tie=n(U6e,"STRONG",{});var Bot=s(tie);NTo=r(Bot,"distilbert"),Bot.forEach(t),jTo=r(U6e," \u2014 "),uN=n(U6e,"A",{href:!0});var Pot=s(uN);DTo=r(Pot,"DistilBertForMaskedLM"),Pot.forEach(t),GTo=r(U6e," (DistilBERT model)"),U6e.forEach(t),OTo=i(O),lu=n(O,"LI",{});var J6e=s(lu);aie=n(J6e,"STRONG",{});var Iot=s(aie);VTo=r(Iot,"electra"),Iot.forEach(t),XTo=r(J6e," \u2014 "),bN=n(J6e,"A",{href:!0});var qot=s(bN);zTo=r(qot,"ElectraForPreTraining"),qot.forEach(t),WTo=r(J6e," (ELECTRA model)"),J6e.forEach(t),QTo=i(O),iu=n(O,"LI",{});var Y6e=s(iu);nie=n(Y6e,"STRONG",{});var Not=s(nie);HTo=r(Not,"flaubert"),Not.forEach(t),UTo=r(Y6e," \u2014 "),vN=n(Y6e,"A",{href:!0});var jot=s(vN);JTo=r(jot,"FlaubertWithLMHeadModel"),jot.forEach(t),YTo=r(Y6e," (FlauBERT model)"),Y6e.forEach(t),KTo=i(O),du=n(O,"LI",{});var K6e=s(du);sie=n(K6e,"STRONG",{});var Dot=s(sie);ZTo=r(Dot,"flava"),Dot.forEach(t),e7o=r(K6e," \u2014 "),FN=n(K6e,"A",{href:!0});var Got=s(FN);o7o=r(Got,"FlavaForPreTraining"),Got.forEach(t),r7o=r(K6e," (Flava model)"),K6e.forEach(t),t7o=i(O),cu=n(O,"LI",{});var Z6e=s(cu);lie=n(Z6e,"STRONG",{});var Oot=s(lie);a7o=r(Oot,"fnet"),Oot.forEach(t),n7o=r(Z6e," \u2014 "),TN=n(Z6e,"A",{href:!0});var Vot=s(TN);s7o=r(Vot,"FNetForPreTraining"),Vot.forEach(t),l7o=r(Z6e," (FNet model)"),Z6e.forEach(t),i7o=i(O),fu=n(O,"LI",{});var eye=s(fu);iie=n(eye,"STRONG",{});var Xot=s(iie);d7o=r(Xot,"fsmt"),Xot.forEach(t),c7o=r(eye," \u2014 "),MN=n(eye,"A",{href:!0});var zot=s(MN);f7o=r(zot,"FSMTForConditionalGeneration"),zot.forEach(t),m7o=r(eye," (FairSeq Machine-Translation model)"),eye.forEach(t),g7o=i(O),mu=n(O,"LI",{});var oye=s(mu);die=n(oye,"STRONG",{});var Wot=s(die);h7o=r(Wot,"funnel"),Wot.forEach(t),p7o=r(oye," \u2014 "),EN=n(oye,"A",{href:!0});var Qot=s(EN);_7o=r(Qot,"FunnelForPreTraining"),Qot.forEach(t),u7o=r(oye," (Funnel Transformer model)"),oye.forEach(t),b7o=i(O),gu=n(O,"LI",{});var rye=s(gu);cie=n(rye,"STRONG",{});var Hot=s(cie);v7o=r(Hot,"gpt2"),Hot.forEach(t),F7o=r(rye," \u2014 "),CN=n(rye,"A",{href:!0});var Uot=s(CN);T7o=r(Uot,"GPT2LMHeadModel"),Uot.forEach(t),M7o=r(rye," (OpenAI GPT-2 model)"),rye.forEach(t),E7o=i(O),hu=n(O,"LI",{});var tye=s(hu);fie=n(tye,"STRONG",{});var Jot=s(fie);C7o=r(Jot,"ibert"),Jot.forEach(t),w7o=r(tye," \u2014 "),wN=n(tye,"A",{href:!0});var Yot=s(wN);A7o=r(Yot,"IBertForMaskedLM"),Yot.forEach(t),y7o=r(tye," (I-BERT model)"),tye.forEach(t),L7o=i(O),pu=n(O,"LI",{});var aye=s(pu);mie=n(aye,"STRONG",{});var Kot=s(mie);x7o=r(Kot,"layoutlm"),Kot.forEach(t),$7o=r(aye," \u2014 "),AN=n(aye,"A",{href:!0});var Zot=s(AN);k7o=r(Zot,"LayoutLMForMaskedLM"),Zot.forEach(t),S7o=r(aye," (LayoutLM model)"),aye.forEach(t),R7o=i(O),_u=n(O,"LI",{});var nye=s(_u);gie=n(nye,"STRONG",{});var ert=s(gie);B7o=r(ert,"longformer"),ert.forEach(t),P7o=r(nye," \u2014 "),yN=n(nye,"A",{href:!0});var ort=s(yN);I7o=r(ort,"LongformerForMaskedLM"),ort.forEach(t),q7o=r(nye," (Longformer model)"),nye.forEach(t),N7o=i(O),uu=n(O,"LI",{});var sye=s(uu);hie=n(sye,"STRONG",{});var rrt=s(hie);j7o=r(rrt,"lxmert"),rrt.forEach(t),D7o=r(sye," \u2014 "),LN=n(sye,"A",{href:!0});var trt=s(LN);G7o=r(trt,"LxmertForPreTraining"),trt.forEach(t),O7o=r(sye," (LXMERT model)"),sye.forEach(t),V7o=i(O),bu=n(O,"LI",{});var lye=s(bu);pie=n(lye,"STRONG",{});var art=s(pie);X7o=r(art,"megatron-bert"),art.forEach(t),z7o=r(lye," \u2014 "),xN=n(lye,"A",{href:!0});var nrt=s(xN);W7o=r(nrt,"MegatronBertForPreTraining"),nrt.forEach(t),Q7o=r(lye," (MegatronBert model)"),lye.forEach(t),H7o=i(O),vu=n(O,"LI",{});var iye=s(vu);_ie=n(iye,"STRONG",{});var srt=s(_ie);U7o=r(srt,"mobilebert"),srt.forEach(t),J7o=r(iye," \u2014 "),$N=n(iye,"A",{href:!0});var lrt=s($N);Y7o=r(lrt,"MobileBertForPreTraining"),lrt.forEach(t),K7o=r(iye," (MobileBERT model)"),iye.forEach(t),Z7o=i(O),Fu=n(O,"LI",{});var dye=s(Fu);uie=n(dye,"STRONG",{});var irt=s(uie);eMo=r(irt,"mpnet"),irt.forEach(t),oMo=r(dye," \u2014 "),kN=n(dye,"A",{href:!0});var drt=s(kN);rMo=r(drt,"MPNetForMaskedLM"),drt.forEach(t),tMo=r(dye," (MPNet model)"),dye.forEach(t),aMo=i(O),Tu=n(O,"LI",{});var cye=s(Tu);bie=n(cye,"STRONG",{});var crt=s(bie);nMo=r(crt,"openai-gpt"),crt.forEach(t),sMo=r(cye," \u2014 "),SN=n(cye,"A",{href:!0});var frt=s(SN);lMo=r(frt,"OpenAIGPTLMHeadModel"),frt.forEach(t),iMo=r(cye," (OpenAI GPT model)"),cye.forEach(t),dMo=i(O),Mu=n(O,"LI",{});var fye=s(Mu);vie=n(fye,"STRONG",{});var mrt=s(vie);cMo=r(mrt,"retribert"),mrt.forEach(t),fMo=r(fye," \u2014 "),RN=n(fye,"A",{href:!0});var grt=s(RN);mMo=r(grt,"RetriBertModel"),grt.forEach(t),gMo=r(fye," (RetriBERT model)"),fye.forEach(t),hMo=i(O),Eu=n(O,"LI",{});var mye=s(Eu);Fie=n(mye,"STRONG",{});var hrt=s(Fie);pMo=r(hrt,"roberta"),hrt.forEach(t),_Mo=r(mye," \u2014 "),BN=n(mye,"A",{href:!0});var prt=s(BN);uMo=r(prt,"RobertaForMaskedLM"),prt.forEach(t),bMo=r(mye," (RoBERTa model)"),mye.forEach(t),vMo=i(O),Cu=n(O,"LI",{});var gye=s(Cu);Tie=n(gye,"STRONG",{});var _rt=s(Tie);FMo=r(_rt,"splinter"),_rt.forEach(t),TMo=r(gye," \u2014 "),PN=n(gye,"A",{href:!0});var urt=s(PN);MMo=r(urt,"SplinterForPreTraining"),urt.forEach(t),EMo=r(gye," (Splinter model)"),gye.forEach(t),CMo=i(O),wu=n(O,"LI",{});var hye=s(wu);Mie=n(hye,"STRONG",{});var brt=s(Mie);wMo=r(brt,"squeezebert"),brt.forEach(t),AMo=r(hye," \u2014 "),IN=n(hye,"A",{href:!0});var vrt=s(IN);yMo=r(vrt,"SqueezeBertForMaskedLM"),vrt.forEach(t),LMo=r(hye," (SqueezeBERT model)"),hye.forEach(t),xMo=i(O),Au=n(O,"LI",{});var pye=s(Au);Eie=n(pye,"STRONG",{});var Frt=s(Eie);$Mo=r(Frt,"t5"),Frt.forEach(t),kMo=r(pye," \u2014 "),qN=n(pye,"A",{href:!0});var Trt=s(qN);SMo=r(Trt,"T5ForConditionalGeneration"),Trt.forEach(t),RMo=r(pye," (T5 model)"),pye.forEach(t),BMo=i(O),yu=n(O,"LI",{});var _ye=s(yu);Cie=n(_ye,"STRONG",{});var Mrt=s(Cie);PMo=r(Mrt,"tapas"),Mrt.forEach(t),IMo=r(_ye," \u2014 "),NN=n(_ye,"A",{href:!0});var Ert=s(NN);qMo=r(Ert,"TapasForMaskedLM"),Ert.forEach(t),NMo=r(_ye," (TAPAS model)"),_ye.forEach(t),jMo=i(O),Lu=n(O,"LI",{});var uye=s(Lu);wie=n(uye,"STRONG",{});var Crt=s(wie);DMo=r(Crt,"transfo-xl"),Crt.forEach(t),GMo=r(uye," \u2014 "),jN=n(uye,"A",{href:!0});var wrt=s(jN);OMo=r(wrt,"TransfoXLLMHeadModel"),wrt.forEach(t),VMo=r(uye," (Transformer-XL model)"),uye.forEach(t),XMo=i(O),xu=n(O,"LI",{});var bye=s(xu);Aie=n(bye,"STRONG",{});var Art=s(Aie);zMo=r(Art,"unispeech"),Art.forEach(t),WMo=r(bye," \u2014 "),DN=n(bye,"A",{href:!0});var yrt=s(DN);QMo=r(yrt,"UniSpeechForPreTraining"),yrt.forEach(t),HMo=r(bye," (UniSpeech model)"),bye.forEach(t),UMo=i(O),$u=n(O,"LI",{});var vye=s($u);yie=n(vye,"STRONG",{});var Lrt=s(yie);JMo=r(Lrt,"unispeech-sat"),Lrt.forEach(t),YMo=r(vye," \u2014 "),GN=n(vye,"A",{href:!0});var xrt=s(GN);KMo=r(xrt,"UniSpeechSatForPreTraining"),xrt.forEach(t),ZMo=r(vye," (UniSpeechSat model)"),vye.forEach(t),e4o=i(O),ku=n(O,"LI",{});var Fye=s(ku);Lie=n(Fye,"STRONG",{});var $rt=s(Lie);o4o=r($rt,"visual_bert"),$rt.forEach(t),r4o=r(Fye," \u2014 "),ON=n(Fye,"A",{href:!0});var krt=s(ON);t4o=r(krt,"VisualBertForPreTraining"),krt.forEach(t),a4o=r(Fye," (VisualBert model)"),Fye.forEach(t),n4o=i(O),Su=n(O,"LI",{});var Tye=s(Su);xie=n(Tye,"STRONG",{});var Srt=s(xie);s4o=r(Srt,"vit_mae"),Srt.forEach(t),l4o=r(Tye," \u2014 "),VN=n(Tye,"A",{href:!0});var Rrt=s(VN);i4o=r(Rrt,"ViTMAEForPreTraining"),Rrt.forEach(t),d4o=r(Tye," (ViTMAE model)"),Tye.forEach(t),c4o=i(O),Ru=n(O,"LI",{});var Mye=s(Ru);$ie=n(Mye,"STRONG",{});var Brt=s($ie);f4o=r(Brt,"wav2vec2"),Brt.forEach(t),m4o=r(Mye," \u2014 "),XN=n(Mye,"A",{href:!0});var Prt=s(XN);g4o=r(Prt,"Wav2Vec2ForPreTraining"),Prt.forEach(t),h4o=r(Mye," (Wav2Vec2 model)"),Mye.forEach(t),p4o=i(O),Bu=n(O,"LI",{});var Eye=s(Bu);kie=n(Eye,"STRONG",{});var Irt=s(kie);_4o=r(Irt,"wav2vec2-conformer"),Irt.forEach(t),u4o=r(Eye," \u2014 "),zN=n(Eye,"A",{href:!0});var qrt=s(zN);b4o=r(qrt,"Wav2Vec2ConformerForPreTraining"),qrt.forEach(t),v4o=r(Eye," (Wav2Vec2-Conformer model)"),Eye.forEach(t),F4o=i(O),Pu=n(O,"LI",{});var Cye=s(Pu);Sie=n(Cye,"STRONG",{});var Nrt=s(Sie);T4o=r(Nrt,"xlm"),Nrt.forEach(t),M4o=r(Cye," \u2014 "),WN=n(Cye,"A",{href:!0});var jrt=s(WN);E4o=r(jrt,"XLMWithLMHeadModel"),jrt.forEach(t),C4o=r(Cye," (XLM model)"),Cye.forEach(t),w4o=i(O),Iu=n(O,"LI",{});var wye=s(Iu);Rie=n(wye,"STRONG",{});var Drt=s(Rie);A4o=r(Drt,"xlm-roberta"),Drt.forEach(t),y4o=r(wye," \u2014 "),QN=n(wye,"A",{href:!0});var Grt=s(QN);L4o=r(Grt,"XLMRobertaForMaskedLM"),Grt.forEach(t),x4o=r(wye," (XLM-RoBERTa model)"),wye.forEach(t),$4o=i(O),qu=n(O,"LI",{});var Aye=s(qu);Bie=n(Aye,"STRONG",{});var Ort=s(Bie);k4o=r(Ort,"xlm-roberta-xl"),Ort.forEach(t),S4o=r(Aye," \u2014 "),HN=n(Aye,"A",{href:!0});var Vrt=s(HN);R4o=r(Vrt,"XLMRobertaXLForMaskedLM"),Vrt.forEach(t),B4o=r(Aye," (XLM-RoBERTa-XL model)"),Aye.forEach(t),P4o=i(O),Nu=n(O,"LI",{});var yye=s(Nu);Pie=n(yye,"STRONG",{});var Xrt=s(Pie);I4o=r(Xrt,"xlnet"),Xrt.forEach(t),q4o=r(yye," \u2014 "),UN=n(yye,"A",{href:!0});var zrt=s(UN);N4o=r(zrt,"XLNetLMHeadModel"),zrt.forEach(t),j4o=r(yye," (XLNet model)"),yye.forEach(t),O.forEach(t),D4o=i(ra),ju=n(ra,"P",{});var Lye=s(ju);G4o=r(Lye,"The model is set in evaluation mode by default using "),Iie=n(Lye,"CODE",{});var Wrt=s(Iie);O4o=r(Wrt,"model.eval()"),Wrt.forEach(t),V4o=r(Lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=n(Lye,"CODE",{});var Qrt=s(qie);X4o=r(Qrt,"model.train()"),Qrt.forEach(t),Lye.forEach(t),z4o=i(ra),T(Du.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),Fqe=i(f),$i=n(f,"H2",{class:!0});var Cje=s($i);Gu=n(Cje,"A",{id:!0,class:!0,href:!0});var Hrt=s(Gu);Nie=n(Hrt,"SPAN",{});var Urt=s(Nie);T(Y6.$$.fragment,Urt),Urt.forEach(t),Hrt.forEach(t),W4o=i(Cje),jie=n(Cje,"SPAN",{});var Jrt=s(jie);Q4o=r(Jrt,"AutoModelForCausalLM"),Jrt.forEach(t),Cje.forEach(t),Tqe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(K6.$$.fragment,Os),H4o=i(Os),ki=n(Os,"P",{});var QK=s(ki);U4o=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JN=n(QK,"A",{href:!0});var Yrt=s(JN);J4o=r(Yrt,"from_pretrained()"),Yrt.forEach(t),Y4o=r(QK," class method or the "),YN=n(QK,"A",{href:!0});var Krt=s(YN);K4o=r(Krt,"from_config()"),Krt.forEach(t),Z4o=r(QK,` class
method.`),QK.forEach(t),eEo=i(Os),Z6=n(Os,"P",{});var wje=s(Z6);oEo=r(wje,"This class cannot be instantiated directly using "),Die=n(wje,"CODE",{});var Zrt=s(Die);rEo=r(Zrt,"__init__()"),Zrt.forEach(t),tEo=r(wje," (throws an error)."),wje.forEach(t),aEo=i(Os),nt=n(Os,"DIV",{class:!0});var Ew=s(nt);T(ey.$$.fragment,Ew),nEo=i(Ew),Gie=n(Ew,"P",{});var ett=s(Gie);sEo=r(ett,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ett.forEach(t),lEo=i(Ew),Si=n(Ew,"P",{});var HK=s(Si);iEo=r(HK,`Note:
Loading a model from its configuration file does `),Oie=n(HK,"STRONG",{});var ott=s(Oie);dEo=r(ott,"not"),ott.forEach(t),cEo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=n(HK,"A",{href:!0});var rtt=s(KN);fEo=r(rtt,"from_pretrained()"),rtt.forEach(t),mEo=r(HK," to load the model weights."),HK.forEach(t),gEo=i(Ew),T(Ou.$$.fragment,Ew),Ew.forEach(t),hEo=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(oy.$$.fragment,ta),pEo=i(ta),Vie=n(ta,"P",{});var ttt=s(Vie);_Eo=r(ttt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ttt.forEach(t),uEo=i(ta),$a=n(ta,"P",{});var Cw=s($a);bEo=r(Cw,"The model class to instantiate is selected based on the "),Xie=n(Cw,"CODE",{});var att=s(Xie);vEo=r(att,"model_type"),att.forEach(t),FEo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),zie=n(Cw,"CODE",{});var ntt=s(zie);TEo=r(ntt,"pretrained_model_name_or_path"),ntt.forEach(t),MEo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=n(Cw,"CODE",{});var stt=s(Wie);EEo=r(stt,"pretrained_model_name_or_path"),stt.forEach(t),CEo=r(Cw,":"),Cw.forEach(t),wEo=i(ta),z=n(ta,"UL",{});var W=s(z);Vu=n(W,"LI",{});var xye=s(Vu);Qie=n(xye,"STRONG",{});var ltt=s(Qie);AEo=r(ltt,"bart"),ltt.forEach(t),yEo=r(xye," \u2014 "),ZN=n(xye,"A",{href:!0});var itt=s(ZN);LEo=r(itt,"BartForCausalLM"),itt.forEach(t),xEo=r(xye," (BART model)"),xye.forEach(t),$Eo=i(W),Xu=n(W,"LI",{});var $ye=s(Xu);Hie=n($ye,"STRONG",{});var dtt=s(Hie);kEo=r(dtt,"bert"),dtt.forEach(t),SEo=r($ye," \u2014 "),ej=n($ye,"A",{href:!0});var ctt=s(ej);REo=r(ctt,"BertLMHeadModel"),ctt.forEach(t),BEo=r($ye," (BERT model)"),$ye.forEach(t),PEo=i(W),zu=n(W,"LI",{});var kye=s(zu);Uie=n(kye,"STRONG",{});var ftt=s(Uie);IEo=r(ftt,"bert-generation"),ftt.forEach(t),qEo=r(kye," \u2014 "),oj=n(kye,"A",{href:!0});var mtt=s(oj);NEo=r(mtt,"BertGenerationDecoder"),mtt.forEach(t),jEo=r(kye," (Bert Generation model)"),kye.forEach(t),DEo=i(W),Wu=n(W,"LI",{});var Sye=s(Wu);Jie=n(Sye,"STRONG",{});var gtt=s(Jie);GEo=r(gtt,"big_bird"),gtt.forEach(t),OEo=r(Sye," \u2014 "),rj=n(Sye,"A",{href:!0});var htt=s(rj);VEo=r(htt,"BigBirdForCausalLM"),htt.forEach(t),XEo=r(Sye," (BigBird model)"),Sye.forEach(t),zEo=i(W),Qu=n(W,"LI",{});var Rye=s(Qu);Yie=n(Rye,"STRONG",{});var ptt=s(Yie);WEo=r(ptt,"bigbird_pegasus"),ptt.forEach(t),QEo=r(Rye," \u2014 "),tj=n(Rye,"A",{href:!0});var _tt=s(tj);HEo=r(_tt,"BigBirdPegasusForCausalLM"),_tt.forEach(t),UEo=r(Rye," (BigBirdPegasus model)"),Rye.forEach(t),JEo=i(W),Hu=n(W,"LI",{});var Bye=s(Hu);Kie=n(Bye,"STRONG",{});var utt=s(Kie);YEo=r(utt,"blenderbot"),utt.forEach(t),KEo=r(Bye," \u2014 "),aj=n(Bye,"A",{href:!0});var btt=s(aj);ZEo=r(btt,"BlenderbotForCausalLM"),btt.forEach(t),eCo=r(Bye," (Blenderbot model)"),Bye.forEach(t),oCo=i(W),Uu=n(W,"LI",{});var Pye=s(Uu);Zie=n(Pye,"STRONG",{});var vtt=s(Zie);rCo=r(vtt,"blenderbot-small"),vtt.forEach(t),tCo=r(Pye," \u2014 "),nj=n(Pye,"A",{href:!0});var Ftt=s(nj);aCo=r(Ftt,"BlenderbotSmallForCausalLM"),Ftt.forEach(t),nCo=r(Pye," (BlenderbotSmall model)"),Pye.forEach(t),sCo=i(W),Ju=n(W,"LI",{});var Iye=s(Ju);ede=n(Iye,"STRONG",{});var Ttt=s(ede);lCo=r(Ttt,"bloom"),Ttt.forEach(t),iCo=r(Iye," \u2014 "),sj=n(Iye,"A",{href:!0});var Mtt=s(sj);dCo=r(Mtt,"BloomForCausalLM"),Mtt.forEach(t),cCo=r(Iye," (Bloom model)"),Iye.forEach(t),fCo=i(W),Yu=n(W,"LI",{});var qye=s(Yu);ode=n(qye,"STRONG",{});var Ett=s(ode);mCo=r(Ett,"camembert"),Ett.forEach(t),gCo=r(qye," \u2014 "),lj=n(qye,"A",{href:!0});var Ctt=s(lj);hCo=r(Ctt,"CamembertForCausalLM"),Ctt.forEach(t),pCo=r(qye," (CamemBERT model)"),qye.forEach(t),_Co=i(W),Ku=n(W,"LI",{});var Nye=s(Ku);rde=n(Nye,"STRONG",{});var wtt=s(rde);uCo=r(wtt,"ctrl"),wtt.forEach(t),bCo=r(Nye," \u2014 "),ij=n(Nye,"A",{href:!0});var Att=s(ij);vCo=r(Att,"CTRLLMHeadModel"),Att.forEach(t),FCo=r(Nye," (CTRL model)"),Nye.forEach(t),TCo=i(W),Zu=n(W,"LI",{});var jye=s(Zu);tde=n(jye,"STRONG",{});var ytt=s(tde);MCo=r(ytt,"data2vec-text"),ytt.forEach(t),ECo=r(jye," \u2014 "),dj=n(jye,"A",{href:!0});var Ltt=s(dj);CCo=r(Ltt,"Data2VecTextForCausalLM"),Ltt.forEach(t),wCo=r(jye," (Data2VecText model)"),jye.forEach(t),ACo=i(W),e2=n(W,"LI",{});var Dye=s(e2);ade=n(Dye,"STRONG",{});var xtt=s(ade);yCo=r(xtt,"electra"),xtt.forEach(t),LCo=r(Dye," \u2014 "),cj=n(Dye,"A",{href:!0});var $tt=s(cj);xCo=r($tt,"ElectraForCausalLM"),$tt.forEach(t),$Co=r(Dye," (ELECTRA model)"),Dye.forEach(t),kCo=i(W),o2=n(W,"LI",{});var Gye=s(o2);nde=n(Gye,"STRONG",{});var ktt=s(nde);SCo=r(ktt,"gpt2"),ktt.forEach(t),RCo=r(Gye," \u2014 "),fj=n(Gye,"A",{href:!0});var Stt=s(fj);BCo=r(Stt,"GPT2LMHeadModel"),Stt.forEach(t),PCo=r(Gye," (OpenAI GPT-2 model)"),Gye.forEach(t),ICo=i(W),r2=n(W,"LI",{});var Oye=s(r2);sde=n(Oye,"STRONG",{});var Rtt=s(sde);qCo=r(Rtt,"gpt_neo"),Rtt.forEach(t),NCo=r(Oye," \u2014 "),mj=n(Oye,"A",{href:!0});var Btt=s(mj);jCo=r(Btt,"GPTNeoForCausalLM"),Btt.forEach(t),DCo=r(Oye," (GPT Neo model)"),Oye.forEach(t),GCo=i(W),t2=n(W,"LI",{});var Vye=s(t2);lde=n(Vye,"STRONG",{});var Ptt=s(lde);OCo=r(Ptt,"gptj"),Ptt.forEach(t),VCo=r(Vye," \u2014 "),gj=n(Vye,"A",{href:!0});var Itt=s(gj);XCo=r(Itt,"GPTJForCausalLM"),Itt.forEach(t),zCo=r(Vye," (GPT-J model)"),Vye.forEach(t),WCo=i(W),a2=n(W,"LI",{});var Xye=s(a2);ide=n(Xye,"STRONG",{});var qtt=s(ide);QCo=r(qtt,"marian"),qtt.forEach(t),HCo=r(Xye," \u2014 "),hj=n(Xye,"A",{href:!0});var Ntt=s(hj);UCo=r(Ntt,"MarianForCausalLM"),Ntt.forEach(t),JCo=r(Xye," (Marian model)"),Xye.forEach(t),YCo=i(W),n2=n(W,"LI",{});var zye=s(n2);dde=n(zye,"STRONG",{});var jtt=s(dde);KCo=r(jtt,"mbart"),jtt.forEach(t),ZCo=r(zye," \u2014 "),pj=n(zye,"A",{href:!0});var Dtt=s(pj);e5o=r(Dtt,"MBartForCausalLM"),Dtt.forEach(t),o5o=r(zye," (mBART model)"),zye.forEach(t),r5o=i(W),s2=n(W,"LI",{});var Wye=s(s2);cde=n(Wye,"STRONG",{});var Gtt=s(cde);t5o=r(Gtt,"megatron-bert"),Gtt.forEach(t),a5o=r(Wye," \u2014 "),_j=n(Wye,"A",{href:!0});var Ott=s(_j);n5o=r(Ott,"MegatronBertForCausalLM"),Ott.forEach(t),s5o=r(Wye," (MegatronBert model)"),Wye.forEach(t),l5o=i(W),l2=n(W,"LI",{});var Qye=s(l2);fde=n(Qye,"STRONG",{});var Vtt=s(fde);i5o=r(Vtt,"openai-gpt"),Vtt.forEach(t),d5o=r(Qye," \u2014 "),uj=n(Qye,"A",{href:!0});var Xtt=s(uj);c5o=r(Xtt,"OpenAIGPTLMHeadModel"),Xtt.forEach(t),f5o=r(Qye," (OpenAI GPT model)"),Qye.forEach(t),m5o=i(W),i2=n(W,"LI",{});var Hye=s(i2);mde=n(Hye,"STRONG",{});var ztt=s(mde);g5o=r(ztt,"opt"),ztt.forEach(t),h5o=r(Hye," \u2014 "),bj=n(Hye,"A",{href:!0});var Wtt=s(bj);p5o=r(Wtt,"OPTForCausalLM"),Wtt.forEach(t),_5o=r(Hye," (OPT model)"),Hye.forEach(t),u5o=i(W),d2=n(W,"LI",{});var Uye=s(d2);gde=n(Uye,"STRONG",{});var Qtt=s(gde);b5o=r(Qtt,"pegasus"),Qtt.forEach(t),v5o=r(Uye," \u2014 "),vj=n(Uye,"A",{href:!0});var Htt=s(vj);F5o=r(Htt,"PegasusForCausalLM"),Htt.forEach(t),T5o=r(Uye," (Pegasus model)"),Uye.forEach(t),M5o=i(W),c2=n(W,"LI",{});var Jye=s(c2);hde=n(Jye,"STRONG",{});var Utt=s(hde);E5o=r(Utt,"plbart"),Utt.forEach(t),C5o=r(Jye," \u2014 "),Fj=n(Jye,"A",{href:!0});var Jtt=s(Fj);w5o=r(Jtt,"PLBartForCausalLM"),Jtt.forEach(t),A5o=r(Jye," (PLBart model)"),Jye.forEach(t),y5o=i(W),f2=n(W,"LI",{});var Yye=s(f2);pde=n(Yye,"STRONG",{});var Ytt=s(pde);L5o=r(Ytt,"prophetnet"),Ytt.forEach(t),x5o=r(Yye," \u2014 "),Tj=n(Yye,"A",{href:!0});var Ktt=s(Tj);$5o=r(Ktt,"ProphetNetForCausalLM"),Ktt.forEach(t),k5o=r(Yye," (ProphetNet model)"),Yye.forEach(t),S5o=i(W),m2=n(W,"LI",{});var Kye=s(m2);_de=n(Kye,"STRONG",{});var Ztt=s(_de);R5o=r(Ztt,"qdqbert"),Ztt.forEach(t),B5o=r(Kye," \u2014 "),Mj=n(Kye,"A",{href:!0});var eat=s(Mj);P5o=r(eat,"QDQBertLMHeadModel"),eat.forEach(t),I5o=r(Kye," (QDQBert model)"),Kye.forEach(t),q5o=i(W),g2=n(W,"LI",{});var Zye=s(g2);ude=n(Zye,"STRONG",{});var oat=s(ude);N5o=r(oat,"reformer"),oat.forEach(t),j5o=r(Zye," \u2014 "),Ej=n(Zye,"A",{href:!0});var rat=s(Ej);D5o=r(rat,"ReformerModelWithLMHead"),rat.forEach(t),G5o=r(Zye," (Reformer model)"),Zye.forEach(t),O5o=i(W),h2=n(W,"LI",{});var eLe=s(h2);bde=n(eLe,"STRONG",{});var tat=s(bde);V5o=r(tat,"rembert"),tat.forEach(t),X5o=r(eLe," \u2014 "),Cj=n(eLe,"A",{href:!0});var aat=s(Cj);z5o=r(aat,"RemBertForCausalLM"),aat.forEach(t),W5o=r(eLe," (RemBERT model)"),eLe.forEach(t),Q5o=i(W),p2=n(W,"LI",{});var oLe=s(p2);vde=n(oLe,"STRONG",{});var nat=s(vde);H5o=r(nat,"roberta"),nat.forEach(t),U5o=r(oLe," \u2014 "),wj=n(oLe,"A",{href:!0});var sat=s(wj);J5o=r(sat,"RobertaForCausalLM"),sat.forEach(t),Y5o=r(oLe," (RoBERTa model)"),oLe.forEach(t),K5o=i(W),_2=n(W,"LI",{});var rLe=s(_2);Fde=n(rLe,"STRONG",{});var lat=s(Fde);Z5o=r(lat,"roformer"),lat.forEach(t),e3o=r(rLe," \u2014 "),Aj=n(rLe,"A",{href:!0});var iat=s(Aj);o3o=r(iat,"RoFormerForCausalLM"),iat.forEach(t),r3o=r(rLe," (RoFormer model)"),rLe.forEach(t),t3o=i(W),u2=n(W,"LI",{});var tLe=s(u2);Tde=n(tLe,"STRONG",{});var dat=s(Tde);a3o=r(dat,"speech_to_text_2"),dat.forEach(t),n3o=r(tLe," \u2014 "),yj=n(tLe,"A",{href:!0});var cat=s(yj);s3o=r(cat,"Speech2Text2ForCausalLM"),cat.forEach(t),l3o=r(tLe," (Speech2Text2 model)"),tLe.forEach(t),i3o=i(W),b2=n(W,"LI",{});var aLe=s(b2);Mde=n(aLe,"STRONG",{});var fat=s(Mde);d3o=r(fat,"transfo-xl"),fat.forEach(t),c3o=r(aLe," \u2014 "),Lj=n(aLe,"A",{href:!0});var mat=s(Lj);f3o=r(mat,"TransfoXLLMHeadModel"),mat.forEach(t),m3o=r(aLe," (Transformer-XL model)"),aLe.forEach(t),g3o=i(W),v2=n(W,"LI",{});var nLe=s(v2);Ede=n(nLe,"STRONG",{});var gat=s(Ede);h3o=r(gat,"trocr"),gat.forEach(t),p3o=r(nLe," \u2014 "),xj=n(nLe,"A",{href:!0});var hat=s(xj);_3o=r(hat,"TrOCRForCausalLM"),hat.forEach(t),u3o=r(nLe," (TrOCR model)"),nLe.forEach(t),b3o=i(W),F2=n(W,"LI",{});var sLe=s(F2);Cde=n(sLe,"STRONG",{});var pat=s(Cde);v3o=r(pat,"xglm"),pat.forEach(t),F3o=r(sLe," \u2014 "),$j=n(sLe,"A",{href:!0});var _at=s($j);T3o=r(_at,"XGLMForCausalLM"),_at.forEach(t),M3o=r(sLe," (XGLM model)"),sLe.forEach(t),E3o=i(W),T2=n(W,"LI",{});var lLe=s(T2);wde=n(lLe,"STRONG",{});var uat=s(wde);C3o=r(uat,"xlm"),uat.forEach(t),w3o=r(lLe," \u2014 "),kj=n(lLe,"A",{href:!0});var bat=s(kj);A3o=r(bat,"XLMWithLMHeadModel"),bat.forEach(t),y3o=r(lLe," (XLM model)"),lLe.forEach(t),L3o=i(W),M2=n(W,"LI",{});var iLe=s(M2);Ade=n(iLe,"STRONG",{});var vat=s(Ade);x3o=r(vat,"xlm-prophetnet"),vat.forEach(t),$3o=r(iLe," \u2014 "),Sj=n(iLe,"A",{href:!0});var Fat=s(Sj);k3o=r(Fat,"XLMProphetNetForCausalLM"),Fat.forEach(t),S3o=r(iLe," (XLMProphetNet model)"),iLe.forEach(t),R3o=i(W),E2=n(W,"LI",{});var dLe=s(E2);yde=n(dLe,"STRONG",{});var Tat=s(yde);B3o=r(Tat,"xlm-roberta"),Tat.forEach(t),P3o=r(dLe," \u2014 "),Rj=n(dLe,"A",{href:!0});var Mat=s(Rj);I3o=r(Mat,"XLMRobertaForCausalLM"),Mat.forEach(t),q3o=r(dLe," (XLM-RoBERTa model)"),dLe.forEach(t),N3o=i(W),C2=n(W,"LI",{});var cLe=s(C2);Lde=n(cLe,"STRONG",{});var Eat=s(Lde);j3o=r(Eat,"xlm-roberta-xl"),Eat.forEach(t),D3o=r(cLe," \u2014 "),Bj=n(cLe,"A",{href:!0});var Cat=s(Bj);G3o=r(Cat,"XLMRobertaXLForCausalLM"),Cat.forEach(t),O3o=r(cLe," (XLM-RoBERTa-XL model)"),cLe.forEach(t),V3o=i(W),w2=n(W,"LI",{});var fLe=s(w2);xde=n(fLe,"STRONG",{});var wat=s(xde);X3o=r(wat,"xlnet"),wat.forEach(t),z3o=r(fLe," \u2014 "),Pj=n(fLe,"A",{href:!0});var Aat=s(Pj);W3o=r(Aat,"XLNetLMHeadModel"),Aat.forEach(t),Q3o=r(fLe," (XLNet model)"),fLe.forEach(t),W.forEach(t),H3o=i(ta),A2=n(ta,"P",{});var mLe=s(A2);U3o=r(mLe,"The model is set in evaluation mode by default using "),$de=n(mLe,"CODE",{});var yat=s($de);J3o=r(yat,"model.eval()"),yat.forEach(t),Y3o=r(mLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kde=n(mLe,"CODE",{});var Lat=s(kde);K3o=r(Lat,"model.train()"),Lat.forEach(t),mLe.forEach(t),Z3o=i(ta),T(y2.$$.fragment,ta),ta.forEach(t),Os.forEach(t),Mqe=i(f),Ri=n(f,"H2",{class:!0});var Aje=s(Ri);L2=n(Aje,"A",{id:!0,class:!0,href:!0});var xat=s(L2);Sde=n(xat,"SPAN",{});var $at=s(Sde);T(ry.$$.fragment,$at),$at.forEach(t),xat.forEach(t),ewo=i(Aje),Rde=n(Aje,"SPAN",{});var kat=s(Rde);owo=r(kat,"AutoModelForMaskedLM"),kat.forEach(t),Aje.forEach(t),Eqe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(ty.$$.fragment,Vs),rwo=i(Vs),Bi=n(Vs,"P",{});var UK=s(Bi);two=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ij=n(UK,"A",{href:!0});var Sat=s(Ij);awo=r(Sat,"from_pretrained()"),Sat.forEach(t),nwo=r(UK," class method or the "),qj=n(UK,"A",{href:!0});var Rat=s(qj);swo=r(Rat,"from_config()"),Rat.forEach(t),lwo=r(UK,` class
method.`),UK.forEach(t),iwo=i(Vs),ay=n(Vs,"P",{});var yje=s(ay);dwo=r(yje,"This class cannot be instantiated directly using "),Bde=n(yje,"CODE",{});var Bat=s(Bde);cwo=r(Bat,"__init__()"),Bat.forEach(t),fwo=r(yje," (throws an error)."),yje.forEach(t),mwo=i(Vs),st=n(Vs,"DIV",{class:!0});var ww=s(st);T(ny.$$.fragment,ww),gwo=i(ww),Pde=n(ww,"P",{});var Pat=s(Pde);hwo=r(Pat,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pat.forEach(t),pwo=i(ww),Pi=n(ww,"P",{});var JK=s(Pi);_wo=r(JK,`Note:
Loading a model from its configuration file does `),Ide=n(JK,"STRONG",{});var Iat=s(Ide);uwo=r(Iat,"not"),Iat.forEach(t),bwo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nj=n(JK,"A",{href:!0});var qat=s(Nj);vwo=r(qat,"from_pretrained()"),qat.forEach(t),Fwo=r(JK," to load the model weights."),JK.forEach(t),Two=i(ww),T(x2.$$.fragment,ww),ww.forEach(t),Mwo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(sy.$$.fragment,aa),Ewo=i(aa),qde=n(aa,"P",{});var Nat=s(qde);Cwo=r(Nat,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Nat.forEach(t),wwo=i(aa),ka=n(aa,"P",{});var Aw=s(ka);Awo=r(Aw,"The model class to instantiate is selected based on the "),Nde=n(Aw,"CODE",{});var jat=s(Nde);ywo=r(jat,"model_type"),jat.forEach(t),Lwo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),jde=n(Aw,"CODE",{});var Dat=s(jde);xwo=r(Dat,"pretrained_model_name_or_path"),Dat.forEach(t),$wo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dde=n(Aw,"CODE",{});var Gat=s(Dde);kwo=r(Gat,"pretrained_model_name_or_path"),Gat.forEach(t),Swo=r(Aw,":"),Aw.forEach(t),Rwo=i(aa),Q=n(aa,"UL",{});var H=s(Q);$2=n(H,"LI",{});var gLe=s($2);Gde=n(gLe,"STRONG",{});var Oat=s(Gde);Bwo=r(Oat,"albert"),Oat.forEach(t),Pwo=r(gLe," \u2014 "),jj=n(gLe,"A",{href:!0});var Vat=s(jj);Iwo=r(Vat,"AlbertForMaskedLM"),Vat.forEach(t),qwo=r(gLe," (ALBERT model)"),gLe.forEach(t),Nwo=i(H),k2=n(H,"LI",{});var hLe=s(k2);Ode=n(hLe,"STRONG",{});var Xat=s(Ode);jwo=r(Xat,"bart"),Xat.forEach(t),Dwo=r(hLe," \u2014 "),Dj=n(hLe,"A",{href:!0});var zat=s(Dj);Gwo=r(zat,"BartForConditionalGeneration"),zat.forEach(t),Owo=r(hLe," (BART model)"),hLe.forEach(t),Vwo=i(H),S2=n(H,"LI",{});var pLe=s(S2);Vde=n(pLe,"STRONG",{});var Wat=s(Vde);Xwo=r(Wat,"bert"),Wat.forEach(t),zwo=r(pLe," \u2014 "),Gj=n(pLe,"A",{href:!0});var Qat=s(Gj);Wwo=r(Qat,"BertForMaskedLM"),Qat.forEach(t),Qwo=r(pLe," (BERT model)"),pLe.forEach(t),Hwo=i(H),R2=n(H,"LI",{});var _Le=s(R2);Xde=n(_Le,"STRONG",{});var Hat=s(Xde);Uwo=r(Hat,"big_bird"),Hat.forEach(t),Jwo=r(_Le," \u2014 "),Oj=n(_Le,"A",{href:!0});var Uat=s(Oj);Ywo=r(Uat,"BigBirdForMaskedLM"),Uat.forEach(t),Kwo=r(_Le," (BigBird model)"),_Le.forEach(t),Zwo=i(H),B2=n(H,"LI",{});var uLe=s(B2);zde=n(uLe,"STRONG",{});var Jat=s(zde);eAo=r(Jat,"camembert"),Jat.forEach(t),oAo=r(uLe," \u2014 "),Vj=n(uLe,"A",{href:!0});var Yat=s(Vj);rAo=r(Yat,"CamembertForMaskedLM"),Yat.forEach(t),tAo=r(uLe," (CamemBERT model)"),uLe.forEach(t),aAo=i(H),P2=n(H,"LI",{});var bLe=s(P2);Wde=n(bLe,"STRONG",{});var Kat=s(Wde);nAo=r(Kat,"convbert"),Kat.forEach(t),sAo=r(bLe," \u2014 "),Xj=n(bLe,"A",{href:!0});var Zat=s(Xj);lAo=r(Zat,"ConvBertForMaskedLM"),Zat.forEach(t),iAo=r(bLe," (ConvBERT model)"),bLe.forEach(t),dAo=i(H),I2=n(H,"LI",{});var vLe=s(I2);Qde=n(vLe,"STRONG",{});var ent=s(Qde);cAo=r(ent,"data2vec-text"),ent.forEach(t),fAo=r(vLe," \u2014 "),zj=n(vLe,"A",{href:!0});var ont=s(zj);mAo=r(ont,"Data2VecTextForMaskedLM"),ont.forEach(t),gAo=r(vLe," (Data2VecText model)"),vLe.forEach(t),hAo=i(H),q2=n(H,"LI",{});var FLe=s(q2);Hde=n(FLe,"STRONG",{});var rnt=s(Hde);pAo=r(rnt,"deberta"),rnt.forEach(t),_Ao=r(FLe," \u2014 "),Wj=n(FLe,"A",{href:!0});var tnt=s(Wj);uAo=r(tnt,"DebertaForMaskedLM"),tnt.forEach(t),bAo=r(FLe," (DeBERTa model)"),FLe.forEach(t),vAo=i(H),N2=n(H,"LI",{});var TLe=s(N2);Ude=n(TLe,"STRONG",{});var ant=s(Ude);FAo=r(ant,"deberta-v2"),ant.forEach(t),TAo=r(TLe," \u2014 "),Qj=n(TLe,"A",{href:!0});var nnt=s(Qj);MAo=r(nnt,"DebertaV2ForMaskedLM"),nnt.forEach(t),EAo=r(TLe," (DeBERTa-v2 model)"),TLe.forEach(t),CAo=i(H),j2=n(H,"LI",{});var MLe=s(j2);Jde=n(MLe,"STRONG",{});var snt=s(Jde);wAo=r(snt,"distilbert"),snt.forEach(t),AAo=r(MLe," \u2014 "),Hj=n(MLe,"A",{href:!0});var lnt=s(Hj);yAo=r(lnt,"DistilBertForMaskedLM"),lnt.forEach(t),LAo=r(MLe," (DistilBERT model)"),MLe.forEach(t),xAo=i(H),D2=n(H,"LI",{});var ELe=s(D2);Yde=n(ELe,"STRONG",{});var int=s(Yde);$Ao=r(int,"electra"),int.forEach(t),kAo=r(ELe," \u2014 "),Uj=n(ELe,"A",{href:!0});var dnt=s(Uj);SAo=r(dnt,"ElectraForMaskedLM"),dnt.forEach(t),RAo=r(ELe," (ELECTRA model)"),ELe.forEach(t),BAo=i(H),G2=n(H,"LI",{});var CLe=s(G2);Kde=n(CLe,"STRONG",{});var cnt=s(Kde);PAo=r(cnt,"flaubert"),cnt.forEach(t),IAo=r(CLe," \u2014 "),Jj=n(CLe,"A",{href:!0});var fnt=s(Jj);qAo=r(fnt,"FlaubertWithLMHeadModel"),fnt.forEach(t),NAo=r(CLe," (FlauBERT model)"),CLe.forEach(t),jAo=i(H),O2=n(H,"LI",{});var wLe=s(O2);Zde=n(wLe,"STRONG",{});var mnt=s(Zde);DAo=r(mnt,"fnet"),mnt.forEach(t),GAo=r(wLe," \u2014 "),Yj=n(wLe,"A",{href:!0});var gnt=s(Yj);OAo=r(gnt,"FNetForMaskedLM"),gnt.forEach(t),VAo=r(wLe," (FNet model)"),wLe.forEach(t),XAo=i(H),V2=n(H,"LI",{});var ALe=s(V2);ece=n(ALe,"STRONG",{});var hnt=s(ece);zAo=r(hnt,"funnel"),hnt.forEach(t),WAo=r(ALe," \u2014 "),Kj=n(ALe,"A",{href:!0});var pnt=s(Kj);QAo=r(pnt,"FunnelForMaskedLM"),pnt.forEach(t),HAo=r(ALe," (Funnel Transformer model)"),ALe.forEach(t),UAo=i(H),X2=n(H,"LI",{});var yLe=s(X2);oce=n(yLe,"STRONG",{});var _nt=s(oce);JAo=r(_nt,"ibert"),_nt.forEach(t),YAo=r(yLe," \u2014 "),Zj=n(yLe,"A",{href:!0});var unt=s(Zj);KAo=r(unt,"IBertForMaskedLM"),unt.forEach(t),ZAo=r(yLe," (I-BERT model)"),yLe.forEach(t),e6o=i(H),z2=n(H,"LI",{});var LLe=s(z2);rce=n(LLe,"STRONG",{});var bnt=s(rce);o6o=r(bnt,"layoutlm"),bnt.forEach(t),r6o=r(LLe," \u2014 "),eD=n(LLe,"A",{href:!0});var vnt=s(eD);t6o=r(vnt,"LayoutLMForMaskedLM"),vnt.forEach(t),a6o=r(LLe," (LayoutLM model)"),LLe.forEach(t),n6o=i(H),W2=n(H,"LI",{});var xLe=s(W2);tce=n(xLe,"STRONG",{});var Fnt=s(tce);s6o=r(Fnt,"longformer"),Fnt.forEach(t),l6o=r(xLe," \u2014 "),oD=n(xLe,"A",{href:!0});var Tnt=s(oD);i6o=r(Tnt,"LongformerForMaskedLM"),Tnt.forEach(t),d6o=r(xLe," (Longformer model)"),xLe.forEach(t),c6o=i(H),Q2=n(H,"LI",{});var $Le=s(Q2);ace=n($Le,"STRONG",{});var Mnt=s(ace);f6o=r(Mnt,"mbart"),Mnt.forEach(t),m6o=r($Le," \u2014 "),rD=n($Le,"A",{href:!0});var Ent=s(rD);g6o=r(Ent,"MBartForConditionalGeneration"),Ent.forEach(t),h6o=r($Le," (mBART model)"),$Le.forEach(t),p6o=i(H),H2=n(H,"LI",{});var kLe=s(H2);nce=n(kLe,"STRONG",{});var Cnt=s(nce);_6o=r(Cnt,"megatron-bert"),Cnt.forEach(t),u6o=r(kLe," \u2014 "),tD=n(kLe,"A",{href:!0});var wnt=s(tD);b6o=r(wnt,"MegatronBertForMaskedLM"),wnt.forEach(t),v6o=r(kLe," (MegatronBert model)"),kLe.forEach(t),F6o=i(H),U2=n(H,"LI",{});var SLe=s(U2);sce=n(SLe,"STRONG",{});var Ant=s(sce);T6o=r(Ant,"mobilebert"),Ant.forEach(t),M6o=r(SLe," \u2014 "),aD=n(SLe,"A",{href:!0});var ynt=s(aD);E6o=r(ynt,"MobileBertForMaskedLM"),ynt.forEach(t),C6o=r(SLe," (MobileBERT model)"),SLe.forEach(t),w6o=i(H),J2=n(H,"LI",{});var RLe=s(J2);lce=n(RLe,"STRONG",{});var Lnt=s(lce);A6o=r(Lnt,"mpnet"),Lnt.forEach(t),y6o=r(RLe," \u2014 "),nD=n(RLe,"A",{href:!0});var xnt=s(nD);L6o=r(xnt,"MPNetForMaskedLM"),xnt.forEach(t),x6o=r(RLe," (MPNet model)"),RLe.forEach(t),$6o=i(H),Y2=n(H,"LI",{});var BLe=s(Y2);ice=n(BLe,"STRONG",{});var $nt=s(ice);k6o=r($nt,"nystromformer"),$nt.forEach(t),S6o=r(BLe," \u2014 "),sD=n(BLe,"A",{href:!0});var knt=s(sD);R6o=r(knt,"NystromformerForMaskedLM"),knt.forEach(t),B6o=r(BLe," (Nystromformer model)"),BLe.forEach(t),P6o=i(H),K2=n(H,"LI",{});var PLe=s(K2);dce=n(PLe,"STRONG",{});var Snt=s(dce);I6o=r(Snt,"perceiver"),Snt.forEach(t),q6o=r(PLe," \u2014 "),lD=n(PLe,"A",{href:!0});var Rnt=s(lD);N6o=r(Rnt,"PerceiverForMaskedLM"),Rnt.forEach(t),j6o=r(PLe," (Perceiver model)"),PLe.forEach(t),D6o=i(H),Z2=n(H,"LI",{});var ILe=s(Z2);cce=n(ILe,"STRONG",{});var Bnt=s(cce);G6o=r(Bnt,"qdqbert"),Bnt.forEach(t),O6o=r(ILe," \u2014 "),iD=n(ILe,"A",{href:!0});var Pnt=s(iD);V6o=r(Pnt,"QDQBertForMaskedLM"),Pnt.forEach(t),X6o=r(ILe," (QDQBert model)"),ILe.forEach(t),z6o=i(H),e1=n(H,"LI",{});var qLe=s(e1);fce=n(qLe,"STRONG",{});var Int=s(fce);W6o=r(Int,"reformer"),Int.forEach(t),Q6o=r(qLe," \u2014 "),dD=n(qLe,"A",{href:!0});var qnt=s(dD);H6o=r(qnt,"ReformerForMaskedLM"),qnt.forEach(t),U6o=r(qLe," (Reformer model)"),qLe.forEach(t),J6o=i(H),o1=n(H,"LI",{});var NLe=s(o1);mce=n(NLe,"STRONG",{});var Nnt=s(mce);Y6o=r(Nnt,"rembert"),Nnt.forEach(t),K6o=r(NLe," \u2014 "),cD=n(NLe,"A",{href:!0});var jnt=s(cD);Z6o=r(jnt,"RemBertForMaskedLM"),jnt.forEach(t),eyo=r(NLe," (RemBERT model)"),NLe.forEach(t),oyo=i(H),r1=n(H,"LI",{});var jLe=s(r1);gce=n(jLe,"STRONG",{});var Dnt=s(gce);ryo=r(Dnt,"roberta"),Dnt.forEach(t),tyo=r(jLe," \u2014 "),fD=n(jLe,"A",{href:!0});var Gnt=s(fD);ayo=r(Gnt,"RobertaForMaskedLM"),Gnt.forEach(t),nyo=r(jLe," (RoBERTa model)"),jLe.forEach(t),syo=i(H),t1=n(H,"LI",{});var DLe=s(t1);hce=n(DLe,"STRONG",{});var Ont=s(hce);lyo=r(Ont,"roformer"),Ont.forEach(t),iyo=r(DLe," \u2014 "),mD=n(DLe,"A",{href:!0});var Vnt=s(mD);dyo=r(Vnt,"RoFormerForMaskedLM"),Vnt.forEach(t),cyo=r(DLe," (RoFormer model)"),DLe.forEach(t),fyo=i(H),a1=n(H,"LI",{});var GLe=s(a1);pce=n(GLe,"STRONG",{});var Xnt=s(pce);myo=r(Xnt,"squeezebert"),Xnt.forEach(t),gyo=r(GLe," \u2014 "),gD=n(GLe,"A",{href:!0});var znt=s(gD);hyo=r(znt,"SqueezeBertForMaskedLM"),znt.forEach(t),pyo=r(GLe," (SqueezeBERT model)"),GLe.forEach(t),_yo=i(H),n1=n(H,"LI",{});var OLe=s(n1);_ce=n(OLe,"STRONG",{});var Wnt=s(_ce);uyo=r(Wnt,"tapas"),Wnt.forEach(t),byo=r(OLe," \u2014 "),hD=n(OLe,"A",{href:!0});var Qnt=s(hD);vyo=r(Qnt,"TapasForMaskedLM"),Qnt.forEach(t),Fyo=r(OLe," (TAPAS model)"),OLe.forEach(t),Tyo=i(H),s1=n(H,"LI",{});var VLe=s(s1);uce=n(VLe,"STRONG",{});var Hnt=s(uce);Myo=r(Hnt,"wav2vec2"),Hnt.forEach(t),Eyo=r(VLe," \u2014 "),bce=n(VLe,"CODE",{});var Unt=s(bce);Cyo=r(Unt,"Wav2Vec2ForMaskedLM"),Unt.forEach(t),wyo=r(VLe," (Wav2Vec2 model)"),VLe.forEach(t),Ayo=i(H),l1=n(H,"LI",{});var XLe=s(l1);vce=n(XLe,"STRONG",{});var Jnt=s(vce);yyo=r(Jnt,"xlm"),Jnt.forEach(t),Lyo=r(XLe," \u2014 "),pD=n(XLe,"A",{href:!0});var Ynt=s(pD);xyo=r(Ynt,"XLMWithLMHeadModel"),Ynt.forEach(t),$yo=r(XLe," (XLM model)"),XLe.forEach(t),kyo=i(H),i1=n(H,"LI",{});var zLe=s(i1);Fce=n(zLe,"STRONG",{});var Knt=s(Fce);Syo=r(Knt,"xlm-roberta"),Knt.forEach(t),Ryo=r(zLe," \u2014 "),_D=n(zLe,"A",{href:!0});var Znt=s(_D);Byo=r(Znt,"XLMRobertaForMaskedLM"),Znt.forEach(t),Pyo=r(zLe," (XLM-RoBERTa model)"),zLe.forEach(t),Iyo=i(H),d1=n(H,"LI",{});var WLe=s(d1);Tce=n(WLe,"STRONG",{});var est=s(Tce);qyo=r(est,"xlm-roberta-xl"),est.forEach(t),Nyo=r(WLe," \u2014 "),uD=n(WLe,"A",{href:!0});var ost=s(uD);jyo=r(ost,"XLMRobertaXLForMaskedLM"),ost.forEach(t),Dyo=r(WLe," (XLM-RoBERTa-XL model)"),WLe.forEach(t),Gyo=i(H),c1=n(H,"LI",{});var QLe=s(c1);Mce=n(QLe,"STRONG",{});var rst=s(Mce);Oyo=r(rst,"yoso"),rst.forEach(t),Vyo=r(QLe," \u2014 "),bD=n(QLe,"A",{href:!0});var tst=s(bD);Xyo=r(tst,"YosoForMaskedLM"),tst.forEach(t),zyo=r(QLe," (YOSO model)"),QLe.forEach(t),H.forEach(t),Wyo=i(aa),f1=n(aa,"P",{});var HLe=s(f1);Qyo=r(HLe,"The model is set in evaluation mode by default using "),Ece=n(HLe,"CODE",{});var ast=s(Ece);Hyo=r(ast,"model.eval()"),ast.forEach(t),Uyo=r(HLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cce=n(HLe,"CODE",{});var nst=s(Cce);Jyo=r(nst,"model.train()"),nst.forEach(t),HLe.forEach(t),Yyo=i(aa),T(m1.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),Cqe=i(f),Ii=n(f,"H2",{class:!0});var Lje=s(Ii);g1=n(Lje,"A",{id:!0,class:!0,href:!0});var sst=s(g1);wce=n(sst,"SPAN",{});var lst=s(wce);T(ly.$$.fragment,lst),lst.forEach(t),sst.forEach(t),Kyo=i(Lje),Ace=n(Lje,"SPAN",{});var ist=s(Ace);Zyo=r(ist,"AutoModelForSeq2SeqLM"),ist.forEach(t),Lje.forEach(t),wqe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(iy.$$.fragment,Xs),eLo=i(Xs),qi=n(Xs,"P",{});var YK=s(qi);oLo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vD=n(YK,"A",{href:!0});var dst=s(vD);rLo=r(dst,"from_pretrained()"),dst.forEach(t),tLo=r(YK," class method or the "),FD=n(YK,"A",{href:!0});var cst=s(FD);aLo=r(cst,"from_config()"),cst.forEach(t),nLo=r(YK,` class
method.`),YK.forEach(t),sLo=i(Xs),dy=n(Xs,"P",{});var xje=s(dy);lLo=r(xje,"This class cannot be instantiated directly using "),yce=n(xje,"CODE",{});var fst=s(yce);iLo=r(fst,"__init__()"),fst.forEach(t),dLo=r(xje," (throws an error)."),xje.forEach(t),cLo=i(Xs),lt=n(Xs,"DIV",{class:!0});var yw=s(lt);T(cy.$$.fragment,yw),fLo=i(yw),Lce=n(yw,"P",{});var mst=s(Lce);mLo=r(mst,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mst.forEach(t),gLo=i(yw),Ni=n(yw,"P",{});var KK=s(Ni);hLo=r(KK,`Note:
Loading a model from its configuration file does `),xce=n(KK,"STRONG",{});var gst=s(xce);pLo=r(gst,"not"),gst.forEach(t),_Lo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TD=n(KK,"A",{href:!0});var hst=s(TD);uLo=r(hst,"from_pretrained()"),hst.forEach(t),bLo=r(KK," to load the model weights."),KK.forEach(t),vLo=i(yw),T(h1.$$.fragment,yw),yw.forEach(t),FLo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(fy.$$.fragment,na),TLo=i(na),$ce=n(na,"P",{});var pst=s($ce);MLo=r(pst,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pst.forEach(t),ELo=i(na),Sa=n(na,"P",{});var Lw=s(Sa);CLo=r(Lw,"The model class to instantiate is selected based on the "),kce=n(Lw,"CODE",{});var _st=s(kce);wLo=r(_st,"model_type"),_st.forEach(t),ALo=r(Lw,` property of the config object (either
passed as an argument or loaded from `),Sce=n(Lw,"CODE",{});var ust=s(Sce);yLo=r(ust,"pretrained_model_name_or_path"),ust.forEach(t),LLo=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=n(Lw,"CODE",{});var bst=s(Rce);xLo=r(bst,"pretrained_model_name_or_path"),bst.forEach(t),$Lo=r(Lw,":"),Lw.forEach(t),kLo=i(na),_e=n(na,"UL",{});var ve=s(_e);p1=n(ve,"LI",{});var ULe=s(p1);Bce=n(ULe,"STRONG",{});var vst=s(Bce);SLo=r(vst,"bart"),vst.forEach(t),RLo=r(ULe," \u2014 "),MD=n(ULe,"A",{href:!0});var Fst=s(MD);BLo=r(Fst,"BartForConditionalGeneration"),Fst.forEach(t),PLo=r(ULe," (BART model)"),ULe.forEach(t),ILo=i(ve),_1=n(ve,"LI",{});var JLe=s(_1);Pce=n(JLe,"STRONG",{});var Tst=s(Pce);qLo=r(Tst,"bigbird_pegasus"),Tst.forEach(t),NLo=r(JLe," \u2014 "),ED=n(JLe,"A",{href:!0});var Mst=s(ED);jLo=r(Mst,"BigBirdPegasusForConditionalGeneration"),Mst.forEach(t),DLo=r(JLe," (BigBirdPegasus model)"),JLe.forEach(t),GLo=i(ve),u1=n(ve,"LI",{});var YLe=s(u1);Ice=n(YLe,"STRONG",{});var Est=s(Ice);OLo=r(Est,"blenderbot"),Est.forEach(t),VLo=r(YLe," \u2014 "),CD=n(YLe,"A",{href:!0});var Cst=s(CD);XLo=r(Cst,"BlenderbotForConditionalGeneration"),Cst.forEach(t),zLo=r(YLe," (Blenderbot model)"),YLe.forEach(t),WLo=i(ve),b1=n(ve,"LI",{});var KLe=s(b1);qce=n(KLe,"STRONG",{});var wst=s(qce);QLo=r(wst,"blenderbot-small"),wst.forEach(t),HLo=r(KLe," \u2014 "),wD=n(KLe,"A",{href:!0});var Ast=s(wD);ULo=r(Ast,"BlenderbotSmallForConditionalGeneration"),Ast.forEach(t),JLo=r(KLe," (BlenderbotSmall model)"),KLe.forEach(t),YLo=i(ve),v1=n(ve,"LI",{});var ZLe=s(v1);Nce=n(ZLe,"STRONG",{});var yst=s(Nce);KLo=r(yst,"encoder-decoder"),yst.forEach(t),ZLo=r(ZLe," \u2014 "),AD=n(ZLe,"A",{href:!0});var Lst=s(AD);e8o=r(Lst,"EncoderDecoderModel"),Lst.forEach(t),o8o=r(ZLe," (Encoder decoder model)"),ZLe.forEach(t),r8o=i(ve),F1=n(ve,"LI",{});var e8e=s(F1);jce=n(e8e,"STRONG",{});var xst=s(jce);t8o=r(xst,"fsmt"),xst.forEach(t),a8o=r(e8e," \u2014 "),yD=n(e8e,"A",{href:!0});var $st=s(yD);n8o=r($st,"FSMTForConditionalGeneration"),$st.forEach(t),s8o=r(e8e," (FairSeq Machine-Translation model)"),e8e.forEach(t),l8o=i(ve),T1=n(ve,"LI",{});var o8e=s(T1);Dce=n(o8e,"STRONG",{});var kst=s(Dce);i8o=r(kst,"led"),kst.forEach(t),d8o=r(o8e," \u2014 "),LD=n(o8e,"A",{href:!0});var Sst=s(LD);c8o=r(Sst,"LEDForConditionalGeneration"),Sst.forEach(t),f8o=r(o8e," (LED model)"),o8e.forEach(t),m8o=i(ve),M1=n(ve,"LI",{});var r8e=s(M1);Gce=n(r8e,"STRONG",{});var Rst=s(Gce);g8o=r(Rst,"m2m_100"),Rst.forEach(t),h8o=r(r8e," \u2014 "),xD=n(r8e,"A",{href:!0});var Bst=s(xD);p8o=r(Bst,"M2M100ForConditionalGeneration"),Bst.forEach(t),_8o=r(r8e," (M2M100 model)"),r8e.forEach(t),u8o=i(ve),E1=n(ve,"LI",{});var t8e=s(E1);Oce=n(t8e,"STRONG",{});var Pst=s(Oce);b8o=r(Pst,"marian"),Pst.forEach(t),v8o=r(t8e," \u2014 "),$D=n(t8e,"A",{href:!0});var Ist=s($D);F8o=r(Ist,"MarianMTModel"),Ist.forEach(t),T8o=r(t8e," (Marian model)"),t8e.forEach(t),M8o=i(ve),C1=n(ve,"LI",{});var a8e=s(C1);Vce=n(a8e,"STRONG",{});var qst=s(Vce);E8o=r(qst,"mbart"),qst.forEach(t),C8o=r(a8e," \u2014 "),kD=n(a8e,"A",{href:!0});var Nst=s(kD);w8o=r(Nst,"MBartForConditionalGeneration"),Nst.forEach(t),A8o=r(a8e," (mBART model)"),a8e.forEach(t),y8o=i(ve),w1=n(ve,"LI",{});var n8e=s(w1);Xce=n(n8e,"STRONG",{});var jst=s(Xce);L8o=r(jst,"mt5"),jst.forEach(t),x8o=r(n8e," \u2014 "),SD=n(n8e,"A",{href:!0});var Dst=s(SD);$8o=r(Dst,"MT5ForConditionalGeneration"),Dst.forEach(t),k8o=r(n8e," (mT5 model)"),n8e.forEach(t),S8o=i(ve),A1=n(ve,"LI",{});var s8e=s(A1);zce=n(s8e,"STRONG",{});var Gst=s(zce);R8o=r(Gst,"pegasus"),Gst.forEach(t),B8o=r(s8e," \u2014 "),RD=n(s8e,"A",{href:!0});var Ost=s(RD);P8o=r(Ost,"PegasusForConditionalGeneration"),Ost.forEach(t),I8o=r(s8e," (Pegasus model)"),s8e.forEach(t),q8o=i(ve),y1=n(ve,"LI",{});var l8e=s(y1);Wce=n(l8e,"STRONG",{});var Vst=s(Wce);N8o=r(Vst,"plbart"),Vst.forEach(t),j8o=r(l8e," \u2014 "),BD=n(l8e,"A",{href:!0});var Xst=s(BD);D8o=r(Xst,"PLBartForConditionalGeneration"),Xst.forEach(t),G8o=r(l8e," (PLBart model)"),l8e.forEach(t),O8o=i(ve),L1=n(ve,"LI",{});var i8e=s(L1);Qce=n(i8e,"STRONG",{});var zst=s(Qce);V8o=r(zst,"prophetnet"),zst.forEach(t),X8o=r(i8e," \u2014 "),PD=n(i8e,"A",{href:!0});var Wst=s(PD);z8o=r(Wst,"ProphetNetForConditionalGeneration"),Wst.forEach(t),W8o=r(i8e," (ProphetNet model)"),i8e.forEach(t),Q8o=i(ve),x1=n(ve,"LI",{});var d8e=s(x1);Hce=n(d8e,"STRONG",{});var Qst=s(Hce);H8o=r(Qst,"t5"),Qst.forEach(t),U8o=r(d8e," \u2014 "),ID=n(d8e,"A",{href:!0});var Hst=s(ID);J8o=r(Hst,"T5ForConditionalGeneration"),Hst.forEach(t),Y8o=r(d8e," (T5 model)"),d8e.forEach(t),K8o=i(ve),$1=n(ve,"LI",{});var c8e=s($1);Uce=n(c8e,"STRONG",{});var Ust=s(Uce);Z8o=r(Ust,"xlm-prophetnet"),Ust.forEach(t),e9o=r(c8e," \u2014 "),qD=n(c8e,"A",{href:!0});var Jst=s(qD);o9o=r(Jst,"XLMProphetNetForConditionalGeneration"),Jst.forEach(t),r9o=r(c8e," (XLMProphetNet model)"),c8e.forEach(t),ve.forEach(t),t9o=i(na),k1=n(na,"P",{});var f8e=s(k1);a9o=r(f8e,"The model is set in evaluation mode by default using "),Jce=n(f8e,"CODE",{});var Yst=s(Jce);n9o=r(Yst,"model.eval()"),Yst.forEach(t),s9o=r(f8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=n(f8e,"CODE",{});var Kst=s(Yce);l9o=r(Kst,"model.train()"),Kst.forEach(t),f8e.forEach(t),i9o=i(na),T(S1.$$.fragment,na),na.forEach(t),Xs.forEach(t),Aqe=i(f),ji=n(f,"H2",{class:!0});var $je=s(ji);R1=n($je,"A",{id:!0,class:!0,href:!0});var Zst=s(R1);Kce=n(Zst,"SPAN",{});var elt=s(Kce);T(my.$$.fragment,elt),elt.forEach(t),Zst.forEach(t),d9o=i($je),Zce=n($je,"SPAN",{});var olt=s(Zce);c9o=r(olt,"AutoModelForSequenceClassification"),olt.forEach(t),$je.forEach(t),yqe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(gy.$$.fragment,zs),f9o=i(zs),Di=n(zs,"P",{});var ZK=s(Di);m9o=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ND=n(ZK,"A",{href:!0});var rlt=s(ND);g9o=r(rlt,"from_pretrained()"),rlt.forEach(t),h9o=r(ZK," class method or the "),jD=n(ZK,"A",{href:!0});var tlt=s(jD);p9o=r(tlt,"from_config()"),tlt.forEach(t),_9o=r(ZK,` class
method.`),ZK.forEach(t),u9o=i(zs),hy=n(zs,"P",{});var kje=s(hy);b9o=r(kje,"This class cannot be instantiated directly using "),efe=n(kje,"CODE",{});var alt=s(efe);v9o=r(alt,"__init__()"),alt.forEach(t),F9o=r(kje," (throws an error)."),kje.forEach(t),T9o=i(zs),it=n(zs,"DIV",{class:!0});var xw=s(it);T(py.$$.fragment,xw),M9o=i(xw),ofe=n(xw,"P",{});var nlt=s(ofe);E9o=r(nlt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nlt.forEach(t),C9o=i(xw),Gi=n(xw,"P",{});var eZ=s(Gi);w9o=r(eZ,`Note:
Loading a model from its configuration file does `),rfe=n(eZ,"STRONG",{});var slt=s(rfe);A9o=r(slt,"not"),slt.forEach(t),y9o=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DD=n(eZ,"A",{href:!0});var llt=s(DD);L9o=r(llt,"from_pretrained()"),llt.forEach(t),x9o=r(eZ," to load the model weights."),eZ.forEach(t),$9o=i(xw),T(B1.$$.fragment,xw),xw.forEach(t),k9o=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(_y.$$.fragment,sa),S9o=i(sa),tfe=n(sa,"P",{});var ilt=s(tfe);R9o=r(ilt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ilt.forEach(t),B9o=i(sa),Ra=n(sa,"P",{});var $w=s(Ra);P9o=r($w,"The model class to instantiate is selected based on the "),afe=n($w,"CODE",{});var dlt=s(afe);I9o=r(dlt,"model_type"),dlt.forEach(t),q9o=r($w,` property of the config object (either
passed as an argument or loaded from `),nfe=n($w,"CODE",{});var clt=s(nfe);N9o=r(clt,"pretrained_model_name_or_path"),clt.forEach(t),j9o=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=n($w,"CODE",{});var flt=s(sfe);D9o=r(flt,"pretrained_model_name_or_path"),flt.forEach(t),G9o=r($w,":"),$w.forEach(t),O9o=i(sa),q=n(sa,"UL",{});var j=s(q);P1=n(j,"LI",{});var m8e=s(P1);lfe=n(m8e,"STRONG",{});var mlt=s(lfe);V9o=r(mlt,"albert"),mlt.forEach(t),X9o=r(m8e," \u2014 "),GD=n(m8e,"A",{href:!0});var glt=s(GD);z9o=r(glt,"AlbertForSequenceClassification"),glt.forEach(t),W9o=r(m8e," (ALBERT model)"),m8e.forEach(t),Q9o=i(j),I1=n(j,"LI",{});var g8e=s(I1);ife=n(g8e,"STRONG",{});var hlt=s(ife);H9o=r(hlt,"bart"),hlt.forEach(t),U9o=r(g8e," \u2014 "),OD=n(g8e,"A",{href:!0});var plt=s(OD);J9o=r(plt,"BartForSequenceClassification"),plt.forEach(t),Y9o=r(g8e," (BART model)"),g8e.forEach(t),K9o=i(j),q1=n(j,"LI",{});var h8e=s(q1);dfe=n(h8e,"STRONG",{});var _lt=s(dfe);Z9o=r(_lt,"bert"),_lt.forEach(t),exo=r(h8e," \u2014 "),VD=n(h8e,"A",{href:!0});var ult=s(VD);oxo=r(ult,"BertForSequenceClassification"),ult.forEach(t),rxo=r(h8e," (BERT model)"),h8e.forEach(t),txo=i(j),N1=n(j,"LI",{});var p8e=s(N1);cfe=n(p8e,"STRONG",{});var blt=s(cfe);axo=r(blt,"big_bird"),blt.forEach(t),nxo=r(p8e," \u2014 "),XD=n(p8e,"A",{href:!0});var vlt=s(XD);sxo=r(vlt,"BigBirdForSequenceClassification"),vlt.forEach(t),lxo=r(p8e," (BigBird model)"),p8e.forEach(t),ixo=i(j),j1=n(j,"LI",{});var _8e=s(j1);ffe=n(_8e,"STRONG",{});var Flt=s(ffe);dxo=r(Flt,"bigbird_pegasus"),Flt.forEach(t),cxo=r(_8e," \u2014 "),zD=n(_8e,"A",{href:!0});var Tlt=s(zD);fxo=r(Tlt,"BigBirdPegasusForSequenceClassification"),Tlt.forEach(t),mxo=r(_8e," (BigBirdPegasus model)"),_8e.forEach(t),gxo=i(j),D1=n(j,"LI",{});var u8e=s(D1);mfe=n(u8e,"STRONG",{});var Mlt=s(mfe);hxo=r(Mlt,"camembert"),Mlt.forEach(t),pxo=r(u8e," \u2014 "),WD=n(u8e,"A",{href:!0});var Elt=s(WD);_xo=r(Elt,"CamembertForSequenceClassification"),Elt.forEach(t),uxo=r(u8e," (CamemBERT model)"),u8e.forEach(t),bxo=i(j),G1=n(j,"LI",{});var b8e=s(G1);gfe=n(b8e,"STRONG",{});var Clt=s(gfe);vxo=r(Clt,"canine"),Clt.forEach(t),Fxo=r(b8e," \u2014 "),QD=n(b8e,"A",{href:!0});var wlt=s(QD);Txo=r(wlt,"CanineForSequenceClassification"),wlt.forEach(t),Mxo=r(b8e," (Canine model)"),b8e.forEach(t),Exo=i(j),O1=n(j,"LI",{});var v8e=s(O1);hfe=n(v8e,"STRONG",{});var Alt=s(hfe);Cxo=r(Alt,"convbert"),Alt.forEach(t),wxo=r(v8e," \u2014 "),HD=n(v8e,"A",{href:!0});var ylt=s(HD);Axo=r(ylt,"ConvBertForSequenceClassification"),ylt.forEach(t),yxo=r(v8e," (ConvBERT model)"),v8e.forEach(t),Lxo=i(j),V1=n(j,"LI",{});var F8e=s(V1);pfe=n(F8e,"STRONG",{});var Llt=s(pfe);xxo=r(Llt,"ctrl"),Llt.forEach(t),$xo=r(F8e," \u2014 "),UD=n(F8e,"A",{href:!0});var xlt=s(UD);kxo=r(xlt,"CTRLForSequenceClassification"),xlt.forEach(t),Sxo=r(F8e," (CTRL model)"),F8e.forEach(t),Rxo=i(j),X1=n(j,"LI",{});var T8e=s(X1);_fe=n(T8e,"STRONG",{});var $lt=s(_fe);Bxo=r($lt,"data2vec-text"),$lt.forEach(t),Pxo=r(T8e," \u2014 "),JD=n(T8e,"A",{href:!0});var klt=s(JD);Ixo=r(klt,"Data2VecTextForSequenceClassification"),klt.forEach(t),qxo=r(T8e," (Data2VecText model)"),T8e.forEach(t),Nxo=i(j),z1=n(j,"LI",{});var M8e=s(z1);ufe=n(M8e,"STRONG",{});var Slt=s(ufe);jxo=r(Slt,"deberta"),Slt.forEach(t),Dxo=r(M8e," \u2014 "),YD=n(M8e,"A",{href:!0});var Rlt=s(YD);Gxo=r(Rlt,"DebertaForSequenceClassification"),Rlt.forEach(t),Oxo=r(M8e," (DeBERTa model)"),M8e.forEach(t),Vxo=i(j),W1=n(j,"LI",{});var E8e=s(W1);bfe=n(E8e,"STRONG",{});var Blt=s(bfe);Xxo=r(Blt,"deberta-v2"),Blt.forEach(t),zxo=r(E8e," \u2014 "),KD=n(E8e,"A",{href:!0});var Plt=s(KD);Wxo=r(Plt,"DebertaV2ForSequenceClassification"),Plt.forEach(t),Qxo=r(E8e," (DeBERTa-v2 model)"),E8e.forEach(t),Hxo=i(j),Q1=n(j,"LI",{});var C8e=s(Q1);vfe=n(C8e,"STRONG",{});var Ilt=s(vfe);Uxo=r(Ilt,"distilbert"),Ilt.forEach(t),Jxo=r(C8e," \u2014 "),ZD=n(C8e,"A",{href:!0});var qlt=s(ZD);Yxo=r(qlt,"DistilBertForSequenceClassification"),qlt.forEach(t),Kxo=r(C8e," (DistilBERT model)"),C8e.forEach(t),Zxo=i(j),H1=n(j,"LI",{});var w8e=s(H1);Ffe=n(w8e,"STRONG",{});var Nlt=s(Ffe);e$o=r(Nlt,"electra"),Nlt.forEach(t),o$o=r(w8e," \u2014 "),eG=n(w8e,"A",{href:!0});var jlt=s(eG);r$o=r(jlt,"ElectraForSequenceClassification"),jlt.forEach(t),t$o=r(w8e," (ELECTRA model)"),w8e.forEach(t),a$o=i(j),U1=n(j,"LI",{});var A8e=s(U1);Tfe=n(A8e,"STRONG",{});var Dlt=s(Tfe);n$o=r(Dlt,"flaubert"),Dlt.forEach(t),s$o=r(A8e," \u2014 "),oG=n(A8e,"A",{href:!0});var Glt=s(oG);l$o=r(Glt,"FlaubertForSequenceClassification"),Glt.forEach(t),i$o=r(A8e," (FlauBERT model)"),A8e.forEach(t),d$o=i(j),J1=n(j,"LI",{});var y8e=s(J1);Mfe=n(y8e,"STRONG",{});var Olt=s(Mfe);c$o=r(Olt,"fnet"),Olt.forEach(t),f$o=r(y8e," \u2014 "),rG=n(y8e,"A",{href:!0});var Vlt=s(rG);m$o=r(Vlt,"FNetForSequenceClassification"),Vlt.forEach(t),g$o=r(y8e," (FNet model)"),y8e.forEach(t),h$o=i(j),Y1=n(j,"LI",{});var L8e=s(Y1);Efe=n(L8e,"STRONG",{});var Xlt=s(Efe);p$o=r(Xlt,"funnel"),Xlt.forEach(t),_$o=r(L8e," \u2014 "),tG=n(L8e,"A",{href:!0});var zlt=s(tG);u$o=r(zlt,"FunnelForSequenceClassification"),zlt.forEach(t),b$o=r(L8e," (Funnel Transformer model)"),L8e.forEach(t),v$o=i(j),K1=n(j,"LI",{});var x8e=s(K1);Cfe=n(x8e,"STRONG",{});var Wlt=s(Cfe);F$o=r(Wlt,"gpt2"),Wlt.forEach(t),T$o=r(x8e," \u2014 "),aG=n(x8e,"A",{href:!0});var Qlt=s(aG);M$o=r(Qlt,"GPT2ForSequenceClassification"),Qlt.forEach(t),E$o=r(x8e," (OpenAI GPT-2 model)"),x8e.forEach(t),C$o=i(j),Z1=n(j,"LI",{});var $8e=s(Z1);wfe=n($8e,"STRONG",{});var Hlt=s(wfe);w$o=r(Hlt,"gpt_neo"),Hlt.forEach(t),A$o=r($8e," \u2014 "),nG=n($8e,"A",{href:!0});var Ult=s(nG);y$o=r(Ult,"GPTNeoForSequenceClassification"),Ult.forEach(t),L$o=r($8e," (GPT Neo model)"),$8e.forEach(t),x$o=i(j),eb=n(j,"LI",{});var k8e=s(eb);Afe=n(k8e,"STRONG",{});var Jlt=s(Afe);$$o=r(Jlt,"gptj"),Jlt.forEach(t),k$o=r(k8e," \u2014 "),sG=n(k8e,"A",{href:!0});var Ylt=s(sG);S$o=r(Ylt,"GPTJForSequenceClassification"),Ylt.forEach(t),R$o=r(k8e," (GPT-J model)"),k8e.forEach(t),B$o=i(j),ob=n(j,"LI",{});var S8e=s(ob);yfe=n(S8e,"STRONG",{});var Klt=s(yfe);P$o=r(Klt,"ibert"),Klt.forEach(t),I$o=r(S8e," \u2014 "),lG=n(S8e,"A",{href:!0});var Zlt=s(lG);q$o=r(Zlt,"IBertForSequenceClassification"),Zlt.forEach(t),N$o=r(S8e," (I-BERT model)"),S8e.forEach(t),j$o=i(j),rb=n(j,"LI",{});var R8e=s(rb);Lfe=n(R8e,"STRONG",{});var eit=s(Lfe);D$o=r(eit,"layoutlm"),eit.forEach(t),G$o=r(R8e," \u2014 "),iG=n(R8e,"A",{href:!0});var oit=s(iG);O$o=r(oit,"LayoutLMForSequenceClassification"),oit.forEach(t),V$o=r(R8e," (LayoutLM model)"),R8e.forEach(t),X$o=i(j),tb=n(j,"LI",{});var B8e=s(tb);xfe=n(B8e,"STRONG",{});var rit=s(xfe);z$o=r(rit,"layoutlmv2"),rit.forEach(t),W$o=r(B8e," \u2014 "),dG=n(B8e,"A",{href:!0});var tit=s(dG);Q$o=r(tit,"LayoutLMv2ForSequenceClassification"),tit.forEach(t),H$o=r(B8e," (LayoutLMv2 model)"),B8e.forEach(t),U$o=i(j),ab=n(j,"LI",{});var P8e=s(ab);$fe=n(P8e,"STRONG",{});var ait=s($fe);J$o=r(ait,"led"),ait.forEach(t),Y$o=r(P8e," \u2014 "),cG=n(P8e,"A",{href:!0});var nit=s(cG);K$o=r(nit,"LEDForSequenceClassification"),nit.forEach(t),Z$o=r(P8e," (LED model)"),P8e.forEach(t),eko=i(j),nb=n(j,"LI",{});var I8e=s(nb);kfe=n(I8e,"STRONG",{});var sit=s(kfe);oko=r(sit,"longformer"),sit.forEach(t),rko=r(I8e," \u2014 "),fG=n(I8e,"A",{href:!0});var lit=s(fG);tko=r(lit,"LongformerForSequenceClassification"),lit.forEach(t),ako=r(I8e," (Longformer model)"),I8e.forEach(t),nko=i(j),sb=n(j,"LI",{});var q8e=s(sb);Sfe=n(q8e,"STRONG",{});var iit=s(Sfe);sko=r(iit,"mbart"),iit.forEach(t),lko=r(q8e," \u2014 "),mG=n(q8e,"A",{href:!0});var dit=s(mG);iko=r(dit,"MBartForSequenceClassification"),dit.forEach(t),dko=r(q8e," (mBART model)"),q8e.forEach(t),cko=i(j),lb=n(j,"LI",{});var N8e=s(lb);Rfe=n(N8e,"STRONG",{});var cit=s(Rfe);fko=r(cit,"megatron-bert"),cit.forEach(t),mko=r(N8e," \u2014 "),gG=n(N8e,"A",{href:!0});var fit=s(gG);gko=r(fit,"MegatronBertForSequenceClassification"),fit.forEach(t),hko=r(N8e," (MegatronBert model)"),N8e.forEach(t),pko=i(j),ib=n(j,"LI",{});var j8e=s(ib);Bfe=n(j8e,"STRONG",{});var mit=s(Bfe);_ko=r(mit,"mobilebert"),mit.forEach(t),uko=r(j8e," \u2014 "),hG=n(j8e,"A",{href:!0});var git=s(hG);bko=r(git,"MobileBertForSequenceClassification"),git.forEach(t),vko=r(j8e," (MobileBERT model)"),j8e.forEach(t),Fko=i(j),db=n(j,"LI",{});var D8e=s(db);Pfe=n(D8e,"STRONG",{});var hit=s(Pfe);Tko=r(hit,"mpnet"),hit.forEach(t),Mko=r(D8e," \u2014 "),pG=n(D8e,"A",{href:!0});var pit=s(pG);Eko=r(pit,"MPNetForSequenceClassification"),pit.forEach(t),Cko=r(D8e," (MPNet model)"),D8e.forEach(t),wko=i(j),cb=n(j,"LI",{});var G8e=s(cb);Ife=n(G8e,"STRONG",{});var _it=s(Ife);Ako=r(_it,"nystromformer"),_it.forEach(t),yko=r(G8e," \u2014 "),_G=n(G8e,"A",{href:!0});var uit=s(_G);Lko=r(uit,"NystromformerForSequenceClassification"),uit.forEach(t),xko=r(G8e," (Nystromformer model)"),G8e.forEach(t),$ko=i(j),fb=n(j,"LI",{});var O8e=s(fb);qfe=n(O8e,"STRONG",{});var bit=s(qfe);kko=r(bit,"openai-gpt"),bit.forEach(t),Sko=r(O8e," \u2014 "),uG=n(O8e,"A",{href:!0});var vit=s(uG);Rko=r(vit,"OpenAIGPTForSequenceClassification"),vit.forEach(t),Bko=r(O8e," (OpenAI GPT model)"),O8e.forEach(t),Pko=i(j),mb=n(j,"LI",{});var V8e=s(mb);Nfe=n(V8e,"STRONG",{});var Fit=s(Nfe);Iko=r(Fit,"perceiver"),Fit.forEach(t),qko=r(V8e," \u2014 "),bG=n(V8e,"A",{href:!0});var Tit=s(bG);Nko=r(Tit,"PerceiverForSequenceClassification"),Tit.forEach(t),jko=r(V8e," (Perceiver model)"),V8e.forEach(t),Dko=i(j),gb=n(j,"LI",{});var X8e=s(gb);jfe=n(X8e,"STRONG",{});var Mit=s(jfe);Gko=r(Mit,"plbart"),Mit.forEach(t),Oko=r(X8e," \u2014 "),vG=n(X8e,"A",{href:!0});var Eit=s(vG);Vko=r(Eit,"PLBartForSequenceClassification"),Eit.forEach(t),Xko=r(X8e," (PLBart model)"),X8e.forEach(t),zko=i(j),hb=n(j,"LI",{});var z8e=s(hb);Dfe=n(z8e,"STRONG",{});var Cit=s(Dfe);Wko=r(Cit,"qdqbert"),Cit.forEach(t),Qko=r(z8e," \u2014 "),FG=n(z8e,"A",{href:!0});var wit=s(FG);Hko=r(wit,"QDQBertForSequenceClassification"),wit.forEach(t),Uko=r(z8e," (QDQBert model)"),z8e.forEach(t),Jko=i(j),pb=n(j,"LI",{});var W8e=s(pb);Gfe=n(W8e,"STRONG",{});var Ait=s(Gfe);Yko=r(Ait,"reformer"),Ait.forEach(t),Kko=r(W8e," \u2014 "),TG=n(W8e,"A",{href:!0});var yit=s(TG);Zko=r(yit,"ReformerForSequenceClassification"),yit.forEach(t),eSo=r(W8e," (Reformer model)"),W8e.forEach(t),oSo=i(j),_b=n(j,"LI",{});var Q8e=s(_b);Ofe=n(Q8e,"STRONG",{});var Lit=s(Ofe);rSo=r(Lit,"rembert"),Lit.forEach(t),tSo=r(Q8e," \u2014 "),MG=n(Q8e,"A",{href:!0});var xit=s(MG);aSo=r(xit,"RemBertForSequenceClassification"),xit.forEach(t),nSo=r(Q8e," (RemBERT model)"),Q8e.forEach(t),sSo=i(j),ub=n(j,"LI",{});var H8e=s(ub);Vfe=n(H8e,"STRONG",{});var $it=s(Vfe);lSo=r($it,"roberta"),$it.forEach(t),iSo=r(H8e," \u2014 "),EG=n(H8e,"A",{href:!0});var kit=s(EG);dSo=r(kit,"RobertaForSequenceClassification"),kit.forEach(t),cSo=r(H8e," (RoBERTa model)"),H8e.forEach(t),fSo=i(j),bb=n(j,"LI",{});var U8e=s(bb);Xfe=n(U8e,"STRONG",{});var Sit=s(Xfe);mSo=r(Sit,"roformer"),Sit.forEach(t),gSo=r(U8e," \u2014 "),CG=n(U8e,"A",{href:!0});var Rit=s(CG);hSo=r(Rit,"RoFormerForSequenceClassification"),Rit.forEach(t),pSo=r(U8e," (RoFormer model)"),U8e.forEach(t),_So=i(j),vb=n(j,"LI",{});var J8e=s(vb);zfe=n(J8e,"STRONG",{});var Bit=s(zfe);uSo=r(Bit,"squeezebert"),Bit.forEach(t),bSo=r(J8e," \u2014 "),wG=n(J8e,"A",{href:!0});var Pit=s(wG);vSo=r(Pit,"SqueezeBertForSequenceClassification"),Pit.forEach(t),FSo=r(J8e," (SqueezeBERT model)"),J8e.forEach(t),TSo=i(j),Fb=n(j,"LI",{});var Y8e=s(Fb);Wfe=n(Y8e,"STRONG",{});var Iit=s(Wfe);MSo=r(Iit,"tapas"),Iit.forEach(t),ESo=r(Y8e," \u2014 "),AG=n(Y8e,"A",{href:!0});var qit=s(AG);CSo=r(qit,"TapasForSequenceClassification"),qit.forEach(t),wSo=r(Y8e," (TAPAS model)"),Y8e.forEach(t),ASo=i(j),Tb=n(j,"LI",{});var K8e=s(Tb);Qfe=n(K8e,"STRONG",{});var Nit=s(Qfe);ySo=r(Nit,"transfo-xl"),Nit.forEach(t),LSo=r(K8e," \u2014 "),yG=n(K8e,"A",{href:!0});var jit=s(yG);xSo=r(jit,"TransfoXLForSequenceClassification"),jit.forEach(t),$So=r(K8e," (Transformer-XL model)"),K8e.forEach(t),kSo=i(j),Mb=n(j,"LI",{});var Z8e=s(Mb);Hfe=n(Z8e,"STRONG",{});var Dit=s(Hfe);SSo=r(Dit,"xlm"),Dit.forEach(t),RSo=r(Z8e," \u2014 "),LG=n(Z8e,"A",{href:!0});var Git=s(LG);BSo=r(Git,"XLMForSequenceClassification"),Git.forEach(t),PSo=r(Z8e," (XLM model)"),Z8e.forEach(t),ISo=i(j),Eb=n(j,"LI",{});var e9e=s(Eb);Ufe=n(e9e,"STRONG",{});var Oit=s(Ufe);qSo=r(Oit,"xlm-roberta"),Oit.forEach(t),NSo=r(e9e," \u2014 "),xG=n(e9e,"A",{href:!0});var Vit=s(xG);jSo=r(Vit,"XLMRobertaForSequenceClassification"),Vit.forEach(t),DSo=r(e9e," (XLM-RoBERTa model)"),e9e.forEach(t),GSo=i(j),Cb=n(j,"LI",{});var o9e=s(Cb);Jfe=n(o9e,"STRONG",{});var Xit=s(Jfe);OSo=r(Xit,"xlm-roberta-xl"),Xit.forEach(t),VSo=r(o9e," \u2014 "),$G=n(o9e,"A",{href:!0});var zit=s($G);XSo=r(zit,"XLMRobertaXLForSequenceClassification"),zit.forEach(t),zSo=r(o9e," (XLM-RoBERTa-XL model)"),o9e.forEach(t),WSo=i(j),wb=n(j,"LI",{});var r9e=s(wb);Yfe=n(r9e,"STRONG",{});var Wit=s(Yfe);QSo=r(Wit,"xlnet"),Wit.forEach(t),HSo=r(r9e," \u2014 "),kG=n(r9e,"A",{href:!0});var Qit=s(kG);USo=r(Qit,"XLNetForSequenceClassification"),Qit.forEach(t),JSo=r(r9e," (XLNet model)"),r9e.forEach(t),YSo=i(j),Ab=n(j,"LI",{});var t9e=s(Ab);Kfe=n(t9e,"STRONG",{});var Hit=s(Kfe);KSo=r(Hit,"yoso"),Hit.forEach(t),ZSo=r(t9e," \u2014 "),SG=n(t9e,"A",{href:!0});var Uit=s(SG);eRo=r(Uit,"YosoForSequenceClassification"),Uit.forEach(t),oRo=r(t9e," (YOSO model)"),t9e.forEach(t),j.forEach(t),rRo=i(sa),yb=n(sa,"P",{});var a9e=s(yb);tRo=r(a9e,"The model is set in evaluation mode by default using "),Zfe=n(a9e,"CODE",{});var Jit=s(Zfe);aRo=r(Jit,"model.eval()"),Jit.forEach(t),nRo=r(a9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(a9e,"CODE",{});var Yit=s(eme);sRo=r(Yit,"model.train()"),Yit.forEach(t),a9e.forEach(t),lRo=i(sa),T(Lb.$$.fragment,sa),sa.forEach(t),zs.forEach(t),Lqe=i(f),Oi=n(f,"H2",{class:!0});var Sje=s(Oi);xb=n(Sje,"A",{id:!0,class:!0,href:!0});var Kit=s(xb);ome=n(Kit,"SPAN",{});var Zit=s(ome);T(uy.$$.fragment,Zit),Zit.forEach(t),Kit.forEach(t),iRo=i(Sje),rme=n(Sje,"SPAN",{});var edt=s(rme);dRo=r(edt,"AutoModelForMultipleChoice"),edt.forEach(t),Sje.forEach(t),xqe=i(f),Bo=n(f,"DIV",{class:!0});var Ws=s(Bo);T(by.$$.fragment,Ws),cRo=i(Ws),Vi=n(Ws,"P",{});var oZ=s(Vi);fRo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RG=n(oZ,"A",{href:!0});var odt=s(RG);mRo=r(odt,"from_pretrained()"),odt.forEach(t),gRo=r(oZ," class method or the "),BG=n(oZ,"A",{href:!0});var rdt=s(BG);hRo=r(rdt,"from_config()"),rdt.forEach(t),pRo=r(oZ,` class
method.`),oZ.forEach(t),_Ro=i(Ws),vy=n(Ws,"P",{});var Rje=s(vy);uRo=r(Rje,"This class cannot be instantiated directly using "),tme=n(Rje,"CODE",{});var tdt=s(tme);bRo=r(tdt,"__init__()"),tdt.forEach(t),vRo=r(Rje," (throws an error)."),Rje.forEach(t),FRo=i(Ws),dt=n(Ws,"DIV",{class:!0});var kw=s(dt);T(Fy.$$.fragment,kw),TRo=i(kw),ame=n(kw,"P",{});var adt=s(ame);MRo=r(adt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),adt.forEach(t),ERo=i(kw),Xi=n(kw,"P",{});var rZ=s(Xi);CRo=r(rZ,`Note:
Loading a model from its configuration file does `),nme=n(rZ,"STRONG",{});var ndt=s(nme);wRo=r(ndt,"not"),ndt.forEach(t),ARo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(rZ,"A",{href:!0});var sdt=s(PG);yRo=r(sdt,"from_pretrained()"),sdt.forEach(t),LRo=r(rZ," to load the model weights."),rZ.forEach(t),xRo=i(kw),T($b.$$.fragment,kw),kw.forEach(t),$Ro=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(Ty.$$.fragment,la),kRo=i(la),sme=n(la,"P",{});var ldt=s(sme);SRo=r(ldt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ldt.forEach(t),RRo=i(la),Ba=n(la,"P",{});var Sw=s(Ba);BRo=r(Sw,"The model class to instantiate is selected based on the "),lme=n(Sw,"CODE",{});var idt=s(lme);PRo=r(idt,"model_type"),idt.forEach(t),IRo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),ime=n(Sw,"CODE",{});var ddt=s(ime);qRo=r(ddt,"pretrained_model_name_or_path"),ddt.forEach(t),NRo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(Sw,"CODE",{});var cdt=s(dme);jRo=r(cdt,"pretrained_model_name_or_path"),cdt.forEach(t),DRo=r(Sw,":"),Sw.forEach(t),GRo=i(la),Y=n(la,"UL",{});var K=s(Y);kb=n(K,"LI",{});var n9e=s(kb);cme=n(n9e,"STRONG",{});var fdt=s(cme);ORo=r(fdt,"albert"),fdt.forEach(t),VRo=r(n9e," \u2014 "),IG=n(n9e,"A",{href:!0});var mdt=s(IG);XRo=r(mdt,"AlbertForMultipleChoice"),mdt.forEach(t),zRo=r(n9e," (ALBERT model)"),n9e.forEach(t),WRo=i(K),Sb=n(K,"LI",{});var s9e=s(Sb);fme=n(s9e,"STRONG",{});var gdt=s(fme);QRo=r(gdt,"bert"),gdt.forEach(t),HRo=r(s9e," \u2014 "),qG=n(s9e,"A",{href:!0});var hdt=s(qG);URo=r(hdt,"BertForMultipleChoice"),hdt.forEach(t),JRo=r(s9e," (BERT model)"),s9e.forEach(t),YRo=i(K),Rb=n(K,"LI",{});var l9e=s(Rb);mme=n(l9e,"STRONG",{});var pdt=s(mme);KRo=r(pdt,"big_bird"),pdt.forEach(t),ZRo=r(l9e," \u2014 "),NG=n(l9e,"A",{href:!0});var _dt=s(NG);eBo=r(_dt,"BigBirdForMultipleChoice"),_dt.forEach(t),oBo=r(l9e," (BigBird model)"),l9e.forEach(t),rBo=i(K),Bb=n(K,"LI",{});var i9e=s(Bb);gme=n(i9e,"STRONG",{});var udt=s(gme);tBo=r(udt,"camembert"),udt.forEach(t),aBo=r(i9e," \u2014 "),jG=n(i9e,"A",{href:!0});var bdt=s(jG);nBo=r(bdt,"CamembertForMultipleChoice"),bdt.forEach(t),sBo=r(i9e," (CamemBERT model)"),i9e.forEach(t),lBo=i(K),Pb=n(K,"LI",{});var d9e=s(Pb);hme=n(d9e,"STRONG",{});var vdt=s(hme);iBo=r(vdt,"canine"),vdt.forEach(t),dBo=r(d9e," \u2014 "),DG=n(d9e,"A",{href:!0});var Fdt=s(DG);cBo=r(Fdt,"CanineForMultipleChoice"),Fdt.forEach(t),fBo=r(d9e," (Canine model)"),d9e.forEach(t),mBo=i(K),Ib=n(K,"LI",{});var c9e=s(Ib);pme=n(c9e,"STRONG",{});var Tdt=s(pme);gBo=r(Tdt,"convbert"),Tdt.forEach(t),hBo=r(c9e," \u2014 "),GG=n(c9e,"A",{href:!0});var Mdt=s(GG);pBo=r(Mdt,"ConvBertForMultipleChoice"),Mdt.forEach(t),_Bo=r(c9e," (ConvBERT model)"),c9e.forEach(t),uBo=i(K),qb=n(K,"LI",{});var f9e=s(qb);_me=n(f9e,"STRONG",{});var Edt=s(_me);bBo=r(Edt,"data2vec-text"),Edt.forEach(t),vBo=r(f9e," \u2014 "),OG=n(f9e,"A",{href:!0});var Cdt=s(OG);FBo=r(Cdt,"Data2VecTextForMultipleChoice"),Cdt.forEach(t),TBo=r(f9e," (Data2VecText model)"),f9e.forEach(t),MBo=i(K),Nb=n(K,"LI",{});var m9e=s(Nb);ume=n(m9e,"STRONG",{});var wdt=s(ume);EBo=r(wdt,"deberta-v2"),wdt.forEach(t),CBo=r(m9e," \u2014 "),VG=n(m9e,"A",{href:!0});var Adt=s(VG);wBo=r(Adt,"DebertaV2ForMultipleChoice"),Adt.forEach(t),ABo=r(m9e," (DeBERTa-v2 model)"),m9e.forEach(t),yBo=i(K),jb=n(K,"LI",{});var g9e=s(jb);bme=n(g9e,"STRONG",{});var ydt=s(bme);LBo=r(ydt,"distilbert"),ydt.forEach(t),xBo=r(g9e," \u2014 "),XG=n(g9e,"A",{href:!0});var Ldt=s(XG);$Bo=r(Ldt,"DistilBertForMultipleChoice"),Ldt.forEach(t),kBo=r(g9e," (DistilBERT model)"),g9e.forEach(t),SBo=i(K),Db=n(K,"LI",{});var h9e=s(Db);vme=n(h9e,"STRONG",{});var xdt=s(vme);RBo=r(xdt,"electra"),xdt.forEach(t),BBo=r(h9e," \u2014 "),zG=n(h9e,"A",{href:!0});var $dt=s(zG);PBo=r($dt,"ElectraForMultipleChoice"),$dt.forEach(t),IBo=r(h9e," (ELECTRA model)"),h9e.forEach(t),qBo=i(K),Gb=n(K,"LI",{});var p9e=s(Gb);Fme=n(p9e,"STRONG",{});var kdt=s(Fme);NBo=r(kdt,"flaubert"),kdt.forEach(t),jBo=r(p9e," \u2014 "),WG=n(p9e,"A",{href:!0});var Sdt=s(WG);DBo=r(Sdt,"FlaubertForMultipleChoice"),Sdt.forEach(t),GBo=r(p9e," (FlauBERT model)"),p9e.forEach(t),OBo=i(K),Ob=n(K,"LI",{});var _9e=s(Ob);Tme=n(_9e,"STRONG",{});var Rdt=s(Tme);VBo=r(Rdt,"fnet"),Rdt.forEach(t),XBo=r(_9e," \u2014 "),QG=n(_9e,"A",{href:!0});var Bdt=s(QG);zBo=r(Bdt,"FNetForMultipleChoice"),Bdt.forEach(t),WBo=r(_9e," (FNet model)"),_9e.forEach(t),QBo=i(K),Vb=n(K,"LI",{});var u9e=s(Vb);Mme=n(u9e,"STRONG",{});var Pdt=s(Mme);HBo=r(Pdt,"funnel"),Pdt.forEach(t),UBo=r(u9e," \u2014 "),HG=n(u9e,"A",{href:!0});var Idt=s(HG);JBo=r(Idt,"FunnelForMultipleChoice"),Idt.forEach(t),YBo=r(u9e," (Funnel Transformer model)"),u9e.forEach(t),KBo=i(K),Xb=n(K,"LI",{});var b9e=s(Xb);Eme=n(b9e,"STRONG",{});var qdt=s(Eme);ZBo=r(qdt,"ibert"),qdt.forEach(t),ePo=r(b9e," \u2014 "),UG=n(b9e,"A",{href:!0});var Ndt=s(UG);oPo=r(Ndt,"IBertForMultipleChoice"),Ndt.forEach(t),rPo=r(b9e," (I-BERT model)"),b9e.forEach(t),tPo=i(K),zb=n(K,"LI",{});var v9e=s(zb);Cme=n(v9e,"STRONG",{});var jdt=s(Cme);aPo=r(jdt,"longformer"),jdt.forEach(t),nPo=r(v9e," \u2014 "),JG=n(v9e,"A",{href:!0});var Ddt=s(JG);sPo=r(Ddt,"LongformerForMultipleChoice"),Ddt.forEach(t),lPo=r(v9e," (Longformer model)"),v9e.forEach(t),iPo=i(K),Wb=n(K,"LI",{});var F9e=s(Wb);wme=n(F9e,"STRONG",{});var Gdt=s(wme);dPo=r(Gdt,"megatron-bert"),Gdt.forEach(t),cPo=r(F9e," \u2014 "),YG=n(F9e,"A",{href:!0});var Odt=s(YG);fPo=r(Odt,"MegatronBertForMultipleChoice"),Odt.forEach(t),mPo=r(F9e," (MegatronBert model)"),F9e.forEach(t),gPo=i(K),Qb=n(K,"LI",{});var T9e=s(Qb);Ame=n(T9e,"STRONG",{});var Vdt=s(Ame);hPo=r(Vdt,"mobilebert"),Vdt.forEach(t),pPo=r(T9e," \u2014 "),KG=n(T9e,"A",{href:!0});var Xdt=s(KG);_Po=r(Xdt,"MobileBertForMultipleChoice"),Xdt.forEach(t),uPo=r(T9e," (MobileBERT model)"),T9e.forEach(t),bPo=i(K),Hb=n(K,"LI",{});var M9e=s(Hb);yme=n(M9e,"STRONG",{});var zdt=s(yme);vPo=r(zdt,"mpnet"),zdt.forEach(t),FPo=r(M9e," \u2014 "),ZG=n(M9e,"A",{href:!0});var Wdt=s(ZG);TPo=r(Wdt,"MPNetForMultipleChoice"),Wdt.forEach(t),MPo=r(M9e," (MPNet model)"),M9e.forEach(t),EPo=i(K),Ub=n(K,"LI",{});var E9e=s(Ub);Lme=n(E9e,"STRONG",{});var Qdt=s(Lme);CPo=r(Qdt,"nystromformer"),Qdt.forEach(t),wPo=r(E9e," \u2014 "),eO=n(E9e,"A",{href:!0});var Hdt=s(eO);APo=r(Hdt,"NystromformerForMultipleChoice"),Hdt.forEach(t),yPo=r(E9e," (Nystromformer model)"),E9e.forEach(t),LPo=i(K),Jb=n(K,"LI",{});var C9e=s(Jb);xme=n(C9e,"STRONG",{});var Udt=s(xme);xPo=r(Udt,"qdqbert"),Udt.forEach(t),$Po=r(C9e," \u2014 "),oO=n(C9e,"A",{href:!0});var Jdt=s(oO);kPo=r(Jdt,"QDQBertForMultipleChoice"),Jdt.forEach(t),SPo=r(C9e," (QDQBert model)"),C9e.forEach(t),RPo=i(K),Yb=n(K,"LI",{});var w9e=s(Yb);$me=n(w9e,"STRONG",{});var Ydt=s($me);BPo=r(Ydt,"rembert"),Ydt.forEach(t),PPo=r(w9e," \u2014 "),rO=n(w9e,"A",{href:!0});var Kdt=s(rO);IPo=r(Kdt,"RemBertForMultipleChoice"),Kdt.forEach(t),qPo=r(w9e," (RemBERT model)"),w9e.forEach(t),NPo=i(K),Kb=n(K,"LI",{});var A9e=s(Kb);kme=n(A9e,"STRONG",{});var Zdt=s(kme);jPo=r(Zdt,"roberta"),Zdt.forEach(t),DPo=r(A9e," \u2014 "),tO=n(A9e,"A",{href:!0});var ect=s(tO);GPo=r(ect,"RobertaForMultipleChoice"),ect.forEach(t),OPo=r(A9e," (RoBERTa model)"),A9e.forEach(t),VPo=i(K),Zb=n(K,"LI",{});var y9e=s(Zb);Sme=n(y9e,"STRONG",{});var oct=s(Sme);XPo=r(oct,"roformer"),oct.forEach(t),zPo=r(y9e," \u2014 "),aO=n(y9e,"A",{href:!0});var rct=s(aO);WPo=r(rct,"RoFormerForMultipleChoice"),rct.forEach(t),QPo=r(y9e," (RoFormer model)"),y9e.forEach(t),HPo=i(K),ev=n(K,"LI",{});var L9e=s(ev);Rme=n(L9e,"STRONG",{});var tct=s(Rme);UPo=r(tct,"squeezebert"),tct.forEach(t),JPo=r(L9e," \u2014 "),nO=n(L9e,"A",{href:!0});var act=s(nO);YPo=r(act,"SqueezeBertForMultipleChoice"),act.forEach(t),KPo=r(L9e," (SqueezeBERT model)"),L9e.forEach(t),ZPo=i(K),ov=n(K,"LI",{});var x9e=s(ov);Bme=n(x9e,"STRONG",{});var nct=s(Bme);eIo=r(nct,"xlm"),nct.forEach(t),oIo=r(x9e," \u2014 "),sO=n(x9e,"A",{href:!0});var sct=s(sO);rIo=r(sct,"XLMForMultipleChoice"),sct.forEach(t),tIo=r(x9e," (XLM model)"),x9e.forEach(t),aIo=i(K),rv=n(K,"LI",{});var $9e=s(rv);Pme=n($9e,"STRONG",{});var lct=s(Pme);nIo=r(lct,"xlm-roberta"),lct.forEach(t),sIo=r($9e," \u2014 "),lO=n($9e,"A",{href:!0});var ict=s(lO);lIo=r(ict,"XLMRobertaForMultipleChoice"),ict.forEach(t),iIo=r($9e," (XLM-RoBERTa model)"),$9e.forEach(t),dIo=i(K),tv=n(K,"LI",{});var k9e=s(tv);Ime=n(k9e,"STRONG",{});var dct=s(Ime);cIo=r(dct,"xlm-roberta-xl"),dct.forEach(t),fIo=r(k9e," \u2014 "),iO=n(k9e,"A",{href:!0});var cct=s(iO);mIo=r(cct,"XLMRobertaXLForMultipleChoice"),cct.forEach(t),gIo=r(k9e," (XLM-RoBERTa-XL model)"),k9e.forEach(t),hIo=i(K),av=n(K,"LI",{});var S9e=s(av);qme=n(S9e,"STRONG",{});var fct=s(qme);pIo=r(fct,"xlnet"),fct.forEach(t),_Io=r(S9e," \u2014 "),dO=n(S9e,"A",{href:!0});var mct=s(dO);uIo=r(mct,"XLNetForMultipleChoice"),mct.forEach(t),bIo=r(S9e," (XLNet model)"),S9e.forEach(t),vIo=i(K),nv=n(K,"LI",{});var R9e=s(nv);Nme=n(R9e,"STRONG",{});var gct=s(Nme);FIo=r(gct,"yoso"),gct.forEach(t),TIo=r(R9e," \u2014 "),cO=n(R9e,"A",{href:!0});var hct=s(cO);MIo=r(hct,"YosoForMultipleChoice"),hct.forEach(t),EIo=r(R9e," (YOSO model)"),R9e.forEach(t),K.forEach(t),CIo=i(la),sv=n(la,"P",{});var B9e=s(sv);wIo=r(B9e,"The model is set in evaluation mode by default using "),jme=n(B9e,"CODE",{});var pct=s(jme);AIo=r(pct,"model.eval()"),pct.forEach(t),yIo=r(B9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(B9e,"CODE",{});var _ct=s(Dme);LIo=r(_ct,"model.train()"),_ct.forEach(t),B9e.forEach(t),xIo=i(la),T(lv.$$.fragment,la),la.forEach(t),Ws.forEach(t),$qe=i(f),zi=n(f,"H2",{class:!0});var Bje=s(zi);iv=n(Bje,"A",{id:!0,class:!0,href:!0});var uct=s(iv);Gme=n(uct,"SPAN",{});var bct=s(Gme);T(My.$$.fragment,bct),bct.forEach(t),uct.forEach(t),$Io=i(Bje),Ome=n(Bje,"SPAN",{});var vct=s(Ome);kIo=r(vct,"AutoModelForNextSentencePrediction"),vct.forEach(t),Bje.forEach(t),kqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(Ey.$$.fragment,Qs),SIo=i(Qs),Wi=n(Qs,"P",{});var tZ=s(Wi);RIo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fO=n(tZ,"A",{href:!0});var Fct=s(fO);BIo=r(Fct,"from_pretrained()"),Fct.forEach(t),PIo=r(tZ," class method or the "),mO=n(tZ,"A",{href:!0});var Tct=s(mO);IIo=r(Tct,"from_config()"),Tct.forEach(t),qIo=r(tZ,` class
method.`),tZ.forEach(t),NIo=i(Qs),Cy=n(Qs,"P",{});var Pje=s(Cy);jIo=r(Pje,"This class cannot be instantiated directly using "),Vme=n(Pje,"CODE",{});var Mct=s(Vme);DIo=r(Mct,"__init__()"),Mct.forEach(t),GIo=r(Pje," (throws an error)."),Pje.forEach(t),OIo=i(Qs),ct=n(Qs,"DIV",{class:!0});var Rw=s(ct);T(wy.$$.fragment,Rw),VIo=i(Rw),Xme=n(Rw,"P",{});var Ect=s(Xme);XIo=r(Ect,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ect.forEach(t),zIo=i(Rw),Qi=n(Rw,"P",{});var aZ=s(Qi);WIo=r(aZ,`Note:
Loading a model from its configuration file does `),zme=n(aZ,"STRONG",{});var Cct=s(zme);QIo=r(Cct,"not"),Cct.forEach(t),HIo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=n(aZ,"A",{href:!0});var wct=s(gO);UIo=r(wct,"from_pretrained()"),wct.forEach(t),JIo=r(aZ," to load the model weights."),aZ.forEach(t),YIo=i(Rw),T(dv.$$.fragment,Rw),Rw.forEach(t),KIo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(Ay.$$.fragment,ia),ZIo=i(ia),Wme=n(ia,"P",{});var Act=s(Wme);eqo=r(Act,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Act.forEach(t),oqo=i(ia),Pa=n(ia,"P",{});var Bw=s(Pa);rqo=r(Bw,"The model class to instantiate is selected based on the "),Qme=n(Bw,"CODE",{});var yct=s(Qme);tqo=r(yct,"model_type"),yct.forEach(t),aqo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Hme=n(Bw,"CODE",{});var Lct=s(Hme);nqo=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),sqo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=n(Bw,"CODE",{});var xct=s(Ume);lqo=r(xct,"pretrained_model_name_or_path"),xct.forEach(t),iqo=r(Bw,":"),Bw.forEach(t),dqo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);cv=n(Hs,"LI",{});var P9e=s(cv);Jme=n(P9e,"STRONG",{});var $ct=s(Jme);cqo=r($ct,"bert"),$ct.forEach(t),fqo=r(P9e," \u2014 "),hO=n(P9e,"A",{href:!0});var kct=s(hO);mqo=r(kct,"BertForNextSentencePrediction"),kct.forEach(t),gqo=r(P9e," (BERT model)"),P9e.forEach(t),hqo=i(Hs),fv=n(Hs,"LI",{});var I9e=s(fv);Yme=n(I9e,"STRONG",{});var Sct=s(Yme);pqo=r(Sct,"fnet"),Sct.forEach(t),_qo=r(I9e," \u2014 "),pO=n(I9e,"A",{href:!0});var Rct=s(pO);uqo=r(Rct,"FNetForNextSentencePrediction"),Rct.forEach(t),bqo=r(I9e," (FNet model)"),I9e.forEach(t),vqo=i(Hs),mv=n(Hs,"LI",{});var q9e=s(mv);Kme=n(q9e,"STRONG",{});var Bct=s(Kme);Fqo=r(Bct,"megatron-bert"),Bct.forEach(t),Tqo=r(q9e," \u2014 "),_O=n(q9e,"A",{href:!0});var Pct=s(_O);Mqo=r(Pct,"MegatronBertForNextSentencePrediction"),Pct.forEach(t),Eqo=r(q9e," (MegatronBert model)"),q9e.forEach(t),Cqo=i(Hs),gv=n(Hs,"LI",{});var N9e=s(gv);Zme=n(N9e,"STRONG",{});var Ict=s(Zme);wqo=r(Ict,"mobilebert"),Ict.forEach(t),Aqo=r(N9e," \u2014 "),uO=n(N9e,"A",{href:!0});var qct=s(uO);yqo=r(qct,"MobileBertForNextSentencePrediction"),qct.forEach(t),Lqo=r(N9e," (MobileBERT model)"),N9e.forEach(t),xqo=i(Hs),hv=n(Hs,"LI",{});var j9e=s(hv);ege=n(j9e,"STRONG",{});var Nct=s(ege);$qo=r(Nct,"qdqbert"),Nct.forEach(t),kqo=r(j9e," \u2014 "),bO=n(j9e,"A",{href:!0});var jct=s(bO);Sqo=r(jct,"QDQBertForNextSentencePrediction"),jct.forEach(t),Rqo=r(j9e," (QDQBert model)"),j9e.forEach(t),Hs.forEach(t),Bqo=i(ia),pv=n(ia,"P",{});var D9e=s(pv);Pqo=r(D9e,"The model is set in evaluation mode by default using "),oge=n(D9e,"CODE",{});var Dct=s(oge);Iqo=r(Dct,"model.eval()"),Dct.forEach(t),qqo=r(D9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rge=n(D9e,"CODE",{});var Gct=s(rge);Nqo=r(Gct,"model.train()"),Gct.forEach(t),D9e.forEach(t),jqo=i(ia),T(_v.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),Sqe=i(f),Hi=n(f,"H2",{class:!0});var Ije=s(Hi);uv=n(Ije,"A",{id:!0,class:!0,href:!0});var Oct=s(uv);tge=n(Oct,"SPAN",{});var Vct=s(tge);T(yy.$$.fragment,Vct),Vct.forEach(t),Oct.forEach(t),Dqo=i(Ije),age=n(Ije,"SPAN",{});var Xct=s(age);Gqo=r(Xct,"AutoModelForTokenClassification"),Xct.forEach(t),Ije.forEach(t),Rqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(Ly.$$.fragment,Us),Oqo=i(Us),Ui=n(Us,"P",{});var nZ=s(Ui);Vqo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vO=n(nZ,"A",{href:!0});var zct=s(vO);Xqo=r(zct,"from_pretrained()"),zct.forEach(t),zqo=r(nZ," class method or the "),FO=n(nZ,"A",{href:!0});var Wct=s(FO);Wqo=r(Wct,"from_config()"),Wct.forEach(t),Qqo=r(nZ,` class
method.`),nZ.forEach(t),Hqo=i(Us),xy=n(Us,"P",{});var qje=s(xy);Uqo=r(qje,"This class cannot be instantiated directly using "),nge=n(qje,"CODE",{});var Qct=s(nge);Jqo=r(Qct,"__init__()"),Qct.forEach(t),Yqo=r(qje," (throws an error)."),qje.forEach(t),Kqo=i(Us),ft=n(Us,"DIV",{class:!0});var Pw=s(ft);T($y.$$.fragment,Pw),Zqo=i(Pw),sge=n(Pw,"P",{});var Hct=s(sge);eNo=r(Hct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hct.forEach(t),oNo=i(Pw),Ji=n(Pw,"P",{});var sZ=s(Ji);rNo=r(sZ,`Note:
Loading a model from its configuration file does `),lge=n(sZ,"STRONG",{});var Uct=s(lge);tNo=r(Uct,"not"),Uct.forEach(t),aNo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=n(sZ,"A",{href:!0});var Jct=s(TO);nNo=r(Jct,"from_pretrained()"),Jct.forEach(t),sNo=r(sZ," to load the model weights."),sZ.forEach(t),lNo=i(Pw),T(bv.$$.fragment,Pw),Pw.forEach(t),iNo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(ky.$$.fragment,da),dNo=i(da),ige=n(da,"P",{});var Yct=s(ige);cNo=r(Yct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Yct.forEach(t),fNo=i(da),Ia=n(da,"P",{});var Iw=s(Ia);mNo=r(Iw,"The model class to instantiate is selected based on the "),dge=n(Iw,"CODE",{});var Kct=s(dge);gNo=r(Kct,"model_type"),Kct.forEach(t),hNo=r(Iw,` property of the config object (either
passed as an argument or loaded from `),cge=n(Iw,"CODE",{});var Zct=s(cge);pNo=r(Zct,"pretrained_model_name_or_path"),Zct.forEach(t),_No=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=n(Iw,"CODE",{});var eft=s(fge);uNo=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),bNo=r(Iw,":"),Iw.forEach(t),vNo=i(da),U=n(da,"UL",{});var J=s(U);vv=n(J,"LI",{});var G9e=s(vv);mge=n(G9e,"STRONG",{});var oft=s(mge);FNo=r(oft,"albert"),oft.forEach(t),TNo=r(G9e," \u2014 "),MO=n(G9e,"A",{href:!0});var rft=s(MO);MNo=r(rft,"AlbertForTokenClassification"),rft.forEach(t),ENo=r(G9e," (ALBERT model)"),G9e.forEach(t),CNo=i(J),Fv=n(J,"LI",{});var O9e=s(Fv);gge=n(O9e,"STRONG",{});var tft=s(gge);wNo=r(tft,"bert"),tft.forEach(t),ANo=r(O9e," \u2014 "),EO=n(O9e,"A",{href:!0});var aft=s(EO);yNo=r(aft,"BertForTokenClassification"),aft.forEach(t),LNo=r(O9e," (BERT model)"),O9e.forEach(t),xNo=i(J),Tv=n(J,"LI",{});var V9e=s(Tv);hge=n(V9e,"STRONG",{});var nft=s(hge);$No=r(nft,"big_bird"),nft.forEach(t),kNo=r(V9e," \u2014 "),CO=n(V9e,"A",{href:!0});var sft=s(CO);SNo=r(sft,"BigBirdForTokenClassification"),sft.forEach(t),RNo=r(V9e," (BigBird model)"),V9e.forEach(t),BNo=i(J),Mv=n(J,"LI",{});var X9e=s(Mv);pge=n(X9e,"STRONG",{});var lft=s(pge);PNo=r(lft,"camembert"),lft.forEach(t),INo=r(X9e," \u2014 "),wO=n(X9e,"A",{href:!0});var ift=s(wO);qNo=r(ift,"CamembertForTokenClassification"),ift.forEach(t),NNo=r(X9e," (CamemBERT model)"),X9e.forEach(t),jNo=i(J),Ev=n(J,"LI",{});var z9e=s(Ev);_ge=n(z9e,"STRONG",{});var dft=s(_ge);DNo=r(dft,"canine"),dft.forEach(t),GNo=r(z9e," \u2014 "),AO=n(z9e,"A",{href:!0});var cft=s(AO);ONo=r(cft,"CanineForTokenClassification"),cft.forEach(t),VNo=r(z9e," (Canine model)"),z9e.forEach(t),XNo=i(J),Cv=n(J,"LI",{});var W9e=s(Cv);uge=n(W9e,"STRONG",{});var fft=s(uge);zNo=r(fft,"convbert"),fft.forEach(t),WNo=r(W9e," \u2014 "),yO=n(W9e,"A",{href:!0});var mft=s(yO);QNo=r(mft,"ConvBertForTokenClassification"),mft.forEach(t),HNo=r(W9e," (ConvBERT model)"),W9e.forEach(t),UNo=i(J),wv=n(J,"LI",{});var Q9e=s(wv);bge=n(Q9e,"STRONG",{});var gft=s(bge);JNo=r(gft,"data2vec-text"),gft.forEach(t),YNo=r(Q9e," \u2014 "),LO=n(Q9e,"A",{href:!0});var hft=s(LO);KNo=r(hft,"Data2VecTextForTokenClassification"),hft.forEach(t),ZNo=r(Q9e," (Data2VecText model)"),Q9e.forEach(t),ejo=i(J),Av=n(J,"LI",{});var H9e=s(Av);vge=n(H9e,"STRONG",{});var pft=s(vge);ojo=r(pft,"deberta"),pft.forEach(t),rjo=r(H9e," \u2014 "),xO=n(H9e,"A",{href:!0});var _ft=s(xO);tjo=r(_ft,"DebertaForTokenClassification"),_ft.forEach(t),ajo=r(H9e," (DeBERTa model)"),H9e.forEach(t),njo=i(J),yv=n(J,"LI",{});var U9e=s(yv);Fge=n(U9e,"STRONG",{});var uft=s(Fge);sjo=r(uft,"deberta-v2"),uft.forEach(t),ljo=r(U9e," \u2014 "),$O=n(U9e,"A",{href:!0});var bft=s($O);ijo=r(bft,"DebertaV2ForTokenClassification"),bft.forEach(t),djo=r(U9e," (DeBERTa-v2 model)"),U9e.forEach(t),cjo=i(J),Lv=n(J,"LI",{});var J9e=s(Lv);Tge=n(J9e,"STRONG",{});var vft=s(Tge);fjo=r(vft,"distilbert"),vft.forEach(t),mjo=r(J9e," \u2014 "),kO=n(J9e,"A",{href:!0});var Fft=s(kO);gjo=r(Fft,"DistilBertForTokenClassification"),Fft.forEach(t),hjo=r(J9e," (DistilBERT model)"),J9e.forEach(t),pjo=i(J),xv=n(J,"LI",{});var Y9e=s(xv);Mge=n(Y9e,"STRONG",{});var Tft=s(Mge);_jo=r(Tft,"electra"),Tft.forEach(t),ujo=r(Y9e," \u2014 "),SO=n(Y9e,"A",{href:!0});var Mft=s(SO);bjo=r(Mft,"ElectraForTokenClassification"),Mft.forEach(t),vjo=r(Y9e," (ELECTRA model)"),Y9e.forEach(t),Fjo=i(J),$v=n(J,"LI",{});var K9e=s($v);Ege=n(K9e,"STRONG",{});var Eft=s(Ege);Tjo=r(Eft,"flaubert"),Eft.forEach(t),Mjo=r(K9e," \u2014 "),RO=n(K9e,"A",{href:!0});var Cft=s(RO);Ejo=r(Cft,"FlaubertForTokenClassification"),Cft.forEach(t),Cjo=r(K9e," (FlauBERT model)"),K9e.forEach(t),wjo=i(J),kv=n(J,"LI",{});var Z9e=s(kv);Cge=n(Z9e,"STRONG",{});var wft=s(Cge);Ajo=r(wft,"fnet"),wft.forEach(t),yjo=r(Z9e," \u2014 "),BO=n(Z9e,"A",{href:!0});var Aft=s(BO);Ljo=r(Aft,"FNetForTokenClassification"),Aft.forEach(t),xjo=r(Z9e," (FNet model)"),Z9e.forEach(t),$jo=i(J),Sv=n(J,"LI",{});var exe=s(Sv);wge=n(exe,"STRONG",{});var yft=s(wge);kjo=r(yft,"funnel"),yft.forEach(t),Sjo=r(exe," \u2014 "),PO=n(exe,"A",{href:!0});var Lft=s(PO);Rjo=r(Lft,"FunnelForTokenClassification"),Lft.forEach(t),Bjo=r(exe," (Funnel Transformer model)"),exe.forEach(t),Pjo=i(J),Rv=n(J,"LI",{});var oxe=s(Rv);Age=n(oxe,"STRONG",{});var xft=s(Age);Ijo=r(xft,"gpt2"),xft.forEach(t),qjo=r(oxe," \u2014 "),IO=n(oxe,"A",{href:!0});var $ft=s(IO);Njo=r($ft,"GPT2ForTokenClassification"),$ft.forEach(t),jjo=r(oxe," (OpenAI GPT-2 model)"),oxe.forEach(t),Djo=i(J),Bv=n(J,"LI",{});var rxe=s(Bv);yge=n(rxe,"STRONG",{});var kft=s(yge);Gjo=r(kft,"ibert"),kft.forEach(t),Ojo=r(rxe," \u2014 "),qO=n(rxe,"A",{href:!0});var Sft=s(qO);Vjo=r(Sft,"IBertForTokenClassification"),Sft.forEach(t),Xjo=r(rxe," (I-BERT model)"),rxe.forEach(t),zjo=i(J),Pv=n(J,"LI",{});var txe=s(Pv);Lge=n(txe,"STRONG",{});var Rft=s(Lge);Wjo=r(Rft,"layoutlm"),Rft.forEach(t),Qjo=r(txe," \u2014 "),NO=n(txe,"A",{href:!0});var Bft=s(NO);Hjo=r(Bft,"LayoutLMForTokenClassification"),Bft.forEach(t),Ujo=r(txe," (LayoutLM model)"),txe.forEach(t),Jjo=i(J),Iv=n(J,"LI",{});var axe=s(Iv);xge=n(axe,"STRONG",{});var Pft=s(xge);Yjo=r(Pft,"layoutlmv2"),Pft.forEach(t),Kjo=r(axe," \u2014 "),jO=n(axe,"A",{href:!0});var Ift=s(jO);Zjo=r(Ift,"LayoutLMv2ForTokenClassification"),Ift.forEach(t),eDo=r(axe," (LayoutLMv2 model)"),axe.forEach(t),oDo=i(J),qv=n(J,"LI",{});var nxe=s(qv);$ge=n(nxe,"STRONG",{});var qft=s($ge);rDo=r(qft,"longformer"),qft.forEach(t),tDo=r(nxe," \u2014 "),DO=n(nxe,"A",{href:!0});var Nft=s(DO);aDo=r(Nft,"LongformerForTokenClassification"),Nft.forEach(t),nDo=r(nxe," (Longformer model)"),nxe.forEach(t),sDo=i(J),Nv=n(J,"LI",{});var sxe=s(Nv);kge=n(sxe,"STRONG",{});var jft=s(kge);lDo=r(jft,"megatron-bert"),jft.forEach(t),iDo=r(sxe," \u2014 "),GO=n(sxe,"A",{href:!0});var Dft=s(GO);dDo=r(Dft,"MegatronBertForTokenClassification"),Dft.forEach(t),cDo=r(sxe," (MegatronBert model)"),sxe.forEach(t),fDo=i(J),jv=n(J,"LI",{});var lxe=s(jv);Sge=n(lxe,"STRONG",{});var Gft=s(Sge);mDo=r(Gft,"mobilebert"),Gft.forEach(t),gDo=r(lxe," \u2014 "),OO=n(lxe,"A",{href:!0});var Oft=s(OO);hDo=r(Oft,"MobileBertForTokenClassification"),Oft.forEach(t),pDo=r(lxe," (MobileBERT model)"),lxe.forEach(t),_Do=i(J),Dv=n(J,"LI",{});var ixe=s(Dv);Rge=n(ixe,"STRONG",{});var Vft=s(Rge);uDo=r(Vft,"mpnet"),Vft.forEach(t),bDo=r(ixe," \u2014 "),VO=n(ixe,"A",{href:!0});var Xft=s(VO);vDo=r(Xft,"MPNetForTokenClassification"),Xft.forEach(t),FDo=r(ixe," (MPNet model)"),ixe.forEach(t),TDo=i(J),Gv=n(J,"LI",{});var dxe=s(Gv);Bge=n(dxe,"STRONG",{});var zft=s(Bge);MDo=r(zft,"nystromformer"),zft.forEach(t),EDo=r(dxe," \u2014 "),XO=n(dxe,"A",{href:!0});var Wft=s(XO);CDo=r(Wft,"NystromformerForTokenClassification"),Wft.forEach(t),wDo=r(dxe," (Nystromformer model)"),dxe.forEach(t),ADo=i(J),Ov=n(J,"LI",{});var cxe=s(Ov);Pge=n(cxe,"STRONG",{});var Qft=s(Pge);yDo=r(Qft,"qdqbert"),Qft.forEach(t),LDo=r(cxe," \u2014 "),zO=n(cxe,"A",{href:!0});var Hft=s(zO);xDo=r(Hft,"QDQBertForTokenClassification"),Hft.forEach(t),$Do=r(cxe," (QDQBert model)"),cxe.forEach(t),kDo=i(J),Vv=n(J,"LI",{});var fxe=s(Vv);Ige=n(fxe,"STRONG",{});var Uft=s(Ige);SDo=r(Uft,"rembert"),Uft.forEach(t),RDo=r(fxe," \u2014 "),WO=n(fxe,"A",{href:!0});var Jft=s(WO);BDo=r(Jft,"RemBertForTokenClassification"),Jft.forEach(t),PDo=r(fxe," (RemBERT model)"),fxe.forEach(t),IDo=i(J),Xv=n(J,"LI",{});var mxe=s(Xv);qge=n(mxe,"STRONG",{});var Yft=s(qge);qDo=r(Yft,"roberta"),Yft.forEach(t),NDo=r(mxe," \u2014 "),QO=n(mxe,"A",{href:!0});var Kft=s(QO);jDo=r(Kft,"RobertaForTokenClassification"),Kft.forEach(t),DDo=r(mxe," (RoBERTa model)"),mxe.forEach(t),GDo=i(J),zv=n(J,"LI",{});var gxe=s(zv);Nge=n(gxe,"STRONG",{});var Zft=s(Nge);ODo=r(Zft,"roformer"),Zft.forEach(t),VDo=r(gxe," \u2014 "),HO=n(gxe,"A",{href:!0});var emt=s(HO);XDo=r(emt,"RoFormerForTokenClassification"),emt.forEach(t),zDo=r(gxe," (RoFormer model)"),gxe.forEach(t),WDo=i(J),Wv=n(J,"LI",{});var hxe=s(Wv);jge=n(hxe,"STRONG",{});var omt=s(jge);QDo=r(omt,"squeezebert"),omt.forEach(t),HDo=r(hxe," \u2014 "),UO=n(hxe,"A",{href:!0});var rmt=s(UO);UDo=r(rmt,"SqueezeBertForTokenClassification"),rmt.forEach(t),JDo=r(hxe," (SqueezeBERT model)"),hxe.forEach(t),YDo=i(J),Qv=n(J,"LI",{});var pxe=s(Qv);Dge=n(pxe,"STRONG",{});var tmt=s(Dge);KDo=r(tmt,"xlm"),tmt.forEach(t),ZDo=r(pxe," \u2014 "),JO=n(pxe,"A",{href:!0});var amt=s(JO);eGo=r(amt,"XLMForTokenClassification"),amt.forEach(t),oGo=r(pxe," (XLM model)"),pxe.forEach(t),rGo=i(J),Hv=n(J,"LI",{});var _xe=s(Hv);Gge=n(_xe,"STRONG",{});var nmt=s(Gge);tGo=r(nmt,"xlm-roberta"),nmt.forEach(t),aGo=r(_xe," \u2014 "),YO=n(_xe,"A",{href:!0});var smt=s(YO);nGo=r(smt,"XLMRobertaForTokenClassification"),smt.forEach(t),sGo=r(_xe," (XLM-RoBERTa model)"),_xe.forEach(t),lGo=i(J),Uv=n(J,"LI",{});var uxe=s(Uv);Oge=n(uxe,"STRONG",{});var lmt=s(Oge);iGo=r(lmt,"xlm-roberta-xl"),lmt.forEach(t),dGo=r(uxe," \u2014 "),KO=n(uxe,"A",{href:!0});var imt=s(KO);cGo=r(imt,"XLMRobertaXLForTokenClassification"),imt.forEach(t),fGo=r(uxe," (XLM-RoBERTa-XL model)"),uxe.forEach(t),mGo=i(J),Jv=n(J,"LI",{});var bxe=s(Jv);Vge=n(bxe,"STRONG",{});var dmt=s(Vge);gGo=r(dmt,"xlnet"),dmt.forEach(t),hGo=r(bxe," \u2014 "),ZO=n(bxe,"A",{href:!0});var cmt=s(ZO);pGo=r(cmt,"XLNetForTokenClassification"),cmt.forEach(t),_Go=r(bxe," (XLNet model)"),bxe.forEach(t),uGo=i(J),Yv=n(J,"LI",{});var vxe=s(Yv);Xge=n(vxe,"STRONG",{});var fmt=s(Xge);bGo=r(fmt,"yoso"),fmt.forEach(t),vGo=r(vxe," \u2014 "),eV=n(vxe,"A",{href:!0});var mmt=s(eV);FGo=r(mmt,"YosoForTokenClassification"),mmt.forEach(t),TGo=r(vxe," (YOSO model)"),vxe.forEach(t),J.forEach(t),MGo=i(da),Kv=n(da,"P",{});var Fxe=s(Kv);EGo=r(Fxe,"The model is set in evaluation mode by default using "),zge=n(Fxe,"CODE",{});var gmt=s(zge);CGo=r(gmt,"model.eval()"),gmt.forEach(t),wGo=r(Fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wge=n(Fxe,"CODE",{});var hmt=s(Wge);AGo=r(hmt,"model.train()"),hmt.forEach(t),Fxe.forEach(t),yGo=i(da),T(Zv.$$.fragment,da),da.forEach(t),Us.forEach(t),Bqe=i(f),Yi=n(f,"H2",{class:!0});var Nje=s(Yi);eF=n(Nje,"A",{id:!0,class:!0,href:!0});var pmt=s(eF);Qge=n(pmt,"SPAN",{});var _mt=s(Qge);T(Sy.$$.fragment,_mt),_mt.forEach(t),pmt.forEach(t),LGo=i(Nje),Hge=n(Nje,"SPAN",{});var umt=s(Hge);xGo=r(umt,"AutoModelForQuestionAnswering"),umt.forEach(t),Nje.forEach(t),Pqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(Ry.$$.fragment,Js),$Go=i(Js),Ki=n(Js,"P",{});var lZ=s(Ki);kGo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oV=n(lZ,"A",{href:!0});var bmt=s(oV);SGo=r(bmt,"from_pretrained()"),bmt.forEach(t),RGo=r(lZ," class method or the "),rV=n(lZ,"A",{href:!0});var vmt=s(rV);BGo=r(vmt,"from_config()"),vmt.forEach(t),PGo=r(lZ,` class
method.`),lZ.forEach(t),IGo=i(Js),By=n(Js,"P",{});var jje=s(By);qGo=r(jje,"This class cannot be instantiated directly using "),Uge=n(jje,"CODE",{});var Fmt=s(Uge);NGo=r(Fmt,"__init__()"),Fmt.forEach(t),jGo=r(jje," (throws an error)."),jje.forEach(t),DGo=i(Js),mt=n(Js,"DIV",{class:!0});var qw=s(mt);T(Py.$$.fragment,qw),GGo=i(qw),Jge=n(qw,"P",{});var Tmt=s(Jge);OGo=r(Tmt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Tmt.forEach(t),VGo=i(qw),Zi=n(qw,"P",{});var iZ=s(Zi);XGo=r(iZ,`Note:
Loading a model from its configuration file does `),Yge=n(iZ,"STRONG",{});var Mmt=s(Yge);zGo=r(Mmt,"not"),Mmt.forEach(t),WGo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=n(iZ,"A",{href:!0});var Emt=s(tV);QGo=r(Emt,"from_pretrained()"),Emt.forEach(t),HGo=r(iZ," to load the model weights."),iZ.forEach(t),UGo=i(qw),T(oF.$$.fragment,qw),qw.forEach(t),JGo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(Iy.$$.fragment,ca),YGo=i(ca),Kge=n(ca,"P",{});var Cmt=s(Kge);KGo=r(Cmt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Cmt.forEach(t),ZGo=i(ca),qa=n(ca,"P",{});var Nw=s(qa);eOo=r(Nw,"The model class to instantiate is selected based on the "),Zge=n(Nw,"CODE",{});var wmt=s(Zge);oOo=r(wmt,"model_type"),wmt.forEach(t),rOo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),ehe=n(Nw,"CODE",{});var Amt=s(ehe);tOo=r(Amt,"pretrained_model_name_or_path"),Amt.forEach(t),aOo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=n(Nw,"CODE",{});var ymt=s(ohe);nOo=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),sOo=r(Nw,":"),Nw.forEach(t),lOo=i(ca),V=n(ca,"UL",{});var X=s(V);rF=n(X,"LI",{});var Txe=s(rF);rhe=n(Txe,"STRONG",{});var Lmt=s(rhe);iOo=r(Lmt,"albert"),Lmt.forEach(t),dOo=r(Txe," \u2014 "),aV=n(Txe,"A",{href:!0});var xmt=s(aV);cOo=r(xmt,"AlbertForQuestionAnswering"),xmt.forEach(t),fOo=r(Txe," (ALBERT model)"),Txe.forEach(t),mOo=i(X),tF=n(X,"LI",{});var Mxe=s(tF);the=n(Mxe,"STRONG",{});var $mt=s(the);gOo=r($mt,"bart"),$mt.forEach(t),hOo=r(Mxe," \u2014 "),nV=n(Mxe,"A",{href:!0});var kmt=s(nV);pOo=r(kmt,"BartForQuestionAnswering"),kmt.forEach(t),_Oo=r(Mxe," (BART model)"),Mxe.forEach(t),uOo=i(X),aF=n(X,"LI",{});var Exe=s(aF);ahe=n(Exe,"STRONG",{});var Smt=s(ahe);bOo=r(Smt,"bert"),Smt.forEach(t),vOo=r(Exe," \u2014 "),sV=n(Exe,"A",{href:!0});var Rmt=s(sV);FOo=r(Rmt,"BertForQuestionAnswering"),Rmt.forEach(t),TOo=r(Exe," (BERT model)"),Exe.forEach(t),MOo=i(X),nF=n(X,"LI",{});var Cxe=s(nF);nhe=n(Cxe,"STRONG",{});var Bmt=s(nhe);EOo=r(Bmt,"big_bird"),Bmt.forEach(t),COo=r(Cxe," \u2014 "),lV=n(Cxe,"A",{href:!0});var Pmt=s(lV);wOo=r(Pmt,"BigBirdForQuestionAnswering"),Pmt.forEach(t),AOo=r(Cxe," (BigBird model)"),Cxe.forEach(t),yOo=i(X),sF=n(X,"LI",{});var wxe=s(sF);she=n(wxe,"STRONG",{});var Imt=s(she);LOo=r(Imt,"bigbird_pegasus"),Imt.forEach(t),xOo=r(wxe," \u2014 "),iV=n(wxe,"A",{href:!0});var qmt=s(iV);$Oo=r(qmt,"BigBirdPegasusForQuestionAnswering"),qmt.forEach(t),kOo=r(wxe," (BigBirdPegasus model)"),wxe.forEach(t),SOo=i(X),lF=n(X,"LI",{});var Axe=s(lF);lhe=n(Axe,"STRONG",{});var Nmt=s(lhe);ROo=r(Nmt,"camembert"),Nmt.forEach(t),BOo=r(Axe," \u2014 "),dV=n(Axe,"A",{href:!0});var jmt=s(dV);POo=r(jmt,"CamembertForQuestionAnswering"),jmt.forEach(t),IOo=r(Axe," (CamemBERT model)"),Axe.forEach(t),qOo=i(X),iF=n(X,"LI",{});var yxe=s(iF);ihe=n(yxe,"STRONG",{});var Dmt=s(ihe);NOo=r(Dmt,"canine"),Dmt.forEach(t),jOo=r(yxe," \u2014 "),cV=n(yxe,"A",{href:!0});var Gmt=s(cV);DOo=r(Gmt,"CanineForQuestionAnswering"),Gmt.forEach(t),GOo=r(yxe," (Canine model)"),yxe.forEach(t),OOo=i(X),dF=n(X,"LI",{});var Lxe=s(dF);dhe=n(Lxe,"STRONG",{});var Omt=s(dhe);VOo=r(Omt,"convbert"),Omt.forEach(t),XOo=r(Lxe," \u2014 "),fV=n(Lxe,"A",{href:!0});var Vmt=s(fV);zOo=r(Vmt,"ConvBertForQuestionAnswering"),Vmt.forEach(t),WOo=r(Lxe," (ConvBERT model)"),Lxe.forEach(t),QOo=i(X),cF=n(X,"LI",{});var xxe=s(cF);che=n(xxe,"STRONG",{});var Xmt=s(che);HOo=r(Xmt,"data2vec-text"),Xmt.forEach(t),UOo=r(xxe," \u2014 "),mV=n(xxe,"A",{href:!0});var zmt=s(mV);JOo=r(zmt,"Data2VecTextForQuestionAnswering"),zmt.forEach(t),YOo=r(xxe," (Data2VecText model)"),xxe.forEach(t),KOo=i(X),fF=n(X,"LI",{});var $xe=s(fF);fhe=n($xe,"STRONG",{});var Wmt=s(fhe);ZOo=r(Wmt,"deberta"),Wmt.forEach(t),eVo=r($xe," \u2014 "),gV=n($xe,"A",{href:!0});var Qmt=s(gV);oVo=r(Qmt,"DebertaForQuestionAnswering"),Qmt.forEach(t),rVo=r($xe," (DeBERTa model)"),$xe.forEach(t),tVo=i(X),mF=n(X,"LI",{});var kxe=s(mF);mhe=n(kxe,"STRONG",{});var Hmt=s(mhe);aVo=r(Hmt,"deberta-v2"),Hmt.forEach(t),nVo=r(kxe," \u2014 "),hV=n(kxe,"A",{href:!0});var Umt=s(hV);sVo=r(Umt,"DebertaV2ForQuestionAnswering"),Umt.forEach(t),lVo=r(kxe," (DeBERTa-v2 model)"),kxe.forEach(t),iVo=i(X),gF=n(X,"LI",{});var Sxe=s(gF);ghe=n(Sxe,"STRONG",{});var Jmt=s(ghe);dVo=r(Jmt,"distilbert"),Jmt.forEach(t),cVo=r(Sxe," \u2014 "),pV=n(Sxe,"A",{href:!0});var Ymt=s(pV);fVo=r(Ymt,"DistilBertForQuestionAnswering"),Ymt.forEach(t),mVo=r(Sxe," (DistilBERT model)"),Sxe.forEach(t),gVo=i(X),hF=n(X,"LI",{});var Rxe=s(hF);hhe=n(Rxe,"STRONG",{});var Kmt=s(hhe);hVo=r(Kmt,"electra"),Kmt.forEach(t),pVo=r(Rxe," \u2014 "),_V=n(Rxe,"A",{href:!0});var Zmt=s(_V);_Vo=r(Zmt,"ElectraForQuestionAnswering"),Zmt.forEach(t),uVo=r(Rxe," (ELECTRA model)"),Rxe.forEach(t),bVo=i(X),pF=n(X,"LI",{});var Bxe=s(pF);phe=n(Bxe,"STRONG",{});var egt=s(phe);vVo=r(egt,"flaubert"),egt.forEach(t),FVo=r(Bxe," \u2014 "),uV=n(Bxe,"A",{href:!0});var ogt=s(uV);TVo=r(ogt,"FlaubertForQuestionAnsweringSimple"),ogt.forEach(t),MVo=r(Bxe," (FlauBERT model)"),Bxe.forEach(t),EVo=i(X),_F=n(X,"LI",{});var Pxe=s(_F);_he=n(Pxe,"STRONG",{});var rgt=s(_he);CVo=r(rgt,"fnet"),rgt.forEach(t),wVo=r(Pxe," \u2014 "),bV=n(Pxe,"A",{href:!0});var tgt=s(bV);AVo=r(tgt,"FNetForQuestionAnswering"),tgt.forEach(t),yVo=r(Pxe," (FNet model)"),Pxe.forEach(t),LVo=i(X),uF=n(X,"LI",{});var Ixe=s(uF);uhe=n(Ixe,"STRONG",{});var agt=s(uhe);xVo=r(agt,"funnel"),agt.forEach(t),$Vo=r(Ixe," \u2014 "),vV=n(Ixe,"A",{href:!0});var ngt=s(vV);kVo=r(ngt,"FunnelForQuestionAnswering"),ngt.forEach(t),SVo=r(Ixe," (Funnel Transformer model)"),Ixe.forEach(t),RVo=i(X),bF=n(X,"LI",{});var qxe=s(bF);bhe=n(qxe,"STRONG",{});var sgt=s(bhe);BVo=r(sgt,"gptj"),sgt.forEach(t),PVo=r(qxe," \u2014 "),FV=n(qxe,"A",{href:!0});var lgt=s(FV);IVo=r(lgt,"GPTJForQuestionAnswering"),lgt.forEach(t),qVo=r(qxe," (GPT-J model)"),qxe.forEach(t),NVo=i(X),vF=n(X,"LI",{});var Nxe=s(vF);vhe=n(Nxe,"STRONG",{});var igt=s(vhe);jVo=r(igt,"ibert"),igt.forEach(t),DVo=r(Nxe," \u2014 "),TV=n(Nxe,"A",{href:!0});var dgt=s(TV);GVo=r(dgt,"IBertForQuestionAnswering"),dgt.forEach(t),OVo=r(Nxe," (I-BERT model)"),Nxe.forEach(t),VVo=i(X),FF=n(X,"LI",{});var jxe=s(FF);Fhe=n(jxe,"STRONG",{});var cgt=s(Fhe);XVo=r(cgt,"layoutlmv2"),cgt.forEach(t),zVo=r(jxe," \u2014 "),MV=n(jxe,"A",{href:!0});var fgt=s(MV);WVo=r(fgt,"LayoutLMv2ForQuestionAnswering"),fgt.forEach(t),QVo=r(jxe," (LayoutLMv2 model)"),jxe.forEach(t),HVo=i(X),TF=n(X,"LI",{});var Dxe=s(TF);The=n(Dxe,"STRONG",{});var mgt=s(The);UVo=r(mgt,"led"),mgt.forEach(t),JVo=r(Dxe," \u2014 "),EV=n(Dxe,"A",{href:!0});var ggt=s(EV);YVo=r(ggt,"LEDForQuestionAnswering"),ggt.forEach(t),KVo=r(Dxe," (LED model)"),Dxe.forEach(t),ZVo=i(X),MF=n(X,"LI",{});var Gxe=s(MF);Mhe=n(Gxe,"STRONG",{});var hgt=s(Mhe);eXo=r(hgt,"longformer"),hgt.forEach(t),oXo=r(Gxe," \u2014 "),CV=n(Gxe,"A",{href:!0});var pgt=s(CV);rXo=r(pgt,"LongformerForQuestionAnswering"),pgt.forEach(t),tXo=r(Gxe," (Longformer model)"),Gxe.forEach(t),aXo=i(X),EF=n(X,"LI",{});var Oxe=s(EF);Ehe=n(Oxe,"STRONG",{});var _gt=s(Ehe);nXo=r(_gt,"lxmert"),_gt.forEach(t),sXo=r(Oxe," \u2014 "),wV=n(Oxe,"A",{href:!0});var ugt=s(wV);lXo=r(ugt,"LxmertForQuestionAnswering"),ugt.forEach(t),iXo=r(Oxe," (LXMERT model)"),Oxe.forEach(t),dXo=i(X),CF=n(X,"LI",{});var Vxe=s(CF);Che=n(Vxe,"STRONG",{});var bgt=s(Che);cXo=r(bgt,"mbart"),bgt.forEach(t),fXo=r(Vxe," \u2014 "),AV=n(Vxe,"A",{href:!0});var vgt=s(AV);mXo=r(vgt,"MBartForQuestionAnswering"),vgt.forEach(t),gXo=r(Vxe," (mBART model)"),Vxe.forEach(t),hXo=i(X),wF=n(X,"LI",{});var Xxe=s(wF);whe=n(Xxe,"STRONG",{});var Fgt=s(whe);pXo=r(Fgt,"megatron-bert"),Fgt.forEach(t),_Xo=r(Xxe," \u2014 "),yV=n(Xxe,"A",{href:!0});var Tgt=s(yV);uXo=r(Tgt,"MegatronBertForQuestionAnswering"),Tgt.forEach(t),bXo=r(Xxe," (MegatronBert model)"),Xxe.forEach(t),vXo=i(X),AF=n(X,"LI",{});var zxe=s(AF);Ahe=n(zxe,"STRONG",{});var Mgt=s(Ahe);FXo=r(Mgt,"mobilebert"),Mgt.forEach(t),TXo=r(zxe," \u2014 "),LV=n(zxe,"A",{href:!0});var Egt=s(LV);MXo=r(Egt,"MobileBertForQuestionAnswering"),Egt.forEach(t),EXo=r(zxe," (MobileBERT model)"),zxe.forEach(t),CXo=i(X),yF=n(X,"LI",{});var Wxe=s(yF);yhe=n(Wxe,"STRONG",{});var Cgt=s(yhe);wXo=r(Cgt,"mpnet"),Cgt.forEach(t),AXo=r(Wxe," \u2014 "),xV=n(Wxe,"A",{href:!0});var wgt=s(xV);yXo=r(wgt,"MPNetForQuestionAnswering"),wgt.forEach(t),LXo=r(Wxe," (MPNet model)"),Wxe.forEach(t),xXo=i(X),LF=n(X,"LI",{});var Qxe=s(LF);Lhe=n(Qxe,"STRONG",{});var Agt=s(Lhe);$Xo=r(Agt,"nystromformer"),Agt.forEach(t),kXo=r(Qxe," \u2014 "),$V=n(Qxe,"A",{href:!0});var ygt=s($V);SXo=r(ygt,"NystromformerForQuestionAnswering"),ygt.forEach(t),RXo=r(Qxe," (Nystromformer model)"),Qxe.forEach(t),BXo=i(X),xF=n(X,"LI",{});var Hxe=s(xF);xhe=n(Hxe,"STRONG",{});var Lgt=s(xhe);PXo=r(Lgt,"qdqbert"),Lgt.forEach(t),IXo=r(Hxe," \u2014 "),kV=n(Hxe,"A",{href:!0});var xgt=s(kV);qXo=r(xgt,"QDQBertForQuestionAnswering"),xgt.forEach(t),NXo=r(Hxe," (QDQBert model)"),Hxe.forEach(t),jXo=i(X),$F=n(X,"LI",{});var Uxe=s($F);$he=n(Uxe,"STRONG",{});var $gt=s($he);DXo=r($gt,"reformer"),$gt.forEach(t),GXo=r(Uxe," \u2014 "),SV=n(Uxe,"A",{href:!0});var kgt=s(SV);OXo=r(kgt,"ReformerForQuestionAnswering"),kgt.forEach(t),VXo=r(Uxe," (Reformer model)"),Uxe.forEach(t),XXo=i(X),kF=n(X,"LI",{});var Jxe=s(kF);khe=n(Jxe,"STRONG",{});var Sgt=s(khe);zXo=r(Sgt,"rembert"),Sgt.forEach(t),WXo=r(Jxe," \u2014 "),RV=n(Jxe,"A",{href:!0});var Rgt=s(RV);QXo=r(Rgt,"RemBertForQuestionAnswering"),Rgt.forEach(t),HXo=r(Jxe," (RemBERT model)"),Jxe.forEach(t),UXo=i(X),SF=n(X,"LI",{});var Yxe=s(SF);She=n(Yxe,"STRONG",{});var Bgt=s(She);JXo=r(Bgt,"roberta"),Bgt.forEach(t),YXo=r(Yxe," \u2014 "),BV=n(Yxe,"A",{href:!0});var Pgt=s(BV);KXo=r(Pgt,"RobertaForQuestionAnswering"),Pgt.forEach(t),ZXo=r(Yxe," (RoBERTa model)"),Yxe.forEach(t),ezo=i(X),RF=n(X,"LI",{});var Kxe=s(RF);Rhe=n(Kxe,"STRONG",{});var Igt=s(Rhe);ozo=r(Igt,"roformer"),Igt.forEach(t),rzo=r(Kxe," \u2014 "),PV=n(Kxe,"A",{href:!0});var qgt=s(PV);tzo=r(qgt,"RoFormerForQuestionAnswering"),qgt.forEach(t),azo=r(Kxe," (RoFormer model)"),Kxe.forEach(t),nzo=i(X),BF=n(X,"LI",{});var Zxe=s(BF);Bhe=n(Zxe,"STRONG",{});var Ngt=s(Bhe);szo=r(Ngt,"splinter"),Ngt.forEach(t),lzo=r(Zxe," \u2014 "),IV=n(Zxe,"A",{href:!0});var jgt=s(IV);izo=r(jgt,"SplinterForQuestionAnswering"),jgt.forEach(t),dzo=r(Zxe," (Splinter model)"),Zxe.forEach(t),czo=i(X),PF=n(X,"LI",{});var e$e=s(PF);Phe=n(e$e,"STRONG",{});var Dgt=s(Phe);fzo=r(Dgt,"squeezebert"),Dgt.forEach(t),mzo=r(e$e," \u2014 "),qV=n(e$e,"A",{href:!0});var Ggt=s(qV);gzo=r(Ggt,"SqueezeBertForQuestionAnswering"),Ggt.forEach(t),hzo=r(e$e," (SqueezeBERT model)"),e$e.forEach(t),pzo=i(X),IF=n(X,"LI",{});var o$e=s(IF);Ihe=n(o$e,"STRONG",{});var Ogt=s(Ihe);_zo=r(Ogt,"xlm"),Ogt.forEach(t),uzo=r(o$e," \u2014 "),NV=n(o$e,"A",{href:!0});var Vgt=s(NV);bzo=r(Vgt,"XLMForQuestionAnsweringSimple"),Vgt.forEach(t),vzo=r(o$e," (XLM model)"),o$e.forEach(t),Fzo=i(X),qF=n(X,"LI",{});var r$e=s(qF);qhe=n(r$e,"STRONG",{});var Xgt=s(qhe);Tzo=r(Xgt,"xlm-roberta"),Xgt.forEach(t),Mzo=r(r$e," \u2014 "),jV=n(r$e,"A",{href:!0});var zgt=s(jV);Ezo=r(zgt,"XLMRobertaForQuestionAnswering"),zgt.forEach(t),Czo=r(r$e," (XLM-RoBERTa model)"),r$e.forEach(t),wzo=i(X),NF=n(X,"LI",{});var t$e=s(NF);Nhe=n(t$e,"STRONG",{});var Wgt=s(Nhe);Azo=r(Wgt,"xlm-roberta-xl"),Wgt.forEach(t),yzo=r(t$e," \u2014 "),DV=n(t$e,"A",{href:!0});var Qgt=s(DV);Lzo=r(Qgt,"XLMRobertaXLForQuestionAnswering"),Qgt.forEach(t),xzo=r(t$e," (XLM-RoBERTa-XL model)"),t$e.forEach(t),$zo=i(X),jF=n(X,"LI",{});var a$e=s(jF);jhe=n(a$e,"STRONG",{});var Hgt=s(jhe);kzo=r(Hgt,"xlnet"),Hgt.forEach(t),Szo=r(a$e," \u2014 "),GV=n(a$e,"A",{href:!0});var Ugt=s(GV);Rzo=r(Ugt,"XLNetForQuestionAnsweringSimple"),Ugt.forEach(t),Bzo=r(a$e," (XLNet model)"),a$e.forEach(t),Pzo=i(X),DF=n(X,"LI",{});var n$e=s(DF);Dhe=n(n$e,"STRONG",{});var Jgt=s(Dhe);Izo=r(Jgt,"yoso"),Jgt.forEach(t),qzo=r(n$e," \u2014 "),OV=n(n$e,"A",{href:!0});var Ygt=s(OV);Nzo=r(Ygt,"YosoForQuestionAnswering"),Ygt.forEach(t),jzo=r(n$e," (YOSO model)"),n$e.forEach(t),X.forEach(t),Dzo=i(ca),GF=n(ca,"P",{});var s$e=s(GF);Gzo=r(s$e,"The model is set in evaluation mode by default using "),Ghe=n(s$e,"CODE",{});var Kgt=s(Ghe);Ozo=r(Kgt,"model.eval()"),Kgt.forEach(t),Vzo=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=n(s$e,"CODE",{});var Zgt=s(Ohe);Xzo=r(Zgt,"model.train()"),Zgt.forEach(t),s$e.forEach(t),zzo=i(ca),T(OF.$$.fragment,ca),ca.forEach(t),Js.forEach(t),Iqe=i(f),ed=n(f,"H2",{class:!0});var Dje=s(ed);VF=n(Dje,"A",{id:!0,class:!0,href:!0});var eht=s(VF);Vhe=n(eht,"SPAN",{});var oht=s(Vhe);T(qy.$$.fragment,oht),oht.forEach(t),eht.forEach(t),Wzo=i(Dje),Xhe=n(Dje,"SPAN",{});var rht=s(Xhe);Qzo=r(rht,"AutoModelForTableQuestionAnswering"),rht.forEach(t),Dje.forEach(t),qqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Ny.$$.fragment,Ys),Hzo=i(Ys),od=n(Ys,"P",{});var dZ=s(od);Uzo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),VV=n(dZ,"A",{href:!0});var tht=s(VV);Jzo=r(tht,"from_pretrained()"),tht.forEach(t),Yzo=r(dZ," class method or the "),XV=n(dZ,"A",{href:!0});var aht=s(XV);Kzo=r(aht,"from_config()"),aht.forEach(t),Zzo=r(dZ,` class
method.`),dZ.forEach(t),eWo=i(Ys),jy=n(Ys,"P",{});var Gje=s(jy);oWo=r(Gje,"This class cannot be instantiated directly using "),zhe=n(Gje,"CODE",{});var nht=s(zhe);rWo=r(nht,"__init__()"),nht.forEach(t),tWo=r(Gje," (throws an error)."),Gje.forEach(t),aWo=i(Ys),gt=n(Ys,"DIV",{class:!0});var jw=s(gt);T(Dy.$$.fragment,jw),nWo=i(jw),Whe=n(jw,"P",{});var sht=s(Whe);sWo=r(sht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sht.forEach(t),lWo=i(jw),rd=n(jw,"P",{});var cZ=s(rd);iWo=r(cZ,`Note:
Loading a model from its configuration file does `),Qhe=n(cZ,"STRONG",{});var lht=s(Qhe);dWo=r(lht,"not"),lht.forEach(t),cWo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=n(cZ,"A",{href:!0});var iht=s(zV);fWo=r(iht,"from_pretrained()"),iht.forEach(t),mWo=r(cZ," to load the model weights."),cZ.forEach(t),gWo=i(jw),T(XF.$$.fragment,jw),jw.forEach(t),hWo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(Gy.$$.fragment,fa),pWo=i(fa),Hhe=n(fa,"P",{});var dht=s(Hhe);_Wo=r(dht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dht.forEach(t),uWo=i(fa),Na=n(fa,"P",{});var Dw=s(Na);bWo=r(Dw,"The model class to instantiate is selected based on the "),Uhe=n(Dw,"CODE",{});var cht=s(Uhe);vWo=r(cht,"model_type"),cht.forEach(t),FWo=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Jhe=n(Dw,"CODE",{});var fht=s(Jhe);TWo=r(fht,"pretrained_model_name_or_path"),fht.forEach(t),MWo=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=n(Dw,"CODE",{});var mht=s(Yhe);EWo=r(mht,"pretrained_model_name_or_path"),mht.forEach(t),CWo=r(Dw,":"),Dw.forEach(t),wWo=i(fa),Khe=n(fa,"UL",{});var ght=s(Khe);zF=n(ght,"LI",{});var l$e=s(zF);Zhe=n(l$e,"STRONG",{});var hht=s(Zhe);AWo=r(hht,"tapas"),hht.forEach(t),yWo=r(l$e," \u2014 "),WV=n(l$e,"A",{href:!0});var pht=s(WV);LWo=r(pht,"TapasForQuestionAnswering"),pht.forEach(t),xWo=r(l$e," (TAPAS model)"),l$e.forEach(t),ght.forEach(t),$Wo=i(fa),WF=n(fa,"P",{});var i$e=s(WF);kWo=r(i$e,"The model is set in evaluation mode by default using "),epe=n(i$e,"CODE",{});var _ht=s(epe);SWo=r(_ht,"model.eval()"),_ht.forEach(t),RWo=r(i$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=n(i$e,"CODE",{});var uht=s(ope);BWo=r(uht,"model.train()"),uht.forEach(t),i$e.forEach(t),PWo=i(fa),T(QF.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),Nqe=i(f),td=n(f,"H2",{class:!0});var Oje=s(td);HF=n(Oje,"A",{id:!0,class:!0,href:!0});var bht=s(HF);rpe=n(bht,"SPAN",{});var vht=s(rpe);T(Oy.$$.fragment,vht),vht.forEach(t),bht.forEach(t),IWo=i(Oje),tpe=n(Oje,"SPAN",{});var Fht=s(tpe);qWo=r(Fht,"AutoModelForImageClassification"),Fht.forEach(t),Oje.forEach(t),jqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(Vy.$$.fragment,Ks),NWo=i(Ks),ad=n(Ks,"P",{});var fZ=s(ad);jWo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QV=n(fZ,"A",{href:!0});var Tht=s(QV);DWo=r(Tht,"from_pretrained()"),Tht.forEach(t),GWo=r(fZ," class method or the "),HV=n(fZ,"A",{href:!0});var Mht=s(HV);OWo=r(Mht,"from_config()"),Mht.forEach(t),VWo=r(fZ,` class
method.`),fZ.forEach(t),XWo=i(Ks),Xy=n(Ks,"P",{});var Vje=s(Xy);zWo=r(Vje,"This class cannot be instantiated directly using "),ape=n(Vje,"CODE",{});var Eht=s(ape);WWo=r(Eht,"__init__()"),Eht.forEach(t),QWo=r(Vje," (throws an error)."),Vje.forEach(t),HWo=i(Ks),ht=n(Ks,"DIV",{class:!0});var Gw=s(ht);T(zy.$$.fragment,Gw),UWo=i(Gw),npe=n(Gw,"P",{});var Cht=s(npe);JWo=r(Cht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Cht.forEach(t),YWo=i(Gw),nd=n(Gw,"P",{});var mZ=s(nd);KWo=r(mZ,`Note:
Loading a model from its configuration file does `),spe=n(mZ,"STRONG",{});var wht=s(spe);ZWo=r(wht,"not"),wht.forEach(t),eQo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(mZ,"A",{href:!0});var Aht=s(UV);oQo=r(Aht,"from_pretrained()"),Aht.forEach(t),rQo=r(mZ," to load the model weights."),mZ.forEach(t),tQo=i(Gw),T(UF.$$.fragment,Gw),Gw.forEach(t),aQo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(Wy.$$.fragment,ma),nQo=i(ma),lpe=n(ma,"P",{});var yht=s(lpe);sQo=r(yht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yht.forEach(t),lQo=i(ma),ja=n(ma,"P",{});var Ow=s(ja);iQo=r(Ow,"The model class to instantiate is selected based on the "),ipe=n(Ow,"CODE",{});var Lht=s(ipe);dQo=r(Lht,"model_type"),Lht.forEach(t),cQo=r(Ow,` property of the config object (either
passed as an argument or loaded from `),dpe=n(Ow,"CODE",{});var xht=s(dpe);fQo=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),mQo=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(Ow,"CODE",{});var $ht=s(cpe);gQo=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),hQo=r(Ow,":"),Ow.forEach(t),pQo=i(ma),Fe=n(ma,"UL",{});var Ee=s(Fe);JF=n(Ee,"LI",{});var d$e=s(JF);fpe=n(d$e,"STRONG",{});var kht=s(fpe);_Qo=r(kht,"beit"),kht.forEach(t),uQo=r(d$e," \u2014 "),JV=n(d$e,"A",{href:!0});var Sht=s(JV);bQo=r(Sht,"BeitForImageClassification"),Sht.forEach(t),vQo=r(d$e," (BEiT model)"),d$e.forEach(t),FQo=i(Ee),YF=n(Ee,"LI",{});var c$e=s(YF);mpe=n(c$e,"STRONG",{});var Rht=s(mpe);TQo=r(Rht,"convnext"),Rht.forEach(t),MQo=r(c$e," \u2014 "),YV=n(c$e,"A",{href:!0});var Bht=s(YV);EQo=r(Bht,"ConvNextForImageClassification"),Bht.forEach(t),CQo=r(c$e," (ConvNext model)"),c$e.forEach(t),wQo=i(Ee),KF=n(Ee,"LI",{});var f$e=s(KF);gpe=n(f$e,"STRONG",{});var Pht=s(gpe);AQo=r(Pht,"data2vec-vision"),Pht.forEach(t),yQo=r(f$e," \u2014 "),KV=n(f$e,"A",{href:!0});var Iht=s(KV);LQo=r(Iht,"Data2VecVisionForImageClassification"),Iht.forEach(t),xQo=r(f$e," (Data2VecVision model)"),f$e.forEach(t),$Qo=i(Ee),Bs=n(Ee,"LI",{});var $$=s(Bs);hpe=n($$,"STRONG",{});var qht=s(hpe);kQo=r(qht,"deit"),qht.forEach(t),SQo=r($$," \u2014 "),ZV=n($$,"A",{href:!0});var Nht=s(ZV);RQo=r(Nht,"DeiTForImageClassification"),Nht.forEach(t),BQo=r($$," or "),eX=n($$,"A",{href:!0});var jht=s(eX);PQo=r(jht,"DeiTForImageClassificationWithTeacher"),jht.forEach(t),IQo=r($$," (DeiT model)"),$$.forEach(t),qQo=i(Ee),ZF=n(Ee,"LI",{});var m$e=s(ZF);ppe=n(m$e,"STRONG",{});var Dht=s(ppe);NQo=r(Dht,"imagegpt"),Dht.forEach(t),jQo=r(m$e," \u2014 "),oX=n(m$e,"A",{href:!0});var Ght=s(oX);DQo=r(Ght,"ImageGPTForImageClassification"),Ght.forEach(t),GQo=r(m$e," (ImageGPT model)"),m$e.forEach(t),OQo=i(Ee),pt=n(Ee,"LI",{});var gf=s(pt);_pe=n(gf,"STRONG",{});var Oht=s(_pe);VQo=r(Oht,"perceiver"),Oht.forEach(t),XQo=r(gf," \u2014 "),rX=n(gf,"A",{href:!0});var Vht=s(rX);zQo=r(Vht,"PerceiverForImageClassificationLearned"),Vht.forEach(t),WQo=r(gf," or "),tX=n(gf,"A",{href:!0});var Xht=s(tX);QQo=r(Xht,"PerceiverForImageClassificationFourier"),Xht.forEach(t),HQo=r(gf," or "),aX=n(gf,"A",{href:!0});var zht=s(aX);UQo=r(zht,"PerceiverForImageClassificationConvProcessing"),zht.forEach(t),JQo=r(gf," (Perceiver model)"),gf.forEach(t),YQo=i(Ee),e0=n(Ee,"LI",{});var g$e=s(e0);upe=n(g$e,"STRONG",{});var Wht=s(upe);KQo=r(Wht,"poolformer"),Wht.forEach(t),ZQo=r(g$e," \u2014 "),nX=n(g$e,"A",{href:!0});var Qht=s(nX);eHo=r(Qht,"PoolFormerForImageClassification"),Qht.forEach(t),oHo=r(g$e," (PoolFormer model)"),g$e.forEach(t),rHo=i(Ee),o0=n(Ee,"LI",{});var h$e=s(o0);bpe=n(h$e,"STRONG",{});var Hht=s(bpe);tHo=r(Hht,"regnet"),Hht.forEach(t),aHo=r(h$e," \u2014 "),sX=n(h$e,"A",{href:!0});var Uht=s(sX);nHo=r(Uht,"RegNetForImageClassification"),Uht.forEach(t),sHo=r(h$e," (RegNet model)"),h$e.forEach(t),lHo=i(Ee),r0=n(Ee,"LI",{});var p$e=s(r0);vpe=n(p$e,"STRONG",{});var Jht=s(vpe);iHo=r(Jht,"resnet"),Jht.forEach(t),dHo=r(p$e," \u2014 "),lX=n(p$e,"A",{href:!0});var Yht=s(lX);cHo=r(Yht,"ResNetForImageClassification"),Yht.forEach(t),fHo=r(p$e," (ResNet model)"),p$e.forEach(t),mHo=i(Ee),t0=n(Ee,"LI",{});var _$e=s(t0);Fpe=n(_$e,"STRONG",{});var Kht=s(Fpe);gHo=r(Kht,"segformer"),Kht.forEach(t),hHo=r(_$e," \u2014 "),iX=n(_$e,"A",{href:!0});var Zht=s(iX);pHo=r(Zht,"SegformerForImageClassification"),Zht.forEach(t),_Ho=r(_$e," (SegFormer model)"),_$e.forEach(t),uHo=i(Ee),a0=n(Ee,"LI",{});var u$e=s(a0);Tpe=n(u$e,"STRONG",{});var ept=s(Tpe);bHo=r(ept,"swin"),ept.forEach(t),vHo=r(u$e," \u2014 "),dX=n(u$e,"A",{href:!0});var opt=s(dX);FHo=r(opt,"SwinForImageClassification"),opt.forEach(t),THo=r(u$e," (Swin model)"),u$e.forEach(t),MHo=i(Ee),n0=n(Ee,"LI",{});var b$e=s(n0);Mpe=n(b$e,"STRONG",{});var rpt=s(Mpe);EHo=r(rpt,"van"),rpt.forEach(t),CHo=r(b$e," \u2014 "),cX=n(b$e,"A",{href:!0});var tpt=s(cX);wHo=r(tpt,"VanForImageClassification"),tpt.forEach(t),AHo=r(b$e," (VAN model)"),b$e.forEach(t),yHo=i(Ee),s0=n(Ee,"LI",{});var v$e=s(s0);Epe=n(v$e,"STRONG",{});var apt=s(Epe);LHo=r(apt,"vit"),apt.forEach(t),xHo=r(v$e," \u2014 "),fX=n(v$e,"A",{href:!0});var npt=s(fX);$Ho=r(npt,"ViTForImageClassification"),npt.forEach(t),kHo=r(v$e," (ViT model)"),v$e.forEach(t),Ee.forEach(t),SHo=i(ma),l0=n(ma,"P",{});var F$e=s(l0);RHo=r(F$e,"The model is set in evaluation mode by default using "),Cpe=n(F$e,"CODE",{});var spt=s(Cpe);BHo=r(spt,"model.eval()"),spt.forEach(t),PHo=r(F$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=n(F$e,"CODE",{});var lpt=s(wpe);IHo=r(lpt,"model.train()"),lpt.forEach(t),F$e.forEach(t),qHo=i(ma),T(i0.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Dqe=i(f),sd=n(f,"H2",{class:!0});var Xje=s(sd);d0=n(Xje,"A",{id:!0,class:!0,href:!0});var ipt=s(d0);Ape=n(ipt,"SPAN",{});var dpt=s(Ape);T(Qy.$$.fragment,dpt),dpt.forEach(t),ipt.forEach(t),NHo=i(Xje),ype=n(Xje,"SPAN",{});var cpt=s(ype);jHo=r(cpt,"AutoModelForVision2Seq"),cpt.forEach(t),Xje.forEach(t),Gqe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(Hy.$$.fragment,Zs),DHo=i(Zs),ld=n(Zs,"P",{});var gZ=s(ld);GHo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mX=n(gZ,"A",{href:!0});var fpt=s(mX);OHo=r(fpt,"from_pretrained()"),fpt.forEach(t),VHo=r(gZ," class method or the "),gX=n(gZ,"A",{href:!0});var mpt=s(gX);XHo=r(mpt,"from_config()"),mpt.forEach(t),zHo=r(gZ,` class
method.`),gZ.forEach(t),WHo=i(Zs),Uy=n(Zs,"P",{});var zje=s(Uy);QHo=r(zje,"This class cannot be instantiated directly using "),Lpe=n(zje,"CODE",{});var gpt=s(Lpe);HHo=r(gpt,"__init__()"),gpt.forEach(t),UHo=r(zje," (throws an error)."),zje.forEach(t),JHo=i(Zs),_t=n(Zs,"DIV",{class:!0});var Vw=s(_t);T(Jy.$$.fragment,Vw),YHo=i(Vw),xpe=n(Vw,"P",{});var hpt=s(xpe);KHo=r(hpt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hpt.forEach(t),ZHo=i(Vw),id=n(Vw,"P",{});var hZ=s(id);eUo=r(hZ,`Note:
Loading a model from its configuration file does `),$pe=n(hZ,"STRONG",{});var ppt=s($pe);oUo=r(ppt,"not"),ppt.forEach(t),rUo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(hZ,"A",{href:!0});var _pt=s(hX);tUo=r(_pt,"from_pretrained()"),_pt.forEach(t),aUo=r(hZ," to load the model weights."),hZ.forEach(t),nUo=i(Vw),T(c0.$$.fragment,Vw),Vw.forEach(t),sUo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(Yy.$$.fragment,ga),lUo=i(ga),kpe=n(ga,"P",{});var upt=s(kpe);iUo=r(upt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),upt.forEach(t),dUo=i(ga),Da=n(ga,"P",{});var Xw=s(Da);cUo=r(Xw,"The model class to instantiate is selected based on the "),Spe=n(Xw,"CODE",{});var bpt=s(Spe);fUo=r(bpt,"model_type"),bpt.forEach(t),mUo=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Rpe=n(Xw,"CODE",{});var vpt=s(Rpe);gUo=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),hUo=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(Xw,"CODE",{});var Fpt=s(Bpe);pUo=r(Fpt,"pretrained_model_name_or_path"),Fpt.forEach(t),_Uo=r(Xw,":"),Xw.forEach(t),uUo=i(ga),Ppe=n(ga,"UL",{});var Tpt=s(Ppe);f0=n(Tpt,"LI",{});var T$e=s(f0);Ipe=n(T$e,"STRONG",{});var Mpt=s(Ipe);bUo=r(Mpt,"vision-encoder-decoder"),Mpt.forEach(t),vUo=r(T$e," \u2014 "),pX=n(T$e,"A",{href:!0});var Ept=s(pX);FUo=r(Ept,"VisionEncoderDecoderModel"),Ept.forEach(t),TUo=r(T$e," (Vision Encoder decoder model)"),T$e.forEach(t),Tpt.forEach(t),MUo=i(ga),m0=n(ga,"P",{});var M$e=s(m0);EUo=r(M$e,"The model is set in evaluation mode by default using "),qpe=n(M$e,"CODE",{});var Cpt=s(qpe);CUo=r(Cpt,"model.eval()"),Cpt.forEach(t),wUo=r(M$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=n(M$e,"CODE",{});var wpt=s(Npe);AUo=r(wpt,"model.train()"),wpt.forEach(t),M$e.forEach(t),yUo=i(ga),T(g0.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),Oqe=i(f),dd=n(f,"H2",{class:!0});var Wje=s(dd);h0=n(Wje,"A",{id:!0,class:!0,href:!0});var Apt=s(h0);jpe=n(Apt,"SPAN",{});var ypt=s(jpe);T(Ky.$$.fragment,ypt),ypt.forEach(t),Apt.forEach(t),LUo=i(Wje),Dpe=n(Wje,"SPAN",{});var Lpt=s(Dpe);xUo=r(Lpt,"AutoModelForAudioClassification"),Lpt.forEach(t),Wje.forEach(t),Vqe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(Zy.$$.fragment,el),$Uo=i(el),cd=n(el,"P",{});var pZ=s(cd);kUo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),_X=n(pZ,"A",{href:!0});var xpt=s(_X);SUo=r(xpt,"from_pretrained()"),xpt.forEach(t),RUo=r(pZ," class method or the "),uX=n(pZ,"A",{href:!0});var $pt=s(uX);BUo=r($pt,"from_config()"),$pt.forEach(t),PUo=r(pZ,` class
method.`),pZ.forEach(t),IUo=i(el),eL=n(el,"P",{});var Qje=s(eL);qUo=r(Qje,"This class cannot be instantiated directly using "),Gpe=n(Qje,"CODE",{});var kpt=s(Gpe);NUo=r(kpt,"__init__()"),kpt.forEach(t),jUo=r(Qje," (throws an error)."),Qje.forEach(t),DUo=i(el),ut=n(el,"DIV",{class:!0});var zw=s(ut);T(oL.$$.fragment,zw),GUo=i(zw),Ope=n(zw,"P",{});var Spt=s(Ope);OUo=r(Spt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Spt.forEach(t),VUo=i(zw),fd=n(zw,"P",{});var _Z=s(fd);XUo=r(_Z,`Note:
Loading a model from its configuration file does `),Vpe=n(_Z,"STRONG",{});var Rpt=s(Vpe);zUo=r(Rpt,"not"),Rpt.forEach(t),WUo=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(_Z,"A",{href:!0});var Bpt=s(bX);QUo=r(Bpt,"from_pretrained()"),Bpt.forEach(t),HUo=r(_Z," to load the model weights."),_Z.forEach(t),UUo=i(zw),T(p0.$$.fragment,zw),zw.forEach(t),JUo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(rL.$$.fragment,ha),YUo=i(ha),Xpe=n(ha,"P",{});var Ppt=s(Xpe);KUo=r(Ppt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ppt.forEach(t),ZUo=i(ha),Ga=n(ha,"P",{});var Ww=s(Ga);eJo=r(Ww,"The model class to instantiate is selected based on the "),zpe=n(Ww,"CODE",{});var Ipt=s(zpe);oJo=r(Ipt,"model_type"),Ipt.forEach(t),rJo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(Ww,"CODE",{});var qpt=s(Wpe);tJo=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),aJo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(Ww,"CODE",{});var Npt=s(Qpe);nJo=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),sJo=r(Ww,":"),Ww.forEach(t),lJo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);_0=n(Oe,"LI",{});var E$e=s(_0);Hpe=n(E$e,"STRONG",{});var jpt=s(Hpe);iJo=r(jpt,"data2vec-audio"),jpt.forEach(t),dJo=r(E$e," \u2014 "),vX=n(E$e,"A",{href:!0});var Dpt=s(vX);cJo=r(Dpt,"Data2VecAudioForSequenceClassification"),Dpt.forEach(t),fJo=r(E$e," (Data2VecAudio model)"),E$e.forEach(t),mJo=i(Oe),u0=n(Oe,"LI",{});var C$e=s(u0);Upe=n(C$e,"STRONG",{});var Gpt=s(Upe);gJo=r(Gpt,"hubert"),Gpt.forEach(t),hJo=r(C$e," \u2014 "),FX=n(C$e,"A",{href:!0});var Opt=s(FX);pJo=r(Opt,"HubertForSequenceClassification"),Opt.forEach(t),_Jo=r(C$e," (Hubert model)"),C$e.forEach(t),uJo=i(Oe),b0=n(Oe,"LI",{});var w$e=s(b0);Jpe=n(w$e,"STRONG",{});var Vpt=s(Jpe);bJo=r(Vpt,"sew"),Vpt.forEach(t),vJo=r(w$e," \u2014 "),TX=n(w$e,"A",{href:!0});var Xpt=s(TX);FJo=r(Xpt,"SEWForSequenceClassification"),Xpt.forEach(t),TJo=r(w$e," (SEW model)"),w$e.forEach(t),MJo=i(Oe),v0=n(Oe,"LI",{});var A$e=s(v0);Ype=n(A$e,"STRONG",{});var zpt=s(Ype);EJo=r(zpt,"sew-d"),zpt.forEach(t),CJo=r(A$e," \u2014 "),MX=n(A$e,"A",{href:!0});var Wpt=s(MX);wJo=r(Wpt,"SEWDForSequenceClassification"),Wpt.forEach(t),AJo=r(A$e," (SEW-D model)"),A$e.forEach(t),yJo=i(Oe),F0=n(Oe,"LI",{});var y$e=s(F0);Kpe=n(y$e,"STRONG",{});var Qpt=s(Kpe);LJo=r(Qpt,"unispeech"),Qpt.forEach(t),xJo=r(y$e," \u2014 "),EX=n(y$e,"A",{href:!0});var Hpt=s(EX);$Jo=r(Hpt,"UniSpeechForSequenceClassification"),Hpt.forEach(t),kJo=r(y$e," (UniSpeech model)"),y$e.forEach(t),SJo=i(Oe),T0=n(Oe,"LI",{});var L$e=s(T0);Zpe=n(L$e,"STRONG",{});var Upt=s(Zpe);RJo=r(Upt,"unispeech-sat"),Upt.forEach(t),BJo=r(L$e," \u2014 "),CX=n(L$e,"A",{href:!0});var Jpt=s(CX);PJo=r(Jpt,"UniSpeechSatForSequenceClassification"),Jpt.forEach(t),IJo=r(L$e," (UniSpeechSat model)"),L$e.forEach(t),qJo=i(Oe),M0=n(Oe,"LI",{});var x$e=s(M0);e_e=n(x$e,"STRONG",{});var Ypt=s(e_e);NJo=r(Ypt,"wav2vec2"),Ypt.forEach(t),jJo=r(x$e," \u2014 "),wX=n(x$e,"A",{href:!0});var Kpt=s(wX);DJo=r(Kpt,"Wav2Vec2ForSequenceClassification"),Kpt.forEach(t),GJo=r(x$e," (Wav2Vec2 model)"),x$e.forEach(t),OJo=i(Oe),E0=n(Oe,"LI",{});var $$e=s(E0);o_e=n($$e,"STRONG",{});var Zpt=s(o_e);VJo=r(Zpt,"wav2vec2-conformer"),Zpt.forEach(t),XJo=r($$e," \u2014 "),AX=n($$e,"A",{href:!0});var e_t=s(AX);zJo=r(e_t,"Wav2Vec2ConformerForSequenceClassification"),e_t.forEach(t),WJo=r($$e," (Wav2Vec2-Conformer model)"),$$e.forEach(t),QJo=i(Oe),C0=n(Oe,"LI",{});var k$e=s(C0);r_e=n(k$e,"STRONG",{});var o_t=s(r_e);HJo=r(o_t,"wavlm"),o_t.forEach(t),UJo=r(k$e," \u2014 "),yX=n(k$e,"A",{href:!0});var r_t=s(yX);JJo=r(r_t,"WavLMForSequenceClassification"),r_t.forEach(t),YJo=r(k$e," (WavLM model)"),k$e.forEach(t),Oe.forEach(t),KJo=i(ha),w0=n(ha,"P",{});var S$e=s(w0);ZJo=r(S$e,"The model is set in evaluation mode by default using "),t_e=n(S$e,"CODE",{});var t_t=s(t_e);eYo=r(t_t,"model.eval()"),t_t.forEach(t),oYo=r(S$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=n(S$e,"CODE",{});var a_t=s(a_e);rYo=r(a_t,"model.train()"),a_t.forEach(t),S$e.forEach(t),tYo=i(ha),T(A0.$$.fragment,ha),ha.forEach(t),el.forEach(t),Xqe=i(f),md=n(f,"H2",{class:!0});var Hje=s(md);y0=n(Hje,"A",{id:!0,class:!0,href:!0});var n_t=s(y0);n_e=n(n_t,"SPAN",{});var s_t=s(n_e);T(tL.$$.fragment,s_t),s_t.forEach(t),n_t.forEach(t),aYo=i(Hje),s_e=n(Hje,"SPAN",{});var l_t=s(s_e);nYo=r(l_t,"AutoModelForAudioFrameClassification"),l_t.forEach(t),Hje.forEach(t),zqe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(aL.$$.fragment,ol),sYo=i(ol),gd=n(ol,"P",{});var uZ=s(gd);lYo=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),LX=n(uZ,"A",{href:!0});var i_t=s(LX);iYo=r(i_t,"from_pretrained()"),i_t.forEach(t),dYo=r(uZ," class method or the "),xX=n(uZ,"A",{href:!0});var d_t=s(xX);cYo=r(d_t,"from_config()"),d_t.forEach(t),fYo=r(uZ,` class
method.`),uZ.forEach(t),mYo=i(ol),nL=n(ol,"P",{});var Uje=s(nL);gYo=r(Uje,"This class cannot be instantiated directly using "),l_e=n(Uje,"CODE",{});var c_t=s(l_e);hYo=r(c_t,"__init__()"),c_t.forEach(t),pYo=r(Uje," (throws an error)."),Uje.forEach(t),_Yo=i(ol),bt=n(ol,"DIV",{class:!0});var Qw=s(bt);T(sL.$$.fragment,Qw),uYo=i(Qw),i_e=n(Qw,"P",{});var f_t=s(i_e);bYo=r(f_t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),f_t.forEach(t),vYo=i(Qw),hd=n(Qw,"P",{});var bZ=s(hd);FYo=r(bZ,`Note:
Loading a model from its configuration file does `),d_e=n(bZ,"STRONG",{});var m_t=s(d_e);TYo=r(m_t,"not"),m_t.forEach(t),MYo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(bZ,"A",{href:!0});var g_t=s($X);EYo=r(g_t,"from_pretrained()"),g_t.forEach(t),CYo=r(bZ," to load the model weights."),bZ.forEach(t),wYo=i(Qw),T(L0.$$.fragment,Qw),Qw.forEach(t),AYo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(lL.$$.fragment,pa),yYo=i(pa),c_e=n(pa,"P",{});var h_t=s(c_e);LYo=r(h_t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),h_t.forEach(t),xYo=i(pa),Oa=n(pa,"P",{});var Hw=s(Oa);$Yo=r(Hw,"The model class to instantiate is selected based on the "),f_e=n(Hw,"CODE",{});var p_t=s(f_e);kYo=r(p_t,"model_type"),p_t.forEach(t),SYo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),m_e=n(Hw,"CODE",{});var __t=s(m_e);RYo=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),BYo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(Hw,"CODE",{});var u_t=s(g_e);PYo=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),IYo=r(Hw,":"),Hw.forEach(t),qYo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);x0=n(rl,"LI",{});var R$e=s(x0);h_e=n(R$e,"STRONG",{});var b_t=s(h_e);NYo=r(b_t,"data2vec-audio"),b_t.forEach(t),jYo=r(R$e," \u2014 "),kX=n(R$e,"A",{href:!0});var v_t=s(kX);DYo=r(v_t,"Data2VecAudioForAudioFrameClassification"),v_t.forEach(t),GYo=r(R$e," (Data2VecAudio model)"),R$e.forEach(t),OYo=i(rl),$0=n(rl,"LI",{});var B$e=s($0);p_e=n(B$e,"STRONG",{});var F_t=s(p_e);VYo=r(F_t,"unispeech-sat"),F_t.forEach(t),XYo=r(B$e," \u2014 "),SX=n(B$e,"A",{href:!0});var T_t=s(SX);zYo=r(T_t,"UniSpeechSatForAudioFrameClassification"),T_t.forEach(t),WYo=r(B$e," (UniSpeechSat model)"),B$e.forEach(t),QYo=i(rl),k0=n(rl,"LI",{});var P$e=s(k0);__e=n(P$e,"STRONG",{});var M_t=s(__e);HYo=r(M_t,"wav2vec2"),M_t.forEach(t),UYo=r(P$e," \u2014 "),RX=n(P$e,"A",{href:!0});var E_t=s(RX);JYo=r(E_t,"Wav2Vec2ForAudioFrameClassification"),E_t.forEach(t),YYo=r(P$e," (Wav2Vec2 model)"),P$e.forEach(t),KYo=i(rl),S0=n(rl,"LI",{});var I$e=s(S0);u_e=n(I$e,"STRONG",{});var C_t=s(u_e);ZYo=r(C_t,"wav2vec2-conformer"),C_t.forEach(t),eKo=r(I$e," \u2014 "),BX=n(I$e,"A",{href:!0});var w_t=s(BX);oKo=r(w_t,"Wav2Vec2ConformerForAudioFrameClassification"),w_t.forEach(t),rKo=r(I$e," (Wav2Vec2-Conformer model)"),I$e.forEach(t),tKo=i(rl),R0=n(rl,"LI",{});var q$e=s(R0);b_e=n(q$e,"STRONG",{});var A_t=s(b_e);aKo=r(A_t,"wavlm"),A_t.forEach(t),nKo=r(q$e," \u2014 "),PX=n(q$e,"A",{href:!0});var y_t=s(PX);sKo=r(y_t,"WavLMForAudioFrameClassification"),y_t.forEach(t),lKo=r(q$e," (WavLM model)"),q$e.forEach(t),rl.forEach(t),iKo=i(pa),B0=n(pa,"P",{});var N$e=s(B0);dKo=r(N$e,"The model is set in evaluation mode by default using "),v_e=n(N$e,"CODE",{});var L_t=s(v_e);cKo=r(L_t,"model.eval()"),L_t.forEach(t),fKo=r(N$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=n(N$e,"CODE",{});var x_t=s(F_e);mKo=r(x_t,"model.train()"),x_t.forEach(t),N$e.forEach(t),gKo=i(pa),T(P0.$$.fragment,pa),pa.forEach(t),ol.forEach(t),Wqe=i(f),pd=n(f,"H2",{class:!0});var Jje=s(pd);I0=n(Jje,"A",{id:!0,class:!0,href:!0});var $_t=s(I0);T_e=n($_t,"SPAN",{});var k_t=s(T_e);T(iL.$$.fragment,k_t),k_t.forEach(t),$_t.forEach(t),hKo=i(Jje),M_e=n(Jje,"SPAN",{});var S_t=s(M_e);pKo=r(S_t,"AutoModelForCTC"),S_t.forEach(t),Jje.forEach(t),Qqe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(dL.$$.fragment,tl),_Ko=i(tl),_d=n(tl,"P",{});var vZ=s(_d);uKo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),IX=n(vZ,"A",{href:!0});var R_t=s(IX);bKo=r(R_t,"from_pretrained()"),R_t.forEach(t),vKo=r(vZ," class method or the "),qX=n(vZ,"A",{href:!0});var B_t=s(qX);FKo=r(B_t,"from_config()"),B_t.forEach(t),TKo=r(vZ,` class
method.`),vZ.forEach(t),MKo=i(tl),cL=n(tl,"P",{});var Yje=s(cL);EKo=r(Yje,"This class cannot be instantiated directly using "),E_e=n(Yje,"CODE",{});var P_t=s(E_e);CKo=r(P_t,"__init__()"),P_t.forEach(t),wKo=r(Yje," (throws an error)."),Yje.forEach(t),AKo=i(tl),vt=n(tl,"DIV",{class:!0});var Uw=s(vt);T(fL.$$.fragment,Uw),yKo=i(Uw),C_e=n(Uw,"P",{});var I_t=s(C_e);LKo=r(I_t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),I_t.forEach(t),xKo=i(Uw),ud=n(Uw,"P",{});var FZ=s(ud);$Ko=r(FZ,`Note:
Loading a model from its configuration file does `),w_e=n(FZ,"STRONG",{});var q_t=s(w_e);kKo=r(q_t,"not"),q_t.forEach(t),SKo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(FZ,"A",{href:!0});var N_t=s(NX);RKo=r(N_t,"from_pretrained()"),N_t.forEach(t),BKo=r(FZ," to load the model weights."),FZ.forEach(t),PKo=i(Uw),T(q0.$$.fragment,Uw),Uw.forEach(t),IKo=i(tl),mo=n(tl,"DIV",{class:!0});var _a=s(mo);T(mL.$$.fragment,_a),qKo=i(_a),A_e=n(_a,"P",{});var j_t=s(A_e);NKo=r(j_t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),j_t.forEach(t),jKo=i(_a),Va=n(_a,"P",{});var Jw=s(Va);DKo=r(Jw,"The model class to instantiate is selected based on the "),y_e=n(Jw,"CODE",{});var D_t=s(y_e);GKo=r(D_t,"model_type"),D_t.forEach(t),OKo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),L_e=n(Jw,"CODE",{});var G_t=s(L_e);VKo=r(G_t,"pretrained_model_name_or_path"),G_t.forEach(t),XKo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=n(Jw,"CODE",{});var O_t=s(x_e);zKo=r(O_t,"pretrained_model_name_or_path"),O_t.forEach(t),WKo=r(Jw,":"),Jw.forEach(t),QKo=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);N0=n(Ve,"LI",{});var j$e=s(N0);$_e=n(j$e,"STRONG",{});var V_t=s($_e);HKo=r(V_t,"data2vec-audio"),V_t.forEach(t),UKo=r(j$e," \u2014 "),jX=n(j$e,"A",{href:!0});var X_t=s(jX);JKo=r(X_t,"Data2VecAudioForCTC"),X_t.forEach(t),YKo=r(j$e," (Data2VecAudio model)"),j$e.forEach(t),KKo=i(Ve),j0=n(Ve,"LI",{});var D$e=s(j0);k_e=n(D$e,"STRONG",{});var z_t=s(k_e);ZKo=r(z_t,"hubert"),z_t.forEach(t),eZo=r(D$e," \u2014 "),DX=n(D$e,"A",{href:!0});var W_t=s(DX);oZo=r(W_t,"HubertForCTC"),W_t.forEach(t),rZo=r(D$e," (Hubert model)"),D$e.forEach(t),tZo=i(Ve),D0=n(Ve,"LI",{});var G$e=s(D0);S_e=n(G$e,"STRONG",{});var Q_t=s(S_e);aZo=r(Q_t,"sew"),Q_t.forEach(t),nZo=r(G$e," \u2014 "),GX=n(G$e,"A",{href:!0});var H_t=s(GX);sZo=r(H_t,"SEWForCTC"),H_t.forEach(t),lZo=r(G$e," (SEW model)"),G$e.forEach(t),iZo=i(Ve),G0=n(Ve,"LI",{});var O$e=s(G0);R_e=n(O$e,"STRONG",{});var U_t=s(R_e);dZo=r(U_t,"sew-d"),U_t.forEach(t),cZo=r(O$e," \u2014 "),OX=n(O$e,"A",{href:!0});var J_t=s(OX);fZo=r(J_t,"SEWDForCTC"),J_t.forEach(t),mZo=r(O$e," (SEW-D model)"),O$e.forEach(t),gZo=i(Ve),O0=n(Ve,"LI",{});var V$e=s(O0);B_e=n(V$e,"STRONG",{});var Y_t=s(B_e);hZo=r(Y_t,"unispeech"),Y_t.forEach(t),pZo=r(V$e," \u2014 "),VX=n(V$e,"A",{href:!0});var K_t=s(VX);_Zo=r(K_t,"UniSpeechForCTC"),K_t.forEach(t),uZo=r(V$e," (UniSpeech model)"),V$e.forEach(t),bZo=i(Ve),V0=n(Ve,"LI",{});var X$e=s(V0);P_e=n(X$e,"STRONG",{});var Z_t=s(P_e);vZo=r(Z_t,"unispeech-sat"),Z_t.forEach(t),FZo=r(X$e," \u2014 "),XX=n(X$e,"A",{href:!0});var eut=s(XX);TZo=r(eut,"UniSpeechSatForCTC"),eut.forEach(t),MZo=r(X$e," (UniSpeechSat model)"),X$e.forEach(t),EZo=i(Ve),X0=n(Ve,"LI",{});var z$e=s(X0);I_e=n(z$e,"STRONG",{});var out=s(I_e);CZo=r(out,"wav2vec2"),out.forEach(t),wZo=r(z$e," \u2014 "),zX=n(z$e,"A",{href:!0});var rut=s(zX);AZo=r(rut,"Wav2Vec2ForCTC"),rut.forEach(t),yZo=r(z$e," (Wav2Vec2 model)"),z$e.forEach(t),LZo=i(Ve),z0=n(Ve,"LI",{});var W$e=s(z0);q_e=n(W$e,"STRONG",{});var tut=s(q_e);xZo=r(tut,"wav2vec2-conformer"),tut.forEach(t),$Zo=r(W$e," \u2014 "),WX=n(W$e,"A",{href:!0});var aut=s(WX);kZo=r(aut,"Wav2Vec2ConformerForCTC"),aut.forEach(t),SZo=r(W$e," (Wav2Vec2-Conformer model)"),W$e.forEach(t),RZo=i(Ve),W0=n(Ve,"LI",{});var Q$e=s(W0);N_e=n(Q$e,"STRONG",{});var nut=s(N_e);BZo=r(nut,"wavlm"),nut.forEach(t),PZo=r(Q$e," \u2014 "),QX=n(Q$e,"A",{href:!0});var sut=s(QX);IZo=r(sut,"WavLMForCTC"),sut.forEach(t),qZo=r(Q$e," (WavLM model)"),Q$e.forEach(t),Ve.forEach(t),NZo=i(_a),Q0=n(_a,"P",{});var H$e=s(Q0);jZo=r(H$e,"The model is set in evaluation mode by default using "),j_e=n(H$e,"CODE",{});var lut=s(j_e);DZo=r(lut,"model.eval()"),lut.forEach(t),GZo=r(H$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=n(H$e,"CODE",{});var iut=s(D_e);OZo=r(iut,"model.train()"),iut.forEach(t),H$e.forEach(t),VZo=i(_a),T(H0.$$.fragment,_a),_a.forEach(t),tl.forEach(t),Hqe=i(f),bd=n(f,"H2",{class:!0});var Kje=s(bd);U0=n(Kje,"A",{id:!0,class:!0,href:!0});var dut=s(U0);G_e=n(dut,"SPAN",{});var cut=s(G_e);T(gL.$$.fragment,cut),cut.forEach(t),dut.forEach(t),XZo=i(Kje),O_e=n(Kje,"SPAN",{});var fut=s(O_e);zZo=r(fut,"AutoModelForSpeechSeq2Seq"),fut.forEach(t),Kje.forEach(t),Uqe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(hL.$$.fragment,al),WZo=i(al),vd=n(al,"P",{});var TZ=s(vd);QZo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HX=n(TZ,"A",{href:!0});var mut=s(HX);HZo=r(mut,"from_pretrained()"),mut.forEach(t),UZo=r(TZ," class method or the "),UX=n(TZ,"A",{href:!0});var gut=s(UX);JZo=r(gut,"from_config()"),gut.forEach(t),YZo=r(TZ,` class
method.`),TZ.forEach(t),KZo=i(al),pL=n(al,"P",{});var Zje=s(pL);ZZo=r(Zje,"This class cannot be instantiated directly using "),V_e=n(Zje,"CODE",{});var hut=s(V_e);eer=r(hut,"__init__()"),hut.forEach(t),oer=r(Zje," (throws an error)."),Zje.forEach(t),rer=i(al),Ft=n(al,"DIV",{class:!0});var Yw=s(Ft);T(_L.$$.fragment,Yw),ter=i(Yw),X_e=n(Yw,"P",{});var put=s(X_e);aer=r(put,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),put.forEach(t),ner=i(Yw),Fd=n(Yw,"P",{});var MZ=s(Fd);ser=r(MZ,`Note:
Loading a model from its configuration file does `),z_e=n(MZ,"STRONG",{});var _ut=s(z_e);ler=r(_ut,"not"),_ut.forEach(t),ier=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(MZ,"A",{href:!0});var uut=s(JX);der=r(uut,"from_pretrained()"),uut.forEach(t),cer=r(MZ," to load the model weights."),MZ.forEach(t),fer=i(Yw),T(J0.$$.fragment,Yw),Yw.forEach(t),mer=i(al),go=n(al,"DIV",{class:!0});var ua=s(go);T(uL.$$.fragment,ua),ger=i(ua),W_e=n(ua,"P",{});var but=s(W_e);her=r(but,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),but.forEach(t),per=i(ua),Xa=n(ua,"P",{});var Kw=s(Xa);_er=r(Kw,"The model class to instantiate is selected based on the "),Q_e=n(Kw,"CODE",{});var vut=s(Q_e);uer=r(vut,"model_type"),vut.forEach(t),ber=r(Kw,` property of the config object (either
passed as an argument or loaded from `),H_e=n(Kw,"CODE",{});var Fut=s(H_e);ver=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),Fer=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(Kw,"CODE",{});var Tut=s(U_e);Ter=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),Mer=r(Kw,":"),Kw.forEach(t),Eer=i(ua),bL=n(ua,"UL",{});var eDe=s(bL);Y0=n(eDe,"LI",{});var U$e=s(Y0);J_e=n(U$e,"STRONG",{});var Mut=s(J_e);Cer=r(Mut,"speech-encoder-decoder"),Mut.forEach(t),wer=r(U$e," \u2014 "),YX=n(U$e,"A",{href:!0});var Eut=s(YX);Aer=r(Eut,"SpeechEncoderDecoderModel"),Eut.forEach(t),yer=r(U$e," (Speech Encoder decoder model)"),U$e.forEach(t),Ler=i(eDe),K0=n(eDe,"LI",{});var J$e=s(K0);Y_e=n(J$e,"STRONG",{});var Cut=s(Y_e);xer=r(Cut,"speech_to_text"),Cut.forEach(t),$er=r(J$e," \u2014 "),KX=n(J$e,"A",{href:!0});var wut=s(KX);ker=r(wut,"Speech2TextForConditionalGeneration"),wut.forEach(t),Ser=r(J$e," (Speech2Text model)"),J$e.forEach(t),eDe.forEach(t),Rer=i(ua),Z0=n(ua,"P",{});var Y$e=s(Z0);Ber=r(Y$e,"The model is set in evaluation mode by default using "),K_e=n(Y$e,"CODE",{});var Aut=s(K_e);Per=r(Aut,"model.eval()"),Aut.forEach(t),Ier=r(Y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=n(Y$e,"CODE",{});var yut=s(Z_e);qer=r(yut,"model.train()"),yut.forEach(t),Y$e.forEach(t),Ner=i(ua),T(eT.$$.fragment,ua),ua.forEach(t),al.forEach(t),Jqe=i(f),Td=n(f,"H2",{class:!0});var oDe=s(Td);oT=n(oDe,"A",{id:!0,class:!0,href:!0});var Lut=s(oT);eue=n(Lut,"SPAN",{});var xut=s(eue);T(vL.$$.fragment,xut),xut.forEach(t),Lut.forEach(t),jer=i(oDe),oue=n(oDe,"SPAN",{});var $ut=s(oue);Der=r($ut,"AutoModelForAudioXVector"),$ut.forEach(t),oDe.forEach(t),Yqe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(FL.$$.fragment,nl),Ger=i(nl),Md=n(nl,"P",{});var EZ=s(Md);Oer=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ZX=n(EZ,"A",{href:!0});var kut=s(ZX);Ver=r(kut,"from_pretrained()"),kut.forEach(t),Xer=r(EZ," class method or the "),ez=n(EZ,"A",{href:!0});var Sut=s(ez);zer=r(Sut,"from_config()"),Sut.forEach(t),Wer=r(EZ,` class
method.`),EZ.forEach(t),Qer=i(nl),TL=n(nl,"P",{});var rDe=s(TL);Her=r(rDe,"This class cannot be instantiated directly using "),rue=n(rDe,"CODE",{});var Rut=s(rue);Uer=r(Rut,"__init__()"),Rut.forEach(t),Jer=r(rDe," (throws an error)."),rDe.forEach(t),Yer=i(nl),Tt=n(nl,"DIV",{class:!0});var Zw=s(Tt);T(ML.$$.fragment,Zw),Ker=i(Zw),tue=n(Zw,"P",{});var But=s(tue);Zer=r(But,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),But.forEach(t),eor=i(Zw),Ed=n(Zw,"P",{});var CZ=s(Ed);oor=r(CZ,`Note:
Loading a model from its configuration file does `),aue=n(CZ,"STRONG",{});var Put=s(aue);ror=r(Put,"not"),Put.forEach(t),tor=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(CZ,"A",{href:!0});var Iut=s(oz);aor=r(Iut,"from_pretrained()"),Iut.forEach(t),nor=r(CZ," to load the model weights."),CZ.forEach(t),sor=i(Zw),T(rT.$$.fragment,Zw),Zw.forEach(t),lor=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(EL.$$.fragment,ba),ior=i(ba),nue=n(ba,"P",{});var qut=s(nue);dor=r(qut,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),qut.forEach(t),cor=i(ba),za=n(ba,"P",{});var eA=s(za);mor=r(eA,"The model class to instantiate is selected based on the "),sue=n(eA,"CODE",{});var Nut=s(sue);gor=r(Nut,"model_type"),Nut.forEach(t),hor=r(eA,` property of the config object (either
passed as an argument or loaded from `),lue=n(eA,"CODE",{});var jut=s(lue);por=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),_or=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=n(eA,"CODE",{});var Dut=s(iue);uor=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),bor=r(eA,":"),eA.forEach(t),vor=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);tT=n(sl,"LI",{});var K$e=s(tT);due=n(K$e,"STRONG",{});var Gut=s(due);For=r(Gut,"data2vec-audio"),Gut.forEach(t),Tor=r(K$e," \u2014 "),rz=n(K$e,"A",{href:!0});var Out=s(rz);Mor=r(Out,"Data2VecAudioForXVector"),Out.forEach(t),Eor=r(K$e," (Data2VecAudio model)"),K$e.forEach(t),Cor=i(sl),aT=n(sl,"LI",{});var Z$e=s(aT);cue=n(Z$e,"STRONG",{});var Vut=s(cue);wor=r(Vut,"unispeech-sat"),Vut.forEach(t),Aor=r(Z$e," \u2014 "),tz=n(Z$e,"A",{href:!0});var Xut=s(tz);yor=r(Xut,"UniSpeechSatForXVector"),Xut.forEach(t),Lor=r(Z$e," (UniSpeechSat model)"),Z$e.forEach(t),xor=i(sl),nT=n(sl,"LI",{});var eke=s(nT);fue=n(eke,"STRONG",{});var zut=s(fue);$or=r(zut,"wav2vec2"),zut.forEach(t),kor=r(eke," \u2014 "),az=n(eke,"A",{href:!0});var Wut=s(az);Sor=r(Wut,"Wav2Vec2ForXVector"),Wut.forEach(t),Ror=r(eke," (Wav2Vec2 model)"),eke.forEach(t),Bor=i(sl),sT=n(sl,"LI",{});var oke=s(sT);mue=n(oke,"STRONG",{});var Qut=s(mue);Por=r(Qut,"wav2vec2-conformer"),Qut.forEach(t),Ior=r(oke," \u2014 "),nz=n(oke,"A",{href:!0});var Hut=s(nz);qor=r(Hut,"Wav2Vec2ConformerForXVector"),Hut.forEach(t),Nor=r(oke," (Wav2Vec2-Conformer model)"),oke.forEach(t),jor=i(sl),lT=n(sl,"LI",{});var rke=s(lT);gue=n(rke,"STRONG",{});var Uut=s(gue);Dor=r(Uut,"wavlm"),Uut.forEach(t),Gor=r(rke," \u2014 "),sz=n(rke,"A",{href:!0});var Jut=s(sz);Oor=r(Jut,"WavLMForXVector"),Jut.forEach(t),Vor=r(rke," (WavLM model)"),rke.forEach(t),sl.forEach(t),Xor=i(ba),iT=n(ba,"P",{});var tke=s(iT);zor=r(tke,"The model is set in evaluation mode by default using "),hue=n(tke,"CODE",{});var Yut=s(hue);Wor=r(Yut,"model.eval()"),Yut.forEach(t),Qor=r(tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(tke,"CODE",{});var Kut=s(pue);Hor=r(Kut,"model.train()"),Kut.forEach(t),tke.forEach(t),Uor=i(ba),T(dT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Kqe=i(f),Cd=n(f,"H2",{class:!0});var tDe=s(Cd);cT=n(tDe,"A",{id:!0,class:!0,href:!0});var Zut=s(cT);_ue=n(Zut,"SPAN",{});var e2t=s(_ue);T(CL.$$.fragment,e2t),e2t.forEach(t),Zut.forEach(t),Jor=i(tDe),uue=n(tDe,"SPAN",{});var o2t=s(uue);Yor=r(o2t,"AutoModelForMaskedImageModeling"),o2t.forEach(t),tDe.forEach(t),Zqe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(wL.$$.fragment,ll),Kor=i(ll),wd=n(ll,"P",{});var wZ=s(wd);Zor=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lz=n(wZ,"A",{href:!0});var r2t=s(lz);err=r(r2t,"from_pretrained()"),r2t.forEach(t),orr=r(wZ," class method or the "),iz=n(wZ,"A",{href:!0});var t2t=s(iz);rrr=r(t2t,"from_config()"),t2t.forEach(t),trr=r(wZ,` class
method.`),wZ.forEach(t),arr=i(ll),AL=n(ll,"P",{});var aDe=s(AL);nrr=r(aDe,"This class cannot be instantiated directly using "),bue=n(aDe,"CODE",{});var a2t=s(bue);srr=r(a2t,"__init__()"),a2t.forEach(t),lrr=r(aDe," (throws an error)."),aDe.forEach(t),irr=i(ll),Mt=n(ll,"DIV",{class:!0});var oA=s(Mt);T(yL.$$.fragment,oA),drr=i(oA),vue=n(oA,"P",{});var n2t=s(vue);crr=r(n2t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),n2t.forEach(t),frr=i(oA),Ad=n(oA,"P",{});var AZ=s(Ad);mrr=r(AZ,`Note:
Loading a model from its configuration file does `),Fue=n(AZ,"STRONG",{});var s2t=s(Fue);grr=r(s2t,"not"),s2t.forEach(t),hrr=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=n(AZ,"A",{href:!0});var l2t=s(dz);prr=r(l2t,"from_pretrained()"),l2t.forEach(t),_rr=r(AZ," to load the model weights."),AZ.forEach(t),urr=i(oA),T(fT.$$.fragment,oA),oA.forEach(t),brr=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(LL.$$.fragment,va),vrr=i(va),Tue=n(va,"P",{});var i2t=s(Tue);Frr=r(i2t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),i2t.forEach(t),Trr=i(va),Wa=n(va,"P",{});var rA=s(Wa);Mrr=r(rA,"The model class to instantiate is selected based on the "),Mue=n(rA,"CODE",{});var d2t=s(Mue);Err=r(d2t,"model_type"),d2t.forEach(t),Crr=r(rA,` property of the config object (either
passed as an argument or loaded from `),Eue=n(rA,"CODE",{});var c2t=s(Eue);wrr=r(c2t,"pretrained_model_name_or_path"),c2t.forEach(t),Arr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(rA,"CODE",{});var f2t=s(Cue);yrr=r(f2t,"pretrained_model_name_or_path"),f2t.forEach(t),Lrr=r(rA,":"),rA.forEach(t),xrr=i(va),yd=n(va,"UL",{});var yZ=s(yd);mT=n(yZ,"LI",{});var ake=s(mT);wue=n(ake,"STRONG",{});var m2t=s(wue);$rr=r(m2t,"deit"),m2t.forEach(t),krr=r(ake," \u2014 "),cz=n(ake,"A",{href:!0});var g2t=s(cz);Srr=r(g2t,"DeiTForMaskedImageModeling"),g2t.forEach(t),Rrr=r(ake," (DeiT model)"),ake.forEach(t),Brr=i(yZ),gT=n(yZ,"LI",{});var nke=s(gT);Aue=n(nke,"STRONG",{});var h2t=s(Aue);Prr=r(h2t,"swin"),h2t.forEach(t),Irr=r(nke," \u2014 "),fz=n(nke,"A",{href:!0});var p2t=s(fz);qrr=r(p2t,"SwinForMaskedImageModeling"),p2t.forEach(t),Nrr=r(nke," (Swin model)"),nke.forEach(t),jrr=i(yZ),hT=n(yZ,"LI",{});var ske=s(hT);yue=n(ske,"STRONG",{});var _2t=s(yue);Drr=r(_2t,"vit"),_2t.forEach(t),Grr=r(ske," \u2014 "),mz=n(ske,"A",{href:!0});var u2t=s(mz);Orr=r(u2t,"ViTForMaskedImageModeling"),u2t.forEach(t),Vrr=r(ske," (ViT model)"),ske.forEach(t),yZ.forEach(t),Xrr=i(va),pT=n(va,"P",{});var lke=s(pT);zrr=r(lke,"The model is set in evaluation mode by default using "),Lue=n(lke,"CODE",{});var b2t=s(Lue);Wrr=r(b2t,"model.eval()"),b2t.forEach(t),Qrr=r(lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(lke,"CODE",{});var v2t=s(xue);Hrr=r(v2t,"model.train()"),v2t.forEach(t),lke.forEach(t),Urr=i(va),T(_T.$$.fragment,va),va.forEach(t),ll.forEach(t),eNe=i(f),Ld=n(f,"H2",{class:!0});var nDe=s(Ld);uT=n(nDe,"A",{id:!0,class:!0,href:!0});var F2t=s(uT);$ue=n(F2t,"SPAN",{});var T2t=s($ue);T(xL.$$.fragment,T2t),T2t.forEach(t),F2t.forEach(t),Jrr=i(nDe),kue=n(nDe,"SPAN",{});var M2t=s(kue);Yrr=r(M2t,"AutoModelForObjectDetection"),M2t.forEach(t),nDe.forEach(t),oNe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T($L.$$.fragment,il),Krr=i(il),xd=n(il,"P",{});var LZ=s(xd);Zrr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),gz=n(LZ,"A",{href:!0});var E2t=s(gz);etr=r(E2t,"from_pretrained()"),E2t.forEach(t),otr=r(LZ," class method or the "),hz=n(LZ,"A",{href:!0});var C2t=s(hz);rtr=r(C2t,"from_config()"),C2t.forEach(t),ttr=r(LZ,` class
method.`),LZ.forEach(t),atr=i(il),kL=n(il,"P",{});var sDe=s(kL);ntr=r(sDe,"This class cannot be instantiated directly using "),Sue=n(sDe,"CODE",{});var w2t=s(Sue);str=r(w2t,"__init__()"),w2t.forEach(t),ltr=r(sDe," (throws an error)."),sDe.forEach(t),itr=i(il),Et=n(il,"DIV",{class:!0});var tA=s(Et);T(SL.$$.fragment,tA),dtr=i(tA),Rue=n(tA,"P",{});var A2t=s(Rue);ctr=r(A2t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),A2t.forEach(t),ftr=i(tA),$d=n(tA,"P",{});var xZ=s($d);mtr=r(xZ,`Note:
Loading a model from its configuration file does `),Bue=n(xZ,"STRONG",{});var y2t=s(Bue);gtr=r(y2t,"not"),y2t.forEach(t),htr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(xZ,"A",{href:!0});var L2t=s(pz);ptr=r(L2t,"from_pretrained()"),L2t.forEach(t),_tr=r(xZ," to load the model weights."),xZ.forEach(t),utr=i(tA),T(bT.$$.fragment,tA),tA.forEach(t),btr=i(il),_o=n(il,"DIV",{class:!0});var Fa=s(_o);T(RL.$$.fragment,Fa),vtr=i(Fa),Pue=n(Fa,"P",{});var x2t=s(Pue);Ftr=r(x2t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),x2t.forEach(t),Ttr=i(Fa),Qa=n(Fa,"P",{});var aA=s(Qa);Mtr=r(aA,"The model class to instantiate is selected based on the "),Iue=n(aA,"CODE",{});var $2t=s(Iue);Etr=r($2t,"model_type"),$2t.forEach(t),Ctr=r(aA,` property of the config object (either
passed as an argument or loaded from `),que=n(aA,"CODE",{});var k2t=s(que);wtr=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),Atr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(aA,"CODE",{});var S2t=s(Nue);ytr=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),Ltr=r(aA,":"),aA.forEach(t),xtr=i(Fa),BL=n(Fa,"UL",{});var lDe=s(BL);vT=n(lDe,"LI",{});var ike=s(vT);jue=n(ike,"STRONG",{});var R2t=s(jue);$tr=r(R2t,"detr"),R2t.forEach(t),ktr=r(ike," \u2014 "),_z=n(ike,"A",{href:!0});var B2t=s(_z);Str=r(B2t,"DetrForObjectDetection"),B2t.forEach(t),Rtr=r(ike," (DETR model)"),ike.forEach(t),Btr=i(lDe),FT=n(lDe,"LI",{});var dke=s(FT);Due=n(dke,"STRONG",{});var P2t=s(Due);Ptr=r(P2t,"yolos"),P2t.forEach(t),Itr=r(dke," \u2014 "),uz=n(dke,"A",{href:!0});var I2t=s(uz);qtr=r(I2t,"YolosForObjectDetection"),I2t.forEach(t),Ntr=r(dke," (YOLOS model)"),dke.forEach(t),lDe.forEach(t),jtr=i(Fa),TT=n(Fa,"P",{});var cke=s(TT);Dtr=r(cke,"The model is set in evaluation mode by default using "),Gue=n(cke,"CODE",{});var q2t=s(Gue);Gtr=r(q2t,"model.eval()"),q2t.forEach(t),Otr=r(cke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(cke,"CODE",{});var N2t=s(Oue);Vtr=r(N2t,"model.train()"),N2t.forEach(t),cke.forEach(t),Xtr=i(Fa),T(MT.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),rNe=i(f),kd=n(f,"H2",{class:!0});var iDe=s(kd);ET=n(iDe,"A",{id:!0,class:!0,href:!0});var j2t=s(ET);Vue=n(j2t,"SPAN",{});var D2t=s(Vue);T(PL.$$.fragment,D2t),D2t.forEach(t),j2t.forEach(t),ztr=i(iDe),Xue=n(iDe,"SPAN",{});var G2t=s(Xue);Wtr=r(G2t,"AutoModelForImageSegmentation"),G2t.forEach(t),iDe.forEach(t),tNe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(IL.$$.fragment,dl),Qtr=i(dl),Sd=n(dl,"P",{});var $Z=s(Sd);Htr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),bz=n($Z,"A",{href:!0});var O2t=s(bz);Utr=r(O2t,"from_pretrained()"),O2t.forEach(t),Jtr=r($Z," class method or the "),vz=n($Z,"A",{href:!0});var V2t=s(vz);Ytr=r(V2t,"from_config()"),V2t.forEach(t),Ktr=r($Z,` class
method.`),$Z.forEach(t),Ztr=i(dl),qL=n(dl,"P",{});var dDe=s(qL);ear=r(dDe,"This class cannot be instantiated directly using "),zue=n(dDe,"CODE",{});var X2t=s(zue);oar=r(X2t,"__init__()"),X2t.forEach(t),rar=r(dDe," (throws an error)."),dDe.forEach(t),tar=i(dl),Ct=n(dl,"DIV",{class:!0});var nA=s(Ct);T(NL.$$.fragment,nA),aar=i(nA),Wue=n(nA,"P",{});var z2t=s(Wue);nar=r(z2t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),z2t.forEach(t),sar=i(nA),Rd=n(nA,"P",{});var kZ=s(Rd);lar=r(kZ,`Note:
Loading a model from its configuration file does `),Que=n(kZ,"STRONG",{});var W2t=s(Que);iar=r(W2t,"not"),W2t.forEach(t),dar=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(kZ,"A",{href:!0});var Q2t=s(Fz);car=r(Q2t,"from_pretrained()"),Q2t.forEach(t),far=r(kZ," to load the model weights."),kZ.forEach(t),mar=i(nA),T(CT.$$.fragment,nA),nA.forEach(t),gar=i(dl),uo=n(dl,"DIV",{class:!0});var Ta=s(uo);T(jL.$$.fragment,Ta),har=i(Ta),Hue=n(Ta,"P",{});var H2t=s(Hue);par=r(H2t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),H2t.forEach(t),_ar=i(Ta),Ha=n(Ta,"P",{});var sA=s(Ha);uar=r(sA,"The model class to instantiate is selected based on the "),Uue=n(sA,"CODE",{});var U2t=s(Uue);bar=r(U2t,"model_type"),U2t.forEach(t),Far=r(sA,` property of the config object (either
passed as an argument or loaded from `),Jue=n(sA,"CODE",{});var J2t=s(Jue);Tar=r(J2t,"pretrained_model_name_or_path"),J2t.forEach(t),Mar=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(sA,"CODE",{});var Y2t=s(Yue);Ear=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),Car=r(sA,":"),sA.forEach(t),war=i(Ta),Kue=n(Ta,"UL",{});var K2t=s(Kue);wT=n(K2t,"LI",{});var fke=s(wT);Zue=n(fke,"STRONG",{});var Z2t=s(Zue);Aar=r(Z2t,"detr"),Z2t.forEach(t),yar=r(fke," \u2014 "),Tz=n(fke,"A",{href:!0});var e1t=s(Tz);Lar=r(e1t,"DetrForSegmentation"),e1t.forEach(t),xar=r(fke," (DETR model)"),fke.forEach(t),K2t.forEach(t),$ar=i(Ta),AT=n(Ta,"P",{});var mke=s(AT);kar=r(mke,"The model is set in evaluation mode by default using "),e2e=n(mke,"CODE",{});var o1t=s(e2e);Sar=r(o1t,"model.eval()"),o1t.forEach(t),Rar=r(mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o2e=n(mke,"CODE",{});var r1t=s(o2e);Bar=r(r1t,"model.train()"),r1t.forEach(t),mke.forEach(t),Par=i(Ta),T(yT.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),aNe=i(f),Bd=n(f,"H2",{class:!0});var cDe=s(Bd);LT=n(cDe,"A",{id:!0,class:!0,href:!0});var t1t=s(LT);r2e=n(t1t,"SPAN",{});var a1t=s(r2e);T(DL.$$.fragment,a1t),a1t.forEach(t),t1t.forEach(t),Iar=i(cDe),t2e=n(cDe,"SPAN",{});var n1t=s(t2e);qar=r(n1t,"AutoModelForSemanticSegmentation"),n1t.forEach(t),cDe.forEach(t),nNe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(GL.$$.fragment,cl),Nar=i(cl),Pd=n(cl,"P",{});var SZ=s(Pd);jar=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Mz=n(SZ,"A",{href:!0});var s1t=s(Mz);Dar=r(s1t,"from_pretrained()"),s1t.forEach(t),Gar=r(SZ," class method or the "),Ez=n(SZ,"A",{href:!0});var l1t=s(Ez);Oar=r(l1t,"from_config()"),l1t.forEach(t),Var=r(SZ,` class
method.`),SZ.forEach(t),Xar=i(cl),OL=n(cl,"P",{});var fDe=s(OL);zar=r(fDe,"This class cannot be instantiated directly using "),a2e=n(fDe,"CODE",{});var i1t=s(a2e);War=r(i1t,"__init__()"),i1t.forEach(t),Qar=r(fDe," (throws an error)."),fDe.forEach(t),Har=i(cl),wt=n(cl,"DIV",{class:!0});var lA=s(wt);T(VL.$$.fragment,lA),Uar=i(lA),n2e=n(lA,"P",{});var d1t=s(n2e);Jar=r(d1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),d1t.forEach(t),Yar=i(lA),Id=n(lA,"P",{});var RZ=s(Id);Kar=r(RZ,`Note:
Loading a model from its configuration file does `),s2e=n(RZ,"STRONG",{});var c1t=s(s2e);Zar=r(c1t,"not"),c1t.forEach(t),enr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(RZ,"A",{href:!0});var f1t=s(Cz);onr=r(f1t,"from_pretrained()"),f1t.forEach(t),rnr=r(RZ," to load the model weights."),RZ.forEach(t),tnr=i(lA),T(xT.$$.fragment,lA),lA.forEach(t),anr=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(XL.$$.fragment,Ma),nnr=i(Ma),l2e=n(Ma,"P",{});var m1t=s(l2e);snr=r(m1t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),m1t.forEach(t),lnr=i(Ma),Ua=n(Ma,"P",{});var iA=s(Ua);inr=r(iA,"The model class to instantiate is selected based on the "),i2e=n(iA,"CODE",{});var g1t=s(i2e);dnr=r(g1t,"model_type"),g1t.forEach(t),cnr=r(iA,` property of the config object (either
passed as an argument or loaded from `),d2e=n(iA,"CODE",{});var h1t=s(d2e);fnr=r(h1t,"pretrained_model_name_or_path"),h1t.forEach(t),mnr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n(iA,"CODE",{});var p1t=s(c2e);gnr=r(p1t,"pretrained_model_name_or_path"),p1t.forEach(t),hnr=r(iA,":"),iA.forEach(t),pnr=i(Ma),Ja=n(Ma,"UL",{});var dA=s(Ja);$T=n(dA,"LI",{});var gke=s($T);f2e=n(gke,"STRONG",{});var _1t=s(f2e);_nr=r(_1t,"beit"),_1t.forEach(t),unr=r(gke," \u2014 "),wz=n(gke,"A",{href:!0});var u1t=s(wz);bnr=r(u1t,"BeitForSemanticSegmentation"),u1t.forEach(t),vnr=r(gke," (BEiT model)"),gke.forEach(t),Fnr=i(dA),kT=n(dA,"LI",{});var hke=s(kT);m2e=n(hke,"STRONG",{});var b1t=s(m2e);Tnr=r(b1t,"data2vec-vision"),b1t.forEach(t),Mnr=r(hke," \u2014 "),Az=n(hke,"A",{href:!0});var v1t=s(Az);Enr=r(v1t,"Data2VecVisionForSemanticSegmentation"),v1t.forEach(t),Cnr=r(hke," (Data2VecVision model)"),hke.forEach(t),wnr=i(dA),ST=n(dA,"LI",{});var pke=s(ST);g2e=n(pke,"STRONG",{});var F1t=s(g2e);Anr=r(F1t,"dpt"),F1t.forEach(t),ynr=r(pke," \u2014 "),yz=n(pke,"A",{href:!0});var T1t=s(yz);Lnr=r(T1t,"DPTForSemanticSegmentation"),T1t.forEach(t),xnr=r(pke," (DPT model)"),pke.forEach(t),$nr=i(dA),RT=n(dA,"LI",{});var _ke=s(RT);h2e=n(_ke,"STRONG",{});var M1t=s(h2e);knr=r(M1t,"segformer"),M1t.forEach(t),Snr=r(_ke," \u2014 "),Lz=n(_ke,"A",{href:!0});var E1t=s(Lz);Rnr=r(E1t,"SegformerForSemanticSegmentation"),E1t.forEach(t),Bnr=r(_ke," (SegFormer model)"),_ke.forEach(t),dA.forEach(t),Pnr=i(Ma),BT=n(Ma,"P",{});var uke=s(BT);Inr=r(uke,"The model is set in evaluation mode by default using "),p2e=n(uke,"CODE",{});var C1t=s(p2e);qnr=r(C1t,"model.eval()"),C1t.forEach(t),Nnr=r(uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_2e=n(uke,"CODE",{});var w1t=s(_2e);jnr=r(w1t,"model.train()"),w1t.forEach(t),uke.forEach(t),Dnr=i(Ma),T(PT.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),sNe=i(f),qd=n(f,"H2",{class:!0});var mDe=s(qd);IT=n(mDe,"A",{id:!0,class:!0,href:!0});var A1t=s(IT);u2e=n(A1t,"SPAN",{});var y1t=s(u2e);T(zL.$$.fragment,y1t),y1t.forEach(t),A1t.forEach(t),Gnr=i(mDe),b2e=n(mDe,"SPAN",{});var L1t=s(b2e);Onr=r(L1t,"AutoModelForInstanceSegmentation"),L1t.forEach(t),mDe.forEach(t),lNe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(WL.$$.fragment,fl),Vnr=i(fl),Nd=n(fl,"P",{});var BZ=s(Nd);Xnr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),xz=n(BZ,"A",{href:!0});var x1t=s(xz);znr=r(x1t,"from_pretrained()"),x1t.forEach(t),Wnr=r(BZ," class method or the "),$z=n(BZ,"A",{href:!0});var $1t=s($z);Qnr=r($1t,"from_config()"),$1t.forEach(t),Hnr=r(BZ,` class
method.`),BZ.forEach(t),Unr=i(fl),QL=n(fl,"P",{});var gDe=s(QL);Jnr=r(gDe,"This class cannot be instantiated directly using "),v2e=n(gDe,"CODE",{});var k1t=s(v2e);Ynr=r(k1t,"__init__()"),k1t.forEach(t),Knr=r(gDe," (throws an error)."),gDe.forEach(t),Znr=i(fl),At=n(fl,"DIV",{class:!0});var cA=s(At);T(HL.$$.fragment,cA),esr=i(cA),F2e=n(cA,"P",{});var S1t=s(F2e);osr=r(S1t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),S1t.forEach(t),rsr=i(cA),jd=n(cA,"P",{});var PZ=s(jd);tsr=r(PZ,`Note:
Loading a model from its configuration file does `),T2e=n(PZ,"STRONG",{});var R1t=s(T2e);asr=r(R1t,"not"),R1t.forEach(t),nsr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(PZ,"A",{href:!0});var B1t=s(kz);ssr=r(B1t,"from_pretrained()"),B1t.forEach(t),lsr=r(PZ," to load the model weights."),PZ.forEach(t),isr=i(cA),T(qT.$$.fragment,cA),cA.forEach(t),dsr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(UL.$$.fragment,Ea),csr=i(Ea),M2e=n(Ea,"P",{});var P1t=s(M2e);fsr=r(P1t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),P1t.forEach(t),msr=i(Ea),Ya=n(Ea,"P",{});var fA=s(Ya);gsr=r(fA,"The model class to instantiate is selected based on the "),E2e=n(fA,"CODE",{});var I1t=s(E2e);hsr=r(I1t,"model_type"),I1t.forEach(t),psr=r(fA,` property of the config object (either
passed as an argument or loaded from `),C2e=n(fA,"CODE",{});var q1t=s(C2e);_sr=r(q1t,"pretrained_model_name_or_path"),q1t.forEach(t),usr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=n(fA,"CODE",{});var N1t=s(w2e);bsr=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),vsr=r(fA,":"),fA.forEach(t),Fsr=i(Ea),A2e=n(Ea,"UL",{});var j1t=s(A2e);NT=n(j1t,"LI",{});var bke=s(NT);y2e=n(bke,"STRONG",{});var D1t=s(y2e);Tsr=r(D1t,"maskformer"),D1t.forEach(t),Msr=r(bke," \u2014 "),Sz=n(bke,"A",{href:!0});var G1t=s(Sz);Esr=r(G1t,"MaskFormerForInstanceSegmentation"),G1t.forEach(t),Csr=r(bke," (MaskFormer model)"),bke.forEach(t),j1t.forEach(t),wsr=i(Ea),jT=n(Ea,"P",{});var vke=s(jT);Asr=r(vke,"The model is set in evaluation mode by default using "),L2e=n(vke,"CODE",{});var O1t=s(L2e);ysr=r(O1t,"model.eval()"),O1t.forEach(t),Lsr=r(vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x2e=n(vke,"CODE",{});var V1t=s(x2e);xsr=r(V1t,"model.train()"),V1t.forEach(t),vke.forEach(t),$sr=i(Ea),T(DT.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),iNe=i(f),Dd=n(f,"H2",{class:!0});var hDe=s(Dd);GT=n(hDe,"A",{id:!0,class:!0,href:!0});var X1t=s(GT);$2e=n(X1t,"SPAN",{});var z1t=s($2e);T(JL.$$.fragment,z1t),z1t.forEach(t),X1t.forEach(t),ksr=i(hDe),k2e=n(hDe,"SPAN",{});var W1t=s(k2e);Ssr=r(W1t,"TFAutoModel"),W1t.forEach(t),hDe.forEach(t),dNe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(YL.$$.fragment,ml),Rsr=i(ml),Gd=n(ml,"P",{});var IZ=s(Gd);Bsr=r(IZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Rz=n(IZ,"A",{href:!0});var Q1t=s(Rz);Psr=r(Q1t,"from_pretrained()"),Q1t.forEach(t),Isr=r(IZ," class method or the "),Bz=n(IZ,"A",{href:!0});var H1t=s(Bz);qsr=r(H1t,"from_config()"),H1t.forEach(t),Nsr=r(IZ,` class
method.`),IZ.forEach(t),jsr=i(ml),KL=n(ml,"P",{});var pDe=s(KL);Dsr=r(pDe,"This class cannot be instantiated directly using "),S2e=n(pDe,"CODE",{});var U1t=s(S2e);Gsr=r(U1t,"__init__()"),U1t.forEach(t),Osr=r(pDe," (throws an error)."),pDe.forEach(t),Vsr=i(ml),yt=n(ml,"DIV",{class:!0});var mA=s(yt);T(ZL.$$.fragment,mA),Xsr=i(mA),R2e=n(mA,"P",{});var J1t=s(R2e);zsr=r(J1t,"Instantiates one of the base model classes of the library from a configuration."),J1t.forEach(t),Wsr=i(mA),Od=n(mA,"P",{});var qZ=s(Od);Qsr=r(qZ,`Note:
Loading a model from its configuration file does `),B2e=n(qZ,"STRONG",{});var Y1t=s(B2e);Hsr=r(Y1t,"not"),Y1t.forEach(t),Usr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(qZ,"A",{href:!0});var K1t=s(Pz);Jsr=r(K1t,"from_pretrained()"),K1t.forEach(t),Ysr=r(qZ," to load the model weights."),qZ.forEach(t),Ksr=i(mA),T(OT.$$.fragment,mA),mA.forEach(t),Zsr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(e8.$$.fragment,gl),elr=i(gl),P2e=n(gl,"P",{});var Z1t=s(P2e);olr=r(Z1t,"Instantiate one of the base model classes of the library from a pretrained model."),Z1t.forEach(t),rlr=i(gl),Ka=n(gl,"P",{});var gA=s(Ka);tlr=r(gA,"The model class to instantiate is selected based on the "),I2e=n(gA,"CODE",{});var ebt=s(I2e);alr=r(ebt,"model_type"),ebt.forEach(t),nlr=r(gA,` property of the config object (either
passed as an argument or loaded from `),q2e=n(gA,"CODE",{});var obt=s(q2e);slr=r(obt,"pretrained_model_name_or_path"),obt.forEach(t),llr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(gA,"CODE",{});var rbt=s(N2e);ilr=r(rbt,"pretrained_model_name_or_path"),rbt.forEach(t),dlr=r(gA,":"),gA.forEach(t),clr=i(gl),N=n(gl,"UL",{});var D=s(N);VT=n(D,"LI",{});var Fke=s(VT);j2e=n(Fke,"STRONG",{});var tbt=s(j2e);flr=r(tbt,"albert"),tbt.forEach(t),mlr=r(Fke," \u2014 "),Iz=n(Fke,"A",{href:!0});var abt=s(Iz);glr=r(abt,"TFAlbertModel"),abt.forEach(t),hlr=r(Fke," (ALBERT model)"),Fke.forEach(t),plr=i(D),XT=n(D,"LI",{});var Tke=s(XT);D2e=n(Tke,"STRONG",{});var nbt=s(D2e);_lr=r(nbt,"bart"),nbt.forEach(t),ulr=r(Tke," \u2014 "),qz=n(Tke,"A",{href:!0});var sbt=s(qz);blr=r(sbt,"TFBartModel"),sbt.forEach(t),vlr=r(Tke," (BART model)"),Tke.forEach(t),Flr=i(D),zT=n(D,"LI",{});var Mke=s(zT);G2e=n(Mke,"STRONG",{});var lbt=s(G2e);Tlr=r(lbt,"bert"),lbt.forEach(t),Mlr=r(Mke," \u2014 "),Nz=n(Mke,"A",{href:!0});var ibt=s(Nz);Elr=r(ibt,"TFBertModel"),ibt.forEach(t),Clr=r(Mke," (BERT model)"),Mke.forEach(t),wlr=i(D),WT=n(D,"LI",{});var Eke=s(WT);O2e=n(Eke,"STRONG",{});var dbt=s(O2e);Alr=r(dbt,"blenderbot"),dbt.forEach(t),ylr=r(Eke," \u2014 "),jz=n(Eke,"A",{href:!0});var cbt=s(jz);Llr=r(cbt,"TFBlenderbotModel"),cbt.forEach(t),xlr=r(Eke," (Blenderbot model)"),Eke.forEach(t),$lr=i(D),QT=n(D,"LI",{});var Cke=s(QT);V2e=n(Cke,"STRONG",{});var fbt=s(V2e);klr=r(fbt,"blenderbot-small"),fbt.forEach(t),Slr=r(Cke," \u2014 "),Dz=n(Cke,"A",{href:!0});var mbt=s(Dz);Rlr=r(mbt,"TFBlenderbotSmallModel"),mbt.forEach(t),Blr=r(Cke," (BlenderbotSmall model)"),Cke.forEach(t),Plr=i(D),HT=n(D,"LI",{});var wke=s(HT);X2e=n(wke,"STRONG",{});var gbt=s(X2e);Ilr=r(gbt,"camembert"),gbt.forEach(t),qlr=r(wke," \u2014 "),Gz=n(wke,"A",{href:!0});var hbt=s(Gz);Nlr=r(hbt,"TFCamembertModel"),hbt.forEach(t),jlr=r(wke," (CamemBERT model)"),wke.forEach(t),Dlr=i(D),UT=n(D,"LI",{});var Ake=s(UT);z2e=n(Ake,"STRONG",{});var pbt=s(z2e);Glr=r(pbt,"clip"),pbt.forEach(t),Olr=r(Ake," \u2014 "),Oz=n(Ake,"A",{href:!0});var _bt=s(Oz);Vlr=r(_bt,"TFCLIPModel"),_bt.forEach(t),Xlr=r(Ake," (CLIP model)"),Ake.forEach(t),zlr=i(D),JT=n(D,"LI",{});var yke=s(JT);W2e=n(yke,"STRONG",{});var ubt=s(W2e);Wlr=r(ubt,"convbert"),ubt.forEach(t),Qlr=r(yke," \u2014 "),Vz=n(yke,"A",{href:!0});var bbt=s(Vz);Hlr=r(bbt,"TFConvBertModel"),bbt.forEach(t),Ulr=r(yke," (ConvBERT model)"),yke.forEach(t),Jlr=i(D),YT=n(D,"LI",{});var Lke=s(YT);Q2e=n(Lke,"STRONG",{});var vbt=s(Q2e);Ylr=r(vbt,"convnext"),vbt.forEach(t),Klr=r(Lke," \u2014 "),Xz=n(Lke,"A",{href:!0});var Fbt=s(Xz);Zlr=r(Fbt,"TFConvNextModel"),Fbt.forEach(t),eir=r(Lke," (ConvNext model)"),Lke.forEach(t),oir=i(D),KT=n(D,"LI",{});var xke=s(KT);H2e=n(xke,"STRONG",{});var Tbt=s(H2e);rir=r(Tbt,"ctrl"),Tbt.forEach(t),tir=r(xke," \u2014 "),zz=n(xke,"A",{href:!0});var Mbt=s(zz);air=r(Mbt,"TFCTRLModel"),Mbt.forEach(t),nir=r(xke," (CTRL model)"),xke.forEach(t),sir=i(D),ZT=n(D,"LI",{});var $ke=s(ZT);U2e=n($ke,"STRONG",{});var Ebt=s(U2e);lir=r(Ebt,"data2vec-vision"),Ebt.forEach(t),iir=r($ke," \u2014 "),Wz=n($ke,"A",{href:!0});var Cbt=s(Wz);dir=r(Cbt,"TFData2VecVisionModel"),Cbt.forEach(t),cir=r($ke," (Data2VecVision model)"),$ke.forEach(t),fir=i(D),e7=n(D,"LI",{});var kke=s(e7);J2e=n(kke,"STRONG",{});var wbt=s(J2e);mir=r(wbt,"deberta"),wbt.forEach(t),gir=r(kke," \u2014 "),Qz=n(kke,"A",{href:!0});var Abt=s(Qz);hir=r(Abt,"TFDebertaModel"),Abt.forEach(t),pir=r(kke," (DeBERTa model)"),kke.forEach(t),_ir=i(D),o7=n(D,"LI",{});var Ske=s(o7);Y2e=n(Ske,"STRONG",{});var ybt=s(Y2e);uir=r(ybt,"deberta-v2"),ybt.forEach(t),bir=r(Ske," \u2014 "),Hz=n(Ske,"A",{href:!0});var Lbt=s(Hz);vir=r(Lbt,"TFDebertaV2Model"),Lbt.forEach(t),Fir=r(Ske," (DeBERTa-v2 model)"),Ske.forEach(t),Tir=i(D),r7=n(D,"LI",{});var Rke=s(r7);K2e=n(Rke,"STRONG",{});var xbt=s(K2e);Mir=r(xbt,"distilbert"),xbt.forEach(t),Eir=r(Rke," \u2014 "),Uz=n(Rke,"A",{href:!0});var $bt=s(Uz);Cir=r($bt,"TFDistilBertModel"),$bt.forEach(t),wir=r(Rke," (DistilBERT model)"),Rke.forEach(t),Air=i(D),t7=n(D,"LI",{});var Bke=s(t7);Z2e=n(Bke,"STRONG",{});var kbt=s(Z2e);yir=r(kbt,"dpr"),kbt.forEach(t),Lir=r(Bke," \u2014 "),Jz=n(Bke,"A",{href:!0});var Sbt=s(Jz);xir=r(Sbt,"TFDPRQuestionEncoder"),Sbt.forEach(t),$ir=r(Bke," (DPR model)"),Bke.forEach(t),kir=i(D),a7=n(D,"LI",{});var Pke=s(a7);e1e=n(Pke,"STRONG",{});var Rbt=s(e1e);Sir=r(Rbt,"electra"),Rbt.forEach(t),Rir=r(Pke," \u2014 "),Yz=n(Pke,"A",{href:!0});var Bbt=s(Yz);Bir=r(Bbt,"TFElectraModel"),Bbt.forEach(t),Pir=r(Pke," (ELECTRA model)"),Pke.forEach(t),Iir=i(D),n7=n(D,"LI",{});var Ike=s(n7);o1e=n(Ike,"STRONG",{});var Pbt=s(o1e);qir=r(Pbt,"flaubert"),Pbt.forEach(t),Nir=r(Ike," \u2014 "),Kz=n(Ike,"A",{href:!0});var Ibt=s(Kz);jir=r(Ibt,"TFFlaubertModel"),Ibt.forEach(t),Dir=r(Ike," (FlauBERT model)"),Ike.forEach(t),Gir=i(D),Ps=n(D,"LI",{});var k$=s(Ps);r1e=n(k$,"STRONG",{});var qbt=s(r1e);Oir=r(qbt,"funnel"),qbt.forEach(t),Vir=r(k$," \u2014 "),Zz=n(k$,"A",{href:!0});var Nbt=s(Zz);Xir=r(Nbt,"TFFunnelModel"),Nbt.forEach(t),zir=r(k$," or "),eW=n(k$,"A",{href:!0});var jbt=s(eW);Wir=r(jbt,"TFFunnelBaseModel"),jbt.forEach(t),Qir=r(k$," (Funnel Transformer model)"),k$.forEach(t),Hir=i(D),s7=n(D,"LI",{});var qke=s(s7);t1e=n(qke,"STRONG",{});var Dbt=s(t1e);Uir=r(Dbt,"gpt2"),Dbt.forEach(t),Jir=r(qke," \u2014 "),oW=n(qke,"A",{href:!0});var Gbt=s(oW);Yir=r(Gbt,"TFGPT2Model"),Gbt.forEach(t),Kir=r(qke," (OpenAI GPT-2 model)"),qke.forEach(t),Zir=i(D),l7=n(D,"LI",{});var Nke=s(l7);a1e=n(Nke,"STRONG",{});var Obt=s(a1e);edr=r(Obt,"gptj"),Obt.forEach(t),odr=r(Nke," \u2014 "),rW=n(Nke,"A",{href:!0});var Vbt=s(rW);rdr=r(Vbt,"TFGPTJModel"),Vbt.forEach(t),tdr=r(Nke," (GPT-J model)"),Nke.forEach(t),adr=i(D),i7=n(D,"LI",{});var jke=s(i7);n1e=n(jke,"STRONG",{});var Xbt=s(n1e);ndr=r(Xbt,"hubert"),Xbt.forEach(t),sdr=r(jke," \u2014 "),tW=n(jke,"A",{href:!0});var zbt=s(tW);ldr=r(zbt,"TFHubertModel"),zbt.forEach(t),idr=r(jke," (Hubert model)"),jke.forEach(t),ddr=i(D),d7=n(D,"LI",{});var Dke=s(d7);s1e=n(Dke,"STRONG",{});var Wbt=s(s1e);cdr=r(Wbt,"layoutlm"),Wbt.forEach(t),fdr=r(Dke," \u2014 "),aW=n(Dke,"A",{href:!0});var Qbt=s(aW);mdr=r(Qbt,"TFLayoutLMModel"),Qbt.forEach(t),gdr=r(Dke," (LayoutLM model)"),Dke.forEach(t),hdr=i(D),c7=n(D,"LI",{});var Gke=s(c7);l1e=n(Gke,"STRONG",{});var Hbt=s(l1e);pdr=r(Hbt,"led"),Hbt.forEach(t),_dr=r(Gke," \u2014 "),nW=n(Gke,"A",{href:!0});var Ubt=s(nW);udr=r(Ubt,"TFLEDModel"),Ubt.forEach(t),bdr=r(Gke," (LED model)"),Gke.forEach(t),vdr=i(D),f7=n(D,"LI",{});var Oke=s(f7);i1e=n(Oke,"STRONG",{});var Jbt=s(i1e);Fdr=r(Jbt,"longformer"),Jbt.forEach(t),Tdr=r(Oke," \u2014 "),sW=n(Oke,"A",{href:!0});var Ybt=s(sW);Mdr=r(Ybt,"TFLongformerModel"),Ybt.forEach(t),Edr=r(Oke," (Longformer model)"),Oke.forEach(t),Cdr=i(D),m7=n(D,"LI",{});var Vke=s(m7);d1e=n(Vke,"STRONG",{});var Kbt=s(d1e);wdr=r(Kbt,"lxmert"),Kbt.forEach(t),Adr=r(Vke," \u2014 "),lW=n(Vke,"A",{href:!0});var Zbt=s(lW);ydr=r(Zbt,"TFLxmertModel"),Zbt.forEach(t),Ldr=r(Vke," (LXMERT model)"),Vke.forEach(t),xdr=i(D),g7=n(D,"LI",{});var Xke=s(g7);c1e=n(Xke,"STRONG",{});var evt=s(c1e);$dr=r(evt,"marian"),evt.forEach(t),kdr=r(Xke," \u2014 "),iW=n(Xke,"A",{href:!0});var ovt=s(iW);Sdr=r(ovt,"TFMarianModel"),ovt.forEach(t),Rdr=r(Xke," (Marian model)"),Xke.forEach(t),Bdr=i(D),h7=n(D,"LI",{});var zke=s(h7);f1e=n(zke,"STRONG",{});var rvt=s(f1e);Pdr=r(rvt,"mbart"),rvt.forEach(t),Idr=r(zke," \u2014 "),dW=n(zke,"A",{href:!0});var tvt=s(dW);qdr=r(tvt,"TFMBartModel"),tvt.forEach(t),Ndr=r(zke," (mBART model)"),zke.forEach(t),jdr=i(D),p7=n(D,"LI",{});var Wke=s(p7);m1e=n(Wke,"STRONG",{});var avt=s(m1e);Ddr=r(avt,"mobilebert"),avt.forEach(t),Gdr=r(Wke," \u2014 "),cW=n(Wke,"A",{href:!0});var nvt=s(cW);Odr=r(nvt,"TFMobileBertModel"),nvt.forEach(t),Vdr=r(Wke," (MobileBERT model)"),Wke.forEach(t),Xdr=i(D),_7=n(D,"LI",{});var Qke=s(_7);g1e=n(Qke,"STRONG",{});var svt=s(g1e);zdr=r(svt,"mpnet"),svt.forEach(t),Wdr=r(Qke," \u2014 "),fW=n(Qke,"A",{href:!0});var lvt=s(fW);Qdr=r(lvt,"TFMPNetModel"),lvt.forEach(t),Hdr=r(Qke," (MPNet model)"),Qke.forEach(t),Udr=i(D),u7=n(D,"LI",{});var Hke=s(u7);h1e=n(Hke,"STRONG",{});var ivt=s(h1e);Jdr=r(ivt,"mt5"),ivt.forEach(t),Ydr=r(Hke," \u2014 "),mW=n(Hke,"A",{href:!0});var dvt=s(mW);Kdr=r(dvt,"TFMT5Model"),dvt.forEach(t),Zdr=r(Hke," (mT5 model)"),Hke.forEach(t),ecr=i(D),b7=n(D,"LI",{});var Uke=s(b7);p1e=n(Uke,"STRONG",{});var cvt=s(p1e);ocr=r(cvt,"openai-gpt"),cvt.forEach(t),rcr=r(Uke," \u2014 "),gW=n(Uke,"A",{href:!0});var fvt=s(gW);tcr=r(fvt,"TFOpenAIGPTModel"),fvt.forEach(t),acr=r(Uke," (OpenAI GPT model)"),Uke.forEach(t),ncr=i(D),v7=n(D,"LI",{});var Jke=s(v7);_1e=n(Jke,"STRONG",{});var mvt=s(_1e);scr=r(mvt,"pegasus"),mvt.forEach(t),lcr=r(Jke," \u2014 "),hW=n(Jke,"A",{href:!0});var gvt=s(hW);icr=r(gvt,"TFPegasusModel"),gvt.forEach(t),dcr=r(Jke," (Pegasus model)"),Jke.forEach(t),ccr=i(D),F7=n(D,"LI",{});var Yke=s(F7);u1e=n(Yke,"STRONG",{});var hvt=s(u1e);fcr=r(hvt,"rembert"),hvt.forEach(t),mcr=r(Yke," \u2014 "),pW=n(Yke,"A",{href:!0});var pvt=s(pW);gcr=r(pvt,"TFRemBertModel"),pvt.forEach(t),hcr=r(Yke," (RemBERT model)"),Yke.forEach(t),pcr=i(D),T7=n(D,"LI",{});var Kke=s(T7);b1e=n(Kke,"STRONG",{});var _vt=s(b1e);_cr=r(_vt,"roberta"),_vt.forEach(t),ucr=r(Kke," \u2014 "),_W=n(Kke,"A",{href:!0});var uvt=s(_W);bcr=r(uvt,"TFRobertaModel"),uvt.forEach(t),vcr=r(Kke," (RoBERTa model)"),Kke.forEach(t),Fcr=i(D),M7=n(D,"LI",{});var Zke=s(M7);v1e=n(Zke,"STRONG",{});var bvt=s(v1e);Tcr=r(bvt,"roformer"),bvt.forEach(t),Mcr=r(Zke," \u2014 "),uW=n(Zke,"A",{href:!0});var vvt=s(uW);Ecr=r(vvt,"TFRoFormerModel"),vvt.forEach(t),Ccr=r(Zke," (RoFormer model)"),Zke.forEach(t),wcr=i(D),E7=n(D,"LI",{});var eSe=s(E7);F1e=n(eSe,"STRONG",{});var Fvt=s(F1e);Acr=r(Fvt,"speech_to_text"),Fvt.forEach(t),ycr=r(eSe," \u2014 "),bW=n(eSe,"A",{href:!0});var Tvt=s(bW);Lcr=r(Tvt,"TFSpeech2TextModel"),Tvt.forEach(t),xcr=r(eSe," (Speech2Text model)"),eSe.forEach(t),$cr=i(D),C7=n(D,"LI",{});var oSe=s(C7);T1e=n(oSe,"STRONG",{});var Mvt=s(T1e);kcr=r(Mvt,"swin"),Mvt.forEach(t),Scr=r(oSe," \u2014 "),vW=n(oSe,"A",{href:!0});var Evt=s(vW);Rcr=r(Evt,"TFSwinModel"),Evt.forEach(t),Bcr=r(oSe," (Swin model)"),oSe.forEach(t),Pcr=i(D),w7=n(D,"LI",{});var rSe=s(w7);M1e=n(rSe,"STRONG",{});var Cvt=s(M1e);Icr=r(Cvt,"t5"),Cvt.forEach(t),qcr=r(rSe," \u2014 "),FW=n(rSe,"A",{href:!0});var wvt=s(FW);Ncr=r(wvt,"TFT5Model"),wvt.forEach(t),jcr=r(rSe," (T5 model)"),rSe.forEach(t),Dcr=i(D),A7=n(D,"LI",{});var tSe=s(A7);E1e=n(tSe,"STRONG",{});var Avt=s(E1e);Gcr=r(Avt,"tapas"),Avt.forEach(t),Ocr=r(tSe," \u2014 "),TW=n(tSe,"A",{href:!0});var yvt=s(TW);Vcr=r(yvt,"TFTapasModel"),yvt.forEach(t),Xcr=r(tSe," (TAPAS model)"),tSe.forEach(t),zcr=i(D),y7=n(D,"LI",{});var aSe=s(y7);C1e=n(aSe,"STRONG",{});var Lvt=s(C1e);Wcr=r(Lvt,"transfo-xl"),Lvt.forEach(t),Qcr=r(aSe," \u2014 "),MW=n(aSe,"A",{href:!0});var xvt=s(MW);Hcr=r(xvt,"TFTransfoXLModel"),xvt.forEach(t),Ucr=r(aSe," (Transformer-XL model)"),aSe.forEach(t),Jcr=i(D),L7=n(D,"LI",{});var nSe=s(L7);w1e=n(nSe,"STRONG",{});var $vt=s(w1e);Ycr=r($vt,"vit"),$vt.forEach(t),Kcr=r(nSe," \u2014 "),EW=n(nSe,"A",{href:!0});var kvt=s(EW);Zcr=r(kvt,"TFViTModel"),kvt.forEach(t),efr=r(nSe," (ViT model)"),nSe.forEach(t),ofr=i(D),x7=n(D,"LI",{});var sSe=s(x7);A1e=n(sSe,"STRONG",{});var Svt=s(A1e);rfr=r(Svt,"vit_mae"),Svt.forEach(t),tfr=r(sSe," \u2014 "),CW=n(sSe,"A",{href:!0});var Rvt=s(CW);afr=r(Rvt,"TFViTMAEModel"),Rvt.forEach(t),nfr=r(sSe," (ViTMAE model)"),sSe.forEach(t),sfr=i(D),$7=n(D,"LI",{});var lSe=s($7);y1e=n(lSe,"STRONG",{});var Bvt=s(y1e);lfr=r(Bvt,"wav2vec2"),Bvt.forEach(t),ifr=r(lSe," \u2014 "),wW=n(lSe,"A",{href:!0});var Pvt=s(wW);dfr=r(Pvt,"TFWav2Vec2Model"),Pvt.forEach(t),cfr=r(lSe," (Wav2Vec2 model)"),lSe.forEach(t),ffr=i(D),k7=n(D,"LI",{});var iSe=s(k7);L1e=n(iSe,"STRONG",{});var Ivt=s(L1e);mfr=r(Ivt,"xlm"),Ivt.forEach(t),gfr=r(iSe," \u2014 "),AW=n(iSe,"A",{href:!0});var qvt=s(AW);hfr=r(qvt,"TFXLMModel"),qvt.forEach(t),pfr=r(iSe," (XLM model)"),iSe.forEach(t),_fr=i(D),S7=n(D,"LI",{});var dSe=s(S7);x1e=n(dSe,"STRONG",{});var Nvt=s(x1e);ufr=r(Nvt,"xlm-roberta"),Nvt.forEach(t),bfr=r(dSe," \u2014 "),yW=n(dSe,"A",{href:!0});var jvt=s(yW);vfr=r(jvt,"TFXLMRobertaModel"),jvt.forEach(t),Ffr=r(dSe," (XLM-RoBERTa model)"),dSe.forEach(t),Tfr=i(D),R7=n(D,"LI",{});var cSe=s(R7);$1e=n(cSe,"STRONG",{});var Dvt=s($1e);Mfr=r(Dvt,"xlnet"),Dvt.forEach(t),Efr=r(cSe," \u2014 "),LW=n(cSe,"A",{href:!0});var Gvt=s(LW);Cfr=r(Gvt,"TFXLNetModel"),Gvt.forEach(t),wfr=r(cSe," (XLNet model)"),cSe.forEach(t),D.forEach(t),Afr=i(gl),T(B7.$$.fragment,gl),gl.forEach(t),ml.forEach(t),cNe=i(f),Vd=n(f,"H2",{class:!0});var _De=s(Vd);P7=n(_De,"A",{id:!0,class:!0,href:!0});var Ovt=s(P7);k1e=n(Ovt,"SPAN",{});var Vvt=s(k1e);T(o8.$$.fragment,Vvt),Vvt.forEach(t),Ovt.forEach(t),yfr=i(_De),S1e=n(_De,"SPAN",{});var Xvt=s(S1e);Lfr=r(Xvt,"TFAutoModelForPreTraining"),Xvt.forEach(t),_De.forEach(t),fNe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(r8.$$.fragment,hl),xfr=i(hl),Xd=n(hl,"P",{});var NZ=s(Xd);$fr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xW=n(NZ,"A",{href:!0});var zvt=s(xW);kfr=r(zvt,"from_pretrained()"),zvt.forEach(t),Sfr=r(NZ," class method or the "),$W=n(NZ,"A",{href:!0});var Wvt=s($W);Rfr=r(Wvt,"from_config()"),Wvt.forEach(t),Bfr=r(NZ,` class
method.`),NZ.forEach(t),Pfr=i(hl),t8=n(hl,"P",{});var uDe=s(t8);Ifr=r(uDe,"This class cannot be instantiated directly using "),R1e=n(uDe,"CODE",{});var Qvt=s(R1e);qfr=r(Qvt,"__init__()"),Qvt.forEach(t),Nfr=r(uDe," (throws an error)."),uDe.forEach(t),jfr=i(hl),Lt=n(hl,"DIV",{class:!0});var hA=s(Lt);T(a8.$$.fragment,hA),Dfr=i(hA),B1e=n(hA,"P",{});var Hvt=s(B1e);Gfr=r(Hvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hvt.forEach(t),Ofr=i(hA),zd=n(hA,"P",{});var jZ=s(zd);Vfr=r(jZ,`Note:
Loading a model from its configuration file does `),P1e=n(jZ,"STRONG",{});var Uvt=s(P1e);Xfr=r(Uvt,"not"),Uvt.forEach(t),zfr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=n(jZ,"A",{href:!0});var Jvt=s(kW);Wfr=r(Jvt,"from_pretrained()"),Jvt.forEach(t),Qfr=r(jZ," to load the model weights."),jZ.forEach(t),Hfr=i(hA),T(I7.$$.fragment,hA),hA.forEach(t),Ufr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(n8.$$.fragment,pl),Jfr=i(pl),I1e=n(pl,"P",{});var Yvt=s(I1e);Yfr=r(Yvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Yvt.forEach(t),Kfr=i(pl),Za=n(pl,"P",{});var pA=s(Za);Zfr=r(pA,"The model class to instantiate is selected based on the "),q1e=n(pA,"CODE",{});var Kvt=s(q1e);emr=r(Kvt,"model_type"),Kvt.forEach(t),omr=r(pA,` property of the config object (either
passed as an argument or loaded from `),N1e=n(pA,"CODE",{});var Zvt=s(N1e);rmr=r(Zvt,"pretrained_model_name_or_path"),Zvt.forEach(t),tmr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(pA,"CODE",{});var eFt=s(j1e);amr=r(eFt,"pretrained_model_name_or_path"),eFt.forEach(t),nmr=r(pA,":"),pA.forEach(t),smr=i(pl),se=n(pl,"UL",{});var le=s(se);q7=n(le,"LI",{});var fSe=s(q7);D1e=n(fSe,"STRONG",{});var oFt=s(D1e);lmr=r(oFt,"albert"),oFt.forEach(t),imr=r(fSe," \u2014 "),SW=n(fSe,"A",{href:!0});var rFt=s(SW);dmr=r(rFt,"TFAlbertForPreTraining"),rFt.forEach(t),cmr=r(fSe," (ALBERT model)"),fSe.forEach(t),fmr=i(le),N7=n(le,"LI",{});var mSe=s(N7);G1e=n(mSe,"STRONG",{});var tFt=s(G1e);mmr=r(tFt,"bart"),tFt.forEach(t),gmr=r(mSe," \u2014 "),RW=n(mSe,"A",{href:!0});var aFt=s(RW);hmr=r(aFt,"TFBartForConditionalGeneration"),aFt.forEach(t),pmr=r(mSe," (BART model)"),mSe.forEach(t),_mr=i(le),j7=n(le,"LI",{});var gSe=s(j7);O1e=n(gSe,"STRONG",{});var nFt=s(O1e);umr=r(nFt,"bert"),nFt.forEach(t),bmr=r(gSe," \u2014 "),BW=n(gSe,"A",{href:!0});var sFt=s(BW);vmr=r(sFt,"TFBertForPreTraining"),sFt.forEach(t),Fmr=r(gSe," (BERT model)"),gSe.forEach(t),Tmr=i(le),D7=n(le,"LI",{});var hSe=s(D7);V1e=n(hSe,"STRONG",{});var lFt=s(V1e);Mmr=r(lFt,"camembert"),lFt.forEach(t),Emr=r(hSe," \u2014 "),PW=n(hSe,"A",{href:!0});var iFt=s(PW);Cmr=r(iFt,"TFCamembertForMaskedLM"),iFt.forEach(t),wmr=r(hSe," (CamemBERT model)"),hSe.forEach(t),Amr=i(le),G7=n(le,"LI",{});var pSe=s(G7);X1e=n(pSe,"STRONG",{});var dFt=s(X1e);ymr=r(dFt,"ctrl"),dFt.forEach(t),Lmr=r(pSe," \u2014 "),IW=n(pSe,"A",{href:!0});var cFt=s(IW);xmr=r(cFt,"TFCTRLLMHeadModel"),cFt.forEach(t),$mr=r(pSe," (CTRL model)"),pSe.forEach(t),kmr=i(le),O7=n(le,"LI",{});var _Se=s(O7);z1e=n(_Se,"STRONG",{});var fFt=s(z1e);Smr=r(fFt,"distilbert"),fFt.forEach(t),Rmr=r(_Se," \u2014 "),qW=n(_Se,"A",{href:!0});var mFt=s(qW);Bmr=r(mFt,"TFDistilBertForMaskedLM"),mFt.forEach(t),Pmr=r(_Se," (DistilBERT model)"),_Se.forEach(t),Imr=i(le),V7=n(le,"LI",{});var uSe=s(V7);W1e=n(uSe,"STRONG",{});var gFt=s(W1e);qmr=r(gFt,"electra"),gFt.forEach(t),Nmr=r(uSe," \u2014 "),NW=n(uSe,"A",{href:!0});var hFt=s(NW);jmr=r(hFt,"TFElectraForPreTraining"),hFt.forEach(t),Dmr=r(uSe," (ELECTRA model)"),uSe.forEach(t),Gmr=i(le),X7=n(le,"LI",{});var bSe=s(X7);Q1e=n(bSe,"STRONG",{});var pFt=s(Q1e);Omr=r(pFt,"flaubert"),pFt.forEach(t),Vmr=r(bSe," \u2014 "),jW=n(bSe,"A",{href:!0});var _Ft=s(jW);Xmr=r(_Ft,"TFFlaubertWithLMHeadModel"),_Ft.forEach(t),zmr=r(bSe," (FlauBERT model)"),bSe.forEach(t),Wmr=i(le),z7=n(le,"LI",{});var vSe=s(z7);H1e=n(vSe,"STRONG",{});var uFt=s(H1e);Qmr=r(uFt,"funnel"),uFt.forEach(t),Hmr=r(vSe," \u2014 "),DW=n(vSe,"A",{href:!0});var bFt=s(DW);Umr=r(bFt,"TFFunnelForPreTraining"),bFt.forEach(t),Jmr=r(vSe," (Funnel Transformer model)"),vSe.forEach(t),Ymr=i(le),W7=n(le,"LI",{});var FSe=s(W7);U1e=n(FSe,"STRONG",{});var vFt=s(U1e);Kmr=r(vFt,"gpt2"),vFt.forEach(t),Zmr=r(FSe," \u2014 "),GW=n(FSe,"A",{href:!0});var FFt=s(GW);egr=r(FFt,"TFGPT2LMHeadModel"),FFt.forEach(t),ogr=r(FSe," (OpenAI GPT-2 model)"),FSe.forEach(t),rgr=i(le),Q7=n(le,"LI",{});var TSe=s(Q7);J1e=n(TSe,"STRONG",{});var TFt=s(J1e);tgr=r(TFt,"layoutlm"),TFt.forEach(t),agr=r(TSe," \u2014 "),OW=n(TSe,"A",{href:!0});var MFt=s(OW);ngr=r(MFt,"TFLayoutLMForMaskedLM"),MFt.forEach(t),sgr=r(TSe," (LayoutLM model)"),TSe.forEach(t),lgr=i(le),H7=n(le,"LI",{});var MSe=s(H7);Y1e=n(MSe,"STRONG",{});var EFt=s(Y1e);igr=r(EFt,"lxmert"),EFt.forEach(t),dgr=r(MSe," \u2014 "),VW=n(MSe,"A",{href:!0});var CFt=s(VW);cgr=r(CFt,"TFLxmertForPreTraining"),CFt.forEach(t),fgr=r(MSe," (LXMERT model)"),MSe.forEach(t),mgr=i(le),U7=n(le,"LI",{});var ESe=s(U7);K1e=n(ESe,"STRONG",{});var wFt=s(K1e);ggr=r(wFt,"mobilebert"),wFt.forEach(t),hgr=r(ESe," \u2014 "),XW=n(ESe,"A",{href:!0});var AFt=s(XW);pgr=r(AFt,"TFMobileBertForPreTraining"),AFt.forEach(t),_gr=r(ESe," (MobileBERT model)"),ESe.forEach(t),ugr=i(le),J7=n(le,"LI",{});var CSe=s(J7);Z1e=n(CSe,"STRONG",{});var yFt=s(Z1e);bgr=r(yFt,"mpnet"),yFt.forEach(t),vgr=r(CSe," \u2014 "),zW=n(CSe,"A",{href:!0});var LFt=s(zW);Fgr=r(LFt,"TFMPNetForMaskedLM"),LFt.forEach(t),Tgr=r(CSe," (MPNet model)"),CSe.forEach(t),Mgr=i(le),Y7=n(le,"LI",{});var wSe=s(Y7);ebe=n(wSe,"STRONG",{});var xFt=s(ebe);Egr=r(xFt,"openai-gpt"),xFt.forEach(t),Cgr=r(wSe," \u2014 "),WW=n(wSe,"A",{href:!0});var $Ft=s(WW);wgr=r($Ft,"TFOpenAIGPTLMHeadModel"),$Ft.forEach(t),Agr=r(wSe," (OpenAI GPT model)"),wSe.forEach(t),ygr=i(le),K7=n(le,"LI",{});var ASe=s(K7);obe=n(ASe,"STRONG",{});var kFt=s(obe);Lgr=r(kFt,"roberta"),kFt.forEach(t),xgr=r(ASe," \u2014 "),QW=n(ASe,"A",{href:!0});var SFt=s(QW);$gr=r(SFt,"TFRobertaForMaskedLM"),SFt.forEach(t),kgr=r(ASe," (RoBERTa model)"),ASe.forEach(t),Sgr=i(le),Z7=n(le,"LI",{});var ySe=s(Z7);rbe=n(ySe,"STRONG",{});var RFt=s(rbe);Rgr=r(RFt,"t5"),RFt.forEach(t),Bgr=r(ySe," \u2014 "),HW=n(ySe,"A",{href:!0});var BFt=s(HW);Pgr=r(BFt,"TFT5ForConditionalGeneration"),BFt.forEach(t),Igr=r(ySe," (T5 model)"),ySe.forEach(t),qgr=i(le),eM=n(le,"LI",{});var LSe=s(eM);tbe=n(LSe,"STRONG",{});var PFt=s(tbe);Ngr=r(PFt,"tapas"),PFt.forEach(t),jgr=r(LSe," \u2014 "),UW=n(LSe,"A",{href:!0});var IFt=s(UW);Dgr=r(IFt,"TFTapasForMaskedLM"),IFt.forEach(t),Ggr=r(LSe," (TAPAS model)"),LSe.forEach(t),Ogr=i(le),oM=n(le,"LI",{});var xSe=s(oM);abe=n(xSe,"STRONG",{});var qFt=s(abe);Vgr=r(qFt,"transfo-xl"),qFt.forEach(t),Xgr=r(xSe," \u2014 "),JW=n(xSe,"A",{href:!0});var NFt=s(JW);zgr=r(NFt,"TFTransfoXLLMHeadModel"),NFt.forEach(t),Wgr=r(xSe," (Transformer-XL model)"),xSe.forEach(t),Qgr=i(le),rM=n(le,"LI",{});var $Se=s(rM);nbe=n($Se,"STRONG",{});var jFt=s(nbe);Hgr=r(jFt,"vit_mae"),jFt.forEach(t),Ugr=r($Se," \u2014 "),YW=n($Se,"A",{href:!0});var DFt=s(YW);Jgr=r(DFt,"TFViTMAEForPreTraining"),DFt.forEach(t),Ygr=r($Se," (ViTMAE model)"),$Se.forEach(t),Kgr=i(le),tM=n(le,"LI",{});var kSe=s(tM);sbe=n(kSe,"STRONG",{});var GFt=s(sbe);Zgr=r(GFt,"xlm"),GFt.forEach(t),ehr=r(kSe," \u2014 "),KW=n(kSe,"A",{href:!0});var OFt=s(KW);ohr=r(OFt,"TFXLMWithLMHeadModel"),OFt.forEach(t),rhr=r(kSe," (XLM model)"),kSe.forEach(t),thr=i(le),aM=n(le,"LI",{});var SSe=s(aM);lbe=n(SSe,"STRONG",{});var VFt=s(lbe);ahr=r(VFt,"xlm-roberta"),VFt.forEach(t),nhr=r(SSe," \u2014 "),ZW=n(SSe,"A",{href:!0});var XFt=s(ZW);shr=r(XFt,"TFXLMRobertaForMaskedLM"),XFt.forEach(t),lhr=r(SSe," (XLM-RoBERTa model)"),SSe.forEach(t),ihr=i(le),nM=n(le,"LI",{});var RSe=s(nM);ibe=n(RSe,"STRONG",{});var zFt=s(ibe);dhr=r(zFt,"xlnet"),zFt.forEach(t),chr=r(RSe," \u2014 "),eQ=n(RSe,"A",{href:!0});var WFt=s(eQ);fhr=r(WFt,"TFXLNetLMHeadModel"),WFt.forEach(t),mhr=r(RSe," (XLNet model)"),RSe.forEach(t),le.forEach(t),ghr=i(pl),T(sM.$$.fragment,pl),pl.forEach(t),hl.forEach(t),mNe=i(f),Wd=n(f,"H2",{class:!0});var bDe=s(Wd);lM=n(bDe,"A",{id:!0,class:!0,href:!0});var QFt=s(lM);dbe=n(QFt,"SPAN",{});var HFt=s(dbe);T(s8.$$.fragment,HFt),HFt.forEach(t),QFt.forEach(t),hhr=i(bDe),cbe=n(bDe,"SPAN",{});var UFt=s(cbe);phr=r(UFt,"TFAutoModelForCausalLM"),UFt.forEach(t),bDe.forEach(t),gNe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(l8.$$.fragment,_l),_hr=i(_l),Qd=n(_l,"P",{});var DZ=s(Qd);uhr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oQ=n(DZ,"A",{href:!0});var JFt=s(oQ);bhr=r(JFt,"from_pretrained()"),JFt.forEach(t),vhr=r(DZ," class method or the "),rQ=n(DZ,"A",{href:!0});var YFt=s(rQ);Fhr=r(YFt,"from_config()"),YFt.forEach(t),Thr=r(DZ,` class
method.`),DZ.forEach(t),Mhr=i(_l),i8=n(_l,"P",{});var vDe=s(i8);Ehr=r(vDe,"This class cannot be instantiated directly using "),fbe=n(vDe,"CODE",{});var KFt=s(fbe);Chr=r(KFt,"__init__()"),KFt.forEach(t),whr=r(vDe," (throws an error)."),vDe.forEach(t),Ahr=i(_l),xt=n(_l,"DIV",{class:!0});var _A=s(xt);T(d8.$$.fragment,_A),yhr=i(_A),mbe=n(_A,"P",{});var ZFt=s(mbe);Lhr=r(ZFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ZFt.forEach(t),xhr=i(_A),Hd=n(_A,"P",{});var GZ=s(Hd);$hr=r(GZ,`Note:
Loading a model from its configuration file does `),gbe=n(GZ,"STRONG",{});var e0t=s(gbe);khr=r(e0t,"not"),e0t.forEach(t),Shr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=n(GZ,"A",{href:!0});var o0t=s(tQ);Rhr=r(o0t,"from_pretrained()"),o0t.forEach(t),Bhr=r(GZ," to load the model weights."),GZ.forEach(t),Phr=i(_A),T(iM.$$.fragment,_A),_A.forEach(t),Ihr=i(_l),yr=n(_l,"DIV",{class:!0});var ul=s(yr);T(c8.$$.fragment,ul),qhr=i(ul),hbe=n(ul,"P",{});var r0t=s(hbe);Nhr=r(r0t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),r0t.forEach(t),jhr=i(ul),en=n(ul,"P",{});var uA=s(en);Dhr=r(uA,"The model class to instantiate is selected based on the "),pbe=n(uA,"CODE",{});var t0t=s(pbe);Ghr=r(t0t,"model_type"),t0t.forEach(t),Ohr=r(uA,` property of the config object (either
passed as an argument or loaded from `),_be=n(uA,"CODE",{});var a0t=s(_be);Vhr=r(a0t,"pretrained_model_name_or_path"),a0t.forEach(t),Xhr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(uA,"CODE",{});var n0t=s(ube);zhr=r(n0t,"pretrained_model_name_or_path"),n0t.forEach(t),Whr=r(uA,":"),uA.forEach(t),Qhr=i(ul),Te=n(ul,"UL",{});var Ce=s(Te);dM=n(Ce,"LI",{});var BSe=s(dM);bbe=n(BSe,"STRONG",{});var s0t=s(bbe);Hhr=r(s0t,"bert"),s0t.forEach(t),Uhr=r(BSe," \u2014 "),aQ=n(BSe,"A",{href:!0});var l0t=s(aQ);Jhr=r(l0t,"TFBertLMHeadModel"),l0t.forEach(t),Yhr=r(BSe," (BERT model)"),BSe.forEach(t),Khr=i(Ce),cM=n(Ce,"LI",{});var PSe=s(cM);vbe=n(PSe,"STRONG",{});var i0t=s(vbe);Zhr=r(i0t,"camembert"),i0t.forEach(t),epr=r(PSe," \u2014 "),nQ=n(PSe,"A",{href:!0});var d0t=s(nQ);opr=r(d0t,"TFCamembertForCausalLM"),d0t.forEach(t),rpr=r(PSe," (CamemBERT model)"),PSe.forEach(t),tpr=i(Ce),fM=n(Ce,"LI",{});var ISe=s(fM);Fbe=n(ISe,"STRONG",{});var c0t=s(Fbe);apr=r(c0t,"ctrl"),c0t.forEach(t),npr=r(ISe," \u2014 "),sQ=n(ISe,"A",{href:!0});var f0t=s(sQ);spr=r(f0t,"TFCTRLLMHeadModel"),f0t.forEach(t),lpr=r(ISe," (CTRL model)"),ISe.forEach(t),ipr=i(Ce),mM=n(Ce,"LI",{});var qSe=s(mM);Tbe=n(qSe,"STRONG",{});var m0t=s(Tbe);dpr=r(m0t,"gpt2"),m0t.forEach(t),cpr=r(qSe," \u2014 "),lQ=n(qSe,"A",{href:!0});var g0t=s(lQ);fpr=r(g0t,"TFGPT2LMHeadModel"),g0t.forEach(t),mpr=r(qSe," (OpenAI GPT-2 model)"),qSe.forEach(t),gpr=i(Ce),gM=n(Ce,"LI",{});var NSe=s(gM);Mbe=n(NSe,"STRONG",{});var h0t=s(Mbe);hpr=r(h0t,"gptj"),h0t.forEach(t),ppr=r(NSe," \u2014 "),iQ=n(NSe,"A",{href:!0});var p0t=s(iQ);_pr=r(p0t,"TFGPTJForCausalLM"),p0t.forEach(t),upr=r(NSe," (GPT-J model)"),NSe.forEach(t),bpr=i(Ce),hM=n(Ce,"LI",{});var jSe=s(hM);Ebe=n(jSe,"STRONG",{});var _0t=s(Ebe);vpr=r(_0t,"openai-gpt"),_0t.forEach(t),Fpr=r(jSe," \u2014 "),dQ=n(jSe,"A",{href:!0});var u0t=s(dQ);Tpr=r(u0t,"TFOpenAIGPTLMHeadModel"),u0t.forEach(t),Mpr=r(jSe," (OpenAI GPT model)"),jSe.forEach(t),Epr=i(Ce),pM=n(Ce,"LI",{});var DSe=s(pM);Cbe=n(DSe,"STRONG",{});var b0t=s(Cbe);Cpr=r(b0t,"rembert"),b0t.forEach(t),wpr=r(DSe," \u2014 "),cQ=n(DSe,"A",{href:!0});var v0t=s(cQ);Apr=r(v0t,"TFRemBertForCausalLM"),v0t.forEach(t),ypr=r(DSe," (RemBERT model)"),DSe.forEach(t),Lpr=i(Ce),_M=n(Ce,"LI",{});var GSe=s(_M);wbe=n(GSe,"STRONG",{});var F0t=s(wbe);xpr=r(F0t,"roberta"),F0t.forEach(t),$pr=r(GSe," \u2014 "),fQ=n(GSe,"A",{href:!0});var T0t=s(fQ);kpr=r(T0t,"TFRobertaForCausalLM"),T0t.forEach(t),Spr=r(GSe," (RoBERTa model)"),GSe.forEach(t),Rpr=i(Ce),uM=n(Ce,"LI",{});var OSe=s(uM);Abe=n(OSe,"STRONG",{});var M0t=s(Abe);Bpr=r(M0t,"roformer"),M0t.forEach(t),Ppr=r(OSe," \u2014 "),mQ=n(OSe,"A",{href:!0});var E0t=s(mQ);Ipr=r(E0t,"TFRoFormerForCausalLM"),E0t.forEach(t),qpr=r(OSe," (RoFormer model)"),OSe.forEach(t),Npr=i(Ce),bM=n(Ce,"LI",{});var VSe=s(bM);ybe=n(VSe,"STRONG",{});var C0t=s(ybe);jpr=r(C0t,"transfo-xl"),C0t.forEach(t),Dpr=r(VSe," \u2014 "),gQ=n(VSe,"A",{href:!0});var w0t=s(gQ);Gpr=r(w0t,"TFTransfoXLLMHeadModel"),w0t.forEach(t),Opr=r(VSe," (Transformer-XL model)"),VSe.forEach(t),Vpr=i(Ce),vM=n(Ce,"LI",{});var XSe=s(vM);Lbe=n(XSe,"STRONG",{});var A0t=s(Lbe);Xpr=r(A0t,"xlm"),A0t.forEach(t),zpr=r(XSe," \u2014 "),hQ=n(XSe,"A",{href:!0});var y0t=s(hQ);Wpr=r(y0t,"TFXLMWithLMHeadModel"),y0t.forEach(t),Qpr=r(XSe," (XLM model)"),XSe.forEach(t),Hpr=i(Ce),FM=n(Ce,"LI",{});var zSe=s(FM);xbe=n(zSe,"STRONG",{});var L0t=s(xbe);Upr=r(L0t,"xlnet"),L0t.forEach(t),Jpr=r(zSe," \u2014 "),pQ=n(zSe,"A",{href:!0});var x0t=s(pQ);Ypr=r(x0t,"TFXLNetLMHeadModel"),x0t.forEach(t),Kpr=r(zSe," (XLNet model)"),zSe.forEach(t),Ce.forEach(t),Zpr=i(ul),T(TM.$$.fragment,ul),ul.forEach(t),_l.forEach(t),hNe=i(f),Ud=n(f,"H2",{class:!0});var FDe=s(Ud);MM=n(FDe,"A",{id:!0,class:!0,href:!0});var $0t=s(MM);$be=n($0t,"SPAN",{});var k0t=s($be);T(f8.$$.fragment,k0t),k0t.forEach(t),$0t.forEach(t),e_r=i(FDe),kbe=n(FDe,"SPAN",{});var S0t=s(kbe);o_r=r(S0t,"TFAutoModelForImageClassification"),S0t.forEach(t),FDe.forEach(t),pNe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(m8.$$.fragment,bl),r_r=i(bl),Jd=n(bl,"P",{});var OZ=s(Jd);t_r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_Q=n(OZ,"A",{href:!0});var R0t=s(_Q);a_r=r(R0t,"from_pretrained()"),R0t.forEach(t),n_r=r(OZ," class method or the "),uQ=n(OZ,"A",{href:!0});var B0t=s(uQ);s_r=r(B0t,"from_config()"),B0t.forEach(t),l_r=r(OZ,` class
method.`),OZ.forEach(t),i_r=i(bl),g8=n(bl,"P",{});var TDe=s(g8);d_r=r(TDe,"This class cannot be instantiated directly using "),Sbe=n(TDe,"CODE",{});var P0t=s(Sbe);c_r=r(P0t,"__init__()"),P0t.forEach(t),f_r=r(TDe," (throws an error)."),TDe.forEach(t),m_r=i(bl),$t=n(bl,"DIV",{class:!0});var bA=s($t);T(h8.$$.fragment,bA),g_r=i(bA),Rbe=n(bA,"P",{});var I0t=s(Rbe);h_r=r(I0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),I0t.forEach(t),p_r=i(bA),Yd=n(bA,"P",{});var VZ=s(Yd);__r=r(VZ,`Note:
Loading a model from its configuration file does `),Bbe=n(VZ,"STRONG",{});var q0t=s(Bbe);u_r=r(q0t,"not"),q0t.forEach(t),b_r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(VZ,"A",{href:!0});var N0t=s(bQ);v_r=r(N0t,"from_pretrained()"),N0t.forEach(t),F_r=r(VZ," to load the model weights."),VZ.forEach(t),T_r=i(bA),T(EM.$$.fragment,bA),bA.forEach(t),M_r=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(p8.$$.fragment,vl),E_r=i(vl),Pbe=n(vl,"P",{});var j0t=s(Pbe);C_r=r(j0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),j0t.forEach(t),w_r=i(vl),on=n(vl,"P",{});var vA=s(on);A_r=r(vA,"The model class to instantiate is selected based on the "),Ibe=n(vA,"CODE",{});var D0t=s(Ibe);y_r=r(D0t,"model_type"),D0t.forEach(t),L_r=r(vA,` property of the config object (either
passed as an argument or loaded from `),qbe=n(vA,"CODE",{});var G0t=s(qbe);x_r=r(G0t,"pretrained_model_name_or_path"),G0t.forEach(t),$_r=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(vA,"CODE",{});var O0t=s(Nbe);k_r=r(O0t,"pretrained_model_name_or_path"),O0t.forEach(t),S_r=r(vA,":"),vA.forEach(t),R_r=i(vl),rn=n(vl,"UL",{});var FA=s(rn);CM=n(FA,"LI",{});var WSe=s(CM);jbe=n(WSe,"STRONG",{});var V0t=s(jbe);B_r=r(V0t,"convnext"),V0t.forEach(t),P_r=r(WSe," \u2014 "),vQ=n(WSe,"A",{href:!0});var X0t=s(vQ);I_r=r(X0t,"TFConvNextForImageClassification"),X0t.forEach(t),q_r=r(WSe," (ConvNext model)"),WSe.forEach(t),N_r=i(FA),wM=n(FA,"LI",{});var QSe=s(wM);Dbe=n(QSe,"STRONG",{});var z0t=s(Dbe);j_r=r(z0t,"data2vec-vision"),z0t.forEach(t),D_r=r(QSe," \u2014 "),FQ=n(QSe,"A",{href:!0});var W0t=s(FQ);G_r=r(W0t,"TFData2VecVisionForImageClassification"),W0t.forEach(t),O_r=r(QSe," (Data2VecVision model)"),QSe.forEach(t),V_r=i(FA),AM=n(FA,"LI",{});var HSe=s(AM);Gbe=n(HSe,"STRONG",{});var Q0t=s(Gbe);X_r=r(Q0t,"swin"),Q0t.forEach(t),z_r=r(HSe," \u2014 "),TQ=n(HSe,"A",{href:!0});var H0t=s(TQ);W_r=r(H0t,"TFSwinForImageClassification"),H0t.forEach(t),Q_r=r(HSe," (Swin model)"),HSe.forEach(t),H_r=i(FA),yM=n(FA,"LI",{});var USe=s(yM);Obe=n(USe,"STRONG",{});var U0t=s(Obe);U_r=r(U0t,"vit"),U0t.forEach(t),J_r=r(USe," \u2014 "),MQ=n(USe,"A",{href:!0});var J0t=s(MQ);Y_r=r(J0t,"TFViTForImageClassification"),J0t.forEach(t),K_r=r(USe," (ViT model)"),USe.forEach(t),FA.forEach(t),Z_r=i(vl),T(LM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),_Ne=i(f),Kd=n(f,"H2",{class:!0});var MDe=s(Kd);xM=n(MDe,"A",{id:!0,class:!0,href:!0});var Y0t=s(xM);Vbe=n(Y0t,"SPAN",{});var K0t=s(Vbe);T(_8.$$.fragment,K0t),K0t.forEach(t),Y0t.forEach(t),eur=i(MDe),Xbe=n(MDe,"SPAN",{});var Z0t=s(Xbe);our=r(Z0t,"TFAutoModelForMaskedLM"),Z0t.forEach(t),MDe.forEach(t),uNe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(u8.$$.fragment,Fl),rur=i(Fl),Zd=n(Fl,"P",{});var XZ=s(Zd);tur=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EQ=n(XZ,"A",{href:!0});var eTt=s(EQ);aur=r(eTt,"from_pretrained()"),eTt.forEach(t),nur=r(XZ," class method or the "),CQ=n(XZ,"A",{href:!0});var oTt=s(CQ);sur=r(oTt,"from_config()"),oTt.forEach(t),lur=r(XZ,` class
method.`),XZ.forEach(t),iur=i(Fl),b8=n(Fl,"P",{});var EDe=s(b8);dur=r(EDe,"This class cannot be instantiated directly using "),zbe=n(EDe,"CODE",{});var rTt=s(zbe);cur=r(rTt,"__init__()"),rTt.forEach(t),fur=r(EDe," (throws an error)."),EDe.forEach(t),mur=i(Fl),kt=n(Fl,"DIV",{class:!0});var TA=s(kt);T(v8.$$.fragment,TA),gur=i(TA),Wbe=n(TA,"P",{});var tTt=s(Wbe);hur=r(tTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tTt.forEach(t),pur=i(TA),ec=n(TA,"P",{});var zZ=s(ec);_ur=r(zZ,`Note:
Loading a model from its configuration file does `),Qbe=n(zZ,"STRONG",{});var aTt=s(Qbe);uur=r(aTt,"not"),aTt.forEach(t),bur=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(zZ,"A",{href:!0});var nTt=s(wQ);vur=r(nTt,"from_pretrained()"),nTt.forEach(t),Fur=r(zZ," to load the model weights."),zZ.forEach(t),Tur=i(TA),T($M.$$.fragment,TA),TA.forEach(t),Mur=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(F8.$$.fragment,Tl),Eur=i(Tl),Hbe=n(Tl,"P",{});var sTt=s(Hbe);Cur=r(sTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sTt.forEach(t),wur=i(Tl),tn=n(Tl,"P",{});var MA=s(tn);Aur=r(MA,"The model class to instantiate is selected based on the "),Ube=n(MA,"CODE",{});var lTt=s(Ube);yur=r(lTt,"model_type"),lTt.forEach(t),Lur=r(MA,` property of the config object (either
passed as an argument or loaded from `),Jbe=n(MA,"CODE",{});var iTt=s(Jbe);xur=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),$ur=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=n(MA,"CODE",{});var dTt=s(Ybe);kur=r(dTt,"pretrained_model_name_or_path"),dTt.forEach(t),Sur=r(MA,":"),MA.forEach(t),Rur=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);kM=n(fe,"LI",{});var JSe=s(kM);Kbe=n(JSe,"STRONG",{});var cTt=s(Kbe);Bur=r(cTt,"albert"),cTt.forEach(t),Pur=r(JSe," \u2014 "),AQ=n(JSe,"A",{href:!0});var fTt=s(AQ);Iur=r(fTt,"TFAlbertForMaskedLM"),fTt.forEach(t),qur=r(JSe," (ALBERT model)"),JSe.forEach(t),Nur=i(fe),SM=n(fe,"LI",{});var YSe=s(SM);Zbe=n(YSe,"STRONG",{});var mTt=s(Zbe);jur=r(mTt,"bert"),mTt.forEach(t),Dur=r(YSe," \u2014 "),yQ=n(YSe,"A",{href:!0});var gTt=s(yQ);Gur=r(gTt,"TFBertForMaskedLM"),gTt.forEach(t),Our=r(YSe," (BERT model)"),YSe.forEach(t),Vur=i(fe),RM=n(fe,"LI",{});var KSe=s(RM);eve=n(KSe,"STRONG",{});var hTt=s(eve);Xur=r(hTt,"camembert"),hTt.forEach(t),zur=r(KSe," \u2014 "),LQ=n(KSe,"A",{href:!0});var pTt=s(LQ);Wur=r(pTt,"TFCamembertForMaskedLM"),pTt.forEach(t),Qur=r(KSe," (CamemBERT model)"),KSe.forEach(t),Hur=i(fe),BM=n(fe,"LI",{});var ZSe=s(BM);ove=n(ZSe,"STRONG",{});var _Tt=s(ove);Uur=r(_Tt,"convbert"),_Tt.forEach(t),Jur=r(ZSe," \u2014 "),xQ=n(ZSe,"A",{href:!0});var uTt=s(xQ);Yur=r(uTt,"TFConvBertForMaskedLM"),uTt.forEach(t),Kur=r(ZSe," (ConvBERT model)"),ZSe.forEach(t),Zur=i(fe),PM=n(fe,"LI",{});var eRe=s(PM);rve=n(eRe,"STRONG",{});var bTt=s(rve);e2r=r(bTt,"deberta"),bTt.forEach(t),o2r=r(eRe," \u2014 "),$Q=n(eRe,"A",{href:!0});var vTt=s($Q);r2r=r(vTt,"TFDebertaForMaskedLM"),vTt.forEach(t),t2r=r(eRe," (DeBERTa model)"),eRe.forEach(t),a2r=i(fe),IM=n(fe,"LI",{});var oRe=s(IM);tve=n(oRe,"STRONG",{});var FTt=s(tve);n2r=r(FTt,"deberta-v2"),FTt.forEach(t),s2r=r(oRe," \u2014 "),kQ=n(oRe,"A",{href:!0});var TTt=s(kQ);l2r=r(TTt,"TFDebertaV2ForMaskedLM"),TTt.forEach(t),i2r=r(oRe," (DeBERTa-v2 model)"),oRe.forEach(t),d2r=i(fe),qM=n(fe,"LI",{});var rRe=s(qM);ave=n(rRe,"STRONG",{});var MTt=s(ave);c2r=r(MTt,"distilbert"),MTt.forEach(t),f2r=r(rRe," \u2014 "),SQ=n(rRe,"A",{href:!0});var ETt=s(SQ);m2r=r(ETt,"TFDistilBertForMaskedLM"),ETt.forEach(t),g2r=r(rRe," (DistilBERT model)"),rRe.forEach(t),h2r=i(fe),NM=n(fe,"LI",{});var tRe=s(NM);nve=n(tRe,"STRONG",{});var CTt=s(nve);p2r=r(CTt,"electra"),CTt.forEach(t),_2r=r(tRe," \u2014 "),RQ=n(tRe,"A",{href:!0});var wTt=s(RQ);u2r=r(wTt,"TFElectraForMaskedLM"),wTt.forEach(t),b2r=r(tRe," (ELECTRA model)"),tRe.forEach(t),v2r=i(fe),jM=n(fe,"LI",{});var aRe=s(jM);sve=n(aRe,"STRONG",{});var ATt=s(sve);F2r=r(ATt,"flaubert"),ATt.forEach(t),T2r=r(aRe," \u2014 "),BQ=n(aRe,"A",{href:!0});var yTt=s(BQ);M2r=r(yTt,"TFFlaubertWithLMHeadModel"),yTt.forEach(t),E2r=r(aRe," (FlauBERT model)"),aRe.forEach(t),C2r=i(fe),DM=n(fe,"LI",{});var nRe=s(DM);lve=n(nRe,"STRONG",{});var LTt=s(lve);w2r=r(LTt,"funnel"),LTt.forEach(t),A2r=r(nRe," \u2014 "),PQ=n(nRe,"A",{href:!0});var xTt=s(PQ);y2r=r(xTt,"TFFunnelForMaskedLM"),xTt.forEach(t),L2r=r(nRe," (Funnel Transformer model)"),nRe.forEach(t),x2r=i(fe),GM=n(fe,"LI",{});var sRe=s(GM);ive=n(sRe,"STRONG",{});var $Tt=s(ive);$2r=r($Tt,"layoutlm"),$Tt.forEach(t),k2r=r(sRe," \u2014 "),IQ=n(sRe,"A",{href:!0});var kTt=s(IQ);S2r=r(kTt,"TFLayoutLMForMaskedLM"),kTt.forEach(t),R2r=r(sRe," (LayoutLM model)"),sRe.forEach(t),B2r=i(fe),OM=n(fe,"LI",{});var lRe=s(OM);dve=n(lRe,"STRONG",{});var STt=s(dve);P2r=r(STt,"longformer"),STt.forEach(t),I2r=r(lRe," \u2014 "),qQ=n(lRe,"A",{href:!0});var RTt=s(qQ);q2r=r(RTt,"TFLongformerForMaskedLM"),RTt.forEach(t),N2r=r(lRe," (Longformer model)"),lRe.forEach(t),j2r=i(fe),VM=n(fe,"LI",{});var iRe=s(VM);cve=n(iRe,"STRONG",{});var BTt=s(cve);D2r=r(BTt,"mobilebert"),BTt.forEach(t),G2r=r(iRe," \u2014 "),NQ=n(iRe,"A",{href:!0});var PTt=s(NQ);O2r=r(PTt,"TFMobileBertForMaskedLM"),PTt.forEach(t),V2r=r(iRe," (MobileBERT model)"),iRe.forEach(t),X2r=i(fe),XM=n(fe,"LI",{});var dRe=s(XM);fve=n(dRe,"STRONG",{});var ITt=s(fve);z2r=r(ITt,"mpnet"),ITt.forEach(t),W2r=r(dRe," \u2014 "),jQ=n(dRe,"A",{href:!0});var qTt=s(jQ);Q2r=r(qTt,"TFMPNetForMaskedLM"),qTt.forEach(t),H2r=r(dRe," (MPNet model)"),dRe.forEach(t),U2r=i(fe),zM=n(fe,"LI",{});var cRe=s(zM);mve=n(cRe,"STRONG",{});var NTt=s(mve);J2r=r(NTt,"rembert"),NTt.forEach(t),Y2r=r(cRe," \u2014 "),DQ=n(cRe,"A",{href:!0});var jTt=s(DQ);K2r=r(jTt,"TFRemBertForMaskedLM"),jTt.forEach(t),Z2r=r(cRe," (RemBERT model)"),cRe.forEach(t),e1r=i(fe),WM=n(fe,"LI",{});var fRe=s(WM);gve=n(fRe,"STRONG",{});var DTt=s(gve);o1r=r(DTt,"roberta"),DTt.forEach(t),r1r=r(fRe," \u2014 "),GQ=n(fRe,"A",{href:!0});var GTt=s(GQ);t1r=r(GTt,"TFRobertaForMaskedLM"),GTt.forEach(t),a1r=r(fRe," (RoBERTa model)"),fRe.forEach(t),n1r=i(fe),QM=n(fe,"LI",{});var mRe=s(QM);hve=n(mRe,"STRONG",{});var OTt=s(hve);s1r=r(OTt,"roformer"),OTt.forEach(t),l1r=r(mRe," \u2014 "),OQ=n(mRe,"A",{href:!0});var VTt=s(OQ);i1r=r(VTt,"TFRoFormerForMaskedLM"),VTt.forEach(t),d1r=r(mRe," (RoFormer model)"),mRe.forEach(t),c1r=i(fe),HM=n(fe,"LI",{});var gRe=s(HM);pve=n(gRe,"STRONG",{});var XTt=s(pve);f1r=r(XTt,"tapas"),XTt.forEach(t),m1r=r(gRe," \u2014 "),VQ=n(gRe,"A",{href:!0});var zTt=s(VQ);g1r=r(zTt,"TFTapasForMaskedLM"),zTt.forEach(t),h1r=r(gRe," (TAPAS model)"),gRe.forEach(t),p1r=i(fe),UM=n(fe,"LI",{});var hRe=s(UM);_ve=n(hRe,"STRONG",{});var WTt=s(_ve);_1r=r(WTt,"xlm"),WTt.forEach(t),u1r=r(hRe," \u2014 "),XQ=n(hRe,"A",{href:!0});var QTt=s(XQ);b1r=r(QTt,"TFXLMWithLMHeadModel"),QTt.forEach(t),v1r=r(hRe," (XLM model)"),hRe.forEach(t),F1r=i(fe),JM=n(fe,"LI",{});var pRe=s(JM);uve=n(pRe,"STRONG",{});var HTt=s(uve);T1r=r(HTt,"xlm-roberta"),HTt.forEach(t),M1r=r(pRe," \u2014 "),zQ=n(pRe,"A",{href:!0});var UTt=s(zQ);E1r=r(UTt,"TFXLMRobertaForMaskedLM"),UTt.forEach(t),C1r=r(pRe," (XLM-RoBERTa model)"),pRe.forEach(t),fe.forEach(t),w1r=i(Tl),T(YM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),bNe=i(f),oc=n(f,"H2",{class:!0});var CDe=s(oc);KM=n(CDe,"A",{id:!0,class:!0,href:!0});var JTt=s(KM);bve=n(JTt,"SPAN",{});var YTt=s(bve);T(T8.$$.fragment,YTt),YTt.forEach(t),JTt.forEach(t),A1r=i(CDe),vve=n(CDe,"SPAN",{});var KTt=s(vve);y1r=r(KTt,"TFAutoModelForSeq2SeqLM"),KTt.forEach(t),CDe.forEach(t),vNe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(M8.$$.fragment,Ml),L1r=i(Ml),rc=n(Ml,"P",{});var WZ=s(rc);x1r=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WQ=n(WZ,"A",{href:!0});var ZTt=s(WQ);$1r=r(ZTt,"from_pretrained()"),ZTt.forEach(t),k1r=r(WZ," class method or the "),QQ=n(WZ,"A",{href:!0});var e7t=s(QQ);S1r=r(e7t,"from_config()"),e7t.forEach(t),R1r=r(WZ,` class
method.`),WZ.forEach(t),B1r=i(Ml),E8=n(Ml,"P",{});var wDe=s(E8);P1r=r(wDe,"This class cannot be instantiated directly using "),Fve=n(wDe,"CODE",{});var o7t=s(Fve);I1r=r(o7t,"__init__()"),o7t.forEach(t),q1r=r(wDe," (throws an error)."),wDe.forEach(t),N1r=i(Ml),St=n(Ml,"DIV",{class:!0});var EA=s(St);T(C8.$$.fragment,EA),j1r=i(EA),Tve=n(EA,"P",{});var r7t=s(Tve);D1r=r(r7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),r7t.forEach(t),G1r=i(EA),tc=n(EA,"P",{});var QZ=s(tc);O1r=r(QZ,`Note:
Loading a model from its configuration file does `),Mve=n(QZ,"STRONG",{});var t7t=s(Mve);V1r=r(t7t,"not"),t7t.forEach(t),X1r=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(QZ,"A",{href:!0});var a7t=s(HQ);z1r=r(a7t,"from_pretrained()"),a7t.forEach(t),W1r=r(QZ," to load the model weights."),QZ.forEach(t),Q1r=i(EA),T(ZM.$$.fragment,EA),EA.forEach(t),H1r=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(w8.$$.fragment,El),U1r=i(El),Eve=n(El,"P",{});var n7t=s(Eve);J1r=r(n7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),n7t.forEach(t),Y1r=i(El),an=n(El,"P",{});var CA=s(an);K1r=r(CA,"The model class to instantiate is selected based on the "),Cve=n(CA,"CODE",{});var s7t=s(Cve);Z1r=r(s7t,"model_type"),s7t.forEach(t),ebr=r(CA,` property of the config object (either
passed as an argument or loaded from `),wve=n(CA,"CODE",{});var l7t=s(wve);obr=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),rbr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=n(CA,"CODE",{});var i7t=s(Ave);tbr=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),abr=r(CA,":"),CA.forEach(t),nbr=i(El),ye=n(El,"UL",{});var Pe=s(ye);e4=n(Pe,"LI",{});var _Re=s(e4);yve=n(_Re,"STRONG",{});var d7t=s(yve);sbr=r(d7t,"bart"),d7t.forEach(t),lbr=r(_Re," \u2014 "),UQ=n(_Re,"A",{href:!0});var c7t=s(UQ);ibr=r(c7t,"TFBartForConditionalGeneration"),c7t.forEach(t),dbr=r(_Re," (BART model)"),_Re.forEach(t),cbr=i(Pe),o4=n(Pe,"LI",{});var uRe=s(o4);Lve=n(uRe,"STRONG",{});var f7t=s(Lve);fbr=r(f7t,"blenderbot"),f7t.forEach(t),mbr=r(uRe," \u2014 "),JQ=n(uRe,"A",{href:!0});var m7t=s(JQ);gbr=r(m7t,"TFBlenderbotForConditionalGeneration"),m7t.forEach(t),hbr=r(uRe," (Blenderbot model)"),uRe.forEach(t),pbr=i(Pe),r4=n(Pe,"LI",{});var bRe=s(r4);xve=n(bRe,"STRONG",{});var g7t=s(xve);_br=r(g7t,"blenderbot-small"),g7t.forEach(t),ubr=r(bRe," \u2014 "),YQ=n(bRe,"A",{href:!0});var h7t=s(YQ);bbr=r(h7t,"TFBlenderbotSmallForConditionalGeneration"),h7t.forEach(t),vbr=r(bRe," (BlenderbotSmall model)"),bRe.forEach(t),Fbr=i(Pe),t4=n(Pe,"LI",{});var vRe=s(t4);$ve=n(vRe,"STRONG",{});var p7t=s($ve);Tbr=r(p7t,"encoder-decoder"),p7t.forEach(t),Mbr=r(vRe," \u2014 "),KQ=n(vRe,"A",{href:!0});var _7t=s(KQ);Ebr=r(_7t,"TFEncoderDecoderModel"),_7t.forEach(t),Cbr=r(vRe," (Encoder decoder model)"),vRe.forEach(t),wbr=i(Pe),a4=n(Pe,"LI",{});var FRe=s(a4);kve=n(FRe,"STRONG",{});var u7t=s(kve);Abr=r(u7t,"led"),u7t.forEach(t),ybr=r(FRe," \u2014 "),ZQ=n(FRe,"A",{href:!0});var b7t=s(ZQ);Lbr=r(b7t,"TFLEDForConditionalGeneration"),b7t.forEach(t),xbr=r(FRe," (LED model)"),FRe.forEach(t),$br=i(Pe),n4=n(Pe,"LI",{});var TRe=s(n4);Sve=n(TRe,"STRONG",{});var v7t=s(Sve);kbr=r(v7t,"marian"),v7t.forEach(t),Sbr=r(TRe," \u2014 "),eH=n(TRe,"A",{href:!0});var F7t=s(eH);Rbr=r(F7t,"TFMarianMTModel"),F7t.forEach(t),Bbr=r(TRe," (Marian model)"),TRe.forEach(t),Pbr=i(Pe),s4=n(Pe,"LI",{});var MRe=s(s4);Rve=n(MRe,"STRONG",{});var T7t=s(Rve);Ibr=r(T7t,"mbart"),T7t.forEach(t),qbr=r(MRe," \u2014 "),oH=n(MRe,"A",{href:!0});var M7t=s(oH);Nbr=r(M7t,"TFMBartForConditionalGeneration"),M7t.forEach(t),jbr=r(MRe," (mBART model)"),MRe.forEach(t),Dbr=i(Pe),l4=n(Pe,"LI",{});var ERe=s(l4);Bve=n(ERe,"STRONG",{});var E7t=s(Bve);Gbr=r(E7t,"mt5"),E7t.forEach(t),Obr=r(ERe," \u2014 "),rH=n(ERe,"A",{href:!0});var C7t=s(rH);Vbr=r(C7t,"TFMT5ForConditionalGeneration"),C7t.forEach(t),Xbr=r(ERe," (mT5 model)"),ERe.forEach(t),zbr=i(Pe),i4=n(Pe,"LI",{});var CRe=s(i4);Pve=n(CRe,"STRONG",{});var w7t=s(Pve);Wbr=r(w7t,"pegasus"),w7t.forEach(t),Qbr=r(CRe," \u2014 "),tH=n(CRe,"A",{href:!0});var A7t=s(tH);Hbr=r(A7t,"TFPegasusForConditionalGeneration"),A7t.forEach(t),Ubr=r(CRe," (Pegasus model)"),CRe.forEach(t),Jbr=i(Pe),d4=n(Pe,"LI",{});var wRe=s(d4);Ive=n(wRe,"STRONG",{});var y7t=s(Ive);Ybr=r(y7t,"t5"),y7t.forEach(t),Kbr=r(wRe," \u2014 "),aH=n(wRe,"A",{href:!0});var L7t=s(aH);Zbr=r(L7t,"TFT5ForConditionalGeneration"),L7t.forEach(t),evr=r(wRe," (T5 model)"),wRe.forEach(t),Pe.forEach(t),ovr=i(El),T(c4.$$.fragment,El),El.forEach(t),Ml.forEach(t),FNe=i(f),ac=n(f,"H2",{class:!0});var ADe=s(ac);f4=n(ADe,"A",{id:!0,class:!0,href:!0});var x7t=s(f4);qve=n(x7t,"SPAN",{});var $7t=s(qve);T(A8.$$.fragment,$7t),$7t.forEach(t),x7t.forEach(t),rvr=i(ADe),Nve=n(ADe,"SPAN",{});var k7t=s(Nve);tvr=r(k7t,"TFAutoModelForSequenceClassification"),k7t.forEach(t),ADe.forEach(t),TNe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T(y8.$$.fragment,Cl),avr=i(Cl),nc=n(Cl,"P",{});var HZ=s(nc);nvr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nH=n(HZ,"A",{href:!0});var S7t=s(nH);svr=r(S7t,"from_pretrained()"),S7t.forEach(t),lvr=r(HZ," class method or the "),sH=n(HZ,"A",{href:!0});var R7t=s(sH);ivr=r(R7t,"from_config()"),R7t.forEach(t),dvr=r(HZ,` class
method.`),HZ.forEach(t),cvr=i(Cl),L8=n(Cl,"P",{});var yDe=s(L8);fvr=r(yDe,"This class cannot be instantiated directly using "),jve=n(yDe,"CODE",{});var B7t=s(jve);mvr=r(B7t,"__init__()"),B7t.forEach(t),gvr=r(yDe," (throws an error)."),yDe.forEach(t),hvr=i(Cl),Rt=n(Cl,"DIV",{class:!0});var wA=s(Rt);T(x8.$$.fragment,wA),pvr=i(wA),Dve=n(wA,"P",{});var P7t=s(Dve);_vr=r(P7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),P7t.forEach(t),uvr=i(wA),sc=n(wA,"P",{});var UZ=s(sc);bvr=r(UZ,`Note:
Loading a model from its configuration file does `),Gve=n(UZ,"STRONG",{});var I7t=s(Gve);vvr=r(I7t,"not"),I7t.forEach(t),Fvr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(UZ,"A",{href:!0});var q7t=s(lH);Tvr=r(q7t,"from_pretrained()"),q7t.forEach(t),Mvr=r(UZ," to load the model weights."),UZ.forEach(t),Evr=i(wA),T(m4.$$.fragment,wA),wA.forEach(t),Cvr=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T($8.$$.fragment,wl),wvr=i(wl),Ove=n(wl,"P",{});var N7t=s(Ove);Avr=r(N7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),N7t.forEach(t),yvr=i(wl),nn=n(wl,"P",{});var AA=s(nn);Lvr=r(AA,"The model class to instantiate is selected based on the "),Vve=n(AA,"CODE",{});var j7t=s(Vve);xvr=r(j7t,"model_type"),j7t.forEach(t),$vr=r(AA,` property of the config object (either
passed as an argument or loaded from `),Xve=n(AA,"CODE",{});var D7t=s(Xve);kvr=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),Svr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=n(AA,"CODE",{});var G7t=s(zve);Rvr=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),Bvr=r(AA,":"),AA.forEach(t),Pvr=i(wl),ee=n(wl,"UL",{});var ae=s(ee);g4=n(ae,"LI",{});var ARe=s(g4);Wve=n(ARe,"STRONG",{});var O7t=s(Wve);Ivr=r(O7t,"albert"),O7t.forEach(t),qvr=r(ARe," \u2014 "),iH=n(ARe,"A",{href:!0});var V7t=s(iH);Nvr=r(V7t,"TFAlbertForSequenceClassification"),V7t.forEach(t),jvr=r(ARe," (ALBERT model)"),ARe.forEach(t),Dvr=i(ae),h4=n(ae,"LI",{});var yRe=s(h4);Qve=n(yRe,"STRONG",{});var X7t=s(Qve);Gvr=r(X7t,"bert"),X7t.forEach(t),Ovr=r(yRe," \u2014 "),dH=n(yRe,"A",{href:!0});var z7t=s(dH);Vvr=r(z7t,"TFBertForSequenceClassification"),z7t.forEach(t),Xvr=r(yRe," (BERT model)"),yRe.forEach(t),zvr=i(ae),p4=n(ae,"LI",{});var LRe=s(p4);Hve=n(LRe,"STRONG",{});var W7t=s(Hve);Wvr=r(W7t,"camembert"),W7t.forEach(t),Qvr=r(LRe," \u2014 "),cH=n(LRe,"A",{href:!0});var Q7t=s(cH);Hvr=r(Q7t,"TFCamembertForSequenceClassification"),Q7t.forEach(t),Uvr=r(LRe," (CamemBERT model)"),LRe.forEach(t),Jvr=i(ae),_4=n(ae,"LI",{});var xRe=s(_4);Uve=n(xRe,"STRONG",{});var H7t=s(Uve);Yvr=r(H7t,"convbert"),H7t.forEach(t),Kvr=r(xRe," \u2014 "),fH=n(xRe,"A",{href:!0});var U7t=s(fH);Zvr=r(U7t,"TFConvBertForSequenceClassification"),U7t.forEach(t),eFr=r(xRe," (ConvBERT model)"),xRe.forEach(t),oFr=i(ae),u4=n(ae,"LI",{});var $Re=s(u4);Jve=n($Re,"STRONG",{});var J7t=s(Jve);rFr=r(J7t,"ctrl"),J7t.forEach(t),tFr=r($Re," \u2014 "),mH=n($Re,"A",{href:!0});var Y7t=s(mH);aFr=r(Y7t,"TFCTRLForSequenceClassification"),Y7t.forEach(t),nFr=r($Re," (CTRL model)"),$Re.forEach(t),sFr=i(ae),b4=n(ae,"LI",{});var kRe=s(b4);Yve=n(kRe,"STRONG",{});var K7t=s(Yve);lFr=r(K7t,"deberta"),K7t.forEach(t),iFr=r(kRe," \u2014 "),gH=n(kRe,"A",{href:!0});var Z7t=s(gH);dFr=r(Z7t,"TFDebertaForSequenceClassification"),Z7t.forEach(t),cFr=r(kRe," (DeBERTa model)"),kRe.forEach(t),fFr=i(ae),v4=n(ae,"LI",{});var SRe=s(v4);Kve=n(SRe,"STRONG",{});var eMt=s(Kve);mFr=r(eMt,"deberta-v2"),eMt.forEach(t),gFr=r(SRe," \u2014 "),hH=n(SRe,"A",{href:!0});var oMt=s(hH);hFr=r(oMt,"TFDebertaV2ForSequenceClassification"),oMt.forEach(t),pFr=r(SRe," (DeBERTa-v2 model)"),SRe.forEach(t),_Fr=i(ae),F4=n(ae,"LI",{});var RRe=s(F4);Zve=n(RRe,"STRONG",{});var rMt=s(Zve);uFr=r(rMt,"distilbert"),rMt.forEach(t),bFr=r(RRe," \u2014 "),pH=n(RRe,"A",{href:!0});var tMt=s(pH);vFr=r(tMt,"TFDistilBertForSequenceClassification"),tMt.forEach(t),FFr=r(RRe," (DistilBERT model)"),RRe.forEach(t),TFr=i(ae),T4=n(ae,"LI",{});var BRe=s(T4);eFe=n(BRe,"STRONG",{});var aMt=s(eFe);MFr=r(aMt,"electra"),aMt.forEach(t),EFr=r(BRe," \u2014 "),_H=n(BRe,"A",{href:!0});var nMt=s(_H);CFr=r(nMt,"TFElectraForSequenceClassification"),nMt.forEach(t),wFr=r(BRe," (ELECTRA model)"),BRe.forEach(t),AFr=i(ae),M4=n(ae,"LI",{});var PRe=s(M4);oFe=n(PRe,"STRONG",{});var sMt=s(oFe);yFr=r(sMt,"flaubert"),sMt.forEach(t),LFr=r(PRe," \u2014 "),uH=n(PRe,"A",{href:!0});var lMt=s(uH);xFr=r(lMt,"TFFlaubertForSequenceClassification"),lMt.forEach(t),$Fr=r(PRe," (FlauBERT model)"),PRe.forEach(t),kFr=i(ae),E4=n(ae,"LI",{});var IRe=s(E4);rFe=n(IRe,"STRONG",{});var iMt=s(rFe);SFr=r(iMt,"funnel"),iMt.forEach(t),RFr=r(IRe," \u2014 "),bH=n(IRe,"A",{href:!0});var dMt=s(bH);BFr=r(dMt,"TFFunnelForSequenceClassification"),dMt.forEach(t),PFr=r(IRe," (Funnel Transformer model)"),IRe.forEach(t),IFr=i(ae),C4=n(ae,"LI",{});var qRe=s(C4);tFe=n(qRe,"STRONG",{});var cMt=s(tFe);qFr=r(cMt,"gpt2"),cMt.forEach(t),NFr=r(qRe," \u2014 "),vH=n(qRe,"A",{href:!0});var fMt=s(vH);jFr=r(fMt,"TFGPT2ForSequenceClassification"),fMt.forEach(t),DFr=r(qRe," (OpenAI GPT-2 model)"),qRe.forEach(t),GFr=i(ae),w4=n(ae,"LI",{});var NRe=s(w4);aFe=n(NRe,"STRONG",{});var mMt=s(aFe);OFr=r(mMt,"gptj"),mMt.forEach(t),VFr=r(NRe," \u2014 "),FH=n(NRe,"A",{href:!0});var gMt=s(FH);XFr=r(gMt,"TFGPTJForSequenceClassification"),gMt.forEach(t),zFr=r(NRe," (GPT-J model)"),NRe.forEach(t),WFr=i(ae),A4=n(ae,"LI",{});var jRe=s(A4);nFe=n(jRe,"STRONG",{});var hMt=s(nFe);QFr=r(hMt,"layoutlm"),hMt.forEach(t),HFr=r(jRe," \u2014 "),TH=n(jRe,"A",{href:!0});var pMt=s(TH);UFr=r(pMt,"TFLayoutLMForSequenceClassification"),pMt.forEach(t),JFr=r(jRe," (LayoutLM model)"),jRe.forEach(t),YFr=i(ae),y4=n(ae,"LI",{});var DRe=s(y4);sFe=n(DRe,"STRONG",{});var _Mt=s(sFe);KFr=r(_Mt,"longformer"),_Mt.forEach(t),ZFr=r(DRe," \u2014 "),MH=n(DRe,"A",{href:!0});var uMt=s(MH);e0r=r(uMt,"TFLongformerForSequenceClassification"),uMt.forEach(t),o0r=r(DRe," (Longformer model)"),DRe.forEach(t),r0r=i(ae),L4=n(ae,"LI",{});var GRe=s(L4);lFe=n(GRe,"STRONG",{});var bMt=s(lFe);t0r=r(bMt,"mobilebert"),bMt.forEach(t),a0r=r(GRe," \u2014 "),EH=n(GRe,"A",{href:!0});var vMt=s(EH);n0r=r(vMt,"TFMobileBertForSequenceClassification"),vMt.forEach(t),s0r=r(GRe," (MobileBERT model)"),GRe.forEach(t),l0r=i(ae),x4=n(ae,"LI",{});var ORe=s(x4);iFe=n(ORe,"STRONG",{});var FMt=s(iFe);i0r=r(FMt,"mpnet"),FMt.forEach(t),d0r=r(ORe," \u2014 "),CH=n(ORe,"A",{href:!0});var TMt=s(CH);c0r=r(TMt,"TFMPNetForSequenceClassification"),TMt.forEach(t),f0r=r(ORe," (MPNet model)"),ORe.forEach(t),m0r=i(ae),$4=n(ae,"LI",{});var VRe=s($4);dFe=n(VRe,"STRONG",{});var MMt=s(dFe);g0r=r(MMt,"openai-gpt"),MMt.forEach(t),h0r=r(VRe," \u2014 "),wH=n(VRe,"A",{href:!0});var EMt=s(wH);p0r=r(EMt,"TFOpenAIGPTForSequenceClassification"),EMt.forEach(t),_0r=r(VRe," (OpenAI GPT model)"),VRe.forEach(t),u0r=i(ae),k4=n(ae,"LI",{});var XRe=s(k4);cFe=n(XRe,"STRONG",{});var CMt=s(cFe);b0r=r(CMt,"rembert"),CMt.forEach(t),v0r=r(XRe," \u2014 "),AH=n(XRe,"A",{href:!0});var wMt=s(AH);F0r=r(wMt,"TFRemBertForSequenceClassification"),wMt.forEach(t),T0r=r(XRe," (RemBERT model)"),XRe.forEach(t),M0r=i(ae),S4=n(ae,"LI",{});var zRe=s(S4);fFe=n(zRe,"STRONG",{});var AMt=s(fFe);E0r=r(AMt,"roberta"),AMt.forEach(t),C0r=r(zRe," \u2014 "),yH=n(zRe,"A",{href:!0});var yMt=s(yH);w0r=r(yMt,"TFRobertaForSequenceClassification"),yMt.forEach(t),A0r=r(zRe," (RoBERTa model)"),zRe.forEach(t),y0r=i(ae),R4=n(ae,"LI",{});var WRe=s(R4);mFe=n(WRe,"STRONG",{});var LMt=s(mFe);L0r=r(LMt,"roformer"),LMt.forEach(t),x0r=r(WRe," \u2014 "),LH=n(WRe,"A",{href:!0});var xMt=s(LH);$0r=r(xMt,"TFRoFormerForSequenceClassification"),xMt.forEach(t),k0r=r(WRe," (RoFormer model)"),WRe.forEach(t),S0r=i(ae),B4=n(ae,"LI",{});var QRe=s(B4);gFe=n(QRe,"STRONG",{});var $Mt=s(gFe);R0r=r($Mt,"tapas"),$Mt.forEach(t),B0r=r(QRe," \u2014 "),xH=n(QRe,"A",{href:!0});var kMt=s(xH);P0r=r(kMt,"TFTapasForSequenceClassification"),kMt.forEach(t),I0r=r(QRe," (TAPAS model)"),QRe.forEach(t),q0r=i(ae),P4=n(ae,"LI",{});var HRe=s(P4);hFe=n(HRe,"STRONG",{});var SMt=s(hFe);N0r=r(SMt,"transfo-xl"),SMt.forEach(t),j0r=r(HRe," \u2014 "),$H=n(HRe,"A",{href:!0});var RMt=s($H);D0r=r(RMt,"TFTransfoXLForSequenceClassification"),RMt.forEach(t),G0r=r(HRe," (Transformer-XL model)"),HRe.forEach(t),O0r=i(ae),I4=n(ae,"LI",{});var URe=s(I4);pFe=n(URe,"STRONG",{});var BMt=s(pFe);V0r=r(BMt,"xlm"),BMt.forEach(t),X0r=r(URe," \u2014 "),kH=n(URe,"A",{href:!0});var PMt=s(kH);z0r=r(PMt,"TFXLMForSequenceClassification"),PMt.forEach(t),W0r=r(URe," (XLM model)"),URe.forEach(t),Q0r=i(ae),q4=n(ae,"LI",{});var JRe=s(q4);_Fe=n(JRe,"STRONG",{});var IMt=s(_Fe);H0r=r(IMt,"xlm-roberta"),IMt.forEach(t),U0r=r(JRe," \u2014 "),SH=n(JRe,"A",{href:!0});var qMt=s(SH);J0r=r(qMt,"TFXLMRobertaForSequenceClassification"),qMt.forEach(t),Y0r=r(JRe," (XLM-RoBERTa model)"),JRe.forEach(t),K0r=i(ae),N4=n(ae,"LI",{});var YRe=s(N4);uFe=n(YRe,"STRONG",{});var NMt=s(uFe);Z0r=r(NMt,"xlnet"),NMt.forEach(t),eTr=r(YRe," \u2014 "),RH=n(YRe,"A",{href:!0});var jMt=s(RH);oTr=r(jMt,"TFXLNetForSequenceClassification"),jMt.forEach(t),rTr=r(YRe," (XLNet model)"),YRe.forEach(t),ae.forEach(t),tTr=i(wl),T(j4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),MNe=i(f),lc=n(f,"H2",{class:!0});var LDe=s(lc);D4=n(LDe,"A",{id:!0,class:!0,href:!0});var DMt=s(D4);bFe=n(DMt,"SPAN",{});var GMt=s(bFe);T(k8.$$.fragment,GMt),GMt.forEach(t),DMt.forEach(t),aTr=i(LDe),vFe=n(LDe,"SPAN",{});var OMt=s(vFe);nTr=r(OMt,"TFAutoModelForMultipleChoice"),OMt.forEach(t),LDe.forEach(t),ENe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(S8.$$.fragment,Al),sTr=i(Al),ic=n(Al,"P",{});var JZ=s(ic);lTr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BH=n(JZ,"A",{href:!0});var VMt=s(BH);iTr=r(VMt,"from_pretrained()"),VMt.forEach(t),dTr=r(JZ," class method or the "),PH=n(JZ,"A",{href:!0});var XMt=s(PH);cTr=r(XMt,"from_config()"),XMt.forEach(t),fTr=r(JZ,` class
method.`),JZ.forEach(t),mTr=i(Al),R8=n(Al,"P",{});var xDe=s(R8);gTr=r(xDe,"This class cannot be instantiated directly using "),FFe=n(xDe,"CODE",{});var zMt=s(FFe);hTr=r(zMt,"__init__()"),zMt.forEach(t),pTr=r(xDe," (throws an error)."),xDe.forEach(t),_Tr=i(Al),Bt=n(Al,"DIV",{class:!0});var yA=s(Bt);T(B8.$$.fragment,yA),uTr=i(yA),TFe=n(yA,"P",{});var WMt=s(TFe);bTr=r(WMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),WMt.forEach(t),vTr=i(yA),dc=n(yA,"P",{});var YZ=s(dc);FTr=r(YZ,`Note:
Loading a model from its configuration file does `),MFe=n(YZ,"STRONG",{});var QMt=s(MFe);TTr=r(QMt,"not"),QMt.forEach(t),MTr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(YZ,"A",{href:!0});var HMt=s(IH);ETr=r(HMt,"from_pretrained()"),HMt.forEach(t),CTr=r(YZ," to load the model weights."),YZ.forEach(t),wTr=i(yA),T(G4.$$.fragment,yA),yA.forEach(t),ATr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(P8.$$.fragment,yl),yTr=i(yl),EFe=n(yl,"P",{});var UMt=s(EFe);LTr=r(UMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),UMt.forEach(t),xTr=i(yl),sn=n(yl,"P",{});var LA=s(sn);$Tr=r(LA,"The model class to instantiate is selected based on the "),CFe=n(LA,"CODE",{});var JMt=s(CFe);kTr=r(JMt,"model_type"),JMt.forEach(t),STr=r(LA,` property of the config object (either
passed as an argument or loaded from `),wFe=n(LA,"CODE",{});var YMt=s(wFe);RTr=r(YMt,"pretrained_model_name_or_path"),YMt.forEach(t),BTr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(LA,"CODE",{});var KMt=s(AFe);PTr=r(KMt,"pretrained_model_name_or_path"),KMt.forEach(t),ITr=r(LA,":"),LA.forEach(t),qTr=i(yl),he=n(yl,"UL",{});var ue=s(he);O4=n(ue,"LI",{});var KRe=s(O4);yFe=n(KRe,"STRONG",{});var ZMt=s(yFe);NTr=r(ZMt,"albert"),ZMt.forEach(t),jTr=r(KRe," \u2014 "),qH=n(KRe,"A",{href:!0});var e4t=s(qH);DTr=r(e4t,"TFAlbertForMultipleChoice"),e4t.forEach(t),GTr=r(KRe," (ALBERT model)"),KRe.forEach(t),OTr=i(ue),V4=n(ue,"LI",{});var ZRe=s(V4);LFe=n(ZRe,"STRONG",{});var o4t=s(LFe);VTr=r(o4t,"bert"),o4t.forEach(t),XTr=r(ZRe," \u2014 "),NH=n(ZRe,"A",{href:!0});var r4t=s(NH);zTr=r(r4t,"TFBertForMultipleChoice"),r4t.forEach(t),WTr=r(ZRe," (BERT model)"),ZRe.forEach(t),QTr=i(ue),X4=n(ue,"LI",{});var eBe=s(X4);xFe=n(eBe,"STRONG",{});var t4t=s(xFe);HTr=r(t4t,"camembert"),t4t.forEach(t),UTr=r(eBe," \u2014 "),jH=n(eBe,"A",{href:!0});var a4t=s(jH);JTr=r(a4t,"TFCamembertForMultipleChoice"),a4t.forEach(t),YTr=r(eBe," (CamemBERT model)"),eBe.forEach(t),KTr=i(ue),z4=n(ue,"LI",{});var oBe=s(z4);$Fe=n(oBe,"STRONG",{});var n4t=s($Fe);ZTr=r(n4t,"convbert"),n4t.forEach(t),e7r=r(oBe," \u2014 "),DH=n(oBe,"A",{href:!0});var s4t=s(DH);o7r=r(s4t,"TFConvBertForMultipleChoice"),s4t.forEach(t),r7r=r(oBe," (ConvBERT model)"),oBe.forEach(t),t7r=i(ue),W4=n(ue,"LI",{});var rBe=s(W4);kFe=n(rBe,"STRONG",{});var l4t=s(kFe);a7r=r(l4t,"distilbert"),l4t.forEach(t),n7r=r(rBe," \u2014 "),GH=n(rBe,"A",{href:!0});var i4t=s(GH);s7r=r(i4t,"TFDistilBertForMultipleChoice"),i4t.forEach(t),l7r=r(rBe," (DistilBERT model)"),rBe.forEach(t),i7r=i(ue),Q4=n(ue,"LI",{});var tBe=s(Q4);SFe=n(tBe,"STRONG",{});var d4t=s(SFe);d7r=r(d4t,"electra"),d4t.forEach(t),c7r=r(tBe," \u2014 "),OH=n(tBe,"A",{href:!0});var c4t=s(OH);f7r=r(c4t,"TFElectraForMultipleChoice"),c4t.forEach(t),m7r=r(tBe," (ELECTRA model)"),tBe.forEach(t),g7r=i(ue),H4=n(ue,"LI",{});var aBe=s(H4);RFe=n(aBe,"STRONG",{});var f4t=s(RFe);h7r=r(f4t,"flaubert"),f4t.forEach(t),p7r=r(aBe," \u2014 "),VH=n(aBe,"A",{href:!0});var m4t=s(VH);_7r=r(m4t,"TFFlaubertForMultipleChoice"),m4t.forEach(t),u7r=r(aBe," (FlauBERT model)"),aBe.forEach(t),b7r=i(ue),U4=n(ue,"LI",{});var nBe=s(U4);BFe=n(nBe,"STRONG",{});var g4t=s(BFe);v7r=r(g4t,"funnel"),g4t.forEach(t),F7r=r(nBe," \u2014 "),XH=n(nBe,"A",{href:!0});var h4t=s(XH);T7r=r(h4t,"TFFunnelForMultipleChoice"),h4t.forEach(t),M7r=r(nBe," (Funnel Transformer model)"),nBe.forEach(t),E7r=i(ue),J4=n(ue,"LI",{});var sBe=s(J4);PFe=n(sBe,"STRONG",{});var p4t=s(PFe);C7r=r(p4t,"longformer"),p4t.forEach(t),w7r=r(sBe," \u2014 "),zH=n(sBe,"A",{href:!0});var _4t=s(zH);A7r=r(_4t,"TFLongformerForMultipleChoice"),_4t.forEach(t),y7r=r(sBe," (Longformer model)"),sBe.forEach(t),L7r=i(ue),Y4=n(ue,"LI",{});var lBe=s(Y4);IFe=n(lBe,"STRONG",{});var u4t=s(IFe);x7r=r(u4t,"mobilebert"),u4t.forEach(t),$7r=r(lBe," \u2014 "),WH=n(lBe,"A",{href:!0});var b4t=s(WH);k7r=r(b4t,"TFMobileBertForMultipleChoice"),b4t.forEach(t),S7r=r(lBe," (MobileBERT model)"),lBe.forEach(t),R7r=i(ue),K4=n(ue,"LI",{});var iBe=s(K4);qFe=n(iBe,"STRONG",{});var v4t=s(qFe);B7r=r(v4t,"mpnet"),v4t.forEach(t),P7r=r(iBe," \u2014 "),QH=n(iBe,"A",{href:!0});var F4t=s(QH);I7r=r(F4t,"TFMPNetForMultipleChoice"),F4t.forEach(t),q7r=r(iBe," (MPNet model)"),iBe.forEach(t),N7r=i(ue),Z4=n(ue,"LI",{});var dBe=s(Z4);NFe=n(dBe,"STRONG",{});var T4t=s(NFe);j7r=r(T4t,"rembert"),T4t.forEach(t),D7r=r(dBe," \u2014 "),HH=n(dBe,"A",{href:!0});var M4t=s(HH);G7r=r(M4t,"TFRemBertForMultipleChoice"),M4t.forEach(t),O7r=r(dBe," (RemBERT model)"),dBe.forEach(t),V7r=i(ue),eE=n(ue,"LI",{});var cBe=s(eE);jFe=n(cBe,"STRONG",{});var E4t=s(jFe);X7r=r(E4t,"roberta"),E4t.forEach(t),z7r=r(cBe," \u2014 "),UH=n(cBe,"A",{href:!0});var C4t=s(UH);W7r=r(C4t,"TFRobertaForMultipleChoice"),C4t.forEach(t),Q7r=r(cBe," (RoBERTa model)"),cBe.forEach(t),H7r=i(ue),oE=n(ue,"LI",{});var fBe=s(oE);DFe=n(fBe,"STRONG",{});var w4t=s(DFe);U7r=r(w4t,"roformer"),w4t.forEach(t),J7r=r(fBe," \u2014 "),JH=n(fBe,"A",{href:!0});var A4t=s(JH);Y7r=r(A4t,"TFRoFormerForMultipleChoice"),A4t.forEach(t),K7r=r(fBe," (RoFormer model)"),fBe.forEach(t),Z7r=i(ue),rE=n(ue,"LI",{});var mBe=s(rE);GFe=n(mBe,"STRONG",{});var y4t=s(GFe);eMr=r(y4t,"xlm"),y4t.forEach(t),oMr=r(mBe," \u2014 "),YH=n(mBe,"A",{href:!0});var L4t=s(YH);rMr=r(L4t,"TFXLMForMultipleChoice"),L4t.forEach(t),tMr=r(mBe," (XLM model)"),mBe.forEach(t),aMr=i(ue),tE=n(ue,"LI",{});var gBe=s(tE);OFe=n(gBe,"STRONG",{});var x4t=s(OFe);nMr=r(x4t,"xlm-roberta"),x4t.forEach(t),sMr=r(gBe," \u2014 "),KH=n(gBe,"A",{href:!0});var $4t=s(KH);lMr=r($4t,"TFXLMRobertaForMultipleChoice"),$4t.forEach(t),iMr=r(gBe," (XLM-RoBERTa model)"),gBe.forEach(t),dMr=i(ue),aE=n(ue,"LI",{});var hBe=s(aE);VFe=n(hBe,"STRONG",{});var k4t=s(VFe);cMr=r(k4t,"xlnet"),k4t.forEach(t),fMr=r(hBe," \u2014 "),ZH=n(hBe,"A",{href:!0});var S4t=s(ZH);mMr=r(S4t,"TFXLNetForMultipleChoice"),S4t.forEach(t),gMr=r(hBe," (XLNet model)"),hBe.forEach(t),ue.forEach(t),hMr=i(yl),T(nE.$$.fragment,yl),yl.forEach(t),Al.forEach(t),CNe=i(f),cc=n(f,"H2",{class:!0});var $De=s(cc);sE=n($De,"A",{id:!0,class:!0,href:!0});var R4t=s(sE);XFe=n(R4t,"SPAN",{});var B4t=s(XFe);T(I8.$$.fragment,B4t),B4t.forEach(t),R4t.forEach(t),pMr=i($De),zFe=n($De,"SPAN",{});var P4t=s(zFe);_Mr=r(P4t,"TFAutoModelForNextSentencePrediction"),P4t.forEach(t),$De.forEach(t),wNe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(q8.$$.fragment,Ll),uMr=i(Ll),fc=n(Ll,"P",{});var KZ=s(fc);bMr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eU=n(KZ,"A",{href:!0});var I4t=s(eU);vMr=r(I4t,"from_pretrained()"),I4t.forEach(t),FMr=r(KZ," class method or the "),oU=n(KZ,"A",{href:!0});var q4t=s(oU);TMr=r(q4t,"from_config()"),q4t.forEach(t),MMr=r(KZ,` class
method.`),KZ.forEach(t),EMr=i(Ll),N8=n(Ll,"P",{});var kDe=s(N8);CMr=r(kDe,"This class cannot be instantiated directly using "),WFe=n(kDe,"CODE",{});var N4t=s(WFe);wMr=r(N4t,"__init__()"),N4t.forEach(t),AMr=r(kDe," (throws an error)."),kDe.forEach(t),yMr=i(Ll),Pt=n(Ll,"DIV",{class:!0});var xA=s(Pt);T(j8.$$.fragment,xA),LMr=i(xA),QFe=n(xA,"P",{});var j4t=s(QFe);xMr=r(j4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),j4t.forEach(t),$Mr=i(xA),mc=n(xA,"P",{});var ZZ=s(mc);kMr=r(ZZ,`Note:
Loading a model from its configuration file does `),HFe=n(ZZ,"STRONG",{});var D4t=s(HFe);SMr=r(D4t,"not"),D4t.forEach(t),RMr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(ZZ,"A",{href:!0});var G4t=s(rU);BMr=r(G4t,"from_pretrained()"),G4t.forEach(t),PMr=r(ZZ," to load the model weights."),ZZ.forEach(t),IMr=i(xA),T(lE.$$.fragment,xA),xA.forEach(t),qMr=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(D8.$$.fragment,xl),NMr=i(xl),UFe=n(xl,"P",{});var O4t=s(UFe);jMr=r(O4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),O4t.forEach(t),DMr=i(xl),ln=n(xl,"P",{});var $A=s(ln);GMr=r($A,"The model class to instantiate is selected based on the "),JFe=n($A,"CODE",{});var V4t=s(JFe);OMr=r(V4t,"model_type"),V4t.forEach(t),VMr=r($A,` property of the config object (either
passed as an argument or loaded from `),YFe=n($A,"CODE",{});var X4t=s(YFe);XMr=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),zMr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n($A,"CODE",{});var z4t=s(KFe);WMr=r(z4t,"pretrained_model_name_or_path"),z4t.forEach(t),QMr=r($A,":"),$A.forEach(t),HMr=i(xl),G8=n(xl,"UL",{});var SDe=s(G8);iE=n(SDe,"LI",{});var pBe=s(iE);ZFe=n(pBe,"STRONG",{});var W4t=s(ZFe);UMr=r(W4t,"bert"),W4t.forEach(t),JMr=r(pBe," \u2014 "),tU=n(pBe,"A",{href:!0});var Q4t=s(tU);YMr=r(Q4t,"TFBertForNextSentencePrediction"),Q4t.forEach(t),KMr=r(pBe," (BERT model)"),pBe.forEach(t),ZMr=i(SDe),dE=n(SDe,"LI",{});var _Be=s(dE);e0e=n(_Be,"STRONG",{});var H4t=s(e0e);e4r=r(H4t,"mobilebert"),H4t.forEach(t),o4r=r(_Be," \u2014 "),aU=n(_Be,"A",{href:!0});var U4t=s(aU);r4r=r(U4t,"TFMobileBertForNextSentencePrediction"),U4t.forEach(t),t4r=r(_Be," (MobileBERT model)"),_Be.forEach(t),SDe.forEach(t),a4r=i(xl),T(cE.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),ANe=i(f),gc=n(f,"H2",{class:!0});var RDe=s(gc);fE=n(RDe,"A",{id:!0,class:!0,href:!0});var J4t=s(fE);o0e=n(J4t,"SPAN",{});var Y4t=s(o0e);T(O8.$$.fragment,Y4t),Y4t.forEach(t),J4t.forEach(t),n4r=i(RDe),r0e=n(RDe,"SPAN",{});var K4t=s(r0e);s4r=r(K4t,"TFAutoModelForTableQuestionAnswering"),K4t.forEach(t),RDe.forEach(t),yNe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(V8.$$.fragment,$l),l4r=i($l),hc=n($l,"P",{});var eee=s(hc);i4r=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nU=n(eee,"A",{href:!0});var Z4t=s(nU);d4r=r(Z4t,"from_pretrained()"),Z4t.forEach(t),c4r=r(eee," class method or the "),sU=n(eee,"A",{href:!0});var eEt=s(sU);f4r=r(eEt,"from_config()"),eEt.forEach(t),m4r=r(eee,` class
method.`),eee.forEach(t),g4r=i($l),X8=n($l,"P",{});var BDe=s(X8);h4r=r(BDe,"This class cannot be instantiated directly using "),t0e=n(BDe,"CODE",{});var oEt=s(t0e);p4r=r(oEt,"__init__()"),oEt.forEach(t),_4r=r(BDe," (throws an error)."),BDe.forEach(t),u4r=i($l),It=n($l,"DIV",{class:!0});var kA=s(It);T(z8.$$.fragment,kA),b4r=i(kA),a0e=n(kA,"P",{});var rEt=s(a0e);v4r=r(rEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rEt.forEach(t),F4r=i(kA),pc=n(kA,"P",{});var oee=s(pc);T4r=r(oee,`Note:
Loading a model from its configuration file does `),n0e=n(oee,"STRONG",{});var tEt=s(n0e);M4r=r(tEt,"not"),tEt.forEach(t),E4r=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(oee,"A",{href:!0});var aEt=s(lU);C4r=r(aEt,"from_pretrained()"),aEt.forEach(t),w4r=r(oee," to load the model weights."),oee.forEach(t),A4r=i(kA),T(mE.$$.fragment,kA),kA.forEach(t),y4r=i($l),Br=n($l,"DIV",{class:!0});var kl=s(Br);T(W8.$$.fragment,kl),L4r=i(kl),s0e=n(kl,"P",{});var nEt=s(s0e);x4r=r(nEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nEt.forEach(t),$4r=i(kl),dn=n(kl,"P",{});var SA=s(dn);k4r=r(SA,"The model class to instantiate is selected based on the "),l0e=n(SA,"CODE",{});var sEt=s(l0e);S4r=r(sEt,"model_type"),sEt.forEach(t),R4r=r(SA,` property of the config object (either
passed as an argument or loaded from `),i0e=n(SA,"CODE",{});var lEt=s(i0e);B4r=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),P4r=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=n(SA,"CODE",{});var iEt=s(d0e);I4r=r(iEt,"pretrained_model_name_or_path"),iEt.forEach(t),q4r=r(SA,":"),SA.forEach(t),N4r=i(kl),c0e=n(kl,"UL",{});var dEt=s(c0e);gE=n(dEt,"LI",{});var uBe=s(gE);f0e=n(uBe,"STRONG",{});var cEt=s(f0e);j4r=r(cEt,"tapas"),cEt.forEach(t),D4r=r(uBe," \u2014 "),iU=n(uBe,"A",{href:!0});var fEt=s(iU);G4r=r(fEt,"TFTapasForQuestionAnswering"),fEt.forEach(t),O4r=r(uBe," (TAPAS model)"),uBe.forEach(t),dEt.forEach(t),V4r=i(kl),T(hE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),LNe=i(f),_c=n(f,"H2",{class:!0});var PDe=s(_c);pE=n(PDe,"A",{id:!0,class:!0,href:!0});var mEt=s(pE);m0e=n(mEt,"SPAN",{});var gEt=s(m0e);T(Q8.$$.fragment,gEt),gEt.forEach(t),mEt.forEach(t),X4r=i(PDe),g0e=n(PDe,"SPAN",{});var hEt=s(g0e);z4r=r(hEt,"TFAutoModelForTokenClassification"),hEt.forEach(t),PDe.forEach(t),xNe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(H8.$$.fragment,Sl),W4r=i(Sl),uc=n(Sl,"P",{});var ree=s(uc);Q4r=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dU=n(ree,"A",{href:!0});var pEt=s(dU);H4r=r(pEt,"from_pretrained()"),pEt.forEach(t),U4r=r(ree," class method or the "),cU=n(ree,"A",{href:!0});var _Et=s(cU);J4r=r(_Et,"from_config()"),_Et.forEach(t),Y4r=r(ree,` class
method.`),ree.forEach(t),K4r=i(Sl),U8=n(Sl,"P",{});var IDe=s(U8);Z4r=r(IDe,"This class cannot be instantiated directly using "),h0e=n(IDe,"CODE",{});var uEt=s(h0e);eEr=r(uEt,"__init__()"),uEt.forEach(t),oEr=r(IDe," (throws an error)."),IDe.forEach(t),rEr=i(Sl),qt=n(Sl,"DIV",{class:!0});var RA=s(qt);T(J8.$$.fragment,RA),tEr=i(RA),p0e=n(RA,"P",{});var bEt=s(p0e);aEr=r(bEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bEt.forEach(t),nEr=i(RA),bc=n(RA,"P",{});var tee=s(bc);sEr=r(tee,`Note:
Loading a model from its configuration file does `),_0e=n(tee,"STRONG",{});var vEt=s(_0e);lEr=r(vEt,"not"),vEt.forEach(t),iEr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(tee,"A",{href:!0});var FEt=s(fU);dEr=r(FEt,"from_pretrained()"),FEt.forEach(t),cEr=r(tee," to load the model weights."),tee.forEach(t),fEr=i(RA),T(_E.$$.fragment,RA),RA.forEach(t),mEr=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(Y8.$$.fragment,Rl),gEr=i(Rl),u0e=n(Rl,"P",{});var TEt=s(u0e);hEr=r(TEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),TEt.forEach(t),pEr=i(Rl),cn=n(Rl,"P",{});var BA=s(cn);_Er=r(BA,"The model class to instantiate is selected based on the "),b0e=n(BA,"CODE",{});var MEt=s(b0e);uEr=r(MEt,"model_type"),MEt.forEach(t),bEr=r(BA,` property of the config object (either
passed as an argument or loaded from `),v0e=n(BA,"CODE",{});var EEt=s(v0e);vEr=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),FEr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=n(BA,"CODE",{});var CEt=s(F0e);TEr=r(CEt,"pretrained_model_name_or_path"),CEt.forEach(t),MEr=r(BA,":"),BA.forEach(t),EEr=i(Rl),de=n(Rl,"UL",{});var me=s(de);uE=n(me,"LI",{});var bBe=s(uE);T0e=n(bBe,"STRONG",{});var wEt=s(T0e);CEr=r(wEt,"albert"),wEt.forEach(t),wEr=r(bBe," \u2014 "),mU=n(bBe,"A",{href:!0});var AEt=s(mU);AEr=r(AEt,"TFAlbertForTokenClassification"),AEt.forEach(t),yEr=r(bBe," (ALBERT model)"),bBe.forEach(t),LEr=i(me),bE=n(me,"LI",{});var vBe=s(bE);M0e=n(vBe,"STRONG",{});var yEt=s(M0e);xEr=r(yEt,"bert"),yEt.forEach(t),$Er=r(vBe," \u2014 "),gU=n(vBe,"A",{href:!0});var LEt=s(gU);kEr=r(LEt,"TFBertForTokenClassification"),LEt.forEach(t),SEr=r(vBe," (BERT model)"),vBe.forEach(t),REr=i(me),vE=n(me,"LI",{});var FBe=s(vE);E0e=n(FBe,"STRONG",{});var xEt=s(E0e);BEr=r(xEt,"camembert"),xEt.forEach(t),PEr=r(FBe," \u2014 "),hU=n(FBe,"A",{href:!0});var $Et=s(hU);IEr=r($Et,"TFCamembertForTokenClassification"),$Et.forEach(t),qEr=r(FBe," (CamemBERT model)"),FBe.forEach(t),NEr=i(me),FE=n(me,"LI",{});var TBe=s(FE);C0e=n(TBe,"STRONG",{});var kEt=s(C0e);jEr=r(kEt,"convbert"),kEt.forEach(t),DEr=r(TBe," \u2014 "),pU=n(TBe,"A",{href:!0});var SEt=s(pU);GEr=r(SEt,"TFConvBertForTokenClassification"),SEt.forEach(t),OEr=r(TBe," (ConvBERT model)"),TBe.forEach(t),VEr=i(me),TE=n(me,"LI",{});var MBe=s(TE);w0e=n(MBe,"STRONG",{});var REt=s(w0e);XEr=r(REt,"deberta"),REt.forEach(t),zEr=r(MBe," \u2014 "),_U=n(MBe,"A",{href:!0});var BEt=s(_U);WEr=r(BEt,"TFDebertaForTokenClassification"),BEt.forEach(t),QEr=r(MBe," (DeBERTa model)"),MBe.forEach(t),HEr=i(me),ME=n(me,"LI",{});var EBe=s(ME);A0e=n(EBe,"STRONG",{});var PEt=s(A0e);UEr=r(PEt,"deberta-v2"),PEt.forEach(t),JEr=r(EBe," \u2014 "),uU=n(EBe,"A",{href:!0});var IEt=s(uU);YEr=r(IEt,"TFDebertaV2ForTokenClassification"),IEt.forEach(t),KEr=r(EBe," (DeBERTa-v2 model)"),EBe.forEach(t),ZEr=i(me),EE=n(me,"LI",{});var CBe=s(EE);y0e=n(CBe,"STRONG",{});var qEt=s(y0e);eCr=r(qEt,"distilbert"),qEt.forEach(t),oCr=r(CBe," \u2014 "),bU=n(CBe,"A",{href:!0});var NEt=s(bU);rCr=r(NEt,"TFDistilBertForTokenClassification"),NEt.forEach(t),tCr=r(CBe," (DistilBERT model)"),CBe.forEach(t),aCr=i(me),CE=n(me,"LI",{});var wBe=s(CE);L0e=n(wBe,"STRONG",{});var jEt=s(L0e);nCr=r(jEt,"electra"),jEt.forEach(t),sCr=r(wBe," \u2014 "),vU=n(wBe,"A",{href:!0});var DEt=s(vU);lCr=r(DEt,"TFElectraForTokenClassification"),DEt.forEach(t),iCr=r(wBe," (ELECTRA model)"),wBe.forEach(t),dCr=i(me),wE=n(me,"LI",{});var ABe=s(wE);x0e=n(ABe,"STRONG",{});var GEt=s(x0e);cCr=r(GEt,"flaubert"),GEt.forEach(t),fCr=r(ABe," \u2014 "),FU=n(ABe,"A",{href:!0});var OEt=s(FU);mCr=r(OEt,"TFFlaubertForTokenClassification"),OEt.forEach(t),gCr=r(ABe," (FlauBERT model)"),ABe.forEach(t),hCr=i(me),AE=n(me,"LI",{});var yBe=s(AE);$0e=n(yBe,"STRONG",{});var VEt=s($0e);pCr=r(VEt,"funnel"),VEt.forEach(t),_Cr=r(yBe," \u2014 "),TU=n(yBe,"A",{href:!0});var XEt=s(TU);uCr=r(XEt,"TFFunnelForTokenClassification"),XEt.forEach(t),bCr=r(yBe," (Funnel Transformer model)"),yBe.forEach(t),vCr=i(me),yE=n(me,"LI",{});var LBe=s(yE);k0e=n(LBe,"STRONG",{});var zEt=s(k0e);FCr=r(zEt,"layoutlm"),zEt.forEach(t),TCr=r(LBe," \u2014 "),MU=n(LBe,"A",{href:!0});var WEt=s(MU);MCr=r(WEt,"TFLayoutLMForTokenClassification"),WEt.forEach(t),ECr=r(LBe," (LayoutLM model)"),LBe.forEach(t),CCr=i(me),LE=n(me,"LI",{});var xBe=s(LE);S0e=n(xBe,"STRONG",{});var QEt=s(S0e);wCr=r(QEt,"longformer"),QEt.forEach(t),ACr=r(xBe," \u2014 "),EU=n(xBe,"A",{href:!0});var HEt=s(EU);yCr=r(HEt,"TFLongformerForTokenClassification"),HEt.forEach(t),LCr=r(xBe," (Longformer model)"),xBe.forEach(t),xCr=i(me),xE=n(me,"LI",{});var $Be=s(xE);R0e=n($Be,"STRONG",{});var UEt=s(R0e);$Cr=r(UEt,"mobilebert"),UEt.forEach(t),kCr=r($Be," \u2014 "),CU=n($Be,"A",{href:!0});var JEt=s(CU);SCr=r(JEt,"TFMobileBertForTokenClassification"),JEt.forEach(t),RCr=r($Be," (MobileBERT model)"),$Be.forEach(t),BCr=i(me),$E=n(me,"LI",{});var kBe=s($E);B0e=n(kBe,"STRONG",{});var YEt=s(B0e);PCr=r(YEt,"mpnet"),YEt.forEach(t),ICr=r(kBe," \u2014 "),wU=n(kBe,"A",{href:!0});var KEt=s(wU);qCr=r(KEt,"TFMPNetForTokenClassification"),KEt.forEach(t),NCr=r(kBe," (MPNet model)"),kBe.forEach(t),jCr=i(me),kE=n(me,"LI",{});var SBe=s(kE);P0e=n(SBe,"STRONG",{});var ZEt=s(P0e);DCr=r(ZEt,"rembert"),ZEt.forEach(t),GCr=r(SBe," \u2014 "),AU=n(SBe,"A",{href:!0});var eCt=s(AU);OCr=r(eCt,"TFRemBertForTokenClassification"),eCt.forEach(t),VCr=r(SBe," (RemBERT model)"),SBe.forEach(t),XCr=i(me),SE=n(me,"LI",{});var RBe=s(SE);I0e=n(RBe,"STRONG",{});var oCt=s(I0e);zCr=r(oCt,"roberta"),oCt.forEach(t),WCr=r(RBe," \u2014 "),yU=n(RBe,"A",{href:!0});var rCt=s(yU);QCr=r(rCt,"TFRobertaForTokenClassification"),rCt.forEach(t),HCr=r(RBe," (RoBERTa model)"),RBe.forEach(t),UCr=i(me),RE=n(me,"LI",{});var BBe=s(RE);q0e=n(BBe,"STRONG",{});var tCt=s(q0e);JCr=r(tCt,"roformer"),tCt.forEach(t),YCr=r(BBe," \u2014 "),LU=n(BBe,"A",{href:!0});var aCt=s(LU);KCr=r(aCt,"TFRoFormerForTokenClassification"),aCt.forEach(t),ZCr=r(BBe," (RoFormer model)"),BBe.forEach(t),e5r=i(me),BE=n(me,"LI",{});var PBe=s(BE);N0e=n(PBe,"STRONG",{});var nCt=s(N0e);o5r=r(nCt,"xlm"),nCt.forEach(t),r5r=r(PBe," \u2014 "),xU=n(PBe,"A",{href:!0});var sCt=s(xU);t5r=r(sCt,"TFXLMForTokenClassification"),sCt.forEach(t),a5r=r(PBe," (XLM model)"),PBe.forEach(t),n5r=i(me),PE=n(me,"LI",{});var IBe=s(PE);j0e=n(IBe,"STRONG",{});var lCt=s(j0e);s5r=r(lCt,"xlm-roberta"),lCt.forEach(t),l5r=r(IBe," \u2014 "),$U=n(IBe,"A",{href:!0});var iCt=s($U);i5r=r(iCt,"TFXLMRobertaForTokenClassification"),iCt.forEach(t),d5r=r(IBe," (XLM-RoBERTa model)"),IBe.forEach(t),c5r=i(me),IE=n(me,"LI",{});var qBe=s(IE);D0e=n(qBe,"STRONG",{});var dCt=s(D0e);f5r=r(dCt,"xlnet"),dCt.forEach(t),m5r=r(qBe," \u2014 "),kU=n(qBe,"A",{href:!0});var cCt=s(kU);g5r=r(cCt,"TFXLNetForTokenClassification"),cCt.forEach(t),h5r=r(qBe," (XLNet model)"),qBe.forEach(t),me.forEach(t),p5r=i(Rl),T(qE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),$Ne=i(f),vc=n(f,"H2",{class:!0});var qDe=s(vc);NE=n(qDe,"A",{id:!0,class:!0,href:!0});var fCt=s(NE);G0e=n(fCt,"SPAN",{});var mCt=s(G0e);T(K8.$$.fragment,mCt),mCt.forEach(t),fCt.forEach(t),_5r=i(qDe),O0e=n(qDe,"SPAN",{});var gCt=s(O0e);u5r=r(gCt,"TFAutoModelForQuestionAnswering"),gCt.forEach(t),qDe.forEach(t),kNe=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(Z8.$$.fragment,Bl),b5r=i(Bl),Fc=n(Bl,"P",{});var aee=s(Fc);v5r=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SU=n(aee,"A",{href:!0});var hCt=s(SU);F5r=r(hCt,"from_pretrained()"),hCt.forEach(t),T5r=r(aee," class method or the "),RU=n(aee,"A",{href:!0});var pCt=s(RU);M5r=r(pCt,"from_config()"),pCt.forEach(t),E5r=r(aee,` class
method.`),aee.forEach(t),C5r=i(Bl),e9=n(Bl,"P",{});var NDe=s(e9);w5r=r(NDe,"This class cannot be instantiated directly using "),V0e=n(NDe,"CODE",{});var _Ct=s(V0e);A5r=r(_Ct,"__init__()"),_Ct.forEach(t),y5r=r(NDe," (throws an error)."),NDe.forEach(t),L5r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var PA=s(Nt);T(o9.$$.fragment,PA),x5r=i(PA),X0e=n(PA,"P",{});var uCt=s(X0e);$5r=r(uCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uCt.forEach(t),k5r=i(PA),Tc=n(PA,"P",{});var nee=s(Tc);S5r=r(nee,`Note:
Loading a model from its configuration file does `),z0e=n(nee,"STRONG",{});var bCt=s(z0e);R5r=r(bCt,"not"),bCt.forEach(t),B5r=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=n(nee,"A",{href:!0});var vCt=s(BU);P5r=r(vCt,"from_pretrained()"),vCt.forEach(t),I5r=r(nee," to load the model weights."),nee.forEach(t),q5r=i(PA),T(jE.$$.fragment,PA),PA.forEach(t),N5r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Pl=s(Ir);T(r9.$$.fragment,Pl),j5r=i(Pl),W0e=n(Pl,"P",{});var FCt=s(W0e);D5r=r(FCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FCt.forEach(t),G5r=i(Pl),fn=n(Pl,"P",{});var IA=s(fn);O5r=r(IA,"The model class to instantiate is selected based on the "),Q0e=n(IA,"CODE",{});var TCt=s(Q0e);V5r=r(TCt,"model_type"),TCt.forEach(t),X5r=r(IA,` property of the config object (either
passed as an argument or loaded from `),H0e=n(IA,"CODE",{});var MCt=s(H0e);z5r=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),W5r=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=n(IA,"CODE",{});var ECt=s(U0e);Q5r=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),H5r=r(IA,":"),IA.forEach(t),U5r=i(Pl),ce=n(Pl,"UL",{});var ge=s(ce);DE=n(ge,"LI",{});var NBe=s(DE);J0e=n(NBe,"STRONG",{});var CCt=s(J0e);J5r=r(CCt,"albert"),CCt.forEach(t),Y5r=r(NBe," \u2014 "),PU=n(NBe,"A",{href:!0});var wCt=s(PU);K5r=r(wCt,"TFAlbertForQuestionAnswering"),wCt.forEach(t),Z5r=r(NBe," (ALBERT model)"),NBe.forEach(t),e3r=i(ge),GE=n(ge,"LI",{});var jBe=s(GE);Y0e=n(jBe,"STRONG",{});var ACt=s(Y0e);o3r=r(ACt,"bert"),ACt.forEach(t),r3r=r(jBe," \u2014 "),IU=n(jBe,"A",{href:!0});var yCt=s(IU);t3r=r(yCt,"TFBertForQuestionAnswering"),yCt.forEach(t),a3r=r(jBe," (BERT model)"),jBe.forEach(t),n3r=i(ge),OE=n(ge,"LI",{});var DBe=s(OE);K0e=n(DBe,"STRONG",{});var LCt=s(K0e);s3r=r(LCt,"camembert"),LCt.forEach(t),l3r=r(DBe," \u2014 "),qU=n(DBe,"A",{href:!0});var xCt=s(qU);i3r=r(xCt,"TFCamembertForQuestionAnswering"),xCt.forEach(t),d3r=r(DBe," (CamemBERT model)"),DBe.forEach(t),c3r=i(ge),VE=n(ge,"LI",{});var GBe=s(VE);Z0e=n(GBe,"STRONG",{});var $Ct=s(Z0e);f3r=r($Ct,"convbert"),$Ct.forEach(t),m3r=r(GBe," \u2014 "),NU=n(GBe,"A",{href:!0});var kCt=s(NU);g3r=r(kCt,"TFConvBertForQuestionAnswering"),kCt.forEach(t),h3r=r(GBe," (ConvBERT model)"),GBe.forEach(t),p3r=i(ge),XE=n(ge,"LI",{});var OBe=s(XE);eTe=n(OBe,"STRONG",{});var SCt=s(eTe);_3r=r(SCt,"deberta"),SCt.forEach(t),u3r=r(OBe," \u2014 "),jU=n(OBe,"A",{href:!0});var RCt=s(jU);b3r=r(RCt,"TFDebertaForQuestionAnswering"),RCt.forEach(t),v3r=r(OBe," (DeBERTa model)"),OBe.forEach(t),F3r=i(ge),zE=n(ge,"LI",{});var VBe=s(zE);oTe=n(VBe,"STRONG",{});var BCt=s(oTe);T3r=r(BCt,"deberta-v2"),BCt.forEach(t),M3r=r(VBe," \u2014 "),DU=n(VBe,"A",{href:!0});var PCt=s(DU);E3r=r(PCt,"TFDebertaV2ForQuestionAnswering"),PCt.forEach(t),C3r=r(VBe," (DeBERTa-v2 model)"),VBe.forEach(t),w3r=i(ge),WE=n(ge,"LI",{});var XBe=s(WE);rTe=n(XBe,"STRONG",{});var ICt=s(rTe);A3r=r(ICt,"distilbert"),ICt.forEach(t),y3r=r(XBe," \u2014 "),GU=n(XBe,"A",{href:!0});var qCt=s(GU);L3r=r(qCt,"TFDistilBertForQuestionAnswering"),qCt.forEach(t),x3r=r(XBe," (DistilBERT model)"),XBe.forEach(t),$3r=i(ge),QE=n(ge,"LI",{});var zBe=s(QE);tTe=n(zBe,"STRONG",{});var NCt=s(tTe);k3r=r(NCt,"electra"),NCt.forEach(t),S3r=r(zBe," \u2014 "),OU=n(zBe,"A",{href:!0});var jCt=s(OU);R3r=r(jCt,"TFElectraForQuestionAnswering"),jCt.forEach(t),B3r=r(zBe," (ELECTRA model)"),zBe.forEach(t),P3r=i(ge),HE=n(ge,"LI",{});var WBe=s(HE);aTe=n(WBe,"STRONG",{});var DCt=s(aTe);I3r=r(DCt,"flaubert"),DCt.forEach(t),q3r=r(WBe," \u2014 "),VU=n(WBe,"A",{href:!0});var GCt=s(VU);N3r=r(GCt,"TFFlaubertForQuestionAnsweringSimple"),GCt.forEach(t),j3r=r(WBe," (FlauBERT model)"),WBe.forEach(t),D3r=i(ge),UE=n(ge,"LI",{});var QBe=s(UE);nTe=n(QBe,"STRONG",{});var OCt=s(nTe);G3r=r(OCt,"funnel"),OCt.forEach(t),O3r=r(QBe," \u2014 "),XU=n(QBe,"A",{href:!0});var VCt=s(XU);V3r=r(VCt,"TFFunnelForQuestionAnswering"),VCt.forEach(t),X3r=r(QBe," (Funnel Transformer model)"),QBe.forEach(t),z3r=i(ge),JE=n(ge,"LI",{});var HBe=s(JE);sTe=n(HBe,"STRONG",{});var XCt=s(sTe);W3r=r(XCt,"gptj"),XCt.forEach(t),Q3r=r(HBe," \u2014 "),zU=n(HBe,"A",{href:!0});var zCt=s(zU);H3r=r(zCt,"TFGPTJForQuestionAnswering"),zCt.forEach(t),U3r=r(HBe," (GPT-J model)"),HBe.forEach(t),J3r=i(ge),YE=n(ge,"LI",{});var UBe=s(YE);lTe=n(UBe,"STRONG",{});var WCt=s(lTe);Y3r=r(WCt,"longformer"),WCt.forEach(t),K3r=r(UBe," \u2014 "),WU=n(UBe,"A",{href:!0});var QCt=s(WU);Z3r=r(QCt,"TFLongformerForQuestionAnswering"),QCt.forEach(t),ewr=r(UBe," (Longformer model)"),UBe.forEach(t),owr=i(ge),KE=n(ge,"LI",{});var JBe=s(KE);iTe=n(JBe,"STRONG",{});var HCt=s(iTe);rwr=r(HCt,"mobilebert"),HCt.forEach(t),twr=r(JBe," \u2014 "),QU=n(JBe,"A",{href:!0});var UCt=s(QU);awr=r(UCt,"TFMobileBertForQuestionAnswering"),UCt.forEach(t),nwr=r(JBe," (MobileBERT model)"),JBe.forEach(t),swr=i(ge),ZE=n(ge,"LI",{});var YBe=s(ZE);dTe=n(YBe,"STRONG",{});var JCt=s(dTe);lwr=r(JCt,"mpnet"),JCt.forEach(t),iwr=r(YBe," \u2014 "),HU=n(YBe,"A",{href:!0});var YCt=s(HU);dwr=r(YCt,"TFMPNetForQuestionAnswering"),YCt.forEach(t),cwr=r(YBe," (MPNet model)"),YBe.forEach(t),fwr=i(ge),eC=n(ge,"LI",{});var KBe=s(eC);cTe=n(KBe,"STRONG",{});var KCt=s(cTe);mwr=r(KCt,"rembert"),KCt.forEach(t),gwr=r(KBe," \u2014 "),UU=n(KBe,"A",{href:!0});var ZCt=s(UU);hwr=r(ZCt,"TFRemBertForQuestionAnswering"),ZCt.forEach(t),pwr=r(KBe," (RemBERT model)"),KBe.forEach(t),_wr=i(ge),oC=n(ge,"LI",{});var ZBe=s(oC);fTe=n(ZBe,"STRONG",{});var e5t=s(fTe);uwr=r(e5t,"roberta"),e5t.forEach(t),bwr=r(ZBe," \u2014 "),JU=n(ZBe,"A",{href:!0});var o5t=s(JU);vwr=r(o5t,"TFRobertaForQuestionAnswering"),o5t.forEach(t),Fwr=r(ZBe," (RoBERTa model)"),ZBe.forEach(t),Twr=i(ge),rC=n(ge,"LI",{});var ePe=s(rC);mTe=n(ePe,"STRONG",{});var r5t=s(mTe);Mwr=r(r5t,"roformer"),r5t.forEach(t),Ewr=r(ePe," \u2014 "),YU=n(ePe,"A",{href:!0});var t5t=s(YU);Cwr=r(t5t,"TFRoFormerForQuestionAnswering"),t5t.forEach(t),wwr=r(ePe," (RoFormer model)"),ePe.forEach(t),Awr=i(ge),tC=n(ge,"LI",{});var oPe=s(tC);gTe=n(oPe,"STRONG",{});var a5t=s(gTe);ywr=r(a5t,"xlm"),a5t.forEach(t),Lwr=r(oPe," \u2014 "),KU=n(oPe,"A",{href:!0});var n5t=s(KU);xwr=r(n5t,"TFXLMForQuestionAnsweringSimple"),n5t.forEach(t),$wr=r(oPe," (XLM model)"),oPe.forEach(t),kwr=i(ge),aC=n(ge,"LI",{});var rPe=s(aC);hTe=n(rPe,"STRONG",{});var s5t=s(hTe);Swr=r(s5t,"xlm-roberta"),s5t.forEach(t),Rwr=r(rPe," \u2014 "),ZU=n(rPe,"A",{href:!0});var l5t=s(ZU);Bwr=r(l5t,"TFXLMRobertaForQuestionAnswering"),l5t.forEach(t),Pwr=r(rPe," (XLM-RoBERTa model)"),rPe.forEach(t),Iwr=i(ge),nC=n(ge,"LI",{});var tPe=s(nC);pTe=n(tPe,"STRONG",{});var i5t=s(pTe);qwr=r(i5t,"xlnet"),i5t.forEach(t),Nwr=r(tPe," \u2014 "),eJ=n(tPe,"A",{href:!0});var d5t=s(eJ);jwr=r(d5t,"TFXLNetForQuestionAnsweringSimple"),d5t.forEach(t),Dwr=r(tPe," (XLNet model)"),tPe.forEach(t),ge.forEach(t),Gwr=i(Pl),T(sC.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),SNe=i(f),Mc=n(f,"H2",{class:!0});var jDe=s(Mc);lC=n(jDe,"A",{id:!0,class:!0,href:!0});var c5t=s(lC);_Te=n(c5t,"SPAN",{});var f5t=s(_Te);T(t9.$$.fragment,f5t),f5t.forEach(t),c5t.forEach(t),Owr=i(jDe),uTe=n(jDe,"SPAN",{});var m5t=s(uTe);Vwr=r(m5t,"TFAutoModelForVision2Seq"),m5t.forEach(t),jDe.forEach(t),RNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(a9.$$.fragment,Il),Xwr=i(Il),Ec=n(Il,"P",{});var see=s(Ec);zwr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oJ=n(see,"A",{href:!0});var g5t=s(oJ);Wwr=r(g5t,"from_pretrained()"),g5t.forEach(t),Qwr=r(see," class method or the "),rJ=n(see,"A",{href:!0});var h5t=s(rJ);Hwr=r(h5t,"from_config()"),h5t.forEach(t),Uwr=r(see,` class
method.`),see.forEach(t),Jwr=i(Il),n9=n(Il,"P",{});var DDe=s(n9);Ywr=r(DDe,"This class cannot be instantiated directly using "),bTe=n(DDe,"CODE",{});var p5t=s(bTe);Kwr=r(p5t,"__init__()"),p5t.forEach(t),Zwr=r(DDe," (throws an error)."),DDe.forEach(t),eAr=i(Il),jt=n(Il,"DIV",{class:!0});var qA=s(jt);T(s9.$$.fragment,qA),oAr=i(qA),vTe=n(qA,"P",{});var _5t=s(vTe);rAr=r(_5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_5t.forEach(t),tAr=i(qA),Cc=n(qA,"P",{});var lee=s(Cc);aAr=r(lee,`Note:
Loading a model from its configuration file does `),FTe=n(lee,"STRONG",{});var u5t=s(FTe);nAr=r(u5t,"not"),u5t.forEach(t),sAr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(lee,"A",{href:!0});var b5t=s(tJ);lAr=r(b5t,"from_pretrained()"),b5t.forEach(t),iAr=r(lee," to load the model weights."),lee.forEach(t),dAr=i(qA),T(iC.$$.fragment,qA),qA.forEach(t),cAr=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(l9.$$.fragment,ql),fAr=i(ql),TTe=n(ql,"P",{});var v5t=s(TTe);mAr=r(v5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),v5t.forEach(t),gAr=i(ql),mn=n(ql,"P",{});var NA=s(mn);hAr=r(NA,"The model class to instantiate is selected based on the "),MTe=n(NA,"CODE",{});var F5t=s(MTe);pAr=r(F5t,"model_type"),F5t.forEach(t),_Ar=r(NA,` property of the config object (either
passed as an argument or loaded from `),ETe=n(NA,"CODE",{});var T5t=s(ETe);uAr=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),bAr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(NA,"CODE",{});var M5t=s(CTe);vAr=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),FAr=r(NA,":"),NA.forEach(t),TAr=i(ql),wTe=n(ql,"UL",{});var E5t=s(wTe);dC=n(E5t,"LI",{});var aPe=s(dC);ATe=n(aPe,"STRONG",{});var C5t=s(ATe);MAr=r(C5t,"vision-encoder-decoder"),C5t.forEach(t),EAr=r(aPe," \u2014 "),aJ=n(aPe,"A",{href:!0});var w5t=s(aJ);CAr=r(w5t,"TFVisionEncoderDecoderModel"),w5t.forEach(t),wAr=r(aPe," (Vision Encoder decoder model)"),aPe.forEach(t),E5t.forEach(t),AAr=i(ql),T(cC.$$.fragment,ql),ql.forEach(t),Il.forEach(t),BNe=i(f),wc=n(f,"H2",{class:!0});var GDe=s(wc);fC=n(GDe,"A",{id:!0,class:!0,href:!0});var A5t=s(fC);yTe=n(A5t,"SPAN",{});var y5t=s(yTe);T(i9.$$.fragment,y5t),y5t.forEach(t),A5t.forEach(t),yAr=i(GDe),LTe=n(GDe,"SPAN",{});var L5t=s(LTe);LAr=r(L5t,"TFAutoModelForSpeechSeq2Seq"),L5t.forEach(t),GDe.forEach(t),PNe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(d9.$$.fragment,Nl),xAr=i(Nl),Ac=n(Nl,"P",{});var iee=s(Ac);$Ar=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nJ=n(iee,"A",{href:!0});var x5t=s(nJ);kAr=r(x5t,"from_pretrained()"),x5t.forEach(t),SAr=r(iee," class method or the "),sJ=n(iee,"A",{href:!0});var $5t=s(sJ);RAr=r($5t,"from_config()"),$5t.forEach(t),BAr=r(iee,` class
method.`),iee.forEach(t),PAr=i(Nl),c9=n(Nl,"P",{});var ODe=s(c9);IAr=r(ODe,"This class cannot be instantiated directly using "),xTe=n(ODe,"CODE",{});var k5t=s(xTe);qAr=r(k5t,"__init__()"),k5t.forEach(t),NAr=r(ODe," (throws an error)."),ODe.forEach(t),jAr=i(Nl),Dt=n(Nl,"DIV",{class:!0});var jA=s(Dt);T(f9.$$.fragment,jA),DAr=i(jA),$Te=n(jA,"P",{});var S5t=s($Te);GAr=r(S5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),S5t.forEach(t),OAr=i(jA),yc=n(jA,"P",{});var dee=s(yc);VAr=r(dee,`Note:
Loading a model from its configuration file does `),kTe=n(dee,"STRONG",{});var R5t=s(kTe);XAr=r(R5t,"not"),R5t.forEach(t),zAr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(dee,"A",{href:!0});var B5t=s(lJ);WAr=r(B5t,"from_pretrained()"),B5t.forEach(t),QAr=r(dee," to load the model weights."),dee.forEach(t),HAr=i(jA),T(mC.$$.fragment,jA),jA.forEach(t),UAr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(m9.$$.fragment,jl),JAr=i(jl),STe=n(jl,"P",{});var P5t=s(STe);YAr=r(P5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),P5t.forEach(t),KAr=i(jl),gn=n(jl,"P",{});var DA=s(gn);ZAr=r(DA,"The model class to instantiate is selected based on the "),RTe=n(DA,"CODE",{});var I5t=s(RTe);e6r=r(I5t,"model_type"),I5t.forEach(t),o6r=r(DA,` property of the config object (either
passed as an argument or loaded from `),BTe=n(DA,"CODE",{});var q5t=s(BTe);r6r=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),t6r=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(DA,"CODE",{});var N5t=s(PTe);a6r=r(N5t,"pretrained_model_name_or_path"),N5t.forEach(t),n6r=r(DA,":"),DA.forEach(t),s6r=i(jl),ITe=n(jl,"UL",{});var j5t=s(ITe);gC=n(j5t,"LI",{});var nPe=s(gC);qTe=n(nPe,"STRONG",{});var D5t=s(qTe);l6r=r(D5t,"speech_to_text"),D5t.forEach(t),i6r=r(nPe," \u2014 "),iJ=n(nPe,"A",{href:!0});var G5t=s(iJ);d6r=r(G5t,"TFSpeech2TextForConditionalGeneration"),G5t.forEach(t),c6r=r(nPe," (Speech2Text model)"),nPe.forEach(t),j5t.forEach(t),f6r=i(jl),T(hC.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),INe=i(f),Lc=n(f,"H2",{class:!0});var VDe=s(Lc);pC=n(VDe,"A",{id:!0,class:!0,href:!0});var O5t=s(pC);NTe=n(O5t,"SPAN",{});var V5t=s(NTe);T(g9.$$.fragment,V5t),V5t.forEach(t),O5t.forEach(t),m6r=i(VDe),jTe=n(VDe,"SPAN",{});var X5t=s(jTe);g6r=r(X5t,"FlaxAutoModel"),X5t.forEach(t),VDe.forEach(t),qNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(h9.$$.fragment,Dl),h6r=i(Dl),xc=n(Dl,"P",{});var cee=s(xc);p6r=r(cee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dJ=n(cee,"A",{href:!0});var z5t=s(dJ);_6r=r(z5t,"from_pretrained()"),z5t.forEach(t),u6r=r(cee," class method or the "),cJ=n(cee,"A",{href:!0});var W5t=s(cJ);b6r=r(W5t,"from_config()"),W5t.forEach(t),v6r=r(cee,` class
method.`),cee.forEach(t),F6r=i(Dl),p9=n(Dl,"P",{});var XDe=s(p9);T6r=r(XDe,"This class cannot be instantiated directly using "),DTe=n(XDe,"CODE",{});var Q5t=s(DTe);M6r=r(Q5t,"__init__()"),Q5t.forEach(t),E6r=r(XDe," (throws an error)."),XDe.forEach(t),C6r=i(Dl),Gt=n(Dl,"DIV",{class:!0});var GA=s(Gt);T(_9.$$.fragment,GA),w6r=i(GA),GTe=n(GA,"P",{});var H5t=s(GTe);A6r=r(H5t,"Instantiates one of the base model classes of the library from a configuration."),H5t.forEach(t),y6r=i(GA),$c=n(GA,"P",{});var fee=s($c);L6r=r(fee,`Note:
Loading a model from its configuration file does `),OTe=n(fee,"STRONG",{});var U5t=s(OTe);x6r=r(U5t,"not"),U5t.forEach(t),$6r=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(fee,"A",{href:!0});var J5t=s(fJ);k6r=r(J5t,"from_pretrained()"),J5t.forEach(t),S6r=r(fee," to load the model weights."),fee.forEach(t),R6r=i(GA),T(_C.$$.fragment,GA),GA.forEach(t),B6r=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(u9.$$.fragment,Gl),P6r=i(Gl),VTe=n(Gl,"P",{});var Y5t=s(VTe);I6r=r(Y5t,"Instantiate one of the base model classes of the library from a pretrained model."),Y5t.forEach(t),q6r=i(Gl),hn=n(Gl,"P",{});var OA=s(hn);N6r=r(OA,"The model class to instantiate is selected based on the "),XTe=n(OA,"CODE",{});var K5t=s(XTe);j6r=r(K5t,"model_type"),K5t.forEach(t),D6r=r(OA,` property of the config object (either
passed as an argument or loaded from `),zTe=n(OA,"CODE",{});var Z5t=s(zTe);G6r=r(Z5t,"pretrained_model_name_or_path"),Z5t.forEach(t),O6r=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(OA,"CODE",{});var e3t=s(WTe);V6r=r(e3t,"pretrained_model_name_or_path"),e3t.forEach(t),X6r=r(OA,":"),OA.forEach(t),z6r=i(Gl),re=n(Gl,"UL",{});var ne=s(re);uC=n(ne,"LI",{});var sPe=s(uC);QTe=n(sPe,"STRONG",{});var o3t=s(QTe);W6r=r(o3t,"albert"),o3t.forEach(t),Q6r=r(sPe," \u2014 "),mJ=n(sPe,"A",{href:!0});var r3t=s(mJ);H6r=r(r3t,"FlaxAlbertModel"),r3t.forEach(t),U6r=r(sPe," (ALBERT model)"),sPe.forEach(t),J6r=i(ne),bC=n(ne,"LI",{});var lPe=s(bC);HTe=n(lPe,"STRONG",{});var t3t=s(HTe);Y6r=r(t3t,"bart"),t3t.forEach(t),K6r=r(lPe," \u2014 "),gJ=n(lPe,"A",{href:!0});var a3t=s(gJ);Z6r=r(a3t,"FlaxBartModel"),a3t.forEach(t),eyr=r(lPe," (BART model)"),lPe.forEach(t),oyr=i(ne),vC=n(ne,"LI",{});var iPe=s(vC);UTe=n(iPe,"STRONG",{});var n3t=s(UTe);ryr=r(n3t,"beit"),n3t.forEach(t),tyr=r(iPe," \u2014 "),hJ=n(iPe,"A",{href:!0});var s3t=s(hJ);ayr=r(s3t,"FlaxBeitModel"),s3t.forEach(t),nyr=r(iPe," (BEiT model)"),iPe.forEach(t),syr=i(ne),FC=n(ne,"LI",{});var dPe=s(FC);JTe=n(dPe,"STRONG",{});var l3t=s(JTe);lyr=r(l3t,"bert"),l3t.forEach(t),iyr=r(dPe," \u2014 "),pJ=n(dPe,"A",{href:!0});var i3t=s(pJ);dyr=r(i3t,"FlaxBertModel"),i3t.forEach(t),cyr=r(dPe," (BERT model)"),dPe.forEach(t),fyr=i(ne),TC=n(ne,"LI",{});var cPe=s(TC);YTe=n(cPe,"STRONG",{});var d3t=s(YTe);myr=r(d3t,"big_bird"),d3t.forEach(t),gyr=r(cPe," \u2014 "),_J=n(cPe,"A",{href:!0});var c3t=s(_J);hyr=r(c3t,"FlaxBigBirdModel"),c3t.forEach(t),pyr=r(cPe," (BigBird model)"),cPe.forEach(t),_yr=i(ne),MC=n(ne,"LI",{});var fPe=s(MC);KTe=n(fPe,"STRONG",{});var f3t=s(KTe);uyr=r(f3t,"blenderbot"),f3t.forEach(t),byr=r(fPe," \u2014 "),uJ=n(fPe,"A",{href:!0});var m3t=s(uJ);vyr=r(m3t,"FlaxBlenderbotModel"),m3t.forEach(t),Fyr=r(fPe," (Blenderbot model)"),fPe.forEach(t),Tyr=i(ne),EC=n(ne,"LI",{});var mPe=s(EC);ZTe=n(mPe,"STRONG",{});var g3t=s(ZTe);Myr=r(g3t,"blenderbot-small"),g3t.forEach(t),Eyr=r(mPe," \u2014 "),bJ=n(mPe,"A",{href:!0});var h3t=s(bJ);Cyr=r(h3t,"FlaxBlenderbotSmallModel"),h3t.forEach(t),wyr=r(mPe," (BlenderbotSmall model)"),mPe.forEach(t),Ayr=i(ne),CC=n(ne,"LI",{});var gPe=s(CC);e7e=n(gPe,"STRONG",{});var p3t=s(e7e);yyr=r(p3t,"clip"),p3t.forEach(t),Lyr=r(gPe," \u2014 "),vJ=n(gPe,"A",{href:!0});var _3t=s(vJ);xyr=r(_3t,"FlaxCLIPModel"),_3t.forEach(t),$yr=r(gPe," (CLIP model)"),gPe.forEach(t),kyr=i(ne),wC=n(ne,"LI",{});var hPe=s(wC);o7e=n(hPe,"STRONG",{});var u3t=s(o7e);Syr=r(u3t,"distilbert"),u3t.forEach(t),Ryr=r(hPe," \u2014 "),FJ=n(hPe,"A",{href:!0});var b3t=s(FJ);Byr=r(b3t,"FlaxDistilBertModel"),b3t.forEach(t),Pyr=r(hPe," (DistilBERT model)"),hPe.forEach(t),Iyr=i(ne),AC=n(ne,"LI",{});var pPe=s(AC);r7e=n(pPe,"STRONG",{});var v3t=s(r7e);qyr=r(v3t,"electra"),v3t.forEach(t),Nyr=r(pPe," \u2014 "),TJ=n(pPe,"A",{href:!0});var F3t=s(TJ);jyr=r(F3t,"FlaxElectraModel"),F3t.forEach(t),Dyr=r(pPe," (ELECTRA model)"),pPe.forEach(t),Gyr=i(ne),yC=n(ne,"LI",{});var _Pe=s(yC);t7e=n(_Pe,"STRONG",{});var T3t=s(t7e);Oyr=r(T3t,"gpt2"),T3t.forEach(t),Vyr=r(_Pe," \u2014 "),MJ=n(_Pe,"A",{href:!0});var M3t=s(MJ);Xyr=r(M3t,"FlaxGPT2Model"),M3t.forEach(t),zyr=r(_Pe," (OpenAI GPT-2 model)"),_Pe.forEach(t),Wyr=i(ne),LC=n(ne,"LI",{});var uPe=s(LC);a7e=n(uPe,"STRONG",{});var E3t=s(a7e);Qyr=r(E3t,"gpt_neo"),E3t.forEach(t),Hyr=r(uPe," \u2014 "),EJ=n(uPe,"A",{href:!0});var C3t=s(EJ);Uyr=r(C3t,"FlaxGPTNeoModel"),C3t.forEach(t),Jyr=r(uPe," (GPT Neo model)"),uPe.forEach(t),Yyr=i(ne),xC=n(ne,"LI",{});var bPe=s(xC);n7e=n(bPe,"STRONG",{});var w3t=s(n7e);Kyr=r(w3t,"gptj"),w3t.forEach(t),Zyr=r(bPe," \u2014 "),CJ=n(bPe,"A",{href:!0});var A3t=s(CJ);eLr=r(A3t,"FlaxGPTJModel"),A3t.forEach(t),oLr=r(bPe," (GPT-J model)"),bPe.forEach(t),rLr=i(ne),$C=n(ne,"LI",{});var vPe=s($C);s7e=n(vPe,"STRONG",{});var y3t=s(s7e);tLr=r(y3t,"marian"),y3t.forEach(t),aLr=r(vPe," \u2014 "),wJ=n(vPe,"A",{href:!0});var L3t=s(wJ);nLr=r(L3t,"FlaxMarianModel"),L3t.forEach(t),sLr=r(vPe," (Marian model)"),vPe.forEach(t),lLr=i(ne),kC=n(ne,"LI",{});var FPe=s(kC);l7e=n(FPe,"STRONG",{});var x3t=s(l7e);iLr=r(x3t,"mbart"),x3t.forEach(t),dLr=r(FPe," \u2014 "),AJ=n(FPe,"A",{href:!0});var $3t=s(AJ);cLr=r($3t,"FlaxMBartModel"),$3t.forEach(t),fLr=r(FPe," (mBART model)"),FPe.forEach(t),mLr=i(ne),SC=n(ne,"LI",{});var TPe=s(SC);i7e=n(TPe,"STRONG",{});var k3t=s(i7e);gLr=r(k3t,"mt5"),k3t.forEach(t),hLr=r(TPe," \u2014 "),yJ=n(TPe,"A",{href:!0});var S3t=s(yJ);pLr=r(S3t,"FlaxMT5Model"),S3t.forEach(t),_Lr=r(TPe," (mT5 model)"),TPe.forEach(t),uLr=i(ne),RC=n(ne,"LI",{});var MPe=s(RC);d7e=n(MPe,"STRONG",{});var R3t=s(d7e);bLr=r(R3t,"pegasus"),R3t.forEach(t),vLr=r(MPe," \u2014 "),LJ=n(MPe,"A",{href:!0});var B3t=s(LJ);FLr=r(B3t,"FlaxPegasusModel"),B3t.forEach(t),TLr=r(MPe," (Pegasus model)"),MPe.forEach(t),MLr=i(ne),BC=n(ne,"LI",{});var EPe=s(BC);c7e=n(EPe,"STRONG",{});var P3t=s(c7e);ELr=r(P3t,"roberta"),P3t.forEach(t),CLr=r(EPe," \u2014 "),xJ=n(EPe,"A",{href:!0});var I3t=s(xJ);wLr=r(I3t,"FlaxRobertaModel"),I3t.forEach(t),ALr=r(EPe," (RoBERTa model)"),EPe.forEach(t),yLr=i(ne),PC=n(ne,"LI",{});var CPe=s(PC);f7e=n(CPe,"STRONG",{});var q3t=s(f7e);LLr=r(q3t,"roformer"),q3t.forEach(t),xLr=r(CPe," \u2014 "),$J=n(CPe,"A",{href:!0});var N3t=s($J);$Lr=r(N3t,"FlaxRoFormerModel"),N3t.forEach(t),kLr=r(CPe," (RoFormer model)"),CPe.forEach(t),SLr=i(ne),IC=n(ne,"LI",{});var wPe=s(IC);m7e=n(wPe,"STRONG",{});var j3t=s(m7e);RLr=r(j3t,"t5"),j3t.forEach(t),BLr=r(wPe," \u2014 "),kJ=n(wPe,"A",{href:!0});var D3t=s(kJ);PLr=r(D3t,"FlaxT5Model"),D3t.forEach(t),ILr=r(wPe," (T5 model)"),wPe.forEach(t),qLr=i(ne),qC=n(ne,"LI",{});var APe=s(qC);g7e=n(APe,"STRONG",{});var G3t=s(g7e);NLr=r(G3t,"vision-text-dual-encoder"),G3t.forEach(t),jLr=r(APe," \u2014 "),SJ=n(APe,"A",{href:!0});var O3t=s(SJ);DLr=r(O3t,"FlaxVisionTextDualEncoderModel"),O3t.forEach(t),GLr=r(APe," (VisionTextDualEncoder model)"),APe.forEach(t),OLr=i(ne),NC=n(ne,"LI",{});var yPe=s(NC);h7e=n(yPe,"STRONG",{});var V3t=s(h7e);VLr=r(V3t,"vit"),V3t.forEach(t),XLr=r(yPe," \u2014 "),RJ=n(yPe,"A",{href:!0});var X3t=s(RJ);zLr=r(X3t,"FlaxViTModel"),X3t.forEach(t),WLr=r(yPe," (ViT model)"),yPe.forEach(t),QLr=i(ne),jC=n(ne,"LI",{});var LPe=s(jC);p7e=n(LPe,"STRONG",{});var z3t=s(p7e);HLr=r(z3t,"wav2vec2"),z3t.forEach(t),ULr=r(LPe," \u2014 "),BJ=n(LPe,"A",{href:!0});var W3t=s(BJ);JLr=r(W3t,"FlaxWav2Vec2Model"),W3t.forEach(t),YLr=r(LPe," (Wav2Vec2 model)"),LPe.forEach(t),KLr=i(ne),DC=n(ne,"LI",{});var xPe=s(DC);_7e=n(xPe,"STRONG",{});var Q3t=s(_7e);ZLr=r(Q3t,"xglm"),Q3t.forEach(t),e8r=r(xPe," \u2014 "),PJ=n(xPe,"A",{href:!0});var H3t=s(PJ);o8r=r(H3t,"FlaxXGLMModel"),H3t.forEach(t),r8r=r(xPe," (XGLM model)"),xPe.forEach(t),t8r=i(ne),GC=n(ne,"LI",{});var $Pe=s(GC);u7e=n($Pe,"STRONG",{});var U3t=s(u7e);a8r=r(U3t,"xlm-roberta"),U3t.forEach(t),n8r=r($Pe," \u2014 "),IJ=n($Pe,"A",{href:!0});var J3t=s(IJ);s8r=r(J3t,"FlaxXLMRobertaModel"),J3t.forEach(t),l8r=r($Pe," (XLM-RoBERTa model)"),$Pe.forEach(t),ne.forEach(t),i8r=i(Gl),T(OC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),NNe=i(f),kc=n(f,"H2",{class:!0});var zDe=s(kc);VC=n(zDe,"A",{id:!0,class:!0,href:!0});var Y3t=s(VC);b7e=n(Y3t,"SPAN",{});var K3t=s(b7e);T(b9.$$.fragment,K3t),K3t.forEach(t),Y3t.forEach(t),d8r=i(zDe),v7e=n(zDe,"SPAN",{});var Z3t=s(v7e);c8r=r(Z3t,"FlaxAutoModelForCausalLM"),Z3t.forEach(t),zDe.forEach(t),jNe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(v9.$$.fragment,Ol),f8r=i(Ol),Sc=n(Ol,"P",{});var mee=s(Sc);m8r=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qJ=n(mee,"A",{href:!0});var ewt=s(qJ);g8r=r(ewt,"from_pretrained()"),ewt.forEach(t),h8r=r(mee," class method or the "),NJ=n(mee,"A",{href:!0});var owt=s(NJ);p8r=r(owt,"from_config()"),owt.forEach(t),_8r=r(mee,` class
method.`),mee.forEach(t),u8r=i(Ol),F9=n(Ol,"P",{});var WDe=s(F9);b8r=r(WDe,"This class cannot be instantiated directly using "),F7e=n(WDe,"CODE",{});var rwt=s(F7e);v8r=r(rwt,"__init__()"),rwt.forEach(t),F8r=r(WDe," (throws an error)."),WDe.forEach(t),T8r=i(Ol),Ot=n(Ol,"DIV",{class:!0});var VA=s(Ot);T(T9.$$.fragment,VA),M8r=i(VA),T7e=n(VA,"P",{});var twt=s(T7e);E8r=r(twt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),twt.forEach(t),C8r=i(VA),Rc=n(VA,"P",{});var gee=s(Rc);w8r=r(gee,`Note:
Loading a model from its configuration file does `),M7e=n(gee,"STRONG",{});var awt=s(M7e);A8r=r(awt,"not"),awt.forEach(t),y8r=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(gee,"A",{href:!0});var nwt=s(jJ);L8r=r(nwt,"from_pretrained()"),nwt.forEach(t),x8r=r(gee," to load the model weights."),gee.forEach(t),$8r=i(VA),T(XC.$$.fragment,VA),VA.forEach(t),k8r=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(M9.$$.fragment,Vl),S8r=i(Vl),E7e=n(Vl,"P",{});var swt=s(E7e);R8r=r(swt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),swt.forEach(t),B8r=i(Vl),pn=n(Vl,"P",{});var XA=s(pn);P8r=r(XA,"The model class to instantiate is selected based on the "),C7e=n(XA,"CODE",{});var lwt=s(C7e);I8r=r(lwt,"model_type"),lwt.forEach(t),q8r=r(XA,` property of the config object (either
passed as an argument or loaded from `),w7e=n(XA,"CODE",{});var iwt=s(w7e);N8r=r(iwt,"pretrained_model_name_or_path"),iwt.forEach(t),j8r=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=n(XA,"CODE",{});var dwt=s(A7e);D8r=r(dwt,"pretrained_model_name_or_path"),dwt.forEach(t),G8r=r(XA,":"),XA.forEach(t),O8r=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);zC=n(Xe,"LI",{});var kPe=s(zC);y7e=n(kPe,"STRONG",{});var cwt=s(y7e);V8r=r(cwt,"bart"),cwt.forEach(t),X8r=r(kPe," \u2014 "),DJ=n(kPe,"A",{href:!0});var fwt=s(DJ);z8r=r(fwt,"FlaxBartForCausalLM"),fwt.forEach(t),W8r=r(kPe," (BART model)"),kPe.forEach(t),Q8r=i(Xe),WC=n(Xe,"LI",{});var SPe=s(WC);L7e=n(SPe,"STRONG",{});var mwt=s(L7e);H8r=r(mwt,"bert"),mwt.forEach(t),U8r=r(SPe," \u2014 "),GJ=n(SPe,"A",{href:!0});var gwt=s(GJ);J8r=r(gwt,"FlaxBertForCausalLM"),gwt.forEach(t),Y8r=r(SPe," (BERT model)"),SPe.forEach(t),K8r=i(Xe),QC=n(Xe,"LI",{});var RPe=s(QC);x7e=n(RPe,"STRONG",{});var hwt=s(x7e);Z8r=r(hwt,"big_bird"),hwt.forEach(t),e9r=r(RPe," \u2014 "),OJ=n(RPe,"A",{href:!0});var pwt=s(OJ);o9r=r(pwt,"FlaxBigBirdForCausalLM"),pwt.forEach(t),r9r=r(RPe," (BigBird model)"),RPe.forEach(t),t9r=i(Xe),HC=n(Xe,"LI",{});var BPe=s(HC);$7e=n(BPe,"STRONG",{});var _wt=s($7e);a9r=r(_wt,"electra"),_wt.forEach(t),n9r=r(BPe," \u2014 "),VJ=n(BPe,"A",{href:!0});var uwt=s(VJ);s9r=r(uwt,"FlaxElectraForCausalLM"),uwt.forEach(t),l9r=r(BPe," (ELECTRA model)"),BPe.forEach(t),i9r=i(Xe),UC=n(Xe,"LI",{});var PPe=s(UC);k7e=n(PPe,"STRONG",{});var bwt=s(k7e);d9r=r(bwt,"gpt2"),bwt.forEach(t),c9r=r(PPe," \u2014 "),XJ=n(PPe,"A",{href:!0});var vwt=s(XJ);f9r=r(vwt,"FlaxGPT2LMHeadModel"),vwt.forEach(t),m9r=r(PPe," (OpenAI GPT-2 model)"),PPe.forEach(t),g9r=i(Xe),JC=n(Xe,"LI",{});var IPe=s(JC);S7e=n(IPe,"STRONG",{});var Fwt=s(S7e);h9r=r(Fwt,"gpt_neo"),Fwt.forEach(t),p9r=r(IPe," \u2014 "),zJ=n(IPe,"A",{href:!0});var Twt=s(zJ);_9r=r(Twt,"FlaxGPTNeoForCausalLM"),Twt.forEach(t),u9r=r(IPe," (GPT Neo model)"),IPe.forEach(t),b9r=i(Xe),YC=n(Xe,"LI",{});var qPe=s(YC);R7e=n(qPe,"STRONG",{});var Mwt=s(R7e);v9r=r(Mwt,"gptj"),Mwt.forEach(t),F9r=r(qPe," \u2014 "),WJ=n(qPe,"A",{href:!0});var Ewt=s(WJ);T9r=r(Ewt,"FlaxGPTJForCausalLM"),Ewt.forEach(t),M9r=r(qPe," (GPT-J model)"),qPe.forEach(t),E9r=i(Xe),KC=n(Xe,"LI",{});var NPe=s(KC);B7e=n(NPe,"STRONG",{});var Cwt=s(B7e);C9r=r(Cwt,"roberta"),Cwt.forEach(t),w9r=r(NPe," \u2014 "),QJ=n(NPe,"A",{href:!0});var wwt=s(QJ);A9r=r(wwt,"FlaxRobertaForCausalLM"),wwt.forEach(t),y9r=r(NPe," (RoBERTa model)"),NPe.forEach(t),L9r=i(Xe),ZC=n(Xe,"LI",{});var jPe=s(ZC);P7e=n(jPe,"STRONG",{});var Awt=s(P7e);x9r=r(Awt,"xglm"),Awt.forEach(t),$9r=r(jPe," \u2014 "),HJ=n(jPe,"A",{href:!0});var ywt=s(HJ);k9r=r(ywt,"FlaxXGLMForCausalLM"),ywt.forEach(t),S9r=r(jPe," (XGLM model)"),jPe.forEach(t),Xe.forEach(t),R9r=i(Vl),T(e5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),DNe=i(f),Bc=n(f,"H2",{class:!0});var QDe=s(Bc);o5=n(QDe,"A",{id:!0,class:!0,href:!0});var Lwt=s(o5);I7e=n(Lwt,"SPAN",{});var xwt=s(I7e);T(E9.$$.fragment,xwt),xwt.forEach(t),Lwt.forEach(t),B9r=i(QDe),q7e=n(QDe,"SPAN",{});var $wt=s(q7e);P9r=r($wt,"FlaxAutoModelForPreTraining"),$wt.forEach(t),QDe.forEach(t),GNe=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(C9.$$.fragment,Xl),I9r=i(Xl),Pc=n(Xl,"P",{});var hee=s(Pc);q9r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UJ=n(hee,"A",{href:!0});var kwt=s(UJ);N9r=r(kwt,"from_pretrained()"),kwt.forEach(t),j9r=r(hee," class method or the "),JJ=n(hee,"A",{href:!0});var Swt=s(JJ);D9r=r(Swt,"from_config()"),Swt.forEach(t),G9r=r(hee,` class
method.`),hee.forEach(t),O9r=i(Xl),w9=n(Xl,"P",{});var HDe=s(w9);V9r=r(HDe,"This class cannot be instantiated directly using "),N7e=n(HDe,"CODE",{});var Rwt=s(N7e);X9r=r(Rwt,"__init__()"),Rwt.forEach(t),z9r=r(HDe," (throws an error)."),HDe.forEach(t),W9r=i(Xl),Vt=n(Xl,"DIV",{class:!0});var zA=s(Vt);T(A9.$$.fragment,zA),Q9r=i(zA),j7e=n(zA,"P",{});var Bwt=s(j7e);H9r=r(Bwt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Bwt.forEach(t),U9r=i(zA),Ic=n(zA,"P",{});var pee=s(Ic);J9r=r(pee,`Note:
Loading a model from its configuration file does `),D7e=n(pee,"STRONG",{});var Pwt=s(D7e);Y9r=r(Pwt,"not"),Pwt.forEach(t),K9r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(pee,"A",{href:!0});var Iwt=s(YJ);Z9r=r(Iwt,"from_pretrained()"),Iwt.forEach(t),exr=r(pee," to load the model weights."),pee.forEach(t),oxr=i(zA),T(r5.$$.fragment,zA),zA.forEach(t),rxr=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(y9.$$.fragment,zl),txr=i(zl),G7e=n(zl,"P",{});var qwt=s(G7e);axr=r(qwt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qwt.forEach(t),nxr=i(zl),_n=n(zl,"P",{});var WA=s(_n);sxr=r(WA,"The model class to instantiate is selected based on the "),O7e=n(WA,"CODE",{});var Nwt=s(O7e);lxr=r(Nwt,"model_type"),Nwt.forEach(t),ixr=r(WA,` property of the config object (either
passed as an argument or loaded from `),V7e=n(WA,"CODE",{});var jwt=s(V7e);dxr=r(jwt,"pretrained_model_name_or_path"),jwt.forEach(t),cxr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=n(WA,"CODE",{});var Dwt=s(X7e);fxr=r(Dwt,"pretrained_model_name_or_path"),Dwt.forEach(t),mxr=r(WA,":"),WA.forEach(t),gxr=i(zl),Me=n(zl,"UL",{});var we=s(Me);t5=n(we,"LI",{});var DPe=s(t5);z7e=n(DPe,"STRONG",{});var Gwt=s(z7e);hxr=r(Gwt,"albert"),Gwt.forEach(t),pxr=r(DPe," \u2014 "),KJ=n(DPe,"A",{href:!0});var Owt=s(KJ);_xr=r(Owt,"FlaxAlbertForPreTraining"),Owt.forEach(t),uxr=r(DPe," (ALBERT model)"),DPe.forEach(t),bxr=i(we),a5=n(we,"LI",{});var GPe=s(a5);W7e=n(GPe,"STRONG",{});var Vwt=s(W7e);vxr=r(Vwt,"bart"),Vwt.forEach(t),Fxr=r(GPe," \u2014 "),ZJ=n(GPe,"A",{href:!0});var Xwt=s(ZJ);Txr=r(Xwt,"FlaxBartForConditionalGeneration"),Xwt.forEach(t),Mxr=r(GPe," (BART model)"),GPe.forEach(t),Exr=i(we),n5=n(we,"LI",{});var OPe=s(n5);Q7e=n(OPe,"STRONG",{});var zwt=s(Q7e);Cxr=r(zwt,"bert"),zwt.forEach(t),wxr=r(OPe," \u2014 "),eY=n(OPe,"A",{href:!0});var Wwt=s(eY);Axr=r(Wwt,"FlaxBertForPreTraining"),Wwt.forEach(t),yxr=r(OPe," (BERT model)"),OPe.forEach(t),Lxr=i(we),s5=n(we,"LI",{});var VPe=s(s5);H7e=n(VPe,"STRONG",{});var Qwt=s(H7e);xxr=r(Qwt,"big_bird"),Qwt.forEach(t),$xr=r(VPe," \u2014 "),oY=n(VPe,"A",{href:!0});var Hwt=s(oY);kxr=r(Hwt,"FlaxBigBirdForPreTraining"),Hwt.forEach(t),Sxr=r(VPe," (BigBird model)"),VPe.forEach(t),Rxr=i(we),l5=n(we,"LI",{});var XPe=s(l5);U7e=n(XPe,"STRONG",{});var Uwt=s(U7e);Bxr=r(Uwt,"electra"),Uwt.forEach(t),Pxr=r(XPe," \u2014 "),rY=n(XPe,"A",{href:!0});var Jwt=s(rY);Ixr=r(Jwt,"FlaxElectraForPreTraining"),Jwt.forEach(t),qxr=r(XPe," (ELECTRA model)"),XPe.forEach(t),Nxr=i(we),i5=n(we,"LI",{});var zPe=s(i5);J7e=n(zPe,"STRONG",{});var Ywt=s(J7e);jxr=r(Ywt,"mbart"),Ywt.forEach(t),Dxr=r(zPe," \u2014 "),tY=n(zPe,"A",{href:!0});var Kwt=s(tY);Gxr=r(Kwt,"FlaxMBartForConditionalGeneration"),Kwt.forEach(t),Oxr=r(zPe," (mBART model)"),zPe.forEach(t),Vxr=i(we),d5=n(we,"LI",{});var WPe=s(d5);Y7e=n(WPe,"STRONG",{});var Zwt=s(Y7e);Xxr=r(Zwt,"mt5"),Zwt.forEach(t),zxr=r(WPe," \u2014 "),aY=n(WPe,"A",{href:!0});var eAt=s(aY);Wxr=r(eAt,"FlaxMT5ForConditionalGeneration"),eAt.forEach(t),Qxr=r(WPe," (mT5 model)"),WPe.forEach(t),Hxr=i(we),c5=n(we,"LI",{});var QPe=s(c5);K7e=n(QPe,"STRONG",{});var oAt=s(K7e);Uxr=r(oAt,"roberta"),oAt.forEach(t),Jxr=r(QPe," \u2014 "),nY=n(QPe,"A",{href:!0});var rAt=s(nY);Yxr=r(rAt,"FlaxRobertaForMaskedLM"),rAt.forEach(t),Kxr=r(QPe," (RoBERTa model)"),QPe.forEach(t),Zxr=i(we),f5=n(we,"LI",{});var HPe=s(f5);Z7e=n(HPe,"STRONG",{});var tAt=s(Z7e);e$r=r(tAt,"roformer"),tAt.forEach(t),o$r=r(HPe," \u2014 "),sY=n(HPe,"A",{href:!0});var aAt=s(sY);r$r=r(aAt,"FlaxRoFormerForMaskedLM"),aAt.forEach(t),t$r=r(HPe," (RoFormer model)"),HPe.forEach(t),a$r=i(we),m5=n(we,"LI",{});var UPe=s(m5);eMe=n(UPe,"STRONG",{});var nAt=s(eMe);n$r=r(nAt,"t5"),nAt.forEach(t),s$r=r(UPe," \u2014 "),lY=n(UPe,"A",{href:!0});var sAt=s(lY);l$r=r(sAt,"FlaxT5ForConditionalGeneration"),sAt.forEach(t),i$r=r(UPe," (T5 model)"),UPe.forEach(t),d$r=i(we),g5=n(we,"LI",{});var JPe=s(g5);oMe=n(JPe,"STRONG",{});var lAt=s(oMe);c$r=r(lAt,"wav2vec2"),lAt.forEach(t),f$r=r(JPe," \u2014 "),iY=n(JPe,"A",{href:!0});var iAt=s(iY);m$r=r(iAt,"FlaxWav2Vec2ForPreTraining"),iAt.forEach(t),g$r=r(JPe," (Wav2Vec2 model)"),JPe.forEach(t),h$r=i(we),h5=n(we,"LI",{});var YPe=s(h5);rMe=n(YPe,"STRONG",{});var dAt=s(rMe);p$r=r(dAt,"xlm-roberta"),dAt.forEach(t),_$r=r(YPe," \u2014 "),dY=n(YPe,"A",{href:!0});var cAt=s(dY);u$r=r(cAt,"FlaxXLMRobertaForMaskedLM"),cAt.forEach(t),b$r=r(YPe," (XLM-RoBERTa model)"),YPe.forEach(t),we.forEach(t),v$r=i(zl),T(p5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),ONe=i(f),qc=n(f,"H2",{class:!0});var UDe=s(qc);_5=n(UDe,"A",{id:!0,class:!0,href:!0});var fAt=s(_5);tMe=n(fAt,"SPAN",{});var mAt=s(tMe);T(L9.$$.fragment,mAt),mAt.forEach(t),fAt.forEach(t),F$r=i(UDe),aMe=n(UDe,"SPAN",{});var gAt=s(aMe);T$r=r(gAt,"FlaxAutoModelForMaskedLM"),gAt.forEach(t),UDe.forEach(t),VNe=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(x9.$$.fragment,Wl),M$r=i(Wl),Nc=n(Wl,"P",{});var _ee=s(Nc);E$r=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cY=n(_ee,"A",{href:!0});var hAt=s(cY);C$r=r(hAt,"from_pretrained()"),hAt.forEach(t),w$r=r(_ee," class method or the "),fY=n(_ee,"A",{href:!0});var pAt=s(fY);A$r=r(pAt,"from_config()"),pAt.forEach(t),y$r=r(_ee,` class
method.`),_ee.forEach(t),L$r=i(Wl),$9=n(Wl,"P",{});var JDe=s($9);x$r=r(JDe,"This class cannot be instantiated directly using "),nMe=n(JDe,"CODE",{});var _At=s(nMe);$$r=r(_At,"__init__()"),_At.forEach(t),k$r=r(JDe," (throws an error)."),JDe.forEach(t),S$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var QA=s(Xt);T(k9.$$.fragment,QA),R$r=i(QA),sMe=n(QA,"P",{});var uAt=s(sMe);B$r=r(uAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uAt.forEach(t),P$r=i(QA),jc=n(QA,"P",{});var uee=s(jc);I$r=r(uee,`Note:
Loading a model from its configuration file does `),lMe=n(uee,"STRONG",{});var bAt=s(lMe);q$r=r(bAt,"not"),bAt.forEach(t),N$r=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(uee,"A",{href:!0});var vAt=s(mY);j$r=r(vAt,"from_pretrained()"),vAt.forEach(t),D$r=r(uee," to load the model weights."),uee.forEach(t),G$r=i(QA),T(u5.$$.fragment,QA),QA.forEach(t),O$r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(S9.$$.fragment,Ql),V$r=i(Ql),iMe=n(Ql,"P",{});var FAt=s(iMe);X$r=r(FAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FAt.forEach(t),z$r=i(Ql),un=n(Ql,"P",{});var HA=s(un);W$r=r(HA,"The model class to instantiate is selected based on the "),dMe=n(HA,"CODE",{});var TAt=s(dMe);Q$r=r(TAt,"model_type"),TAt.forEach(t),H$r=r(HA,` property of the config object (either
passed as an argument or loaded from `),cMe=n(HA,"CODE",{});var MAt=s(cMe);U$r=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),J$r=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=n(HA,"CODE",{});var EAt=s(fMe);Y$r=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),K$r=r(HA,":"),HA.forEach(t),Z$r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);b5=n(Ie,"LI",{});var KPe=s(b5);mMe=n(KPe,"STRONG",{});var CAt=s(mMe);ekr=r(CAt,"albert"),CAt.forEach(t),okr=r(KPe," \u2014 "),gY=n(KPe,"A",{href:!0});var wAt=s(gY);rkr=r(wAt,"FlaxAlbertForMaskedLM"),wAt.forEach(t),tkr=r(KPe," (ALBERT model)"),KPe.forEach(t),akr=i(Ie),v5=n(Ie,"LI",{});var ZPe=s(v5);gMe=n(ZPe,"STRONG",{});var AAt=s(gMe);nkr=r(AAt,"bart"),AAt.forEach(t),skr=r(ZPe," \u2014 "),hY=n(ZPe,"A",{href:!0});var yAt=s(hY);lkr=r(yAt,"FlaxBartForConditionalGeneration"),yAt.forEach(t),ikr=r(ZPe," (BART model)"),ZPe.forEach(t),dkr=i(Ie),F5=n(Ie,"LI",{});var eIe=s(F5);hMe=n(eIe,"STRONG",{});var LAt=s(hMe);ckr=r(LAt,"bert"),LAt.forEach(t),fkr=r(eIe," \u2014 "),pY=n(eIe,"A",{href:!0});var xAt=s(pY);mkr=r(xAt,"FlaxBertForMaskedLM"),xAt.forEach(t),gkr=r(eIe," (BERT model)"),eIe.forEach(t),hkr=i(Ie),T5=n(Ie,"LI",{});var oIe=s(T5);pMe=n(oIe,"STRONG",{});var $At=s(pMe);pkr=r($At,"big_bird"),$At.forEach(t),_kr=r(oIe," \u2014 "),_Y=n(oIe,"A",{href:!0});var kAt=s(_Y);ukr=r(kAt,"FlaxBigBirdForMaskedLM"),kAt.forEach(t),bkr=r(oIe," (BigBird model)"),oIe.forEach(t),vkr=i(Ie),M5=n(Ie,"LI",{});var rIe=s(M5);_Me=n(rIe,"STRONG",{});var SAt=s(_Me);Fkr=r(SAt,"distilbert"),SAt.forEach(t),Tkr=r(rIe," \u2014 "),uY=n(rIe,"A",{href:!0});var RAt=s(uY);Mkr=r(RAt,"FlaxDistilBertForMaskedLM"),RAt.forEach(t),Ekr=r(rIe," (DistilBERT model)"),rIe.forEach(t),Ckr=i(Ie),E5=n(Ie,"LI",{});var tIe=s(E5);uMe=n(tIe,"STRONG",{});var BAt=s(uMe);wkr=r(BAt,"electra"),BAt.forEach(t),Akr=r(tIe," \u2014 "),bY=n(tIe,"A",{href:!0});var PAt=s(bY);ykr=r(PAt,"FlaxElectraForMaskedLM"),PAt.forEach(t),Lkr=r(tIe," (ELECTRA model)"),tIe.forEach(t),xkr=i(Ie),C5=n(Ie,"LI",{});var aIe=s(C5);bMe=n(aIe,"STRONG",{});var IAt=s(bMe);$kr=r(IAt,"mbart"),IAt.forEach(t),kkr=r(aIe," \u2014 "),vY=n(aIe,"A",{href:!0});var qAt=s(vY);Skr=r(qAt,"FlaxMBartForConditionalGeneration"),qAt.forEach(t),Rkr=r(aIe," (mBART model)"),aIe.forEach(t),Bkr=i(Ie),w5=n(Ie,"LI",{});var nIe=s(w5);vMe=n(nIe,"STRONG",{});var NAt=s(vMe);Pkr=r(NAt,"roberta"),NAt.forEach(t),Ikr=r(nIe," \u2014 "),FY=n(nIe,"A",{href:!0});var jAt=s(FY);qkr=r(jAt,"FlaxRobertaForMaskedLM"),jAt.forEach(t),Nkr=r(nIe," (RoBERTa model)"),nIe.forEach(t),jkr=i(Ie),A5=n(Ie,"LI",{});var sIe=s(A5);FMe=n(sIe,"STRONG",{});var DAt=s(FMe);Dkr=r(DAt,"roformer"),DAt.forEach(t),Gkr=r(sIe," \u2014 "),TY=n(sIe,"A",{href:!0});var GAt=s(TY);Okr=r(GAt,"FlaxRoFormerForMaskedLM"),GAt.forEach(t),Vkr=r(sIe," (RoFormer model)"),sIe.forEach(t),Xkr=i(Ie),y5=n(Ie,"LI",{});var lIe=s(y5);TMe=n(lIe,"STRONG",{});var OAt=s(TMe);zkr=r(OAt,"xlm-roberta"),OAt.forEach(t),Wkr=r(lIe," \u2014 "),MY=n(lIe,"A",{href:!0});var VAt=s(MY);Qkr=r(VAt,"FlaxXLMRobertaForMaskedLM"),VAt.forEach(t),Hkr=r(lIe," (XLM-RoBERTa model)"),lIe.forEach(t),Ie.forEach(t),Ukr=i(Ql),T(L5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),XNe=i(f),Dc=n(f,"H2",{class:!0});var YDe=s(Dc);x5=n(YDe,"A",{id:!0,class:!0,href:!0});var XAt=s(x5);MMe=n(XAt,"SPAN",{});var zAt=s(MMe);T(R9.$$.fragment,zAt),zAt.forEach(t),XAt.forEach(t),Jkr=i(YDe),EMe=n(YDe,"SPAN",{});var WAt=s(EMe);Ykr=r(WAt,"FlaxAutoModelForSeq2SeqLM"),WAt.forEach(t),YDe.forEach(t),zNe=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T(B9.$$.fragment,Hl),Kkr=i(Hl),Gc=n(Hl,"P",{});var bee=s(Gc);Zkr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EY=n(bee,"A",{href:!0});var QAt=s(EY);eSr=r(QAt,"from_pretrained()"),QAt.forEach(t),oSr=r(bee," class method or the "),CY=n(bee,"A",{href:!0});var HAt=s(CY);rSr=r(HAt,"from_config()"),HAt.forEach(t),tSr=r(bee,` class
method.`),bee.forEach(t),aSr=i(Hl),P9=n(Hl,"P",{});var KDe=s(P9);nSr=r(KDe,"This class cannot be instantiated directly using "),CMe=n(KDe,"CODE",{});var UAt=s(CMe);sSr=r(UAt,"__init__()"),UAt.forEach(t),lSr=r(KDe," (throws an error)."),KDe.forEach(t),iSr=i(Hl),zt=n(Hl,"DIV",{class:!0});var UA=s(zt);T(I9.$$.fragment,UA),dSr=i(UA),wMe=n(UA,"P",{});var JAt=s(wMe);cSr=r(JAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JAt.forEach(t),fSr=i(UA),Oc=n(UA,"P",{});var vee=s(Oc);mSr=r(vee,`Note:
Loading a model from its configuration file does `),AMe=n(vee,"STRONG",{});var YAt=s(AMe);gSr=r(YAt,"not"),YAt.forEach(t),hSr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(vee,"A",{href:!0});var KAt=s(wY);pSr=r(KAt,"from_pretrained()"),KAt.forEach(t),_Sr=r(vee," to load the model weights."),vee.forEach(t),uSr=i(UA),T($5.$$.fragment,UA),UA.forEach(t),bSr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(q9.$$.fragment,Ul),vSr=i(Ul),yMe=n(Ul,"P",{});var ZAt=s(yMe);FSr=r(ZAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZAt.forEach(t),TSr=i(Ul),bn=n(Ul,"P",{});var JA=s(bn);MSr=r(JA,"The model class to instantiate is selected based on the "),LMe=n(JA,"CODE",{});var e6t=s(LMe);ESr=r(e6t,"model_type"),e6t.forEach(t),CSr=r(JA,` property of the config object (either
passed as an argument or loaded from `),xMe=n(JA,"CODE",{});var o6t=s(xMe);wSr=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),ASr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Me=n(JA,"CODE",{});var r6t=s($Me);ySr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),LSr=r(JA,":"),JA.forEach(t),xSr=i(Ul),Be=n(Ul,"UL",{});var ze=s(Be);k5=n(ze,"LI",{});var iIe=s(k5);kMe=n(iIe,"STRONG",{});var t6t=s(kMe);$Sr=r(t6t,"bart"),t6t.forEach(t),kSr=r(iIe," \u2014 "),AY=n(iIe,"A",{href:!0});var a6t=s(AY);SSr=r(a6t,"FlaxBartForConditionalGeneration"),a6t.forEach(t),RSr=r(iIe," (BART model)"),iIe.forEach(t),BSr=i(ze),S5=n(ze,"LI",{});var dIe=s(S5);SMe=n(dIe,"STRONG",{});var n6t=s(SMe);PSr=r(n6t,"blenderbot"),n6t.forEach(t),ISr=r(dIe," \u2014 "),yY=n(dIe,"A",{href:!0});var s6t=s(yY);qSr=r(s6t,"FlaxBlenderbotForConditionalGeneration"),s6t.forEach(t),NSr=r(dIe," (Blenderbot model)"),dIe.forEach(t),jSr=i(ze),R5=n(ze,"LI",{});var cIe=s(R5);RMe=n(cIe,"STRONG",{});var l6t=s(RMe);DSr=r(l6t,"blenderbot-small"),l6t.forEach(t),GSr=r(cIe," \u2014 "),LY=n(cIe,"A",{href:!0});var i6t=s(LY);OSr=r(i6t,"FlaxBlenderbotSmallForConditionalGeneration"),i6t.forEach(t),VSr=r(cIe," (BlenderbotSmall model)"),cIe.forEach(t),XSr=i(ze),B5=n(ze,"LI",{});var fIe=s(B5);BMe=n(fIe,"STRONG",{});var d6t=s(BMe);zSr=r(d6t,"encoder-decoder"),d6t.forEach(t),WSr=r(fIe," \u2014 "),xY=n(fIe,"A",{href:!0});var c6t=s(xY);QSr=r(c6t,"FlaxEncoderDecoderModel"),c6t.forEach(t),HSr=r(fIe," (Encoder decoder model)"),fIe.forEach(t),USr=i(ze),P5=n(ze,"LI",{});var mIe=s(P5);PMe=n(mIe,"STRONG",{});var f6t=s(PMe);JSr=r(f6t,"marian"),f6t.forEach(t),YSr=r(mIe," \u2014 "),$Y=n(mIe,"A",{href:!0});var m6t=s($Y);KSr=r(m6t,"FlaxMarianMTModel"),m6t.forEach(t),ZSr=r(mIe," (Marian model)"),mIe.forEach(t),eRr=i(ze),I5=n(ze,"LI",{});var gIe=s(I5);IMe=n(gIe,"STRONG",{});var g6t=s(IMe);oRr=r(g6t,"mbart"),g6t.forEach(t),rRr=r(gIe," \u2014 "),kY=n(gIe,"A",{href:!0});var h6t=s(kY);tRr=r(h6t,"FlaxMBartForConditionalGeneration"),h6t.forEach(t),aRr=r(gIe," (mBART model)"),gIe.forEach(t),nRr=i(ze),q5=n(ze,"LI",{});var hIe=s(q5);qMe=n(hIe,"STRONG",{});var p6t=s(qMe);sRr=r(p6t,"mt5"),p6t.forEach(t),lRr=r(hIe," \u2014 "),SY=n(hIe,"A",{href:!0});var _6t=s(SY);iRr=r(_6t,"FlaxMT5ForConditionalGeneration"),_6t.forEach(t),dRr=r(hIe," (mT5 model)"),hIe.forEach(t),cRr=i(ze),N5=n(ze,"LI",{});var pIe=s(N5);NMe=n(pIe,"STRONG",{});var u6t=s(NMe);fRr=r(u6t,"pegasus"),u6t.forEach(t),mRr=r(pIe," \u2014 "),RY=n(pIe,"A",{href:!0});var b6t=s(RY);gRr=r(b6t,"FlaxPegasusForConditionalGeneration"),b6t.forEach(t),hRr=r(pIe," (Pegasus model)"),pIe.forEach(t),pRr=i(ze),j5=n(ze,"LI",{});var _Ie=s(j5);jMe=n(_Ie,"STRONG",{});var v6t=s(jMe);_Rr=r(v6t,"t5"),v6t.forEach(t),uRr=r(_Ie," \u2014 "),BY=n(_Ie,"A",{href:!0});var F6t=s(BY);bRr=r(F6t,"FlaxT5ForConditionalGeneration"),F6t.forEach(t),vRr=r(_Ie," (T5 model)"),_Ie.forEach(t),ze.forEach(t),FRr=i(Ul),T(D5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),WNe=i(f),Vc=n(f,"H2",{class:!0});var ZDe=s(Vc);G5=n(ZDe,"A",{id:!0,class:!0,href:!0});var T6t=s(G5);DMe=n(T6t,"SPAN",{});var M6t=s(DMe);T(N9.$$.fragment,M6t),M6t.forEach(t),T6t.forEach(t),TRr=i(ZDe),GMe=n(ZDe,"SPAN",{});var E6t=s(GMe);MRr=r(E6t,"FlaxAutoModelForSequenceClassification"),E6t.forEach(t),ZDe.forEach(t),QNe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(j9.$$.fragment,Jl),ERr=i(Jl),Xc=n(Jl,"P",{});var Fee=s(Xc);CRr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PY=n(Fee,"A",{href:!0});var C6t=s(PY);wRr=r(C6t,"from_pretrained()"),C6t.forEach(t),ARr=r(Fee," class method or the "),IY=n(Fee,"A",{href:!0});var w6t=s(IY);yRr=r(w6t,"from_config()"),w6t.forEach(t),LRr=r(Fee,` class
method.`),Fee.forEach(t),xRr=i(Jl),D9=n(Jl,"P",{});var eGe=s(D9);$Rr=r(eGe,"This class cannot be instantiated directly using "),OMe=n(eGe,"CODE",{});var A6t=s(OMe);kRr=r(A6t,"__init__()"),A6t.forEach(t),SRr=r(eGe," (throws an error)."),eGe.forEach(t),RRr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var YA=s(Wt);T(G9.$$.fragment,YA),BRr=i(YA),VMe=n(YA,"P",{});var y6t=s(VMe);PRr=r(y6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y6t.forEach(t),IRr=i(YA),zc=n(YA,"P",{});var Tee=s(zc);qRr=r(Tee,`Note:
Loading a model from its configuration file does `),XMe=n(Tee,"STRONG",{});var L6t=s(XMe);NRr=r(L6t,"not"),L6t.forEach(t),jRr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(Tee,"A",{href:!0});var x6t=s(qY);DRr=r(x6t,"from_pretrained()"),x6t.forEach(t),GRr=r(Tee," to load the model weights."),Tee.forEach(t),ORr=i(YA),T(O5.$$.fragment,YA),YA.forEach(t),VRr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(O9.$$.fragment,Yl),XRr=i(Yl),zMe=n(Yl,"P",{});var $6t=s(zMe);zRr=r($6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$6t.forEach(t),WRr=i(Yl),vn=n(Yl,"P",{});var KA=s(vn);QRr=r(KA,"The model class to instantiate is selected based on the "),WMe=n(KA,"CODE",{});var k6t=s(WMe);HRr=r(k6t,"model_type"),k6t.forEach(t),URr=r(KA,` property of the config object (either
passed as an argument or loaded from `),QMe=n(KA,"CODE",{});var S6t=s(QMe);JRr=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),YRr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=n(KA,"CODE",{});var R6t=s(HMe);KRr=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),ZRr=r(KA,":"),KA.forEach(t),eBr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);V5=n(qe,"LI",{});var uIe=s(V5);UMe=n(uIe,"STRONG",{});var B6t=s(UMe);oBr=r(B6t,"albert"),B6t.forEach(t),rBr=r(uIe," \u2014 "),NY=n(uIe,"A",{href:!0});var P6t=s(NY);tBr=r(P6t,"FlaxAlbertForSequenceClassification"),P6t.forEach(t),aBr=r(uIe," (ALBERT model)"),uIe.forEach(t),nBr=i(qe),X5=n(qe,"LI",{});var bIe=s(X5);JMe=n(bIe,"STRONG",{});var I6t=s(JMe);sBr=r(I6t,"bart"),I6t.forEach(t),lBr=r(bIe," \u2014 "),jY=n(bIe,"A",{href:!0});var q6t=s(jY);iBr=r(q6t,"FlaxBartForSequenceClassification"),q6t.forEach(t),dBr=r(bIe," (BART model)"),bIe.forEach(t),cBr=i(qe),z5=n(qe,"LI",{});var vIe=s(z5);YMe=n(vIe,"STRONG",{});var N6t=s(YMe);fBr=r(N6t,"bert"),N6t.forEach(t),mBr=r(vIe," \u2014 "),DY=n(vIe,"A",{href:!0});var j6t=s(DY);gBr=r(j6t,"FlaxBertForSequenceClassification"),j6t.forEach(t),hBr=r(vIe," (BERT model)"),vIe.forEach(t),pBr=i(qe),W5=n(qe,"LI",{});var FIe=s(W5);KMe=n(FIe,"STRONG",{});var D6t=s(KMe);_Br=r(D6t,"big_bird"),D6t.forEach(t),uBr=r(FIe," \u2014 "),GY=n(FIe,"A",{href:!0});var G6t=s(GY);bBr=r(G6t,"FlaxBigBirdForSequenceClassification"),G6t.forEach(t),vBr=r(FIe," (BigBird model)"),FIe.forEach(t),FBr=i(qe),Q5=n(qe,"LI",{});var TIe=s(Q5);ZMe=n(TIe,"STRONG",{});var O6t=s(ZMe);TBr=r(O6t,"distilbert"),O6t.forEach(t),MBr=r(TIe," \u2014 "),OY=n(TIe,"A",{href:!0});var V6t=s(OY);EBr=r(V6t,"FlaxDistilBertForSequenceClassification"),V6t.forEach(t),CBr=r(TIe," (DistilBERT model)"),TIe.forEach(t),wBr=i(qe),H5=n(qe,"LI",{});var MIe=s(H5);e4e=n(MIe,"STRONG",{});var X6t=s(e4e);ABr=r(X6t,"electra"),X6t.forEach(t),yBr=r(MIe," \u2014 "),VY=n(MIe,"A",{href:!0});var z6t=s(VY);LBr=r(z6t,"FlaxElectraForSequenceClassification"),z6t.forEach(t),xBr=r(MIe," (ELECTRA model)"),MIe.forEach(t),$Br=i(qe),U5=n(qe,"LI",{});var EIe=s(U5);o4e=n(EIe,"STRONG",{});var W6t=s(o4e);kBr=r(W6t,"mbart"),W6t.forEach(t),SBr=r(EIe," \u2014 "),XY=n(EIe,"A",{href:!0});var Q6t=s(XY);RBr=r(Q6t,"FlaxMBartForSequenceClassification"),Q6t.forEach(t),BBr=r(EIe," (mBART model)"),EIe.forEach(t),PBr=i(qe),J5=n(qe,"LI",{});var CIe=s(J5);r4e=n(CIe,"STRONG",{});var H6t=s(r4e);IBr=r(H6t,"roberta"),H6t.forEach(t),qBr=r(CIe," \u2014 "),zY=n(CIe,"A",{href:!0});var U6t=s(zY);NBr=r(U6t,"FlaxRobertaForSequenceClassification"),U6t.forEach(t),jBr=r(CIe," (RoBERTa model)"),CIe.forEach(t),DBr=i(qe),Y5=n(qe,"LI",{});var wIe=s(Y5);t4e=n(wIe,"STRONG",{});var J6t=s(t4e);GBr=r(J6t,"roformer"),J6t.forEach(t),OBr=r(wIe," \u2014 "),WY=n(wIe,"A",{href:!0});var Y6t=s(WY);VBr=r(Y6t,"FlaxRoFormerForSequenceClassification"),Y6t.forEach(t),XBr=r(wIe," (RoFormer model)"),wIe.forEach(t),zBr=i(qe),K5=n(qe,"LI",{});var AIe=s(K5);a4e=n(AIe,"STRONG",{});var K6t=s(a4e);WBr=r(K6t,"xlm-roberta"),K6t.forEach(t),QBr=r(AIe," \u2014 "),QY=n(AIe,"A",{href:!0});var Z6t=s(QY);HBr=r(Z6t,"FlaxXLMRobertaForSequenceClassification"),Z6t.forEach(t),UBr=r(AIe," (XLM-RoBERTa model)"),AIe.forEach(t),qe.forEach(t),JBr=i(Yl),T(Z5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),HNe=i(f),Wc=n(f,"H2",{class:!0});var oGe=s(Wc);e3=n(oGe,"A",{id:!0,class:!0,href:!0});var eyt=s(e3);n4e=n(eyt,"SPAN",{});var oyt=s(n4e);T(V9.$$.fragment,oyt),oyt.forEach(t),eyt.forEach(t),YBr=i(oGe),s4e=n(oGe,"SPAN",{});var ryt=s(s4e);KBr=r(ryt,"FlaxAutoModelForQuestionAnswering"),ryt.forEach(t),oGe.forEach(t),UNe=i(f),ur=n(f,"DIV",{class:!0});var Kl=s(ur);T(X9.$$.fragment,Kl),ZBr=i(Kl),Qc=n(Kl,"P",{});var Mee=s(Qc);ePr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HY=n(Mee,"A",{href:!0});var tyt=s(HY);oPr=r(tyt,"from_pretrained()"),tyt.forEach(t),rPr=r(Mee," class method or the "),UY=n(Mee,"A",{href:!0});var ayt=s(UY);tPr=r(ayt,"from_config()"),ayt.forEach(t),aPr=r(Mee,` class
method.`),Mee.forEach(t),nPr=i(Kl),z9=n(Kl,"P",{});var rGe=s(z9);sPr=r(rGe,"This class cannot be instantiated directly using "),l4e=n(rGe,"CODE",{});var nyt=s(l4e);lPr=r(nyt,"__init__()"),nyt.forEach(t),iPr=r(rGe," (throws an error)."),rGe.forEach(t),dPr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var ZA=s(Qt);T(W9.$$.fragment,ZA),cPr=i(ZA),i4e=n(ZA,"P",{});var syt=s(i4e);fPr=r(syt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),syt.forEach(t),mPr=i(ZA),Hc=n(ZA,"P",{});var Eee=s(Hc);gPr=r(Eee,`Note:
Loading a model from its configuration file does `),d4e=n(Eee,"STRONG",{});var lyt=s(d4e);hPr=r(lyt,"not"),lyt.forEach(t),pPr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(Eee,"A",{href:!0});var iyt=s(JY);_Pr=r(iyt,"from_pretrained()"),iyt.forEach(t),uPr=r(Eee," to load the model weights."),Eee.forEach(t),bPr=i(ZA),T(o3.$$.fragment,ZA),ZA.forEach(t),vPr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(Q9.$$.fragment,Zl),FPr=i(Zl),c4e=n(Zl,"P",{});var dyt=s(c4e);TPr=r(dyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dyt.forEach(t),MPr=i(Zl),Fn=n(Zl,"P",{});var e6=s(Fn);EPr=r(e6,"The model class to instantiate is selected based on the "),f4e=n(e6,"CODE",{});var cyt=s(f4e);CPr=r(cyt,"model_type"),cyt.forEach(t),wPr=r(e6,` property of the config object (either
passed as an argument or loaded from `),m4e=n(e6,"CODE",{});var fyt=s(m4e);APr=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),yPr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=n(e6,"CODE",{});var myt=s(g4e);LPr=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),xPr=r(e6,":"),e6.forEach(t),$Pr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);r3=n(Ne,"LI",{});var yIe=s(r3);h4e=n(yIe,"STRONG",{});var gyt=s(h4e);kPr=r(gyt,"albert"),gyt.forEach(t),SPr=r(yIe," \u2014 "),YY=n(yIe,"A",{href:!0});var hyt=s(YY);RPr=r(hyt,"FlaxAlbertForQuestionAnswering"),hyt.forEach(t),BPr=r(yIe," (ALBERT model)"),yIe.forEach(t),PPr=i(Ne),t3=n(Ne,"LI",{});var LIe=s(t3);p4e=n(LIe,"STRONG",{});var pyt=s(p4e);IPr=r(pyt,"bart"),pyt.forEach(t),qPr=r(LIe," \u2014 "),KY=n(LIe,"A",{href:!0});var _yt=s(KY);NPr=r(_yt,"FlaxBartForQuestionAnswering"),_yt.forEach(t),jPr=r(LIe," (BART model)"),LIe.forEach(t),DPr=i(Ne),a3=n(Ne,"LI",{});var xIe=s(a3);_4e=n(xIe,"STRONG",{});var uyt=s(_4e);GPr=r(uyt,"bert"),uyt.forEach(t),OPr=r(xIe," \u2014 "),ZY=n(xIe,"A",{href:!0});var byt=s(ZY);VPr=r(byt,"FlaxBertForQuestionAnswering"),byt.forEach(t),XPr=r(xIe," (BERT model)"),xIe.forEach(t),zPr=i(Ne),n3=n(Ne,"LI",{});var $Ie=s(n3);u4e=n($Ie,"STRONG",{});var vyt=s(u4e);WPr=r(vyt,"big_bird"),vyt.forEach(t),QPr=r($Ie," \u2014 "),eK=n($Ie,"A",{href:!0});var Fyt=s(eK);HPr=r(Fyt,"FlaxBigBirdForQuestionAnswering"),Fyt.forEach(t),UPr=r($Ie," (BigBird model)"),$Ie.forEach(t),JPr=i(Ne),s3=n(Ne,"LI",{});var kIe=s(s3);b4e=n(kIe,"STRONG",{});var Tyt=s(b4e);YPr=r(Tyt,"distilbert"),Tyt.forEach(t),KPr=r(kIe," \u2014 "),oK=n(kIe,"A",{href:!0});var Myt=s(oK);ZPr=r(Myt,"FlaxDistilBertForQuestionAnswering"),Myt.forEach(t),eIr=r(kIe," (DistilBERT model)"),kIe.forEach(t),oIr=i(Ne),l3=n(Ne,"LI",{});var SIe=s(l3);v4e=n(SIe,"STRONG",{});var Eyt=s(v4e);rIr=r(Eyt,"electra"),Eyt.forEach(t),tIr=r(SIe," \u2014 "),rK=n(SIe,"A",{href:!0});var Cyt=s(rK);aIr=r(Cyt,"FlaxElectraForQuestionAnswering"),Cyt.forEach(t),nIr=r(SIe," (ELECTRA model)"),SIe.forEach(t),sIr=i(Ne),i3=n(Ne,"LI",{});var RIe=s(i3);F4e=n(RIe,"STRONG",{});var wyt=s(F4e);lIr=r(wyt,"mbart"),wyt.forEach(t),iIr=r(RIe," \u2014 "),tK=n(RIe,"A",{href:!0});var Ayt=s(tK);dIr=r(Ayt,"FlaxMBartForQuestionAnswering"),Ayt.forEach(t),cIr=r(RIe," (mBART model)"),RIe.forEach(t),fIr=i(Ne),d3=n(Ne,"LI",{});var BIe=s(d3);T4e=n(BIe,"STRONG",{});var yyt=s(T4e);mIr=r(yyt,"roberta"),yyt.forEach(t),gIr=r(BIe," \u2014 "),aK=n(BIe,"A",{href:!0});var Lyt=s(aK);hIr=r(Lyt,"FlaxRobertaForQuestionAnswering"),Lyt.forEach(t),pIr=r(BIe," (RoBERTa model)"),BIe.forEach(t),_Ir=i(Ne),c3=n(Ne,"LI",{});var PIe=s(c3);M4e=n(PIe,"STRONG",{});var xyt=s(M4e);uIr=r(xyt,"roformer"),xyt.forEach(t),bIr=r(PIe," \u2014 "),nK=n(PIe,"A",{href:!0});var $yt=s(nK);vIr=r($yt,"FlaxRoFormerForQuestionAnswering"),$yt.forEach(t),FIr=r(PIe," (RoFormer model)"),PIe.forEach(t),TIr=i(Ne),f3=n(Ne,"LI",{});var IIe=s(f3);E4e=n(IIe,"STRONG",{});var kyt=s(E4e);MIr=r(kyt,"xlm-roberta"),kyt.forEach(t),EIr=r(IIe," \u2014 "),sK=n(IIe,"A",{href:!0});var Syt=s(sK);CIr=r(Syt,"FlaxXLMRobertaForQuestionAnswering"),Syt.forEach(t),wIr=r(IIe," (XLM-RoBERTa model)"),IIe.forEach(t),Ne.forEach(t),AIr=i(Zl),T(m3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),JNe=i(f),Uc=n(f,"H2",{class:!0});var tGe=s(Uc);g3=n(tGe,"A",{id:!0,class:!0,href:!0});var Ryt=s(g3);C4e=n(Ryt,"SPAN",{});var Byt=s(C4e);T(H9.$$.fragment,Byt),Byt.forEach(t),Ryt.forEach(t),yIr=i(tGe),w4e=n(tGe,"SPAN",{});var Pyt=s(w4e);LIr=r(Pyt,"FlaxAutoModelForTokenClassification"),Pyt.forEach(t),tGe.forEach(t),YNe=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(U9.$$.fragment,ei),xIr=i(ei),Jc=n(ei,"P",{});var Cee=s(Jc);$Ir=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lK=n(Cee,"A",{href:!0});var Iyt=s(lK);kIr=r(Iyt,"from_pretrained()"),Iyt.forEach(t),SIr=r(Cee," class method or the "),iK=n(Cee,"A",{href:!0});var qyt=s(iK);RIr=r(qyt,"from_config()"),qyt.forEach(t),BIr=r(Cee,` class
method.`),Cee.forEach(t),PIr=i(ei),J9=n(ei,"P",{});var aGe=s(J9);IIr=r(aGe,"This class cannot be instantiated directly using "),A4e=n(aGe,"CODE",{});var Nyt=s(A4e);qIr=r(Nyt,"__init__()"),Nyt.forEach(t),NIr=r(aGe," (throws an error)."),aGe.forEach(t),jIr=i(ei),Ht=n(ei,"DIV",{class:!0});var o6=s(Ht);T(Y9.$$.fragment,o6),DIr=i(o6),y4e=n(o6,"P",{});var jyt=s(y4e);GIr=r(jyt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jyt.forEach(t),OIr=i(o6),Yc=n(o6,"P",{});var wee=s(Yc);VIr=r(wee,`Note:
Loading a model from its configuration file does `),L4e=n(wee,"STRONG",{});var Dyt=s(L4e);XIr=r(Dyt,"not"),Dyt.forEach(t),zIr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=n(wee,"A",{href:!0});var Gyt=s(dK);WIr=r(Gyt,"from_pretrained()"),Gyt.forEach(t),QIr=r(wee," to load the model weights."),wee.forEach(t),HIr=i(o6),T(h3.$$.fragment,o6),o6.forEach(t),UIr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(K9.$$.fragment,oi),JIr=i(oi),x4e=n(oi,"P",{});var Oyt=s(x4e);YIr=r(Oyt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Oyt.forEach(t),KIr=i(oi),Tn=n(oi,"P",{});var r6=s(Tn);ZIr=r(r6,"The model class to instantiate is selected based on the "),$4e=n(r6,"CODE",{});var Vyt=s($4e);eqr=r(Vyt,"model_type"),Vyt.forEach(t),oqr=r(r6,` property of the config object (either
passed as an argument or loaded from `),k4e=n(r6,"CODE",{});var Xyt=s(k4e);rqr=r(Xyt,"pretrained_model_name_or_path"),Xyt.forEach(t),tqr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(r6,"CODE",{});var zyt=s(S4e);aqr=r(zyt,"pretrained_model_name_or_path"),zyt.forEach(t),nqr=r(r6,":"),r6.forEach(t),sqr=i(oi),De=n(oi,"UL",{});var Fo=s(De);p3=n(Fo,"LI",{});var qIe=s(p3);R4e=n(qIe,"STRONG",{});var Wyt=s(R4e);lqr=r(Wyt,"albert"),Wyt.forEach(t),iqr=r(qIe," \u2014 "),cK=n(qIe,"A",{href:!0});var Qyt=s(cK);dqr=r(Qyt,"FlaxAlbertForTokenClassification"),Qyt.forEach(t),cqr=r(qIe," (ALBERT model)"),qIe.forEach(t),fqr=i(Fo),_3=n(Fo,"LI",{});var NIe=s(_3);B4e=n(NIe,"STRONG",{});var Hyt=s(B4e);mqr=r(Hyt,"bert"),Hyt.forEach(t),gqr=r(NIe," \u2014 "),fK=n(NIe,"A",{href:!0});var Uyt=s(fK);hqr=r(Uyt,"FlaxBertForTokenClassification"),Uyt.forEach(t),pqr=r(NIe," (BERT model)"),NIe.forEach(t),_qr=i(Fo),u3=n(Fo,"LI",{});var jIe=s(u3);P4e=n(jIe,"STRONG",{});var Jyt=s(P4e);uqr=r(Jyt,"big_bird"),Jyt.forEach(t),bqr=r(jIe," \u2014 "),mK=n(jIe,"A",{href:!0});var Yyt=s(mK);vqr=r(Yyt,"FlaxBigBirdForTokenClassification"),Yyt.forEach(t),Fqr=r(jIe," (BigBird model)"),jIe.forEach(t),Tqr=i(Fo),b3=n(Fo,"LI",{});var DIe=s(b3);I4e=n(DIe,"STRONG",{});var Kyt=s(I4e);Mqr=r(Kyt,"distilbert"),Kyt.forEach(t),Eqr=r(DIe," \u2014 "),gK=n(DIe,"A",{href:!0});var Zyt=s(gK);Cqr=r(Zyt,"FlaxDistilBertForTokenClassification"),Zyt.forEach(t),wqr=r(DIe," (DistilBERT model)"),DIe.forEach(t),Aqr=i(Fo),v3=n(Fo,"LI",{});var GIe=s(v3);q4e=n(GIe,"STRONG",{});var eLt=s(q4e);yqr=r(eLt,"electra"),eLt.forEach(t),Lqr=r(GIe," \u2014 "),hK=n(GIe,"A",{href:!0});var oLt=s(hK);xqr=r(oLt,"FlaxElectraForTokenClassification"),oLt.forEach(t),$qr=r(GIe," (ELECTRA model)"),GIe.forEach(t),kqr=i(Fo),F3=n(Fo,"LI",{});var OIe=s(F3);N4e=n(OIe,"STRONG",{});var rLt=s(N4e);Sqr=r(rLt,"roberta"),rLt.forEach(t),Rqr=r(OIe," \u2014 "),pK=n(OIe,"A",{href:!0});var tLt=s(pK);Bqr=r(tLt,"FlaxRobertaForTokenClassification"),tLt.forEach(t),Pqr=r(OIe," (RoBERTa model)"),OIe.forEach(t),Iqr=i(Fo),T3=n(Fo,"LI",{});var VIe=s(T3);j4e=n(VIe,"STRONG",{});var aLt=s(j4e);qqr=r(aLt,"roformer"),aLt.forEach(t),Nqr=r(VIe," \u2014 "),_K=n(VIe,"A",{href:!0});var nLt=s(_K);jqr=r(nLt,"FlaxRoFormerForTokenClassification"),nLt.forEach(t),Dqr=r(VIe," (RoFormer model)"),VIe.forEach(t),Gqr=i(Fo),M3=n(Fo,"LI",{});var XIe=s(M3);D4e=n(XIe,"STRONG",{});var sLt=s(D4e);Oqr=r(sLt,"xlm-roberta"),sLt.forEach(t),Vqr=r(XIe," \u2014 "),uK=n(XIe,"A",{href:!0});var lLt=s(uK);Xqr=r(lLt,"FlaxXLMRobertaForTokenClassification"),lLt.forEach(t),zqr=r(XIe," (XLM-RoBERTa model)"),XIe.forEach(t),Fo.forEach(t),Wqr=i(oi),T(E3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),KNe=i(f),Kc=n(f,"H2",{class:!0});var nGe=s(Kc);C3=n(nGe,"A",{id:!0,class:!0,href:!0});var iLt=s(C3);G4e=n(iLt,"SPAN",{});var dLt=s(G4e);T(Z9.$$.fragment,dLt),dLt.forEach(t),iLt.forEach(t),Qqr=i(nGe),O4e=n(nGe,"SPAN",{});var cLt=s(O4e);Hqr=r(cLt,"FlaxAutoModelForMultipleChoice"),cLt.forEach(t),nGe.forEach(t),ZNe=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(ex.$$.fragment,ri),Uqr=i(ri),Zc=n(ri,"P",{});var Aee=s(Zc);Jqr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bK=n(Aee,"A",{href:!0});var fLt=s(bK);Yqr=r(fLt,"from_pretrained()"),fLt.forEach(t),Kqr=r(Aee," class method or the "),vK=n(Aee,"A",{href:!0});var mLt=s(vK);Zqr=r(mLt,"from_config()"),mLt.forEach(t),eNr=r(Aee,` class
method.`),Aee.forEach(t),oNr=i(ri),ox=n(ri,"P",{});var sGe=s(ox);rNr=r(sGe,"This class cannot be instantiated directly using "),V4e=n(sGe,"CODE",{});var gLt=s(V4e);tNr=r(gLt,"__init__()"),gLt.forEach(t),aNr=r(sGe," (throws an error)."),sGe.forEach(t),nNr=i(ri),Ut=n(ri,"DIV",{class:!0});var t6=s(Ut);T(rx.$$.fragment,t6),sNr=i(t6),X4e=n(t6,"P",{});var hLt=s(X4e);lNr=r(hLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hLt.forEach(t),iNr=i(t6),ef=n(t6,"P",{});var yee=s(ef);dNr=r(yee,`Note:
Loading a model from its configuration file does `),z4e=n(yee,"STRONG",{});var pLt=s(z4e);cNr=r(pLt,"not"),pLt.forEach(t),fNr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=n(yee,"A",{href:!0});var _Lt=s(FK);mNr=r(_Lt,"from_pretrained()"),_Lt.forEach(t),gNr=r(yee," to load the model weights."),yee.forEach(t),hNr=i(t6),T(w3.$$.fragment,t6),t6.forEach(t),pNr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(tx.$$.fragment,ti),_Nr=i(ti),W4e=n(ti,"P",{});var uLt=s(W4e);uNr=r(uLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uLt.forEach(t),bNr=i(ti),Mn=n(ti,"P",{});var a6=s(Mn);vNr=r(a6,"The model class to instantiate is selected based on the "),Q4e=n(a6,"CODE",{});var bLt=s(Q4e);FNr=r(bLt,"model_type"),bLt.forEach(t),TNr=r(a6,` property of the config object (either
passed as an argument or loaded from `),H4e=n(a6,"CODE",{});var vLt=s(H4e);MNr=r(vLt,"pretrained_model_name_or_path"),vLt.forEach(t),ENr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=n(a6,"CODE",{});var FLt=s(U4e);CNr=r(FLt,"pretrained_model_name_or_path"),FLt.forEach(t),wNr=r(a6,":"),a6.forEach(t),ANr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);A3=n(To,"LI",{});var zIe=s(A3);J4e=n(zIe,"STRONG",{});var TLt=s(J4e);yNr=r(TLt,"albert"),TLt.forEach(t),LNr=r(zIe," \u2014 "),TK=n(zIe,"A",{href:!0});var MLt=s(TK);xNr=r(MLt,"FlaxAlbertForMultipleChoice"),MLt.forEach(t),$Nr=r(zIe," (ALBERT model)"),zIe.forEach(t),kNr=i(To),y3=n(To,"LI",{});var WIe=s(y3);Y4e=n(WIe,"STRONG",{});var ELt=s(Y4e);SNr=r(ELt,"bert"),ELt.forEach(t),RNr=r(WIe," \u2014 "),MK=n(WIe,"A",{href:!0});var CLt=s(MK);BNr=r(CLt,"FlaxBertForMultipleChoice"),CLt.forEach(t),PNr=r(WIe," (BERT model)"),WIe.forEach(t),INr=i(To),L3=n(To,"LI",{});var QIe=s(L3);K4e=n(QIe,"STRONG",{});var wLt=s(K4e);qNr=r(wLt,"big_bird"),wLt.forEach(t),NNr=r(QIe," \u2014 "),EK=n(QIe,"A",{href:!0});var ALt=s(EK);jNr=r(ALt,"FlaxBigBirdForMultipleChoice"),ALt.forEach(t),DNr=r(QIe," (BigBird model)"),QIe.forEach(t),GNr=i(To),x3=n(To,"LI",{});var HIe=s(x3);Z4e=n(HIe,"STRONG",{});var yLt=s(Z4e);ONr=r(yLt,"distilbert"),yLt.forEach(t),VNr=r(HIe," \u2014 "),CK=n(HIe,"A",{href:!0});var LLt=s(CK);XNr=r(LLt,"FlaxDistilBertForMultipleChoice"),LLt.forEach(t),zNr=r(HIe," (DistilBERT model)"),HIe.forEach(t),WNr=i(To),$3=n(To,"LI",{});var UIe=s($3);eEe=n(UIe,"STRONG",{});var xLt=s(eEe);QNr=r(xLt,"electra"),xLt.forEach(t),HNr=r(UIe," \u2014 "),wK=n(UIe,"A",{href:!0});var $Lt=s(wK);UNr=r($Lt,"FlaxElectraForMultipleChoice"),$Lt.forEach(t),JNr=r(UIe," (ELECTRA model)"),UIe.forEach(t),YNr=i(To),k3=n(To,"LI",{});var JIe=s(k3);oEe=n(JIe,"STRONG",{});var kLt=s(oEe);KNr=r(kLt,"roberta"),kLt.forEach(t),ZNr=r(JIe," \u2014 "),AK=n(JIe,"A",{href:!0});var SLt=s(AK);ejr=r(SLt,"FlaxRobertaForMultipleChoice"),SLt.forEach(t),ojr=r(JIe," (RoBERTa model)"),JIe.forEach(t),rjr=i(To),S3=n(To,"LI",{});var YIe=s(S3);rEe=n(YIe,"STRONG",{});var RLt=s(rEe);tjr=r(RLt,"roformer"),RLt.forEach(t),ajr=r(YIe," \u2014 "),yK=n(YIe,"A",{href:!0});var BLt=s(yK);njr=r(BLt,"FlaxRoFormerForMultipleChoice"),BLt.forEach(t),sjr=r(YIe," (RoFormer model)"),YIe.forEach(t),ljr=i(To),R3=n(To,"LI",{});var KIe=s(R3);tEe=n(KIe,"STRONG",{});var PLt=s(tEe);ijr=r(PLt,"xlm-roberta"),PLt.forEach(t),djr=r(KIe," \u2014 "),LK=n(KIe,"A",{href:!0});var ILt=s(LK);cjr=r(ILt,"FlaxXLMRobertaForMultipleChoice"),ILt.forEach(t),fjr=r(KIe," (XLM-RoBERTa model)"),KIe.forEach(t),To.forEach(t),mjr=i(ti),T(B3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),eje=i(f),of=n(f,"H2",{class:!0});var lGe=s(of);P3=n(lGe,"A",{id:!0,class:!0,href:!0});var qLt=s(P3);aEe=n(qLt,"SPAN",{});var NLt=s(aEe);T(ax.$$.fragment,NLt),NLt.forEach(t),qLt.forEach(t),gjr=i(lGe),nEe=n(lGe,"SPAN",{});var jLt=s(nEe);hjr=r(jLt,"FlaxAutoModelForNextSentencePrediction"),jLt.forEach(t),lGe.forEach(t),oje=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(nx.$$.fragment,ai),pjr=i(ai),rf=n(ai,"P",{});var Lee=s(rf);_jr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xK=n(Lee,"A",{href:!0});var DLt=s(xK);ujr=r(DLt,"from_pretrained()"),DLt.forEach(t),bjr=r(Lee," class method or the "),$K=n(Lee,"A",{href:!0});var GLt=s($K);vjr=r(GLt,"from_config()"),GLt.forEach(t),Fjr=r(Lee,` class
method.`),Lee.forEach(t),Tjr=i(ai),sx=n(ai,"P",{});var iGe=s(sx);Mjr=r(iGe,"This class cannot be instantiated directly using "),sEe=n(iGe,"CODE",{});var OLt=s(sEe);Ejr=r(OLt,"__init__()"),OLt.forEach(t),Cjr=r(iGe," (throws an error)."),iGe.forEach(t),wjr=i(ai),Jt=n(ai,"DIV",{class:!0});var n6=s(Jt);T(lx.$$.fragment,n6),Ajr=i(n6),lEe=n(n6,"P",{});var VLt=s(lEe);yjr=r(VLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),VLt.forEach(t),Ljr=i(n6),tf=n(n6,"P",{});var xee=s(tf);xjr=r(xee,`Note:
Loading a model from its configuration file does `),iEe=n(xee,"STRONG",{});var XLt=s(iEe);$jr=r(XLt,"not"),XLt.forEach(t),kjr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=n(xee,"A",{href:!0});var zLt=s(kK);Sjr=r(zLt,"from_pretrained()"),zLt.forEach(t),Rjr=r(xee," to load the model weights."),xee.forEach(t),Bjr=i(n6),T(I3.$$.fragment,n6),n6.forEach(t),Pjr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(ix.$$.fragment,ni),Ijr=i(ni),dEe=n(ni,"P",{});var WLt=s(dEe);qjr=r(WLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WLt.forEach(t),Njr=i(ni),En=n(ni,"P",{});var s6=s(En);jjr=r(s6,"The model class to instantiate is selected based on the "),cEe=n(s6,"CODE",{});var QLt=s(cEe);Djr=r(QLt,"model_type"),QLt.forEach(t),Gjr=r(s6,` property of the config object (either
passed as an argument or loaded from `),fEe=n(s6,"CODE",{});var HLt=s(fEe);Ojr=r(HLt,"pretrained_model_name_or_path"),HLt.forEach(t),Vjr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=n(s6,"CODE",{});var ULt=s(mEe);Xjr=r(ULt,"pretrained_model_name_or_path"),ULt.forEach(t),zjr=r(s6,":"),s6.forEach(t),Wjr=i(ni),gEe=n(ni,"UL",{});var JLt=s(gEe);q3=n(JLt,"LI",{});var ZIe=s(q3);hEe=n(ZIe,"STRONG",{});var YLt=s(hEe);Qjr=r(YLt,"bert"),YLt.forEach(t),Hjr=r(ZIe," \u2014 "),SK=n(ZIe,"A",{href:!0});var KLt=s(SK);Ujr=r(KLt,"FlaxBertForNextSentencePrediction"),KLt.forEach(t),Jjr=r(ZIe," (BERT model)"),ZIe.forEach(t),JLt.forEach(t),Yjr=i(ni),T(N3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),rje=i(f),af=n(f,"H2",{class:!0});var dGe=s(af);j3=n(dGe,"A",{id:!0,class:!0,href:!0});var ZLt=s(j3);pEe=n(ZLt,"SPAN",{});var e8t=s(pEe);T(dx.$$.fragment,e8t),e8t.forEach(t),ZLt.forEach(t),Kjr=i(dGe),_Ee=n(dGe,"SPAN",{});var o8t=s(_Ee);Zjr=r(o8t,"FlaxAutoModelForImageClassification"),o8t.forEach(t),dGe.forEach(t),tje=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(cx.$$.fragment,si),eDr=i(si),nf=n(si,"P",{});var $ee=s(nf);oDr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RK=n($ee,"A",{href:!0});var r8t=s(RK);rDr=r(r8t,"from_pretrained()"),r8t.forEach(t),tDr=r($ee," class method or the "),BK=n($ee,"A",{href:!0});var t8t=s(BK);aDr=r(t8t,"from_config()"),t8t.forEach(t),nDr=r($ee,` class
method.`),$ee.forEach(t),sDr=i(si),fx=n(si,"P",{});var cGe=s(fx);lDr=r(cGe,"This class cannot be instantiated directly using "),uEe=n(cGe,"CODE",{});var a8t=s(uEe);iDr=r(a8t,"__init__()"),a8t.forEach(t),dDr=r(cGe," (throws an error)."),cGe.forEach(t),cDr=i(si),Yt=n(si,"DIV",{class:!0});var l6=s(Yt);T(mx.$$.fragment,l6),fDr=i(l6),bEe=n(l6,"P",{});var n8t=s(bEe);mDr=r(n8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),n8t.forEach(t),gDr=i(l6),sf=n(l6,"P",{});var kee=s(sf);hDr=r(kee,`Note:
Loading a model from its configuration file does `),vEe=n(kee,"STRONG",{});var s8t=s(vEe);pDr=r(s8t,"not"),s8t.forEach(t),_Dr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=n(kee,"A",{href:!0});var l8t=s(PK);uDr=r(l8t,"from_pretrained()"),l8t.forEach(t),bDr=r(kee," to load the model weights."),kee.forEach(t),vDr=i(l6),T(D3.$$.fragment,l6),l6.forEach(t),FDr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(gx.$$.fragment,li),TDr=i(li),FEe=n(li,"P",{});var i8t=s(FEe);MDr=r(i8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),i8t.forEach(t),EDr=i(li),Cn=n(li,"P",{});var i6=s(Cn);CDr=r(i6,"The model class to instantiate is selected based on the "),TEe=n(i6,"CODE",{});var d8t=s(TEe);wDr=r(d8t,"model_type"),d8t.forEach(t),ADr=r(i6,` property of the config object (either
passed as an argument or loaded from `),MEe=n(i6,"CODE",{});var c8t=s(MEe);yDr=r(c8t,"pretrained_model_name_or_path"),c8t.forEach(t),LDr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=n(i6,"CODE",{});var f8t=s(EEe);xDr=r(f8t,"pretrained_model_name_or_path"),f8t.forEach(t),$Dr=r(i6,":"),i6.forEach(t),kDr=i(li),hx=n(li,"UL",{});var fGe=s(hx);G3=n(fGe,"LI",{});var eqe=s(G3);CEe=n(eqe,"STRONG",{});var m8t=s(CEe);SDr=r(m8t,"beit"),m8t.forEach(t),RDr=r(eqe," \u2014 "),IK=n(eqe,"A",{href:!0});var g8t=s(IK);BDr=r(g8t,"FlaxBeitForImageClassification"),g8t.forEach(t),PDr=r(eqe," (BEiT model)"),eqe.forEach(t),IDr=i(fGe),O3=n(fGe,"LI",{});var oqe=s(O3);wEe=n(oqe,"STRONG",{});var h8t=s(wEe);qDr=r(h8t,"vit"),h8t.forEach(t),NDr=r(oqe," \u2014 "),qK=n(oqe,"A",{href:!0});var p8t=s(qK);jDr=r(p8t,"FlaxViTForImageClassification"),p8t.forEach(t),DDr=r(oqe," (ViT model)"),oqe.forEach(t),fGe.forEach(t),GDr=i(li),T(V3.$$.fragment,li),li.forEach(t),si.forEach(t),aje=i(f),lf=n(f,"H2",{class:!0});var mGe=s(lf);X3=n(mGe,"A",{id:!0,class:!0,href:!0});var _8t=s(X3);AEe=n(_8t,"SPAN",{});var u8t=s(AEe);T(px.$$.fragment,u8t),u8t.forEach(t),_8t.forEach(t),ODr=i(mGe),yEe=n(mGe,"SPAN",{});var b8t=s(yEe);VDr=r(b8t,"FlaxAutoModelForVision2Seq"),b8t.forEach(t),mGe.forEach(t),nje=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(_x.$$.fragment,ii),XDr=i(ii),df=n(ii,"P",{});var See=s(df);zDr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NK=n(See,"A",{href:!0});var v8t=s(NK);WDr=r(v8t,"from_pretrained()"),v8t.forEach(t),QDr=r(See," class method or the "),jK=n(See,"A",{href:!0});var F8t=s(jK);HDr=r(F8t,"from_config()"),F8t.forEach(t),UDr=r(See,` class
method.`),See.forEach(t),JDr=i(ii),ux=n(ii,"P",{});var gGe=s(ux);YDr=r(gGe,"This class cannot be instantiated directly using "),LEe=n(gGe,"CODE",{});var T8t=s(LEe);KDr=r(T8t,"__init__()"),T8t.forEach(t),ZDr=r(gGe," (throws an error)."),gGe.forEach(t),eGr=i(ii),Kt=n(ii,"DIV",{class:!0});var d6=s(Kt);T(bx.$$.fragment,d6),oGr=i(d6),xEe=n(d6,"P",{});var M8t=s(xEe);rGr=r(M8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),M8t.forEach(t),tGr=i(d6),cf=n(d6,"P",{});var Ree=s(cf);aGr=r(Ree,`Note:
Loading a model from its configuration file does `),$Ee=n(Ree,"STRONG",{});var E8t=s($Ee);nGr=r(E8t,"not"),E8t.forEach(t),sGr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(Ree,"A",{href:!0});var C8t=s(DK);lGr=r(C8t,"from_pretrained()"),C8t.forEach(t),iGr=r(Ree," to load the model weights."),Ree.forEach(t),dGr=i(d6),T(z3.$$.fragment,d6),d6.forEach(t),cGr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(vx.$$.fragment,di),fGr=i(di),kEe=n(di,"P",{});var w8t=s(kEe);mGr=r(w8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),w8t.forEach(t),gGr=i(di),wn=n(di,"P",{});var c6=s(wn);hGr=r(c6,"The model class to instantiate is selected based on the "),SEe=n(c6,"CODE",{});var A8t=s(SEe);pGr=r(A8t,"model_type"),A8t.forEach(t),_Gr=r(c6,` property of the config object (either
passed as an argument or loaded from `),REe=n(c6,"CODE",{});var y8t=s(REe);uGr=r(y8t,"pretrained_model_name_or_path"),y8t.forEach(t),bGr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BEe=n(c6,"CODE",{});var L8t=s(BEe);vGr=r(L8t,"pretrained_model_name_or_path"),L8t.forEach(t),FGr=r(c6,":"),c6.forEach(t),TGr=i(di),PEe=n(di,"UL",{});var x8t=s(PEe);W3=n(x8t,"LI",{});var rqe=s(W3);IEe=n(rqe,"STRONG",{});var $8t=s(IEe);MGr=r($8t,"vision-encoder-decoder"),$8t.forEach(t),EGr=r(rqe," \u2014 "),GK=n(rqe,"A",{href:!0});var k8t=s(GK);CGr=r(k8t,"FlaxVisionEncoderDecoderModel"),k8t.forEach(t),wGr=r(rqe," (Vision Encoder decoder model)"),rqe.forEach(t),x8t.forEach(t),AGr=i(di),T(Q3.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Pxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(N$,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(j$,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig"),c(D$,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig"),c(G$,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig"),c(O$,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig"),c(V$,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(X$,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig"),c(z$,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(W$,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Q$,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(H$,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig"),c(U$,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig"),c(J$,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig"),c(Y$,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig"),c(K$,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig"),c(Z$,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig"),c(ek,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig"),c(ok,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(rk,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(tk,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(ak,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig"),c(nk,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(sk,"href","/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(lk,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig"),c(ik,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig"),c(dk,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig"),c(ck,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig"),c(fk,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig"),c(mk,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig"),c(gk,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(hk,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig"),c(pk,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig"),c(_k,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig"),c(uk,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig"),c(bk,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig"),c(vk,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNConfig"),c(Fk,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config"),c(Tk,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Mk,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig"),c(Ek,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig"),c(Ck,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig"),c(wk,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Ak,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(yk,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Lk,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig"),c(xk,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig"),c($k,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeConfig"),c(kk,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig"),c(Sk,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config"),c(Rk,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig"),c(Bk,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Pk,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig"),c(Ik,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(qk,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Nk,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig"),c(jk,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config"),c(Dk,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Gk,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Ok,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig"),c(Vk,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig"),c(Xk,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig"),c(zk,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig"),c(Wk,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Qk,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Hk,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Uk,"href","/docs/transformers/pr_17202/en/model_doc/rag#transformers.RagConfig"),c(Jk,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmConfig"),c(Yk,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig"),c(Kk,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig"),c(Zk,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig"),c(eS,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig"),c(oS,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig"),c(rS,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig"),c(tS,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig"),c(aS,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig"),c(nS,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig"),c(sS,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig"),c(lS,"href","/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(iS,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(dS,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(cS,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig"),c(fS,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(mS,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig"),c(gS,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config"),c(hS,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig"),c(pS,"href","/docs/transformers/pr_17202/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(_S,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(uS,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRConfig"),c(bS,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(vS,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(FS,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig"),c(TS,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltConfig"),c(MS,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(ES,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(CS,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(wS,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig"),c(AS,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(yS,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(LS,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(xS,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig"),c($S,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig"),c(kS,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig"),c(SS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(RS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(BS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(PS,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig"),c(IS,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig"),c(qS,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mg,"id","transformers.AutoTokenizer"),c(Mg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(NS,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(jS,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(DS,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(GS,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartTokenizer"),c(OS,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartTokenizerFast"),c(VS,"href","/docs/transformers/pr_17202/en/model_doc/barthez#transformers.BarthezTokenizer"),c(XS,"href","/docs/transformers/pr_17202/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(zS,"href","/docs/transformers/pr_17202/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(WS,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(QS,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(HS,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(US,"href","/docs/transformers/pr_17202/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(JS,"href","/docs/transformers/pr_17202/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(YS,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(KS,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eR,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oR,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(rR,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(tR,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(aR,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(nR,"href","/docs/transformers/pr_17202/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(sR,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertTokenizer"),c(lR,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(iR,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineTokenizer"),c(dR,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPTokenizer"),c(cR,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(fR,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(mR,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(gR,"href","/docs/transformers/pr_17202/en/model_doc/cpm#transformers.CpmTokenizer"),c(hR,"href","/docs/transformers/pr_17202/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(pR,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(_R,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bR,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaTokenizer"),c(vR,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(FR,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(TR,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(MR,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(ER,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(CR,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(wR,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(AR,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraTokenizer"),c(yR,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(LR,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(xR,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetTokenizer"),c($R,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(kR,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(SR,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelTokenizer"),c(RR,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(BR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(IR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(qR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(NR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(jR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(DR,"href","/docs/transformers/pr_17202/en/model_doc/herbert#transformers.HerbertTokenizer"),c(GR,"href","/docs/transformers/pr_17202/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(OR,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(VR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(WR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(QR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(HR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(UR,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(JR,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(YR,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDTokenizer"),c(KR,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerTokenizer"),c(eB,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(oB,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeTokenizer"),c(rB,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(tB,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(aB,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(nB,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianTokenizer"),c(sB,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartTokenizer"),c(lB,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(iB,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(dB,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(cB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(fB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(mB,"href","/docs/transformers/pr_17202/en/model_doc/mluke#transformers.MLukeTokenizer"),c(gB,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(hB,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(pB,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(_B,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(uB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5Tokenizer"),c(bB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5TokenizerFast"),c(vB,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(FB,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(TB,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(MB,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(EB,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CB,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(wB,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(AB,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(yB,"href","/docs/transformers/pr_17202/en/model_doc/phobert#transformers.PhobertTokenizer"),c(LB,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartTokenizer"),c(xB,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c($B,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(kB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(SB,"href","/docs/transformers/pr_17202/en/model_doc/rag#transformers.RagTokenizer"),c(RB,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmTokenizer"),c(BB,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmTokenizerFast"),c(PB,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerTokenizer"),c(IB,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(qB,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertTokenizer"),c(NB,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(DB,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(GB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VB,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(XB,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(zB,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(WB,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(QB,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterTokenizer"),c(HB,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(UB,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(JB,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(YB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5Tokenizer"),c(KB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5TokenizerFast"),c(ZB,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasTokenizer"),c(eP,"href","/docs/transformers/pr_17202/en/model_doc/tapex#transformers.TapexTokenizer"),c(oP,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(rP,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(tP,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(aP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(sP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(lP,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMTokenizer"),c(iP,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(dP,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMTokenizer"),c(cP,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(fP,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(mP,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(gP,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hP,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pP,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(_P,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(uP,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(bP,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(th,"id","transformers.AutoFeatureExtractor"),c(th,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(th,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(vP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(FP,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(TP,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(MP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(CP,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(wP,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(AP,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(yP,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(LP,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(xP,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c($P,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kP,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(SP,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(RP,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(BP,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(PP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(IP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qP,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(NP,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(jP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(DP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(GP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(OP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(VP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(XP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zP,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"id","transformers.AutoProcessor"),c(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rh,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(WP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(QP,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPProcessor"),c(HP,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(UP,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(JP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KP,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(ZP,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(eI,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRProcessor"),c(oI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tI,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltProcessor"),c(aI,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(nI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zh,"id","transformers.AutoModel"),c(Zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(iI,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dI,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cI,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fI,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertModel"),c(mI,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartModel"),c(gI,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitModel"),c(hI,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel"),c(pI,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(_I,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdModel"),c(uI,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(bI,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(vI,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(FI,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomModel"),c(TI,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertModel"),c(MI,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineModel"),c(EI,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPModel"),c(CI,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertModel"),c(wI,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextModel"),c(AI,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLModel"),c(yI,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(LI,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(xI,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c($I,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaModel"),c(kI,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(SI,"href","/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(RI,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTModel"),c(BI,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrModel"),c(PI,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertModel"),c(II,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(qI,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTModel"),c(NI,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraModel"),c(jI,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertModel"),c(DI,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaModel"),c(GI,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetModel"),c(OI,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTModel"),c(VI,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelModel"),c(XI,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelBaseModel"),c(zI,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNModel"),c(WI,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Model"),c(QI,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(HI,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJModel"),c(UI,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertModel"),c(JI,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertModel"),c(YI,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(KI,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(ZI,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(eq,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDModel"),c(oq,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerModel"),c(rq,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeModel"),c(tq,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertModel"),c(aq,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Model"),c(nq,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianModel"),c(sq,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerModel"),c(lq,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartModel"),c(iq,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(dq,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertModel"),c(cq,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetModel"),c(fq,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Model"),c(mq,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerModel"),c(gq,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(hq,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTModel"),c(pq,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusModel"),c(_q,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverModel"),c(uq,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartModel"),c(bq,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerModel"),c(vq,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Fq,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Tq,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModel"),c(Mq,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetModel"),c(Eq,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertModel"),c(Cq,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetModel"),c(wq,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel"),c(Aq,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaModel"),c(yq,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerModel"),c(Lq,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerModel"),c(xq,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWModel"),c($q,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDModel"),c(kq,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Sq,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterModel"),c(Rq,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Bq,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinModel"),c(Pq,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Model"),c(Iq,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasModel"),c(qq,"href","/docs/transformers/pr_17202/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Nq,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(jq,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Dq,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Gq,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanModel"),c(Oq,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltModel"),c(Vq,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Xq,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertModel"),c(zq,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTModel"),c(Wq,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Qq,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Hq,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Uq,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMModel"),c(Jq,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMModel"),c(Yq,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMModel"),c(Kq,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Zq,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(eN,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(oN,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetModel"),c(rN,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosModel"),c(tN,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H_,"id","transformers.AutoModelForPreTraining"),c(H_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H_,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(aN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lN,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForPreTraining"),c(iN,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dN,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForPreTraining"),c(cN,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(fN,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM"),c(mN,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gN,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(hN,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pN,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(_N,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uN,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(bN,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForPreTraining"),c(vN,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(FN,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaForPreTraining"),c(TN,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForPreTraining"),c(MN,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(EN,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(CN,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(wN,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(AN,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(yN,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(LN,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(xN,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c($N,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(kN,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(SN,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(RN,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel"),c(BN,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(PN,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(IN,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(qN,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(NN,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jN,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(DN,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(GN,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(ON,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(VN,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(XN,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(zN,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(WN,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QN,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(HN,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(UN,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gu,"id","transformers.AutoModelForCausalLM"),c(Gu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gu,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(JN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZN,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForCausalLM"),c(ej,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertLMHeadModel"),c(oj,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(rj,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(tj,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(aj,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(nj,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(sj,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM"),c(lj,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(ij,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(dj,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(cj,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForCausalLM"),c(fj,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(mj,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(gj,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(hj,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianForCausalLM"),c(pj,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForCausalLM"),c(_j,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(uj,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(bj,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTForCausalLM"),c(vj,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Fj,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Tj,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Mj,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Ej,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Cj,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(wj,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Aj,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(yj,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Lj,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xj,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c($j,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(kj,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Sj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Rj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Bj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Pj,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L2,"id","transformers.AutoModelForMaskedLM"),c(L2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L2,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Ij,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jj,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Gj,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(zj,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Yj,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(eD,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(oD,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(rD,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(aD,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(nD,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(sD,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(lD,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(iD,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(dD,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(cD,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(fD,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(mD,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(gD,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(hD,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(pD,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_D,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(uD,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(bD,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g1,"id","transformers.AutoModelForSeq2SeqLM"),c(g1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(vD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MD,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(CD,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(yD,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c($D,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianMTModel"),c(kD,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(ID,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R1,"id","transformers.AutoModelForSequenceClassification"),c(R1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R1,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(ND,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GD,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c($G,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xb,"id","transformers.AutoModelForMultipleChoice"),c(xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xb,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(RG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IG,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iv,"id","transformers.AutoModelForNextSentencePrediction"),c(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iv,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(fO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hO,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(pO,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(_O,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(uO,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(bO,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uv,"id","transformers.AutoModelForTokenClassification"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(vO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MO,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(EO,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForTokenClassification"),c(CO,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(wO,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(AO,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForTokenClassification"),c(yO,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(LO,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(xO,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c($O,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(kO,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(SO,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(RO,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(BO,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(PO,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(IO,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(qO,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(NO,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(jO,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(DO,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(GO,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(OO,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(VO,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(XO,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(zO,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(WO,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(QO,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(HO,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(UO,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(JO,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(YO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(KO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(eV,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForQuestionAnswering"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(oV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aV,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(bV,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(jV,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(OV,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VF,"id","transformers.AutoModelForTableQuestionAnswering"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(VV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WV,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForImageClassification"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(QV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForImageClassification"),c(YV,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(KV,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(ZV,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassification"),c(eX,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(oX,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(rX,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(tX,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(aX,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(nX,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(sX,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(lX,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(iX,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(dX,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForImageClassification"),c(cX,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanForImageClassification"),c(fX,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d0,"id","transformers.AutoModelForVision2Seq"),c(d0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d0,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(mX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h0,"id","transformers.AutoModelForAudioClassification"),c(h0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h0,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(_X,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y0,"id","transformers.AutoModelForAudioFrameClassification"),c(y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y0,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(LX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(SX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(RX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(BX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(PX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I0,"id","transformers.AutoModelForCTC"),c(I0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I0,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(IX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(DX,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForCTC"),c(GX,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForCTC"),c(OX,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForCTC"),c(VX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(XX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(zX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(WX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(QX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.AutoModelForSpeechSeq2Seq"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(HX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(KX,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.AutoModelForAudioXVector"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(ZX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(tz,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(az,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(nz,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(sz,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForMaskedImageModeling"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(lz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cz,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(fz,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(mz,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForObjectDetection"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(gz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_z,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForObjectDetection"),c(uz,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForImageSegmentation"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(bz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tz,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.AutoModelForSemanticSegmentation"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Mz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Az,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(yz,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Lz,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.AutoModelForInstanceSegmentation"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(xz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($z,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sz,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.TFAutoModel"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertModel"),c(qz,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartModel"),c(Nz,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertModel"),c(jz,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Dz,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Gz,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertModel"),c(Oz,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.TFCLIPModel"),c(Vz,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertModel"),c(Xz,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextModel"),c(zz,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Wz,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Qz,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaModel"),c(Hz,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Uz,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Jz,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Yz,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraModel"),c(Kz,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Zz,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelModel"),c(eW,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(oW,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2Model"),c(rW,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJModel"),c(tW,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.TFHubertModel"),c(aW,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(nW,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDModel"),c(sW,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerModel"),c(lW,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertModel"),c(iW,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianModel"),c(dW,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartModel"),c(cW,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(fW,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetModel"),c(mW,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5Model"),c(gW,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(hW,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusModel"),c(pW,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertModel"),c(_W,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaModel"),c(uW,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerModel"),c(bW,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(vW,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinModel"),c(FW,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5Model"),c(TW,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasModel"),c(MW,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(EW,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTModel"),c(CW,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(wW,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(AW,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMModel"),c(yW,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(LW,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P7,"id","transformers.TFAutoModelForPreTraining"),c(P7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P7,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(xW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($W,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SW,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(RW,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(BW,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForPreTraining"),c(PW,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(IW,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(qW,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(NW,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(jW,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(DW,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(GW,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(OW,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(VW,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(XW,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(zW,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(WW,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(QW,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(HW,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(UW,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(JW,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(YW,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(KW,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZW,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.TFAutoModelForCausalLM"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(oQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aQ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(nQ,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(sQ,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(iQ,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(dQ,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(cQ,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(fQ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(mQ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(gQ,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(hQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MM,"id","transformers.TFAutoModelForImageClassification"),c(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MM,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(_Q,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(FQ,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(TQ,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(MQ,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.TFAutoModelForMaskedLM"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(EQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c($Q,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(PQ,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(WQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(JQ,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(YQ,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(KQ,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(ZQ,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(eH,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianMTModel"),c(oH,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(rH,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(tH,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(aH,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.TFAutoModelForSequenceClassification"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(nH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(CH,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(AH,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(LH,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(xH,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c($H,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(SH,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(RH,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.TFAutoModelForMultipleChoice"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(BH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(NH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(jH,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(DH,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(GH,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(OH,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(VH,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(XH,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(zH,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(WH,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(QH,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(HH,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(UH,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(JH,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(YH,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(KH,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(ZH,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(eU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(aU,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(nU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForTokenClassification"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(dU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(gU,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(hU,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(pU,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(_U,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(uU,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(bU,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(vU,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(FU,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(TU,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(MU,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(EU,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(CU,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(wU,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(AU,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(yU,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(LU,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(xU,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c($U,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(kU,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NE,"id","transformers.TFAutoModelForQuestionAnswering"),c(NE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(SU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PU,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(XU,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(ZU,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(eJ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.TFAutoModelForVision2Seq"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(oJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(nJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.FlaxAutoModel"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(dJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertModel"),c(gJ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartModel"),c(hJ,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitModel"),c(pJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertModel"),c(_J,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(uJ,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(bJ,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(vJ,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.FlaxCLIPModel"),c(FJ,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(TJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraModel"),c(MJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(EJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(CJ,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(wJ,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianModel"),c(AJ,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartModel"),c(yJ,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5Model"),c(LJ,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(xJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaModel"),c($J,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(kJ,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5Model"),c(SJ,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(RJ,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTModel"),c(BJ,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(PJ,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(IJ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.FlaxAutoModelForCausalLM"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(qJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(GJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(OJ,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(VJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(XJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(zJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(WJ,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(QJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(HJ,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.FlaxAutoModelForPreTraining"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(ZJ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(oY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(rY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(tY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aY,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(sY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(lY,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(iY,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(dY,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_5,"id","transformers.FlaxAutoModelForMaskedLM"),c(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(cY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(hY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(_Y,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(uY,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(bY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(vY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(FY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(TY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(MY,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yY,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(xY,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c($Y,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(kY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SY,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(PY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(jY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(DY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(GY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(OY,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(VY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(XY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(zY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(WY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(HY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g3,"id","transformers.FlaxAutoModelForTokenClassification"),c(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(lK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cK,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(fK,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(mK,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(gK,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(hK,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(pK,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(_K,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(uK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(C3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(bK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TK,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(MK,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(EK,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(CK,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(AK,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(yK,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(LK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(xK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($K,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SK,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j3,"id","transformers.FlaxAutoModelForImageClassification"),c(j3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j3,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(RK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(qK,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X3,"id","transformers.FlaxAutoModelForVision2Seq"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(NK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GK,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,u),b(f,rt,u),e(rt,fi),e(rt,mi),e(mi,f6),e(rt,pf),b(f,je,u),b(f,We,u),e(We,gi),e(We,yn),e(yn,m6),e(We,Ln),e(We,xn),e(xn,g6),e(We,hi),e(We,$n),e($n,h6),e(We,pi),b(f,_f,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,S$),e(Ae,_i),e(_i,R$),e(Ae,B$),b(f,Eo,u),b(f,wa,u),e(wa,P$),e(wa,uf),e(uf,I$),e(wa,hGe),b(f,tqe,u),b(f,ui,u),e(ui,bf),e(bf,Bee),M(p6,Bee,null),e(ui,pGe),e(ui,Pee),e(Pee,_Ge),b(f,aqe,u),b(f,kn,u),e(kn,uGe),e(kn,Iee),e(Iee,bGe),e(kn,vGe),e(kn,qee),e(qee,FGe),e(kn,TGe),b(f,nqe,u),M(_6,f,u),b(f,sqe,u),b(f,q$,u),e(q$,MGe),b(f,lqe,u),M(vf,f,u),b(f,iqe,u),b(f,bi,u),e(bi,Ff),e(Ff,Nee),M(u6,Nee,null),e(bi,EGe),e(bi,jee),e(jee,CGe),b(f,dqe,u),b(f,Co,u),M(b6,Co,null),e(Co,wGe),e(Co,v6),e(v6,AGe),e(v6,N$),e(N$,yGe),e(v6,LGe),e(Co,xGe),e(Co,F6),e(F6,$Ge),e(F6,Dee),e(Dee,kGe),e(F6,SGe),e(Co,RGe),e(Co,Er),M(T6,Er,null),e(Er,BGe),e(Er,Gee),e(Gee,PGe),e(Er,IGe),e(Er,vi),e(vi,qGe),e(vi,Oee),e(Oee,NGe),e(vi,jGe),e(vi,Vee),e(Vee,DGe),e(vi,GGe),e(Er,OGe),e(Er,A),e(A,Tf),e(Tf,Xee),e(Xee,VGe),e(Tf,XGe),e(Tf,j$),e(j$,zGe),e(Tf,WGe),e(A,QGe),e(A,Mf),e(Mf,zee),e(zee,HGe),e(Mf,UGe),e(Mf,D$),e(D$,JGe),e(Mf,YGe),e(A,KGe),e(A,Ef),e(Ef,Wee),e(Wee,ZGe),e(Ef,eOe),e(Ef,G$),e(G$,oOe),e(Ef,rOe),e(A,tOe),e(A,Cf),e(Cf,Qee),e(Qee,aOe),e(Cf,nOe),e(Cf,O$),e(O$,sOe),e(Cf,lOe),e(A,iOe),e(A,wf),e(wf,Hee),e(Hee,dOe),e(wf,cOe),e(wf,V$),e(V$,fOe),e(wf,mOe),e(A,gOe),e(A,Af),e(Af,Uee),e(Uee,hOe),e(Af,pOe),e(Af,X$),e(X$,_Oe),e(Af,uOe),e(A,bOe),e(A,yf),e(yf,Jee),e(Jee,vOe),e(yf,FOe),e(yf,z$),e(z$,TOe),e(yf,MOe),e(A,EOe),e(A,Lf),e(Lf,Yee),e(Yee,COe),e(Lf,wOe),e(Lf,W$),e(W$,AOe),e(Lf,yOe),e(A,LOe),e(A,xf),e(xf,Kee),e(Kee,xOe),e(xf,$Oe),e(xf,Q$),e(Q$,kOe),e(xf,SOe),e(A,ROe),e(A,$f),e($f,Zee),e(Zee,BOe),e($f,POe),e($f,H$),e(H$,IOe),e($f,qOe),e(A,NOe),e(A,kf),e(kf,eoe),e(eoe,jOe),e(kf,DOe),e(kf,U$),e(U$,GOe),e(kf,OOe),e(A,VOe),e(A,Sf),e(Sf,ooe),e(ooe,XOe),e(Sf,zOe),e(Sf,J$),e(J$,WOe),e(Sf,QOe),e(A,HOe),e(A,Rf),e(Rf,roe),e(roe,UOe),e(Rf,JOe),e(Rf,Y$),e(Y$,YOe),e(Rf,KOe),e(A,ZOe),e(A,Bf),e(Bf,toe),e(toe,eVe),e(Bf,oVe),e(Bf,K$),e(K$,rVe),e(Bf,tVe),e(A,aVe),e(A,Pf),e(Pf,aoe),e(aoe,nVe),e(Pf,sVe),e(Pf,Z$),e(Z$,lVe),e(Pf,iVe),e(A,dVe),e(A,If),e(If,noe),e(noe,cVe),e(If,fVe),e(If,ek),e(ek,mVe),e(If,gVe),e(A,hVe),e(A,qf),e(qf,soe),e(soe,pVe),e(qf,_Ve),e(qf,ok),e(ok,uVe),e(qf,bVe),e(A,vVe),e(A,Nf),e(Nf,loe),e(loe,FVe),e(Nf,TVe),e(Nf,rk),e(rk,MVe),e(Nf,EVe),e(A,CVe),e(A,jf),e(jf,ioe),e(ioe,wVe),e(jf,AVe),e(jf,tk),e(tk,yVe),e(jf,LVe),e(A,xVe),e(A,Df),e(Df,doe),e(doe,$Ve),e(Df,kVe),e(Df,ak),e(ak,SVe),e(Df,RVe),e(A,BVe),e(A,Gf),e(Gf,coe),e(coe,PVe),e(Gf,IVe),e(Gf,nk),e(nk,qVe),e(Gf,NVe),e(A,jVe),e(A,Of),e(Of,foe),e(foe,DVe),e(Of,GVe),e(Of,sk),e(sk,OVe),e(Of,VVe),e(A,XVe),e(A,Vf),e(Vf,moe),e(moe,zVe),e(Vf,WVe),e(Vf,lk),e(lk,QVe),e(Vf,HVe),e(A,UVe),e(A,Xf),e(Xf,goe),e(goe,JVe),e(Xf,YVe),e(Xf,ik),e(ik,KVe),e(Xf,ZVe),e(A,eXe),e(A,zf),e(zf,hoe),e(hoe,oXe),e(zf,rXe),e(zf,dk),e(dk,tXe),e(zf,aXe),e(A,nXe),e(A,Wf),e(Wf,poe),e(poe,sXe),e(Wf,lXe),e(Wf,ck),e(ck,iXe),e(Wf,dXe),e(A,cXe),e(A,Qf),e(Qf,_oe),e(_oe,fXe),e(Qf,mXe),e(Qf,fk),e(fk,gXe),e(Qf,hXe),e(A,pXe),e(A,Hf),e(Hf,uoe),e(uoe,_Xe),e(Hf,uXe),e(Hf,mk),e(mk,bXe),e(Hf,vXe),e(A,FXe),e(A,Uf),e(Uf,boe),e(boe,TXe),e(Uf,MXe),e(Uf,gk),e(gk,EXe),e(Uf,CXe),e(A,wXe),e(A,Jf),e(Jf,voe),e(voe,AXe),e(Jf,yXe),e(Jf,hk),e(hk,LXe),e(Jf,xXe),e(A,$Xe),e(A,Yf),e(Yf,Foe),e(Foe,kXe),e(Yf,SXe),e(Yf,pk),e(pk,RXe),e(Yf,BXe),e(A,PXe),e(A,Kf),e(Kf,Toe),e(Toe,IXe),e(Kf,qXe),e(Kf,_k),e(_k,NXe),e(Kf,jXe),e(A,DXe),e(A,Zf),e(Zf,Moe),e(Moe,GXe),e(Zf,OXe),e(Zf,uk),e(uk,VXe),e(Zf,XXe),e(A,zXe),e(A,em),e(em,Eoe),e(Eoe,WXe),e(em,QXe),e(em,bk),e(bk,HXe),e(em,UXe),e(A,JXe),e(A,om),e(om,Coe),e(Coe,YXe),e(om,KXe),e(om,vk),e(vk,ZXe),e(om,eze),e(A,oze),e(A,rm),e(rm,woe),e(woe,rze),e(rm,tze),e(rm,Fk),e(Fk,aze),e(rm,nze),e(A,sze),e(A,tm),e(tm,Aoe),e(Aoe,lze),e(tm,ize),e(tm,Tk),e(Tk,dze),e(tm,cze),e(A,fze),e(A,am),e(am,yoe),e(yoe,mze),e(am,gze),e(am,Mk),e(Mk,hze),e(am,pze),e(A,_ze),e(A,nm),e(nm,Loe),e(Loe,uze),e(nm,bze),e(nm,Ek),e(Ek,vze),e(nm,Fze),e(A,Tze),e(A,sm),e(sm,xoe),e(xoe,Mze),e(sm,Eze),e(sm,Ck),e(Ck,Cze),e(sm,wze),e(A,Aze),e(A,lm),e(lm,$oe),e($oe,yze),e(lm,Lze),e(lm,wk),e(wk,xze),e(lm,$ze),e(A,kze),e(A,im),e(im,koe),e(koe,Sze),e(im,Rze),e(im,Ak),e(Ak,Bze),e(im,Pze),e(A,Ize),e(A,dm),e(dm,Soe),e(Soe,qze),e(dm,Nze),e(dm,yk),e(yk,jze),e(dm,Dze),e(A,Gze),e(A,cm),e(cm,Roe),e(Roe,Oze),e(cm,Vze),e(cm,Lk),e(Lk,Xze),e(cm,zze),e(A,Wze),e(A,fm),e(fm,Boe),e(Boe,Qze),e(fm,Hze),e(fm,xk),e(xk,Uze),e(fm,Jze),e(A,Yze),e(A,mm),e(mm,Poe),e(Poe,Kze),e(mm,Zze),e(mm,$k),e($k,eWe),e(mm,oWe),e(A,rWe),e(A,gm),e(gm,Ioe),e(Ioe,tWe),e(gm,aWe),e(gm,kk),e(kk,nWe),e(gm,sWe),e(A,lWe),e(A,hm),e(hm,qoe),e(qoe,iWe),e(hm,dWe),e(hm,Sk),e(Sk,cWe),e(hm,fWe),e(A,mWe),e(A,pm),e(pm,Noe),e(Noe,gWe),e(pm,hWe),e(pm,Rk),e(Rk,pWe),e(pm,_We),e(A,uWe),e(A,_m),e(_m,joe),e(joe,bWe),e(_m,vWe),e(_m,Bk),e(Bk,FWe),e(_m,TWe),e(A,MWe),e(A,um),e(um,Doe),e(Doe,EWe),e(um,CWe),e(um,Pk),e(Pk,wWe),e(um,AWe),e(A,yWe),e(A,bm),e(bm,Goe),e(Goe,LWe),e(bm,xWe),e(bm,Ik),e(Ik,$We),e(bm,kWe),e(A,SWe),e(A,vm),e(vm,Ooe),e(Ooe,RWe),e(vm,BWe),e(vm,qk),e(qk,PWe),e(vm,IWe),e(A,qWe),e(A,Fm),e(Fm,Voe),e(Voe,NWe),e(Fm,jWe),e(Fm,Nk),e(Nk,DWe),e(Fm,GWe),e(A,OWe),e(A,Tm),e(Tm,Xoe),e(Xoe,VWe),e(Tm,XWe),e(Tm,jk),e(jk,zWe),e(Tm,WWe),e(A,QWe),e(A,Mm),e(Mm,zoe),e(zoe,HWe),e(Mm,UWe),e(Mm,Dk),e(Dk,JWe),e(Mm,YWe),e(A,KWe),e(A,Em),e(Em,Woe),e(Woe,ZWe),e(Em,eQe),e(Em,Gk),e(Gk,oQe),e(Em,rQe),e(A,tQe),e(A,Cm),e(Cm,Qoe),e(Qoe,aQe),e(Cm,nQe),e(Cm,Ok),e(Ok,sQe),e(Cm,lQe),e(A,iQe),e(A,wm),e(wm,Hoe),e(Hoe,dQe),e(wm,cQe),e(wm,Vk),e(Vk,fQe),e(wm,mQe),e(A,gQe),e(A,Am),e(Am,Uoe),e(Uoe,hQe),e(Am,pQe),e(Am,Xk),e(Xk,_Qe),e(Am,uQe),e(A,bQe),e(A,ym),e(ym,Joe),e(Joe,vQe),e(ym,FQe),e(ym,zk),e(zk,TQe),e(ym,MQe),e(A,EQe),e(A,Lm),e(Lm,Yoe),e(Yoe,CQe),e(Lm,wQe),e(Lm,Wk),e(Wk,AQe),e(Lm,yQe),e(A,LQe),e(A,xm),e(xm,Koe),e(Koe,xQe),e(xm,$Qe),e(xm,Qk),e(Qk,kQe),e(xm,SQe),e(A,RQe),e(A,$m),e($m,Zoe),e(Zoe,BQe),e($m,PQe),e($m,Hk),e(Hk,IQe),e($m,qQe),e(A,NQe),e(A,km),e(km,ere),e(ere,jQe),e(km,DQe),e(km,Uk),e(Uk,GQe),e(km,OQe),e(A,VQe),e(A,Sm),e(Sm,ore),e(ore,XQe),e(Sm,zQe),e(Sm,Jk),e(Jk,WQe),e(Sm,QQe),e(A,HQe),e(A,Rm),e(Rm,rre),e(rre,UQe),e(Rm,JQe),e(Rm,Yk),e(Yk,YQe),e(Rm,KQe),e(A,ZQe),e(A,Bm),e(Bm,tre),e(tre,eHe),e(Bm,oHe),e(Bm,Kk),e(Kk,rHe),e(Bm,tHe),e(A,aHe),e(A,Pm),e(Pm,are),e(are,nHe),e(Pm,sHe),e(Pm,Zk),e(Zk,lHe),e(Pm,iHe),e(A,dHe),e(A,Im),e(Im,nre),e(nre,cHe),e(Im,fHe),e(Im,eS),e(eS,mHe),e(Im,gHe),e(A,hHe),e(A,qm),e(qm,sre),e(sre,pHe),e(qm,_He),e(qm,oS),e(oS,uHe),e(qm,bHe),e(A,vHe),e(A,Nm),e(Nm,lre),e(lre,FHe),e(Nm,THe),e(Nm,rS),e(rS,MHe),e(Nm,EHe),e(A,CHe),e(A,jm),e(jm,ire),e(ire,wHe),e(jm,AHe),e(jm,tS),e(tS,yHe),e(jm,LHe),e(A,xHe),e(A,Dm),e(Dm,dre),e(dre,$He),e(Dm,kHe),e(Dm,aS),e(aS,SHe),e(Dm,RHe),e(A,BHe),e(A,Gm),e(Gm,cre),e(cre,PHe),e(Gm,IHe),e(Gm,nS),e(nS,qHe),e(Gm,NHe),e(A,jHe),e(A,Om),e(Om,fre),e(fre,DHe),e(Om,GHe),e(Om,sS),e(sS,OHe),e(Om,VHe),e(A,XHe),e(A,Vm),e(Vm,mre),e(mre,zHe),e(Vm,WHe),e(Vm,lS),e(lS,QHe),e(Vm,HHe),e(A,UHe),e(A,Xm),e(Xm,gre),e(gre,JHe),e(Xm,YHe),e(Xm,iS),e(iS,KHe),e(Xm,ZHe),e(A,eUe),e(A,zm),e(zm,hre),e(hre,oUe),e(zm,rUe),e(zm,dS),e(dS,tUe),e(zm,aUe),e(A,nUe),e(A,Wm),e(Wm,pre),e(pre,sUe),e(Wm,lUe),e(Wm,cS),e(cS,iUe),e(Wm,dUe),e(A,cUe),e(A,Qm),e(Qm,_re),e(_re,fUe),e(Qm,mUe),e(Qm,fS),e(fS,gUe),e(Qm,hUe),e(A,pUe),e(A,Hm),e(Hm,ure),e(ure,_Ue),e(Hm,uUe),e(Hm,mS),e(mS,bUe),e(Hm,vUe),e(A,FUe),e(A,Um),e(Um,bre),e(bre,TUe),e(Um,MUe),e(Um,gS),e(gS,EUe),e(Um,CUe),e(A,wUe),e(A,Jm),e(Jm,vre),e(vre,AUe),e(Jm,yUe),e(Jm,hS),e(hS,LUe),e(Jm,xUe),e(A,$Ue),e(A,Ym),e(Ym,Fre),e(Fre,kUe),e(Ym,SUe),e(Ym,pS),e(pS,RUe),e(Ym,BUe),e(A,PUe),e(A,Km),e(Km,Tre),e(Tre,IUe),e(Km,qUe),e(Km,_S),e(_S,NUe),e(Km,jUe),e(A,DUe),e(A,Zm),e(Zm,Mre),e(Mre,GUe),e(Zm,OUe),e(Zm,uS),e(uS,VUe),e(Zm,XUe),e(A,zUe),e(A,eg),e(eg,Ere),e(Ere,WUe),e(eg,QUe),e(eg,bS),e(bS,HUe),e(eg,UUe),e(A,JUe),e(A,og),e(og,Cre),e(Cre,YUe),e(og,KUe),e(og,vS),e(vS,ZUe),e(og,eJe),e(A,oJe),e(A,rg),e(rg,wre),e(wre,rJe),e(rg,tJe),e(rg,FS),e(FS,aJe),e(rg,nJe),e(A,sJe),e(A,tg),e(tg,Are),e(Are,lJe),e(tg,iJe),e(tg,TS),e(TS,dJe),e(tg,cJe),e(A,fJe),e(A,ag),e(ag,yre),e(yre,mJe),e(ag,gJe),e(ag,MS),e(MS,hJe),e(ag,pJe),e(A,_Je),e(A,ng),e(ng,Lre),e(Lre,uJe),e(ng,bJe),e(ng,ES),e(ES,vJe),e(ng,FJe),e(A,TJe),e(A,sg),e(sg,xre),e(xre,MJe),e(sg,EJe),e(sg,CS),e(CS,CJe),e(sg,wJe),e(A,AJe),e(A,lg),e(lg,$re),e($re,yJe),e(lg,LJe),e(lg,wS),e(wS,xJe),e(lg,$Je),e(A,kJe),e(A,ig),e(ig,kre),e(kre,SJe),e(ig,RJe),e(ig,AS),e(AS,BJe),e(ig,PJe),e(A,IJe),e(A,dg),e(dg,Sre),e(Sre,qJe),e(dg,NJe),e(dg,yS),e(yS,jJe),e(dg,DJe),e(A,GJe),e(A,cg),e(cg,Rre),e(Rre,OJe),e(cg,VJe),e(cg,LS),e(LS,XJe),e(cg,zJe),e(A,WJe),e(A,fg),e(fg,Bre),e(Bre,QJe),e(fg,HJe),e(fg,xS),e(xS,UJe),e(fg,JJe),e(A,YJe),e(A,mg),e(mg,Pre),e(Pre,KJe),e(mg,ZJe),e(mg,$S),e($S,eYe),e(mg,oYe),e(A,rYe),e(A,gg),e(gg,Ire),e(Ire,tYe),e(gg,aYe),e(gg,kS),e(kS,nYe),e(gg,sYe),e(A,lYe),e(A,hg),e(hg,qre),e(qre,iYe),e(hg,dYe),e(hg,SS),e(SS,cYe),e(hg,fYe),e(A,mYe),e(A,pg),e(pg,Nre),e(Nre,gYe),e(pg,hYe),e(pg,RS),e(RS,pYe),e(pg,_Ye),e(A,uYe),e(A,_g),e(_g,jre),e(jre,bYe),e(_g,vYe),e(_g,BS),e(BS,FYe),e(_g,TYe),e(A,MYe),e(A,ug),e(ug,Dre),e(Dre,EYe),e(ug,CYe),e(ug,PS),e(PS,wYe),e(ug,AYe),e(A,yYe),e(A,bg),e(bg,Gre),e(Gre,LYe),e(bg,xYe),e(bg,IS),e(IS,$Ye),e(bg,kYe),e(A,SYe),e(A,vg),e(vg,Ore),e(Ore,RYe),e(vg,BYe),e(vg,qS),e(qS,PYe),e(vg,IYe),e(Er,qYe),M(Fg,Er,null),e(Co,NYe),e(Co,Tg),M(M6,Tg,null),e(Tg,jYe),e(Tg,Vre),e(Vre,DYe),b(f,cqe,u),b(f,Fi,u),e(Fi,Mg),e(Mg,Xre),M(E6,Xre,null),e(Fi,GYe),e(Fi,zre),e(zre,OYe),b(f,fqe,u),b(f,wo,u),M(C6,wo,null),e(wo,VYe),e(wo,w6),e(w6,XYe),e(w6,NS),e(NS,zYe),e(w6,WYe),e(wo,QYe),e(wo,A6),e(A6,HYe),e(A6,Wre),e(Wre,UYe),e(A6,JYe),e(wo,YYe),e(wo,Cr),M(y6,Cr,null),e(Cr,KYe),e(Cr,Qre),e(Qre,ZYe),e(Cr,eKe),e(Cr,Aa),e(Aa,oKe),e(Aa,Hre),e(Hre,rKe),e(Aa,tKe),e(Aa,Ure),e(Ure,aKe),e(Aa,nKe),e(Aa,Jre),e(Jre,sKe),e(Aa,lKe),e(Cr,iKe),e(Cr,k),e(k,Sn),e(Sn,Yre),e(Yre,dKe),e(Sn,cKe),e(Sn,jS),e(jS,fKe),e(Sn,mKe),e(Sn,DS),e(DS,gKe),e(Sn,hKe),e(k,pKe),e(k,Rn),e(Rn,Kre),e(Kre,_Ke),e(Rn,uKe),e(Rn,GS),e(GS,bKe),e(Rn,vKe),e(Rn,OS),e(OS,FKe),e(Rn,TKe),e(k,MKe),e(k,Bn),e(Bn,Zre),e(Zre,EKe),e(Bn,CKe),e(Bn,VS),e(VS,wKe),e(Bn,AKe),e(Bn,XS),e(XS,yKe),e(Bn,LKe),e(k,xKe),e(k,Eg),e(Eg,ete),e(ete,$Ke),e(Eg,kKe),e(Eg,zS),e(zS,SKe),e(Eg,RKe),e(k,BKe),e(k,Pn),e(Pn,ote),e(ote,PKe),e(Pn,IKe),e(Pn,WS),e(WS,qKe),e(Pn,NKe),e(Pn,QS),e(QS,jKe),e(Pn,DKe),e(k,GKe),e(k,Cg),e(Cg,rte),e(rte,OKe),e(Cg,VKe),e(Cg,HS),e(HS,XKe),e(Cg,zKe),e(k,WKe),e(k,wg),e(wg,tte),e(tte,QKe),e(wg,HKe),e(wg,US),e(US,UKe),e(wg,JKe),e(k,YKe),e(k,Ag),e(Ag,ate),e(ate,KKe),e(Ag,ZKe),e(Ag,JS),e(JS,eZe),e(Ag,oZe),e(k,rZe),e(k,In),e(In,nte),e(nte,tZe),e(In,aZe),e(In,YS),e(YS,nZe),e(In,sZe),e(In,KS),e(KS,lZe),e(In,iZe),e(k,dZe),e(k,qn),e(qn,ste),e(ste,cZe),e(qn,fZe),e(qn,ZS),e(ZS,mZe),e(qn,gZe),e(qn,eR),e(eR,hZe),e(qn,pZe),e(k,_Ze),e(k,Nn),e(Nn,lte),e(lte,uZe),e(Nn,bZe),e(Nn,oR),e(oR,vZe),e(Nn,FZe),e(Nn,rR),e(rR,TZe),e(Nn,MZe),e(k,EZe),e(k,yg),e(yg,ite),e(ite,CZe),e(yg,wZe),e(yg,tR),e(tR,AZe),e(yg,yZe),e(k,LZe),e(k,Lg),e(Lg,dte),e(dte,xZe),e(Lg,$Ze),e(Lg,aR),e(aR,kZe),e(Lg,SZe),e(k,RZe),e(k,xg),e(xg,cte),e(cte,BZe),e(xg,PZe),e(xg,nR),e(nR,IZe),e(xg,qZe),e(k,NZe),e(k,jn),e(jn,fte),e(fte,jZe),e(jn,DZe),e(jn,sR),e(sR,GZe),e(jn,OZe),e(jn,lR),e(lR,VZe),e(jn,XZe),e(k,zZe),e(k,$g),e($g,mte),e(mte,WZe),e($g,QZe),e($g,iR),e(iR,HZe),e($g,UZe),e(k,JZe),e(k,Dn),e(Dn,gte),e(gte,YZe),e(Dn,KZe),e(Dn,dR),e(dR,ZZe),e(Dn,eeo),e(Dn,cR),e(cR,oeo),e(Dn,reo),e(k,teo),e(k,Gn),e(Gn,hte),e(hte,aeo),e(Gn,neo),e(Gn,fR),e(fR,seo),e(Gn,leo),e(Gn,mR),e(mR,ieo),e(Gn,deo),e(k,ceo),e(k,On),e(On,pte),e(pte,feo),e(On,meo),e(On,gR),e(gR,geo),e(On,heo),e(On,hR),e(hR,peo),e(On,_eo),e(k,ueo),e(k,kg),e(kg,_te),e(_te,beo),e(kg,veo),e(kg,pR),e(pR,Feo),e(kg,Teo),e(k,Meo),e(k,Vn),e(Vn,ute),e(ute,Eeo),e(Vn,Ceo),e(Vn,_R),e(_R,weo),e(Vn,Aeo),e(Vn,uR),e(uR,yeo),e(Vn,Leo),e(k,xeo),e(k,Xn),e(Xn,bte),e(bte,$eo),e(Xn,keo),e(Xn,bR),e(bR,Seo),e(Xn,Reo),e(Xn,vR),e(vR,Beo),e(Xn,Peo),e(k,Ieo),e(k,zn),e(zn,vte),e(vte,qeo),e(zn,Neo),e(zn,FR),e(FR,jeo),e(zn,Deo),e(zn,TR),e(TR,Geo),e(zn,Oeo),e(k,Veo),e(k,Wn),e(Wn,Fte),e(Fte,Xeo),e(Wn,zeo),e(Wn,MR),e(MR,Weo),e(Wn,Qeo),e(Wn,ER),e(ER,Heo),e(Wn,Ueo),e(k,Jeo),e(k,Qn),e(Qn,Tte),e(Tte,Yeo),e(Qn,Keo),e(Qn,CR),e(CR,Zeo),e(Qn,eoo),e(Qn,wR),e(wR,ooo),e(Qn,roo),e(k,too),e(k,Hn),e(Hn,Mte),e(Mte,aoo),e(Hn,noo),e(Hn,AR),e(AR,soo),e(Hn,loo),e(Hn,yR),e(yR,ioo),e(Hn,doo),e(k,coo),e(k,Sg),e(Sg,Ete),e(Ete,foo),e(Sg,moo),e(Sg,LR),e(LR,goo),e(Sg,hoo),e(k,poo),e(k,Un),e(Un,Cte),e(Cte,_oo),e(Un,uoo),e(Un,xR),e(xR,boo),e(Un,voo),e(Un,$R),e($R,Foo),e(Un,Too),e(k,Moo),e(k,Rg),e(Rg,wte),e(wte,Eoo),e(Rg,Coo),e(Rg,kR),e(kR,woo),e(Rg,Aoo),e(k,yoo),e(k,Jn),e(Jn,Ate),e(Ate,Loo),e(Jn,xoo),e(Jn,SR),e(SR,$oo),e(Jn,koo),e(Jn,RR),e(RR,Soo),e(Jn,Roo),e(k,Boo),e(k,Yn),e(Yn,yte),e(yte,Poo),e(Yn,Ioo),e(Yn,BR),e(BR,qoo),e(Yn,Noo),e(Yn,PR),e(PR,joo),e(Yn,Doo),e(k,Goo),e(k,Kn),e(Kn,Lte),e(Lte,Ooo),e(Kn,Voo),e(Kn,IR),e(IR,Xoo),e(Kn,zoo),e(Kn,qR),e(qR,Woo),e(Kn,Qoo),e(k,Hoo),e(k,Zn),e(Zn,xte),e(xte,Uoo),e(Zn,Joo),e(Zn,NR),e(NR,Yoo),e(Zn,Koo),e(Zn,jR),e(jR,Zoo),e(Zn,ero),e(k,oro),e(k,es),e(es,$te),e($te,rro),e(es,tro),e(es,DR),e(DR,aro),e(es,nro),e(es,GR),e(GR,sro),e(es,lro),e(k,iro),e(k,Bg),e(Bg,kte),e(kte,dro),e(Bg,cro),e(Bg,OR),e(OR,fro),e(Bg,mro),e(k,gro),e(k,os),e(os,Ste),e(Ste,hro),e(os,pro),e(os,VR),e(VR,_ro),e(os,uro),e(os,XR),e(XR,bro),e(os,vro),e(k,Fro),e(k,rs),e(rs,Rte),e(Rte,Tro),e(rs,Mro),e(rs,zR),e(zR,Ero),e(rs,Cro),e(rs,WR),e(WR,wro),e(rs,Aro),e(k,yro),e(k,ts),e(ts,Bte),e(Bte,Lro),e(ts,xro),e(ts,QR),e(QR,$ro),e(ts,kro),e(ts,HR),e(HR,Sro),e(ts,Rro),e(k,Bro),e(k,as),e(as,Pte),e(Pte,Pro),e(as,Iro),e(as,UR),e(UR,qro),e(as,Nro),e(as,JR),e(JR,jro),e(as,Dro),e(k,Gro),e(k,ns),e(ns,Ite),e(Ite,Oro),e(ns,Vro),e(ns,YR),e(YR,Xro),e(ns,zro),e(ns,KR),e(KR,Wro),e(ns,Qro),e(k,Hro),e(k,ss),e(ss,qte),e(qte,Uro),e(ss,Jro),e(ss,ZR),e(ZR,Yro),e(ss,Kro),e(ss,eB),e(eB,Zro),e(ss,eto),e(k,oto),e(k,Pg),e(Pg,Nte),e(Nte,rto),e(Pg,tto),e(Pg,oB),e(oB,ato),e(Pg,nto),e(k,sto),e(k,ls),e(ls,jte),e(jte,lto),e(ls,ito),e(ls,rB),e(rB,dto),e(ls,cto),e(ls,tB),e(tB,fto),e(ls,mto),e(k,gto),e(k,Ig),e(Ig,Dte),e(Dte,hto),e(Ig,pto),e(Ig,aB),e(aB,_to),e(Ig,uto),e(k,bto),e(k,qg),e(qg,Gte),e(Gte,vto),e(qg,Fto),e(qg,nB),e(nB,Tto),e(qg,Mto),e(k,Eto),e(k,is),e(is,Ote),e(Ote,Cto),e(is,wto),e(is,sB),e(sB,Ato),e(is,yto),e(is,lB),e(lB,Lto),e(is,xto),e(k,$to),e(k,ds),e(ds,Vte),e(Vte,kto),e(ds,Sto),e(ds,iB),e(iB,Rto),e(ds,Bto),e(ds,dB),e(dB,Pto),e(ds,Ito),e(k,qto),e(k,cs),e(cs,Xte),e(Xte,Nto),e(cs,jto),e(cs,cB),e(cB,Dto),e(cs,Gto),e(cs,fB),e(fB,Oto),e(cs,Vto),e(k,Xto),e(k,Ng),e(Ng,zte),e(zte,zto),e(Ng,Wto),e(Ng,mB),e(mB,Qto),e(Ng,Hto),e(k,Uto),e(k,fs),e(fs,Wte),e(Wte,Jto),e(fs,Yto),e(fs,gB),e(gB,Kto),e(fs,Zto),e(fs,hB),e(hB,eao),e(fs,oao),e(k,rao),e(k,ms),e(ms,Qte),e(Qte,tao),e(ms,aao),e(ms,pB),e(pB,nao),e(ms,sao),e(ms,_B),e(_B,lao),e(ms,iao),e(k,dao),e(k,gs),e(gs,Hte),e(Hte,cao),e(gs,fao),e(gs,uB),e(uB,mao),e(gs,gao),e(gs,bB),e(bB,hao),e(gs,pao),e(k,_ao),e(k,hs),e(hs,Ute),e(Ute,uao),e(hs,bao),e(hs,vB),e(vB,vao),e(hs,Fao),e(hs,FB),e(FB,Tao),e(hs,Mao),e(k,Eao),e(k,ps),e(ps,Jte),e(Jte,Cao),e(ps,wao),e(ps,TB),e(TB,Aao),e(ps,yao),e(ps,MB),e(MB,Lao),e(ps,xao),e(k,$ao),e(k,jg),e(jg,Yte),e(Yte,kao),e(jg,Sao),e(jg,EB),e(EB,Rao),e(jg,Bao),e(k,Pao),e(k,_s),e(_s,Kte),e(Kte,Iao),e(_s,qao),e(_s,CB),e(CB,Nao),e(_s,jao),e(_s,wB),e(wB,Dao),e(_s,Gao),e(k,Oao),e(k,Dg),e(Dg,Zte),e(Zte,Vao),e(Dg,Xao),e(Dg,AB),e(AB,zao),e(Dg,Wao),e(k,Qao),e(k,Gg),e(Gg,eae),e(eae,Hao),e(Gg,Uao),e(Gg,yB),e(yB,Jao),e(Gg,Yao),e(k,Kao),e(k,Og),e(Og,oae),e(oae,Zao),e(Og,eno),e(Og,LB),e(LB,ono),e(Og,rno),e(k,tno),e(k,Vg),e(Vg,rae),e(rae,ano),e(Vg,nno),e(Vg,xB),e(xB,sno),e(Vg,lno),e(k,ino),e(k,us),e(us,tae),e(tae,dno),e(us,cno),e(us,$B),e($B,fno),e(us,mno),e(us,kB),e(kB,gno),e(us,hno),e(k,pno),e(k,Xg),e(Xg,aae),e(aae,_no),e(Xg,uno),e(Xg,SB),e(SB,bno),e(Xg,vno),e(k,Fno),e(k,bs),e(bs,nae),e(nae,Tno),e(bs,Mno),e(bs,RB),e(RB,Eno),e(bs,Cno),e(bs,BB),e(BB,wno),e(bs,Ano),e(k,yno),e(k,vs),e(vs,sae),e(sae,Lno),e(vs,xno),e(vs,PB),e(PB,$no),e(vs,kno),e(vs,IB),e(IB,Sno),e(vs,Rno),e(k,Bno),e(k,Fs),e(Fs,lae),e(lae,Pno),e(Fs,Ino),e(Fs,qB),e(qB,qno),e(Fs,Nno),e(Fs,NB),e(NB,jno),e(Fs,Dno),e(k,Gno),e(k,Ts),e(Ts,iae),e(iae,Ono),e(Ts,Vno),e(Ts,jB),e(jB,Xno),e(Ts,zno),e(Ts,DB),e(DB,Wno),e(Ts,Qno),e(k,Hno),e(k,Ms),e(Ms,dae),e(dae,Uno),e(Ms,Jno),e(Ms,GB),e(GB,Yno),e(Ms,Kno),e(Ms,OB),e(OB,Zno),e(Ms,eso),e(k,oso),e(k,Es),e(Es,cae),e(cae,rso),e(Es,tso),e(Es,VB),e(VB,aso),e(Es,nso),e(Es,XB),e(XB,sso),e(Es,lso),e(k,iso),e(k,zg),e(zg,fae),e(fae,dso),e(zg,cso),e(zg,zB),e(zB,fso),e(zg,mso),e(k,gso),e(k,Wg),e(Wg,mae),e(mae,hso),e(Wg,pso),e(Wg,WB),e(WB,_so),e(Wg,uso),e(k,bso),e(k,Cs),e(Cs,gae),e(gae,vso),e(Cs,Fso),e(Cs,QB),e(QB,Tso),e(Cs,Mso),e(Cs,HB),e(HB,Eso),e(Cs,Cso),e(k,wso),e(k,ws),e(ws,hae),e(hae,Aso),e(ws,yso),e(ws,UB),e(UB,Lso),e(ws,xso),e(ws,JB),e(JB,$so),e(ws,kso),e(k,Sso),e(k,As),e(As,pae),e(pae,Rso),e(As,Bso),e(As,YB),e(YB,Pso),e(As,Iso),e(As,KB),e(KB,qso),e(As,Nso),e(k,jso),e(k,Qg),e(Qg,_ae),e(_ae,Dso),e(Qg,Gso),e(Qg,ZB),e(ZB,Oso),e(Qg,Vso),e(k,Xso),e(k,Hg),e(Hg,uae),e(uae,zso),e(Hg,Wso),e(Hg,eP),e(eP,Qso),e(Hg,Hso),e(k,Uso),e(k,Ug),e(Ug,bae),e(bae,Jso),e(Ug,Yso),e(Ug,oP),e(oP,Kso),e(Ug,Zso),e(k,elo),e(k,ys),e(ys,vae),e(vae,olo),e(ys,rlo),e(ys,rP),e(rP,tlo),e(ys,alo),e(ys,tP),e(tP,nlo),e(ys,slo),e(k,llo),e(k,Jg),e(Jg,Fae),e(Fae,ilo),e(Jg,dlo),e(Jg,aP),e(aP,clo),e(Jg,flo),e(k,mlo),e(k,Yg),e(Yg,Tae),e(Tae,glo),e(Yg,hlo),e(Yg,nP),e(nP,plo),e(Yg,_lo),e(k,ulo),e(k,Kg),e(Kg,Mae),e(Mae,blo),e(Kg,vlo),e(Kg,sP),e(sP,Flo),e(Kg,Tlo),e(k,Mlo),e(k,Ls),e(Ls,Eae),e(Eae,Elo),e(Ls,Clo),e(Ls,lP),e(lP,wlo),e(Ls,Alo),e(Ls,iP),e(iP,ylo),e(Ls,Llo),e(k,xlo),e(k,Zg),e(Zg,Cae),e(Cae,$lo),e(Zg,klo),e(Zg,dP),e(dP,Slo),e(Zg,Rlo),e(k,Blo),e(k,eh),e(eh,wae),e(wae,Plo),e(eh,Ilo),e(eh,cP),e(cP,qlo),e(eh,Nlo),e(k,jlo),e(k,xs),e(xs,Aae),e(Aae,Dlo),e(xs,Glo),e(xs,fP),e(fP,Olo),e(xs,Vlo),e(xs,mP),e(mP,Xlo),e(xs,zlo),e(k,Wlo),e(k,$s),e($s,yae),e(yae,Qlo),e($s,Hlo),e($s,gP),e(gP,Ulo),e($s,Jlo),e($s,hP),e(hP,Ylo),e($s,Klo),e(k,Zlo),e(k,ks),e(ks,Lae),e(Lae,eio),e(ks,oio),e(ks,pP),e(pP,rio),e(ks,tio),e(ks,_P),e(_P,aio),e(ks,nio),e(k,sio),e(k,Ss),e(Ss,xae),e(xae,lio),e(Ss,iio),e(Ss,uP),e(uP,dio),e(Ss,cio),e(Ss,bP),e(bP,fio),e(Ss,mio),e(Cr,gio),M(oh,Cr,null),e(wo,hio),e(wo,rh),M(L6,rh,null),e(rh,pio),e(rh,$ae),e($ae,_io),b(f,mqe,u),b(f,Ti,u),e(Ti,th),e(th,kae),M(x6,kae,null),e(Ti,uio),e(Ti,Sae),e(Sae,bio),b(f,gqe,u),b(f,Ao,u),M($6,Ao,null),e(Ao,vio),e(Ao,k6),e(k6,Fio),e(k6,vP),e(vP,Tio),e(k6,Mio),e(Ao,Eio),e(Ao,S6),e(S6,Cio),e(S6,Rae),e(Rae,wio),e(S6,Aio),e(Ao,yio),e(Ao,He),M(R6,He,null),e(He,Lio),e(He,Bae),e(Bae,xio),e(He,$io),e(He,ya),e(ya,kio),e(ya,Pae),e(Pae,Sio),e(ya,Rio),e(ya,Iae),e(Iae,Bio),e(ya,Pio),e(ya,qae),e(qae,Iio),e(ya,qio),e(He,Nio),e(He,Z),e(Z,ah),e(ah,Nae),e(Nae,jio),e(ah,Dio),e(ah,FP),e(FP,Gio),e(ah,Oio),e(Z,Vio),e(Z,nh),e(nh,jae),e(jae,Xio),e(nh,zio),e(nh,TP),e(TP,Wio),e(nh,Qio),e(Z,Hio),e(Z,sh),e(sh,Dae),e(Dae,Uio),e(sh,Jio),e(sh,MP),e(MP,Yio),e(sh,Kio),e(Z,Zio),e(Z,lh),e(lh,Gae),e(Gae,edo),e(lh,odo),e(lh,EP),e(EP,rdo),e(lh,tdo),e(Z,ado),e(Z,ih),e(ih,Oae),e(Oae,ndo),e(ih,sdo),e(ih,CP),e(CP,ldo),e(ih,ido),e(Z,ddo),e(Z,dh),e(dh,Vae),e(Vae,cdo),e(dh,fdo),e(dh,wP),e(wP,mdo),e(dh,gdo),e(Z,hdo),e(Z,ch),e(ch,Xae),e(Xae,pdo),e(ch,_do),e(ch,AP),e(AP,udo),e(ch,bdo),e(Z,vdo),e(Z,fh),e(fh,zae),e(zae,Fdo),e(fh,Tdo),e(fh,yP),e(yP,Mdo),e(fh,Edo),e(Z,Cdo),e(Z,mh),e(mh,Wae),e(Wae,wdo),e(mh,Ado),e(mh,LP),e(LP,ydo),e(mh,Ldo),e(Z,xdo),e(Z,gh),e(gh,Qae),e(Qae,$do),e(gh,kdo),e(gh,xP),e(xP,Sdo),e(gh,Rdo),e(Z,Bdo),e(Z,hh),e(hh,Hae),e(Hae,Pdo),e(hh,Ido),e(hh,$P),e($P,qdo),e(hh,Ndo),e(Z,jdo),e(Z,ph),e(ph,Uae),e(Uae,Ddo),e(ph,Gdo),e(ph,kP),e(kP,Odo),e(ph,Vdo),e(Z,Xdo),e(Z,_h),e(_h,Jae),e(Jae,zdo),e(_h,Wdo),e(_h,SP),e(SP,Qdo),e(_h,Hdo),e(Z,Udo),e(Z,uh),e(uh,Yae),e(Yae,Jdo),e(uh,Ydo),e(uh,RP),e(RP,Kdo),e(uh,Zdo),e(Z,eco),e(Z,bh),e(bh,Kae),e(Kae,oco),e(bh,rco),e(bh,BP),e(BP,tco),e(bh,aco),e(Z,nco),e(Z,vh),e(vh,Zae),e(Zae,sco),e(vh,lco),e(vh,PP),e(PP,ico),e(vh,dco),e(Z,cco),e(Z,Fh),e(Fh,ene),e(ene,fco),e(Fh,mco),e(Fh,IP),e(IP,gco),e(Fh,hco),e(Z,pco),e(Z,Th),e(Th,one),e(one,_co),e(Th,uco),e(Th,qP),e(qP,bco),e(Th,vco),e(Z,Fco),e(Z,Mh),e(Mh,rne),e(rne,Tco),e(Mh,Mco),e(Mh,NP),e(NP,Eco),e(Mh,Cco),e(Z,wco),e(Z,Eh),e(Eh,tne),e(tne,Aco),e(Eh,yco),e(Eh,jP),e(jP,Lco),e(Eh,xco),e(Z,$co),e(Z,Ch),e(Ch,ane),e(ane,kco),e(Ch,Sco),e(Ch,DP),e(DP,Rco),e(Ch,Bco),e(Z,Pco),e(Z,wh),e(wh,nne),e(nne,Ico),e(wh,qco),e(wh,GP),e(GP,Nco),e(wh,jco),e(Z,Dco),e(Z,Ah),e(Ah,sne),e(sne,Gco),e(Ah,Oco),e(Ah,OP),e(OP,Vco),e(Ah,Xco),e(Z,zco),e(Z,yh),e(yh,lne),e(lne,Wco),e(yh,Qco),e(yh,VP),e(VP,Hco),e(yh,Uco),e(Z,Jco),e(Z,Lh),e(Lh,ine),e(ine,Yco),e(Lh,Kco),e(Lh,XP),e(XP,Zco),e(Lh,efo),e(Z,ofo),e(Z,xh),e(xh,dne),e(dne,rfo),e(xh,tfo),e(xh,zP),e(zP,afo),e(xh,nfo),e(He,sfo),M($h,He,null),e(He,lfo),M(kh,He,null),e(Ao,ifo),e(Ao,Sh),M(B6,Sh,null),e(Sh,dfo),e(Sh,cne),e(cne,cfo),b(f,hqe,u),b(f,Mi,u),e(Mi,Rh),e(Rh,fne),M(P6,fne,null),e(Mi,ffo),e(Mi,mne),e(mne,mfo),b(f,pqe,u),b(f,yo,u),M(I6,yo,null),e(yo,gfo),e(yo,q6),e(q6,hfo),e(q6,WP),e(WP,pfo),e(q6,_fo),e(yo,ufo),e(yo,N6),e(N6,bfo),e(N6,gne),e(gne,vfo),e(N6,Ffo),e(yo,Tfo),e(yo,Ue),M(j6,Ue,null),e(Ue,Mfo),e(Ue,hne),e(hne,Efo),e(Ue,Cfo),e(Ue,Ei),e(Ei,wfo),e(Ei,pne),e(pne,Afo),e(Ei,yfo),e(Ei,_ne),e(_ne,Lfo),e(Ei,xfo),e(Ue,$fo),e(Ue,pe),e(pe,Bh),e(Bh,une),e(une,kfo),e(Bh,Sfo),e(Bh,QP),e(QP,Rfo),e(Bh,Bfo),e(pe,Pfo),e(pe,Ph),e(Ph,bne),e(bne,Ifo),e(Ph,qfo),e(Ph,vne),e(vne,Nfo),e(Ph,jfo),e(pe,Dfo),e(pe,Ih),e(Ih,Fne),e(Fne,Gfo),e(Ih,Ofo),e(Ih,HP),e(HP,Vfo),e(Ih,Xfo),e(pe,zfo),e(pe,qh),e(qh,Tne),e(Tne,Wfo),e(qh,Qfo),e(qh,UP),e(UP,Hfo),e(qh,Ufo),e(pe,Jfo),e(pe,Nh),e(Nh,Mne),e(Mne,Yfo),e(Nh,Kfo),e(Nh,JP),e(JP,Zfo),e(Nh,emo),e(pe,omo),e(pe,jh),e(jh,Ene),e(Ene,rmo),e(jh,tmo),e(jh,YP),e(YP,amo),e(jh,nmo),e(pe,smo),e(pe,Dh),e(Dh,Cne),e(Cne,lmo),e(Dh,imo),e(Dh,KP),e(KP,dmo),e(Dh,cmo),e(pe,fmo),e(pe,Gh),e(Gh,wne),e(wne,mmo),e(Gh,gmo),e(Gh,ZP),e(ZP,hmo),e(Gh,pmo),e(pe,_mo),e(pe,Oh),e(Oh,Ane),e(Ane,umo),e(Oh,bmo),e(Oh,eI),e(eI,vmo),e(Oh,Fmo),e(pe,Tmo),e(pe,Vh),e(Vh,yne),e(yne,Mmo),e(Vh,Emo),e(Vh,oI),e(oI,Cmo),e(Vh,wmo),e(pe,Amo),e(pe,Xh),e(Xh,Lne),e(Lne,ymo),e(Xh,Lmo),e(Xh,rI),e(rI,xmo),e(Xh,$mo),e(pe,kmo),e(pe,zh),e(zh,xne),e(xne,Smo),e(zh,Rmo),e(zh,tI),e(tI,Bmo),e(zh,Pmo),e(pe,Imo),e(pe,Wh),e(Wh,$ne),e($ne,qmo),e(Wh,Nmo),e(Wh,aI),e(aI,jmo),e(Wh,Dmo),e(pe,Gmo),e(pe,Qh),e(Qh,kne),e(kne,Omo),e(Qh,Vmo),e(Qh,nI),e(nI,Xmo),e(Qh,zmo),e(pe,Wmo),e(pe,Hh),e(Hh,Sne),e(Sne,Qmo),e(Hh,Hmo),e(Hh,sI),e(sI,Umo),e(Hh,Jmo),e(pe,Ymo),e(pe,Uh),e(Uh,Rne),e(Rne,Kmo),e(Uh,Zmo),e(Uh,lI),e(lI,ego),e(Uh,ogo),e(Ue,rgo),M(Jh,Ue,null),e(Ue,tgo),M(Yh,Ue,null),e(yo,ago),e(yo,Kh),M(D6,Kh,null),e(Kh,ngo),e(Kh,Bne),e(Bne,sgo),b(f,_qe,u),b(f,Ci,u),e(Ci,Zh),e(Zh,Pne),M(G6,Pne,null),e(Ci,lgo),e(Ci,Ine),e(Ine,igo),b(f,uqe,u),b(f,Lo,u),M(O6,Lo,null),e(Lo,dgo),e(Lo,wi),e(wi,cgo),e(wi,iI),e(iI,fgo),e(wi,mgo),e(wi,dI),e(dI,ggo),e(wi,hgo),e(Lo,pgo),e(Lo,V6),e(V6,_go),e(V6,qne),e(qne,ugo),e(V6,bgo),e(Lo,vgo),e(Lo,tt),M(X6,tt,null),e(tt,Fgo),e(tt,Nne),e(Nne,Tgo),e(tt,Mgo),e(tt,Ai),e(Ai,Ego),e(Ai,jne),e(jne,Cgo),e(Ai,wgo),e(Ai,cI),e(cI,Ago),e(Ai,ygo),e(tt,Lgo),M(ep,tt,null),e(Lo,xgo),e(Lo,Je),M(z6,Je,null),e(Je,$go),e(Je,Dne),e(Dne,kgo),e(Je,Sgo),e(Je,La),e(La,Rgo),e(La,Gne),e(Gne,Bgo),e(La,Pgo),e(La,One),e(One,Igo),e(La,qgo),e(La,Vne),e(Vne,Ngo),e(La,jgo),e(Je,Dgo),e(Je,x),e(x,op),e(op,Xne),e(Xne,Ggo),e(op,Ogo),e(op,fI),e(fI,Vgo),e(op,Xgo),e(x,zgo),e(x,rp),e(rp,zne),e(zne,Wgo),e(rp,Qgo),e(rp,mI),e(mI,Hgo),e(rp,Ugo),e(x,Jgo),e(x,tp),e(tp,Wne),e(Wne,Ygo),e(tp,Kgo),e(tp,gI),e(gI,Zgo),e(tp,eho),e(x,oho),e(x,ap),e(ap,Qne),e(Qne,rho),e(ap,tho),e(ap,hI),e(hI,aho),e(ap,nho),e(x,sho),e(x,np),e(np,Hne),e(Hne,lho),e(np,iho),e(np,pI),e(pI,dho),e(np,cho),e(x,fho),e(x,sp),e(sp,Une),e(Une,mho),e(sp,gho),e(sp,_I),e(_I,hho),e(sp,pho),e(x,_ho),e(x,lp),e(lp,Jne),e(Jne,uho),e(lp,bho),e(lp,uI),e(uI,vho),e(lp,Fho),e(x,Tho),e(x,ip),e(ip,Yne),e(Yne,Mho),e(ip,Eho),e(ip,bI),e(bI,Cho),e(ip,who),e(x,Aho),e(x,dp),e(dp,Kne),e(Kne,yho),e(dp,Lho),e(dp,vI),e(vI,xho),e(dp,$ho),e(x,kho),e(x,cp),e(cp,Zne),e(Zne,Sho),e(cp,Rho),e(cp,FI),e(FI,Bho),e(cp,Pho),e(x,Iho),e(x,fp),e(fp,ese),e(ese,qho),e(fp,Nho),e(fp,TI),e(TI,jho),e(fp,Dho),e(x,Gho),e(x,mp),e(mp,ose),e(ose,Oho),e(mp,Vho),e(mp,MI),e(MI,Xho),e(mp,zho),e(x,Who),e(x,gp),e(gp,rse),e(rse,Qho),e(gp,Hho),e(gp,EI),e(EI,Uho),e(gp,Jho),e(x,Yho),e(x,hp),e(hp,tse),e(tse,Kho),e(hp,Zho),e(hp,CI),e(CI,epo),e(hp,opo),e(x,rpo),e(x,pp),e(pp,ase),e(ase,tpo),e(pp,apo),e(pp,wI),e(wI,npo),e(pp,spo),e(x,lpo),e(x,_p),e(_p,nse),e(nse,ipo),e(_p,dpo),e(_p,AI),e(AI,cpo),e(_p,fpo),e(x,mpo),e(x,up),e(up,sse),e(sse,gpo),e(up,hpo),e(up,yI),e(yI,ppo),e(up,_po),e(x,upo),e(x,bp),e(bp,lse),e(lse,bpo),e(bp,vpo),e(bp,LI),e(LI,Fpo),e(bp,Tpo),e(x,Mpo),e(x,vp),e(vp,ise),e(ise,Epo),e(vp,Cpo),e(vp,xI),e(xI,wpo),e(vp,Apo),e(x,ypo),e(x,Fp),e(Fp,dse),e(dse,Lpo),e(Fp,xpo),e(Fp,$I),e($I,$po),e(Fp,kpo),e(x,Spo),e(x,Tp),e(Tp,cse),e(cse,Rpo),e(Tp,Bpo),e(Tp,kI),e(kI,Ppo),e(Tp,Ipo),e(x,qpo),e(x,Mp),e(Mp,fse),e(fse,Npo),e(Mp,jpo),e(Mp,SI),e(SI,Dpo),e(Mp,Gpo),e(x,Opo),e(x,Ep),e(Ep,mse),e(mse,Vpo),e(Ep,Xpo),e(Ep,RI),e(RI,zpo),e(Ep,Wpo),e(x,Qpo),e(x,Cp),e(Cp,gse),e(gse,Hpo),e(Cp,Upo),e(Cp,BI),e(BI,Jpo),e(Cp,Ypo),e(x,Kpo),e(x,wp),e(wp,hse),e(hse,Zpo),e(wp,e_o),e(wp,PI),e(PI,o_o),e(wp,r_o),e(x,t_o),e(x,Ap),e(Ap,pse),e(pse,a_o),e(Ap,n_o),e(Ap,II),e(II,s_o),e(Ap,l_o),e(x,i_o),e(x,yp),e(yp,_se),e(_se,d_o),e(yp,c_o),e(yp,qI),e(qI,f_o),e(yp,m_o),e(x,g_o),e(x,Lp),e(Lp,use),e(use,h_o),e(Lp,p_o),e(Lp,NI),e(NI,__o),e(Lp,u_o),e(x,b_o),e(x,xp),e(xp,bse),e(bse,v_o),e(xp,F_o),e(xp,jI),e(jI,T_o),e(xp,M_o),e(x,E_o),e(x,$p),e($p,vse),e(vse,C_o),e($p,w_o),e($p,DI),e(DI,A_o),e($p,y_o),e(x,L_o),e(x,kp),e(kp,Fse),e(Fse,x_o),e(kp,$_o),e(kp,GI),e(GI,k_o),e(kp,S_o),e(x,R_o),e(x,Sp),e(Sp,Tse),e(Tse,B_o),e(Sp,P_o),e(Sp,OI),e(OI,I_o),e(Sp,q_o),e(x,N_o),e(x,Rs),e(Rs,Mse),e(Mse,j_o),e(Rs,D_o),e(Rs,VI),e(VI,G_o),e(Rs,O_o),e(Rs,XI),e(XI,V_o),e(Rs,X_o),e(x,z_o),e(x,Rp),e(Rp,Ese),e(Ese,W_o),e(Rp,Q_o),e(Rp,zI),e(zI,H_o),e(Rp,U_o),e(x,J_o),e(x,Bp),e(Bp,Cse),e(Cse,Y_o),e(Bp,K_o),e(Bp,WI),e(WI,Z_o),e(Bp,euo),e(x,ouo),e(x,Pp),e(Pp,wse),e(wse,ruo),e(Pp,tuo),e(Pp,QI),e(QI,auo),e(Pp,nuo),e(x,suo),e(x,Ip),e(Ip,Ase),e(Ase,luo),e(Ip,iuo),e(Ip,HI),e(HI,duo),e(Ip,cuo),e(x,fuo),e(x,qp),e(qp,yse),e(yse,muo),e(qp,guo),e(qp,UI),e(UI,huo),e(qp,puo),e(x,_uo),e(x,Np),e(Np,Lse),e(Lse,uuo),e(Np,buo),e(Np,JI),e(JI,vuo),e(Np,Fuo),e(x,Tuo),e(x,jp),e(jp,xse),e(xse,Muo),e(jp,Euo),e(jp,YI),e(YI,Cuo),e(jp,wuo),e(x,Auo),e(x,Dp),e(Dp,$se),e($se,yuo),e(Dp,Luo),e(Dp,KI),e(KI,xuo),e(Dp,$uo),e(x,kuo),e(x,Gp),e(Gp,kse),e(kse,Suo),e(Gp,Ruo),e(Gp,ZI),e(ZI,Buo),e(Gp,Puo),e(x,Iuo),e(x,Op),e(Op,Sse),e(Sse,quo),e(Op,Nuo),e(Op,eq),e(eq,juo),e(Op,Duo),e(x,Guo),e(x,Vp),e(Vp,Rse),e(Rse,Ouo),e(Vp,Vuo),e(Vp,oq),e(oq,Xuo),e(Vp,zuo),e(x,Wuo),e(x,Xp),e(Xp,Bse),e(Bse,Quo),e(Xp,Huo),e(Xp,rq),e(rq,Uuo),e(Xp,Juo),e(x,Yuo),e(x,zp),e(zp,Pse),e(Pse,Kuo),e(zp,Zuo),e(zp,tq),e(tq,e2o),e(zp,o2o),e(x,r2o),e(x,Wp),e(Wp,Ise),e(Ise,t2o),e(Wp,a2o),e(Wp,aq),e(aq,n2o),e(Wp,s2o),e(x,l2o),e(x,Qp),e(Qp,qse),e(qse,i2o),e(Qp,d2o),e(Qp,nq),e(nq,c2o),e(Qp,f2o),e(x,m2o),e(x,Hp),e(Hp,Nse),e(Nse,g2o),e(Hp,h2o),e(Hp,sq),e(sq,p2o),e(Hp,_2o),e(x,u2o),e(x,Up),e(Up,jse),e(jse,b2o),e(Up,v2o),e(Up,lq),e(lq,F2o),e(Up,T2o),e(x,M2o),e(x,Jp),e(Jp,Dse),e(Dse,E2o),e(Jp,C2o),e(Jp,iq),e(iq,w2o),e(Jp,A2o),e(x,y2o),e(x,Yp),e(Yp,Gse),e(Gse,L2o),e(Yp,x2o),e(Yp,dq),e(dq,$2o),e(Yp,k2o),e(x,S2o),e(x,Kp),e(Kp,Ose),e(Ose,R2o),e(Kp,B2o),e(Kp,cq),e(cq,P2o),e(Kp,I2o),e(x,q2o),e(x,Zp),e(Zp,Vse),e(Vse,N2o),e(Zp,j2o),e(Zp,fq),e(fq,D2o),e(Zp,G2o),e(x,O2o),e(x,e_),e(e_,Xse),e(Xse,V2o),e(e_,X2o),e(e_,mq),e(mq,z2o),e(e_,W2o),e(x,Q2o),e(x,o_),e(o_,zse),e(zse,H2o),e(o_,U2o),e(o_,gq),e(gq,J2o),e(o_,Y2o),e(x,K2o),e(x,r_),e(r_,Wse),e(Wse,Z2o),e(r_,e1o),e(r_,hq),e(hq,o1o),e(r_,r1o),e(x,t1o),e(x,t_),e(t_,Qse),e(Qse,a1o),e(t_,n1o),e(t_,pq),e(pq,s1o),e(t_,l1o),e(x,i1o),e(x,a_),e(a_,Hse),e(Hse,d1o),e(a_,c1o),e(a_,_q),e(_q,f1o),e(a_,m1o),e(x,g1o),e(x,n_),e(n_,Use),e(Use,h1o),e(n_,p1o),e(n_,uq),e(uq,_1o),e(n_,u1o),e(x,b1o),e(x,s_),e(s_,Jse),e(Jse,v1o),e(s_,F1o),e(s_,bq),e(bq,T1o),e(s_,M1o),e(x,E1o),e(x,l_),e(l_,Yse),e(Yse,C1o),e(l_,w1o),e(l_,vq),e(vq,A1o),e(l_,y1o),e(x,L1o),e(x,i_),e(i_,Kse),e(Kse,x1o),e(i_,$1o),e(i_,Fq),e(Fq,k1o),e(i_,S1o),e(x,R1o),e(x,d_),e(d_,Zse),e(Zse,B1o),e(d_,P1o),e(d_,Tq),e(Tq,I1o),e(d_,q1o),e(x,N1o),e(x,c_),e(c_,ele),e(ele,j1o),e(c_,D1o),e(c_,Mq),e(Mq,G1o),e(c_,O1o),e(x,V1o),e(x,f_),e(f_,ole),e(ole,X1o),e(f_,z1o),e(f_,Eq),e(Eq,W1o),e(f_,Q1o),e(x,H1o),e(x,m_),e(m_,rle),e(rle,U1o),e(m_,J1o),e(m_,Cq),e(Cq,Y1o),e(m_,K1o),e(x,Z1o),e(x,g_),e(g_,tle),e(tle,ebo),e(g_,obo),e(g_,wq),e(wq,rbo),e(g_,tbo),e(x,abo),e(x,h_),e(h_,ale),e(ale,nbo),e(h_,sbo),e(h_,Aq),e(Aq,lbo),e(h_,ibo),e(x,dbo),e(x,p_),e(p_,nle),e(nle,cbo),e(p_,fbo),e(p_,yq),e(yq,mbo),e(p_,gbo),e(x,hbo),e(x,__),e(__,sle),e(sle,pbo),e(__,_bo),e(__,Lq),e(Lq,ubo),e(__,bbo),e(x,vbo),e(x,u_),e(u_,lle),e(lle,Fbo),e(u_,Tbo),e(u_,xq),e(xq,Mbo),e(u_,Ebo),e(x,Cbo),e(x,b_),e(b_,ile),e(ile,wbo),e(b_,Abo),e(b_,$q),e($q,ybo),e(b_,Lbo),e(x,xbo),e(x,v_),e(v_,dle),e(dle,$bo),e(v_,kbo),e(v_,kq),e(kq,Sbo),e(v_,Rbo),e(x,Bbo),e(x,F_),e(F_,cle),e(cle,Pbo),e(F_,Ibo),e(F_,Sq),e(Sq,qbo),e(F_,Nbo),e(x,jbo),e(x,T_),e(T_,fle),e(fle,Dbo),e(T_,Gbo),e(T_,Rq),e(Rq,Obo),e(T_,Vbo),e(x,Xbo),e(x,M_),e(M_,mle),e(mle,zbo),e(M_,Wbo),e(M_,Bq),e(Bq,Qbo),e(M_,Hbo),e(x,Ubo),e(x,E_),e(E_,gle),e(gle,Jbo),e(E_,Ybo),e(E_,Pq),e(Pq,Kbo),e(E_,Zbo),e(x,evo),e(x,C_),e(C_,hle),e(hle,ovo),e(C_,rvo),e(C_,Iq),e(Iq,tvo),e(C_,avo),e(x,nvo),e(x,w_),e(w_,ple),e(ple,svo),e(w_,lvo),e(w_,qq),e(qq,ivo),e(w_,dvo),e(x,cvo),e(x,A_),e(A_,_le),e(_le,fvo),e(A_,mvo),e(A_,Nq),e(Nq,gvo),e(A_,hvo),e(x,pvo),e(x,y_),e(y_,ule),e(ule,_vo),e(y_,uvo),e(y_,jq),e(jq,bvo),e(y_,vvo),e(x,Fvo),e(x,L_),e(L_,ble),e(ble,Tvo),e(L_,Mvo),e(L_,Dq),e(Dq,Evo),e(L_,Cvo),e(x,wvo),e(x,x_),e(x_,vle),e(vle,Avo),e(x_,yvo),e(x_,Gq),e(Gq,Lvo),e(x_,xvo),e(x,$vo),e(x,$_),e($_,Fle),e(Fle,kvo),e($_,Svo),e($_,Oq),e(Oq,Rvo),e($_,Bvo),e(x,Pvo),e(x,k_),e(k_,Tle),e(Tle,Ivo),e(k_,qvo),e(k_,Vq),e(Vq,Nvo),e(k_,jvo),e(x,Dvo),e(x,S_),e(S_,Mle),e(Mle,Gvo),e(S_,Ovo),e(S_,Xq),e(Xq,Vvo),e(S_,Xvo),e(x,zvo),e(x,R_),e(R_,Ele),e(Ele,Wvo),e(R_,Qvo),e(R_,zq),e(zq,Hvo),e(R_,Uvo),e(x,Jvo),e(x,B_),e(B_,Cle),e(Cle,Yvo),e(B_,Kvo),e(B_,Wq),e(Wq,Zvo),e(B_,eFo),e(x,oFo),e(x,P_),e(P_,wle),e(wle,rFo),e(P_,tFo),e(P_,Qq),e(Qq,aFo),e(P_,nFo),e(x,sFo),e(x,I_),e(I_,Ale),e(Ale,lFo),e(I_,iFo),e(I_,Hq),e(Hq,dFo),e(I_,cFo),e(x,fFo),e(x,q_),e(q_,yle),e(yle,mFo),e(q_,gFo),e(q_,Uq),e(Uq,hFo),e(q_,pFo),e(x,_Fo),e(x,N_),e(N_,Lle),e(Lle,uFo),e(N_,bFo),e(N_,Jq),e(Jq,vFo),e(N_,FFo),e(x,TFo),e(x,j_),e(j_,xle),e(xle,MFo),e(j_,EFo),e(j_,Yq),e(Yq,CFo),e(j_,wFo),e(x,AFo),e(x,D_),e(D_,$le),e($le,yFo),e(D_,LFo),e(D_,Kq),e(Kq,xFo),e(D_,$Fo),e(x,kFo),e(x,G_),e(G_,kle),e(kle,SFo),e(G_,RFo),e(G_,Zq),e(Zq,BFo),e(G_,PFo),e(x,IFo),e(x,O_),e(O_,Sle),e(Sle,qFo),e(O_,NFo),e(O_,eN),e(eN,jFo),e(O_,DFo),e(x,GFo),e(x,V_),e(V_,Rle),e(Rle,OFo),e(V_,VFo),e(V_,oN),e(oN,XFo),e(V_,zFo),e(x,WFo),e(x,X_),e(X_,Ble),e(Ble,QFo),e(X_,HFo),e(X_,rN),e(rN,UFo),e(X_,JFo),e(x,YFo),e(x,z_),e(z_,Ple),e(Ple,KFo),e(z_,ZFo),e(z_,tN),e(tN,e0o),e(z_,o0o),e(Je,r0o),e(Je,W_),e(W_,t0o),e(W_,Ile),e(Ile,a0o),e(W_,n0o),e(W_,qle),e(qle,s0o),e(Je,l0o),M(Q_,Je,null),b(f,bqe,u),b(f,yi,u),e(yi,H_),e(H_,Nle),M(W6,Nle,null),e(yi,i0o),e(yi,jle),e(jle,d0o),b(f,vqe,u),b(f,xo,u),M(Q6,xo,null),e(xo,c0o),e(xo,Li),e(Li,f0o),e(Li,aN),e(aN,m0o),e(Li,g0o),e(Li,nN),e(nN,h0o),e(Li,p0o),e(xo,_0o),e(xo,H6),e(H6,u0o),e(H6,Dle),e(Dle,b0o),e(H6,v0o),e(xo,F0o),e(xo,at),M(U6,at,null),e(at,T0o),e(at,Gle),e(Gle,M0o),e(at,E0o),e(at,xi),e(xi,C0o),e(xi,Ole),e(Ole,w0o),e(xi,A0o),e(xi,sN),e(sN,y0o),e(xi,L0o),e(at,x0o),M(U_,at,null),e(xo,$0o),e(xo,Ye),M(J6,Ye,null),e(Ye,k0o),e(Ye,Vle),e(Vle,S0o),e(Ye,R0o),e(Ye,xa),e(xa,B0o),e(xa,Xle),e(Xle,P0o),e(xa,I0o),e(xa,zle),e(zle,q0o),e(xa,N0o),e(xa,Wle),e(Wle,j0o),e(xa,D0o),e(Ye,G0o),e(Ye,G),e(G,J_),e(J_,Qle),e(Qle,O0o),e(J_,V0o),e(J_,lN),e(lN,X0o),e(J_,z0o),e(G,W0o),e(G,Y_),e(Y_,Hle),e(Hle,Q0o),e(Y_,H0o),e(Y_,iN),e(iN,U0o),e(Y_,J0o),e(G,Y0o),e(G,K_),e(K_,Ule),e(Ule,K0o),e(K_,Z0o),e(K_,dN),e(dN,eTo),e(K_,oTo),e(G,rTo),e(G,Z_),e(Z_,Jle),e(Jle,tTo),e(Z_,aTo),e(Z_,cN),e(cN,nTo),e(Z_,sTo),e(G,lTo),e(G,eu),e(eu,Yle),e(Yle,iTo),e(eu,dTo),e(eu,fN),e(fN,cTo),e(eu,fTo),e(G,mTo),e(G,ou),e(ou,Kle),e(Kle,gTo),e(ou,hTo),e(ou,mN),e(mN,pTo),e(ou,_To),e(G,uTo),e(G,ru),e(ru,Zle),e(Zle,bTo),e(ru,vTo),e(ru,gN),e(gN,FTo),e(ru,TTo),e(G,MTo),e(G,tu),e(tu,eie),e(eie,ETo),e(tu,CTo),e(tu,hN),e(hN,wTo),e(tu,ATo),e(G,yTo),e(G,au),e(au,oie),e(oie,LTo),e(au,xTo),e(au,pN),e(pN,$To),e(au,kTo),e(G,STo),e(G,nu),e(nu,rie),e(rie,RTo),e(nu,BTo),e(nu,_N),e(_N,PTo),e(nu,ITo),e(G,qTo),e(G,su),e(su,tie),e(tie,NTo),e(su,jTo),e(su,uN),e(uN,DTo),e(su,GTo),e(G,OTo),e(G,lu),e(lu,aie),e(aie,VTo),e(lu,XTo),e(lu,bN),e(bN,zTo),e(lu,WTo),e(G,QTo),e(G,iu),e(iu,nie),e(nie,HTo),e(iu,UTo),e(iu,vN),e(vN,JTo),e(iu,YTo),e(G,KTo),e(G,du),e(du,sie),e(sie,ZTo),e(du,e7o),e(du,FN),e(FN,o7o),e(du,r7o),e(G,t7o),e(G,cu),e(cu,lie),e(lie,a7o),e(cu,n7o),e(cu,TN),e(TN,s7o),e(cu,l7o),e(G,i7o),e(G,fu),e(fu,iie),e(iie,d7o),e(fu,c7o),e(fu,MN),e(MN,f7o),e(fu,m7o),e(G,g7o),e(G,mu),e(mu,die),e(die,h7o),e(mu,p7o),e(mu,EN),e(EN,_7o),e(mu,u7o),e(G,b7o),e(G,gu),e(gu,cie),e(cie,v7o),e(gu,F7o),e(gu,CN),e(CN,T7o),e(gu,M7o),e(G,E7o),e(G,hu),e(hu,fie),e(fie,C7o),e(hu,w7o),e(hu,wN),e(wN,A7o),e(hu,y7o),e(G,L7o),e(G,pu),e(pu,mie),e(mie,x7o),e(pu,$7o),e(pu,AN),e(AN,k7o),e(pu,S7o),e(G,R7o),e(G,_u),e(_u,gie),e(gie,B7o),e(_u,P7o),e(_u,yN),e(yN,I7o),e(_u,q7o),e(G,N7o),e(G,uu),e(uu,hie),e(hie,j7o),e(uu,D7o),e(uu,LN),e(LN,G7o),e(uu,O7o),e(G,V7o),e(G,bu),e(bu,pie),e(pie,X7o),e(bu,z7o),e(bu,xN),e(xN,W7o),e(bu,Q7o),e(G,H7o),e(G,vu),e(vu,_ie),e(_ie,U7o),e(vu,J7o),e(vu,$N),e($N,Y7o),e(vu,K7o),e(G,Z7o),e(G,Fu),e(Fu,uie),e(uie,eMo),e(Fu,oMo),e(Fu,kN),e(kN,rMo),e(Fu,tMo),e(G,aMo),e(G,Tu),e(Tu,bie),e(bie,nMo),e(Tu,sMo),e(Tu,SN),e(SN,lMo),e(Tu,iMo),e(G,dMo),e(G,Mu),e(Mu,vie),e(vie,cMo),e(Mu,fMo),e(Mu,RN),e(RN,mMo),e(Mu,gMo),e(G,hMo),e(G,Eu),e(Eu,Fie),e(Fie,pMo),e(Eu,_Mo),e(Eu,BN),e(BN,uMo),e(Eu,bMo),e(G,vMo),e(G,Cu),e(Cu,Tie),e(Tie,FMo),e(Cu,TMo),e(Cu,PN),e(PN,MMo),e(Cu,EMo),e(G,CMo),e(G,wu),e(wu,Mie),e(Mie,wMo),e(wu,AMo),e(wu,IN),e(IN,yMo),e(wu,LMo),e(G,xMo),e(G,Au),e(Au,Eie),e(Eie,$Mo),e(Au,kMo),e(Au,qN),e(qN,SMo),e(Au,RMo),e(G,BMo),e(G,yu),e(yu,Cie),e(Cie,PMo),e(yu,IMo),e(yu,NN),e(NN,qMo),e(yu,NMo),e(G,jMo),e(G,Lu),e(Lu,wie),e(wie,DMo),e(Lu,GMo),e(Lu,jN),e(jN,OMo),e(Lu,VMo),e(G,XMo),e(G,xu),e(xu,Aie),e(Aie,zMo),e(xu,WMo),e(xu,DN),e(DN,QMo),e(xu,HMo),e(G,UMo),e(G,$u),e($u,yie),e(yie,JMo),e($u,YMo),e($u,GN),e(GN,KMo),e($u,ZMo),e(G,e4o),e(G,ku),e(ku,Lie),e(Lie,o4o),e(ku,r4o),e(ku,ON),e(ON,t4o),e(ku,a4o),e(G,n4o),e(G,Su),e(Su,xie),e(xie,s4o),e(Su,l4o),e(Su,VN),e(VN,i4o),e(Su,d4o),e(G,c4o),e(G,Ru),e(Ru,$ie),e($ie,f4o),e(Ru,m4o),e(Ru,XN),e(XN,g4o),e(Ru,h4o),e(G,p4o),e(G,Bu),e(Bu,kie),e(kie,_4o),e(Bu,u4o),e(Bu,zN),e(zN,b4o),e(Bu,v4o),e(G,F4o),e(G,Pu),e(Pu,Sie),e(Sie,T4o),e(Pu,M4o),e(Pu,WN),e(WN,E4o),e(Pu,C4o),e(G,w4o),e(G,Iu),e(Iu,Rie),e(Rie,A4o),e(Iu,y4o),e(Iu,QN),e(QN,L4o),e(Iu,x4o),e(G,$4o),e(G,qu),e(qu,Bie),e(Bie,k4o),e(qu,S4o),e(qu,HN),e(HN,R4o),e(qu,B4o),e(G,P4o),e(G,Nu),e(Nu,Pie),e(Pie,I4o),e(Nu,q4o),e(Nu,UN),e(UN,N4o),e(Nu,j4o),e(Ye,D4o),e(Ye,ju),e(ju,G4o),e(ju,Iie),e(Iie,O4o),e(ju,V4o),e(ju,qie),e(qie,X4o),e(Ye,z4o),M(Du,Ye,null),b(f,Fqe,u),b(f,$i,u),e($i,Gu),e(Gu,Nie),M(Y6,Nie,null),e($i,W4o),e($i,jie),e(jie,Q4o),b(f,Tqe,u),b(f,$o,u),M(K6,$o,null),e($o,H4o),e($o,ki),e(ki,U4o),e(ki,JN),e(JN,J4o),e(ki,Y4o),e(ki,YN),e(YN,K4o),e(ki,Z4o),e($o,eEo),e($o,Z6),e(Z6,oEo),e(Z6,Die),e(Die,rEo),e(Z6,tEo),e($o,aEo),e($o,nt),M(ey,nt,null),e(nt,nEo),e(nt,Gie),e(Gie,sEo),e(nt,lEo),e(nt,Si),e(Si,iEo),e(Si,Oie),e(Oie,dEo),e(Si,cEo),e(Si,KN),e(KN,fEo),e(Si,mEo),e(nt,gEo),M(Ou,nt,null),e($o,hEo),e($o,Ke),M(oy,Ke,null),e(Ke,pEo),e(Ke,Vie),e(Vie,_Eo),e(Ke,uEo),e(Ke,$a),e($a,bEo),e($a,Xie),e(Xie,vEo),e($a,FEo),e($a,zie),e(zie,TEo),e($a,MEo),e($a,Wie),e(Wie,EEo),e($a,CEo),e(Ke,wEo),e(Ke,z),e(z,Vu),e(Vu,Qie),e(Qie,AEo),e(Vu,yEo),e(Vu,ZN),e(ZN,LEo),e(Vu,xEo),e(z,$Eo),e(z,Xu),e(Xu,Hie),e(Hie,kEo),e(Xu,SEo),e(Xu,ej),e(ej,REo),e(Xu,BEo),e(z,PEo),e(z,zu),e(zu,Uie),e(Uie,IEo),e(zu,qEo),e(zu,oj),e(oj,NEo),e(zu,jEo),e(z,DEo),e(z,Wu),e(Wu,Jie),e(Jie,GEo),e(Wu,OEo),e(Wu,rj),e(rj,VEo),e(Wu,XEo),e(z,zEo),e(z,Qu),e(Qu,Yie),e(Yie,WEo),e(Qu,QEo),e(Qu,tj),e(tj,HEo),e(Qu,UEo),e(z,JEo),e(z,Hu),e(Hu,Kie),e(Kie,YEo),e(Hu,KEo),e(Hu,aj),e(aj,ZEo),e(Hu,eCo),e(z,oCo),e(z,Uu),e(Uu,Zie),e(Zie,rCo),e(Uu,tCo),e(Uu,nj),e(nj,aCo),e(Uu,nCo),e(z,sCo),e(z,Ju),e(Ju,ede),e(ede,lCo),e(Ju,iCo),e(Ju,sj),e(sj,dCo),e(Ju,cCo),e(z,fCo),e(z,Yu),e(Yu,ode),e(ode,mCo),e(Yu,gCo),e(Yu,lj),e(lj,hCo),e(Yu,pCo),e(z,_Co),e(z,Ku),e(Ku,rde),e(rde,uCo),e(Ku,bCo),e(Ku,ij),e(ij,vCo),e(Ku,FCo),e(z,TCo),e(z,Zu),e(Zu,tde),e(tde,MCo),e(Zu,ECo),e(Zu,dj),e(dj,CCo),e(Zu,wCo),e(z,ACo),e(z,e2),e(e2,ade),e(ade,yCo),e(e2,LCo),e(e2,cj),e(cj,xCo),e(e2,$Co),e(z,kCo),e(z,o2),e(o2,nde),e(nde,SCo),e(o2,RCo),e(o2,fj),e(fj,BCo),e(o2,PCo),e(z,ICo),e(z,r2),e(r2,sde),e(sde,qCo),e(r2,NCo),e(r2,mj),e(mj,jCo),e(r2,DCo),e(z,GCo),e(z,t2),e(t2,lde),e(lde,OCo),e(t2,VCo),e(t2,gj),e(gj,XCo),e(t2,zCo),e(z,WCo),e(z,a2),e(a2,ide),e(ide,QCo),e(a2,HCo),e(a2,hj),e(hj,UCo),e(a2,JCo),e(z,YCo),e(z,n2),e(n2,dde),e(dde,KCo),e(n2,ZCo),e(n2,pj),e(pj,e5o),e(n2,o5o),e(z,r5o),e(z,s2),e(s2,cde),e(cde,t5o),e(s2,a5o),e(s2,_j),e(_j,n5o),e(s2,s5o),e(z,l5o),e(z,l2),e(l2,fde),e(fde,i5o),e(l2,d5o),e(l2,uj),e(uj,c5o),e(l2,f5o),e(z,m5o),e(z,i2),e(i2,mde),e(mde,g5o),e(i2,h5o),e(i2,bj),e(bj,p5o),e(i2,_5o),e(z,u5o),e(z,d2),e(d2,gde),e(gde,b5o),e(d2,v5o),e(d2,vj),e(vj,F5o),e(d2,T5o),e(z,M5o),e(z,c2),e(c2,hde),e(hde,E5o),e(c2,C5o),e(c2,Fj),e(Fj,w5o),e(c2,A5o),e(z,y5o),e(z,f2),e(f2,pde),e(pde,L5o),e(f2,x5o),e(f2,Tj),e(Tj,$5o),e(f2,k5o),e(z,S5o),e(z,m2),e(m2,_de),e(_de,R5o),e(m2,B5o),e(m2,Mj),e(Mj,P5o),e(m2,I5o),e(z,q5o),e(z,g2),e(g2,ude),e(ude,N5o),e(g2,j5o),e(g2,Ej),e(Ej,D5o),e(g2,G5o),e(z,O5o),e(z,h2),e(h2,bde),e(bde,V5o),e(h2,X5o),e(h2,Cj),e(Cj,z5o),e(h2,W5o),e(z,Q5o),e(z,p2),e(p2,vde),e(vde,H5o),e(p2,U5o),e(p2,wj),e(wj,J5o),e(p2,Y5o),e(z,K5o),e(z,_2),e(_2,Fde),e(Fde,Z5o),e(_2,e3o),e(_2,Aj),e(Aj,o3o),e(_2,r3o),e(z,t3o),e(z,u2),e(u2,Tde),e(Tde,a3o),e(u2,n3o),e(u2,yj),e(yj,s3o),e(u2,l3o),e(z,i3o),e(z,b2),e(b2,Mde),e(Mde,d3o),e(b2,c3o),e(b2,Lj),e(Lj,f3o),e(b2,m3o),e(z,g3o),e(z,v2),e(v2,Ede),e(Ede,h3o),e(v2,p3o),e(v2,xj),e(xj,_3o),e(v2,u3o),e(z,b3o),e(z,F2),e(F2,Cde),e(Cde,v3o),e(F2,F3o),e(F2,$j),e($j,T3o),e(F2,M3o),e(z,E3o),e(z,T2),e(T2,wde),e(wde,C3o),e(T2,w3o),e(T2,kj),e(kj,A3o),e(T2,y3o),e(z,L3o),e(z,M2),e(M2,Ade),e(Ade,x3o),e(M2,$3o),e(M2,Sj),e(Sj,k3o),e(M2,S3o),e(z,R3o),e(z,E2),e(E2,yde),e(yde,B3o),e(E2,P3o),e(E2,Rj),e(Rj,I3o),e(E2,q3o),e(z,N3o),e(z,C2),e(C2,Lde),e(Lde,j3o),e(C2,D3o),e(C2,Bj),e(Bj,G3o),e(C2,O3o),e(z,V3o),e(z,w2),e(w2,xde),e(xde,X3o),e(w2,z3o),e(w2,Pj),e(Pj,W3o),e(w2,Q3o),e(Ke,H3o),e(Ke,A2),e(A2,U3o),e(A2,$de),e($de,J3o),e(A2,Y3o),e(A2,kde),e(kde,K3o),e(Ke,Z3o),M(y2,Ke,null),b(f,Mqe,u),b(f,Ri,u),e(Ri,L2),e(L2,Sde),M(ry,Sde,null),e(Ri,ewo),e(Ri,Rde),e(Rde,owo),b(f,Eqe,u),b(f,ko,u),M(ty,ko,null),e(ko,rwo),e(ko,Bi),e(Bi,two),e(Bi,Ij),e(Ij,awo),e(Bi,nwo),e(Bi,qj),e(qj,swo),e(Bi,lwo),e(ko,iwo),e(ko,ay),e(ay,dwo),e(ay,Bde),e(Bde,cwo),e(ay,fwo),e(ko,mwo),e(ko,st),M(ny,st,null),e(st,gwo),e(st,Pde),e(Pde,hwo),e(st,pwo),e(st,Pi),e(Pi,_wo),e(Pi,Ide),e(Ide,uwo),e(Pi,bwo),e(Pi,Nj),e(Nj,vwo),e(Pi,Fwo),e(st,Two),M(x2,st,null),e(ko,Mwo),e(ko,Ze),M(sy,Ze,null),e(Ze,Ewo),e(Ze,qde),e(qde,Cwo),e(Ze,wwo),e(Ze,ka),e(ka,Awo),e(ka,Nde),e(Nde,ywo),e(ka,Lwo),e(ka,jde),e(jde,xwo),e(ka,$wo),e(ka,Dde),e(Dde,kwo),e(ka,Swo),e(Ze,Rwo),e(Ze,Q),e(Q,$2),e($2,Gde),e(Gde,Bwo),e($2,Pwo),e($2,jj),e(jj,Iwo),e($2,qwo),e(Q,Nwo),e(Q,k2),e(k2,Ode),e(Ode,jwo),e(k2,Dwo),e(k2,Dj),e(Dj,Gwo),e(k2,Owo),e(Q,Vwo),e(Q,S2),e(S2,Vde),e(Vde,Xwo),e(S2,zwo),e(S2,Gj),e(Gj,Wwo),e(S2,Qwo),e(Q,Hwo),e(Q,R2),e(R2,Xde),e(Xde,Uwo),e(R2,Jwo),e(R2,Oj),e(Oj,Ywo),e(R2,Kwo),e(Q,Zwo),e(Q,B2),e(B2,zde),e(zde,eAo),e(B2,oAo),e(B2,Vj),e(Vj,rAo),e(B2,tAo),e(Q,aAo),e(Q,P2),e(P2,Wde),e(Wde,nAo),e(P2,sAo),e(P2,Xj),e(Xj,lAo),e(P2,iAo),e(Q,dAo),e(Q,I2),e(I2,Qde),e(Qde,cAo),e(I2,fAo),e(I2,zj),e(zj,mAo),e(I2,gAo),e(Q,hAo),e(Q,q2),e(q2,Hde),e(Hde,pAo),e(q2,_Ao),e(q2,Wj),e(Wj,uAo),e(q2,bAo),e(Q,vAo),e(Q,N2),e(N2,Ude),e(Ude,FAo),e(N2,TAo),e(N2,Qj),e(Qj,MAo),e(N2,EAo),e(Q,CAo),e(Q,j2),e(j2,Jde),e(Jde,wAo),e(j2,AAo),e(j2,Hj),e(Hj,yAo),e(j2,LAo),e(Q,xAo),e(Q,D2),e(D2,Yde),e(Yde,$Ao),e(D2,kAo),e(D2,Uj),e(Uj,SAo),e(D2,RAo),e(Q,BAo),e(Q,G2),e(G2,Kde),e(Kde,PAo),e(G2,IAo),e(G2,Jj),e(Jj,qAo),e(G2,NAo),e(Q,jAo),e(Q,O2),e(O2,Zde),e(Zde,DAo),e(O2,GAo),e(O2,Yj),e(Yj,OAo),e(O2,VAo),e(Q,XAo),e(Q,V2),e(V2,ece),e(ece,zAo),e(V2,WAo),e(V2,Kj),e(Kj,QAo),e(V2,HAo),e(Q,UAo),e(Q,X2),e(X2,oce),e(oce,JAo),e(X2,YAo),e(X2,Zj),e(Zj,KAo),e(X2,ZAo),e(Q,e6o),e(Q,z2),e(z2,rce),e(rce,o6o),e(z2,r6o),e(z2,eD),e(eD,t6o),e(z2,a6o),e(Q,n6o),e(Q,W2),e(W2,tce),e(tce,s6o),e(W2,l6o),e(W2,oD),e(oD,i6o),e(W2,d6o),e(Q,c6o),e(Q,Q2),e(Q2,ace),e(ace,f6o),e(Q2,m6o),e(Q2,rD),e(rD,g6o),e(Q2,h6o),e(Q,p6o),e(Q,H2),e(H2,nce),e(nce,_6o),e(H2,u6o),e(H2,tD),e(tD,b6o),e(H2,v6o),e(Q,F6o),e(Q,U2),e(U2,sce),e(sce,T6o),e(U2,M6o),e(U2,aD),e(aD,E6o),e(U2,C6o),e(Q,w6o),e(Q,J2),e(J2,lce),e(lce,A6o),e(J2,y6o),e(J2,nD),e(nD,L6o),e(J2,x6o),e(Q,$6o),e(Q,Y2),e(Y2,ice),e(ice,k6o),e(Y2,S6o),e(Y2,sD),e(sD,R6o),e(Y2,B6o),e(Q,P6o),e(Q,K2),e(K2,dce),e(dce,I6o),e(K2,q6o),e(K2,lD),e(lD,N6o),e(K2,j6o),e(Q,D6o),e(Q,Z2),e(Z2,cce),e(cce,G6o),e(Z2,O6o),e(Z2,iD),e(iD,V6o),e(Z2,X6o),e(Q,z6o),e(Q,e1),e(e1,fce),e(fce,W6o),e(e1,Q6o),e(e1,dD),e(dD,H6o),e(e1,U6o),e(Q,J6o),e(Q,o1),e(o1,mce),e(mce,Y6o),e(o1,K6o),e(o1,cD),e(cD,Z6o),e(o1,eyo),e(Q,oyo),e(Q,r1),e(r1,gce),e(gce,ryo),e(r1,tyo),e(r1,fD),e(fD,ayo),e(r1,nyo),e(Q,syo),e(Q,t1),e(t1,hce),e(hce,lyo),e(t1,iyo),e(t1,mD),e(mD,dyo),e(t1,cyo),e(Q,fyo),e(Q,a1),e(a1,pce),e(pce,myo),e(a1,gyo),e(a1,gD),e(gD,hyo),e(a1,pyo),e(Q,_yo),e(Q,n1),e(n1,_ce),e(_ce,uyo),e(n1,byo),e(n1,hD),e(hD,vyo),e(n1,Fyo),e(Q,Tyo),e(Q,s1),e(s1,uce),e(uce,Myo),e(s1,Eyo),e(s1,bce),e(bce,Cyo),e(s1,wyo),e(Q,Ayo),e(Q,l1),e(l1,vce),e(vce,yyo),e(l1,Lyo),e(l1,pD),e(pD,xyo),e(l1,$yo),e(Q,kyo),e(Q,i1),e(i1,Fce),e(Fce,Syo),e(i1,Ryo),e(i1,_D),e(_D,Byo),e(i1,Pyo),e(Q,Iyo),e(Q,d1),e(d1,Tce),e(Tce,qyo),e(d1,Nyo),e(d1,uD),e(uD,jyo),e(d1,Dyo),e(Q,Gyo),e(Q,c1),e(c1,Mce),e(Mce,Oyo),e(c1,Vyo),e(c1,bD),e(bD,Xyo),e(c1,zyo),e(Ze,Wyo),e(Ze,f1),e(f1,Qyo),e(f1,Ece),e(Ece,Hyo),e(f1,Uyo),e(f1,Cce),e(Cce,Jyo),e(Ze,Yyo),M(m1,Ze,null),b(f,Cqe,u),b(f,Ii,u),e(Ii,g1),e(g1,wce),M(ly,wce,null),e(Ii,Kyo),e(Ii,Ace),e(Ace,Zyo),b(f,wqe,u),b(f,So,u),M(iy,So,null),e(So,eLo),e(So,qi),e(qi,oLo),e(qi,vD),e(vD,rLo),e(qi,tLo),e(qi,FD),e(FD,aLo),e(qi,nLo),e(So,sLo),e(So,dy),e(dy,lLo),e(dy,yce),e(yce,iLo),e(dy,dLo),e(So,cLo),e(So,lt),M(cy,lt,null),e(lt,fLo),e(lt,Lce),e(Lce,mLo),e(lt,gLo),e(lt,Ni),e(Ni,hLo),e(Ni,xce),e(xce,pLo),e(Ni,_Lo),e(Ni,TD),e(TD,uLo),e(Ni,bLo),e(lt,vLo),M(h1,lt,null),e(So,FLo),e(So,eo),M(fy,eo,null),e(eo,TLo),e(eo,$ce),e($ce,MLo),e(eo,ELo),e(eo,Sa),e(Sa,CLo),e(Sa,kce),e(kce,wLo),e(Sa,ALo),e(Sa,Sce),e(Sce,yLo),e(Sa,LLo),e(Sa,Rce),e(Rce,xLo),e(Sa,$Lo),e(eo,kLo),e(eo,_e),e(_e,p1),e(p1,Bce),e(Bce,SLo),e(p1,RLo),e(p1,MD),e(MD,BLo),e(p1,PLo),e(_e,ILo),e(_e,_1),e(_1,Pce),e(Pce,qLo),e(_1,NLo),e(_1,ED),e(ED,jLo),e(_1,DLo),e(_e,GLo),e(_e,u1),e(u1,Ice),e(Ice,OLo),e(u1,VLo),e(u1,CD),e(CD,XLo),e(u1,zLo),e(_e,WLo),e(_e,b1),e(b1,qce),e(qce,QLo),e(b1,HLo),e(b1,wD),e(wD,ULo),e(b1,JLo),e(_e,YLo),e(_e,v1),e(v1,Nce),e(Nce,KLo),e(v1,ZLo),e(v1,AD),e(AD,e8o),e(v1,o8o),e(_e,r8o),e(_e,F1),e(F1,jce),e(jce,t8o),e(F1,a8o),e(F1,yD),e(yD,n8o),e(F1,s8o),e(_e,l8o),e(_e,T1),e(T1,Dce),e(Dce,i8o),e(T1,d8o),e(T1,LD),e(LD,c8o),e(T1,f8o),e(_e,m8o),e(_e,M1),e(M1,Gce),e(Gce,g8o),e(M1,h8o),e(M1,xD),e(xD,p8o),e(M1,_8o),e(_e,u8o),e(_e,E1),e(E1,Oce),e(Oce,b8o),e(E1,v8o),e(E1,$D),e($D,F8o),e(E1,T8o),e(_e,M8o),e(_e,C1),e(C1,Vce),e(Vce,E8o),e(C1,C8o),e(C1,kD),e(kD,w8o),e(C1,A8o),e(_e,y8o),e(_e,w1),e(w1,Xce),e(Xce,L8o),e(w1,x8o),e(w1,SD),e(SD,$8o),e(w1,k8o),e(_e,S8o),e(_e,A1),e(A1,zce),e(zce,R8o),e(A1,B8o),e(A1,RD),e(RD,P8o),e(A1,I8o),e(_e,q8o),e(_e,y1),e(y1,Wce),e(Wce,N8o),e(y1,j8o),e(y1,BD),e(BD,D8o),e(y1,G8o),e(_e,O8o),e(_e,L1),e(L1,Qce),e(Qce,V8o),e(L1,X8o),e(L1,PD),e(PD,z8o),e(L1,W8o),e(_e,Q8o),e(_e,x1),e(x1,Hce),e(Hce,H8o),e(x1,U8o),e(x1,ID),e(ID,J8o),e(x1,Y8o),e(_e,K8o),e(_e,$1),e($1,Uce),e(Uce,Z8o),e($1,e9o),e($1,qD),e(qD,o9o),e($1,r9o),e(eo,t9o),e(eo,k1),e(k1,a9o),e(k1,Jce),e(Jce,n9o),e(k1,s9o),e(k1,Yce),e(Yce,l9o),e(eo,i9o),M(S1,eo,null),b(f,Aqe,u),b(f,ji,u),e(ji,R1),e(R1,Kce),M(my,Kce,null),e(ji,d9o),e(ji,Zce),e(Zce,c9o),b(f,yqe,u),b(f,Ro,u),M(gy,Ro,null),e(Ro,f9o),e(Ro,Di),e(Di,m9o),e(Di,ND),e(ND,g9o),e(Di,h9o),e(Di,jD),e(jD,p9o),e(Di,_9o),e(Ro,u9o),e(Ro,hy),e(hy,b9o),e(hy,efe),e(efe,v9o),e(hy,F9o),e(Ro,T9o),e(Ro,it),M(py,it,null),e(it,M9o),e(it,ofe),e(ofe,E9o),e(it,C9o),e(it,Gi),e(Gi,w9o),e(Gi,rfe),e(rfe,A9o),e(Gi,y9o),e(Gi,DD),e(DD,L9o),e(Gi,x9o),e(it,$9o),M(B1,it,null),e(Ro,k9o),e(Ro,oo),M(_y,oo,null),e(oo,S9o),e(oo,tfe),e(tfe,R9o),e(oo,B9o),e(oo,Ra),e(Ra,P9o),e(Ra,afe),e(afe,I9o),e(Ra,q9o),e(Ra,nfe),e(nfe,N9o),e(Ra,j9o),e(Ra,sfe),e(sfe,D9o),e(Ra,G9o),e(oo,O9o),e(oo,q),e(q,P1),e(P1,lfe),e(lfe,V9o),e(P1,X9o),e(P1,GD),e(GD,z9o),e(P1,W9o),e(q,Q9o),e(q,I1),e(I1,ife),e(ife,H9o),e(I1,U9o),e(I1,OD),e(OD,J9o),e(I1,Y9o),e(q,K9o),e(q,q1),e(q1,dfe),e(dfe,Z9o),e(q1,exo),e(q1,VD),e(VD,oxo),e(q1,rxo),e(q,txo),e(q,N1),e(N1,cfe),e(cfe,axo),e(N1,nxo),e(N1,XD),e(XD,sxo),e(N1,lxo),e(q,ixo),e(q,j1),e(j1,ffe),e(ffe,dxo),e(j1,cxo),e(j1,zD),e(zD,fxo),e(j1,mxo),e(q,gxo),e(q,D1),e(D1,mfe),e(mfe,hxo),e(D1,pxo),e(D1,WD),e(WD,_xo),e(D1,uxo),e(q,bxo),e(q,G1),e(G1,gfe),e(gfe,vxo),e(G1,Fxo),e(G1,QD),e(QD,Txo),e(G1,Mxo),e(q,Exo),e(q,O1),e(O1,hfe),e(hfe,Cxo),e(O1,wxo),e(O1,HD),e(HD,Axo),e(O1,yxo),e(q,Lxo),e(q,V1),e(V1,pfe),e(pfe,xxo),e(V1,$xo),e(V1,UD),e(UD,kxo),e(V1,Sxo),e(q,Rxo),e(q,X1),e(X1,_fe),e(_fe,Bxo),e(X1,Pxo),e(X1,JD),e(JD,Ixo),e(X1,qxo),e(q,Nxo),e(q,z1),e(z1,ufe),e(ufe,jxo),e(z1,Dxo),e(z1,YD),e(YD,Gxo),e(z1,Oxo),e(q,Vxo),e(q,W1),e(W1,bfe),e(bfe,Xxo),e(W1,zxo),e(W1,KD),e(KD,Wxo),e(W1,Qxo),e(q,Hxo),e(q,Q1),e(Q1,vfe),e(vfe,Uxo),e(Q1,Jxo),e(Q1,ZD),e(ZD,Yxo),e(Q1,Kxo),e(q,Zxo),e(q,H1),e(H1,Ffe),e(Ffe,e$o),e(H1,o$o),e(H1,eG),e(eG,r$o),e(H1,t$o),e(q,a$o),e(q,U1),e(U1,Tfe),e(Tfe,n$o),e(U1,s$o),e(U1,oG),e(oG,l$o),e(U1,i$o),e(q,d$o),e(q,J1),e(J1,Mfe),e(Mfe,c$o),e(J1,f$o),e(J1,rG),e(rG,m$o),e(J1,g$o),e(q,h$o),e(q,Y1),e(Y1,Efe),e(Efe,p$o),e(Y1,_$o),e(Y1,tG),e(tG,u$o),e(Y1,b$o),e(q,v$o),e(q,K1),e(K1,Cfe),e(Cfe,F$o),e(K1,T$o),e(K1,aG),e(aG,M$o),e(K1,E$o),e(q,C$o),e(q,Z1),e(Z1,wfe),e(wfe,w$o),e(Z1,A$o),e(Z1,nG),e(nG,y$o),e(Z1,L$o),e(q,x$o),e(q,eb),e(eb,Afe),e(Afe,$$o),e(eb,k$o),e(eb,sG),e(sG,S$o),e(eb,R$o),e(q,B$o),e(q,ob),e(ob,yfe),e(yfe,P$o),e(ob,I$o),e(ob,lG),e(lG,q$o),e(ob,N$o),e(q,j$o),e(q,rb),e(rb,Lfe),e(Lfe,D$o),e(rb,G$o),e(rb,iG),e(iG,O$o),e(rb,V$o),e(q,X$o),e(q,tb),e(tb,xfe),e(xfe,z$o),e(tb,W$o),e(tb,dG),e(dG,Q$o),e(tb,H$o),e(q,U$o),e(q,ab),e(ab,$fe),e($fe,J$o),e(ab,Y$o),e(ab,cG),e(cG,K$o),e(ab,Z$o),e(q,eko),e(q,nb),e(nb,kfe),e(kfe,oko),e(nb,rko),e(nb,fG),e(fG,tko),e(nb,ako),e(q,nko),e(q,sb),e(sb,Sfe),e(Sfe,sko),e(sb,lko),e(sb,mG),e(mG,iko),e(sb,dko),e(q,cko),e(q,lb),e(lb,Rfe),e(Rfe,fko),e(lb,mko),e(lb,gG),e(gG,gko),e(lb,hko),e(q,pko),e(q,ib),e(ib,Bfe),e(Bfe,_ko),e(ib,uko),e(ib,hG),e(hG,bko),e(ib,vko),e(q,Fko),e(q,db),e(db,Pfe),e(Pfe,Tko),e(db,Mko),e(db,pG),e(pG,Eko),e(db,Cko),e(q,wko),e(q,cb),e(cb,Ife),e(Ife,Ako),e(cb,yko),e(cb,_G),e(_G,Lko),e(cb,xko),e(q,$ko),e(q,fb),e(fb,qfe),e(qfe,kko),e(fb,Sko),e(fb,uG),e(uG,Rko),e(fb,Bko),e(q,Pko),e(q,mb),e(mb,Nfe),e(Nfe,Iko),e(mb,qko),e(mb,bG),e(bG,Nko),e(mb,jko),e(q,Dko),e(q,gb),e(gb,jfe),e(jfe,Gko),e(gb,Oko),e(gb,vG),e(vG,Vko),e(gb,Xko),e(q,zko),e(q,hb),e(hb,Dfe),e(Dfe,Wko),e(hb,Qko),e(hb,FG),e(FG,Hko),e(hb,Uko),e(q,Jko),e(q,pb),e(pb,Gfe),e(Gfe,Yko),e(pb,Kko),e(pb,TG),e(TG,Zko),e(pb,eSo),e(q,oSo),e(q,_b),e(_b,Ofe),e(Ofe,rSo),e(_b,tSo),e(_b,MG),e(MG,aSo),e(_b,nSo),e(q,sSo),e(q,ub),e(ub,Vfe),e(Vfe,lSo),e(ub,iSo),e(ub,EG),e(EG,dSo),e(ub,cSo),e(q,fSo),e(q,bb),e(bb,Xfe),e(Xfe,mSo),e(bb,gSo),e(bb,CG),e(CG,hSo),e(bb,pSo),e(q,_So),e(q,vb),e(vb,zfe),e(zfe,uSo),e(vb,bSo),e(vb,wG),e(wG,vSo),e(vb,FSo),e(q,TSo),e(q,Fb),e(Fb,Wfe),e(Wfe,MSo),e(Fb,ESo),e(Fb,AG),e(AG,CSo),e(Fb,wSo),e(q,ASo),e(q,Tb),e(Tb,Qfe),e(Qfe,ySo),e(Tb,LSo),e(Tb,yG),e(yG,xSo),e(Tb,$So),e(q,kSo),e(q,Mb),e(Mb,Hfe),e(Hfe,SSo),e(Mb,RSo),e(Mb,LG),e(LG,BSo),e(Mb,PSo),e(q,ISo),e(q,Eb),e(Eb,Ufe),e(Ufe,qSo),e(Eb,NSo),e(Eb,xG),e(xG,jSo),e(Eb,DSo),e(q,GSo),e(q,Cb),e(Cb,Jfe),e(Jfe,OSo),e(Cb,VSo),e(Cb,$G),e($G,XSo),e(Cb,zSo),e(q,WSo),e(q,wb),e(wb,Yfe),e(Yfe,QSo),e(wb,HSo),e(wb,kG),e(kG,USo),e(wb,JSo),e(q,YSo),e(q,Ab),e(Ab,Kfe),e(Kfe,KSo),e(Ab,ZSo),e(Ab,SG),e(SG,eRo),e(Ab,oRo),e(oo,rRo),e(oo,yb),e(yb,tRo),e(yb,Zfe),e(Zfe,aRo),e(yb,nRo),e(yb,eme),e(eme,sRo),e(oo,lRo),M(Lb,oo,null),b(f,Lqe,u),b(f,Oi,u),e(Oi,xb),e(xb,ome),M(uy,ome,null),e(Oi,iRo),e(Oi,rme),e(rme,dRo),b(f,xqe,u),b(f,Bo,u),M(by,Bo,null),e(Bo,cRo),e(Bo,Vi),e(Vi,fRo),e(Vi,RG),e(RG,mRo),e(Vi,gRo),e(Vi,BG),e(BG,hRo),e(Vi,pRo),e(Bo,_Ro),e(Bo,vy),e(vy,uRo),e(vy,tme),e(tme,bRo),e(vy,vRo),e(Bo,FRo),e(Bo,dt),M(Fy,dt,null),e(dt,TRo),e(dt,ame),e(ame,MRo),e(dt,ERo),e(dt,Xi),e(Xi,CRo),e(Xi,nme),e(nme,wRo),e(Xi,ARo),e(Xi,PG),e(PG,yRo),e(Xi,LRo),e(dt,xRo),M($b,dt,null),e(Bo,$Ro),e(Bo,ro),M(Ty,ro,null),e(ro,kRo),e(ro,sme),e(sme,SRo),e(ro,RRo),e(ro,Ba),e(Ba,BRo),e(Ba,lme),e(lme,PRo),e(Ba,IRo),e(Ba,ime),e(ime,qRo),e(Ba,NRo),e(Ba,dme),e(dme,jRo),e(Ba,DRo),e(ro,GRo),e(ro,Y),e(Y,kb),e(kb,cme),e(cme,ORo),e(kb,VRo),e(kb,IG),e(IG,XRo),e(kb,zRo),e(Y,WRo),e(Y,Sb),e(Sb,fme),e(fme,QRo),e(Sb,HRo),e(Sb,qG),e(qG,URo),e(Sb,JRo),e(Y,YRo),e(Y,Rb),e(Rb,mme),e(mme,KRo),e(Rb,ZRo),e(Rb,NG),e(NG,eBo),e(Rb,oBo),e(Y,rBo),e(Y,Bb),e(Bb,gme),e(gme,tBo),e(Bb,aBo),e(Bb,jG),e(jG,nBo),e(Bb,sBo),e(Y,lBo),e(Y,Pb),e(Pb,hme),e(hme,iBo),e(Pb,dBo),e(Pb,DG),e(DG,cBo),e(Pb,fBo),e(Y,mBo),e(Y,Ib),e(Ib,pme),e(pme,gBo),e(Ib,hBo),e(Ib,GG),e(GG,pBo),e(Ib,_Bo),e(Y,uBo),e(Y,qb),e(qb,_me),e(_me,bBo),e(qb,vBo),e(qb,OG),e(OG,FBo),e(qb,TBo),e(Y,MBo),e(Y,Nb),e(Nb,ume),e(ume,EBo),e(Nb,CBo),e(Nb,VG),e(VG,wBo),e(Nb,ABo),e(Y,yBo),e(Y,jb),e(jb,bme),e(bme,LBo),e(jb,xBo),e(jb,XG),e(XG,$Bo),e(jb,kBo),e(Y,SBo),e(Y,Db),e(Db,vme),e(vme,RBo),e(Db,BBo),e(Db,zG),e(zG,PBo),e(Db,IBo),e(Y,qBo),e(Y,Gb),e(Gb,Fme),e(Fme,NBo),e(Gb,jBo),e(Gb,WG),e(WG,DBo),e(Gb,GBo),e(Y,OBo),e(Y,Ob),e(Ob,Tme),e(Tme,VBo),e(Ob,XBo),e(Ob,QG),e(QG,zBo),e(Ob,WBo),e(Y,QBo),e(Y,Vb),e(Vb,Mme),e(Mme,HBo),e(Vb,UBo),e(Vb,HG),e(HG,JBo),e(Vb,YBo),e(Y,KBo),e(Y,Xb),e(Xb,Eme),e(Eme,ZBo),e(Xb,ePo),e(Xb,UG),e(UG,oPo),e(Xb,rPo),e(Y,tPo),e(Y,zb),e(zb,Cme),e(Cme,aPo),e(zb,nPo),e(zb,JG),e(JG,sPo),e(zb,lPo),e(Y,iPo),e(Y,Wb),e(Wb,wme),e(wme,dPo),e(Wb,cPo),e(Wb,YG),e(YG,fPo),e(Wb,mPo),e(Y,gPo),e(Y,Qb),e(Qb,Ame),e(Ame,hPo),e(Qb,pPo),e(Qb,KG),e(KG,_Po),e(Qb,uPo),e(Y,bPo),e(Y,Hb),e(Hb,yme),e(yme,vPo),e(Hb,FPo),e(Hb,ZG),e(ZG,TPo),e(Hb,MPo),e(Y,EPo),e(Y,Ub),e(Ub,Lme),e(Lme,CPo),e(Ub,wPo),e(Ub,eO),e(eO,APo),e(Ub,yPo),e(Y,LPo),e(Y,Jb),e(Jb,xme),e(xme,xPo),e(Jb,$Po),e(Jb,oO),e(oO,kPo),e(Jb,SPo),e(Y,RPo),e(Y,Yb),e(Yb,$me),e($me,BPo),e(Yb,PPo),e(Yb,rO),e(rO,IPo),e(Yb,qPo),e(Y,NPo),e(Y,Kb),e(Kb,kme),e(kme,jPo),e(Kb,DPo),e(Kb,tO),e(tO,GPo),e(Kb,OPo),e(Y,VPo),e(Y,Zb),e(Zb,Sme),e(Sme,XPo),e(Zb,zPo),e(Zb,aO),e(aO,WPo),e(Zb,QPo),e(Y,HPo),e(Y,ev),e(ev,Rme),e(Rme,UPo),e(ev,JPo),e(ev,nO),e(nO,YPo),e(ev,KPo),e(Y,ZPo),e(Y,ov),e(ov,Bme),e(Bme,eIo),e(ov,oIo),e(ov,sO),e(sO,rIo),e(ov,tIo),e(Y,aIo),e(Y,rv),e(rv,Pme),e(Pme,nIo),e(rv,sIo),e(rv,lO),e(lO,lIo),e(rv,iIo),e(Y,dIo),e(Y,tv),e(tv,Ime),e(Ime,cIo),e(tv,fIo),e(tv,iO),e(iO,mIo),e(tv,gIo),e(Y,hIo),e(Y,av),e(av,qme),e(qme,pIo),e(av,_Io),e(av,dO),e(dO,uIo),e(av,bIo),e(Y,vIo),e(Y,nv),e(nv,Nme),e(Nme,FIo),e(nv,TIo),e(nv,cO),e(cO,MIo),e(nv,EIo),e(ro,CIo),e(ro,sv),e(sv,wIo),e(sv,jme),e(jme,AIo),e(sv,yIo),e(sv,Dme),e(Dme,LIo),e(ro,xIo),M(lv,ro,null),b(f,$qe,u),b(f,zi,u),e(zi,iv),e(iv,Gme),M(My,Gme,null),e(zi,$Io),e(zi,Ome),e(Ome,kIo),b(f,kqe,u),b(f,Po,u),M(Ey,Po,null),e(Po,SIo),e(Po,Wi),e(Wi,RIo),e(Wi,fO),e(fO,BIo),e(Wi,PIo),e(Wi,mO),e(mO,IIo),e(Wi,qIo),e(Po,NIo),e(Po,Cy),e(Cy,jIo),e(Cy,Vme),e(Vme,DIo),e(Cy,GIo),e(Po,OIo),e(Po,ct),M(wy,ct,null),e(ct,VIo),e(ct,Xme),e(Xme,XIo),e(ct,zIo),e(ct,Qi),e(Qi,WIo),e(Qi,zme),e(zme,QIo),e(Qi,HIo),e(Qi,gO),e(gO,UIo),e(Qi,JIo),e(ct,YIo),M(dv,ct,null),e(Po,KIo),e(Po,to),M(Ay,to,null),e(to,ZIo),e(to,Wme),e(Wme,eqo),e(to,oqo),e(to,Pa),e(Pa,rqo),e(Pa,Qme),e(Qme,tqo),e(Pa,aqo),e(Pa,Hme),e(Hme,nqo),e(Pa,sqo),e(Pa,Ume),e(Ume,lqo),e(Pa,iqo),e(to,dqo),e(to,Yr),e(Yr,cv),e(cv,Jme),e(Jme,cqo),e(cv,fqo),e(cv,hO),e(hO,mqo),e(cv,gqo),e(Yr,hqo),e(Yr,fv),e(fv,Yme),e(Yme,pqo),e(fv,_qo),e(fv,pO),e(pO,uqo),e(fv,bqo),e(Yr,vqo),e(Yr,mv),e(mv,Kme),e(Kme,Fqo),e(mv,Tqo),e(mv,_O),e(_O,Mqo),e(mv,Eqo),e(Yr,Cqo),e(Yr,gv),e(gv,Zme),e(Zme,wqo),e(gv,Aqo),e(gv,uO),e(uO,yqo),e(gv,Lqo),e(Yr,xqo),e(Yr,hv),e(hv,ege),e(ege,$qo),e(hv,kqo),e(hv,bO),e(bO,Sqo),e(hv,Rqo),e(to,Bqo),e(to,pv),e(pv,Pqo),e(pv,oge),e(oge,Iqo),e(pv,qqo),e(pv,rge),e(rge,Nqo),e(to,jqo),M(_v,to,null),b(f,Sqe,u),b(f,Hi,u),e(Hi,uv),e(uv,tge),M(yy,tge,null),e(Hi,Dqo),e(Hi,age),e(age,Gqo),b(f,Rqe,u),b(f,Io,u),M(Ly,Io,null),e(Io,Oqo),e(Io,Ui),e(Ui,Vqo),e(Ui,vO),e(vO,Xqo),e(Ui,zqo),e(Ui,FO),e(FO,Wqo),e(Ui,Qqo),e(Io,Hqo),e(Io,xy),e(xy,Uqo),e(xy,nge),e(nge,Jqo),e(xy,Yqo),e(Io,Kqo),e(Io,ft),M($y,ft,null),e(ft,Zqo),e(ft,sge),e(sge,eNo),e(ft,oNo),e(ft,Ji),e(Ji,rNo),e(Ji,lge),e(lge,tNo),e(Ji,aNo),e(Ji,TO),e(TO,nNo),e(Ji,sNo),e(ft,lNo),M(bv,ft,null),e(Io,iNo),e(Io,ao),M(ky,ao,null),e(ao,dNo),e(ao,ige),e(ige,cNo),e(ao,fNo),e(ao,Ia),e(Ia,mNo),e(Ia,dge),e(dge,gNo),e(Ia,hNo),e(Ia,cge),e(cge,pNo),e(Ia,_No),e(Ia,fge),e(fge,uNo),e(Ia,bNo),e(ao,vNo),e(ao,U),e(U,vv),e(vv,mge),e(mge,FNo),e(vv,TNo),e(vv,MO),e(MO,MNo),e(vv,ENo),e(U,CNo),e(U,Fv),e(Fv,gge),e(gge,wNo),e(Fv,ANo),e(Fv,EO),e(EO,yNo),e(Fv,LNo),e(U,xNo),e(U,Tv),e(Tv,hge),e(hge,$No),e(Tv,kNo),e(Tv,CO),e(CO,SNo),e(Tv,RNo),e(U,BNo),e(U,Mv),e(Mv,pge),e(pge,PNo),e(Mv,INo),e(Mv,wO),e(wO,qNo),e(Mv,NNo),e(U,jNo),e(U,Ev),e(Ev,_ge),e(_ge,DNo),e(Ev,GNo),e(Ev,AO),e(AO,ONo),e(Ev,VNo),e(U,XNo),e(U,Cv),e(Cv,uge),e(uge,zNo),e(Cv,WNo),e(Cv,yO),e(yO,QNo),e(Cv,HNo),e(U,UNo),e(U,wv),e(wv,bge),e(bge,JNo),e(wv,YNo),e(wv,LO),e(LO,KNo),e(wv,ZNo),e(U,ejo),e(U,Av),e(Av,vge),e(vge,ojo),e(Av,rjo),e(Av,xO),e(xO,tjo),e(Av,ajo),e(U,njo),e(U,yv),e(yv,Fge),e(Fge,sjo),e(yv,ljo),e(yv,$O),e($O,ijo),e(yv,djo),e(U,cjo),e(U,Lv),e(Lv,Tge),e(Tge,fjo),e(Lv,mjo),e(Lv,kO),e(kO,gjo),e(Lv,hjo),e(U,pjo),e(U,xv),e(xv,Mge),e(Mge,_jo),e(xv,ujo),e(xv,SO),e(SO,bjo),e(xv,vjo),e(U,Fjo),e(U,$v),e($v,Ege),e(Ege,Tjo),e($v,Mjo),e($v,RO),e(RO,Ejo),e($v,Cjo),e(U,wjo),e(U,kv),e(kv,Cge),e(Cge,Ajo),e(kv,yjo),e(kv,BO),e(BO,Ljo),e(kv,xjo),e(U,$jo),e(U,Sv),e(Sv,wge),e(wge,kjo),e(Sv,Sjo),e(Sv,PO),e(PO,Rjo),e(Sv,Bjo),e(U,Pjo),e(U,Rv),e(Rv,Age),e(Age,Ijo),e(Rv,qjo),e(Rv,IO),e(IO,Njo),e(Rv,jjo),e(U,Djo),e(U,Bv),e(Bv,yge),e(yge,Gjo),e(Bv,Ojo),e(Bv,qO),e(qO,Vjo),e(Bv,Xjo),e(U,zjo),e(U,Pv),e(Pv,Lge),e(Lge,Wjo),e(Pv,Qjo),e(Pv,NO),e(NO,Hjo),e(Pv,Ujo),e(U,Jjo),e(U,Iv),e(Iv,xge),e(xge,Yjo),e(Iv,Kjo),e(Iv,jO),e(jO,Zjo),e(Iv,eDo),e(U,oDo),e(U,qv),e(qv,$ge),e($ge,rDo),e(qv,tDo),e(qv,DO),e(DO,aDo),e(qv,nDo),e(U,sDo),e(U,Nv),e(Nv,kge),e(kge,lDo),e(Nv,iDo),e(Nv,GO),e(GO,dDo),e(Nv,cDo),e(U,fDo),e(U,jv),e(jv,Sge),e(Sge,mDo),e(jv,gDo),e(jv,OO),e(OO,hDo),e(jv,pDo),e(U,_Do),e(U,Dv),e(Dv,Rge),e(Rge,uDo),e(Dv,bDo),e(Dv,VO),e(VO,vDo),e(Dv,FDo),e(U,TDo),e(U,Gv),e(Gv,Bge),e(Bge,MDo),e(Gv,EDo),e(Gv,XO),e(XO,CDo),e(Gv,wDo),e(U,ADo),e(U,Ov),e(Ov,Pge),e(Pge,yDo),e(Ov,LDo),e(Ov,zO),e(zO,xDo),e(Ov,$Do),e(U,kDo),e(U,Vv),e(Vv,Ige),e(Ige,SDo),e(Vv,RDo),e(Vv,WO),e(WO,BDo),e(Vv,PDo),e(U,IDo),e(U,Xv),e(Xv,qge),e(qge,qDo),e(Xv,NDo),e(Xv,QO),e(QO,jDo),e(Xv,DDo),e(U,GDo),e(U,zv),e(zv,Nge),e(Nge,ODo),e(zv,VDo),e(zv,HO),e(HO,XDo),e(zv,zDo),e(U,WDo),e(U,Wv),e(Wv,jge),e(jge,QDo),e(Wv,HDo),e(Wv,UO),e(UO,UDo),e(Wv,JDo),e(U,YDo),e(U,Qv),e(Qv,Dge),e(Dge,KDo),e(Qv,ZDo),e(Qv,JO),e(JO,eGo),e(Qv,oGo),e(U,rGo),e(U,Hv),e(Hv,Gge),e(Gge,tGo),e(Hv,aGo),e(Hv,YO),e(YO,nGo),e(Hv,sGo),e(U,lGo),e(U,Uv),e(Uv,Oge),e(Oge,iGo),e(Uv,dGo),e(Uv,KO),e(KO,cGo),e(Uv,fGo),e(U,mGo),e(U,Jv),e(Jv,Vge),e(Vge,gGo),e(Jv,hGo),e(Jv,ZO),e(ZO,pGo),e(Jv,_Go),e(U,uGo),e(U,Yv),e(Yv,Xge),e(Xge,bGo),e(Yv,vGo),e(Yv,eV),e(eV,FGo),e(Yv,TGo),e(ao,MGo),e(ao,Kv),e(Kv,EGo),e(Kv,zge),e(zge,CGo),e(Kv,wGo),e(Kv,Wge),e(Wge,AGo),e(ao,yGo),M(Zv,ao,null),b(f,Bqe,u),b(f,Yi,u),e(Yi,eF),e(eF,Qge),M(Sy,Qge,null),e(Yi,LGo),e(Yi,Hge),e(Hge,xGo),b(f,Pqe,u),b(f,qo,u),M(Ry,qo,null),e(qo,$Go),e(qo,Ki),e(Ki,kGo),e(Ki,oV),e(oV,SGo),e(Ki,RGo),e(Ki,rV),e(rV,BGo),e(Ki,PGo),e(qo,IGo),e(qo,By),e(By,qGo),e(By,Uge),e(Uge,NGo),e(By,jGo),e(qo,DGo),e(qo,mt),M(Py,mt,null),e(mt,GGo),e(mt,Jge),e(Jge,OGo),e(mt,VGo),e(mt,Zi),e(Zi,XGo),e(Zi,Yge),e(Yge,zGo),e(Zi,WGo),e(Zi,tV),e(tV,QGo),e(Zi,HGo),e(mt,UGo),M(oF,mt,null),e(qo,JGo),e(qo,no),M(Iy,no,null),e(no,YGo),e(no,Kge),e(Kge,KGo),e(no,ZGo),e(no,qa),e(qa,eOo),e(qa,Zge),e(Zge,oOo),e(qa,rOo),e(qa,ehe),e(ehe,tOo),e(qa,aOo),e(qa,ohe),e(ohe,nOo),e(qa,sOo),e(no,lOo),e(no,V),e(V,rF),e(rF,rhe),e(rhe,iOo),e(rF,dOo),e(rF,aV),e(aV,cOo),e(rF,fOo),e(V,mOo),e(V,tF),e(tF,the),e(the,gOo),e(tF,hOo),e(tF,nV),e(nV,pOo),e(tF,_Oo),e(V,uOo),e(V,aF),e(aF,ahe),e(ahe,bOo),e(aF,vOo),e(aF,sV),e(sV,FOo),e(aF,TOo),e(V,MOo),e(V,nF),e(nF,nhe),e(nhe,EOo),e(nF,COo),e(nF,lV),e(lV,wOo),e(nF,AOo),e(V,yOo),e(V,sF),e(sF,she),e(she,LOo),e(sF,xOo),e(sF,iV),e(iV,$Oo),e(sF,kOo),e(V,SOo),e(V,lF),e(lF,lhe),e(lhe,ROo),e(lF,BOo),e(lF,dV),e(dV,POo),e(lF,IOo),e(V,qOo),e(V,iF),e(iF,ihe),e(ihe,NOo),e(iF,jOo),e(iF,cV),e(cV,DOo),e(iF,GOo),e(V,OOo),e(V,dF),e(dF,dhe),e(dhe,VOo),e(dF,XOo),e(dF,fV),e(fV,zOo),e(dF,WOo),e(V,QOo),e(V,cF),e(cF,che),e(che,HOo),e(cF,UOo),e(cF,mV),e(mV,JOo),e(cF,YOo),e(V,KOo),e(V,fF),e(fF,fhe),e(fhe,ZOo),e(fF,eVo),e(fF,gV),e(gV,oVo),e(fF,rVo),e(V,tVo),e(V,mF),e(mF,mhe),e(mhe,aVo),e(mF,nVo),e(mF,hV),e(hV,sVo),e(mF,lVo),e(V,iVo),e(V,gF),e(gF,ghe),e(ghe,dVo),e(gF,cVo),e(gF,pV),e(pV,fVo),e(gF,mVo),e(V,gVo),e(V,hF),e(hF,hhe),e(hhe,hVo),e(hF,pVo),e(hF,_V),e(_V,_Vo),e(hF,uVo),e(V,bVo),e(V,pF),e(pF,phe),e(phe,vVo),e(pF,FVo),e(pF,uV),e(uV,TVo),e(pF,MVo),e(V,EVo),e(V,_F),e(_F,_he),e(_he,CVo),e(_F,wVo),e(_F,bV),e(bV,AVo),e(_F,yVo),e(V,LVo),e(V,uF),e(uF,uhe),e(uhe,xVo),e(uF,$Vo),e(uF,vV),e(vV,kVo),e(uF,SVo),e(V,RVo),e(V,bF),e(bF,bhe),e(bhe,BVo),e(bF,PVo),e(bF,FV),e(FV,IVo),e(bF,qVo),e(V,NVo),e(V,vF),e(vF,vhe),e(vhe,jVo),e(vF,DVo),e(vF,TV),e(TV,GVo),e(vF,OVo),e(V,VVo),e(V,FF),e(FF,Fhe),e(Fhe,XVo),e(FF,zVo),e(FF,MV),e(MV,WVo),e(FF,QVo),e(V,HVo),e(V,TF),e(TF,The),e(The,UVo),e(TF,JVo),e(TF,EV),e(EV,YVo),e(TF,KVo),e(V,ZVo),e(V,MF),e(MF,Mhe),e(Mhe,eXo),e(MF,oXo),e(MF,CV),e(CV,rXo),e(MF,tXo),e(V,aXo),e(V,EF),e(EF,Ehe),e(Ehe,nXo),e(EF,sXo),e(EF,wV),e(wV,lXo),e(EF,iXo),e(V,dXo),e(V,CF),e(CF,Che),e(Che,cXo),e(CF,fXo),e(CF,AV),e(AV,mXo),e(CF,gXo),e(V,hXo),e(V,wF),e(wF,whe),e(whe,pXo),e(wF,_Xo),e(wF,yV),e(yV,uXo),e(wF,bXo),e(V,vXo),e(V,AF),e(AF,Ahe),e(Ahe,FXo),e(AF,TXo),e(AF,LV),e(LV,MXo),e(AF,EXo),e(V,CXo),e(V,yF),e(yF,yhe),e(yhe,wXo),e(yF,AXo),e(yF,xV),e(xV,yXo),e(yF,LXo),e(V,xXo),e(V,LF),e(LF,Lhe),e(Lhe,$Xo),e(LF,kXo),e(LF,$V),e($V,SXo),e(LF,RXo),e(V,BXo),e(V,xF),e(xF,xhe),e(xhe,PXo),e(xF,IXo),e(xF,kV),e(kV,qXo),e(xF,NXo),e(V,jXo),e(V,$F),e($F,$he),e($he,DXo),e($F,GXo),e($F,SV),e(SV,OXo),e($F,VXo),e(V,XXo),e(V,kF),e(kF,khe),e(khe,zXo),e(kF,WXo),e(kF,RV),e(RV,QXo),e(kF,HXo),e(V,UXo),e(V,SF),e(SF,She),e(She,JXo),e(SF,YXo),e(SF,BV),e(BV,KXo),e(SF,ZXo),e(V,ezo),e(V,RF),e(RF,Rhe),e(Rhe,ozo),e(RF,rzo),e(RF,PV),e(PV,tzo),e(RF,azo),e(V,nzo),e(V,BF),e(BF,Bhe),e(Bhe,szo),e(BF,lzo),e(BF,IV),e(IV,izo),e(BF,dzo),e(V,czo),e(V,PF),e(PF,Phe),e(Phe,fzo),e(PF,mzo),e(PF,qV),e(qV,gzo),e(PF,hzo),e(V,pzo),e(V,IF),e(IF,Ihe),e(Ihe,_zo),e(IF,uzo),e(IF,NV),e(NV,bzo),e(IF,vzo),e(V,Fzo),e(V,qF),e(qF,qhe),e(qhe,Tzo),e(qF,Mzo),e(qF,jV),e(jV,Ezo),e(qF,Czo),e(V,wzo),e(V,NF),e(NF,Nhe),e(Nhe,Azo),e(NF,yzo),e(NF,DV),e(DV,Lzo),e(NF,xzo),e(V,$zo),e(V,jF),e(jF,jhe),e(jhe,kzo),e(jF,Szo),e(jF,GV),e(GV,Rzo),e(jF,Bzo),e(V,Pzo),e(V,DF),e(DF,Dhe),e(Dhe,Izo),e(DF,qzo),e(DF,OV),e(OV,Nzo),e(DF,jzo),e(no,Dzo),e(no,GF),e(GF,Gzo),e(GF,Ghe),e(Ghe,Ozo),e(GF,Vzo),e(GF,Ohe),e(Ohe,Xzo),e(no,zzo),M(OF,no,null),b(f,Iqe,u),b(f,ed,u),e(ed,VF),e(VF,Vhe),M(qy,Vhe,null),e(ed,Wzo),e(ed,Xhe),e(Xhe,Qzo),b(f,qqe,u),b(f,No,u),M(Ny,No,null),e(No,Hzo),e(No,od),e(od,Uzo),e(od,VV),e(VV,Jzo),e(od,Yzo),e(od,XV),e(XV,Kzo),e(od,Zzo),e(No,eWo),e(No,jy),e(jy,oWo),e(jy,zhe),e(zhe,rWo),e(jy,tWo),e(No,aWo),e(No,gt),M(Dy,gt,null),e(gt,nWo),e(gt,Whe),e(Whe,sWo),e(gt,lWo),e(gt,rd),e(rd,iWo),e(rd,Qhe),e(Qhe,dWo),e(rd,cWo),e(rd,zV),e(zV,fWo),e(rd,mWo),e(gt,gWo),M(XF,gt,null),e(No,hWo),e(No,so),M(Gy,so,null),e(so,pWo),e(so,Hhe),e(Hhe,_Wo),e(so,uWo),e(so,Na),e(Na,bWo),e(Na,Uhe),e(Uhe,vWo),e(Na,FWo),e(Na,Jhe),e(Jhe,TWo),e(Na,MWo),e(Na,Yhe),e(Yhe,EWo),e(Na,CWo),e(so,wWo),e(so,Khe),e(Khe,zF),e(zF,Zhe),e(Zhe,AWo),e(zF,yWo),e(zF,WV),e(WV,LWo),e(zF,xWo),e(so,$Wo),e(so,WF),e(WF,kWo),e(WF,epe),e(epe,SWo),e(WF,RWo),e(WF,ope),e(ope,BWo),e(so,PWo),M(QF,so,null),b(f,Nqe,u),b(f,td,u),e(td,HF),e(HF,rpe),M(Oy,rpe,null),e(td,IWo),e(td,tpe),e(tpe,qWo),b(f,jqe,u),b(f,jo,u),M(Vy,jo,null),e(jo,NWo),e(jo,ad),e(ad,jWo),e(ad,QV),e(QV,DWo),e(ad,GWo),e(ad,HV),e(HV,OWo),e(ad,VWo),e(jo,XWo),e(jo,Xy),e(Xy,zWo),e(Xy,ape),e(ape,WWo),e(Xy,QWo),e(jo,HWo),e(jo,ht),M(zy,ht,null),e(ht,UWo),e(ht,npe),e(npe,JWo),e(ht,YWo),e(ht,nd),e(nd,KWo),e(nd,spe),e(spe,ZWo),e(nd,eQo),e(nd,UV),e(UV,oQo),e(nd,rQo),e(ht,tQo),M(UF,ht,null),e(jo,aQo),e(jo,lo),M(Wy,lo,null),e(lo,nQo),e(lo,lpe),e(lpe,sQo),e(lo,lQo),e(lo,ja),e(ja,iQo),e(ja,ipe),e(ipe,dQo),e(ja,cQo),e(ja,dpe),e(dpe,fQo),e(ja,mQo),e(ja,cpe),e(cpe,gQo),e(ja,hQo),e(lo,pQo),e(lo,Fe),e(Fe,JF),e(JF,fpe),e(fpe,_Qo),e(JF,uQo),e(JF,JV),e(JV,bQo),e(JF,vQo),e(Fe,FQo),e(Fe,YF),e(YF,mpe),e(mpe,TQo),e(YF,MQo),e(YF,YV),e(YV,EQo),e(YF,CQo),e(Fe,wQo),e(Fe,KF),e(KF,gpe),e(gpe,AQo),e(KF,yQo),e(KF,KV),e(KV,LQo),e(KF,xQo),e(Fe,$Qo),e(Fe,Bs),e(Bs,hpe),e(hpe,kQo),e(Bs,SQo),e(Bs,ZV),e(ZV,RQo),e(Bs,BQo),e(Bs,eX),e(eX,PQo),e(Bs,IQo),e(Fe,qQo),e(Fe,ZF),e(ZF,ppe),e(ppe,NQo),e(ZF,jQo),e(ZF,oX),e(oX,DQo),e(ZF,GQo),e(Fe,OQo),e(Fe,pt),e(pt,_pe),e(_pe,VQo),e(pt,XQo),e(pt,rX),e(rX,zQo),e(pt,WQo),e(pt,tX),e(tX,QQo),e(pt,HQo),e(pt,aX),e(aX,UQo),e(pt,JQo),e(Fe,YQo),e(Fe,e0),e(e0,upe),e(upe,KQo),e(e0,ZQo),e(e0,nX),e(nX,eHo),e(e0,oHo),e(Fe,rHo),e(Fe,o0),e(o0,bpe),e(bpe,tHo),e(o0,aHo),e(o0,sX),e(sX,nHo),e(o0,sHo),e(Fe,lHo),e(Fe,r0),e(r0,vpe),e(vpe,iHo),e(r0,dHo),e(r0,lX),e(lX,cHo),e(r0,fHo),e(Fe,mHo),e(Fe,t0),e(t0,Fpe),e(Fpe,gHo),e(t0,hHo),e(t0,iX),e(iX,pHo),e(t0,_Ho),e(Fe,uHo),e(Fe,a0),e(a0,Tpe),e(Tpe,bHo),e(a0,vHo),e(a0,dX),e(dX,FHo),e(a0,THo),e(Fe,MHo),e(Fe,n0),e(n0,Mpe),e(Mpe,EHo),e(n0,CHo),e(n0,cX),e(cX,wHo),e(n0,AHo),e(Fe,yHo),e(Fe,s0),e(s0,Epe),e(Epe,LHo),e(s0,xHo),e(s0,fX),e(fX,$Ho),e(s0,kHo),e(lo,SHo),e(lo,l0),e(l0,RHo),e(l0,Cpe),e(Cpe,BHo),e(l0,PHo),e(l0,wpe),e(wpe,IHo),e(lo,qHo),M(i0,lo,null),b(f,Dqe,u),b(f,sd,u),e(sd,d0),e(d0,Ape),M(Qy,Ape,null),e(sd,NHo),e(sd,ype),e(ype,jHo),b(f,Gqe,u),b(f,Do,u),M(Hy,Do,null),e(Do,DHo),e(Do,ld),e(ld,GHo),e(ld,mX),e(mX,OHo),e(ld,VHo),e(ld,gX),e(gX,XHo),e(ld,zHo),e(Do,WHo),e(Do,Uy),e(Uy,QHo),e(Uy,Lpe),e(Lpe,HHo),e(Uy,UHo),e(Do,JHo),e(Do,_t),M(Jy,_t,null),e(_t,YHo),e(_t,xpe),e(xpe,KHo),e(_t,ZHo),e(_t,id),e(id,eUo),e(id,$pe),e($pe,oUo),e(id,rUo),e(id,hX),e(hX,tUo),e(id,aUo),e(_t,nUo),M(c0,_t,null),e(Do,sUo),e(Do,io),M(Yy,io,null),e(io,lUo),e(io,kpe),e(kpe,iUo),e(io,dUo),e(io,Da),e(Da,cUo),e(Da,Spe),e(Spe,fUo),e(Da,mUo),e(Da,Rpe),e(Rpe,gUo),e(Da,hUo),e(Da,Bpe),e(Bpe,pUo),e(Da,_Uo),e(io,uUo),e(io,Ppe),e(Ppe,f0),e(f0,Ipe),e(Ipe,bUo),e(f0,vUo),e(f0,pX),e(pX,FUo),e(f0,TUo),e(io,MUo),e(io,m0),e(m0,EUo),e(m0,qpe),e(qpe,CUo),e(m0,wUo),e(m0,Npe),e(Npe,AUo),e(io,yUo),M(g0,io,null),b(f,Oqe,u),b(f,dd,u),e(dd,h0),e(h0,jpe),M(Ky,jpe,null),e(dd,LUo),e(dd,Dpe),e(Dpe,xUo),b(f,Vqe,u),b(f,Go,u),M(Zy,Go,null),e(Go,$Uo),e(Go,cd),e(cd,kUo),e(cd,_X),e(_X,SUo),e(cd,RUo),e(cd,uX),e(uX,BUo),e(cd,PUo),e(Go,IUo),e(Go,eL),e(eL,qUo),e(eL,Gpe),e(Gpe,NUo),e(eL,jUo),e(Go,DUo),e(Go,ut),M(oL,ut,null),e(ut,GUo),e(ut,Ope),e(Ope,OUo),e(ut,VUo),e(ut,fd),e(fd,XUo),e(fd,Vpe),e(Vpe,zUo),e(fd,WUo),e(fd,bX),e(bX,QUo),e(fd,HUo),e(ut,UUo),M(p0,ut,null),e(Go,JUo),e(Go,co),M(rL,co,null),e(co,YUo),e(co,Xpe),e(Xpe,KUo),e(co,ZUo),e(co,Ga),e(Ga,eJo),e(Ga,zpe),e(zpe,oJo),e(Ga,rJo),e(Ga,Wpe),e(Wpe,tJo),e(Ga,aJo),e(Ga,Qpe),e(Qpe,nJo),e(Ga,sJo),e(co,lJo),e(co,ke),e(ke,_0),e(_0,Hpe),e(Hpe,iJo),e(_0,dJo),e(_0,vX),e(vX,cJo),e(_0,fJo),e(ke,mJo),e(ke,u0),e(u0,Upe),e(Upe,gJo),e(u0,hJo),e(u0,FX),e(FX,pJo),e(u0,_Jo),e(ke,uJo),e(ke,b0),e(b0,Jpe),e(Jpe,bJo),e(b0,vJo),e(b0,TX),e(TX,FJo),e(b0,TJo),e(ke,MJo),e(ke,v0),e(v0,Ype),e(Ype,EJo),e(v0,CJo),e(v0,MX),e(MX,wJo),e(v0,AJo),e(ke,yJo),e(ke,F0),e(F0,Kpe),e(Kpe,LJo),e(F0,xJo),e(F0,EX),e(EX,$Jo),e(F0,kJo),e(ke,SJo),e(ke,T0),e(T0,Zpe),e(Zpe,RJo),e(T0,BJo),e(T0,CX),e(CX,PJo),e(T0,IJo),e(ke,qJo),e(ke,M0),e(M0,e_e),e(e_e,NJo),e(M0,jJo),e(M0,wX),e(wX,DJo),e(M0,GJo),e(ke,OJo),e(ke,E0),e(E0,o_e),e(o_e,VJo),e(E0,XJo),e(E0,AX),e(AX,zJo),e(E0,WJo),e(ke,QJo),e(ke,C0),e(C0,r_e),e(r_e,HJo),e(C0,UJo),e(C0,yX),e(yX,JJo),e(C0,YJo),e(co,KJo),e(co,w0),e(w0,ZJo),e(w0,t_e),e(t_e,eYo),e(w0,oYo),e(w0,a_e),e(a_e,rYo),e(co,tYo),M(A0,co,null),b(f,Xqe,u),b(f,md,u),e(md,y0),e(y0,n_e),M(tL,n_e,null),e(md,aYo),e(md,s_e),e(s_e,nYo),b(f,zqe,u),b(f,Oo,u),M(aL,Oo,null),e(Oo,sYo),e(Oo,gd),e(gd,lYo),e(gd,LX),e(LX,iYo),e(gd,dYo),e(gd,xX),e(xX,cYo),e(gd,fYo),e(Oo,mYo),e(Oo,nL),e(nL,gYo),e(nL,l_e),e(l_e,hYo),e(nL,pYo),e(Oo,_Yo),e(Oo,bt),M(sL,bt,null),e(bt,uYo),e(bt,i_e),e(i_e,bYo),e(bt,vYo),e(bt,hd),e(hd,FYo),e(hd,d_e),e(d_e,TYo),e(hd,MYo),e(hd,$X),e($X,EYo),e(hd,CYo),e(bt,wYo),M(L0,bt,null),e(Oo,AYo),e(Oo,fo),M(lL,fo,null),e(fo,yYo),e(fo,c_e),e(c_e,LYo),e(fo,xYo),e(fo,Oa),e(Oa,$Yo),e(Oa,f_e),e(f_e,kYo),e(Oa,SYo),e(Oa,m_e),e(m_e,RYo),e(Oa,BYo),e(Oa,g_e),e(g_e,PYo),e(Oa,IYo),e(fo,qYo),e(fo,Kr),e(Kr,x0),e(x0,h_e),e(h_e,NYo),e(x0,jYo),e(x0,kX),e(kX,DYo),e(x0,GYo),e(Kr,OYo),e(Kr,$0),e($0,p_e),e(p_e,VYo),e($0,XYo),e($0,SX),e(SX,zYo),e($0,WYo),e(Kr,QYo),e(Kr,k0),e(k0,__e),e(__e,HYo),e(k0,UYo),e(k0,RX),e(RX,JYo),e(k0,YYo),e(Kr,KYo),e(Kr,S0),e(S0,u_e),e(u_e,ZYo),e(S0,eKo),e(S0,BX),e(BX,oKo),e(S0,rKo),e(Kr,tKo),e(Kr,R0),e(R0,b_e),e(b_e,aKo),e(R0,nKo),e(R0,PX),e(PX,sKo),e(R0,lKo),e(fo,iKo),e(fo,B0),e(B0,dKo),e(B0,v_e),e(v_e,cKo),e(B0,fKo),e(B0,F_e),e(F_e,mKo),e(fo,gKo),M(P0,fo,null),b(f,Wqe,u),b(f,pd,u),e(pd,I0),e(I0,T_e),M(iL,T_e,null),e(pd,hKo),e(pd,M_e),e(M_e,pKo),b(f,Qqe,u),b(f,Vo,u),M(dL,Vo,null),e(Vo,_Ko),e(Vo,_d),e(_d,uKo),e(_d,IX),e(IX,bKo),e(_d,vKo),e(_d,qX),e(qX,FKo),e(_d,TKo),e(Vo,MKo),e(Vo,cL),e(cL,EKo),e(cL,E_e),e(E_e,CKo),e(cL,wKo),e(Vo,AKo),e(Vo,vt),M(fL,vt,null),e(vt,yKo),e(vt,C_e),e(C_e,LKo),e(vt,xKo),e(vt,ud),e(ud,$Ko),e(ud,w_e),e(w_e,kKo),e(ud,SKo),e(ud,NX),e(NX,RKo),e(ud,BKo),e(vt,PKo),M(q0,vt,null),e(Vo,IKo),e(Vo,mo),M(mL,mo,null),e(mo,qKo),e(mo,A_e),e(A_e,NKo),e(mo,jKo),e(mo,Va),e(Va,DKo),e(Va,y_e),e(y_e,GKo),e(Va,OKo),e(Va,L_e),e(L_e,VKo),e(Va,XKo),e(Va,x_e),e(x_e,zKo),e(Va,WKo),e(mo,QKo),e(mo,Se),e(Se,N0),e(N0,$_e),e($_e,HKo),e(N0,UKo),e(N0,jX),e(jX,JKo),e(N0,YKo),e(Se,KKo),e(Se,j0),e(j0,k_e),e(k_e,ZKo),e(j0,eZo),e(j0,DX),e(DX,oZo),e(j0,rZo),e(Se,tZo),e(Se,D0),e(D0,S_e),e(S_e,aZo),e(D0,nZo),e(D0,GX),e(GX,sZo),e(D0,lZo),e(Se,iZo),e(Se,G0),e(G0,R_e),e(R_e,dZo),e(G0,cZo),e(G0,OX),e(OX,fZo),e(G0,mZo),e(Se,gZo),e(Se,O0),e(O0,B_e),e(B_e,hZo),e(O0,pZo),e(O0,VX),e(VX,_Zo),e(O0,uZo),e(Se,bZo),e(Se,V0),e(V0,P_e),e(P_e,vZo),e(V0,FZo),e(V0,XX),e(XX,TZo),e(V0,MZo),e(Se,EZo),e(Se,X0),e(X0,I_e),e(I_e,CZo),e(X0,wZo),e(X0,zX),e(zX,AZo),e(X0,yZo),e(Se,LZo),e(Se,z0),e(z0,q_e),e(q_e,xZo),e(z0,$Zo),e(z0,WX),e(WX,kZo),e(z0,SZo),e(Se,RZo),e(Se,W0),e(W0,N_e),e(N_e,BZo),e(W0,PZo),e(W0,QX),e(QX,IZo),e(W0,qZo),e(mo,NZo),e(mo,Q0),e(Q0,jZo),e(Q0,j_e),e(j_e,DZo),e(Q0,GZo),e(Q0,D_e),e(D_e,OZo),e(mo,VZo),M(H0,mo,null),b(f,Hqe,u),b(f,bd,u),e(bd,U0),e(U0,G_e),M(gL,G_e,null),e(bd,XZo),e(bd,O_e),e(O_e,zZo),b(f,Uqe,u),b(f,Xo,u),M(hL,Xo,null),e(Xo,WZo),e(Xo,vd),e(vd,QZo),e(vd,HX),e(HX,HZo),e(vd,UZo),e(vd,UX),e(UX,JZo),e(vd,YZo),e(Xo,KZo),e(Xo,pL),e(pL,ZZo),e(pL,V_e),e(V_e,eer),e(pL,oer),e(Xo,rer),e(Xo,Ft),M(_L,Ft,null),e(Ft,ter),e(Ft,X_e),e(X_e,aer),e(Ft,ner),e(Ft,Fd),e(Fd,ser),e(Fd,z_e),e(z_e,ler),e(Fd,ier),e(Fd,JX),e(JX,der),e(Fd,cer),e(Ft,fer),M(J0,Ft,null),e(Xo,mer),e(Xo,go),M(uL,go,null),e(go,ger),e(go,W_e),e(W_e,her),e(go,per),e(go,Xa),e(Xa,_er),e(Xa,Q_e),e(Q_e,uer),e(Xa,ber),e(Xa,H_e),e(H_e,ver),e(Xa,Fer),e(Xa,U_e),e(U_e,Ter),e(Xa,Mer),e(go,Eer),e(go,bL),e(bL,Y0),e(Y0,J_e),e(J_e,Cer),e(Y0,wer),e(Y0,YX),e(YX,Aer),e(Y0,yer),e(bL,Ler),e(bL,K0),e(K0,Y_e),e(Y_e,xer),e(K0,$er),e(K0,KX),e(KX,ker),e(K0,Ser),e(go,Rer),e(go,Z0),e(Z0,Ber),e(Z0,K_e),e(K_e,Per),e(Z0,Ier),e(Z0,Z_e),e(Z_e,qer),e(go,Ner),M(eT,go,null),b(f,Jqe,u),b(f,Td,u),e(Td,oT),e(oT,eue),M(vL,eue,null),e(Td,jer),e(Td,oue),e(oue,Der),b(f,Yqe,u),b(f,zo,u),M(FL,zo,null),e(zo,Ger),e(zo,Md),e(Md,Oer),e(Md,ZX),e(ZX,Ver),e(Md,Xer),e(Md,ez),e(ez,zer),e(Md,Wer),e(zo,Qer),e(zo,TL),e(TL,Her),e(TL,rue),e(rue,Uer),e(TL,Jer),e(zo,Yer),e(zo,Tt),M(ML,Tt,null),e(Tt,Ker),e(Tt,tue),e(tue,Zer),e(Tt,eor),e(Tt,Ed),e(Ed,oor),e(Ed,aue),e(aue,ror),e(Ed,tor),e(Ed,oz),e(oz,aor),e(Ed,nor),e(Tt,sor),M(rT,Tt,null),e(zo,lor),e(zo,ho),M(EL,ho,null),e(ho,ior),e(ho,nue),e(nue,dor),e(ho,cor),e(ho,za),e(za,mor),e(za,sue),e(sue,gor),e(za,hor),e(za,lue),e(lue,por),e(za,_or),e(za,iue),e(iue,uor),e(za,bor),e(ho,vor),e(ho,Zr),e(Zr,tT),e(tT,due),e(due,For),e(tT,Tor),e(tT,rz),e(rz,Mor),e(tT,Eor),e(Zr,Cor),e(Zr,aT),e(aT,cue),e(cue,wor),e(aT,Aor),e(aT,tz),e(tz,yor),e(aT,Lor),e(Zr,xor),e(Zr,nT),e(nT,fue),e(fue,$or),e(nT,kor),e(nT,az),e(az,Sor),e(nT,Ror),e(Zr,Bor),e(Zr,sT),e(sT,mue),e(mue,Por),e(sT,Ior),e(sT,nz),e(nz,qor),e(sT,Nor),e(Zr,jor),e(Zr,lT),e(lT,gue),e(gue,Dor),e(lT,Gor),e(lT,sz),e(sz,Oor),e(lT,Vor),e(ho,Xor),e(ho,iT),e(iT,zor),e(iT,hue),e(hue,Wor),e(iT,Qor),e(iT,pue),e(pue,Hor),e(ho,Uor),M(dT,ho,null),b(f,Kqe,u),b(f,Cd,u),e(Cd,cT),e(cT,_ue),M(CL,_ue,null),e(Cd,Jor),e(Cd,uue),e(uue,Yor),b(f,Zqe,u),b(f,Wo,u),M(wL,Wo,null),e(Wo,Kor),e(Wo,wd),e(wd,Zor),e(wd,lz),e(lz,err),e(wd,orr),e(wd,iz),e(iz,rrr),e(wd,trr),e(Wo,arr),e(Wo,AL),e(AL,nrr),e(AL,bue),e(bue,srr),e(AL,lrr),e(Wo,irr),e(Wo,Mt),M(yL,Mt,null),e(Mt,drr),e(Mt,vue),e(vue,crr),e(Mt,frr),e(Mt,Ad),e(Ad,mrr),e(Ad,Fue),e(Fue,grr),e(Ad,hrr),e(Ad,dz),e(dz,prr),e(Ad,_rr),e(Mt,urr),M(fT,Mt,null),e(Wo,brr),e(Wo,po),M(LL,po,null),e(po,vrr),e(po,Tue),e(Tue,Frr),e(po,Trr),e(po,Wa),e(Wa,Mrr),e(Wa,Mue),e(Mue,Err),e(Wa,Crr),e(Wa,Eue),e(Eue,wrr),e(Wa,Arr),e(Wa,Cue),e(Cue,yrr),e(Wa,Lrr),e(po,xrr),e(po,yd),e(yd,mT),e(mT,wue),e(wue,$rr),e(mT,krr),e(mT,cz),e(cz,Srr),e(mT,Rrr),e(yd,Brr),e(yd,gT),e(gT,Aue),e(Aue,Prr),e(gT,Irr),e(gT,fz),e(fz,qrr),e(gT,Nrr),e(yd,jrr),e(yd,hT),e(hT,yue),e(yue,Drr),e(hT,Grr),e(hT,mz),e(mz,Orr),e(hT,Vrr),e(po,Xrr),e(po,pT),e(pT,zrr),e(pT,Lue),e(Lue,Wrr),e(pT,Qrr),e(pT,xue),e(xue,Hrr),e(po,Urr),M(_T,po,null),b(f,eNe,u),b(f,Ld,u),e(Ld,uT),e(uT,$ue),M(xL,$ue,null),e(Ld,Jrr),e(Ld,kue),e(kue,Yrr),b(f,oNe,u),b(f,Qo,u),M($L,Qo,null),e(Qo,Krr),e(Qo,xd),e(xd,Zrr),e(xd,gz),e(gz,etr),e(xd,otr),e(xd,hz),e(hz,rtr),e(xd,ttr),e(Qo,atr),e(Qo,kL),e(kL,ntr),e(kL,Sue),e(Sue,str),e(kL,ltr),e(Qo,itr),e(Qo,Et),M(SL,Et,null),e(Et,dtr),e(Et,Rue),e(Rue,ctr),e(Et,ftr),e(Et,$d),e($d,mtr),e($d,Bue),e(Bue,gtr),e($d,htr),e($d,pz),e(pz,ptr),e($d,_tr),e(Et,utr),M(bT,Et,null),e(Qo,btr),e(Qo,_o),M(RL,_o,null),e(_o,vtr),e(_o,Pue),e(Pue,Ftr),e(_o,Ttr),e(_o,Qa),e(Qa,Mtr),e(Qa,Iue),e(Iue,Etr),e(Qa,Ctr),e(Qa,que),e(que,wtr),e(Qa,Atr),e(Qa,Nue),e(Nue,ytr),e(Qa,Ltr),e(_o,xtr),e(_o,BL),e(BL,vT),e(vT,jue),e(jue,$tr),e(vT,ktr),e(vT,_z),e(_z,Str),e(vT,Rtr),e(BL,Btr),e(BL,FT),e(FT,Due),e(Due,Ptr),e(FT,Itr),e(FT,uz),e(uz,qtr),e(FT,Ntr),e(_o,jtr),e(_o,TT),e(TT,Dtr),e(TT,Gue),e(Gue,Gtr),e(TT,Otr),e(TT,Oue),e(Oue,Vtr),e(_o,Xtr),M(MT,_o,null),b(f,rNe,u),b(f,kd,u),e(kd,ET),e(ET,Vue),M(PL,Vue,null),e(kd,ztr),e(kd,Xue),e(Xue,Wtr),b(f,tNe,u),b(f,Ho,u),M(IL,Ho,null),e(Ho,Qtr),e(Ho,Sd),e(Sd,Htr),e(Sd,bz),e(bz,Utr),e(Sd,Jtr),e(Sd,vz),e(vz,Ytr),e(Sd,Ktr),e(Ho,Ztr),e(Ho,qL),e(qL,ear),e(qL,zue),e(zue,oar),e(qL,rar),e(Ho,tar),e(Ho,Ct),M(NL,Ct,null),e(Ct,aar),e(Ct,Wue),e(Wue,nar),e(Ct,sar),e(Ct,Rd),e(Rd,lar),e(Rd,Que),e(Que,iar),e(Rd,dar),e(Rd,Fz),e(Fz,car),e(Rd,far),e(Ct,mar),M(CT,Ct,null),e(Ho,gar),e(Ho,uo),M(jL,uo,null),e(uo,har),e(uo,Hue),e(Hue,par),e(uo,_ar),e(uo,Ha),e(Ha,uar),e(Ha,Uue),e(Uue,bar),e(Ha,Far),e(Ha,Jue),e(Jue,Tar),e(Ha,Mar),e(Ha,Yue),e(Yue,Ear),e(Ha,Car),e(uo,war),e(uo,Kue),e(Kue,wT),e(wT,Zue),e(Zue,Aar),e(wT,yar),e(wT,Tz),e(Tz,Lar),e(wT,xar),e(uo,$ar),e(uo,AT),e(AT,kar),e(AT,e2e),e(e2e,Sar),e(AT,Rar),e(AT,o2e),e(o2e,Bar),e(uo,Par),M(yT,uo,null),b(f,aNe,u),b(f,Bd,u),e(Bd,LT),e(LT,r2e),M(DL,r2e,null),e(Bd,Iar),e(Bd,t2e),e(t2e,qar),b(f,nNe,u),b(f,Uo,u),M(GL,Uo,null),e(Uo,Nar),e(Uo,Pd),e(Pd,jar),e(Pd,Mz),e(Mz,Dar),e(Pd,Gar),e(Pd,Ez),e(Ez,Oar),e(Pd,Var),e(Uo,Xar),e(Uo,OL),e(OL,zar),e(OL,a2e),e(a2e,War),e(OL,Qar),e(Uo,Har),e(Uo,wt),M(VL,wt,null),e(wt,Uar),e(wt,n2e),e(n2e,Jar),e(wt,Yar),e(wt,Id),e(Id,Kar),e(Id,s2e),e(s2e,Zar),e(Id,enr),e(Id,Cz),e(Cz,onr),e(Id,rnr),e(wt,tnr),M(xT,wt,null),e(Uo,anr),e(Uo,bo),M(XL,bo,null),e(bo,nnr),e(bo,l2e),e(l2e,snr),e(bo,lnr),e(bo,Ua),e(Ua,inr),e(Ua,i2e),e(i2e,dnr),e(Ua,cnr),e(Ua,d2e),e(d2e,fnr),e(Ua,mnr),e(Ua,c2e),e(c2e,gnr),e(Ua,hnr),e(bo,pnr),e(bo,Ja),e(Ja,$T),e($T,f2e),e(f2e,_nr),e($T,unr),e($T,wz),e(wz,bnr),e($T,vnr),e(Ja,Fnr),e(Ja,kT),e(kT,m2e),e(m2e,Tnr),e(kT,Mnr),e(kT,Az),e(Az,Enr),e(kT,Cnr),e(Ja,wnr),e(Ja,ST),e(ST,g2e),e(g2e,Anr),e(ST,ynr),e(ST,yz),e(yz,Lnr),e(ST,xnr),e(Ja,$nr),e(Ja,RT),e(RT,h2e),e(h2e,knr),e(RT,Snr),e(RT,Lz),e(Lz,Rnr),e(RT,Bnr),e(bo,Pnr),e(bo,BT),e(BT,Inr),e(BT,p2e),e(p2e,qnr),e(BT,Nnr),e(BT,_2e),e(_2e,jnr),e(bo,Dnr),M(PT,bo,null),b(f,sNe,u),b(f,qd,u),e(qd,IT),e(IT,u2e),M(zL,u2e,null),e(qd,Gnr),e(qd,b2e),e(b2e,Onr),b(f,lNe,u),b(f,Jo,u),M(WL,Jo,null),e(Jo,Vnr),e(Jo,Nd),e(Nd,Xnr),e(Nd,xz),e(xz,znr),e(Nd,Wnr),e(Nd,$z),e($z,Qnr),e(Nd,Hnr),e(Jo,Unr),e(Jo,QL),e(QL,Jnr),e(QL,v2e),e(v2e,Ynr),e(QL,Knr),e(Jo,Znr),e(Jo,At),M(HL,At,null),e(At,esr),e(At,F2e),e(F2e,osr),e(At,rsr),e(At,jd),e(jd,tsr),e(jd,T2e),e(T2e,asr),e(jd,nsr),e(jd,kz),e(kz,ssr),e(jd,lsr),e(At,isr),M(qT,At,null),e(Jo,dsr),e(Jo,vo),M(UL,vo,null),e(vo,csr),e(vo,M2e),e(M2e,fsr),e(vo,msr),e(vo,Ya),e(Ya,gsr),e(Ya,E2e),e(E2e,hsr),e(Ya,psr),e(Ya,C2e),e(C2e,_sr),e(Ya,usr),e(Ya,w2e),e(w2e,bsr),e(Ya,vsr),e(vo,Fsr),e(vo,A2e),e(A2e,NT),e(NT,y2e),e(y2e,Tsr),e(NT,Msr),e(NT,Sz),e(Sz,Esr),e(NT,Csr),e(vo,wsr),e(vo,jT),e(jT,Asr),e(jT,L2e),e(L2e,ysr),e(jT,Lsr),e(jT,x2e),e(x2e,xsr),e(vo,$sr),M(DT,vo,null),b(f,iNe,u),b(f,Dd,u),e(Dd,GT),e(GT,$2e),M(JL,$2e,null),e(Dd,ksr),e(Dd,k2e),e(k2e,Ssr),b(f,dNe,u),b(f,Yo,u),M(YL,Yo,null),e(Yo,Rsr),e(Yo,Gd),e(Gd,Bsr),e(Gd,Rz),e(Rz,Psr),e(Gd,Isr),e(Gd,Bz),e(Bz,qsr),e(Gd,Nsr),e(Yo,jsr),e(Yo,KL),e(KL,Dsr),e(KL,S2e),e(S2e,Gsr),e(KL,Osr),e(Yo,Vsr),e(Yo,yt),M(ZL,yt,null),e(yt,Xsr),e(yt,R2e),e(R2e,zsr),e(yt,Wsr),e(yt,Od),e(Od,Qsr),e(Od,B2e),e(B2e,Hsr),e(Od,Usr),e(Od,Pz),e(Pz,Jsr),e(Od,Ysr),e(yt,Ksr),M(OT,yt,null),e(Yo,Zsr),e(Yo,wr),M(e8,wr,null),e(wr,elr),e(wr,P2e),e(P2e,olr),e(wr,rlr),e(wr,Ka),e(Ka,tlr),e(Ka,I2e),e(I2e,alr),e(Ka,nlr),e(Ka,q2e),e(q2e,slr),e(Ka,llr),e(Ka,N2e),e(N2e,ilr),e(Ka,dlr),e(wr,clr),e(wr,N),e(N,VT),e(VT,j2e),e(j2e,flr),e(VT,mlr),e(VT,Iz),e(Iz,glr),e(VT,hlr),e(N,plr),e(N,XT),e(XT,D2e),e(D2e,_lr),e(XT,ulr),e(XT,qz),e(qz,blr),e(XT,vlr),e(N,Flr),e(N,zT),e(zT,G2e),e(G2e,Tlr),e(zT,Mlr),e(zT,Nz),e(Nz,Elr),e(zT,Clr),e(N,wlr),e(N,WT),e(WT,O2e),e(O2e,Alr),e(WT,ylr),e(WT,jz),e(jz,Llr),e(WT,xlr),e(N,$lr),e(N,QT),e(QT,V2e),e(V2e,klr),e(QT,Slr),e(QT,Dz),e(Dz,Rlr),e(QT,Blr),e(N,Plr),e(N,HT),e(HT,X2e),e(X2e,Ilr),e(HT,qlr),e(HT,Gz),e(Gz,Nlr),e(HT,jlr),e(N,Dlr),e(N,UT),e(UT,z2e),e(z2e,Glr),e(UT,Olr),e(UT,Oz),e(Oz,Vlr),e(UT,Xlr),e(N,zlr),e(N,JT),e(JT,W2e),e(W2e,Wlr),e(JT,Qlr),e(JT,Vz),e(Vz,Hlr),e(JT,Ulr),e(N,Jlr),e(N,YT),e(YT,Q2e),e(Q2e,Ylr),e(YT,Klr),e(YT,Xz),e(Xz,Zlr),e(YT,eir),e(N,oir),e(N,KT),e(KT,H2e),e(H2e,rir),e(KT,tir),e(KT,zz),e(zz,air),e(KT,nir),e(N,sir),e(N,ZT),e(ZT,U2e),e(U2e,lir),e(ZT,iir),e(ZT,Wz),e(Wz,dir),e(ZT,cir),e(N,fir),e(N,e7),e(e7,J2e),e(J2e,mir),e(e7,gir),e(e7,Qz),e(Qz,hir),e(e7,pir),e(N,_ir),e(N,o7),e(o7,Y2e),e(Y2e,uir),e(o7,bir),e(o7,Hz),e(Hz,vir),e(o7,Fir),e(N,Tir),e(N,r7),e(r7,K2e),e(K2e,Mir),e(r7,Eir),e(r7,Uz),e(Uz,Cir),e(r7,wir),e(N,Air),e(N,t7),e(t7,Z2e),e(Z2e,yir),e(t7,Lir),e(t7,Jz),e(Jz,xir),e(t7,$ir),e(N,kir),e(N,a7),e(a7,e1e),e(e1e,Sir),e(a7,Rir),e(a7,Yz),e(Yz,Bir),e(a7,Pir),e(N,Iir),e(N,n7),e(n7,o1e),e(o1e,qir),e(n7,Nir),e(n7,Kz),e(Kz,jir),e(n7,Dir),e(N,Gir),e(N,Ps),e(Ps,r1e),e(r1e,Oir),e(Ps,Vir),e(Ps,Zz),e(Zz,Xir),e(Ps,zir),e(Ps,eW),e(eW,Wir),e(Ps,Qir),e(N,Hir),e(N,s7),e(s7,t1e),e(t1e,Uir),e(s7,Jir),e(s7,oW),e(oW,Yir),e(s7,Kir),e(N,Zir),e(N,l7),e(l7,a1e),e(a1e,edr),e(l7,odr),e(l7,rW),e(rW,rdr),e(l7,tdr),e(N,adr),e(N,i7),e(i7,n1e),e(n1e,ndr),e(i7,sdr),e(i7,tW),e(tW,ldr),e(i7,idr),e(N,ddr),e(N,d7),e(d7,s1e),e(s1e,cdr),e(d7,fdr),e(d7,aW),e(aW,mdr),e(d7,gdr),e(N,hdr),e(N,c7),e(c7,l1e),e(l1e,pdr),e(c7,_dr),e(c7,nW),e(nW,udr),e(c7,bdr),e(N,vdr),e(N,f7),e(f7,i1e),e(i1e,Fdr),e(f7,Tdr),e(f7,sW),e(sW,Mdr),e(f7,Edr),e(N,Cdr),e(N,m7),e(m7,d1e),e(d1e,wdr),e(m7,Adr),e(m7,lW),e(lW,ydr),e(m7,Ldr),e(N,xdr),e(N,g7),e(g7,c1e),e(c1e,$dr),e(g7,kdr),e(g7,iW),e(iW,Sdr),e(g7,Rdr),e(N,Bdr),e(N,h7),e(h7,f1e),e(f1e,Pdr),e(h7,Idr),e(h7,dW),e(dW,qdr),e(h7,Ndr),e(N,jdr),e(N,p7),e(p7,m1e),e(m1e,Ddr),e(p7,Gdr),e(p7,cW),e(cW,Odr),e(p7,Vdr),e(N,Xdr),e(N,_7),e(_7,g1e),e(g1e,zdr),e(_7,Wdr),e(_7,fW),e(fW,Qdr),e(_7,Hdr),e(N,Udr),e(N,u7),e(u7,h1e),e(h1e,Jdr),e(u7,Ydr),e(u7,mW),e(mW,Kdr),e(u7,Zdr),e(N,ecr),e(N,b7),e(b7,p1e),e(p1e,ocr),e(b7,rcr),e(b7,gW),e(gW,tcr),e(b7,acr),e(N,ncr),e(N,v7),e(v7,_1e),e(_1e,scr),e(v7,lcr),e(v7,hW),e(hW,icr),e(v7,dcr),e(N,ccr),e(N,F7),e(F7,u1e),e(u1e,fcr),e(F7,mcr),e(F7,pW),e(pW,gcr),e(F7,hcr),e(N,pcr),e(N,T7),e(T7,b1e),e(b1e,_cr),e(T7,ucr),e(T7,_W),e(_W,bcr),e(T7,vcr),e(N,Fcr),e(N,M7),e(M7,v1e),e(v1e,Tcr),e(M7,Mcr),e(M7,uW),e(uW,Ecr),e(M7,Ccr),e(N,wcr),e(N,E7),e(E7,F1e),e(F1e,Acr),e(E7,ycr),e(E7,bW),e(bW,Lcr),e(E7,xcr),e(N,$cr),e(N,C7),e(C7,T1e),e(T1e,kcr),e(C7,Scr),e(C7,vW),e(vW,Rcr),e(C7,Bcr),e(N,Pcr),e(N,w7),e(w7,M1e),e(M1e,Icr),e(w7,qcr),e(w7,FW),e(FW,Ncr),e(w7,jcr),e(N,Dcr),e(N,A7),e(A7,E1e),e(E1e,Gcr),e(A7,Ocr),e(A7,TW),e(TW,Vcr),e(A7,Xcr),e(N,zcr),e(N,y7),e(y7,C1e),e(C1e,Wcr),e(y7,Qcr),e(y7,MW),e(MW,Hcr),e(y7,Ucr),e(N,Jcr),e(N,L7),e(L7,w1e),e(w1e,Ycr),e(L7,Kcr),e(L7,EW),e(EW,Zcr),e(L7,efr),e(N,ofr),e(N,x7),e(x7,A1e),e(A1e,rfr),e(x7,tfr),e(x7,CW),e(CW,afr),e(x7,nfr),e(N,sfr),e(N,$7),e($7,y1e),e(y1e,lfr),e($7,ifr),e($7,wW),e(wW,dfr),e($7,cfr),e(N,ffr),e(N,k7),e(k7,L1e),e(L1e,mfr),e(k7,gfr),e(k7,AW),e(AW,hfr),e(k7,pfr),e(N,_fr),e(N,S7),e(S7,x1e),e(x1e,ufr),e(S7,bfr),e(S7,yW),e(yW,vfr),e(S7,Ffr),e(N,Tfr),e(N,R7),e(R7,$1e),e($1e,Mfr),e(R7,Efr),e(R7,LW),e(LW,Cfr),e(R7,wfr),e(wr,Afr),M(B7,wr,null),b(f,cNe,u),b(f,Vd,u),e(Vd,P7),e(P7,k1e),M(o8,k1e,null),e(Vd,yfr),e(Vd,S1e),e(S1e,Lfr),b(f,fNe,u),b(f,Ko,u),M(r8,Ko,null),e(Ko,xfr),e(Ko,Xd),e(Xd,$fr),e(Xd,xW),e(xW,kfr),e(Xd,Sfr),e(Xd,$W),e($W,Rfr),e(Xd,Bfr),e(Ko,Pfr),e(Ko,t8),e(t8,Ifr),e(t8,R1e),e(R1e,qfr),e(t8,Nfr),e(Ko,jfr),e(Ko,Lt),M(a8,Lt,null),e(Lt,Dfr),e(Lt,B1e),e(B1e,Gfr),e(Lt,Ofr),e(Lt,zd),e(zd,Vfr),e(zd,P1e),e(P1e,Xfr),e(zd,zfr),e(zd,kW),e(kW,Wfr),e(zd,Qfr),e(Lt,Hfr),M(I7,Lt,null),e(Ko,Ufr),e(Ko,Ar),M(n8,Ar,null),e(Ar,Jfr),e(Ar,I1e),e(I1e,Yfr),e(Ar,Kfr),e(Ar,Za),e(Za,Zfr),e(Za,q1e),e(q1e,emr),e(Za,omr),e(Za,N1e),e(N1e,rmr),e(Za,tmr),e(Za,j1e),e(j1e,amr),e(Za,nmr),e(Ar,smr),e(Ar,se),e(se,q7),e(q7,D1e),e(D1e,lmr),e(q7,imr),e(q7,SW),e(SW,dmr),e(q7,cmr),e(se,fmr),e(se,N7),e(N7,G1e),e(G1e,mmr),e(N7,gmr),e(N7,RW),e(RW,hmr),e(N7,pmr),e(se,_mr),e(se,j7),e(j7,O1e),e(O1e,umr),e(j7,bmr),e(j7,BW),e(BW,vmr),e(j7,Fmr),e(se,Tmr),e(se,D7),e(D7,V1e),e(V1e,Mmr),e(D7,Emr),e(D7,PW),e(PW,Cmr),e(D7,wmr),e(se,Amr),e(se,G7),e(G7,X1e),e(X1e,ymr),e(G7,Lmr),e(G7,IW),e(IW,xmr),e(G7,$mr),e(se,kmr),e(se,O7),e(O7,z1e),e(z1e,Smr),e(O7,Rmr),e(O7,qW),e(qW,Bmr),e(O7,Pmr),e(se,Imr),e(se,V7),e(V7,W1e),e(W1e,qmr),e(V7,Nmr),e(V7,NW),e(NW,jmr),e(V7,Dmr),e(se,Gmr),e(se,X7),e(X7,Q1e),e(Q1e,Omr),e(X7,Vmr),e(X7,jW),e(jW,Xmr),e(X7,zmr),e(se,Wmr),e(se,z7),e(z7,H1e),e(H1e,Qmr),e(z7,Hmr),e(z7,DW),e(DW,Umr),e(z7,Jmr),e(se,Ymr),e(se,W7),e(W7,U1e),e(U1e,Kmr),e(W7,Zmr),e(W7,GW),e(GW,egr),e(W7,ogr),e(se,rgr),e(se,Q7),e(Q7,J1e),e(J1e,tgr),e(Q7,agr),e(Q7,OW),e(OW,ngr),e(Q7,sgr),e(se,lgr),e(se,H7),e(H7,Y1e),e(Y1e,igr),e(H7,dgr),e(H7,VW),e(VW,cgr),e(H7,fgr),e(se,mgr),e(se,U7),e(U7,K1e),e(K1e,ggr),e(U7,hgr),e(U7,XW),e(XW,pgr),e(U7,_gr),e(se,ugr),e(se,J7),e(J7,Z1e),e(Z1e,bgr),e(J7,vgr),e(J7,zW),e(zW,Fgr),e(J7,Tgr),e(se,Mgr),e(se,Y7),e(Y7,ebe),e(ebe,Egr),e(Y7,Cgr),e(Y7,WW),e(WW,wgr),e(Y7,Agr),e(se,ygr),e(se,K7),e(K7,obe),e(obe,Lgr),e(K7,xgr),e(K7,QW),e(QW,$gr),e(K7,kgr),e(se,Sgr),e(se,Z7),e(Z7,rbe),e(rbe,Rgr),e(Z7,Bgr),e(Z7,HW),e(HW,Pgr),e(Z7,Igr),e(se,qgr),e(se,eM),e(eM,tbe),e(tbe,Ngr),e(eM,jgr),e(eM,UW),e(UW,Dgr),e(eM,Ggr),e(se,Ogr),e(se,oM),e(oM,abe),e(abe,Vgr),e(oM,Xgr),e(oM,JW),e(JW,zgr),e(oM,Wgr),e(se,Qgr),e(se,rM),e(rM,nbe),e(nbe,Hgr),e(rM,Ugr),e(rM,YW),e(YW,Jgr),e(rM,Ygr),e(se,Kgr),e(se,tM),e(tM,sbe),e(sbe,Zgr),e(tM,ehr),e(tM,KW),e(KW,ohr),e(tM,rhr),e(se,thr),e(se,aM),e(aM,lbe),e(lbe,ahr),e(aM,nhr),e(aM,ZW),e(ZW,shr),e(aM,lhr),e(se,ihr),e(se,nM),e(nM,ibe),e(ibe,dhr),e(nM,chr),e(nM,eQ),e(eQ,fhr),e(nM,mhr),e(Ar,ghr),M(sM,Ar,null),b(f,mNe,u),b(f,Wd,u),e(Wd,lM),e(lM,dbe),M(s8,dbe,null),e(Wd,hhr),e(Wd,cbe),e(cbe,phr),b(f,gNe,u),b(f,Zo,u),M(l8,Zo,null),e(Zo,_hr),e(Zo,Qd),e(Qd,uhr),e(Qd,oQ),e(oQ,bhr),e(Qd,vhr),e(Qd,rQ),e(rQ,Fhr),e(Qd,Thr),e(Zo,Mhr),e(Zo,i8),e(i8,Ehr),e(i8,fbe),e(fbe,Chr),e(i8,whr),e(Zo,Ahr),e(Zo,xt),M(d8,xt,null),e(xt,yhr),e(xt,mbe),e(mbe,Lhr),e(xt,xhr),e(xt,Hd),e(Hd,$hr),e(Hd,gbe),e(gbe,khr),e(Hd,Shr),e(Hd,tQ),e(tQ,Rhr),e(Hd,Bhr),e(xt,Phr),M(iM,xt,null),e(Zo,Ihr),e(Zo,yr),M(c8,yr,null),e(yr,qhr),e(yr,hbe),e(hbe,Nhr),e(yr,jhr),e(yr,en),e(en,Dhr),e(en,pbe),e(pbe,Ghr),e(en,Ohr),e(en,_be),e(_be,Vhr),e(en,Xhr),e(en,ube),e(ube,zhr),e(en,Whr),e(yr,Qhr),e(yr,Te),e(Te,dM),e(dM,bbe),e(bbe,Hhr),e(dM,Uhr),e(dM,aQ),e(aQ,Jhr),e(dM,Yhr),e(Te,Khr),e(Te,cM),e(cM,vbe),e(vbe,Zhr),e(cM,epr),e(cM,nQ),e(nQ,opr),e(cM,rpr),e(Te,tpr),e(Te,fM),e(fM,Fbe),e(Fbe,apr),e(fM,npr),e(fM,sQ),e(sQ,spr),e(fM,lpr),e(Te,ipr),e(Te,mM),e(mM,Tbe),e(Tbe,dpr),e(mM,cpr),e(mM,lQ),e(lQ,fpr),e(mM,mpr),e(Te,gpr),e(Te,gM),e(gM,Mbe),e(Mbe,hpr),e(gM,ppr),e(gM,iQ),e(iQ,_pr),e(gM,upr),e(Te,bpr),e(Te,hM),e(hM,Ebe),e(Ebe,vpr),e(hM,Fpr),e(hM,dQ),e(dQ,Tpr),e(hM,Mpr),e(Te,Epr),e(Te,pM),e(pM,Cbe),e(Cbe,Cpr),e(pM,wpr),e(pM,cQ),e(cQ,Apr),e(pM,ypr),e(Te,Lpr),e(Te,_M),e(_M,wbe),e(wbe,xpr),e(_M,$pr),e(_M,fQ),e(fQ,kpr),e(_M,Spr),e(Te,Rpr),e(Te,uM),e(uM,Abe),e(Abe,Bpr),e(uM,Ppr),e(uM,mQ),e(mQ,Ipr),e(uM,qpr),e(Te,Npr),e(Te,bM),e(bM,ybe),e(ybe,jpr),e(bM,Dpr),e(bM,gQ),e(gQ,Gpr),e(bM,Opr),e(Te,Vpr),e(Te,vM),e(vM,Lbe),e(Lbe,Xpr),e(vM,zpr),e(vM,hQ),e(hQ,Wpr),e(vM,Qpr),e(Te,Hpr),e(Te,FM),e(FM,xbe),e(xbe,Upr),e(FM,Jpr),e(FM,pQ),e(pQ,Ypr),e(FM,Kpr),e(yr,Zpr),M(TM,yr,null),b(f,hNe,u),b(f,Ud,u),e(Ud,MM),e(MM,$be),M(f8,$be,null),e(Ud,e_r),e(Ud,kbe),e(kbe,o_r),b(f,pNe,u),b(f,er,u),M(m8,er,null),e(er,r_r),e(er,Jd),e(Jd,t_r),e(Jd,_Q),e(_Q,a_r),e(Jd,n_r),e(Jd,uQ),e(uQ,s_r),e(Jd,l_r),e(er,i_r),e(er,g8),e(g8,d_r),e(g8,Sbe),e(Sbe,c_r),e(g8,f_r),e(er,m_r),e(er,$t),M(h8,$t,null),e($t,g_r),e($t,Rbe),e(Rbe,h_r),e($t,p_r),e($t,Yd),e(Yd,__r),e(Yd,Bbe),e(Bbe,u_r),e(Yd,b_r),e(Yd,bQ),e(bQ,v_r),e(Yd,F_r),e($t,T_r),M(EM,$t,null),e(er,M_r),e(er,Lr),M(p8,Lr,null),e(Lr,E_r),e(Lr,Pbe),e(Pbe,C_r),e(Lr,w_r),e(Lr,on),e(on,A_r),e(on,Ibe),e(Ibe,y_r),e(on,L_r),e(on,qbe),e(qbe,x_r),e(on,$_r),e(on,Nbe),e(Nbe,k_r),e(on,S_r),e(Lr,R_r),e(Lr,rn),e(rn,CM),e(CM,jbe),e(jbe,B_r),e(CM,P_r),e(CM,vQ),e(vQ,I_r),e(CM,q_r),e(rn,N_r),e(rn,wM),e(wM,Dbe),e(Dbe,j_r),e(wM,D_r),e(wM,FQ),e(FQ,G_r),e(wM,O_r),e(rn,V_r),e(rn,AM),e(AM,Gbe),e(Gbe,X_r),e(AM,z_r),e(AM,TQ),e(TQ,W_r),e(AM,Q_r),e(rn,H_r),e(rn,yM),e(yM,Obe),e(Obe,U_r),e(yM,J_r),e(yM,MQ),e(MQ,Y_r),e(yM,K_r),e(Lr,Z_r),M(LM,Lr,null),b(f,_Ne,u),b(f,Kd,u),e(Kd,xM),e(xM,Vbe),M(_8,Vbe,null),e(Kd,eur),e(Kd,Xbe),e(Xbe,our),b(f,uNe,u),b(f,or,u),M(u8,or,null),e(or,rur),e(or,Zd),e(Zd,tur),e(Zd,EQ),e(EQ,aur),e(Zd,nur),e(Zd,CQ),e(CQ,sur),e(Zd,lur),e(or,iur),e(or,b8),e(b8,dur),e(b8,zbe),e(zbe,cur),e(b8,fur),e(or,mur),e(or,kt),M(v8,kt,null),e(kt,gur),e(kt,Wbe),e(Wbe,hur),e(kt,pur),e(kt,ec),e(ec,_ur),e(ec,Qbe),e(Qbe,uur),e(ec,bur),e(ec,wQ),e(wQ,vur),e(ec,Fur),e(kt,Tur),M($M,kt,null),e(or,Mur),e(or,xr),M(F8,xr,null),e(xr,Eur),e(xr,Hbe),e(Hbe,Cur),e(xr,wur),e(xr,tn),e(tn,Aur),e(tn,Ube),e(Ube,yur),e(tn,Lur),e(tn,Jbe),e(Jbe,xur),e(tn,$ur),e(tn,Ybe),e(Ybe,kur),e(tn,Sur),e(xr,Rur),e(xr,ie),e(ie,kM),e(kM,Kbe),e(Kbe,Bur),e(kM,Pur),e(kM,AQ),e(AQ,Iur),e(kM,qur),e(ie,Nur),e(ie,SM),e(SM,Zbe),e(Zbe,jur),e(SM,Dur),e(SM,yQ),e(yQ,Gur),e(SM,Our),e(ie,Vur),e(ie,RM),e(RM,eve),e(eve,Xur),e(RM,zur),e(RM,LQ),e(LQ,Wur),e(RM,Qur),e(ie,Hur),e(ie,BM),e(BM,ove),e(ove,Uur),e(BM,Jur),e(BM,xQ),e(xQ,Yur),e(BM,Kur),e(ie,Zur),e(ie,PM),e(PM,rve),e(rve,e2r),e(PM,o2r),e(PM,$Q),e($Q,r2r),e(PM,t2r),e(ie,a2r),e(ie,IM),e(IM,tve),e(tve,n2r),e(IM,s2r),e(IM,kQ),e(kQ,l2r),e(IM,i2r),e(ie,d2r),e(ie,qM),e(qM,ave),e(ave,c2r),e(qM,f2r),e(qM,SQ),e(SQ,m2r),e(qM,g2r),e(ie,h2r),e(ie,NM),e(NM,nve),e(nve,p2r),e(NM,_2r),e(NM,RQ),e(RQ,u2r),e(NM,b2r),e(ie,v2r),e(ie,jM),e(jM,sve),e(sve,F2r),e(jM,T2r),e(jM,BQ),e(BQ,M2r),e(jM,E2r),e(ie,C2r),e(ie,DM),e(DM,lve),e(lve,w2r),e(DM,A2r),e(DM,PQ),e(PQ,y2r),e(DM,L2r),e(ie,x2r),e(ie,GM),e(GM,ive),e(ive,$2r),e(GM,k2r),e(GM,IQ),e(IQ,S2r),e(GM,R2r),e(ie,B2r),e(ie,OM),e(OM,dve),e(dve,P2r),e(OM,I2r),e(OM,qQ),e(qQ,q2r),e(OM,N2r),e(ie,j2r),e(ie,VM),e(VM,cve),e(cve,D2r),e(VM,G2r),e(VM,NQ),e(NQ,O2r),e(VM,V2r),e(ie,X2r),e(ie,XM),e(XM,fve),e(fve,z2r),e(XM,W2r),e(XM,jQ),e(jQ,Q2r),e(XM,H2r),e(ie,U2r),e(ie,zM),e(zM,mve),e(mve,J2r),e(zM,Y2r),e(zM,DQ),e(DQ,K2r),e(zM,Z2r),e(ie,e1r),e(ie,WM),e(WM,gve),e(gve,o1r),e(WM,r1r),e(WM,GQ),e(GQ,t1r),e(WM,a1r),e(ie,n1r),e(ie,QM),e(QM,hve),e(hve,s1r),e(QM,l1r),e(QM,OQ),e(OQ,i1r),e(QM,d1r),e(ie,c1r),e(ie,HM),e(HM,pve),e(pve,f1r),e(HM,m1r),e(HM,VQ),e(VQ,g1r),e(HM,h1r),e(ie,p1r),e(ie,UM),e(UM,_ve),e(_ve,_1r),e(UM,u1r),e(UM,XQ),e(XQ,b1r),e(UM,v1r),e(ie,F1r),e(ie,JM),e(JM,uve),e(uve,T1r),e(JM,M1r),e(JM,zQ),e(zQ,E1r),e(JM,C1r),e(xr,w1r),M(YM,xr,null),b(f,bNe,u),b(f,oc,u),e(oc,KM),e(KM,bve),M(T8,bve,null),e(oc,A1r),e(oc,vve),e(vve,y1r),b(f,vNe,u),b(f,rr,u),M(M8,rr,null),e(rr,L1r),e(rr,rc),e(rc,x1r),e(rc,WQ),e(WQ,$1r),e(rc,k1r),e(rc,QQ),e(QQ,S1r),e(rc,R1r),e(rr,B1r),e(rr,E8),e(E8,P1r),e(E8,Fve),e(Fve,I1r),e(E8,q1r),e(rr,N1r),e(rr,St),M(C8,St,null),e(St,j1r),e(St,Tve),e(Tve,D1r),e(St,G1r),e(St,tc),e(tc,O1r),e(tc,Mve),e(Mve,V1r),e(tc,X1r),e(tc,HQ),e(HQ,z1r),e(tc,W1r),e(St,Q1r),M(ZM,St,null),e(rr,H1r),e(rr,$r),M(w8,$r,null),e($r,U1r),e($r,Eve),e(Eve,J1r),e($r,Y1r),e($r,an),e(an,K1r),e(an,Cve),e(Cve,Z1r),e(an,ebr),e(an,wve),e(wve,obr),e(an,rbr),e(an,Ave),e(Ave,tbr),e(an,abr),e($r,nbr),e($r,ye),e(ye,e4),e(e4,yve),e(yve,sbr),e(e4,lbr),e(e4,UQ),e(UQ,ibr),e(e4,dbr),e(ye,cbr),e(ye,o4),e(o4,Lve),e(Lve,fbr),e(o4,mbr),e(o4,JQ),e(JQ,gbr),e(o4,hbr),e(ye,pbr),e(ye,r4),e(r4,xve),e(xve,_br),e(r4,ubr),e(r4,YQ),e(YQ,bbr),e(r4,vbr),e(ye,Fbr),e(ye,t4),e(t4,$ve),e($ve,Tbr),e(t4,Mbr),e(t4,KQ),e(KQ,Ebr),e(t4,Cbr),e(ye,wbr),e(ye,a4),e(a4,kve),e(kve,Abr),e(a4,ybr),e(a4,ZQ),e(ZQ,Lbr),e(a4,xbr),e(ye,$br),e(ye,n4),e(n4,Sve),e(Sve,kbr),e(n4,Sbr),e(n4,eH),e(eH,Rbr),e(n4,Bbr),e(ye,Pbr),e(ye,s4),e(s4,Rve),e(Rve,Ibr),e(s4,qbr),e(s4,oH),e(oH,Nbr),e(s4,jbr),e(ye,Dbr),e(ye,l4),e(l4,Bve),e(Bve,Gbr),e(l4,Obr),e(l4,rH),e(rH,Vbr),e(l4,Xbr),e(ye,zbr),e(ye,i4),e(i4,Pve),e(Pve,Wbr),e(i4,Qbr),e(i4,tH),e(tH,Hbr),e(i4,Ubr),e(ye,Jbr),e(ye,d4),e(d4,Ive),e(Ive,Ybr),e(d4,Kbr),e(d4,aH),e(aH,Zbr),e(d4,evr),e($r,ovr),M(c4,$r,null),b(f,FNe,u),b(f,ac,u),e(ac,f4),e(f4,qve),M(A8,qve,null),e(ac,rvr),e(ac,Nve),e(Nve,tvr),b(f,TNe,u),b(f,tr,u),M(y8,tr,null),e(tr,avr),e(tr,nc),e(nc,nvr),e(nc,nH),e(nH,svr),e(nc,lvr),e(nc,sH),e(sH,ivr),e(nc,dvr),e(tr,cvr),e(tr,L8),e(L8,fvr),e(L8,jve),e(jve,mvr),e(L8,gvr),e(tr,hvr),e(tr,Rt),M(x8,Rt,null),e(Rt,pvr),e(Rt,Dve),e(Dve,_vr),e(Rt,uvr),e(Rt,sc),e(sc,bvr),e(sc,Gve),e(Gve,vvr),e(sc,Fvr),e(sc,lH),e(lH,Tvr),e(sc,Mvr),e(Rt,Evr),M(m4,Rt,null),e(tr,Cvr),e(tr,kr),M($8,kr,null),e(kr,wvr),e(kr,Ove),e(Ove,Avr),e(kr,yvr),e(kr,nn),e(nn,Lvr),e(nn,Vve),e(Vve,xvr),e(nn,$vr),e(nn,Xve),e(Xve,kvr),e(nn,Svr),e(nn,zve),e(zve,Rvr),e(nn,Bvr),e(kr,Pvr),e(kr,ee),e(ee,g4),e(g4,Wve),e(Wve,Ivr),e(g4,qvr),e(g4,iH),e(iH,Nvr),e(g4,jvr),e(ee,Dvr),e(ee,h4),e(h4,Qve),e(Qve,Gvr),e(h4,Ovr),e(h4,dH),e(dH,Vvr),e(h4,Xvr),e(ee,zvr),e(ee,p4),e(p4,Hve),e(Hve,Wvr),e(p4,Qvr),e(p4,cH),e(cH,Hvr),e(p4,Uvr),e(ee,Jvr),e(ee,_4),e(_4,Uve),e(Uve,Yvr),e(_4,Kvr),e(_4,fH),e(fH,Zvr),e(_4,eFr),e(ee,oFr),e(ee,u4),e(u4,Jve),e(Jve,rFr),e(u4,tFr),e(u4,mH),e(mH,aFr),e(u4,nFr),e(ee,sFr),e(ee,b4),e(b4,Yve),e(Yve,lFr),e(b4,iFr),e(b4,gH),e(gH,dFr),e(b4,cFr),e(ee,fFr),e(ee,v4),e(v4,Kve),e(Kve,mFr),e(v4,gFr),e(v4,hH),e(hH,hFr),e(v4,pFr),e(ee,_Fr),e(ee,F4),e(F4,Zve),e(Zve,uFr),e(F4,bFr),e(F4,pH),e(pH,vFr),e(F4,FFr),e(ee,TFr),e(ee,T4),e(T4,eFe),e(eFe,MFr),e(T4,EFr),e(T4,_H),e(_H,CFr),e(T4,wFr),e(ee,AFr),e(ee,M4),e(M4,oFe),e(oFe,yFr),e(M4,LFr),e(M4,uH),e(uH,xFr),e(M4,$Fr),e(ee,kFr),e(ee,E4),e(E4,rFe),e(rFe,SFr),e(E4,RFr),e(E4,bH),e(bH,BFr),e(E4,PFr),e(ee,IFr),e(ee,C4),e(C4,tFe),e(tFe,qFr),e(C4,NFr),e(C4,vH),e(vH,jFr),e(C4,DFr),e(ee,GFr),e(ee,w4),e(w4,aFe),e(aFe,OFr),e(w4,VFr),e(w4,FH),e(FH,XFr),e(w4,zFr),e(ee,WFr),e(ee,A4),e(A4,nFe),e(nFe,QFr),e(A4,HFr),e(A4,TH),e(TH,UFr),e(A4,JFr),e(ee,YFr),e(ee,y4),e(y4,sFe),e(sFe,KFr),e(y4,ZFr),e(y4,MH),e(MH,e0r),e(y4,o0r),e(ee,r0r),e(ee,L4),e(L4,lFe),e(lFe,t0r),e(L4,a0r),e(L4,EH),e(EH,n0r),e(L4,s0r),e(ee,l0r),e(ee,x4),e(x4,iFe),e(iFe,i0r),e(x4,d0r),e(x4,CH),e(CH,c0r),e(x4,f0r),e(ee,m0r),e(ee,$4),e($4,dFe),e(dFe,g0r),e($4,h0r),e($4,wH),e(wH,p0r),e($4,_0r),e(ee,u0r),e(ee,k4),e(k4,cFe),e(cFe,b0r),e(k4,v0r),e(k4,AH),e(AH,F0r),e(k4,T0r),e(ee,M0r),e(ee,S4),e(S4,fFe),e(fFe,E0r),e(S4,C0r),e(S4,yH),e(yH,w0r),e(S4,A0r),e(ee,y0r),e(ee,R4),e(R4,mFe),e(mFe,L0r),e(R4,x0r),e(R4,LH),e(LH,$0r),e(R4,k0r),e(ee,S0r),e(ee,B4),e(B4,gFe),e(gFe,R0r),e(B4,B0r),e(B4,xH),e(xH,P0r),e(B4,I0r),e(ee,q0r),e(ee,P4),e(P4,hFe),e(hFe,N0r),e(P4,j0r),e(P4,$H),e($H,D0r),e(P4,G0r),e(ee,O0r),e(ee,I4),e(I4,pFe),e(pFe,V0r),e(I4,X0r),e(I4,kH),e(kH,z0r),e(I4,W0r),e(ee,Q0r),e(ee,q4),e(q4,_Fe),e(_Fe,H0r),e(q4,U0r),e(q4,SH),e(SH,J0r),e(q4,Y0r),e(ee,K0r),e(ee,N4),e(N4,uFe),e(uFe,Z0r),e(N4,eTr),e(N4,RH),e(RH,oTr),e(N4,rTr),e(kr,tTr),M(j4,kr,null),b(f,MNe,u),b(f,lc,u),e(lc,D4),e(D4,bFe),M(k8,bFe,null),e(lc,aTr),e(lc,vFe),e(vFe,nTr),b(f,ENe,u),b(f,ar,u),M(S8,ar,null),e(ar,sTr),e(ar,ic),e(ic,lTr),e(ic,BH),e(BH,iTr),e(ic,dTr),e(ic,PH),e(PH,cTr),e(ic,fTr),e(ar,mTr),e(ar,R8),e(R8,gTr),e(R8,FFe),e(FFe,hTr),e(R8,pTr),e(ar,_Tr),e(ar,Bt),M(B8,Bt,null),e(Bt,uTr),e(Bt,TFe),e(TFe,bTr),e(Bt,vTr),e(Bt,dc),e(dc,FTr),e(dc,MFe),e(MFe,TTr),e(dc,MTr),e(dc,IH),e(IH,ETr),e(dc,CTr),e(Bt,wTr),M(G4,Bt,null),e(ar,ATr),e(ar,Sr),M(P8,Sr,null),e(Sr,yTr),e(Sr,EFe),e(EFe,LTr),e(Sr,xTr),e(Sr,sn),e(sn,$Tr),e(sn,CFe),e(CFe,kTr),e(sn,STr),e(sn,wFe),e(wFe,RTr),e(sn,BTr),e(sn,AFe),e(AFe,PTr),e(sn,ITr),e(Sr,qTr),e(Sr,he),e(he,O4),e(O4,yFe),e(yFe,NTr),e(O4,jTr),e(O4,qH),e(qH,DTr),e(O4,GTr),e(he,OTr),e(he,V4),e(V4,LFe),e(LFe,VTr),e(V4,XTr),e(V4,NH),e(NH,zTr),e(V4,WTr),e(he,QTr),e(he,X4),e(X4,xFe),e(xFe,HTr),e(X4,UTr),e(X4,jH),e(jH,JTr),e(X4,YTr),e(he,KTr),e(he,z4),e(z4,$Fe),e($Fe,ZTr),e(z4,e7r),e(z4,DH),e(DH,o7r),e(z4,r7r),e(he,t7r),e(he,W4),e(W4,kFe),e(kFe,a7r),e(W4,n7r),e(W4,GH),e(GH,s7r),e(W4,l7r),e(he,i7r),e(he,Q4),e(Q4,SFe),e(SFe,d7r),e(Q4,c7r),e(Q4,OH),e(OH,f7r),e(Q4,m7r),e(he,g7r),e(he,H4),e(H4,RFe),e(RFe,h7r),e(H4,p7r),e(H4,VH),e(VH,_7r),e(H4,u7r),e(he,b7r),e(he,U4),e(U4,BFe),e(BFe,v7r),e(U4,F7r),e(U4,XH),e(XH,T7r),e(U4,M7r),e(he,E7r),e(he,J4),e(J4,PFe),e(PFe,C7r),e(J4,w7r),e(J4,zH),e(zH,A7r),e(J4,y7r),e(he,L7r),e(he,Y4),e(Y4,IFe),e(IFe,x7r),e(Y4,$7r),e(Y4,WH),e(WH,k7r),e(Y4,S7r),e(he,R7r),e(he,K4),e(K4,qFe),e(qFe,B7r),e(K4,P7r),e(K4,QH),e(QH,I7r),e(K4,q7r),e(he,N7r),e(he,Z4),e(Z4,NFe),e(NFe,j7r),e(Z4,D7r),e(Z4,HH),e(HH,G7r),e(Z4,O7r),e(he,V7r),e(he,eE),e(eE,jFe),e(jFe,X7r),e(eE,z7r),e(eE,UH),e(UH,W7r),e(eE,Q7r),e(he,H7r),e(he,oE),e(oE,DFe),e(DFe,U7r),e(oE,J7r),e(oE,JH),e(JH,Y7r),e(oE,K7r),e(he,Z7r),e(he,rE),e(rE,GFe),e(GFe,eMr),e(rE,oMr),e(rE,YH),e(YH,rMr),e(rE,tMr),e(he,aMr),e(he,tE),e(tE,OFe),e(OFe,nMr),e(tE,sMr),e(tE,KH),e(KH,lMr),e(tE,iMr),e(he,dMr),e(he,aE),e(aE,VFe),e(VFe,cMr),e(aE,fMr),e(aE,ZH),e(ZH,mMr),e(aE,gMr),e(Sr,hMr),M(nE,Sr,null),b(f,CNe,u),b(f,cc,u),e(cc,sE),e(sE,XFe),M(I8,XFe,null),e(cc,pMr),e(cc,zFe),e(zFe,_Mr),b(f,wNe,u),b(f,nr,u),M(q8,nr,null),e(nr,uMr),e(nr,fc),e(fc,bMr),e(fc,eU),e(eU,vMr),e(fc,FMr),e(fc,oU),e(oU,TMr),e(fc,MMr),e(nr,EMr),e(nr,N8),e(N8,CMr),e(N8,WFe),e(WFe,wMr),e(N8,AMr),e(nr,yMr),e(nr,Pt),M(j8,Pt,null),e(Pt,LMr),e(Pt,QFe),e(QFe,xMr),e(Pt,$Mr),e(Pt,mc),e(mc,kMr),e(mc,HFe),e(HFe,SMr),e(mc,RMr),e(mc,rU),e(rU,BMr),e(mc,PMr),e(Pt,IMr),M(lE,Pt,null),e(nr,qMr),e(nr,Rr),M(D8,Rr,null),e(Rr,NMr),e(Rr,UFe),e(UFe,jMr),e(Rr,DMr),e(Rr,ln),e(ln,GMr),e(ln,JFe),e(JFe,OMr),e(ln,VMr),e(ln,YFe),e(YFe,XMr),e(ln,zMr),e(ln,KFe),e(KFe,WMr),e(ln,QMr),e(Rr,HMr),e(Rr,G8),e(G8,iE),e(iE,ZFe),e(ZFe,UMr),e(iE,JMr),e(iE,tU),e(tU,YMr),e(iE,KMr),e(G8,ZMr),e(G8,dE),e(dE,e0e),e(e0e,e4r),e(dE,o4r),e(dE,aU),e(aU,r4r),e(dE,t4r),e(Rr,a4r),M(cE,Rr,null),b(f,ANe,u),b(f,gc,u),e(gc,fE),e(fE,o0e),M(O8,o0e,null),e(gc,n4r),e(gc,r0e),e(r0e,s4r),b(f,yNe,u),b(f,sr,u),M(V8,sr,null),e(sr,l4r),e(sr,hc),e(hc,i4r),e(hc,nU),e(nU,d4r),e(hc,c4r),e(hc,sU),e(sU,f4r),e(hc,m4r),e(sr,g4r),e(sr,X8),e(X8,h4r),e(X8,t0e),e(t0e,p4r),e(X8,_4r),e(sr,u4r),e(sr,It),M(z8,It,null),e(It,b4r),e(It,a0e),e(a0e,v4r),e(It,F4r),e(It,pc),e(pc,T4r),e(pc,n0e),e(n0e,M4r),e(pc,E4r),e(pc,lU),e(lU,C4r),e(pc,w4r),e(It,A4r),M(mE,It,null),e(sr,y4r),e(sr,Br),M(W8,Br,null),e(Br,L4r),e(Br,s0e),e(s0e,x4r),e(Br,$4r),e(Br,dn),e(dn,k4r),e(dn,l0e),e(l0e,S4r),e(dn,R4r),e(dn,i0e),e(i0e,B4r),e(dn,P4r),e(dn,d0e),e(d0e,I4r),e(dn,q4r),e(Br,N4r),e(Br,c0e),e(c0e,gE),e(gE,f0e),e(f0e,j4r),e(gE,D4r),e(gE,iU),e(iU,G4r),e(gE,O4r),e(Br,V4r),M(hE,Br,null),b(f,LNe,u),b(f,_c,u),e(_c,pE),e(pE,m0e),M(Q8,m0e,null),e(_c,X4r),e(_c,g0e),e(g0e,z4r),b(f,xNe,u),b(f,lr,u),M(H8,lr,null),e(lr,W4r),e(lr,uc),e(uc,Q4r),e(uc,dU),e(dU,H4r),e(uc,U4r),e(uc,cU),e(cU,J4r),e(uc,Y4r),e(lr,K4r),e(lr,U8),e(U8,Z4r),e(U8,h0e),e(h0e,eEr),e(U8,oEr),e(lr,rEr),e(lr,qt),M(J8,qt,null),e(qt,tEr),e(qt,p0e),e(p0e,aEr),e(qt,nEr),e(qt,bc),e(bc,sEr),e(bc,_0e),e(_0e,lEr),e(bc,iEr),e(bc,fU),e(fU,dEr),e(bc,cEr),e(qt,fEr),M(_E,qt,null),e(lr,mEr),e(lr,Pr),M(Y8,Pr,null),e(Pr,gEr),e(Pr,u0e),e(u0e,hEr),e(Pr,pEr),e(Pr,cn),e(cn,_Er),e(cn,b0e),e(b0e,uEr),e(cn,bEr),e(cn,v0e),e(v0e,vEr),e(cn,FEr),e(cn,F0e),e(F0e,TEr),e(cn,MEr),e(Pr,EEr),e(Pr,de),e(de,uE),e(uE,T0e),e(T0e,CEr),e(uE,wEr),e(uE,mU),e(mU,AEr),e(uE,yEr),e(de,LEr),e(de,bE),e(bE,M0e),e(M0e,xEr),e(bE,$Er),e(bE,gU),e(gU,kEr),e(bE,SEr),e(de,REr),e(de,vE),e(vE,E0e),e(E0e,BEr),e(vE,PEr),e(vE,hU),e(hU,IEr),e(vE,qEr),e(de,NEr),e(de,FE),e(FE,C0e),e(C0e,jEr),e(FE,DEr),e(FE,pU),e(pU,GEr),e(FE,OEr),e(de,VEr),e(de,TE),e(TE,w0e),e(w0e,XEr),e(TE,zEr),e(TE,_U),e(_U,WEr),e(TE,QEr),e(de,HEr),e(de,ME),e(ME,A0e),e(A0e,UEr),e(ME,JEr),e(ME,uU),e(uU,YEr),e(ME,KEr),e(de,ZEr),e(de,EE),e(EE,y0e),e(y0e,eCr),e(EE,oCr),e(EE,bU),e(bU,rCr),e(EE,tCr),e(de,aCr),e(de,CE),e(CE,L0e),e(L0e,nCr),e(CE,sCr),e(CE,vU),e(vU,lCr),e(CE,iCr),e(de,dCr),e(de,wE),e(wE,x0e),e(x0e,cCr),e(wE,fCr),e(wE,FU),e(FU,mCr),e(wE,gCr),e(de,hCr),e(de,AE),e(AE,$0e),e($0e,pCr),e(AE,_Cr),e(AE,TU),e(TU,uCr),e(AE,bCr),e(de,vCr),e(de,yE),e(yE,k0e),e(k0e,FCr),e(yE,TCr),e(yE,MU),e(MU,MCr),e(yE,ECr),e(de,CCr),e(de,LE),e(LE,S0e),e(S0e,wCr),e(LE,ACr),e(LE,EU),e(EU,yCr),e(LE,LCr),e(de,xCr),e(de,xE),e(xE,R0e),e(R0e,$Cr),e(xE,kCr),e(xE,CU),e(CU,SCr),e(xE,RCr),e(de,BCr),e(de,$E),e($E,B0e),e(B0e,PCr),e($E,ICr),e($E,wU),e(wU,qCr),e($E,NCr),e(de,jCr),e(de,kE),e(kE,P0e),e(P0e,DCr),e(kE,GCr),e(kE,AU),e(AU,OCr),e(kE,VCr),e(de,XCr),e(de,SE),e(SE,I0e),e(I0e,zCr),e(SE,WCr),e(SE,yU),e(yU,QCr),e(SE,HCr),e(de,UCr),e(de,RE),e(RE,q0e),e(q0e,JCr),e(RE,YCr),e(RE,LU),e(LU,KCr),e(RE,ZCr),e(de,e5r),e(de,BE),e(BE,N0e),e(N0e,o5r),e(BE,r5r),e(BE,xU),e(xU,t5r),e(BE,a5r),e(de,n5r),e(de,PE),e(PE,j0e),e(j0e,s5r),e(PE,l5r),e(PE,$U),e($U,i5r),e(PE,d5r),e(de,c5r),e(de,IE),e(IE,D0e),e(D0e,f5r),e(IE,m5r),e(IE,kU),e(kU,g5r),e(IE,h5r),e(Pr,p5r),M(qE,Pr,null),b(f,$Ne,u),b(f,vc,u),e(vc,NE),e(NE,G0e),M(K8,G0e,null),e(vc,_5r),e(vc,O0e),e(O0e,u5r),b(f,kNe,u),b(f,ir,u),M(Z8,ir,null),e(ir,b5r),e(ir,Fc),e(Fc,v5r),e(Fc,SU),e(SU,F5r),e(Fc,T5r),e(Fc,RU),e(RU,M5r),e(Fc,E5r),e(ir,C5r),e(ir,e9),e(e9,w5r),e(e9,V0e),e(V0e,A5r),e(e9,y5r),e(ir,L5r),e(ir,Nt),M(o9,Nt,null),e(Nt,x5r),e(Nt,X0e),e(X0e,$5r),e(Nt,k5r),e(Nt,Tc),e(Tc,S5r),e(Tc,z0e),e(z0e,R5r),e(Tc,B5r),e(Tc,BU),e(BU,P5r),e(Tc,I5r),e(Nt,q5r),M(jE,Nt,null),e(ir,N5r),e(ir,Ir),M(r9,Ir,null),e(Ir,j5r),e(Ir,W0e),e(W0e,D5r),e(Ir,G5r),e(Ir,fn),e(fn,O5r),e(fn,Q0e),e(Q0e,V5r),e(fn,X5r),e(fn,H0e),e(H0e,z5r),e(fn,W5r),e(fn,U0e),e(U0e,Q5r),e(fn,H5r),e(Ir,U5r),e(Ir,ce),e(ce,DE),e(DE,J0e),e(J0e,J5r),e(DE,Y5r),e(DE,PU),e(PU,K5r),e(DE,Z5r),e(ce,e3r),e(ce,GE),e(GE,Y0e),e(Y0e,o3r),e(GE,r3r),e(GE,IU),e(IU,t3r),e(GE,a3r),e(ce,n3r),e(ce,OE),e(OE,K0e),e(K0e,s3r),e(OE,l3r),e(OE,qU),e(qU,i3r),e(OE,d3r),e(ce,c3r),e(ce,VE),e(VE,Z0e),e(Z0e,f3r),e(VE,m3r),e(VE,NU),e(NU,g3r),e(VE,h3r),e(ce,p3r),e(ce,XE),e(XE,eTe),e(eTe,_3r),e(XE,u3r),e(XE,jU),e(jU,b3r),e(XE,v3r),e(ce,F3r),e(ce,zE),e(zE,oTe),e(oTe,T3r),e(zE,M3r),e(zE,DU),e(DU,E3r),e(zE,C3r),e(ce,w3r),e(ce,WE),e(WE,rTe),e(rTe,A3r),e(WE,y3r),e(WE,GU),e(GU,L3r),e(WE,x3r),e(ce,$3r),e(ce,QE),e(QE,tTe),e(tTe,k3r),e(QE,S3r),e(QE,OU),e(OU,R3r),e(QE,B3r),e(ce,P3r),e(ce,HE),e(HE,aTe),e(aTe,I3r),e(HE,q3r),e(HE,VU),e(VU,N3r),e(HE,j3r),e(ce,D3r),e(ce,UE),e(UE,nTe),e(nTe,G3r),e(UE,O3r),e(UE,XU),e(XU,V3r),e(UE,X3r),e(ce,z3r),e(ce,JE),e(JE,sTe),e(sTe,W3r),e(JE,Q3r),e(JE,zU),e(zU,H3r),e(JE,U3r),e(ce,J3r),e(ce,YE),e(YE,lTe),e(lTe,Y3r),e(YE,K3r),e(YE,WU),e(WU,Z3r),e(YE,ewr),e(ce,owr),e(ce,KE),e(KE,iTe),e(iTe,rwr),e(KE,twr),e(KE,QU),e(QU,awr),e(KE,nwr),e(ce,swr),e(ce,ZE),e(ZE,dTe),e(dTe,lwr),e(ZE,iwr),e(ZE,HU),e(HU,dwr),e(ZE,cwr),e(ce,fwr),e(ce,eC),e(eC,cTe),e(cTe,mwr),e(eC,gwr),e(eC,UU),e(UU,hwr),e(eC,pwr),e(ce,_wr),e(ce,oC),e(oC,fTe),e(fTe,uwr),e(oC,bwr),e(oC,JU),e(JU,vwr),e(oC,Fwr),e(ce,Twr),e(ce,rC),e(rC,mTe),e(mTe,Mwr),e(rC,Ewr),e(rC,YU),e(YU,Cwr),e(rC,wwr),e(ce,Awr),e(ce,tC),e(tC,gTe),e(gTe,ywr),e(tC,Lwr),e(tC,KU),e(KU,xwr),e(tC,$wr),e(ce,kwr),e(ce,aC),e(aC,hTe),e(hTe,Swr),e(aC,Rwr),e(aC,ZU),e(ZU,Bwr),e(aC,Pwr),e(ce,Iwr),e(ce,nC),e(nC,pTe),e(pTe,qwr),e(nC,Nwr),e(nC,eJ),e(eJ,jwr),e(nC,Dwr),e(Ir,Gwr),M(sC,Ir,null),b(f,SNe,u),b(f,Mc,u),e(Mc,lC),e(lC,_Te),M(t9,_Te,null),e(Mc,Owr),e(Mc,uTe),e(uTe,Vwr),b(f,RNe,u),b(f,dr,u),M(a9,dr,null),e(dr,Xwr),e(dr,Ec),e(Ec,zwr),e(Ec,oJ),e(oJ,Wwr),e(Ec,Qwr),e(Ec,rJ),e(rJ,Hwr),e(Ec,Uwr),e(dr,Jwr),e(dr,n9),e(n9,Ywr),e(n9,bTe),e(bTe,Kwr),e(n9,Zwr),e(dr,eAr),e(dr,jt),M(s9,jt,null),e(jt,oAr),e(jt,vTe),e(vTe,rAr),e(jt,tAr),e(jt,Cc),e(Cc,aAr),e(Cc,FTe),e(FTe,nAr),e(Cc,sAr),e(Cc,tJ),e(tJ,lAr),e(Cc,iAr),e(jt,dAr),M(iC,jt,null),e(dr,cAr),e(dr,qr),M(l9,qr,null),e(qr,fAr),e(qr,TTe),e(TTe,mAr),e(qr,gAr),e(qr,mn),e(mn,hAr),e(mn,MTe),e(MTe,pAr),e(mn,_Ar),e(mn,ETe),e(ETe,uAr),e(mn,bAr),e(mn,CTe),e(CTe,vAr),e(mn,FAr),e(qr,TAr),e(qr,wTe),e(wTe,dC),e(dC,ATe),e(ATe,MAr),e(dC,EAr),e(dC,aJ),e(aJ,CAr),e(dC,wAr),e(qr,AAr),M(cC,qr,null),b(f,BNe,u),b(f,wc,u),e(wc,fC),e(fC,yTe),M(i9,yTe,null),e(wc,yAr),e(wc,LTe),e(LTe,LAr),b(f,PNe,u),b(f,cr,u),M(d9,cr,null),e(cr,xAr),e(cr,Ac),e(Ac,$Ar),e(Ac,nJ),e(nJ,kAr),e(Ac,SAr),e(Ac,sJ),e(sJ,RAr),e(Ac,BAr),e(cr,PAr),e(cr,c9),e(c9,IAr),e(c9,xTe),e(xTe,qAr),e(c9,NAr),e(cr,jAr),e(cr,Dt),M(f9,Dt,null),e(Dt,DAr),e(Dt,$Te),e($Te,GAr),e(Dt,OAr),e(Dt,yc),e(yc,VAr),e(yc,kTe),e(kTe,XAr),e(yc,zAr),e(yc,lJ),e(lJ,WAr),e(yc,QAr),e(Dt,HAr),M(mC,Dt,null),e(cr,UAr),e(cr,Nr),M(m9,Nr,null),e(Nr,JAr),e(Nr,STe),e(STe,YAr),e(Nr,KAr),e(Nr,gn),e(gn,ZAr),e(gn,RTe),e(RTe,e6r),e(gn,o6r),e(gn,BTe),e(BTe,r6r),e(gn,t6r),e(gn,PTe),e(PTe,a6r),e(gn,n6r),e(Nr,s6r),e(Nr,ITe),e(ITe,gC),e(gC,qTe),e(qTe,l6r),e(gC,i6r),e(gC,iJ),e(iJ,d6r),e(gC,c6r),e(Nr,f6r),M(hC,Nr,null),b(f,INe,u),b(f,Lc,u),e(Lc,pC),e(pC,NTe),M(g9,NTe,null),e(Lc,m6r),e(Lc,jTe),e(jTe,g6r),b(f,qNe,u),b(f,fr,u),M(h9,fr,null),e(fr,h6r),e(fr,xc),e(xc,p6r),e(xc,dJ),e(dJ,_6r),e(xc,u6r),e(xc,cJ),e(cJ,b6r),e(xc,v6r),e(fr,F6r),e(fr,p9),e(p9,T6r),e(p9,DTe),e(DTe,M6r),e(p9,E6r),e(fr,C6r),e(fr,Gt),M(_9,Gt,null),e(Gt,w6r),e(Gt,GTe),e(GTe,A6r),e(Gt,y6r),e(Gt,$c),e($c,L6r),e($c,OTe),e(OTe,x6r),e($c,$6r),e($c,fJ),e(fJ,k6r),e($c,S6r),e(Gt,R6r),M(_C,Gt,null),e(fr,B6r),e(fr,jr),M(u9,jr,null),e(jr,P6r),e(jr,VTe),e(VTe,I6r),e(jr,q6r),e(jr,hn),e(hn,N6r),e(hn,XTe),e(XTe,j6r),e(hn,D6r),e(hn,zTe),e(zTe,G6r),e(hn,O6r),e(hn,WTe),e(WTe,V6r),e(hn,X6r),e(jr,z6r),e(jr,re),e(re,uC),e(uC,QTe),e(QTe,W6r),e(uC,Q6r),e(uC,mJ),e(mJ,H6r),e(uC,U6r),e(re,J6r),e(re,bC),e(bC,HTe),e(HTe,Y6r),e(bC,K6r),e(bC,gJ),e(gJ,Z6r),e(bC,eyr),e(re,oyr),e(re,vC),e(vC,UTe),e(UTe,ryr),e(vC,tyr),e(vC,hJ),e(hJ,ayr),e(vC,nyr),e(re,syr),e(re,FC),e(FC,JTe),e(JTe,lyr),e(FC,iyr),e(FC,pJ),e(pJ,dyr),e(FC,cyr),e(re,fyr),e(re,TC),e(TC,YTe),e(YTe,myr),e(TC,gyr),e(TC,_J),e(_J,hyr),e(TC,pyr),e(re,_yr),e(re,MC),e(MC,KTe),e(KTe,uyr),e(MC,byr),e(MC,uJ),e(uJ,vyr),e(MC,Fyr),e(re,Tyr),e(re,EC),e(EC,ZTe),e(ZTe,Myr),e(EC,Eyr),e(EC,bJ),e(bJ,Cyr),e(EC,wyr),e(re,Ayr),e(re,CC),e(CC,e7e),e(e7e,yyr),e(CC,Lyr),e(CC,vJ),e(vJ,xyr),e(CC,$yr),e(re,kyr),e(re,wC),e(wC,o7e),e(o7e,Syr),e(wC,Ryr),e(wC,FJ),e(FJ,Byr),e(wC,Pyr),e(re,Iyr),e(re,AC),e(AC,r7e),e(r7e,qyr),e(AC,Nyr),e(AC,TJ),e(TJ,jyr),e(AC,Dyr),e(re,Gyr),e(re,yC),e(yC,t7e),e(t7e,Oyr),e(yC,Vyr),e(yC,MJ),e(MJ,Xyr),e(yC,zyr),e(re,Wyr),e(re,LC),e(LC,a7e),e(a7e,Qyr),e(LC,Hyr),e(LC,EJ),e(EJ,Uyr),e(LC,Jyr),e(re,Yyr),e(re,xC),e(xC,n7e),e(n7e,Kyr),e(xC,Zyr),e(xC,CJ),e(CJ,eLr),e(xC,oLr),e(re,rLr),e(re,$C),e($C,s7e),e(s7e,tLr),e($C,aLr),e($C,wJ),e(wJ,nLr),e($C,sLr),e(re,lLr),e(re,kC),e(kC,l7e),e(l7e,iLr),e(kC,dLr),e(kC,AJ),e(AJ,cLr),e(kC,fLr),e(re,mLr),e(re,SC),e(SC,i7e),e(i7e,gLr),e(SC,hLr),e(SC,yJ),e(yJ,pLr),e(SC,_Lr),e(re,uLr),e(re,RC),e(RC,d7e),e(d7e,bLr),e(RC,vLr),e(RC,LJ),e(LJ,FLr),e(RC,TLr),e(re,MLr),e(re,BC),e(BC,c7e),e(c7e,ELr),e(BC,CLr),e(BC,xJ),e(xJ,wLr),e(BC,ALr),e(re,yLr),e(re,PC),e(PC,f7e),e(f7e,LLr),e(PC,xLr),e(PC,$J),e($J,$Lr),e(PC,kLr),e(re,SLr),e(re,IC),e(IC,m7e),e(m7e,RLr),e(IC,BLr),e(IC,kJ),e(kJ,PLr),e(IC,ILr),e(re,qLr),e(re,qC),e(qC,g7e),e(g7e,NLr),e(qC,jLr),e(qC,SJ),e(SJ,DLr),e(qC,GLr),e(re,OLr),e(re,NC),e(NC,h7e),e(h7e,VLr),e(NC,XLr),e(NC,RJ),e(RJ,zLr),e(NC,WLr),e(re,QLr),e(re,jC),e(jC,p7e),e(p7e,HLr),e(jC,ULr),e(jC,BJ),e(BJ,JLr),e(jC,YLr),e(re,KLr),e(re,DC),e(DC,_7e),e(_7e,ZLr),e(DC,e8r),e(DC,PJ),e(PJ,o8r),e(DC,r8r),e(re,t8r),e(re,GC),e(GC,u7e),e(u7e,a8r),e(GC,n8r),e(GC,IJ),e(IJ,s8r),e(GC,l8r),e(jr,i8r),M(OC,jr,null),b(f,NNe,u),b(f,kc,u),e(kc,VC),e(VC,b7e),M(b9,b7e,null),e(kc,d8r),e(kc,v7e),e(v7e,c8r),b(f,jNe,u),b(f,mr,u),M(v9,mr,null),e(mr,f8r),e(mr,Sc),e(Sc,m8r),e(Sc,qJ),e(qJ,g8r),e(Sc,h8r),e(Sc,NJ),e(NJ,p8r),e(Sc,_8r),e(mr,u8r),e(mr,F9),e(F9,b8r),e(F9,F7e),e(F7e,v8r),e(F9,F8r),e(mr,T8r),e(mr,Ot),M(T9,Ot,null),e(Ot,M8r),e(Ot,T7e),e(T7e,E8r),e(Ot,C8r),e(Ot,Rc),e(Rc,w8r),e(Rc,M7e),e(M7e,A8r),e(Rc,y8r),e(Rc,jJ),e(jJ,L8r),e(Rc,x8r),e(Ot,$8r),M(XC,Ot,null),e(mr,k8r),e(mr,Dr),M(M9,Dr,null),e(Dr,S8r),e(Dr,E7e),e(E7e,R8r),e(Dr,B8r),e(Dr,pn),e(pn,P8r),e(pn,C7e),e(C7e,I8r),e(pn,q8r),e(pn,w7e),e(w7e,N8r),e(pn,j8r),e(pn,A7e),e(A7e,D8r),e(pn,G8r),e(Dr,O8r),e(Dr,Re),e(Re,zC),e(zC,y7e),e(y7e,V8r),e(zC,X8r),e(zC,DJ),e(DJ,z8r),e(zC,W8r),e(Re,Q8r),e(Re,WC),e(WC,L7e),e(L7e,H8r),e(WC,U8r),e(WC,GJ),e(GJ,J8r),e(WC,Y8r),e(Re,K8r),e(Re,QC),e(QC,x7e),e(x7e,Z8r),e(QC,e9r),e(QC,OJ),e(OJ,o9r),e(QC,r9r),e(Re,t9r),e(Re,HC),e(HC,$7e),e($7e,a9r),e(HC,n9r),e(HC,VJ),e(VJ,s9r),e(HC,l9r),e(Re,i9r),e(Re,UC),e(UC,k7e),e(k7e,d9r),e(UC,c9r),e(UC,XJ),e(XJ,f9r),e(UC,m9r),e(Re,g9r),e(Re,JC),e(JC,S7e),e(S7e,h9r),e(JC,p9r),e(JC,zJ),e(zJ,_9r),e(JC,u9r),e(Re,b9r),e(Re,YC),e(YC,R7e),e(R7e,v9r),e(YC,F9r),e(YC,WJ),e(WJ,T9r),e(YC,M9r),e(Re,E9r),e(Re,KC),e(KC,B7e),e(B7e,C9r),e(KC,w9r),e(KC,QJ),e(QJ,A9r),e(KC,y9r),e(Re,L9r),e(Re,ZC),e(ZC,P7e),e(P7e,x9r),e(ZC,$9r),e(ZC,HJ),e(HJ,k9r),e(ZC,S9r),e(Dr,R9r),M(e5,Dr,null),b(f,DNe,u),b(f,Bc,u),e(Bc,o5),e(o5,I7e),M(E9,I7e,null),e(Bc,B9r),e(Bc,q7e),e(q7e,P9r),b(f,GNe,u),b(f,gr,u),M(C9,gr,null),e(gr,I9r),e(gr,Pc),e(Pc,q9r),e(Pc,UJ),e(UJ,N9r),e(Pc,j9r),e(Pc,JJ),e(JJ,D9r),e(Pc,G9r),e(gr,O9r),e(gr,w9),e(w9,V9r),e(w9,N7e),e(N7e,X9r),e(w9,z9r),e(gr,W9r),e(gr,Vt),M(A9,Vt,null),e(Vt,Q9r),e(Vt,j7e),e(j7e,H9r),e(Vt,U9r),e(Vt,Ic),e(Ic,J9r),e(Ic,D7e),e(D7e,Y9r),e(Ic,K9r),e(Ic,YJ),e(YJ,Z9r),e(Ic,exr),e(Vt,oxr),M(r5,Vt,null),e(gr,rxr),e(gr,Gr),M(y9,Gr,null),e(Gr,txr),e(Gr,G7e),e(G7e,axr),e(Gr,nxr),e(Gr,_n),e(_n,sxr),e(_n,O7e),e(O7e,lxr),e(_n,ixr),e(_n,V7e),e(V7e,dxr),e(_n,cxr),e(_n,X7e),e(X7e,fxr),e(_n,mxr),e(Gr,gxr),e(Gr,Me),e(Me,t5),e(t5,z7e),e(z7e,hxr),e(t5,pxr),e(t5,KJ),e(KJ,_xr),e(t5,uxr),e(Me,bxr),e(Me,a5),e(a5,W7e),e(W7e,vxr),e(a5,Fxr),e(a5,ZJ),e(ZJ,Txr),e(a5,Mxr),e(Me,Exr),e(Me,n5),e(n5,Q7e),e(Q7e,Cxr),e(n5,wxr),e(n5,eY),e(eY,Axr),e(n5,yxr),e(Me,Lxr),e(Me,s5),e(s5,H7e),e(H7e,xxr),e(s5,$xr),e(s5,oY),e(oY,kxr),e(s5,Sxr),e(Me,Rxr),e(Me,l5),e(l5,U7e),e(U7e,Bxr),e(l5,Pxr),e(l5,rY),e(rY,Ixr),e(l5,qxr),e(Me,Nxr),e(Me,i5),e(i5,J7e),e(J7e,jxr),e(i5,Dxr),e(i5,tY),e(tY,Gxr),e(i5,Oxr),e(Me,Vxr),e(Me,d5),e(d5,Y7e),e(Y7e,Xxr),e(d5,zxr),e(d5,aY),e(aY,Wxr),e(d5,Qxr),e(Me,Hxr),e(Me,c5),e(c5,K7e),e(K7e,Uxr),e(c5,Jxr),e(c5,nY),e(nY,Yxr),e(c5,Kxr),e(Me,Zxr),e(Me,f5),e(f5,Z7e),e(Z7e,e$r),e(f5,o$r),e(f5,sY),e(sY,r$r),e(f5,t$r),e(Me,a$r),e(Me,m5),e(m5,eMe),e(eMe,n$r),e(m5,s$r),e(m5,lY),e(lY,l$r),e(m5,i$r),e(Me,d$r),e(Me,g5),e(g5,oMe),e(oMe,c$r),e(g5,f$r),e(g5,iY),e(iY,m$r),e(g5,g$r),e(Me,h$r),e(Me,h5),e(h5,rMe),e(rMe,p$r),e(h5,_$r),e(h5,dY),e(dY,u$r),e(h5,b$r),e(Gr,v$r),M(p5,Gr,null),b(f,ONe,u),b(f,qc,u),e(qc,_5),e(_5,tMe),M(L9,tMe,null),e(qc,F$r),e(qc,aMe),e(aMe,T$r),b(f,VNe,u),b(f,hr,u),M(x9,hr,null),e(hr,M$r),e(hr,Nc),e(Nc,E$r),e(Nc,cY),e(cY,C$r),e(Nc,w$r),e(Nc,fY),e(fY,A$r),e(Nc,y$r),e(hr,L$r),e(hr,$9),e($9,x$r),e($9,nMe),e(nMe,$$r),e($9,k$r),e(hr,S$r),e(hr,Xt),M(k9,Xt,null),e(Xt,R$r),e(Xt,sMe),e(sMe,B$r),e(Xt,P$r),e(Xt,jc),e(jc,I$r),e(jc,lMe),e(lMe,q$r),e(jc,N$r),e(jc,mY),e(mY,j$r),e(jc,D$r),e(Xt,G$r),M(u5,Xt,null),e(hr,O$r),e(hr,Or),M(S9,Or,null),e(Or,V$r),e(Or,iMe),e(iMe,X$r),e(Or,z$r),e(Or,un),e(un,W$r),e(un,dMe),e(dMe,Q$r),e(un,H$r),e(un,cMe),e(cMe,U$r),e(un,J$r),e(un,fMe),e(fMe,Y$r),e(un,K$r),e(Or,Z$r),e(Or,Le),e(Le,b5),e(b5,mMe),e(mMe,ekr),e(b5,okr),e(b5,gY),e(gY,rkr),e(b5,tkr),e(Le,akr),e(Le,v5),e(v5,gMe),e(gMe,nkr),e(v5,skr),e(v5,hY),e(hY,lkr),e(v5,ikr),e(Le,dkr),e(Le,F5),e(F5,hMe),e(hMe,ckr),e(F5,fkr),e(F5,pY),e(pY,mkr),e(F5,gkr),e(Le,hkr),e(Le,T5),e(T5,pMe),e(pMe,pkr),e(T5,_kr),e(T5,_Y),e(_Y,ukr),e(T5,bkr),e(Le,vkr),e(Le,M5),e(M5,_Me),e(_Me,Fkr),e(M5,Tkr),e(M5,uY),e(uY,Mkr),e(M5,Ekr),e(Le,Ckr),e(Le,E5),e(E5,uMe),e(uMe,wkr),e(E5,Akr),e(E5,bY),e(bY,ykr),e(E5,Lkr),e(Le,xkr),e(Le,C5),e(C5,bMe),e(bMe,$kr),e(C5,kkr),e(C5,vY),e(vY,Skr),e(C5,Rkr),e(Le,Bkr),e(Le,w5),e(w5,vMe),e(vMe,Pkr),e(w5,Ikr),e(w5,FY),e(FY,qkr),e(w5,Nkr),e(Le,jkr),e(Le,A5),e(A5,FMe),e(FMe,Dkr),e(A5,Gkr),e(A5,TY),e(TY,Okr),e(A5,Vkr),e(Le,Xkr),e(Le,y5),e(y5,TMe),e(TMe,zkr),e(y5,Wkr),e(y5,MY),e(MY,Qkr),e(y5,Hkr),e(Or,Ukr),M(L5,Or,null),b(f,XNe,u),b(f,Dc,u),e(Dc,x5),e(x5,MMe),M(R9,MMe,null),e(Dc,Jkr),e(Dc,EMe),e(EMe,Ykr),b(f,zNe,u),b(f,pr,u),M(B9,pr,null),e(pr,Kkr),e(pr,Gc),e(Gc,Zkr),e(Gc,EY),e(EY,eSr),e(Gc,oSr),e(Gc,CY),e(CY,rSr),e(Gc,tSr),e(pr,aSr),e(pr,P9),e(P9,nSr),e(P9,CMe),e(CMe,sSr),e(P9,lSr),e(pr,iSr),e(pr,zt),M(I9,zt,null),e(zt,dSr),e(zt,wMe),e(wMe,cSr),e(zt,fSr),e(zt,Oc),e(Oc,mSr),e(Oc,AMe),e(AMe,gSr),e(Oc,hSr),e(Oc,wY),e(wY,pSr),e(Oc,_Sr),e(zt,uSr),M($5,zt,null),e(pr,bSr),e(pr,Vr),M(q9,Vr,null),e(Vr,vSr),e(Vr,yMe),e(yMe,FSr),e(Vr,TSr),e(Vr,bn),e(bn,MSr),e(bn,LMe),e(LMe,ESr),e(bn,CSr),e(bn,xMe),e(xMe,wSr),e(bn,ASr),e(bn,$Me),e($Me,ySr),e(bn,LSr),e(Vr,xSr),e(Vr,Be),e(Be,k5),e(k5,kMe),e(kMe,$Sr),e(k5,kSr),e(k5,AY),e(AY,SSr),e(k5,RSr),e(Be,BSr),e(Be,S5),e(S5,SMe),e(SMe,PSr),e(S5,ISr),e(S5,yY),e(yY,qSr),e(S5,NSr),e(Be,jSr),e(Be,R5),e(R5,RMe),e(RMe,DSr),e(R5,GSr),e(R5,LY),e(LY,OSr),e(R5,VSr),e(Be,XSr),e(Be,B5),e(B5,BMe),e(BMe,zSr),e(B5,WSr),e(B5,xY),e(xY,QSr),e(B5,HSr),e(Be,USr),e(Be,P5),e(P5,PMe),e(PMe,JSr),e(P5,YSr),e(P5,$Y),e($Y,KSr),e(P5,ZSr),e(Be,eRr),e(Be,I5),e(I5,IMe),e(IMe,oRr),e(I5,rRr),e(I5,kY),e(kY,tRr),e(I5,aRr),e(Be,nRr),e(Be,q5),e(q5,qMe),e(qMe,sRr),e(q5,lRr),e(q5,SY),e(SY,iRr),e(q5,dRr),e(Be,cRr),e(Be,N5),e(N5,NMe),e(NMe,fRr),e(N5,mRr),e(N5,RY),e(RY,gRr),e(N5,hRr),e(Be,pRr),e(Be,j5),e(j5,jMe),e(jMe,_Rr),e(j5,uRr),e(j5,BY),e(BY,bRr),e(j5,vRr),e(Vr,FRr),M(D5,Vr,null),b(f,WNe,u),b(f,Vc,u),e(Vc,G5),e(G5,DMe),M(N9,DMe,null),e(Vc,TRr),e(Vc,GMe),e(GMe,MRr),b(f,QNe,u),b(f,_r,u),M(j9,_r,null),e(_r,ERr),e(_r,Xc),e(Xc,CRr),e(Xc,PY),e(PY,wRr),e(Xc,ARr),e(Xc,IY),e(IY,yRr),e(Xc,LRr),e(_r,xRr),e(_r,D9),e(D9,$Rr),e(D9,OMe),e(OMe,kRr),e(D9,SRr),e(_r,RRr),e(_r,Wt),M(G9,Wt,null),e(Wt,BRr),e(Wt,VMe),e(VMe,PRr),e(Wt,IRr),e(Wt,zc),e(zc,qRr),e(zc,XMe),e(XMe,NRr),e(zc,jRr),e(zc,qY),e(qY,DRr),e(zc,GRr),e(Wt,ORr),M(O5,Wt,null),e(_r,VRr),e(_r,Xr),M(O9,Xr,null),e(Xr,XRr),e(Xr,zMe),e(zMe,zRr),e(Xr,WRr),e(Xr,vn),e(vn,QRr),e(vn,WMe),e(WMe,HRr),e(vn,URr),e(vn,QMe),e(QMe,JRr),e(vn,YRr),e(vn,HMe),e(HMe,KRr),e(vn,ZRr),e(Xr,eBr),e(Xr,xe),e(xe,V5),e(V5,UMe),e(UMe,oBr),e(V5,rBr),e(V5,NY),e(NY,tBr),e(V5,aBr),e(xe,nBr),e(xe,X5),e(X5,JMe),e(JMe,sBr),e(X5,lBr),e(X5,jY),e(jY,iBr),e(X5,dBr),e(xe,cBr),e(xe,z5),e(z5,YMe),e(YMe,fBr),e(z5,mBr),e(z5,DY),e(DY,gBr),e(z5,hBr),e(xe,pBr),e(xe,W5),e(W5,KMe),e(KMe,_Br),e(W5,uBr),e(W5,GY),e(GY,bBr),e(W5,vBr),e(xe,FBr),e(xe,Q5),e(Q5,ZMe),e(ZMe,TBr),e(Q5,MBr),e(Q5,OY),e(OY,EBr),e(Q5,CBr),e(xe,wBr),e(xe,H5),e(H5,e4e),e(e4e,ABr),e(H5,yBr),e(H5,VY),e(VY,LBr),e(H5,xBr),e(xe,$Br),e(xe,U5),e(U5,o4e),e(o4e,kBr),e(U5,SBr),e(U5,XY),e(XY,RBr),e(U5,BBr),e(xe,PBr),e(xe,J5),e(J5,r4e),e(r4e,IBr),e(J5,qBr),e(J5,zY),e(zY,NBr),e(J5,jBr),e(xe,DBr),e(xe,Y5),e(Y5,t4e),e(t4e,GBr),e(Y5,OBr),e(Y5,WY),e(WY,VBr),e(Y5,XBr),e(xe,zBr),e(xe,K5),e(K5,a4e),e(a4e,WBr),e(K5,QBr),e(K5,QY),e(QY,HBr),e(K5,UBr),e(Xr,JBr),M(Z5,Xr,null),b(f,HNe,u),b(f,Wc,u),e(Wc,e3),e(e3,n4e),M(V9,n4e,null),e(Wc,YBr),e(Wc,s4e),e(s4e,KBr),b(f,UNe,u),b(f,ur,u),M(X9,ur,null),e(ur,ZBr),e(ur,Qc),e(Qc,ePr),e(Qc,HY),e(HY,oPr),e(Qc,rPr),e(Qc,UY),e(UY,tPr),e(Qc,aPr),e(ur,nPr),e(ur,z9),e(z9,sPr),e(z9,l4e),e(l4e,lPr),e(z9,iPr),e(ur,dPr),e(ur,Qt),M(W9,Qt,null),e(Qt,cPr),e(Qt,i4e),e(i4e,fPr),e(Qt,mPr),e(Qt,Hc),e(Hc,gPr),e(Hc,d4e),e(d4e,hPr),e(Hc,pPr),e(Hc,JY),e(JY,_Pr),e(Hc,uPr),e(Qt,bPr),M(o3,Qt,null),e(ur,vPr),e(ur,zr),M(Q9,zr,null),e(zr,FPr),e(zr,c4e),e(c4e,TPr),e(zr,MPr),e(zr,Fn),e(Fn,EPr),e(Fn,f4e),e(f4e,CPr),e(Fn,wPr),e(Fn,m4e),e(m4e,APr),e(Fn,yPr),e(Fn,g4e),e(g4e,LPr),e(Fn,xPr),e(zr,$Pr),e(zr,$e),e($e,r3),e(r3,h4e),e(h4e,kPr),e(r3,SPr),e(r3,YY),e(YY,RPr),e(r3,BPr),e($e,PPr),e($e,t3),e(t3,p4e),e(p4e,IPr),e(t3,qPr),e(t3,KY),e(KY,NPr),e(t3,jPr),e($e,DPr),e($e,a3),e(a3,_4e),e(_4e,GPr),e(a3,OPr),e(a3,ZY),e(ZY,VPr),e(a3,XPr),e($e,zPr),e($e,n3),e(n3,u4e),e(u4e,WPr),e(n3,QPr),e(n3,eK),e(eK,HPr),e(n3,UPr),e($e,JPr),e($e,s3),e(s3,b4e),e(b4e,YPr),e(s3,KPr),e(s3,oK),e(oK,ZPr),e(s3,eIr),e($e,oIr),e($e,l3),e(l3,v4e),e(v4e,rIr),e(l3,tIr),e(l3,rK),e(rK,aIr),e(l3,nIr),e($e,sIr),e($e,i3),e(i3,F4e),e(F4e,lIr),e(i3,iIr),e(i3,tK),e(tK,dIr),e(i3,cIr),e($e,fIr),e($e,d3),e(d3,T4e),e(T4e,mIr),e(d3,gIr),e(d3,aK),e(aK,hIr),e(d3,pIr),e($e,_Ir),e($e,c3),e(c3,M4e),e(M4e,uIr),e(c3,bIr),e(c3,nK),e(nK,vIr),e(c3,FIr),e($e,TIr),e($e,f3),e(f3,E4e),e(E4e,MIr),e(f3,EIr),e(f3,sK),e(sK,CIr),e(f3,wIr),e(zr,AIr),M(m3,zr,null),b(f,JNe,u),b(f,Uc,u),e(Uc,g3),e(g3,C4e),M(H9,C4e,null),e(Uc,yIr),e(Uc,w4e),e(w4e,LIr),b(f,YNe,u),b(f,br,u),M(U9,br,null),e(br,xIr),e(br,Jc),e(Jc,$Ir),e(Jc,lK),e(lK,kIr),e(Jc,SIr),e(Jc,iK),e(iK,RIr),e(Jc,BIr),e(br,PIr),e(br,J9),e(J9,IIr),e(J9,A4e),e(A4e,qIr),e(J9,NIr),e(br,jIr),e(br,Ht),M(Y9,Ht,null),e(Ht,DIr),e(Ht,y4e),e(y4e,GIr),e(Ht,OIr),e(Ht,Yc),e(Yc,VIr),e(Yc,L4e),e(L4e,XIr),e(Yc,zIr),e(Yc,dK),e(dK,WIr),e(Yc,QIr),e(Ht,HIr),M(h3,Ht,null),e(br,UIr),e(br,Wr),M(K9,Wr,null),e(Wr,JIr),e(Wr,x4e),e(x4e,YIr),e(Wr,KIr),e(Wr,Tn),e(Tn,ZIr),e(Tn,$4e),e($4e,eqr),e(Tn,oqr),e(Tn,k4e),e(k4e,rqr),e(Tn,tqr),e(Tn,S4e),e(S4e,aqr),e(Tn,nqr),e(Wr,sqr),e(Wr,De),e(De,p3),e(p3,R4e),e(R4e,lqr),e(p3,iqr),e(p3,cK),e(cK,dqr),e(p3,cqr),e(De,fqr),e(De,_3),e(_3,B4e),e(B4e,mqr),e(_3,gqr),e(_3,fK),e(fK,hqr),e(_3,pqr),e(De,_qr),e(De,u3),e(u3,P4e),e(P4e,uqr),e(u3,bqr),e(u3,mK),e(mK,vqr),e(u3,Fqr),e(De,Tqr),e(De,b3),e(b3,I4e),e(I4e,Mqr),e(b3,Eqr),e(b3,gK),e(gK,Cqr),e(b3,wqr),e(De,Aqr),e(De,v3),e(v3,q4e),e(q4e,yqr),e(v3,Lqr),e(v3,hK),e(hK,xqr),e(v3,$qr),e(De,kqr),e(De,F3),e(F3,N4e),e(N4e,Sqr),e(F3,Rqr),e(F3,pK),e(pK,Bqr),e(F3,Pqr),e(De,Iqr),e(De,T3),e(T3,j4e),e(j4e,qqr),e(T3,Nqr),e(T3,_K),e(_K,jqr),e(T3,Dqr),e(De,Gqr),e(De,M3),e(M3,D4e),e(D4e,Oqr),e(M3,Vqr),e(M3,uK),e(uK,Xqr),e(M3,zqr),e(Wr,Wqr),M(E3,Wr,null),b(f,KNe,u),b(f,Kc,u),e(Kc,C3),e(C3,G4e),M(Z9,G4e,null),e(Kc,Qqr),e(Kc,O4e),e(O4e,Hqr),b(f,ZNe,u),b(f,vr,u),M(ex,vr,null),e(vr,Uqr),e(vr,Zc),e(Zc,Jqr),e(Zc,bK),e(bK,Yqr),e(Zc,Kqr),e(Zc,vK),e(vK,Zqr),e(Zc,eNr),e(vr,oNr),e(vr,ox),e(ox,rNr),e(ox,V4e),e(V4e,tNr),e(ox,aNr),e(vr,nNr),e(vr,Ut),M(rx,Ut,null),e(Ut,sNr),e(Ut,X4e),e(X4e,lNr),e(Ut,iNr),e(Ut,ef),e(ef,dNr),e(ef,z4e),e(z4e,cNr),e(ef,fNr),e(ef,FK),e(FK,mNr),e(ef,gNr),e(Ut,hNr),M(w3,Ut,null),e(vr,pNr),e(vr,Qr),M(tx,Qr,null),e(Qr,_Nr),e(Qr,W4e),e(W4e,uNr),e(Qr,bNr),e(Qr,Mn),e(Mn,vNr),e(Mn,Q4e),e(Q4e,FNr),e(Mn,TNr),e(Mn,H4e),e(H4e,MNr),e(Mn,ENr),e(Mn,U4e),e(U4e,CNr),e(Mn,wNr),e(Qr,ANr),e(Qr,Ge),e(Ge,A3),e(A3,J4e),e(J4e,yNr),e(A3,LNr),e(A3,TK),e(TK,xNr),e(A3,$Nr),e(Ge,kNr),e(Ge,y3),e(y3,Y4e),e(Y4e,SNr),e(y3,RNr),e(y3,MK),e(MK,BNr),e(y3,PNr),e(Ge,INr),e(Ge,L3),e(L3,K4e),e(K4e,qNr),e(L3,NNr),e(L3,EK),e(EK,jNr),e(L3,DNr),e(Ge,GNr),e(Ge,x3),e(x3,Z4e),e(Z4e,ONr),e(x3,VNr),e(x3,CK),e(CK,XNr),e(x3,zNr),e(Ge,WNr),e(Ge,$3),e($3,eEe),e(eEe,QNr),e($3,HNr),e($3,wK),e(wK,UNr),e($3,JNr),e(Ge,YNr),e(Ge,k3),e(k3,oEe),e(oEe,KNr),e(k3,ZNr),e(k3,AK),e(AK,ejr),e(k3,ojr),e(Ge,rjr),e(Ge,S3),e(S3,rEe),e(rEe,tjr),e(S3,ajr),e(S3,yK),e(yK,njr),e(S3,sjr),e(Ge,ljr),e(Ge,R3),e(R3,tEe),e(tEe,ijr),e(R3,djr),e(R3,LK),e(LK,cjr),e(R3,fjr),e(Qr,mjr),M(B3,Qr,null),b(f,eje,u),b(f,of,u),e(of,P3),e(P3,aEe),M(ax,aEe,null),e(of,gjr),e(of,nEe),e(nEe,hjr),b(f,oje,u),b(f,Fr,u),M(nx,Fr,null),e(Fr,pjr),e(Fr,rf),e(rf,_jr),e(rf,xK),e(xK,ujr),e(rf,bjr),e(rf,$K),e($K,vjr),e(rf,Fjr),e(Fr,Tjr),e(Fr,sx),e(sx,Mjr),e(sx,sEe),e(sEe,Ejr),e(sx,Cjr),e(Fr,wjr),e(Fr,Jt),M(lx,Jt,null),e(Jt,Ajr),e(Jt,lEe),e(lEe,yjr),e(Jt,Ljr),e(Jt,tf),e(tf,xjr),e(tf,iEe),e(iEe,$jr),e(tf,kjr),e(tf,kK),e(kK,Sjr),e(tf,Rjr),e(Jt,Bjr),M(I3,Jt,null),e(Fr,Pjr),e(Fr,Hr),M(ix,Hr,null),e(Hr,Ijr),e(Hr,dEe),e(dEe,qjr),e(Hr,Njr),e(Hr,En),e(En,jjr),e(En,cEe),e(cEe,Djr),e(En,Gjr),e(En,fEe),e(fEe,Ojr),e(En,Vjr),e(En,mEe),e(mEe,Xjr),e(En,zjr),e(Hr,Wjr),e(Hr,gEe),e(gEe,q3),e(q3,hEe),e(hEe,Qjr),e(q3,Hjr),e(q3,SK),e(SK,Ujr),e(q3,Jjr),e(Hr,Yjr),M(N3,Hr,null),b(f,rje,u),b(f,af,u),e(af,j3),e(j3,pEe),M(dx,pEe,null),e(af,Kjr),e(af,_Ee),e(_Ee,Zjr),b(f,tje,u),b(f,Tr,u),M(cx,Tr,null),e(Tr,eDr),e(Tr,nf),e(nf,oDr),e(nf,RK),e(RK,rDr),e(nf,tDr),e(nf,BK),e(BK,aDr),e(nf,nDr),e(Tr,sDr),e(Tr,fx),e(fx,lDr),e(fx,uEe),e(uEe,iDr),e(fx,dDr),e(Tr,cDr),e(Tr,Yt),M(mx,Yt,null),e(Yt,fDr),e(Yt,bEe),e(bEe,mDr),e(Yt,gDr),e(Yt,sf),e(sf,hDr),e(sf,vEe),e(vEe,pDr),e(sf,_Dr),e(sf,PK),e(PK,uDr),e(sf,bDr),e(Yt,vDr),M(D3,Yt,null),e(Tr,FDr),e(Tr,Ur),M(gx,Ur,null),e(Ur,TDr),e(Ur,FEe),e(FEe,MDr),e(Ur,EDr),e(Ur,Cn),e(Cn,CDr),e(Cn,TEe),e(TEe,wDr),e(Cn,ADr),e(Cn,MEe),e(MEe,yDr),e(Cn,LDr),e(Cn,EEe),e(EEe,xDr),e(Cn,$Dr),e(Ur,kDr),e(Ur,hx),e(hx,G3),e(G3,CEe),e(CEe,SDr),e(G3,RDr),e(G3,IK),e(IK,BDr),e(G3,PDr),e(hx,IDr),e(hx,O3),e(O3,wEe),e(wEe,qDr),e(O3,NDr),e(O3,qK),e(qK,jDr),e(O3,DDr),e(Ur,GDr),M(V3,Ur,null),b(f,aje,u),b(f,lf,u),e(lf,X3),e(X3,AEe),M(px,AEe,null),e(lf,ODr),e(lf,yEe),e(yEe,VDr),b(f,nje,u),b(f,Mr,u),M(_x,Mr,null),e(Mr,XDr),e(Mr,df),e(df,zDr),e(df,NK),e(NK,WDr),e(df,QDr),e(df,jK),e(jK,HDr),e(df,UDr),e(Mr,JDr),e(Mr,ux),e(ux,YDr),e(ux,LEe),e(LEe,KDr),e(ux,ZDr),e(Mr,eGr),e(Mr,Kt),M(bx,Kt,null),e(Kt,oGr),e(Kt,xEe),e(xEe,rGr),e(Kt,tGr),e(Kt,cf),e(cf,aGr),e(cf,$Ee),e($Ee,nGr),e(cf,sGr),e(cf,DK),e(DK,lGr),e(cf,iGr),e(Kt,dGr),M(z3,Kt,null),e(Mr,cGr),e(Mr,Jr),M(vx,Jr,null),e(Jr,fGr),e(Jr,kEe),e(kEe,mGr),e(Jr,gGr),e(Jr,wn),e(wn,hGr),e(wn,SEe),e(SEe,pGr),e(wn,_Gr),e(wn,REe),e(REe,uGr),e(wn,bGr),e(wn,BEe),e(BEe,vGr),e(wn,FGr),e(Jr,TGr),e(Jr,PEe),e(PEe,W3),e(W3,IEe),e(IEe,MGr),e(W3,EGr),e(W3,GK),e(GK,CGr),e(W3,wGr),e(Jr,AGr),M(Q3,Jr,null),sje=!0},p(f,[u]){const Fx={};u&2&&(Fx.$$scope={dirty:u,ctx:f}),vf.$set(Fx);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),Fg.$set(qEe);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),oh.$set(NEe);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),$h.$set(jEe);const Tx={};u&2&&(Tx.$$scope={dirty:u,ctx:f}),kh.$set(Tx);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),Jh.$set(DEe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Yh.$set(An);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),ep.$set(GEe);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),Q_.$set(OEe);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),U_.$set(VEe);const Mx={};u&2&&(Mx.$$scope={dirty:u,ctx:f}),Du.$set(Mx);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),Ou.$set(XEe);const Ex={};u&2&&(Ex.$$scope={dirty:u,ctx:f}),y2.$set(Ex);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),x2.$set(zEe);const Cx={};u&2&&(Cx.$$scope={dirty:u,ctx:f}),m1.$set(Cx);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),h1.$set(WEe);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),S1.$set(QEe);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),B1.$set(HEe);const ff={};u&2&&(ff.$$scope={dirty:u,ctx:f}),Lb.$set(ff);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),$b.$set(UEe);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),lv.$set(JEe);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),dv.$set(YEe);const wx={};u&2&&(wx.$$scope={dirty:u,ctx:f}),_v.$set(wx);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),bv.$set(KEe);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),Zv.$set(ZEe);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),oF.$set(eCe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),OF.$set(et);const Ax={};u&2&&(Ax.$$scope={dirty:u,ctx:f}),XF.$set(Ax);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),QF.$set(oCe);const yx={};u&2&&(yx.$$scope={dirty:u,ctx:f}),UF.$set(yx);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),i0.$set(rCe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),c0.$set(ot);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),g0.$set(tCe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),p0.$set(mf);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),A0.$set(aCe);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),L0.$set(nCe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),P0.$set(y);const H3={};u&2&&(H3.$$scope={dirty:u,ctx:f}),q0.$set(H3);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),H0.$set(sCe);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),J0.$set(lCe);const U3={};u&2&&(U3.$$scope={dirty:u,ctx:f}),eT.$set(U3);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),rT.$set(iCe);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),dT.$set(dCe);const J3={};u&2&&(J3.$$scope={dirty:u,ctx:f}),fT.$set(J3);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),_T.$set(cCe);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),bT.$set(fCe);const Y3={};u&2&&(Y3.$$scope={dirty:u,ctx:f}),MT.$set(Y3);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),CT.$set(mCe);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),yT.$set(gCe);const K3={};u&2&&(K3.$$scope={dirty:u,ctx:f}),xT.$set(K3);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),PT.$set(hCe);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),qT.$set(pCe);const Z3={};u&2&&(Z3.$$scope={dirty:u,ctx:f}),DT.$set(Z3);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),OT.$set(_Ce);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),B7.$set(uCe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),I7.$set(ew);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),sM.$set(bCe);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),iM.$set(vCe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),TM.$set(ow);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),EM.$set(FCe);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),LM.$set(TCe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),$M.$set(rw);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),YM.$set(MCe);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),ZM.$set(ECe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),c4.$set(tw);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),m4.$set(CCe);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),j4.$set(wCe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),G4.$set(aw);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),nE.$set(ACe);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),lE.$set(yCe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),cE.$set(nw);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),mE.$set(LCe);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),hE.$set(xCe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),_E.$set(sw);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),qE.$set($Ce);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),jE.$set(kCe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),sC.$set(lw);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),iC.$set(SCe);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),cC.$set(RCe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),mC.$set(iw);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),hC.$set(BCe);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),_C.$set(PCe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),OC.$set(dw);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),XC.$set(ICe);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),e5.$set(qCe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),r5.$set(cw);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),p5.$set(NCe);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),u5.$set(jCe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),L5.$set(fw);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),$5.$set(DCe);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),D5.$set(GCe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),O5.$set(mw);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),Z5.$set(OCe);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),o3.$set(VCe);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),m3.$set(gw);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),h3.$set(XCe);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),E3.$set(zCe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),w3.$set(hw);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),B3.$set(WCe);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),I3.$set(QCe);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),N3.$set(pw);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),D3.$set(HCe);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),V3.$set(UCe);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),z3.$set(_w);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),Q3.$set(JCe)},i(f){sje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(p6.$$.fragment,f),E(_6.$$.fragment,f),E(vf.$$.fragment,f),E(u6.$$.fragment,f),E(b6.$$.fragment,f),E(T6.$$.fragment,f),E(Fg.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(C6.$$.fragment,f),E(y6.$$.fragment,f),E(oh.$$.fragment,f),E(L6.$$.fragment,f),E(x6.$$.fragment,f),E($6.$$.fragment,f),E(R6.$$.fragment,f),E($h.$$.fragment,f),E(kh.$$.fragment,f),E(B6.$$.fragment,f),E(P6.$$.fragment,f),E(I6.$$.fragment,f),E(j6.$$.fragment,f),E(Jh.$$.fragment,f),E(Yh.$$.fragment,f),E(D6.$$.fragment,f),E(G6.$$.fragment,f),E(O6.$$.fragment,f),E(X6.$$.fragment,f),E(ep.$$.fragment,f),E(z6.$$.fragment,f),E(Q_.$$.fragment,f),E(W6.$$.fragment,f),E(Q6.$$.fragment,f),E(U6.$$.fragment,f),E(U_.$$.fragment,f),E(J6.$$.fragment,f),E(Du.$$.fragment,f),E(Y6.$$.fragment,f),E(K6.$$.fragment,f),E(ey.$$.fragment,f),E(Ou.$$.fragment,f),E(oy.$$.fragment,f),E(y2.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(x2.$$.fragment,f),E(sy.$$.fragment,f),E(m1.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(h1.$$.fragment,f),E(fy.$$.fragment,f),E(S1.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(B1.$$.fragment,f),E(_y.$$.fragment,f),E(Lb.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E($b.$$.fragment,f),E(Ty.$$.fragment,f),E(lv.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(dv.$$.fragment,f),E(Ay.$$.fragment,f),E(_v.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(bv.$$.fragment,f),E(ky.$$.fragment,f),E(Zv.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(oF.$$.fragment,f),E(Iy.$$.fragment,f),E(OF.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(XF.$$.fragment,f),E(Gy.$$.fragment,f),E(QF.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(UF.$$.fragment,f),E(Wy.$$.fragment,f),E(i0.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(c0.$$.fragment,f),E(Yy.$$.fragment,f),E(g0.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(p0.$$.fragment,f),E(rL.$$.fragment,f),E(A0.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(L0.$$.fragment,f),E(lL.$$.fragment,f),E(P0.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(q0.$$.fragment,f),E(mL.$$.fragment,f),E(H0.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(_L.$$.fragment,f),E(J0.$$.fragment,f),E(uL.$$.fragment,f),E(eT.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(rT.$$.fragment,f),E(EL.$$.fragment,f),E(dT.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(fT.$$.fragment,f),E(LL.$$.fragment,f),E(_T.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(bT.$$.fragment,f),E(RL.$$.fragment,f),E(MT.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(CT.$$.fragment,f),E(jL.$$.fragment,f),E(yT.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(xT.$$.fragment,f),E(XL.$$.fragment,f),E(PT.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(qT.$$.fragment,f),E(UL.$$.fragment,f),E(DT.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(OT.$$.fragment,f),E(e8.$$.fragment,f),E(B7.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(I7.$$.fragment,f),E(n8.$$.fragment,f),E(sM.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(iM.$$.fragment,f),E(c8.$$.fragment,f),E(TM.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(EM.$$.fragment,f),E(p8.$$.fragment,f),E(LM.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E($M.$$.fragment,f),E(F8.$$.fragment,f),E(YM.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(ZM.$$.fragment,f),E(w8.$$.fragment,f),E(c4.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(m4.$$.fragment,f),E($8.$$.fragment,f),E(j4.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(B8.$$.fragment,f),E(G4.$$.fragment,f),E(P8.$$.fragment,f),E(nE.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(lE.$$.fragment,f),E(D8.$$.fragment,f),E(cE.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(mE.$$.fragment,f),E(W8.$$.fragment,f),E(hE.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(_E.$$.fragment,f),E(Y8.$$.fragment,f),E(qE.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o9.$$.fragment,f),E(jE.$$.fragment,f),E(r9.$$.fragment,f),E(sC.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(iC.$$.fragment,f),E(l9.$$.fragment,f),E(cC.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(mC.$$.fragment,f),E(m9.$$.fragment,f),E(hC.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(_9.$$.fragment,f),E(_C.$$.fragment,f),E(u9.$$.fragment,f),E(OC.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(XC.$$.fragment,f),E(M9.$$.fragment,f),E(e5.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(r5.$$.fragment,f),E(y9.$$.fragment,f),E(p5.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(u5.$$.fragment,f),E(S9.$$.fragment,f),E(L5.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E($5.$$.fragment,f),E(q9.$$.fragment,f),E(D5.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(O5.$$.fragment,f),E(O9.$$.fragment,f),E(Z5.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(W9.$$.fragment,f),E(o3.$$.fragment,f),E(Q9.$$.fragment,f),E(m3.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(h3.$$.fragment,f),E(K9.$$.fragment,f),E(E3.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(w3.$$.fragment,f),E(tx.$$.fragment,f),E(B3.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(I3.$$.fragment,f),E(ix.$$.fragment,f),E(N3.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(D3.$$.fragment,f),E(gx.$$.fragment,f),E(V3.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(z3.$$.fragment,f),E(vx.$$.fragment,f),E(Q3.$$.fragment,f),sje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(p6.$$.fragment,f),C(_6.$$.fragment,f),C(vf.$$.fragment,f),C(u6.$$.fragment,f),C(b6.$$.fragment,f),C(T6.$$.fragment,f),C(Fg.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(C6.$$.fragment,f),C(y6.$$.fragment,f),C(oh.$$.fragment,f),C(L6.$$.fragment,f),C(x6.$$.fragment,f),C($6.$$.fragment,f),C(R6.$$.fragment,f),C($h.$$.fragment,f),C(kh.$$.fragment,f),C(B6.$$.fragment,f),C(P6.$$.fragment,f),C(I6.$$.fragment,f),C(j6.$$.fragment,f),C(Jh.$$.fragment,f),C(Yh.$$.fragment,f),C(D6.$$.fragment,f),C(G6.$$.fragment,f),C(O6.$$.fragment,f),C(X6.$$.fragment,f),C(ep.$$.fragment,f),C(z6.$$.fragment,f),C(Q_.$$.fragment,f),C(W6.$$.fragment,f),C(Q6.$$.fragment,f),C(U6.$$.fragment,f),C(U_.$$.fragment,f),C(J6.$$.fragment,f),C(Du.$$.fragment,f),C(Y6.$$.fragment,f),C(K6.$$.fragment,f),C(ey.$$.fragment,f),C(Ou.$$.fragment,f),C(oy.$$.fragment,f),C(y2.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(x2.$$.fragment,f),C(sy.$$.fragment,f),C(m1.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(h1.$$.fragment,f),C(fy.$$.fragment,f),C(S1.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(B1.$$.fragment,f),C(_y.$$.fragment,f),C(Lb.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C($b.$$.fragment,f),C(Ty.$$.fragment,f),C(lv.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(dv.$$.fragment,f),C(Ay.$$.fragment,f),C(_v.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(bv.$$.fragment,f),C(ky.$$.fragment,f),C(Zv.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(oF.$$.fragment,f),C(Iy.$$.fragment,f),C(OF.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(XF.$$.fragment,f),C(Gy.$$.fragment,f),C(QF.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(UF.$$.fragment,f),C(Wy.$$.fragment,f),C(i0.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(c0.$$.fragment,f),C(Yy.$$.fragment,f),C(g0.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(p0.$$.fragment,f),C(rL.$$.fragment,f),C(A0.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(L0.$$.fragment,f),C(lL.$$.fragment,f),C(P0.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(q0.$$.fragment,f),C(mL.$$.fragment,f),C(H0.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(_L.$$.fragment,f),C(J0.$$.fragment,f),C(uL.$$.fragment,f),C(eT.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(rT.$$.fragment,f),C(EL.$$.fragment,f),C(dT.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(fT.$$.fragment,f),C(LL.$$.fragment,f),C(_T.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(bT.$$.fragment,f),C(RL.$$.fragment,f),C(MT.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(CT.$$.fragment,f),C(jL.$$.fragment,f),C(yT.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(xT.$$.fragment,f),C(XL.$$.fragment,f),C(PT.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(qT.$$.fragment,f),C(UL.$$.fragment,f),C(DT.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(OT.$$.fragment,f),C(e8.$$.fragment,f),C(B7.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(I7.$$.fragment,f),C(n8.$$.fragment,f),C(sM.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(iM.$$.fragment,f),C(c8.$$.fragment,f),C(TM.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(EM.$$.fragment,f),C(p8.$$.fragment,f),C(LM.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C($M.$$.fragment,f),C(F8.$$.fragment,f),C(YM.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(ZM.$$.fragment,f),C(w8.$$.fragment,f),C(c4.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(m4.$$.fragment,f),C($8.$$.fragment,f),C(j4.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(B8.$$.fragment,f),C(G4.$$.fragment,f),C(P8.$$.fragment,f),C(nE.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(lE.$$.fragment,f),C(D8.$$.fragment,f),C(cE.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(mE.$$.fragment,f),C(W8.$$.fragment,f),C(hE.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(_E.$$.fragment,f),C(Y8.$$.fragment,f),C(qE.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o9.$$.fragment,f),C(jE.$$.fragment,f),C(r9.$$.fragment,f),C(sC.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(iC.$$.fragment,f),C(l9.$$.fragment,f),C(cC.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(mC.$$.fragment,f),C(m9.$$.fragment,f),C(hC.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(_9.$$.fragment,f),C(_C.$$.fragment,f),C(u9.$$.fragment,f),C(OC.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(XC.$$.fragment,f),C(M9.$$.fragment,f),C(e5.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(r5.$$.fragment,f),C(y9.$$.fragment,f),C(p5.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(u5.$$.fragment,f),C(S9.$$.fragment,f),C(L5.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C($5.$$.fragment,f),C(q9.$$.fragment,f),C(D5.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(O5.$$.fragment,f),C(O9.$$.fragment,f),C(Z5.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(W9.$$.fragment,f),C(o3.$$.fragment,f),C(Q9.$$.fragment,f),C(m3.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(h3.$$.fragment,f),C(K9.$$.fragment,f),C(E3.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(w3.$$.fragment,f),C(tx.$$.fragment,f),C(B3.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(I3.$$.fragment,f),C(ix.$$.fragment,f),C(N3.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(D3.$$.fragment,f),C(gx.$$.fragment,f),C(V3.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(z3.$$.fragment,f),C(vx.$$.fragment,f),C(Q3.$$.fragment,f),sje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(tqe),f&&t(ui),w(p6),f&&t(aqe),f&&t(kn),f&&t(nqe),w(_6,f),f&&t(sqe),f&&t(q$),f&&t(lqe),w(vf,f),f&&t(iqe),f&&t(bi),w(u6),f&&t(dqe),f&&t(Co),w(b6),w(T6),w(Fg),w(M6),f&&t(cqe),f&&t(Fi),w(E6),f&&t(fqe),f&&t(wo),w(C6),w(y6),w(oh),w(L6),f&&t(mqe),f&&t(Ti),w(x6),f&&t(gqe),f&&t(Ao),w($6),w(R6),w($h),w(kh),w(B6),f&&t(hqe),f&&t(Mi),w(P6),f&&t(pqe),f&&t(yo),w(I6),w(j6),w(Jh),w(Yh),w(D6),f&&t(_qe),f&&t(Ci),w(G6),f&&t(uqe),f&&t(Lo),w(O6),w(X6),w(ep),w(z6),w(Q_),f&&t(bqe),f&&t(yi),w(W6),f&&t(vqe),f&&t(xo),w(Q6),w(U6),w(U_),w(J6),w(Du),f&&t(Fqe),f&&t($i),w(Y6),f&&t(Tqe),f&&t($o),w(K6),w(ey),w(Ou),w(oy),w(y2),f&&t(Mqe),f&&t(Ri),w(ry),f&&t(Eqe),f&&t(ko),w(ty),w(ny),w(x2),w(sy),w(m1),f&&t(Cqe),f&&t(Ii),w(ly),f&&t(wqe),f&&t(So),w(iy),w(cy),w(h1),w(fy),w(S1),f&&t(Aqe),f&&t(ji),w(my),f&&t(yqe),f&&t(Ro),w(gy),w(py),w(B1),w(_y),w(Lb),f&&t(Lqe),f&&t(Oi),w(uy),f&&t(xqe),f&&t(Bo),w(by),w(Fy),w($b),w(Ty),w(lv),f&&t($qe),f&&t(zi),w(My),f&&t(kqe),f&&t(Po),w(Ey),w(wy),w(dv),w(Ay),w(_v),f&&t(Sqe),f&&t(Hi),w(yy),f&&t(Rqe),f&&t(Io),w(Ly),w($y),w(bv),w(ky),w(Zv),f&&t(Bqe),f&&t(Yi),w(Sy),f&&t(Pqe),f&&t(qo),w(Ry),w(Py),w(oF),w(Iy),w(OF),f&&t(Iqe),f&&t(ed),w(qy),f&&t(qqe),f&&t(No),w(Ny),w(Dy),w(XF),w(Gy),w(QF),f&&t(Nqe),f&&t(td),w(Oy),f&&t(jqe),f&&t(jo),w(Vy),w(zy),w(UF),w(Wy),w(i0),f&&t(Dqe),f&&t(sd),w(Qy),f&&t(Gqe),f&&t(Do),w(Hy),w(Jy),w(c0),w(Yy),w(g0),f&&t(Oqe),f&&t(dd),w(Ky),f&&t(Vqe),f&&t(Go),w(Zy),w(oL),w(p0),w(rL),w(A0),f&&t(Xqe),f&&t(md),w(tL),f&&t(zqe),f&&t(Oo),w(aL),w(sL),w(L0),w(lL),w(P0),f&&t(Wqe),f&&t(pd),w(iL),f&&t(Qqe),f&&t(Vo),w(dL),w(fL),w(q0),w(mL),w(H0),f&&t(Hqe),f&&t(bd),w(gL),f&&t(Uqe),f&&t(Xo),w(hL),w(_L),w(J0),w(uL),w(eT),f&&t(Jqe),f&&t(Td),w(vL),f&&t(Yqe),f&&t(zo),w(FL),w(ML),w(rT),w(EL),w(dT),f&&t(Kqe),f&&t(Cd),w(CL),f&&t(Zqe),f&&t(Wo),w(wL),w(yL),w(fT),w(LL),w(_T),f&&t(eNe),f&&t(Ld),w(xL),f&&t(oNe),f&&t(Qo),w($L),w(SL),w(bT),w(RL),w(MT),f&&t(rNe),f&&t(kd),w(PL),f&&t(tNe),f&&t(Ho),w(IL),w(NL),w(CT),w(jL),w(yT),f&&t(aNe),f&&t(Bd),w(DL),f&&t(nNe),f&&t(Uo),w(GL),w(VL),w(xT),w(XL),w(PT),f&&t(sNe),f&&t(qd),w(zL),f&&t(lNe),f&&t(Jo),w(WL),w(HL),w(qT),w(UL),w(DT),f&&t(iNe),f&&t(Dd),w(JL),f&&t(dNe),f&&t(Yo),w(YL),w(ZL),w(OT),w(e8),w(B7),f&&t(cNe),f&&t(Vd),w(o8),f&&t(fNe),f&&t(Ko),w(r8),w(a8),w(I7),w(n8),w(sM),f&&t(mNe),f&&t(Wd),w(s8),f&&t(gNe),f&&t(Zo),w(l8),w(d8),w(iM),w(c8),w(TM),f&&t(hNe),f&&t(Ud),w(f8),f&&t(pNe),f&&t(er),w(m8),w(h8),w(EM),w(p8),w(LM),f&&t(_Ne),f&&t(Kd),w(_8),f&&t(uNe),f&&t(or),w(u8),w(v8),w($M),w(F8),w(YM),f&&t(bNe),f&&t(oc),w(T8),f&&t(vNe),f&&t(rr),w(M8),w(C8),w(ZM),w(w8),w(c4),f&&t(FNe),f&&t(ac),w(A8),f&&t(TNe),f&&t(tr),w(y8),w(x8),w(m4),w($8),w(j4),f&&t(MNe),f&&t(lc),w(k8),f&&t(ENe),f&&t(ar),w(S8),w(B8),w(G4),w(P8),w(nE),f&&t(CNe),f&&t(cc),w(I8),f&&t(wNe),f&&t(nr),w(q8),w(j8),w(lE),w(D8),w(cE),f&&t(ANe),f&&t(gc),w(O8),f&&t(yNe),f&&t(sr),w(V8),w(z8),w(mE),w(W8),w(hE),f&&t(LNe),f&&t(_c),w(Q8),f&&t(xNe),f&&t(lr),w(H8),w(J8),w(_E),w(Y8),w(qE),f&&t($Ne),f&&t(vc),w(K8),f&&t(kNe),f&&t(ir),w(Z8),w(o9),w(jE),w(r9),w(sC),f&&t(SNe),f&&t(Mc),w(t9),f&&t(RNe),f&&t(dr),w(a9),w(s9),w(iC),w(l9),w(cC),f&&t(BNe),f&&t(wc),w(i9),f&&t(PNe),f&&t(cr),w(d9),w(f9),w(mC),w(m9),w(hC),f&&t(INe),f&&t(Lc),w(g9),f&&t(qNe),f&&t(fr),w(h9),w(_9),w(_C),w(u9),w(OC),f&&t(NNe),f&&t(kc),w(b9),f&&t(jNe),f&&t(mr),w(v9),w(T9),w(XC),w(M9),w(e5),f&&t(DNe),f&&t(Bc),w(E9),f&&t(GNe),f&&t(gr),w(C9),w(A9),w(r5),w(y9),w(p5),f&&t(ONe),f&&t(qc),w(L9),f&&t(VNe),f&&t(hr),w(x9),w(k9),w(u5),w(S9),w(L5),f&&t(XNe),f&&t(Dc),w(R9),f&&t(zNe),f&&t(pr),w(B9),w(I9),w($5),w(q9),w(D5),f&&t(WNe),f&&t(Vc),w(N9),f&&t(QNe),f&&t(_r),w(j9),w(G9),w(O5),w(O9),w(Z5),f&&t(HNe),f&&t(Wc),w(V9),f&&t(UNe),f&&t(ur),w(X9),w(W9),w(o3),w(Q9),w(m3),f&&t(JNe),f&&t(Uc),w(H9),f&&t(YNe),f&&t(br),w(U9),w(Y9),w(h3),w(K9),w(E3),f&&t(KNe),f&&t(Kc),w(Z9),f&&t(ZNe),f&&t(vr),w(ex),w(rx),w(w3),w(tx),w(B3),f&&t(eje),f&&t(of),w(ax),f&&t(oje),f&&t(Fr),w(nx),w(lx),w(I3),w(ix),w(N3),f&&t(rje),f&&t(af),w(dx),f&&t(tje),f&&t(Tr),w(cx),w(mx),w(D3),w(gx),w(V3),f&&t(aje),f&&t(lf),w(px),f&&t(nje),f&&t(Mr),w(_x),w(bx),w(z3),w(vx),w(Q3)}}}const Pxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Ixt(L){return I8t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Vxt extends S8t{constructor(g){super();R8t(this,g,Ixt,Bxt,B8t,{})}}export{Vxt as default,Pxt as metadata};
