import{S as gWt,i as hWt,s as pWt,e as a,k as l,w as F,t as o,M as _Wt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as uWt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as Stt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function bWt($){let g,v,p,m,_,d,h,Co,yi,Bf,lt,xi,$i,t6,Nf,Oe,We,ki,Pn,a6,Bn,Nn,n6,Si,In,s6,Ri,If,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),yi=a("code"),Bf=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),xi=a("code"),$i=o('"new-model"'),t6=o(")."),Nf=l(),Oe=a("p"),We=o("Likewise, if your "),ki=a("code"),Pn=o("NewModel"),a6=o(" is a subclass of "),Bn=a("a"),Nn=o("PreTrainedModel"),n6=o(`, make sure its
`),Si=a("code"),In=o("config_class"),s6=o(` attribute is set to the same class you use when registering the model (here
`),Ri=a("code"),If=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var jS=s(p);m=r(jS,"NewModelConfig"),jS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Pi=s(d);h=r(Pi,"PretrainedConfig"),Pi.forEach(t),Co=r(Ae,`, make sure its
`),yi=n(Ae,"CODE",{});var DS=s(yi);Bf=r(DS,"model_type"),DS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),xi=n(Ae,"CODE",{});var GS=s(xi);$i=r(GS,'"new-model"'),GS.forEach(t),t6=r(Ae,")."),Ae.forEach(t),Nf=i(He),Oe=n(He,"P",{});var wo=s(Oe);We=r(wo,"Likewise, if your "),ki=n(wo,"CODE",{});var Ra=s(ki);Pn=r(Ra,"NewModel"),Ra.forEach(t),a6=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var OS=s(Bn);Nn=r(OS,"PreTrainedModel"),OS.forEach(t),n6=r(wo,`, make sure its
`),Si=n(wo,"CODE",{});var qf=s(Si);In=r(qf,"config_class"),qf.forEach(t),s6=r(wo,` attribute is set to the same class you use when registering the model (here
`),Ri=n(wo,"CODE",{});var VS=s(Ri);If=r(VS,"NewModelConfig"),VS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Co),e(g,yi),e(yi,Bf),e(g,lt),e(g,xi),e(xi,$i),e(g,t6),b(He,Nf,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,ki),e(ki,Pn),e(Oe,a6),e(Oe,Bn),e(Bn,Nn),e(Oe,n6),e(Oe,Si),e(Si,In),e(Oe,s6),e(Oe,Ri),e(Ri,If),e(Oe,Sa)},d(He){He&&t(g),He&&t(Nf),He&&t(Oe)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uUt($){let g,v,p,m,_,d,h,Co,yi,Bf,lt,xi,$i,t6,Nf,Oe,We,ki,Pn,a6,Bn,Nn,n6,Si,In,s6,Ri,If,Sa,He,Ae,jS,Pi,DS,GS,wo,Ra,OS,qf,VS,wHe,cXe,Bi,jf,Sae,l6,AHe,Rae,LHe,fXe,qn,yHe,Pae,xHe,$He,Bae,kHe,SHe,mXe,i6,gXe,XS,RHe,hXe,Df,pXe,Ni,Gf,Nae,d6,PHe,Iae,BHe,_Xe,Ao,c6,NHe,f6,IHe,zS,qHe,jHe,DHe,m6,GHe,qae,OHe,VHe,XHe,Lr,g6,zHe,jae,QHe,WHe,Ii,HHe,Dae,UHe,JHe,Gae,YHe,KHe,ZHe,A,Of,Oae,eUe,oUe,QS,rUe,tUe,aUe,Vf,Vae,nUe,sUe,WS,lUe,iUe,dUe,Xf,Xae,cUe,fUe,HS,mUe,gUe,hUe,zf,zae,pUe,_Ue,US,uUe,bUe,vUe,Qf,Qae,FUe,TUe,JS,MUe,EUe,CUe,Wf,Wae,wUe,AUe,YS,LUe,yUe,xUe,Hf,Hae,$Ue,kUe,KS,SUe,RUe,PUe,Uf,Uae,BUe,NUe,ZS,IUe,qUe,jUe,Jf,Jae,DUe,GUe,eR,OUe,VUe,XUe,Yf,Yae,zUe,QUe,oR,WUe,HUe,UUe,Kf,Kae,JUe,YUe,rR,KUe,ZUe,eJe,Zf,Zae,oJe,rJe,tR,tJe,aJe,nJe,em,ene,sJe,lJe,aR,iJe,dJe,cJe,om,one,fJe,mJe,nR,gJe,hJe,pJe,rm,rne,_Je,uJe,sR,bJe,vJe,FJe,tm,tne,TJe,MJe,lR,EJe,CJe,wJe,am,ane,AJe,LJe,iR,yJe,xJe,$Je,nm,nne,kJe,SJe,dR,RJe,PJe,BJe,sm,sne,NJe,IJe,cR,qJe,jJe,DJe,lm,lne,GJe,OJe,fR,VJe,XJe,zJe,im,ine,QJe,WJe,mR,HJe,UJe,JJe,dm,dne,YJe,KJe,gR,ZJe,eYe,oYe,cm,cne,rYe,tYe,hR,aYe,nYe,sYe,fm,fne,lYe,iYe,pR,dYe,cYe,fYe,mm,mne,mYe,gYe,_R,hYe,pYe,_Ye,gm,gne,uYe,bYe,uR,vYe,FYe,TYe,hm,hne,MYe,EYe,bR,CYe,wYe,AYe,pm,pne,LYe,yYe,vR,xYe,$Ye,kYe,_m,_ne,SYe,RYe,FR,PYe,BYe,NYe,um,une,IYe,qYe,TR,jYe,DYe,GYe,bm,bne,OYe,VYe,MR,XYe,zYe,QYe,vm,vne,WYe,HYe,ER,UYe,JYe,YYe,Fm,Fne,KYe,ZYe,CR,eKe,oKe,rKe,Tm,Tne,tKe,aKe,wR,nKe,sKe,lKe,Mm,Mne,iKe,dKe,AR,cKe,fKe,mKe,Em,Ene,gKe,hKe,LR,pKe,_Ke,uKe,Cm,Cne,bKe,vKe,yR,FKe,TKe,MKe,wm,wne,EKe,CKe,xR,wKe,AKe,LKe,Am,Ane,yKe,xKe,$R,$Ke,kKe,SKe,Lm,Lne,RKe,PKe,kR,BKe,NKe,IKe,ym,yne,qKe,jKe,SR,DKe,GKe,OKe,xm,xne,VKe,XKe,RR,zKe,QKe,WKe,$m,$ne,HKe,UKe,PR,JKe,YKe,KKe,km,kne,ZKe,eZe,BR,oZe,rZe,tZe,Sm,Sne,aZe,nZe,NR,sZe,lZe,iZe,Rm,Rne,dZe,cZe,IR,fZe,mZe,gZe,Pm,Pne,hZe,pZe,qR,_Ze,uZe,bZe,Bm,Bne,vZe,FZe,jR,TZe,MZe,EZe,Nm,Nne,CZe,wZe,DR,AZe,LZe,yZe,Im,Ine,xZe,$Ze,GR,kZe,SZe,RZe,qm,qne,PZe,BZe,OR,NZe,IZe,qZe,jm,jne,jZe,DZe,VR,GZe,OZe,VZe,Dm,Dne,XZe,zZe,XR,QZe,WZe,HZe,Gm,Gne,UZe,JZe,zR,YZe,KZe,ZZe,Om,One,eeo,oeo,QR,reo,teo,aeo,Vm,Vne,neo,seo,WR,leo,ieo,deo,Xm,Xne,ceo,feo,HR,meo,geo,heo,zm,zne,peo,_eo,UR,ueo,beo,veo,Qm,Qne,Feo,Teo,JR,Meo,Eeo,Ceo,Wm,Wne,weo,Aeo,YR,Leo,yeo,xeo,Hm,Hne,$eo,keo,KR,Seo,Reo,Peo,Um,Une,Beo,Neo,ZR,Ieo,qeo,jeo,Jm,Jne,Deo,Geo,eP,Oeo,Veo,Xeo,Ym,Yne,zeo,Qeo,oP,Weo,Heo,Ueo,Km,Kne,Jeo,Yeo,rP,Keo,Zeo,eoo,Zm,Zne,ooo,roo,tP,too,aoo,noo,eg,ese,soo,loo,aP,ioo,doo,coo,og,ose,foo,moo,nP,goo,hoo,poo,rg,rse,_oo,uoo,sP,boo,voo,Foo,tg,tse,Too,Moo,lP,Eoo,Coo,woo,ag,ase,Aoo,Loo,iP,yoo,xoo,$oo,ng,nse,koo,Soo,dP,Roo,Poo,Boo,sg,sse,Noo,Ioo,cP,qoo,joo,Doo,lg,lse,Goo,Ooo,fP,Voo,Xoo,zoo,ig,ise,Qoo,Woo,mP,Hoo,Uoo,Joo,dg,dse,Yoo,Koo,gP,Zoo,ero,oro,cg,cse,rro,tro,hP,aro,nro,sro,fg,fse,lro,iro,pP,dro,cro,fro,mg,mse,mro,gro,_P,hro,pro,_ro,gg,gse,uro,bro,uP,vro,Fro,Tro,hg,hse,Mro,Ero,bP,Cro,wro,Aro,pg,pse,Lro,yro,vP,xro,$ro,kro,_g,_se,Sro,Rro,FP,Pro,Bro,Nro,ug,use,Iro,qro,TP,jro,Dro,Gro,bg,bse,Oro,Vro,MP,Xro,zro,Qro,vg,vse,Wro,Hro,EP,Uro,Jro,Yro,Fg,Fse,Kro,Zro,CP,eto,oto,rto,Tg,Tse,tto,ato,wP,nto,sto,lto,Mg,Mse,ito,dto,AP,cto,fto,mto,Eg,Ese,gto,hto,LP,pto,_to,uto,Cg,Cse,bto,vto,yP,Fto,Tto,Mto,wg,wse,Eto,Cto,xP,wto,Ato,Lto,Ag,Ase,yto,xto,$P,$to,kto,Sto,Lg,Lse,Rto,Pto,kP,Bto,Nto,Ito,yg,yse,qto,jto,SP,Dto,Gto,Oto,xg,xse,Vto,Xto,RP,zto,Qto,Wto,$g,$se,Hto,Uto,PP,Jto,Yto,Kto,kg,kse,Zto,eao,BP,oao,rao,tao,Sg,Sse,aao,nao,NP,sao,lao,iao,Rg,Rse,dao,cao,IP,fao,mao,gao,Pg,Pse,hao,pao,qP,_ao,uao,bao,Bg,Bse,vao,Fao,jP,Tao,Mao,Eao,Ng,Nse,Cao,wao,DP,Aao,Lao,yao,Ig,Ise,xao,$ao,GP,kao,Sao,Rao,qg,qse,Pao,Bao,OP,Nao,Iao,qao,jg,jse,jao,Dao,VP,Gao,Oao,Vao,Dg,Dse,Xao,zao,XP,Qao,Wao,Hao,Gg,Gse,Uao,Jao,zP,Yao,Kao,Zao,Og,Ose,eno,ono,QP,rno,tno,ano,Vg,Vse,nno,sno,WP,lno,ino,dno,Xg,Xse,cno,fno,HP,mno,gno,hno,zg,zse,pno,_no,UP,uno,bno,vno,Qg,Qse,Fno,Tno,JP,Mno,Eno,Cno,Wg,Wse,wno,Ano,YP,Lno,yno,xno,Hg,Hse,$no,kno,KP,Sno,Rno,Pno,Ug,Use,Bno,Nno,ZP,Ino,qno,jno,Jg,Jse,Dno,Gno,eB,Ono,Vno,Xno,Yg,Yse,zno,Qno,oB,Wno,Hno,Uno,Kg,Jno,Zg,h6,Yno,Kse,Kno,uXe,qi,eh,Zse,p6,Zno,ele,eso,bXe,Lo,_6,oso,u6,rso,rB,tso,aso,nso,b6,sso,ole,lso,iso,dso,yr,v6,cso,rle,fso,mso,Pa,gso,tle,hso,pso,ale,_so,uso,nle,bso,vso,Fso,k,jn,sle,Tso,Mso,tB,Eso,Cso,aB,wso,Aso,Lso,Dn,lle,yso,xso,nB,$so,kso,sB,Sso,Rso,Pso,Gn,ile,Bso,Nso,lB,Iso,qso,iB,jso,Dso,Gso,oh,dle,Oso,Vso,dB,Xso,zso,Qso,On,cle,Wso,Hso,cB,Uso,Jso,fB,Yso,Kso,Zso,rh,fle,elo,olo,mB,rlo,tlo,alo,th,mle,nlo,slo,gB,llo,ilo,dlo,ah,gle,clo,flo,hB,mlo,glo,hlo,Vn,hle,plo,_lo,pB,ulo,blo,_B,vlo,Flo,Tlo,Xn,ple,Mlo,Elo,uB,Clo,wlo,bB,Alo,Llo,ylo,zn,_le,xlo,$lo,vB,klo,Slo,FB,Rlo,Plo,Blo,nh,ule,Nlo,Ilo,TB,qlo,jlo,Dlo,sh,ble,Glo,Olo,MB,Vlo,Xlo,zlo,lh,vle,Qlo,Wlo,EB,Hlo,Ulo,Jlo,Qn,Fle,Ylo,Klo,CB,Zlo,eio,wB,oio,rio,tio,ih,Tle,aio,nio,AB,sio,lio,iio,Wn,Mle,dio,cio,LB,fio,mio,yB,gio,hio,pio,Hn,Ele,_io,uio,xB,bio,vio,$B,Fio,Tio,Mio,Un,Cle,Eio,Cio,kB,wio,Aio,SB,Lio,yio,xio,Jn,wle,$io,kio,RB,Sio,Rio,PB,Pio,Bio,Nio,dh,Ale,Iio,qio,BB,jio,Dio,Gio,Yn,Lle,Oio,Vio,NB,Xio,zio,IB,Qio,Wio,Hio,Kn,yle,Uio,Jio,qB,Yio,Kio,jB,Zio,edo,odo,Zn,xle,rdo,tdo,DB,ado,ndo,GB,sdo,ldo,ido,es,$le,ddo,cdo,OB,fdo,mdo,VB,gdo,hdo,pdo,os,kle,_do,udo,XB,bdo,vdo,zB,Fdo,Tdo,Mdo,rs,Sle,Edo,Cdo,QB,wdo,Ado,WB,Ldo,ydo,xdo,ch,Rle,$do,kdo,HB,Sdo,Rdo,Pdo,ts,Ple,Bdo,Ndo,UB,Ido,qdo,JB,jdo,Ddo,Gdo,fh,Ble,Odo,Vdo,YB,Xdo,zdo,Qdo,as,Nle,Wdo,Hdo,KB,Udo,Jdo,ZB,Ydo,Kdo,Zdo,ns,Ile,eco,oco,eN,rco,tco,oN,aco,nco,sco,ss,qle,lco,ico,rN,dco,cco,tN,fco,mco,gco,mh,jle,hco,pco,aN,_co,uco,bco,ls,Dle,vco,Fco,nN,Tco,Mco,sN,Eco,Cco,wco,is,Gle,Aco,Lco,lN,yco,xco,iN,$co,kco,Sco,ds,Ole,Rco,Pco,dN,Bco,Nco,cN,Ico,qco,jco,gh,Vle,Dco,Gco,fN,Oco,Vco,Xco,cs,Xle,zco,Qco,mN,Wco,Hco,gN,Uco,Jco,Yco,fs,zle,Kco,Zco,hN,efo,ofo,pN,rfo,tfo,afo,ms,Qle,nfo,sfo,_N,lfo,ifo,uN,dfo,cfo,ffo,gs,Wle,mfo,gfo,bN,hfo,pfo,vN,_fo,ufo,bfo,hs,Hle,vfo,Ffo,FN,Tfo,Mfo,TN,Efo,Cfo,wfo,ps,Ule,Afo,Lfo,MN,yfo,xfo,EN,$fo,kfo,Sfo,_s,Jle,Rfo,Pfo,CN,Bfo,Nfo,wN,Ifo,qfo,jfo,us,Yle,Dfo,Gfo,AN,Ofo,Vfo,LN,Xfo,zfo,Qfo,hh,Kle,Wfo,Hfo,yN,Ufo,Jfo,Yfo,bs,Zle,Kfo,Zfo,xN,emo,omo,$N,rmo,tmo,amo,ph,eie,nmo,smo,kN,lmo,imo,dmo,_h,oie,cmo,fmo,SN,mmo,gmo,hmo,vs,rie,pmo,_mo,RN,umo,bmo,PN,vmo,Fmo,Tmo,Fs,tie,Mmo,Emo,BN,Cmo,wmo,NN,Amo,Lmo,ymo,Ts,aie,xmo,$mo,IN,kmo,Smo,qN,Rmo,Pmo,Bmo,uh,nie,Nmo,Imo,jN,qmo,jmo,Dmo,Ms,sie,Gmo,Omo,DN,Vmo,Xmo,GN,zmo,Qmo,Wmo,Es,lie,Hmo,Umo,ON,Jmo,Ymo,VN,Kmo,Zmo,ego,Cs,iie,ogo,rgo,XN,tgo,ago,zN,ngo,sgo,lgo,ws,die,igo,dgo,QN,cgo,fgo,WN,mgo,ggo,hgo,As,cie,pgo,_go,HN,ugo,bgo,UN,vgo,Fgo,Tgo,Ls,fie,Mgo,Ego,JN,Cgo,wgo,YN,Ago,Lgo,ygo,ys,mie,xgo,$go,KN,kgo,Sgo,ZN,Rgo,Pgo,Bgo,xs,gie,Ngo,Igo,eI,qgo,jgo,oI,Dgo,Ggo,Ogo,bh,hie,Vgo,Xgo,rI,zgo,Qgo,Wgo,$s,pie,Hgo,Ugo,tI,Jgo,Ygo,aI,Kgo,Zgo,eho,vh,_ie,oho,rho,nI,tho,aho,nho,Fh,uie,sho,lho,sI,iho,dho,cho,Th,bie,fho,mho,lI,gho,hho,pho,Mh,vie,_ho,uho,iI,bho,vho,Fho,ks,Fie,Tho,Mho,dI,Eho,Cho,cI,who,Aho,Lho,Eh,Tie,yho,xho,fI,$ho,kho,Sho,Ss,Mie,Rho,Pho,mI,Bho,Nho,gI,Iho,qho,jho,Rs,Eie,Dho,Gho,hI,Oho,Vho,pI,Xho,zho,Qho,Ps,Cie,Who,Hho,_I,Uho,Jho,uI,Yho,Kho,Zho,Bs,wie,epo,opo,bI,rpo,tpo,vI,apo,npo,spo,Ns,Aie,lpo,ipo,FI,dpo,cpo,TI,fpo,mpo,gpo,Is,Lie,hpo,ppo,MI,_po,upo,EI,bpo,vpo,Fpo,Ch,yie,Tpo,Mpo,CI,Epo,Cpo,wpo,wh,xie,Apo,Lpo,wI,ypo,xpo,$po,qs,$ie,kpo,Spo,AI,Rpo,Ppo,LI,Bpo,Npo,Ipo,js,kie,qpo,jpo,yI,Dpo,Gpo,xI,Opo,Vpo,Xpo,Ds,Sie,zpo,Qpo,$I,Wpo,Hpo,kI,Upo,Jpo,Ypo,Ah,Rie,Kpo,Zpo,SI,e_o,o_o,r_o,Lh,Pie,t_o,a_o,RI,n_o,s_o,l_o,yh,Bie,i_o,d_o,PI,c_o,f_o,m_o,Gs,Nie,g_o,h_o,BI,p_o,__o,NI,u_o,b_o,v_o,Os,Iie,F_o,T_o,II,M_o,E_o,qI,C_o,w_o,A_o,xh,qie,L_o,y_o,jI,x_o,$_o,k_o,$h,jie,S_o,R_o,DI,P_o,B_o,N_o,kh,Die,I_o,q_o,GI,j_o,D_o,G_o,Vs,Gie,O_o,V_o,OI,X_o,z_o,VI,Q_o,W_o,H_o,Sh,Oie,U_o,J_o,XI,Y_o,K_o,Z_o,Rh,Vie,euo,ouo,zI,ruo,tuo,auo,Xs,Xie,nuo,suo,QI,luo,iuo,WI,duo,cuo,fuo,zs,zie,muo,guo,HI,huo,puo,UI,_uo,uuo,buo,Qs,Qie,vuo,Fuo,JI,Tuo,Muo,YI,Euo,Cuo,wuo,Ws,Wie,Auo,Luo,KI,yuo,xuo,ZI,$uo,kuo,Suo,Ph,Ruo,Bh,F6,Puo,Hie,Buo,vXe,ji,Nh,Uie,T6,Nuo,Jie,Iuo,FXe,yo,M6,quo,E6,juo,eq,Duo,Guo,Ouo,C6,Vuo,Yie,Xuo,zuo,Quo,Ue,w6,Wuo,Kie,Huo,Uuo,Ba,Juo,Zie,Yuo,Kuo,ede,Zuo,e1o,ode,o1o,r1o,t1o,Y,Ih,rde,a1o,n1o,oq,s1o,l1o,i1o,qh,tde,d1o,c1o,rq,f1o,m1o,g1o,jh,ade,h1o,p1o,tq,_1o,u1o,b1o,Dh,nde,v1o,F1o,aq,T1o,M1o,E1o,Gh,sde,C1o,w1o,nq,A1o,L1o,y1o,Oh,lde,x1o,$1o,sq,k1o,S1o,R1o,Vh,ide,P1o,B1o,lq,N1o,I1o,q1o,Xh,dde,j1o,D1o,iq,G1o,O1o,V1o,zh,cde,X1o,z1o,dq,Q1o,W1o,H1o,Qh,fde,U1o,J1o,cq,Y1o,K1o,Z1o,Wh,mde,e2o,o2o,fq,r2o,t2o,a2o,Hh,gde,n2o,s2o,mq,l2o,i2o,d2o,Uh,hde,c2o,f2o,gq,m2o,g2o,h2o,Jh,pde,p2o,_2o,hq,u2o,b2o,v2o,Yh,_de,F2o,T2o,pq,M2o,E2o,C2o,Kh,ude,w2o,A2o,_q,L2o,y2o,x2o,Zh,bde,$2o,k2o,uq,S2o,R2o,P2o,ep,vde,B2o,N2o,bq,I2o,q2o,j2o,op,Fde,D2o,G2o,vq,O2o,V2o,X2o,rp,Tde,z2o,Q2o,Fq,W2o,H2o,U2o,tp,Mde,J2o,Y2o,Tq,K2o,Z2o,ebo,ap,Ede,obo,rbo,Mq,tbo,abo,nbo,np,Cde,sbo,lbo,Eq,ibo,dbo,cbo,sp,wde,fbo,mbo,Cq,gbo,hbo,pbo,lp,Ade,_bo,ubo,wq,bbo,vbo,Fbo,ip,Lde,Tbo,Mbo,Aq,Ebo,Cbo,wbo,dp,yde,Abo,Lbo,Lq,ybo,xbo,$bo,cp,xde,kbo,Sbo,yq,Rbo,Pbo,Bbo,fp,$de,Nbo,Ibo,xq,qbo,jbo,Dbo,mp,kde,Gbo,Obo,$q,Vbo,Xbo,zbo,gp,Sde,Qbo,Wbo,kq,Hbo,Ubo,Jbo,hp,Rde,Ybo,Kbo,Sq,Zbo,evo,ovo,pp,Pde,rvo,tvo,Rq,avo,nvo,svo,_p,Bde,lvo,ivo,Pq,dvo,cvo,fvo,up,mvo,bp,gvo,vp,A6,hvo,Nde,pvo,TXe,Di,Fp,Ide,L6,_vo,qde,uvo,MXe,xo,y6,bvo,x6,vvo,Bq,Fvo,Tvo,Mvo,$6,Evo,jde,Cvo,wvo,Avo,Je,k6,Lvo,Dde,yvo,xvo,Gi,$vo,Gde,kvo,Svo,Ode,Rvo,Pvo,Bvo,pe,Tp,Vde,Nvo,Ivo,Nq,qvo,jvo,Dvo,Mp,Xde,Gvo,Ovo,zde,Vvo,Xvo,zvo,Ep,Qde,Qvo,Wvo,Iq,Hvo,Uvo,Jvo,Cp,Wde,Yvo,Kvo,qq,Zvo,e0o,o0o,wp,Hde,r0o,t0o,jq,a0o,n0o,s0o,Ap,Ude,l0o,i0o,Dq,d0o,c0o,f0o,Lp,Jde,m0o,g0o,Gq,h0o,p0o,_0o,yp,Yde,u0o,b0o,Oq,v0o,F0o,T0o,xp,Kde,M0o,E0o,Vq,C0o,w0o,A0o,$p,Zde,L0o,y0o,Xq,x0o,$0o,k0o,kp,ece,S0o,R0o,zq,P0o,B0o,N0o,Sp,oce,I0o,q0o,Qq,j0o,D0o,G0o,Rp,rce,O0o,V0o,Wq,X0o,z0o,Q0o,Pp,tce,W0o,H0o,Hq,U0o,J0o,Y0o,Bp,ace,K0o,Z0o,Uq,eFo,oFo,rFo,Np,nce,tFo,aFo,Jq,nFo,sFo,lFo,Ip,sce,iFo,dFo,Yq,cFo,fFo,mFo,qp,lce,gFo,hFo,Kq,pFo,_Fo,uFo,jp,bFo,Dp,vFo,Gp,S6,FFo,ice,TFo,EXe,Oi,Op,dce,R6,MFo,cce,EFo,CXe,$o,P6,CFo,Vi,wFo,Zq,AFo,LFo,ej,yFo,xFo,$Fo,B6,kFo,fce,SFo,RFo,PFo,it,N6,BFo,mce,NFo,IFo,Xi,qFo,gce,jFo,DFo,oj,GFo,OFo,VFo,Vp,XFo,Ye,I6,zFo,hce,QFo,WFo,Na,HFo,pce,UFo,JFo,_ce,YFo,KFo,uce,ZFo,eTo,oTo,y,Xp,bce,rTo,tTo,rj,aTo,nTo,sTo,zp,vce,lTo,iTo,tj,dTo,cTo,fTo,Qp,Fce,mTo,gTo,aj,hTo,pTo,_To,Wp,Tce,uTo,bTo,nj,vTo,FTo,TTo,Hp,Mce,MTo,ETo,sj,CTo,wTo,ATo,Up,Ece,LTo,yTo,lj,xTo,$To,kTo,Jp,Cce,STo,RTo,ij,PTo,BTo,NTo,Yp,wce,ITo,qTo,dj,jTo,DTo,GTo,Kp,Ace,OTo,VTo,cj,XTo,zTo,QTo,Zp,Lce,WTo,HTo,fj,UTo,JTo,YTo,e_,yce,KTo,ZTo,mj,e7o,o7o,r7o,o_,xce,t7o,a7o,gj,n7o,s7o,l7o,r_,$ce,i7o,d7o,hj,c7o,f7o,m7o,t_,kce,g7o,h7o,pj,p7o,_7o,u7o,a_,Sce,b7o,v7o,_j,F7o,T7o,M7o,n_,Rce,E7o,C7o,uj,w7o,A7o,L7o,s_,Pce,y7o,x7o,bj,$7o,k7o,S7o,l_,Bce,R7o,P7o,vj,B7o,N7o,I7o,i_,Nce,q7o,j7o,Fj,D7o,G7o,O7o,d_,Ice,V7o,X7o,Tj,z7o,Q7o,W7o,c_,qce,H7o,U7o,Mj,J7o,Y7o,K7o,f_,jce,Z7o,e8o,Ej,o8o,r8o,t8o,m_,Dce,a8o,n8o,Cj,s8o,l8o,i8o,g_,Gce,d8o,c8o,wj,f8o,m8o,g8o,h_,Oce,h8o,p8o,Aj,_8o,u8o,b8o,p_,Vce,v8o,F8o,Lj,T8o,M8o,E8o,__,Xce,C8o,w8o,yj,A8o,L8o,y8o,u_,zce,x8o,$8o,xj,k8o,S8o,R8o,b_,Qce,P8o,B8o,$j,N8o,I8o,q8o,v_,Wce,j8o,D8o,kj,G8o,O8o,V8o,F_,Hce,X8o,z8o,Sj,Q8o,W8o,H8o,T_,Uce,U8o,J8o,Rj,Y8o,K8o,Z8o,M_,Jce,e9o,o9o,Pj,r9o,t9o,a9o,E_,Yce,n9o,s9o,Bj,l9o,i9o,d9o,Hs,Kce,c9o,f9o,Nj,m9o,g9o,Ij,h9o,p9o,_9o,C_,Zce,u9o,b9o,qj,v9o,F9o,T9o,w_,efe,M9o,E9o,jj,C9o,w9o,A9o,A_,ofe,L9o,y9o,Dj,x9o,$9o,k9o,L_,rfe,S9o,R9o,Gj,P9o,B9o,N9o,y_,tfe,I9o,q9o,Oj,j9o,D9o,G9o,x_,afe,O9o,V9o,Vj,X9o,z9o,Q9o,$_,nfe,W9o,H9o,Xj,U9o,J9o,Y9o,k_,sfe,K9o,Z9o,zj,eMo,oMo,rMo,S_,lfe,tMo,aMo,Qj,nMo,sMo,lMo,R_,ife,iMo,dMo,Wj,cMo,fMo,mMo,P_,dfe,gMo,hMo,Hj,pMo,_Mo,uMo,B_,cfe,bMo,vMo,Uj,FMo,TMo,MMo,N_,ffe,EMo,CMo,Jj,wMo,AMo,LMo,I_,mfe,yMo,xMo,Yj,$Mo,kMo,SMo,q_,gfe,RMo,PMo,Kj,BMo,NMo,IMo,j_,hfe,qMo,jMo,Zj,DMo,GMo,OMo,D_,pfe,VMo,XMo,eD,zMo,QMo,WMo,G_,_fe,HMo,UMo,oD,JMo,YMo,KMo,O_,ufe,ZMo,e4o,rD,o4o,r4o,t4o,V_,bfe,a4o,n4o,tD,s4o,l4o,i4o,X_,vfe,d4o,c4o,aD,f4o,m4o,g4o,z_,Ffe,h4o,p4o,nD,_4o,u4o,b4o,Q_,Tfe,v4o,F4o,sD,T4o,M4o,E4o,W_,Mfe,C4o,w4o,lD,A4o,L4o,y4o,H_,Efe,x4o,$4o,iD,k4o,S4o,R4o,U_,Cfe,P4o,B4o,dD,N4o,I4o,q4o,J_,wfe,j4o,D4o,cD,G4o,O4o,V4o,Y_,Afe,X4o,z4o,fD,Q4o,W4o,H4o,K_,Lfe,U4o,J4o,mD,Y4o,K4o,Z4o,Z_,yfe,eEo,oEo,gD,rEo,tEo,aEo,eu,xfe,nEo,sEo,hD,lEo,iEo,dEo,ou,$fe,cEo,fEo,pD,mEo,gEo,hEo,ru,kfe,pEo,_Eo,_D,uEo,bEo,vEo,tu,Sfe,FEo,TEo,uD,MEo,EEo,CEo,au,Rfe,wEo,AEo,bD,LEo,yEo,xEo,nu,Pfe,$Eo,kEo,vD,SEo,REo,PEo,su,Bfe,BEo,NEo,FD,IEo,qEo,jEo,lu,Nfe,DEo,GEo,TD,OEo,VEo,XEo,iu,Ife,zEo,QEo,MD,WEo,HEo,UEo,du,qfe,JEo,YEo,ED,KEo,ZEo,eCo,cu,jfe,oCo,rCo,CD,tCo,aCo,nCo,fu,Dfe,sCo,lCo,wD,iCo,dCo,cCo,mu,Gfe,fCo,mCo,AD,gCo,hCo,pCo,gu,Ofe,_Co,uCo,LD,bCo,vCo,FCo,hu,Vfe,TCo,MCo,yD,ECo,CCo,wCo,pu,Xfe,ACo,LCo,xD,yCo,xCo,$Co,_u,zfe,kCo,SCo,$D,RCo,PCo,BCo,uu,Qfe,NCo,ICo,kD,qCo,jCo,DCo,bu,Wfe,GCo,OCo,SD,VCo,XCo,zCo,vu,Hfe,QCo,WCo,RD,HCo,UCo,JCo,Fu,Ufe,YCo,KCo,PD,ZCo,e3o,o3o,Tu,Jfe,r3o,t3o,BD,a3o,n3o,s3o,Mu,Yfe,l3o,i3o,ND,d3o,c3o,f3o,Eu,Kfe,m3o,g3o,ID,h3o,p3o,_3o,Cu,Zfe,u3o,b3o,qD,v3o,F3o,T3o,wu,eme,M3o,E3o,jD,C3o,w3o,A3o,Au,ome,L3o,y3o,DD,x3o,$3o,k3o,Lu,rme,S3o,R3o,GD,P3o,B3o,N3o,yu,tme,I3o,q3o,OD,j3o,D3o,G3o,xu,ame,O3o,V3o,VD,X3o,z3o,Q3o,$u,nme,W3o,H3o,XD,U3o,J3o,Y3o,ku,sme,K3o,Z3o,zD,e5o,o5o,r5o,Su,lme,t5o,a5o,QD,n5o,s5o,l5o,Ru,ime,i5o,d5o,WD,c5o,f5o,m5o,Pu,dme,g5o,h5o,HD,p5o,_5o,u5o,Bu,cme,b5o,v5o,UD,F5o,T5o,M5o,Nu,fme,E5o,C5o,JD,w5o,A5o,L5o,Iu,mme,y5o,x5o,YD,$5o,k5o,S5o,qu,gme,R5o,P5o,KD,B5o,N5o,I5o,ju,hme,q5o,j5o,ZD,D5o,G5o,O5o,Du,pme,V5o,X5o,eG,z5o,Q5o,W5o,Gu,_me,H5o,U5o,oG,J5o,Y5o,K5o,Ou,ume,Z5o,ewo,rG,owo,rwo,two,Vu,bme,awo,nwo,tG,swo,lwo,iwo,Xu,vme,dwo,cwo,aG,fwo,mwo,gwo,zu,Fme,hwo,pwo,nG,_wo,uwo,bwo,Qu,Tme,vwo,Fwo,sG,Two,Mwo,Ewo,Wu,Cwo,Mme,wwo,Awo,Eme,Lwo,ywo,Hu,wXe,zi,Uu,Cme,q6,xwo,wme,$wo,AXe,ko,j6,kwo,Qi,Swo,lG,Rwo,Pwo,iG,Bwo,Nwo,Iwo,D6,qwo,Ame,jwo,Dwo,Gwo,dt,G6,Owo,Lme,Vwo,Xwo,Wi,zwo,yme,Qwo,Wwo,dG,Hwo,Uwo,Jwo,Ju,Ywo,Ke,O6,Kwo,xme,Zwo,eAo,Ia,oAo,$me,rAo,tAo,kme,aAo,nAo,Sme,sAo,lAo,iAo,G,Yu,Rme,dAo,cAo,cG,fAo,mAo,gAo,Ku,Pme,hAo,pAo,fG,_Ao,uAo,bAo,Zu,Bme,vAo,FAo,mG,TAo,MAo,EAo,e1,Nme,CAo,wAo,gG,AAo,LAo,yAo,o1,Ime,xAo,$Ao,hG,kAo,SAo,RAo,r1,qme,PAo,BAo,pG,NAo,IAo,qAo,t1,jme,jAo,DAo,_G,GAo,OAo,VAo,a1,Dme,XAo,zAo,uG,QAo,WAo,HAo,n1,Gme,UAo,JAo,bG,YAo,KAo,ZAo,s1,Ome,e6o,o6o,vG,r6o,t6o,a6o,l1,Vme,n6o,s6o,FG,l6o,i6o,d6o,i1,Xme,c6o,f6o,TG,m6o,g6o,h6o,d1,zme,p6o,_6o,MG,u6o,b6o,v6o,c1,Qme,F6o,T6o,EG,M6o,E6o,C6o,f1,Wme,w6o,A6o,CG,L6o,y6o,x6o,m1,Hme,$6o,k6o,wG,S6o,R6o,P6o,g1,Ume,B6o,N6o,AG,I6o,q6o,j6o,h1,Jme,D6o,G6o,LG,O6o,V6o,X6o,p1,Yme,z6o,Q6o,yG,W6o,H6o,U6o,_1,Kme,J6o,Y6o,xG,K6o,Z6o,eLo,u1,Zme,oLo,rLo,$G,tLo,aLo,nLo,b1,ege,sLo,lLo,kG,iLo,dLo,cLo,v1,oge,fLo,mLo,SG,gLo,hLo,pLo,F1,rge,_Lo,uLo,RG,bLo,vLo,FLo,T1,tge,TLo,MLo,PG,ELo,CLo,wLo,M1,age,ALo,LLo,BG,yLo,xLo,$Lo,E1,nge,kLo,SLo,NG,RLo,PLo,BLo,C1,sge,NLo,ILo,IG,qLo,jLo,DLo,w1,lge,GLo,OLo,qG,VLo,XLo,zLo,A1,ige,QLo,WLo,jG,HLo,ULo,JLo,L1,dge,YLo,KLo,DG,ZLo,eyo,oyo,y1,cge,ryo,tyo,GG,ayo,nyo,syo,x1,fge,lyo,iyo,OG,dyo,cyo,fyo,$1,mge,myo,gyo,VG,hyo,pyo,_yo,k1,gge,uyo,byo,XG,vyo,Fyo,Tyo,S1,hge,Myo,Eyo,zG,Cyo,wyo,Ayo,R1,pge,Lyo,yyo,QG,xyo,$yo,kyo,P1,_ge,Syo,Ryo,WG,Pyo,Byo,Nyo,B1,uge,Iyo,qyo,HG,jyo,Dyo,Gyo,N1,bge,Oyo,Vyo,UG,Xyo,zyo,Qyo,I1,vge,Wyo,Hyo,JG,Uyo,Jyo,Yyo,q1,Fge,Kyo,Zyo,YG,exo,oxo,rxo,j1,Tge,txo,axo,KG,nxo,sxo,lxo,D1,Mge,ixo,dxo,ZG,cxo,fxo,mxo,G1,Ege,gxo,hxo,eO,pxo,_xo,uxo,O1,bxo,Cge,vxo,Fxo,wge,Txo,Mxo,V1,LXe,Hi,X1,Age,V6,Exo,Lge,Cxo,yXe,So,X6,wxo,Ui,Axo,oO,Lxo,yxo,rO,xxo,$xo,kxo,z6,Sxo,yge,Rxo,Pxo,Bxo,ct,Q6,Nxo,xge,Ixo,qxo,Ji,jxo,$ge,Dxo,Gxo,tO,Oxo,Vxo,Xxo,z1,zxo,Ze,W6,Qxo,kge,Wxo,Hxo,qa,Uxo,Sge,Jxo,Yxo,Rge,Kxo,Zxo,Pge,e$o,o$o,r$o,z,Q1,Bge,t$o,a$o,aO,n$o,s$o,l$o,W1,Nge,i$o,d$o,nO,c$o,f$o,m$o,H1,Ige,g$o,h$o,sO,p$o,_$o,u$o,U1,qge,b$o,v$o,lO,F$o,T$o,M$o,J1,jge,E$o,C$o,iO,w$o,A$o,L$o,Y1,Dge,y$o,x$o,dO,$$o,k$o,S$o,K1,Gge,R$o,P$o,cO,B$o,N$o,I$o,Z1,Oge,q$o,j$o,fO,D$o,G$o,O$o,e2,Vge,V$o,X$o,mO,z$o,Q$o,W$o,o2,Xge,H$o,U$o,gO,J$o,Y$o,K$o,r2,zge,Z$o,eko,hO,oko,rko,tko,t2,Qge,ako,nko,pO,sko,lko,iko,a2,Wge,dko,cko,_O,fko,mko,gko,n2,Hge,hko,pko,uO,_ko,uko,bko,s2,Uge,vko,Fko,bO,Tko,Mko,Eko,l2,Jge,Cko,wko,vO,Ako,Lko,yko,i2,Yge,xko,$ko,FO,kko,Sko,Rko,d2,Kge,Pko,Bko,TO,Nko,Iko,qko,c2,Zge,jko,Dko,MO,Gko,Oko,Vko,f2,ehe,Xko,zko,EO,Qko,Wko,Hko,m2,ohe,Uko,Jko,CO,Yko,Kko,Zko,g2,rhe,eSo,oSo,wO,rSo,tSo,aSo,h2,the,nSo,sSo,AO,lSo,iSo,dSo,p2,ahe,cSo,fSo,LO,mSo,gSo,hSo,_2,nhe,pSo,_So,yO,uSo,bSo,vSo,u2,she,FSo,TSo,xO,MSo,ESo,CSo,b2,lhe,wSo,ASo,$O,LSo,ySo,xSo,v2,ihe,$So,kSo,kO,SSo,RSo,PSo,F2,dhe,BSo,NSo,SO,ISo,qSo,jSo,T2,che,DSo,GSo,RO,OSo,VSo,XSo,M2,fhe,zSo,QSo,PO,WSo,HSo,USo,E2,mhe,JSo,YSo,BO,KSo,ZSo,eRo,C2,ghe,oRo,rRo,NO,tRo,aRo,nRo,w2,hhe,sRo,lRo,IO,iRo,dRo,cRo,A2,phe,fRo,mRo,qO,gRo,hRo,pRo,L2,_he,_Ro,uRo,jO,bRo,vRo,FRo,y2,uhe,TRo,MRo,DO,ERo,CRo,wRo,x2,bhe,ARo,LRo,GO,yRo,xRo,$Ro,$2,vhe,kRo,SRo,OO,RRo,PRo,BRo,k2,Fhe,NRo,IRo,VO,qRo,jRo,DRo,S2,GRo,The,ORo,VRo,Mhe,XRo,zRo,R2,xXe,Yi,P2,Ehe,H6,QRo,Che,WRo,$Xe,Ro,U6,HRo,Ki,URo,XO,JRo,YRo,zO,KRo,ZRo,ePo,J6,oPo,whe,rPo,tPo,aPo,ft,Y6,nPo,Ahe,sPo,lPo,Zi,iPo,Lhe,dPo,cPo,QO,fPo,mPo,gPo,B2,hPo,eo,K6,pPo,yhe,_Po,uPo,ja,bPo,xhe,vPo,FPo,$he,TPo,MPo,khe,EPo,CPo,wPo,W,N2,She,APo,LPo,WO,yPo,xPo,$Po,I2,Rhe,kPo,SPo,HO,RPo,PPo,BPo,q2,Phe,NPo,IPo,UO,qPo,jPo,DPo,j2,Bhe,GPo,OPo,JO,VPo,XPo,zPo,D2,Nhe,QPo,WPo,YO,HPo,UPo,JPo,G2,Ihe,YPo,KPo,KO,ZPo,eBo,oBo,O2,qhe,rBo,tBo,ZO,aBo,nBo,sBo,V2,jhe,lBo,iBo,eV,dBo,cBo,fBo,X2,Dhe,mBo,gBo,oV,hBo,pBo,_Bo,z2,Ghe,uBo,bBo,rV,vBo,FBo,TBo,Q2,Ohe,MBo,EBo,tV,CBo,wBo,ABo,W2,Vhe,LBo,yBo,aV,xBo,$Bo,kBo,H2,Xhe,SBo,RBo,nV,PBo,BBo,NBo,U2,zhe,IBo,qBo,sV,jBo,DBo,GBo,J2,Qhe,OBo,VBo,lV,XBo,zBo,QBo,Y2,Whe,WBo,HBo,iV,UBo,JBo,YBo,K2,Hhe,KBo,ZBo,dV,eNo,oNo,rNo,Z2,Uhe,tNo,aNo,cV,nNo,sNo,lNo,eb,Jhe,iNo,dNo,fV,cNo,fNo,mNo,ob,Yhe,gNo,hNo,mV,pNo,_No,uNo,rb,Khe,bNo,vNo,gV,FNo,TNo,MNo,tb,Zhe,ENo,CNo,hV,wNo,ANo,LNo,ab,epe,yNo,xNo,pV,$No,kNo,SNo,nb,ope,RNo,PNo,_V,BNo,NNo,INo,sb,rpe,qNo,jNo,uV,DNo,GNo,ONo,lb,tpe,VNo,XNo,bV,zNo,QNo,WNo,ib,ape,HNo,UNo,vV,JNo,YNo,KNo,db,npe,ZNo,eIo,FV,oIo,rIo,tIo,cb,spe,aIo,nIo,TV,sIo,lIo,iIo,fb,lpe,dIo,cIo,MV,fIo,mIo,gIo,mb,ipe,hIo,pIo,EV,_Io,uIo,bIo,gb,dpe,vIo,FIo,CV,TIo,MIo,EIo,hb,cpe,CIo,wIo,wV,AIo,LIo,yIo,pb,fpe,xIo,$Io,mpe,kIo,SIo,RIo,_b,gpe,PIo,BIo,AV,NIo,IIo,qIo,ub,hpe,jIo,DIo,LV,GIo,OIo,VIo,bb,ppe,XIo,zIo,yV,QIo,WIo,HIo,vb,_pe,UIo,JIo,xV,YIo,KIo,ZIo,Fb,eqo,upe,oqo,rqo,bpe,tqo,aqo,Tb,kXe,ed,Mb,vpe,Z6,nqo,Fpe,sqo,SXe,Po,eL,lqo,od,iqo,$V,dqo,cqo,kV,fqo,mqo,gqo,oL,hqo,Tpe,pqo,_qo,uqo,mt,rL,bqo,Mpe,vqo,Fqo,rd,Tqo,Epe,Mqo,Eqo,SV,Cqo,wqo,Aqo,Eb,Lqo,oo,tL,yqo,Cpe,xqo,$qo,Da,kqo,wpe,Sqo,Rqo,Ape,Pqo,Bqo,Lpe,Nqo,Iqo,qqo,fe,Cb,ype,jqo,Dqo,RV,Gqo,Oqo,Vqo,wb,xpe,Xqo,zqo,PV,Qqo,Wqo,Hqo,Ab,$pe,Uqo,Jqo,BV,Yqo,Kqo,Zqo,Lb,kpe,ejo,ojo,NV,rjo,tjo,ajo,yb,Spe,njo,sjo,IV,ljo,ijo,djo,xb,Rpe,cjo,fjo,qV,mjo,gjo,hjo,$b,Ppe,pjo,_jo,jV,ujo,bjo,vjo,kb,Bpe,Fjo,Tjo,DV,Mjo,Ejo,Cjo,Sb,Npe,wjo,Ajo,GV,Ljo,yjo,xjo,Rb,Ipe,$jo,kjo,OV,Sjo,Rjo,Pjo,Pb,qpe,Bjo,Njo,VV,Ijo,qjo,jjo,Bb,jpe,Djo,Gjo,XV,Ojo,Vjo,Xjo,Nb,Dpe,zjo,Qjo,zV,Wjo,Hjo,Ujo,Ib,Gpe,Jjo,Yjo,QV,Kjo,Zjo,eDo,qb,Ope,oDo,rDo,WV,tDo,aDo,nDo,jb,Vpe,sDo,lDo,HV,iDo,dDo,cDo,Db,Xpe,fDo,mDo,UV,gDo,hDo,pDo,Gb,zpe,_Do,uDo,JV,bDo,vDo,FDo,Ob,Qpe,TDo,MDo,YV,EDo,CDo,wDo,Vb,ADo,Wpe,LDo,yDo,Hpe,xDo,$Do,Xb,RXe,td,zb,Upe,aL,kDo,Jpe,SDo,PXe,Bo,nL,RDo,ad,PDo,KV,BDo,NDo,ZV,IDo,qDo,jDo,sL,DDo,Ype,GDo,ODo,VDo,gt,lL,XDo,Kpe,zDo,QDo,nd,WDo,Zpe,HDo,UDo,eX,JDo,YDo,KDo,Qb,ZDo,ro,iL,eGo,e_e,oGo,rGo,Ga,tGo,o_e,aGo,nGo,r_e,sGo,lGo,t_e,iGo,dGo,cGo,I,Wb,a_e,fGo,mGo,oX,gGo,hGo,pGo,Hb,n_e,_Go,uGo,rX,bGo,vGo,FGo,Ub,s_e,TGo,MGo,tX,EGo,CGo,wGo,Jb,l_e,AGo,LGo,aX,yGo,xGo,$Go,Yb,i_e,kGo,SGo,nX,RGo,PGo,BGo,Kb,d_e,NGo,IGo,sX,qGo,jGo,DGo,Zb,c_e,GGo,OGo,lX,VGo,XGo,zGo,ev,f_e,QGo,WGo,iX,HGo,UGo,JGo,ov,m_e,YGo,KGo,dX,ZGo,eOo,oOo,rv,g_e,rOo,tOo,cX,aOo,nOo,sOo,tv,h_e,lOo,iOo,fX,dOo,cOo,fOo,av,p_e,mOo,gOo,mX,hOo,pOo,_Oo,nv,__e,uOo,bOo,gX,vOo,FOo,TOo,sv,u_e,MOo,EOo,hX,COo,wOo,AOo,lv,b_e,LOo,yOo,pX,xOo,$Oo,kOo,iv,v_e,SOo,ROo,_X,POo,BOo,NOo,dv,F_e,IOo,qOo,uX,jOo,DOo,GOo,cv,T_e,OOo,VOo,bX,XOo,zOo,QOo,fv,M_e,WOo,HOo,vX,UOo,JOo,YOo,mv,E_e,KOo,ZOo,FX,eVo,oVo,rVo,gv,C_e,tVo,aVo,TX,nVo,sVo,lVo,hv,w_e,iVo,dVo,MX,cVo,fVo,mVo,pv,A_e,gVo,hVo,EX,pVo,_Vo,uVo,_v,L_e,bVo,vVo,CX,FVo,TVo,MVo,uv,y_e,EVo,CVo,wX,wVo,AVo,LVo,bv,x_e,yVo,xVo,AX,$Vo,kVo,SVo,vv,$_e,RVo,PVo,LX,BVo,NVo,IVo,Fv,k_e,qVo,jVo,yX,DVo,GVo,OVo,Tv,S_e,VVo,XVo,xX,zVo,QVo,WVo,Mv,R_e,HVo,UVo,$X,JVo,YVo,KVo,Ev,P_e,ZVo,eXo,kX,oXo,rXo,tXo,Cv,B_e,aXo,nXo,SX,sXo,lXo,iXo,wv,N_e,dXo,cXo,RX,fXo,mXo,gXo,Av,I_e,hXo,pXo,PX,_Xo,uXo,bXo,Lv,q_e,vXo,FXo,BX,TXo,MXo,EXo,yv,j_e,CXo,wXo,NX,AXo,LXo,yXo,xv,D_e,xXo,$Xo,IX,kXo,SXo,RXo,$v,G_e,PXo,BXo,qX,NXo,IXo,qXo,kv,O_e,jXo,DXo,jX,GXo,OXo,VXo,Sv,V_e,XXo,zXo,DX,QXo,WXo,HXo,Rv,X_e,UXo,JXo,GX,YXo,KXo,ZXo,Pv,z_e,ezo,ozo,OX,rzo,tzo,azo,Bv,Q_e,nzo,szo,VX,lzo,izo,dzo,Nv,W_e,czo,fzo,XX,mzo,gzo,hzo,Iv,H_e,pzo,_zo,zX,uzo,bzo,vzo,qv,U_e,Fzo,Tzo,QX,Mzo,Ezo,Czo,jv,J_e,wzo,Azo,WX,Lzo,yzo,xzo,Dv,Y_e,$zo,kzo,HX,Szo,Rzo,Pzo,Gv,K_e,Bzo,Nzo,UX,Izo,qzo,jzo,Ov,Z_e,Dzo,Gzo,JX,Ozo,Vzo,Xzo,Vv,zzo,eue,Qzo,Wzo,oue,Hzo,Uzo,Xv,BXe,sd,zv,rue,dL,Jzo,tue,Yzo,NXe,No,cL,Kzo,ld,Zzo,YX,eQo,oQo,KX,rQo,tQo,aQo,fL,nQo,aue,sQo,lQo,iQo,ht,mL,dQo,nue,cQo,fQo,id,mQo,sue,gQo,hQo,ZX,pQo,_Qo,uQo,Qv,bQo,to,gL,vQo,lue,FQo,TQo,Oa,MQo,iue,EQo,CQo,due,wQo,AQo,cue,LQo,yQo,xQo,Z,Wv,fue,$Qo,kQo,ez,SQo,RQo,PQo,Hv,mue,BQo,NQo,oz,IQo,qQo,jQo,Uv,gue,DQo,GQo,rz,OQo,VQo,XQo,Jv,hue,zQo,QQo,tz,WQo,HQo,UQo,Yv,pue,JQo,YQo,az,KQo,ZQo,eWo,Kv,_ue,oWo,rWo,nz,tWo,aWo,nWo,Zv,uue,sWo,lWo,sz,iWo,dWo,cWo,e0,bue,fWo,mWo,lz,gWo,hWo,pWo,o0,vue,_Wo,uWo,iz,bWo,vWo,FWo,r0,Fue,TWo,MWo,dz,EWo,CWo,wWo,t0,Tue,AWo,LWo,cz,yWo,xWo,$Wo,a0,Mue,kWo,SWo,fz,RWo,PWo,BWo,n0,Eue,NWo,IWo,mz,qWo,jWo,DWo,s0,Cue,GWo,OWo,gz,VWo,XWo,zWo,l0,wue,QWo,WWo,hz,HWo,UWo,JWo,i0,Aue,YWo,KWo,pz,ZWo,eHo,oHo,d0,Lue,rHo,tHo,_z,aHo,nHo,sHo,c0,yue,lHo,iHo,uz,dHo,cHo,fHo,f0,xue,mHo,gHo,bz,hHo,pHo,_Ho,m0,$ue,uHo,bHo,vz,vHo,FHo,THo,g0,kue,MHo,EHo,Fz,CHo,wHo,AHo,h0,Sue,LHo,yHo,Tz,xHo,$Ho,kHo,p0,Rue,SHo,RHo,Mz,PHo,BHo,NHo,_0,Pue,IHo,qHo,Ez,jHo,DHo,GHo,u0,Bue,OHo,VHo,Cz,XHo,zHo,QHo,b0,Nue,WHo,HHo,wz,UHo,JHo,YHo,v0,Iue,KHo,ZHo,Az,eUo,oUo,rUo,F0,que,tUo,aUo,Lz,nUo,sUo,lUo,T0,jue,iUo,dUo,yz,cUo,fUo,mUo,M0,Due,gUo,hUo,xz,pUo,_Uo,uUo,E0,bUo,Gue,vUo,FUo,Oue,TUo,MUo,C0,IXe,dd,w0,Vue,hL,EUo,Xue,CUo,qXe,Io,pL,wUo,cd,AUo,$z,LUo,yUo,kz,xUo,$Uo,kUo,_L,SUo,zue,RUo,PUo,BUo,pt,uL,NUo,Que,IUo,qUo,fd,jUo,Wue,DUo,GUo,Sz,OUo,VUo,XUo,A0,zUo,ao,bL,QUo,Hue,WUo,HUo,Va,UUo,Uue,JUo,YUo,Jue,KUo,ZUo,Yue,eJo,oJo,rJo,qo,L0,Kue,tJo,aJo,Rz,nJo,sJo,lJo,y0,Zue,iJo,dJo,Pz,cJo,fJo,mJo,x0,e1e,gJo,hJo,Bz,pJo,_Jo,uJo,$0,o1e,bJo,vJo,Nz,FJo,TJo,MJo,k0,r1e,EJo,CJo,Iz,wJo,AJo,LJo,S0,t1e,yJo,xJo,qz,$Jo,kJo,SJo,R0,RJo,a1e,PJo,BJo,n1e,NJo,IJo,P0,jXe,md,B0,s1e,vL,qJo,l1e,jJo,DXe,jo,FL,DJo,gd,GJo,jz,OJo,VJo,Dz,XJo,zJo,QJo,TL,WJo,i1e,HJo,UJo,JJo,_t,ML,YJo,d1e,KJo,ZJo,hd,eYo,c1e,oYo,rYo,Gz,tYo,aYo,nYo,N0,sYo,no,EL,lYo,f1e,iYo,dYo,Xa,cYo,m1e,fYo,mYo,g1e,gYo,hYo,h1e,pYo,_Yo,uYo,U,I0,p1e,bYo,vYo,Oz,FYo,TYo,MYo,q0,_1e,EYo,CYo,Vz,wYo,AYo,LYo,j0,u1e,yYo,xYo,Xz,$Yo,kYo,SYo,D0,b1e,RYo,PYo,zz,BYo,NYo,IYo,G0,v1e,qYo,jYo,Qz,DYo,GYo,OYo,O0,F1e,VYo,XYo,Wz,zYo,QYo,WYo,V0,T1e,HYo,UYo,Hz,JYo,YYo,KYo,X0,M1e,ZYo,eKo,Uz,oKo,rKo,tKo,z0,E1e,aKo,nKo,Jz,sKo,lKo,iKo,Q0,C1e,dKo,cKo,Yz,fKo,mKo,gKo,W0,w1e,hKo,pKo,Kz,_Ko,uKo,bKo,H0,A1e,vKo,FKo,Zz,TKo,MKo,EKo,U0,L1e,CKo,wKo,eQ,AKo,LKo,yKo,J0,y1e,xKo,$Ko,oQ,kKo,SKo,RKo,Y0,x1e,PKo,BKo,rQ,NKo,IKo,qKo,K0,$1e,jKo,DKo,tQ,GKo,OKo,VKo,Z0,k1e,XKo,zKo,aQ,QKo,WKo,HKo,eF,S1e,UKo,JKo,nQ,YKo,KKo,ZKo,oF,R1e,eZo,oZo,sQ,rZo,tZo,aZo,rF,P1e,nZo,sZo,lQ,lZo,iZo,dZo,tF,B1e,cZo,fZo,iQ,mZo,gZo,hZo,aF,N1e,pZo,_Zo,dQ,uZo,bZo,vZo,nF,I1e,FZo,TZo,cQ,MZo,EZo,CZo,sF,q1e,wZo,AZo,fQ,LZo,yZo,xZo,lF,j1e,$Zo,kZo,mQ,SZo,RZo,PZo,iF,D1e,BZo,NZo,gQ,IZo,qZo,jZo,dF,G1e,DZo,GZo,hQ,OZo,VZo,XZo,cF,O1e,zZo,QZo,pQ,WZo,HZo,UZo,fF,V1e,JZo,YZo,_Q,KZo,ZZo,eer,mF,X1e,oer,rer,uQ,ter,aer,ner,gF,z1e,ser,ler,bQ,ier,der,cer,hF,Q1e,fer,mer,vQ,ger,her,per,pF,W1e,_er,uer,FQ,ber,ver,Fer,_F,H1e,Ter,Mer,TQ,Eer,Cer,wer,uF,U1e,Aer,Ler,MQ,yer,xer,$er,bF,J1e,ker,Ser,EQ,Rer,Per,Ber,vF,Ner,Y1e,Ier,qer,K1e,jer,Der,FF,GXe,pd,TF,Z1e,CL,Ger,e2e,Oer,OXe,Do,wL,Ver,_d,Xer,CQ,zer,Qer,wQ,Wer,Her,Uer,AL,Jer,o2e,Yer,Ker,Zer,ut,LL,eor,r2e,oor,ror,ud,tor,t2e,aor,nor,AQ,sor,lor,ior,MF,dor,so,yL,cor,a2e,mor,gor,za,hor,n2e,por,_or,s2e,uor,bor,l2e,vor,For,Tor,V,EF,i2e,Mor,Eor,LQ,Cor,wor,Aor,CF,d2e,Lor,yor,yQ,xor,$or,kor,wF,c2e,Sor,Ror,xQ,Por,Bor,Nor,AF,f2e,Ior,qor,$Q,jor,Dor,Gor,LF,m2e,Oor,Vor,kQ,Xor,zor,Qor,yF,g2e,Wor,Hor,SQ,Uor,Jor,Yor,xF,h2e,Kor,Zor,RQ,err,orr,rrr,$F,p2e,trr,arr,PQ,nrr,srr,lrr,kF,_2e,irr,drr,BQ,crr,frr,mrr,SF,u2e,grr,hrr,NQ,prr,_rr,urr,RF,b2e,brr,vrr,IQ,Frr,Trr,Mrr,PF,v2e,Err,Crr,qQ,wrr,Arr,Lrr,BF,F2e,yrr,xrr,jQ,$rr,krr,Srr,NF,T2e,Rrr,Prr,DQ,Brr,Nrr,Irr,IF,M2e,qrr,jrr,GQ,Drr,Grr,Orr,qF,E2e,Vrr,Xrr,OQ,zrr,Qrr,Wrr,jF,C2e,Hrr,Urr,VQ,Jrr,Yrr,Krr,DF,w2e,Zrr,etr,XQ,otr,rtr,ttr,GF,A2e,atr,ntr,zQ,str,ltr,itr,OF,L2e,dtr,ctr,QQ,ftr,mtr,gtr,VF,y2e,htr,ptr,WQ,_tr,utr,btr,XF,x2e,vtr,Ftr,HQ,Ttr,Mtr,Etr,zF,$2e,Ctr,wtr,UQ,Atr,Ltr,ytr,QF,k2e,xtr,$tr,JQ,ktr,Str,Rtr,WF,S2e,Ptr,Btr,YQ,Ntr,Itr,qtr,HF,R2e,jtr,Dtr,KQ,Gtr,Otr,Vtr,UF,P2e,Xtr,ztr,ZQ,Qtr,Wtr,Htr,JF,B2e,Utr,Jtr,eW,Ytr,Ktr,Ztr,YF,N2e,ear,oar,oW,rar,tar,aar,KF,I2e,nar,sar,rW,lar,iar,dar,ZF,q2e,car,far,tW,mar,gar,har,eT,j2e,par,_ar,aW,uar,bar,Far,oT,D2e,Tar,Mar,nW,Ear,Car,war,rT,G2e,Aar,Lar,sW,yar,xar,$ar,tT,O2e,kar,Sar,lW,Rar,Par,Bar,aT,V2e,Nar,Iar,iW,qar,jar,Dar,nT,X2e,Gar,Oar,dW,Var,Xar,zar,sT,z2e,Qar,War,cW,Har,Uar,Jar,lT,Q2e,Yar,Kar,fW,Zar,enr,onr,iT,W2e,rnr,tnr,mW,anr,nnr,snr,dT,H2e,lnr,inr,gW,dnr,cnr,fnr,cT,U2e,mnr,gnr,hW,hnr,pnr,_nr,fT,unr,J2e,bnr,vnr,Y2e,Fnr,Tnr,mT,VXe,bd,gT,K2e,xL,Mnr,Z2e,Enr,XXe,Go,$L,Cnr,vd,wnr,pW,Anr,Lnr,_W,ynr,xnr,$nr,kL,knr,ebe,Snr,Rnr,Pnr,bt,SL,Bnr,obe,Nnr,Inr,Fd,qnr,rbe,jnr,Dnr,uW,Gnr,Onr,Vnr,hT,Xnr,lo,RL,znr,tbe,Qnr,Wnr,Qa,Hnr,abe,Unr,Jnr,nbe,Ynr,Knr,sbe,Znr,esr,osr,lbe,pT,ibe,rsr,tsr,bW,asr,nsr,ssr,_T,lsr,dbe,isr,dsr,cbe,csr,fsr,uT,zXe,Td,bT,fbe,PL,msr,mbe,gsr,QXe,Oo,BL,hsr,Md,psr,vW,_sr,usr,FW,bsr,vsr,Fsr,NL,Tsr,gbe,Msr,Esr,Csr,vt,IL,wsr,hbe,Asr,Lsr,Ed,ysr,pbe,xsr,$sr,TW,ksr,Ssr,Rsr,vT,Psr,io,qL,Bsr,_be,Nsr,Isr,Wa,qsr,ube,jsr,Dsr,bbe,Gsr,Osr,vbe,Vsr,Xsr,zsr,ve,FT,Fbe,Qsr,Wsr,MW,Hsr,Usr,Jsr,TT,Tbe,Ysr,Ksr,EW,Zsr,elr,olr,MT,Mbe,rlr,tlr,CW,alr,nlr,slr,ET,Ebe,llr,ilr,wW,dlr,clr,flr,Us,Cbe,mlr,glr,AW,hlr,plr,LW,_lr,ulr,blr,CT,wbe,vlr,Flr,yW,Tlr,Mlr,Elr,Js,Abe,Clr,wlr,xW,Alr,Llr,$W,ylr,xlr,$lr,wT,Lbe,klr,Slr,kW,Rlr,Plr,Blr,Ft,ybe,Nlr,Ilr,SW,qlr,jlr,RW,Dlr,Glr,PW,Olr,Vlr,Xlr,AT,xbe,zlr,Qlr,BW,Wlr,Hlr,Ulr,LT,$be,Jlr,Ylr,NW,Klr,Zlr,eir,yT,kbe,oir,rir,IW,tir,air,nir,xT,Sbe,sir,lir,qW,iir,dir,cir,$T,Rbe,fir,mir,jW,gir,hir,pir,kT,Pbe,_ir,uir,DW,bir,vir,Fir,ST,Bbe,Tir,Mir,GW,Eir,Cir,wir,RT,Air,Nbe,Lir,yir,Ibe,xir,$ir,PT,WXe,Cd,BT,qbe,jL,kir,jbe,Sir,HXe,Vo,DL,Rir,wd,Pir,OW,Bir,Nir,VW,Iir,qir,jir,GL,Dir,Dbe,Gir,Oir,Vir,Tt,OL,Xir,Gbe,zir,Qir,Ad,Wir,Obe,Hir,Uir,XW,Jir,Yir,Kir,NT,Zir,co,VL,edr,Vbe,odr,rdr,Ha,tdr,Xbe,adr,ndr,zbe,sdr,ldr,Qbe,idr,ddr,cdr,Wbe,IT,Hbe,fdr,mdr,zW,gdr,hdr,pdr,qT,_dr,Ube,udr,bdr,Jbe,vdr,Fdr,jT,UXe,Ld,DT,Ybe,XL,Tdr,Kbe,Mdr,JXe,Xo,zL,Edr,yd,Cdr,QW,wdr,Adr,WW,Ldr,ydr,xdr,QL,$dr,Zbe,kdr,Sdr,Rdr,Mt,WL,Pdr,eve,Bdr,Ndr,xd,Idr,ove,qdr,jdr,HW,Ddr,Gdr,Odr,GT,Vdr,fo,HL,Xdr,rve,zdr,Qdr,Ua,Wdr,tve,Hdr,Udr,ave,Jdr,Ydr,nve,Kdr,Zdr,ecr,sve,OT,lve,ocr,rcr,UW,tcr,acr,ncr,VT,scr,ive,lcr,icr,dve,dcr,ccr,XT,YXe,$d,zT,cve,UL,fcr,fve,mcr,KXe,zo,JL,gcr,kd,hcr,JW,pcr,_cr,YW,ucr,bcr,vcr,YL,Fcr,mve,Tcr,Mcr,Ecr,Et,KL,Ccr,gve,wcr,Acr,Sd,Lcr,hve,ycr,xcr,KW,$cr,kcr,Scr,QT,Rcr,mo,ZL,Pcr,pve,Bcr,Ncr,Ja,Icr,_ve,qcr,jcr,uve,Dcr,Gcr,bve,Ocr,Vcr,Xcr,Pe,WT,vve,zcr,Qcr,ZW,Wcr,Hcr,Ucr,HT,Fve,Jcr,Ycr,eH,Kcr,Zcr,efr,UT,Tve,ofr,rfr,oH,tfr,afr,nfr,JT,Mve,sfr,lfr,rH,ifr,dfr,cfr,YT,Eve,ffr,mfr,tH,gfr,hfr,pfr,KT,Cve,_fr,ufr,aH,bfr,vfr,Ffr,ZT,wve,Tfr,Mfr,nH,Efr,Cfr,wfr,e7,Ave,Afr,Lfr,sH,yfr,xfr,$fr,o7,Lve,kfr,Sfr,lH,Rfr,Pfr,Bfr,r7,Nfr,yve,Ifr,qfr,xve,jfr,Dfr,t7,ZXe,Rd,a7,$ve,ey,Gfr,kve,Ofr,eze,Qo,oy,Vfr,Pd,Xfr,iH,zfr,Qfr,dH,Wfr,Hfr,Ufr,ry,Jfr,Sve,Yfr,Kfr,Zfr,Ct,ty,emr,Rve,omr,rmr,Bd,tmr,Pve,amr,nmr,cH,smr,lmr,imr,n7,dmr,go,ay,cmr,Bve,fmr,mmr,Ya,gmr,Nve,hmr,pmr,Ive,_mr,umr,qve,bmr,vmr,Fmr,rt,s7,jve,Tmr,Mmr,fH,Emr,Cmr,wmr,l7,Dve,Amr,Lmr,mH,ymr,xmr,$mr,i7,Gve,kmr,Smr,gH,Rmr,Pmr,Bmr,d7,Ove,Nmr,Imr,hH,qmr,jmr,Dmr,c7,Vve,Gmr,Omr,pH,Vmr,Xmr,zmr,f7,Qmr,Xve,Wmr,Hmr,zve,Umr,Jmr,m7,oze,Nd,g7,Qve,ny,Ymr,Wve,Kmr,rze,Wo,sy,Zmr,Id,egr,_H,ogr,rgr,uH,tgr,agr,ngr,ly,sgr,Hve,lgr,igr,dgr,wt,iy,cgr,Uve,fgr,mgr,qd,ggr,Jve,hgr,pgr,bH,_gr,ugr,bgr,h7,vgr,ho,dy,Fgr,Yve,Tgr,Mgr,Ka,Egr,Kve,Cgr,wgr,Zve,Agr,Lgr,e0e,ygr,xgr,$gr,Le,p7,o0e,kgr,Sgr,vH,Rgr,Pgr,Bgr,_7,r0e,Ngr,Igr,FH,qgr,jgr,Dgr,u7,t0e,Ggr,Ogr,TH,Vgr,Xgr,zgr,b7,a0e,Qgr,Wgr,MH,Hgr,Ugr,Jgr,v7,n0e,Ygr,Kgr,EH,Zgr,ehr,ohr,F7,s0e,rhr,thr,CH,ahr,nhr,shr,T7,l0e,lhr,ihr,wH,dhr,chr,fhr,M7,i0e,mhr,ghr,AH,hhr,phr,_hr,E7,d0e,uhr,bhr,LH,vhr,Fhr,Thr,C7,c0e,Mhr,Ehr,yH,Chr,whr,Ahr,w7,Lhr,f0e,yhr,xhr,m0e,$hr,khr,A7,tze,jd,L7,g0e,cy,Shr,h0e,Rhr,aze,Ho,fy,Phr,Dd,Bhr,xH,Nhr,Ihr,$H,qhr,jhr,Dhr,my,Ghr,p0e,Ohr,Vhr,Xhr,At,gy,zhr,_0e,Qhr,Whr,Gd,Hhr,u0e,Uhr,Jhr,kH,Yhr,Khr,Zhr,y7,epr,po,hy,opr,b0e,rpr,tpr,Za,apr,v0e,npr,spr,F0e,lpr,ipr,T0e,dpr,cpr,fpr,py,x7,M0e,mpr,gpr,SH,hpr,ppr,_pr,$7,E0e,upr,bpr,RH,vpr,Fpr,Tpr,k7,Mpr,C0e,Epr,Cpr,w0e,wpr,Apr,S7,nze,Od,R7,A0e,_y,Lpr,L0e,ypr,sze,Uo,uy,xpr,Vd,$pr,PH,kpr,Spr,BH,Rpr,Ppr,Bpr,by,Npr,y0e,Ipr,qpr,jpr,Lt,vy,Dpr,x0e,Gpr,Opr,Xd,Vpr,$0e,Xpr,zpr,NH,Qpr,Wpr,Hpr,P7,Upr,_o,Fy,Jpr,k0e,Ypr,Kpr,en,Zpr,S0e,e_r,o_r,R0e,r_r,t_r,P0e,a_r,n_r,s_r,tt,B7,B0e,l_r,i_r,IH,d_r,c_r,f_r,N7,N0e,m_r,g_r,qH,h_r,p_r,__r,I7,I0e,u_r,b_r,jH,v_r,F_r,T_r,q7,q0e,M_r,E_r,DH,C_r,w_r,A_r,j7,j0e,L_r,y_r,GH,x_r,$_r,k_r,D7,S_r,D0e,R_r,P_r,G0e,B_r,N_r,G7,lze,zd,O7,O0e,Ty,I_r,V0e,q_r,ize,Jo,My,j_r,Qd,D_r,OH,G_r,O_r,VH,V_r,X_r,z_r,Ey,Q_r,X0e,W_r,H_r,U_r,yt,Cy,J_r,z0e,Y_r,K_r,Wd,Z_r,Q0e,eur,our,XH,rur,tur,aur,V7,nur,uo,wy,sur,W0e,lur,iur,on,dur,H0e,cur,fur,U0e,mur,gur,J0e,hur,pur,_ur,Hd,X7,Y0e,uur,bur,zH,vur,Fur,Tur,z7,K0e,Mur,Eur,QH,Cur,wur,Aur,Q7,Z0e,Lur,yur,WH,xur,$ur,kur,W7,Sur,eFe,Rur,Pur,oFe,Bur,Nur,H7,dze,Ud,U7,rFe,Ay,Iur,tFe,qur,cze,Yo,Ly,jur,Jd,Dur,HH,Gur,Our,UH,Vur,Xur,zur,yy,Qur,aFe,Wur,Hur,Uur,xt,xy,Jur,nFe,Yur,Kur,Yd,Zur,sFe,e1r,o1r,JH,r1r,t1r,a1r,J7,n1r,bo,$y,s1r,lFe,l1r,i1r,rn,d1r,iFe,c1r,f1r,dFe,m1r,g1r,cFe,h1r,p1r,_1r,ky,Y7,fFe,u1r,b1r,YH,v1r,F1r,T1r,K7,mFe,M1r,E1r,KH,C1r,w1r,A1r,Z7,L1r,gFe,y1r,x1r,hFe,$1r,k1r,e8,fze,Kd,o8,pFe,Sy,S1r,_Fe,R1r,mze,Ko,Ry,P1r,Zd,B1r,ZH,N1r,I1r,eU,q1r,j1r,D1r,Py,G1r,uFe,O1r,V1r,X1r,$t,By,z1r,bFe,Q1r,W1r,ec,H1r,vFe,U1r,J1r,oU,Y1r,K1r,Z1r,r8,e2r,vo,Ny,o2r,FFe,r2r,t2r,tn,a2r,TFe,n2r,s2r,MFe,l2r,i2r,EFe,d2r,c2r,f2r,CFe,t8,wFe,m2r,g2r,rU,h2r,p2r,_2r,a8,u2r,AFe,b2r,v2r,LFe,F2r,T2r,n8,gze,oc,s8,yFe,Iy,M2r,xFe,E2r,hze,Zo,qy,C2r,rc,w2r,tU,A2r,L2r,aU,y2r,x2r,$2r,jy,k2r,$Fe,S2r,R2r,P2r,kt,Dy,B2r,kFe,N2r,I2r,tc,q2r,SFe,j2r,D2r,nU,G2r,O2r,V2r,l8,X2r,Fo,Gy,z2r,RFe,Q2r,W2r,an,H2r,PFe,U2r,J2r,BFe,Y2r,K2r,NFe,Z2r,ebr,obr,at,i8,IFe,rbr,tbr,sU,abr,nbr,sbr,d8,qFe,lbr,ibr,lU,dbr,cbr,fbr,c8,jFe,mbr,gbr,iU,hbr,pbr,_br,f8,DFe,ubr,bbr,dU,vbr,Fbr,Tbr,m8,GFe,Mbr,Ebr,cU,Cbr,wbr,Abr,g8,Lbr,OFe,ybr,xbr,VFe,$br,kbr,h8,pze,ac,p8,XFe,Oy,Sbr,zFe,Rbr,_ze,er,Vy,Pbr,nc,Bbr,fU,Nbr,Ibr,mU,qbr,jbr,Dbr,Xy,Gbr,QFe,Obr,Vbr,Xbr,St,zy,zbr,WFe,Qbr,Wbr,sc,Hbr,HFe,Ubr,Jbr,gU,Ybr,Kbr,Zbr,_8,evr,To,Qy,ovr,UFe,rvr,tvr,nn,avr,JFe,nvr,svr,YFe,lvr,ivr,KFe,dvr,cvr,fvr,ZFe,u8,eTe,mvr,gvr,hU,hvr,pvr,_vr,b8,uvr,oTe,bvr,vvr,rTe,Fvr,Tvr,v8,uze,lc,F8,tTe,Wy,Mvr,aTe,Evr,bze,or,Hy,Cvr,ic,wvr,pU,Avr,Lvr,_U,yvr,xvr,$vr,Uy,kvr,nTe,Svr,Rvr,Pvr,Rt,Jy,Bvr,sTe,Nvr,Ivr,dc,qvr,lTe,jvr,Dvr,uU,Gvr,Ovr,Vvr,T8,Xvr,xr,Yy,zvr,iTe,Qvr,Wvr,sn,Hvr,dTe,Uvr,Jvr,cTe,Yvr,Kvr,fTe,Zvr,e0r,o0r,q,M8,mTe,r0r,t0r,bU,a0r,n0r,s0r,E8,gTe,l0r,i0r,vU,d0r,c0r,f0r,C8,hTe,m0r,g0r,FU,h0r,p0r,_0r,w8,pTe,u0r,b0r,TU,v0r,F0r,T0r,A8,_Te,M0r,E0r,MU,C0r,w0r,A0r,L8,uTe,L0r,y0r,EU,x0r,$0r,k0r,y8,bTe,S0r,R0r,CU,P0r,B0r,N0r,x8,vTe,I0r,q0r,wU,j0r,D0r,G0r,$8,FTe,O0r,V0r,AU,X0r,z0r,Q0r,k8,TTe,W0r,H0r,LU,U0r,J0r,Y0r,S8,MTe,K0r,Z0r,yU,eFr,oFr,rFr,R8,ETe,tFr,aFr,xU,nFr,sFr,lFr,P8,CTe,iFr,dFr,$U,cFr,fFr,mFr,B8,wTe,gFr,hFr,kU,pFr,_Fr,uFr,N8,ATe,bFr,vFr,SU,FFr,TFr,MFr,I8,LTe,EFr,CFr,RU,wFr,AFr,LFr,q8,yTe,yFr,xFr,PU,$Fr,kFr,SFr,j8,xTe,RFr,PFr,BU,BFr,NFr,IFr,Ys,$Te,qFr,jFr,NU,DFr,GFr,IU,OFr,VFr,XFr,D8,kTe,zFr,QFr,qU,WFr,HFr,UFr,G8,STe,JFr,YFr,jU,KFr,ZFr,eTr,O8,RTe,oTr,rTr,DU,tTr,aTr,nTr,V8,PTe,sTr,lTr,GU,iTr,dTr,cTr,X8,BTe,fTr,mTr,OU,gTr,hTr,pTr,z8,NTe,_Tr,uTr,VU,bTr,vTr,FTr,Q8,ITe,TTr,MTr,XU,ETr,CTr,wTr,W8,qTe,ATr,LTr,zU,yTr,xTr,$Tr,H8,jTe,kTr,STr,QU,RTr,PTr,BTr,U8,DTe,NTr,ITr,WU,qTr,jTr,DTr,J8,GTe,GTr,OTr,HU,VTr,XTr,zTr,Y8,OTe,QTr,WTr,UU,HTr,UTr,JTr,K8,VTe,YTr,KTr,JU,ZTr,e7r,o7r,Z8,XTe,r7r,t7r,YU,a7r,n7r,s7r,e9,zTe,l7r,i7r,KU,d7r,c7r,f7r,o9,QTe,m7r,g7r,ZU,h7r,p7r,_7r,r9,WTe,u7r,b7r,eJ,v7r,F7r,T7r,t9,HTe,M7r,E7r,oJ,C7r,w7r,A7r,a9,UTe,L7r,y7r,rJ,x7r,$7r,k7r,n9,JTe,S7r,R7r,tJ,P7r,B7r,N7r,s9,YTe,I7r,q7r,aJ,j7r,D7r,G7r,l9,KTe,O7r,V7r,nJ,X7r,z7r,Q7r,i9,ZTe,W7r,H7r,sJ,U7r,J7r,Y7r,d9,e7e,K7r,Z7r,lJ,e8r,o8r,r8r,c9,o7e,t8r,a8r,iJ,n8r,s8r,l8r,f9,r7e,i8r,d8r,dJ,c8r,f8r,m8r,m9,t7e,g8r,h8r,cJ,p8r,_8r,u8r,g9,a7e,b8r,v8r,fJ,F8r,T8r,M8r,h9,n7e,E8r,C8r,mJ,w8r,A8r,L8r,p9,s7e,y8r,x8r,gJ,$8r,k8r,S8r,_9,l7e,R8r,P8r,hJ,B8r,N8r,I8r,u9,vze,cc,b9,i7e,Ky,q8r,d7e,j8r,Fze,rr,Zy,D8r,fc,G8r,pJ,O8r,V8r,_J,X8r,z8r,Q8r,ex,W8r,c7e,H8r,U8r,J8r,Pt,ox,Y8r,f7e,K8r,Z8r,mc,e9r,m7e,o9r,r9r,uJ,t9r,a9r,n9r,v9,s9r,$r,rx,l9r,g7e,i9r,d9r,ln,c9r,h7e,f9r,m9r,p7e,g9r,h9r,_7e,p9r,_9r,u9r,se,F9,u7e,b9r,v9r,bJ,F9r,T9r,M9r,T9,b7e,E9r,C9r,vJ,w9r,A9r,L9r,M9,v7e,y9r,x9r,FJ,$9r,k9r,S9r,E9,F7e,R9r,P9r,TJ,B9r,N9r,I9r,C9,T7e,q9r,j9r,MJ,D9r,G9r,O9r,w9,M7e,V9r,X9r,EJ,z9r,Q9r,W9r,A9,E7e,H9r,U9r,CJ,J9r,Y9r,K9r,L9,C7e,Z9r,eMr,wJ,oMr,rMr,tMr,y9,w7e,aMr,nMr,AJ,sMr,lMr,iMr,x9,A7e,dMr,cMr,LJ,fMr,mMr,gMr,$9,L7e,hMr,pMr,yJ,_Mr,uMr,bMr,k9,y7e,vMr,FMr,xJ,TMr,MMr,EMr,S9,x7e,CMr,wMr,$J,AMr,LMr,yMr,R9,$7e,xMr,$Mr,kJ,kMr,SMr,RMr,P9,k7e,PMr,BMr,SJ,NMr,IMr,qMr,B9,S7e,jMr,DMr,RJ,GMr,OMr,VMr,N9,R7e,XMr,zMr,PJ,QMr,WMr,HMr,I9,P7e,UMr,JMr,BJ,YMr,KMr,ZMr,q9,B7e,e4r,o4r,NJ,r4r,t4r,a4r,j9,N7e,n4r,s4r,IJ,l4r,i4r,d4r,D9,I7e,c4r,f4r,qJ,m4r,g4r,h4r,G9,q7e,p4r,_4r,jJ,u4r,b4r,v4r,O9,j7e,F4r,T4r,DJ,M4r,E4r,C4r,V9,Tze,gc,X9,D7e,tx,w4r,G7e,A4r,Mze,tr,ax,L4r,hc,y4r,GJ,x4r,$4r,OJ,k4r,S4r,R4r,nx,P4r,O7e,B4r,N4r,I4r,Bt,sx,q4r,V7e,j4r,D4r,pc,G4r,X7e,O4r,V4r,VJ,X4r,z4r,Q4r,z9,W4r,kr,lx,H4r,z7e,U4r,J4r,dn,Y4r,Q7e,K4r,Z4r,W7e,eEr,oEr,H7e,rEr,tEr,aEr,Me,Q9,U7e,nEr,sEr,XJ,lEr,iEr,dEr,W9,J7e,cEr,fEr,zJ,mEr,gEr,hEr,H9,Y7e,pEr,_Er,QJ,uEr,bEr,vEr,U9,K7e,FEr,TEr,WJ,MEr,EEr,CEr,J9,Z7e,wEr,AEr,HJ,LEr,yEr,xEr,Y9,e8e,$Er,kEr,UJ,SEr,REr,PEr,K9,o8e,BEr,NEr,JJ,IEr,qEr,jEr,Z9,r8e,DEr,GEr,YJ,OEr,VEr,XEr,eM,t8e,zEr,QEr,KJ,WEr,HEr,UEr,oM,a8e,JEr,YEr,ZJ,KEr,ZEr,eCr,rM,n8e,oCr,rCr,eY,tCr,aCr,nCr,tM,s8e,sCr,lCr,oY,iCr,dCr,cCr,aM,l8e,fCr,mCr,rY,gCr,hCr,pCr,nM,Eze,_c,sM,i8e,ix,_Cr,d8e,uCr,Cze,ar,dx,bCr,uc,vCr,tY,FCr,TCr,aY,MCr,ECr,CCr,cx,wCr,c8e,ACr,LCr,yCr,Nt,fx,xCr,f8e,$Cr,kCr,bc,SCr,m8e,RCr,PCr,nY,BCr,NCr,ICr,lM,qCr,Sr,mx,jCr,g8e,DCr,GCr,cn,OCr,h8e,VCr,XCr,p8e,zCr,QCr,_8e,WCr,HCr,UCr,Qe,iM,u8e,JCr,YCr,sY,KCr,ZCr,e3r,dM,b8e,o3r,r3r,lY,t3r,a3r,n3r,Ks,v8e,s3r,l3r,iY,i3r,d3r,dY,c3r,f3r,m3r,cM,F8e,g3r,h3r,cY,p3r,_3r,u3r,fM,T8e,b3r,v3r,fY,F3r,T3r,M3r,mM,M8e,E3r,C3r,mY,w3r,A3r,L3r,gM,E8e,y3r,x3r,gY,$3r,k3r,S3r,hM,wze,vc,pM,C8e,gx,R3r,w8e,P3r,Aze,nr,hx,B3r,Fc,N3r,hY,I3r,q3r,pY,j3r,D3r,G3r,px,O3r,A8e,V3r,X3r,z3r,It,_x,Q3r,L8e,W3r,H3r,Tc,U3r,y8e,J3r,Y3r,_Y,K3r,Z3r,e5r,_M,o5r,Rr,ux,r5r,x8e,t5r,a5r,fn,n5r,$8e,s5r,l5r,k8e,i5r,d5r,S8e,c5r,f5r,m5r,ie,uM,R8e,g5r,h5r,uY,p5r,_5r,u5r,bM,P8e,b5r,v5r,bY,F5r,T5r,M5r,vM,B8e,E5r,C5r,vY,w5r,A5r,L5r,FM,N8e,y5r,x5r,FY,$5r,k5r,S5r,TM,I8e,R5r,P5r,TY,B5r,N5r,I5r,MM,q8e,q5r,j5r,MY,D5r,G5r,O5r,EM,j8e,V5r,X5r,EY,z5r,Q5r,W5r,CM,D8e,H5r,U5r,CY,J5r,Y5r,K5r,wM,G8e,Z5r,ewr,wY,owr,rwr,twr,AM,O8e,awr,nwr,AY,swr,lwr,iwr,LM,V8e,dwr,cwr,LY,fwr,mwr,gwr,yM,X8e,hwr,pwr,yY,_wr,uwr,bwr,xM,z8e,vwr,Fwr,xY,Twr,Mwr,Ewr,$M,Q8e,Cwr,wwr,$Y,Awr,Lwr,ywr,kM,W8e,xwr,$wr,kY,kwr,Swr,Rwr,SM,H8e,Pwr,Bwr,SY,Nwr,Iwr,qwr,RM,U8e,jwr,Dwr,RY,Gwr,Owr,Vwr,PM,J8e,Xwr,zwr,PY,Qwr,Wwr,Hwr,BM,Y8e,Uwr,Jwr,BY,Ywr,Kwr,Zwr,NM,K8e,eAr,oAr,NY,rAr,tAr,aAr,IM,Lze,Mc,qM,Z8e,bx,nAr,e9e,sAr,yze,sr,vx,lAr,Ec,iAr,IY,dAr,cAr,qY,fAr,mAr,gAr,Fx,hAr,o9e,pAr,_Ar,uAr,qt,Tx,bAr,r9e,vAr,FAr,Cc,TAr,t9e,MAr,EAr,jY,CAr,wAr,AAr,jM,LAr,Pr,Mx,yAr,a9e,xAr,$Ar,mn,kAr,n9e,SAr,RAr,s9e,PAr,BAr,l9e,NAr,IAr,qAr,ye,DM,i9e,jAr,DAr,DY,GAr,OAr,VAr,GM,d9e,XAr,zAr,GY,QAr,WAr,HAr,OM,c9e,UAr,JAr,OY,YAr,KAr,ZAr,VM,f9e,e6r,o6r,VY,r6r,t6r,a6r,XM,m9e,n6r,s6r,XY,l6r,i6r,d6r,zM,g9e,c6r,f6r,zY,m6r,g6r,h6r,QM,h9e,p6r,_6r,QY,u6r,b6r,v6r,WM,p9e,F6r,T6r,WY,M6r,E6r,C6r,HM,_9e,w6r,A6r,HY,L6r,y6r,x6r,UM,u9e,$6r,k6r,UY,S6r,R6r,P6r,JM,xze,wc,YM,b9e,Ex,B6r,v9e,N6r,$ze,lr,Cx,I6r,Ac,q6r,JY,j6r,D6r,YY,G6r,O6r,V6r,wx,X6r,F9e,z6r,Q6r,W6r,jt,Ax,H6r,T9e,U6r,J6r,Lc,Y6r,M9e,K6r,Z6r,KY,eLr,oLr,rLr,KM,tLr,Br,Lx,aLr,E9e,nLr,sLr,gn,lLr,C9e,iLr,dLr,w9e,cLr,fLr,A9e,mLr,gLr,hLr,te,ZM,L9e,pLr,_Lr,ZY,uLr,bLr,vLr,e4,y9e,FLr,TLr,eK,MLr,ELr,CLr,o4,x9e,wLr,ALr,oK,LLr,yLr,xLr,r4,$9e,$Lr,kLr,rK,SLr,RLr,PLr,t4,k9e,BLr,NLr,tK,ILr,qLr,jLr,a4,S9e,DLr,GLr,aK,OLr,VLr,XLr,n4,R9e,zLr,QLr,nK,WLr,HLr,ULr,s4,P9e,JLr,YLr,sK,KLr,ZLr,eyr,l4,B9e,oyr,ryr,lK,tyr,ayr,nyr,i4,N9e,syr,lyr,iK,iyr,dyr,cyr,d4,I9e,fyr,myr,dK,gyr,hyr,pyr,c4,q9e,_yr,uyr,cK,byr,vyr,Fyr,f4,j9e,Tyr,Myr,fK,Eyr,Cyr,wyr,m4,D9e,Ayr,Lyr,mK,yyr,xyr,$yr,g4,G9e,kyr,Syr,gK,Ryr,Pyr,Byr,h4,O9e,Nyr,Iyr,hK,qyr,jyr,Dyr,p4,V9e,Gyr,Oyr,pK,Vyr,Xyr,zyr,_4,X9e,Qyr,Wyr,_K,Hyr,Uyr,Jyr,u4,z9e,Yyr,Kyr,uK,Zyr,exr,oxr,b4,Q9e,rxr,txr,bK,axr,nxr,sxr,v4,W9e,lxr,ixr,vK,dxr,cxr,fxr,F4,H9e,mxr,gxr,FK,hxr,pxr,_xr,T4,U9e,uxr,bxr,TK,vxr,Fxr,Txr,M4,J9e,Mxr,Exr,MK,Cxr,wxr,Axr,E4,Y9e,Lxr,yxr,EK,xxr,$xr,kxr,C4,K9e,Sxr,Rxr,CK,Pxr,Bxr,Nxr,w4,kze,yc,A4,Z9e,yx,Ixr,eMe,qxr,Sze,ir,xx,jxr,xc,Dxr,wK,Gxr,Oxr,AK,Vxr,Xxr,zxr,$x,Qxr,oMe,Wxr,Hxr,Uxr,Dt,kx,Jxr,rMe,Yxr,Kxr,$c,Zxr,tMe,e$r,o$r,LK,r$r,t$r,a$r,L4,n$r,Nr,Sx,s$r,aMe,l$r,i$r,hn,d$r,nMe,c$r,f$r,sMe,m$r,g$r,lMe,h$r,p$r,_$r,ue,y4,iMe,u$r,b$r,yK,v$r,F$r,T$r,x4,dMe,M$r,E$r,xK,C$r,w$r,A$r,$4,cMe,L$r,y$r,$K,x$r,$$r,k$r,k4,fMe,S$r,R$r,kK,P$r,B$r,N$r,S4,mMe,I$r,q$r,SK,j$r,D$r,G$r,R4,gMe,O$r,V$r,RK,X$r,z$r,Q$r,P4,hMe,W$r,H$r,PK,U$r,J$r,Y$r,B4,pMe,K$r,Z$r,BK,ekr,okr,rkr,N4,_Me,tkr,akr,NK,nkr,skr,lkr,I4,uMe,ikr,dkr,IK,ckr,fkr,mkr,q4,bMe,gkr,hkr,qK,pkr,_kr,ukr,j4,vMe,bkr,vkr,jK,Fkr,Tkr,Mkr,D4,FMe,Ekr,Ckr,DK,wkr,Akr,Lkr,G4,TMe,ykr,xkr,GK,$kr,kkr,Skr,O4,MMe,Rkr,Pkr,OK,Bkr,Nkr,Ikr,V4,EMe,qkr,jkr,VK,Dkr,Gkr,Okr,X4,CMe,Vkr,Xkr,XK,zkr,Qkr,Wkr,z4,Rze,kc,Q4,wMe,Rx,Hkr,AMe,Ukr,Pze,dr,Px,Jkr,Sc,Ykr,zK,Kkr,Zkr,QK,eSr,oSr,rSr,Bx,tSr,LMe,aSr,nSr,sSr,Gt,Nx,lSr,yMe,iSr,dSr,Rc,cSr,xMe,fSr,mSr,WK,gSr,hSr,pSr,W4,_Sr,Ir,Ix,uSr,$Me,bSr,vSr,pn,FSr,kMe,TSr,MSr,SMe,ESr,CSr,RMe,wSr,ASr,LSr,qx,H4,PMe,ySr,xSr,HK,$Sr,kSr,SSr,U4,BMe,RSr,PSr,UK,BSr,NSr,ISr,J4,Bze,Pc,Y4,NMe,jx,qSr,IMe,jSr,Nze,cr,Dx,DSr,Bc,GSr,JK,OSr,VSr,YK,XSr,zSr,QSr,Gx,WSr,qMe,HSr,USr,JSr,Ot,Ox,YSr,jMe,KSr,ZSr,Nc,eRr,DMe,oRr,rRr,KK,tRr,aRr,nRr,K4,sRr,qr,Vx,lRr,GMe,iRr,dRr,_n,cRr,OMe,fRr,mRr,VMe,gRr,hRr,XMe,pRr,_Rr,uRr,zMe,Z4,QMe,bRr,vRr,ZK,FRr,TRr,MRr,eE,Ize,Ic,oE,WMe,Xx,ERr,HMe,CRr,qze,fr,zx,wRr,qc,ARr,eZ,LRr,yRr,oZ,xRr,$Rr,kRr,Qx,SRr,UMe,RRr,PRr,BRr,Vt,Wx,NRr,JMe,IRr,qRr,jc,jRr,YMe,DRr,GRr,rZ,ORr,VRr,XRr,rE,zRr,jr,Hx,QRr,KMe,WRr,HRr,un,URr,ZMe,JRr,YRr,e4e,KRr,ZRr,o4e,ePr,oPr,rPr,de,tE,r4e,tPr,aPr,tZ,nPr,sPr,lPr,aE,t4e,iPr,dPr,aZ,cPr,fPr,mPr,nE,a4e,gPr,hPr,nZ,pPr,_Pr,uPr,sE,n4e,bPr,vPr,sZ,FPr,TPr,MPr,lE,s4e,EPr,CPr,lZ,wPr,APr,LPr,iE,l4e,yPr,xPr,iZ,$Pr,kPr,SPr,dE,i4e,RPr,PPr,dZ,BPr,NPr,IPr,cE,d4e,qPr,jPr,cZ,DPr,GPr,OPr,fE,c4e,VPr,XPr,fZ,zPr,QPr,WPr,mE,f4e,HPr,UPr,mZ,JPr,YPr,KPr,gE,m4e,ZPr,eBr,gZ,oBr,rBr,tBr,hE,g4e,aBr,nBr,hZ,sBr,lBr,iBr,pE,h4e,dBr,cBr,pZ,fBr,mBr,gBr,_E,p4e,hBr,pBr,_Z,_Br,uBr,bBr,uE,_4e,vBr,FBr,uZ,TBr,MBr,EBr,bE,u4e,CBr,wBr,bZ,ABr,LBr,yBr,vE,b4e,xBr,$Br,vZ,kBr,SBr,RBr,FE,v4e,PBr,BBr,FZ,NBr,IBr,qBr,TE,F4e,jBr,DBr,TZ,GBr,OBr,VBr,ME,T4e,XBr,zBr,MZ,QBr,WBr,HBr,EE,jze,Dc,CE,M4e,Ux,UBr,E4e,JBr,Dze,mr,Jx,YBr,Gc,KBr,EZ,ZBr,eNr,CZ,oNr,rNr,tNr,Yx,aNr,C4e,nNr,sNr,lNr,Xt,Kx,iNr,w4e,dNr,cNr,Oc,fNr,A4e,mNr,gNr,wZ,hNr,pNr,_Nr,wE,uNr,Dr,Zx,bNr,L4e,vNr,FNr,bn,TNr,y4e,MNr,ENr,x4e,CNr,wNr,$4e,ANr,LNr,yNr,ce,AE,k4e,xNr,$Nr,AZ,kNr,SNr,RNr,LE,S4e,PNr,BNr,LZ,NNr,INr,qNr,yE,R4e,jNr,DNr,yZ,GNr,ONr,VNr,xE,P4e,XNr,zNr,xZ,QNr,WNr,HNr,$E,B4e,UNr,JNr,$Z,YNr,KNr,ZNr,kE,N4e,eIr,oIr,kZ,rIr,tIr,aIr,SE,I4e,nIr,sIr,SZ,lIr,iIr,dIr,RE,q4e,cIr,fIr,RZ,mIr,gIr,hIr,PE,j4e,pIr,_Ir,PZ,uIr,bIr,vIr,BE,D4e,FIr,TIr,BZ,MIr,EIr,CIr,NE,G4e,wIr,AIr,NZ,LIr,yIr,xIr,IE,O4e,$Ir,kIr,IZ,SIr,RIr,PIr,qE,V4e,BIr,NIr,qZ,IIr,qIr,jIr,jE,X4e,DIr,GIr,jZ,OIr,VIr,XIr,DE,z4e,zIr,QIr,DZ,WIr,HIr,UIr,GE,Q4e,JIr,YIr,GZ,KIr,ZIr,eqr,OE,W4e,oqr,rqr,OZ,tqr,aqr,nqr,VE,H4e,sqr,lqr,VZ,iqr,dqr,cqr,XE,U4e,fqr,mqr,XZ,gqr,hqr,pqr,zE,J4e,_qr,uqr,zZ,bqr,vqr,Fqr,QE,Gze,Vc,WE,Y4e,e$,Tqr,K4e,Mqr,Oze,gr,o$,Eqr,Xc,Cqr,QZ,wqr,Aqr,WZ,Lqr,yqr,xqr,r$,$qr,Z4e,kqr,Sqr,Rqr,zt,t$,Pqr,eEe,Bqr,Nqr,zc,Iqr,oEe,qqr,jqr,HZ,Dqr,Gqr,Oqr,HE,Vqr,Gr,a$,Xqr,rEe,zqr,Qqr,vn,Wqr,tEe,Hqr,Uqr,aEe,Jqr,Yqr,nEe,Kqr,Zqr,ejr,sEe,UE,lEe,ojr,rjr,UZ,tjr,ajr,njr,JE,Vze,Qc,YE,iEe,n$,sjr,dEe,ljr,Xze,hr,s$,ijr,Wc,djr,JZ,cjr,fjr,YZ,mjr,gjr,hjr,l$,pjr,cEe,_jr,ujr,bjr,Qt,i$,vjr,fEe,Fjr,Tjr,Hc,Mjr,mEe,Ejr,Cjr,KZ,wjr,Ajr,Ljr,KE,yjr,Or,d$,xjr,gEe,$jr,kjr,Fn,Sjr,hEe,Rjr,Pjr,pEe,Bjr,Njr,_Ee,Ijr,qjr,jjr,uEe,ZE,bEe,Djr,Gjr,ZZ,Ojr,Vjr,Xjr,eC,zze,Uc,oC,vEe,c$,zjr,FEe,Qjr,Qze,pr,f$,Wjr,Jc,Hjr,eee,Ujr,Jjr,oee,Yjr,Kjr,Zjr,m$,eDr,TEe,oDr,rDr,tDr,Wt,g$,aDr,MEe,nDr,sDr,Yc,lDr,EEe,iDr,dDr,ree,cDr,fDr,mDr,rC,gDr,Vr,h$,hDr,CEe,pDr,_Dr,Tn,uDr,wEe,bDr,vDr,AEe,FDr,TDr,LEe,MDr,EDr,CDr,oe,tC,yEe,wDr,ADr,tee,LDr,yDr,xDr,aC,xEe,$Dr,kDr,aee,SDr,RDr,PDr,nC,$Ee,BDr,NDr,nee,IDr,qDr,jDr,sC,kEe,DDr,GDr,see,ODr,VDr,XDr,lC,SEe,zDr,QDr,lee,WDr,HDr,UDr,iC,REe,JDr,YDr,iee,KDr,ZDr,eGr,dC,PEe,oGr,rGr,dee,tGr,aGr,nGr,cC,BEe,sGr,lGr,cee,iGr,dGr,cGr,fC,NEe,fGr,mGr,fee,gGr,hGr,pGr,mC,IEe,_Gr,uGr,mee,bGr,vGr,FGr,gC,qEe,TGr,MGr,gee,EGr,CGr,wGr,hC,jEe,AGr,LGr,hee,yGr,xGr,$Gr,pC,DEe,kGr,SGr,pee,RGr,PGr,BGr,_C,GEe,NGr,IGr,_ee,qGr,jGr,DGr,uC,OEe,GGr,OGr,uee,VGr,XGr,zGr,bC,VEe,QGr,WGr,bee,HGr,UGr,JGr,vC,XEe,YGr,KGr,vee,ZGr,eOr,oOr,FC,zEe,rOr,tOr,Fee,aOr,nOr,sOr,TC,QEe,lOr,iOr,Tee,dOr,cOr,fOr,MC,WEe,mOr,gOr,Mee,hOr,pOr,_Or,EC,HEe,uOr,bOr,Eee,vOr,FOr,TOr,CC,UEe,MOr,EOr,Cee,COr,wOr,AOr,wC,JEe,LOr,yOr,wee,xOr,$Or,kOr,AC,YEe,SOr,ROr,Aee,POr,BOr,NOr,LC,KEe,IOr,qOr,Lee,jOr,DOr,GOr,yC,ZEe,OOr,VOr,yee,XOr,zOr,QOr,xC,eCe,WOr,HOr,xee,UOr,JOr,YOr,$C,Wze,Kc,kC,oCe,p$,KOr,rCe,ZOr,Hze,_r,_$,eVr,Zc,oVr,$ee,rVr,tVr,kee,aVr,nVr,sVr,u$,lVr,tCe,iVr,dVr,cVr,Ht,b$,fVr,aCe,mVr,gVr,ef,hVr,nCe,pVr,_Vr,See,uVr,bVr,vVr,SC,FVr,Xr,v$,TVr,sCe,MVr,EVr,Mn,CVr,lCe,wVr,AVr,iCe,LVr,yVr,dCe,xVr,$Vr,kVr,xe,RC,cCe,SVr,RVr,Ree,PVr,BVr,NVr,PC,fCe,IVr,qVr,Pee,jVr,DVr,GVr,BC,mCe,OVr,VVr,Bee,XVr,zVr,QVr,NC,gCe,WVr,HVr,Nee,UVr,JVr,YVr,IC,hCe,KVr,ZVr,Iee,eXr,oXr,rXr,qC,pCe,tXr,aXr,qee,nXr,sXr,lXr,jC,_Ce,iXr,dXr,jee,cXr,fXr,mXr,DC,uCe,gXr,hXr,Dee,pXr,_Xr,uXr,GC,bCe,bXr,vXr,Gee,FXr,TXr,MXr,OC,vCe,EXr,CXr,Oee,wXr,AXr,LXr,VC,Uze,of,XC,FCe,F$,yXr,TCe,xXr,Jze,ur,T$,$Xr,rf,kXr,Vee,SXr,RXr,Xee,PXr,BXr,NXr,M$,IXr,MCe,qXr,jXr,DXr,Ut,E$,GXr,ECe,OXr,VXr,tf,XXr,CCe,zXr,QXr,zee,WXr,HXr,UXr,zC,JXr,zr,C$,YXr,wCe,KXr,ZXr,En,ezr,ACe,ozr,rzr,LCe,tzr,azr,yCe,nzr,szr,lzr,Ee,QC,xCe,izr,dzr,Qee,czr,fzr,mzr,WC,$Ce,gzr,hzr,Wee,pzr,_zr,uzr,HC,kCe,bzr,vzr,Hee,Fzr,Tzr,Mzr,UC,SCe,Ezr,Czr,Uee,wzr,Azr,Lzr,JC,RCe,yzr,xzr,Jee,$zr,kzr,Szr,YC,PCe,Rzr,Pzr,Yee,Bzr,Nzr,Izr,KC,BCe,qzr,jzr,Kee,Dzr,Gzr,Ozr,ZC,NCe,Vzr,Xzr,Zee,zzr,Qzr,Wzr,e3,ICe,Hzr,Uzr,eoe,Jzr,Yzr,Kzr,o3,qCe,Zzr,eQr,ooe,oQr,rQr,tQr,r3,jCe,aQr,nQr,roe,sQr,lQr,iQr,t3,DCe,dQr,cQr,toe,fQr,mQr,gQr,a3,GCe,hQr,pQr,aoe,_Qr,uQr,bQr,n3,Yze,af,s3,OCe,w$,vQr,VCe,FQr,Kze,br,A$,TQr,nf,MQr,noe,EQr,CQr,soe,wQr,AQr,LQr,L$,yQr,XCe,xQr,$Qr,kQr,Jt,y$,SQr,zCe,RQr,PQr,sf,BQr,QCe,NQr,IQr,loe,qQr,jQr,DQr,l3,GQr,Qr,x$,OQr,WCe,VQr,XQr,Cn,zQr,HCe,QQr,WQr,UCe,HQr,UQr,JCe,JQr,YQr,KQr,$e,i3,YCe,ZQr,eWr,ioe,oWr,rWr,tWr,d3,KCe,aWr,nWr,doe,sWr,lWr,iWr,c3,ZCe,dWr,cWr,coe,fWr,mWr,gWr,f3,e3e,hWr,pWr,foe,_Wr,uWr,bWr,m3,o3e,vWr,FWr,moe,TWr,MWr,EWr,g3,r3e,CWr,wWr,goe,AWr,LWr,yWr,h3,t3e,xWr,$Wr,hoe,kWr,SWr,RWr,p3,a3e,PWr,BWr,poe,NWr,IWr,qWr,_3,n3e,jWr,DWr,_oe,GWr,OWr,VWr,u3,s3e,XWr,zWr,uoe,QWr,WWr,HWr,b3,Zze,lf,v3,l3e,$$,UWr,i3e,JWr,eQe,vr,k$,YWr,df,KWr,boe,ZWr,eHr,voe,oHr,rHr,tHr,S$,aHr,d3e,nHr,sHr,lHr,Yt,R$,iHr,c3e,dHr,cHr,cf,fHr,f3e,mHr,gHr,Foe,hHr,pHr,_Hr,F3,uHr,Wr,P$,bHr,m3e,vHr,FHr,wn,THr,g3e,MHr,EHr,h3e,CHr,wHr,p3e,AHr,LHr,yHr,ke,T3,_3e,xHr,$Hr,Toe,kHr,SHr,RHr,M3,u3e,PHr,BHr,Moe,NHr,IHr,qHr,E3,b3e,jHr,DHr,Eoe,GHr,OHr,VHr,C3,v3e,XHr,zHr,Coe,QHr,WHr,HHr,w3,F3e,UHr,JHr,woe,YHr,KHr,ZHr,A3,T3e,eUr,oUr,Aoe,rUr,tUr,aUr,L3,M3e,nUr,sUr,Loe,lUr,iUr,dUr,y3,E3e,cUr,fUr,yoe,mUr,gUr,hUr,x3,C3e,pUr,_Ur,xoe,uUr,bUr,vUr,$3,w3e,FUr,TUr,$oe,MUr,EUr,CUr,k3,oQe,ff,S3,A3e,B$,wUr,L3e,AUr,rQe,Fr,N$,LUr,mf,yUr,koe,xUr,$Ur,Soe,kUr,SUr,RUr,I$,PUr,y3e,BUr,NUr,IUr,Kt,q$,qUr,x3e,jUr,DUr,gf,GUr,$3e,OUr,VUr,Roe,XUr,zUr,QUr,R3,WUr,Hr,j$,HUr,k3e,UUr,JUr,An,YUr,S3e,KUr,ZUr,R3e,eJr,oJr,P3e,rJr,tJr,aJr,Se,P3,B3e,nJr,sJr,Poe,lJr,iJr,dJr,B3,N3e,cJr,fJr,Boe,mJr,gJr,hJr,N3,I3e,pJr,_Jr,Noe,uJr,bJr,vJr,I3,q3e,FJr,TJr,Ioe,MJr,EJr,CJr,q3,j3e,wJr,AJr,qoe,LJr,yJr,xJr,j3,D3e,$Jr,kJr,joe,SJr,RJr,PJr,D3,G3e,BJr,NJr,Doe,IJr,qJr,jJr,G3,O3e,DJr,GJr,Goe,OJr,VJr,XJr,O3,V3e,zJr,QJr,Ooe,WJr,HJr,UJr,V3,X3e,JJr,YJr,Voe,KJr,ZJr,eYr,X3,tQe,hf,z3,z3e,D$,oYr,Q3e,rYr,aQe,Tr,G$,tYr,pf,aYr,Xoe,nYr,sYr,zoe,lYr,iYr,dYr,O$,cYr,W3e,fYr,mYr,gYr,Zt,V$,hYr,H3e,pYr,_Yr,_f,uYr,U3e,bYr,vYr,Qoe,FYr,TYr,MYr,Q3,EYr,Ur,X$,CYr,J3e,wYr,AYr,Ln,LYr,Y3e,yYr,xYr,K3e,$Yr,kYr,Z3e,SYr,RYr,PYr,Re,W3,e5e,BYr,NYr,Woe,IYr,qYr,jYr,H3,o5e,DYr,GYr,Hoe,OYr,VYr,XYr,U3,r5e,zYr,QYr,Uoe,WYr,HYr,UYr,J3,t5e,JYr,YYr,Joe,KYr,ZYr,eKr,Y3,a5e,oKr,rKr,Yoe,tKr,aKr,nKr,K3,n5e,sKr,lKr,Koe,iKr,dKr,cKr,Z3,s5e,fKr,mKr,Zoe,gKr,hKr,pKr,e5,l5e,_Kr,uKr,ere,bKr,vKr,FKr,o5,i5e,TKr,MKr,ore,EKr,CKr,wKr,r5,d5e,AKr,LKr,rre,yKr,xKr,$Kr,t5,nQe,uf,a5,c5e,z$,kKr,f5e,SKr,sQe,Mr,Q$,RKr,bf,PKr,tre,BKr,NKr,are,IKr,qKr,jKr,W$,DKr,m5e,GKr,OKr,VKr,ea,H$,XKr,g5e,zKr,QKr,vf,WKr,h5e,HKr,UKr,nre,JKr,YKr,KKr,n5,ZKr,Jr,U$,eZr,p5e,oZr,rZr,yn,tZr,_5e,aZr,nZr,u5e,sZr,lZr,b5e,iZr,dZr,cZr,Ve,s5,v5e,fZr,mZr,sre,gZr,hZr,pZr,l5,F5e,_Zr,uZr,lre,bZr,vZr,FZr,i5,T5e,TZr,MZr,ire,EZr,CZr,wZr,d5,M5e,AZr,LZr,dre,yZr,xZr,$Zr,c5,E5e,kZr,SZr,cre,RZr,PZr,BZr,f5,C5e,NZr,IZr,fre,qZr,jZr,DZr,m5,w5e,GZr,OZr,mre,VZr,XZr,zZr,g5,A5e,QZr,WZr,gre,HZr,UZr,JZr,h5,lQe,Ff,p5,L5e,J$,YZr,y5e,KZr,iQe,Er,Y$,ZZr,Tf,eet,hre,oet,ret,pre,tet,aet,net,K$,set,x5e,iet,det,cet,oa,Z$,fet,$5e,met,get,Mf,het,k5e,pet,_et,_re,uet,bet,vet,_5,Fet,Yr,ek,Tet,S5e,Met,Eet,xn,Cet,R5e,wet,Aet,P5e,Let,yet,B5e,xet,$et,ket,Xe,u5,N5e,Set,Ret,ure,Pet,Bet,Net,b5,I5e,Iet,qet,bre,jet,Det,Get,v5,q5e,Oet,Vet,vre,Xet,zet,Qet,F5,j5e,Wet,Het,Fre,Uet,Jet,Yet,T5,D5e,Ket,Zet,Tre,eot,oot,rot,M5,G5e,tot,aot,Mre,not,sot,lot,E5,O5e,iot,dot,Ere,cot,fot,mot,C5,V5e,got,hot,Cre,pot,_ot,uot,w5,dQe,Ef,A5,X5e,ok,bot,z5e,vot,cQe,Cr,rk,Fot,Cf,Tot,wre,Mot,Eot,Are,Cot,wot,Aot,tk,Lot,Q5e,yot,xot,$ot,ra,ak,kot,W5e,Sot,Rot,wf,Pot,H5e,Bot,Not,Lre,Iot,qot,jot,L5,Dot,Kr,nk,Got,U5e,Oot,Vot,$n,Xot,J5e,zot,Qot,Y5e,Wot,Hot,K5e,Uot,Jot,Yot,Z5e,y5,ewe,Kot,Zot,yre,ert,ort,rrt,x5,fQe,Af,$5,owe,sk,trt,rwe,art,mQe,wr,lk,nrt,Lf,srt,xre,lrt,irt,$re,drt,crt,frt,ik,mrt,twe,grt,hrt,prt,ta,dk,_rt,awe,urt,brt,yf,vrt,nwe,Frt,Trt,kre,Mrt,Ert,Crt,k5,wrt,Zr,ck,Art,swe,Lrt,yrt,kn,xrt,lwe,$rt,krt,iwe,Srt,Rrt,dwe,Prt,Brt,Nrt,fk,S5,cwe,Irt,qrt,Sre,jrt,Drt,Grt,R5,fwe,Ort,Vrt,Rre,Xrt,zrt,Qrt,P5,gQe,xf,B5,mwe,mk,Wrt,gwe,Hrt,hQe,Ar,gk,Urt,$f,Jrt,Pre,Yrt,Krt,Bre,Zrt,ett,ott,hk,rtt,hwe,ttt,att,ntt,aa,pk,stt,pwe,ltt,itt,kf,dtt,_we,ctt,ftt,Nre,mtt,gtt,htt,N5,ptt,et,_k,_tt,uwe,utt,btt,Sn,vtt,bwe,Ftt,Ttt,vwe,Mtt,Ett,Fwe,Ctt,wtt,Att,Twe,I5,Mwe,Ltt,ytt,Ire,xtt,$tt,ktt,q5,pQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),l6=new re({}),i6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Df=new Stt({props:{warning:!0,$$slots:{default:[bWt]},$$scope:{ctx:$}}}),d6=new re({}),c6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/configuration_auto.py#L611"}}),g6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/configuration_auto.py#L634"}}),Kg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),h6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/configuration_auto.py#L757"}}),p6=new re({}),_6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/tokenization_auto.py#L410"}}),v6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18079/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/tokenization_auto.py#L424"}}),Ph=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),F6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/tokenization_auto.py#L623"}}),T6=new re({}),M6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),w6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18079/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),up=new Stt({props:{$$slots:{default:[TWt]},$$scope:{ctx:$}}}),bp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),A6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),L6=new re({}),y6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/processing_auto.py#L89"}}),k6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/processing_auto.py#L103"}}),jp=new Stt({props:{$$slots:{default:[EWt]},$$scope:{ctx:$}}}),Dp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),S6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/processing_auto.py#L256"}}),R6=new re({}),P6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L785"}}),N6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),Vp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),I6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),Hu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),q6=new re({}),j6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L792"}}),G6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),Ju=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),O6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),V1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),V6=new re({}),X6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L807"}}),Q6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),z1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),W6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),R2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),H6=new re({}),U6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L814"}}),Y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),B2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),Tb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),Z6=new re({}),eL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L821"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),Eb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),Xb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),aL=new re({}),nL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L830"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),dL=new re({}),cL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L875"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),hL=new re({}),pL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L882"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L868"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L839"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L846"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L891"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18079/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L930"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L857"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L937"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),t7=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L960"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),m7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L944"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),h7=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),A7=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L951"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),y7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),S7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L969"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),P7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),G7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L976"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),V7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),H7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),Ay=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L923"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),J7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),e8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L898"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),r8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),n8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),Iy=new re({}),qy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L905"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),l8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),h8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_auto.py#L914"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),_8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),v8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),T8=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),u9=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),v9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),V9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),tx=new re({}),ax=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),z9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),ix=new re({}),dx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18079/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),gx=new re({}),hx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),IM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),jM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),JM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),KM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),yx=new re({}),xx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),Rx=new re({}),Px=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),J4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),jx=new re({}),Dx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),K4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),Xx=new re({}),zx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),Ux=new re({}),Jx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),QE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),e$=new re({}),o$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),t$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),n$=new re({}),s$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),i$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),c$=new re({}),f$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),g$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),$C=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),p$=new re({}),_$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),b$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),SC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),F$=new re({}),T$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),E$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),n3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),w$=new re({}),A$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),l3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),b3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),$$=new re({}),k$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),R$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),F3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),B$=new re({}),N$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),R3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),D$=new re({}),G$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),V$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),z$=new re({}),Q$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),H$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),h5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),J$=new re({}),Y$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),ok=new re({}),rk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ak=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),nk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),sk=new re({}),lk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),dk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),ck=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),mk=new re({}),gk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),pk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18079/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18079/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),_k=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18079/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18079/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18079/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),yi=o("Auto Classes"),Bf=l(),lt=a("p"),xi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=a("code"),t6=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),ki=o("Instantiating one of "),Pn=a("a"),a6=o("AutoConfig"),Bn=o(", "),Nn=a("a"),n6=o("AutoModel"),Si=o(`, and
`),In=a("a"),s6=o("AutoTokenizer"),Ri=o(" will directly create a class of the relevant architecture. For instance"),If=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),jS=o("will create a model that is an instance of "),Pi=a("a"),DS=o("BertModel"),GS=o("."),wo=l(),Ra=a("p"),OS=o("There is one class of "),qf=a("code"),VS=o("AutoModel"),wHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),cXe=l(),Bi=a("h2"),jf=a("a"),Sae=a("span"),F(l6.$$.fragment),AHe=l(),Rae=a("span"),LHe=o("Extending the Auto Classes"),fXe=l(),qn=a("p"),yHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Pae=a("code"),xHe=o("NewModel"),$He=o(", make sure you have a "),Bae=a("code"),kHe=o("NewModelConfig"),SHe=o(` then you can add those to the auto
classes like this:`),mXe=l(),F(i6.$$.fragment),gXe=l(),XS=a("p"),RHe=o("You will then be able to use the auto classes like you would usually do!"),hXe=l(),F(Df.$$.fragment),pXe=l(),Ni=a("h2"),Gf=a("a"),Nae=a("span"),F(d6.$$.fragment),PHe=l(),Iae=a("span"),BHe=o("AutoConfig"),_Xe=l(),Ao=a("div"),F(c6.$$.fragment),NHe=l(),f6=a("p"),IHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),zS=a("a"),qHe=o("from_pretrained()"),jHe=o(" class method."),DHe=l(),m6=a("p"),GHe=o("This class cannot be instantiated directly using "),qae=a("code"),OHe=o("__init__()"),VHe=o(" (throws an error)."),XHe=l(),Lr=a("div"),F(g6.$$.fragment),zHe=l(),jae=a("p"),QHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),WHe=l(),Ii=a("p"),HHe=o("The configuration class to instantiate is selected based on the "),Dae=a("code"),UHe=o("model_type"),JHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Gae=a("code"),YHe=o("pretrained_model_name_or_path"),KHe=o(":"),ZHe=l(),A=a("ul"),Of=a("li"),Oae=a("strong"),eUe=o("albert"),oUe=o(" \u2014 "),QS=a("a"),rUe=o("AlbertConfig"),tUe=o(" (ALBERT model)"),aUe=l(),Vf=a("li"),Vae=a("strong"),nUe=o("bart"),sUe=o(" \u2014 "),WS=a("a"),lUe=o("BartConfig"),iUe=o(" (BART model)"),dUe=l(),Xf=a("li"),Xae=a("strong"),cUe=o("beit"),fUe=o(" \u2014 "),HS=a("a"),mUe=o("BeitConfig"),gUe=o(" (BEiT model)"),hUe=l(),zf=a("li"),zae=a("strong"),pUe=o("bert"),_Ue=o(" \u2014 "),US=a("a"),uUe=o("BertConfig"),bUe=o(" (BERT model)"),vUe=l(),Qf=a("li"),Qae=a("strong"),FUe=o("bert-generation"),TUe=o(" \u2014 "),JS=a("a"),MUe=o("BertGenerationConfig"),EUe=o(" (Bert Generation model)"),CUe=l(),Wf=a("li"),Wae=a("strong"),wUe=o("big_bird"),AUe=o(" \u2014 "),YS=a("a"),LUe=o("BigBirdConfig"),yUe=o(" (BigBird model)"),xUe=l(),Hf=a("li"),Hae=a("strong"),$Ue=o("bigbird_pegasus"),kUe=o(" \u2014 "),KS=a("a"),SUe=o("BigBirdPegasusConfig"),RUe=o(" (BigBird-Pegasus model)"),PUe=l(),Uf=a("li"),Uae=a("strong"),BUe=o("blenderbot"),NUe=o(" \u2014 "),ZS=a("a"),IUe=o("BlenderbotConfig"),qUe=o(" (Blenderbot model)"),jUe=l(),Jf=a("li"),Jae=a("strong"),DUe=o("blenderbot-small"),GUe=o(" \u2014 "),eR=a("a"),OUe=o("BlenderbotSmallConfig"),VUe=o(" (BlenderbotSmall model)"),XUe=l(),Yf=a("li"),Yae=a("strong"),zUe=o("bloom"),QUe=o(" \u2014 "),oR=a("a"),WUe=o("BloomConfig"),HUe=o(" (BLOOM model)"),UUe=l(),Kf=a("li"),Kae=a("strong"),JUe=o("camembert"),YUe=o(" \u2014 "),rR=a("a"),KUe=o("CamembertConfig"),ZUe=o(" (CamemBERT model)"),eJe=l(),Zf=a("li"),Zae=a("strong"),oJe=o("canine"),rJe=o(" \u2014 "),tR=a("a"),tJe=o("CanineConfig"),aJe=o(" (CANINE model)"),nJe=l(),em=a("li"),ene=a("strong"),sJe=o("clip"),lJe=o(" \u2014 "),aR=a("a"),iJe=o("CLIPConfig"),dJe=o(" (CLIP model)"),cJe=l(),om=a("li"),one=a("strong"),fJe=o("codegen"),mJe=o(" \u2014 "),nR=a("a"),gJe=o("CodeGenConfig"),hJe=o(" (CodeGen model)"),pJe=l(),rm=a("li"),rne=a("strong"),_Je=o("convbert"),uJe=o(" \u2014 "),sR=a("a"),bJe=o("ConvBertConfig"),vJe=o(" (ConvBERT model)"),FJe=l(),tm=a("li"),tne=a("strong"),TJe=o("convnext"),MJe=o(" \u2014 "),lR=a("a"),EJe=o("ConvNextConfig"),CJe=o(" (ConvNeXT model)"),wJe=l(),am=a("li"),ane=a("strong"),AJe=o("ctrl"),LJe=o(" \u2014 "),iR=a("a"),yJe=o("CTRLConfig"),xJe=o(" (CTRL model)"),$Je=l(),nm=a("li"),nne=a("strong"),kJe=o("cvt"),SJe=o(" \u2014 "),dR=a("a"),RJe=o("CvtConfig"),PJe=o(" (CvT model)"),BJe=l(),sm=a("li"),sne=a("strong"),NJe=o("data2vec-audio"),IJe=o(" \u2014 "),cR=a("a"),qJe=o("Data2VecAudioConfig"),jJe=o(" (Data2VecAudio model)"),DJe=l(),lm=a("li"),lne=a("strong"),GJe=o("data2vec-text"),OJe=o(" \u2014 "),fR=a("a"),VJe=o("Data2VecTextConfig"),XJe=o(" (Data2VecText model)"),zJe=l(),im=a("li"),ine=a("strong"),QJe=o("data2vec-vision"),WJe=o(" \u2014 "),mR=a("a"),HJe=o("Data2VecVisionConfig"),UJe=o(" (Data2VecVision model)"),JJe=l(),dm=a("li"),dne=a("strong"),YJe=o("deberta"),KJe=o(" \u2014 "),gR=a("a"),ZJe=o("DebertaConfig"),eYe=o(" (DeBERTa model)"),oYe=l(),cm=a("li"),cne=a("strong"),rYe=o("deberta-v2"),tYe=o(" \u2014 "),hR=a("a"),aYe=o("DebertaV2Config"),nYe=o(" (DeBERTa-v2 model)"),sYe=l(),fm=a("li"),fne=a("strong"),lYe=o("decision_transformer"),iYe=o(" \u2014 "),pR=a("a"),dYe=o("DecisionTransformerConfig"),cYe=o(" (Decision Transformer model)"),fYe=l(),mm=a("li"),mne=a("strong"),mYe=o("deit"),gYe=o(" \u2014 "),_R=a("a"),hYe=o("DeiTConfig"),pYe=o(" (DeiT model)"),_Ye=l(),gm=a("li"),gne=a("strong"),uYe=o("detr"),bYe=o(" \u2014 "),uR=a("a"),vYe=o("DetrConfig"),FYe=o(" (DETR model)"),TYe=l(),hm=a("li"),hne=a("strong"),MYe=o("distilbert"),EYe=o(" \u2014 "),bR=a("a"),CYe=o("DistilBertConfig"),wYe=o(" (DistilBERT model)"),AYe=l(),pm=a("li"),pne=a("strong"),LYe=o("dpr"),yYe=o(" \u2014 "),vR=a("a"),xYe=o("DPRConfig"),$Ye=o(" (DPR model)"),kYe=l(),_m=a("li"),_ne=a("strong"),SYe=o("dpt"),RYe=o(" \u2014 "),FR=a("a"),PYe=o("DPTConfig"),BYe=o(" (DPT model)"),NYe=l(),um=a("li"),une=a("strong"),IYe=o("electra"),qYe=o(" \u2014 "),TR=a("a"),jYe=o("ElectraConfig"),DYe=o(" (ELECTRA model)"),GYe=l(),bm=a("li"),bne=a("strong"),OYe=o("encoder-decoder"),VYe=o(" \u2014 "),MR=a("a"),XYe=o("EncoderDecoderConfig"),zYe=o(" (Encoder decoder model)"),QYe=l(),vm=a("li"),vne=a("strong"),WYe=o("flaubert"),HYe=o(" \u2014 "),ER=a("a"),UYe=o("FlaubertConfig"),JYe=o(" (FlauBERT model)"),YYe=l(),Fm=a("li"),Fne=a("strong"),KYe=o("flava"),ZYe=o(" \u2014 "),CR=a("a"),eKe=o("FlavaConfig"),oKe=o(" (FLAVA model)"),rKe=l(),Tm=a("li"),Tne=a("strong"),tKe=o("fnet"),aKe=o(" \u2014 "),wR=a("a"),nKe=o("FNetConfig"),sKe=o(" (FNet model)"),lKe=l(),Mm=a("li"),Mne=a("strong"),iKe=o("fsmt"),dKe=o(" \u2014 "),AR=a("a"),cKe=o("FSMTConfig"),fKe=o(" (FairSeq Machine-Translation model)"),mKe=l(),Em=a("li"),Ene=a("strong"),gKe=o("funnel"),hKe=o(" \u2014 "),LR=a("a"),pKe=o("FunnelConfig"),_Ke=o(" (Funnel Transformer model)"),uKe=l(),Cm=a("li"),Cne=a("strong"),bKe=o("glpn"),vKe=o(" \u2014 "),yR=a("a"),FKe=o("GLPNConfig"),TKe=o(" (GLPN model)"),MKe=l(),wm=a("li"),wne=a("strong"),EKe=o("gpt2"),CKe=o(" \u2014 "),xR=a("a"),wKe=o("GPT2Config"),AKe=o(" (OpenAI GPT-2 model)"),LKe=l(),Am=a("li"),Ane=a("strong"),yKe=o("gpt_neo"),xKe=o(" \u2014 "),$R=a("a"),$Ke=o("GPTNeoConfig"),kKe=o(" (GPT Neo model)"),SKe=l(),Lm=a("li"),Lne=a("strong"),RKe=o("gpt_neox"),PKe=o(" \u2014 "),kR=a("a"),BKe=o("GPTNeoXConfig"),NKe=o(" (GPT NeoX model)"),IKe=l(),ym=a("li"),yne=a("strong"),qKe=o("gptj"),jKe=o(" \u2014 "),SR=a("a"),DKe=o("GPTJConfig"),GKe=o(" (GPT-J model)"),OKe=l(),xm=a("li"),xne=a("strong"),VKe=o("groupvit"),XKe=o(" \u2014 "),RR=a("a"),zKe=o("GroupViTConfig"),QKe=o(" (GroupViT model)"),WKe=l(),$m=a("li"),$ne=a("strong"),HKe=o("hubert"),UKe=o(" \u2014 "),PR=a("a"),JKe=o("HubertConfig"),YKe=o(" (Hubert model)"),KKe=l(),km=a("li"),kne=a("strong"),ZKe=o("ibert"),eZe=o(" \u2014 "),BR=a("a"),oZe=o("IBertConfig"),rZe=o(" (I-BERT model)"),tZe=l(),Sm=a("li"),Sne=a("strong"),aZe=o("imagegpt"),nZe=o(" \u2014 "),NR=a("a"),sZe=o("ImageGPTConfig"),lZe=o(" (ImageGPT model)"),iZe=l(),Rm=a("li"),Rne=a("strong"),dZe=o("layoutlm"),cZe=o(" \u2014 "),IR=a("a"),fZe=o("LayoutLMConfig"),mZe=o(" (LayoutLM model)"),gZe=l(),Pm=a("li"),Pne=a("strong"),hZe=o("layoutlmv2"),pZe=o(" \u2014 "),qR=a("a"),_Ze=o("LayoutLMv2Config"),uZe=o(" (LayoutLMv2 model)"),bZe=l(),Bm=a("li"),Bne=a("strong"),vZe=o("layoutlmv3"),FZe=o(" \u2014 "),jR=a("a"),TZe=o("LayoutLMv3Config"),MZe=o(" (LayoutLMv3 model)"),EZe=l(),Nm=a("li"),Nne=a("strong"),CZe=o("led"),wZe=o(" \u2014 "),DR=a("a"),AZe=o("LEDConfig"),LZe=o(" (LED model)"),yZe=l(),Im=a("li"),Ine=a("strong"),xZe=o("levit"),$Ze=o(" \u2014 "),GR=a("a"),kZe=o("LevitConfig"),SZe=o(" (LeViT model)"),RZe=l(),qm=a("li"),qne=a("strong"),PZe=o("longformer"),BZe=o(" \u2014 "),OR=a("a"),NZe=o("LongformerConfig"),IZe=o(" (Longformer model)"),qZe=l(),jm=a("li"),jne=a("strong"),jZe=o("longt5"),DZe=o(" \u2014 "),VR=a("a"),GZe=o("LongT5Config"),OZe=o(" (LongT5 model)"),VZe=l(),Dm=a("li"),Dne=a("strong"),XZe=o("luke"),zZe=o(" \u2014 "),XR=a("a"),QZe=o("LukeConfig"),WZe=o(" (LUKE model)"),HZe=l(),Gm=a("li"),Gne=a("strong"),UZe=o("lxmert"),JZe=o(" \u2014 "),zR=a("a"),YZe=o("LxmertConfig"),KZe=o(" (LXMERT model)"),ZZe=l(),Om=a("li"),One=a("strong"),eeo=o("m2m_100"),oeo=o(" \u2014 "),QR=a("a"),reo=o("M2M100Config"),teo=o(" (M2M100 model)"),aeo=l(),Vm=a("li"),Vne=a("strong"),neo=o("marian"),seo=o(" \u2014 "),WR=a("a"),leo=o("MarianConfig"),ieo=o(" (Marian model)"),deo=l(),Xm=a("li"),Xne=a("strong"),ceo=o("maskformer"),feo=o(" \u2014 "),HR=a("a"),meo=o("MaskFormerConfig"),geo=o(" (MaskFormer model)"),heo=l(),zm=a("li"),zne=a("strong"),peo=o("mbart"),_eo=o(" \u2014 "),UR=a("a"),ueo=o("MBartConfig"),beo=o(" (mBART model)"),veo=l(),Qm=a("li"),Qne=a("strong"),Feo=o("mctct"),Teo=o(" \u2014 "),JR=a("a"),Meo=o("MCTCTConfig"),Eeo=o(" (M-CTC-T model)"),Ceo=l(),Wm=a("li"),Wne=a("strong"),weo=o("megatron-bert"),Aeo=o(" \u2014 "),YR=a("a"),Leo=o("MegatronBertConfig"),yeo=o(" (Megatron-BERT model)"),xeo=l(),Hm=a("li"),Hne=a("strong"),$eo=o("mobilebert"),keo=o(" \u2014 "),KR=a("a"),Seo=o("MobileBertConfig"),Reo=o(" (MobileBERT model)"),Peo=l(),Um=a("li"),Une=a("strong"),Beo=o("mobilevit"),Neo=o(" \u2014 "),ZR=a("a"),Ieo=o("MobileViTConfig"),qeo=o(" (MobileViT model)"),jeo=l(),Jm=a("li"),Jne=a("strong"),Deo=o("mpnet"),Geo=o(" \u2014 "),eP=a("a"),Oeo=o("MPNetConfig"),Veo=o(" (MPNet model)"),Xeo=l(),Ym=a("li"),Yne=a("strong"),zeo=o("mt5"),Qeo=o(" \u2014 "),oP=a("a"),Weo=o("MT5Config"),Heo=o(" (MT5 model)"),Ueo=l(),Km=a("li"),Kne=a("strong"),Jeo=o("mvp"),Yeo=o(" \u2014 "),rP=a("a"),Keo=o("MvpConfig"),Zeo=o(" (MVP model)"),eoo=l(),Zm=a("li"),Zne=a("strong"),ooo=o("nezha"),roo=o(" \u2014 "),tP=a("a"),too=o("NezhaConfig"),aoo=o(" (Nezha model)"),noo=l(),eg=a("li"),ese=a("strong"),soo=o("nystromformer"),loo=o(" \u2014 "),aP=a("a"),ioo=o("NystromformerConfig"),doo=o(" (Nystr\xF6mformer model)"),coo=l(),og=a("li"),ose=a("strong"),foo=o("openai-gpt"),moo=o(" \u2014 "),nP=a("a"),goo=o("OpenAIGPTConfig"),hoo=o(" (OpenAI GPT model)"),poo=l(),rg=a("li"),rse=a("strong"),_oo=o("opt"),uoo=o(" \u2014 "),sP=a("a"),boo=o("OPTConfig"),voo=o(" (OPT model)"),Foo=l(),tg=a("li"),tse=a("strong"),Too=o("pegasus"),Moo=o(" \u2014 "),lP=a("a"),Eoo=o("PegasusConfig"),Coo=o(" (Pegasus model)"),woo=l(),ag=a("li"),ase=a("strong"),Aoo=o("perceiver"),Loo=o(" \u2014 "),iP=a("a"),yoo=o("PerceiverConfig"),xoo=o(" (Perceiver model)"),$oo=l(),ng=a("li"),nse=a("strong"),koo=o("plbart"),Soo=o(" \u2014 "),dP=a("a"),Roo=o("PLBartConfig"),Poo=o(" (PLBart model)"),Boo=l(),sg=a("li"),sse=a("strong"),Noo=o("poolformer"),Ioo=o(" \u2014 "),cP=a("a"),qoo=o("PoolFormerConfig"),joo=o(" (PoolFormer model)"),Doo=l(),lg=a("li"),lse=a("strong"),Goo=o("prophetnet"),Ooo=o(" \u2014 "),fP=a("a"),Voo=o("ProphetNetConfig"),Xoo=o(" (ProphetNet model)"),zoo=l(),ig=a("li"),ise=a("strong"),Qoo=o("qdqbert"),Woo=o(" \u2014 "),mP=a("a"),Hoo=o("QDQBertConfig"),Uoo=o(" (QDQBert model)"),Joo=l(),dg=a("li"),dse=a("strong"),Yoo=o("rag"),Koo=o(" \u2014 "),gP=a("a"),Zoo=o("RagConfig"),ero=o(" (RAG model)"),oro=l(),cg=a("li"),cse=a("strong"),rro=o("realm"),tro=o(" \u2014 "),hP=a("a"),aro=o("RealmConfig"),nro=o(" (REALM model)"),sro=l(),fg=a("li"),fse=a("strong"),lro=o("reformer"),iro=o(" \u2014 "),pP=a("a"),dro=o("ReformerConfig"),cro=o(" (Reformer model)"),fro=l(),mg=a("li"),mse=a("strong"),mro=o("regnet"),gro=o(" \u2014 "),_P=a("a"),hro=o("RegNetConfig"),pro=o(" (RegNet model)"),_ro=l(),gg=a("li"),gse=a("strong"),uro=o("rembert"),bro=o(" \u2014 "),uP=a("a"),vro=o("RemBertConfig"),Fro=o(" (RemBERT model)"),Tro=l(),hg=a("li"),hse=a("strong"),Mro=o("resnet"),Ero=o(" \u2014 "),bP=a("a"),Cro=o("ResNetConfig"),wro=o(" (ResNet model)"),Aro=l(),pg=a("li"),pse=a("strong"),Lro=o("retribert"),yro=o(" \u2014 "),vP=a("a"),xro=o("RetriBertConfig"),$ro=o(" (RetriBERT model)"),kro=l(),_g=a("li"),_se=a("strong"),Sro=o("roberta"),Rro=o(" \u2014 "),FP=a("a"),Pro=o("RobertaConfig"),Bro=o(" (RoBERTa model)"),Nro=l(),ug=a("li"),use=a("strong"),Iro=o("roformer"),qro=o(" \u2014 "),TP=a("a"),jro=o("RoFormerConfig"),Dro=o(" (RoFormer model)"),Gro=l(),bg=a("li"),bse=a("strong"),Oro=o("segformer"),Vro=o(" \u2014 "),MP=a("a"),Xro=o("SegformerConfig"),zro=o(" (SegFormer model)"),Qro=l(),vg=a("li"),vse=a("strong"),Wro=o("sew"),Hro=o(" \u2014 "),EP=a("a"),Uro=o("SEWConfig"),Jro=o(" (SEW model)"),Yro=l(),Fg=a("li"),Fse=a("strong"),Kro=o("sew-d"),Zro=o(" \u2014 "),CP=a("a"),eto=o("SEWDConfig"),oto=o(" (SEW-D model)"),rto=l(),Tg=a("li"),Tse=a("strong"),tto=o("speech-encoder-decoder"),ato=o(" \u2014 "),wP=a("a"),nto=o("SpeechEncoderDecoderConfig"),sto=o(" (Speech Encoder decoder model)"),lto=l(),Mg=a("li"),Mse=a("strong"),ito=o("speech_to_text"),dto=o(" \u2014 "),AP=a("a"),cto=o("Speech2TextConfig"),fto=o(" (Speech2Text model)"),mto=l(),Eg=a("li"),Ese=a("strong"),gto=o("speech_to_text_2"),hto=o(" \u2014 "),LP=a("a"),pto=o("Speech2Text2Config"),_to=o(" (Speech2Text2 model)"),uto=l(),Cg=a("li"),Cse=a("strong"),bto=o("splinter"),vto=o(" \u2014 "),yP=a("a"),Fto=o("SplinterConfig"),Tto=o(" (Splinter model)"),Mto=l(),wg=a("li"),wse=a("strong"),Eto=o("squeezebert"),Cto=o(" \u2014 "),xP=a("a"),wto=o("SqueezeBertConfig"),Ato=o(" (SqueezeBERT model)"),Lto=l(),Ag=a("li"),Ase=a("strong"),yto=o("swin"),xto=o(" \u2014 "),$P=a("a"),$to=o("SwinConfig"),kto=o(" (Swin Transformer model)"),Sto=l(),Lg=a("li"),Lse=a("strong"),Rto=o("t5"),Pto=o(" \u2014 "),kP=a("a"),Bto=o("T5Config"),Nto=o(" (T5 model)"),Ito=l(),yg=a("li"),yse=a("strong"),qto=o("tapas"),jto=o(" \u2014 "),SP=a("a"),Dto=o("TapasConfig"),Gto=o(" (TAPAS model)"),Oto=l(),xg=a("li"),xse=a("strong"),Vto=o("trajectory_transformer"),Xto=o(" \u2014 "),RP=a("a"),zto=o("TrajectoryTransformerConfig"),Qto=o(" (Trajectory Transformer model)"),Wto=l(),$g=a("li"),$se=a("strong"),Hto=o("transfo-xl"),Uto=o(" \u2014 "),PP=a("a"),Jto=o("TransfoXLConfig"),Yto=o(" (Transformer-XL model)"),Kto=l(),kg=a("li"),kse=a("strong"),Zto=o("trocr"),eao=o(" \u2014 "),BP=a("a"),oao=o("TrOCRConfig"),rao=o(" (TrOCR model)"),tao=l(),Sg=a("li"),Sse=a("strong"),aao=o("unispeech"),nao=o(" \u2014 "),NP=a("a"),sao=o("UniSpeechConfig"),lao=o(" (UniSpeech model)"),iao=l(),Rg=a("li"),Rse=a("strong"),dao=o("unispeech-sat"),cao=o(" \u2014 "),IP=a("a"),fao=o("UniSpeechSatConfig"),mao=o(" (UniSpeechSat model)"),gao=l(),Pg=a("li"),Pse=a("strong"),hao=o("van"),pao=o(" \u2014 "),qP=a("a"),_ao=o("VanConfig"),uao=o(" (VAN model)"),bao=l(),Bg=a("li"),Bse=a("strong"),vao=o("vilt"),Fao=o(" \u2014 "),jP=a("a"),Tao=o("ViltConfig"),Mao=o(" (ViLT model)"),Eao=l(),Ng=a("li"),Nse=a("strong"),Cao=o("vision-encoder-decoder"),wao=o(" \u2014 "),DP=a("a"),Aao=o("VisionEncoderDecoderConfig"),Lao=o(" (Vision Encoder decoder model)"),yao=l(),Ig=a("li"),Ise=a("strong"),xao=o("vision-text-dual-encoder"),$ao=o(" \u2014 "),GP=a("a"),kao=o("VisionTextDualEncoderConfig"),Sao=o(" (VisionTextDualEncoder model)"),Rao=l(),qg=a("li"),qse=a("strong"),Pao=o("visual_bert"),Bao=o(" \u2014 "),OP=a("a"),Nao=o("VisualBertConfig"),Iao=o(" (VisualBERT model)"),qao=l(),jg=a("li"),jse=a("strong"),jao=o("vit"),Dao=o(" \u2014 "),VP=a("a"),Gao=o("ViTConfig"),Oao=o(" (ViT model)"),Vao=l(),Dg=a("li"),Dse=a("strong"),Xao=o("vit_mae"),zao=o(" \u2014 "),XP=a("a"),Qao=o("ViTMAEConfig"),Wao=o(" (ViTMAE model)"),Hao=l(),Gg=a("li"),Gse=a("strong"),Uao=o("wav2vec2"),Jao=o(" \u2014 "),zP=a("a"),Yao=o("Wav2Vec2Config"),Kao=o(" (Wav2Vec2 model)"),Zao=l(),Og=a("li"),Ose=a("strong"),eno=o("wav2vec2-conformer"),ono=o(" \u2014 "),QP=a("a"),rno=o("Wav2Vec2ConformerConfig"),tno=o(" (Wav2Vec2-Conformer model)"),ano=l(),Vg=a("li"),Vse=a("strong"),nno=o("wavlm"),sno=o(" \u2014 "),WP=a("a"),lno=o("WavLMConfig"),ino=o(" (WavLM model)"),dno=l(),Xg=a("li"),Xse=a("strong"),cno=o("xglm"),fno=o(" \u2014 "),HP=a("a"),mno=o("XGLMConfig"),gno=o(" (XGLM model)"),hno=l(),zg=a("li"),zse=a("strong"),pno=o("xlm"),_no=o(" \u2014 "),UP=a("a"),uno=o("XLMConfig"),bno=o(" (XLM model)"),vno=l(),Qg=a("li"),Qse=a("strong"),Fno=o("xlm-prophetnet"),Tno=o(" \u2014 "),JP=a("a"),Mno=o("XLMProphetNetConfig"),Eno=o(" (XLM-ProphetNet model)"),Cno=l(),Wg=a("li"),Wse=a("strong"),wno=o("xlm-roberta"),Ano=o(" \u2014 "),YP=a("a"),Lno=o("XLMRobertaConfig"),yno=o(" (XLM-RoBERTa model)"),xno=l(),Hg=a("li"),Hse=a("strong"),$no=o("xlm-roberta-xl"),kno=o(" \u2014 "),KP=a("a"),Sno=o("XLMRobertaXLConfig"),Rno=o(" (XLM-RoBERTa-XL model)"),Pno=l(),Ug=a("li"),Use=a("strong"),Bno=o("xlnet"),Nno=o(" \u2014 "),ZP=a("a"),Ino=o("XLNetConfig"),qno=o(" (XLNet model)"),jno=l(),Jg=a("li"),Jse=a("strong"),Dno=o("yolos"),Gno=o(" \u2014 "),eB=a("a"),Ono=o("YolosConfig"),Vno=o(" (YOLOS model)"),Xno=l(),Yg=a("li"),Yse=a("strong"),zno=o("yoso"),Qno=o(" \u2014 "),oB=a("a"),Wno=o("YosoConfig"),Hno=o(" (YOSO model)"),Uno=l(),F(Kg.$$.fragment),Jno=l(),Zg=a("div"),F(h6.$$.fragment),Yno=l(),Kse=a("p"),Kno=o("Register a new configuration for this class."),uXe=l(),qi=a("h2"),eh=a("a"),Zse=a("span"),F(p6.$$.fragment),Zno=l(),ele=a("span"),eso=o("AutoTokenizer"),bXe=l(),Lo=a("div"),F(_6.$$.fragment),oso=l(),u6=a("p"),rso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),rB=a("a"),tso=o("AutoTokenizer.from_pretrained()"),aso=o(" class method."),nso=l(),b6=a("p"),sso=o("This class cannot be instantiated directly using "),ole=a("code"),lso=o("__init__()"),iso=o(" (throws an error)."),dso=l(),yr=a("div"),F(v6.$$.fragment),cso=l(),rle=a("p"),fso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mso=l(),Pa=a("p"),gso=o("The tokenizer class to instantiate is selected based on the "),tle=a("code"),hso=o("model_type"),pso=o(` property of the config object (either
passed as an argument or loaded from `),ale=a("code"),_so=o("pretrained_model_name_or_path"),uso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nle=a("code"),bso=o("pretrained_model_name_or_path"),vso=o(":"),Fso=l(),k=a("ul"),jn=a("li"),sle=a("strong"),Tso=o("albert"),Mso=o(" \u2014 "),tB=a("a"),Eso=o("AlbertTokenizer"),Cso=o(" or "),aB=a("a"),wso=o("AlbertTokenizerFast"),Aso=o(" (ALBERT model)"),Lso=l(),Dn=a("li"),lle=a("strong"),yso=o("bart"),xso=o(" \u2014 "),nB=a("a"),$so=o("BartTokenizer"),kso=o(" or "),sB=a("a"),Sso=o("BartTokenizerFast"),Rso=o(" (BART model)"),Pso=l(),Gn=a("li"),ile=a("strong"),Bso=o("barthez"),Nso=o(" \u2014 "),lB=a("a"),Iso=o("BarthezTokenizer"),qso=o(" or "),iB=a("a"),jso=o("BarthezTokenizerFast"),Dso=o(" (BARThez model)"),Gso=l(),oh=a("li"),dle=a("strong"),Oso=o("bartpho"),Vso=o(" \u2014 "),dB=a("a"),Xso=o("BartphoTokenizer"),zso=o(" (BARTpho model)"),Qso=l(),On=a("li"),cle=a("strong"),Wso=o("bert"),Hso=o(" \u2014 "),cB=a("a"),Uso=o("BertTokenizer"),Jso=o(" or "),fB=a("a"),Yso=o("BertTokenizerFast"),Kso=o(" (BERT model)"),Zso=l(),rh=a("li"),fle=a("strong"),elo=o("bert-generation"),olo=o(" \u2014 "),mB=a("a"),rlo=o("BertGenerationTokenizer"),tlo=o(" (Bert Generation model)"),alo=l(),th=a("li"),mle=a("strong"),nlo=o("bert-japanese"),slo=o(" \u2014 "),gB=a("a"),llo=o("BertJapaneseTokenizer"),ilo=o(" (BertJapanese model)"),dlo=l(),ah=a("li"),gle=a("strong"),clo=o("bertweet"),flo=o(" \u2014 "),hB=a("a"),mlo=o("BertweetTokenizer"),glo=o(" (BERTweet model)"),hlo=l(),Vn=a("li"),hle=a("strong"),plo=o("big_bird"),_lo=o(" \u2014 "),pB=a("a"),ulo=o("BigBirdTokenizer"),blo=o(" or "),_B=a("a"),vlo=o("BigBirdTokenizerFast"),Flo=o(" (BigBird model)"),Tlo=l(),Xn=a("li"),ple=a("strong"),Mlo=o("bigbird_pegasus"),Elo=o(" \u2014 "),uB=a("a"),Clo=o("PegasusTokenizer"),wlo=o(" or "),bB=a("a"),Alo=o("PegasusTokenizerFast"),Llo=o(" (BigBird-Pegasus model)"),ylo=l(),zn=a("li"),_le=a("strong"),xlo=o("blenderbot"),$lo=o(" \u2014 "),vB=a("a"),klo=o("BlenderbotTokenizer"),Slo=o(" or "),FB=a("a"),Rlo=o("BlenderbotTokenizerFast"),Plo=o(" (Blenderbot model)"),Blo=l(),nh=a("li"),ule=a("strong"),Nlo=o("blenderbot-small"),Ilo=o(" \u2014 "),TB=a("a"),qlo=o("BlenderbotSmallTokenizer"),jlo=o(" (BlenderbotSmall model)"),Dlo=l(),sh=a("li"),ble=a("strong"),Glo=o("bloom"),Olo=o(" \u2014 "),MB=a("a"),Vlo=o("BloomTokenizerFast"),Xlo=o(" (BLOOM model)"),zlo=l(),lh=a("li"),vle=a("strong"),Qlo=o("byt5"),Wlo=o(" \u2014 "),EB=a("a"),Hlo=o("ByT5Tokenizer"),Ulo=o(" (ByT5 model)"),Jlo=l(),Qn=a("li"),Fle=a("strong"),Ylo=o("camembert"),Klo=o(" \u2014 "),CB=a("a"),Zlo=o("CamembertTokenizer"),eio=o(" or "),wB=a("a"),oio=o("CamembertTokenizerFast"),rio=o(" (CamemBERT model)"),tio=l(),ih=a("li"),Tle=a("strong"),aio=o("canine"),nio=o(" \u2014 "),AB=a("a"),sio=o("CanineTokenizer"),lio=o(" (CANINE model)"),iio=l(),Wn=a("li"),Mle=a("strong"),dio=o("clip"),cio=o(" \u2014 "),LB=a("a"),fio=o("CLIPTokenizer"),mio=o(" or "),yB=a("a"),gio=o("CLIPTokenizerFast"),hio=o(" (CLIP model)"),pio=l(),Hn=a("li"),Ele=a("strong"),_io=o("codegen"),uio=o(" \u2014 "),xB=a("a"),bio=o("CodeGenTokenizer"),vio=o(" or "),$B=a("a"),Fio=o("CodeGenTokenizerFast"),Tio=o(" (CodeGen model)"),Mio=l(),Un=a("li"),Cle=a("strong"),Eio=o("convbert"),Cio=o(" \u2014 "),kB=a("a"),wio=o("ConvBertTokenizer"),Aio=o(" or "),SB=a("a"),Lio=o("ConvBertTokenizerFast"),yio=o(" (ConvBERT model)"),xio=l(),Jn=a("li"),wle=a("strong"),$io=o("cpm"),kio=o(" \u2014 "),RB=a("a"),Sio=o("CpmTokenizer"),Rio=o(" or "),PB=a("a"),Pio=o("CpmTokenizerFast"),Bio=o(" (CPM model)"),Nio=l(),dh=a("li"),Ale=a("strong"),Iio=o("ctrl"),qio=o(" \u2014 "),BB=a("a"),jio=o("CTRLTokenizer"),Dio=o(" (CTRL model)"),Gio=l(),Yn=a("li"),Lle=a("strong"),Oio=o("data2vec-text"),Vio=o(" \u2014 "),NB=a("a"),Xio=o("RobertaTokenizer"),zio=o(" or "),IB=a("a"),Qio=o("RobertaTokenizerFast"),Wio=o(" (Data2VecText model)"),Hio=l(),Kn=a("li"),yle=a("strong"),Uio=o("deberta"),Jio=o(" \u2014 "),qB=a("a"),Yio=o("DebertaTokenizer"),Kio=o(" or "),jB=a("a"),Zio=o("DebertaTokenizerFast"),edo=o(" (DeBERTa model)"),odo=l(),Zn=a("li"),xle=a("strong"),rdo=o("deberta-v2"),tdo=o(" \u2014 "),DB=a("a"),ado=o("DebertaV2Tokenizer"),ndo=o(" or "),GB=a("a"),sdo=o("DebertaV2TokenizerFast"),ldo=o(" (DeBERTa-v2 model)"),ido=l(),es=a("li"),$le=a("strong"),ddo=o("distilbert"),cdo=o(" \u2014 "),OB=a("a"),fdo=o("DistilBertTokenizer"),mdo=o(" or "),VB=a("a"),gdo=o("DistilBertTokenizerFast"),hdo=o(" (DistilBERT model)"),pdo=l(),os=a("li"),kle=a("strong"),_do=o("dpr"),udo=o(" \u2014 "),XB=a("a"),bdo=o("DPRQuestionEncoderTokenizer"),vdo=o(" or "),zB=a("a"),Fdo=o("DPRQuestionEncoderTokenizerFast"),Tdo=o(" (DPR model)"),Mdo=l(),rs=a("li"),Sle=a("strong"),Edo=o("electra"),Cdo=o(" \u2014 "),QB=a("a"),wdo=o("ElectraTokenizer"),Ado=o(" or "),WB=a("a"),Ldo=o("ElectraTokenizerFast"),ydo=o(" (ELECTRA model)"),xdo=l(),ch=a("li"),Rle=a("strong"),$do=o("flaubert"),kdo=o(" \u2014 "),HB=a("a"),Sdo=o("FlaubertTokenizer"),Rdo=o(" (FlauBERT model)"),Pdo=l(),ts=a("li"),Ple=a("strong"),Bdo=o("fnet"),Ndo=o(" \u2014 "),UB=a("a"),Ido=o("FNetTokenizer"),qdo=o(" or "),JB=a("a"),jdo=o("FNetTokenizerFast"),Ddo=o(" (FNet model)"),Gdo=l(),fh=a("li"),Ble=a("strong"),Odo=o("fsmt"),Vdo=o(" \u2014 "),YB=a("a"),Xdo=o("FSMTTokenizer"),zdo=o(" (FairSeq Machine-Translation model)"),Qdo=l(),as=a("li"),Nle=a("strong"),Wdo=o("funnel"),Hdo=o(" \u2014 "),KB=a("a"),Udo=o("FunnelTokenizer"),Jdo=o(" or "),ZB=a("a"),Ydo=o("FunnelTokenizerFast"),Kdo=o(" (Funnel Transformer model)"),Zdo=l(),ns=a("li"),Ile=a("strong"),eco=o("gpt2"),oco=o(" \u2014 "),eN=a("a"),rco=o("GPT2Tokenizer"),tco=o(" or "),oN=a("a"),aco=o("GPT2TokenizerFast"),nco=o(" (OpenAI GPT-2 model)"),sco=l(),ss=a("li"),qle=a("strong"),lco=o("gpt_neo"),ico=o(" \u2014 "),rN=a("a"),dco=o("GPT2Tokenizer"),cco=o(" or "),tN=a("a"),fco=o("GPT2TokenizerFast"),mco=o(" (GPT Neo model)"),gco=l(),mh=a("li"),jle=a("strong"),hco=o("gpt_neox"),pco=o(" \u2014 "),aN=a("a"),_co=o("GPTNeoXTokenizerFast"),uco=o(" (GPT NeoX model)"),bco=l(),ls=a("li"),Dle=a("strong"),vco=o("gptj"),Fco=o(" \u2014 "),nN=a("a"),Tco=o("GPT2Tokenizer"),Mco=o(" or "),sN=a("a"),Eco=o("GPT2TokenizerFast"),Cco=o(" (GPT-J model)"),wco=l(),is=a("li"),Gle=a("strong"),Aco=o("groupvit"),Lco=o(" \u2014 "),lN=a("a"),yco=o("CLIPTokenizer"),xco=o(" or "),iN=a("a"),$co=o("CLIPTokenizerFast"),kco=o(" (GroupViT model)"),Sco=l(),ds=a("li"),Ole=a("strong"),Rco=o("herbert"),Pco=o(" \u2014 "),dN=a("a"),Bco=o("HerbertTokenizer"),Nco=o(" or "),cN=a("a"),Ico=o("HerbertTokenizerFast"),qco=o(" (HerBERT model)"),jco=l(),gh=a("li"),Vle=a("strong"),Dco=o("hubert"),Gco=o(" \u2014 "),fN=a("a"),Oco=o("Wav2Vec2CTCTokenizer"),Vco=o(" (Hubert model)"),Xco=l(),cs=a("li"),Xle=a("strong"),zco=o("ibert"),Qco=o(" \u2014 "),mN=a("a"),Wco=o("RobertaTokenizer"),Hco=o(" or "),gN=a("a"),Uco=o("RobertaTokenizerFast"),Jco=o(" (I-BERT model)"),Yco=l(),fs=a("li"),zle=a("strong"),Kco=o("layoutlm"),Zco=o(" \u2014 "),hN=a("a"),efo=o("LayoutLMTokenizer"),ofo=o(" or "),pN=a("a"),rfo=o("LayoutLMTokenizerFast"),tfo=o(" (LayoutLM model)"),afo=l(),ms=a("li"),Qle=a("strong"),nfo=o("layoutlmv2"),sfo=o(" \u2014 "),_N=a("a"),lfo=o("LayoutLMv2Tokenizer"),ifo=o(" or "),uN=a("a"),dfo=o("LayoutLMv2TokenizerFast"),cfo=o(" (LayoutLMv2 model)"),ffo=l(),gs=a("li"),Wle=a("strong"),mfo=o("layoutlmv3"),gfo=o(" \u2014 "),bN=a("a"),hfo=o("LayoutLMv3Tokenizer"),pfo=o(" or "),vN=a("a"),_fo=o("LayoutLMv3TokenizerFast"),ufo=o(" (LayoutLMv3 model)"),bfo=l(),hs=a("li"),Hle=a("strong"),vfo=o("layoutxlm"),Ffo=o(" \u2014 "),FN=a("a"),Tfo=o("LayoutXLMTokenizer"),Mfo=o(" or "),TN=a("a"),Efo=o("LayoutXLMTokenizerFast"),Cfo=o(" (LayoutXLM model)"),wfo=l(),ps=a("li"),Ule=a("strong"),Afo=o("led"),Lfo=o(" \u2014 "),MN=a("a"),yfo=o("LEDTokenizer"),xfo=o(" or "),EN=a("a"),$fo=o("LEDTokenizerFast"),kfo=o(" (LED model)"),Sfo=l(),_s=a("li"),Jle=a("strong"),Rfo=o("longformer"),Pfo=o(" \u2014 "),CN=a("a"),Bfo=o("LongformerTokenizer"),Nfo=o(" or "),wN=a("a"),Ifo=o("LongformerTokenizerFast"),qfo=o(" (Longformer model)"),jfo=l(),us=a("li"),Yle=a("strong"),Dfo=o("longt5"),Gfo=o(" \u2014 "),AN=a("a"),Ofo=o("T5Tokenizer"),Vfo=o(" or "),LN=a("a"),Xfo=o("T5TokenizerFast"),zfo=o(" (LongT5 model)"),Qfo=l(),hh=a("li"),Kle=a("strong"),Wfo=o("luke"),Hfo=o(" \u2014 "),yN=a("a"),Ufo=o("LukeTokenizer"),Jfo=o(" (LUKE model)"),Yfo=l(),bs=a("li"),Zle=a("strong"),Kfo=o("lxmert"),Zfo=o(" \u2014 "),xN=a("a"),emo=o("LxmertTokenizer"),omo=o(" or "),$N=a("a"),rmo=o("LxmertTokenizerFast"),tmo=o(" (LXMERT model)"),amo=l(),ph=a("li"),eie=a("strong"),nmo=o("m2m_100"),smo=o(" \u2014 "),kN=a("a"),lmo=o("M2M100Tokenizer"),imo=o(" (M2M100 model)"),dmo=l(),_h=a("li"),oie=a("strong"),cmo=o("marian"),fmo=o(" \u2014 "),SN=a("a"),mmo=o("MarianTokenizer"),gmo=o(" (Marian model)"),hmo=l(),vs=a("li"),rie=a("strong"),pmo=o("mbart"),_mo=o(" \u2014 "),RN=a("a"),umo=o("MBartTokenizer"),bmo=o(" or "),PN=a("a"),vmo=o("MBartTokenizerFast"),Fmo=o(" (mBART model)"),Tmo=l(),Fs=a("li"),tie=a("strong"),Mmo=o("mbart50"),Emo=o(" \u2014 "),BN=a("a"),Cmo=o("MBart50Tokenizer"),wmo=o(" or "),NN=a("a"),Amo=o("MBart50TokenizerFast"),Lmo=o(" (mBART-50 model)"),ymo=l(),Ts=a("li"),aie=a("strong"),xmo=o("megatron-bert"),$mo=o(" \u2014 "),IN=a("a"),kmo=o("BertTokenizer"),Smo=o(" or "),qN=a("a"),Rmo=o("BertTokenizerFast"),Pmo=o(" (Megatron-BERT model)"),Bmo=l(),uh=a("li"),nie=a("strong"),Nmo=o("mluke"),Imo=o(" \u2014 "),jN=a("a"),qmo=o("MLukeTokenizer"),jmo=o(" (mLUKE model)"),Dmo=l(),Ms=a("li"),sie=a("strong"),Gmo=o("mobilebert"),Omo=o(" \u2014 "),DN=a("a"),Vmo=o("MobileBertTokenizer"),Xmo=o(" or "),GN=a("a"),zmo=o("MobileBertTokenizerFast"),Qmo=o(" (MobileBERT model)"),Wmo=l(),Es=a("li"),lie=a("strong"),Hmo=o("mpnet"),Umo=o(" \u2014 "),ON=a("a"),Jmo=o("MPNetTokenizer"),Ymo=o(" or "),VN=a("a"),Kmo=o("MPNetTokenizerFast"),Zmo=o(" (MPNet model)"),ego=l(),Cs=a("li"),iie=a("strong"),ogo=o("mt5"),rgo=o(" \u2014 "),XN=a("a"),tgo=o("MT5Tokenizer"),ago=o(" or "),zN=a("a"),ngo=o("MT5TokenizerFast"),sgo=o(" (MT5 model)"),lgo=l(),ws=a("li"),die=a("strong"),igo=o("mvp"),dgo=o(" \u2014 "),QN=a("a"),cgo=o("MvpTokenizer"),fgo=o(" or "),WN=a("a"),mgo=o("MvpTokenizerFast"),ggo=o(" (MVP model)"),hgo=l(),As=a("li"),cie=a("strong"),pgo=o("nezha"),_go=o(" \u2014 "),HN=a("a"),ugo=o("BertTokenizer"),bgo=o(" or "),UN=a("a"),vgo=o("BertTokenizerFast"),Fgo=o(" (Nezha model)"),Tgo=l(),Ls=a("li"),fie=a("strong"),Mgo=o("nllb"),Ego=o(" \u2014 "),JN=a("a"),Cgo=o("NllbTokenizer"),wgo=o(" or "),YN=a("a"),Ago=o("NllbTokenizerFast"),Lgo=o(" (NLLB model)"),ygo=l(),ys=a("li"),mie=a("strong"),xgo=o("nystromformer"),$go=o(" \u2014 "),KN=a("a"),kgo=o("AlbertTokenizer"),Sgo=o(" or "),ZN=a("a"),Rgo=o("AlbertTokenizerFast"),Pgo=o(" (Nystr\xF6mformer model)"),Bgo=l(),xs=a("li"),gie=a("strong"),Ngo=o("openai-gpt"),Igo=o(" \u2014 "),eI=a("a"),qgo=o("OpenAIGPTTokenizer"),jgo=o(" or "),oI=a("a"),Dgo=o("OpenAIGPTTokenizerFast"),Ggo=o(" (OpenAI GPT model)"),Ogo=l(),bh=a("li"),hie=a("strong"),Vgo=o("opt"),Xgo=o(" \u2014 "),rI=a("a"),zgo=o("GPT2Tokenizer"),Qgo=o(" (OPT model)"),Wgo=l(),$s=a("li"),pie=a("strong"),Hgo=o("pegasus"),Ugo=o(" \u2014 "),tI=a("a"),Jgo=o("PegasusTokenizer"),Ygo=o(" or "),aI=a("a"),Kgo=o("PegasusTokenizerFast"),Zgo=o(" (Pegasus model)"),eho=l(),vh=a("li"),_ie=a("strong"),oho=o("perceiver"),rho=o(" \u2014 "),nI=a("a"),tho=o("PerceiverTokenizer"),aho=o(" (Perceiver model)"),nho=l(),Fh=a("li"),uie=a("strong"),sho=o("phobert"),lho=o(" \u2014 "),sI=a("a"),iho=o("PhobertTokenizer"),dho=o(" (PhoBERT model)"),cho=l(),Th=a("li"),bie=a("strong"),fho=o("plbart"),mho=o(" \u2014 "),lI=a("a"),gho=o("PLBartTokenizer"),hho=o(" (PLBart model)"),pho=l(),Mh=a("li"),vie=a("strong"),_ho=o("prophetnet"),uho=o(" \u2014 "),iI=a("a"),bho=o("ProphetNetTokenizer"),vho=o(" (ProphetNet model)"),Fho=l(),ks=a("li"),Fie=a("strong"),Tho=o("qdqbert"),Mho=o(" \u2014 "),dI=a("a"),Eho=o("BertTokenizer"),Cho=o(" or "),cI=a("a"),who=o("BertTokenizerFast"),Aho=o(" (QDQBert model)"),Lho=l(),Eh=a("li"),Tie=a("strong"),yho=o("rag"),xho=o(" \u2014 "),fI=a("a"),$ho=o("RagTokenizer"),kho=o(" (RAG model)"),Sho=l(),Ss=a("li"),Mie=a("strong"),Rho=o("realm"),Pho=o(" \u2014 "),mI=a("a"),Bho=o("RealmTokenizer"),Nho=o(" or "),gI=a("a"),Iho=o("RealmTokenizerFast"),qho=o(" (REALM model)"),jho=l(),Rs=a("li"),Eie=a("strong"),Dho=o("reformer"),Gho=o(" \u2014 "),hI=a("a"),Oho=o("ReformerTokenizer"),Vho=o(" or "),pI=a("a"),Xho=o("ReformerTokenizerFast"),zho=o(" (Reformer model)"),Qho=l(),Ps=a("li"),Cie=a("strong"),Who=o("rembert"),Hho=o(" \u2014 "),_I=a("a"),Uho=o("RemBertTokenizer"),Jho=o(" or "),uI=a("a"),Yho=o("RemBertTokenizerFast"),Kho=o(" (RemBERT model)"),Zho=l(),Bs=a("li"),wie=a("strong"),epo=o("retribert"),opo=o(" \u2014 "),bI=a("a"),rpo=o("RetriBertTokenizer"),tpo=o(" or "),vI=a("a"),apo=o("RetriBertTokenizerFast"),npo=o(" (RetriBERT model)"),spo=l(),Ns=a("li"),Aie=a("strong"),lpo=o("roberta"),ipo=o(" \u2014 "),FI=a("a"),dpo=o("RobertaTokenizer"),cpo=o(" or "),TI=a("a"),fpo=o("RobertaTokenizerFast"),mpo=o(" (RoBERTa model)"),gpo=l(),Is=a("li"),Lie=a("strong"),hpo=o("roformer"),ppo=o(" \u2014 "),MI=a("a"),_po=o("RoFormerTokenizer"),upo=o(" or "),EI=a("a"),bpo=o("RoFormerTokenizerFast"),vpo=o(" (RoFormer model)"),Fpo=l(),Ch=a("li"),yie=a("strong"),Tpo=o("speech_to_text"),Mpo=o(" \u2014 "),CI=a("a"),Epo=o("Speech2TextTokenizer"),Cpo=o(" (Speech2Text model)"),wpo=l(),wh=a("li"),xie=a("strong"),Apo=o("speech_to_text_2"),Lpo=o(" \u2014 "),wI=a("a"),ypo=o("Speech2Text2Tokenizer"),xpo=o(" (Speech2Text2 model)"),$po=l(),qs=a("li"),$ie=a("strong"),kpo=o("splinter"),Spo=o(" \u2014 "),AI=a("a"),Rpo=o("SplinterTokenizer"),Ppo=o(" or "),LI=a("a"),Bpo=o("SplinterTokenizerFast"),Npo=o(" (Splinter model)"),Ipo=l(),js=a("li"),kie=a("strong"),qpo=o("squeezebert"),jpo=o(" \u2014 "),yI=a("a"),Dpo=o("SqueezeBertTokenizer"),Gpo=o(" or "),xI=a("a"),Opo=o("SqueezeBertTokenizerFast"),Vpo=o(" (SqueezeBERT model)"),Xpo=l(),Ds=a("li"),Sie=a("strong"),zpo=o("t5"),Qpo=o(" \u2014 "),$I=a("a"),Wpo=o("T5Tokenizer"),Hpo=o(" or "),kI=a("a"),Upo=o("T5TokenizerFast"),Jpo=o(" (T5 model)"),Ypo=l(),Ah=a("li"),Rie=a("strong"),Kpo=o("tapas"),Zpo=o(" \u2014 "),SI=a("a"),e_o=o("TapasTokenizer"),o_o=o(" (TAPAS model)"),r_o=l(),Lh=a("li"),Pie=a("strong"),t_o=o("tapex"),a_o=o(" \u2014 "),RI=a("a"),n_o=o("TapexTokenizer"),s_o=o(" (TAPEX model)"),l_o=l(),yh=a("li"),Bie=a("strong"),i_o=o("transfo-xl"),d_o=o(" \u2014 "),PI=a("a"),c_o=o("TransfoXLTokenizer"),f_o=o(" (Transformer-XL model)"),m_o=l(),Gs=a("li"),Nie=a("strong"),g_o=o("vilt"),h_o=o(" \u2014 "),BI=a("a"),p_o=o("BertTokenizer"),__o=o(" or "),NI=a("a"),u_o=o("BertTokenizerFast"),b_o=o(" (ViLT model)"),v_o=l(),Os=a("li"),Iie=a("strong"),F_o=o("visual_bert"),T_o=o(" \u2014 "),II=a("a"),M_o=o("BertTokenizer"),E_o=o(" or "),qI=a("a"),C_o=o("BertTokenizerFast"),w_o=o(" (VisualBERT model)"),A_o=l(),xh=a("li"),qie=a("strong"),L_o=o("wav2vec2"),y_o=o(" \u2014 "),jI=a("a"),x_o=o("Wav2Vec2CTCTokenizer"),$_o=o(" (Wav2Vec2 model)"),k_o=l(),$h=a("li"),jie=a("strong"),S_o=o("wav2vec2-conformer"),R_o=o(" \u2014 "),DI=a("a"),P_o=o("Wav2Vec2CTCTokenizer"),B_o=o(" (Wav2Vec2-Conformer model)"),N_o=l(),kh=a("li"),Die=a("strong"),I_o=o("wav2vec2_phoneme"),q_o=o(" \u2014 "),GI=a("a"),j_o=o("Wav2Vec2PhonemeCTCTokenizer"),D_o=o(" (Wav2Vec2Phoneme model)"),G_o=l(),Vs=a("li"),Gie=a("strong"),O_o=o("xglm"),V_o=o(" \u2014 "),OI=a("a"),X_o=o("XGLMTokenizer"),z_o=o(" or "),VI=a("a"),Q_o=o("XGLMTokenizerFast"),W_o=o(" (XGLM model)"),H_o=l(),Sh=a("li"),Oie=a("strong"),U_o=o("xlm"),J_o=o(" \u2014 "),XI=a("a"),Y_o=o("XLMTokenizer"),K_o=o(" (XLM model)"),Z_o=l(),Rh=a("li"),Vie=a("strong"),euo=o("xlm-prophetnet"),ouo=o(" \u2014 "),zI=a("a"),ruo=o("XLMProphetNetTokenizer"),tuo=o(" (XLM-ProphetNet model)"),auo=l(),Xs=a("li"),Xie=a("strong"),nuo=o("xlm-roberta"),suo=o(" \u2014 "),QI=a("a"),luo=o("XLMRobertaTokenizer"),iuo=o(" or "),WI=a("a"),duo=o("XLMRobertaTokenizerFast"),cuo=o(" (XLM-RoBERTa model)"),fuo=l(),zs=a("li"),zie=a("strong"),muo=o("xlm-roberta-xl"),guo=o(" \u2014 "),HI=a("a"),huo=o("RobertaTokenizer"),puo=o(" or "),UI=a("a"),_uo=o("RobertaTokenizerFast"),uuo=o(" (XLM-RoBERTa-XL model)"),buo=l(),Qs=a("li"),Qie=a("strong"),vuo=o("xlnet"),Fuo=o(" \u2014 "),JI=a("a"),Tuo=o("XLNetTokenizer"),Muo=o(" or "),YI=a("a"),Euo=o("XLNetTokenizerFast"),Cuo=o(" (XLNet model)"),wuo=l(),Ws=a("li"),Wie=a("strong"),Auo=o("yoso"),Luo=o(" \u2014 "),KI=a("a"),yuo=o("AlbertTokenizer"),xuo=o(" or "),ZI=a("a"),$uo=o("AlbertTokenizerFast"),kuo=o(" (YOSO model)"),Suo=l(),F(Ph.$$.fragment),Ruo=l(),Bh=a("div"),F(F6.$$.fragment),Puo=l(),Hie=a("p"),Buo=o("Register a new tokenizer in this mapping."),vXe=l(),ji=a("h2"),Nh=a("a"),Uie=a("span"),F(T6.$$.fragment),Nuo=l(),Jie=a("span"),Iuo=o("AutoFeatureExtractor"),FXe=l(),yo=a("div"),F(M6.$$.fragment),quo=l(),E6=a("p"),juo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eq=a("a"),Duo=o("AutoFeatureExtractor.from_pretrained()"),Guo=o(" class method."),Ouo=l(),C6=a("p"),Vuo=o("This class cannot be instantiated directly using "),Yie=a("code"),Xuo=o("__init__()"),zuo=o(" (throws an error)."),Quo=l(),Ue=a("div"),F(w6.$$.fragment),Wuo=l(),Kie=a("p"),Huo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Uuo=l(),Ba=a("p"),Juo=o("The feature extractor class to instantiate is selected based on the "),Zie=a("code"),Yuo=o("model_type"),Kuo=o(` property of the config object
(either passed as an argument or loaded from `),ede=a("code"),Zuo=o("pretrained_model_name_or_path"),e1o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ode=a("code"),o1o=o("pretrained_model_name_or_path"),r1o=o(":"),t1o=l(),Y=a("ul"),Ih=a("li"),rde=a("strong"),a1o=o("beit"),n1o=o(" \u2014 "),oq=a("a"),s1o=o("BeitFeatureExtractor"),l1o=o(" (BEiT model)"),i1o=l(),qh=a("li"),tde=a("strong"),d1o=o("clip"),c1o=o(" \u2014 "),rq=a("a"),f1o=o("CLIPFeatureExtractor"),m1o=o(" (CLIP model)"),g1o=l(),jh=a("li"),ade=a("strong"),h1o=o("convnext"),p1o=o(" \u2014 "),tq=a("a"),_1o=o("ConvNextFeatureExtractor"),u1o=o(" (ConvNeXT model)"),b1o=l(),Dh=a("li"),nde=a("strong"),v1o=o("cvt"),F1o=o(" \u2014 "),aq=a("a"),T1o=o("ConvNextFeatureExtractor"),M1o=o(" (CvT model)"),E1o=l(),Gh=a("li"),sde=a("strong"),C1o=o("data2vec-audio"),w1o=o(" \u2014 "),nq=a("a"),A1o=o("Wav2Vec2FeatureExtractor"),L1o=o(" (Data2VecAudio model)"),y1o=l(),Oh=a("li"),lde=a("strong"),x1o=o("data2vec-vision"),$1o=o(" \u2014 "),sq=a("a"),k1o=o("BeitFeatureExtractor"),S1o=o(" (Data2VecVision model)"),R1o=l(),Vh=a("li"),ide=a("strong"),P1o=o("deit"),B1o=o(" \u2014 "),lq=a("a"),N1o=o("DeiTFeatureExtractor"),I1o=o(" (DeiT model)"),q1o=l(),Xh=a("li"),dde=a("strong"),j1o=o("detr"),D1o=o(" \u2014 "),iq=a("a"),G1o=o("DetrFeatureExtractor"),O1o=o(" (DETR model)"),V1o=l(),zh=a("li"),cde=a("strong"),X1o=o("dpt"),z1o=o(" \u2014 "),dq=a("a"),Q1o=o("DPTFeatureExtractor"),W1o=o(" (DPT model)"),H1o=l(),Qh=a("li"),fde=a("strong"),U1o=o("flava"),J1o=o(" \u2014 "),cq=a("a"),Y1o=o("FlavaFeatureExtractor"),K1o=o(" (FLAVA model)"),Z1o=l(),Wh=a("li"),mde=a("strong"),e2o=o("glpn"),o2o=o(" \u2014 "),fq=a("a"),r2o=o("GLPNFeatureExtractor"),t2o=o(" (GLPN model)"),a2o=l(),Hh=a("li"),gde=a("strong"),n2o=o("groupvit"),s2o=o(" \u2014 "),mq=a("a"),l2o=o("CLIPFeatureExtractor"),i2o=o(" (GroupViT model)"),d2o=l(),Uh=a("li"),hde=a("strong"),c2o=o("hubert"),f2o=o(" \u2014 "),gq=a("a"),m2o=o("Wav2Vec2FeatureExtractor"),g2o=o(" (Hubert model)"),h2o=l(),Jh=a("li"),pde=a("strong"),p2o=o("imagegpt"),_2o=o(" \u2014 "),hq=a("a"),u2o=o("ImageGPTFeatureExtractor"),b2o=o(" (ImageGPT model)"),v2o=l(),Yh=a("li"),_de=a("strong"),F2o=o("layoutlmv2"),T2o=o(" \u2014 "),pq=a("a"),M2o=o("LayoutLMv2FeatureExtractor"),E2o=o(" (LayoutLMv2 model)"),C2o=l(),Kh=a("li"),ude=a("strong"),w2o=o("layoutlmv3"),A2o=o(" \u2014 "),_q=a("a"),L2o=o("LayoutLMv3FeatureExtractor"),y2o=o(" (LayoutLMv3 model)"),x2o=l(),Zh=a("li"),bde=a("strong"),$2o=o("levit"),k2o=o(" \u2014 "),uq=a("a"),S2o=o("LevitFeatureExtractor"),R2o=o(" (LeViT model)"),P2o=l(),ep=a("li"),vde=a("strong"),B2o=o("maskformer"),N2o=o(" \u2014 "),bq=a("a"),I2o=o("MaskFormerFeatureExtractor"),q2o=o(" (MaskFormer model)"),j2o=l(),op=a("li"),Fde=a("strong"),D2o=o("mctct"),G2o=o(" \u2014 "),vq=a("a"),O2o=o("MCTCTFeatureExtractor"),V2o=o(" (M-CTC-T model)"),X2o=l(),rp=a("li"),Tde=a("strong"),z2o=o("mobilevit"),Q2o=o(" \u2014 "),Fq=a("a"),W2o=o("MobileViTFeatureExtractor"),H2o=o(" (MobileViT model)"),U2o=l(),tp=a("li"),Mde=a("strong"),J2o=o("perceiver"),Y2o=o(" \u2014 "),Tq=a("a"),K2o=o("PerceiverFeatureExtractor"),Z2o=o(" (Perceiver model)"),ebo=l(),ap=a("li"),Ede=a("strong"),obo=o("poolformer"),rbo=o(" \u2014 "),Mq=a("a"),tbo=o("PoolFormerFeatureExtractor"),abo=o(" (PoolFormer model)"),nbo=l(),np=a("li"),Cde=a("strong"),sbo=o("regnet"),lbo=o(" \u2014 "),Eq=a("a"),ibo=o("ConvNextFeatureExtractor"),dbo=o(" (RegNet model)"),cbo=l(),sp=a("li"),wde=a("strong"),fbo=o("resnet"),mbo=o(" \u2014 "),Cq=a("a"),gbo=o("ConvNextFeatureExtractor"),hbo=o(" (ResNet model)"),pbo=l(),lp=a("li"),Ade=a("strong"),_bo=o("segformer"),ubo=o(" \u2014 "),wq=a("a"),bbo=o("SegformerFeatureExtractor"),vbo=o(" (SegFormer model)"),Fbo=l(),ip=a("li"),Lde=a("strong"),Tbo=o("speech_to_text"),Mbo=o(" \u2014 "),Aq=a("a"),Ebo=o("Speech2TextFeatureExtractor"),Cbo=o(" (Speech2Text model)"),wbo=l(),dp=a("li"),yde=a("strong"),Abo=o("swin"),Lbo=o(" \u2014 "),Lq=a("a"),ybo=o("ViTFeatureExtractor"),xbo=o(" (Swin Transformer model)"),$bo=l(),cp=a("li"),xde=a("strong"),kbo=o("van"),Sbo=o(" \u2014 "),yq=a("a"),Rbo=o("ConvNextFeatureExtractor"),Pbo=o(" (VAN model)"),Bbo=l(),fp=a("li"),$de=a("strong"),Nbo=o("vilt"),Ibo=o(" \u2014 "),xq=a("a"),qbo=o("ViltFeatureExtractor"),jbo=o(" (ViLT model)"),Dbo=l(),mp=a("li"),kde=a("strong"),Gbo=o("vit"),Obo=o(" \u2014 "),$q=a("a"),Vbo=o("ViTFeatureExtractor"),Xbo=o(" (ViT model)"),zbo=l(),gp=a("li"),Sde=a("strong"),Qbo=o("vit_mae"),Wbo=o(" \u2014 "),kq=a("a"),Hbo=o("ViTFeatureExtractor"),Ubo=o(" (ViTMAE model)"),Jbo=l(),hp=a("li"),Rde=a("strong"),Ybo=o("wav2vec2"),Kbo=o(" \u2014 "),Sq=a("a"),Zbo=o("Wav2Vec2FeatureExtractor"),evo=o(" (Wav2Vec2 model)"),ovo=l(),pp=a("li"),Pde=a("strong"),rvo=o("wav2vec2-conformer"),tvo=o(" \u2014 "),Rq=a("a"),avo=o("Wav2Vec2FeatureExtractor"),nvo=o(" (Wav2Vec2-Conformer model)"),svo=l(),_p=a("li"),Bde=a("strong"),lvo=o("yolos"),ivo=o(" \u2014 "),Pq=a("a"),dvo=o("YolosFeatureExtractor"),cvo=o(" (YOLOS model)"),fvo=l(),F(up.$$.fragment),mvo=l(),F(bp.$$.fragment),gvo=l(),vp=a("div"),F(A6.$$.fragment),hvo=l(),Nde=a("p"),pvo=o("Register a new feature extractor for this class."),TXe=l(),Di=a("h2"),Fp=a("a"),Ide=a("span"),F(L6.$$.fragment),_vo=l(),qde=a("span"),uvo=o("AutoProcessor"),MXe=l(),xo=a("div"),F(y6.$$.fragment),bvo=l(),x6=a("p"),vvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Bq=a("a"),Fvo=o("AutoProcessor.from_pretrained()"),Tvo=o(" class method."),Mvo=l(),$6=a("p"),Evo=o("This class cannot be instantiated directly using "),jde=a("code"),Cvo=o("__init__()"),wvo=o(" (throws an error)."),Avo=l(),Je=a("div"),F(k6.$$.fragment),Lvo=l(),Dde=a("p"),yvo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),xvo=l(),Gi=a("p"),$vo=o("The processor class to instantiate is selected based on the "),Gde=a("code"),kvo=o("model_type"),Svo=o(` property of the config object (either
passed as an argument or loaded from `),Ode=a("code"),Rvo=o("pretrained_model_name_or_path"),Pvo=o(" if possible):"),Bvo=l(),pe=a("ul"),Tp=a("li"),Vde=a("strong"),Nvo=o("clip"),Ivo=o(" \u2014 "),Nq=a("a"),qvo=o("CLIPProcessor"),jvo=o(" (CLIP model)"),Dvo=l(),Mp=a("li"),Xde=a("strong"),Gvo=o("flava"),Ovo=o(" \u2014 "),zde=a("code"),Vvo=o("FLAVAProcessor"),Xvo=o(" (FLAVA model)"),zvo=l(),Ep=a("li"),Qde=a("strong"),Qvo=o("groupvit"),Wvo=o(" \u2014 "),Iq=a("a"),Hvo=o("CLIPProcessor"),Uvo=o(" (GroupViT model)"),Jvo=l(),Cp=a("li"),Wde=a("strong"),Yvo=o("layoutlmv2"),Kvo=o(" \u2014 "),qq=a("a"),Zvo=o("LayoutLMv2Processor"),e0o=o(" (LayoutLMv2 model)"),o0o=l(),wp=a("li"),Hde=a("strong"),r0o=o("layoutlmv3"),t0o=o(" \u2014 "),jq=a("a"),a0o=o("LayoutLMv3Processor"),n0o=o(" (LayoutLMv3 model)"),s0o=l(),Ap=a("li"),Ude=a("strong"),l0o=o("layoutxlm"),i0o=o(" \u2014 "),Dq=a("a"),d0o=o("LayoutXLMProcessor"),c0o=o(" (LayoutXLM model)"),f0o=l(),Lp=a("li"),Jde=a("strong"),m0o=o("sew"),g0o=o(" \u2014 "),Gq=a("a"),h0o=o("Wav2Vec2Processor"),p0o=o(" (SEW model)"),_0o=l(),yp=a("li"),Yde=a("strong"),u0o=o("sew-d"),b0o=o(" \u2014 "),Oq=a("a"),v0o=o("Wav2Vec2Processor"),F0o=o(" (SEW-D model)"),T0o=l(),xp=a("li"),Kde=a("strong"),M0o=o("speech_to_text"),E0o=o(" \u2014 "),Vq=a("a"),C0o=o("Speech2TextProcessor"),w0o=o(" (Speech2Text model)"),A0o=l(),$p=a("li"),Zde=a("strong"),L0o=o("speech_to_text_2"),y0o=o(" \u2014 "),Xq=a("a"),x0o=o("Speech2Text2Processor"),$0o=o(" (Speech2Text2 model)"),k0o=l(),kp=a("li"),ece=a("strong"),S0o=o("trocr"),R0o=o(" \u2014 "),zq=a("a"),P0o=o("TrOCRProcessor"),B0o=o(" (TrOCR model)"),N0o=l(),Sp=a("li"),oce=a("strong"),I0o=o("unispeech"),q0o=o(" \u2014 "),Qq=a("a"),j0o=o("Wav2Vec2Processor"),D0o=o(" (UniSpeech model)"),G0o=l(),Rp=a("li"),rce=a("strong"),O0o=o("unispeech-sat"),V0o=o(" \u2014 "),Wq=a("a"),X0o=o("Wav2Vec2Processor"),z0o=o(" (UniSpeechSat model)"),Q0o=l(),Pp=a("li"),tce=a("strong"),W0o=o("vilt"),H0o=o(" \u2014 "),Hq=a("a"),U0o=o("ViltProcessor"),J0o=o(" (ViLT model)"),Y0o=l(),Bp=a("li"),ace=a("strong"),K0o=o("vision-text-dual-encoder"),Z0o=o(" \u2014 "),Uq=a("a"),eFo=o("VisionTextDualEncoderProcessor"),oFo=o(" (VisionTextDualEncoder model)"),rFo=l(),Np=a("li"),nce=a("strong"),tFo=o("wav2vec2"),aFo=o(" \u2014 "),Jq=a("a"),nFo=o("Wav2Vec2Processor"),sFo=o(" (Wav2Vec2 model)"),lFo=l(),Ip=a("li"),sce=a("strong"),iFo=o("wav2vec2-conformer"),dFo=o(" \u2014 "),Yq=a("a"),cFo=o("Wav2Vec2Processor"),fFo=o(" (Wav2Vec2-Conformer model)"),mFo=l(),qp=a("li"),lce=a("strong"),gFo=o("wavlm"),hFo=o(" \u2014 "),Kq=a("a"),pFo=o("Wav2Vec2Processor"),_Fo=o(" (WavLM model)"),uFo=l(),F(jp.$$.fragment),bFo=l(),F(Dp.$$.fragment),vFo=l(),Gp=a("div"),F(S6.$$.fragment),FFo=l(),ice=a("p"),TFo=o("Register a new processor for this class."),EXe=l(),Oi=a("h2"),Op=a("a"),dce=a("span"),F(R6.$$.fragment),MFo=l(),cce=a("span"),EFo=o("AutoModel"),CXe=l(),$o=a("div"),F(P6.$$.fragment),CFo=l(),Vi=a("p"),wFo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zq=a("a"),AFo=o("from_pretrained()"),LFo=o(" class method or the "),ej=a("a"),yFo=o("from_config()"),xFo=o(` class
method.`),$Fo=l(),B6=a("p"),kFo=o("This class cannot be instantiated directly using "),fce=a("code"),SFo=o("__init__()"),RFo=o(" (throws an error)."),PFo=l(),it=a("div"),F(N6.$$.fragment),BFo=l(),mce=a("p"),NFo=o("Instantiates one of the base model classes of the library from a configuration."),IFo=l(),Xi=a("p"),qFo=o(`Note:
Loading a model from its configuration file does `),gce=a("strong"),jFo=o("not"),DFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oj=a("a"),GFo=o("from_pretrained()"),OFo=o(" to load the model weights."),VFo=l(),F(Vp.$$.fragment),XFo=l(),Ye=a("div"),F(I6.$$.fragment),zFo=l(),hce=a("p"),QFo=o("Instantiate one of the base model classes of the library from a pretrained model."),WFo=l(),Na=a("p"),HFo=o("The model class to instantiate is selected based on the "),pce=a("code"),UFo=o("model_type"),JFo=o(` property of the config object (either
passed as an argument or loaded from `),_ce=a("code"),YFo=o("pretrained_model_name_or_path"),KFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uce=a("code"),ZFo=o("pretrained_model_name_or_path"),eTo=o(":"),oTo=l(),y=a("ul"),Xp=a("li"),bce=a("strong"),rTo=o("albert"),tTo=o(" \u2014 "),rj=a("a"),aTo=o("AlbertModel"),nTo=o(" (ALBERT model)"),sTo=l(),zp=a("li"),vce=a("strong"),lTo=o("bart"),iTo=o(" \u2014 "),tj=a("a"),dTo=o("BartModel"),cTo=o(" (BART model)"),fTo=l(),Qp=a("li"),Fce=a("strong"),mTo=o("beit"),gTo=o(" \u2014 "),aj=a("a"),hTo=o("BeitModel"),pTo=o(" (BEiT model)"),_To=l(),Wp=a("li"),Tce=a("strong"),uTo=o("bert"),bTo=o(" \u2014 "),nj=a("a"),vTo=o("BertModel"),FTo=o(" (BERT model)"),TTo=l(),Hp=a("li"),Mce=a("strong"),MTo=o("bert-generation"),ETo=o(" \u2014 "),sj=a("a"),CTo=o("BertGenerationEncoder"),wTo=o(" (Bert Generation model)"),ATo=l(),Up=a("li"),Ece=a("strong"),LTo=o("big_bird"),yTo=o(" \u2014 "),lj=a("a"),xTo=o("BigBirdModel"),$To=o(" (BigBird model)"),kTo=l(),Jp=a("li"),Cce=a("strong"),STo=o("bigbird_pegasus"),RTo=o(" \u2014 "),ij=a("a"),PTo=o("BigBirdPegasusModel"),BTo=o(" (BigBird-Pegasus model)"),NTo=l(),Yp=a("li"),wce=a("strong"),ITo=o("blenderbot"),qTo=o(" \u2014 "),dj=a("a"),jTo=o("BlenderbotModel"),DTo=o(" (Blenderbot model)"),GTo=l(),Kp=a("li"),Ace=a("strong"),OTo=o("blenderbot-small"),VTo=o(" \u2014 "),cj=a("a"),XTo=o("BlenderbotSmallModel"),zTo=o(" (BlenderbotSmall model)"),QTo=l(),Zp=a("li"),Lce=a("strong"),WTo=o("bloom"),HTo=o(" \u2014 "),fj=a("a"),UTo=o("BloomModel"),JTo=o(" (BLOOM model)"),YTo=l(),e_=a("li"),yce=a("strong"),KTo=o("camembert"),ZTo=o(" \u2014 "),mj=a("a"),e7o=o("CamembertModel"),o7o=o(" (CamemBERT model)"),r7o=l(),o_=a("li"),xce=a("strong"),t7o=o("canine"),a7o=o(" \u2014 "),gj=a("a"),n7o=o("CanineModel"),s7o=o(" (CANINE model)"),l7o=l(),r_=a("li"),$ce=a("strong"),i7o=o("clip"),d7o=o(" \u2014 "),hj=a("a"),c7o=o("CLIPModel"),f7o=o(" (CLIP model)"),m7o=l(),t_=a("li"),kce=a("strong"),g7o=o("codegen"),h7o=o(" \u2014 "),pj=a("a"),p7o=o("CodeGenModel"),_7o=o(" (CodeGen model)"),u7o=l(),a_=a("li"),Sce=a("strong"),b7o=o("convbert"),v7o=o(" \u2014 "),_j=a("a"),F7o=o("ConvBertModel"),T7o=o(" (ConvBERT model)"),M7o=l(),n_=a("li"),Rce=a("strong"),E7o=o("convnext"),C7o=o(" \u2014 "),uj=a("a"),w7o=o("ConvNextModel"),A7o=o(" (ConvNeXT model)"),L7o=l(),s_=a("li"),Pce=a("strong"),y7o=o("ctrl"),x7o=o(" \u2014 "),bj=a("a"),$7o=o("CTRLModel"),k7o=o(" (CTRL model)"),S7o=l(),l_=a("li"),Bce=a("strong"),R7o=o("cvt"),P7o=o(" \u2014 "),vj=a("a"),B7o=o("CvtModel"),N7o=o(" (CvT model)"),I7o=l(),i_=a("li"),Nce=a("strong"),q7o=o("data2vec-audio"),j7o=o(" \u2014 "),Fj=a("a"),D7o=o("Data2VecAudioModel"),G7o=o(" (Data2VecAudio model)"),O7o=l(),d_=a("li"),Ice=a("strong"),V7o=o("data2vec-text"),X7o=o(" \u2014 "),Tj=a("a"),z7o=o("Data2VecTextModel"),Q7o=o(" (Data2VecText model)"),W7o=l(),c_=a("li"),qce=a("strong"),H7o=o("data2vec-vision"),U7o=o(" \u2014 "),Mj=a("a"),J7o=o("Data2VecVisionModel"),Y7o=o(" (Data2VecVision model)"),K7o=l(),f_=a("li"),jce=a("strong"),Z7o=o("deberta"),e8o=o(" \u2014 "),Ej=a("a"),o8o=o("DebertaModel"),r8o=o(" (DeBERTa model)"),t8o=l(),m_=a("li"),Dce=a("strong"),a8o=o("deberta-v2"),n8o=o(" \u2014 "),Cj=a("a"),s8o=o("DebertaV2Model"),l8o=o(" (DeBERTa-v2 model)"),i8o=l(),g_=a("li"),Gce=a("strong"),d8o=o("decision_transformer"),c8o=o(" \u2014 "),wj=a("a"),f8o=o("DecisionTransformerModel"),m8o=o(" (Decision Transformer model)"),g8o=l(),h_=a("li"),Oce=a("strong"),h8o=o("deit"),p8o=o(" \u2014 "),Aj=a("a"),_8o=o("DeiTModel"),u8o=o(" (DeiT model)"),b8o=l(),p_=a("li"),Vce=a("strong"),v8o=o("detr"),F8o=o(" \u2014 "),Lj=a("a"),T8o=o("DetrModel"),M8o=o(" (DETR model)"),E8o=l(),__=a("li"),Xce=a("strong"),C8o=o("distilbert"),w8o=o(" \u2014 "),yj=a("a"),A8o=o("DistilBertModel"),L8o=o(" (DistilBERT model)"),y8o=l(),u_=a("li"),zce=a("strong"),x8o=o("dpr"),$8o=o(" \u2014 "),xj=a("a"),k8o=o("DPRQuestionEncoder"),S8o=o(" (DPR model)"),R8o=l(),b_=a("li"),Qce=a("strong"),P8o=o("dpt"),B8o=o(" \u2014 "),$j=a("a"),N8o=o("DPTModel"),I8o=o(" (DPT model)"),q8o=l(),v_=a("li"),Wce=a("strong"),j8o=o("electra"),D8o=o(" \u2014 "),kj=a("a"),G8o=o("ElectraModel"),O8o=o(" (ELECTRA model)"),V8o=l(),F_=a("li"),Hce=a("strong"),X8o=o("flaubert"),z8o=o(" \u2014 "),Sj=a("a"),Q8o=o("FlaubertModel"),W8o=o(" (FlauBERT model)"),H8o=l(),T_=a("li"),Uce=a("strong"),U8o=o("flava"),J8o=o(" \u2014 "),Rj=a("a"),Y8o=o("FlavaModel"),K8o=o(" (FLAVA model)"),Z8o=l(),M_=a("li"),Jce=a("strong"),e9o=o("fnet"),o9o=o(" \u2014 "),Pj=a("a"),r9o=o("FNetModel"),t9o=o(" (FNet model)"),a9o=l(),E_=a("li"),Yce=a("strong"),n9o=o("fsmt"),s9o=o(" \u2014 "),Bj=a("a"),l9o=o("FSMTModel"),i9o=o(" (FairSeq Machine-Translation model)"),d9o=l(),Hs=a("li"),Kce=a("strong"),c9o=o("funnel"),f9o=o(" \u2014 "),Nj=a("a"),m9o=o("FunnelModel"),g9o=o(" or "),Ij=a("a"),h9o=o("FunnelBaseModel"),p9o=o(" (Funnel Transformer model)"),_9o=l(),C_=a("li"),Zce=a("strong"),u9o=o("glpn"),b9o=o(" \u2014 "),qj=a("a"),v9o=o("GLPNModel"),F9o=o(" (GLPN model)"),T9o=l(),w_=a("li"),efe=a("strong"),M9o=o("gpt2"),E9o=o(" \u2014 "),jj=a("a"),C9o=o("GPT2Model"),w9o=o(" (OpenAI GPT-2 model)"),A9o=l(),A_=a("li"),ofe=a("strong"),L9o=o("gpt_neo"),y9o=o(" \u2014 "),Dj=a("a"),x9o=o("GPTNeoModel"),$9o=o(" (GPT Neo model)"),k9o=l(),L_=a("li"),rfe=a("strong"),S9o=o("gpt_neox"),R9o=o(" \u2014 "),Gj=a("a"),P9o=o("GPTNeoXModel"),B9o=o(" (GPT NeoX model)"),N9o=l(),y_=a("li"),tfe=a("strong"),I9o=o("gptj"),q9o=o(" \u2014 "),Oj=a("a"),j9o=o("GPTJModel"),D9o=o(" (GPT-J model)"),G9o=l(),x_=a("li"),afe=a("strong"),O9o=o("groupvit"),V9o=o(" \u2014 "),Vj=a("a"),X9o=o("GroupViTModel"),z9o=o(" (GroupViT model)"),Q9o=l(),$_=a("li"),nfe=a("strong"),W9o=o("hubert"),H9o=o(" \u2014 "),Xj=a("a"),U9o=o("HubertModel"),J9o=o(" (Hubert model)"),Y9o=l(),k_=a("li"),sfe=a("strong"),K9o=o("ibert"),Z9o=o(" \u2014 "),zj=a("a"),eMo=o("IBertModel"),oMo=o(" (I-BERT model)"),rMo=l(),S_=a("li"),lfe=a("strong"),tMo=o("imagegpt"),aMo=o(" \u2014 "),Qj=a("a"),nMo=o("ImageGPTModel"),sMo=o(" (ImageGPT model)"),lMo=l(),R_=a("li"),ife=a("strong"),iMo=o("layoutlm"),dMo=o(" \u2014 "),Wj=a("a"),cMo=o("LayoutLMModel"),fMo=o(" (LayoutLM model)"),mMo=l(),P_=a("li"),dfe=a("strong"),gMo=o("layoutlmv2"),hMo=o(" \u2014 "),Hj=a("a"),pMo=o("LayoutLMv2Model"),_Mo=o(" (LayoutLMv2 model)"),uMo=l(),B_=a("li"),cfe=a("strong"),bMo=o("layoutlmv3"),vMo=o(" \u2014 "),Uj=a("a"),FMo=o("LayoutLMv3Model"),TMo=o(" (LayoutLMv3 model)"),MMo=l(),N_=a("li"),ffe=a("strong"),EMo=o("led"),CMo=o(" \u2014 "),Jj=a("a"),wMo=o("LEDModel"),AMo=o(" (LED model)"),LMo=l(),I_=a("li"),mfe=a("strong"),yMo=o("levit"),xMo=o(" \u2014 "),Yj=a("a"),$Mo=o("LevitModel"),kMo=o(" (LeViT model)"),SMo=l(),q_=a("li"),gfe=a("strong"),RMo=o("longformer"),PMo=o(" \u2014 "),Kj=a("a"),BMo=o("LongformerModel"),NMo=o(" (Longformer model)"),IMo=l(),j_=a("li"),hfe=a("strong"),qMo=o("longt5"),jMo=o(" \u2014 "),Zj=a("a"),DMo=o("LongT5Model"),GMo=o(" (LongT5 model)"),OMo=l(),D_=a("li"),pfe=a("strong"),VMo=o("luke"),XMo=o(" \u2014 "),eD=a("a"),zMo=o("LukeModel"),QMo=o(" (LUKE model)"),WMo=l(),G_=a("li"),_fe=a("strong"),HMo=o("lxmert"),UMo=o(" \u2014 "),oD=a("a"),JMo=o("LxmertModel"),YMo=o(" (LXMERT model)"),KMo=l(),O_=a("li"),ufe=a("strong"),ZMo=o("m2m_100"),e4o=o(" \u2014 "),rD=a("a"),o4o=o("M2M100Model"),r4o=o(" (M2M100 model)"),t4o=l(),V_=a("li"),bfe=a("strong"),a4o=o("marian"),n4o=o(" \u2014 "),tD=a("a"),s4o=o("MarianModel"),l4o=o(" (Marian model)"),i4o=l(),X_=a("li"),vfe=a("strong"),d4o=o("maskformer"),c4o=o(" \u2014 "),aD=a("a"),f4o=o("MaskFormerModel"),m4o=o(" (MaskFormer model)"),g4o=l(),z_=a("li"),Ffe=a("strong"),h4o=o("mbart"),p4o=o(" \u2014 "),nD=a("a"),_4o=o("MBartModel"),u4o=o(" (mBART model)"),b4o=l(),Q_=a("li"),Tfe=a("strong"),v4o=o("mctct"),F4o=o(" \u2014 "),sD=a("a"),T4o=o("MCTCTModel"),M4o=o(" (M-CTC-T model)"),E4o=l(),W_=a("li"),Mfe=a("strong"),C4o=o("megatron-bert"),w4o=o(" \u2014 "),lD=a("a"),A4o=o("MegatronBertModel"),L4o=o(" (Megatron-BERT model)"),y4o=l(),H_=a("li"),Efe=a("strong"),x4o=o("mobilebert"),$4o=o(" \u2014 "),iD=a("a"),k4o=o("MobileBertModel"),S4o=o(" (MobileBERT model)"),R4o=l(),U_=a("li"),Cfe=a("strong"),P4o=o("mobilevit"),B4o=o(" \u2014 "),dD=a("a"),N4o=o("MobileViTModel"),I4o=o(" (MobileViT model)"),q4o=l(),J_=a("li"),wfe=a("strong"),j4o=o("mpnet"),D4o=o(" \u2014 "),cD=a("a"),G4o=o("MPNetModel"),O4o=o(" (MPNet model)"),V4o=l(),Y_=a("li"),Afe=a("strong"),X4o=o("mt5"),z4o=o(" \u2014 "),fD=a("a"),Q4o=o("MT5Model"),W4o=o(" (MT5 model)"),H4o=l(),K_=a("li"),Lfe=a("strong"),U4o=o("mvp"),J4o=o(" \u2014 "),mD=a("a"),Y4o=o("MvpModel"),K4o=o(" (MVP model)"),Z4o=l(),Z_=a("li"),yfe=a("strong"),eEo=o("nezha"),oEo=o(" \u2014 "),gD=a("a"),rEo=o("NezhaModel"),tEo=o(" (Nezha model)"),aEo=l(),eu=a("li"),xfe=a("strong"),nEo=o("nllb"),sEo=o(" \u2014 "),hD=a("a"),lEo=o("M2M100Model"),iEo=o(" (NLLB model)"),dEo=l(),ou=a("li"),$fe=a("strong"),cEo=o("nystromformer"),fEo=o(" \u2014 "),pD=a("a"),mEo=o("NystromformerModel"),gEo=o(" (Nystr\xF6mformer model)"),hEo=l(),ru=a("li"),kfe=a("strong"),pEo=o("openai-gpt"),_Eo=o(" \u2014 "),_D=a("a"),uEo=o("OpenAIGPTModel"),bEo=o(" (OpenAI GPT model)"),vEo=l(),tu=a("li"),Sfe=a("strong"),FEo=o("opt"),TEo=o(" \u2014 "),uD=a("a"),MEo=o("OPTModel"),EEo=o(" (OPT model)"),CEo=l(),au=a("li"),Rfe=a("strong"),wEo=o("pegasus"),AEo=o(" \u2014 "),bD=a("a"),LEo=o("PegasusModel"),yEo=o(" (Pegasus model)"),xEo=l(),nu=a("li"),Pfe=a("strong"),$Eo=o("perceiver"),kEo=o(" \u2014 "),vD=a("a"),SEo=o("PerceiverModel"),REo=o(" (Perceiver model)"),PEo=l(),su=a("li"),Bfe=a("strong"),BEo=o("plbart"),NEo=o(" \u2014 "),FD=a("a"),IEo=o("PLBartModel"),qEo=o(" (PLBart model)"),jEo=l(),lu=a("li"),Nfe=a("strong"),DEo=o("poolformer"),GEo=o(" \u2014 "),TD=a("a"),OEo=o("PoolFormerModel"),VEo=o(" (PoolFormer model)"),XEo=l(),iu=a("li"),Ife=a("strong"),zEo=o("prophetnet"),QEo=o(" \u2014 "),MD=a("a"),WEo=o("ProphetNetModel"),HEo=o(" (ProphetNet model)"),UEo=l(),du=a("li"),qfe=a("strong"),JEo=o("qdqbert"),YEo=o(" \u2014 "),ED=a("a"),KEo=o("QDQBertModel"),ZEo=o(" (QDQBert model)"),eCo=l(),cu=a("li"),jfe=a("strong"),oCo=o("reformer"),rCo=o(" \u2014 "),CD=a("a"),tCo=o("ReformerModel"),aCo=o(" (Reformer model)"),nCo=l(),fu=a("li"),Dfe=a("strong"),sCo=o("regnet"),lCo=o(" \u2014 "),wD=a("a"),iCo=o("RegNetModel"),dCo=o(" (RegNet model)"),cCo=l(),mu=a("li"),Gfe=a("strong"),fCo=o("rembert"),mCo=o(" \u2014 "),AD=a("a"),gCo=o("RemBertModel"),hCo=o(" (RemBERT model)"),pCo=l(),gu=a("li"),Ofe=a("strong"),_Co=o("resnet"),uCo=o(" \u2014 "),LD=a("a"),bCo=o("ResNetModel"),vCo=o(" (ResNet model)"),FCo=l(),hu=a("li"),Vfe=a("strong"),TCo=o("retribert"),MCo=o(" \u2014 "),yD=a("a"),ECo=o("RetriBertModel"),CCo=o(" (RetriBERT model)"),wCo=l(),pu=a("li"),Xfe=a("strong"),ACo=o("roberta"),LCo=o(" \u2014 "),xD=a("a"),yCo=o("RobertaModel"),xCo=o(" (RoBERTa model)"),$Co=l(),_u=a("li"),zfe=a("strong"),kCo=o("roformer"),SCo=o(" \u2014 "),$D=a("a"),RCo=o("RoFormerModel"),PCo=o(" (RoFormer model)"),BCo=l(),uu=a("li"),Qfe=a("strong"),NCo=o("segformer"),ICo=o(" \u2014 "),kD=a("a"),qCo=o("SegformerModel"),jCo=o(" (SegFormer model)"),DCo=l(),bu=a("li"),Wfe=a("strong"),GCo=o("sew"),OCo=o(" \u2014 "),SD=a("a"),VCo=o("SEWModel"),XCo=o(" (SEW model)"),zCo=l(),vu=a("li"),Hfe=a("strong"),QCo=o("sew-d"),WCo=o(" \u2014 "),RD=a("a"),HCo=o("SEWDModel"),UCo=o(" (SEW-D model)"),JCo=l(),Fu=a("li"),Ufe=a("strong"),YCo=o("speech_to_text"),KCo=o(" \u2014 "),PD=a("a"),ZCo=o("Speech2TextModel"),e3o=o(" (Speech2Text model)"),o3o=l(),Tu=a("li"),Jfe=a("strong"),r3o=o("splinter"),t3o=o(" \u2014 "),BD=a("a"),a3o=o("SplinterModel"),n3o=o(" (Splinter model)"),s3o=l(),Mu=a("li"),Yfe=a("strong"),l3o=o("squeezebert"),i3o=o(" \u2014 "),ND=a("a"),d3o=o("SqueezeBertModel"),c3o=o(" (SqueezeBERT model)"),f3o=l(),Eu=a("li"),Kfe=a("strong"),m3o=o("swin"),g3o=o(" \u2014 "),ID=a("a"),h3o=o("SwinModel"),p3o=o(" (Swin Transformer model)"),_3o=l(),Cu=a("li"),Zfe=a("strong"),u3o=o("t5"),b3o=o(" \u2014 "),qD=a("a"),v3o=o("T5Model"),F3o=o(" (T5 model)"),T3o=l(),wu=a("li"),eme=a("strong"),M3o=o("tapas"),E3o=o(" \u2014 "),jD=a("a"),C3o=o("TapasModel"),w3o=o(" (TAPAS model)"),A3o=l(),Au=a("li"),ome=a("strong"),L3o=o("trajectory_transformer"),y3o=o(" \u2014 "),DD=a("a"),x3o=o("TrajectoryTransformerModel"),$3o=o(" (Trajectory Transformer model)"),k3o=l(),Lu=a("li"),rme=a("strong"),S3o=o("transfo-xl"),R3o=o(" \u2014 "),GD=a("a"),P3o=o("TransfoXLModel"),B3o=o(" (Transformer-XL model)"),N3o=l(),yu=a("li"),tme=a("strong"),I3o=o("unispeech"),q3o=o(" \u2014 "),OD=a("a"),j3o=o("UniSpeechModel"),D3o=o(" (UniSpeech model)"),G3o=l(),xu=a("li"),ame=a("strong"),O3o=o("unispeech-sat"),V3o=o(" \u2014 "),VD=a("a"),X3o=o("UniSpeechSatModel"),z3o=o(" (UniSpeechSat model)"),Q3o=l(),$u=a("li"),nme=a("strong"),W3o=o("van"),H3o=o(" \u2014 "),XD=a("a"),U3o=o("VanModel"),J3o=o(" (VAN model)"),Y3o=l(),ku=a("li"),sme=a("strong"),K3o=o("vilt"),Z3o=o(" \u2014 "),zD=a("a"),e5o=o("ViltModel"),o5o=o(" (ViLT model)"),r5o=l(),Su=a("li"),lme=a("strong"),t5o=o("vision-text-dual-encoder"),a5o=o(" \u2014 "),QD=a("a"),n5o=o("VisionTextDualEncoderModel"),s5o=o(" (VisionTextDualEncoder model)"),l5o=l(),Ru=a("li"),ime=a("strong"),i5o=o("visual_bert"),d5o=o(" \u2014 "),WD=a("a"),c5o=o("VisualBertModel"),f5o=o(" (VisualBERT model)"),m5o=l(),Pu=a("li"),dme=a("strong"),g5o=o("vit"),h5o=o(" \u2014 "),HD=a("a"),p5o=o("ViTModel"),_5o=o(" (ViT model)"),u5o=l(),Bu=a("li"),cme=a("strong"),b5o=o("vit_mae"),v5o=o(" \u2014 "),UD=a("a"),F5o=o("ViTMAEModel"),T5o=o(" (ViTMAE model)"),M5o=l(),Nu=a("li"),fme=a("strong"),E5o=o("wav2vec2"),C5o=o(" \u2014 "),JD=a("a"),w5o=o("Wav2Vec2Model"),A5o=o(" (Wav2Vec2 model)"),L5o=l(),Iu=a("li"),mme=a("strong"),y5o=o("wav2vec2-conformer"),x5o=o(" \u2014 "),YD=a("a"),$5o=o("Wav2Vec2ConformerModel"),k5o=o(" (Wav2Vec2-Conformer model)"),S5o=l(),qu=a("li"),gme=a("strong"),R5o=o("wavlm"),P5o=o(" \u2014 "),KD=a("a"),B5o=o("WavLMModel"),N5o=o(" (WavLM model)"),I5o=l(),ju=a("li"),hme=a("strong"),q5o=o("xglm"),j5o=o(" \u2014 "),ZD=a("a"),D5o=o("XGLMModel"),G5o=o(" (XGLM model)"),O5o=l(),Du=a("li"),pme=a("strong"),V5o=o("xlm"),X5o=o(" \u2014 "),eG=a("a"),z5o=o("XLMModel"),Q5o=o(" (XLM model)"),W5o=l(),Gu=a("li"),_me=a("strong"),H5o=o("xlm-prophetnet"),U5o=o(" \u2014 "),oG=a("a"),J5o=o("XLMProphetNetModel"),Y5o=o(" (XLM-ProphetNet model)"),K5o=l(),Ou=a("li"),ume=a("strong"),Z5o=o("xlm-roberta"),ewo=o(" \u2014 "),rG=a("a"),owo=o("XLMRobertaModel"),rwo=o(" (XLM-RoBERTa model)"),two=l(),Vu=a("li"),bme=a("strong"),awo=o("xlm-roberta-xl"),nwo=o(" \u2014 "),tG=a("a"),swo=o("XLMRobertaXLModel"),lwo=o(" (XLM-RoBERTa-XL model)"),iwo=l(),Xu=a("li"),vme=a("strong"),dwo=o("xlnet"),cwo=o(" \u2014 "),aG=a("a"),fwo=o("XLNetModel"),mwo=o(" (XLNet model)"),gwo=l(),zu=a("li"),Fme=a("strong"),hwo=o("yolos"),pwo=o(" \u2014 "),nG=a("a"),_wo=o("YolosModel"),uwo=o(" (YOLOS model)"),bwo=l(),Qu=a("li"),Tme=a("strong"),vwo=o("yoso"),Fwo=o(" \u2014 "),sG=a("a"),Two=o("YosoModel"),Mwo=o(" (YOSO model)"),Ewo=l(),Wu=a("p"),Cwo=o("The model is set in evaluation mode by default using "),Mme=a("code"),wwo=o("model.eval()"),Awo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eme=a("code"),Lwo=o("model.train()"),ywo=l(),F(Hu.$$.fragment),wXe=l(),zi=a("h2"),Uu=a("a"),Cme=a("span"),F(q6.$$.fragment),xwo=l(),wme=a("span"),$wo=o("AutoModelForPreTraining"),AXe=l(),ko=a("div"),F(j6.$$.fragment),kwo=l(),Qi=a("p"),Swo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lG=a("a"),Rwo=o("from_pretrained()"),Pwo=o(" class method or the "),iG=a("a"),Bwo=o("from_config()"),Nwo=o(` class
method.`),Iwo=l(),D6=a("p"),qwo=o("This class cannot be instantiated directly using "),Ame=a("code"),jwo=o("__init__()"),Dwo=o(" (throws an error)."),Gwo=l(),dt=a("div"),F(G6.$$.fragment),Owo=l(),Lme=a("p"),Vwo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Xwo=l(),Wi=a("p"),zwo=o(`Note:
Loading a model from its configuration file does `),yme=a("strong"),Qwo=o("not"),Wwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dG=a("a"),Hwo=o("from_pretrained()"),Uwo=o(" to load the model weights."),Jwo=l(),F(Ju.$$.fragment),Ywo=l(),Ke=a("div"),F(O6.$$.fragment),Kwo=l(),xme=a("p"),Zwo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eAo=l(),Ia=a("p"),oAo=o("The model class to instantiate is selected based on the "),$me=a("code"),rAo=o("model_type"),tAo=o(` property of the config object (either
passed as an argument or loaded from `),kme=a("code"),aAo=o("pretrained_model_name_or_path"),nAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=a("code"),sAo=o("pretrained_model_name_or_path"),lAo=o(":"),iAo=l(),G=a("ul"),Yu=a("li"),Rme=a("strong"),dAo=o("albert"),cAo=o(" \u2014 "),cG=a("a"),fAo=o("AlbertForPreTraining"),mAo=o(" (ALBERT model)"),gAo=l(),Ku=a("li"),Pme=a("strong"),hAo=o("bart"),pAo=o(" \u2014 "),fG=a("a"),_Ao=o("BartForConditionalGeneration"),uAo=o(" (BART model)"),bAo=l(),Zu=a("li"),Bme=a("strong"),vAo=o("bert"),FAo=o(" \u2014 "),mG=a("a"),TAo=o("BertForPreTraining"),MAo=o(" (BERT model)"),EAo=l(),e1=a("li"),Nme=a("strong"),CAo=o("big_bird"),wAo=o(" \u2014 "),gG=a("a"),AAo=o("BigBirdForPreTraining"),LAo=o(" (BigBird model)"),yAo=l(),o1=a("li"),Ime=a("strong"),xAo=o("bloom"),$Ao=o(" \u2014 "),hG=a("a"),kAo=o("BloomForCausalLM"),SAo=o(" (BLOOM model)"),RAo=l(),r1=a("li"),qme=a("strong"),PAo=o("camembert"),BAo=o(" \u2014 "),pG=a("a"),NAo=o("CamembertForMaskedLM"),IAo=o(" (CamemBERT model)"),qAo=l(),t1=a("li"),jme=a("strong"),jAo=o("ctrl"),DAo=o(" \u2014 "),_G=a("a"),GAo=o("CTRLLMHeadModel"),OAo=o(" (CTRL model)"),VAo=l(),a1=a("li"),Dme=a("strong"),XAo=o("data2vec-text"),zAo=o(" \u2014 "),uG=a("a"),QAo=o("Data2VecTextForMaskedLM"),WAo=o(" (Data2VecText model)"),HAo=l(),n1=a("li"),Gme=a("strong"),UAo=o("deberta"),JAo=o(" \u2014 "),bG=a("a"),YAo=o("DebertaForMaskedLM"),KAo=o(" (DeBERTa model)"),ZAo=l(),s1=a("li"),Ome=a("strong"),e6o=o("deberta-v2"),o6o=o(" \u2014 "),vG=a("a"),r6o=o("DebertaV2ForMaskedLM"),t6o=o(" (DeBERTa-v2 model)"),a6o=l(),l1=a("li"),Vme=a("strong"),n6o=o("distilbert"),s6o=o(" \u2014 "),FG=a("a"),l6o=o("DistilBertForMaskedLM"),i6o=o(" (DistilBERT model)"),d6o=l(),i1=a("li"),Xme=a("strong"),c6o=o("electra"),f6o=o(" \u2014 "),TG=a("a"),m6o=o("ElectraForPreTraining"),g6o=o(" (ELECTRA model)"),h6o=l(),d1=a("li"),zme=a("strong"),p6o=o("flaubert"),_6o=o(" \u2014 "),MG=a("a"),u6o=o("FlaubertWithLMHeadModel"),b6o=o(" (FlauBERT model)"),v6o=l(),c1=a("li"),Qme=a("strong"),F6o=o("flava"),T6o=o(" \u2014 "),EG=a("a"),M6o=o("FlavaForPreTraining"),E6o=o(" (FLAVA model)"),C6o=l(),f1=a("li"),Wme=a("strong"),w6o=o("fnet"),A6o=o(" \u2014 "),CG=a("a"),L6o=o("FNetForPreTraining"),y6o=o(" (FNet model)"),x6o=l(),m1=a("li"),Hme=a("strong"),$6o=o("fsmt"),k6o=o(" \u2014 "),wG=a("a"),S6o=o("FSMTForConditionalGeneration"),R6o=o(" (FairSeq Machine-Translation model)"),P6o=l(),g1=a("li"),Ume=a("strong"),B6o=o("funnel"),N6o=o(" \u2014 "),AG=a("a"),I6o=o("FunnelForPreTraining"),q6o=o(" (Funnel Transformer model)"),j6o=l(),h1=a("li"),Jme=a("strong"),D6o=o("gpt2"),G6o=o(" \u2014 "),LG=a("a"),O6o=o("GPT2LMHeadModel"),V6o=o(" (OpenAI GPT-2 model)"),X6o=l(),p1=a("li"),Yme=a("strong"),z6o=o("ibert"),Q6o=o(" \u2014 "),yG=a("a"),W6o=o("IBertForMaskedLM"),H6o=o(" (I-BERT model)"),U6o=l(),_1=a("li"),Kme=a("strong"),J6o=o("layoutlm"),Y6o=o(" \u2014 "),xG=a("a"),K6o=o("LayoutLMForMaskedLM"),Z6o=o(" (LayoutLM model)"),eLo=l(),u1=a("li"),Zme=a("strong"),oLo=o("longformer"),rLo=o(" \u2014 "),$G=a("a"),tLo=o("LongformerForMaskedLM"),aLo=o(" (Longformer model)"),nLo=l(),b1=a("li"),ege=a("strong"),sLo=o("lxmert"),lLo=o(" \u2014 "),kG=a("a"),iLo=o("LxmertForPreTraining"),dLo=o(" (LXMERT model)"),cLo=l(),v1=a("li"),oge=a("strong"),fLo=o("megatron-bert"),mLo=o(" \u2014 "),SG=a("a"),gLo=o("MegatronBertForPreTraining"),hLo=o(" (Megatron-BERT model)"),pLo=l(),F1=a("li"),rge=a("strong"),_Lo=o("mobilebert"),uLo=o(" \u2014 "),RG=a("a"),bLo=o("MobileBertForPreTraining"),vLo=o(" (MobileBERT model)"),FLo=l(),T1=a("li"),tge=a("strong"),TLo=o("mpnet"),MLo=o(" \u2014 "),PG=a("a"),ELo=o("MPNetForMaskedLM"),CLo=o(" (MPNet model)"),wLo=l(),M1=a("li"),age=a("strong"),ALo=o("mvp"),LLo=o(" \u2014 "),BG=a("a"),yLo=o("MvpForConditionalGeneration"),xLo=o(" (MVP model)"),$Lo=l(),E1=a("li"),nge=a("strong"),kLo=o("nezha"),SLo=o(" \u2014 "),NG=a("a"),RLo=o("NezhaForPreTraining"),PLo=o(" (Nezha model)"),BLo=l(),C1=a("li"),sge=a("strong"),NLo=o("openai-gpt"),ILo=o(" \u2014 "),IG=a("a"),qLo=o("OpenAIGPTLMHeadModel"),jLo=o(" (OpenAI GPT model)"),DLo=l(),w1=a("li"),lge=a("strong"),GLo=o("retribert"),OLo=o(" \u2014 "),qG=a("a"),VLo=o("RetriBertModel"),XLo=o(" (RetriBERT model)"),zLo=l(),A1=a("li"),ige=a("strong"),QLo=o("roberta"),WLo=o(" \u2014 "),jG=a("a"),HLo=o("RobertaForMaskedLM"),ULo=o(" (RoBERTa model)"),JLo=l(),L1=a("li"),dge=a("strong"),YLo=o("splinter"),KLo=o(" \u2014 "),DG=a("a"),ZLo=o("SplinterForPreTraining"),eyo=o(" (Splinter model)"),oyo=l(),y1=a("li"),cge=a("strong"),ryo=o("squeezebert"),tyo=o(" \u2014 "),GG=a("a"),ayo=o("SqueezeBertForMaskedLM"),nyo=o(" (SqueezeBERT model)"),syo=l(),x1=a("li"),fge=a("strong"),lyo=o("t5"),iyo=o(" \u2014 "),OG=a("a"),dyo=o("T5ForConditionalGeneration"),cyo=o(" (T5 model)"),fyo=l(),$1=a("li"),mge=a("strong"),myo=o("tapas"),gyo=o(" \u2014 "),VG=a("a"),hyo=o("TapasForMaskedLM"),pyo=o(" (TAPAS model)"),_yo=l(),k1=a("li"),gge=a("strong"),uyo=o("transfo-xl"),byo=o(" \u2014 "),XG=a("a"),vyo=o("TransfoXLLMHeadModel"),Fyo=o(" (Transformer-XL model)"),Tyo=l(),S1=a("li"),hge=a("strong"),Myo=o("unispeech"),Eyo=o(" \u2014 "),zG=a("a"),Cyo=o("UniSpeechForPreTraining"),wyo=o(" (UniSpeech model)"),Ayo=l(),R1=a("li"),pge=a("strong"),Lyo=o("unispeech-sat"),yyo=o(" \u2014 "),QG=a("a"),xyo=o("UniSpeechSatForPreTraining"),$yo=o(" (UniSpeechSat model)"),kyo=l(),P1=a("li"),_ge=a("strong"),Syo=o("visual_bert"),Ryo=o(" \u2014 "),WG=a("a"),Pyo=o("VisualBertForPreTraining"),Byo=o(" (VisualBERT model)"),Nyo=l(),B1=a("li"),uge=a("strong"),Iyo=o("vit_mae"),qyo=o(" \u2014 "),HG=a("a"),jyo=o("ViTMAEForPreTraining"),Dyo=o(" (ViTMAE model)"),Gyo=l(),N1=a("li"),bge=a("strong"),Oyo=o("wav2vec2"),Vyo=o(" \u2014 "),UG=a("a"),Xyo=o("Wav2Vec2ForPreTraining"),zyo=o(" (Wav2Vec2 model)"),Qyo=l(),I1=a("li"),vge=a("strong"),Wyo=o("wav2vec2-conformer"),Hyo=o(" \u2014 "),JG=a("a"),Uyo=o("Wav2Vec2ConformerForPreTraining"),Jyo=o(" (Wav2Vec2-Conformer model)"),Yyo=l(),q1=a("li"),Fge=a("strong"),Kyo=o("xlm"),Zyo=o(" \u2014 "),YG=a("a"),exo=o("XLMWithLMHeadModel"),oxo=o(" (XLM model)"),rxo=l(),j1=a("li"),Tge=a("strong"),txo=o("xlm-roberta"),axo=o(" \u2014 "),KG=a("a"),nxo=o("XLMRobertaForMaskedLM"),sxo=o(" (XLM-RoBERTa model)"),lxo=l(),D1=a("li"),Mge=a("strong"),ixo=o("xlm-roberta-xl"),dxo=o(" \u2014 "),ZG=a("a"),cxo=o("XLMRobertaXLForMaskedLM"),fxo=o(" (XLM-RoBERTa-XL model)"),mxo=l(),G1=a("li"),Ege=a("strong"),gxo=o("xlnet"),hxo=o(" \u2014 "),eO=a("a"),pxo=o("XLNetLMHeadModel"),_xo=o(" (XLNet model)"),uxo=l(),O1=a("p"),bxo=o("The model is set in evaluation mode by default using "),Cge=a("code"),vxo=o("model.eval()"),Fxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=a("code"),Txo=o("model.train()"),Mxo=l(),F(V1.$$.fragment),LXe=l(),Hi=a("h2"),X1=a("a"),Age=a("span"),F(V6.$$.fragment),Exo=l(),Lge=a("span"),Cxo=o("AutoModelForCausalLM"),yXe=l(),So=a("div"),F(X6.$$.fragment),wxo=l(),Ui=a("p"),Axo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oO=a("a"),Lxo=o("from_pretrained()"),yxo=o(" class method or the "),rO=a("a"),xxo=o("from_config()"),$xo=o(` class
method.`),kxo=l(),z6=a("p"),Sxo=o("This class cannot be instantiated directly using "),yge=a("code"),Rxo=o("__init__()"),Pxo=o(" (throws an error)."),Bxo=l(),ct=a("div"),F(Q6.$$.fragment),Nxo=l(),xge=a("p"),Ixo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qxo=l(),Ji=a("p"),jxo=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),Dxo=o("not"),Gxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=a("a"),Oxo=o("from_pretrained()"),Vxo=o(" to load the model weights."),Xxo=l(),F(z1.$$.fragment),zxo=l(),Ze=a("div"),F(W6.$$.fragment),Qxo=l(),kge=a("p"),Wxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hxo=l(),qa=a("p"),Uxo=o("The model class to instantiate is selected based on the "),Sge=a("code"),Jxo=o("model_type"),Yxo=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),Kxo=o("pretrained_model_name_or_path"),Zxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=a("code"),e$o=o("pretrained_model_name_or_path"),o$o=o(":"),r$o=l(),z=a("ul"),Q1=a("li"),Bge=a("strong"),t$o=o("bart"),a$o=o(" \u2014 "),aO=a("a"),n$o=o("BartForCausalLM"),s$o=o(" (BART model)"),l$o=l(),W1=a("li"),Nge=a("strong"),i$o=o("bert"),d$o=o(" \u2014 "),nO=a("a"),c$o=o("BertLMHeadModel"),f$o=o(" (BERT model)"),m$o=l(),H1=a("li"),Ige=a("strong"),g$o=o("bert-generation"),h$o=o(" \u2014 "),sO=a("a"),p$o=o("BertGenerationDecoder"),_$o=o(" (Bert Generation model)"),u$o=l(),U1=a("li"),qge=a("strong"),b$o=o("big_bird"),v$o=o(" \u2014 "),lO=a("a"),F$o=o("BigBirdForCausalLM"),T$o=o(" (BigBird model)"),M$o=l(),J1=a("li"),jge=a("strong"),E$o=o("bigbird_pegasus"),C$o=o(" \u2014 "),iO=a("a"),w$o=o("BigBirdPegasusForCausalLM"),A$o=o(" (BigBird-Pegasus model)"),L$o=l(),Y1=a("li"),Dge=a("strong"),y$o=o("blenderbot"),x$o=o(" \u2014 "),dO=a("a"),$$o=o("BlenderbotForCausalLM"),k$o=o(" (Blenderbot model)"),S$o=l(),K1=a("li"),Gge=a("strong"),R$o=o("blenderbot-small"),P$o=o(" \u2014 "),cO=a("a"),B$o=o("BlenderbotSmallForCausalLM"),N$o=o(" (BlenderbotSmall model)"),I$o=l(),Z1=a("li"),Oge=a("strong"),q$o=o("bloom"),j$o=o(" \u2014 "),fO=a("a"),D$o=o("BloomForCausalLM"),G$o=o(" (BLOOM model)"),O$o=l(),e2=a("li"),Vge=a("strong"),V$o=o("camembert"),X$o=o(" \u2014 "),mO=a("a"),z$o=o("CamembertForCausalLM"),Q$o=o(" (CamemBERT model)"),W$o=l(),o2=a("li"),Xge=a("strong"),H$o=o("codegen"),U$o=o(" \u2014 "),gO=a("a"),J$o=o("CodeGenForCausalLM"),Y$o=o(" (CodeGen model)"),K$o=l(),r2=a("li"),zge=a("strong"),Z$o=o("ctrl"),eko=o(" \u2014 "),hO=a("a"),oko=o("CTRLLMHeadModel"),rko=o(" (CTRL model)"),tko=l(),t2=a("li"),Qge=a("strong"),ako=o("data2vec-text"),nko=o(" \u2014 "),pO=a("a"),sko=o("Data2VecTextForCausalLM"),lko=o(" (Data2VecText model)"),iko=l(),a2=a("li"),Wge=a("strong"),dko=o("electra"),cko=o(" \u2014 "),_O=a("a"),fko=o("ElectraForCausalLM"),mko=o(" (ELECTRA model)"),gko=l(),n2=a("li"),Hge=a("strong"),hko=o("gpt2"),pko=o(" \u2014 "),uO=a("a"),_ko=o("GPT2LMHeadModel"),uko=o(" (OpenAI GPT-2 model)"),bko=l(),s2=a("li"),Uge=a("strong"),vko=o("gpt_neo"),Fko=o(" \u2014 "),bO=a("a"),Tko=o("GPTNeoForCausalLM"),Mko=o(" (GPT Neo model)"),Eko=l(),l2=a("li"),Jge=a("strong"),Cko=o("gpt_neox"),wko=o(" \u2014 "),vO=a("a"),Ako=o("GPTNeoXForCausalLM"),Lko=o(" (GPT NeoX model)"),yko=l(),i2=a("li"),Yge=a("strong"),xko=o("gptj"),$ko=o(" \u2014 "),FO=a("a"),kko=o("GPTJForCausalLM"),Sko=o(" (GPT-J model)"),Rko=l(),d2=a("li"),Kge=a("strong"),Pko=o("marian"),Bko=o(" \u2014 "),TO=a("a"),Nko=o("MarianForCausalLM"),Iko=o(" (Marian model)"),qko=l(),c2=a("li"),Zge=a("strong"),jko=o("mbart"),Dko=o(" \u2014 "),MO=a("a"),Gko=o("MBartForCausalLM"),Oko=o(" (mBART model)"),Vko=l(),f2=a("li"),ehe=a("strong"),Xko=o("megatron-bert"),zko=o(" \u2014 "),EO=a("a"),Qko=o("MegatronBertForCausalLM"),Wko=o(" (Megatron-BERT model)"),Hko=l(),m2=a("li"),ohe=a("strong"),Uko=o("mvp"),Jko=o(" \u2014 "),CO=a("a"),Yko=o("MvpForCausalLM"),Kko=o(" (MVP model)"),Zko=l(),g2=a("li"),rhe=a("strong"),eSo=o("openai-gpt"),oSo=o(" \u2014 "),wO=a("a"),rSo=o("OpenAIGPTLMHeadModel"),tSo=o(" (OpenAI GPT model)"),aSo=l(),h2=a("li"),the=a("strong"),nSo=o("opt"),sSo=o(" \u2014 "),AO=a("a"),lSo=o("OPTForCausalLM"),iSo=o(" (OPT model)"),dSo=l(),p2=a("li"),ahe=a("strong"),cSo=o("pegasus"),fSo=o(" \u2014 "),LO=a("a"),mSo=o("PegasusForCausalLM"),gSo=o(" (Pegasus model)"),hSo=l(),_2=a("li"),nhe=a("strong"),pSo=o("plbart"),_So=o(" \u2014 "),yO=a("a"),uSo=o("PLBartForCausalLM"),bSo=o(" (PLBart model)"),vSo=l(),u2=a("li"),she=a("strong"),FSo=o("prophetnet"),TSo=o(" \u2014 "),xO=a("a"),MSo=o("ProphetNetForCausalLM"),ESo=o(" (ProphetNet model)"),CSo=l(),b2=a("li"),lhe=a("strong"),wSo=o("qdqbert"),ASo=o(" \u2014 "),$O=a("a"),LSo=o("QDQBertLMHeadModel"),ySo=o(" (QDQBert model)"),xSo=l(),v2=a("li"),ihe=a("strong"),$So=o("reformer"),kSo=o(" \u2014 "),kO=a("a"),SSo=o("ReformerModelWithLMHead"),RSo=o(" (Reformer model)"),PSo=l(),F2=a("li"),dhe=a("strong"),BSo=o("rembert"),NSo=o(" \u2014 "),SO=a("a"),ISo=o("RemBertForCausalLM"),qSo=o(" (RemBERT model)"),jSo=l(),T2=a("li"),che=a("strong"),DSo=o("roberta"),GSo=o(" \u2014 "),RO=a("a"),OSo=o("RobertaForCausalLM"),VSo=o(" (RoBERTa model)"),XSo=l(),M2=a("li"),fhe=a("strong"),zSo=o("roformer"),QSo=o(" \u2014 "),PO=a("a"),WSo=o("RoFormerForCausalLM"),HSo=o(" (RoFormer model)"),USo=l(),E2=a("li"),mhe=a("strong"),JSo=o("speech_to_text_2"),YSo=o(" \u2014 "),BO=a("a"),KSo=o("Speech2Text2ForCausalLM"),ZSo=o(" (Speech2Text2 model)"),eRo=l(),C2=a("li"),ghe=a("strong"),oRo=o("transfo-xl"),rRo=o(" \u2014 "),NO=a("a"),tRo=o("TransfoXLLMHeadModel"),aRo=o(" (Transformer-XL model)"),nRo=l(),w2=a("li"),hhe=a("strong"),sRo=o("trocr"),lRo=o(" \u2014 "),IO=a("a"),iRo=o("TrOCRForCausalLM"),dRo=o(" (TrOCR model)"),cRo=l(),A2=a("li"),phe=a("strong"),fRo=o("xglm"),mRo=o(" \u2014 "),qO=a("a"),gRo=o("XGLMForCausalLM"),hRo=o(" (XGLM model)"),pRo=l(),L2=a("li"),_he=a("strong"),_Ro=o("xlm"),uRo=o(" \u2014 "),jO=a("a"),bRo=o("XLMWithLMHeadModel"),vRo=o(" (XLM model)"),FRo=l(),y2=a("li"),uhe=a("strong"),TRo=o("xlm-prophetnet"),MRo=o(" \u2014 "),DO=a("a"),ERo=o("XLMProphetNetForCausalLM"),CRo=o(" (XLM-ProphetNet model)"),wRo=l(),x2=a("li"),bhe=a("strong"),ARo=o("xlm-roberta"),LRo=o(" \u2014 "),GO=a("a"),yRo=o("XLMRobertaForCausalLM"),xRo=o(" (XLM-RoBERTa model)"),$Ro=l(),$2=a("li"),vhe=a("strong"),kRo=o("xlm-roberta-xl"),SRo=o(" \u2014 "),OO=a("a"),RRo=o("XLMRobertaXLForCausalLM"),PRo=o(" (XLM-RoBERTa-XL model)"),BRo=l(),k2=a("li"),Fhe=a("strong"),NRo=o("xlnet"),IRo=o(" \u2014 "),VO=a("a"),qRo=o("XLNetLMHeadModel"),jRo=o(" (XLNet model)"),DRo=l(),S2=a("p"),GRo=o("The model is set in evaluation mode by default using "),The=a("code"),ORo=o("model.eval()"),VRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=a("code"),XRo=o("model.train()"),zRo=l(),F(R2.$$.fragment),xXe=l(),Yi=a("h2"),P2=a("a"),Ehe=a("span"),F(H6.$$.fragment),QRo=l(),Che=a("span"),WRo=o("AutoModelForMaskedLM"),$Xe=l(),Ro=a("div"),F(U6.$$.fragment),HRo=l(),Ki=a("p"),URo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XO=a("a"),JRo=o("from_pretrained()"),YRo=o(" class method or the "),zO=a("a"),KRo=o("from_config()"),ZRo=o(` class
method.`),ePo=l(),J6=a("p"),oPo=o("This class cannot be instantiated directly using "),whe=a("code"),rPo=o("__init__()"),tPo=o(" (throws an error)."),aPo=l(),ft=a("div"),F(Y6.$$.fragment),nPo=l(),Ahe=a("p"),sPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lPo=l(),Zi=a("p"),iPo=o(`Note:
Loading a model from its configuration file does `),Lhe=a("strong"),dPo=o("not"),cPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=a("a"),fPo=o("from_pretrained()"),mPo=o(" to load the model weights."),gPo=l(),F(B2.$$.fragment),hPo=l(),eo=a("div"),F(K6.$$.fragment),pPo=l(),yhe=a("p"),_Po=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uPo=l(),ja=a("p"),bPo=o("The model class to instantiate is selected based on the "),xhe=a("code"),vPo=o("model_type"),FPo=o(` property of the config object (either
passed as an argument or loaded from `),$he=a("code"),TPo=o("pretrained_model_name_or_path"),MPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=a("code"),EPo=o("pretrained_model_name_or_path"),CPo=o(":"),wPo=l(),W=a("ul"),N2=a("li"),She=a("strong"),APo=o("albert"),LPo=o(" \u2014 "),WO=a("a"),yPo=o("AlbertForMaskedLM"),xPo=o(" (ALBERT model)"),$Po=l(),I2=a("li"),Rhe=a("strong"),kPo=o("bart"),SPo=o(" \u2014 "),HO=a("a"),RPo=o("BartForConditionalGeneration"),PPo=o(" (BART model)"),BPo=l(),q2=a("li"),Phe=a("strong"),NPo=o("bert"),IPo=o(" \u2014 "),UO=a("a"),qPo=o("BertForMaskedLM"),jPo=o(" (BERT model)"),DPo=l(),j2=a("li"),Bhe=a("strong"),GPo=o("big_bird"),OPo=o(" \u2014 "),JO=a("a"),VPo=o("BigBirdForMaskedLM"),XPo=o(" (BigBird model)"),zPo=l(),D2=a("li"),Nhe=a("strong"),QPo=o("camembert"),WPo=o(" \u2014 "),YO=a("a"),HPo=o("CamembertForMaskedLM"),UPo=o(" (CamemBERT model)"),JPo=l(),G2=a("li"),Ihe=a("strong"),YPo=o("convbert"),KPo=o(" \u2014 "),KO=a("a"),ZPo=o("ConvBertForMaskedLM"),eBo=o(" (ConvBERT model)"),oBo=l(),O2=a("li"),qhe=a("strong"),rBo=o("data2vec-text"),tBo=o(" \u2014 "),ZO=a("a"),aBo=o("Data2VecTextForMaskedLM"),nBo=o(" (Data2VecText model)"),sBo=l(),V2=a("li"),jhe=a("strong"),lBo=o("deberta"),iBo=o(" \u2014 "),eV=a("a"),dBo=o("DebertaForMaskedLM"),cBo=o(" (DeBERTa model)"),fBo=l(),X2=a("li"),Dhe=a("strong"),mBo=o("deberta-v2"),gBo=o(" \u2014 "),oV=a("a"),hBo=o("DebertaV2ForMaskedLM"),pBo=o(" (DeBERTa-v2 model)"),_Bo=l(),z2=a("li"),Ghe=a("strong"),uBo=o("distilbert"),bBo=o(" \u2014 "),rV=a("a"),vBo=o("DistilBertForMaskedLM"),FBo=o(" (DistilBERT model)"),TBo=l(),Q2=a("li"),Ohe=a("strong"),MBo=o("electra"),EBo=o(" \u2014 "),tV=a("a"),CBo=o("ElectraForMaskedLM"),wBo=o(" (ELECTRA model)"),ABo=l(),W2=a("li"),Vhe=a("strong"),LBo=o("flaubert"),yBo=o(" \u2014 "),aV=a("a"),xBo=o("FlaubertWithLMHeadModel"),$Bo=o(" (FlauBERT model)"),kBo=l(),H2=a("li"),Xhe=a("strong"),SBo=o("fnet"),RBo=o(" \u2014 "),nV=a("a"),PBo=o("FNetForMaskedLM"),BBo=o(" (FNet model)"),NBo=l(),U2=a("li"),zhe=a("strong"),IBo=o("funnel"),qBo=o(" \u2014 "),sV=a("a"),jBo=o("FunnelForMaskedLM"),DBo=o(" (Funnel Transformer model)"),GBo=l(),J2=a("li"),Qhe=a("strong"),OBo=o("ibert"),VBo=o(" \u2014 "),lV=a("a"),XBo=o("IBertForMaskedLM"),zBo=o(" (I-BERT model)"),QBo=l(),Y2=a("li"),Whe=a("strong"),WBo=o("layoutlm"),HBo=o(" \u2014 "),iV=a("a"),UBo=o("LayoutLMForMaskedLM"),JBo=o(" (LayoutLM model)"),YBo=l(),K2=a("li"),Hhe=a("strong"),KBo=o("longformer"),ZBo=o(" \u2014 "),dV=a("a"),eNo=o("LongformerForMaskedLM"),oNo=o(" (Longformer model)"),rNo=l(),Z2=a("li"),Uhe=a("strong"),tNo=o("luke"),aNo=o(" \u2014 "),cV=a("a"),nNo=o("LukeForMaskedLM"),sNo=o(" (LUKE model)"),lNo=l(),eb=a("li"),Jhe=a("strong"),iNo=o("mbart"),dNo=o(" \u2014 "),fV=a("a"),cNo=o("MBartForConditionalGeneration"),fNo=o(" (mBART model)"),mNo=l(),ob=a("li"),Yhe=a("strong"),gNo=o("megatron-bert"),hNo=o(" \u2014 "),mV=a("a"),pNo=o("MegatronBertForMaskedLM"),_No=o(" (Megatron-BERT model)"),uNo=l(),rb=a("li"),Khe=a("strong"),bNo=o("mobilebert"),vNo=o(" \u2014 "),gV=a("a"),FNo=o("MobileBertForMaskedLM"),TNo=o(" (MobileBERT model)"),MNo=l(),tb=a("li"),Zhe=a("strong"),ENo=o("mpnet"),CNo=o(" \u2014 "),hV=a("a"),wNo=o("MPNetForMaskedLM"),ANo=o(" (MPNet model)"),LNo=l(),ab=a("li"),epe=a("strong"),yNo=o("mvp"),xNo=o(" \u2014 "),pV=a("a"),$No=o("MvpForConditionalGeneration"),kNo=o(" (MVP model)"),SNo=l(),nb=a("li"),ope=a("strong"),RNo=o("nezha"),PNo=o(" \u2014 "),_V=a("a"),BNo=o("NezhaForMaskedLM"),NNo=o(" (Nezha model)"),INo=l(),sb=a("li"),rpe=a("strong"),qNo=o("nystromformer"),jNo=o(" \u2014 "),uV=a("a"),DNo=o("NystromformerForMaskedLM"),GNo=o(" (Nystr\xF6mformer model)"),ONo=l(),lb=a("li"),tpe=a("strong"),VNo=o("perceiver"),XNo=o(" \u2014 "),bV=a("a"),zNo=o("PerceiverForMaskedLM"),QNo=o(" (Perceiver model)"),WNo=l(),ib=a("li"),ape=a("strong"),HNo=o("qdqbert"),UNo=o(" \u2014 "),vV=a("a"),JNo=o("QDQBertForMaskedLM"),YNo=o(" (QDQBert model)"),KNo=l(),db=a("li"),npe=a("strong"),ZNo=o("reformer"),eIo=o(" \u2014 "),FV=a("a"),oIo=o("ReformerForMaskedLM"),rIo=o(" (Reformer model)"),tIo=l(),cb=a("li"),spe=a("strong"),aIo=o("rembert"),nIo=o(" \u2014 "),TV=a("a"),sIo=o("RemBertForMaskedLM"),lIo=o(" (RemBERT model)"),iIo=l(),fb=a("li"),lpe=a("strong"),dIo=o("roberta"),cIo=o(" \u2014 "),MV=a("a"),fIo=o("RobertaForMaskedLM"),mIo=o(" (RoBERTa model)"),gIo=l(),mb=a("li"),ipe=a("strong"),hIo=o("roformer"),pIo=o(" \u2014 "),EV=a("a"),_Io=o("RoFormerForMaskedLM"),uIo=o(" (RoFormer model)"),bIo=l(),gb=a("li"),dpe=a("strong"),vIo=o("squeezebert"),FIo=o(" \u2014 "),CV=a("a"),TIo=o("SqueezeBertForMaskedLM"),MIo=o(" (SqueezeBERT model)"),EIo=l(),hb=a("li"),cpe=a("strong"),CIo=o("tapas"),wIo=o(" \u2014 "),wV=a("a"),AIo=o("TapasForMaskedLM"),LIo=o(" (TAPAS model)"),yIo=l(),pb=a("li"),fpe=a("strong"),xIo=o("wav2vec2"),$Io=o(" \u2014 "),mpe=a("code"),kIo=o("Wav2Vec2ForMaskedLM"),SIo=o(" (Wav2Vec2 model)"),RIo=l(),_b=a("li"),gpe=a("strong"),PIo=o("xlm"),BIo=o(" \u2014 "),AV=a("a"),NIo=o("XLMWithLMHeadModel"),IIo=o(" (XLM model)"),qIo=l(),ub=a("li"),hpe=a("strong"),jIo=o("xlm-roberta"),DIo=o(" \u2014 "),LV=a("a"),GIo=o("XLMRobertaForMaskedLM"),OIo=o(" (XLM-RoBERTa model)"),VIo=l(),bb=a("li"),ppe=a("strong"),XIo=o("xlm-roberta-xl"),zIo=o(" \u2014 "),yV=a("a"),QIo=o("XLMRobertaXLForMaskedLM"),WIo=o(" (XLM-RoBERTa-XL model)"),HIo=l(),vb=a("li"),_pe=a("strong"),UIo=o("yoso"),JIo=o(" \u2014 "),xV=a("a"),YIo=o("YosoForMaskedLM"),KIo=o(" (YOSO model)"),ZIo=l(),Fb=a("p"),eqo=o("The model is set in evaluation mode by default using "),upe=a("code"),oqo=o("model.eval()"),rqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=a("code"),tqo=o("model.train()"),aqo=l(),F(Tb.$$.fragment),kXe=l(),ed=a("h2"),Mb=a("a"),vpe=a("span"),F(Z6.$$.fragment),nqo=l(),Fpe=a("span"),sqo=o("AutoModelForSeq2SeqLM"),SXe=l(),Po=a("div"),F(eL.$$.fragment),lqo=l(),od=a("p"),iqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$V=a("a"),dqo=o("from_pretrained()"),cqo=o(" class method or the "),kV=a("a"),fqo=o("from_config()"),mqo=o(` class
method.`),gqo=l(),oL=a("p"),hqo=o("This class cannot be instantiated directly using "),Tpe=a("code"),pqo=o("__init__()"),_qo=o(" (throws an error)."),uqo=l(),mt=a("div"),F(rL.$$.fragment),bqo=l(),Mpe=a("p"),vqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Fqo=l(),rd=a("p"),Tqo=o(`Note:
Loading a model from its configuration file does `),Epe=a("strong"),Mqo=o("not"),Eqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=a("a"),Cqo=o("from_pretrained()"),wqo=o(" to load the model weights."),Aqo=l(),F(Eb.$$.fragment),Lqo=l(),oo=a("div"),F(tL.$$.fragment),yqo=l(),Cpe=a("p"),xqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$qo=l(),Da=a("p"),kqo=o("The model class to instantiate is selected based on the "),wpe=a("code"),Sqo=o("model_type"),Rqo=o(` property of the config object (either
passed as an argument or loaded from `),Ape=a("code"),Pqo=o("pretrained_model_name_or_path"),Bqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=a("code"),Nqo=o("pretrained_model_name_or_path"),Iqo=o(":"),qqo=l(),fe=a("ul"),Cb=a("li"),ype=a("strong"),jqo=o("bart"),Dqo=o(" \u2014 "),RV=a("a"),Gqo=o("BartForConditionalGeneration"),Oqo=o(" (BART model)"),Vqo=l(),wb=a("li"),xpe=a("strong"),Xqo=o("bigbird_pegasus"),zqo=o(" \u2014 "),PV=a("a"),Qqo=o("BigBirdPegasusForConditionalGeneration"),Wqo=o(" (BigBird-Pegasus model)"),Hqo=l(),Ab=a("li"),$pe=a("strong"),Uqo=o("blenderbot"),Jqo=o(" \u2014 "),BV=a("a"),Yqo=o("BlenderbotForConditionalGeneration"),Kqo=o(" (Blenderbot model)"),Zqo=l(),Lb=a("li"),kpe=a("strong"),ejo=o("blenderbot-small"),ojo=o(" \u2014 "),NV=a("a"),rjo=o("BlenderbotSmallForConditionalGeneration"),tjo=o(" (BlenderbotSmall model)"),ajo=l(),yb=a("li"),Spe=a("strong"),njo=o("encoder-decoder"),sjo=o(" \u2014 "),IV=a("a"),ljo=o("EncoderDecoderModel"),ijo=o(" (Encoder decoder model)"),djo=l(),xb=a("li"),Rpe=a("strong"),cjo=o("fsmt"),fjo=o(" \u2014 "),qV=a("a"),mjo=o("FSMTForConditionalGeneration"),gjo=o(" (FairSeq Machine-Translation model)"),hjo=l(),$b=a("li"),Ppe=a("strong"),pjo=o("led"),_jo=o(" \u2014 "),jV=a("a"),ujo=o("LEDForConditionalGeneration"),bjo=o(" (LED model)"),vjo=l(),kb=a("li"),Bpe=a("strong"),Fjo=o("longt5"),Tjo=o(" \u2014 "),DV=a("a"),Mjo=o("LongT5ForConditionalGeneration"),Ejo=o(" (LongT5 model)"),Cjo=l(),Sb=a("li"),Npe=a("strong"),wjo=o("m2m_100"),Ajo=o(" \u2014 "),GV=a("a"),Ljo=o("M2M100ForConditionalGeneration"),yjo=o(" (M2M100 model)"),xjo=l(),Rb=a("li"),Ipe=a("strong"),$jo=o("marian"),kjo=o(" \u2014 "),OV=a("a"),Sjo=o("MarianMTModel"),Rjo=o(" (Marian model)"),Pjo=l(),Pb=a("li"),qpe=a("strong"),Bjo=o("mbart"),Njo=o(" \u2014 "),VV=a("a"),Ijo=o("MBartForConditionalGeneration"),qjo=o(" (mBART model)"),jjo=l(),Bb=a("li"),jpe=a("strong"),Djo=o("mt5"),Gjo=o(" \u2014 "),XV=a("a"),Ojo=o("MT5ForConditionalGeneration"),Vjo=o(" (MT5 model)"),Xjo=l(),Nb=a("li"),Dpe=a("strong"),zjo=o("mvp"),Qjo=o(" \u2014 "),zV=a("a"),Wjo=o("MvpForConditionalGeneration"),Hjo=o(" (MVP model)"),Ujo=l(),Ib=a("li"),Gpe=a("strong"),Jjo=o("nllb"),Yjo=o(" \u2014 "),QV=a("a"),Kjo=o("M2M100ForConditionalGeneration"),Zjo=o(" (NLLB model)"),eDo=l(),qb=a("li"),Ope=a("strong"),oDo=o("pegasus"),rDo=o(" \u2014 "),WV=a("a"),tDo=o("PegasusForConditionalGeneration"),aDo=o(" (Pegasus model)"),nDo=l(),jb=a("li"),Vpe=a("strong"),sDo=o("plbart"),lDo=o(" \u2014 "),HV=a("a"),iDo=o("PLBartForConditionalGeneration"),dDo=o(" (PLBart model)"),cDo=l(),Db=a("li"),Xpe=a("strong"),fDo=o("prophetnet"),mDo=o(" \u2014 "),UV=a("a"),gDo=o("ProphetNetForConditionalGeneration"),hDo=o(" (ProphetNet model)"),pDo=l(),Gb=a("li"),zpe=a("strong"),_Do=o("t5"),uDo=o(" \u2014 "),JV=a("a"),bDo=o("T5ForConditionalGeneration"),vDo=o(" (T5 model)"),FDo=l(),Ob=a("li"),Qpe=a("strong"),TDo=o("xlm-prophetnet"),MDo=o(" \u2014 "),YV=a("a"),EDo=o("XLMProphetNetForConditionalGeneration"),CDo=o(" (XLM-ProphetNet model)"),wDo=l(),Vb=a("p"),ADo=o("The model is set in evaluation mode by default using "),Wpe=a("code"),LDo=o("model.eval()"),yDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),xDo=o("model.train()"),$Do=l(),F(Xb.$$.fragment),RXe=l(),td=a("h2"),zb=a("a"),Upe=a("span"),F(aL.$$.fragment),kDo=l(),Jpe=a("span"),SDo=o("AutoModelForSequenceClassification"),PXe=l(),Bo=a("div"),F(nL.$$.fragment),RDo=l(),ad=a("p"),PDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KV=a("a"),BDo=o("from_pretrained()"),NDo=o(" class method or the "),ZV=a("a"),IDo=o("from_config()"),qDo=o(` class
method.`),jDo=l(),sL=a("p"),DDo=o("This class cannot be instantiated directly using "),Ype=a("code"),GDo=o("__init__()"),ODo=o(" (throws an error)."),VDo=l(),gt=a("div"),F(lL.$$.fragment),XDo=l(),Kpe=a("p"),zDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),QDo=l(),nd=a("p"),WDo=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),HDo=o("not"),UDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),JDo=o("from_pretrained()"),YDo=o(" to load the model weights."),KDo=l(),F(Qb.$$.fragment),ZDo=l(),ro=a("div"),F(iL.$$.fragment),eGo=l(),e_e=a("p"),oGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rGo=l(),Ga=a("p"),tGo=o("The model class to instantiate is selected based on the "),o_e=a("code"),aGo=o("model_type"),nGo=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),sGo=o("pretrained_model_name_or_path"),lGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),iGo=o("pretrained_model_name_or_path"),dGo=o(":"),cGo=l(),I=a("ul"),Wb=a("li"),a_e=a("strong"),fGo=o("albert"),mGo=o(" \u2014 "),oX=a("a"),gGo=o("AlbertForSequenceClassification"),hGo=o(" (ALBERT model)"),pGo=l(),Hb=a("li"),n_e=a("strong"),_Go=o("bart"),uGo=o(" \u2014 "),rX=a("a"),bGo=o("BartForSequenceClassification"),vGo=o(" (BART model)"),FGo=l(),Ub=a("li"),s_e=a("strong"),TGo=o("bert"),MGo=o(" \u2014 "),tX=a("a"),EGo=o("BertForSequenceClassification"),CGo=o(" (BERT model)"),wGo=l(),Jb=a("li"),l_e=a("strong"),AGo=o("big_bird"),LGo=o(" \u2014 "),aX=a("a"),yGo=o("BigBirdForSequenceClassification"),xGo=o(" (BigBird model)"),$Go=l(),Yb=a("li"),i_e=a("strong"),kGo=o("bigbird_pegasus"),SGo=o(" \u2014 "),nX=a("a"),RGo=o("BigBirdPegasusForSequenceClassification"),PGo=o(" (BigBird-Pegasus model)"),BGo=l(),Kb=a("li"),d_e=a("strong"),NGo=o("bloom"),IGo=o(" \u2014 "),sX=a("a"),qGo=o("BloomForSequenceClassification"),jGo=o(" (BLOOM model)"),DGo=l(),Zb=a("li"),c_e=a("strong"),GGo=o("camembert"),OGo=o(" \u2014 "),lX=a("a"),VGo=o("CamembertForSequenceClassification"),XGo=o(" (CamemBERT model)"),zGo=l(),ev=a("li"),f_e=a("strong"),QGo=o("canine"),WGo=o(" \u2014 "),iX=a("a"),HGo=o("CanineForSequenceClassification"),UGo=o(" (CANINE model)"),JGo=l(),ov=a("li"),m_e=a("strong"),YGo=o("convbert"),KGo=o(" \u2014 "),dX=a("a"),ZGo=o("ConvBertForSequenceClassification"),eOo=o(" (ConvBERT model)"),oOo=l(),rv=a("li"),g_e=a("strong"),rOo=o("ctrl"),tOo=o(" \u2014 "),cX=a("a"),aOo=o("CTRLForSequenceClassification"),nOo=o(" (CTRL model)"),sOo=l(),tv=a("li"),h_e=a("strong"),lOo=o("data2vec-text"),iOo=o(" \u2014 "),fX=a("a"),dOo=o("Data2VecTextForSequenceClassification"),cOo=o(" (Data2VecText model)"),fOo=l(),av=a("li"),p_e=a("strong"),mOo=o("deberta"),gOo=o(" \u2014 "),mX=a("a"),hOo=o("DebertaForSequenceClassification"),pOo=o(" (DeBERTa model)"),_Oo=l(),nv=a("li"),__e=a("strong"),uOo=o("deberta-v2"),bOo=o(" \u2014 "),gX=a("a"),vOo=o("DebertaV2ForSequenceClassification"),FOo=o(" (DeBERTa-v2 model)"),TOo=l(),sv=a("li"),u_e=a("strong"),MOo=o("distilbert"),EOo=o(" \u2014 "),hX=a("a"),COo=o("DistilBertForSequenceClassification"),wOo=o(" (DistilBERT model)"),AOo=l(),lv=a("li"),b_e=a("strong"),LOo=o("electra"),yOo=o(" \u2014 "),pX=a("a"),xOo=o("ElectraForSequenceClassification"),$Oo=o(" (ELECTRA model)"),kOo=l(),iv=a("li"),v_e=a("strong"),SOo=o("flaubert"),ROo=o(" \u2014 "),_X=a("a"),POo=o("FlaubertForSequenceClassification"),BOo=o(" (FlauBERT model)"),NOo=l(),dv=a("li"),F_e=a("strong"),IOo=o("fnet"),qOo=o(" \u2014 "),uX=a("a"),jOo=o("FNetForSequenceClassification"),DOo=o(" (FNet model)"),GOo=l(),cv=a("li"),T_e=a("strong"),OOo=o("funnel"),VOo=o(" \u2014 "),bX=a("a"),XOo=o("FunnelForSequenceClassification"),zOo=o(" (Funnel Transformer model)"),QOo=l(),fv=a("li"),M_e=a("strong"),WOo=o("gpt2"),HOo=o(" \u2014 "),vX=a("a"),UOo=o("GPT2ForSequenceClassification"),JOo=o(" (OpenAI GPT-2 model)"),YOo=l(),mv=a("li"),E_e=a("strong"),KOo=o("gpt_neo"),ZOo=o(" \u2014 "),FX=a("a"),eVo=o("GPTNeoForSequenceClassification"),oVo=o(" (GPT Neo model)"),rVo=l(),gv=a("li"),C_e=a("strong"),tVo=o("gptj"),aVo=o(" \u2014 "),TX=a("a"),nVo=o("GPTJForSequenceClassification"),sVo=o(" (GPT-J model)"),lVo=l(),hv=a("li"),w_e=a("strong"),iVo=o("ibert"),dVo=o(" \u2014 "),MX=a("a"),cVo=o("IBertForSequenceClassification"),fVo=o(" (I-BERT model)"),mVo=l(),pv=a("li"),A_e=a("strong"),gVo=o("layoutlm"),hVo=o(" \u2014 "),EX=a("a"),pVo=o("LayoutLMForSequenceClassification"),_Vo=o(" (LayoutLM model)"),uVo=l(),_v=a("li"),L_e=a("strong"),bVo=o("layoutlmv2"),vVo=o(" \u2014 "),CX=a("a"),FVo=o("LayoutLMv2ForSequenceClassification"),TVo=o(" (LayoutLMv2 model)"),MVo=l(),uv=a("li"),y_e=a("strong"),EVo=o("layoutlmv3"),CVo=o(" \u2014 "),wX=a("a"),wVo=o("LayoutLMv3ForSequenceClassification"),AVo=o(" (LayoutLMv3 model)"),LVo=l(),bv=a("li"),x_e=a("strong"),yVo=o("led"),xVo=o(" \u2014 "),AX=a("a"),$Vo=o("LEDForSequenceClassification"),kVo=o(" (LED model)"),SVo=l(),vv=a("li"),$_e=a("strong"),RVo=o("longformer"),PVo=o(" \u2014 "),LX=a("a"),BVo=o("LongformerForSequenceClassification"),NVo=o(" (Longformer model)"),IVo=l(),Fv=a("li"),k_e=a("strong"),qVo=o("mbart"),jVo=o(" \u2014 "),yX=a("a"),DVo=o("MBartForSequenceClassification"),GVo=o(" (mBART model)"),OVo=l(),Tv=a("li"),S_e=a("strong"),VVo=o("megatron-bert"),XVo=o(" \u2014 "),xX=a("a"),zVo=o("MegatronBertForSequenceClassification"),QVo=o(" (Megatron-BERT model)"),WVo=l(),Mv=a("li"),R_e=a("strong"),HVo=o("mobilebert"),UVo=o(" \u2014 "),$X=a("a"),JVo=o("MobileBertForSequenceClassification"),YVo=o(" (MobileBERT model)"),KVo=l(),Ev=a("li"),P_e=a("strong"),ZVo=o("mpnet"),eXo=o(" \u2014 "),kX=a("a"),oXo=o("MPNetForSequenceClassification"),rXo=o(" (MPNet model)"),tXo=l(),Cv=a("li"),B_e=a("strong"),aXo=o("mvp"),nXo=o(" \u2014 "),SX=a("a"),sXo=o("MvpForSequenceClassification"),lXo=o(" (MVP model)"),iXo=l(),wv=a("li"),N_e=a("strong"),dXo=o("nezha"),cXo=o(" \u2014 "),RX=a("a"),fXo=o("NezhaForSequenceClassification"),mXo=o(" (Nezha model)"),gXo=l(),Av=a("li"),I_e=a("strong"),hXo=o("nystromformer"),pXo=o(" \u2014 "),PX=a("a"),_Xo=o("NystromformerForSequenceClassification"),uXo=o(" (Nystr\xF6mformer model)"),bXo=l(),Lv=a("li"),q_e=a("strong"),vXo=o("openai-gpt"),FXo=o(" \u2014 "),BX=a("a"),TXo=o("OpenAIGPTForSequenceClassification"),MXo=o(" (OpenAI GPT model)"),EXo=l(),yv=a("li"),j_e=a("strong"),CXo=o("perceiver"),wXo=o(" \u2014 "),NX=a("a"),AXo=o("PerceiverForSequenceClassification"),LXo=o(" (Perceiver model)"),yXo=l(),xv=a("li"),D_e=a("strong"),xXo=o("plbart"),$Xo=o(" \u2014 "),IX=a("a"),kXo=o("PLBartForSequenceClassification"),SXo=o(" (PLBart model)"),RXo=l(),$v=a("li"),G_e=a("strong"),PXo=o("qdqbert"),BXo=o(" \u2014 "),qX=a("a"),NXo=o("QDQBertForSequenceClassification"),IXo=o(" (QDQBert model)"),qXo=l(),kv=a("li"),O_e=a("strong"),jXo=o("reformer"),DXo=o(" \u2014 "),jX=a("a"),GXo=o("ReformerForSequenceClassification"),OXo=o(" (Reformer model)"),VXo=l(),Sv=a("li"),V_e=a("strong"),XXo=o("rembert"),zXo=o(" \u2014 "),DX=a("a"),QXo=o("RemBertForSequenceClassification"),WXo=o(" (RemBERT model)"),HXo=l(),Rv=a("li"),X_e=a("strong"),UXo=o("roberta"),JXo=o(" \u2014 "),GX=a("a"),YXo=o("RobertaForSequenceClassification"),KXo=o(" (RoBERTa model)"),ZXo=l(),Pv=a("li"),z_e=a("strong"),ezo=o("roformer"),ozo=o(" \u2014 "),OX=a("a"),rzo=o("RoFormerForSequenceClassification"),tzo=o(" (RoFormer model)"),azo=l(),Bv=a("li"),Q_e=a("strong"),nzo=o("squeezebert"),szo=o(" \u2014 "),VX=a("a"),lzo=o("SqueezeBertForSequenceClassification"),izo=o(" (SqueezeBERT model)"),dzo=l(),Nv=a("li"),W_e=a("strong"),czo=o("tapas"),fzo=o(" \u2014 "),XX=a("a"),mzo=o("TapasForSequenceClassification"),gzo=o(" (TAPAS model)"),hzo=l(),Iv=a("li"),H_e=a("strong"),pzo=o("transfo-xl"),_zo=o(" \u2014 "),zX=a("a"),uzo=o("TransfoXLForSequenceClassification"),bzo=o(" (Transformer-XL model)"),vzo=l(),qv=a("li"),U_e=a("strong"),Fzo=o("xlm"),Tzo=o(" \u2014 "),QX=a("a"),Mzo=o("XLMForSequenceClassification"),Ezo=o(" (XLM model)"),Czo=l(),jv=a("li"),J_e=a("strong"),wzo=o("xlm-roberta"),Azo=o(" \u2014 "),WX=a("a"),Lzo=o("XLMRobertaForSequenceClassification"),yzo=o(" (XLM-RoBERTa model)"),xzo=l(),Dv=a("li"),Y_e=a("strong"),$zo=o("xlm-roberta-xl"),kzo=o(" \u2014 "),HX=a("a"),Szo=o("XLMRobertaXLForSequenceClassification"),Rzo=o(" (XLM-RoBERTa-XL model)"),Pzo=l(),Gv=a("li"),K_e=a("strong"),Bzo=o("xlnet"),Nzo=o(" \u2014 "),UX=a("a"),Izo=o("XLNetForSequenceClassification"),qzo=o(" (XLNet model)"),jzo=l(),Ov=a("li"),Z_e=a("strong"),Dzo=o("yoso"),Gzo=o(" \u2014 "),JX=a("a"),Ozo=o("YosoForSequenceClassification"),Vzo=o(" (YOSO model)"),Xzo=l(),Vv=a("p"),zzo=o("The model is set in evaluation mode by default using "),eue=a("code"),Qzo=o("model.eval()"),Wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oue=a("code"),Hzo=o("model.train()"),Uzo=l(),F(Xv.$$.fragment),BXe=l(),sd=a("h2"),zv=a("a"),rue=a("span"),F(dL.$$.fragment),Jzo=l(),tue=a("span"),Yzo=o("AutoModelForMultipleChoice"),NXe=l(),No=a("div"),F(cL.$$.fragment),Kzo=l(),ld=a("p"),Zzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YX=a("a"),eQo=o("from_pretrained()"),oQo=o(" class method or the "),KX=a("a"),rQo=o("from_config()"),tQo=o(` class
method.`),aQo=l(),fL=a("p"),nQo=o("This class cannot be instantiated directly using "),aue=a("code"),sQo=o("__init__()"),lQo=o(" (throws an error)."),iQo=l(),ht=a("div"),F(mL.$$.fragment),dQo=l(),nue=a("p"),cQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fQo=l(),id=a("p"),mQo=o(`Note:
Loading a model from its configuration file does `),sue=a("strong"),gQo=o("not"),hQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),pQo=o("from_pretrained()"),_Qo=o(" to load the model weights."),uQo=l(),F(Qv.$$.fragment),bQo=l(),to=a("div"),F(gL.$$.fragment),vQo=l(),lue=a("p"),FQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TQo=l(),Oa=a("p"),MQo=o("The model class to instantiate is selected based on the "),iue=a("code"),EQo=o("model_type"),CQo=o(` property of the config object (either
passed as an argument or loaded from `),due=a("code"),wQo=o("pretrained_model_name_or_path"),AQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=a("code"),LQo=o("pretrained_model_name_or_path"),yQo=o(":"),xQo=l(),Z=a("ul"),Wv=a("li"),fue=a("strong"),$Qo=o("albert"),kQo=o(" \u2014 "),ez=a("a"),SQo=o("AlbertForMultipleChoice"),RQo=o(" (ALBERT model)"),PQo=l(),Hv=a("li"),mue=a("strong"),BQo=o("bert"),NQo=o(" \u2014 "),oz=a("a"),IQo=o("BertForMultipleChoice"),qQo=o(" (BERT model)"),jQo=l(),Uv=a("li"),gue=a("strong"),DQo=o("big_bird"),GQo=o(" \u2014 "),rz=a("a"),OQo=o("BigBirdForMultipleChoice"),VQo=o(" (BigBird model)"),XQo=l(),Jv=a("li"),hue=a("strong"),zQo=o("camembert"),QQo=o(" \u2014 "),tz=a("a"),WQo=o("CamembertForMultipleChoice"),HQo=o(" (CamemBERT model)"),UQo=l(),Yv=a("li"),pue=a("strong"),JQo=o("canine"),YQo=o(" \u2014 "),az=a("a"),KQo=o("CanineForMultipleChoice"),ZQo=o(" (CANINE model)"),eWo=l(),Kv=a("li"),_ue=a("strong"),oWo=o("convbert"),rWo=o(" \u2014 "),nz=a("a"),tWo=o("ConvBertForMultipleChoice"),aWo=o(" (ConvBERT model)"),nWo=l(),Zv=a("li"),uue=a("strong"),sWo=o("data2vec-text"),lWo=o(" \u2014 "),sz=a("a"),iWo=o("Data2VecTextForMultipleChoice"),dWo=o(" (Data2VecText model)"),cWo=l(),e0=a("li"),bue=a("strong"),fWo=o("deberta-v2"),mWo=o(" \u2014 "),lz=a("a"),gWo=o("DebertaV2ForMultipleChoice"),hWo=o(" (DeBERTa-v2 model)"),pWo=l(),o0=a("li"),vue=a("strong"),_Wo=o("distilbert"),uWo=o(" \u2014 "),iz=a("a"),bWo=o("DistilBertForMultipleChoice"),vWo=o(" (DistilBERT model)"),FWo=l(),r0=a("li"),Fue=a("strong"),TWo=o("electra"),MWo=o(" \u2014 "),dz=a("a"),EWo=o("ElectraForMultipleChoice"),CWo=o(" (ELECTRA model)"),wWo=l(),t0=a("li"),Tue=a("strong"),AWo=o("flaubert"),LWo=o(" \u2014 "),cz=a("a"),yWo=o("FlaubertForMultipleChoice"),xWo=o(" (FlauBERT model)"),$Wo=l(),a0=a("li"),Mue=a("strong"),kWo=o("fnet"),SWo=o(" \u2014 "),fz=a("a"),RWo=o("FNetForMultipleChoice"),PWo=o(" (FNet model)"),BWo=l(),n0=a("li"),Eue=a("strong"),NWo=o("funnel"),IWo=o(" \u2014 "),mz=a("a"),qWo=o("FunnelForMultipleChoice"),jWo=o(" (Funnel Transformer model)"),DWo=l(),s0=a("li"),Cue=a("strong"),GWo=o("ibert"),OWo=o(" \u2014 "),gz=a("a"),VWo=o("IBertForMultipleChoice"),XWo=o(" (I-BERT model)"),zWo=l(),l0=a("li"),wue=a("strong"),QWo=o("longformer"),WWo=o(" \u2014 "),hz=a("a"),HWo=o("LongformerForMultipleChoice"),UWo=o(" (Longformer model)"),JWo=l(),i0=a("li"),Aue=a("strong"),YWo=o("megatron-bert"),KWo=o(" \u2014 "),pz=a("a"),ZWo=o("MegatronBertForMultipleChoice"),eHo=o(" (Megatron-BERT model)"),oHo=l(),d0=a("li"),Lue=a("strong"),rHo=o("mobilebert"),tHo=o(" \u2014 "),_z=a("a"),aHo=o("MobileBertForMultipleChoice"),nHo=o(" (MobileBERT model)"),sHo=l(),c0=a("li"),yue=a("strong"),lHo=o("mpnet"),iHo=o(" \u2014 "),uz=a("a"),dHo=o("MPNetForMultipleChoice"),cHo=o(" (MPNet model)"),fHo=l(),f0=a("li"),xue=a("strong"),mHo=o("nezha"),gHo=o(" \u2014 "),bz=a("a"),hHo=o("NezhaForMultipleChoice"),pHo=o(" (Nezha model)"),_Ho=l(),m0=a("li"),$ue=a("strong"),uHo=o("nystromformer"),bHo=o(" \u2014 "),vz=a("a"),vHo=o("NystromformerForMultipleChoice"),FHo=o(" (Nystr\xF6mformer model)"),THo=l(),g0=a("li"),kue=a("strong"),MHo=o("qdqbert"),EHo=o(" \u2014 "),Fz=a("a"),CHo=o("QDQBertForMultipleChoice"),wHo=o(" (QDQBert model)"),AHo=l(),h0=a("li"),Sue=a("strong"),LHo=o("rembert"),yHo=o(" \u2014 "),Tz=a("a"),xHo=o("RemBertForMultipleChoice"),$Ho=o(" (RemBERT model)"),kHo=l(),p0=a("li"),Rue=a("strong"),SHo=o("roberta"),RHo=o(" \u2014 "),Mz=a("a"),PHo=o("RobertaForMultipleChoice"),BHo=o(" (RoBERTa model)"),NHo=l(),_0=a("li"),Pue=a("strong"),IHo=o("roformer"),qHo=o(" \u2014 "),Ez=a("a"),jHo=o("RoFormerForMultipleChoice"),DHo=o(" (RoFormer model)"),GHo=l(),u0=a("li"),Bue=a("strong"),OHo=o("squeezebert"),VHo=o(" \u2014 "),Cz=a("a"),XHo=o("SqueezeBertForMultipleChoice"),zHo=o(" (SqueezeBERT model)"),QHo=l(),b0=a("li"),Nue=a("strong"),WHo=o("xlm"),HHo=o(" \u2014 "),wz=a("a"),UHo=o("XLMForMultipleChoice"),JHo=o(" (XLM model)"),YHo=l(),v0=a("li"),Iue=a("strong"),KHo=o("xlm-roberta"),ZHo=o(" \u2014 "),Az=a("a"),eUo=o("XLMRobertaForMultipleChoice"),oUo=o(" (XLM-RoBERTa model)"),rUo=l(),F0=a("li"),que=a("strong"),tUo=o("xlm-roberta-xl"),aUo=o(" \u2014 "),Lz=a("a"),nUo=o("XLMRobertaXLForMultipleChoice"),sUo=o(" (XLM-RoBERTa-XL model)"),lUo=l(),T0=a("li"),jue=a("strong"),iUo=o("xlnet"),dUo=o(" \u2014 "),yz=a("a"),cUo=o("XLNetForMultipleChoice"),fUo=o(" (XLNet model)"),mUo=l(),M0=a("li"),Due=a("strong"),gUo=o("yoso"),hUo=o(" \u2014 "),xz=a("a"),pUo=o("YosoForMultipleChoice"),_Uo=o(" (YOSO model)"),uUo=l(),E0=a("p"),bUo=o("The model is set in evaluation mode by default using "),Gue=a("code"),vUo=o("model.eval()"),FUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),TUo=o("model.train()"),MUo=l(),F(C0.$$.fragment),IXe=l(),dd=a("h2"),w0=a("a"),Vue=a("span"),F(hL.$$.fragment),EUo=l(),Xue=a("span"),CUo=o("AutoModelForNextSentencePrediction"),qXe=l(),Io=a("div"),F(pL.$$.fragment),wUo=l(),cd=a("p"),AUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$z=a("a"),LUo=o("from_pretrained()"),yUo=o(" class method or the "),kz=a("a"),xUo=o("from_config()"),$Uo=o(` class
method.`),kUo=l(),_L=a("p"),SUo=o("This class cannot be instantiated directly using "),zue=a("code"),RUo=o("__init__()"),PUo=o(" (throws an error)."),BUo=l(),pt=a("div"),F(uL.$$.fragment),NUo=l(),Que=a("p"),IUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qUo=l(),fd=a("p"),jUo=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),DUo=o("not"),GUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),OUo=o("from_pretrained()"),VUo=o(" to load the model weights."),XUo=l(),F(A0.$$.fragment),zUo=l(),ao=a("div"),F(bL.$$.fragment),QUo=l(),Hue=a("p"),WUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HUo=l(),Va=a("p"),UUo=o("The model class to instantiate is selected based on the "),Uue=a("code"),JUo=o("model_type"),YUo=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),KUo=o("pretrained_model_name_or_path"),ZUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),eJo=o("pretrained_model_name_or_path"),oJo=o(":"),rJo=l(),qo=a("ul"),L0=a("li"),Kue=a("strong"),tJo=o("bert"),aJo=o(" \u2014 "),Rz=a("a"),nJo=o("BertForNextSentencePrediction"),sJo=o(" (BERT model)"),lJo=l(),y0=a("li"),Zue=a("strong"),iJo=o("fnet"),dJo=o(" \u2014 "),Pz=a("a"),cJo=o("FNetForNextSentencePrediction"),fJo=o(" (FNet model)"),mJo=l(),x0=a("li"),e1e=a("strong"),gJo=o("megatron-bert"),hJo=o(" \u2014 "),Bz=a("a"),pJo=o("MegatronBertForNextSentencePrediction"),_Jo=o(" (Megatron-BERT model)"),uJo=l(),$0=a("li"),o1e=a("strong"),bJo=o("mobilebert"),vJo=o(" \u2014 "),Nz=a("a"),FJo=o("MobileBertForNextSentencePrediction"),TJo=o(" (MobileBERT model)"),MJo=l(),k0=a("li"),r1e=a("strong"),EJo=o("nezha"),CJo=o(" \u2014 "),Iz=a("a"),wJo=o("NezhaForNextSentencePrediction"),AJo=o(" (Nezha model)"),LJo=l(),S0=a("li"),t1e=a("strong"),yJo=o("qdqbert"),xJo=o(" \u2014 "),qz=a("a"),$Jo=o("QDQBertForNextSentencePrediction"),kJo=o(" (QDQBert model)"),SJo=l(),R0=a("p"),RJo=o("The model is set in evaluation mode by default using "),a1e=a("code"),PJo=o("model.eval()"),BJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=a("code"),NJo=o("model.train()"),IJo=l(),F(P0.$$.fragment),jXe=l(),md=a("h2"),B0=a("a"),s1e=a("span"),F(vL.$$.fragment),qJo=l(),l1e=a("span"),jJo=o("AutoModelForTokenClassification"),DXe=l(),jo=a("div"),F(FL.$$.fragment),DJo=l(),gd=a("p"),GJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jz=a("a"),OJo=o("from_pretrained()"),VJo=o(" class method or the "),Dz=a("a"),XJo=o("from_config()"),zJo=o(` class
method.`),QJo=l(),TL=a("p"),WJo=o("This class cannot be instantiated directly using "),i1e=a("code"),HJo=o("__init__()"),UJo=o(" (throws an error)."),JJo=l(),_t=a("div"),F(ML.$$.fragment),YJo=l(),d1e=a("p"),KJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ZJo=l(),hd=a("p"),eYo=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),oYo=o("not"),rYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),tYo=o("from_pretrained()"),aYo=o(" to load the model weights."),nYo=l(),F(N0.$$.fragment),sYo=l(),no=a("div"),F(EL.$$.fragment),lYo=l(),f1e=a("p"),iYo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dYo=l(),Xa=a("p"),cYo=o("The model class to instantiate is selected based on the "),m1e=a("code"),fYo=o("model_type"),mYo=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),gYo=o("pretrained_model_name_or_path"),hYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),pYo=o("pretrained_model_name_or_path"),_Yo=o(":"),uYo=l(),U=a("ul"),I0=a("li"),p1e=a("strong"),bYo=o("albert"),vYo=o(" \u2014 "),Oz=a("a"),FYo=o("AlbertForTokenClassification"),TYo=o(" (ALBERT model)"),MYo=l(),q0=a("li"),_1e=a("strong"),EYo=o("bert"),CYo=o(" \u2014 "),Vz=a("a"),wYo=o("BertForTokenClassification"),AYo=o(" (BERT model)"),LYo=l(),j0=a("li"),u1e=a("strong"),yYo=o("big_bird"),xYo=o(" \u2014 "),Xz=a("a"),$Yo=o("BigBirdForTokenClassification"),kYo=o(" (BigBird model)"),SYo=l(),D0=a("li"),b1e=a("strong"),RYo=o("bloom"),PYo=o(" \u2014 "),zz=a("a"),BYo=o("BloomForTokenClassification"),NYo=o(" (BLOOM model)"),IYo=l(),G0=a("li"),v1e=a("strong"),qYo=o("camembert"),jYo=o(" \u2014 "),Qz=a("a"),DYo=o("CamembertForTokenClassification"),GYo=o(" (CamemBERT model)"),OYo=l(),O0=a("li"),F1e=a("strong"),VYo=o("canine"),XYo=o(" \u2014 "),Wz=a("a"),zYo=o("CanineForTokenClassification"),QYo=o(" (CANINE model)"),WYo=l(),V0=a("li"),T1e=a("strong"),HYo=o("convbert"),UYo=o(" \u2014 "),Hz=a("a"),JYo=o("ConvBertForTokenClassification"),YYo=o(" (ConvBERT model)"),KYo=l(),X0=a("li"),M1e=a("strong"),ZYo=o("data2vec-text"),eKo=o(" \u2014 "),Uz=a("a"),oKo=o("Data2VecTextForTokenClassification"),rKo=o(" (Data2VecText model)"),tKo=l(),z0=a("li"),E1e=a("strong"),aKo=o("deberta"),nKo=o(" \u2014 "),Jz=a("a"),sKo=o("DebertaForTokenClassification"),lKo=o(" (DeBERTa model)"),iKo=l(),Q0=a("li"),C1e=a("strong"),dKo=o("deberta-v2"),cKo=o(" \u2014 "),Yz=a("a"),fKo=o("DebertaV2ForTokenClassification"),mKo=o(" (DeBERTa-v2 model)"),gKo=l(),W0=a("li"),w1e=a("strong"),hKo=o("distilbert"),pKo=o(" \u2014 "),Kz=a("a"),_Ko=o("DistilBertForTokenClassification"),uKo=o(" (DistilBERT model)"),bKo=l(),H0=a("li"),A1e=a("strong"),vKo=o("electra"),FKo=o(" \u2014 "),Zz=a("a"),TKo=o("ElectraForTokenClassification"),MKo=o(" (ELECTRA model)"),EKo=l(),U0=a("li"),L1e=a("strong"),CKo=o("flaubert"),wKo=o(" \u2014 "),eQ=a("a"),AKo=o("FlaubertForTokenClassification"),LKo=o(" (FlauBERT model)"),yKo=l(),J0=a("li"),y1e=a("strong"),xKo=o("fnet"),$Ko=o(" \u2014 "),oQ=a("a"),kKo=o("FNetForTokenClassification"),SKo=o(" (FNet model)"),RKo=l(),Y0=a("li"),x1e=a("strong"),PKo=o("funnel"),BKo=o(" \u2014 "),rQ=a("a"),NKo=o("FunnelForTokenClassification"),IKo=o(" (Funnel Transformer model)"),qKo=l(),K0=a("li"),$1e=a("strong"),jKo=o("gpt2"),DKo=o(" \u2014 "),tQ=a("a"),GKo=o("GPT2ForTokenClassification"),OKo=o(" (OpenAI GPT-2 model)"),VKo=l(),Z0=a("li"),k1e=a("strong"),XKo=o("ibert"),zKo=o(" \u2014 "),aQ=a("a"),QKo=o("IBertForTokenClassification"),WKo=o(" (I-BERT model)"),HKo=l(),eF=a("li"),S1e=a("strong"),UKo=o("layoutlm"),JKo=o(" \u2014 "),nQ=a("a"),YKo=o("LayoutLMForTokenClassification"),KKo=o(" (LayoutLM model)"),ZKo=l(),oF=a("li"),R1e=a("strong"),eZo=o("layoutlmv2"),oZo=o(" \u2014 "),sQ=a("a"),rZo=o("LayoutLMv2ForTokenClassification"),tZo=o(" (LayoutLMv2 model)"),aZo=l(),rF=a("li"),P1e=a("strong"),nZo=o("layoutlmv3"),sZo=o(" \u2014 "),lQ=a("a"),lZo=o("LayoutLMv3ForTokenClassification"),iZo=o(" (LayoutLMv3 model)"),dZo=l(),tF=a("li"),B1e=a("strong"),cZo=o("longformer"),fZo=o(" \u2014 "),iQ=a("a"),mZo=o("LongformerForTokenClassification"),gZo=o(" (Longformer model)"),hZo=l(),aF=a("li"),N1e=a("strong"),pZo=o("megatron-bert"),_Zo=o(" \u2014 "),dQ=a("a"),uZo=o("MegatronBertForTokenClassification"),bZo=o(" (Megatron-BERT model)"),vZo=l(),nF=a("li"),I1e=a("strong"),FZo=o("mobilebert"),TZo=o(" \u2014 "),cQ=a("a"),MZo=o("MobileBertForTokenClassification"),EZo=o(" (MobileBERT model)"),CZo=l(),sF=a("li"),q1e=a("strong"),wZo=o("mpnet"),AZo=o(" \u2014 "),fQ=a("a"),LZo=o("MPNetForTokenClassification"),yZo=o(" (MPNet model)"),xZo=l(),lF=a("li"),j1e=a("strong"),$Zo=o("nezha"),kZo=o(" \u2014 "),mQ=a("a"),SZo=o("NezhaForTokenClassification"),RZo=o(" (Nezha model)"),PZo=l(),iF=a("li"),D1e=a("strong"),BZo=o("nystromformer"),NZo=o(" \u2014 "),gQ=a("a"),IZo=o("NystromformerForTokenClassification"),qZo=o(" (Nystr\xF6mformer model)"),jZo=l(),dF=a("li"),G1e=a("strong"),DZo=o("qdqbert"),GZo=o(" \u2014 "),hQ=a("a"),OZo=o("QDQBertForTokenClassification"),VZo=o(" (QDQBert model)"),XZo=l(),cF=a("li"),O1e=a("strong"),zZo=o("rembert"),QZo=o(" \u2014 "),pQ=a("a"),WZo=o("RemBertForTokenClassification"),HZo=o(" (RemBERT model)"),UZo=l(),fF=a("li"),V1e=a("strong"),JZo=o("roberta"),YZo=o(" \u2014 "),_Q=a("a"),KZo=o("RobertaForTokenClassification"),ZZo=o(" (RoBERTa model)"),eer=l(),mF=a("li"),X1e=a("strong"),oer=o("roformer"),rer=o(" \u2014 "),uQ=a("a"),ter=o("RoFormerForTokenClassification"),aer=o(" (RoFormer model)"),ner=l(),gF=a("li"),z1e=a("strong"),ser=o("squeezebert"),ler=o(" \u2014 "),bQ=a("a"),ier=o("SqueezeBertForTokenClassification"),der=o(" (SqueezeBERT model)"),cer=l(),hF=a("li"),Q1e=a("strong"),fer=o("xlm"),mer=o(" \u2014 "),vQ=a("a"),ger=o("XLMForTokenClassification"),her=o(" (XLM model)"),per=l(),pF=a("li"),W1e=a("strong"),_er=o("xlm-roberta"),uer=o(" \u2014 "),FQ=a("a"),ber=o("XLMRobertaForTokenClassification"),ver=o(" (XLM-RoBERTa model)"),Fer=l(),_F=a("li"),H1e=a("strong"),Ter=o("xlm-roberta-xl"),Mer=o(" \u2014 "),TQ=a("a"),Eer=o("XLMRobertaXLForTokenClassification"),Cer=o(" (XLM-RoBERTa-XL model)"),wer=l(),uF=a("li"),U1e=a("strong"),Aer=o("xlnet"),Ler=o(" \u2014 "),MQ=a("a"),yer=o("XLNetForTokenClassification"),xer=o(" (XLNet model)"),$er=l(),bF=a("li"),J1e=a("strong"),ker=o("yoso"),Ser=o(" \u2014 "),EQ=a("a"),Rer=o("YosoForTokenClassification"),Per=o(" (YOSO model)"),Ber=l(),vF=a("p"),Ner=o("The model is set in evaluation mode by default using "),Y1e=a("code"),Ier=o("model.eval()"),qer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=a("code"),jer=o("model.train()"),Der=l(),F(FF.$$.fragment),GXe=l(),pd=a("h2"),TF=a("a"),Z1e=a("span"),F(CL.$$.fragment),Ger=l(),e2e=a("span"),Oer=o("AutoModelForQuestionAnswering"),OXe=l(),Do=a("div"),F(wL.$$.fragment),Ver=l(),_d=a("p"),Xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CQ=a("a"),zer=o("from_pretrained()"),Qer=o(" class method or the "),wQ=a("a"),Wer=o("from_config()"),Her=o(` class
method.`),Uer=l(),AL=a("p"),Jer=o("This class cannot be instantiated directly using "),o2e=a("code"),Yer=o("__init__()"),Ker=o(" (throws an error)."),Zer=l(),ut=a("div"),F(LL.$$.fragment),eor=l(),r2e=a("p"),oor=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ror=l(),ud=a("p"),tor=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),aor=o("not"),nor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=a("a"),sor=o("from_pretrained()"),lor=o(" to load the model weights."),ior=l(),F(MF.$$.fragment),dor=l(),so=a("div"),F(yL.$$.fragment),cor=l(),a2e=a("p"),mor=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gor=l(),za=a("p"),hor=o("The model class to instantiate is selected based on the "),n2e=a("code"),por=o("model_type"),_or=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),uor=o("pretrained_model_name_or_path"),bor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),vor=o("pretrained_model_name_or_path"),For=o(":"),Tor=l(),V=a("ul"),EF=a("li"),i2e=a("strong"),Mor=o("albert"),Eor=o(" \u2014 "),LQ=a("a"),Cor=o("AlbertForQuestionAnswering"),wor=o(" (ALBERT model)"),Aor=l(),CF=a("li"),d2e=a("strong"),Lor=o("bart"),yor=o(" \u2014 "),yQ=a("a"),xor=o("BartForQuestionAnswering"),$or=o(" (BART model)"),kor=l(),wF=a("li"),c2e=a("strong"),Sor=o("bert"),Ror=o(" \u2014 "),xQ=a("a"),Por=o("BertForQuestionAnswering"),Bor=o(" (BERT model)"),Nor=l(),AF=a("li"),f2e=a("strong"),Ior=o("big_bird"),qor=o(" \u2014 "),$Q=a("a"),jor=o("BigBirdForQuestionAnswering"),Dor=o(" (BigBird model)"),Gor=l(),LF=a("li"),m2e=a("strong"),Oor=o("bigbird_pegasus"),Vor=o(" \u2014 "),kQ=a("a"),Xor=o("BigBirdPegasusForQuestionAnswering"),zor=o(" (BigBird-Pegasus model)"),Qor=l(),yF=a("li"),g2e=a("strong"),Wor=o("camembert"),Hor=o(" \u2014 "),SQ=a("a"),Uor=o("CamembertForQuestionAnswering"),Jor=o(" (CamemBERT model)"),Yor=l(),xF=a("li"),h2e=a("strong"),Kor=o("canine"),Zor=o(" \u2014 "),RQ=a("a"),err=o("CanineForQuestionAnswering"),orr=o(" (CANINE model)"),rrr=l(),$F=a("li"),p2e=a("strong"),trr=o("convbert"),arr=o(" \u2014 "),PQ=a("a"),nrr=o("ConvBertForQuestionAnswering"),srr=o(" (ConvBERT model)"),lrr=l(),kF=a("li"),_2e=a("strong"),irr=o("data2vec-text"),drr=o(" \u2014 "),BQ=a("a"),crr=o("Data2VecTextForQuestionAnswering"),frr=o(" (Data2VecText model)"),mrr=l(),SF=a("li"),u2e=a("strong"),grr=o("deberta"),hrr=o(" \u2014 "),NQ=a("a"),prr=o("DebertaForQuestionAnswering"),_rr=o(" (DeBERTa model)"),urr=l(),RF=a("li"),b2e=a("strong"),brr=o("deberta-v2"),vrr=o(" \u2014 "),IQ=a("a"),Frr=o("DebertaV2ForQuestionAnswering"),Trr=o(" (DeBERTa-v2 model)"),Mrr=l(),PF=a("li"),v2e=a("strong"),Err=o("distilbert"),Crr=o(" \u2014 "),qQ=a("a"),wrr=o("DistilBertForQuestionAnswering"),Arr=o(" (DistilBERT model)"),Lrr=l(),BF=a("li"),F2e=a("strong"),yrr=o("electra"),xrr=o(" \u2014 "),jQ=a("a"),$rr=o("ElectraForQuestionAnswering"),krr=o(" (ELECTRA model)"),Srr=l(),NF=a("li"),T2e=a("strong"),Rrr=o("flaubert"),Prr=o(" \u2014 "),DQ=a("a"),Brr=o("FlaubertForQuestionAnsweringSimple"),Nrr=o(" (FlauBERT model)"),Irr=l(),IF=a("li"),M2e=a("strong"),qrr=o("fnet"),jrr=o(" \u2014 "),GQ=a("a"),Drr=o("FNetForQuestionAnswering"),Grr=o(" (FNet model)"),Orr=l(),qF=a("li"),E2e=a("strong"),Vrr=o("funnel"),Xrr=o(" \u2014 "),OQ=a("a"),zrr=o("FunnelForQuestionAnswering"),Qrr=o(" (Funnel Transformer model)"),Wrr=l(),jF=a("li"),C2e=a("strong"),Hrr=o("gptj"),Urr=o(" \u2014 "),VQ=a("a"),Jrr=o("GPTJForQuestionAnswering"),Yrr=o(" (GPT-J model)"),Krr=l(),DF=a("li"),w2e=a("strong"),Zrr=o("ibert"),etr=o(" \u2014 "),XQ=a("a"),otr=o("IBertForQuestionAnswering"),rtr=o(" (I-BERT model)"),ttr=l(),GF=a("li"),A2e=a("strong"),atr=o("layoutlmv2"),ntr=o(" \u2014 "),zQ=a("a"),str=o("LayoutLMv2ForQuestionAnswering"),ltr=o(" (LayoutLMv2 model)"),itr=l(),OF=a("li"),L2e=a("strong"),dtr=o("layoutlmv3"),ctr=o(" \u2014 "),QQ=a("a"),ftr=o("LayoutLMv3ForQuestionAnswering"),mtr=o(" (LayoutLMv3 model)"),gtr=l(),VF=a("li"),y2e=a("strong"),htr=o("led"),ptr=o(" \u2014 "),WQ=a("a"),_tr=o("LEDForQuestionAnswering"),utr=o(" (LED model)"),btr=l(),XF=a("li"),x2e=a("strong"),vtr=o("longformer"),Ftr=o(" \u2014 "),HQ=a("a"),Ttr=o("LongformerForQuestionAnswering"),Mtr=o(" (Longformer model)"),Etr=l(),zF=a("li"),$2e=a("strong"),Ctr=o("lxmert"),wtr=o(" \u2014 "),UQ=a("a"),Atr=o("LxmertForQuestionAnswering"),Ltr=o(" (LXMERT model)"),ytr=l(),QF=a("li"),k2e=a("strong"),xtr=o("mbart"),$tr=o(" \u2014 "),JQ=a("a"),ktr=o("MBartForQuestionAnswering"),Str=o(" (mBART model)"),Rtr=l(),WF=a("li"),S2e=a("strong"),Ptr=o("megatron-bert"),Btr=o(" \u2014 "),YQ=a("a"),Ntr=o("MegatronBertForQuestionAnswering"),Itr=o(" (Megatron-BERT model)"),qtr=l(),HF=a("li"),R2e=a("strong"),jtr=o("mobilebert"),Dtr=o(" \u2014 "),KQ=a("a"),Gtr=o("MobileBertForQuestionAnswering"),Otr=o(" (MobileBERT model)"),Vtr=l(),UF=a("li"),P2e=a("strong"),Xtr=o("mpnet"),ztr=o(" \u2014 "),ZQ=a("a"),Qtr=o("MPNetForQuestionAnswering"),Wtr=o(" (MPNet model)"),Htr=l(),JF=a("li"),B2e=a("strong"),Utr=o("mvp"),Jtr=o(" \u2014 "),eW=a("a"),Ytr=o("MvpForQuestionAnswering"),Ktr=o(" (MVP model)"),Ztr=l(),YF=a("li"),N2e=a("strong"),ear=o("nezha"),oar=o(" \u2014 "),oW=a("a"),rar=o("NezhaForQuestionAnswering"),tar=o(" (Nezha model)"),aar=l(),KF=a("li"),I2e=a("strong"),nar=o("nystromformer"),sar=o(" \u2014 "),rW=a("a"),lar=o("NystromformerForQuestionAnswering"),iar=o(" (Nystr\xF6mformer model)"),dar=l(),ZF=a("li"),q2e=a("strong"),car=o("qdqbert"),far=o(" \u2014 "),tW=a("a"),mar=o("QDQBertForQuestionAnswering"),gar=o(" (QDQBert model)"),har=l(),eT=a("li"),j2e=a("strong"),par=o("reformer"),_ar=o(" \u2014 "),aW=a("a"),uar=o("ReformerForQuestionAnswering"),bar=o(" (Reformer model)"),Far=l(),oT=a("li"),D2e=a("strong"),Tar=o("rembert"),Mar=o(" \u2014 "),nW=a("a"),Ear=o("RemBertForQuestionAnswering"),Car=o(" (RemBERT model)"),war=l(),rT=a("li"),G2e=a("strong"),Aar=o("roberta"),Lar=o(" \u2014 "),sW=a("a"),yar=o("RobertaForQuestionAnswering"),xar=o(" (RoBERTa model)"),$ar=l(),tT=a("li"),O2e=a("strong"),kar=o("roformer"),Sar=o(" \u2014 "),lW=a("a"),Rar=o("RoFormerForQuestionAnswering"),Par=o(" (RoFormer model)"),Bar=l(),aT=a("li"),V2e=a("strong"),Nar=o("splinter"),Iar=o(" \u2014 "),iW=a("a"),qar=o("SplinterForQuestionAnswering"),jar=o(" (Splinter model)"),Dar=l(),nT=a("li"),X2e=a("strong"),Gar=o("squeezebert"),Oar=o(" \u2014 "),dW=a("a"),Var=o("SqueezeBertForQuestionAnswering"),Xar=o(" (SqueezeBERT model)"),zar=l(),sT=a("li"),z2e=a("strong"),Qar=o("xlm"),War=o(" \u2014 "),cW=a("a"),Har=o("XLMForQuestionAnsweringSimple"),Uar=o(" (XLM model)"),Jar=l(),lT=a("li"),Q2e=a("strong"),Yar=o("xlm-roberta"),Kar=o(" \u2014 "),fW=a("a"),Zar=o("XLMRobertaForQuestionAnswering"),enr=o(" (XLM-RoBERTa model)"),onr=l(),iT=a("li"),W2e=a("strong"),rnr=o("xlm-roberta-xl"),tnr=o(" \u2014 "),mW=a("a"),anr=o("XLMRobertaXLForQuestionAnswering"),nnr=o(" (XLM-RoBERTa-XL model)"),snr=l(),dT=a("li"),H2e=a("strong"),lnr=o("xlnet"),inr=o(" \u2014 "),gW=a("a"),dnr=o("XLNetForQuestionAnsweringSimple"),cnr=o(" (XLNet model)"),fnr=l(),cT=a("li"),U2e=a("strong"),mnr=o("yoso"),gnr=o(" \u2014 "),hW=a("a"),hnr=o("YosoForQuestionAnswering"),pnr=o(" (YOSO model)"),_nr=l(),fT=a("p"),unr=o("The model is set in evaluation mode by default using "),J2e=a("code"),bnr=o("model.eval()"),vnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y2e=a("code"),Fnr=o("model.train()"),Tnr=l(),F(mT.$$.fragment),VXe=l(),bd=a("h2"),gT=a("a"),K2e=a("span"),F(xL.$$.fragment),Mnr=l(),Z2e=a("span"),Enr=o("AutoModelForTableQuestionAnswering"),XXe=l(),Go=a("div"),F($L.$$.fragment),Cnr=l(),vd=a("p"),wnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pW=a("a"),Anr=o("from_pretrained()"),Lnr=o(" class method or the "),_W=a("a"),ynr=o("from_config()"),xnr=o(` class
method.`),$nr=l(),kL=a("p"),knr=o("This class cannot be instantiated directly using "),ebe=a("code"),Snr=o("__init__()"),Rnr=o(" (throws an error)."),Pnr=l(),bt=a("div"),F(SL.$$.fragment),Bnr=l(),obe=a("p"),Nnr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Inr=l(),Fd=a("p"),qnr=o(`Note:
Loading a model from its configuration file does `),rbe=a("strong"),jnr=o("not"),Dnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),Gnr=o("from_pretrained()"),Onr=o(" to load the model weights."),Vnr=l(),F(hT.$$.fragment),Xnr=l(),lo=a("div"),F(RL.$$.fragment),znr=l(),tbe=a("p"),Qnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wnr=l(),Qa=a("p"),Hnr=o("The model class to instantiate is selected based on the "),abe=a("code"),Unr=o("model_type"),Jnr=o(` property of the config object (either
passed as an argument or loaded from `),nbe=a("code"),Ynr=o("pretrained_model_name_or_path"),Knr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=a("code"),Znr=o("pretrained_model_name_or_path"),esr=o(":"),osr=l(),lbe=a("ul"),pT=a("li"),ibe=a("strong"),rsr=o("tapas"),tsr=o(" \u2014 "),bW=a("a"),asr=o("TapasForQuestionAnswering"),nsr=o(" (TAPAS model)"),ssr=l(),_T=a("p"),lsr=o("The model is set in evaluation mode by default using "),dbe=a("code"),isr=o("model.eval()"),dsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=a("code"),csr=o("model.train()"),fsr=l(),F(uT.$$.fragment),zXe=l(),Td=a("h2"),bT=a("a"),fbe=a("span"),F(PL.$$.fragment),msr=l(),mbe=a("span"),gsr=o("AutoModelForImageClassification"),QXe=l(),Oo=a("div"),F(BL.$$.fragment),hsr=l(),Md=a("p"),psr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vW=a("a"),_sr=o("from_pretrained()"),usr=o(" class method or the "),FW=a("a"),bsr=o("from_config()"),vsr=o(` class
method.`),Fsr=l(),NL=a("p"),Tsr=o("This class cannot be instantiated directly using "),gbe=a("code"),Msr=o("__init__()"),Esr=o(" (throws an error)."),Csr=l(),vt=a("div"),F(IL.$$.fragment),wsr=l(),hbe=a("p"),Asr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lsr=l(),Ed=a("p"),ysr=o(`Note:
Loading a model from its configuration file does `),pbe=a("strong"),xsr=o("not"),$sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),ksr=o("from_pretrained()"),Ssr=o(" to load the model weights."),Rsr=l(),F(vT.$$.fragment),Psr=l(),io=a("div"),F(qL.$$.fragment),Bsr=l(),_be=a("p"),Nsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Isr=l(),Wa=a("p"),qsr=o("The model class to instantiate is selected based on the "),ube=a("code"),jsr=o("model_type"),Dsr=o(` property of the config object (either
passed as an argument or loaded from `),bbe=a("code"),Gsr=o("pretrained_model_name_or_path"),Osr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=a("code"),Vsr=o("pretrained_model_name_or_path"),Xsr=o(":"),zsr=l(),ve=a("ul"),FT=a("li"),Fbe=a("strong"),Qsr=o("beit"),Wsr=o(" \u2014 "),MW=a("a"),Hsr=o("BeitForImageClassification"),Usr=o(" (BEiT model)"),Jsr=l(),TT=a("li"),Tbe=a("strong"),Ysr=o("convnext"),Ksr=o(" \u2014 "),EW=a("a"),Zsr=o("ConvNextForImageClassification"),elr=o(" (ConvNeXT model)"),olr=l(),MT=a("li"),Mbe=a("strong"),rlr=o("cvt"),tlr=o(" \u2014 "),CW=a("a"),alr=o("CvtForImageClassification"),nlr=o(" (CvT model)"),slr=l(),ET=a("li"),Ebe=a("strong"),llr=o("data2vec-vision"),ilr=o(" \u2014 "),wW=a("a"),dlr=o("Data2VecVisionForImageClassification"),clr=o(" (Data2VecVision model)"),flr=l(),Us=a("li"),Cbe=a("strong"),mlr=o("deit"),glr=o(" \u2014 "),AW=a("a"),hlr=o("DeiTForImageClassification"),plr=o(" or "),LW=a("a"),_lr=o("DeiTForImageClassificationWithTeacher"),ulr=o(" (DeiT model)"),blr=l(),CT=a("li"),wbe=a("strong"),vlr=o("imagegpt"),Flr=o(" \u2014 "),yW=a("a"),Tlr=o("ImageGPTForImageClassification"),Mlr=o(" (ImageGPT model)"),Elr=l(),Js=a("li"),Abe=a("strong"),Clr=o("levit"),wlr=o(" \u2014 "),xW=a("a"),Alr=o("LevitForImageClassification"),Llr=o(" or "),$W=a("a"),ylr=o("LevitForImageClassificationWithTeacher"),xlr=o(" (LeViT model)"),$lr=l(),wT=a("li"),Lbe=a("strong"),klr=o("mobilevit"),Slr=o(" \u2014 "),kW=a("a"),Rlr=o("MobileViTForImageClassification"),Plr=o(" (MobileViT model)"),Blr=l(),Ft=a("li"),ybe=a("strong"),Nlr=o("perceiver"),Ilr=o(" \u2014 "),SW=a("a"),qlr=o("PerceiverForImageClassificationLearned"),jlr=o(" or "),RW=a("a"),Dlr=o("PerceiverForImageClassificationFourier"),Glr=o(" or "),PW=a("a"),Olr=o("PerceiverForImageClassificationConvProcessing"),Vlr=o(" (Perceiver model)"),Xlr=l(),AT=a("li"),xbe=a("strong"),zlr=o("poolformer"),Qlr=o(" \u2014 "),BW=a("a"),Wlr=o("PoolFormerForImageClassification"),Hlr=o(" (PoolFormer model)"),Ulr=l(),LT=a("li"),$be=a("strong"),Jlr=o("regnet"),Ylr=o(" \u2014 "),NW=a("a"),Klr=o("RegNetForImageClassification"),Zlr=o(" (RegNet model)"),eir=l(),yT=a("li"),kbe=a("strong"),oir=o("resnet"),rir=o(" \u2014 "),IW=a("a"),tir=o("ResNetForImageClassification"),air=o(" (ResNet model)"),nir=l(),xT=a("li"),Sbe=a("strong"),sir=o("segformer"),lir=o(" \u2014 "),qW=a("a"),iir=o("SegformerForImageClassification"),dir=o(" (SegFormer model)"),cir=l(),$T=a("li"),Rbe=a("strong"),fir=o("swin"),mir=o(" \u2014 "),jW=a("a"),gir=o("SwinForImageClassification"),hir=o(" (Swin Transformer model)"),pir=l(),kT=a("li"),Pbe=a("strong"),_ir=o("van"),uir=o(" \u2014 "),DW=a("a"),bir=o("VanForImageClassification"),vir=o(" (VAN model)"),Fir=l(),ST=a("li"),Bbe=a("strong"),Tir=o("vit"),Mir=o(" \u2014 "),GW=a("a"),Eir=o("ViTForImageClassification"),Cir=o(" (ViT model)"),wir=l(),RT=a("p"),Air=o("The model is set in evaluation mode by default using "),Nbe=a("code"),Lir=o("model.eval()"),yir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=a("code"),xir=o("model.train()"),$ir=l(),F(PT.$$.fragment),WXe=l(),Cd=a("h2"),BT=a("a"),qbe=a("span"),F(jL.$$.fragment),kir=l(),jbe=a("span"),Sir=o("AutoModelForVision2Seq"),HXe=l(),Vo=a("div"),F(DL.$$.fragment),Rir=l(),wd=a("p"),Pir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OW=a("a"),Bir=o("from_pretrained()"),Nir=o(" class method or the "),VW=a("a"),Iir=o("from_config()"),qir=o(` class
method.`),jir=l(),GL=a("p"),Dir=o("This class cannot be instantiated directly using "),Dbe=a("code"),Gir=o("__init__()"),Oir=o(" (throws an error)."),Vir=l(),Tt=a("div"),F(OL.$$.fragment),Xir=l(),Gbe=a("p"),zir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Qir=l(),Ad=a("p"),Wir=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),Hir=o("not"),Uir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),Jir=o("from_pretrained()"),Yir=o(" to load the model weights."),Kir=l(),F(NT.$$.fragment),Zir=l(),co=a("div"),F(VL.$$.fragment),edr=l(),Vbe=a("p"),odr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rdr=l(),Ha=a("p"),tdr=o("The model class to instantiate is selected based on the "),Xbe=a("code"),adr=o("model_type"),ndr=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),sdr=o("pretrained_model_name_or_path"),ldr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),idr=o("pretrained_model_name_or_path"),ddr=o(":"),cdr=l(),Wbe=a("ul"),IT=a("li"),Hbe=a("strong"),fdr=o("vision-encoder-decoder"),mdr=o(" \u2014 "),zW=a("a"),gdr=o("VisionEncoderDecoderModel"),hdr=o(" (Vision Encoder decoder model)"),pdr=l(),qT=a("p"),_dr=o("The model is set in evaluation mode by default using "),Ube=a("code"),udr=o("model.eval()"),bdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=a("code"),vdr=o("model.train()"),Fdr=l(),F(jT.$$.fragment),UXe=l(),Ld=a("h2"),DT=a("a"),Ybe=a("span"),F(XL.$$.fragment),Tdr=l(),Kbe=a("span"),Mdr=o("AutoModelForVisualQuestionAnswering"),JXe=l(),Xo=a("div"),F(zL.$$.fragment),Edr=l(),yd=a("p"),Cdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),QW=a("a"),wdr=o("from_pretrained()"),Adr=o(" class method or the "),WW=a("a"),Ldr=o("from_config()"),ydr=o(` class
method.`),xdr=l(),QL=a("p"),$dr=o("This class cannot be instantiated directly using "),Zbe=a("code"),kdr=o("__init__()"),Sdr=o(" (throws an error)."),Rdr=l(),Mt=a("div"),F(WL.$$.fragment),Pdr=l(),eve=a("p"),Bdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Ndr=l(),xd=a("p"),Idr=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),qdr=o("not"),jdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=a("a"),Ddr=o("from_pretrained()"),Gdr=o(" to load the model weights."),Odr=l(),F(GT.$$.fragment),Vdr=l(),fo=a("div"),F(HL.$$.fragment),Xdr=l(),rve=a("p"),zdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Qdr=l(),Ua=a("p"),Wdr=o("The model class to instantiate is selected based on the "),tve=a("code"),Hdr=o("model_type"),Udr=o(` property of the config object (either
passed as an argument or loaded from `),ave=a("code"),Jdr=o("pretrained_model_name_or_path"),Ydr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=a("code"),Kdr=o("pretrained_model_name_or_path"),Zdr=o(":"),ecr=l(),sve=a("ul"),OT=a("li"),lve=a("strong"),ocr=o("vilt"),rcr=o(" \u2014 "),UW=a("a"),tcr=o("ViltForQuestionAnswering"),acr=o(" (ViLT model)"),ncr=l(),VT=a("p"),scr=o("The model is set in evaluation mode by default using "),ive=a("code"),lcr=o("model.eval()"),icr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dve=a("code"),dcr=o("model.train()"),ccr=l(),F(XT.$$.fragment),YXe=l(),$d=a("h2"),zT=a("a"),cve=a("span"),F(UL.$$.fragment),fcr=l(),fve=a("span"),mcr=o("AutoModelForAudioClassification"),KXe=l(),zo=a("div"),F(JL.$$.fragment),gcr=l(),kd=a("p"),hcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),JW=a("a"),pcr=o("from_pretrained()"),_cr=o(" class method or the "),YW=a("a"),ucr=o("from_config()"),bcr=o(` class
method.`),vcr=l(),YL=a("p"),Fcr=o("This class cannot be instantiated directly using "),mve=a("code"),Tcr=o("__init__()"),Mcr=o(" (throws an error)."),Ecr=l(),Et=a("div"),F(KL.$$.fragment),Ccr=l(),gve=a("p"),wcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Acr=l(),Sd=a("p"),Lcr=o(`Note:
Loading a model from its configuration file does `),hve=a("strong"),ycr=o("not"),xcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),$cr=o("from_pretrained()"),kcr=o(" to load the model weights."),Scr=l(),F(QT.$$.fragment),Rcr=l(),mo=a("div"),F(ZL.$$.fragment),Pcr=l(),pve=a("p"),Bcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ncr=l(),Ja=a("p"),Icr=o("The model class to instantiate is selected based on the "),_ve=a("code"),qcr=o("model_type"),jcr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),Dcr=o("pretrained_model_name_or_path"),Gcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),Ocr=o("pretrained_model_name_or_path"),Vcr=o(":"),Xcr=l(),Pe=a("ul"),WT=a("li"),vve=a("strong"),zcr=o("data2vec-audio"),Qcr=o(" \u2014 "),ZW=a("a"),Wcr=o("Data2VecAudioForSequenceClassification"),Hcr=o(" (Data2VecAudio model)"),Ucr=l(),HT=a("li"),Fve=a("strong"),Jcr=o("hubert"),Ycr=o(" \u2014 "),eH=a("a"),Kcr=o("HubertForSequenceClassification"),Zcr=o(" (Hubert model)"),efr=l(),UT=a("li"),Tve=a("strong"),ofr=o("sew"),rfr=o(" \u2014 "),oH=a("a"),tfr=o("SEWForSequenceClassification"),afr=o(" (SEW model)"),nfr=l(),JT=a("li"),Mve=a("strong"),sfr=o("sew-d"),lfr=o(" \u2014 "),rH=a("a"),ifr=o("SEWDForSequenceClassification"),dfr=o(" (SEW-D model)"),cfr=l(),YT=a("li"),Eve=a("strong"),ffr=o("unispeech"),mfr=o(" \u2014 "),tH=a("a"),gfr=o("UniSpeechForSequenceClassification"),hfr=o(" (UniSpeech model)"),pfr=l(),KT=a("li"),Cve=a("strong"),_fr=o("unispeech-sat"),ufr=o(" \u2014 "),aH=a("a"),bfr=o("UniSpeechSatForSequenceClassification"),vfr=o(" (UniSpeechSat model)"),Ffr=l(),ZT=a("li"),wve=a("strong"),Tfr=o("wav2vec2"),Mfr=o(" \u2014 "),nH=a("a"),Efr=o("Wav2Vec2ForSequenceClassification"),Cfr=o(" (Wav2Vec2 model)"),wfr=l(),e7=a("li"),Ave=a("strong"),Afr=o("wav2vec2-conformer"),Lfr=o(" \u2014 "),sH=a("a"),yfr=o("Wav2Vec2ConformerForSequenceClassification"),xfr=o(" (Wav2Vec2-Conformer model)"),$fr=l(),o7=a("li"),Lve=a("strong"),kfr=o("wavlm"),Sfr=o(" \u2014 "),lH=a("a"),Rfr=o("WavLMForSequenceClassification"),Pfr=o(" (WavLM model)"),Bfr=l(),r7=a("p"),Nfr=o("The model is set in evaluation mode by default using "),yve=a("code"),Ifr=o("model.eval()"),qfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=a("code"),jfr=o("model.train()"),Dfr=l(),F(t7.$$.fragment),ZXe=l(),Rd=a("h2"),a7=a("a"),$ve=a("span"),F(ey.$$.fragment),Gfr=l(),kve=a("span"),Ofr=o("AutoModelForAudioFrameClassification"),eze=l(),Qo=a("div"),F(oy.$$.fragment),Vfr=l(),Pd=a("p"),Xfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iH=a("a"),zfr=o("from_pretrained()"),Qfr=o(" class method or the "),dH=a("a"),Wfr=o("from_config()"),Hfr=o(` class
method.`),Ufr=l(),ry=a("p"),Jfr=o("This class cannot be instantiated directly using "),Sve=a("code"),Yfr=o("__init__()"),Kfr=o(" (throws an error)."),Zfr=l(),Ct=a("div"),F(ty.$$.fragment),emr=l(),Rve=a("p"),omr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),rmr=l(),Bd=a("p"),tmr=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),amr=o("not"),nmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),smr=o("from_pretrained()"),lmr=o(" to load the model weights."),imr=l(),F(n7.$$.fragment),dmr=l(),go=a("div"),F(ay.$$.fragment),cmr=l(),Bve=a("p"),fmr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),mmr=l(),Ya=a("p"),gmr=o("The model class to instantiate is selected based on the "),Nve=a("code"),hmr=o("model_type"),pmr=o(` property of the config object (either
passed as an argument or loaded from `),Ive=a("code"),_mr=o("pretrained_model_name_or_path"),umr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),bmr=o("pretrained_model_name_or_path"),vmr=o(":"),Fmr=l(),rt=a("ul"),s7=a("li"),jve=a("strong"),Tmr=o("data2vec-audio"),Mmr=o(" \u2014 "),fH=a("a"),Emr=o("Data2VecAudioForAudioFrameClassification"),Cmr=o(" (Data2VecAudio model)"),wmr=l(),l7=a("li"),Dve=a("strong"),Amr=o("unispeech-sat"),Lmr=o(" \u2014 "),mH=a("a"),ymr=o("UniSpeechSatForAudioFrameClassification"),xmr=o(" (UniSpeechSat model)"),$mr=l(),i7=a("li"),Gve=a("strong"),kmr=o("wav2vec2"),Smr=o(" \u2014 "),gH=a("a"),Rmr=o("Wav2Vec2ForAudioFrameClassification"),Pmr=o(" (Wav2Vec2 model)"),Bmr=l(),d7=a("li"),Ove=a("strong"),Nmr=o("wav2vec2-conformer"),Imr=o(" \u2014 "),hH=a("a"),qmr=o("Wav2Vec2ConformerForAudioFrameClassification"),jmr=o(" (Wav2Vec2-Conformer model)"),Dmr=l(),c7=a("li"),Vve=a("strong"),Gmr=o("wavlm"),Omr=o(" \u2014 "),pH=a("a"),Vmr=o("WavLMForAudioFrameClassification"),Xmr=o(" (WavLM model)"),zmr=l(),f7=a("p"),Qmr=o("The model is set in evaluation mode by default using "),Xve=a("code"),Wmr=o("model.eval()"),Hmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zve=a("code"),Umr=o("model.train()"),Jmr=l(),F(m7.$$.fragment),oze=l(),Nd=a("h2"),g7=a("a"),Qve=a("span"),F(ny.$$.fragment),Ymr=l(),Wve=a("span"),Kmr=o("AutoModelForCTC"),rze=l(),Wo=a("div"),F(sy.$$.fragment),Zmr=l(),Id=a("p"),egr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_H=a("a"),ogr=o("from_pretrained()"),rgr=o(" class method or the "),uH=a("a"),tgr=o("from_config()"),agr=o(` class
method.`),ngr=l(),ly=a("p"),sgr=o("This class cannot be instantiated directly using "),Hve=a("code"),lgr=o("__init__()"),igr=o(" (throws an error)."),dgr=l(),wt=a("div"),F(iy.$$.fragment),cgr=l(),Uve=a("p"),fgr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),mgr=l(),qd=a("p"),ggr=o(`Note:
Loading a model from its configuration file does `),Jve=a("strong"),hgr=o("not"),pgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),_gr=o("from_pretrained()"),ugr=o(" to load the model weights."),bgr=l(),F(h7.$$.fragment),vgr=l(),ho=a("div"),F(dy.$$.fragment),Fgr=l(),Yve=a("p"),Tgr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Mgr=l(),Ka=a("p"),Egr=o("The model class to instantiate is selected based on the "),Kve=a("code"),Cgr=o("model_type"),wgr=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),Agr=o("pretrained_model_name_or_path"),Lgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=a("code"),ygr=o("pretrained_model_name_or_path"),xgr=o(":"),$gr=l(),Le=a("ul"),p7=a("li"),o0e=a("strong"),kgr=o("data2vec-audio"),Sgr=o(" \u2014 "),vH=a("a"),Rgr=o("Data2VecAudioForCTC"),Pgr=o(" (Data2VecAudio model)"),Bgr=l(),_7=a("li"),r0e=a("strong"),Ngr=o("hubert"),Igr=o(" \u2014 "),FH=a("a"),qgr=o("HubertForCTC"),jgr=o(" (Hubert model)"),Dgr=l(),u7=a("li"),t0e=a("strong"),Ggr=o("mctct"),Ogr=o(" \u2014 "),TH=a("a"),Vgr=o("MCTCTForCTC"),Xgr=o(" (M-CTC-T model)"),zgr=l(),b7=a("li"),a0e=a("strong"),Qgr=o("sew"),Wgr=o(" \u2014 "),MH=a("a"),Hgr=o("SEWForCTC"),Ugr=o(" (SEW model)"),Jgr=l(),v7=a("li"),n0e=a("strong"),Ygr=o("sew-d"),Kgr=o(" \u2014 "),EH=a("a"),Zgr=o("SEWDForCTC"),ehr=o(" (SEW-D model)"),ohr=l(),F7=a("li"),s0e=a("strong"),rhr=o("unispeech"),thr=o(" \u2014 "),CH=a("a"),ahr=o("UniSpeechForCTC"),nhr=o(" (UniSpeech model)"),shr=l(),T7=a("li"),l0e=a("strong"),lhr=o("unispeech-sat"),ihr=o(" \u2014 "),wH=a("a"),dhr=o("UniSpeechSatForCTC"),chr=o(" (UniSpeechSat model)"),fhr=l(),M7=a("li"),i0e=a("strong"),mhr=o("wav2vec2"),ghr=o(" \u2014 "),AH=a("a"),hhr=o("Wav2Vec2ForCTC"),phr=o(" (Wav2Vec2 model)"),_hr=l(),E7=a("li"),d0e=a("strong"),uhr=o("wav2vec2-conformer"),bhr=o(" \u2014 "),LH=a("a"),vhr=o("Wav2Vec2ConformerForCTC"),Fhr=o(" (Wav2Vec2-Conformer model)"),Thr=l(),C7=a("li"),c0e=a("strong"),Mhr=o("wavlm"),Ehr=o(" \u2014 "),yH=a("a"),Chr=o("WavLMForCTC"),whr=o(" (WavLM model)"),Ahr=l(),w7=a("p"),Lhr=o("The model is set in evaluation mode by default using "),f0e=a("code"),yhr=o("model.eval()"),xhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m0e=a("code"),$hr=o("model.train()"),khr=l(),F(A7.$$.fragment),tze=l(),jd=a("h2"),L7=a("a"),g0e=a("span"),F(cy.$$.fragment),Shr=l(),h0e=a("span"),Rhr=o("AutoModelForSpeechSeq2Seq"),aze=l(),Ho=a("div"),F(fy.$$.fragment),Phr=l(),Dd=a("p"),Bhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xH=a("a"),Nhr=o("from_pretrained()"),Ihr=o(" class method or the "),$H=a("a"),qhr=o("from_config()"),jhr=o(` class
method.`),Dhr=l(),my=a("p"),Ghr=o("This class cannot be instantiated directly using "),p0e=a("code"),Ohr=o("__init__()"),Vhr=o(" (throws an error)."),Xhr=l(),At=a("div"),F(gy.$$.fragment),zhr=l(),_0e=a("p"),Qhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Whr=l(),Gd=a("p"),Hhr=o(`Note:
Loading a model from its configuration file does `),u0e=a("strong"),Uhr=o("not"),Jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),Yhr=o("from_pretrained()"),Khr=o(" to load the model weights."),Zhr=l(),F(y7.$$.fragment),epr=l(),po=a("div"),F(hy.$$.fragment),opr=l(),b0e=a("p"),rpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tpr=l(),Za=a("p"),apr=o("The model class to instantiate is selected based on the "),v0e=a("code"),npr=o("model_type"),spr=o(` property of the config object (either
passed as an argument or loaded from `),F0e=a("code"),lpr=o("pretrained_model_name_or_path"),ipr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=a("code"),dpr=o("pretrained_model_name_or_path"),cpr=o(":"),fpr=l(),py=a("ul"),x7=a("li"),M0e=a("strong"),mpr=o("speech-encoder-decoder"),gpr=o(" \u2014 "),SH=a("a"),hpr=o("SpeechEncoderDecoderModel"),ppr=o(" (Speech Encoder decoder model)"),_pr=l(),$7=a("li"),E0e=a("strong"),upr=o("speech_to_text"),bpr=o(" \u2014 "),RH=a("a"),vpr=o("Speech2TextForConditionalGeneration"),Fpr=o(" (Speech2Text model)"),Tpr=l(),k7=a("p"),Mpr=o("The model is set in evaluation mode by default using "),C0e=a("code"),Epr=o("model.eval()"),Cpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w0e=a("code"),wpr=o("model.train()"),Apr=l(),F(S7.$$.fragment),nze=l(),Od=a("h2"),R7=a("a"),A0e=a("span"),F(_y.$$.fragment),Lpr=l(),L0e=a("span"),ypr=o("AutoModelForAudioXVector"),sze=l(),Uo=a("div"),F(uy.$$.fragment),xpr=l(),Vd=a("p"),$pr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),PH=a("a"),kpr=o("from_pretrained()"),Spr=o(" class method or the "),BH=a("a"),Rpr=o("from_config()"),Ppr=o(` class
method.`),Bpr=l(),by=a("p"),Npr=o("This class cannot be instantiated directly using "),y0e=a("code"),Ipr=o("__init__()"),qpr=o(" (throws an error)."),jpr=l(),Lt=a("div"),F(vy.$$.fragment),Dpr=l(),x0e=a("p"),Gpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Opr=l(),Xd=a("p"),Vpr=o(`Note:
Loading a model from its configuration file does `),$0e=a("strong"),Xpr=o("not"),zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),Qpr=o("from_pretrained()"),Wpr=o(" to load the model weights."),Hpr=l(),F(P7.$$.fragment),Upr=l(),_o=a("div"),F(Fy.$$.fragment),Jpr=l(),k0e=a("p"),Ypr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Kpr=l(),en=a("p"),Zpr=o("The model class to instantiate is selected based on the "),S0e=a("code"),e_r=o("model_type"),o_r=o(` property of the config object (either
passed as an argument or loaded from `),R0e=a("code"),r_r=o("pretrained_model_name_or_path"),t_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=a("code"),a_r=o("pretrained_model_name_or_path"),n_r=o(":"),s_r=l(),tt=a("ul"),B7=a("li"),B0e=a("strong"),l_r=o("data2vec-audio"),i_r=o(" \u2014 "),IH=a("a"),d_r=o("Data2VecAudioForXVector"),c_r=o(" (Data2VecAudio model)"),f_r=l(),N7=a("li"),N0e=a("strong"),m_r=o("unispeech-sat"),g_r=o(" \u2014 "),qH=a("a"),h_r=o("UniSpeechSatForXVector"),p_r=o(" (UniSpeechSat model)"),__r=l(),I7=a("li"),I0e=a("strong"),u_r=o("wav2vec2"),b_r=o(" \u2014 "),jH=a("a"),v_r=o("Wav2Vec2ForXVector"),F_r=o(" (Wav2Vec2 model)"),T_r=l(),q7=a("li"),q0e=a("strong"),M_r=o("wav2vec2-conformer"),E_r=o(" \u2014 "),DH=a("a"),C_r=o("Wav2Vec2ConformerForXVector"),w_r=o(" (Wav2Vec2-Conformer model)"),A_r=l(),j7=a("li"),j0e=a("strong"),L_r=o("wavlm"),y_r=o(" \u2014 "),GH=a("a"),x_r=o("WavLMForXVector"),$_r=o(" (WavLM model)"),k_r=l(),D7=a("p"),S_r=o("The model is set in evaluation mode by default using "),D0e=a("code"),R_r=o("model.eval()"),P_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G0e=a("code"),B_r=o("model.train()"),N_r=l(),F(G7.$$.fragment),lze=l(),zd=a("h2"),O7=a("a"),O0e=a("span"),F(Ty.$$.fragment),I_r=l(),V0e=a("span"),q_r=o("AutoModelForMaskedImageModeling"),ize=l(),Jo=a("div"),F(My.$$.fragment),j_r=l(),Qd=a("p"),D_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OH=a("a"),G_r=o("from_pretrained()"),O_r=o(" class method or the "),VH=a("a"),V_r=o("from_config()"),X_r=o(` class
method.`),z_r=l(),Ey=a("p"),Q_r=o("This class cannot be instantiated directly using "),X0e=a("code"),W_r=o("__init__()"),H_r=o(" (throws an error)."),U_r=l(),yt=a("div"),F(Cy.$$.fragment),J_r=l(),z0e=a("p"),Y_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),K_r=l(),Wd=a("p"),Z_r=o(`Note:
Loading a model from its configuration file does `),Q0e=a("strong"),eur=o("not"),our=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),rur=o("from_pretrained()"),tur=o(" to load the model weights."),aur=l(),F(V7.$$.fragment),nur=l(),uo=a("div"),F(wy.$$.fragment),sur=l(),W0e=a("p"),lur=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),iur=l(),on=a("p"),dur=o("The model class to instantiate is selected based on the "),H0e=a("code"),cur=o("model_type"),fur=o(` property of the config object (either
passed as an argument or loaded from `),U0e=a("code"),mur=o("pretrained_model_name_or_path"),gur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=a("code"),hur=o("pretrained_model_name_or_path"),pur=o(":"),_ur=l(),Hd=a("ul"),X7=a("li"),Y0e=a("strong"),uur=o("deit"),bur=o(" \u2014 "),zH=a("a"),vur=o("DeiTForMaskedImageModeling"),Fur=o(" (DeiT model)"),Tur=l(),z7=a("li"),K0e=a("strong"),Mur=o("swin"),Eur=o(" \u2014 "),QH=a("a"),Cur=o("SwinForMaskedImageModeling"),wur=o(" (Swin Transformer model)"),Aur=l(),Q7=a("li"),Z0e=a("strong"),Lur=o("vit"),yur=o(" \u2014 "),WH=a("a"),xur=o("ViTForMaskedImageModeling"),$ur=o(" (ViT model)"),kur=l(),W7=a("p"),Sur=o("The model is set in evaluation mode by default using "),eFe=a("code"),Rur=o("model.eval()"),Pur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oFe=a("code"),Bur=o("model.train()"),Nur=l(),F(H7.$$.fragment),dze=l(),Ud=a("h2"),U7=a("a"),rFe=a("span"),F(Ay.$$.fragment),Iur=l(),tFe=a("span"),qur=o("AutoModelForObjectDetection"),cze=l(),Yo=a("div"),F(Ly.$$.fragment),jur=l(),Jd=a("p"),Dur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HH=a("a"),Gur=o("from_pretrained()"),Our=o(" class method or the "),UH=a("a"),Vur=o("from_config()"),Xur=o(` class
method.`),zur=l(),yy=a("p"),Qur=o("This class cannot be instantiated directly using "),aFe=a("code"),Wur=o("__init__()"),Hur=o(" (throws an error)."),Uur=l(),xt=a("div"),F(xy.$$.fragment),Jur=l(),nFe=a("p"),Yur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Kur=l(),Yd=a("p"),Zur=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),e1r=o("not"),o1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),r1r=o("from_pretrained()"),t1r=o(" to load the model weights."),a1r=l(),F(J7.$$.fragment),n1r=l(),bo=a("div"),F($y.$$.fragment),s1r=l(),lFe=a("p"),l1r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),i1r=l(),rn=a("p"),d1r=o("The model class to instantiate is selected based on the "),iFe=a("code"),c1r=o("model_type"),f1r=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),m1r=o("pretrained_model_name_or_path"),g1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),h1r=o("pretrained_model_name_or_path"),p1r=o(":"),_1r=l(),ky=a("ul"),Y7=a("li"),fFe=a("strong"),u1r=o("detr"),b1r=o(" \u2014 "),YH=a("a"),v1r=o("DetrForObjectDetection"),F1r=o(" (DETR model)"),T1r=l(),K7=a("li"),mFe=a("strong"),M1r=o("yolos"),E1r=o(" \u2014 "),KH=a("a"),C1r=o("YolosForObjectDetection"),w1r=o(" (YOLOS model)"),A1r=l(),Z7=a("p"),L1r=o("The model is set in evaluation mode by default using "),gFe=a("code"),y1r=o("model.eval()"),x1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=a("code"),$1r=o("model.train()"),k1r=l(),F(e8.$$.fragment),fze=l(),Kd=a("h2"),o8=a("a"),pFe=a("span"),F(Sy.$$.fragment),S1r=l(),_Fe=a("span"),R1r=o("AutoModelForImageSegmentation"),mze=l(),Ko=a("div"),F(Ry.$$.fragment),P1r=l(),Zd=a("p"),B1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZH=a("a"),N1r=o("from_pretrained()"),I1r=o(" class method or the "),eU=a("a"),q1r=o("from_config()"),j1r=o(` class
method.`),D1r=l(),Py=a("p"),G1r=o("This class cannot be instantiated directly using "),uFe=a("code"),O1r=o("__init__()"),V1r=o(" (throws an error)."),X1r=l(),$t=a("div"),F(By.$$.fragment),z1r=l(),bFe=a("p"),Q1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),W1r=l(),ec=a("p"),H1r=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),U1r=o("not"),J1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),Y1r=o("from_pretrained()"),K1r=o(" to load the model weights."),Z1r=l(),F(r8.$$.fragment),e2r=l(),vo=a("div"),F(Ny.$$.fragment),o2r=l(),FFe=a("p"),r2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),t2r=l(),tn=a("p"),a2r=o("The model class to instantiate is selected based on the "),TFe=a("code"),n2r=o("model_type"),s2r=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),l2r=o("pretrained_model_name_or_path"),i2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),d2r=o("pretrained_model_name_or_path"),c2r=o(":"),f2r=l(),CFe=a("ul"),t8=a("li"),wFe=a("strong"),m2r=o("detr"),g2r=o(" \u2014 "),rU=a("a"),h2r=o("DetrForSegmentation"),p2r=o(" (DETR model)"),_2r=l(),a8=a("p"),u2r=o("The model is set in evaluation mode by default using "),AFe=a("code"),b2r=o("model.eval()"),v2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LFe=a("code"),F2r=o("model.train()"),T2r=l(),F(n8.$$.fragment),gze=l(),oc=a("h2"),s8=a("a"),yFe=a("span"),F(Iy.$$.fragment),M2r=l(),xFe=a("span"),E2r=o("AutoModelForSemanticSegmentation"),hze=l(),Zo=a("div"),F(qy.$$.fragment),C2r=l(),rc=a("p"),w2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tU=a("a"),A2r=o("from_pretrained()"),L2r=o(" class method or the "),aU=a("a"),y2r=o("from_config()"),x2r=o(` class
method.`),$2r=l(),jy=a("p"),k2r=o("This class cannot be instantiated directly using "),$Fe=a("code"),S2r=o("__init__()"),R2r=o(" (throws an error)."),P2r=l(),kt=a("div"),F(Dy.$$.fragment),B2r=l(),kFe=a("p"),N2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),I2r=l(),tc=a("p"),q2r=o(`Note:
Loading a model from its configuration file does `),SFe=a("strong"),j2r=o("not"),D2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),G2r=o("from_pretrained()"),O2r=o(" to load the model weights."),V2r=l(),F(l8.$$.fragment),X2r=l(),Fo=a("div"),F(Gy.$$.fragment),z2r=l(),RFe=a("p"),Q2r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),W2r=l(),an=a("p"),H2r=o("The model class to instantiate is selected based on the "),PFe=a("code"),U2r=o("model_type"),J2r=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),Y2r=o("pretrained_model_name_or_path"),K2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),Z2r=o("pretrained_model_name_or_path"),ebr=o(":"),obr=l(),at=a("ul"),i8=a("li"),IFe=a("strong"),rbr=o("beit"),tbr=o(" \u2014 "),sU=a("a"),abr=o("BeitForSemanticSegmentation"),nbr=o(" (BEiT model)"),sbr=l(),d8=a("li"),qFe=a("strong"),lbr=o("data2vec-vision"),ibr=o(" \u2014 "),lU=a("a"),dbr=o("Data2VecVisionForSemanticSegmentation"),cbr=o(" (Data2VecVision model)"),fbr=l(),c8=a("li"),jFe=a("strong"),mbr=o("dpt"),gbr=o(" \u2014 "),iU=a("a"),hbr=o("DPTForSemanticSegmentation"),pbr=o(" (DPT model)"),_br=l(),f8=a("li"),DFe=a("strong"),ubr=o("mobilevit"),bbr=o(" \u2014 "),dU=a("a"),vbr=o("MobileViTForSemanticSegmentation"),Fbr=o(" (MobileViT model)"),Tbr=l(),m8=a("li"),GFe=a("strong"),Mbr=o("segformer"),Ebr=o(" \u2014 "),cU=a("a"),Cbr=o("SegformerForSemanticSegmentation"),wbr=o(" (SegFormer model)"),Abr=l(),g8=a("p"),Lbr=o("The model is set in evaluation mode by default using "),OFe=a("code"),ybr=o("model.eval()"),xbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=a("code"),$br=o("model.train()"),kbr=l(),F(h8.$$.fragment),pze=l(),ac=a("h2"),p8=a("a"),XFe=a("span"),F(Oy.$$.fragment),Sbr=l(),zFe=a("span"),Rbr=o("AutoModelForInstanceSegmentation"),_ze=l(),er=a("div"),F(Vy.$$.fragment),Pbr=l(),nc=a("p"),Bbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fU=a("a"),Nbr=o("from_pretrained()"),Ibr=o(" class method or the "),mU=a("a"),qbr=o("from_config()"),jbr=o(` class
method.`),Dbr=l(),Xy=a("p"),Gbr=o("This class cannot be instantiated directly using "),QFe=a("code"),Obr=o("__init__()"),Vbr=o(" (throws an error)."),Xbr=l(),St=a("div"),F(zy.$$.fragment),zbr=l(),WFe=a("p"),Qbr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Wbr=l(),sc=a("p"),Hbr=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),Ubr=o("not"),Jbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),Ybr=o("from_pretrained()"),Kbr=o(" to load the model weights."),Zbr=l(),F(_8.$$.fragment),evr=l(),To=a("div"),F(Qy.$$.fragment),ovr=l(),UFe=a("p"),rvr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tvr=l(),nn=a("p"),avr=o("The model class to instantiate is selected based on the "),JFe=a("code"),nvr=o("model_type"),svr=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),lvr=o("pretrained_model_name_or_path"),ivr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),dvr=o("pretrained_model_name_or_path"),cvr=o(":"),fvr=l(),ZFe=a("ul"),u8=a("li"),eTe=a("strong"),mvr=o("maskformer"),gvr=o(" \u2014 "),hU=a("a"),hvr=o("MaskFormerForInstanceSegmentation"),pvr=o(" (MaskFormer model)"),_vr=l(),b8=a("p"),uvr=o("The model is set in evaluation mode by default using "),oTe=a("code"),bvr=o("model.eval()"),vvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rTe=a("code"),Fvr=o("model.train()"),Tvr=l(),F(v8.$$.fragment),uze=l(),lc=a("h2"),F8=a("a"),tTe=a("span"),F(Wy.$$.fragment),Mvr=l(),aTe=a("span"),Evr=o("TFAutoModel"),bze=l(),or=a("div"),F(Hy.$$.fragment),Cvr=l(),ic=a("p"),wvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pU=a("a"),Avr=o("from_pretrained()"),Lvr=o(" class method or the "),_U=a("a"),yvr=o("from_config()"),xvr=o(` class
method.`),$vr=l(),Uy=a("p"),kvr=o("This class cannot be instantiated directly using "),nTe=a("code"),Svr=o("__init__()"),Rvr=o(" (throws an error)."),Pvr=l(),Rt=a("div"),F(Jy.$$.fragment),Bvr=l(),sTe=a("p"),Nvr=o("Instantiates one of the base model classes of the library from a configuration."),Ivr=l(),dc=a("p"),qvr=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),jvr=o("not"),Dvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),Gvr=o("from_pretrained()"),Ovr=o(" to load the model weights."),Vvr=l(),F(T8.$$.fragment),Xvr=l(),xr=a("div"),F(Yy.$$.fragment),zvr=l(),iTe=a("p"),Qvr=o("Instantiate one of the base model classes of the library from a pretrained model."),Wvr=l(),sn=a("p"),Hvr=o("The model class to instantiate is selected based on the "),dTe=a("code"),Uvr=o("model_type"),Jvr=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),Yvr=o("pretrained_model_name_or_path"),Kvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),Zvr=o("pretrained_model_name_or_path"),e0r=o(":"),o0r=l(),q=a("ul"),M8=a("li"),mTe=a("strong"),r0r=o("albert"),t0r=o(" \u2014 "),bU=a("a"),a0r=o("TFAlbertModel"),n0r=o(" (ALBERT model)"),s0r=l(),E8=a("li"),gTe=a("strong"),l0r=o("bart"),i0r=o(" \u2014 "),vU=a("a"),d0r=o("TFBartModel"),c0r=o(" (BART model)"),f0r=l(),C8=a("li"),hTe=a("strong"),m0r=o("bert"),g0r=o(" \u2014 "),FU=a("a"),h0r=o("TFBertModel"),p0r=o(" (BERT model)"),_0r=l(),w8=a("li"),pTe=a("strong"),u0r=o("blenderbot"),b0r=o(" \u2014 "),TU=a("a"),v0r=o("TFBlenderbotModel"),F0r=o(" (Blenderbot model)"),T0r=l(),A8=a("li"),_Te=a("strong"),M0r=o("blenderbot-small"),E0r=o(" \u2014 "),MU=a("a"),C0r=o("TFBlenderbotSmallModel"),w0r=o(" (BlenderbotSmall model)"),A0r=l(),L8=a("li"),uTe=a("strong"),L0r=o("camembert"),y0r=o(" \u2014 "),EU=a("a"),x0r=o("TFCamembertModel"),$0r=o(" (CamemBERT model)"),k0r=l(),y8=a("li"),bTe=a("strong"),S0r=o("clip"),R0r=o(" \u2014 "),CU=a("a"),P0r=o("TFCLIPModel"),B0r=o(" (CLIP model)"),N0r=l(),x8=a("li"),vTe=a("strong"),I0r=o("convbert"),q0r=o(" \u2014 "),wU=a("a"),j0r=o("TFConvBertModel"),D0r=o(" (ConvBERT model)"),G0r=l(),$8=a("li"),FTe=a("strong"),O0r=o("convnext"),V0r=o(" \u2014 "),AU=a("a"),X0r=o("TFConvNextModel"),z0r=o(" (ConvNeXT model)"),Q0r=l(),k8=a("li"),TTe=a("strong"),W0r=o("ctrl"),H0r=o(" \u2014 "),LU=a("a"),U0r=o("TFCTRLModel"),J0r=o(" (CTRL model)"),Y0r=l(),S8=a("li"),MTe=a("strong"),K0r=o("data2vec-vision"),Z0r=o(" \u2014 "),yU=a("a"),eFr=o("TFData2VecVisionModel"),oFr=o(" (Data2VecVision model)"),rFr=l(),R8=a("li"),ETe=a("strong"),tFr=o("deberta"),aFr=o(" \u2014 "),xU=a("a"),nFr=o("TFDebertaModel"),sFr=o(" (DeBERTa model)"),lFr=l(),P8=a("li"),CTe=a("strong"),iFr=o("deberta-v2"),dFr=o(" \u2014 "),$U=a("a"),cFr=o("TFDebertaV2Model"),fFr=o(" (DeBERTa-v2 model)"),mFr=l(),B8=a("li"),wTe=a("strong"),gFr=o("deit"),hFr=o(" \u2014 "),kU=a("a"),pFr=o("TFDeiTModel"),_Fr=o(" (DeiT model)"),uFr=l(),N8=a("li"),ATe=a("strong"),bFr=o("distilbert"),vFr=o(" \u2014 "),SU=a("a"),FFr=o("TFDistilBertModel"),TFr=o(" (DistilBERT model)"),MFr=l(),I8=a("li"),LTe=a("strong"),EFr=o("dpr"),CFr=o(" \u2014 "),RU=a("a"),wFr=o("TFDPRQuestionEncoder"),AFr=o(" (DPR model)"),LFr=l(),q8=a("li"),yTe=a("strong"),yFr=o("electra"),xFr=o(" \u2014 "),PU=a("a"),$Fr=o("TFElectraModel"),kFr=o(" (ELECTRA model)"),SFr=l(),j8=a("li"),xTe=a("strong"),RFr=o("flaubert"),PFr=o(" \u2014 "),BU=a("a"),BFr=o("TFFlaubertModel"),NFr=o(" (FlauBERT model)"),IFr=l(),Ys=a("li"),$Te=a("strong"),qFr=o("funnel"),jFr=o(" \u2014 "),NU=a("a"),DFr=o("TFFunnelModel"),GFr=o(" or "),IU=a("a"),OFr=o("TFFunnelBaseModel"),VFr=o(" (Funnel Transformer model)"),XFr=l(),D8=a("li"),kTe=a("strong"),zFr=o("gpt2"),QFr=o(" \u2014 "),qU=a("a"),WFr=o("TFGPT2Model"),HFr=o(" (OpenAI GPT-2 model)"),UFr=l(),G8=a("li"),STe=a("strong"),JFr=o("gptj"),YFr=o(" \u2014 "),jU=a("a"),KFr=o("TFGPTJModel"),ZFr=o(" (GPT-J model)"),eTr=l(),O8=a("li"),RTe=a("strong"),oTr=o("hubert"),rTr=o(" \u2014 "),DU=a("a"),tTr=o("TFHubertModel"),aTr=o(" (Hubert model)"),nTr=l(),V8=a("li"),PTe=a("strong"),sTr=o("layoutlm"),lTr=o(" \u2014 "),GU=a("a"),iTr=o("TFLayoutLMModel"),dTr=o(" (LayoutLM model)"),cTr=l(),X8=a("li"),BTe=a("strong"),fTr=o("led"),mTr=o(" \u2014 "),OU=a("a"),gTr=o("TFLEDModel"),hTr=o(" (LED model)"),pTr=l(),z8=a("li"),NTe=a("strong"),_Tr=o("longformer"),uTr=o(" \u2014 "),VU=a("a"),bTr=o("TFLongformerModel"),vTr=o(" (Longformer model)"),FTr=l(),Q8=a("li"),ITe=a("strong"),TTr=o("lxmert"),MTr=o(" \u2014 "),XU=a("a"),ETr=o("TFLxmertModel"),CTr=o(" (LXMERT model)"),wTr=l(),W8=a("li"),qTe=a("strong"),ATr=o("marian"),LTr=o(" \u2014 "),zU=a("a"),yTr=o("TFMarianModel"),xTr=o(" (Marian model)"),$Tr=l(),H8=a("li"),jTe=a("strong"),kTr=o("mbart"),STr=o(" \u2014 "),QU=a("a"),RTr=o("TFMBartModel"),PTr=o(" (mBART model)"),BTr=l(),U8=a("li"),DTe=a("strong"),NTr=o("mobilebert"),ITr=o(" \u2014 "),WU=a("a"),qTr=o("TFMobileBertModel"),jTr=o(" (MobileBERT model)"),DTr=l(),J8=a("li"),GTe=a("strong"),GTr=o("mpnet"),OTr=o(" \u2014 "),HU=a("a"),VTr=o("TFMPNetModel"),XTr=o(" (MPNet model)"),zTr=l(),Y8=a("li"),OTe=a("strong"),QTr=o("mt5"),WTr=o(" \u2014 "),UU=a("a"),HTr=o("TFMT5Model"),UTr=o(" (MT5 model)"),JTr=l(),K8=a("li"),VTe=a("strong"),YTr=o("openai-gpt"),KTr=o(" \u2014 "),JU=a("a"),ZTr=o("TFOpenAIGPTModel"),e7r=o(" (OpenAI GPT model)"),o7r=l(),Z8=a("li"),XTe=a("strong"),r7r=o("opt"),t7r=o(" \u2014 "),YU=a("a"),a7r=o("TFOPTModel"),n7r=o(" (OPT model)"),s7r=l(),e9=a("li"),zTe=a("strong"),l7r=o("pegasus"),i7r=o(" \u2014 "),KU=a("a"),d7r=o("TFPegasusModel"),c7r=o(" (Pegasus model)"),f7r=l(),o9=a("li"),QTe=a("strong"),m7r=o("regnet"),g7r=o(" \u2014 "),ZU=a("a"),h7r=o("TFRegNetModel"),p7r=o(" (RegNet model)"),_7r=l(),r9=a("li"),WTe=a("strong"),u7r=o("rembert"),b7r=o(" \u2014 "),eJ=a("a"),v7r=o("TFRemBertModel"),F7r=o(" (RemBERT model)"),T7r=l(),t9=a("li"),HTe=a("strong"),M7r=o("resnet"),E7r=o(" \u2014 "),oJ=a("a"),C7r=o("TFResNetModel"),w7r=o(" (ResNet model)"),A7r=l(),a9=a("li"),UTe=a("strong"),L7r=o("roberta"),y7r=o(" \u2014 "),rJ=a("a"),x7r=o("TFRobertaModel"),$7r=o(" (RoBERTa model)"),k7r=l(),n9=a("li"),JTe=a("strong"),S7r=o("roformer"),R7r=o(" \u2014 "),tJ=a("a"),P7r=o("TFRoFormerModel"),B7r=o(" (RoFormer model)"),N7r=l(),s9=a("li"),YTe=a("strong"),I7r=o("speech_to_text"),q7r=o(" \u2014 "),aJ=a("a"),j7r=o("TFSpeech2TextModel"),D7r=o(" (Speech2Text model)"),G7r=l(),l9=a("li"),KTe=a("strong"),O7r=o("swin"),V7r=o(" \u2014 "),nJ=a("a"),X7r=o("TFSwinModel"),z7r=o(" (Swin Transformer model)"),Q7r=l(),i9=a("li"),ZTe=a("strong"),W7r=o("t5"),H7r=o(" \u2014 "),sJ=a("a"),U7r=o("TFT5Model"),J7r=o(" (T5 model)"),Y7r=l(),d9=a("li"),e7e=a("strong"),K7r=o("tapas"),Z7r=o(" \u2014 "),lJ=a("a"),e8r=o("TFTapasModel"),o8r=o(" (TAPAS model)"),r8r=l(),c9=a("li"),o7e=a("strong"),t8r=o("transfo-xl"),a8r=o(" \u2014 "),iJ=a("a"),n8r=o("TFTransfoXLModel"),s8r=o(" (Transformer-XL model)"),l8r=l(),f9=a("li"),r7e=a("strong"),i8r=o("vit"),d8r=o(" \u2014 "),dJ=a("a"),c8r=o("TFViTModel"),f8r=o(" (ViT model)"),m8r=l(),m9=a("li"),t7e=a("strong"),g8r=o("vit_mae"),h8r=o(" \u2014 "),cJ=a("a"),p8r=o("TFViTMAEModel"),_8r=o(" (ViTMAE model)"),u8r=l(),g9=a("li"),a7e=a("strong"),b8r=o("wav2vec2"),v8r=o(" \u2014 "),fJ=a("a"),F8r=o("TFWav2Vec2Model"),T8r=o(" (Wav2Vec2 model)"),M8r=l(),h9=a("li"),n7e=a("strong"),E8r=o("xlm"),C8r=o(" \u2014 "),mJ=a("a"),w8r=o("TFXLMModel"),A8r=o(" (XLM model)"),L8r=l(),p9=a("li"),s7e=a("strong"),y8r=o("xlm-roberta"),x8r=o(" \u2014 "),gJ=a("a"),$8r=o("TFXLMRobertaModel"),k8r=o(" (XLM-RoBERTa model)"),S8r=l(),_9=a("li"),l7e=a("strong"),R8r=o("xlnet"),P8r=o(" \u2014 "),hJ=a("a"),B8r=o("TFXLNetModel"),N8r=o(" (XLNet model)"),I8r=l(),F(u9.$$.fragment),vze=l(),cc=a("h2"),b9=a("a"),i7e=a("span"),F(Ky.$$.fragment),q8r=l(),d7e=a("span"),j8r=o("TFAutoModelForPreTraining"),Fze=l(),rr=a("div"),F(Zy.$$.fragment),D8r=l(),fc=a("p"),G8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pJ=a("a"),O8r=o("from_pretrained()"),V8r=o(" class method or the "),_J=a("a"),X8r=o("from_config()"),z8r=o(` class
method.`),Q8r=l(),ex=a("p"),W8r=o("This class cannot be instantiated directly using "),c7e=a("code"),H8r=o("__init__()"),U8r=o(" (throws an error)."),J8r=l(),Pt=a("div"),F(ox.$$.fragment),Y8r=l(),f7e=a("p"),K8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Z8r=l(),mc=a("p"),e9r=o(`Note:
Loading a model from its configuration file does `),m7e=a("strong"),o9r=o("not"),r9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),t9r=o("from_pretrained()"),a9r=o(" to load the model weights."),n9r=l(),F(v9.$$.fragment),s9r=l(),$r=a("div"),F(rx.$$.fragment),l9r=l(),g7e=a("p"),i9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),d9r=l(),ln=a("p"),c9r=o("The model class to instantiate is selected based on the "),h7e=a("code"),f9r=o("model_type"),m9r=o(` property of the config object (either
passed as an argument or loaded from `),p7e=a("code"),g9r=o("pretrained_model_name_or_path"),h9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_7e=a("code"),p9r=o("pretrained_model_name_or_path"),_9r=o(":"),u9r=l(),se=a("ul"),F9=a("li"),u7e=a("strong"),b9r=o("albert"),v9r=o(" \u2014 "),bJ=a("a"),F9r=o("TFAlbertForPreTraining"),T9r=o(" (ALBERT model)"),M9r=l(),T9=a("li"),b7e=a("strong"),E9r=o("bart"),C9r=o(" \u2014 "),vJ=a("a"),w9r=o("TFBartForConditionalGeneration"),A9r=o(" (BART model)"),L9r=l(),M9=a("li"),v7e=a("strong"),y9r=o("bert"),x9r=o(" \u2014 "),FJ=a("a"),$9r=o("TFBertForPreTraining"),k9r=o(" (BERT model)"),S9r=l(),E9=a("li"),F7e=a("strong"),R9r=o("camembert"),P9r=o(" \u2014 "),TJ=a("a"),B9r=o("TFCamembertForMaskedLM"),N9r=o(" (CamemBERT model)"),I9r=l(),C9=a("li"),T7e=a("strong"),q9r=o("ctrl"),j9r=o(" \u2014 "),MJ=a("a"),D9r=o("TFCTRLLMHeadModel"),G9r=o(" (CTRL model)"),O9r=l(),w9=a("li"),M7e=a("strong"),V9r=o("distilbert"),X9r=o(" \u2014 "),EJ=a("a"),z9r=o("TFDistilBertForMaskedLM"),Q9r=o(" (DistilBERT model)"),W9r=l(),A9=a("li"),E7e=a("strong"),H9r=o("electra"),U9r=o(" \u2014 "),CJ=a("a"),J9r=o("TFElectraForPreTraining"),Y9r=o(" (ELECTRA model)"),K9r=l(),L9=a("li"),C7e=a("strong"),Z9r=o("flaubert"),eMr=o(" \u2014 "),wJ=a("a"),oMr=o("TFFlaubertWithLMHeadModel"),rMr=o(" (FlauBERT model)"),tMr=l(),y9=a("li"),w7e=a("strong"),aMr=o("funnel"),nMr=o(" \u2014 "),AJ=a("a"),sMr=o("TFFunnelForPreTraining"),lMr=o(" (Funnel Transformer model)"),iMr=l(),x9=a("li"),A7e=a("strong"),dMr=o("gpt2"),cMr=o(" \u2014 "),LJ=a("a"),fMr=o("TFGPT2LMHeadModel"),mMr=o(" (OpenAI GPT-2 model)"),gMr=l(),$9=a("li"),L7e=a("strong"),hMr=o("layoutlm"),pMr=o(" \u2014 "),yJ=a("a"),_Mr=o("TFLayoutLMForMaskedLM"),uMr=o(" (LayoutLM model)"),bMr=l(),k9=a("li"),y7e=a("strong"),vMr=o("lxmert"),FMr=o(" \u2014 "),xJ=a("a"),TMr=o("TFLxmertForPreTraining"),MMr=o(" (LXMERT model)"),EMr=l(),S9=a("li"),x7e=a("strong"),CMr=o("mobilebert"),wMr=o(" \u2014 "),$J=a("a"),AMr=o("TFMobileBertForPreTraining"),LMr=o(" (MobileBERT model)"),yMr=l(),R9=a("li"),$7e=a("strong"),xMr=o("mpnet"),$Mr=o(" \u2014 "),kJ=a("a"),kMr=o("TFMPNetForMaskedLM"),SMr=o(" (MPNet model)"),RMr=l(),P9=a("li"),k7e=a("strong"),PMr=o("openai-gpt"),BMr=o(" \u2014 "),SJ=a("a"),NMr=o("TFOpenAIGPTLMHeadModel"),IMr=o(" (OpenAI GPT model)"),qMr=l(),B9=a("li"),S7e=a("strong"),jMr=o("roberta"),DMr=o(" \u2014 "),RJ=a("a"),GMr=o("TFRobertaForMaskedLM"),OMr=o(" (RoBERTa model)"),VMr=l(),N9=a("li"),R7e=a("strong"),XMr=o("t5"),zMr=o(" \u2014 "),PJ=a("a"),QMr=o("TFT5ForConditionalGeneration"),WMr=o(" (T5 model)"),HMr=l(),I9=a("li"),P7e=a("strong"),UMr=o("tapas"),JMr=o(" \u2014 "),BJ=a("a"),YMr=o("TFTapasForMaskedLM"),KMr=o(" (TAPAS model)"),ZMr=l(),q9=a("li"),B7e=a("strong"),e4r=o("transfo-xl"),o4r=o(" \u2014 "),NJ=a("a"),r4r=o("TFTransfoXLLMHeadModel"),t4r=o(" (Transformer-XL model)"),a4r=l(),j9=a("li"),N7e=a("strong"),n4r=o("vit_mae"),s4r=o(" \u2014 "),IJ=a("a"),l4r=o("TFViTMAEForPreTraining"),i4r=o(" (ViTMAE model)"),d4r=l(),D9=a("li"),I7e=a("strong"),c4r=o("xlm"),f4r=o(" \u2014 "),qJ=a("a"),m4r=o("TFXLMWithLMHeadModel"),g4r=o(" (XLM model)"),h4r=l(),G9=a("li"),q7e=a("strong"),p4r=o("xlm-roberta"),_4r=o(" \u2014 "),jJ=a("a"),u4r=o("TFXLMRobertaForMaskedLM"),b4r=o(" (XLM-RoBERTa model)"),v4r=l(),O9=a("li"),j7e=a("strong"),F4r=o("xlnet"),T4r=o(" \u2014 "),DJ=a("a"),M4r=o("TFXLNetLMHeadModel"),E4r=o(" (XLNet model)"),C4r=l(),F(V9.$$.fragment),Tze=l(),gc=a("h2"),X9=a("a"),D7e=a("span"),F(tx.$$.fragment),w4r=l(),G7e=a("span"),A4r=o("TFAutoModelForCausalLM"),Mze=l(),tr=a("div"),F(ax.$$.fragment),L4r=l(),hc=a("p"),y4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GJ=a("a"),x4r=o("from_pretrained()"),$4r=o(" class method or the "),OJ=a("a"),k4r=o("from_config()"),S4r=o(` class
method.`),R4r=l(),nx=a("p"),P4r=o("This class cannot be instantiated directly using "),O7e=a("code"),B4r=o("__init__()"),N4r=o(" (throws an error)."),I4r=l(),Bt=a("div"),F(sx.$$.fragment),q4r=l(),V7e=a("p"),j4r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),D4r=l(),pc=a("p"),G4r=o(`Note:
Loading a model from its configuration file does `),X7e=a("strong"),O4r=o("not"),V4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),X4r=o("from_pretrained()"),z4r=o(" to load the model weights."),Q4r=l(),F(z9.$$.fragment),W4r=l(),kr=a("div"),F(lx.$$.fragment),H4r=l(),z7e=a("p"),U4r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),J4r=l(),dn=a("p"),Y4r=o("The model class to instantiate is selected based on the "),Q7e=a("code"),K4r=o("model_type"),Z4r=o(` property of the config object (either
passed as an argument or loaded from `),W7e=a("code"),eEr=o("pretrained_model_name_or_path"),oEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H7e=a("code"),rEr=o("pretrained_model_name_or_path"),tEr=o(":"),aEr=l(),Me=a("ul"),Q9=a("li"),U7e=a("strong"),nEr=o("bert"),sEr=o(" \u2014 "),XJ=a("a"),lEr=o("TFBertLMHeadModel"),iEr=o(" (BERT model)"),dEr=l(),W9=a("li"),J7e=a("strong"),cEr=o("camembert"),fEr=o(" \u2014 "),zJ=a("a"),mEr=o("TFCamembertForCausalLM"),gEr=o(" (CamemBERT model)"),hEr=l(),H9=a("li"),Y7e=a("strong"),pEr=o("ctrl"),_Er=o(" \u2014 "),QJ=a("a"),uEr=o("TFCTRLLMHeadModel"),bEr=o(" (CTRL model)"),vEr=l(),U9=a("li"),K7e=a("strong"),FEr=o("gpt2"),TEr=o(" \u2014 "),WJ=a("a"),MEr=o("TFGPT2LMHeadModel"),EEr=o(" (OpenAI GPT-2 model)"),CEr=l(),J9=a("li"),Z7e=a("strong"),wEr=o("gptj"),AEr=o(" \u2014 "),HJ=a("a"),LEr=o("TFGPTJForCausalLM"),yEr=o(" (GPT-J model)"),xEr=l(),Y9=a("li"),e8e=a("strong"),$Er=o("openai-gpt"),kEr=o(" \u2014 "),UJ=a("a"),SEr=o("TFOpenAIGPTLMHeadModel"),REr=o(" (OpenAI GPT model)"),PEr=l(),K9=a("li"),o8e=a("strong"),BEr=o("opt"),NEr=o(" \u2014 "),JJ=a("a"),IEr=o("TFOPTForCausalLM"),qEr=o(" (OPT model)"),jEr=l(),Z9=a("li"),r8e=a("strong"),DEr=o("rembert"),GEr=o(" \u2014 "),YJ=a("a"),OEr=o("TFRemBertForCausalLM"),VEr=o(" (RemBERT model)"),XEr=l(),eM=a("li"),t8e=a("strong"),zEr=o("roberta"),QEr=o(" \u2014 "),KJ=a("a"),WEr=o("TFRobertaForCausalLM"),HEr=o(" (RoBERTa model)"),UEr=l(),oM=a("li"),a8e=a("strong"),JEr=o("roformer"),YEr=o(" \u2014 "),ZJ=a("a"),KEr=o("TFRoFormerForCausalLM"),ZEr=o(" (RoFormer model)"),eCr=l(),rM=a("li"),n8e=a("strong"),oCr=o("transfo-xl"),rCr=o(" \u2014 "),eY=a("a"),tCr=o("TFTransfoXLLMHeadModel"),aCr=o(" (Transformer-XL model)"),nCr=l(),tM=a("li"),s8e=a("strong"),sCr=o("xlm"),lCr=o(" \u2014 "),oY=a("a"),iCr=o("TFXLMWithLMHeadModel"),dCr=o(" (XLM model)"),cCr=l(),aM=a("li"),l8e=a("strong"),fCr=o("xlnet"),mCr=o(" \u2014 "),rY=a("a"),gCr=o("TFXLNetLMHeadModel"),hCr=o(" (XLNet model)"),pCr=l(),F(nM.$$.fragment),Eze=l(),_c=a("h2"),sM=a("a"),i8e=a("span"),F(ix.$$.fragment),_Cr=l(),d8e=a("span"),uCr=o("TFAutoModelForImageClassification"),Cze=l(),ar=a("div"),F(dx.$$.fragment),bCr=l(),uc=a("p"),vCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tY=a("a"),FCr=o("from_pretrained()"),TCr=o(" class method or the "),aY=a("a"),MCr=o("from_config()"),ECr=o(` class
method.`),CCr=l(),cx=a("p"),wCr=o("This class cannot be instantiated directly using "),c8e=a("code"),ACr=o("__init__()"),LCr=o(" (throws an error)."),yCr=l(),Nt=a("div"),F(fx.$$.fragment),xCr=l(),f8e=a("p"),$Cr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kCr=l(),bc=a("p"),SCr=o(`Note:
Loading a model from its configuration file does `),m8e=a("strong"),RCr=o("not"),PCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),BCr=o("from_pretrained()"),NCr=o(" to load the model weights."),ICr=l(),F(lM.$$.fragment),qCr=l(),Sr=a("div"),F(mx.$$.fragment),jCr=l(),g8e=a("p"),DCr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GCr=l(),cn=a("p"),OCr=o("The model class to instantiate is selected based on the "),h8e=a("code"),VCr=o("model_type"),XCr=o(` property of the config object (either
passed as an argument or loaded from `),p8e=a("code"),zCr=o("pretrained_model_name_or_path"),QCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=a("code"),WCr=o("pretrained_model_name_or_path"),HCr=o(":"),UCr=l(),Qe=a("ul"),iM=a("li"),u8e=a("strong"),JCr=o("convnext"),YCr=o(" \u2014 "),sY=a("a"),KCr=o("TFConvNextForImageClassification"),ZCr=o(" (ConvNeXT model)"),e3r=l(),dM=a("li"),b8e=a("strong"),o3r=o("data2vec-vision"),r3r=o(" \u2014 "),lY=a("a"),t3r=o("TFData2VecVisionForImageClassification"),a3r=o(" (Data2VecVision model)"),n3r=l(),Ks=a("li"),v8e=a("strong"),s3r=o("deit"),l3r=o(" \u2014 "),iY=a("a"),i3r=o("TFDeiTForImageClassification"),d3r=o(" or "),dY=a("a"),c3r=o("TFDeiTForImageClassificationWithTeacher"),f3r=o(" (DeiT model)"),m3r=l(),cM=a("li"),F8e=a("strong"),g3r=o("regnet"),h3r=o(" \u2014 "),cY=a("a"),p3r=o("TFRegNetForImageClassification"),_3r=o(" (RegNet model)"),u3r=l(),fM=a("li"),T8e=a("strong"),b3r=o("resnet"),v3r=o(" \u2014 "),fY=a("a"),F3r=o("TFResNetForImageClassification"),T3r=o(" (ResNet model)"),M3r=l(),mM=a("li"),M8e=a("strong"),E3r=o("swin"),C3r=o(" \u2014 "),mY=a("a"),w3r=o("TFSwinForImageClassification"),A3r=o(" (Swin Transformer model)"),L3r=l(),gM=a("li"),E8e=a("strong"),y3r=o("vit"),x3r=o(" \u2014 "),gY=a("a"),$3r=o("TFViTForImageClassification"),k3r=o(" (ViT model)"),S3r=l(),F(hM.$$.fragment),wze=l(),vc=a("h2"),pM=a("a"),C8e=a("span"),F(gx.$$.fragment),R3r=l(),w8e=a("span"),P3r=o("TFAutoModelForMaskedLM"),Aze=l(),nr=a("div"),F(hx.$$.fragment),B3r=l(),Fc=a("p"),N3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hY=a("a"),I3r=o("from_pretrained()"),q3r=o(" class method or the "),pY=a("a"),j3r=o("from_config()"),D3r=o(` class
method.`),G3r=l(),px=a("p"),O3r=o("This class cannot be instantiated directly using "),A8e=a("code"),V3r=o("__init__()"),X3r=o(" (throws an error)."),z3r=l(),It=a("div"),F(_x.$$.fragment),Q3r=l(),L8e=a("p"),W3r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),H3r=l(),Tc=a("p"),U3r=o(`Note:
Loading a model from its configuration file does `),y8e=a("strong"),J3r=o("not"),Y3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=a("a"),K3r=o("from_pretrained()"),Z3r=o(" to load the model weights."),e5r=l(),F(_M.$$.fragment),o5r=l(),Rr=a("div"),F(ux.$$.fragment),r5r=l(),x8e=a("p"),t5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),a5r=l(),fn=a("p"),n5r=o("The model class to instantiate is selected based on the "),$8e=a("code"),s5r=o("model_type"),l5r=o(` property of the config object (either
passed as an argument or loaded from `),k8e=a("code"),i5r=o("pretrained_model_name_or_path"),d5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S8e=a("code"),c5r=o("pretrained_model_name_or_path"),f5r=o(":"),m5r=l(),ie=a("ul"),uM=a("li"),R8e=a("strong"),g5r=o("albert"),h5r=o(" \u2014 "),uY=a("a"),p5r=o("TFAlbertForMaskedLM"),_5r=o(" (ALBERT model)"),u5r=l(),bM=a("li"),P8e=a("strong"),b5r=o("bert"),v5r=o(" \u2014 "),bY=a("a"),F5r=o("TFBertForMaskedLM"),T5r=o(" (BERT model)"),M5r=l(),vM=a("li"),B8e=a("strong"),E5r=o("camembert"),C5r=o(" \u2014 "),vY=a("a"),w5r=o("TFCamembertForMaskedLM"),A5r=o(" (CamemBERT model)"),L5r=l(),FM=a("li"),N8e=a("strong"),y5r=o("convbert"),x5r=o(" \u2014 "),FY=a("a"),$5r=o("TFConvBertForMaskedLM"),k5r=o(" (ConvBERT model)"),S5r=l(),TM=a("li"),I8e=a("strong"),R5r=o("deberta"),P5r=o(" \u2014 "),TY=a("a"),B5r=o("TFDebertaForMaskedLM"),N5r=o(" (DeBERTa model)"),I5r=l(),MM=a("li"),q8e=a("strong"),q5r=o("deberta-v2"),j5r=o(" \u2014 "),MY=a("a"),D5r=o("TFDebertaV2ForMaskedLM"),G5r=o(" (DeBERTa-v2 model)"),O5r=l(),EM=a("li"),j8e=a("strong"),V5r=o("distilbert"),X5r=o(" \u2014 "),EY=a("a"),z5r=o("TFDistilBertForMaskedLM"),Q5r=o(" (DistilBERT model)"),W5r=l(),CM=a("li"),D8e=a("strong"),H5r=o("electra"),U5r=o(" \u2014 "),CY=a("a"),J5r=o("TFElectraForMaskedLM"),Y5r=o(" (ELECTRA model)"),K5r=l(),wM=a("li"),G8e=a("strong"),Z5r=o("flaubert"),ewr=o(" \u2014 "),wY=a("a"),owr=o("TFFlaubertWithLMHeadModel"),rwr=o(" (FlauBERT model)"),twr=l(),AM=a("li"),O8e=a("strong"),awr=o("funnel"),nwr=o(" \u2014 "),AY=a("a"),swr=o("TFFunnelForMaskedLM"),lwr=o(" (Funnel Transformer model)"),iwr=l(),LM=a("li"),V8e=a("strong"),dwr=o("layoutlm"),cwr=o(" \u2014 "),LY=a("a"),fwr=o("TFLayoutLMForMaskedLM"),mwr=o(" (LayoutLM model)"),gwr=l(),yM=a("li"),X8e=a("strong"),hwr=o("longformer"),pwr=o(" \u2014 "),yY=a("a"),_wr=o("TFLongformerForMaskedLM"),uwr=o(" (Longformer model)"),bwr=l(),xM=a("li"),z8e=a("strong"),vwr=o("mobilebert"),Fwr=o(" \u2014 "),xY=a("a"),Twr=o("TFMobileBertForMaskedLM"),Mwr=o(" (MobileBERT model)"),Ewr=l(),$M=a("li"),Q8e=a("strong"),Cwr=o("mpnet"),wwr=o(" \u2014 "),$Y=a("a"),Awr=o("TFMPNetForMaskedLM"),Lwr=o(" (MPNet model)"),ywr=l(),kM=a("li"),W8e=a("strong"),xwr=o("rembert"),$wr=o(" \u2014 "),kY=a("a"),kwr=o("TFRemBertForMaskedLM"),Swr=o(" (RemBERT model)"),Rwr=l(),SM=a("li"),H8e=a("strong"),Pwr=o("roberta"),Bwr=o(" \u2014 "),SY=a("a"),Nwr=o("TFRobertaForMaskedLM"),Iwr=o(" (RoBERTa model)"),qwr=l(),RM=a("li"),U8e=a("strong"),jwr=o("roformer"),Dwr=o(" \u2014 "),RY=a("a"),Gwr=o("TFRoFormerForMaskedLM"),Owr=o(" (RoFormer model)"),Vwr=l(),PM=a("li"),J8e=a("strong"),Xwr=o("tapas"),zwr=o(" \u2014 "),PY=a("a"),Qwr=o("TFTapasForMaskedLM"),Wwr=o(" (TAPAS model)"),Hwr=l(),BM=a("li"),Y8e=a("strong"),Uwr=o("xlm"),Jwr=o(" \u2014 "),BY=a("a"),Ywr=o("TFXLMWithLMHeadModel"),Kwr=o(" (XLM model)"),Zwr=l(),NM=a("li"),K8e=a("strong"),eAr=o("xlm-roberta"),oAr=o(" \u2014 "),NY=a("a"),rAr=o("TFXLMRobertaForMaskedLM"),tAr=o(" (XLM-RoBERTa model)"),aAr=l(),F(IM.$$.fragment),Lze=l(),Mc=a("h2"),qM=a("a"),Z8e=a("span"),F(bx.$$.fragment),nAr=l(),e9e=a("span"),sAr=o("TFAutoModelForSeq2SeqLM"),yze=l(),sr=a("div"),F(vx.$$.fragment),lAr=l(),Ec=a("p"),iAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IY=a("a"),dAr=o("from_pretrained()"),cAr=o(" class method or the "),qY=a("a"),fAr=o("from_config()"),mAr=o(` class
method.`),gAr=l(),Fx=a("p"),hAr=o("This class cannot be instantiated directly using "),o9e=a("code"),pAr=o("__init__()"),_Ar=o(" (throws an error)."),uAr=l(),qt=a("div"),F(Tx.$$.fragment),bAr=l(),r9e=a("p"),vAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FAr=l(),Cc=a("p"),TAr=o(`Note:
Loading a model from its configuration file does `),t9e=a("strong"),MAr=o("not"),EAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=a("a"),CAr=o("from_pretrained()"),wAr=o(" to load the model weights."),AAr=l(),F(jM.$$.fragment),LAr=l(),Pr=a("div"),F(Mx.$$.fragment),yAr=l(),a9e=a("p"),xAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Ar=l(),mn=a("p"),kAr=o("The model class to instantiate is selected based on the "),n9e=a("code"),SAr=o("model_type"),RAr=o(` property of the config object (either
passed as an argument or loaded from `),s9e=a("code"),PAr=o("pretrained_model_name_or_path"),BAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l9e=a("code"),NAr=o("pretrained_model_name_or_path"),IAr=o(":"),qAr=l(),ye=a("ul"),DM=a("li"),i9e=a("strong"),jAr=o("bart"),DAr=o(" \u2014 "),DY=a("a"),GAr=o("TFBartForConditionalGeneration"),OAr=o(" (BART model)"),VAr=l(),GM=a("li"),d9e=a("strong"),XAr=o("blenderbot"),zAr=o(" \u2014 "),GY=a("a"),QAr=o("TFBlenderbotForConditionalGeneration"),WAr=o(" (Blenderbot model)"),HAr=l(),OM=a("li"),c9e=a("strong"),UAr=o("blenderbot-small"),JAr=o(" \u2014 "),OY=a("a"),YAr=o("TFBlenderbotSmallForConditionalGeneration"),KAr=o(" (BlenderbotSmall model)"),ZAr=l(),VM=a("li"),f9e=a("strong"),e6r=o("encoder-decoder"),o6r=o(" \u2014 "),VY=a("a"),r6r=o("TFEncoderDecoderModel"),t6r=o(" (Encoder decoder model)"),a6r=l(),XM=a("li"),m9e=a("strong"),n6r=o("led"),s6r=o(" \u2014 "),XY=a("a"),l6r=o("TFLEDForConditionalGeneration"),i6r=o(" (LED model)"),d6r=l(),zM=a("li"),g9e=a("strong"),c6r=o("marian"),f6r=o(" \u2014 "),zY=a("a"),m6r=o("TFMarianMTModel"),g6r=o(" (Marian model)"),h6r=l(),QM=a("li"),h9e=a("strong"),p6r=o("mbart"),_6r=o(" \u2014 "),QY=a("a"),u6r=o("TFMBartForConditionalGeneration"),b6r=o(" (mBART model)"),v6r=l(),WM=a("li"),p9e=a("strong"),F6r=o("mt5"),T6r=o(" \u2014 "),WY=a("a"),M6r=o("TFMT5ForConditionalGeneration"),E6r=o(" (MT5 model)"),C6r=l(),HM=a("li"),_9e=a("strong"),w6r=o("pegasus"),A6r=o(" \u2014 "),HY=a("a"),L6r=o("TFPegasusForConditionalGeneration"),y6r=o(" (Pegasus model)"),x6r=l(),UM=a("li"),u9e=a("strong"),$6r=o("t5"),k6r=o(" \u2014 "),UY=a("a"),S6r=o("TFT5ForConditionalGeneration"),R6r=o(" (T5 model)"),P6r=l(),F(JM.$$.fragment),xze=l(),wc=a("h2"),YM=a("a"),b9e=a("span"),F(Ex.$$.fragment),B6r=l(),v9e=a("span"),N6r=o("TFAutoModelForSequenceClassification"),$ze=l(),lr=a("div"),F(Cx.$$.fragment),I6r=l(),Ac=a("p"),q6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JY=a("a"),j6r=o("from_pretrained()"),D6r=o(" class method or the "),YY=a("a"),G6r=o("from_config()"),O6r=o(` class
method.`),V6r=l(),wx=a("p"),X6r=o("This class cannot be instantiated directly using "),F9e=a("code"),z6r=o("__init__()"),Q6r=o(" (throws an error)."),W6r=l(),jt=a("div"),F(Ax.$$.fragment),H6r=l(),T9e=a("p"),U6r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),J6r=l(),Lc=a("p"),Y6r=o(`Note:
Loading a model from its configuration file does `),M9e=a("strong"),K6r=o("not"),Z6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=a("a"),eLr=o("from_pretrained()"),oLr=o(" to load the model weights."),rLr=l(),F(KM.$$.fragment),tLr=l(),Br=a("div"),F(Lx.$$.fragment),aLr=l(),E9e=a("p"),nLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sLr=l(),gn=a("p"),lLr=o("The model class to instantiate is selected based on the "),C9e=a("code"),iLr=o("model_type"),dLr=o(` property of the config object (either
passed as an argument or loaded from `),w9e=a("code"),cLr=o("pretrained_model_name_or_path"),fLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A9e=a("code"),mLr=o("pretrained_model_name_or_path"),gLr=o(":"),hLr=l(),te=a("ul"),ZM=a("li"),L9e=a("strong"),pLr=o("albert"),_Lr=o(" \u2014 "),ZY=a("a"),uLr=o("TFAlbertForSequenceClassification"),bLr=o(" (ALBERT model)"),vLr=l(),e4=a("li"),y9e=a("strong"),FLr=o("bert"),TLr=o(" \u2014 "),eK=a("a"),MLr=o("TFBertForSequenceClassification"),ELr=o(" (BERT model)"),CLr=l(),o4=a("li"),x9e=a("strong"),wLr=o("camembert"),ALr=o(" \u2014 "),oK=a("a"),LLr=o("TFCamembertForSequenceClassification"),yLr=o(" (CamemBERT model)"),xLr=l(),r4=a("li"),$9e=a("strong"),$Lr=o("convbert"),kLr=o(" \u2014 "),rK=a("a"),SLr=o("TFConvBertForSequenceClassification"),RLr=o(" (ConvBERT model)"),PLr=l(),t4=a("li"),k9e=a("strong"),BLr=o("ctrl"),NLr=o(" \u2014 "),tK=a("a"),ILr=o("TFCTRLForSequenceClassification"),qLr=o(" (CTRL model)"),jLr=l(),a4=a("li"),S9e=a("strong"),DLr=o("deberta"),GLr=o(" \u2014 "),aK=a("a"),OLr=o("TFDebertaForSequenceClassification"),VLr=o(" (DeBERTa model)"),XLr=l(),n4=a("li"),R9e=a("strong"),zLr=o("deberta-v2"),QLr=o(" \u2014 "),nK=a("a"),WLr=o("TFDebertaV2ForSequenceClassification"),HLr=o(" (DeBERTa-v2 model)"),ULr=l(),s4=a("li"),P9e=a("strong"),JLr=o("distilbert"),YLr=o(" \u2014 "),sK=a("a"),KLr=o("TFDistilBertForSequenceClassification"),ZLr=o(" (DistilBERT model)"),eyr=l(),l4=a("li"),B9e=a("strong"),oyr=o("electra"),ryr=o(" \u2014 "),lK=a("a"),tyr=o("TFElectraForSequenceClassification"),ayr=o(" (ELECTRA model)"),nyr=l(),i4=a("li"),N9e=a("strong"),syr=o("flaubert"),lyr=o(" \u2014 "),iK=a("a"),iyr=o("TFFlaubertForSequenceClassification"),dyr=o(" (FlauBERT model)"),cyr=l(),d4=a("li"),I9e=a("strong"),fyr=o("funnel"),myr=o(" \u2014 "),dK=a("a"),gyr=o("TFFunnelForSequenceClassification"),hyr=o(" (Funnel Transformer model)"),pyr=l(),c4=a("li"),q9e=a("strong"),_yr=o("gpt2"),uyr=o(" \u2014 "),cK=a("a"),byr=o("TFGPT2ForSequenceClassification"),vyr=o(" (OpenAI GPT-2 model)"),Fyr=l(),f4=a("li"),j9e=a("strong"),Tyr=o("gptj"),Myr=o(" \u2014 "),fK=a("a"),Eyr=o("TFGPTJForSequenceClassification"),Cyr=o(" (GPT-J model)"),wyr=l(),m4=a("li"),D9e=a("strong"),Ayr=o("layoutlm"),Lyr=o(" \u2014 "),mK=a("a"),yyr=o("TFLayoutLMForSequenceClassification"),xyr=o(" (LayoutLM model)"),$yr=l(),g4=a("li"),G9e=a("strong"),kyr=o("longformer"),Syr=o(" \u2014 "),gK=a("a"),Ryr=o("TFLongformerForSequenceClassification"),Pyr=o(" (Longformer model)"),Byr=l(),h4=a("li"),O9e=a("strong"),Nyr=o("mobilebert"),Iyr=o(" \u2014 "),hK=a("a"),qyr=o("TFMobileBertForSequenceClassification"),jyr=o(" (MobileBERT model)"),Dyr=l(),p4=a("li"),V9e=a("strong"),Gyr=o("mpnet"),Oyr=o(" \u2014 "),pK=a("a"),Vyr=o("TFMPNetForSequenceClassification"),Xyr=o(" (MPNet model)"),zyr=l(),_4=a("li"),X9e=a("strong"),Qyr=o("openai-gpt"),Wyr=o(" \u2014 "),_K=a("a"),Hyr=o("TFOpenAIGPTForSequenceClassification"),Uyr=o(" (OpenAI GPT model)"),Jyr=l(),u4=a("li"),z9e=a("strong"),Yyr=o("rembert"),Kyr=o(" \u2014 "),uK=a("a"),Zyr=o("TFRemBertForSequenceClassification"),exr=o(" (RemBERT model)"),oxr=l(),b4=a("li"),Q9e=a("strong"),rxr=o("roberta"),txr=o(" \u2014 "),bK=a("a"),axr=o("TFRobertaForSequenceClassification"),nxr=o(" (RoBERTa model)"),sxr=l(),v4=a("li"),W9e=a("strong"),lxr=o("roformer"),ixr=o(" \u2014 "),vK=a("a"),dxr=o("TFRoFormerForSequenceClassification"),cxr=o(" (RoFormer model)"),fxr=l(),F4=a("li"),H9e=a("strong"),mxr=o("tapas"),gxr=o(" \u2014 "),FK=a("a"),hxr=o("TFTapasForSequenceClassification"),pxr=o(" (TAPAS model)"),_xr=l(),T4=a("li"),U9e=a("strong"),uxr=o("transfo-xl"),bxr=o(" \u2014 "),TK=a("a"),vxr=o("TFTransfoXLForSequenceClassification"),Fxr=o(" (Transformer-XL model)"),Txr=l(),M4=a("li"),J9e=a("strong"),Mxr=o("xlm"),Exr=o(" \u2014 "),MK=a("a"),Cxr=o("TFXLMForSequenceClassification"),wxr=o(" (XLM model)"),Axr=l(),E4=a("li"),Y9e=a("strong"),Lxr=o("xlm-roberta"),yxr=o(" \u2014 "),EK=a("a"),xxr=o("TFXLMRobertaForSequenceClassification"),$xr=o(" (XLM-RoBERTa model)"),kxr=l(),C4=a("li"),K9e=a("strong"),Sxr=o("xlnet"),Rxr=o(" \u2014 "),CK=a("a"),Pxr=o("TFXLNetForSequenceClassification"),Bxr=o(" (XLNet model)"),Nxr=l(),F(w4.$$.fragment),kze=l(),yc=a("h2"),A4=a("a"),Z9e=a("span"),F(yx.$$.fragment),Ixr=l(),eMe=a("span"),qxr=o("TFAutoModelForMultipleChoice"),Sze=l(),ir=a("div"),F(xx.$$.fragment),jxr=l(),xc=a("p"),Dxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wK=a("a"),Gxr=o("from_pretrained()"),Oxr=o(" class method or the "),AK=a("a"),Vxr=o("from_config()"),Xxr=o(` class
method.`),zxr=l(),$x=a("p"),Qxr=o("This class cannot be instantiated directly using "),oMe=a("code"),Wxr=o("__init__()"),Hxr=o(" (throws an error)."),Uxr=l(),Dt=a("div"),F(kx.$$.fragment),Jxr=l(),rMe=a("p"),Yxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Kxr=l(),$c=a("p"),Zxr=o(`Note:
Loading a model from its configuration file does `),tMe=a("strong"),e$r=o("not"),o$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=a("a"),r$r=o("from_pretrained()"),t$r=o(" to load the model weights."),a$r=l(),F(L4.$$.fragment),n$r=l(),Nr=a("div"),F(Sx.$$.fragment),s$r=l(),aMe=a("p"),l$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),i$r=l(),hn=a("p"),d$r=o("The model class to instantiate is selected based on the "),nMe=a("code"),c$r=o("model_type"),f$r=o(` property of the config object (either
passed as an argument or loaded from `),sMe=a("code"),m$r=o("pretrained_model_name_or_path"),g$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=a("code"),h$r=o("pretrained_model_name_or_path"),p$r=o(":"),_$r=l(),ue=a("ul"),y4=a("li"),iMe=a("strong"),u$r=o("albert"),b$r=o(" \u2014 "),yK=a("a"),v$r=o("TFAlbertForMultipleChoice"),F$r=o(" (ALBERT model)"),T$r=l(),x4=a("li"),dMe=a("strong"),M$r=o("bert"),E$r=o(" \u2014 "),xK=a("a"),C$r=o("TFBertForMultipleChoice"),w$r=o(" (BERT model)"),A$r=l(),$4=a("li"),cMe=a("strong"),L$r=o("camembert"),y$r=o(" \u2014 "),$K=a("a"),x$r=o("TFCamembertForMultipleChoice"),$$r=o(" (CamemBERT model)"),k$r=l(),k4=a("li"),fMe=a("strong"),S$r=o("convbert"),R$r=o(" \u2014 "),kK=a("a"),P$r=o("TFConvBertForMultipleChoice"),B$r=o(" (ConvBERT model)"),N$r=l(),S4=a("li"),mMe=a("strong"),I$r=o("distilbert"),q$r=o(" \u2014 "),SK=a("a"),j$r=o("TFDistilBertForMultipleChoice"),D$r=o(" (DistilBERT model)"),G$r=l(),R4=a("li"),gMe=a("strong"),O$r=o("electra"),V$r=o(" \u2014 "),RK=a("a"),X$r=o("TFElectraForMultipleChoice"),z$r=o(" (ELECTRA model)"),Q$r=l(),P4=a("li"),hMe=a("strong"),W$r=o("flaubert"),H$r=o(" \u2014 "),PK=a("a"),U$r=o("TFFlaubertForMultipleChoice"),J$r=o(" (FlauBERT model)"),Y$r=l(),B4=a("li"),pMe=a("strong"),K$r=o("funnel"),Z$r=o(" \u2014 "),BK=a("a"),ekr=o("TFFunnelForMultipleChoice"),okr=o(" (Funnel Transformer model)"),rkr=l(),N4=a("li"),_Me=a("strong"),tkr=o("longformer"),akr=o(" \u2014 "),NK=a("a"),nkr=o("TFLongformerForMultipleChoice"),skr=o(" (Longformer model)"),lkr=l(),I4=a("li"),uMe=a("strong"),ikr=o("mobilebert"),dkr=o(" \u2014 "),IK=a("a"),ckr=o("TFMobileBertForMultipleChoice"),fkr=o(" (MobileBERT model)"),mkr=l(),q4=a("li"),bMe=a("strong"),gkr=o("mpnet"),hkr=o(" \u2014 "),qK=a("a"),pkr=o("TFMPNetForMultipleChoice"),_kr=o(" (MPNet model)"),ukr=l(),j4=a("li"),vMe=a("strong"),bkr=o("rembert"),vkr=o(" \u2014 "),jK=a("a"),Fkr=o("TFRemBertForMultipleChoice"),Tkr=o(" (RemBERT model)"),Mkr=l(),D4=a("li"),FMe=a("strong"),Ekr=o("roberta"),Ckr=o(" \u2014 "),DK=a("a"),wkr=o("TFRobertaForMultipleChoice"),Akr=o(" (RoBERTa model)"),Lkr=l(),G4=a("li"),TMe=a("strong"),ykr=o("roformer"),xkr=o(" \u2014 "),GK=a("a"),$kr=o("TFRoFormerForMultipleChoice"),kkr=o(" (RoFormer model)"),Skr=l(),O4=a("li"),MMe=a("strong"),Rkr=o("xlm"),Pkr=o(" \u2014 "),OK=a("a"),Bkr=o("TFXLMForMultipleChoice"),Nkr=o(" (XLM model)"),Ikr=l(),V4=a("li"),EMe=a("strong"),qkr=o("xlm-roberta"),jkr=o(" \u2014 "),VK=a("a"),Dkr=o("TFXLMRobertaForMultipleChoice"),Gkr=o(" (XLM-RoBERTa model)"),Okr=l(),X4=a("li"),CMe=a("strong"),Vkr=o("xlnet"),Xkr=o(" \u2014 "),XK=a("a"),zkr=o("TFXLNetForMultipleChoice"),Qkr=o(" (XLNet model)"),Wkr=l(),F(z4.$$.fragment),Rze=l(),kc=a("h2"),Q4=a("a"),wMe=a("span"),F(Rx.$$.fragment),Hkr=l(),AMe=a("span"),Ukr=o("TFAutoModelForNextSentencePrediction"),Pze=l(),dr=a("div"),F(Px.$$.fragment),Jkr=l(),Sc=a("p"),Ykr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zK=a("a"),Kkr=o("from_pretrained()"),Zkr=o(" class method or the "),QK=a("a"),eSr=o("from_config()"),oSr=o(` class
method.`),rSr=l(),Bx=a("p"),tSr=o("This class cannot be instantiated directly using "),LMe=a("code"),aSr=o("__init__()"),nSr=o(" (throws an error)."),sSr=l(),Gt=a("div"),F(Nx.$$.fragment),lSr=l(),yMe=a("p"),iSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dSr=l(),Rc=a("p"),cSr=o(`Note:
Loading a model from its configuration file does `),xMe=a("strong"),fSr=o("not"),mSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),gSr=o("from_pretrained()"),hSr=o(" to load the model weights."),pSr=l(),F(W4.$$.fragment),_Sr=l(),Ir=a("div"),F(Ix.$$.fragment),uSr=l(),$Me=a("p"),bSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vSr=l(),pn=a("p"),FSr=o("The model class to instantiate is selected based on the "),kMe=a("code"),TSr=o("model_type"),MSr=o(` property of the config object (either
passed as an argument or loaded from `),SMe=a("code"),ESr=o("pretrained_model_name_or_path"),CSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RMe=a("code"),wSr=o("pretrained_model_name_or_path"),ASr=o(":"),LSr=l(),qx=a("ul"),H4=a("li"),PMe=a("strong"),ySr=o("bert"),xSr=o(" \u2014 "),HK=a("a"),$Sr=o("TFBertForNextSentencePrediction"),kSr=o(" (BERT model)"),SSr=l(),U4=a("li"),BMe=a("strong"),RSr=o("mobilebert"),PSr=o(" \u2014 "),UK=a("a"),BSr=o("TFMobileBertForNextSentencePrediction"),NSr=o(" (MobileBERT model)"),ISr=l(),F(J4.$$.fragment),Bze=l(),Pc=a("h2"),Y4=a("a"),NMe=a("span"),F(jx.$$.fragment),qSr=l(),IMe=a("span"),jSr=o("TFAutoModelForTableQuestionAnswering"),Nze=l(),cr=a("div"),F(Dx.$$.fragment),DSr=l(),Bc=a("p"),GSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),JK=a("a"),OSr=o("from_pretrained()"),VSr=o(" class method or the "),YK=a("a"),XSr=o("from_config()"),zSr=o(` class
method.`),QSr=l(),Gx=a("p"),WSr=o("This class cannot be instantiated directly using "),qMe=a("code"),HSr=o("__init__()"),USr=o(" (throws an error)."),JSr=l(),Ot=a("div"),F(Ox.$$.fragment),YSr=l(),jMe=a("p"),KSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ZSr=l(),Nc=a("p"),eRr=o(`Note:
Loading a model from its configuration file does `),DMe=a("strong"),oRr=o("not"),rRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=a("a"),tRr=o("from_pretrained()"),aRr=o(" to load the model weights."),nRr=l(),F(K4.$$.fragment),sRr=l(),qr=a("div"),F(Vx.$$.fragment),lRr=l(),GMe=a("p"),iRr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dRr=l(),_n=a("p"),cRr=o("The model class to instantiate is selected based on the "),OMe=a("code"),fRr=o("model_type"),mRr=o(` property of the config object (either
passed as an argument or loaded from `),VMe=a("code"),gRr=o("pretrained_model_name_or_path"),hRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=a("code"),pRr=o("pretrained_model_name_or_path"),_Rr=o(":"),uRr=l(),zMe=a("ul"),Z4=a("li"),QMe=a("strong"),bRr=o("tapas"),vRr=o(" \u2014 "),ZK=a("a"),FRr=o("TFTapasForQuestionAnswering"),TRr=o(" (TAPAS model)"),MRr=l(),F(eE.$$.fragment),Ize=l(),Ic=a("h2"),oE=a("a"),WMe=a("span"),F(Xx.$$.fragment),ERr=l(),HMe=a("span"),CRr=o("TFAutoModelForTokenClassification"),qze=l(),fr=a("div"),F(zx.$$.fragment),wRr=l(),qc=a("p"),ARr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eZ=a("a"),LRr=o("from_pretrained()"),yRr=o(" class method or the "),oZ=a("a"),xRr=o("from_config()"),$Rr=o(` class
method.`),kRr=l(),Qx=a("p"),SRr=o("This class cannot be instantiated directly using "),UMe=a("code"),RRr=o("__init__()"),PRr=o(" (throws an error)."),BRr=l(),Vt=a("div"),F(Wx.$$.fragment),NRr=l(),JMe=a("p"),IRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qRr=l(),jc=a("p"),jRr=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),DRr=o("not"),GRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),ORr=o("from_pretrained()"),VRr=o(" to load the model weights."),XRr=l(),F(rE.$$.fragment),zRr=l(),jr=a("div"),F(Hx.$$.fragment),QRr=l(),KMe=a("p"),WRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),HRr=l(),un=a("p"),URr=o("The model class to instantiate is selected based on the "),ZMe=a("code"),JRr=o("model_type"),YRr=o(` property of the config object (either
passed as an argument or loaded from `),e4e=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=a("code"),ePr=o("pretrained_model_name_or_path"),oPr=o(":"),rPr=l(),de=a("ul"),tE=a("li"),r4e=a("strong"),tPr=o("albert"),aPr=o(" \u2014 "),tZ=a("a"),nPr=o("TFAlbertForTokenClassification"),sPr=o(" (ALBERT model)"),lPr=l(),aE=a("li"),t4e=a("strong"),iPr=o("bert"),dPr=o(" \u2014 "),aZ=a("a"),cPr=o("TFBertForTokenClassification"),fPr=o(" (BERT model)"),mPr=l(),nE=a("li"),a4e=a("strong"),gPr=o("camembert"),hPr=o(" \u2014 "),nZ=a("a"),pPr=o("TFCamembertForTokenClassification"),_Pr=o(" (CamemBERT model)"),uPr=l(),sE=a("li"),n4e=a("strong"),bPr=o("convbert"),vPr=o(" \u2014 "),sZ=a("a"),FPr=o("TFConvBertForTokenClassification"),TPr=o(" (ConvBERT model)"),MPr=l(),lE=a("li"),s4e=a("strong"),EPr=o("deberta"),CPr=o(" \u2014 "),lZ=a("a"),wPr=o("TFDebertaForTokenClassification"),APr=o(" (DeBERTa model)"),LPr=l(),iE=a("li"),l4e=a("strong"),yPr=o("deberta-v2"),xPr=o(" \u2014 "),iZ=a("a"),$Pr=o("TFDebertaV2ForTokenClassification"),kPr=o(" (DeBERTa-v2 model)"),SPr=l(),dE=a("li"),i4e=a("strong"),RPr=o("distilbert"),PPr=o(" \u2014 "),dZ=a("a"),BPr=o("TFDistilBertForTokenClassification"),NPr=o(" (DistilBERT model)"),IPr=l(),cE=a("li"),d4e=a("strong"),qPr=o("electra"),jPr=o(" \u2014 "),cZ=a("a"),DPr=o("TFElectraForTokenClassification"),GPr=o(" (ELECTRA model)"),OPr=l(),fE=a("li"),c4e=a("strong"),VPr=o("flaubert"),XPr=o(" \u2014 "),fZ=a("a"),zPr=o("TFFlaubertForTokenClassification"),QPr=o(" (FlauBERT model)"),WPr=l(),mE=a("li"),f4e=a("strong"),HPr=o("funnel"),UPr=o(" \u2014 "),mZ=a("a"),JPr=o("TFFunnelForTokenClassification"),YPr=o(" (Funnel Transformer model)"),KPr=l(),gE=a("li"),m4e=a("strong"),ZPr=o("layoutlm"),eBr=o(" \u2014 "),gZ=a("a"),oBr=o("TFLayoutLMForTokenClassification"),rBr=o(" (LayoutLM model)"),tBr=l(),hE=a("li"),g4e=a("strong"),aBr=o("longformer"),nBr=o(" \u2014 "),hZ=a("a"),sBr=o("TFLongformerForTokenClassification"),lBr=o(" (Longformer model)"),iBr=l(),pE=a("li"),h4e=a("strong"),dBr=o("mobilebert"),cBr=o(" \u2014 "),pZ=a("a"),fBr=o("TFMobileBertForTokenClassification"),mBr=o(" (MobileBERT model)"),gBr=l(),_E=a("li"),p4e=a("strong"),hBr=o("mpnet"),pBr=o(" \u2014 "),_Z=a("a"),_Br=o("TFMPNetForTokenClassification"),uBr=o(" (MPNet model)"),bBr=l(),uE=a("li"),_4e=a("strong"),vBr=o("rembert"),FBr=o(" \u2014 "),uZ=a("a"),TBr=o("TFRemBertForTokenClassification"),MBr=o(" (RemBERT model)"),EBr=l(),bE=a("li"),u4e=a("strong"),CBr=o("roberta"),wBr=o(" \u2014 "),bZ=a("a"),ABr=o("TFRobertaForTokenClassification"),LBr=o(" (RoBERTa model)"),yBr=l(),vE=a("li"),b4e=a("strong"),xBr=o("roformer"),$Br=o(" \u2014 "),vZ=a("a"),kBr=o("TFRoFormerForTokenClassification"),SBr=o(" (RoFormer model)"),RBr=l(),FE=a("li"),v4e=a("strong"),PBr=o("xlm"),BBr=o(" \u2014 "),FZ=a("a"),NBr=o("TFXLMForTokenClassification"),IBr=o(" (XLM model)"),qBr=l(),TE=a("li"),F4e=a("strong"),jBr=o("xlm-roberta"),DBr=o(" \u2014 "),TZ=a("a"),GBr=o("TFXLMRobertaForTokenClassification"),OBr=o(" (XLM-RoBERTa model)"),VBr=l(),ME=a("li"),T4e=a("strong"),XBr=o("xlnet"),zBr=o(" \u2014 "),MZ=a("a"),QBr=o("TFXLNetForTokenClassification"),WBr=o(" (XLNet model)"),HBr=l(),F(EE.$$.fragment),jze=l(),Dc=a("h2"),CE=a("a"),M4e=a("span"),F(Ux.$$.fragment),UBr=l(),E4e=a("span"),JBr=o("TFAutoModelForQuestionAnswering"),Dze=l(),mr=a("div"),F(Jx.$$.fragment),YBr=l(),Gc=a("p"),KBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EZ=a("a"),ZBr=o("from_pretrained()"),eNr=o(" class method or the "),CZ=a("a"),oNr=o("from_config()"),rNr=o(` class
method.`),tNr=l(),Yx=a("p"),aNr=o("This class cannot be instantiated directly using "),C4e=a("code"),nNr=o("__init__()"),sNr=o(" (throws an error)."),lNr=l(),Xt=a("div"),F(Kx.$$.fragment),iNr=l(),w4e=a("p"),dNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cNr=l(),Oc=a("p"),fNr=o(`Note:
Loading a model from its configuration file does `),A4e=a("strong"),mNr=o("not"),gNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=a("a"),hNr=o("from_pretrained()"),pNr=o(" to load the model weights."),_Nr=l(),F(wE.$$.fragment),uNr=l(),Dr=a("div"),F(Zx.$$.fragment),bNr=l(),L4e=a("p"),vNr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FNr=l(),bn=a("p"),TNr=o("The model class to instantiate is selected based on the "),y4e=a("code"),MNr=o("model_type"),ENr=o(` property of the config object (either
passed as an argument or loaded from `),x4e=a("code"),CNr=o("pretrained_model_name_or_path"),wNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=a("code"),ANr=o("pretrained_model_name_or_path"),LNr=o(":"),yNr=l(),ce=a("ul"),AE=a("li"),k4e=a("strong"),xNr=o("albert"),$Nr=o(" \u2014 "),AZ=a("a"),kNr=o("TFAlbertForQuestionAnswering"),SNr=o(" (ALBERT model)"),RNr=l(),LE=a("li"),S4e=a("strong"),PNr=o("bert"),BNr=o(" \u2014 "),LZ=a("a"),NNr=o("TFBertForQuestionAnswering"),INr=o(" (BERT model)"),qNr=l(),yE=a("li"),R4e=a("strong"),jNr=o("camembert"),DNr=o(" \u2014 "),yZ=a("a"),GNr=o("TFCamembertForQuestionAnswering"),ONr=o(" (CamemBERT model)"),VNr=l(),xE=a("li"),P4e=a("strong"),XNr=o("convbert"),zNr=o(" \u2014 "),xZ=a("a"),QNr=o("TFConvBertForQuestionAnswering"),WNr=o(" (ConvBERT model)"),HNr=l(),$E=a("li"),B4e=a("strong"),UNr=o("deberta"),JNr=o(" \u2014 "),$Z=a("a"),YNr=o("TFDebertaForQuestionAnswering"),KNr=o(" (DeBERTa model)"),ZNr=l(),kE=a("li"),N4e=a("strong"),eIr=o("deberta-v2"),oIr=o(" \u2014 "),kZ=a("a"),rIr=o("TFDebertaV2ForQuestionAnswering"),tIr=o(" (DeBERTa-v2 model)"),aIr=l(),SE=a("li"),I4e=a("strong"),nIr=o("distilbert"),sIr=o(" \u2014 "),SZ=a("a"),lIr=o("TFDistilBertForQuestionAnswering"),iIr=o(" (DistilBERT model)"),dIr=l(),RE=a("li"),q4e=a("strong"),cIr=o("electra"),fIr=o(" \u2014 "),RZ=a("a"),mIr=o("TFElectraForQuestionAnswering"),gIr=o(" (ELECTRA model)"),hIr=l(),PE=a("li"),j4e=a("strong"),pIr=o("flaubert"),_Ir=o(" \u2014 "),PZ=a("a"),uIr=o("TFFlaubertForQuestionAnsweringSimple"),bIr=o(" (FlauBERT model)"),vIr=l(),BE=a("li"),D4e=a("strong"),FIr=o("funnel"),TIr=o(" \u2014 "),BZ=a("a"),MIr=o("TFFunnelForQuestionAnswering"),EIr=o(" (Funnel Transformer model)"),CIr=l(),NE=a("li"),G4e=a("strong"),wIr=o("gptj"),AIr=o(" \u2014 "),NZ=a("a"),LIr=o("TFGPTJForQuestionAnswering"),yIr=o(" (GPT-J model)"),xIr=l(),IE=a("li"),O4e=a("strong"),$Ir=o("longformer"),kIr=o(" \u2014 "),IZ=a("a"),SIr=o("TFLongformerForQuestionAnswering"),RIr=o(" (Longformer model)"),PIr=l(),qE=a("li"),V4e=a("strong"),BIr=o("mobilebert"),NIr=o(" \u2014 "),qZ=a("a"),IIr=o("TFMobileBertForQuestionAnswering"),qIr=o(" (MobileBERT model)"),jIr=l(),jE=a("li"),X4e=a("strong"),DIr=o("mpnet"),GIr=o(" \u2014 "),jZ=a("a"),OIr=o("TFMPNetForQuestionAnswering"),VIr=o(" (MPNet model)"),XIr=l(),DE=a("li"),z4e=a("strong"),zIr=o("rembert"),QIr=o(" \u2014 "),DZ=a("a"),WIr=o("TFRemBertForQuestionAnswering"),HIr=o(" (RemBERT model)"),UIr=l(),GE=a("li"),Q4e=a("strong"),JIr=o("roberta"),YIr=o(" \u2014 "),GZ=a("a"),KIr=o("TFRobertaForQuestionAnswering"),ZIr=o(" (RoBERTa model)"),eqr=l(),OE=a("li"),W4e=a("strong"),oqr=o("roformer"),rqr=o(" \u2014 "),OZ=a("a"),tqr=o("TFRoFormerForQuestionAnswering"),aqr=o(" (RoFormer model)"),nqr=l(),VE=a("li"),H4e=a("strong"),sqr=o("xlm"),lqr=o(" \u2014 "),VZ=a("a"),iqr=o("TFXLMForQuestionAnsweringSimple"),dqr=o(" (XLM model)"),cqr=l(),XE=a("li"),U4e=a("strong"),fqr=o("xlm-roberta"),mqr=o(" \u2014 "),XZ=a("a"),gqr=o("TFXLMRobertaForQuestionAnswering"),hqr=o(" (XLM-RoBERTa model)"),pqr=l(),zE=a("li"),J4e=a("strong"),_qr=o("xlnet"),uqr=o(" \u2014 "),zZ=a("a"),bqr=o("TFXLNetForQuestionAnsweringSimple"),vqr=o(" (XLNet model)"),Fqr=l(),F(QE.$$.fragment),Gze=l(),Vc=a("h2"),WE=a("a"),Y4e=a("span"),F(e$.$$.fragment),Tqr=l(),K4e=a("span"),Mqr=o("TFAutoModelForVision2Seq"),Oze=l(),gr=a("div"),F(o$.$$.fragment),Eqr=l(),Xc=a("p"),Cqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QZ=a("a"),wqr=o("from_pretrained()"),Aqr=o(" class method or the "),WZ=a("a"),Lqr=o("from_config()"),yqr=o(` class
method.`),xqr=l(),r$=a("p"),$qr=o("This class cannot be instantiated directly using "),Z4e=a("code"),kqr=o("__init__()"),Sqr=o(" (throws an error)."),Rqr=l(),zt=a("div"),F(t$.$$.fragment),Pqr=l(),eEe=a("p"),Bqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Nqr=l(),zc=a("p"),Iqr=o(`Note:
Loading a model from its configuration file does `),oEe=a("strong"),qqr=o("not"),jqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=a("a"),Dqr=o("from_pretrained()"),Gqr=o(" to load the model weights."),Oqr=l(),F(HE.$$.fragment),Vqr=l(),Gr=a("div"),F(a$.$$.fragment),Xqr=l(),rEe=a("p"),zqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qqr=l(),vn=a("p"),Wqr=o("The model class to instantiate is selected based on the "),tEe=a("code"),Hqr=o("model_type"),Uqr=o(` property of the config object (either
passed as an argument or loaded from `),aEe=a("code"),Jqr=o("pretrained_model_name_or_path"),Yqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nEe=a("code"),Kqr=o("pretrained_model_name_or_path"),Zqr=o(":"),ejr=l(),sEe=a("ul"),UE=a("li"),lEe=a("strong"),ojr=o("vision-encoder-decoder"),rjr=o(" \u2014 "),UZ=a("a"),tjr=o("TFVisionEncoderDecoderModel"),ajr=o(" (Vision Encoder decoder model)"),njr=l(),F(JE.$$.fragment),Vze=l(),Qc=a("h2"),YE=a("a"),iEe=a("span"),F(n$.$$.fragment),sjr=l(),dEe=a("span"),ljr=o("TFAutoModelForSpeechSeq2Seq"),Xze=l(),hr=a("div"),F(s$.$$.fragment),ijr=l(),Wc=a("p"),djr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JZ=a("a"),cjr=o("from_pretrained()"),fjr=o(" class method or the "),YZ=a("a"),mjr=o("from_config()"),gjr=o(` class
method.`),hjr=l(),l$=a("p"),pjr=o("This class cannot be instantiated directly using "),cEe=a("code"),_jr=o("__init__()"),ujr=o(" (throws an error)."),bjr=l(),Qt=a("div"),F(i$.$$.fragment),vjr=l(),fEe=a("p"),Fjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Tjr=l(),Hc=a("p"),Mjr=o(`Note:
Loading a model from its configuration file does `),mEe=a("strong"),Ejr=o("not"),Cjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=a("a"),wjr=o("from_pretrained()"),Ajr=o(" to load the model weights."),Ljr=l(),F(KE.$$.fragment),yjr=l(),Or=a("div"),F(d$.$$.fragment),xjr=l(),gEe=a("p"),$jr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kjr=l(),Fn=a("p"),Sjr=o("The model class to instantiate is selected based on the "),hEe=a("code"),Rjr=o("model_type"),Pjr=o(` property of the config object (either
passed as an argument or loaded from `),pEe=a("code"),Bjr=o("pretrained_model_name_or_path"),Njr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ee=a("code"),Ijr=o("pretrained_model_name_or_path"),qjr=o(":"),jjr=l(),uEe=a("ul"),ZE=a("li"),bEe=a("strong"),Djr=o("speech_to_text"),Gjr=o(" \u2014 "),ZZ=a("a"),Ojr=o("TFSpeech2TextForConditionalGeneration"),Vjr=o(" (Speech2Text model)"),Xjr=l(),F(eC.$$.fragment),zze=l(),Uc=a("h2"),oC=a("a"),vEe=a("span"),F(c$.$$.fragment),zjr=l(),FEe=a("span"),Qjr=o("FlaxAutoModel"),Qze=l(),pr=a("div"),F(f$.$$.fragment),Wjr=l(),Jc=a("p"),Hjr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eee=a("a"),Ujr=o("from_pretrained()"),Jjr=o(" class method or the "),oee=a("a"),Yjr=o("from_config()"),Kjr=o(` class
method.`),Zjr=l(),m$=a("p"),eDr=o("This class cannot be instantiated directly using "),TEe=a("code"),oDr=o("__init__()"),rDr=o(" (throws an error)."),tDr=l(),Wt=a("div"),F(g$.$$.fragment),aDr=l(),MEe=a("p"),nDr=o("Instantiates one of the base model classes of the library from a configuration."),sDr=l(),Yc=a("p"),lDr=o(`Note:
Loading a model from its configuration file does `),EEe=a("strong"),iDr=o("not"),dDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ree=a("a"),cDr=o("from_pretrained()"),fDr=o(" to load the model weights."),mDr=l(),F(rC.$$.fragment),gDr=l(),Vr=a("div"),F(h$.$$.fragment),hDr=l(),CEe=a("p"),pDr=o("Instantiate one of the base model classes of the library from a pretrained model."),_Dr=l(),Tn=a("p"),uDr=o("The model class to instantiate is selected based on the "),wEe=a("code"),bDr=o("model_type"),vDr=o(` property of the config object (either
passed as an argument or loaded from `),AEe=a("code"),FDr=o("pretrained_model_name_or_path"),TDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=a("code"),MDr=o("pretrained_model_name_or_path"),EDr=o(":"),CDr=l(),oe=a("ul"),tC=a("li"),yEe=a("strong"),wDr=o("albert"),ADr=o(" \u2014 "),tee=a("a"),LDr=o("FlaxAlbertModel"),yDr=o(" (ALBERT model)"),xDr=l(),aC=a("li"),xEe=a("strong"),$Dr=o("bart"),kDr=o(" \u2014 "),aee=a("a"),SDr=o("FlaxBartModel"),RDr=o(" (BART model)"),PDr=l(),nC=a("li"),$Ee=a("strong"),BDr=o("beit"),NDr=o(" \u2014 "),nee=a("a"),IDr=o("FlaxBeitModel"),qDr=o(" (BEiT model)"),jDr=l(),sC=a("li"),kEe=a("strong"),DDr=o("bert"),GDr=o(" \u2014 "),see=a("a"),ODr=o("FlaxBertModel"),VDr=o(" (BERT model)"),XDr=l(),lC=a("li"),SEe=a("strong"),zDr=o("big_bird"),QDr=o(" \u2014 "),lee=a("a"),WDr=o("FlaxBigBirdModel"),HDr=o(" (BigBird model)"),UDr=l(),iC=a("li"),REe=a("strong"),JDr=o("blenderbot"),YDr=o(" \u2014 "),iee=a("a"),KDr=o("FlaxBlenderbotModel"),ZDr=o(" (Blenderbot model)"),eGr=l(),dC=a("li"),PEe=a("strong"),oGr=o("blenderbot-small"),rGr=o(" \u2014 "),dee=a("a"),tGr=o("FlaxBlenderbotSmallModel"),aGr=o(" (BlenderbotSmall model)"),nGr=l(),cC=a("li"),BEe=a("strong"),sGr=o("clip"),lGr=o(" \u2014 "),cee=a("a"),iGr=o("FlaxCLIPModel"),dGr=o(" (CLIP model)"),cGr=l(),fC=a("li"),NEe=a("strong"),fGr=o("distilbert"),mGr=o(" \u2014 "),fee=a("a"),gGr=o("FlaxDistilBertModel"),hGr=o(" (DistilBERT model)"),pGr=l(),mC=a("li"),IEe=a("strong"),_Gr=o("electra"),uGr=o(" \u2014 "),mee=a("a"),bGr=o("FlaxElectraModel"),vGr=o(" (ELECTRA model)"),FGr=l(),gC=a("li"),qEe=a("strong"),TGr=o("gpt2"),MGr=o(" \u2014 "),gee=a("a"),EGr=o("FlaxGPT2Model"),CGr=o(" (OpenAI GPT-2 model)"),wGr=l(),hC=a("li"),jEe=a("strong"),AGr=o("gpt_neo"),LGr=o(" \u2014 "),hee=a("a"),yGr=o("FlaxGPTNeoModel"),xGr=o(" (GPT Neo model)"),$Gr=l(),pC=a("li"),DEe=a("strong"),kGr=o("gptj"),SGr=o(" \u2014 "),pee=a("a"),RGr=o("FlaxGPTJModel"),PGr=o(" (GPT-J model)"),BGr=l(),_C=a("li"),GEe=a("strong"),NGr=o("longt5"),IGr=o(" \u2014 "),_ee=a("a"),qGr=o("FlaxLongT5Model"),jGr=o(" (LongT5 model)"),DGr=l(),uC=a("li"),OEe=a("strong"),GGr=o("marian"),OGr=o(" \u2014 "),uee=a("a"),VGr=o("FlaxMarianModel"),XGr=o(" (Marian model)"),zGr=l(),bC=a("li"),VEe=a("strong"),QGr=o("mbart"),WGr=o(" \u2014 "),bee=a("a"),HGr=o("FlaxMBartModel"),UGr=o(" (mBART model)"),JGr=l(),vC=a("li"),XEe=a("strong"),YGr=o("mt5"),KGr=o(" \u2014 "),vee=a("a"),ZGr=o("FlaxMT5Model"),eOr=o(" (MT5 model)"),oOr=l(),FC=a("li"),zEe=a("strong"),rOr=o("opt"),tOr=o(" \u2014 "),Fee=a("a"),aOr=o("FlaxOPTModel"),nOr=o(" (OPT model)"),sOr=l(),TC=a("li"),QEe=a("strong"),lOr=o("pegasus"),iOr=o(" \u2014 "),Tee=a("a"),dOr=o("FlaxPegasusModel"),cOr=o(" (Pegasus model)"),fOr=l(),MC=a("li"),WEe=a("strong"),mOr=o("roberta"),gOr=o(" \u2014 "),Mee=a("a"),hOr=o("FlaxRobertaModel"),pOr=o(" (RoBERTa model)"),_Or=l(),EC=a("li"),HEe=a("strong"),uOr=o("roformer"),bOr=o(" \u2014 "),Eee=a("a"),vOr=o("FlaxRoFormerModel"),FOr=o(" (RoFormer model)"),TOr=l(),CC=a("li"),UEe=a("strong"),MOr=o("t5"),EOr=o(" \u2014 "),Cee=a("a"),COr=o("FlaxT5Model"),wOr=o(" (T5 model)"),AOr=l(),wC=a("li"),JEe=a("strong"),LOr=o("vision-text-dual-encoder"),yOr=o(" \u2014 "),wee=a("a"),xOr=o("FlaxVisionTextDualEncoderModel"),$Or=o(" (VisionTextDualEncoder model)"),kOr=l(),AC=a("li"),YEe=a("strong"),SOr=o("vit"),ROr=o(" \u2014 "),Aee=a("a"),POr=o("FlaxViTModel"),BOr=o(" (ViT model)"),NOr=l(),LC=a("li"),KEe=a("strong"),IOr=o("wav2vec2"),qOr=o(" \u2014 "),Lee=a("a"),jOr=o("FlaxWav2Vec2Model"),DOr=o(" (Wav2Vec2 model)"),GOr=l(),yC=a("li"),ZEe=a("strong"),OOr=o("xglm"),VOr=o(" \u2014 "),yee=a("a"),XOr=o("FlaxXGLMModel"),zOr=o(" (XGLM model)"),QOr=l(),xC=a("li"),eCe=a("strong"),WOr=o("xlm-roberta"),HOr=o(" \u2014 "),xee=a("a"),UOr=o("FlaxXLMRobertaModel"),JOr=o(" (XLM-RoBERTa model)"),YOr=l(),F($C.$$.fragment),Wze=l(),Kc=a("h2"),kC=a("a"),oCe=a("span"),F(p$.$$.fragment),KOr=l(),rCe=a("span"),ZOr=o("FlaxAutoModelForCausalLM"),Hze=l(),_r=a("div"),F(_$.$$.fragment),eVr=l(),Zc=a("p"),oVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$ee=a("a"),rVr=o("from_pretrained()"),tVr=o(" class method or the "),kee=a("a"),aVr=o("from_config()"),nVr=o(` class
method.`),sVr=l(),u$=a("p"),lVr=o("This class cannot be instantiated directly using "),tCe=a("code"),iVr=o("__init__()"),dVr=o(" (throws an error)."),cVr=l(),Ht=a("div"),F(b$.$$.fragment),fVr=l(),aCe=a("p"),mVr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gVr=l(),ef=a("p"),hVr=o(`Note:
Loading a model from its configuration file does `),nCe=a("strong"),pVr=o("not"),_Vr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),See=a("a"),uVr=o("from_pretrained()"),bVr=o(" to load the model weights."),vVr=l(),F(SC.$$.fragment),FVr=l(),Xr=a("div"),F(v$.$$.fragment),TVr=l(),sCe=a("p"),MVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EVr=l(),Mn=a("p"),CVr=o("The model class to instantiate is selected based on the "),lCe=a("code"),wVr=o("model_type"),AVr=o(` property of the config object (either
passed as an argument or loaded from `),iCe=a("code"),LVr=o("pretrained_model_name_or_path"),yVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=a("code"),xVr=o("pretrained_model_name_or_path"),$Vr=o(":"),kVr=l(),xe=a("ul"),RC=a("li"),cCe=a("strong"),SVr=o("bart"),RVr=o(" \u2014 "),Ree=a("a"),PVr=o("FlaxBartForCausalLM"),BVr=o(" (BART model)"),NVr=l(),PC=a("li"),fCe=a("strong"),IVr=o("bert"),qVr=o(" \u2014 "),Pee=a("a"),jVr=o("FlaxBertForCausalLM"),DVr=o(" (BERT model)"),GVr=l(),BC=a("li"),mCe=a("strong"),OVr=o("big_bird"),VVr=o(" \u2014 "),Bee=a("a"),XVr=o("FlaxBigBirdForCausalLM"),zVr=o(" (BigBird model)"),QVr=l(),NC=a("li"),gCe=a("strong"),WVr=o("electra"),HVr=o(" \u2014 "),Nee=a("a"),UVr=o("FlaxElectraForCausalLM"),JVr=o(" (ELECTRA model)"),YVr=l(),IC=a("li"),hCe=a("strong"),KVr=o("gpt2"),ZVr=o(" \u2014 "),Iee=a("a"),eXr=o("FlaxGPT2LMHeadModel"),oXr=o(" (OpenAI GPT-2 model)"),rXr=l(),qC=a("li"),pCe=a("strong"),tXr=o("gpt_neo"),aXr=o(" \u2014 "),qee=a("a"),nXr=o("FlaxGPTNeoForCausalLM"),sXr=o(" (GPT Neo model)"),lXr=l(),jC=a("li"),_Ce=a("strong"),iXr=o("gptj"),dXr=o(" \u2014 "),jee=a("a"),cXr=o("FlaxGPTJForCausalLM"),fXr=o(" (GPT-J model)"),mXr=l(),DC=a("li"),uCe=a("strong"),gXr=o("opt"),hXr=o(" \u2014 "),Dee=a("a"),pXr=o("FlaxOPTForCausalLM"),_Xr=o(" (OPT model)"),uXr=l(),GC=a("li"),bCe=a("strong"),bXr=o("roberta"),vXr=o(" \u2014 "),Gee=a("a"),FXr=o("FlaxRobertaForCausalLM"),TXr=o(" (RoBERTa model)"),MXr=l(),OC=a("li"),vCe=a("strong"),EXr=o("xglm"),CXr=o(" \u2014 "),Oee=a("a"),wXr=o("FlaxXGLMForCausalLM"),AXr=o(" (XGLM model)"),LXr=l(),F(VC.$$.fragment),Uze=l(),of=a("h2"),XC=a("a"),FCe=a("span"),F(F$.$$.fragment),yXr=l(),TCe=a("span"),xXr=o("FlaxAutoModelForPreTraining"),Jze=l(),ur=a("div"),F(T$.$$.fragment),$Xr=l(),rf=a("p"),kXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vee=a("a"),SXr=o("from_pretrained()"),RXr=o(" class method or the "),Xee=a("a"),PXr=o("from_config()"),BXr=o(` class
method.`),NXr=l(),M$=a("p"),IXr=o("This class cannot be instantiated directly using "),MCe=a("code"),qXr=o("__init__()"),jXr=o(" (throws an error)."),DXr=l(),Ut=a("div"),F(E$.$$.fragment),GXr=l(),ECe=a("p"),OXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VXr=l(),tf=a("p"),XXr=o(`Note:
Loading a model from its configuration file does `),CCe=a("strong"),zXr=o("not"),QXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=a("a"),WXr=o("from_pretrained()"),HXr=o(" to load the model weights."),UXr=l(),F(zC.$$.fragment),JXr=l(),zr=a("div"),F(C$.$$.fragment),YXr=l(),wCe=a("p"),KXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZXr=l(),En=a("p"),ezr=o("The model class to instantiate is selected based on the "),ACe=a("code"),ozr=o("model_type"),rzr=o(` property of the config object (either
passed as an argument or loaded from `),LCe=a("code"),tzr=o("pretrained_model_name_or_path"),azr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=a("code"),nzr=o("pretrained_model_name_or_path"),szr=o(":"),lzr=l(),Ee=a("ul"),QC=a("li"),xCe=a("strong"),izr=o("albert"),dzr=o(" \u2014 "),Qee=a("a"),czr=o("FlaxAlbertForPreTraining"),fzr=o(" (ALBERT model)"),mzr=l(),WC=a("li"),$Ce=a("strong"),gzr=o("bart"),hzr=o(" \u2014 "),Wee=a("a"),pzr=o("FlaxBartForConditionalGeneration"),_zr=o(" (BART model)"),uzr=l(),HC=a("li"),kCe=a("strong"),bzr=o("bert"),vzr=o(" \u2014 "),Hee=a("a"),Fzr=o("FlaxBertForPreTraining"),Tzr=o(" (BERT model)"),Mzr=l(),UC=a("li"),SCe=a("strong"),Ezr=o("big_bird"),Czr=o(" \u2014 "),Uee=a("a"),wzr=o("FlaxBigBirdForPreTraining"),Azr=o(" (BigBird model)"),Lzr=l(),JC=a("li"),RCe=a("strong"),yzr=o("electra"),xzr=o(" \u2014 "),Jee=a("a"),$zr=o("FlaxElectraForPreTraining"),kzr=o(" (ELECTRA model)"),Szr=l(),YC=a("li"),PCe=a("strong"),Rzr=o("longt5"),Pzr=o(" \u2014 "),Yee=a("a"),Bzr=o("FlaxLongT5ForConditionalGeneration"),Nzr=o(" (LongT5 model)"),Izr=l(),KC=a("li"),BCe=a("strong"),qzr=o("mbart"),jzr=o(" \u2014 "),Kee=a("a"),Dzr=o("FlaxMBartForConditionalGeneration"),Gzr=o(" (mBART model)"),Ozr=l(),ZC=a("li"),NCe=a("strong"),Vzr=o("mt5"),Xzr=o(" \u2014 "),Zee=a("a"),zzr=o("FlaxMT5ForConditionalGeneration"),Qzr=o(" (MT5 model)"),Wzr=l(),e3=a("li"),ICe=a("strong"),Hzr=o("roberta"),Uzr=o(" \u2014 "),eoe=a("a"),Jzr=o("FlaxRobertaForMaskedLM"),Yzr=o(" (RoBERTa model)"),Kzr=l(),o3=a("li"),qCe=a("strong"),Zzr=o("roformer"),eQr=o(" \u2014 "),ooe=a("a"),oQr=o("FlaxRoFormerForMaskedLM"),rQr=o(" (RoFormer model)"),tQr=l(),r3=a("li"),jCe=a("strong"),aQr=o("t5"),nQr=o(" \u2014 "),roe=a("a"),sQr=o("FlaxT5ForConditionalGeneration"),lQr=o(" (T5 model)"),iQr=l(),t3=a("li"),DCe=a("strong"),dQr=o("wav2vec2"),cQr=o(" \u2014 "),toe=a("a"),fQr=o("FlaxWav2Vec2ForPreTraining"),mQr=o(" (Wav2Vec2 model)"),gQr=l(),a3=a("li"),GCe=a("strong"),hQr=o("xlm-roberta"),pQr=o(" \u2014 "),aoe=a("a"),_Qr=o("FlaxXLMRobertaForMaskedLM"),uQr=o(" (XLM-RoBERTa model)"),bQr=l(),F(n3.$$.fragment),Yze=l(),af=a("h2"),s3=a("a"),OCe=a("span"),F(w$.$$.fragment),vQr=l(),VCe=a("span"),FQr=o("FlaxAutoModelForMaskedLM"),Kze=l(),br=a("div"),F(A$.$$.fragment),TQr=l(),nf=a("p"),MQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),noe=a("a"),EQr=o("from_pretrained()"),CQr=o(" class method or the "),soe=a("a"),wQr=o("from_config()"),AQr=o(` class
method.`),LQr=l(),L$=a("p"),yQr=o("This class cannot be instantiated directly using "),XCe=a("code"),xQr=o("__init__()"),$Qr=o(" (throws an error)."),kQr=l(),Jt=a("div"),F(y$.$$.fragment),SQr=l(),zCe=a("p"),RQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PQr=l(),sf=a("p"),BQr=o(`Note:
Loading a model from its configuration file does `),QCe=a("strong"),NQr=o("not"),IQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),loe=a("a"),qQr=o("from_pretrained()"),jQr=o(" to load the model weights."),DQr=l(),F(l3.$$.fragment),GQr=l(),Qr=a("div"),F(x$.$$.fragment),OQr=l(),WCe=a("p"),VQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XQr=l(),Cn=a("p"),zQr=o("The model class to instantiate is selected based on the "),HCe=a("code"),QQr=o("model_type"),WQr=o(` property of the config object (either
passed as an argument or loaded from `),UCe=a("code"),HQr=o("pretrained_model_name_or_path"),UQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JCe=a("code"),JQr=o("pretrained_model_name_or_path"),YQr=o(":"),KQr=l(),$e=a("ul"),i3=a("li"),YCe=a("strong"),ZQr=o("albert"),eWr=o(" \u2014 "),ioe=a("a"),oWr=o("FlaxAlbertForMaskedLM"),rWr=o(" (ALBERT model)"),tWr=l(),d3=a("li"),KCe=a("strong"),aWr=o("bart"),nWr=o(" \u2014 "),doe=a("a"),sWr=o("FlaxBartForConditionalGeneration"),lWr=o(" (BART model)"),iWr=l(),c3=a("li"),ZCe=a("strong"),dWr=o("bert"),cWr=o(" \u2014 "),coe=a("a"),fWr=o("FlaxBertForMaskedLM"),mWr=o(" (BERT model)"),gWr=l(),f3=a("li"),e3e=a("strong"),hWr=o("big_bird"),pWr=o(" \u2014 "),foe=a("a"),_Wr=o("FlaxBigBirdForMaskedLM"),uWr=o(" (BigBird model)"),bWr=l(),m3=a("li"),o3e=a("strong"),vWr=o("distilbert"),FWr=o(" \u2014 "),moe=a("a"),TWr=o("FlaxDistilBertForMaskedLM"),MWr=o(" (DistilBERT model)"),EWr=l(),g3=a("li"),r3e=a("strong"),CWr=o("electra"),wWr=o(" \u2014 "),goe=a("a"),AWr=o("FlaxElectraForMaskedLM"),LWr=o(" (ELECTRA model)"),yWr=l(),h3=a("li"),t3e=a("strong"),xWr=o("mbart"),$Wr=o(" \u2014 "),hoe=a("a"),kWr=o("FlaxMBartForConditionalGeneration"),SWr=o(" (mBART model)"),RWr=l(),p3=a("li"),a3e=a("strong"),PWr=o("roberta"),BWr=o(" \u2014 "),poe=a("a"),NWr=o("FlaxRobertaForMaskedLM"),IWr=o(" (RoBERTa model)"),qWr=l(),_3=a("li"),n3e=a("strong"),jWr=o("roformer"),DWr=o(" \u2014 "),_oe=a("a"),GWr=o("FlaxRoFormerForMaskedLM"),OWr=o(" (RoFormer model)"),VWr=l(),u3=a("li"),s3e=a("strong"),XWr=o("xlm-roberta"),zWr=o(" \u2014 "),uoe=a("a"),QWr=o("FlaxXLMRobertaForMaskedLM"),WWr=o(" (XLM-RoBERTa model)"),HWr=l(),F(b3.$$.fragment),Zze=l(),lf=a("h2"),v3=a("a"),l3e=a("span"),F($$.$$.fragment),UWr=l(),i3e=a("span"),JWr=o("FlaxAutoModelForSeq2SeqLM"),eQe=l(),vr=a("div"),F(k$.$$.fragment),YWr=l(),df=a("p"),KWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),boe=a("a"),ZWr=o("from_pretrained()"),eHr=o(" class method or the "),voe=a("a"),oHr=o("from_config()"),rHr=o(` class
method.`),tHr=l(),S$=a("p"),aHr=o("This class cannot be instantiated directly using "),d3e=a("code"),nHr=o("__init__()"),sHr=o(" (throws an error)."),lHr=l(),Yt=a("div"),F(R$.$$.fragment),iHr=l(),c3e=a("p"),dHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cHr=l(),cf=a("p"),fHr=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),mHr=o("not"),gHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Foe=a("a"),hHr=o("from_pretrained()"),pHr=o(" to load the model weights."),_Hr=l(),F(F3.$$.fragment),uHr=l(),Wr=a("div"),F(P$.$$.fragment),bHr=l(),m3e=a("p"),vHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FHr=l(),wn=a("p"),THr=o("The model class to instantiate is selected based on the "),g3e=a("code"),MHr=o("model_type"),EHr=o(` property of the config object (either
passed as an argument or loaded from `),h3e=a("code"),CHr=o("pretrained_model_name_or_path"),wHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=a("code"),AHr=o("pretrained_model_name_or_path"),LHr=o(":"),yHr=l(),ke=a("ul"),T3=a("li"),_3e=a("strong"),xHr=o("bart"),$Hr=o(" \u2014 "),Toe=a("a"),kHr=o("FlaxBartForConditionalGeneration"),SHr=o(" (BART model)"),RHr=l(),M3=a("li"),u3e=a("strong"),PHr=o("blenderbot"),BHr=o(" \u2014 "),Moe=a("a"),NHr=o("FlaxBlenderbotForConditionalGeneration"),IHr=o(" (Blenderbot model)"),qHr=l(),E3=a("li"),b3e=a("strong"),jHr=o("blenderbot-small"),DHr=o(" \u2014 "),Eoe=a("a"),GHr=o("FlaxBlenderbotSmallForConditionalGeneration"),OHr=o(" (BlenderbotSmall model)"),VHr=l(),C3=a("li"),v3e=a("strong"),XHr=o("encoder-decoder"),zHr=o(" \u2014 "),Coe=a("a"),QHr=o("FlaxEncoderDecoderModel"),WHr=o(" (Encoder decoder model)"),HHr=l(),w3=a("li"),F3e=a("strong"),UHr=o("longt5"),JHr=o(" \u2014 "),woe=a("a"),YHr=o("FlaxLongT5ForConditionalGeneration"),KHr=o(" (LongT5 model)"),ZHr=l(),A3=a("li"),T3e=a("strong"),eUr=o("marian"),oUr=o(" \u2014 "),Aoe=a("a"),rUr=o("FlaxMarianMTModel"),tUr=o(" (Marian model)"),aUr=l(),L3=a("li"),M3e=a("strong"),nUr=o("mbart"),sUr=o(" \u2014 "),Loe=a("a"),lUr=o("FlaxMBartForConditionalGeneration"),iUr=o(" (mBART model)"),dUr=l(),y3=a("li"),E3e=a("strong"),cUr=o("mt5"),fUr=o(" \u2014 "),yoe=a("a"),mUr=o("FlaxMT5ForConditionalGeneration"),gUr=o(" (MT5 model)"),hUr=l(),x3=a("li"),C3e=a("strong"),pUr=o("pegasus"),_Ur=o(" \u2014 "),xoe=a("a"),uUr=o("FlaxPegasusForConditionalGeneration"),bUr=o(" (Pegasus model)"),vUr=l(),$3=a("li"),w3e=a("strong"),FUr=o("t5"),TUr=o(" \u2014 "),$oe=a("a"),MUr=o("FlaxT5ForConditionalGeneration"),EUr=o(" (T5 model)"),CUr=l(),F(k3.$$.fragment),oQe=l(),ff=a("h2"),S3=a("a"),A3e=a("span"),F(B$.$$.fragment),wUr=l(),L3e=a("span"),AUr=o("FlaxAutoModelForSequenceClassification"),rQe=l(),Fr=a("div"),F(N$.$$.fragment),LUr=l(),mf=a("p"),yUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),koe=a("a"),xUr=o("from_pretrained()"),$Ur=o(" class method or the "),Soe=a("a"),kUr=o("from_config()"),SUr=o(` class
method.`),RUr=l(),I$=a("p"),PUr=o("This class cannot be instantiated directly using "),y3e=a("code"),BUr=o("__init__()"),NUr=o(" (throws an error)."),IUr=l(),Kt=a("div"),F(q$.$$.fragment),qUr=l(),x3e=a("p"),jUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DUr=l(),gf=a("p"),GUr=o(`Note:
Loading a model from its configuration file does `),$3e=a("strong"),OUr=o("not"),VUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=a("a"),XUr=o("from_pretrained()"),zUr=o(" to load the model weights."),QUr=l(),F(R3.$$.fragment),WUr=l(),Hr=a("div"),F(j$.$$.fragment),HUr=l(),k3e=a("p"),UUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JUr=l(),An=a("p"),YUr=o("The model class to instantiate is selected based on the "),S3e=a("code"),KUr=o("model_type"),ZUr=o(` property of the config object (either
passed as an argument or loaded from `),R3e=a("code"),eJr=o("pretrained_model_name_or_path"),oJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=a("code"),rJr=o("pretrained_model_name_or_path"),tJr=o(":"),aJr=l(),Se=a("ul"),P3=a("li"),B3e=a("strong"),nJr=o("albert"),sJr=o(" \u2014 "),Poe=a("a"),lJr=o("FlaxAlbertForSequenceClassification"),iJr=o(" (ALBERT model)"),dJr=l(),B3=a("li"),N3e=a("strong"),cJr=o("bart"),fJr=o(" \u2014 "),Boe=a("a"),mJr=o("FlaxBartForSequenceClassification"),gJr=o(" (BART model)"),hJr=l(),N3=a("li"),I3e=a("strong"),pJr=o("bert"),_Jr=o(" \u2014 "),Noe=a("a"),uJr=o("FlaxBertForSequenceClassification"),bJr=o(" (BERT model)"),vJr=l(),I3=a("li"),q3e=a("strong"),FJr=o("big_bird"),TJr=o(" \u2014 "),Ioe=a("a"),MJr=o("FlaxBigBirdForSequenceClassification"),EJr=o(" (BigBird model)"),CJr=l(),q3=a("li"),j3e=a("strong"),wJr=o("distilbert"),AJr=o(" \u2014 "),qoe=a("a"),LJr=o("FlaxDistilBertForSequenceClassification"),yJr=o(" (DistilBERT model)"),xJr=l(),j3=a("li"),D3e=a("strong"),$Jr=o("electra"),kJr=o(" \u2014 "),joe=a("a"),SJr=o("FlaxElectraForSequenceClassification"),RJr=o(" (ELECTRA model)"),PJr=l(),D3=a("li"),G3e=a("strong"),BJr=o("mbart"),NJr=o(" \u2014 "),Doe=a("a"),IJr=o("FlaxMBartForSequenceClassification"),qJr=o(" (mBART model)"),jJr=l(),G3=a("li"),O3e=a("strong"),DJr=o("roberta"),GJr=o(" \u2014 "),Goe=a("a"),OJr=o("FlaxRobertaForSequenceClassification"),VJr=o(" (RoBERTa model)"),XJr=l(),O3=a("li"),V3e=a("strong"),zJr=o("roformer"),QJr=o(" \u2014 "),Ooe=a("a"),WJr=o("FlaxRoFormerForSequenceClassification"),HJr=o(" (RoFormer model)"),UJr=l(),V3=a("li"),X3e=a("strong"),JJr=o("xlm-roberta"),YJr=o(" \u2014 "),Voe=a("a"),KJr=o("FlaxXLMRobertaForSequenceClassification"),ZJr=o(" (XLM-RoBERTa model)"),eYr=l(),F(X3.$$.fragment),tQe=l(),hf=a("h2"),z3=a("a"),z3e=a("span"),F(D$.$$.fragment),oYr=l(),Q3e=a("span"),rYr=o("FlaxAutoModelForQuestionAnswering"),aQe=l(),Tr=a("div"),F(G$.$$.fragment),tYr=l(),pf=a("p"),aYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Xoe=a("a"),nYr=o("from_pretrained()"),sYr=o(" class method or the "),zoe=a("a"),lYr=o("from_config()"),iYr=o(` class
method.`),dYr=l(),O$=a("p"),cYr=o("This class cannot be instantiated directly using "),W3e=a("code"),fYr=o("__init__()"),mYr=o(" (throws an error)."),gYr=l(),Zt=a("div"),F(V$.$$.fragment),hYr=l(),H3e=a("p"),pYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Yr=l(),_f=a("p"),uYr=o(`Note:
Loading a model from its configuration file does `),U3e=a("strong"),bYr=o("not"),vYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qoe=a("a"),FYr=o("from_pretrained()"),TYr=o(" to load the model weights."),MYr=l(),F(Q3.$$.fragment),EYr=l(),Ur=a("div"),F(X$.$$.fragment),CYr=l(),J3e=a("p"),wYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),AYr=l(),Ln=a("p"),LYr=o("The model class to instantiate is selected based on the "),Y3e=a("code"),yYr=o("model_type"),xYr=o(` property of the config object (either
passed as an argument or loaded from `),K3e=a("code"),$Yr=o("pretrained_model_name_or_path"),kYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=a("code"),SYr=o("pretrained_model_name_or_path"),RYr=o(":"),PYr=l(),Re=a("ul"),W3=a("li"),e5e=a("strong"),BYr=o("albert"),NYr=o(" \u2014 "),Woe=a("a"),IYr=o("FlaxAlbertForQuestionAnswering"),qYr=o(" (ALBERT model)"),jYr=l(),H3=a("li"),o5e=a("strong"),DYr=o("bart"),GYr=o(" \u2014 "),Hoe=a("a"),OYr=o("FlaxBartForQuestionAnswering"),VYr=o(" (BART model)"),XYr=l(),U3=a("li"),r5e=a("strong"),zYr=o("bert"),QYr=o(" \u2014 "),Uoe=a("a"),WYr=o("FlaxBertForQuestionAnswering"),HYr=o(" (BERT model)"),UYr=l(),J3=a("li"),t5e=a("strong"),JYr=o("big_bird"),YYr=o(" \u2014 "),Joe=a("a"),KYr=o("FlaxBigBirdForQuestionAnswering"),ZYr=o(" (BigBird model)"),eKr=l(),Y3=a("li"),a5e=a("strong"),oKr=o("distilbert"),rKr=o(" \u2014 "),Yoe=a("a"),tKr=o("FlaxDistilBertForQuestionAnswering"),aKr=o(" (DistilBERT model)"),nKr=l(),K3=a("li"),n5e=a("strong"),sKr=o("electra"),lKr=o(" \u2014 "),Koe=a("a"),iKr=o("FlaxElectraForQuestionAnswering"),dKr=o(" (ELECTRA model)"),cKr=l(),Z3=a("li"),s5e=a("strong"),fKr=o("mbart"),mKr=o(" \u2014 "),Zoe=a("a"),gKr=o("FlaxMBartForQuestionAnswering"),hKr=o(" (mBART model)"),pKr=l(),e5=a("li"),l5e=a("strong"),_Kr=o("roberta"),uKr=o(" \u2014 "),ere=a("a"),bKr=o("FlaxRobertaForQuestionAnswering"),vKr=o(" (RoBERTa model)"),FKr=l(),o5=a("li"),i5e=a("strong"),TKr=o("roformer"),MKr=o(" \u2014 "),ore=a("a"),EKr=o("FlaxRoFormerForQuestionAnswering"),CKr=o(" (RoFormer model)"),wKr=l(),r5=a("li"),d5e=a("strong"),AKr=o("xlm-roberta"),LKr=o(" \u2014 "),rre=a("a"),yKr=o("FlaxXLMRobertaForQuestionAnswering"),xKr=o(" (XLM-RoBERTa model)"),$Kr=l(),F(t5.$$.fragment),nQe=l(),uf=a("h2"),a5=a("a"),c5e=a("span"),F(z$.$$.fragment),kKr=l(),f5e=a("span"),SKr=o("FlaxAutoModelForTokenClassification"),sQe=l(),Mr=a("div"),F(Q$.$$.fragment),RKr=l(),bf=a("p"),PKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tre=a("a"),BKr=o("from_pretrained()"),NKr=o(" class method or the "),are=a("a"),IKr=o("from_config()"),qKr=o(` class
method.`),jKr=l(),W$=a("p"),DKr=o("This class cannot be instantiated directly using "),m5e=a("code"),GKr=o("__init__()"),OKr=o(" (throws an error)."),VKr=l(),ea=a("div"),F(H$.$$.fragment),XKr=l(),g5e=a("p"),zKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QKr=l(),vf=a("p"),WKr=o(`Note:
Loading a model from its configuration file does `),h5e=a("strong"),HKr=o("not"),UKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=a("a"),JKr=o("from_pretrained()"),YKr=o(" to load the model weights."),KKr=l(),F(n5.$$.fragment),ZKr=l(),Jr=a("div"),F(U$.$$.fragment),eZr=l(),p5e=a("p"),oZr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rZr=l(),yn=a("p"),tZr=o("The model class to instantiate is selected based on the "),_5e=a("code"),aZr=o("model_type"),nZr=o(` property of the config object (either
passed as an argument or loaded from `),u5e=a("code"),sZr=o("pretrained_model_name_or_path"),lZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=a("code"),iZr=o("pretrained_model_name_or_path"),dZr=o(":"),cZr=l(),Ve=a("ul"),s5=a("li"),v5e=a("strong"),fZr=o("albert"),mZr=o(" \u2014 "),sre=a("a"),gZr=o("FlaxAlbertForTokenClassification"),hZr=o(" (ALBERT model)"),pZr=l(),l5=a("li"),F5e=a("strong"),_Zr=o("bert"),uZr=o(" \u2014 "),lre=a("a"),bZr=o("FlaxBertForTokenClassification"),vZr=o(" (BERT model)"),FZr=l(),i5=a("li"),T5e=a("strong"),TZr=o("big_bird"),MZr=o(" \u2014 "),ire=a("a"),EZr=o("FlaxBigBirdForTokenClassification"),CZr=o(" (BigBird model)"),wZr=l(),d5=a("li"),M5e=a("strong"),AZr=o("distilbert"),LZr=o(" \u2014 "),dre=a("a"),yZr=o("FlaxDistilBertForTokenClassification"),xZr=o(" (DistilBERT model)"),$Zr=l(),c5=a("li"),E5e=a("strong"),kZr=o("electra"),SZr=o(" \u2014 "),cre=a("a"),RZr=o("FlaxElectraForTokenClassification"),PZr=o(" (ELECTRA model)"),BZr=l(),f5=a("li"),C5e=a("strong"),NZr=o("roberta"),IZr=o(" \u2014 "),fre=a("a"),qZr=o("FlaxRobertaForTokenClassification"),jZr=o(" (RoBERTa model)"),DZr=l(),m5=a("li"),w5e=a("strong"),GZr=o("roformer"),OZr=o(" \u2014 "),mre=a("a"),VZr=o("FlaxRoFormerForTokenClassification"),XZr=o(" (RoFormer model)"),zZr=l(),g5=a("li"),A5e=a("strong"),QZr=o("xlm-roberta"),WZr=o(" \u2014 "),gre=a("a"),HZr=o("FlaxXLMRobertaForTokenClassification"),UZr=o(" (XLM-RoBERTa model)"),JZr=l(),F(h5.$$.fragment),lQe=l(),Ff=a("h2"),p5=a("a"),L5e=a("span"),F(J$.$$.fragment),YZr=l(),y5e=a("span"),KZr=o("FlaxAutoModelForMultipleChoice"),iQe=l(),Er=a("div"),F(Y$.$$.fragment),ZZr=l(),Tf=a("p"),eet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hre=a("a"),oet=o("from_pretrained()"),ret=o(" class method or the "),pre=a("a"),tet=o("from_config()"),aet=o(` class
method.`),net=l(),K$=a("p"),set=o("This class cannot be instantiated directly using "),x5e=a("code"),iet=o("__init__()"),det=o(" (throws an error)."),cet=l(),oa=a("div"),F(Z$.$$.fragment),fet=l(),$5e=a("p"),met=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),get=l(),Mf=a("p"),het=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),pet=o("not"),_et=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_re=a("a"),uet=o("from_pretrained()"),bet=o(" to load the model weights."),vet=l(),F(_5.$$.fragment),Fet=l(),Yr=a("div"),F(ek.$$.fragment),Tet=l(),S5e=a("p"),Met=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Eet=l(),xn=a("p"),Cet=o("The model class to instantiate is selected based on the "),R5e=a("code"),wet=o("model_type"),Aet=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),Let=o("pretrained_model_name_or_path"),yet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),xet=o("pretrained_model_name_or_path"),$et=o(":"),ket=l(),Xe=a("ul"),u5=a("li"),N5e=a("strong"),Set=o("albert"),Ret=o(" \u2014 "),ure=a("a"),Pet=o("FlaxAlbertForMultipleChoice"),Bet=o(" (ALBERT model)"),Net=l(),b5=a("li"),I5e=a("strong"),Iet=o("bert"),qet=o(" \u2014 "),bre=a("a"),jet=o("FlaxBertForMultipleChoice"),Det=o(" (BERT model)"),Get=l(),v5=a("li"),q5e=a("strong"),Oet=o("big_bird"),Vet=o(" \u2014 "),vre=a("a"),Xet=o("FlaxBigBirdForMultipleChoice"),zet=o(" (BigBird model)"),Qet=l(),F5=a("li"),j5e=a("strong"),Wet=o("distilbert"),Het=o(" \u2014 "),Fre=a("a"),Uet=o("FlaxDistilBertForMultipleChoice"),Jet=o(" (DistilBERT model)"),Yet=l(),T5=a("li"),D5e=a("strong"),Ket=o("electra"),Zet=o(" \u2014 "),Tre=a("a"),eot=o("FlaxElectraForMultipleChoice"),oot=o(" (ELECTRA model)"),rot=l(),M5=a("li"),G5e=a("strong"),tot=o("roberta"),aot=o(" \u2014 "),Mre=a("a"),not=o("FlaxRobertaForMultipleChoice"),sot=o(" (RoBERTa model)"),lot=l(),E5=a("li"),O5e=a("strong"),iot=o("roformer"),dot=o(" \u2014 "),Ere=a("a"),cot=o("FlaxRoFormerForMultipleChoice"),fot=o(" (RoFormer model)"),mot=l(),C5=a("li"),V5e=a("strong"),got=o("xlm-roberta"),hot=o(" \u2014 "),Cre=a("a"),pot=o("FlaxXLMRobertaForMultipleChoice"),_ot=o(" (XLM-RoBERTa model)"),uot=l(),F(w5.$$.fragment),dQe=l(),Ef=a("h2"),A5=a("a"),X5e=a("span"),F(ok.$$.fragment),bot=l(),z5e=a("span"),vot=o("FlaxAutoModelForNextSentencePrediction"),cQe=l(),Cr=a("div"),F(rk.$$.fragment),Fot=l(),Cf=a("p"),Tot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wre=a("a"),Mot=o("from_pretrained()"),Eot=o(" class method or the "),Are=a("a"),Cot=o("from_config()"),wot=o(` class
method.`),Aot=l(),tk=a("p"),Lot=o("This class cannot be instantiated directly using "),Q5e=a("code"),yot=o("__init__()"),xot=o(" (throws an error)."),$ot=l(),ra=a("div"),F(ak.$$.fragment),kot=l(),W5e=a("p"),Sot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Rot=l(),wf=a("p"),Pot=o(`Note:
Loading a model from its configuration file does `),H5e=a("strong"),Bot=o("not"),Not=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=a("a"),Iot=o("from_pretrained()"),qot=o(" to load the model weights."),jot=l(),F(L5.$$.fragment),Dot=l(),Kr=a("div"),F(nk.$$.fragment),Got=l(),U5e=a("p"),Oot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vot=l(),$n=a("p"),Xot=o("The model class to instantiate is selected based on the "),J5e=a("code"),zot=o("model_type"),Qot=o(` property of the config object (either
passed as an argument or loaded from `),Y5e=a("code"),Wot=o("pretrained_model_name_or_path"),Hot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=a("code"),Uot=o("pretrained_model_name_or_path"),Jot=o(":"),Yot=l(),Z5e=a("ul"),y5=a("li"),ewe=a("strong"),Kot=o("bert"),Zot=o(" \u2014 "),yre=a("a"),ert=o("FlaxBertForNextSentencePrediction"),ort=o(" (BERT model)"),rrt=l(),F(x5.$$.fragment),fQe=l(),Af=a("h2"),$5=a("a"),owe=a("span"),F(sk.$$.fragment),trt=l(),rwe=a("span"),art=o("FlaxAutoModelForImageClassification"),mQe=l(),wr=a("div"),F(lk.$$.fragment),nrt=l(),Lf=a("p"),srt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xre=a("a"),lrt=o("from_pretrained()"),irt=o(" class method or the "),$re=a("a"),drt=o("from_config()"),crt=o(` class
method.`),frt=l(),ik=a("p"),mrt=o("This class cannot be instantiated directly using "),twe=a("code"),grt=o("__init__()"),hrt=o(" (throws an error)."),prt=l(),ta=a("div"),F(dk.$$.fragment),_rt=l(),awe=a("p"),urt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),brt=l(),yf=a("p"),vrt=o(`Note:
Loading a model from its configuration file does `),nwe=a("strong"),Frt=o("not"),Trt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=a("a"),Mrt=o("from_pretrained()"),Ert=o(" to load the model weights."),Crt=l(),F(k5.$$.fragment),wrt=l(),Zr=a("div"),F(ck.$$.fragment),Art=l(),swe=a("p"),Lrt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yrt=l(),kn=a("p"),xrt=o("The model class to instantiate is selected based on the "),lwe=a("code"),$rt=o("model_type"),krt=o(` property of the config object (either
passed as an argument or loaded from `),iwe=a("code"),Srt=o("pretrained_model_name_or_path"),Rrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dwe=a("code"),Prt=o("pretrained_model_name_or_path"),Brt=o(":"),Nrt=l(),fk=a("ul"),S5=a("li"),cwe=a("strong"),Irt=o("beit"),qrt=o(" \u2014 "),Sre=a("a"),jrt=o("FlaxBeitForImageClassification"),Drt=o(" (BEiT model)"),Grt=l(),R5=a("li"),fwe=a("strong"),Ort=o("vit"),Vrt=o(" \u2014 "),Rre=a("a"),Xrt=o("FlaxViTForImageClassification"),zrt=o(" (ViT model)"),Qrt=l(),F(P5.$$.fragment),gQe=l(),xf=a("h2"),B5=a("a"),mwe=a("span"),F(mk.$$.fragment),Wrt=l(),gwe=a("span"),Hrt=o("FlaxAutoModelForVision2Seq"),hQe=l(),Ar=a("div"),F(gk.$$.fragment),Urt=l(),$f=a("p"),Jrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Pre=a("a"),Yrt=o("from_pretrained()"),Krt=o(" class method or the "),Bre=a("a"),Zrt=o("from_config()"),ett=o(` class
method.`),ott=l(),hk=a("p"),rtt=o("This class cannot be instantiated directly using "),hwe=a("code"),ttt=o("__init__()"),att=o(" (throws an error)."),ntt=l(),aa=a("div"),F(pk.$$.fragment),stt=l(),pwe=a("p"),ltt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),itt=l(),kf=a("p"),dtt=o(`Note:
Loading a model from its configuration file does `),_we=a("strong"),ctt=o("not"),ftt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nre=a("a"),mtt=o("from_pretrained()"),gtt=o(" to load the model weights."),htt=l(),F(N5.$$.fragment),ptt=l(),et=a("div"),F(_k.$$.fragment),_tt=l(),uwe=a("p"),utt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),btt=l(),Sn=a("p"),vtt=o("The model class to instantiate is selected based on the "),bwe=a("code"),Ftt=o("model_type"),Ttt=o(` property of the config object (either
passed as an argument or loaded from `),vwe=a("code"),Mtt=o("pretrained_model_name_or_path"),Ett=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fwe=a("code"),Ctt=o("pretrained_model_name_or_path"),wtt=o(":"),Att=l(),Twe=a("ul"),I5=a("li"),Mwe=a("strong"),Ltt=o("vision-encoder-decoder"),ytt=o(" \u2014 "),Ire=a("a"),xtt=o("FlaxVisionEncoderDecoderModel"),$tt=o(" (Vision Encoder decoder model)"),ktt=l(),F(q5.$$.fragment),this.h()},l(f){const u=_Wt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var uk=s(p);m=n(uk,"A",{id:!0,class:!0,href:!0});var Ewe=s(m);_=n(Ewe,"SPAN",{});var Cwe=s(_);T(d.$$.fragment,Cwe),Cwe.forEach(t),Ewe.forEach(t),h=i(uk),Co=n(uk,"SPAN",{});var wwe=s(Co);yi=r(wwe,"Auto Classes"),wwe.forEach(t),uk.forEach(t),Bf=i(f),lt=n(f,"P",{});var bk=s(lt);xi=r(bk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=n(bk,"CODE",{});var Awe=s($i);t6=r(Awe,"from_pretrained()"),Awe.forEach(t),Nf=r(bk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),bk.forEach(t),Oe=i(f),We=n(f,"P",{});var Rn=s(We);ki=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var Lwe=s(Pn);a6=r(Lwe,"AutoConfig"),Lwe.forEach(t),Bn=r(Rn,", "),Nn=n(Rn,"A",{href:!0});var ywe=s(Nn);n6=r(ywe,"AutoModel"),ywe.forEach(t),Si=r(Rn,`, and
`),In=n(Rn,"A",{href:!0});var xwe=s(In);s6=r(xwe,"AutoTokenizer"),xwe.forEach(t),Ri=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),If=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var vk=s(Ae);jS=r(vk,"will create a model that is an instance of "),Pi=n(vk,"A",{href:!0});var $we=s(Pi);DS=r($we,"BertModel"),$we.forEach(t),GS=r(vk,"."),vk.forEach(t),wo=i(f),Ra=n(f,"P",{});var Fk=s(Ra);OS=r(Fk,"There is one class of "),qf=n(Fk,"CODE",{});var kwe=s(qf);VS=r(kwe,"AutoModel"),kwe.forEach(t),wHe=r(Fk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Fk.forEach(t),cXe=i(f),Bi=n(f,"H2",{class:!0});var Tk=s(Bi);jf=n(Tk,"A",{id:!0,class:!0,href:!0});var Swe=s(jf);Sae=n(Swe,"SPAN",{});var Rwe=s(Sae);T(l6.$$.fragment,Rwe),Rwe.forEach(t),Swe.forEach(t),AHe=i(Tk),Rae=n(Tk,"SPAN",{});var Pwe=s(Rae);LHe=r(Pwe,"Extending the Auto Classes"),Pwe.forEach(t),Tk.forEach(t),fXe=i(f),qn=n(f,"P",{});var Sf=s(qn);yHe=r(Sf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Pae=n(Sf,"CODE",{});var Bwe=s(Pae);xHe=r(Bwe,"NewModel"),Bwe.forEach(t),$He=r(Sf,", make sure you have a "),Bae=n(Sf,"CODE",{});var Nwe=s(Bae);kHe=r(Nwe,"NewModelConfig"),Nwe.forEach(t),SHe=r(Sf,` then you can add those to the auto
classes like this:`),Sf.forEach(t),mXe=i(f),T(i6.$$.fragment,f),gXe=i(f),XS=n(f,"P",{});var Iwe=s(XS);RHe=r(Iwe,"You will then be able to use the auto classes like you would usually do!"),Iwe.forEach(t),hXe=i(f),T(Df.$$.fragment,f),pXe=i(f),Ni=n(f,"H2",{class:!0});var Mk=s(Ni);Gf=n(Mk,"A",{id:!0,class:!0,href:!0});var qwe=s(Gf);Nae=n(qwe,"SPAN",{});var jwe=s(Nae);T(d6.$$.fragment,jwe),jwe.forEach(t),qwe.forEach(t),PHe=i(Mk),Iae=n(Mk,"SPAN",{});var Dwe=s(Iae);BHe=r(Dwe,"AutoConfig"),Dwe.forEach(t),Mk.forEach(t),_Xe=i(f),Ao=n(f,"DIV",{class:!0});var nt=s(Ao);T(c6.$$.fragment,nt),NHe=i(nt),f6=n(nt,"P",{});var Ek=s(f6);IHe=r(Ek,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),zS=n(Ek,"A",{href:!0});var Gwe=s(zS);qHe=r(Gwe,"from_pretrained()"),Gwe.forEach(t),jHe=r(Ek," class method."),Ek.forEach(t),DHe=i(nt),m6=n(nt,"P",{});var Ck=s(m6);GHe=r(Ck,"This class cannot be instantiated directly using "),qae=n(Ck,"CODE",{});var Owe=s(qae);OHe=r(Owe,"__init__()"),Owe.forEach(t),VHe=r(Ck," (throws an error)."),Ck.forEach(t),XHe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(g6.$$.fragment,st),zHe=i(st),jae=n(st,"P",{});var Vwe=s(jae);QHe=r(Vwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Vwe.forEach(t),WHe=i(st),Ii=n(st,"P",{});var Rf=s(Ii);HHe=r(Rf,"The configuration class to instantiate is selected based on the "),Dae=n(Rf,"CODE",{});var Xwe=s(Dae);UHe=r(Xwe,"model_type"),Xwe.forEach(t),JHe=r(Rf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Gae=n(Rf,"CODE",{});var zwe=s(Gae);YHe=r(zwe,"pretrained_model_name_or_path"),zwe.forEach(t),KHe=r(Rf,":"),Rf.forEach(t),ZHe=i(st),A=n(st,"UL",{});var L=s(A);Of=n(L,"LI",{});var j5=s(Of);Oae=n(j5,"STRONG",{});var Qwe=s(Oae);eUe=r(Qwe,"albert"),Qwe.forEach(t),oUe=r(j5," \u2014 "),QS=n(j5,"A",{href:!0});var Wwe=s(QS);rUe=r(Wwe,"AlbertConfig"),Wwe.forEach(t),tUe=r(j5," (ALBERT model)"),j5.forEach(t),aUe=i(L),Vf=n(L,"LI",{});var D5=s(Vf);Vae=n(D5,"STRONG",{});var Hwe=s(Vae);nUe=r(Hwe,"bart"),Hwe.forEach(t),sUe=r(D5," \u2014 "),WS=n(D5,"A",{href:!0});var Uwe=s(WS);lUe=r(Uwe,"BartConfig"),Uwe.forEach(t),iUe=r(D5," (BART model)"),D5.forEach(t),dUe=i(L),Xf=n(L,"LI",{});var G5=s(Xf);Xae=n(G5,"STRONG",{});var Jwe=s(Xae);cUe=r(Jwe,"beit"),Jwe.forEach(t),fUe=r(G5," \u2014 "),HS=n(G5,"A",{href:!0});var Ywe=s(HS);mUe=r(Ywe,"BeitConfig"),Ywe.forEach(t),gUe=r(G5," (BEiT model)"),G5.forEach(t),hUe=i(L),zf=n(L,"LI",{});var O5=s(zf);zae=n(O5,"STRONG",{});var Kwe=s(zae);pUe=r(Kwe,"bert"),Kwe.forEach(t),_Ue=r(O5," \u2014 "),US=n(O5,"A",{href:!0});var Zwe=s(US);uUe=r(Zwe,"BertConfig"),Zwe.forEach(t),bUe=r(O5," (BERT model)"),O5.forEach(t),vUe=i(L),Qf=n(L,"LI",{});var V5=s(Qf);Qae=n(V5,"STRONG",{});var eAe=s(Qae);FUe=r(eAe,"bert-generation"),eAe.forEach(t),TUe=r(V5," \u2014 "),JS=n(V5,"A",{href:!0});var oAe=s(JS);MUe=r(oAe,"BertGenerationConfig"),oAe.forEach(t),EUe=r(V5," (Bert Generation model)"),V5.forEach(t),CUe=i(L),Wf=n(L,"LI",{});var X5=s(Wf);Wae=n(X5,"STRONG",{});var rAe=s(Wae);wUe=r(rAe,"big_bird"),rAe.forEach(t),AUe=r(X5," \u2014 "),YS=n(X5,"A",{href:!0});var tAe=s(YS);LUe=r(tAe,"BigBirdConfig"),tAe.forEach(t),yUe=r(X5," (BigBird model)"),X5.forEach(t),xUe=i(L),Hf=n(L,"LI",{});var z5=s(Hf);Hae=n(z5,"STRONG",{});var aAe=s(Hae);$Ue=r(aAe,"bigbird_pegasus"),aAe.forEach(t),kUe=r(z5," \u2014 "),KS=n(z5,"A",{href:!0});var nAe=s(KS);SUe=r(nAe,"BigBirdPegasusConfig"),nAe.forEach(t),RUe=r(z5," (BigBird-Pegasus model)"),z5.forEach(t),PUe=i(L),Uf=n(L,"LI",{});var Q5=s(Uf);Uae=n(Q5,"STRONG",{});var sAe=s(Uae);BUe=r(sAe,"blenderbot"),sAe.forEach(t),NUe=r(Q5," \u2014 "),ZS=n(Q5,"A",{href:!0});var lAe=s(ZS);IUe=r(lAe,"BlenderbotConfig"),lAe.forEach(t),qUe=r(Q5," (Blenderbot model)"),Q5.forEach(t),jUe=i(L),Jf=n(L,"LI",{});var W5=s(Jf);Jae=n(W5,"STRONG",{});var iAe=s(Jae);DUe=r(iAe,"blenderbot-small"),iAe.forEach(t),GUe=r(W5," \u2014 "),eR=n(W5,"A",{href:!0});var dAe=s(eR);OUe=r(dAe,"BlenderbotSmallConfig"),dAe.forEach(t),VUe=r(W5," (BlenderbotSmall model)"),W5.forEach(t),XUe=i(L),Yf=n(L,"LI",{});var H5=s(Yf);Yae=n(H5,"STRONG",{});var cAe=s(Yae);zUe=r(cAe,"bloom"),cAe.forEach(t),QUe=r(H5," \u2014 "),oR=n(H5,"A",{href:!0});var fAe=s(oR);WUe=r(fAe,"BloomConfig"),fAe.forEach(t),HUe=r(H5," (BLOOM model)"),H5.forEach(t),UUe=i(L),Kf=n(L,"LI",{});var U5=s(Kf);Kae=n(U5,"STRONG",{});var mAe=s(Kae);JUe=r(mAe,"camembert"),mAe.forEach(t),YUe=r(U5," \u2014 "),rR=n(U5,"A",{href:!0});var gAe=s(rR);KUe=r(gAe,"CamembertConfig"),gAe.forEach(t),ZUe=r(U5," (CamemBERT model)"),U5.forEach(t),eJe=i(L),Zf=n(L,"LI",{});var J5=s(Zf);Zae=n(J5,"STRONG",{});var hAe=s(Zae);oJe=r(hAe,"canine"),hAe.forEach(t),rJe=r(J5," \u2014 "),tR=n(J5,"A",{href:!0});var pAe=s(tR);tJe=r(pAe,"CanineConfig"),pAe.forEach(t),aJe=r(J5," (CANINE model)"),J5.forEach(t),nJe=i(L),em=n(L,"LI",{});var Y5=s(em);ene=n(Y5,"STRONG",{});var _Ae=s(ene);sJe=r(_Ae,"clip"),_Ae.forEach(t),lJe=r(Y5," \u2014 "),aR=n(Y5,"A",{href:!0});var uAe=s(aR);iJe=r(uAe,"CLIPConfig"),uAe.forEach(t),dJe=r(Y5," (CLIP model)"),Y5.forEach(t),cJe=i(L),om=n(L,"LI",{});var K5=s(om);one=n(K5,"STRONG",{});var bAe=s(one);fJe=r(bAe,"codegen"),bAe.forEach(t),mJe=r(K5," \u2014 "),nR=n(K5,"A",{href:!0});var vAe=s(nR);gJe=r(vAe,"CodeGenConfig"),vAe.forEach(t),hJe=r(K5," (CodeGen model)"),K5.forEach(t),pJe=i(L),rm=n(L,"LI",{});var Z5=s(rm);rne=n(Z5,"STRONG",{});var FAe=s(rne);_Je=r(FAe,"convbert"),FAe.forEach(t),uJe=r(Z5," \u2014 "),sR=n(Z5,"A",{href:!0});var TAe=s(sR);bJe=r(TAe,"ConvBertConfig"),TAe.forEach(t),vJe=r(Z5," (ConvBERT model)"),Z5.forEach(t),FJe=i(L),tm=n(L,"LI",{});var ew=s(tm);tne=n(ew,"STRONG",{});var MAe=s(tne);TJe=r(MAe,"convnext"),MAe.forEach(t),MJe=r(ew," \u2014 "),lR=n(ew,"A",{href:!0});var EAe=s(lR);EJe=r(EAe,"ConvNextConfig"),EAe.forEach(t),CJe=r(ew," (ConvNeXT model)"),ew.forEach(t),wJe=i(L),am=n(L,"LI",{});var ow=s(am);ane=n(ow,"STRONG",{});var CAe=s(ane);AJe=r(CAe,"ctrl"),CAe.forEach(t),LJe=r(ow," \u2014 "),iR=n(ow,"A",{href:!0});var wAe=s(iR);yJe=r(wAe,"CTRLConfig"),wAe.forEach(t),xJe=r(ow," (CTRL model)"),ow.forEach(t),$Je=i(L),nm=n(L,"LI",{});var rw=s(nm);nne=n(rw,"STRONG",{});var AAe=s(nne);kJe=r(AAe,"cvt"),AAe.forEach(t),SJe=r(rw," \u2014 "),dR=n(rw,"A",{href:!0});var LAe=s(dR);RJe=r(LAe,"CvtConfig"),LAe.forEach(t),PJe=r(rw," (CvT model)"),rw.forEach(t),BJe=i(L),sm=n(L,"LI",{});var tw=s(sm);sne=n(tw,"STRONG",{});var yAe=s(sne);NJe=r(yAe,"data2vec-audio"),yAe.forEach(t),IJe=r(tw," \u2014 "),cR=n(tw,"A",{href:!0});var xAe=s(cR);qJe=r(xAe,"Data2VecAudioConfig"),xAe.forEach(t),jJe=r(tw," (Data2VecAudio model)"),tw.forEach(t),DJe=i(L),lm=n(L,"LI",{});var aw=s(lm);lne=n(aw,"STRONG",{});var $Ae=s(lne);GJe=r($Ae,"data2vec-text"),$Ae.forEach(t),OJe=r(aw," \u2014 "),fR=n(aw,"A",{href:!0});var kAe=s(fR);VJe=r(kAe,"Data2VecTextConfig"),kAe.forEach(t),XJe=r(aw," (Data2VecText model)"),aw.forEach(t),zJe=i(L),im=n(L,"LI",{});var nw=s(im);ine=n(nw,"STRONG",{});var SAe=s(ine);QJe=r(SAe,"data2vec-vision"),SAe.forEach(t),WJe=r(nw," \u2014 "),mR=n(nw,"A",{href:!0});var RAe=s(mR);HJe=r(RAe,"Data2VecVisionConfig"),RAe.forEach(t),UJe=r(nw," (Data2VecVision model)"),nw.forEach(t),JJe=i(L),dm=n(L,"LI",{});var sw=s(dm);dne=n(sw,"STRONG",{});var PAe=s(dne);YJe=r(PAe,"deberta"),PAe.forEach(t),KJe=r(sw," \u2014 "),gR=n(sw,"A",{href:!0});var BAe=s(gR);ZJe=r(BAe,"DebertaConfig"),BAe.forEach(t),eYe=r(sw," (DeBERTa model)"),sw.forEach(t),oYe=i(L),cm=n(L,"LI",{});var lw=s(cm);cne=n(lw,"STRONG",{});var NAe=s(cne);rYe=r(NAe,"deberta-v2"),NAe.forEach(t),tYe=r(lw," \u2014 "),hR=n(lw,"A",{href:!0});var IAe=s(hR);aYe=r(IAe,"DebertaV2Config"),IAe.forEach(t),nYe=r(lw," (DeBERTa-v2 model)"),lw.forEach(t),sYe=i(L),fm=n(L,"LI",{});var iw=s(fm);fne=n(iw,"STRONG",{});var Rtt=s(fne);lYe=r(Rtt,"decision_transformer"),Rtt.forEach(t),iYe=r(iw," \u2014 "),pR=n(iw,"A",{href:!0});var Ptt=s(pR);dYe=r(Ptt,"DecisionTransformerConfig"),Ptt.forEach(t),cYe=r(iw," (Decision Transformer model)"),iw.forEach(t),fYe=i(L),mm=n(L,"LI",{});var qAe=s(mm);mne=n(qAe,"STRONG",{});var Btt=s(mne);mYe=r(Btt,"deit"),Btt.forEach(t),gYe=r(qAe," \u2014 "),_R=n(qAe,"A",{href:!0});var Ntt=s(_R);hYe=r(Ntt,"DeiTConfig"),Ntt.forEach(t),pYe=r(qAe," (DeiT model)"),qAe.forEach(t),_Ye=i(L),gm=n(L,"LI",{});var jAe=s(gm);gne=n(jAe,"STRONG",{});var Itt=s(gne);uYe=r(Itt,"detr"),Itt.forEach(t),bYe=r(jAe," \u2014 "),uR=n(jAe,"A",{href:!0});var qtt=s(uR);vYe=r(qtt,"DetrConfig"),qtt.forEach(t),FYe=r(jAe," (DETR model)"),jAe.forEach(t),TYe=i(L),hm=n(L,"LI",{});var DAe=s(hm);hne=n(DAe,"STRONG",{});var jtt=s(hne);MYe=r(jtt,"distilbert"),jtt.forEach(t),EYe=r(DAe," \u2014 "),bR=n(DAe,"A",{href:!0});var Dtt=s(bR);CYe=r(Dtt,"DistilBertConfig"),Dtt.forEach(t),wYe=r(DAe," (DistilBERT model)"),DAe.forEach(t),AYe=i(L),pm=n(L,"LI",{});var GAe=s(pm);pne=n(GAe,"STRONG",{});var Gtt=s(pne);LYe=r(Gtt,"dpr"),Gtt.forEach(t),yYe=r(GAe," \u2014 "),vR=n(GAe,"A",{href:!0});var Ott=s(vR);xYe=r(Ott,"DPRConfig"),Ott.forEach(t),$Ye=r(GAe," (DPR model)"),GAe.forEach(t),kYe=i(L),_m=n(L,"LI",{});var OAe=s(_m);_ne=n(OAe,"STRONG",{});var Vtt=s(_ne);SYe=r(Vtt,"dpt"),Vtt.forEach(t),RYe=r(OAe," \u2014 "),FR=n(OAe,"A",{href:!0});var Xtt=s(FR);PYe=r(Xtt,"DPTConfig"),Xtt.forEach(t),BYe=r(OAe," (DPT model)"),OAe.forEach(t),NYe=i(L),um=n(L,"LI",{});var VAe=s(um);une=n(VAe,"STRONG",{});var ztt=s(une);IYe=r(ztt,"electra"),ztt.forEach(t),qYe=r(VAe," \u2014 "),TR=n(VAe,"A",{href:!0});var Qtt=s(TR);jYe=r(Qtt,"ElectraConfig"),Qtt.forEach(t),DYe=r(VAe," (ELECTRA model)"),VAe.forEach(t),GYe=i(L),bm=n(L,"LI",{});var XAe=s(bm);bne=n(XAe,"STRONG",{});var Wtt=s(bne);OYe=r(Wtt,"encoder-decoder"),Wtt.forEach(t),VYe=r(XAe," \u2014 "),MR=n(XAe,"A",{href:!0});var Htt=s(MR);XYe=r(Htt,"EncoderDecoderConfig"),Htt.forEach(t),zYe=r(XAe," (Encoder decoder model)"),XAe.forEach(t),QYe=i(L),vm=n(L,"LI",{});var zAe=s(vm);vne=n(zAe,"STRONG",{});var Utt=s(vne);WYe=r(Utt,"flaubert"),Utt.forEach(t),HYe=r(zAe," \u2014 "),ER=n(zAe,"A",{href:!0});var Jtt=s(ER);UYe=r(Jtt,"FlaubertConfig"),Jtt.forEach(t),JYe=r(zAe," (FlauBERT model)"),zAe.forEach(t),YYe=i(L),Fm=n(L,"LI",{});var QAe=s(Fm);Fne=n(QAe,"STRONG",{});var Ytt=s(Fne);KYe=r(Ytt,"flava"),Ytt.forEach(t),ZYe=r(QAe," \u2014 "),CR=n(QAe,"A",{href:!0});var Ktt=s(CR);eKe=r(Ktt,"FlavaConfig"),Ktt.forEach(t),oKe=r(QAe," (FLAVA model)"),QAe.forEach(t),rKe=i(L),Tm=n(L,"LI",{});var WAe=s(Tm);Tne=n(WAe,"STRONG",{});var Ztt=s(Tne);tKe=r(Ztt,"fnet"),Ztt.forEach(t),aKe=r(WAe," \u2014 "),wR=n(WAe,"A",{href:!0});var eat=s(wR);nKe=r(eat,"FNetConfig"),eat.forEach(t),sKe=r(WAe," (FNet model)"),WAe.forEach(t),lKe=i(L),Mm=n(L,"LI",{});var HAe=s(Mm);Mne=n(HAe,"STRONG",{});var oat=s(Mne);iKe=r(oat,"fsmt"),oat.forEach(t),dKe=r(HAe," \u2014 "),AR=n(HAe,"A",{href:!0});var rat=s(AR);cKe=r(rat,"FSMTConfig"),rat.forEach(t),fKe=r(HAe," (FairSeq Machine-Translation model)"),HAe.forEach(t),mKe=i(L),Em=n(L,"LI",{});var UAe=s(Em);Ene=n(UAe,"STRONG",{});var tat=s(Ene);gKe=r(tat,"funnel"),tat.forEach(t),hKe=r(UAe," \u2014 "),LR=n(UAe,"A",{href:!0});var aat=s(LR);pKe=r(aat,"FunnelConfig"),aat.forEach(t),_Ke=r(UAe," (Funnel Transformer model)"),UAe.forEach(t),uKe=i(L),Cm=n(L,"LI",{});var JAe=s(Cm);Cne=n(JAe,"STRONG",{});var nat=s(Cne);bKe=r(nat,"glpn"),nat.forEach(t),vKe=r(JAe," \u2014 "),yR=n(JAe,"A",{href:!0});var sat=s(yR);FKe=r(sat,"GLPNConfig"),sat.forEach(t),TKe=r(JAe," (GLPN model)"),JAe.forEach(t),MKe=i(L),wm=n(L,"LI",{});var YAe=s(wm);wne=n(YAe,"STRONG",{});var lat=s(wne);EKe=r(lat,"gpt2"),lat.forEach(t),CKe=r(YAe," \u2014 "),xR=n(YAe,"A",{href:!0});var iat=s(xR);wKe=r(iat,"GPT2Config"),iat.forEach(t),AKe=r(YAe," (OpenAI GPT-2 model)"),YAe.forEach(t),LKe=i(L),Am=n(L,"LI",{});var KAe=s(Am);Ane=n(KAe,"STRONG",{});var dat=s(Ane);yKe=r(dat,"gpt_neo"),dat.forEach(t),xKe=r(KAe," \u2014 "),$R=n(KAe,"A",{href:!0});var cat=s($R);$Ke=r(cat,"GPTNeoConfig"),cat.forEach(t),kKe=r(KAe," (GPT Neo model)"),KAe.forEach(t),SKe=i(L),Lm=n(L,"LI",{});var ZAe=s(Lm);Lne=n(ZAe,"STRONG",{});var fat=s(Lne);RKe=r(fat,"gpt_neox"),fat.forEach(t),PKe=r(ZAe," \u2014 "),kR=n(ZAe,"A",{href:!0});var mat=s(kR);BKe=r(mat,"GPTNeoXConfig"),mat.forEach(t),NKe=r(ZAe," (GPT NeoX model)"),ZAe.forEach(t),IKe=i(L),ym=n(L,"LI",{});var e6e=s(ym);yne=n(e6e,"STRONG",{});var gat=s(yne);qKe=r(gat,"gptj"),gat.forEach(t),jKe=r(e6e," \u2014 "),SR=n(e6e,"A",{href:!0});var hat=s(SR);DKe=r(hat,"GPTJConfig"),hat.forEach(t),GKe=r(e6e," (GPT-J model)"),e6e.forEach(t),OKe=i(L),xm=n(L,"LI",{});var o6e=s(xm);xne=n(o6e,"STRONG",{});var pat=s(xne);VKe=r(pat,"groupvit"),pat.forEach(t),XKe=r(o6e," \u2014 "),RR=n(o6e,"A",{href:!0});var _at=s(RR);zKe=r(_at,"GroupViTConfig"),_at.forEach(t),QKe=r(o6e," (GroupViT model)"),o6e.forEach(t),WKe=i(L),$m=n(L,"LI",{});var r6e=s($m);$ne=n(r6e,"STRONG",{});var uat=s($ne);HKe=r(uat,"hubert"),uat.forEach(t),UKe=r(r6e," \u2014 "),PR=n(r6e,"A",{href:!0});var bat=s(PR);JKe=r(bat,"HubertConfig"),bat.forEach(t),YKe=r(r6e," (Hubert model)"),r6e.forEach(t),KKe=i(L),km=n(L,"LI",{});var t6e=s(km);kne=n(t6e,"STRONG",{});var vat=s(kne);ZKe=r(vat,"ibert"),vat.forEach(t),eZe=r(t6e," \u2014 "),BR=n(t6e,"A",{href:!0});var Fat=s(BR);oZe=r(Fat,"IBertConfig"),Fat.forEach(t),rZe=r(t6e," (I-BERT model)"),t6e.forEach(t),tZe=i(L),Sm=n(L,"LI",{});var a6e=s(Sm);Sne=n(a6e,"STRONG",{});var Tat=s(Sne);aZe=r(Tat,"imagegpt"),Tat.forEach(t),nZe=r(a6e," \u2014 "),NR=n(a6e,"A",{href:!0});var Mat=s(NR);sZe=r(Mat,"ImageGPTConfig"),Mat.forEach(t),lZe=r(a6e," (ImageGPT model)"),a6e.forEach(t),iZe=i(L),Rm=n(L,"LI",{});var n6e=s(Rm);Rne=n(n6e,"STRONG",{});var Eat=s(Rne);dZe=r(Eat,"layoutlm"),Eat.forEach(t),cZe=r(n6e," \u2014 "),IR=n(n6e,"A",{href:!0});var Cat=s(IR);fZe=r(Cat,"LayoutLMConfig"),Cat.forEach(t),mZe=r(n6e," (LayoutLM model)"),n6e.forEach(t),gZe=i(L),Pm=n(L,"LI",{});var s6e=s(Pm);Pne=n(s6e,"STRONG",{});var wat=s(Pne);hZe=r(wat,"layoutlmv2"),wat.forEach(t),pZe=r(s6e," \u2014 "),qR=n(s6e,"A",{href:!0});var Aat=s(qR);_Ze=r(Aat,"LayoutLMv2Config"),Aat.forEach(t),uZe=r(s6e," (LayoutLMv2 model)"),s6e.forEach(t),bZe=i(L),Bm=n(L,"LI",{});var l6e=s(Bm);Bne=n(l6e,"STRONG",{});var Lat=s(Bne);vZe=r(Lat,"layoutlmv3"),Lat.forEach(t),FZe=r(l6e," \u2014 "),jR=n(l6e,"A",{href:!0});var yat=s(jR);TZe=r(yat,"LayoutLMv3Config"),yat.forEach(t),MZe=r(l6e," (LayoutLMv3 model)"),l6e.forEach(t),EZe=i(L),Nm=n(L,"LI",{});var i6e=s(Nm);Nne=n(i6e,"STRONG",{});var xat=s(Nne);CZe=r(xat,"led"),xat.forEach(t),wZe=r(i6e," \u2014 "),DR=n(i6e,"A",{href:!0});var $at=s(DR);AZe=r($at,"LEDConfig"),$at.forEach(t),LZe=r(i6e," (LED model)"),i6e.forEach(t),yZe=i(L),Im=n(L,"LI",{});var d6e=s(Im);Ine=n(d6e,"STRONG",{});var kat=s(Ine);xZe=r(kat,"levit"),kat.forEach(t),$Ze=r(d6e," \u2014 "),GR=n(d6e,"A",{href:!0});var Sat=s(GR);kZe=r(Sat,"LevitConfig"),Sat.forEach(t),SZe=r(d6e," (LeViT model)"),d6e.forEach(t),RZe=i(L),qm=n(L,"LI",{});var c6e=s(qm);qne=n(c6e,"STRONG",{});var Rat=s(qne);PZe=r(Rat,"longformer"),Rat.forEach(t),BZe=r(c6e," \u2014 "),OR=n(c6e,"A",{href:!0});var Pat=s(OR);NZe=r(Pat,"LongformerConfig"),Pat.forEach(t),IZe=r(c6e," (Longformer model)"),c6e.forEach(t),qZe=i(L),jm=n(L,"LI",{});var f6e=s(jm);jne=n(f6e,"STRONG",{});var Bat=s(jne);jZe=r(Bat,"longt5"),Bat.forEach(t),DZe=r(f6e," \u2014 "),VR=n(f6e,"A",{href:!0});var Nat=s(VR);GZe=r(Nat,"LongT5Config"),Nat.forEach(t),OZe=r(f6e," (LongT5 model)"),f6e.forEach(t),VZe=i(L),Dm=n(L,"LI",{});var m6e=s(Dm);Dne=n(m6e,"STRONG",{});var Iat=s(Dne);XZe=r(Iat,"luke"),Iat.forEach(t),zZe=r(m6e," \u2014 "),XR=n(m6e,"A",{href:!0});var qat=s(XR);QZe=r(qat,"LukeConfig"),qat.forEach(t),WZe=r(m6e," (LUKE model)"),m6e.forEach(t),HZe=i(L),Gm=n(L,"LI",{});var g6e=s(Gm);Gne=n(g6e,"STRONG",{});var jat=s(Gne);UZe=r(jat,"lxmert"),jat.forEach(t),JZe=r(g6e," \u2014 "),zR=n(g6e,"A",{href:!0});var Dat=s(zR);YZe=r(Dat,"LxmertConfig"),Dat.forEach(t),KZe=r(g6e," (LXMERT model)"),g6e.forEach(t),ZZe=i(L),Om=n(L,"LI",{});var h6e=s(Om);One=n(h6e,"STRONG",{});var Gat=s(One);eeo=r(Gat,"m2m_100"),Gat.forEach(t),oeo=r(h6e," \u2014 "),QR=n(h6e,"A",{href:!0});var Oat=s(QR);reo=r(Oat,"M2M100Config"),Oat.forEach(t),teo=r(h6e," (M2M100 model)"),h6e.forEach(t),aeo=i(L),Vm=n(L,"LI",{});var p6e=s(Vm);Vne=n(p6e,"STRONG",{});var Vat=s(Vne);neo=r(Vat,"marian"),Vat.forEach(t),seo=r(p6e," \u2014 "),WR=n(p6e,"A",{href:!0});var Xat=s(WR);leo=r(Xat,"MarianConfig"),Xat.forEach(t),ieo=r(p6e," (Marian model)"),p6e.forEach(t),deo=i(L),Xm=n(L,"LI",{});var _6e=s(Xm);Xne=n(_6e,"STRONG",{});var zat=s(Xne);ceo=r(zat,"maskformer"),zat.forEach(t),feo=r(_6e," \u2014 "),HR=n(_6e,"A",{href:!0});var Qat=s(HR);meo=r(Qat,"MaskFormerConfig"),Qat.forEach(t),geo=r(_6e," (MaskFormer model)"),_6e.forEach(t),heo=i(L),zm=n(L,"LI",{});var u6e=s(zm);zne=n(u6e,"STRONG",{});var Wat=s(zne);peo=r(Wat,"mbart"),Wat.forEach(t),_eo=r(u6e," \u2014 "),UR=n(u6e,"A",{href:!0});var Hat=s(UR);ueo=r(Hat,"MBartConfig"),Hat.forEach(t),beo=r(u6e," (mBART model)"),u6e.forEach(t),veo=i(L),Qm=n(L,"LI",{});var b6e=s(Qm);Qne=n(b6e,"STRONG",{});var Uat=s(Qne);Feo=r(Uat,"mctct"),Uat.forEach(t),Teo=r(b6e," \u2014 "),JR=n(b6e,"A",{href:!0});var Jat=s(JR);Meo=r(Jat,"MCTCTConfig"),Jat.forEach(t),Eeo=r(b6e," (M-CTC-T model)"),b6e.forEach(t),Ceo=i(L),Wm=n(L,"LI",{});var v6e=s(Wm);Wne=n(v6e,"STRONG",{});var Yat=s(Wne);weo=r(Yat,"megatron-bert"),Yat.forEach(t),Aeo=r(v6e," \u2014 "),YR=n(v6e,"A",{href:!0});var Kat=s(YR);Leo=r(Kat,"MegatronBertConfig"),Kat.forEach(t),yeo=r(v6e," (Megatron-BERT model)"),v6e.forEach(t),xeo=i(L),Hm=n(L,"LI",{});var F6e=s(Hm);Hne=n(F6e,"STRONG",{});var Zat=s(Hne);$eo=r(Zat,"mobilebert"),Zat.forEach(t),keo=r(F6e," \u2014 "),KR=n(F6e,"A",{href:!0});var ent=s(KR);Seo=r(ent,"MobileBertConfig"),ent.forEach(t),Reo=r(F6e," (MobileBERT model)"),F6e.forEach(t),Peo=i(L),Um=n(L,"LI",{});var T6e=s(Um);Une=n(T6e,"STRONG",{});var ont=s(Une);Beo=r(ont,"mobilevit"),ont.forEach(t),Neo=r(T6e," \u2014 "),ZR=n(T6e,"A",{href:!0});var rnt=s(ZR);Ieo=r(rnt,"MobileViTConfig"),rnt.forEach(t),qeo=r(T6e," (MobileViT model)"),T6e.forEach(t),jeo=i(L),Jm=n(L,"LI",{});var M6e=s(Jm);Jne=n(M6e,"STRONG",{});var tnt=s(Jne);Deo=r(tnt,"mpnet"),tnt.forEach(t),Geo=r(M6e," \u2014 "),eP=n(M6e,"A",{href:!0});var ant=s(eP);Oeo=r(ant,"MPNetConfig"),ant.forEach(t),Veo=r(M6e," (MPNet model)"),M6e.forEach(t),Xeo=i(L),Ym=n(L,"LI",{});var E6e=s(Ym);Yne=n(E6e,"STRONG",{});var nnt=s(Yne);zeo=r(nnt,"mt5"),nnt.forEach(t),Qeo=r(E6e," \u2014 "),oP=n(E6e,"A",{href:!0});var snt=s(oP);Weo=r(snt,"MT5Config"),snt.forEach(t),Heo=r(E6e," (MT5 model)"),E6e.forEach(t),Ueo=i(L),Km=n(L,"LI",{});var C6e=s(Km);Kne=n(C6e,"STRONG",{});var lnt=s(Kne);Jeo=r(lnt,"mvp"),lnt.forEach(t),Yeo=r(C6e," \u2014 "),rP=n(C6e,"A",{href:!0});var int=s(rP);Keo=r(int,"MvpConfig"),int.forEach(t),Zeo=r(C6e," (MVP model)"),C6e.forEach(t),eoo=i(L),Zm=n(L,"LI",{});var w6e=s(Zm);Zne=n(w6e,"STRONG",{});var dnt=s(Zne);ooo=r(dnt,"nezha"),dnt.forEach(t),roo=r(w6e," \u2014 "),tP=n(w6e,"A",{href:!0});var cnt=s(tP);too=r(cnt,"NezhaConfig"),cnt.forEach(t),aoo=r(w6e," (Nezha model)"),w6e.forEach(t),noo=i(L),eg=n(L,"LI",{});var A6e=s(eg);ese=n(A6e,"STRONG",{});var fnt=s(ese);soo=r(fnt,"nystromformer"),fnt.forEach(t),loo=r(A6e," \u2014 "),aP=n(A6e,"A",{href:!0});var mnt=s(aP);ioo=r(mnt,"NystromformerConfig"),mnt.forEach(t),doo=r(A6e," (Nystr\xF6mformer model)"),A6e.forEach(t),coo=i(L),og=n(L,"LI",{});var L6e=s(og);ose=n(L6e,"STRONG",{});var gnt=s(ose);foo=r(gnt,"openai-gpt"),gnt.forEach(t),moo=r(L6e," \u2014 "),nP=n(L6e,"A",{href:!0});var hnt=s(nP);goo=r(hnt,"OpenAIGPTConfig"),hnt.forEach(t),hoo=r(L6e," (OpenAI GPT model)"),L6e.forEach(t),poo=i(L),rg=n(L,"LI",{});var y6e=s(rg);rse=n(y6e,"STRONG",{});var pnt=s(rse);_oo=r(pnt,"opt"),pnt.forEach(t),uoo=r(y6e," \u2014 "),sP=n(y6e,"A",{href:!0});var _nt=s(sP);boo=r(_nt,"OPTConfig"),_nt.forEach(t),voo=r(y6e," (OPT model)"),y6e.forEach(t),Foo=i(L),tg=n(L,"LI",{});var x6e=s(tg);tse=n(x6e,"STRONG",{});var unt=s(tse);Too=r(unt,"pegasus"),unt.forEach(t),Moo=r(x6e," \u2014 "),lP=n(x6e,"A",{href:!0});var bnt=s(lP);Eoo=r(bnt,"PegasusConfig"),bnt.forEach(t),Coo=r(x6e," (Pegasus model)"),x6e.forEach(t),woo=i(L),ag=n(L,"LI",{});var $6e=s(ag);ase=n($6e,"STRONG",{});var vnt=s(ase);Aoo=r(vnt,"perceiver"),vnt.forEach(t),Loo=r($6e," \u2014 "),iP=n($6e,"A",{href:!0});var Fnt=s(iP);yoo=r(Fnt,"PerceiverConfig"),Fnt.forEach(t),xoo=r($6e," (Perceiver model)"),$6e.forEach(t),$oo=i(L),ng=n(L,"LI",{});var k6e=s(ng);nse=n(k6e,"STRONG",{});var Tnt=s(nse);koo=r(Tnt,"plbart"),Tnt.forEach(t),Soo=r(k6e," \u2014 "),dP=n(k6e,"A",{href:!0});var Mnt=s(dP);Roo=r(Mnt,"PLBartConfig"),Mnt.forEach(t),Poo=r(k6e," (PLBart model)"),k6e.forEach(t),Boo=i(L),sg=n(L,"LI",{});var S6e=s(sg);sse=n(S6e,"STRONG",{});var Ent=s(sse);Noo=r(Ent,"poolformer"),Ent.forEach(t),Ioo=r(S6e," \u2014 "),cP=n(S6e,"A",{href:!0});var Cnt=s(cP);qoo=r(Cnt,"PoolFormerConfig"),Cnt.forEach(t),joo=r(S6e," (PoolFormer model)"),S6e.forEach(t),Doo=i(L),lg=n(L,"LI",{});var R6e=s(lg);lse=n(R6e,"STRONG",{});var wnt=s(lse);Goo=r(wnt,"prophetnet"),wnt.forEach(t),Ooo=r(R6e," \u2014 "),fP=n(R6e,"A",{href:!0});var Ant=s(fP);Voo=r(Ant,"ProphetNetConfig"),Ant.forEach(t),Xoo=r(R6e," (ProphetNet model)"),R6e.forEach(t),zoo=i(L),ig=n(L,"LI",{});var P6e=s(ig);ise=n(P6e,"STRONG",{});var Lnt=s(ise);Qoo=r(Lnt,"qdqbert"),Lnt.forEach(t),Woo=r(P6e," \u2014 "),mP=n(P6e,"A",{href:!0});var ynt=s(mP);Hoo=r(ynt,"QDQBertConfig"),ynt.forEach(t),Uoo=r(P6e," (QDQBert model)"),P6e.forEach(t),Joo=i(L),dg=n(L,"LI",{});var B6e=s(dg);dse=n(B6e,"STRONG",{});var xnt=s(dse);Yoo=r(xnt,"rag"),xnt.forEach(t),Koo=r(B6e," \u2014 "),gP=n(B6e,"A",{href:!0});var $nt=s(gP);Zoo=r($nt,"RagConfig"),$nt.forEach(t),ero=r(B6e," (RAG model)"),B6e.forEach(t),oro=i(L),cg=n(L,"LI",{});var N6e=s(cg);cse=n(N6e,"STRONG",{});var knt=s(cse);rro=r(knt,"realm"),knt.forEach(t),tro=r(N6e," \u2014 "),hP=n(N6e,"A",{href:!0});var Snt=s(hP);aro=r(Snt,"RealmConfig"),Snt.forEach(t),nro=r(N6e," (REALM model)"),N6e.forEach(t),sro=i(L),fg=n(L,"LI",{});var I6e=s(fg);fse=n(I6e,"STRONG",{});var Rnt=s(fse);lro=r(Rnt,"reformer"),Rnt.forEach(t),iro=r(I6e," \u2014 "),pP=n(I6e,"A",{href:!0});var Pnt=s(pP);dro=r(Pnt,"ReformerConfig"),Pnt.forEach(t),cro=r(I6e," (Reformer model)"),I6e.forEach(t),fro=i(L),mg=n(L,"LI",{});var q6e=s(mg);mse=n(q6e,"STRONG",{});var Bnt=s(mse);mro=r(Bnt,"regnet"),Bnt.forEach(t),gro=r(q6e," \u2014 "),_P=n(q6e,"A",{href:!0});var Nnt=s(_P);hro=r(Nnt,"RegNetConfig"),Nnt.forEach(t),pro=r(q6e," (RegNet model)"),q6e.forEach(t),_ro=i(L),gg=n(L,"LI",{});var j6e=s(gg);gse=n(j6e,"STRONG",{});var Int=s(gse);uro=r(Int,"rembert"),Int.forEach(t),bro=r(j6e," \u2014 "),uP=n(j6e,"A",{href:!0});var qnt=s(uP);vro=r(qnt,"RemBertConfig"),qnt.forEach(t),Fro=r(j6e," (RemBERT model)"),j6e.forEach(t),Tro=i(L),hg=n(L,"LI",{});var D6e=s(hg);hse=n(D6e,"STRONG",{});var jnt=s(hse);Mro=r(jnt,"resnet"),jnt.forEach(t),Ero=r(D6e," \u2014 "),bP=n(D6e,"A",{href:!0});var Dnt=s(bP);Cro=r(Dnt,"ResNetConfig"),Dnt.forEach(t),wro=r(D6e," (ResNet model)"),D6e.forEach(t),Aro=i(L),pg=n(L,"LI",{});var G6e=s(pg);pse=n(G6e,"STRONG",{});var Gnt=s(pse);Lro=r(Gnt,"retribert"),Gnt.forEach(t),yro=r(G6e," \u2014 "),vP=n(G6e,"A",{href:!0});var Ont=s(vP);xro=r(Ont,"RetriBertConfig"),Ont.forEach(t),$ro=r(G6e," (RetriBERT model)"),G6e.forEach(t),kro=i(L),_g=n(L,"LI",{});var O6e=s(_g);_se=n(O6e,"STRONG",{});var Vnt=s(_se);Sro=r(Vnt,"roberta"),Vnt.forEach(t),Rro=r(O6e," \u2014 "),FP=n(O6e,"A",{href:!0});var Xnt=s(FP);Pro=r(Xnt,"RobertaConfig"),Xnt.forEach(t),Bro=r(O6e," (RoBERTa model)"),O6e.forEach(t),Nro=i(L),ug=n(L,"LI",{});var V6e=s(ug);use=n(V6e,"STRONG",{});var znt=s(use);Iro=r(znt,"roformer"),znt.forEach(t),qro=r(V6e," \u2014 "),TP=n(V6e,"A",{href:!0});var Qnt=s(TP);jro=r(Qnt,"RoFormerConfig"),Qnt.forEach(t),Dro=r(V6e," (RoFormer model)"),V6e.forEach(t),Gro=i(L),bg=n(L,"LI",{});var X6e=s(bg);bse=n(X6e,"STRONG",{});var Wnt=s(bse);Oro=r(Wnt,"segformer"),Wnt.forEach(t),Vro=r(X6e," \u2014 "),MP=n(X6e,"A",{href:!0});var Hnt=s(MP);Xro=r(Hnt,"SegformerConfig"),Hnt.forEach(t),zro=r(X6e," (SegFormer model)"),X6e.forEach(t),Qro=i(L),vg=n(L,"LI",{});var z6e=s(vg);vse=n(z6e,"STRONG",{});var Unt=s(vse);Wro=r(Unt,"sew"),Unt.forEach(t),Hro=r(z6e," \u2014 "),EP=n(z6e,"A",{href:!0});var Jnt=s(EP);Uro=r(Jnt,"SEWConfig"),Jnt.forEach(t),Jro=r(z6e," (SEW model)"),z6e.forEach(t),Yro=i(L),Fg=n(L,"LI",{});var Q6e=s(Fg);Fse=n(Q6e,"STRONG",{});var Ynt=s(Fse);Kro=r(Ynt,"sew-d"),Ynt.forEach(t),Zro=r(Q6e," \u2014 "),CP=n(Q6e,"A",{href:!0});var Knt=s(CP);eto=r(Knt,"SEWDConfig"),Knt.forEach(t),oto=r(Q6e," (SEW-D model)"),Q6e.forEach(t),rto=i(L),Tg=n(L,"LI",{});var W6e=s(Tg);Tse=n(W6e,"STRONG",{});var Znt=s(Tse);tto=r(Znt,"speech-encoder-decoder"),Znt.forEach(t),ato=r(W6e," \u2014 "),wP=n(W6e,"A",{href:!0});var est=s(wP);nto=r(est,"SpeechEncoderDecoderConfig"),est.forEach(t),sto=r(W6e," (Speech Encoder decoder model)"),W6e.forEach(t),lto=i(L),Mg=n(L,"LI",{});var H6e=s(Mg);Mse=n(H6e,"STRONG",{});var ost=s(Mse);ito=r(ost,"speech_to_text"),ost.forEach(t),dto=r(H6e," \u2014 "),AP=n(H6e,"A",{href:!0});var rst=s(AP);cto=r(rst,"Speech2TextConfig"),rst.forEach(t),fto=r(H6e," (Speech2Text model)"),H6e.forEach(t),mto=i(L),Eg=n(L,"LI",{});var U6e=s(Eg);Ese=n(U6e,"STRONG",{});var tst=s(Ese);gto=r(tst,"speech_to_text_2"),tst.forEach(t),hto=r(U6e," \u2014 "),LP=n(U6e,"A",{href:!0});var ast=s(LP);pto=r(ast,"Speech2Text2Config"),ast.forEach(t),_to=r(U6e," (Speech2Text2 model)"),U6e.forEach(t),uto=i(L),Cg=n(L,"LI",{});var J6e=s(Cg);Cse=n(J6e,"STRONG",{});var nst=s(Cse);bto=r(nst,"splinter"),nst.forEach(t),vto=r(J6e," \u2014 "),yP=n(J6e,"A",{href:!0});var sst=s(yP);Fto=r(sst,"SplinterConfig"),sst.forEach(t),Tto=r(J6e," (Splinter model)"),J6e.forEach(t),Mto=i(L),wg=n(L,"LI",{});var Y6e=s(wg);wse=n(Y6e,"STRONG",{});var lst=s(wse);Eto=r(lst,"squeezebert"),lst.forEach(t),Cto=r(Y6e," \u2014 "),xP=n(Y6e,"A",{href:!0});var ist=s(xP);wto=r(ist,"SqueezeBertConfig"),ist.forEach(t),Ato=r(Y6e," (SqueezeBERT model)"),Y6e.forEach(t),Lto=i(L),Ag=n(L,"LI",{});var K6e=s(Ag);Ase=n(K6e,"STRONG",{});var dst=s(Ase);yto=r(dst,"swin"),dst.forEach(t),xto=r(K6e," \u2014 "),$P=n(K6e,"A",{href:!0});var cst=s($P);$to=r(cst,"SwinConfig"),cst.forEach(t),kto=r(K6e," (Swin Transformer model)"),K6e.forEach(t),Sto=i(L),Lg=n(L,"LI",{});var Z6e=s(Lg);Lse=n(Z6e,"STRONG",{});var fst=s(Lse);Rto=r(fst,"t5"),fst.forEach(t),Pto=r(Z6e," \u2014 "),kP=n(Z6e,"A",{href:!0});var mst=s(kP);Bto=r(mst,"T5Config"),mst.forEach(t),Nto=r(Z6e," (T5 model)"),Z6e.forEach(t),Ito=i(L),yg=n(L,"LI",{});var eLe=s(yg);yse=n(eLe,"STRONG",{});var gst=s(yse);qto=r(gst,"tapas"),gst.forEach(t),jto=r(eLe," \u2014 "),SP=n(eLe,"A",{href:!0});var hst=s(SP);Dto=r(hst,"TapasConfig"),hst.forEach(t),Gto=r(eLe," (TAPAS model)"),eLe.forEach(t),Oto=i(L),xg=n(L,"LI",{});var oLe=s(xg);xse=n(oLe,"STRONG",{});var pst=s(xse);Vto=r(pst,"trajectory_transformer"),pst.forEach(t),Xto=r(oLe," \u2014 "),RP=n(oLe,"A",{href:!0});var _st=s(RP);zto=r(_st,"TrajectoryTransformerConfig"),_st.forEach(t),Qto=r(oLe," (Trajectory Transformer model)"),oLe.forEach(t),Wto=i(L),$g=n(L,"LI",{});var rLe=s($g);$se=n(rLe,"STRONG",{});var ust=s($se);Hto=r(ust,"transfo-xl"),ust.forEach(t),Uto=r(rLe," \u2014 "),PP=n(rLe,"A",{href:!0});var bst=s(PP);Jto=r(bst,"TransfoXLConfig"),bst.forEach(t),Yto=r(rLe," (Transformer-XL model)"),rLe.forEach(t),Kto=i(L),kg=n(L,"LI",{});var tLe=s(kg);kse=n(tLe,"STRONG",{});var vst=s(kse);Zto=r(vst,"trocr"),vst.forEach(t),eao=r(tLe," \u2014 "),BP=n(tLe,"A",{href:!0});var Fst=s(BP);oao=r(Fst,"TrOCRConfig"),Fst.forEach(t),rao=r(tLe," (TrOCR model)"),tLe.forEach(t),tao=i(L),Sg=n(L,"LI",{});var aLe=s(Sg);Sse=n(aLe,"STRONG",{});var Tst=s(Sse);aao=r(Tst,"unispeech"),Tst.forEach(t),nao=r(aLe," \u2014 "),NP=n(aLe,"A",{href:!0});var Mst=s(NP);sao=r(Mst,"UniSpeechConfig"),Mst.forEach(t),lao=r(aLe," (UniSpeech model)"),aLe.forEach(t),iao=i(L),Rg=n(L,"LI",{});var nLe=s(Rg);Rse=n(nLe,"STRONG",{});var Est=s(Rse);dao=r(Est,"unispeech-sat"),Est.forEach(t),cao=r(nLe," \u2014 "),IP=n(nLe,"A",{href:!0});var Cst=s(IP);fao=r(Cst,"UniSpeechSatConfig"),Cst.forEach(t),mao=r(nLe," (UniSpeechSat model)"),nLe.forEach(t),gao=i(L),Pg=n(L,"LI",{});var sLe=s(Pg);Pse=n(sLe,"STRONG",{});var wst=s(Pse);hao=r(wst,"van"),wst.forEach(t),pao=r(sLe," \u2014 "),qP=n(sLe,"A",{href:!0});var Ast=s(qP);_ao=r(Ast,"VanConfig"),Ast.forEach(t),uao=r(sLe," (VAN model)"),sLe.forEach(t),bao=i(L),Bg=n(L,"LI",{});var lLe=s(Bg);Bse=n(lLe,"STRONG",{});var Lst=s(Bse);vao=r(Lst,"vilt"),Lst.forEach(t),Fao=r(lLe," \u2014 "),jP=n(lLe,"A",{href:!0});var yst=s(jP);Tao=r(yst,"ViltConfig"),yst.forEach(t),Mao=r(lLe," (ViLT model)"),lLe.forEach(t),Eao=i(L),Ng=n(L,"LI",{});var iLe=s(Ng);Nse=n(iLe,"STRONG",{});var xst=s(Nse);Cao=r(xst,"vision-encoder-decoder"),xst.forEach(t),wao=r(iLe," \u2014 "),DP=n(iLe,"A",{href:!0});var $st=s(DP);Aao=r($st,"VisionEncoderDecoderConfig"),$st.forEach(t),Lao=r(iLe," (Vision Encoder decoder model)"),iLe.forEach(t),yao=i(L),Ig=n(L,"LI",{});var dLe=s(Ig);Ise=n(dLe,"STRONG",{});var kst=s(Ise);xao=r(kst,"vision-text-dual-encoder"),kst.forEach(t),$ao=r(dLe," \u2014 "),GP=n(dLe,"A",{href:!0});var Sst=s(GP);kao=r(Sst,"VisionTextDualEncoderConfig"),Sst.forEach(t),Sao=r(dLe," (VisionTextDualEncoder model)"),dLe.forEach(t),Rao=i(L),qg=n(L,"LI",{});var cLe=s(qg);qse=n(cLe,"STRONG",{});var Rst=s(qse);Pao=r(Rst,"visual_bert"),Rst.forEach(t),Bao=r(cLe," \u2014 "),OP=n(cLe,"A",{href:!0});var Pst=s(OP);Nao=r(Pst,"VisualBertConfig"),Pst.forEach(t),Iao=r(cLe," (VisualBERT model)"),cLe.forEach(t),qao=i(L),jg=n(L,"LI",{});var fLe=s(jg);jse=n(fLe,"STRONG",{});var Bst=s(jse);jao=r(Bst,"vit"),Bst.forEach(t),Dao=r(fLe," \u2014 "),VP=n(fLe,"A",{href:!0});var Nst=s(VP);Gao=r(Nst,"ViTConfig"),Nst.forEach(t),Oao=r(fLe," (ViT model)"),fLe.forEach(t),Vao=i(L),Dg=n(L,"LI",{});var mLe=s(Dg);Dse=n(mLe,"STRONG",{});var Ist=s(Dse);Xao=r(Ist,"vit_mae"),Ist.forEach(t),zao=r(mLe," \u2014 "),XP=n(mLe,"A",{href:!0});var qst=s(XP);Qao=r(qst,"ViTMAEConfig"),qst.forEach(t),Wao=r(mLe," (ViTMAE model)"),mLe.forEach(t),Hao=i(L),Gg=n(L,"LI",{});var gLe=s(Gg);Gse=n(gLe,"STRONG",{});var jst=s(Gse);Uao=r(jst,"wav2vec2"),jst.forEach(t),Jao=r(gLe," \u2014 "),zP=n(gLe,"A",{href:!0});var Dst=s(zP);Yao=r(Dst,"Wav2Vec2Config"),Dst.forEach(t),Kao=r(gLe," (Wav2Vec2 model)"),gLe.forEach(t),Zao=i(L),Og=n(L,"LI",{});var hLe=s(Og);Ose=n(hLe,"STRONG",{});var Gst=s(Ose);eno=r(Gst,"wav2vec2-conformer"),Gst.forEach(t),ono=r(hLe," \u2014 "),QP=n(hLe,"A",{href:!0});var Ost=s(QP);rno=r(Ost,"Wav2Vec2ConformerConfig"),Ost.forEach(t),tno=r(hLe," (Wav2Vec2-Conformer model)"),hLe.forEach(t),ano=i(L),Vg=n(L,"LI",{});var pLe=s(Vg);Vse=n(pLe,"STRONG",{});var Vst=s(Vse);nno=r(Vst,"wavlm"),Vst.forEach(t),sno=r(pLe," \u2014 "),WP=n(pLe,"A",{href:!0});var Xst=s(WP);lno=r(Xst,"WavLMConfig"),Xst.forEach(t),ino=r(pLe," (WavLM model)"),pLe.forEach(t),dno=i(L),Xg=n(L,"LI",{});var _Le=s(Xg);Xse=n(_Le,"STRONG",{});var zst=s(Xse);cno=r(zst,"xglm"),zst.forEach(t),fno=r(_Le," \u2014 "),HP=n(_Le,"A",{href:!0});var Qst=s(HP);mno=r(Qst,"XGLMConfig"),Qst.forEach(t),gno=r(_Le," (XGLM model)"),_Le.forEach(t),hno=i(L),zg=n(L,"LI",{});var uLe=s(zg);zse=n(uLe,"STRONG",{});var Wst=s(zse);pno=r(Wst,"xlm"),Wst.forEach(t),_no=r(uLe," \u2014 "),UP=n(uLe,"A",{href:!0});var Hst=s(UP);uno=r(Hst,"XLMConfig"),Hst.forEach(t),bno=r(uLe," (XLM model)"),uLe.forEach(t),vno=i(L),Qg=n(L,"LI",{});var bLe=s(Qg);Qse=n(bLe,"STRONG",{});var Ust=s(Qse);Fno=r(Ust,"xlm-prophetnet"),Ust.forEach(t),Tno=r(bLe," \u2014 "),JP=n(bLe,"A",{href:!0});var Jst=s(JP);Mno=r(Jst,"XLMProphetNetConfig"),Jst.forEach(t),Eno=r(bLe," (XLM-ProphetNet model)"),bLe.forEach(t),Cno=i(L),Wg=n(L,"LI",{});var vLe=s(Wg);Wse=n(vLe,"STRONG",{});var Yst=s(Wse);wno=r(Yst,"xlm-roberta"),Yst.forEach(t),Ano=r(vLe," \u2014 "),YP=n(vLe,"A",{href:!0});var Kst=s(YP);Lno=r(Kst,"XLMRobertaConfig"),Kst.forEach(t),yno=r(vLe," (XLM-RoBERTa model)"),vLe.forEach(t),xno=i(L),Hg=n(L,"LI",{});var FLe=s(Hg);Hse=n(FLe,"STRONG",{});var Zst=s(Hse);$no=r(Zst,"xlm-roberta-xl"),Zst.forEach(t),kno=r(FLe," \u2014 "),KP=n(FLe,"A",{href:!0});var elt=s(KP);Sno=r(elt,"XLMRobertaXLConfig"),elt.forEach(t),Rno=r(FLe," (XLM-RoBERTa-XL model)"),FLe.forEach(t),Pno=i(L),Ug=n(L,"LI",{});var TLe=s(Ug);Use=n(TLe,"STRONG",{});var olt=s(Use);Bno=r(olt,"xlnet"),olt.forEach(t),Nno=r(TLe," \u2014 "),ZP=n(TLe,"A",{href:!0});var rlt=s(ZP);Ino=r(rlt,"XLNetConfig"),rlt.forEach(t),qno=r(TLe," (XLNet model)"),TLe.forEach(t),jno=i(L),Jg=n(L,"LI",{});var MLe=s(Jg);Jse=n(MLe,"STRONG",{});var tlt=s(Jse);Dno=r(tlt,"yolos"),tlt.forEach(t),Gno=r(MLe," \u2014 "),eB=n(MLe,"A",{href:!0});var alt=s(eB);Ono=r(alt,"YolosConfig"),alt.forEach(t),Vno=r(MLe," (YOLOS model)"),MLe.forEach(t),Xno=i(L),Yg=n(L,"LI",{});var ELe=s(Yg);Yse=n(ELe,"STRONG",{});var nlt=s(Yse);zno=r(nlt,"yoso"),nlt.forEach(t),Qno=r(ELe," \u2014 "),oB=n(ELe,"A",{href:!0});var slt=s(oB);Wno=r(slt,"YosoConfig"),slt.forEach(t),Hno=r(ELe," (YOSO model)"),ELe.forEach(t),L.forEach(t),Uno=i(st),T(Kg.$$.fragment,st),st.forEach(t),Jno=i(nt),Zg=n(nt,"DIV",{class:!0});var _Qe=s(Zg);T(h6.$$.fragment,_Qe),Yno=i(_Qe),Kse=n(_Qe,"P",{});var llt=s(Kse);Kno=r(llt,"Register a new configuration for this class."),llt.forEach(t),_Qe.forEach(t),nt.forEach(t),uXe=i(f),qi=n(f,"H2",{class:!0});var uQe=s(qi);eh=n(uQe,"A",{id:!0,class:!0,href:!0});var ilt=s(eh);Zse=n(ilt,"SPAN",{});var dlt=s(Zse);T(p6.$$.fragment,dlt),dlt.forEach(t),ilt.forEach(t),Zno=i(uQe),ele=n(uQe,"SPAN",{});var clt=s(ele);eso=r(clt,"AutoTokenizer"),clt.forEach(t),uQe.forEach(t),bXe=i(f),Lo=n(f,"DIV",{class:!0});var Zs=s(Lo);T(_6.$$.fragment,Zs),oso=i(Zs),u6=n(Zs,"P",{});var bQe=s(u6);rso=r(bQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),rB=n(bQe,"A",{href:!0});var flt=s(rB);tso=r(flt,"AutoTokenizer.from_pretrained()"),flt.forEach(t),aso=r(bQe," class method."),bQe.forEach(t),nso=i(Zs),b6=n(Zs,"P",{});var vQe=s(b6);sso=r(vQe,"This class cannot be instantiated directly using "),ole=n(vQe,"CODE",{});var mlt=s(ole);lso=r(mlt,"__init__()"),mlt.forEach(t),iso=r(vQe," (throws an error)."),vQe.forEach(t),dso=i(Zs),yr=n(Zs,"DIV",{class:!0});var el=s(yr);T(v6.$$.fragment,el),cso=i(el),rle=n(el,"P",{});var glt=s(rle);fso=r(glt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),glt.forEach(t),mso=i(el),Pa=n(el,"P",{});var dw=s(Pa);gso=r(dw,"The tokenizer class to instantiate is selected based on the "),tle=n(dw,"CODE",{});var hlt=s(tle);hso=r(hlt,"model_type"),hlt.forEach(t),pso=r(dw,` property of the config object (either
passed as an argument or loaded from `),ale=n(dw,"CODE",{});var plt=s(ale);_so=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),uso=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nle=n(dw,"CODE",{});var _lt=s(nle);bso=r(_lt,"pretrained_model_name_or_path"),_lt.forEach(t),vso=r(dw,":"),dw.forEach(t),Fso=i(el),k=n(el,"UL",{});var S=s(k);jn=n(S,"LI",{});var wk=s(jn);sle=n(wk,"STRONG",{});var ult=s(sle);Tso=r(ult,"albert"),ult.forEach(t),Mso=r(wk," \u2014 "),tB=n(wk,"A",{href:!0});var blt=s(tB);Eso=r(blt,"AlbertTokenizer"),blt.forEach(t),Cso=r(wk," or "),aB=n(wk,"A",{href:!0});var vlt=s(aB);wso=r(vlt,"AlbertTokenizerFast"),vlt.forEach(t),Aso=r(wk," (ALBERT model)"),wk.forEach(t),Lso=i(S),Dn=n(S,"LI",{});var Ak=s(Dn);lle=n(Ak,"STRONG",{});var Flt=s(lle);yso=r(Flt,"bart"),Flt.forEach(t),xso=r(Ak," \u2014 "),nB=n(Ak,"A",{href:!0});var Tlt=s(nB);$so=r(Tlt,"BartTokenizer"),Tlt.forEach(t),kso=r(Ak," or "),sB=n(Ak,"A",{href:!0});var Mlt=s(sB);Sso=r(Mlt,"BartTokenizerFast"),Mlt.forEach(t),Rso=r(Ak," (BART model)"),Ak.forEach(t),Pso=i(S),Gn=n(S,"LI",{});var Lk=s(Gn);ile=n(Lk,"STRONG",{});var Elt=s(ile);Bso=r(Elt,"barthez"),Elt.forEach(t),Nso=r(Lk," \u2014 "),lB=n(Lk,"A",{href:!0});var Clt=s(lB);Iso=r(Clt,"BarthezTokenizer"),Clt.forEach(t),qso=r(Lk," or "),iB=n(Lk,"A",{href:!0});var wlt=s(iB);jso=r(wlt,"BarthezTokenizerFast"),wlt.forEach(t),Dso=r(Lk," (BARThez model)"),Lk.forEach(t),Gso=i(S),oh=n(S,"LI",{});var CLe=s(oh);dle=n(CLe,"STRONG",{});var Alt=s(dle);Oso=r(Alt,"bartpho"),Alt.forEach(t),Vso=r(CLe," \u2014 "),dB=n(CLe,"A",{href:!0});var Llt=s(dB);Xso=r(Llt,"BartphoTokenizer"),Llt.forEach(t),zso=r(CLe," (BARTpho model)"),CLe.forEach(t),Qso=i(S),On=n(S,"LI",{});var yk=s(On);cle=n(yk,"STRONG",{});var ylt=s(cle);Wso=r(ylt,"bert"),ylt.forEach(t),Hso=r(yk," \u2014 "),cB=n(yk,"A",{href:!0});var xlt=s(cB);Uso=r(xlt,"BertTokenizer"),xlt.forEach(t),Jso=r(yk," or "),fB=n(yk,"A",{href:!0});var $lt=s(fB);Yso=r($lt,"BertTokenizerFast"),$lt.forEach(t),Kso=r(yk," (BERT model)"),yk.forEach(t),Zso=i(S),rh=n(S,"LI",{});var wLe=s(rh);fle=n(wLe,"STRONG",{});var klt=s(fle);elo=r(klt,"bert-generation"),klt.forEach(t),olo=r(wLe," \u2014 "),mB=n(wLe,"A",{href:!0});var Slt=s(mB);rlo=r(Slt,"BertGenerationTokenizer"),Slt.forEach(t),tlo=r(wLe," (Bert Generation model)"),wLe.forEach(t),alo=i(S),th=n(S,"LI",{});var ALe=s(th);mle=n(ALe,"STRONG",{});var Rlt=s(mle);nlo=r(Rlt,"bert-japanese"),Rlt.forEach(t),slo=r(ALe," \u2014 "),gB=n(ALe,"A",{href:!0});var Plt=s(gB);llo=r(Plt,"BertJapaneseTokenizer"),Plt.forEach(t),ilo=r(ALe," (BertJapanese model)"),ALe.forEach(t),dlo=i(S),ah=n(S,"LI",{});var LLe=s(ah);gle=n(LLe,"STRONG",{});var Blt=s(gle);clo=r(Blt,"bertweet"),Blt.forEach(t),flo=r(LLe," \u2014 "),hB=n(LLe,"A",{href:!0});var Nlt=s(hB);mlo=r(Nlt,"BertweetTokenizer"),Nlt.forEach(t),glo=r(LLe," (BERTweet model)"),LLe.forEach(t),hlo=i(S),Vn=n(S,"LI",{});var xk=s(Vn);hle=n(xk,"STRONG",{});var Ilt=s(hle);plo=r(Ilt,"big_bird"),Ilt.forEach(t),_lo=r(xk," \u2014 "),pB=n(xk,"A",{href:!0});var qlt=s(pB);ulo=r(qlt,"BigBirdTokenizer"),qlt.forEach(t),blo=r(xk," or "),_B=n(xk,"A",{href:!0});var jlt=s(_B);vlo=r(jlt,"BigBirdTokenizerFast"),jlt.forEach(t),Flo=r(xk," (BigBird model)"),xk.forEach(t),Tlo=i(S),Xn=n(S,"LI",{});var $k=s(Xn);ple=n($k,"STRONG",{});var Dlt=s(ple);Mlo=r(Dlt,"bigbird_pegasus"),Dlt.forEach(t),Elo=r($k," \u2014 "),uB=n($k,"A",{href:!0});var Glt=s(uB);Clo=r(Glt,"PegasusTokenizer"),Glt.forEach(t),wlo=r($k," or "),bB=n($k,"A",{href:!0});var Olt=s(bB);Alo=r(Olt,"PegasusTokenizerFast"),Olt.forEach(t),Llo=r($k," (BigBird-Pegasus model)"),$k.forEach(t),ylo=i(S),zn=n(S,"LI",{});var kk=s(zn);_le=n(kk,"STRONG",{});var Vlt=s(_le);xlo=r(Vlt,"blenderbot"),Vlt.forEach(t),$lo=r(kk," \u2014 "),vB=n(kk,"A",{href:!0});var Xlt=s(vB);klo=r(Xlt,"BlenderbotTokenizer"),Xlt.forEach(t),Slo=r(kk," or "),FB=n(kk,"A",{href:!0});var zlt=s(FB);Rlo=r(zlt,"BlenderbotTokenizerFast"),zlt.forEach(t),Plo=r(kk," (Blenderbot model)"),kk.forEach(t),Blo=i(S),nh=n(S,"LI",{});var yLe=s(nh);ule=n(yLe,"STRONG",{});var Qlt=s(ule);Nlo=r(Qlt,"blenderbot-small"),Qlt.forEach(t),Ilo=r(yLe," \u2014 "),TB=n(yLe,"A",{href:!0});var Wlt=s(TB);qlo=r(Wlt,"BlenderbotSmallTokenizer"),Wlt.forEach(t),jlo=r(yLe," (BlenderbotSmall model)"),yLe.forEach(t),Dlo=i(S),sh=n(S,"LI",{});var xLe=s(sh);ble=n(xLe,"STRONG",{});var Hlt=s(ble);Glo=r(Hlt,"bloom"),Hlt.forEach(t),Olo=r(xLe," \u2014 "),MB=n(xLe,"A",{href:!0});var Ult=s(MB);Vlo=r(Ult,"BloomTokenizerFast"),Ult.forEach(t),Xlo=r(xLe," (BLOOM model)"),xLe.forEach(t),zlo=i(S),lh=n(S,"LI",{});var $Le=s(lh);vle=n($Le,"STRONG",{});var Jlt=s(vle);Qlo=r(Jlt,"byt5"),Jlt.forEach(t),Wlo=r($Le," \u2014 "),EB=n($Le,"A",{href:!0});var Ylt=s(EB);Hlo=r(Ylt,"ByT5Tokenizer"),Ylt.forEach(t),Ulo=r($Le," (ByT5 model)"),$Le.forEach(t),Jlo=i(S),Qn=n(S,"LI",{});var Sk=s(Qn);Fle=n(Sk,"STRONG",{});var Klt=s(Fle);Ylo=r(Klt,"camembert"),Klt.forEach(t),Klo=r(Sk," \u2014 "),CB=n(Sk,"A",{href:!0});var Zlt=s(CB);Zlo=r(Zlt,"CamembertTokenizer"),Zlt.forEach(t),eio=r(Sk," or "),wB=n(Sk,"A",{href:!0});var eit=s(wB);oio=r(eit,"CamembertTokenizerFast"),eit.forEach(t),rio=r(Sk," (CamemBERT model)"),Sk.forEach(t),tio=i(S),ih=n(S,"LI",{});var kLe=s(ih);Tle=n(kLe,"STRONG",{});var oit=s(Tle);aio=r(oit,"canine"),oit.forEach(t),nio=r(kLe," \u2014 "),AB=n(kLe,"A",{href:!0});var rit=s(AB);sio=r(rit,"CanineTokenizer"),rit.forEach(t),lio=r(kLe," (CANINE model)"),kLe.forEach(t),iio=i(S),Wn=n(S,"LI",{});var Rk=s(Wn);Mle=n(Rk,"STRONG",{});var tit=s(Mle);dio=r(tit,"clip"),tit.forEach(t),cio=r(Rk," \u2014 "),LB=n(Rk,"A",{href:!0});var ait=s(LB);fio=r(ait,"CLIPTokenizer"),ait.forEach(t),mio=r(Rk," or "),yB=n(Rk,"A",{href:!0});var nit=s(yB);gio=r(nit,"CLIPTokenizerFast"),nit.forEach(t),hio=r(Rk," (CLIP model)"),Rk.forEach(t),pio=i(S),Hn=n(S,"LI",{});var Pk=s(Hn);Ele=n(Pk,"STRONG",{});var sit=s(Ele);_io=r(sit,"codegen"),sit.forEach(t),uio=r(Pk," \u2014 "),xB=n(Pk,"A",{href:!0});var lit=s(xB);bio=r(lit,"CodeGenTokenizer"),lit.forEach(t),vio=r(Pk," or "),$B=n(Pk,"A",{href:!0});var iit=s($B);Fio=r(iit,"CodeGenTokenizerFast"),iit.forEach(t),Tio=r(Pk," (CodeGen model)"),Pk.forEach(t),Mio=i(S),Un=n(S,"LI",{});var Bk=s(Un);Cle=n(Bk,"STRONG",{});var dit=s(Cle);Eio=r(dit,"convbert"),dit.forEach(t),Cio=r(Bk," \u2014 "),kB=n(Bk,"A",{href:!0});var cit=s(kB);wio=r(cit,"ConvBertTokenizer"),cit.forEach(t),Aio=r(Bk," or "),SB=n(Bk,"A",{href:!0});var fit=s(SB);Lio=r(fit,"ConvBertTokenizerFast"),fit.forEach(t),yio=r(Bk," (ConvBERT model)"),Bk.forEach(t),xio=i(S),Jn=n(S,"LI",{});var Nk=s(Jn);wle=n(Nk,"STRONG",{});var mit=s(wle);$io=r(mit,"cpm"),mit.forEach(t),kio=r(Nk," \u2014 "),RB=n(Nk,"A",{href:!0});var git=s(RB);Sio=r(git,"CpmTokenizer"),git.forEach(t),Rio=r(Nk," or "),PB=n(Nk,"A",{href:!0});var hit=s(PB);Pio=r(hit,"CpmTokenizerFast"),hit.forEach(t),Bio=r(Nk," (CPM model)"),Nk.forEach(t),Nio=i(S),dh=n(S,"LI",{});var SLe=s(dh);Ale=n(SLe,"STRONG",{});var pit=s(Ale);Iio=r(pit,"ctrl"),pit.forEach(t),qio=r(SLe," \u2014 "),BB=n(SLe,"A",{href:!0});var _it=s(BB);jio=r(_it,"CTRLTokenizer"),_it.forEach(t),Dio=r(SLe," (CTRL model)"),SLe.forEach(t),Gio=i(S),Yn=n(S,"LI",{});var Ik=s(Yn);Lle=n(Ik,"STRONG",{});var uit=s(Lle);Oio=r(uit,"data2vec-text"),uit.forEach(t),Vio=r(Ik," \u2014 "),NB=n(Ik,"A",{href:!0});var bit=s(NB);Xio=r(bit,"RobertaTokenizer"),bit.forEach(t),zio=r(Ik," or "),IB=n(Ik,"A",{href:!0});var vit=s(IB);Qio=r(vit,"RobertaTokenizerFast"),vit.forEach(t),Wio=r(Ik," (Data2VecText model)"),Ik.forEach(t),Hio=i(S),Kn=n(S,"LI",{});var qk=s(Kn);yle=n(qk,"STRONG",{});var Fit=s(yle);Uio=r(Fit,"deberta"),Fit.forEach(t),Jio=r(qk," \u2014 "),qB=n(qk,"A",{href:!0});var Tit=s(qB);Yio=r(Tit,"DebertaTokenizer"),Tit.forEach(t),Kio=r(qk," or "),jB=n(qk,"A",{href:!0});var Mit=s(jB);Zio=r(Mit,"DebertaTokenizerFast"),Mit.forEach(t),edo=r(qk," (DeBERTa model)"),qk.forEach(t),odo=i(S),Zn=n(S,"LI",{});var jk=s(Zn);xle=n(jk,"STRONG",{});var Eit=s(xle);rdo=r(Eit,"deberta-v2"),Eit.forEach(t),tdo=r(jk," \u2014 "),DB=n(jk,"A",{href:!0});var Cit=s(DB);ado=r(Cit,"DebertaV2Tokenizer"),Cit.forEach(t),ndo=r(jk," or "),GB=n(jk,"A",{href:!0});var wit=s(GB);sdo=r(wit,"DebertaV2TokenizerFast"),wit.forEach(t),ldo=r(jk," (DeBERTa-v2 model)"),jk.forEach(t),ido=i(S),es=n(S,"LI",{});var Dk=s(es);$le=n(Dk,"STRONG",{});var Ait=s($le);ddo=r(Ait,"distilbert"),Ait.forEach(t),cdo=r(Dk," \u2014 "),OB=n(Dk,"A",{href:!0});var Lit=s(OB);fdo=r(Lit,"DistilBertTokenizer"),Lit.forEach(t),mdo=r(Dk," or "),VB=n(Dk,"A",{href:!0});var yit=s(VB);gdo=r(yit,"DistilBertTokenizerFast"),yit.forEach(t),hdo=r(Dk," (DistilBERT model)"),Dk.forEach(t),pdo=i(S),os=n(S,"LI",{});var Gk=s(os);kle=n(Gk,"STRONG",{});var xit=s(kle);_do=r(xit,"dpr"),xit.forEach(t),udo=r(Gk," \u2014 "),XB=n(Gk,"A",{href:!0});var $it=s(XB);bdo=r($it,"DPRQuestionEncoderTokenizer"),$it.forEach(t),vdo=r(Gk," or "),zB=n(Gk,"A",{href:!0});var kit=s(zB);Fdo=r(kit,"DPRQuestionEncoderTokenizerFast"),kit.forEach(t),Tdo=r(Gk," (DPR model)"),Gk.forEach(t),Mdo=i(S),rs=n(S,"LI",{});var Ok=s(rs);Sle=n(Ok,"STRONG",{});var Sit=s(Sle);Edo=r(Sit,"electra"),Sit.forEach(t),Cdo=r(Ok," \u2014 "),QB=n(Ok,"A",{href:!0});var Rit=s(QB);wdo=r(Rit,"ElectraTokenizer"),Rit.forEach(t),Ado=r(Ok," or "),WB=n(Ok,"A",{href:!0});var Pit=s(WB);Ldo=r(Pit,"ElectraTokenizerFast"),Pit.forEach(t),ydo=r(Ok," (ELECTRA model)"),Ok.forEach(t),xdo=i(S),ch=n(S,"LI",{});var RLe=s(ch);Rle=n(RLe,"STRONG",{});var Bit=s(Rle);$do=r(Bit,"flaubert"),Bit.forEach(t),kdo=r(RLe," \u2014 "),HB=n(RLe,"A",{href:!0});var Nit=s(HB);Sdo=r(Nit,"FlaubertTokenizer"),Nit.forEach(t),Rdo=r(RLe," (FlauBERT model)"),RLe.forEach(t),Pdo=i(S),ts=n(S,"LI",{});var Vk=s(ts);Ple=n(Vk,"STRONG",{});var Iit=s(Ple);Bdo=r(Iit,"fnet"),Iit.forEach(t),Ndo=r(Vk," \u2014 "),UB=n(Vk,"A",{href:!0});var qit=s(UB);Ido=r(qit,"FNetTokenizer"),qit.forEach(t),qdo=r(Vk," or "),JB=n(Vk,"A",{href:!0});var jit=s(JB);jdo=r(jit,"FNetTokenizerFast"),jit.forEach(t),Ddo=r(Vk," (FNet model)"),Vk.forEach(t),Gdo=i(S),fh=n(S,"LI",{});var PLe=s(fh);Ble=n(PLe,"STRONG",{});var Dit=s(Ble);Odo=r(Dit,"fsmt"),Dit.forEach(t),Vdo=r(PLe," \u2014 "),YB=n(PLe,"A",{href:!0});var Git=s(YB);Xdo=r(Git,"FSMTTokenizer"),Git.forEach(t),zdo=r(PLe," (FairSeq Machine-Translation model)"),PLe.forEach(t),Qdo=i(S),as=n(S,"LI",{});var Xk=s(as);Nle=n(Xk,"STRONG",{});var Oit=s(Nle);Wdo=r(Oit,"funnel"),Oit.forEach(t),Hdo=r(Xk," \u2014 "),KB=n(Xk,"A",{href:!0});var Vit=s(KB);Udo=r(Vit,"FunnelTokenizer"),Vit.forEach(t),Jdo=r(Xk," or "),ZB=n(Xk,"A",{href:!0});var Xit=s(ZB);Ydo=r(Xit,"FunnelTokenizerFast"),Xit.forEach(t),Kdo=r(Xk," (Funnel Transformer model)"),Xk.forEach(t),Zdo=i(S),ns=n(S,"LI",{});var zk=s(ns);Ile=n(zk,"STRONG",{});var zit=s(Ile);eco=r(zit,"gpt2"),zit.forEach(t),oco=r(zk," \u2014 "),eN=n(zk,"A",{href:!0});var Qit=s(eN);rco=r(Qit,"GPT2Tokenizer"),Qit.forEach(t),tco=r(zk," or "),oN=n(zk,"A",{href:!0});var Wit=s(oN);aco=r(Wit,"GPT2TokenizerFast"),Wit.forEach(t),nco=r(zk," (OpenAI GPT-2 model)"),zk.forEach(t),sco=i(S),ss=n(S,"LI",{});var Qk=s(ss);qle=n(Qk,"STRONG",{});var Hit=s(qle);lco=r(Hit,"gpt_neo"),Hit.forEach(t),ico=r(Qk," \u2014 "),rN=n(Qk,"A",{href:!0});var Uit=s(rN);dco=r(Uit,"GPT2Tokenizer"),Uit.forEach(t),cco=r(Qk," or "),tN=n(Qk,"A",{href:!0});var Jit=s(tN);fco=r(Jit,"GPT2TokenizerFast"),Jit.forEach(t),mco=r(Qk," (GPT Neo model)"),Qk.forEach(t),gco=i(S),mh=n(S,"LI",{});var BLe=s(mh);jle=n(BLe,"STRONG",{});var Yit=s(jle);hco=r(Yit,"gpt_neox"),Yit.forEach(t),pco=r(BLe," \u2014 "),aN=n(BLe,"A",{href:!0});var Kit=s(aN);_co=r(Kit,"GPTNeoXTokenizerFast"),Kit.forEach(t),uco=r(BLe," (GPT NeoX model)"),BLe.forEach(t),bco=i(S),ls=n(S,"LI",{});var Wk=s(ls);Dle=n(Wk,"STRONG",{});var Zit=s(Dle);vco=r(Zit,"gptj"),Zit.forEach(t),Fco=r(Wk," \u2014 "),nN=n(Wk,"A",{href:!0});var edt=s(nN);Tco=r(edt,"GPT2Tokenizer"),edt.forEach(t),Mco=r(Wk," or "),sN=n(Wk,"A",{href:!0});var odt=s(sN);Eco=r(odt,"GPT2TokenizerFast"),odt.forEach(t),Cco=r(Wk," (GPT-J model)"),Wk.forEach(t),wco=i(S),is=n(S,"LI",{});var Hk=s(is);Gle=n(Hk,"STRONG",{});var rdt=s(Gle);Aco=r(rdt,"groupvit"),rdt.forEach(t),Lco=r(Hk," \u2014 "),lN=n(Hk,"A",{href:!0});var tdt=s(lN);yco=r(tdt,"CLIPTokenizer"),tdt.forEach(t),xco=r(Hk," or "),iN=n(Hk,"A",{href:!0});var adt=s(iN);$co=r(adt,"CLIPTokenizerFast"),adt.forEach(t),kco=r(Hk," (GroupViT model)"),Hk.forEach(t),Sco=i(S),ds=n(S,"LI",{});var Uk=s(ds);Ole=n(Uk,"STRONG",{});var ndt=s(Ole);Rco=r(ndt,"herbert"),ndt.forEach(t),Pco=r(Uk," \u2014 "),dN=n(Uk,"A",{href:!0});var sdt=s(dN);Bco=r(sdt,"HerbertTokenizer"),sdt.forEach(t),Nco=r(Uk," or "),cN=n(Uk,"A",{href:!0});var ldt=s(cN);Ico=r(ldt,"HerbertTokenizerFast"),ldt.forEach(t),qco=r(Uk," (HerBERT model)"),Uk.forEach(t),jco=i(S),gh=n(S,"LI",{});var NLe=s(gh);Vle=n(NLe,"STRONG",{});var idt=s(Vle);Dco=r(idt,"hubert"),idt.forEach(t),Gco=r(NLe," \u2014 "),fN=n(NLe,"A",{href:!0});var ddt=s(fN);Oco=r(ddt,"Wav2Vec2CTCTokenizer"),ddt.forEach(t),Vco=r(NLe," (Hubert model)"),NLe.forEach(t),Xco=i(S),cs=n(S,"LI",{});var Jk=s(cs);Xle=n(Jk,"STRONG",{});var cdt=s(Xle);zco=r(cdt,"ibert"),cdt.forEach(t),Qco=r(Jk," \u2014 "),mN=n(Jk,"A",{href:!0});var fdt=s(mN);Wco=r(fdt,"RobertaTokenizer"),fdt.forEach(t),Hco=r(Jk," or "),gN=n(Jk,"A",{href:!0});var mdt=s(gN);Uco=r(mdt,"RobertaTokenizerFast"),mdt.forEach(t),Jco=r(Jk," (I-BERT model)"),Jk.forEach(t),Yco=i(S),fs=n(S,"LI",{});var Yk=s(fs);zle=n(Yk,"STRONG",{});var gdt=s(zle);Kco=r(gdt,"layoutlm"),gdt.forEach(t),Zco=r(Yk," \u2014 "),hN=n(Yk,"A",{href:!0});var hdt=s(hN);efo=r(hdt,"LayoutLMTokenizer"),hdt.forEach(t),ofo=r(Yk," or "),pN=n(Yk,"A",{href:!0});var pdt=s(pN);rfo=r(pdt,"LayoutLMTokenizerFast"),pdt.forEach(t),tfo=r(Yk," (LayoutLM model)"),Yk.forEach(t),afo=i(S),ms=n(S,"LI",{});var Kk=s(ms);Qle=n(Kk,"STRONG",{});var _dt=s(Qle);nfo=r(_dt,"layoutlmv2"),_dt.forEach(t),sfo=r(Kk," \u2014 "),_N=n(Kk,"A",{href:!0});var udt=s(_N);lfo=r(udt,"LayoutLMv2Tokenizer"),udt.forEach(t),ifo=r(Kk," or "),uN=n(Kk,"A",{href:!0});var bdt=s(uN);dfo=r(bdt,"LayoutLMv2TokenizerFast"),bdt.forEach(t),cfo=r(Kk," (LayoutLMv2 model)"),Kk.forEach(t),ffo=i(S),gs=n(S,"LI",{});var Zk=s(gs);Wle=n(Zk,"STRONG",{});var vdt=s(Wle);mfo=r(vdt,"layoutlmv3"),vdt.forEach(t),gfo=r(Zk," \u2014 "),bN=n(Zk,"A",{href:!0});var Fdt=s(bN);hfo=r(Fdt,"LayoutLMv3Tokenizer"),Fdt.forEach(t),pfo=r(Zk," or "),vN=n(Zk,"A",{href:!0});var Tdt=s(vN);_fo=r(Tdt,"LayoutLMv3TokenizerFast"),Tdt.forEach(t),ufo=r(Zk," (LayoutLMv3 model)"),Zk.forEach(t),bfo=i(S),hs=n(S,"LI",{});var eS=s(hs);Hle=n(eS,"STRONG",{});var Mdt=s(Hle);vfo=r(Mdt,"layoutxlm"),Mdt.forEach(t),Ffo=r(eS," \u2014 "),FN=n(eS,"A",{href:!0});var Edt=s(FN);Tfo=r(Edt,"LayoutXLMTokenizer"),Edt.forEach(t),Mfo=r(eS," or "),TN=n(eS,"A",{href:!0});var Cdt=s(TN);Efo=r(Cdt,"LayoutXLMTokenizerFast"),Cdt.forEach(t),Cfo=r(eS," (LayoutXLM model)"),eS.forEach(t),wfo=i(S),ps=n(S,"LI",{});var oS=s(ps);Ule=n(oS,"STRONG",{});var wdt=s(Ule);Afo=r(wdt,"led"),wdt.forEach(t),Lfo=r(oS," \u2014 "),MN=n(oS,"A",{href:!0});var Adt=s(MN);yfo=r(Adt,"LEDTokenizer"),Adt.forEach(t),xfo=r(oS," or "),EN=n(oS,"A",{href:!0});var Ldt=s(EN);$fo=r(Ldt,"LEDTokenizerFast"),Ldt.forEach(t),kfo=r(oS," (LED model)"),oS.forEach(t),Sfo=i(S),_s=n(S,"LI",{});var rS=s(_s);Jle=n(rS,"STRONG",{});var ydt=s(Jle);Rfo=r(ydt,"longformer"),ydt.forEach(t),Pfo=r(rS," \u2014 "),CN=n(rS,"A",{href:!0});var xdt=s(CN);Bfo=r(xdt,"LongformerTokenizer"),xdt.forEach(t),Nfo=r(rS," or "),wN=n(rS,"A",{href:!0});var $dt=s(wN);Ifo=r($dt,"LongformerTokenizerFast"),$dt.forEach(t),qfo=r(rS," (Longformer model)"),rS.forEach(t),jfo=i(S),us=n(S,"LI",{});var tS=s(us);Yle=n(tS,"STRONG",{});var kdt=s(Yle);Dfo=r(kdt,"longt5"),kdt.forEach(t),Gfo=r(tS," \u2014 "),AN=n(tS,"A",{href:!0});var Sdt=s(AN);Ofo=r(Sdt,"T5Tokenizer"),Sdt.forEach(t),Vfo=r(tS," or "),LN=n(tS,"A",{href:!0});var Rdt=s(LN);Xfo=r(Rdt,"T5TokenizerFast"),Rdt.forEach(t),zfo=r(tS," (LongT5 model)"),tS.forEach(t),Qfo=i(S),hh=n(S,"LI",{});var ILe=s(hh);Kle=n(ILe,"STRONG",{});var Pdt=s(Kle);Wfo=r(Pdt,"luke"),Pdt.forEach(t),Hfo=r(ILe," \u2014 "),yN=n(ILe,"A",{href:!0});var Bdt=s(yN);Ufo=r(Bdt,"LukeTokenizer"),Bdt.forEach(t),Jfo=r(ILe," (LUKE model)"),ILe.forEach(t),Yfo=i(S),bs=n(S,"LI",{});var aS=s(bs);Zle=n(aS,"STRONG",{});var Ndt=s(Zle);Kfo=r(Ndt,"lxmert"),Ndt.forEach(t),Zfo=r(aS," \u2014 "),xN=n(aS,"A",{href:!0});var Idt=s(xN);emo=r(Idt,"LxmertTokenizer"),Idt.forEach(t),omo=r(aS," or "),$N=n(aS,"A",{href:!0});var qdt=s($N);rmo=r(qdt,"LxmertTokenizerFast"),qdt.forEach(t),tmo=r(aS," (LXMERT model)"),aS.forEach(t),amo=i(S),ph=n(S,"LI",{});var qLe=s(ph);eie=n(qLe,"STRONG",{});var jdt=s(eie);nmo=r(jdt,"m2m_100"),jdt.forEach(t),smo=r(qLe," \u2014 "),kN=n(qLe,"A",{href:!0});var Ddt=s(kN);lmo=r(Ddt,"M2M100Tokenizer"),Ddt.forEach(t),imo=r(qLe," (M2M100 model)"),qLe.forEach(t),dmo=i(S),_h=n(S,"LI",{});var jLe=s(_h);oie=n(jLe,"STRONG",{});var Gdt=s(oie);cmo=r(Gdt,"marian"),Gdt.forEach(t),fmo=r(jLe," \u2014 "),SN=n(jLe,"A",{href:!0});var Odt=s(SN);mmo=r(Odt,"MarianTokenizer"),Odt.forEach(t),gmo=r(jLe," (Marian model)"),jLe.forEach(t),hmo=i(S),vs=n(S,"LI",{});var nS=s(vs);rie=n(nS,"STRONG",{});var Vdt=s(rie);pmo=r(Vdt,"mbart"),Vdt.forEach(t),_mo=r(nS," \u2014 "),RN=n(nS,"A",{href:!0});var Xdt=s(RN);umo=r(Xdt,"MBartTokenizer"),Xdt.forEach(t),bmo=r(nS," or "),PN=n(nS,"A",{href:!0});var zdt=s(PN);vmo=r(zdt,"MBartTokenizerFast"),zdt.forEach(t),Fmo=r(nS," (mBART model)"),nS.forEach(t),Tmo=i(S),Fs=n(S,"LI",{});var sS=s(Fs);tie=n(sS,"STRONG",{});var Qdt=s(tie);Mmo=r(Qdt,"mbart50"),Qdt.forEach(t),Emo=r(sS," \u2014 "),BN=n(sS,"A",{href:!0});var Wdt=s(BN);Cmo=r(Wdt,"MBart50Tokenizer"),Wdt.forEach(t),wmo=r(sS," or "),NN=n(sS,"A",{href:!0});var Hdt=s(NN);Amo=r(Hdt,"MBart50TokenizerFast"),Hdt.forEach(t),Lmo=r(sS," (mBART-50 model)"),sS.forEach(t),ymo=i(S),Ts=n(S,"LI",{});var lS=s(Ts);aie=n(lS,"STRONG",{});var Udt=s(aie);xmo=r(Udt,"megatron-bert"),Udt.forEach(t),$mo=r(lS," \u2014 "),IN=n(lS,"A",{href:!0});var Jdt=s(IN);kmo=r(Jdt,"BertTokenizer"),Jdt.forEach(t),Smo=r(lS," or "),qN=n(lS,"A",{href:!0});var Ydt=s(qN);Rmo=r(Ydt,"BertTokenizerFast"),Ydt.forEach(t),Pmo=r(lS," (Megatron-BERT model)"),lS.forEach(t),Bmo=i(S),uh=n(S,"LI",{});var DLe=s(uh);nie=n(DLe,"STRONG",{});var Kdt=s(nie);Nmo=r(Kdt,"mluke"),Kdt.forEach(t),Imo=r(DLe," \u2014 "),jN=n(DLe,"A",{href:!0});var Zdt=s(jN);qmo=r(Zdt,"MLukeTokenizer"),Zdt.forEach(t),jmo=r(DLe," (mLUKE model)"),DLe.forEach(t),Dmo=i(S),Ms=n(S,"LI",{});var iS=s(Ms);sie=n(iS,"STRONG",{});var ect=s(sie);Gmo=r(ect,"mobilebert"),ect.forEach(t),Omo=r(iS," \u2014 "),DN=n(iS,"A",{href:!0});var oct=s(DN);Vmo=r(oct,"MobileBertTokenizer"),oct.forEach(t),Xmo=r(iS," or "),GN=n(iS,"A",{href:!0});var rct=s(GN);zmo=r(rct,"MobileBertTokenizerFast"),rct.forEach(t),Qmo=r(iS," (MobileBERT model)"),iS.forEach(t),Wmo=i(S),Es=n(S,"LI",{});var dS=s(Es);lie=n(dS,"STRONG",{});var tct=s(lie);Hmo=r(tct,"mpnet"),tct.forEach(t),Umo=r(dS," \u2014 "),ON=n(dS,"A",{href:!0});var act=s(ON);Jmo=r(act,"MPNetTokenizer"),act.forEach(t),Ymo=r(dS," or "),VN=n(dS,"A",{href:!0});var nct=s(VN);Kmo=r(nct,"MPNetTokenizerFast"),nct.forEach(t),Zmo=r(dS," (MPNet model)"),dS.forEach(t),ego=i(S),Cs=n(S,"LI",{});var cS=s(Cs);iie=n(cS,"STRONG",{});var sct=s(iie);ogo=r(sct,"mt5"),sct.forEach(t),rgo=r(cS," \u2014 "),XN=n(cS,"A",{href:!0});var lct=s(XN);tgo=r(lct,"MT5Tokenizer"),lct.forEach(t),ago=r(cS," or "),zN=n(cS,"A",{href:!0});var ict=s(zN);ngo=r(ict,"MT5TokenizerFast"),ict.forEach(t),sgo=r(cS," (MT5 model)"),cS.forEach(t),lgo=i(S),ws=n(S,"LI",{});var fS=s(ws);die=n(fS,"STRONG",{});var dct=s(die);igo=r(dct,"mvp"),dct.forEach(t),dgo=r(fS," \u2014 "),QN=n(fS,"A",{href:!0});var cct=s(QN);cgo=r(cct,"MvpTokenizer"),cct.forEach(t),fgo=r(fS," or "),WN=n(fS,"A",{href:!0});var fct=s(WN);mgo=r(fct,"MvpTokenizerFast"),fct.forEach(t),ggo=r(fS," (MVP model)"),fS.forEach(t),hgo=i(S),As=n(S,"LI",{});var mS=s(As);cie=n(mS,"STRONG",{});var mct=s(cie);pgo=r(mct,"nezha"),mct.forEach(t),_go=r(mS," \u2014 "),HN=n(mS,"A",{href:!0});var gct=s(HN);ugo=r(gct,"BertTokenizer"),gct.forEach(t),bgo=r(mS," or "),UN=n(mS,"A",{href:!0});var hct=s(UN);vgo=r(hct,"BertTokenizerFast"),hct.forEach(t),Fgo=r(mS," (Nezha model)"),mS.forEach(t),Tgo=i(S),Ls=n(S,"LI",{});var gS=s(Ls);fie=n(gS,"STRONG",{});var pct=s(fie);Mgo=r(pct,"nllb"),pct.forEach(t),Ego=r(gS," \u2014 "),JN=n(gS,"A",{href:!0});var _ct=s(JN);Cgo=r(_ct,"NllbTokenizer"),_ct.forEach(t),wgo=r(gS," or "),YN=n(gS,"A",{href:!0});var uct=s(YN);Ago=r(uct,"NllbTokenizerFast"),uct.forEach(t),Lgo=r(gS," (NLLB model)"),gS.forEach(t),ygo=i(S),ys=n(S,"LI",{});var hS=s(ys);mie=n(hS,"STRONG",{});var bct=s(mie);xgo=r(bct,"nystromformer"),bct.forEach(t),$go=r(hS," \u2014 "),KN=n(hS,"A",{href:!0});var vct=s(KN);kgo=r(vct,"AlbertTokenizer"),vct.forEach(t),Sgo=r(hS," or "),ZN=n(hS,"A",{href:!0});var Fct=s(ZN);Rgo=r(Fct,"AlbertTokenizerFast"),Fct.forEach(t),Pgo=r(hS," (Nystr\xF6mformer model)"),hS.forEach(t),Bgo=i(S),xs=n(S,"LI",{});var pS=s(xs);gie=n(pS,"STRONG",{});var Tct=s(gie);Ngo=r(Tct,"openai-gpt"),Tct.forEach(t),Igo=r(pS," \u2014 "),eI=n(pS,"A",{href:!0});var Mct=s(eI);qgo=r(Mct,"OpenAIGPTTokenizer"),Mct.forEach(t),jgo=r(pS," or "),oI=n(pS,"A",{href:!0});var Ect=s(oI);Dgo=r(Ect,"OpenAIGPTTokenizerFast"),Ect.forEach(t),Ggo=r(pS," (OpenAI GPT model)"),pS.forEach(t),Ogo=i(S),bh=n(S,"LI",{});var GLe=s(bh);hie=n(GLe,"STRONG",{});var Cct=s(hie);Vgo=r(Cct,"opt"),Cct.forEach(t),Xgo=r(GLe," \u2014 "),rI=n(GLe,"A",{href:!0});var wct=s(rI);zgo=r(wct,"GPT2Tokenizer"),wct.forEach(t),Qgo=r(GLe," (OPT model)"),GLe.forEach(t),Wgo=i(S),$s=n(S,"LI",{});var _S=s($s);pie=n(_S,"STRONG",{});var Act=s(pie);Hgo=r(Act,"pegasus"),Act.forEach(t),Ugo=r(_S," \u2014 "),tI=n(_S,"A",{href:!0});var Lct=s(tI);Jgo=r(Lct,"PegasusTokenizer"),Lct.forEach(t),Ygo=r(_S," or "),aI=n(_S,"A",{href:!0});var yct=s(aI);Kgo=r(yct,"PegasusTokenizerFast"),yct.forEach(t),Zgo=r(_S," (Pegasus model)"),_S.forEach(t),eho=i(S),vh=n(S,"LI",{});var OLe=s(vh);_ie=n(OLe,"STRONG",{});var xct=s(_ie);oho=r(xct,"perceiver"),xct.forEach(t),rho=r(OLe," \u2014 "),nI=n(OLe,"A",{href:!0});var $ct=s(nI);tho=r($ct,"PerceiverTokenizer"),$ct.forEach(t),aho=r(OLe," (Perceiver model)"),OLe.forEach(t),nho=i(S),Fh=n(S,"LI",{});var VLe=s(Fh);uie=n(VLe,"STRONG",{});var kct=s(uie);sho=r(kct,"phobert"),kct.forEach(t),lho=r(VLe," \u2014 "),sI=n(VLe,"A",{href:!0});var Sct=s(sI);iho=r(Sct,"PhobertTokenizer"),Sct.forEach(t),dho=r(VLe," (PhoBERT model)"),VLe.forEach(t),cho=i(S),Th=n(S,"LI",{});var XLe=s(Th);bie=n(XLe,"STRONG",{});var Rct=s(bie);fho=r(Rct,"plbart"),Rct.forEach(t),mho=r(XLe," \u2014 "),lI=n(XLe,"A",{href:!0});var Pct=s(lI);gho=r(Pct,"PLBartTokenizer"),Pct.forEach(t),hho=r(XLe," (PLBart model)"),XLe.forEach(t),pho=i(S),Mh=n(S,"LI",{});var zLe=s(Mh);vie=n(zLe,"STRONG",{});var Bct=s(vie);_ho=r(Bct,"prophetnet"),Bct.forEach(t),uho=r(zLe," \u2014 "),iI=n(zLe,"A",{href:!0});var Nct=s(iI);bho=r(Nct,"ProphetNetTokenizer"),Nct.forEach(t),vho=r(zLe," (ProphetNet model)"),zLe.forEach(t),Fho=i(S),ks=n(S,"LI",{});var uS=s(ks);Fie=n(uS,"STRONG",{});var Ict=s(Fie);Tho=r(Ict,"qdqbert"),Ict.forEach(t),Mho=r(uS," \u2014 "),dI=n(uS,"A",{href:!0});var qct=s(dI);Eho=r(qct,"BertTokenizer"),qct.forEach(t),Cho=r(uS," or "),cI=n(uS,"A",{href:!0});var jct=s(cI);who=r(jct,"BertTokenizerFast"),jct.forEach(t),Aho=r(uS," (QDQBert model)"),uS.forEach(t),Lho=i(S),Eh=n(S,"LI",{});var QLe=s(Eh);Tie=n(QLe,"STRONG",{});var Dct=s(Tie);yho=r(Dct,"rag"),Dct.forEach(t),xho=r(QLe," \u2014 "),fI=n(QLe,"A",{href:!0});var Gct=s(fI);$ho=r(Gct,"RagTokenizer"),Gct.forEach(t),kho=r(QLe," (RAG model)"),QLe.forEach(t),Sho=i(S),Ss=n(S,"LI",{});var bS=s(Ss);Mie=n(bS,"STRONG",{});var Oct=s(Mie);Rho=r(Oct,"realm"),Oct.forEach(t),Pho=r(bS," \u2014 "),mI=n(bS,"A",{href:!0});var Vct=s(mI);Bho=r(Vct,"RealmTokenizer"),Vct.forEach(t),Nho=r(bS," or "),gI=n(bS,"A",{href:!0});var Xct=s(gI);Iho=r(Xct,"RealmTokenizerFast"),Xct.forEach(t),qho=r(bS," (REALM model)"),bS.forEach(t),jho=i(S),Rs=n(S,"LI",{});var vS=s(Rs);Eie=n(vS,"STRONG",{});var zct=s(Eie);Dho=r(zct,"reformer"),zct.forEach(t),Gho=r(vS," \u2014 "),hI=n(vS,"A",{href:!0});var Qct=s(hI);Oho=r(Qct,"ReformerTokenizer"),Qct.forEach(t),Vho=r(vS," or "),pI=n(vS,"A",{href:!0});var Wct=s(pI);Xho=r(Wct,"ReformerTokenizerFast"),Wct.forEach(t),zho=r(vS," (Reformer model)"),vS.forEach(t),Qho=i(S),Ps=n(S,"LI",{});var FS=s(Ps);Cie=n(FS,"STRONG",{});var Hct=s(Cie);Who=r(Hct,"rembert"),Hct.forEach(t),Hho=r(FS," \u2014 "),_I=n(FS,"A",{href:!0});var Uct=s(_I);Uho=r(Uct,"RemBertTokenizer"),Uct.forEach(t),Jho=r(FS," or "),uI=n(FS,"A",{href:!0});var Jct=s(uI);Yho=r(Jct,"RemBertTokenizerFast"),Jct.forEach(t),Kho=r(FS," (RemBERT model)"),FS.forEach(t),Zho=i(S),Bs=n(S,"LI",{});var TS=s(Bs);wie=n(TS,"STRONG",{});var Yct=s(wie);epo=r(Yct,"retribert"),Yct.forEach(t),opo=r(TS," \u2014 "),bI=n(TS,"A",{href:!0});var Kct=s(bI);rpo=r(Kct,"RetriBertTokenizer"),Kct.forEach(t),tpo=r(TS," or "),vI=n(TS,"A",{href:!0});var Zct=s(vI);apo=r(Zct,"RetriBertTokenizerFast"),Zct.forEach(t),npo=r(TS," (RetriBERT model)"),TS.forEach(t),spo=i(S),Ns=n(S,"LI",{});var MS=s(Ns);Aie=n(MS,"STRONG",{});var eft=s(Aie);lpo=r(eft,"roberta"),eft.forEach(t),ipo=r(MS," \u2014 "),FI=n(MS,"A",{href:!0});var oft=s(FI);dpo=r(oft,"RobertaTokenizer"),oft.forEach(t),cpo=r(MS," or "),TI=n(MS,"A",{href:!0});var rft=s(TI);fpo=r(rft,"RobertaTokenizerFast"),rft.forEach(t),mpo=r(MS," (RoBERTa model)"),MS.forEach(t),gpo=i(S),Is=n(S,"LI",{});var ES=s(Is);Lie=n(ES,"STRONG",{});var tft=s(Lie);hpo=r(tft,"roformer"),tft.forEach(t),ppo=r(ES," \u2014 "),MI=n(ES,"A",{href:!0});var aft=s(MI);_po=r(aft,"RoFormerTokenizer"),aft.forEach(t),upo=r(ES," or "),EI=n(ES,"A",{href:!0});var nft=s(EI);bpo=r(nft,"RoFormerTokenizerFast"),nft.forEach(t),vpo=r(ES," (RoFormer model)"),ES.forEach(t),Fpo=i(S),Ch=n(S,"LI",{});var WLe=s(Ch);yie=n(WLe,"STRONG",{});var sft=s(yie);Tpo=r(sft,"speech_to_text"),sft.forEach(t),Mpo=r(WLe," \u2014 "),CI=n(WLe,"A",{href:!0});var lft=s(CI);Epo=r(lft,"Speech2TextTokenizer"),lft.forEach(t),Cpo=r(WLe," (Speech2Text model)"),WLe.forEach(t),wpo=i(S),wh=n(S,"LI",{});var HLe=s(wh);xie=n(HLe,"STRONG",{});var ift=s(xie);Apo=r(ift,"speech_to_text_2"),ift.forEach(t),Lpo=r(HLe," \u2014 "),wI=n(HLe,"A",{href:!0});var dft=s(wI);ypo=r(dft,"Speech2Text2Tokenizer"),dft.forEach(t),xpo=r(HLe," (Speech2Text2 model)"),HLe.forEach(t),$po=i(S),qs=n(S,"LI",{});var CS=s(qs);$ie=n(CS,"STRONG",{});var cft=s($ie);kpo=r(cft,"splinter"),cft.forEach(t),Spo=r(CS," \u2014 "),AI=n(CS,"A",{href:!0});var fft=s(AI);Rpo=r(fft,"SplinterTokenizer"),fft.forEach(t),Ppo=r(CS," or "),LI=n(CS,"A",{href:!0});var mft=s(LI);Bpo=r(mft,"SplinterTokenizerFast"),mft.forEach(t),Npo=r(CS," (Splinter model)"),CS.forEach(t),Ipo=i(S),js=n(S,"LI",{});var wS=s(js);kie=n(wS,"STRONG",{});var gft=s(kie);qpo=r(gft,"squeezebert"),gft.forEach(t),jpo=r(wS," \u2014 "),yI=n(wS,"A",{href:!0});var hft=s(yI);Dpo=r(hft,"SqueezeBertTokenizer"),hft.forEach(t),Gpo=r(wS," or "),xI=n(wS,"A",{href:!0});var pft=s(xI);Opo=r(pft,"SqueezeBertTokenizerFast"),pft.forEach(t),Vpo=r(wS," (SqueezeBERT model)"),wS.forEach(t),Xpo=i(S),Ds=n(S,"LI",{});var AS=s(Ds);Sie=n(AS,"STRONG",{});var _ft=s(Sie);zpo=r(_ft,"t5"),_ft.forEach(t),Qpo=r(AS," \u2014 "),$I=n(AS,"A",{href:!0});var uft=s($I);Wpo=r(uft,"T5Tokenizer"),uft.forEach(t),Hpo=r(AS," or "),kI=n(AS,"A",{href:!0});var bft=s(kI);Upo=r(bft,"T5TokenizerFast"),bft.forEach(t),Jpo=r(AS," (T5 model)"),AS.forEach(t),Ypo=i(S),Ah=n(S,"LI",{});var ULe=s(Ah);Rie=n(ULe,"STRONG",{});var vft=s(Rie);Kpo=r(vft,"tapas"),vft.forEach(t),Zpo=r(ULe," \u2014 "),SI=n(ULe,"A",{href:!0});var Fft=s(SI);e_o=r(Fft,"TapasTokenizer"),Fft.forEach(t),o_o=r(ULe," (TAPAS model)"),ULe.forEach(t),r_o=i(S),Lh=n(S,"LI",{});var JLe=s(Lh);Pie=n(JLe,"STRONG",{});var Tft=s(Pie);t_o=r(Tft,"tapex"),Tft.forEach(t),a_o=r(JLe," \u2014 "),RI=n(JLe,"A",{href:!0});var Mft=s(RI);n_o=r(Mft,"TapexTokenizer"),Mft.forEach(t),s_o=r(JLe," (TAPEX model)"),JLe.forEach(t),l_o=i(S),yh=n(S,"LI",{});var YLe=s(yh);Bie=n(YLe,"STRONG",{});var Eft=s(Bie);i_o=r(Eft,"transfo-xl"),Eft.forEach(t),d_o=r(YLe," \u2014 "),PI=n(YLe,"A",{href:!0});var Cft=s(PI);c_o=r(Cft,"TransfoXLTokenizer"),Cft.forEach(t),f_o=r(YLe," (Transformer-XL model)"),YLe.forEach(t),m_o=i(S),Gs=n(S,"LI",{});var LS=s(Gs);Nie=n(LS,"STRONG",{});var wft=s(Nie);g_o=r(wft,"vilt"),wft.forEach(t),h_o=r(LS," \u2014 "),BI=n(LS,"A",{href:!0});var Aft=s(BI);p_o=r(Aft,"BertTokenizer"),Aft.forEach(t),__o=r(LS," or "),NI=n(LS,"A",{href:!0});var Lft=s(NI);u_o=r(Lft,"BertTokenizerFast"),Lft.forEach(t),b_o=r(LS," (ViLT model)"),LS.forEach(t),v_o=i(S),Os=n(S,"LI",{});var yS=s(Os);Iie=n(yS,"STRONG",{});var yft=s(Iie);F_o=r(yft,"visual_bert"),yft.forEach(t),T_o=r(yS," \u2014 "),II=n(yS,"A",{href:!0});var xft=s(II);M_o=r(xft,"BertTokenizer"),xft.forEach(t),E_o=r(yS," or "),qI=n(yS,"A",{href:!0});var $ft=s(qI);C_o=r($ft,"BertTokenizerFast"),$ft.forEach(t),w_o=r(yS," (VisualBERT model)"),yS.forEach(t),A_o=i(S),xh=n(S,"LI",{});var KLe=s(xh);qie=n(KLe,"STRONG",{});var kft=s(qie);L_o=r(kft,"wav2vec2"),kft.forEach(t),y_o=r(KLe," \u2014 "),jI=n(KLe,"A",{href:!0});var Sft=s(jI);x_o=r(Sft,"Wav2Vec2CTCTokenizer"),Sft.forEach(t),$_o=r(KLe," (Wav2Vec2 model)"),KLe.forEach(t),k_o=i(S),$h=n(S,"LI",{});var ZLe=s($h);jie=n(ZLe,"STRONG",{});var Rft=s(jie);S_o=r(Rft,"wav2vec2-conformer"),Rft.forEach(t),R_o=r(ZLe," \u2014 "),DI=n(ZLe,"A",{href:!0});var Pft=s(DI);P_o=r(Pft,"Wav2Vec2CTCTokenizer"),Pft.forEach(t),B_o=r(ZLe," (Wav2Vec2-Conformer model)"),ZLe.forEach(t),N_o=i(S),kh=n(S,"LI",{});var eye=s(kh);Die=n(eye,"STRONG",{});var Bft=s(Die);I_o=r(Bft,"wav2vec2_phoneme"),Bft.forEach(t),q_o=r(eye," \u2014 "),GI=n(eye,"A",{href:!0});var Nft=s(GI);j_o=r(Nft,"Wav2Vec2PhonemeCTCTokenizer"),Nft.forEach(t),D_o=r(eye," (Wav2Vec2Phoneme model)"),eye.forEach(t),G_o=i(S),Vs=n(S,"LI",{});var xS=s(Vs);Gie=n(xS,"STRONG",{});var Ift=s(Gie);O_o=r(Ift,"xglm"),Ift.forEach(t),V_o=r(xS," \u2014 "),OI=n(xS,"A",{href:!0});var qft=s(OI);X_o=r(qft,"XGLMTokenizer"),qft.forEach(t),z_o=r(xS," or "),VI=n(xS,"A",{href:!0});var jft=s(VI);Q_o=r(jft,"XGLMTokenizerFast"),jft.forEach(t),W_o=r(xS," (XGLM model)"),xS.forEach(t),H_o=i(S),Sh=n(S,"LI",{});var oye=s(Sh);Oie=n(oye,"STRONG",{});var Dft=s(Oie);U_o=r(Dft,"xlm"),Dft.forEach(t),J_o=r(oye," \u2014 "),XI=n(oye,"A",{href:!0});var Gft=s(XI);Y_o=r(Gft,"XLMTokenizer"),Gft.forEach(t),K_o=r(oye," (XLM model)"),oye.forEach(t),Z_o=i(S),Rh=n(S,"LI",{});var rye=s(Rh);Vie=n(rye,"STRONG",{});var Oft=s(Vie);euo=r(Oft,"xlm-prophetnet"),Oft.forEach(t),ouo=r(rye," \u2014 "),zI=n(rye,"A",{href:!0});var Vft=s(zI);ruo=r(Vft,"XLMProphetNetTokenizer"),Vft.forEach(t),tuo=r(rye," (XLM-ProphetNet model)"),rye.forEach(t),auo=i(S),Xs=n(S,"LI",{});var $S=s(Xs);Xie=n($S,"STRONG",{});var Xft=s(Xie);nuo=r(Xft,"xlm-roberta"),Xft.forEach(t),suo=r($S," \u2014 "),QI=n($S,"A",{href:!0});var zft=s(QI);luo=r(zft,"XLMRobertaTokenizer"),zft.forEach(t),iuo=r($S," or "),WI=n($S,"A",{href:!0});var Qft=s(WI);duo=r(Qft,"XLMRobertaTokenizerFast"),Qft.forEach(t),cuo=r($S," (XLM-RoBERTa model)"),$S.forEach(t),fuo=i(S),zs=n(S,"LI",{});var kS=s(zs);zie=n(kS,"STRONG",{});var Wft=s(zie);muo=r(Wft,"xlm-roberta-xl"),Wft.forEach(t),guo=r(kS," \u2014 "),HI=n(kS,"A",{href:!0});var Hft=s(HI);huo=r(Hft,"RobertaTokenizer"),Hft.forEach(t),puo=r(kS," or "),UI=n(kS,"A",{href:!0});var Uft=s(UI);_uo=r(Uft,"RobertaTokenizerFast"),Uft.forEach(t),uuo=r(kS," (XLM-RoBERTa-XL model)"),kS.forEach(t),buo=i(S),Qs=n(S,"LI",{});var SS=s(Qs);Qie=n(SS,"STRONG",{});var Jft=s(Qie);vuo=r(Jft,"xlnet"),Jft.forEach(t),Fuo=r(SS," \u2014 "),JI=n(SS,"A",{href:!0});var Yft=s(JI);Tuo=r(Yft,"XLNetTokenizer"),Yft.forEach(t),Muo=r(SS," or "),YI=n(SS,"A",{href:!0});var Kft=s(YI);Euo=r(Kft,"XLNetTokenizerFast"),Kft.forEach(t),Cuo=r(SS," (XLNet model)"),SS.forEach(t),wuo=i(S),Ws=n(S,"LI",{});var RS=s(Ws);Wie=n(RS,"STRONG",{});var Zft=s(Wie);Auo=r(Zft,"yoso"),Zft.forEach(t),Luo=r(RS," \u2014 "),KI=n(RS,"A",{href:!0});var emt=s(KI);yuo=r(emt,"AlbertTokenizer"),emt.forEach(t),xuo=r(RS," or "),ZI=n(RS,"A",{href:!0});var omt=s(ZI);$uo=r(omt,"AlbertTokenizerFast"),omt.forEach(t),kuo=r(RS," (YOSO model)"),RS.forEach(t),S.forEach(t),Suo=i(el),T(Ph.$$.fragment,el),el.forEach(t),Ruo=i(Zs),Bh=n(Zs,"DIV",{class:!0});var FQe=s(Bh);T(F6.$$.fragment,FQe),Puo=i(FQe),Hie=n(FQe,"P",{});var rmt=s(Hie);Buo=r(rmt,"Register a new tokenizer in this mapping."),rmt.forEach(t),FQe.forEach(t),Zs.forEach(t),vXe=i(f),ji=n(f,"H2",{class:!0});var TQe=s(ji);Nh=n(TQe,"A",{id:!0,class:!0,href:!0});var tmt=s(Nh);Uie=n(tmt,"SPAN",{});var amt=s(Uie);T(T6.$$.fragment,amt),amt.forEach(t),tmt.forEach(t),Nuo=i(TQe),Jie=n(TQe,"SPAN",{});var nmt=s(Jie);Iuo=r(nmt,"AutoFeatureExtractor"),nmt.forEach(t),TQe.forEach(t),FXe=i(f),yo=n(f,"DIV",{class:!0});var ol=s(yo);T(M6.$$.fragment,ol),quo=i(ol),E6=n(ol,"P",{});var MQe=s(E6);juo=r(MQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eq=n(MQe,"A",{href:!0});var smt=s(eq);Duo=r(smt,"AutoFeatureExtractor.from_pretrained()"),smt.forEach(t),Guo=r(MQe," class method."),MQe.forEach(t),Ouo=i(ol),C6=n(ol,"P",{});var EQe=s(C6);Vuo=r(EQe,"This class cannot be instantiated directly using "),Yie=n(EQe,"CODE",{});var lmt=s(Yie);Xuo=r(lmt,"__init__()"),lmt.forEach(t),zuo=r(EQe," (throws an error)."),EQe.forEach(t),Quo=i(ol),Ue=n(ol,"DIV",{class:!0});var na=s(Ue);T(w6.$$.fragment,na),Wuo=i(na),Kie=n(na,"P",{});var imt=s(Kie);Huo=r(imt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),imt.forEach(t),Uuo=i(na),Ba=n(na,"P",{});var cw=s(Ba);Juo=r(cw,"The feature extractor class to instantiate is selected based on the "),Zie=n(cw,"CODE",{});var dmt=s(Zie);Yuo=r(dmt,"model_type"),dmt.forEach(t),Kuo=r(cw,` property of the config object
(either passed as an argument or loaded from `),ede=n(cw,"CODE",{});var cmt=s(ede);Zuo=r(cmt,"pretrained_model_name_or_path"),cmt.forEach(t),e1o=r(cw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ode=n(cw,"CODE",{});var fmt=s(ode);o1o=r(fmt,"pretrained_model_name_or_path"),fmt.forEach(t),r1o=r(cw,":"),cw.forEach(t),t1o=i(na),Y=n(na,"UL",{});var K=s(Y);Ih=n(K,"LI",{});var tye=s(Ih);rde=n(tye,"STRONG",{});var mmt=s(rde);a1o=r(mmt,"beit"),mmt.forEach(t),n1o=r(tye," \u2014 "),oq=n(tye,"A",{href:!0});var gmt=s(oq);s1o=r(gmt,"BeitFeatureExtractor"),gmt.forEach(t),l1o=r(tye," (BEiT model)"),tye.forEach(t),i1o=i(K),qh=n(K,"LI",{});var aye=s(qh);tde=n(aye,"STRONG",{});var hmt=s(tde);d1o=r(hmt,"clip"),hmt.forEach(t),c1o=r(aye," \u2014 "),rq=n(aye,"A",{href:!0});var pmt=s(rq);f1o=r(pmt,"CLIPFeatureExtractor"),pmt.forEach(t),m1o=r(aye," (CLIP model)"),aye.forEach(t),g1o=i(K),jh=n(K,"LI",{});var nye=s(jh);ade=n(nye,"STRONG",{});var _mt=s(ade);h1o=r(_mt,"convnext"),_mt.forEach(t),p1o=r(nye," \u2014 "),tq=n(nye,"A",{href:!0});var umt=s(tq);_1o=r(umt,"ConvNextFeatureExtractor"),umt.forEach(t),u1o=r(nye," (ConvNeXT model)"),nye.forEach(t),b1o=i(K),Dh=n(K,"LI",{});var sye=s(Dh);nde=n(sye,"STRONG",{});var bmt=s(nde);v1o=r(bmt,"cvt"),bmt.forEach(t),F1o=r(sye," \u2014 "),aq=n(sye,"A",{href:!0});var vmt=s(aq);T1o=r(vmt,"ConvNextFeatureExtractor"),vmt.forEach(t),M1o=r(sye," (CvT model)"),sye.forEach(t),E1o=i(K),Gh=n(K,"LI",{});var lye=s(Gh);sde=n(lye,"STRONG",{});var Fmt=s(sde);C1o=r(Fmt,"data2vec-audio"),Fmt.forEach(t),w1o=r(lye," \u2014 "),nq=n(lye,"A",{href:!0});var Tmt=s(nq);A1o=r(Tmt,"Wav2Vec2FeatureExtractor"),Tmt.forEach(t),L1o=r(lye," (Data2VecAudio model)"),lye.forEach(t),y1o=i(K),Oh=n(K,"LI",{});var iye=s(Oh);lde=n(iye,"STRONG",{});var Mmt=s(lde);x1o=r(Mmt,"data2vec-vision"),Mmt.forEach(t),$1o=r(iye," \u2014 "),sq=n(iye,"A",{href:!0});var Emt=s(sq);k1o=r(Emt,"BeitFeatureExtractor"),Emt.forEach(t),S1o=r(iye," (Data2VecVision model)"),iye.forEach(t),R1o=i(K),Vh=n(K,"LI",{});var dye=s(Vh);ide=n(dye,"STRONG",{});var Cmt=s(ide);P1o=r(Cmt,"deit"),Cmt.forEach(t),B1o=r(dye," \u2014 "),lq=n(dye,"A",{href:!0});var wmt=s(lq);N1o=r(wmt,"DeiTFeatureExtractor"),wmt.forEach(t),I1o=r(dye," (DeiT model)"),dye.forEach(t),q1o=i(K),Xh=n(K,"LI",{});var cye=s(Xh);dde=n(cye,"STRONG",{});var Amt=s(dde);j1o=r(Amt,"detr"),Amt.forEach(t),D1o=r(cye," \u2014 "),iq=n(cye,"A",{href:!0});var Lmt=s(iq);G1o=r(Lmt,"DetrFeatureExtractor"),Lmt.forEach(t),O1o=r(cye," (DETR model)"),cye.forEach(t),V1o=i(K),zh=n(K,"LI",{});var fye=s(zh);cde=n(fye,"STRONG",{});var ymt=s(cde);X1o=r(ymt,"dpt"),ymt.forEach(t),z1o=r(fye," \u2014 "),dq=n(fye,"A",{href:!0});var xmt=s(dq);Q1o=r(xmt,"DPTFeatureExtractor"),xmt.forEach(t),W1o=r(fye," (DPT model)"),fye.forEach(t),H1o=i(K),Qh=n(K,"LI",{});var mye=s(Qh);fde=n(mye,"STRONG",{});var $mt=s(fde);U1o=r($mt,"flava"),$mt.forEach(t),J1o=r(mye," \u2014 "),cq=n(mye,"A",{href:!0});var kmt=s(cq);Y1o=r(kmt,"FlavaFeatureExtractor"),kmt.forEach(t),K1o=r(mye," (FLAVA model)"),mye.forEach(t),Z1o=i(K),Wh=n(K,"LI",{});var gye=s(Wh);mde=n(gye,"STRONG",{});var Smt=s(mde);e2o=r(Smt,"glpn"),Smt.forEach(t),o2o=r(gye," \u2014 "),fq=n(gye,"A",{href:!0});var Rmt=s(fq);r2o=r(Rmt,"GLPNFeatureExtractor"),Rmt.forEach(t),t2o=r(gye," (GLPN model)"),gye.forEach(t),a2o=i(K),Hh=n(K,"LI",{});var hye=s(Hh);gde=n(hye,"STRONG",{});var Pmt=s(gde);n2o=r(Pmt,"groupvit"),Pmt.forEach(t),s2o=r(hye," \u2014 "),mq=n(hye,"A",{href:!0});var Bmt=s(mq);l2o=r(Bmt,"CLIPFeatureExtractor"),Bmt.forEach(t),i2o=r(hye," (GroupViT model)"),hye.forEach(t),d2o=i(K),Uh=n(K,"LI",{});var pye=s(Uh);hde=n(pye,"STRONG",{});var Nmt=s(hde);c2o=r(Nmt,"hubert"),Nmt.forEach(t),f2o=r(pye," \u2014 "),gq=n(pye,"A",{href:!0});var Imt=s(gq);m2o=r(Imt,"Wav2Vec2FeatureExtractor"),Imt.forEach(t),g2o=r(pye," (Hubert model)"),pye.forEach(t),h2o=i(K),Jh=n(K,"LI",{});var _ye=s(Jh);pde=n(_ye,"STRONG",{});var qmt=s(pde);p2o=r(qmt,"imagegpt"),qmt.forEach(t),_2o=r(_ye," \u2014 "),hq=n(_ye,"A",{href:!0});var jmt=s(hq);u2o=r(jmt,"ImageGPTFeatureExtractor"),jmt.forEach(t),b2o=r(_ye," (ImageGPT model)"),_ye.forEach(t),v2o=i(K),Yh=n(K,"LI",{});var uye=s(Yh);_de=n(uye,"STRONG",{});var Dmt=s(_de);F2o=r(Dmt,"layoutlmv2"),Dmt.forEach(t),T2o=r(uye," \u2014 "),pq=n(uye,"A",{href:!0});var Gmt=s(pq);M2o=r(Gmt,"LayoutLMv2FeatureExtractor"),Gmt.forEach(t),E2o=r(uye," (LayoutLMv2 model)"),uye.forEach(t),C2o=i(K),Kh=n(K,"LI",{});var bye=s(Kh);ude=n(bye,"STRONG",{});var Omt=s(ude);w2o=r(Omt,"layoutlmv3"),Omt.forEach(t),A2o=r(bye," \u2014 "),_q=n(bye,"A",{href:!0});var Vmt=s(_q);L2o=r(Vmt,"LayoutLMv3FeatureExtractor"),Vmt.forEach(t),y2o=r(bye," (LayoutLMv3 model)"),bye.forEach(t),x2o=i(K),Zh=n(K,"LI",{});var vye=s(Zh);bde=n(vye,"STRONG",{});var Xmt=s(bde);$2o=r(Xmt,"levit"),Xmt.forEach(t),k2o=r(vye," \u2014 "),uq=n(vye,"A",{href:!0});var zmt=s(uq);S2o=r(zmt,"LevitFeatureExtractor"),zmt.forEach(t),R2o=r(vye," (LeViT model)"),vye.forEach(t),P2o=i(K),ep=n(K,"LI",{});var Fye=s(ep);vde=n(Fye,"STRONG",{});var Qmt=s(vde);B2o=r(Qmt,"maskformer"),Qmt.forEach(t),N2o=r(Fye," \u2014 "),bq=n(Fye,"A",{href:!0});var Wmt=s(bq);I2o=r(Wmt,"MaskFormerFeatureExtractor"),Wmt.forEach(t),q2o=r(Fye," (MaskFormer model)"),Fye.forEach(t),j2o=i(K),op=n(K,"LI",{});var Tye=s(op);Fde=n(Tye,"STRONG",{});var Hmt=s(Fde);D2o=r(Hmt,"mctct"),Hmt.forEach(t),G2o=r(Tye," \u2014 "),vq=n(Tye,"A",{href:!0});var Umt=s(vq);O2o=r(Umt,"MCTCTFeatureExtractor"),Umt.forEach(t),V2o=r(Tye," (M-CTC-T model)"),Tye.forEach(t),X2o=i(K),rp=n(K,"LI",{});var Mye=s(rp);Tde=n(Mye,"STRONG",{});var Jmt=s(Tde);z2o=r(Jmt,"mobilevit"),Jmt.forEach(t),Q2o=r(Mye," \u2014 "),Fq=n(Mye,"A",{href:!0});var Ymt=s(Fq);W2o=r(Ymt,"MobileViTFeatureExtractor"),Ymt.forEach(t),H2o=r(Mye," (MobileViT model)"),Mye.forEach(t),U2o=i(K),tp=n(K,"LI",{});var Eye=s(tp);Mde=n(Eye,"STRONG",{});var Kmt=s(Mde);J2o=r(Kmt,"perceiver"),Kmt.forEach(t),Y2o=r(Eye," \u2014 "),Tq=n(Eye,"A",{href:!0});var Zmt=s(Tq);K2o=r(Zmt,"PerceiverFeatureExtractor"),Zmt.forEach(t),Z2o=r(Eye," (Perceiver model)"),Eye.forEach(t),ebo=i(K),ap=n(K,"LI",{});var Cye=s(ap);Ede=n(Cye,"STRONG",{});var egt=s(Ede);obo=r(egt,"poolformer"),egt.forEach(t),rbo=r(Cye," \u2014 "),Mq=n(Cye,"A",{href:!0});var ogt=s(Mq);tbo=r(ogt,"PoolFormerFeatureExtractor"),ogt.forEach(t),abo=r(Cye," (PoolFormer model)"),Cye.forEach(t),nbo=i(K),np=n(K,"LI",{});var wye=s(np);Cde=n(wye,"STRONG",{});var rgt=s(Cde);sbo=r(rgt,"regnet"),rgt.forEach(t),lbo=r(wye," \u2014 "),Eq=n(wye,"A",{href:!0});var tgt=s(Eq);ibo=r(tgt,"ConvNextFeatureExtractor"),tgt.forEach(t),dbo=r(wye," (RegNet model)"),wye.forEach(t),cbo=i(K),sp=n(K,"LI",{});var Aye=s(sp);wde=n(Aye,"STRONG",{});var agt=s(wde);fbo=r(agt,"resnet"),agt.forEach(t),mbo=r(Aye," \u2014 "),Cq=n(Aye,"A",{href:!0});var ngt=s(Cq);gbo=r(ngt,"ConvNextFeatureExtractor"),ngt.forEach(t),hbo=r(Aye," (ResNet model)"),Aye.forEach(t),pbo=i(K),lp=n(K,"LI",{});var Lye=s(lp);Ade=n(Lye,"STRONG",{});var sgt=s(Ade);_bo=r(sgt,"segformer"),sgt.forEach(t),ubo=r(Lye," \u2014 "),wq=n(Lye,"A",{href:!0});var lgt=s(wq);bbo=r(lgt,"SegformerFeatureExtractor"),lgt.forEach(t),vbo=r(Lye," (SegFormer model)"),Lye.forEach(t),Fbo=i(K),ip=n(K,"LI",{});var yye=s(ip);Lde=n(yye,"STRONG",{});var igt=s(Lde);Tbo=r(igt,"speech_to_text"),igt.forEach(t),Mbo=r(yye," \u2014 "),Aq=n(yye,"A",{href:!0});var dgt=s(Aq);Ebo=r(dgt,"Speech2TextFeatureExtractor"),dgt.forEach(t),Cbo=r(yye," (Speech2Text model)"),yye.forEach(t),wbo=i(K),dp=n(K,"LI",{});var xye=s(dp);yde=n(xye,"STRONG",{});var cgt=s(yde);Abo=r(cgt,"swin"),cgt.forEach(t),Lbo=r(xye," \u2014 "),Lq=n(xye,"A",{href:!0});var fgt=s(Lq);ybo=r(fgt,"ViTFeatureExtractor"),fgt.forEach(t),xbo=r(xye," (Swin Transformer model)"),xye.forEach(t),$bo=i(K),cp=n(K,"LI",{});var $ye=s(cp);xde=n($ye,"STRONG",{});var mgt=s(xde);kbo=r(mgt,"van"),mgt.forEach(t),Sbo=r($ye," \u2014 "),yq=n($ye,"A",{href:!0});var ggt=s(yq);Rbo=r(ggt,"ConvNextFeatureExtractor"),ggt.forEach(t),Pbo=r($ye," (VAN model)"),$ye.forEach(t),Bbo=i(K),fp=n(K,"LI",{});var kye=s(fp);$de=n(kye,"STRONG",{});var hgt=s($de);Nbo=r(hgt,"vilt"),hgt.forEach(t),Ibo=r(kye," \u2014 "),xq=n(kye,"A",{href:!0});var pgt=s(xq);qbo=r(pgt,"ViltFeatureExtractor"),pgt.forEach(t),jbo=r(kye," (ViLT model)"),kye.forEach(t),Dbo=i(K),mp=n(K,"LI",{});var Sye=s(mp);kde=n(Sye,"STRONG",{});var _gt=s(kde);Gbo=r(_gt,"vit"),_gt.forEach(t),Obo=r(Sye," \u2014 "),$q=n(Sye,"A",{href:!0});var ugt=s($q);Vbo=r(ugt,"ViTFeatureExtractor"),ugt.forEach(t),Xbo=r(Sye," (ViT model)"),Sye.forEach(t),zbo=i(K),gp=n(K,"LI",{});var Rye=s(gp);Sde=n(Rye,"STRONG",{});var bgt=s(Sde);Qbo=r(bgt,"vit_mae"),bgt.forEach(t),Wbo=r(Rye," \u2014 "),kq=n(Rye,"A",{href:!0});var vgt=s(kq);Hbo=r(vgt,"ViTFeatureExtractor"),vgt.forEach(t),Ubo=r(Rye," (ViTMAE model)"),Rye.forEach(t),Jbo=i(K),hp=n(K,"LI",{});var Pye=s(hp);Rde=n(Pye,"STRONG",{});var Fgt=s(Rde);Ybo=r(Fgt,"wav2vec2"),Fgt.forEach(t),Kbo=r(Pye," \u2014 "),Sq=n(Pye,"A",{href:!0});var Tgt=s(Sq);Zbo=r(Tgt,"Wav2Vec2FeatureExtractor"),Tgt.forEach(t),evo=r(Pye," (Wav2Vec2 model)"),Pye.forEach(t),ovo=i(K),pp=n(K,"LI",{});var Bye=s(pp);Pde=n(Bye,"STRONG",{});var Mgt=s(Pde);rvo=r(Mgt,"wav2vec2-conformer"),Mgt.forEach(t),tvo=r(Bye," \u2014 "),Rq=n(Bye,"A",{href:!0});var Egt=s(Rq);avo=r(Egt,"Wav2Vec2FeatureExtractor"),Egt.forEach(t),nvo=r(Bye," (Wav2Vec2-Conformer model)"),Bye.forEach(t),svo=i(K),_p=n(K,"LI",{});var Nye=s(_p);Bde=n(Nye,"STRONG",{});var Cgt=s(Bde);lvo=r(Cgt,"yolos"),Cgt.forEach(t),ivo=r(Nye," \u2014 "),Pq=n(Nye,"A",{href:!0});var wgt=s(Pq);dvo=r(wgt,"YolosFeatureExtractor"),wgt.forEach(t),cvo=r(Nye," (YOLOS model)"),Nye.forEach(t),K.forEach(t),fvo=i(na),T(up.$$.fragment,na),mvo=i(na),T(bp.$$.fragment,na),na.forEach(t),gvo=i(ol),vp=n(ol,"DIV",{class:!0});var CQe=s(vp);T(A6.$$.fragment,CQe),hvo=i(CQe),Nde=n(CQe,"P",{});var Agt=s(Nde);pvo=r(Agt,"Register a new feature extractor for this class."),Agt.forEach(t),CQe.forEach(t),ol.forEach(t),TXe=i(f),Di=n(f,"H2",{class:!0});var wQe=s(Di);Fp=n(wQe,"A",{id:!0,class:!0,href:!0});var Lgt=s(Fp);Ide=n(Lgt,"SPAN",{});var ygt=s(Ide);T(L6.$$.fragment,ygt),ygt.forEach(t),Lgt.forEach(t),_vo=i(wQe),qde=n(wQe,"SPAN",{});var xgt=s(qde);uvo=r(xgt,"AutoProcessor"),xgt.forEach(t),wQe.forEach(t),MXe=i(f),xo=n(f,"DIV",{class:!0});var rl=s(xo);T(y6.$$.fragment,rl),bvo=i(rl),x6=n(rl,"P",{});var AQe=s(x6);vvo=r(AQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Bq=n(AQe,"A",{href:!0});var $gt=s(Bq);Fvo=r($gt,"AutoProcessor.from_pretrained()"),$gt.forEach(t),Tvo=r(AQe," class method."),AQe.forEach(t),Mvo=i(rl),$6=n(rl,"P",{});var LQe=s($6);Evo=r(LQe,"This class cannot be instantiated directly using "),jde=n(LQe,"CODE",{});var kgt=s(jde);Cvo=r(kgt,"__init__()"),kgt.forEach(t),wvo=r(LQe," (throws an error)."),LQe.forEach(t),Avo=i(rl),Je=n(rl,"DIV",{class:!0});var sa=s(Je);T(k6.$$.fragment,sa),Lvo=i(sa),Dde=n(sa,"P",{});var Sgt=s(Dde);yvo=r(Sgt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Sgt.forEach(t),xvo=i(sa),Gi=n(sa,"P",{});var qre=s(Gi);$vo=r(qre,"The processor class to instantiate is selected based on the "),Gde=n(qre,"CODE",{});var Rgt=s(Gde);kvo=r(Rgt,"model_type"),Rgt.forEach(t),Svo=r(qre,` property of the config object (either
passed as an argument or loaded from `),Ode=n(qre,"CODE",{});var Pgt=s(Ode);Rvo=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),Pvo=r(qre," if possible):"),qre.forEach(t),Bvo=i(sa),pe=n(sa,"UL",{});var be=s(pe);Tp=n(be,"LI",{});var Iye=s(Tp);Vde=n(Iye,"STRONG",{});var Bgt=s(Vde);Nvo=r(Bgt,"clip"),Bgt.forEach(t),Ivo=r(Iye," \u2014 "),Nq=n(Iye,"A",{href:!0});var Ngt=s(Nq);qvo=r(Ngt,"CLIPProcessor"),Ngt.forEach(t),jvo=r(Iye," (CLIP model)"),Iye.forEach(t),Dvo=i(be),Mp=n(be,"LI",{});var qye=s(Mp);Xde=n(qye,"STRONG",{});var Igt=s(Xde);Gvo=r(Igt,"flava"),Igt.forEach(t),Ovo=r(qye," \u2014 "),zde=n(qye,"CODE",{});var qgt=s(zde);Vvo=r(qgt,"FLAVAProcessor"),qgt.forEach(t),Xvo=r(qye," (FLAVA model)"),qye.forEach(t),zvo=i(be),Ep=n(be,"LI",{});var jye=s(Ep);Qde=n(jye,"STRONG",{});var jgt=s(Qde);Qvo=r(jgt,"groupvit"),jgt.forEach(t),Wvo=r(jye," \u2014 "),Iq=n(jye,"A",{href:!0});var Dgt=s(Iq);Hvo=r(Dgt,"CLIPProcessor"),Dgt.forEach(t),Uvo=r(jye," (GroupViT model)"),jye.forEach(t),Jvo=i(be),Cp=n(be,"LI",{});var Dye=s(Cp);Wde=n(Dye,"STRONG",{});var Ggt=s(Wde);Yvo=r(Ggt,"layoutlmv2"),Ggt.forEach(t),Kvo=r(Dye," \u2014 "),qq=n(Dye,"A",{href:!0});var Ogt=s(qq);Zvo=r(Ogt,"LayoutLMv2Processor"),Ogt.forEach(t),e0o=r(Dye," (LayoutLMv2 model)"),Dye.forEach(t),o0o=i(be),wp=n(be,"LI",{});var Gye=s(wp);Hde=n(Gye,"STRONG",{});var Vgt=s(Hde);r0o=r(Vgt,"layoutlmv3"),Vgt.forEach(t),t0o=r(Gye," \u2014 "),jq=n(Gye,"A",{href:!0});var Xgt=s(jq);a0o=r(Xgt,"LayoutLMv3Processor"),Xgt.forEach(t),n0o=r(Gye," (LayoutLMv3 model)"),Gye.forEach(t),s0o=i(be),Ap=n(be,"LI",{});var Oye=s(Ap);Ude=n(Oye,"STRONG",{});var zgt=s(Ude);l0o=r(zgt,"layoutxlm"),zgt.forEach(t),i0o=r(Oye," \u2014 "),Dq=n(Oye,"A",{href:!0});var Qgt=s(Dq);d0o=r(Qgt,"LayoutXLMProcessor"),Qgt.forEach(t),c0o=r(Oye," (LayoutXLM model)"),Oye.forEach(t),f0o=i(be),Lp=n(be,"LI",{});var Vye=s(Lp);Jde=n(Vye,"STRONG",{});var Wgt=s(Jde);m0o=r(Wgt,"sew"),Wgt.forEach(t),g0o=r(Vye," \u2014 "),Gq=n(Vye,"A",{href:!0});var Hgt=s(Gq);h0o=r(Hgt,"Wav2Vec2Processor"),Hgt.forEach(t),p0o=r(Vye," (SEW model)"),Vye.forEach(t),_0o=i(be),yp=n(be,"LI",{});var Xye=s(yp);Yde=n(Xye,"STRONG",{});var Ugt=s(Yde);u0o=r(Ugt,"sew-d"),Ugt.forEach(t),b0o=r(Xye," \u2014 "),Oq=n(Xye,"A",{href:!0});var Jgt=s(Oq);v0o=r(Jgt,"Wav2Vec2Processor"),Jgt.forEach(t),F0o=r(Xye," (SEW-D model)"),Xye.forEach(t),T0o=i(be),xp=n(be,"LI",{});var zye=s(xp);Kde=n(zye,"STRONG",{});var Ygt=s(Kde);M0o=r(Ygt,"speech_to_text"),Ygt.forEach(t),E0o=r(zye," \u2014 "),Vq=n(zye,"A",{href:!0});var Kgt=s(Vq);C0o=r(Kgt,"Speech2TextProcessor"),Kgt.forEach(t),w0o=r(zye," (Speech2Text model)"),zye.forEach(t),A0o=i(be),$p=n(be,"LI",{});var Qye=s($p);Zde=n(Qye,"STRONG",{});var Zgt=s(Zde);L0o=r(Zgt,"speech_to_text_2"),Zgt.forEach(t),y0o=r(Qye," \u2014 "),Xq=n(Qye,"A",{href:!0});var eht=s(Xq);x0o=r(eht,"Speech2Text2Processor"),eht.forEach(t),$0o=r(Qye," (Speech2Text2 model)"),Qye.forEach(t),k0o=i(be),kp=n(be,"LI",{});var Wye=s(kp);ece=n(Wye,"STRONG",{});var oht=s(ece);S0o=r(oht,"trocr"),oht.forEach(t),R0o=r(Wye," \u2014 "),zq=n(Wye,"A",{href:!0});var rht=s(zq);P0o=r(rht,"TrOCRProcessor"),rht.forEach(t),B0o=r(Wye," (TrOCR model)"),Wye.forEach(t),N0o=i(be),Sp=n(be,"LI",{});var Hye=s(Sp);oce=n(Hye,"STRONG",{});var tht=s(oce);I0o=r(tht,"unispeech"),tht.forEach(t),q0o=r(Hye," \u2014 "),Qq=n(Hye,"A",{href:!0});var aht=s(Qq);j0o=r(aht,"Wav2Vec2Processor"),aht.forEach(t),D0o=r(Hye," (UniSpeech model)"),Hye.forEach(t),G0o=i(be),Rp=n(be,"LI",{});var Uye=s(Rp);rce=n(Uye,"STRONG",{});var nht=s(rce);O0o=r(nht,"unispeech-sat"),nht.forEach(t),V0o=r(Uye," \u2014 "),Wq=n(Uye,"A",{href:!0});var sht=s(Wq);X0o=r(sht,"Wav2Vec2Processor"),sht.forEach(t),z0o=r(Uye," (UniSpeechSat model)"),Uye.forEach(t),Q0o=i(be),Pp=n(be,"LI",{});var Jye=s(Pp);tce=n(Jye,"STRONG",{});var lht=s(tce);W0o=r(lht,"vilt"),lht.forEach(t),H0o=r(Jye," \u2014 "),Hq=n(Jye,"A",{href:!0});var iht=s(Hq);U0o=r(iht,"ViltProcessor"),iht.forEach(t),J0o=r(Jye," (ViLT model)"),Jye.forEach(t),Y0o=i(be),Bp=n(be,"LI",{});var Yye=s(Bp);ace=n(Yye,"STRONG",{});var dht=s(ace);K0o=r(dht,"vision-text-dual-encoder"),dht.forEach(t),Z0o=r(Yye," \u2014 "),Uq=n(Yye,"A",{href:!0});var cht=s(Uq);eFo=r(cht,"VisionTextDualEncoderProcessor"),cht.forEach(t),oFo=r(Yye," (VisionTextDualEncoder model)"),Yye.forEach(t),rFo=i(be),Np=n(be,"LI",{});var Kye=s(Np);nce=n(Kye,"STRONG",{});var fht=s(nce);tFo=r(fht,"wav2vec2"),fht.forEach(t),aFo=r(Kye," \u2014 "),Jq=n(Kye,"A",{href:!0});var mht=s(Jq);nFo=r(mht,"Wav2Vec2Processor"),mht.forEach(t),sFo=r(Kye," (Wav2Vec2 model)"),Kye.forEach(t),lFo=i(be),Ip=n(be,"LI",{});var Zye=s(Ip);sce=n(Zye,"STRONG",{});var ght=s(sce);iFo=r(ght,"wav2vec2-conformer"),ght.forEach(t),dFo=r(Zye," \u2014 "),Yq=n(Zye,"A",{href:!0});var hht=s(Yq);cFo=r(hht,"Wav2Vec2Processor"),hht.forEach(t),fFo=r(Zye," (Wav2Vec2-Conformer model)"),Zye.forEach(t),mFo=i(be),qp=n(be,"LI",{});var exe=s(qp);lce=n(exe,"STRONG",{});var pht=s(lce);gFo=r(pht,"wavlm"),pht.forEach(t),hFo=r(exe," \u2014 "),Kq=n(exe,"A",{href:!0});var _ht=s(Kq);pFo=r(_ht,"Wav2Vec2Processor"),_ht.forEach(t),_Fo=r(exe," (WavLM model)"),exe.forEach(t),be.forEach(t),uFo=i(sa),T(jp.$$.fragment,sa),bFo=i(sa),T(Dp.$$.fragment,sa),sa.forEach(t),vFo=i(rl),Gp=n(rl,"DIV",{class:!0});var yQe=s(Gp);T(S6.$$.fragment,yQe),FFo=i(yQe),ice=n(yQe,"P",{});var uht=s(ice);TFo=r(uht,"Register a new processor for this class."),uht.forEach(t),yQe.forEach(t),rl.forEach(t),EXe=i(f),Oi=n(f,"H2",{class:!0});var xQe=s(Oi);Op=n(xQe,"A",{id:!0,class:!0,href:!0});var bht=s(Op);dce=n(bht,"SPAN",{});var vht=s(dce);T(R6.$$.fragment,vht),vht.forEach(t),bht.forEach(t),MFo=i(xQe),cce=n(xQe,"SPAN",{});var Fht=s(cce);EFo=r(Fht,"AutoModel"),Fht.forEach(t),xQe.forEach(t),CXe=i(f),$o=n(f,"DIV",{class:!0});var tl=s($o);T(P6.$$.fragment,tl),CFo=i(tl),Vi=n(tl,"P",{});var jre=s(Vi);wFo=r(jre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zq=n(jre,"A",{href:!0});var Tht=s(Zq);AFo=r(Tht,"from_pretrained()"),Tht.forEach(t),LFo=r(jre," class method or the "),ej=n(jre,"A",{href:!0});var Mht=s(ej);yFo=r(Mht,"from_config()"),Mht.forEach(t),xFo=r(jre,` class
method.`),jre.forEach(t),$Fo=i(tl),B6=n(tl,"P",{});var $Qe=s(B6);kFo=r($Qe,"This class cannot be instantiated directly using "),fce=n($Qe,"CODE",{});var Eht=s(fce);SFo=r(Eht,"__init__()"),Eht.forEach(t),RFo=r($Qe," (throws an error)."),$Qe.forEach(t),PFo=i(tl),it=n(tl,"DIV",{class:!0});var fw=s(it);T(N6.$$.fragment,fw),BFo=i(fw),mce=n(fw,"P",{});var Cht=s(mce);NFo=r(Cht,"Instantiates one of the base model classes of the library from a configuration."),Cht.forEach(t),IFo=i(fw),Xi=n(fw,"P",{});var Dre=s(Xi);qFo=r(Dre,`Note:
Loading a model from its configuration file does `),gce=n(Dre,"STRONG",{});var wht=s(gce);jFo=r(wht,"not"),wht.forEach(t),DFo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oj=n(Dre,"A",{href:!0});var Aht=s(oj);GFo=r(Aht,"from_pretrained()"),Aht.forEach(t),OFo=r(Dre," to load the model weights."),Dre.forEach(t),VFo=i(fw),T(Vp.$$.fragment,fw),fw.forEach(t),XFo=i(tl),Ye=n(tl,"DIV",{class:!0});var la=s(Ye);T(I6.$$.fragment,la),zFo=i(la),hce=n(la,"P",{});var Lht=s(hce);QFo=r(Lht,"Instantiate one of the base model classes of the library from a pretrained model."),Lht.forEach(t),WFo=i(la),Na=n(la,"P",{});var mw=s(Na);HFo=r(mw,"The model class to instantiate is selected based on the "),pce=n(mw,"CODE",{});var yht=s(pce);UFo=r(yht,"model_type"),yht.forEach(t),JFo=r(mw,` property of the config object (either
passed as an argument or loaded from `),_ce=n(mw,"CODE",{});var xht=s(_ce);YFo=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),KFo=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uce=n(mw,"CODE",{});var $ht=s(uce);ZFo=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),eTo=r(mw,":"),mw.forEach(t),oTo=i(la),y=n(la,"UL",{});var x=s(y);Xp=n(x,"LI",{});var oxe=s(Xp);bce=n(oxe,"STRONG",{});var kht=s(bce);rTo=r(kht,"albert"),kht.forEach(t),tTo=r(oxe," \u2014 "),rj=n(oxe,"A",{href:!0});var Sht=s(rj);aTo=r(Sht,"AlbertModel"),Sht.forEach(t),nTo=r(oxe," (ALBERT model)"),oxe.forEach(t),sTo=i(x),zp=n(x,"LI",{});var rxe=s(zp);vce=n(rxe,"STRONG",{});var Rht=s(vce);lTo=r(Rht,"bart"),Rht.forEach(t),iTo=r(rxe," \u2014 "),tj=n(rxe,"A",{href:!0});var Pht=s(tj);dTo=r(Pht,"BartModel"),Pht.forEach(t),cTo=r(rxe," (BART model)"),rxe.forEach(t),fTo=i(x),Qp=n(x,"LI",{});var txe=s(Qp);Fce=n(txe,"STRONG",{});var Bht=s(Fce);mTo=r(Bht,"beit"),Bht.forEach(t),gTo=r(txe," \u2014 "),aj=n(txe,"A",{href:!0});var Nht=s(aj);hTo=r(Nht,"BeitModel"),Nht.forEach(t),pTo=r(txe," (BEiT model)"),txe.forEach(t),_To=i(x),Wp=n(x,"LI",{});var axe=s(Wp);Tce=n(axe,"STRONG",{});var Iht=s(Tce);uTo=r(Iht,"bert"),Iht.forEach(t),bTo=r(axe," \u2014 "),nj=n(axe,"A",{href:!0});var qht=s(nj);vTo=r(qht,"BertModel"),qht.forEach(t),FTo=r(axe," (BERT model)"),axe.forEach(t),TTo=i(x),Hp=n(x,"LI",{});var nxe=s(Hp);Mce=n(nxe,"STRONG",{});var jht=s(Mce);MTo=r(jht,"bert-generation"),jht.forEach(t),ETo=r(nxe," \u2014 "),sj=n(nxe,"A",{href:!0});var Dht=s(sj);CTo=r(Dht,"BertGenerationEncoder"),Dht.forEach(t),wTo=r(nxe," (Bert Generation model)"),nxe.forEach(t),ATo=i(x),Up=n(x,"LI",{});var sxe=s(Up);Ece=n(sxe,"STRONG",{});var Ght=s(Ece);LTo=r(Ght,"big_bird"),Ght.forEach(t),yTo=r(sxe," \u2014 "),lj=n(sxe,"A",{href:!0});var Oht=s(lj);xTo=r(Oht,"BigBirdModel"),Oht.forEach(t),$To=r(sxe," (BigBird model)"),sxe.forEach(t),kTo=i(x),Jp=n(x,"LI",{});var lxe=s(Jp);Cce=n(lxe,"STRONG",{});var Vht=s(Cce);STo=r(Vht,"bigbird_pegasus"),Vht.forEach(t),RTo=r(lxe," \u2014 "),ij=n(lxe,"A",{href:!0});var Xht=s(ij);PTo=r(Xht,"BigBirdPegasusModel"),Xht.forEach(t),BTo=r(lxe," (BigBird-Pegasus model)"),lxe.forEach(t),NTo=i(x),Yp=n(x,"LI",{});var ixe=s(Yp);wce=n(ixe,"STRONG",{});var zht=s(wce);ITo=r(zht,"blenderbot"),zht.forEach(t),qTo=r(ixe," \u2014 "),dj=n(ixe,"A",{href:!0});var Qht=s(dj);jTo=r(Qht,"BlenderbotModel"),Qht.forEach(t),DTo=r(ixe," (Blenderbot model)"),ixe.forEach(t),GTo=i(x),Kp=n(x,"LI",{});var dxe=s(Kp);Ace=n(dxe,"STRONG",{});var Wht=s(Ace);OTo=r(Wht,"blenderbot-small"),Wht.forEach(t),VTo=r(dxe," \u2014 "),cj=n(dxe,"A",{href:!0});var Hht=s(cj);XTo=r(Hht,"BlenderbotSmallModel"),Hht.forEach(t),zTo=r(dxe," (BlenderbotSmall model)"),dxe.forEach(t),QTo=i(x),Zp=n(x,"LI",{});var cxe=s(Zp);Lce=n(cxe,"STRONG",{});var Uht=s(Lce);WTo=r(Uht,"bloom"),Uht.forEach(t),HTo=r(cxe," \u2014 "),fj=n(cxe,"A",{href:!0});var Jht=s(fj);UTo=r(Jht,"BloomModel"),Jht.forEach(t),JTo=r(cxe," (BLOOM model)"),cxe.forEach(t),YTo=i(x),e_=n(x,"LI",{});var fxe=s(e_);yce=n(fxe,"STRONG",{});var Yht=s(yce);KTo=r(Yht,"camembert"),Yht.forEach(t),ZTo=r(fxe," \u2014 "),mj=n(fxe,"A",{href:!0});var Kht=s(mj);e7o=r(Kht,"CamembertModel"),Kht.forEach(t),o7o=r(fxe," (CamemBERT model)"),fxe.forEach(t),r7o=i(x),o_=n(x,"LI",{});var mxe=s(o_);xce=n(mxe,"STRONG",{});var Zht=s(xce);t7o=r(Zht,"canine"),Zht.forEach(t),a7o=r(mxe," \u2014 "),gj=n(mxe,"A",{href:!0});var ept=s(gj);n7o=r(ept,"CanineModel"),ept.forEach(t),s7o=r(mxe," (CANINE model)"),mxe.forEach(t),l7o=i(x),r_=n(x,"LI",{});var gxe=s(r_);$ce=n(gxe,"STRONG",{});var opt=s($ce);i7o=r(opt,"clip"),opt.forEach(t),d7o=r(gxe," \u2014 "),hj=n(gxe,"A",{href:!0});var rpt=s(hj);c7o=r(rpt,"CLIPModel"),rpt.forEach(t),f7o=r(gxe," (CLIP model)"),gxe.forEach(t),m7o=i(x),t_=n(x,"LI",{});var hxe=s(t_);kce=n(hxe,"STRONG",{});var tpt=s(kce);g7o=r(tpt,"codegen"),tpt.forEach(t),h7o=r(hxe," \u2014 "),pj=n(hxe,"A",{href:!0});var apt=s(pj);p7o=r(apt,"CodeGenModel"),apt.forEach(t),_7o=r(hxe," (CodeGen model)"),hxe.forEach(t),u7o=i(x),a_=n(x,"LI",{});var pxe=s(a_);Sce=n(pxe,"STRONG",{});var npt=s(Sce);b7o=r(npt,"convbert"),npt.forEach(t),v7o=r(pxe," \u2014 "),_j=n(pxe,"A",{href:!0});var spt=s(_j);F7o=r(spt,"ConvBertModel"),spt.forEach(t),T7o=r(pxe," (ConvBERT model)"),pxe.forEach(t),M7o=i(x),n_=n(x,"LI",{});var _xe=s(n_);Rce=n(_xe,"STRONG",{});var lpt=s(Rce);E7o=r(lpt,"convnext"),lpt.forEach(t),C7o=r(_xe," \u2014 "),uj=n(_xe,"A",{href:!0});var ipt=s(uj);w7o=r(ipt,"ConvNextModel"),ipt.forEach(t),A7o=r(_xe," (ConvNeXT model)"),_xe.forEach(t),L7o=i(x),s_=n(x,"LI",{});var uxe=s(s_);Pce=n(uxe,"STRONG",{});var dpt=s(Pce);y7o=r(dpt,"ctrl"),dpt.forEach(t),x7o=r(uxe," \u2014 "),bj=n(uxe,"A",{href:!0});var cpt=s(bj);$7o=r(cpt,"CTRLModel"),cpt.forEach(t),k7o=r(uxe," (CTRL model)"),uxe.forEach(t),S7o=i(x),l_=n(x,"LI",{});var bxe=s(l_);Bce=n(bxe,"STRONG",{});var fpt=s(Bce);R7o=r(fpt,"cvt"),fpt.forEach(t),P7o=r(bxe," \u2014 "),vj=n(bxe,"A",{href:!0});var mpt=s(vj);B7o=r(mpt,"CvtModel"),mpt.forEach(t),N7o=r(bxe," (CvT model)"),bxe.forEach(t),I7o=i(x),i_=n(x,"LI",{});var vxe=s(i_);Nce=n(vxe,"STRONG",{});var gpt=s(Nce);q7o=r(gpt,"data2vec-audio"),gpt.forEach(t),j7o=r(vxe," \u2014 "),Fj=n(vxe,"A",{href:!0});var hpt=s(Fj);D7o=r(hpt,"Data2VecAudioModel"),hpt.forEach(t),G7o=r(vxe," (Data2VecAudio model)"),vxe.forEach(t),O7o=i(x),d_=n(x,"LI",{});var Fxe=s(d_);Ice=n(Fxe,"STRONG",{});var ppt=s(Ice);V7o=r(ppt,"data2vec-text"),ppt.forEach(t),X7o=r(Fxe," \u2014 "),Tj=n(Fxe,"A",{href:!0});var _pt=s(Tj);z7o=r(_pt,"Data2VecTextModel"),_pt.forEach(t),Q7o=r(Fxe," (Data2VecText model)"),Fxe.forEach(t),W7o=i(x),c_=n(x,"LI",{});var Txe=s(c_);qce=n(Txe,"STRONG",{});var upt=s(qce);H7o=r(upt,"data2vec-vision"),upt.forEach(t),U7o=r(Txe," \u2014 "),Mj=n(Txe,"A",{href:!0});var bpt=s(Mj);J7o=r(bpt,"Data2VecVisionModel"),bpt.forEach(t),Y7o=r(Txe," (Data2VecVision model)"),Txe.forEach(t),K7o=i(x),f_=n(x,"LI",{});var Mxe=s(f_);jce=n(Mxe,"STRONG",{});var vpt=s(jce);Z7o=r(vpt,"deberta"),vpt.forEach(t),e8o=r(Mxe," \u2014 "),Ej=n(Mxe,"A",{href:!0});var Fpt=s(Ej);o8o=r(Fpt,"DebertaModel"),Fpt.forEach(t),r8o=r(Mxe," (DeBERTa model)"),Mxe.forEach(t),t8o=i(x),m_=n(x,"LI",{});var Exe=s(m_);Dce=n(Exe,"STRONG",{});var Tpt=s(Dce);a8o=r(Tpt,"deberta-v2"),Tpt.forEach(t),n8o=r(Exe," \u2014 "),Cj=n(Exe,"A",{href:!0});var Mpt=s(Cj);s8o=r(Mpt,"DebertaV2Model"),Mpt.forEach(t),l8o=r(Exe," (DeBERTa-v2 model)"),Exe.forEach(t),i8o=i(x),g_=n(x,"LI",{});var Cxe=s(g_);Gce=n(Cxe,"STRONG",{});var Ept=s(Gce);d8o=r(Ept,"decision_transformer"),Ept.forEach(t),c8o=r(Cxe," \u2014 "),wj=n(Cxe,"A",{href:!0});var Cpt=s(wj);f8o=r(Cpt,"DecisionTransformerModel"),Cpt.forEach(t),m8o=r(Cxe," (Decision Transformer model)"),Cxe.forEach(t),g8o=i(x),h_=n(x,"LI",{});var wxe=s(h_);Oce=n(wxe,"STRONG",{});var wpt=s(Oce);h8o=r(wpt,"deit"),wpt.forEach(t),p8o=r(wxe," \u2014 "),Aj=n(wxe,"A",{href:!0});var Apt=s(Aj);_8o=r(Apt,"DeiTModel"),Apt.forEach(t),u8o=r(wxe," (DeiT model)"),wxe.forEach(t),b8o=i(x),p_=n(x,"LI",{});var Axe=s(p_);Vce=n(Axe,"STRONG",{});var Lpt=s(Vce);v8o=r(Lpt,"detr"),Lpt.forEach(t),F8o=r(Axe," \u2014 "),Lj=n(Axe,"A",{href:!0});var ypt=s(Lj);T8o=r(ypt,"DetrModel"),ypt.forEach(t),M8o=r(Axe," (DETR model)"),Axe.forEach(t),E8o=i(x),__=n(x,"LI",{});var Lxe=s(__);Xce=n(Lxe,"STRONG",{});var xpt=s(Xce);C8o=r(xpt,"distilbert"),xpt.forEach(t),w8o=r(Lxe," \u2014 "),yj=n(Lxe,"A",{href:!0});var $pt=s(yj);A8o=r($pt,"DistilBertModel"),$pt.forEach(t),L8o=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),y8o=i(x),u_=n(x,"LI",{});var yxe=s(u_);zce=n(yxe,"STRONG",{});var kpt=s(zce);x8o=r(kpt,"dpr"),kpt.forEach(t),$8o=r(yxe," \u2014 "),xj=n(yxe,"A",{href:!0});var Spt=s(xj);k8o=r(Spt,"DPRQuestionEncoder"),Spt.forEach(t),S8o=r(yxe," (DPR model)"),yxe.forEach(t),R8o=i(x),b_=n(x,"LI",{});var xxe=s(b_);Qce=n(xxe,"STRONG",{});var Rpt=s(Qce);P8o=r(Rpt,"dpt"),Rpt.forEach(t),B8o=r(xxe," \u2014 "),$j=n(xxe,"A",{href:!0});var Ppt=s($j);N8o=r(Ppt,"DPTModel"),Ppt.forEach(t),I8o=r(xxe," (DPT model)"),xxe.forEach(t),q8o=i(x),v_=n(x,"LI",{});var $xe=s(v_);Wce=n($xe,"STRONG",{});var Bpt=s(Wce);j8o=r(Bpt,"electra"),Bpt.forEach(t),D8o=r($xe," \u2014 "),kj=n($xe,"A",{href:!0});var Npt=s(kj);G8o=r(Npt,"ElectraModel"),Npt.forEach(t),O8o=r($xe," (ELECTRA model)"),$xe.forEach(t),V8o=i(x),F_=n(x,"LI",{});var kxe=s(F_);Hce=n(kxe,"STRONG",{});var Ipt=s(Hce);X8o=r(Ipt,"flaubert"),Ipt.forEach(t),z8o=r(kxe," \u2014 "),Sj=n(kxe,"A",{href:!0});var qpt=s(Sj);Q8o=r(qpt,"FlaubertModel"),qpt.forEach(t),W8o=r(kxe," (FlauBERT model)"),kxe.forEach(t),H8o=i(x),T_=n(x,"LI",{});var Sxe=s(T_);Uce=n(Sxe,"STRONG",{});var jpt=s(Uce);U8o=r(jpt,"flava"),jpt.forEach(t),J8o=r(Sxe," \u2014 "),Rj=n(Sxe,"A",{href:!0});var Dpt=s(Rj);Y8o=r(Dpt,"FlavaModel"),Dpt.forEach(t),K8o=r(Sxe," (FLAVA model)"),Sxe.forEach(t),Z8o=i(x),M_=n(x,"LI",{});var Rxe=s(M_);Jce=n(Rxe,"STRONG",{});var Gpt=s(Jce);e9o=r(Gpt,"fnet"),Gpt.forEach(t),o9o=r(Rxe," \u2014 "),Pj=n(Rxe,"A",{href:!0});var Opt=s(Pj);r9o=r(Opt,"FNetModel"),Opt.forEach(t),t9o=r(Rxe," (FNet model)"),Rxe.forEach(t),a9o=i(x),E_=n(x,"LI",{});var Pxe=s(E_);Yce=n(Pxe,"STRONG",{});var Vpt=s(Yce);n9o=r(Vpt,"fsmt"),Vpt.forEach(t),s9o=r(Pxe," \u2014 "),Bj=n(Pxe,"A",{href:!0});var Xpt=s(Bj);l9o=r(Xpt,"FSMTModel"),Xpt.forEach(t),i9o=r(Pxe," (FairSeq Machine-Translation model)"),Pxe.forEach(t),d9o=i(x),Hs=n(x,"LI",{});var PS=s(Hs);Kce=n(PS,"STRONG",{});var zpt=s(Kce);c9o=r(zpt,"funnel"),zpt.forEach(t),f9o=r(PS," \u2014 "),Nj=n(PS,"A",{href:!0});var Qpt=s(Nj);m9o=r(Qpt,"FunnelModel"),Qpt.forEach(t),g9o=r(PS," or "),Ij=n(PS,"A",{href:!0});var Wpt=s(Ij);h9o=r(Wpt,"FunnelBaseModel"),Wpt.forEach(t),p9o=r(PS," (Funnel Transformer model)"),PS.forEach(t),_9o=i(x),C_=n(x,"LI",{});var Bxe=s(C_);Zce=n(Bxe,"STRONG",{});var Hpt=s(Zce);u9o=r(Hpt,"glpn"),Hpt.forEach(t),b9o=r(Bxe," \u2014 "),qj=n(Bxe,"A",{href:!0});var Upt=s(qj);v9o=r(Upt,"GLPNModel"),Upt.forEach(t),F9o=r(Bxe," (GLPN model)"),Bxe.forEach(t),T9o=i(x),w_=n(x,"LI",{});var Nxe=s(w_);efe=n(Nxe,"STRONG",{});var Jpt=s(efe);M9o=r(Jpt,"gpt2"),Jpt.forEach(t),E9o=r(Nxe," \u2014 "),jj=n(Nxe,"A",{href:!0});var Ypt=s(jj);C9o=r(Ypt,"GPT2Model"),Ypt.forEach(t),w9o=r(Nxe," (OpenAI GPT-2 model)"),Nxe.forEach(t),A9o=i(x),A_=n(x,"LI",{});var Ixe=s(A_);ofe=n(Ixe,"STRONG",{});var Kpt=s(ofe);L9o=r(Kpt,"gpt_neo"),Kpt.forEach(t),y9o=r(Ixe," \u2014 "),Dj=n(Ixe,"A",{href:!0});var Zpt=s(Dj);x9o=r(Zpt,"GPTNeoModel"),Zpt.forEach(t),$9o=r(Ixe," (GPT Neo model)"),Ixe.forEach(t),k9o=i(x),L_=n(x,"LI",{});var qxe=s(L_);rfe=n(qxe,"STRONG",{});var e_t=s(rfe);S9o=r(e_t,"gpt_neox"),e_t.forEach(t),R9o=r(qxe," \u2014 "),Gj=n(qxe,"A",{href:!0});var o_t=s(Gj);P9o=r(o_t,"GPTNeoXModel"),o_t.forEach(t),B9o=r(qxe," (GPT NeoX model)"),qxe.forEach(t),N9o=i(x),y_=n(x,"LI",{});var jxe=s(y_);tfe=n(jxe,"STRONG",{});var r_t=s(tfe);I9o=r(r_t,"gptj"),r_t.forEach(t),q9o=r(jxe," \u2014 "),Oj=n(jxe,"A",{href:!0});var t_t=s(Oj);j9o=r(t_t,"GPTJModel"),t_t.forEach(t),D9o=r(jxe," (GPT-J model)"),jxe.forEach(t),G9o=i(x),x_=n(x,"LI",{});var Dxe=s(x_);afe=n(Dxe,"STRONG",{});var a_t=s(afe);O9o=r(a_t,"groupvit"),a_t.forEach(t),V9o=r(Dxe," \u2014 "),Vj=n(Dxe,"A",{href:!0});var n_t=s(Vj);X9o=r(n_t,"GroupViTModel"),n_t.forEach(t),z9o=r(Dxe," (GroupViT model)"),Dxe.forEach(t),Q9o=i(x),$_=n(x,"LI",{});var Gxe=s($_);nfe=n(Gxe,"STRONG",{});var s_t=s(nfe);W9o=r(s_t,"hubert"),s_t.forEach(t),H9o=r(Gxe," \u2014 "),Xj=n(Gxe,"A",{href:!0});var l_t=s(Xj);U9o=r(l_t,"HubertModel"),l_t.forEach(t),J9o=r(Gxe," (Hubert model)"),Gxe.forEach(t),Y9o=i(x),k_=n(x,"LI",{});var Oxe=s(k_);sfe=n(Oxe,"STRONG",{});var i_t=s(sfe);K9o=r(i_t,"ibert"),i_t.forEach(t),Z9o=r(Oxe," \u2014 "),zj=n(Oxe,"A",{href:!0});var d_t=s(zj);eMo=r(d_t,"IBertModel"),d_t.forEach(t),oMo=r(Oxe," (I-BERT model)"),Oxe.forEach(t),rMo=i(x),S_=n(x,"LI",{});var Vxe=s(S_);lfe=n(Vxe,"STRONG",{});var c_t=s(lfe);tMo=r(c_t,"imagegpt"),c_t.forEach(t),aMo=r(Vxe," \u2014 "),Qj=n(Vxe,"A",{href:!0});var f_t=s(Qj);nMo=r(f_t,"ImageGPTModel"),f_t.forEach(t),sMo=r(Vxe," (ImageGPT model)"),Vxe.forEach(t),lMo=i(x),R_=n(x,"LI",{});var Xxe=s(R_);ife=n(Xxe,"STRONG",{});var m_t=s(ife);iMo=r(m_t,"layoutlm"),m_t.forEach(t),dMo=r(Xxe," \u2014 "),Wj=n(Xxe,"A",{href:!0});var g_t=s(Wj);cMo=r(g_t,"LayoutLMModel"),g_t.forEach(t),fMo=r(Xxe," (LayoutLM model)"),Xxe.forEach(t),mMo=i(x),P_=n(x,"LI",{});var zxe=s(P_);dfe=n(zxe,"STRONG",{});var h_t=s(dfe);gMo=r(h_t,"layoutlmv2"),h_t.forEach(t),hMo=r(zxe," \u2014 "),Hj=n(zxe,"A",{href:!0});var p_t=s(Hj);pMo=r(p_t,"LayoutLMv2Model"),p_t.forEach(t),_Mo=r(zxe," (LayoutLMv2 model)"),zxe.forEach(t),uMo=i(x),B_=n(x,"LI",{});var Qxe=s(B_);cfe=n(Qxe,"STRONG",{});var __t=s(cfe);bMo=r(__t,"layoutlmv3"),__t.forEach(t),vMo=r(Qxe," \u2014 "),Uj=n(Qxe,"A",{href:!0});var u_t=s(Uj);FMo=r(u_t,"LayoutLMv3Model"),u_t.forEach(t),TMo=r(Qxe," (LayoutLMv3 model)"),Qxe.forEach(t),MMo=i(x),N_=n(x,"LI",{});var Wxe=s(N_);ffe=n(Wxe,"STRONG",{});var b_t=s(ffe);EMo=r(b_t,"led"),b_t.forEach(t),CMo=r(Wxe," \u2014 "),Jj=n(Wxe,"A",{href:!0});var v_t=s(Jj);wMo=r(v_t,"LEDModel"),v_t.forEach(t),AMo=r(Wxe," (LED model)"),Wxe.forEach(t),LMo=i(x),I_=n(x,"LI",{});var Hxe=s(I_);mfe=n(Hxe,"STRONG",{});var F_t=s(mfe);yMo=r(F_t,"levit"),F_t.forEach(t),xMo=r(Hxe," \u2014 "),Yj=n(Hxe,"A",{href:!0});var T_t=s(Yj);$Mo=r(T_t,"LevitModel"),T_t.forEach(t),kMo=r(Hxe," (LeViT model)"),Hxe.forEach(t),SMo=i(x),q_=n(x,"LI",{});var Uxe=s(q_);gfe=n(Uxe,"STRONG",{});var M_t=s(gfe);RMo=r(M_t,"longformer"),M_t.forEach(t),PMo=r(Uxe," \u2014 "),Kj=n(Uxe,"A",{href:!0});var E_t=s(Kj);BMo=r(E_t,"LongformerModel"),E_t.forEach(t),NMo=r(Uxe," (Longformer model)"),Uxe.forEach(t),IMo=i(x),j_=n(x,"LI",{});var Jxe=s(j_);hfe=n(Jxe,"STRONG",{});var C_t=s(hfe);qMo=r(C_t,"longt5"),C_t.forEach(t),jMo=r(Jxe," \u2014 "),Zj=n(Jxe,"A",{href:!0});var w_t=s(Zj);DMo=r(w_t,"LongT5Model"),w_t.forEach(t),GMo=r(Jxe," (LongT5 model)"),Jxe.forEach(t),OMo=i(x),D_=n(x,"LI",{});var Yxe=s(D_);pfe=n(Yxe,"STRONG",{});var A_t=s(pfe);VMo=r(A_t,"luke"),A_t.forEach(t),XMo=r(Yxe," \u2014 "),eD=n(Yxe,"A",{href:!0});var L_t=s(eD);zMo=r(L_t,"LukeModel"),L_t.forEach(t),QMo=r(Yxe," (LUKE model)"),Yxe.forEach(t),WMo=i(x),G_=n(x,"LI",{});var Kxe=s(G_);_fe=n(Kxe,"STRONG",{});var y_t=s(_fe);HMo=r(y_t,"lxmert"),y_t.forEach(t),UMo=r(Kxe," \u2014 "),oD=n(Kxe,"A",{href:!0});var x_t=s(oD);JMo=r(x_t,"LxmertModel"),x_t.forEach(t),YMo=r(Kxe," (LXMERT model)"),Kxe.forEach(t),KMo=i(x),O_=n(x,"LI",{});var Zxe=s(O_);ufe=n(Zxe,"STRONG",{});var $_t=s(ufe);ZMo=r($_t,"m2m_100"),$_t.forEach(t),e4o=r(Zxe," \u2014 "),rD=n(Zxe,"A",{href:!0});var k_t=s(rD);o4o=r(k_t,"M2M100Model"),k_t.forEach(t),r4o=r(Zxe," (M2M100 model)"),Zxe.forEach(t),t4o=i(x),V_=n(x,"LI",{});var e$e=s(V_);bfe=n(e$e,"STRONG",{});var S_t=s(bfe);a4o=r(S_t,"marian"),S_t.forEach(t),n4o=r(e$e," \u2014 "),tD=n(e$e,"A",{href:!0});var R_t=s(tD);s4o=r(R_t,"MarianModel"),R_t.forEach(t),l4o=r(e$e," (Marian model)"),e$e.forEach(t),i4o=i(x),X_=n(x,"LI",{});var o$e=s(X_);vfe=n(o$e,"STRONG",{});var P_t=s(vfe);d4o=r(P_t,"maskformer"),P_t.forEach(t),c4o=r(o$e," \u2014 "),aD=n(o$e,"A",{href:!0});var B_t=s(aD);f4o=r(B_t,"MaskFormerModel"),B_t.forEach(t),m4o=r(o$e," (MaskFormer model)"),o$e.forEach(t),g4o=i(x),z_=n(x,"LI",{});var r$e=s(z_);Ffe=n(r$e,"STRONG",{});var N_t=s(Ffe);h4o=r(N_t,"mbart"),N_t.forEach(t),p4o=r(r$e," \u2014 "),nD=n(r$e,"A",{href:!0});var I_t=s(nD);_4o=r(I_t,"MBartModel"),I_t.forEach(t),u4o=r(r$e," (mBART model)"),r$e.forEach(t),b4o=i(x),Q_=n(x,"LI",{});var t$e=s(Q_);Tfe=n(t$e,"STRONG",{});var q_t=s(Tfe);v4o=r(q_t,"mctct"),q_t.forEach(t),F4o=r(t$e," \u2014 "),sD=n(t$e,"A",{href:!0});var j_t=s(sD);T4o=r(j_t,"MCTCTModel"),j_t.forEach(t),M4o=r(t$e," (M-CTC-T model)"),t$e.forEach(t),E4o=i(x),W_=n(x,"LI",{});var a$e=s(W_);Mfe=n(a$e,"STRONG",{});var D_t=s(Mfe);C4o=r(D_t,"megatron-bert"),D_t.forEach(t),w4o=r(a$e," \u2014 "),lD=n(a$e,"A",{href:!0});var G_t=s(lD);A4o=r(G_t,"MegatronBertModel"),G_t.forEach(t),L4o=r(a$e," (Megatron-BERT model)"),a$e.forEach(t),y4o=i(x),H_=n(x,"LI",{});var n$e=s(H_);Efe=n(n$e,"STRONG",{});var O_t=s(Efe);x4o=r(O_t,"mobilebert"),O_t.forEach(t),$4o=r(n$e," \u2014 "),iD=n(n$e,"A",{href:!0});var V_t=s(iD);k4o=r(V_t,"MobileBertModel"),V_t.forEach(t),S4o=r(n$e," (MobileBERT model)"),n$e.forEach(t),R4o=i(x),U_=n(x,"LI",{});var s$e=s(U_);Cfe=n(s$e,"STRONG",{});var X_t=s(Cfe);P4o=r(X_t,"mobilevit"),X_t.forEach(t),B4o=r(s$e," \u2014 "),dD=n(s$e,"A",{href:!0});var z_t=s(dD);N4o=r(z_t,"MobileViTModel"),z_t.forEach(t),I4o=r(s$e," (MobileViT model)"),s$e.forEach(t),q4o=i(x),J_=n(x,"LI",{});var l$e=s(J_);wfe=n(l$e,"STRONG",{});var Q_t=s(wfe);j4o=r(Q_t,"mpnet"),Q_t.forEach(t),D4o=r(l$e," \u2014 "),cD=n(l$e,"A",{href:!0});var W_t=s(cD);G4o=r(W_t,"MPNetModel"),W_t.forEach(t),O4o=r(l$e," (MPNet model)"),l$e.forEach(t),V4o=i(x),Y_=n(x,"LI",{});var i$e=s(Y_);Afe=n(i$e,"STRONG",{});var H_t=s(Afe);X4o=r(H_t,"mt5"),H_t.forEach(t),z4o=r(i$e," \u2014 "),fD=n(i$e,"A",{href:!0});var U_t=s(fD);Q4o=r(U_t,"MT5Model"),U_t.forEach(t),W4o=r(i$e," (MT5 model)"),i$e.forEach(t),H4o=i(x),K_=n(x,"LI",{});var d$e=s(K_);Lfe=n(d$e,"STRONG",{});var J_t=s(Lfe);U4o=r(J_t,"mvp"),J_t.forEach(t),J4o=r(d$e," \u2014 "),mD=n(d$e,"A",{href:!0});var Y_t=s(mD);Y4o=r(Y_t,"MvpModel"),Y_t.forEach(t),K4o=r(d$e," (MVP model)"),d$e.forEach(t),Z4o=i(x),Z_=n(x,"LI",{});var c$e=s(Z_);yfe=n(c$e,"STRONG",{});var K_t=s(yfe);eEo=r(K_t,"nezha"),K_t.forEach(t),oEo=r(c$e," \u2014 "),gD=n(c$e,"A",{href:!0});var Z_t=s(gD);rEo=r(Z_t,"NezhaModel"),Z_t.forEach(t),tEo=r(c$e," (Nezha model)"),c$e.forEach(t),aEo=i(x),eu=n(x,"LI",{});var f$e=s(eu);xfe=n(f$e,"STRONG",{});var eut=s(xfe);nEo=r(eut,"nllb"),eut.forEach(t),sEo=r(f$e," \u2014 "),hD=n(f$e,"A",{href:!0});var out=s(hD);lEo=r(out,"M2M100Model"),out.forEach(t),iEo=r(f$e," (NLLB model)"),f$e.forEach(t),dEo=i(x),ou=n(x,"LI",{});var m$e=s(ou);$fe=n(m$e,"STRONG",{});var rut=s($fe);cEo=r(rut,"nystromformer"),rut.forEach(t),fEo=r(m$e," \u2014 "),pD=n(m$e,"A",{href:!0});var tut=s(pD);mEo=r(tut,"NystromformerModel"),tut.forEach(t),gEo=r(m$e," (Nystr\xF6mformer model)"),m$e.forEach(t),hEo=i(x),ru=n(x,"LI",{});var g$e=s(ru);kfe=n(g$e,"STRONG",{});var aut=s(kfe);pEo=r(aut,"openai-gpt"),aut.forEach(t),_Eo=r(g$e," \u2014 "),_D=n(g$e,"A",{href:!0});var nut=s(_D);uEo=r(nut,"OpenAIGPTModel"),nut.forEach(t),bEo=r(g$e," (OpenAI GPT model)"),g$e.forEach(t),vEo=i(x),tu=n(x,"LI",{});var h$e=s(tu);Sfe=n(h$e,"STRONG",{});var sut=s(Sfe);FEo=r(sut,"opt"),sut.forEach(t),TEo=r(h$e," \u2014 "),uD=n(h$e,"A",{href:!0});var lut=s(uD);MEo=r(lut,"OPTModel"),lut.forEach(t),EEo=r(h$e," (OPT model)"),h$e.forEach(t),CEo=i(x),au=n(x,"LI",{});var p$e=s(au);Rfe=n(p$e,"STRONG",{});var iut=s(Rfe);wEo=r(iut,"pegasus"),iut.forEach(t),AEo=r(p$e," \u2014 "),bD=n(p$e,"A",{href:!0});var dut=s(bD);LEo=r(dut,"PegasusModel"),dut.forEach(t),yEo=r(p$e," (Pegasus model)"),p$e.forEach(t),xEo=i(x),nu=n(x,"LI",{});var _$e=s(nu);Pfe=n(_$e,"STRONG",{});var cut=s(Pfe);$Eo=r(cut,"perceiver"),cut.forEach(t),kEo=r(_$e," \u2014 "),vD=n(_$e,"A",{href:!0});var fut=s(vD);SEo=r(fut,"PerceiverModel"),fut.forEach(t),REo=r(_$e," (Perceiver model)"),_$e.forEach(t),PEo=i(x),su=n(x,"LI",{});var u$e=s(su);Bfe=n(u$e,"STRONG",{});var mut=s(Bfe);BEo=r(mut,"plbart"),mut.forEach(t),NEo=r(u$e," \u2014 "),FD=n(u$e,"A",{href:!0});var gut=s(FD);IEo=r(gut,"PLBartModel"),gut.forEach(t),qEo=r(u$e," (PLBart model)"),u$e.forEach(t),jEo=i(x),lu=n(x,"LI",{});var b$e=s(lu);Nfe=n(b$e,"STRONG",{});var hut=s(Nfe);DEo=r(hut,"poolformer"),hut.forEach(t),GEo=r(b$e," \u2014 "),TD=n(b$e,"A",{href:!0});var put=s(TD);OEo=r(put,"PoolFormerModel"),put.forEach(t),VEo=r(b$e," (PoolFormer model)"),b$e.forEach(t),XEo=i(x),iu=n(x,"LI",{});var v$e=s(iu);Ife=n(v$e,"STRONG",{});var _ut=s(Ife);zEo=r(_ut,"prophetnet"),_ut.forEach(t),QEo=r(v$e," \u2014 "),MD=n(v$e,"A",{href:!0});var uut=s(MD);WEo=r(uut,"ProphetNetModel"),uut.forEach(t),HEo=r(v$e," (ProphetNet model)"),v$e.forEach(t),UEo=i(x),du=n(x,"LI",{});var F$e=s(du);qfe=n(F$e,"STRONG",{});var but=s(qfe);JEo=r(but,"qdqbert"),but.forEach(t),YEo=r(F$e," \u2014 "),ED=n(F$e,"A",{href:!0});var vut=s(ED);KEo=r(vut,"QDQBertModel"),vut.forEach(t),ZEo=r(F$e," (QDQBert model)"),F$e.forEach(t),eCo=i(x),cu=n(x,"LI",{});var T$e=s(cu);jfe=n(T$e,"STRONG",{});var Fut=s(jfe);oCo=r(Fut,"reformer"),Fut.forEach(t),rCo=r(T$e," \u2014 "),CD=n(T$e,"A",{href:!0});var Tut=s(CD);tCo=r(Tut,"ReformerModel"),Tut.forEach(t),aCo=r(T$e," (Reformer model)"),T$e.forEach(t),nCo=i(x),fu=n(x,"LI",{});var M$e=s(fu);Dfe=n(M$e,"STRONG",{});var Mut=s(Dfe);sCo=r(Mut,"regnet"),Mut.forEach(t),lCo=r(M$e," \u2014 "),wD=n(M$e,"A",{href:!0});var Eut=s(wD);iCo=r(Eut,"RegNetModel"),Eut.forEach(t),dCo=r(M$e," (RegNet model)"),M$e.forEach(t),cCo=i(x),mu=n(x,"LI",{});var E$e=s(mu);Gfe=n(E$e,"STRONG",{});var Cut=s(Gfe);fCo=r(Cut,"rembert"),Cut.forEach(t),mCo=r(E$e," \u2014 "),AD=n(E$e,"A",{href:!0});var wut=s(AD);gCo=r(wut,"RemBertModel"),wut.forEach(t),hCo=r(E$e," (RemBERT model)"),E$e.forEach(t),pCo=i(x),gu=n(x,"LI",{});var C$e=s(gu);Ofe=n(C$e,"STRONG",{});var Aut=s(Ofe);_Co=r(Aut,"resnet"),Aut.forEach(t),uCo=r(C$e," \u2014 "),LD=n(C$e,"A",{href:!0});var Lut=s(LD);bCo=r(Lut,"ResNetModel"),Lut.forEach(t),vCo=r(C$e," (ResNet model)"),C$e.forEach(t),FCo=i(x),hu=n(x,"LI",{});var w$e=s(hu);Vfe=n(w$e,"STRONG",{});var yut=s(Vfe);TCo=r(yut,"retribert"),yut.forEach(t),MCo=r(w$e," \u2014 "),yD=n(w$e,"A",{href:!0});var xut=s(yD);ECo=r(xut,"RetriBertModel"),xut.forEach(t),CCo=r(w$e," (RetriBERT model)"),w$e.forEach(t),wCo=i(x),pu=n(x,"LI",{});var A$e=s(pu);Xfe=n(A$e,"STRONG",{});var $ut=s(Xfe);ACo=r($ut,"roberta"),$ut.forEach(t),LCo=r(A$e," \u2014 "),xD=n(A$e,"A",{href:!0});var kut=s(xD);yCo=r(kut,"RobertaModel"),kut.forEach(t),xCo=r(A$e," (RoBERTa model)"),A$e.forEach(t),$Co=i(x),_u=n(x,"LI",{});var L$e=s(_u);zfe=n(L$e,"STRONG",{});var Sut=s(zfe);kCo=r(Sut,"roformer"),Sut.forEach(t),SCo=r(L$e," \u2014 "),$D=n(L$e,"A",{href:!0});var Rut=s($D);RCo=r(Rut,"RoFormerModel"),Rut.forEach(t),PCo=r(L$e," (RoFormer model)"),L$e.forEach(t),BCo=i(x),uu=n(x,"LI",{});var y$e=s(uu);Qfe=n(y$e,"STRONG",{});var Put=s(Qfe);NCo=r(Put,"segformer"),Put.forEach(t),ICo=r(y$e," \u2014 "),kD=n(y$e,"A",{href:!0});var But=s(kD);qCo=r(But,"SegformerModel"),But.forEach(t),jCo=r(y$e," (SegFormer model)"),y$e.forEach(t),DCo=i(x),bu=n(x,"LI",{});var x$e=s(bu);Wfe=n(x$e,"STRONG",{});var Nut=s(Wfe);GCo=r(Nut,"sew"),Nut.forEach(t),OCo=r(x$e," \u2014 "),SD=n(x$e,"A",{href:!0});var Iut=s(SD);VCo=r(Iut,"SEWModel"),Iut.forEach(t),XCo=r(x$e," (SEW model)"),x$e.forEach(t),zCo=i(x),vu=n(x,"LI",{});var $$e=s(vu);Hfe=n($$e,"STRONG",{});var qut=s(Hfe);QCo=r(qut,"sew-d"),qut.forEach(t),WCo=r($$e," \u2014 "),RD=n($$e,"A",{href:!0});var jut=s(RD);HCo=r(jut,"SEWDModel"),jut.forEach(t),UCo=r($$e," (SEW-D model)"),$$e.forEach(t),JCo=i(x),Fu=n(x,"LI",{});var k$e=s(Fu);Ufe=n(k$e,"STRONG",{});var Dut=s(Ufe);YCo=r(Dut,"speech_to_text"),Dut.forEach(t),KCo=r(k$e," \u2014 "),PD=n(k$e,"A",{href:!0});var Gut=s(PD);ZCo=r(Gut,"Speech2TextModel"),Gut.forEach(t),e3o=r(k$e," (Speech2Text model)"),k$e.forEach(t),o3o=i(x),Tu=n(x,"LI",{});var S$e=s(Tu);Jfe=n(S$e,"STRONG",{});var Out=s(Jfe);r3o=r(Out,"splinter"),Out.forEach(t),t3o=r(S$e," \u2014 "),BD=n(S$e,"A",{href:!0});var Vut=s(BD);a3o=r(Vut,"SplinterModel"),Vut.forEach(t),n3o=r(S$e," (Splinter model)"),S$e.forEach(t),s3o=i(x),Mu=n(x,"LI",{});var R$e=s(Mu);Yfe=n(R$e,"STRONG",{});var Xut=s(Yfe);l3o=r(Xut,"squeezebert"),Xut.forEach(t),i3o=r(R$e," \u2014 "),ND=n(R$e,"A",{href:!0});var zut=s(ND);d3o=r(zut,"SqueezeBertModel"),zut.forEach(t),c3o=r(R$e," (SqueezeBERT model)"),R$e.forEach(t),f3o=i(x),Eu=n(x,"LI",{});var P$e=s(Eu);Kfe=n(P$e,"STRONG",{});var Qut=s(Kfe);m3o=r(Qut,"swin"),Qut.forEach(t),g3o=r(P$e," \u2014 "),ID=n(P$e,"A",{href:!0});var Wut=s(ID);h3o=r(Wut,"SwinModel"),Wut.forEach(t),p3o=r(P$e," (Swin Transformer model)"),P$e.forEach(t),_3o=i(x),Cu=n(x,"LI",{});var B$e=s(Cu);Zfe=n(B$e,"STRONG",{});var Hut=s(Zfe);u3o=r(Hut,"t5"),Hut.forEach(t),b3o=r(B$e," \u2014 "),qD=n(B$e,"A",{href:!0});var Uut=s(qD);v3o=r(Uut,"T5Model"),Uut.forEach(t),F3o=r(B$e," (T5 model)"),B$e.forEach(t),T3o=i(x),wu=n(x,"LI",{});var N$e=s(wu);eme=n(N$e,"STRONG",{});var Jut=s(eme);M3o=r(Jut,"tapas"),Jut.forEach(t),E3o=r(N$e," \u2014 "),jD=n(N$e,"A",{href:!0});var Yut=s(jD);C3o=r(Yut,"TapasModel"),Yut.forEach(t),w3o=r(N$e," (TAPAS model)"),N$e.forEach(t),A3o=i(x),Au=n(x,"LI",{});var I$e=s(Au);ome=n(I$e,"STRONG",{});var Kut=s(ome);L3o=r(Kut,"trajectory_transformer"),Kut.forEach(t),y3o=r(I$e," \u2014 "),DD=n(I$e,"A",{href:!0});var Zut=s(DD);x3o=r(Zut,"TrajectoryTransformerModel"),Zut.forEach(t),$3o=r(I$e," (Trajectory Transformer model)"),I$e.forEach(t),k3o=i(x),Lu=n(x,"LI",{});var q$e=s(Lu);rme=n(q$e,"STRONG",{});var e1t=s(rme);S3o=r(e1t,"transfo-xl"),e1t.forEach(t),R3o=r(q$e," \u2014 "),GD=n(q$e,"A",{href:!0});var o1t=s(GD);P3o=r(o1t,"TransfoXLModel"),o1t.forEach(t),B3o=r(q$e," (Transformer-XL model)"),q$e.forEach(t),N3o=i(x),yu=n(x,"LI",{});var j$e=s(yu);tme=n(j$e,"STRONG",{});var r1t=s(tme);I3o=r(r1t,"unispeech"),r1t.forEach(t),q3o=r(j$e," \u2014 "),OD=n(j$e,"A",{href:!0});var t1t=s(OD);j3o=r(t1t,"UniSpeechModel"),t1t.forEach(t),D3o=r(j$e," (UniSpeech model)"),j$e.forEach(t),G3o=i(x),xu=n(x,"LI",{});var D$e=s(xu);ame=n(D$e,"STRONG",{});var a1t=s(ame);O3o=r(a1t,"unispeech-sat"),a1t.forEach(t),V3o=r(D$e," \u2014 "),VD=n(D$e,"A",{href:!0});var n1t=s(VD);X3o=r(n1t,"UniSpeechSatModel"),n1t.forEach(t),z3o=r(D$e," (UniSpeechSat model)"),D$e.forEach(t),Q3o=i(x),$u=n(x,"LI",{});var G$e=s($u);nme=n(G$e,"STRONG",{});var s1t=s(nme);W3o=r(s1t,"van"),s1t.forEach(t),H3o=r(G$e," \u2014 "),XD=n(G$e,"A",{href:!0});var l1t=s(XD);U3o=r(l1t,"VanModel"),l1t.forEach(t),J3o=r(G$e," (VAN model)"),G$e.forEach(t),Y3o=i(x),ku=n(x,"LI",{});var O$e=s(ku);sme=n(O$e,"STRONG",{});var i1t=s(sme);K3o=r(i1t,"vilt"),i1t.forEach(t),Z3o=r(O$e," \u2014 "),zD=n(O$e,"A",{href:!0});var d1t=s(zD);e5o=r(d1t,"ViltModel"),d1t.forEach(t),o5o=r(O$e," (ViLT model)"),O$e.forEach(t),r5o=i(x),Su=n(x,"LI",{});var V$e=s(Su);lme=n(V$e,"STRONG",{});var c1t=s(lme);t5o=r(c1t,"vision-text-dual-encoder"),c1t.forEach(t),a5o=r(V$e," \u2014 "),QD=n(V$e,"A",{href:!0});var f1t=s(QD);n5o=r(f1t,"VisionTextDualEncoderModel"),f1t.forEach(t),s5o=r(V$e," (VisionTextDualEncoder model)"),V$e.forEach(t),l5o=i(x),Ru=n(x,"LI",{});var X$e=s(Ru);ime=n(X$e,"STRONG",{});var m1t=s(ime);i5o=r(m1t,"visual_bert"),m1t.forEach(t),d5o=r(X$e," \u2014 "),WD=n(X$e,"A",{href:!0});var g1t=s(WD);c5o=r(g1t,"VisualBertModel"),g1t.forEach(t),f5o=r(X$e," (VisualBERT model)"),X$e.forEach(t),m5o=i(x),Pu=n(x,"LI",{});var z$e=s(Pu);dme=n(z$e,"STRONG",{});var h1t=s(dme);g5o=r(h1t,"vit"),h1t.forEach(t),h5o=r(z$e," \u2014 "),HD=n(z$e,"A",{href:!0});var p1t=s(HD);p5o=r(p1t,"ViTModel"),p1t.forEach(t),_5o=r(z$e," (ViT model)"),z$e.forEach(t),u5o=i(x),Bu=n(x,"LI",{});var Q$e=s(Bu);cme=n(Q$e,"STRONG",{});var _1t=s(cme);b5o=r(_1t,"vit_mae"),_1t.forEach(t),v5o=r(Q$e," \u2014 "),UD=n(Q$e,"A",{href:!0});var u1t=s(UD);F5o=r(u1t,"ViTMAEModel"),u1t.forEach(t),T5o=r(Q$e," (ViTMAE model)"),Q$e.forEach(t),M5o=i(x),Nu=n(x,"LI",{});var W$e=s(Nu);fme=n(W$e,"STRONG",{});var b1t=s(fme);E5o=r(b1t,"wav2vec2"),b1t.forEach(t),C5o=r(W$e," \u2014 "),JD=n(W$e,"A",{href:!0});var v1t=s(JD);w5o=r(v1t,"Wav2Vec2Model"),v1t.forEach(t),A5o=r(W$e," (Wav2Vec2 model)"),W$e.forEach(t),L5o=i(x),Iu=n(x,"LI",{});var H$e=s(Iu);mme=n(H$e,"STRONG",{});var F1t=s(mme);y5o=r(F1t,"wav2vec2-conformer"),F1t.forEach(t),x5o=r(H$e," \u2014 "),YD=n(H$e,"A",{href:!0});var T1t=s(YD);$5o=r(T1t,"Wav2Vec2ConformerModel"),T1t.forEach(t),k5o=r(H$e," (Wav2Vec2-Conformer model)"),H$e.forEach(t),S5o=i(x),qu=n(x,"LI",{});var U$e=s(qu);gme=n(U$e,"STRONG",{});var M1t=s(gme);R5o=r(M1t,"wavlm"),M1t.forEach(t),P5o=r(U$e," \u2014 "),KD=n(U$e,"A",{href:!0});var E1t=s(KD);B5o=r(E1t,"WavLMModel"),E1t.forEach(t),N5o=r(U$e," (WavLM model)"),U$e.forEach(t),I5o=i(x),ju=n(x,"LI",{});var J$e=s(ju);hme=n(J$e,"STRONG",{});var C1t=s(hme);q5o=r(C1t,"xglm"),C1t.forEach(t),j5o=r(J$e," \u2014 "),ZD=n(J$e,"A",{href:!0});var w1t=s(ZD);D5o=r(w1t,"XGLMModel"),w1t.forEach(t),G5o=r(J$e," (XGLM model)"),J$e.forEach(t),O5o=i(x),Du=n(x,"LI",{});var Y$e=s(Du);pme=n(Y$e,"STRONG",{});var A1t=s(pme);V5o=r(A1t,"xlm"),A1t.forEach(t),X5o=r(Y$e," \u2014 "),eG=n(Y$e,"A",{href:!0});var L1t=s(eG);z5o=r(L1t,"XLMModel"),L1t.forEach(t),Q5o=r(Y$e," (XLM model)"),Y$e.forEach(t),W5o=i(x),Gu=n(x,"LI",{});var K$e=s(Gu);_me=n(K$e,"STRONG",{});var y1t=s(_me);H5o=r(y1t,"xlm-prophetnet"),y1t.forEach(t),U5o=r(K$e," \u2014 "),oG=n(K$e,"A",{href:!0});var x1t=s(oG);J5o=r(x1t,"XLMProphetNetModel"),x1t.forEach(t),Y5o=r(K$e," (XLM-ProphetNet model)"),K$e.forEach(t),K5o=i(x),Ou=n(x,"LI",{});var Z$e=s(Ou);ume=n(Z$e,"STRONG",{});var $1t=s(ume);Z5o=r($1t,"xlm-roberta"),$1t.forEach(t),ewo=r(Z$e," \u2014 "),rG=n(Z$e,"A",{href:!0});var k1t=s(rG);owo=r(k1t,"XLMRobertaModel"),k1t.forEach(t),rwo=r(Z$e," (XLM-RoBERTa model)"),Z$e.forEach(t),two=i(x),Vu=n(x,"LI",{});var eke=s(Vu);bme=n(eke,"STRONG",{});var S1t=s(bme);awo=r(S1t,"xlm-roberta-xl"),S1t.forEach(t),nwo=r(eke," \u2014 "),tG=n(eke,"A",{href:!0});var R1t=s(tG);swo=r(R1t,"XLMRobertaXLModel"),R1t.forEach(t),lwo=r(eke," (XLM-RoBERTa-XL model)"),eke.forEach(t),iwo=i(x),Xu=n(x,"LI",{});var oke=s(Xu);vme=n(oke,"STRONG",{});var P1t=s(vme);dwo=r(P1t,"xlnet"),P1t.forEach(t),cwo=r(oke," \u2014 "),aG=n(oke,"A",{href:!0});var B1t=s(aG);fwo=r(B1t,"XLNetModel"),B1t.forEach(t),mwo=r(oke," (XLNet model)"),oke.forEach(t),gwo=i(x),zu=n(x,"LI",{});var rke=s(zu);Fme=n(rke,"STRONG",{});var N1t=s(Fme);hwo=r(N1t,"yolos"),N1t.forEach(t),pwo=r(rke," \u2014 "),nG=n(rke,"A",{href:!0});var I1t=s(nG);_wo=r(I1t,"YolosModel"),I1t.forEach(t),uwo=r(rke," (YOLOS model)"),rke.forEach(t),bwo=i(x),Qu=n(x,"LI",{});var tke=s(Qu);Tme=n(tke,"STRONG",{});var q1t=s(Tme);vwo=r(q1t,"yoso"),q1t.forEach(t),Fwo=r(tke," \u2014 "),sG=n(tke,"A",{href:!0});var j1t=s(sG);Two=r(j1t,"YosoModel"),j1t.forEach(t),Mwo=r(tke," (YOSO model)"),tke.forEach(t),x.forEach(t),Ewo=i(la),Wu=n(la,"P",{});var ake=s(Wu);Cwo=r(ake,"The model is set in evaluation mode by default using "),Mme=n(ake,"CODE",{});var D1t=s(Mme);wwo=r(D1t,"model.eval()"),D1t.forEach(t),Awo=r(ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eme=n(ake,"CODE",{});var G1t=s(Eme);Lwo=r(G1t,"model.train()"),G1t.forEach(t),ake.forEach(t),ywo=i(la),T(Hu.$$.fragment,la),la.forEach(t),tl.forEach(t),wXe=i(f),zi=n(f,"H2",{class:!0});var kQe=s(zi);Uu=n(kQe,"A",{id:!0,class:!0,href:!0});var O1t=s(Uu);Cme=n(O1t,"SPAN",{});var V1t=s(Cme);T(q6.$$.fragment,V1t),V1t.forEach(t),O1t.forEach(t),xwo=i(kQe),wme=n(kQe,"SPAN",{});var X1t=s(wme);$wo=r(X1t,"AutoModelForPreTraining"),X1t.forEach(t),kQe.forEach(t),AXe=i(f),ko=n(f,"DIV",{class:!0});var al=s(ko);T(j6.$$.fragment,al),kwo=i(al),Qi=n(al,"P",{});var Gre=s(Qi);Swo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lG=n(Gre,"A",{href:!0});var z1t=s(lG);Rwo=r(z1t,"from_pretrained()"),z1t.forEach(t),Pwo=r(Gre," class method or the "),iG=n(Gre,"A",{href:!0});var Q1t=s(iG);Bwo=r(Q1t,"from_config()"),Q1t.forEach(t),Nwo=r(Gre,` class
method.`),Gre.forEach(t),Iwo=i(al),D6=n(al,"P",{});var SQe=s(D6);qwo=r(SQe,"This class cannot be instantiated directly using "),Ame=n(SQe,"CODE",{});var W1t=s(Ame);jwo=r(W1t,"__init__()"),W1t.forEach(t),Dwo=r(SQe," (throws an error)."),SQe.forEach(t),Gwo=i(al),dt=n(al,"DIV",{class:!0});var gw=s(dt);T(G6.$$.fragment,gw),Owo=i(gw),Lme=n(gw,"P",{});var H1t=s(Lme);Vwo=r(H1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),H1t.forEach(t),Xwo=i(gw),Wi=n(gw,"P",{});var Ore=s(Wi);zwo=r(Ore,`Note:
Loading a model from its configuration file does `),yme=n(Ore,"STRONG",{});var U1t=s(yme);Qwo=r(U1t,"not"),U1t.forEach(t),Wwo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),dG=n(Ore,"A",{href:!0});var J1t=s(dG);Hwo=r(J1t,"from_pretrained()"),J1t.forEach(t),Uwo=r(Ore," to load the model weights."),Ore.forEach(t),Jwo=i(gw),T(Ju.$$.fragment,gw),gw.forEach(t),Ywo=i(al),Ke=n(al,"DIV",{class:!0});var ia=s(Ke);T(O6.$$.fragment,ia),Kwo=i(ia),xme=n(ia,"P",{});var Y1t=s(xme);Zwo=r(Y1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Y1t.forEach(t),eAo=i(ia),Ia=n(ia,"P",{});var hw=s(Ia);oAo=r(hw,"The model class to instantiate is selected based on the "),$me=n(hw,"CODE",{});var K1t=s($me);rAo=r(K1t,"model_type"),K1t.forEach(t),tAo=r(hw,` property of the config object (either
passed as an argument or loaded from `),kme=n(hw,"CODE",{});var Z1t=s(kme);aAo=r(Z1t,"pretrained_model_name_or_path"),Z1t.forEach(t),nAo=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=n(hw,"CODE",{});var e2t=s(Sme);sAo=r(e2t,"pretrained_model_name_or_path"),e2t.forEach(t),lAo=r(hw,":"),hw.forEach(t),iAo=i(ia),G=n(ia,"UL",{});var O=s(G);Yu=n(O,"LI",{});var nke=s(Yu);Rme=n(nke,"STRONG",{});var o2t=s(Rme);dAo=r(o2t,"albert"),o2t.forEach(t),cAo=r(nke," \u2014 "),cG=n(nke,"A",{href:!0});var r2t=s(cG);fAo=r(r2t,"AlbertForPreTraining"),r2t.forEach(t),mAo=r(nke," (ALBERT model)"),nke.forEach(t),gAo=i(O),Ku=n(O,"LI",{});var ske=s(Ku);Pme=n(ske,"STRONG",{});var t2t=s(Pme);hAo=r(t2t,"bart"),t2t.forEach(t),pAo=r(ske," \u2014 "),fG=n(ske,"A",{href:!0});var a2t=s(fG);_Ao=r(a2t,"BartForConditionalGeneration"),a2t.forEach(t),uAo=r(ske," (BART model)"),ske.forEach(t),bAo=i(O),Zu=n(O,"LI",{});var lke=s(Zu);Bme=n(lke,"STRONG",{});var n2t=s(Bme);vAo=r(n2t,"bert"),n2t.forEach(t),FAo=r(lke," \u2014 "),mG=n(lke,"A",{href:!0});var s2t=s(mG);TAo=r(s2t,"BertForPreTraining"),s2t.forEach(t),MAo=r(lke," (BERT model)"),lke.forEach(t),EAo=i(O),e1=n(O,"LI",{});var ike=s(e1);Nme=n(ike,"STRONG",{});var l2t=s(Nme);CAo=r(l2t,"big_bird"),l2t.forEach(t),wAo=r(ike," \u2014 "),gG=n(ike,"A",{href:!0});var i2t=s(gG);AAo=r(i2t,"BigBirdForPreTraining"),i2t.forEach(t),LAo=r(ike," (BigBird model)"),ike.forEach(t),yAo=i(O),o1=n(O,"LI",{});var dke=s(o1);Ime=n(dke,"STRONG",{});var d2t=s(Ime);xAo=r(d2t,"bloom"),d2t.forEach(t),$Ao=r(dke," \u2014 "),hG=n(dke,"A",{href:!0});var c2t=s(hG);kAo=r(c2t,"BloomForCausalLM"),c2t.forEach(t),SAo=r(dke," (BLOOM model)"),dke.forEach(t),RAo=i(O),r1=n(O,"LI",{});var cke=s(r1);qme=n(cke,"STRONG",{});var f2t=s(qme);PAo=r(f2t,"camembert"),f2t.forEach(t),BAo=r(cke," \u2014 "),pG=n(cke,"A",{href:!0});var m2t=s(pG);NAo=r(m2t,"CamembertForMaskedLM"),m2t.forEach(t),IAo=r(cke," (CamemBERT model)"),cke.forEach(t),qAo=i(O),t1=n(O,"LI",{});var fke=s(t1);jme=n(fke,"STRONG",{});var g2t=s(jme);jAo=r(g2t,"ctrl"),g2t.forEach(t),DAo=r(fke," \u2014 "),_G=n(fke,"A",{href:!0});var h2t=s(_G);GAo=r(h2t,"CTRLLMHeadModel"),h2t.forEach(t),OAo=r(fke," (CTRL model)"),fke.forEach(t),VAo=i(O),a1=n(O,"LI",{});var mke=s(a1);Dme=n(mke,"STRONG",{});var p2t=s(Dme);XAo=r(p2t,"data2vec-text"),p2t.forEach(t),zAo=r(mke," \u2014 "),uG=n(mke,"A",{href:!0});var _2t=s(uG);QAo=r(_2t,"Data2VecTextForMaskedLM"),_2t.forEach(t),WAo=r(mke," (Data2VecText model)"),mke.forEach(t),HAo=i(O),n1=n(O,"LI",{});var gke=s(n1);Gme=n(gke,"STRONG",{});var u2t=s(Gme);UAo=r(u2t,"deberta"),u2t.forEach(t),JAo=r(gke," \u2014 "),bG=n(gke,"A",{href:!0});var b2t=s(bG);YAo=r(b2t,"DebertaForMaskedLM"),b2t.forEach(t),KAo=r(gke," (DeBERTa model)"),gke.forEach(t),ZAo=i(O),s1=n(O,"LI",{});var hke=s(s1);Ome=n(hke,"STRONG",{});var v2t=s(Ome);e6o=r(v2t,"deberta-v2"),v2t.forEach(t),o6o=r(hke," \u2014 "),vG=n(hke,"A",{href:!0});var F2t=s(vG);r6o=r(F2t,"DebertaV2ForMaskedLM"),F2t.forEach(t),t6o=r(hke," (DeBERTa-v2 model)"),hke.forEach(t),a6o=i(O),l1=n(O,"LI",{});var pke=s(l1);Vme=n(pke,"STRONG",{});var T2t=s(Vme);n6o=r(T2t,"distilbert"),T2t.forEach(t),s6o=r(pke," \u2014 "),FG=n(pke,"A",{href:!0});var M2t=s(FG);l6o=r(M2t,"DistilBertForMaskedLM"),M2t.forEach(t),i6o=r(pke," (DistilBERT model)"),pke.forEach(t),d6o=i(O),i1=n(O,"LI",{});var _ke=s(i1);Xme=n(_ke,"STRONG",{});var E2t=s(Xme);c6o=r(E2t,"electra"),E2t.forEach(t),f6o=r(_ke," \u2014 "),TG=n(_ke,"A",{href:!0});var C2t=s(TG);m6o=r(C2t,"ElectraForPreTraining"),C2t.forEach(t),g6o=r(_ke," (ELECTRA model)"),_ke.forEach(t),h6o=i(O),d1=n(O,"LI",{});var uke=s(d1);zme=n(uke,"STRONG",{});var w2t=s(zme);p6o=r(w2t,"flaubert"),w2t.forEach(t),_6o=r(uke," \u2014 "),MG=n(uke,"A",{href:!0});var A2t=s(MG);u6o=r(A2t,"FlaubertWithLMHeadModel"),A2t.forEach(t),b6o=r(uke," (FlauBERT model)"),uke.forEach(t),v6o=i(O),c1=n(O,"LI",{});var bke=s(c1);Qme=n(bke,"STRONG",{});var L2t=s(Qme);F6o=r(L2t,"flava"),L2t.forEach(t),T6o=r(bke," \u2014 "),EG=n(bke,"A",{href:!0});var y2t=s(EG);M6o=r(y2t,"FlavaForPreTraining"),y2t.forEach(t),E6o=r(bke," (FLAVA model)"),bke.forEach(t),C6o=i(O),f1=n(O,"LI",{});var vke=s(f1);Wme=n(vke,"STRONG",{});var x2t=s(Wme);w6o=r(x2t,"fnet"),x2t.forEach(t),A6o=r(vke," \u2014 "),CG=n(vke,"A",{href:!0});var $2t=s(CG);L6o=r($2t,"FNetForPreTraining"),$2t.forEach(t),y6o=r(vke," (FNet model)"),vke.forEach(t),x6o=i(O),m1=n(O,"LI",{});var Fke=s(m1);Hme=n(Fke,"STRONG",{});var k2t=s(Hme);$6o=r(k2t,"fsmt"),k2t.forEach(t),k6o=r(Fke," \u2014 "),wG=n(Fke,"A",{href:!0});var S2t=s(wG);S6o=r(S2t,"FSMTForConditionalGeneration"),S2t.forEach(t),R6o=r(Fke," (FairSeq Machine-Translation model)"),Fke.forEach(t),P6o=i(O),g1=n(O,"LI",{});var Tke=s(g1);Ume=n(Tke,"STRONG",{});var R2t=s(Ume);B6o=r(R2t,"funnel"),R2t.forEach(t),N6o=r(Tke," \u2014 "),AG=n(Tke,"A",{href:!0});var P2t=s(AG);I6o=r(P2t,"FunnelForPreTraining"),P2t.forEach(t),q6o=r(Tke," (Funnel Transformer model)"),Tke.forEach(t),j6o=i(O),h1=n(O,"LI",{});var Mke=s(h1);Jme=n(Mke,"STRONG",{});var B2t=s(Jme);D6o=r(B2t,"gpt2"),B2t.forEach(t),G6o=r(Mke," \u2014 "),LG=n(Mke,"A",{href:!0});var N2t=s(LG);O6o=r(N2t,"GPT2LMHeadModel"),N2t.forEach(t),V6o=r(Mke," (OpenAI GPT-2 model)"),Mke.forEach(t),X6o=i(O),p1=n(O,"LI",{});var Eke=s(p1);Yme=n(Eke,"STRONG",{});var I2t=s(Yme);z6o=r(I2t,"ibert"),I2t.forEach(t),Q6o=r(Eke," \u2014 "),yG=n(Eke,"A",{href:!0});var q2t=s(yG);W6o=r(q2t,"IBertForMaskedLM"),q2t.forEach(t),H6o=r(Eke," (I-BERT model)"),Eke.forEach(t),U6o=i(O),_1=n(O,"LI",{});var Cke=s(_1);Kme=n(Cke,"STRONG",{});var j2t=s(Kme);J6o=r(j2t,"layoutlm"),j2t.forEach(t),Y6o=r(Cke," \u2014 "),xG=n(Cke,"A",{href:!0});var D2t=s(xG);K6o=r(D2t,"LayoutLMForMaskedLM"),D2t.forEach(t),Z6o=r(Cke," (LayoutLM model)"),Cke.forEach(t),eLo=i(O),u1=n(O,"LI",{});var wke=s(u1);Zme=n(wke,"STRONG",{});var G2t=s(Zme);oLo=r(G2t,"longformer"),G2t.forEach(t),rLo=r(wke," \u2014 "),$G=n(wke,"A",{href:!0});var O2t=s($G);tLo=r(O2t,"LongformerForMaskedLM"),O2t.forEach(t),aLo=r(wke," (Longformer model)"),wke.forEach(t),nLo=i(O),b1=n(O,"LI",{});var Ake=s(b1);ege=n(Ake,"STRONG",{});var V2t=s(ege);sLo=r(V2t,"lxmert"),V2t.forEach(t),lLo=r(Ake," \u2014 "),kG=n(Ake,"A",{href:!0});var X2t=s(kG);iLo=r(X2t,"LxmertForPreTraining"),X2t.forEach(t),dLo=r(Ake," (LXMERT model)"),Ake.forEach(t),cLo=i(O),v1=n(O,"LI",{});var Lke=s(v1);oge=n(Lke,"STRONG",{});var z2t=s(oge);fLo=r(z2t,"megatron-bert"),z2t.forEach(t),mLo=r(Lke," \u2014 "),SG=n(Lke,"A",{href:!0});var Q2t=s(SG);gLo=r(Q2t,"MegatronBertForPreTraining"),Q2t.forEach(t),hLo=r(Lke," (Megatron-BERT model)"),Lke.forEach(t),pLo=i(O),F1=n(O,"LI",{});var yke=s(F1);rge=n(yke,"STRONG",{});var W2t=s(rge);_Lo=r(W2t,"mobilebert"),W2t.forEach(t),uLo=r(yke," \u2014 "),RG=n(yke,"A",{href:!0});var H2t=s(RG);bLo=r(H2t,"MobileBertForPreTraining"),H2t.forEach(t),vLo=r(yke," (MobileBERT model)"),yke.forEach(t),FLo=i(O),T1=n(O,"LI",{});var xke=s(T1);tge=n(xke,"STRONG",{});var U2t=s(tge);TLo=r(U2t,"mpnet"),U2t.forEach(t),MLo=r(xke," \u2014 "),PG=n(xke,"A",{href:!0});var J2t=s(PG);ELo=r(J2t,"MPNetForMaskedLM"),J2t.forEach(t),CLo=r(xke," (MPNet model)"),xke.forEach(t),wLo=i(O),M1=n(O,"LI",{});var $ke=s(M1);age=n($ke,"STRONG",{});var Y2t=s(age);ALo=r(Y2t,"mvp"),Y2t.forEach(t),LLo=r($ke," \u2014 "),BG=n($ke,"A",{href:!0});var K2t=s(BG);yLo=r(K2t,"MvpForConditionalGeneration"),K2t.forEach(t),xLo=r($ke," (MVP model)"),$ke.forEach(t),$Lo=i(O),E1=n(O,"LI",{});var kke=s(E1);nge=n(kke,"STRONG",{});var Z2t=s(nge);kLo=r(Z2t,"nezha"),Z2t.forEach(t),SLo=r(kke," \u2014 "),NG=n(kke,"A",{href:!0});var ebt=s(NG);RLo=r(ebt,"NezhaForPreTraining"),ebt.forEach(t),PLo=r(kke," (Nezha model)"),kke.forEach(t),BLo=i(O),C1=n(O,"LI",{});var Ske=s(C1);sge=n(Ske,"STRONG",{});var obt=s(sge);NLo=r(obt,"openai-gpt"),obt.forEach(t),ILo=r(Ske," \u2014 "),IG=n(Ske,"A",{href:!0});var rbt=s(IG);qLo=r(rbt,"OpenAIGPTLMHeadModel"),rbt.forEach(t),jLo=r(Ske," (OpenAI GPT model)"),Ske.forEach(t),DLo=i(O),w1=n(O,"LI",{});var Rke=s(w1);lge=n(Rke,"STRONG",{});var tbt=s(lge);GLo=r(tbt,"retribert"),tbt.forEach(t),OLo=r(Rke," \u2014 "),qG=n(Rke,"A",{href:!0});var abt=s(qG);VLo=r(abt,"RetriBertModel"),abt.forEach(t),XLo=r(Rke," (RetriBERT model)"),Rke.forEach(t),zLo=i(O),A1=n(O,"LI",{});var Pke=s(A1);ige=n(Pke,"STRONG",{});var nbt=s(ige);QLo=r(nbt,"roberta"),nbt.forEach(t),WLo=r(Pke," \u2014 "),jG=n(Pke,"A",{href:!0});var sbt=s(jG);HLo=r(sbt,"RobertaForMaskedLM"),sbt.forEach(t),ULo=r(Pke," (RoBERTa model)"),Pke.forEach(t),JLo=i(O),L1=n(O,"LI",{});var Bke=s(L1);dge=n(Bke,"STRONG",{});var lbt=s(dge);YLo=r(lbt,"splinter"),lbt.forEach(t),KLo=r(Bke," \u2014 "),DG=n(Bke,"A",{href:!0});var ibt=s(DG);ZLo=r(ibt,"SplinterForPreTraining"),ibt.forEach(t),eyo=r(Bke," (Splinter model)"),Bke.forEach(t),oyo=i(O),y1=n(O,"LI",{});var Nke=s(y1);cge=n(Nke,"STRONG",{});var dbt=s(cge);ryo=r(dbt,"squeezebert"),dbt.forEach(t),tyo=r(Nke," \u2014 "),GG=n(Nke,"A",{href:!0});var cbt=s(GG);ayo=r(cbt,"SqueezeBertForMaskedLM"),cbt.forEach(t),nyo=r(Nke," (SqueezeBERT model)"),Nke.forEach(t),syo=i(O),x1=n(O,"LI",{});var Ike=s(x1);fge=n(Ike,"STRONG",{});var fbt=s(fge);lyo=r(fbt,"t5"),fbt.forEach(t),iyo=r(Ike," \u2014 "),OG=n(Ike,"A",{href:!0});var mbt=s(OG);dyo=r(mbt,"T5ForConditionalGeneration"),mbt.forEach(t),cyo=r(Ike," (T5 model)"),Ike.forEach(t),fyo=i(O),$1=n(O,"LI",{});var qke=s($1);mge=n(qke,"STRONG",{});var gbt=s(mge);myo=r(gbt,"tapas"),gbt.forEach(t),gyo=r(qke," \u2014 "),VG=n(qke,"A",{href:!0});var hbt=s(VG);hyo=r(hbt,"TapasForMaskedLM"),hbt.forEach(t),pyo=r(qke," (TAPAS model)"),qke.forEach(t),_yo=i(O),k1=n(O,"LI",{});var jke=s(k1);gge=n(jke,"STRONG",{});var pbt=s(gge);uyo=r(pbt,"transfo-xl"),pbt.forEach(t),byo=r(jke," \u2014 "),XG=n(jke,"A",{href:!0});var _bt=s(XG);vyo=r(_bt,"TransfoXLLMHeadModel"),_bt.forEach(t),Fyo=r(jke," (Transformer-XL model)"),jke.forEach(t),Tyo=i(O),S1=n(O,"LI",{});var Dke=s(S1);hge=n(Dke,"STRONG",{});var ubt=s(hge);Myo=r(ubt,"unispeech"),ubt.forEach(t),Eyo=r(Dke," \u2014 "),zG=n(Dke,"A",{href:!0});var bbt=s(zG);Cyo=r(bbt,"UniSpeechForPreTraining"),bbt.forEach(t),wyo=r(Dke," (UniSpeech model)"),Dke.forEach(t),Ayo=i(O),R1=n(O,"LI",{});var Gke=s(R1);pge=n(Gke,"STRONG",{});var vbt=s(pge);Lyo=r(vbt,"unispeech-sat"),vbt.forEach(t),yyo=r(Gke," \u2014 "),QG=n(Gke,"A",{href:!0});var Fbt=s(QG);xyo=r(Fbt,"UniSpeechSatForPreTraining"),Fbt.forEach(t),$yo=r(Gke," (UniSpeechSat model)"),Gke.forEach(t),kyo=i(O),P1=n(O,"LI",{});var Oke=s(P1);_ge=n(Oke,"STRONG",{});var Tbt=s(_ge);Syo=r(Tbt,"visual_bert"),Tbt.forEach(t),Ryo=r(Oke," \u2014 "),WG=n(Oke,"A",{href:!0});var Mbt=s(WG);Pyo=r(Mbt,"VisualBertForPreTraining"),Mbt.forEach(t),Byo=r(Oke," (VisualBERT model)"),Oke.forEach(t),Nyo=i(O),B1=n(O,"LI",{});var Vke=s(B1);uge=n(Vke,"STRONG",{});var Ebt=s(uge);Iyo=r(Ebt,"vit_mae"),Ebt.forEach(t),qyo=r(Vke," \u2014 "),HG=n(Vke,"A",{href:!0});var Cbt=s(HG);jyo=r(Cbt,"ViTMAEForPreTraining"),Cbt.forEach(t),Dyo=r(Vke," (ViTMAE model)"),Vke.forEach(t),Gyo=i(O),N1=n(O,"LI",{});var Xke=s(N1);bge=n(Xke,"STRONG",{});var wbt=s(bge);Oyo=r(wbt,"wav2vec2"),wbt.forEach(t),Vyo=r(Xke," \u2014 "),UG=n(Xke,"A",{href:!0});var Abt=s(UG);Xyo=r(Abt,"Wav2Vec2ForPreTraining"),Abt.forEach(t),zyo=r(Xke," (Wav2Vec2 model)"),Xke.forEach(t),Qyo=i(O),I1=n(O,"LI",{});var zke=s(I1);vge=n(zke,"STRONG",{});var Lbt=s(vge);Wyo=r(Lbt,"wav2vec2-conformer"),Lbt.forEach(t),Hyo=r(zke," \u2014 "),JG=n(zke,"A",{href:!0});var ybt=s(JG);Uyo=r(ybt,"Wav2Vec2ConformerForPreTraining"),ybt.forEach(t),Jyo=r(zke," (Wav2Vec2-Conformer model)"),zke.forEach(t),Yyo=i(O),q1=n(O,"LI",{});var Qke=s(q1);Fge=n(Qke,"STRONG",{});var xbt=s(Fge);Kyo=r(xbt,"xlm"),xbt.forEach(t),Zyo=r(Qke," \u2014 "),YG=n(Qke,"A",{href:!0});var $bt=s(YG);exo=r($bt,"XLMWithLMHeadModel"),$bt.forEach(t),oxo=r(Qke," (XLM model)"),Qke.forEach(t),rxo=i(O),j1=n(O,"LI",{});var Wke=s(j1);Tge=n(Wke,"STRONG",{});var kbt=s(Tge);txo=r(kbt,"xlm-roberta"),kbt.forEach(t),axo=r(Wke," \u2014 "),KG=n(Wke,"A",{href:!0});var Sbt=s(KG);nxo=r(Sbt,"XLMRobertaForMaskedLM"),Sbt.forEach(t),sxo=r(Wke," (XLM-RoBERTa model)"),Wke.forEach(t),lxo=i(O),D1=n(O,"LI",{});var Hke=s(D1);Mge=n(Hke,"STRONG",{});var Rbt=s(Mge);ixo=r(Rbt,"xlm-roberta-xl"),Rbt.forEach(t),dxo=r(Hke," \u2014 "),ZG=n(Hke,"A",{href:!0});var Pbt=s(ZG);cxo=r(Pbt,"XLMRobertaXLForMaskedLM"),Pbt.forEach(t),fxo=r(Hke," (XLM-RoBERTa-XL model)"),Hke.forEach(t),mxo=i(O),G1=n(O,"LI",{});var Uke=s(G1);Ege=n(Uke,"STRONG",{});var Bbt=s(Ege);gxo=r(Bbt,"xlnet"),Bbt.forEach(t),hxo=r(Uke," \u2014 "),eO=n(Uke,"A",{href:!0});var Nbt=s(eO);pxo=r(Nbt,"XLNetLMHeadModel"),Nbt.forEach(t),_xo=r(Uke," (XLNet model)"),Uke.forEach(t),O.forEach(t),uxo=i(ia),O1=n(ia,"P",{});var Jke=s(O1);bxo=r(Jke,"The model is set in evaluation mode by default using "),Cge=n(Jke,"CODE",{});var Ibt=s(Cge);vxo=r(Ibt,"model.eval()"),Ibt.forEach(t),Fxo=r(Jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=n(Jke,"CODE",{});var qbt=s(wge);Txo=r(qbt,"model.train()"),qbt.forEach(t),Jke.forEach(t),Mxo=i(ia),T(V1.$$.fragment,ia),ia.forEach(t),al.forEach(t),LXe=i(f),Hi=n(f,"H2",{class:!0});var RQe=s(Hi);X1=n(RQe,"A",{id:!0,class:!0,href:!0});var jbt=s(X1);Age=n(jbt,"SPAN",{});var Dbt=s(Age);T(V6.$$.fragment,Dbt),Dbt.forEach(t),jbt.forEach(t),Exo=i(RQe),Lge=n(RQe,"SPAN",{});var Gbt=s(Lge);Cxo=r(Gbt,"AutoModelForCausalLM"),Gbt.forEach(t),RQe.forEach(t),yXe=i(f),So=n(f,"DIV",{class:!0});var nl=s(So);T(X6.$$.fragment,nl),wxo=i(nl),Ui=n(nl,"P",{});var Vre=s(Ui);Axo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oO=n(Vre,"A",{href:!0});var Obt=s(oO);Lxo=r(Obt,"from_pretrained()"),Obt.forEach(t),yxo=r(Vre," class method or the "),rO=n(Vre,"A",{href:!0});var Vbt=s(rO);xxo=r(Vbt,"from_config()"),Vbt.forEach(t),$xo=r(Vre,` class
method.`),Vre.forEach(t),kxo=i(nl),z6=n(nl,"P",{});var PQe=s(z6);Sxo=r(PQe,"This class cannot be instantiated directly using "),yge=n(PQe,"CODE",{});var Xbt=s(yge);Rxo=r(Xbt,"__init__()"),Xbt.forEach(t),Pxo=r(PQe," (throws an error)."),PQe.forEach(t),Bxo=i(nl),ct=n(nl,"DIV",{class:!0});var pw=s(ct);T(Q6.$$.fragment,pw),Nxo=i(pw),xge=n(pw,"P",{});var zbt=s(xge);Ixo=r(zbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zbt.forEach(t),qxo=i(pw),Ji=n(pw,"P",{});var Xre=s(Ji);jxo=r(Xre,`Note:
Loading a model from its configuration file does `),$ge=n(Xre,"STRONG",{});var Qbt=s($ge);Dxo=r(Qbt,"not"),Qbt.forEach(t),Gxo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=n(Xre,"A",{href:!0});var Wbt=s(tO);Oxo=r(Wbt,"from_pretrained()"),Wbt.forEach(t),Vxo=r(Xre," to load the model weights."),Xre.forEach(t),Xxo=i(pw),T(z1.$$.fragment,pw),pw.forEach(t),zxo=i(nl),Ze=n(nl,"DIV",{class:!0});var da=s(Ze);T(W6.$$.fragment,da),Qxo=i(da),kge=n(da,"P",{});var Hbt=s(kge);Wxo=r(Hbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hbt.forEach(t),Hxo=i(da),qa=n(da,"P",{});var _w=s(qa);Uxo=r(_w,"The model class to instantiate is selected based on the "),Sge=n(_w,"CODE",{});var Ubt=s(Sge);Jxo=r(Ubt,"model_type"),Ubt.forEach(t),Yxo=r(_w,` property of the config object (either
passed as an argument or loaded from `),Rge=n(_w,"CODE",{});var Jbt=s(Rge);Kxo=r(Jbt,"pretrained_model_name_or_path"),Jbt.forEach(t),Zxo=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=n(_w,"CODE",{});var Ybt=s(Pge);e$o=r(Ybt,"pretrained_model_name_or_path"),Ybt.forEach(t),o$o=r(_w,":"),_w.forEach(t),r$o=i(da),z=n(da,"UL",{});var Q=s(z);Q1=n(Q,"LI",{});var Yke=s(Q1);Bge=n(Yke,"STRONG",{});var Kbt=s(Bge);t$o=r(Kbt,"bart"),Kbt.forEach(t),a$o=r(Yke," \u2014 "),aO=n(Yke,"A",{href:!0});var Zbt=s(aO);n$o=r(Zbt,"BartForCausalLM"),Zbt.forEach(t),s$o=r(Yke," (BART model)"),Yke.forEach(t),l$o=i(Q),W1=n(Q,"LI",{});var Kke=s(W1);Nge=n(Kke,"STRONG",{});var evt=s(Nge);i$o=r(evt,"bert"),evt.forEach(t),d$o=r(Kke," \u2014 "),nO=n(Kke,"A",{href:!0});var ovt=s(nO);c$o=r(ovt,"BertLMHeadModel"),ovt.forEach(t),f$o=r(Kke," (BERT model)"),Kke.forEach(t),m$o=i(Q),H1=n(Q,"LI",{});var Zke=s(H1);Ige=n(Zke,"STRONG",{});var rvt=s(Ige);g$o=r(rvt,"bert-generation"),rvt.forEach(t),h$o=r(Zke," \u2014 "),sO=n(Zke,"A",{href:!0});var tvt=s(sO);p$o=r(tvt,"BertGenerationDecoder"),tvt.forEach(t),_$o=r(Zke," (Bert Generation model)"),Zke.forEach(t),u$o=i(Q),U1=n(Q,"LI",{});var eSe=s(U1);qge=n(eSe,"STRONG",{});var avt=s(qge);b$o=r(avt,"big_bird"),avt.forEach(t),v$o=r(eSe," \u2014 "),lO=n(eSe,"A",{href:!0});var nvt=s(lO);F$o=r(nvt,"BigBirdForCausalLM"),nvt.forEach(t),T$o=r(eSe," (BigBird model)"),eSe.forEach(t),M$o=i(Q),J1=n(Q,"LI",{});var oSe=s(J1);jge=n(oSe,"STRONG",{});var svt=s(jge);E$o=r(svt,"bigbird_pegasus"),svt.forEach(t),C$o=r(oSe," \u2014 "),iO=n(oSe,"A",{href:!0});var lvt=s(iO);w$o=r(lvt,"BigBirdPegasusForCausalLM"),lvt.forEach(t),A$o=r(oSe," (BigBird-Pegasus model)"),oSe.forEach(t),L$o=i(Q),Y1=n(Q,"LI",{});var rSe=s(Y1);Dge=n(rSe,"STRONG",{});var ivt=s(Dge);y$o=r(ivt,"blenderbot"),ivt.forEach(t),x$o=r(rSe," \u2014 "),dO=n(rSe,"A",{href:!0});var dvt=s(dO);$$o=r(dvt,"BlenderbotForCausalLM"),dvt.forEach(t),k$o=r(rSe," (Blenderbot model)"),rSe.forEach(t),S$o=i(Q),K1=n(Q,"LI",{});var tSe=s(K1);Gge=n(tSe,"STRONG",{});var cvt=s(Gge);R$o=r(cvt,"blenderbot-small"),cvt.forEach(t),P$o=r(tSe," \u2014 "),cO=n(tSe,"A",{href:!0});var fvt=s(cO);B$o=r(fvt,"BlenderbotSmallForCausalLM"),fvt.forEach(t),N$o=r(tSe," (BlenderbotSmall model)"),tSe.forEach(t),I$o=i(Q),Z1=n(Q,"LI",{});var aSe=s(Z1);Oge=n(aSe,"STRONG",{});var mvt=s(Oge);q$o=r(mvt,"bloom"),mvt.forEach(t),j$o=r(aSe," \u2014 "),fO=n(aSe,"A",{href:!0});var gvt=s(fO);D$o=r(gvt,"BloomForCausalLM"),gvt.forEach(t),G$o=r(aSe," (BLOOM model)"),aSe.forEach(t),O$o=i(Q),e2=n(Q,"LI",{});var nSe=s(e2);Vge=n(nSe,"STRONG",{});var hvt=s(Vge);V$o=r(hvt,"camembert"),hvt.forEach(t),X$o=r(nSe," \u2014 "),mO=n(nSe,"A",{href:!0});var pvt=s(mO);z$o=r(pvt,"CamembertForCausalLM"),pvt.forEach(t),Q$o=r(nSe," (CamemBERT model)"),nSe.forEach(t),W$o=i(Q),o2=n(Q,"LI",{});var sSe=s(o2);Xge=n(sSe,"STRONG",{});var _vt=s(Xge);H$o=r(_vt,"codegen"),_vt.forEach(t),U$o=r(sSe," \u2014 "),gO=n(sSe,"A",{href:!0});var uvt=s(gO);J$o=r(uvt,"CodeGenForCausalLM"),uvt.forEach(t),Y$o=r(sSe," (CodeGen model)"),sSe.forEach(t),K$o=i(Q),r2=n(Q,"LI",{});var lSe=s(r2);zge=n(lSe,"STRONG",{});var bvt=s(zge);Z$o=r(bvt,"ctrl"),bvt.forEach(t),eko=r(lSe," \u2014 "),hO=n(lSe,"A",{href:!0});var vvt=s(hO);oko=r(vvt,"CTRLLMHeadModel"),vvt.forEach(t),rko=r(lSe," (CTRL model)"),lSe.forEach(t),tko=i(Q),t2=n(Q,"LI",{});var iSe=s(t2);Qge=n(iSe,"STRONG",{});var Fvt=s(Qge);ako=r(Fvt,"data2vec-text"),Fvt.forEach(t),nko=r(iSe," \u2014 "),pO=n(iSe,"A",{href:!0});var Tvt=s(pO);sko=r(Tvt,"Data2VecTextForCausalLM"),Tvt.forEach(t),lko=r(iSe," (Data2VecText model)"),iSe.forEach(t),iko=i(Q),a2=n(Q,"LI",{});var dSe=s(a2);Wge=n(dSe,"STRONG",{});var Mvt=s(Wge);dko=r(Mvt,"electra"),Mvt.forEach(t),cko=r(dSe," \u2014 "),_O=n(dSe,"A",{href:!0});var Evt=s(_O);fko=r(Evt,"ElectraForCausalLM"),Evt.forEach(t),mko=r(dSe," (ELECTRA model)"),dSe.forEach(t),gko=i(Q),n2=n(Q,"LI",{});var cSe=s(n2);Hge=n(cSe,"STRONG",{});var Cvt=s(Hge);hko=r(Cvt,"gpt2"),Cvt.forEach(t),pko=r(cSe," \u2014 "),uO=n(cSe,"A",{href:!0});var wvt=s(uO);_ko=r(wvt,"GPT2LMHeadModel"),wvt.forEach(t),uko=r(cSe," (OpenAI GPT-2 model)"),cSe.forEach(t),bko=i(Q),s2=n(Q,"LI",{});var fSe=s(s2);Uge=n(fSe,"STRONG",{});var Avt=s(Uge);vko=r(Avt,"gpt_neo"),Avt.forEach(t),Fko=r(fSe," \u2014 "),bO=n(fSe,"A",{href:!0});var Lvt=s(bO);Tko=r(Lvt,"GPTNeoForCausalLM"),Lvt.forEach(t),Mko=r(fSe," (GPT Neo model)"),fSe.forEach(t),Eko=i(Q),l2=n(Q,"LI",{});var mSe=s(l2);Jge=n(mSe,"STRONG",{});var yvt=s(Jge);Cko=r(yvt,"gpt_neox"),yvt.forEach(t),wko=r(mSe," \u2014 "),vO=n(mSe,"A",{href:!0});var xvt=s(vO);Ako=r(xvt,"GPTNeoXForCausalLM"),xvt.forEach(t),Lko=r(mSe," (GPT NeoX model)"),mSe.forEach(t),yko=i(Q),i2=n(Q,"LI",{});var gSe=s(i2);Yge=n(gSe,"STRONG",{});var $vt=s(Yge);xko=r($vt,"gptj"),$vt.forEach(t),$ko=r(gSe," \u2014 "),FO=n(gSe,"A",{href:!0});var kvt=s(FO);kko=r(kvt,"GPTJForCausalLM"),kvt.forEach(t),Sko=r(gSe," (GPT-J model)"),gSe.forEach(t),Rko=i(Q),d2=n(Q,"LI",{});var hSe=s(d2);Kge=n(hSe,"STRONG",{});var Svt=s(Kge);Pko=r(Svt,"marian"),Svt.forEach(t),Bko=r(hSe," \u2014 "),TO=n(hSe,"A",{href:!0});var Rvt=s(TO);Nko=r(Rvt,"MarianForCausalLM"),Rvt.forEach(t),Iko=r(hSe," (Marian model)"),hSe.forEach(t),qko=i(Q),c2=n(Q,"LI",{});var pSe=s(c2);Zge=n(pSe,"STRONG",{});var Pvt=s(Zge);jko=r(Pvt,"mbart"),Pvt.forEach(t),Dko=r(pSe," \u2014 "),MO=n(pSe,"A",{href:!0});var Bvt=s(MO);Gko=r(Bvt,"MBartForCausalLM"),Bvt.forEach(t),Oko=r(pSe," (mBART model)"),pSe.forEach(t),Vko=i(Q),f2=n(Q,"LI",{});var _Se=s(f2);ehe=n(_Se,"STRONG",{});var Nvt=s(ehe);Xko=r(Nvt,"megatron-bert"),Nvt.forEach(t),zko=r(_Se," \u2014 "),EO=n(_Se,"A",{href:!0});var Ivt=s(EO);Qko=r(Ivt,"MegatronBertForCausalLM"),Ivt.forEach(t),Wko=r(_Se," (Megatron-BERT model)"),_Se.forEach(t),Hko=i(Q),m2=n(Q,"LI",{});var uSe=s(m2);ohe=n(uSe,"STRONG",{});var qvt=s(ohe);Uko=r(qvt,"mvp"),qvt.forEach(t),Jko=r(uSe," \u2014 "),CO=n(uSe,"A",{href:!0});var jvt=s(CO);Yko=r(jvt,"MvpForCausalLM"),jvt.forEach(t),Kko=r(uSe," (MVP model)"),uSe.forEach(t),Zko=i(Q),g2=n(Q,"LI",{});var bSe=s(g2);rhe=n(bSe,"STRONG",{});var Dvt=s(rhe);eSo=r(Dvt,"openai-gpt"),Dvt.forEach(t),oSo=r(bSe," \u2014 "),wO=n(bSe,"A",{href:!0});var Gvt=s(wO);rSo=r(Gvt,"OpenAIGPTLMHeadModel"),Gvt.forEach(t),tSo=r(bSe," (OpenAI GPT model)"),bSe.forEach(t),aSo=i(Q),h2=n(Q,"LI",{});var vSe=s(h2);the=n(vSe,"STRONG",{});var Ovt=s(the);nSo=r(Ovt,"opt"),Ovt.forEach(t),sSo=r(vSe," \u2014 "),AO=n(vSe,"A",{href:!0});var Vvt=s(AO);lSo=r(Vvt,"OPTForCausalLM"),Vvt.forEach(t),iSo=r(vSe," (OPT model)"),vSe.forEach(t),dSo=i(Q),p2=n(Q,"LI",{});var FSe=s(p2);ahe=n(FSe,"STRONG",{});var Xvt=s(ahe);cSo=r(Xvt,"pegasus"),Xvt.forEach(t),fSo=r(FSe," \u2014 "),LO=n(FSe,"A",{href:!0});var zvt=s(LO);mSo=r(zvt,"PegasusForCausalLM"),zvt.forEach(t),gSo=r(FSe," (Pegasus model)"),FSe.forEach(t),hSo=i(Q),_2=n(Q,"LI",{});var TSe=s(_2);nhe=n(TSe,"STRONG",{});var Qvt=s(nhe);pSo=r(Qvt,"plbart"),Qvt.forEach(t),_So=r(TSe," \u2014 "),yO=n(TSe,"A",{href:!0});var Wvt=s(yO);uSo=r(Wvt,"PLBartForCausalLM"),Wvt.forEach(t),bSo=r(TSe," (PLBart model)"),TSe.forEach(t),vSo=i(Q),u2=n(Q,"LI",{});var MSe=s(u2);she=n(MSe,"STRONG",{});var Hvt=s(she);FSo=r(Hvt,"prophetnet"),Hvt.forEach(t),TSo=r(MSe," \u2014 "),xO=n(MSe,"A",{href:!0});var Uvt=s(xO);MSo=r(Uvt,"ProphetNetForCausalLM"),Uvt.forEach(t),ESo=r(MSe," (ProphetNet model)"),MSe.forEach(t),CSo=i(Q),b2=n(Q,"LI",{});var ESe=s(b2);lhe=n(ESe,"STRONG",{});var Jvt=s(lhe);wSo=r(Jvt,"qdqbert"),Jvt.forEach(t),ASo=r(ESe," \u2014 "),$O=n(ESe,"A",{href:!0});var Yvt=s($O);LSo=r(Yvt,"QDQBertLMHeadModel"),Yvt.forEach(t),ySo=r(ESe," (QDQBert model)"),ESe.forEach(t),xSo=i(Q),v2=n(Q,"LI",{});var CSe=s(v2);ihe=n(CSe,"STRONG",{});var Kvt=s(ihe);$So=r(Kvt,"reformer"),Kvt.forEach(t),kSo=r(CSe," \u2014 "),kO=n(CSe,"A",{href:!0});var Zvt=s(kO);SSo=r(Zvt,"ReformerModelWithLMHead"),Zvt.forEach(t),RSo=r(CSe," (Reformer model)"),CSe.forEach(t),PSo=i(Q),F2=n(Q,"LI",{});var wSe=s(F2);dhe=n(wSe,"STRONG",{});var e0t=s(dhe);BSo=r(e0t,"rembert"),e0t.forEach(t),NSo=r(wSe," \u2014 "),SO=n(wSe,"A",{href:!0});var o0t=s(SO);ISo=r(o0t,"RemBertForCausalLM"),o0t.forEach(t),qSo=r(wSe," (RemBERT model)"),wSe.forEach(t),jSo=i(Q),T2=n(Q,"LI",{});var ASe=s(T2);che=n(ASe,"STRONG",{});var r0t=s(che);DSo=r(r0t,"roberta"),r0t.forEach(t),GSo=r(ASe," \u2014 "),RO=n(ASe,"A",{href:!0});var t0t=s(RO);OSo=r(t0t,"RobertaForCausalLM"),t0t.forEach(t),VSo=r(ASe," (RoBERTa model)"),ASe.forEach(t),XSo=i(Q),M2=n(Q,"LI",{});var LSe=s(M2);fhe=n(LSe,"STRONG",{});var a0t=s(fhe);zSo=r(a0t,"roformer"),a0t.forEach(t),QSo=r(LSe," \u2014 "),PO=n(LSe,"A",{href:!0});var n0t=s(PO);WSo=r(n0t,"RoFormerForCausalLM"),n0t.forEach(t),HSo=r(LSe," (RoFormer model)"),LSe.forEach(t),USo=i(Q),E2=n(Q,"LI",{});var ySe=s(E2);mhe=n(ySe,"STRONG",{});var s0t=s(mhe);JSo=r(s0t,"speech_to_text_2"),s0t.forEach(t),YSo=r(ySe," \u2014 "),BO=n(ySe,"A",{href:!0});var l0t=s(BO);KSo=r(l0t,"Speech2Text2ForCausalLM"),l0t.forEach(t),ZSo=r(ySe," (Speech2Text2 model)"),ySe.forEach(t),eRo=i(Q),C2=n(Q,"LI",{});var xSe=s(C2);ghe=n(xSe,"STRONG",{});var i0t=s(ghe);oRo=r(i0t,"transfo-xl"),i0t.forEach(t),rRo=r(xSe," \u2014 "),NO=n(xSe,"A",{href:!0});var d0t=s(NO);tRo=r(d0t,"TransfoXLLMHeadModel"),d0t.forEach(t),aRo=r(xSe," (Transformer-XL model)"),xSe.forEach(t),nRo=i(Q),w2=n(Q,"LI",{});var $Se=s(w2);hhe=n($Se,"STRONG",{});var c0t=s(hhe);sRo=r(c0t,"trocr"),c0t.forEach(t),lRo=r($Se," \u2014 "),IO=n($Se,"A",{href:!0});var f0t=s(IO);iRo=r(f0t,"TrOCRForCausalLM"),f0t.forEach(t),dRo=r($Se," (TrOCR model)"),$Se.forEach(t),cRo=i(Q),A2=n(Q,"LI",{});var kSe=s(A2);phe=n(kSe,"STRONG",{});var m0t=s(phe);fRo=r(m0t,"xglm"),m0t.forEach(t),mRo=r(kSe," \u2014 "),qO=n(kSe,"A",{href:!0});var g0t=s(qO);gRo=r(g0t,"XGLMForCausalLM"),g0t.forEach(t),hRo=r(kSe," (XGLM model)"),kSe.forEach(t),pRo=i(Q),L2=n(Q,"LI",{});var SSe=s(L2);_he=n(SSe,"STRONG",{});var h0t=s(_he);_Ro=r(h0t,"xlm"),h0t.forEach(t),uRo=r(SSe," \u2014 "),jO=n(SSe,"A",{href:!0});var p0t=s(jO);bRo=r(p0t,"XLMWithLMHeadModel"),p0t.forEach(t),vRo=r(SSe," (XLM model)"),SSe.forEach(t),FRo=i(Q),y2=n(Q,"LI",{});var RSe=s(y2);uhe=n(RSe,"STRONG",{});var _0t=s(uhe);TRo=r(_0t,"xlm-prophetnet"),_0t.forEach(t),MRo=r(RSe," \u2014 "),DO=n(RSe,"A",{href:!0});var u0t=s(DO);ERo=r(u0t,"XLMProphetNetForCausalLM"),u0t.forEach(t),CRo=r(RSe," (XLM-ProphetNet model)"),RSe.forEach(t),wRo=i(Q),x2=n(Q,"LI",{});var PSe=s(x2);bhe=n(PSe,"STRONG",{});var b0t=s(bhe);ARo=r(b0t,"xlm-roberta"),b0t.forEach(t),LRo=r(PSe," \u2014 "),GO=n(PSe,"A",{href:!0});var v0t=s(GO);yRo=r(v0t,"XLMRobertaForCausalLM"),v0t.forEach(t),xRo=r(PSe," (XLM-RoBERTa model)"),PSe.forEach(t),$Ro=i(Q),$2=n(Q,"LI",{});var BSe=s($2);vhe=n(BSe,"STRONG",{});var F0t=s(vhe);kRo=r(F0t,"xlm-roberta-xl"),F0t.forEach(t),SRo=r(BSe," \u2014 "),OO=n(BSe,"A",{href:!0});var T0t=s(OO);RRo=r(T0t,"XLMRobertaXLForCausalLM"),T0t.forEach(t),PRo=r(BSe," (XLM-RoBERTa-XL model)"),BSe.forEach(t),BRo=i(Q),k2=n(Q,"LI",{});var NSe=s(k2);Fhe=n(NSe,"STRONG",{});var M0t=s(Fhe);NRo=r(M0t,"xlnet"),M0t.forEach(t),IRo=r(NSe," \u2014 "),VO=n(NSe,"A",{href:!0});var E0t=s(VO);qRo=r(E0t,"XLNetLMHeadModel"),E0t.forEach(t),jRo=r(NSe," (XLNet model)"),NSe.forEach(t),Q.forEach(t),DRo=i(da),S2=n(da,"P",{});var ISe=s(S2);GRo=r(ISe,"The model is set in evaluation mode by default using "),The=n(ISe,"CODE",{});var C0t=s(The);ORo=r(C0t,"model.eval()"),C0t.forEach(t),VRo=r(ISe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=n(ISe,"CODE",{});var w0t=s(Mhe);XRo=r(w0t,"model.train()"),w0t.forEach(t),ISe.forEach(t),zRo=i(da),T(R2.$$.fragment,da),da.forEach(t),nl.forEach(t),xXe=i(f),Yi=n(f,"H2",{class:!0});var BQe=s(Yi);P2=n(BQe,"A",{id:!0,class:!0,href:!0});var A0t=s(P2);Ehe=n(A0t,"SPAN",{});var L0t=s(Ehe);T(H6.$$.fragment,L0t),L0t.forEach(t),A0t.forEach(t),QRo=i(BQe),Che=n(BQe,"SPAN",{});var y0t=s(Che);WRo=r(y0t,"AutoModelForMaskedLM"),y0t.forEach(t),BQe.forEach(t),$Xe=i(f),Ro=n(f,"DIV",{class:!0});var sl=s(Ro);T(U6.$$.fragment,sl),HRo=i(sl),Ki=n(sl,"P",{});var zre=s(Ki);URo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XO=n(zre,"A",{href:!0});var x0t=s(XO);JRo=r(x0t,"from_pretrained()"),x0t.forEach(t),YRo=r(zre," class method or the "),zO=n(zre,"A",{href:!0});var $0t=s(zO);KRo=r($0t,"from_config()"),$0t.forEach(t),ZRo=r(zre,` class
method.`),zre.forEach(t),ePo=i(sl),J6=n(sl,"P",{});var NQe=s(J6);oPo=r(NQe,"This class cannot be instantiated directly using "),whe=n(NQe,"CODE",{});var k0t=s(whe);rPo=r(k0t,"__init__()"),k0t.forEach(t),tPo=r(NQe," (throws an error)."),NQe.forEach(t),aPo=i(sl),ft=n(sl,"DIV",{class:!0});var uw=s(ft);T(Y6.$$.fragment,uw),nPo=i(uw),Ahe=n(uw,"P",{});var S0t=s(Ahe);sPo=r(S0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),S0t.forEach(t),lPo=i(uw),Zi=n(uw,"P",{});var Qre=s(Zi);iPo=r(Qre,`Note:
Loading a model from its configuration file does `),Lhe=n(Qre,"STRONG",{});var R0t=s(Lhe);dPo=r(R0t,"not"),R0t.forEach(t),cPo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=n(Qre,"A",{href:!0});var P0t=s(QO);fPo=r(P0t,"from_pretrained()"),P0t.forEach(t),mPo=r(Qre," to load the model weights."),Qre.forEach(t),gPo=i(uw),T(B2.$$.fragment,uw),uw.forEach(t),hPo=i(sl),eo=n(sl,"DIV",{class:!0});var ca=s(eo);T(K6.$$.fragment,ca),pPo=i(ca),yhe=n(ca,"P",{});var B0t=s(yhe);_Po=r(B0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),B0t.forEach(t),uPo=i(ca),ja=n(ca,"P",{});var bw=s(ja);bPo=r(bw,"The model class to instantiate is selected based on the "),xhe=n(bw,"CODE",{});var N0t=s(xhe);vPo=r(N0t,"model_type"),N0t.forEach(t),FPo=r(bw,` property of the config object (either
passed as an argument or loaded from `),$he=n(bw,"CODE",{});var I0t=s($he);TPo=r(I0t,"pretrained_model_name_or_path"),I0t.forEach(t),MPo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=n(bw,"CODE",{});var q0t=s(khe);EPo=r(q0t,"pretrained_model_name_or_path"),q0t.forEach(t),CPo=r(bw,":"),bw.forEach(t),wPo=i(ca),W=n(ca,"UL",{});var H=s(W);N2=n(H,"LI",{});var qSe=s(N2);She=n(qSe,"STRONG",{});var j0t=s(She);APo=r(j0t,"albert"),j0t.forEach(t),LPo=r(qSe," \u2014 "),WO=n(qSe,"A",{href:!0});var D0t=s(WO);yPo=r(D0t,"AlbertForMaskedLM"),D0t.forEach(t),xPo=r(qSe," (ALBERT model)"),qSe.forEach(t),$Po=i(H),I2=n(H,"LI",{});var jSe=s(I2);Rhe=n(jSe,"STRONG",{});var G0t=s(Rhe);kPo=r(G0t,"bart"),G0t.forEach(t),SPo=r(jSe," \u2014 "),HO=n(jSe,"A",{href:!0});var O0t=s(HO);RPo=r(O0t,"BartForConditionalGeneration"),O0t.forEach(t),PPo=r(jSe," (BART model)"),jSe.forEach(t),BPo=i(H),q2=n(H,"LI",{});var DSe=s(q2);Phe=n(DSe,"STRONG",{});var V0t=s(Phe);NPo=r(V0t,"bert"),V0t.forEach(t),IPo=r(DSe," \u2014 "),UO=n(DSe,"A",{href:!0});var X0t=s(UO);qPo=r(X0t,"BertForMaskedLM"),X0t.forEach(t),jPo=r(DSe," (BERT model)"),DSe.forEach(t),DPo=i(H),j2=n(H,"LI",{});var GSe=s(j2);Bhe=n(GSe,"STRONG",{});var z0t=s(Bhe);GPo=r(z0t,"big_bird"),z0t.forEach(t),OPo=r(GSe," \u2014 "),JO=n(GSe,"A",{href:!0});var Q0t=s(JO);VPo=r(Q0t,"BigBirdForMaskedLM"),Q0t.forEach(t),XPo=r(GSe," (BigBird model)"),GSe.forEach(t),zPo=i(H),D2=n(H,"LI",{});var OSe=s(D2);Nhe=n(OSe,"STRONG",{});var W0t=s(Nhe);QPo=r(W0t,"camembert"),W0t.forEach(t),WPo=r(OSe," \u2014 "),YO=n(OSe,"A",{href:!0});var H0t=s(YO);HPo=r(H0t,"CamembertForMaskedLM"),H0t.forEach(t),UPo=r(OSe," (CamemBERT model)"),OSe.forEach(t),JPo=i(H),G2=n(H,"LI",{});var VSe=s(G2);Ihe=n(VSe,"STRONG",{});var U0t=s(Ihe);YPo=r(U0t,"convbert"),U0t.forEach(t),KPo=r(VSe," \u2014 "),KO=n(VSe,"A",{href:!0});var J0t=s(KO);ZPo=r(J0t,"ConvBertForMaskedLM"),J0t.forEach(t),eBo=r(VSe," (ConvBERT model)"),VSe.forEach(t),oBo=i(H),O2=n(H,"LI",{});var XSe=s(O2);qhe=n(XSe,"STRONG",{});var Y0t=s(qhe);rBo=r(Y0t,"data2vec-text"),Y0t.forEach(t),tBo=r(XSe," \u2014 "),ZO=n(XSe,"A",{href:!0});var K0t=s(ZO);aBo=r(K0t,"Data2VecTextForMaskedLM"),K0t.forEach(t),nBo=r(XSe," (Data2VecText model)"),XSe.forEach(t),sBo=i(H),V2=n(H,"LI",{});var zSe=s(V2);jhe=n(zSe,"STRONG",{});var Z0t=s(jhe);lBo=r(Z0t,"deberta"),Z0t.forEach(t),iBo=r(zSe," \u2014 "),eV=n(zSe,"A",{href:!0});var eFt=s(eV);dBo=r(eFt,"DebertaForMaskedLM"),eFt.forEach(t),cBo=r(zSe," (DeBERTa model)"),zSe.forEach(t),fBo=i(H),X2=n(H,"LI",{});var QSe=s(X2);Dhe=n(QSe,"STRONG",{});var oFt=s(Dhe);mBo=r(oFt,"deberta-v2"),oFt.forEach(t),gBo=r(QSe," \u2014 "),oV=n(QSe,"A",{href:!0});var rFt=s(oV);hBo=r(rFt,"DebertaV2ForMaskedLM"),rFt.forEach(t),pBo=r(QSe," (DeBERTa-v2 model)"),QSe.forEach(t),_Bo=i(H),z2=n(H,"LI",{});var WSe=s(z2);Ghe=n(WSe,"STRONG",{});var tFt=s(Ghe);uBo=r(tFt,"distilbert"),tFt.forEach(t),bBo=r(WSe," \u2014 "),rV=n(WSe,"A",{href:!0});var aFt=s(rV);vBo=r(aFt,"DistilBertForMaskedLM"),aFt.forEach(t),FBo=r(WSe," (DistilBERT model)"),WSe.forEach(t),TBo=i(H),Q2=n(H,"LI",{});var HSe=s(Q2);Ohe=n(HSe,"STRONG",{});var nFt=s(Ohe);MBo=r(nFt,"electra"),nFt.forEach(t),EBo=r(HSe," \u2014 "),tV=n(HSe,"A",{href:!0});var sFt=s(tV);CBo=r(sFt,"ElectraForMaskedLM"),sFt.forEach(t),wBo=r(HSe," (ELECTRA model)"),HSe.forEach(t),ABo=i(H),W2=n(H,"LI",{});var USe=s(W2);Vhe=n(USe,"STRONG",{});var lFt=s(Vhe);LBo=r(lFt,"flaubert"),lFt.forEach(t),yBo=r(USe," \u2014 "),aV=n(USe,"A",{href:!0});var iFt=s(aV);xBo=r(iFt,"FlaubertWithLMHeadModel"),iFt.forEach(t),$Bo=r(USe," (FlauBERT model)"),USe.forEach(t),kBo=i(H),H2=n(H,"LI",{});var JSe=s(H2);Xhe=n(JSe,"STRONG",{});var dFt=s(Xhe);SBo=r(dFt,"fnet"),dFt.forEach(t),RBo=r(JSe," \u2014 "),nV=n(JSe,"A",{href:!0});var cFt=s(nV);PBo=r(cFt,"FNetForMaskedLM"),cFt.forEach(t),BBo=r(JSe," (FNet model)"),JSe.forEach(t),NBo=i(H),U2=n(H,"LI",{});var YSe=s(U2);zhe=n(YSe,"STRONG",{});var fFt=s(zhe);IBo=r(fFt,"funnel"),fFt.forEach(t),qBo=r(YSe," \u2014 "),sV=n(YSe,"A",{href:!0});var mFt=s(sV);jBo=r(mFt,"FunnelForMaskedLM"),mFt.forEach(t),DBo=r(YSe," (Funnel Transformer model)"),YSe.forEach(t),GBo=i(H),J2=n(H,"LI",{});var KSe=s(J2);Qhe=n(KSe,"STRONG",{});var gFt=s(Qhe);OBo=r(gFt,"ibert"),gFt.forEach(t),VBo=r(KSe," \u2014 "),lV=n(KSe,"A",{href:!0});var hFt=s(lV);XBo=r(hFt,"IBertForMaskedLM"),hFt.forEach(t),zBo=r(KSe," (I-BERT model)"),KSe.forEach(t),QBo=i(H),Y2=n(H,"LI",{});var ZSe=s(Y2);Whe=n(ZSe,"STRONG",{});var pFt=s(Whe);WBo=r(pFt,"layoutlm"),pFt.forEach(t),HBo=r(ZSe," \u2014 "),iV=n(ZSe,"A",{href:!0});var _Ft=s(iV);UBo=r(_Ft,"LayoutLMForMaskedLM"),_Ft.forEach(t),JBo=r(ZSe," (LayoutLM model)"),ZSe.forEach(t),YBo=i(H),K2=n(H,"LI",{});var eRe=s(K2);Hhe=n(eRe,"STRONG",{});var uFt=s(Hhe);KBo=r(uFt,"longformer"),uFt.forEach(t),ZBo=r(eRe," \u2014 "),dV=n(eRe,"A",{href:!0});var bFt=s(dV);eNo=r(bFt,"LongformerForMaskedLM"),bFt.forEach(t),oNo=r(eRe," (Longformer model)"),eRe.forEach(t),rNo=i(H),Z2=n(H,"LI",{});var oRe=s(Z2);Uhe=n(oRe,"STRONG",{});var vFt=s(Uhe);tNo=r(vFt,"luke"),vFt.forEach(t),aNo=r(oRe," \u2014 "),cV=n(oRe,"A",{href:!0});var FFt=s(cV);nNo=r(FFt,"LukeForMaskedLM"),FFt.forEach(t),sNo=r(oRe," (LUKE model)"),oRe.forEach(t),lNo=i(H),eb=n(H,"LI",{});var rRe=s(eb);Jhe=n(rRe,"STRONG",{});var TFt=s(Jhe);iNo=r(TFt,"mbart"),TFt.forEach(t),dNo=r(rRe," \u2014 "),fV=n(rRe,"A",{href:!0});var MFt=s(fV);cNo=r(MFt,"MBartForConditionalGeneration"),MFt.forEach(t),fNo=r(rRe," (mBART model)"),rRe.forEach(t),mNo=i(H),ob=n(H,"LI",{});var tRe=s(ob);Yhe=n(tRe,"STRONG",{});var EFt=s(Yhe);gNo=r(EFt,"megatron-bert"),EFt.forEach(t),hNo=r(tRe," \u2014 "),mV=n(tRe,"A",{href:!0});var CFt=s(mV);pNo=r(CFt,"MegatronBertForMaskedLM"),CFt.forEach(t),_No=r(tRe," (Megatron-BERT model)"),tRe.forEach(t),uNo=i(H),rb=n(H,"LI",{});var aRe=s(rb);Khe=n(aRe,"STRONG",{});var wFt=s(Khe);bNo=r(wFt,"mobilebert"),wFt.forEach(t),vNo=r(aRe," \u2014 "),gV=n(aRe,"A",{href:!0});var AFt=s(gV);FNo=r(AFt,"MobileBertForMaskedLM"),AFt.forEach(t),TNo=r(aRe," (MobileBERT model)"),aRe.forEach(t),MNo=i(H),tb=n(H,"LI",{});var nRe=s(tb);Zhe=n(nRe,"STRONG",{});var LFt=s(Zhe);ENo=r(LFt,"mpnet"),LFt.forEach(t),CNo=r(nRe," \u2014 "),hV=n(nRe,"A",{href:!0});var yFt=s(hV);wNo=r(yFt,"MPNetForMaskedLM"),yFt.forEach(t),ANo=r(nRe," (MPNet model)"),nRe.forEach(t),LNo=i(H),ab=n(H,"LI",{});var sRe=s(ab);epe=n(sRe,"STRONG",{});var xFt=s(epe);yNo=r(xFt,"mvp"),xFt.forEach(t),xNo=r(sRe," \u2014 "),pV=n(sRe,"A",{href:!0});var $Ft=s(pV);$No=r($Ft,"MvpForConditionalGeneration"),$Ft.forEach(t),kNo=r(sRe," (MVP model)"),sRe.forEach(t),SNo=i(H),nb=n(H,"LI",{});var lRe=s(nb);ope=n(lRe,"STRONG",{});var kFt=s(ope);RNo=r(kFt,"nezha"),kFt.forEach(t),PNo=r(lRe," \u2014 "),_V=n(lRe,"A",{href:!0});var SFt=s(_V);BNo=r(SFt,"NezhaForMaskedLM"),SFt.forEach(t),NNo=r(lRe," (Nezha model)"),lRe.forEach(t),INo=i(H),sb=n(H,"LI",{});var iRe=s(sb);rpe=n(iRe,"STRONG",{});var RFt=s(rpe);qNo=r(RFt,"nystromformer"),RFt.forEach(t),jNo=r(iRe," \u2014 "),uV=n(iRe,"A",{href:!0});var PFt=s(uV);DNo=r(PFt,"NystromformerForMaskedLM"),PFt.forEach(t),GNo=r(iRe," (Nystr\xF6mformer model)"),iRe.forEach(t),ONo=i(H),lb=n(H,"LI",{});var dRe=s(lb);tpe=n(dRe,"STRONG",{});var BFt=s(tpe);VNo=r(BFt,"perceiver"),BFt.forEach(t),XNo=r(dRe," \u2014 "),bV=n(dRe,"A",{href:!0});var NFt=s(bV);zNo=r(NFt,"PerceiverForMaskedLM"),NFt.forEach(t),QNo=r(dRe," (Perceiver model)"),dRe.forEach(t),WNo=i(H),ib=n(H,"LI",{});var cRe=s(ib);ape=n(cRe,"STRONG",{});var IFt=s(ape);HNo=r(IFt,"qdqbert"),IFt.forEach(t),UNo=r(cRe," \u2014 "),vV=n(cRe,"A",{href:!0});var qFt=s(vV);JNo=r(qFt,"QDQBertForMaskedLM"),qFt.forEach(t),YNo=r(cRe," (QDQBert model)"),cRe.forEach(t),KNo=i(H),db=n(H,"LI",{});var fRe=s(db);npe=n(fRe,"STRONG",{});var jFt=s(npe);ZNo=r(jFt,"reformer"),jFt.forEach(t),eIo=r(fRe," \u2014 "),FV=n(fRe,"A",{href:!0});var DFt=s(FV);oIo=r(DFt,"ReformerForMaskedLM"),DFt.forEach(t),rIo=r(fRe," (Reformer model)"),fRe.forEach(t),tIo=i(H),cb=n(H,"LI",{});var mRe=s(cb);spe=n(mRe,"STRONG",{});var GFt=s(spe);aIo=r(GFt,"rembert"),GFt.forEach(t),nIo=r(mRe," \u2014 "),TV=n(mRe,"A",{href:!0});var OFt=s(TV);sIo=r(OFt,"RemBertForMaskedLM"),OFt.forEach(t),lIo=r(mRe," (RemBERT model)"),mRe.forEach(t),iIo=i(H),fb=n(H,"LI",{});var gRe=s(fb);lpe=n(gRe,"STRONG",{});var VFt=s(lpe);dIo=r(VFt,"roberta"),VFt.forEach(t),cIo=r(gRe," \u2014 "),MV=n(gRe,"A",{href:!0});var XFt=s(MV);fIo=r(XFt,"RobertaForMaskedLM"),XFt.forEach(t),mIo=r(gRe," (RoBERTa model)"),gRe.forEach(t),gIo=i(H),mb=n(H,"LI",{});var hRe=s(mb);ipe=n(hRe,"STRONG",{});var zFt=s(ipe);hIo=r(zFt,"roformer"),zFt.forEach(t),pIo=r(hRe," \u2014 "),EV=n(hRe,"A",{href:!0});var QFt=s(EV);_Io=r(QFt,"RoFormerForMaskedLM"),QFt.forEach(t),uIo=r(hRe," (RoFormer model)"),hRe.forEach(t),bIo=i(H),gb=n(H,"LI",{});var pRe=s(gb);dpe=n(pRe,"STRONG",{});var WFt=s(dpe);vIo=r(WFt,"squeezebert"),WFt.forEach(t),FIo=r(pRe," \u2014 "),CV=n(pRe,"A",{href:!0});var HFt=s(CV);TIo=r(HFt,"SqueezeBertForMaskedLM"),HFt.forEach(t),MIo=r(pRe," (SqueezeBERT model)"),pRe.forEach(t),EIo=i(H),hb=n(H,"LI",{});var _Re=s(hb);cpe=n(_Re,"STRONG",{});var UFt=s(cpe);CIo=r(UFt,"tapas"),UFt.forEach(t),wIo=r(_Re," \u2014 "),wV=n(_Re,"A",{href:!0});var JFt=s(wV);AIo=r(JFt,"TapasForMaskedLM"),JFt.forEach(t),LIo=r(_Re," (TAPAS model)"),_Re.forEach(t),yIo=i(H),pb=n(H,"LI",{});var uRe=s(pb);fpe=n(uRe,"STRONG",{});var YFt=s(fpe);xIo=r(YFt,"wav2vec2"),YFt.forEach(t),$Io=r(uRe," \u2014 "),mpe=n(uRe,"CODE",{});var KFt=s(mpe);kIo=r(KFt,"Wav2Vec2ForMaskedLM"),KFt.forEach(t),SIo=r(uRe," (Wav2Vec2 model)"),uRe.forEach(t),RIo=i(H),_b=n(H,"LI",{});var bRe=s(_b);gpe=n(bRe,"STRONG",{});var ZFt=s(gpe);PIo=r(ZFt,"xlm"),ZFt.forEach(t),BIo=r(bRe," \u2014 "),AV=n(bRe,"A",{href:!0});var eTt=s(AV);NIo=r(eTt,"XLMWithLMHeadModel"),eTt.forEach(t),IIo=r(bRe," (XLM model)"),bRe.forEach(t),qIo=i(H),ub=n(H,"LI",{});var vRe=s(ub);hpe=n(vRe,"STRONG",{});var oTt=s(hpe);jIo=r(oTt,"xlm-roberta"),oTt.forEach(t),DIo=r(vRe," \u2014 "),LV=n(vRe,"A",{href:!0});var rTt=s(LV);GIo=r(rTt,"XLMRobertaForMaskedLM"),rTt.forEach(t),OIo=r(vRe," (XLM-RoBERTa model)"),vRe.forEach(t),VIo=i(H),bb=n(H,"LI",{});var FRe=s(bb);ppe=n(FRe,"STRONG",{});var tTt=s(ppe);XIo=r(tTt,"xlm-roberta-xl"),tTt.forEach(t),zIo=r(FRe," \u2014 "),yV=n(FRe,"A",{href:!0});var aTt=s(yV);QIo=r(aTt,"XLMRobertaXLForMaskedLM"),aTt.forEach(t),WIo=r(FRe," (XLM-RoBERTa-XL model)"),FRe.forEach(t),HIo=i(H),vb=n(H,"LI",{});var TRe=s(vb);_pe=n(TRe,"STRONG",{});var nTt=s(_pe);UIo=r(nTt,"yoso"),nTt.forEach(t),JIo=r(TRe," \u2014 "),xV=n(TRe,"A",{href:!0});var sTt=s(xV);YIo=r(sTt,"YosoForMaskedLM"),sTt.forEach(t),KIo=r(TRe," (YOSO model)"),TRe.forEach(t),H.forEach(t),ZIo=i(ca),Fb=n(ca,"P",{});var MRe=s(Fb);eqo=r(MRe,"The model is set in evaluation mode by default using "),upe=n(MRe,"CODE",{});var lTt=s(upe);oqo=r(lTt,"model.eval()"),lTt.forEach(t),rqo=r(MRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=n(MRe,"CODE",{});var iTt=s(bpe);tqo=r(iTt,"model.train()"),iTt.forEach(t),MRe.forEach(t),aqo=i(ca),T(Tb.$$.fragment,ca),ca.forEach(t),sl.forEach(t),kXe=i(f),ed=n(f,"H2",{class:!0});var IQe=s(ed);Mb=n(IQe,"A",{id:!0,class:!0,href:!0});var dTt=s(Mb);vpe=n(dTt,"SPAN",{});var cTt=s(vpe);T(Z6.$$.fragment,cTt),cTt.forEach(t),dTt.forEach(t),nqo=i(IQe),Fpe=n(IQe,"SPAN",{});var fTt=s(Fpe);sqo=r(fTt,"AutoModelForSeq2SeqLM"),fTt.forEach(t),IQe.forEach(t),SXe=i(f),Po=n(f,"DIV",{class:!0});var ll=s(Po);T(eL.$$.fragment,ll),lqo=i(ll),od=n(ll,"P",{});var Wre=s(od);iqo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$V=n(Wre,"A",{href:!0});var mTt=s($V);dqo=r(mTt,"from_pretrained()"),mTt.forEach(t),cqo=r(Wre," class method or the "),kV=n(Wre,"A",{href:!0});var gTt=s(kV);fqo=r(gTt,"from_config()"),gTt.forEach(t),mqo=r(Wre,` class
method.`),Wre.forEach(t),gqo=i(ll),oL=n(ll,"P",{});var qQe=s(oL);hqo=r(qQe,"This class cannot be instantiated directly using "),Tpe=n(qQe,"CODE",{});var hTt=s(Tpe);pqo=r(hTt,"__init__()"),hTt.forEach(t),_qo=r(qQe," (throws an error)."),qQe.forEach(t),uqo=i(ll),mt=n(ll,"DIV",{class:!0});var vw=s(mt);T(rL.$$.fragment,vw),bqo=i(vw),Mpe=n(vw,"P",{});var pTt=s(Mpe);vqo=r(pTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pTt.forEach(t),Fqo=i(vw),rd=n(vw,"P",{});var Hre=s(rd);Tqo=r(Hre,`Note:
Loading a model from its configuration file does `),Epe=n(Hre,"STRONG",{});var _Tt=s(Epe);Mqo=r(_Tt,"not"),_Tt.forEach(t),Eqo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=n(Hre,"A",{href:!0});var uTt=s(SV);Cqo=r(uTt,"from_pretrained()"),uTt.forEach(t),wqo=r(Hre," to load the model weights."),Hre.forEach(t),Aqo=i(vw),T(Eb.$$.fragment,vw),vw.forEach(t),Lqo=i(ll),oo=n(ll,"DIV",{class:!0});var fa=s(oo);T(tL.$$.fragment,fa),yqo=i(fa),Cpe=n(fa,"P",{});var bTt=s(Cpe);xqo=r(bTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bTt.forEach(t),$qo=i(fa),Da=n(fa,"P",{});var Fw=s(Da);kqo=r(Fw,"The model class to instantiate is selected based on the "),wpe=n(Fw,"CODE",{});var vTt=s(wpe);Sqo=r(vTt,"model_type"),vTt.forEach(t),Rqo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Ape=n(Fw,"CODE",{});var FTt=s(Ape);Pqo=r(FTt,"pretrained_model_name_or_path"),FTt.forEach(t),Bqo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=n(Fw,"CODE",{});var TTt=s(Lpe);Nqo=r(TTt,"pretrained_model_name_or_path"),TTt.forEach(t),Iqo=r(Fw,":"),Fw.forEach(t),qqo=i(fa),fe=n(fa,"UL",{});var _e=s(fe);Cb=n(_e,"LI",{});var ERe=s(Cb);ype=n(ERe,"STRONG",{});var MTt=s(ype);jqo=r(MTt,"bart"),MTt.forEach(t),Dqo=r(ERe," \u2014 "),RV=n(ERe,"A",{href:!0});var ETt=s(RV);Gqo=r(ETt,"BartForConditionalGeneration"),ETt.forEach(t),Oqo=r(ERe," (BART model)"),ERe.forEach(t),Vqo=i(_e),wb=n(_e,"LI",{});var CRe=s(wb);xpe=n(CRe,"STRONG",{});var CTt=s(xpe);Xqo=r(CTt,"bigbird_pegasus"),CTt.forEach(t),zqo=r(CRe," \u2014 "),PV=n(CRe,"A",{href:!0});var wTt=s(PV);Qqo=r(wTt,"BigBirdPegasusForConditionalGeneration"),wTt.forEach(t),Wqo=r(CRe," (BigBird-Pegasus model)"),CRe.forEach(t),Hqo=i(_e),Ab=n(_e,"LI",{});var wRe=s(Ab);$pe=n(wRe,"STRONG",{});var ATt=s($pe);Uqo=r(ATt,"blenderbot"),ATt.forEach(t),Jqo=r(wRe," \u2014 "),BV=n(wRe,"A",{href:!0});var LTt=s(BV);Yqo=r(LTt,"BlenderbotForConditionalGeneration"),LTt.forEach(t),Kqo=r(wRe," (Blenderbot model)"),wRe.forEach(t),Zqo=i(_e),Lb=n(_e,"LI",{});var ARe=s(Lb);kpe=n(ARe,"STRONG",{});var yTt=s(kpe);ejo=r(yTt,"blenderbot-small"),yTt.forEach(t),ojo=r(ARe," \u2014 "),NV=n(ARe,"A",{href:!0});var xTt=s(NV);rjo=r(xTt,"BlenderbotSmallForConditionalGeneration"),xTt.forEach(t),tjo=r(ARe," (BlenderbotSmall model)"),ARe.forEach(t),ajo=i(_e),yb=n(_e,"LI",{});var LRe=s(yb);Spe=n(LRe,"STRONG",{});var $Tt=s(Spe);njo=r($Tt,"encoder-decoder"),$Tt.forEach(t),sjo=r(LRe," \u2014 "),IV=n(LRe,"A",{href:!0});var kTt=s(IV);ljo=r(kTt,"EncoderDecoderModel"),kTt.forEach(t),ijo=r(LRe," (Encoder decoder model)"),LRe.forEach(t),djo=i(_e),xb=n(_e,"LI",{});var yRe=s(xb);Rpe=n(yRe,"STRONG",{});var STt=s(Rpe);cjo=r(STt,"fsmt"),STt.forEach(t),fjo=r(yRe," \u2014 "),qV=n(yRe,"A",{href:!0});var RTt=s(qV);mjo=r(RTt,"FSMTForConditionalGeneration"),RTt.forEach(t),gjo=r(yRe," (FairSeq Machine-Translation model)"),yRe.forEach(t),hjo=i(_e),$b=n(_e,"LI",{});var xRe=s($b);Ppe=n(xRe,"STRONG",{});var PTt=s(Ppe);pjo=r(PTt,"led"),PTt.forEach(t),_jo=r(xRe," \u2014 "),jV=n(xRe,"A",{href:!0});var BTt=s(jV);ujo=r(BTt,"LEDForConditionalGeneration"),BTt.forEach(t),bjo=r(xRe," (LED model)"),xRe.forEach(t),vjo=i(_e),kb=n(_e,"LI",{});var $Re=s(kb);Bpe=n($Re,"STRONG",{});var NTt=s(Bpe);Fjo=r(NTt,"longt5"),NTt.forEach(t),Tjo=r($Re," \u2014 "),DV=n($Re,"A",{href:!0});var ITt=s(DV);Mjo=r(ITt,"LongT5ForConditionalGeneration"),ITt.forEach(t),Ejo=r($Re," (LongT5 model)"),$Re.forEach(t),Cjo=i(_e),Sb=n(_e,"LI",{});var kRe=s(Sb);Npe=n(kRe,"STRONG",{});var qTt=s(Npe);wjo=r(qTt,"m2m_100"),qTt.forEach(t),Ajo=r(kRe," \u2014 "),GV=n(kRe,"A",{href:!0});var jTt=s(GV);Ljo=r(jTt,"M2M100ForConditionalGeneration"),jTt.forEach(t),yjo=r(kRe," (M2M100 model)"),kRe.forEach(t),xjo=i(_e),Rb=n(_e,"LI",{});var SRe=s(Rb);Ipe=n(SRe,"STRONG",{});var DTt=s(Ipe);$jo=r(DTt,"marian"),DTt.forEach(t),kjo=r(SRe," \u2014 "),OV=n(SRe,"A",{href:!0});var GTt=s(OV);Sjo=r(GTt,"MarianMTModel"),GTt.forEach(t),Rjo=r(SRe," (Marian model)"),SRe.forEach(t),Pjo=i(_e),Pb=n(_e,"LI",{});var RRe=s(Pb);qpe=n(RRe,"STRONG",{});var OTt=s(qpe);Bjo=r(OTt,"mbart"),OTt.forEach(t),Njo=r(RRe," \u2014 "),VV=n(RRe,"A",{href:!0});var VTt=s(VV);Ijo=r(VTt,"MBartForConditionalGeneration"),VTt.forEach(t),qjo=r(RRe," (mBART model)"),RRe.forEach(t),jjo=i(_e),Bb=n(_e,"LI",{});var PRe=s(Bb);jpe=n(PRe,"STRONG",{});var XTt=s(jpe);Djo=r(XTt,"mt5"),XTt.forEach(t),Gjo=r(PRe," \u2014 "),XV=n(PRe,"A",{href:!0});var zTt=s(XV);Ojo=r(zTt,"MT5ForConditionalGeneration"),zTt.forEach(t),Vjo=r(PRe," (MT5 model)"),PRe.forEach(t),Xjo=i(_e),Nb=n(_e,"LI",{});var BRe=s(Nb);Dpe=n(BRe,"STRONG",{});var QTt=s(Dpe);zjo=r(QTt,"mvp"),QTt.forEach(t),Qjo=r(BRe," \u2014 "),zV=n(BRe,"A",{href:!0});var WTt=s(zV);Wjo=r(WTt,"MvpForConditionalGeneration"),WTt.forEach(t),Hjo=r(BRe," (MVP model)"),BRe.forEach(t),Ujo=i(_e),Ib=n(_e,"LI",{});var NRe=s(Ib);Gpe=n(NRe,"STRONG",{});var HTt=s(Gpe);Jjo=r(HTt,"nllb"),HTt.forEach(t),Yjo=r(NRe," \u2014 "),QV=n(NRe,"A",{href:!0});var UTt=s(QV);Kjo=r(UTt,"M2M100ForConditionalGeneration"),UTt.forEach(t),Zjo=r(NRe," (NLLB model)"),NRe.forEach(t),eDo=i(_e),qb=n(_e,"LI",{});var IRe=s(qb);Ope=n(IRe,"STRONG",{});var JTt=s(Ope);oDo=r(JTt,"pegasus"),JTt.forEach(t),rDo=r(IRe," \u2014 "),WV=n(IRe,"A",{href:!0});var YTt=s(WV);tDo=r(YTt,"PegasusForConditionalGeneration"),YTt.forEach(t),aDo=r(IRe," (Pegasus model)"),IRe.forEach(t),nDo=i(_e),jb=n(_e,"LI",{});var qRe=s(jb);Vpe=n(qRe,"STRONG",{});var KTt=s(Vpe);sDo=r(KTt,"plbart"),KTt.forEach(t),lDo=r(qRe," \u2014 "),HV=n(qRe,"A",{href:!0});var ZTt=s(HV);iDo=r(ZTt,"PLBartForConditionalGeneration"),ZTt.forEach(t),dDo=r(qRe," (PLBart model)"),qRe.forEach(t),cDo=i(_e),Db=n(_e,"LI",{});var jRe=s(Db);Xpe=n(jRe,"STRONG",{});var e7t=s(Xpe);fDo=r(e7t,"prophetnet"),e7t.forEach(t),mDo=r(jRe," \u2014 "),UV=n(jRe,"A",{href:!0});var o7t=s(UV);gDo=r(o7t,"ProphetNetForConditionalGeneration"),o7t.forEach(t),hDo=r(jRe," (ProphetNet model)"),jRe.forEach(t),pDo=i(_e),Gb=n(_e,"LI",{});var DRe=s(Gb);zpe=n(DRe,"STRONG",{});var r7t=s(zpe);_Do=r(r7t,"t5"),r7t.forEach(t),uDo=r(DRe," \u2014 "),JV=n(DRe,"A",{href:!0});var t7t=s(JV);bDo=r(t7t,"T5ForConditionalGeneration"),t7t.forEach(t),vDo=r(DRe," (T5 model)"),DRe.forEach(t),FDo=i(_e),Ob=n(_e,"LI",{});var GRe=s(Ob);Qpe=n(GRe,"STRONG",{});var a7t=s(Qpe);TDo=r(a7t,"xlm-prophetnet"),a7t.forEach(t),MDo=r(GRe," \u2014 "),YV=n(GRe,"A",{href:!0});var n7t=s(YV);EDo=r(n7t,"XLMProphetNetForConditionalGeneration"),n7t.forEach(t),CDo=r(GRe," (XLM-ProphetNet model)"),GRe.forEach(t),_e.forEach(t),wDo=i(fa),Vb=n(fa,"P",{});var ORe=s(Vb);ADo=r(ORe,"The model is set in evaluation mode by default using "),Wpe=n(ORe,"CODE",{});var s7t=s(Wpe);LDo=r(s7t,"model.eval()"),s7t.forEach(t),yDo=r(ORe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n(ORe,"CODE",{});var l7t=s(Hpe);xDo=r(l7t,"model.train()"),l7t.forEach(t),ORe.forEach(t),$Do=i(fa),T(Xb.$$.fragment,fa),fa.forEach(t),ll.forEach(t),RXe=i(f),td=n(f,"H2",{class:!0});var jQe=s(td);zb=n(jQe,"A",{id:!0,class:!0,href:!0});var i7t=s(zb);Upe=n(i7t,"SPAN",{});var d7t=s(Upe);T(aL.$$.fragment,d7t),d7t.forEach(t),i7t.forEach(t),kDo=i(jQe),Jpe=n(jQe,"SPAN",{});var c7t=s(Jpe);SDo=r(c7t,"AutoModelForSequenceClassification"),c7t.forEach(t),jQe.forEach(t),PXe=i(f),Bo=n(f,"DIV",{class:!0});var il=s(Bo);T(nL.$$.fragment,il),RDo=i(il),ad=n(il,"P",{});var Ure=s(ad);PDo=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KV=n(Ure,"A",{href:!0});var f7t=s(KV);BDo=r(f7t,"from_pretrained()"),f7t.forEach(t),NDo=r(Ure," class method or the "),ZV=n(Ure,"A",{href:!0});var m7t=s(ZV);IDo=r(m7t,"from_config()"),m7t.forEach(t),qDo=r(Ure,` class
method.`),Ure.forEach(t),jDo=i(il),sL=n(il,"P",{});var DQe=s(sL);DDo=r(DQe,"This class cannot be instantiated directly using "),Ype=n(DQe,"CODE",{});var g7t=s(Ype);GDo=r(g7t,"__init__()"),g7t.forEach(t),ODo=r(DQe," (throws an error)."),DQe.forEach(t),VDo=i(il),gt=n(il,"DIV",{class:!0});var Tw=s(gt);T(lL.$$.fragment,Tw),XDo=i(Tw),Kpe=n(Tw,"P",{});var h7t=s(Kpe);zDo=r(h7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),h7t.forEach(t),QDo=i(Tw),nd=n(Tw,"P",{});var Jre=s(nd);WDo=r(Jre,`Note:
Loading a model from its configuration file does `),Zpe=n(Jre,"STRONG",{});var p7t=s(Zpe);HDo=r(p7t,"not"),p7t.forEach(t),UDo=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(Jre,"A",{href:!0});var _7t=s(eX);JDo=r(_7t,"from_pretrained()"),_7t.forEach(t),YDo=r(Jre," to load the model weights."),Jre.forEach(t),KDo=i(Tw),T(Qb.$$.fragment,Tw),Tw.forEach(t),ZDo=i(il),ro=n(il,"DIV",{class:!0});var ma=s(ro);T(iL.$$.fragment,ma),eGo=i(ma),e_e=n(ma,"P",{});var u7t=s(e_e);oGo=r(u7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),u7t.forEach(t),rGo=i(ma),Ga=n(ma,"P",{});var Mw=s(Ga);tGo=r(Mw,"The model class to instantiate is selected based on the "),o_e=n(Mw,"CODE",{});var b7t=s(o_e);aGo=r(b7t,"model_type"),b7t.forEach(t),nGo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),r_e=n(Mw,"CODE",{});var v7t=s(r_e);sGo=r(v7t,"pretrained_model_name_or_path"),v7t.forEach(t),lGo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(Mw,"CODE",{});var F7t=s(t_e);iGo=r(F7t,"pretrained_model_name_or_path"),F7t.forEach(t),dGo=r(Mw,":"),Mw.forEach(t),cGo=i(ma),I=n(ma,"UL",{});var j=s(I);Wb=n(j,"LI",{});var VRe=s(Wb);a_e=n(VRe,"STRONG",{});var T7t=s(a_e);fGo=r(T7t,"albert"),T7t.forEach(t),mGo=r(VRe," \u2014 "),oX=n(VRe,"A",{href:!0});var M7t=s(oX);gGo=r(M7t,"AlbertForSequenceClassification"),M7t.forEach(t),hGo=r(VRe," (ALBERT model)"),VRe.forEach(t),pGo=i(j),Hb=n(j,"LI",{});var XRe=s(Hb);n_e=n(XRe,"STRONG",{});var E7t=s(n_e);_Go=r(E7t,"bart"),E7t.forEach(t),uGo=r(XRe," \u2014 "),rX=n(XRe,"A",{href:!0});var C7t=s(rX);bGo=r(C7t,"BartForSequenceClassification"),C7t.forEach(t),vGo=r(XRe," (BART model)"),XRe.forEach(t),FGo=i(j),Ub=n(j,"LI",{});var zRe=s(Ub);s_e=n(zRe,"STRONG",{});var w7t=s(s_e);TGo=r(w7t,"bert"),w7t.forEach(t),MGo=r(zRe," \u2014 "),tX=n(zRe,"A",{href:!0});var A7t=s(tX);EGo=r(A7t,"BertForSequenceClassification"),A7t.forEach(t),CGo=r(zRe," (BERT model)"),zRe.forEach(t),wGo=i(j),Jb=n(j,"LI",{});var QRe=s(Jb);l_e=n(QRe,"STRONG",{});var L7t=s(l_e);AGo=r(L7t,"big_bird"),L7t.forEach(t),LGo=r(QRe," \u2014 "),aX=n(QRe,"A",{href:!0});var y7t=s(aX);yGo=r(y7t,"BigBirdForSequenceClassification"),y7t.forEach(t),xGo=r(QRe," (BigBird model)"),QRe.forEach(t),$Go=i(j),Yb=n(j,"LI",{});var WRe=s(Yb);i_e=n(WRe,"STRONG",{});var x7t=s(i_e);kGo=r(x7t,"bigbird_pegasus"),x7t.forEach(t),SGo=r(WRe," \u2014 "),nX=n(WRe,"A",{href:!0});var $7t=s(nX);RGo=r($7t,"BigBirdPegasusForSequenceClassification"),$7t.forEach(t),PGo=r(WRe," (BigBird-Pegasus model)"),WRe.forEach(t),BGo=i(j),Kb=n(j,"LI",{});var HRe=s(Kb);d_e=n(HRe,"STRONG",{});var k7t=s(d_e);NGo=r(k7t,"bloom"),k7t.forEach(t),IGo=r(HRe," \u2014 "),sX=n(HRe,"A",{href:!0});var S7t=s(sX);qGo=r(S7t,"BloomForSequenceClassification"),S7t.forEach(t),jGo=r(HRe," (BLOOM model)"),HRe.forEach(t),DGo=i(j),Zb=n(j,"LI",{});var URe=s(Zb);c_e=n(URe,"STRONG",{});var R7t=s(c_e);GGo=r(R7t,"camembert"),R7t.forEach(t),OGo=r(URe," \u2014 "),lX=n(URe,"A",{href:!0});var P7t=s(lX);VGo=r(P7t,"CamembertForSequenceClassification"),P7t.forEach(t),XGo=r(URe," (CamemBERT model)"),URe.forEach(t),zGo=i(j),ev=n(j,"LI",{});var JRe=s(ev);f_e=n(JRe,"STRONG",{});var B7t=s(f_e);QGo=r(B7t,"canine"),B7t.forEach(t),WGo=r(JRe," \u2014 "),iX=n(JRe,"A",{href:!0});var N7t=s(iX);HGo=r(N7t,"CanineForSequenceClassification"),N7t.forEach(t),UGo=r(JRe," (CANINE model)"),JRe.forEach(t),JGo=i(j),ov=n(j,"LI",{});var YRe=s(ov);m_e=n(YRe,"STRONG",{});var I7t=s(m_e);YGo=r(I7t,"convbert"),I7t.forEach(t),KGo=r(YRe," \u2014 "),dX=n(YRe,"A",{href:!0});var q7t=s(dX);ZGo=r(q7t,"ConvBertForSequenceClassification"),q7t.forEach(t),eOo=r(YRe," (ConvBERT model)"),YRe.forEach(t),oOo=i(j),rv=n(j,"LI",{});var KRe=s(rv);g_e=n(KRe,"STRONG",{});var j7t=s(g_e);rOo=r(j7t,"ctrl"),j7t.forEach(t),tOo=r(KRe," \u2014 "),cX=n(KRe,"A",{href:!0});var D7t=s(cX);aOo=r(D7t,"CTRLForSequenceClassification"),D7t.forEach(t),nOo=r(KRe," (CTRL model)"),KRe.forEach(t),sOo=i(j),tv=n(j,"LI",{});var ZRe=s(tv);h_e=n(ZRe,"STRONG",{});var G7t=s(h_e);lOo=r(G7t,"data2vec-text"),G7t.forEach(t),iOo=r(ZRe," \u2014 "),fX=n(ZRe,"A",{href:!0});var O7t=s(fX);dOo=r(O7t,"Data2VecTextForSequenceClassification"),O7t.forEach(t),cOo=r(ZRe," (Data2VecText model)"),ZRe.forEach(t),fOo=i(j),av=n(j,"LI",{});var ePe=s(av);p_e=n(ePe,"STRONG",{});var V7t=s(p_e);mOo=r(V7t,"deberta"),V7t.forEach(t),gOo=r(ePe," \u2014 "),mX=n(ePe,"A",{href:!0});var X7t=s(mX);hOo=r(X7t,"DebertaForSequenceClassification"),X7t.forEach(t),pOo=r(ePe," (DeBERTa model)"),ePe.forEach(t),_Oo=i(j),nv=n(j,"LI",{});var oPe=s(nv);__e=n(oPe,"STRONG",{});var z7t=s(__e);uOo=r(z7t,"deberta-v2"),z7t.forEach(t),bOo=r(oPe," \u2014 "),gX=n(oPe,"A",{href:!0});var Q7t=s(gX);vOo=r(Q7t,"DebertaV2ForSequenceClassification"),Q7t.forEach(t),FOo=r(oPe," (DeBERTa-v2 model)"),oPe.forEach(t),TOo=i(j),sv=n(j,"LI",{});var rPe=s(sv);u_e=n(rPe,"STRONG",{});var W7t=s(u_e);MOo=r(W7t,"distilbert"),W7t.forEach(t),EOo=r(rPe," \u2014 "),hX=n(rPe,"A",{href:!0});var H7t=s(hX);COo=r(H7t,"DistilBertForSequenceClassification"),H7t.forEach(t),wOo=r(rPe," (DistilBERT model)"),rPe.forEach(t),AOo=i(j),lv=n(j,"LI",{});var tPe=s(lv);b_e=n(tPe,"STRONG",{});var U7t=s(b_e);LOo=r(U7t,"electra"),U7t.forEach(t),yOo=r(tPe," \u2014 "),pX=n(tPe,"A",{href:!0});var J7t=s(pX);xOo=r(J7t,"ElectraForSequenceClassification"),J7t.forEach(t),$Oo=r(tPe," (ELECTRA model)"),tPe.forEach(t),kOo=i(j),iv=n(j,"LI",{});var aPe=s(iv);v_e=n(aPe,"STRONG",{});var Y7t=s(v_e);SOo=r(Y7t,"flaubert"),Y7t.forEach(t),ROo=r(aPe," \u2014 "),_X=n(aPe,"A",{href:!0});var K7t=s(_X);POo=r(K7t,"FlaubertForSequenceClassification"),K7t.forEach(t),BOo=r(aPe," (FlauBERT model)"),aPe.forEach(t),NOo=i(j),dv=n(j,"LI",{});var nPe=s(dv);F_e=n(nPe,"STRONG",{});var Z7t=s(F_e);IOo=r(Z7t,"fnet"),Z7t.forEach(t),qOo=r(nPe," \u2014 "),uX=n(nPe,"A",{href:!0});var e8t=s(uX);jOo=r(e8t,"FNetForSequenceClassification"),e8t.forEach(t),DOo=r(nPe," (FNet model)"),nPe.forEach(t),GOo=i(j),cv=n(j,"LI",{});var sPe=s(cv);T_e=n(sPe,"STRONG",{});var o8t=s(T_e);OOo=r(o8t,"funnel"),o8t.forEach(t),VOo=r(sPe," \u2014 "),bX=n(sPe,"A",{href:!0});var r8t=s(bX);XOo=r(r8t,"FunnelForSequenceClassification"),r8t.forEach(t),zOo=r(sPe," (Funnel Transformer model)"),sPe.forEach(t),QOo=i(j),fv=n(j,"LI",{});var lPe=s(fv);M_e=n(lPe,"STRONG",{});var t8t=s(M_e);WOo=r(t8t,"gpt2"),t8t.forEach(t),HOo=r(lPe," \u2014 "),vX=n(lPe,"A",{href:!0});var a8t=s(vX);UOo=r(a8t,"GPT2ForSequenceClassification"),a8t.forEach(t),JOo=r(lPe," (OpenAI GPT-2 model)"),lPe.forEach(t),YOo=i(j),mv=n(j,"LI",{});var iPe=s(mv);E_e=n(iPe,"STRONG",{});var n8t=s(E_e);KOo=r(n8t,"gpt_neo"),n8t.forEach(t),ZOo=r(iPe," \u2014 "),FX=n(iPe,"A",{href:!0});var s8t=s(FX);eVo=r(s8t,"GPTNeoForSequenceClassification"),s8t.forEach(t),oVo=r(iPe," (GPT Neo model)"),iPe.forEach(t),rVo=i(j),gv=n(j,"LI",{});var dPe=s(gv);C_e=n(dPe,"STRONG",{});var l8t=s(C_e);tVo=r(l8t,"gptj"),l8t.forEach(t),aVo=r(dPe," \u2014 "),TX=n(dPe,"A",{href:!0});var i8t=s(TX);nVo=r(i8t,"GPTJForSequenceClassification"),i8t.forEach(t),sVo=r(dPe," (GPT-J model)"),dPe.forEach(t),lVo=i(j),hv=n(j,"LI",{});var cPe=s(hv);w_e=n(cPe,"STRONG",{});var d8t=s(w_e);iVo=r(d8t,"ibert"),d8t.forEach(t),dVo=r(cPe," \u2014 "),MX=n(cPe,"A",{href:!0});var c8t=s(MX);cVo=r(c8t,"IBertForSequenceClassification"),c8t.forEach(t),fVo=r(cPe," (I-BERT model)"),cPe.forEach(t),mVo=i(j),pv=n(j,"LI",{});var fPe=s(pv);A_e=n(fPe,"STRONG",{});var f8t=s(A_e);gVo=r(f8t,"layoutlm"),f8t.forEach(t),hVo=r(fPe," \u2014 "),EX=n(fPe,"A",{href:!0});var m8t=s(EX);pVo=r(m8t,"LayoutLMForSequenceClassification"),m8t.forEach(t),_Vo=r(fPe," (LayoutLM model)"),fPe.forEach(t),uVo=i(j),_v=n(j,"LI",{});var mPe=s(_v);L_e=n(mPe,"STRONG",{});var g8t=s(L_e);bVo=r(g8t,"layoutlmv2"),g8t.forEach(t),vVo=r(mPe," \u2014 "),CX=n(mPe,"A",{href:!0});var h8t=s(CX);FVo=r(h8t,"LayoutLMv2ForSequenceClassification"),h8t.forEach(t),TVo=r(mPe," (LayoutLMv2 model)"),mPe.forEach(t),MVo=i(j),uv=n(j,"LI",{});var gPe=s(uv);y_e=n(gPe,"STRONG",{});var p8t=s(y_e);EVo=r(p8t,"layoutlmv3"),p8t.forEach(t),CVo=r(gPe," \u2014 "),wX=n(gPe,"A",{href:!0});var _8t=s(wX);wVo=r(_8t,"LayoutLMv3ForSequenceClassification"),_8t.forEach(t),AVo=r(gPe," (LayoutLMv3 model)"),gPe.forEach(t),LVo=i(j),bv=n(j,"LI",{});var hPe=s(bv);x_e=n(hPe,"STRONG",{});var u8t=s(x_e);yVo=r(u8t,"led"),u8t.forEach(t),xVo=r(hPe," \u2014 "),AX=n(hPe,"A",{href:!0});var b8t=s(AX);$Vo=r(b8t,"LEDForSequenceClassification"),b8t.forEach(t),kVo=r(hPe," (LED model)"),hPe.forEach(t),SVo=i(j),vv=n(j,"LI",{});var pPe=s(vv);$_e=n(pPe,"STRONG",{});var v8t=s($_e);RVo=r(v8t,"longformer"),v8t.forEach(t),PVo=r(pPe," \u2014 "),LX=n(pPe,"A",{href:!0});var F8t=s(LX);BVo=r(F8t,"LongformerForSequenceClassification"),F8t.forEach(t),NVo=r(pPe," (Longformer model)"),pPe.forEach(t),IVo=i(j),Fv=n(j,"LI",{});var _Pe=s(Fv);k_e=n(_Pe,"STRONG",{});var T8t=s(k_e);qVo=r(T8t,"mbart"),T8t.forEach(t),jVo=r(_Pe," \u2014 "),yX=n(_Pe,"A",{href:!0});var M8t=s(yX);DVo=r(M8t,"MBartForSequenceClassification"),M8t.forEach(t),GVo=r(_Pe," (mBART model)"),_Pe.forEach(t),OVo=i(j),Tv=n(j,"LI",{});var uPe=s(Tv);S_e=n(uPe,"STRONG",{});var E8t=s(S_e);VVo=r(E8t,"megatron-bert"),E8t.forEach(t),XVo=r(uPe," \u2014 "),xX=n(uPe,"A",{href:!0});var C8t=s(xX);zVo=r(C8t,"MegatronBertForSequenceClassification"),C8t.forEach(t),QVo=r(uPe," (Megatron-BERT model)"),uPe.forEach(t),WVo=i(j),Mv=n(j,"LI",{});var bPe=s(Mv);R_e=n(bPe,"STRONG",{});var w8t=s(R_e);HVo=r(w8t,"mobilebert"),w8t.forEach(t),UVo=r(bPe," \u2014 "),$X=n(bPe,"A",{href:!0});var A8t=s($X);JVo=r(A8t,"MobileBertForSequenceClassification"),A8t.forEach(t),YVo=r(bPe," (MobileBERT model)"),bPe.forEach(t),KVo=i(j),Ev=n(j,"LI",{});var vPe=s(Ev);P_e=n(vPe,"STRONG",{});var L8t=s(P_e);ZVo=r(L8t,"mpnet"),L8t.forEach(t),eXo=r(vPe," \u2014 "),kX=n(vPe,"A",{href:!0});var y8t=s(kX);oXo=r(y8t,"MPNetForSequenceClassification"),y8t.forEach(t),rXo=r(vPe," (MPNet model)"),vPe.forEach(t),tXo=i(j),Cv=n(j,"LI",{});var FPe=s(Cv);B_e=n(FPe,"STRONG",{});var x8t=s(B_e);aXo=r(x8t,"mvp"),x8t.forEach(t),nXo=r(FPe," \u2014 "),SX=n(FPe,"A",{href:!0});var $8t=s(SX);sXo=r($8t,"MvpForSequenceClassification"),$8t.forEach(t),lXo=r(FPe," (MVP model)"),FPe.forEach(t),iXo=i(j),wv=n(j,"LI",{});var TPe=s(wv);N_e=n(TPe,"STRONG",{});var k8t=s(N_e);dXo=r(k8t,"nezha"),k8t.forEach(t),cXo=r(TPe," \u2014 "),RX=n(TPe,"A",{href:!0});var S8t=s(RX);fXo=r(S8t,"NezhaForSequenceClassification"),S8t.forEach(t),mXo=r(TPe," (Nezha model)"),TPe.forEach(t),gXo=i(j),Av=n(j,"LI",{});var MPe=s(Av);I_e=n(MPe,"STRONG",{});var R8t=s(I_e);hXo=r(R8t,"nystromformer"),R8t.forEach(t),pXo=r(MPe," \u2014 "),PX=n(MPe,"A",{href:!0});var P8t=s(PX);_Xo=r(P8t,"NystromformerForSequenceClassification"),P8t.forEach(t),uXo=r(MPe," (Nystr\xF6mformer model)"),MPe.forEach(t),bXo=i(j),Lv=n(j,"LI",{});var EPe=s(Lv);q_e=n(EPe,"STRONG",{});var B8t=s(q_e);vXo=r(B8t,"openai-gpt"),B8t.forEach(t),FXo=r(EPe," \u2014 "),BX=n(EPe,"A",{href:!0});var N8t=s(BX);TXo=r(N8t,"OpenAIGPTForSequenceClassification"),N8t.forEach(t),MXo=r(EPe," (OpenAI GPT model)"),EPe.forEach(t),EXo=i(j),yv=n(j,"LI",{});var CPe=s(yv);j_e=n(CPe,"STRONG",{});var I8t=s(j_e);CXo=r(I8t,"perceiver"),I8t.forEach(t),wXo=r(CPe," \u2014 "),NX=n(CPe,"A",{href:!0});var q8t=s(NX);AXo=r(q8t,"PerceiverForSequenceClassification"),q8t.forEach(t),LXo=r(CPe," (Perceiver model)"),CPe.forEach(t),yXo=i(j),xv=n(j,"LI",{});var wPe=s(xv);D_e=n(wPe,"STRONG",{});var j8t=s(D_e);xXo=r(j8t,"plbart"),j8t.forEach(t),$Xo=r(wPe," \u2014 "),IX=n(wPe,"A",{href:!0});var D8t=s(IX);kXo=r(D8t,"PLBartForSequenceClassification"),D8t.forEach(t),SXo=r(wPe," (PLBart model)"),wPe.forEach(t),RXo=i(j),$v=n(j,"LI",{});var APe=s($v);G_e=n(APe,"STRONG",{});var G8t=s(G_e);PXo=r(G8t,"qdqbert"),G8t.forEach(t),BXo=r(APe," \u2014 "),qX=n(APe,"A",{href:!0});var O8t=s(qX);NXo=r(O8t,"QDQBertForSequenceClassification"),O8t.forEach(t),IXo=r(APe," (QDQBert model)"),APe.forEach(t),qXo=i(j),kv=n(j,"LI",{});var LPe=s(kv);O_e=n(LPe,"STRONG",{});var V8t=s(O_e);jXo=r(V8t,"reformer"),V8t.forEach(t),DXo=r(LPe," \u2014 "),jX=n(LPe,"A",{href:!0});var X8t=s(jX);GXo=r(X8t,"ReformerForSequenceClassification"),X8t.forEach(t),OXo=r(LPe," (Reformer model)"),LPe.forEach(t),VXo=i(j),Sv=n(j,"LI",{});var yPe=s(Sv);V_e=n(yPe,"STRONG",{});var z8t=s(V_e);XXo=r(z8t,"rembert"),z8t.forEach(t),zXo=r(yPe," \u2014 "),DX=n(yPe,"A",{href:!0});var Q8t=s(DX);QXo=r(Q8t,"RemBertForSequenceClassification"),Q8t.forEach(t),WXo=r(yPe," (RemBERT model)"),yPe.forEach(t),HXo=i(j),Rv=n(j,"LI",{});var xPe=s(Rv);X_e=n(xPe,"STRONG",{});var W8t=s(X_e);UXo=r(W8t,"roberta"),W8t.forEach(t),JXo=r(xPe," \u2014 "),GX=n(xPe,"A",{href:!0});var H8t=s(GX);YXo=r(H8t,"RobertaForSequenceClassification"),H8t.forEach(t),KXo=r(xPe," (RoBERTa model)"),xPe.forEach(t),ZXo=i(j),Pv=n(j,"LI",{});var $Pe=s(Pv);z_e=n($Pe,"STRONG",{});var U8t=s(z_e);ezo=r(U8t,"roformer"),U8t.forEach(t),ozo=r($Pe," \u2014 "),OX=n($Pe,"A",{href:!0});var J8t=s(OX);rzo=r(J8t,"RoFormerForSequenceClassification"),J8t.forEach(t),tzo=r($Pe," (RoFormer model)"),$Pe.forEach(t),azo=i(j),Bv=n(j,"LI",{});var kPe=s(Bv);Q_e=n(kPe,"STRONG",{});var Y8t=s(Q_e);nzo=r(Y8t,"squeezebert"),Y8t.forEach(t),szo=r(kPe," \u2014 "),VX=n(kPe,"A",{href:!0});var K8t=s(VX);lzo=r(K8t,"SqueezeBertForSequenceClassification"),K8t.forEach(t),izo=r(kPe," (SqueezeBERT model)"),kPe.forEach(t),dzo=i(j),Nv=n(j,"LI",{});var SPe=s(Nv);W_e=n(SPe,"STRONG",{});var Z8t=s(W_e);czo=r(Z8t,"tapas"),Z8t.forEach(t),fzo=r(SPe," \u2014 "),XX=n(SPe,"A",{href:!0});var e9t=s(XX);mzo=r(e9t,"TapasForSequenceClassification"),e9t.forEach(t),gzo=r(SPe," (TAPAS model)"),SPe.forEach(t),hzo=i(j),Iv=n(j,"LI",{});var RPe=s(Iv);H_e=n(RPe,"STRONG",{});var o9t=s(H_e);pzo=r(o9t,"transfo-xl"),o9t.forEach(t),_zo=r(RPe," \u2014 "),zX=n(RPe,"A",{href:!0});var r9t=s(zX);uzo=r(r9t,"TransfoXLForSequenceClassification"),r9t.forEach(t),bzo=r(RPe," (Transformer-XL model)"),RPe.forEach(t),vzo=i(j),qv=n(j,"LI",{});var PPe=s(qv);U_e=n(PPe,"STRONG",{});var t9t=s(U_e);Fzo=r(t9t,"xlm"),t9t.forEach(t),Tzo=r(PPe," \u2014 "),QX=n(PPe,"A",{href:!0});var a9t=s(QX);Mzo=r(a9t,"XLMForSequenceClassification"),a9t.forEach(t),Ezo=r(PPe," (XLM model)"),PPe.forEach(t),Czo=i(j),jv=n(j,"LI",{});var BPe=s(jv);J_e=n(BPe,"STRONG",{});var n9t=s(J_e);wzo=r(n9t,"xlm-roberta"),n9t.forEach(t),Azo=r(BPe," \u2014 "),WX=n(BPe,"A",{href:!0});var s9t=s(WX);Lzo=r(s9t,"XLMRobertaForSequenceClassification"),s9t.forEach(t),yzo=r(BPe," (XLM-RoBERTa model)"),BPe.forEach(t),xzo=i(j),Dv=n(j,"LI",{});var NPe=s(Dv);Y_e=n(NPe,"STRONG",{});var l9t=s(Y_e);$zo=r(l9t,"xlm-roberta-xl"),l9t.forEach(t),kzo=r(NPe," \u2014 "),HX=n(NPe,"A",{href:!0});var i9t=s(HX);Szo=r(i9t,"XLMRobertaXLForSequenceClassification"),i9t.forEach(t),Rzo=r(NPe," (XLM-RoBERTa-XL model)"),NPe.forEach(t),Pzo=i(j),Gv=n(j,"LI",{});var IPe=s(Gv);K_e=n(IPe,"STRONG",{});var d9t=s(K_e);Bzo=r(d9t,"xlnet"),d9t.forEach(t),Nzo=r(IPe," \u2014 "),UX=n(IPe,"A",{href:!0});var c9t=s(UX);Izo=r(c9t,"XLNetForSequenceClassification"),c9t.forEach(t),qzo=r(IPe," (XLNet model)"),IPe.forEach(t),jzo=i(j),Ov=n(j,"LI",{});var qPe=s(Ov);Z_e=n(qPe,"STRONG",{});var f9t=s(Z_e);Dzo=r(f9t,"yoso"),f9t.forEach(t),Gzo=r(qPe," \u2014 "),JX=n(qPe,"A",{href:!0});var m9t=s(JX);Ozo=r(m9t,"YosoForSequenceClassification"),m9t.forEach(t),Vzo=r(qPe," (YOSO model)"),qPe.forEach(t),j.forEach(t),Xzo=i(ma),Vv=n(ma,"P",{});var jPe=s(Vv);zzo=r(jPe,"The model is set in evaluation mode by default using "),eue=n(jPe,"CODE",{});var g9t=s(eue);Qzo=r(g9t,"model.eval()"),g9t.forEach(t),Wzo=r(jPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oue=n(jPe,"CODE",{});var h9t=s(oue);Hzo=r(h9t,"model.train()"),h9t.forEach(t),jPe.forEach(t),Uzo=i(ma),T(Xv.$$.fragment,ma),ma.forEach(t),il.forEach(t),BXe=i(f),sd=n(f,"H2",{class:!0});var GQe=s(sd);zv=n(GQe,"A",{id:!0,class:!0,href:!0});var p9t=s(zv);rue=n(p9t,"SPAN",{});var _9t=s(rue);T(dL.$$.fragment,_9t),_9t.forEach(t),p9t.forEach(t),Jzo=i(GQe),tue=n(GQe,"SPAN",{});var u9t=s(tue);Yzo=r(u9t,"AutoModelForMultipleChoice"),u9t.forEach(t),GQe.forEach(t),NXe=i(f),No=n(f,"DIV",{class:!0});var dl=s(No);T(cL.$$.fragment,dl),Kzo=i(dl),ld=n(dl,"P",{});var Yre=s(ld);Zzo=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YX=n(Yre,"A",{href:!0});var b9t=s(YX);eQo=r(b9t,"from_pretrained()"),b9t.forEach(t),oQo=r(Yre," class method or the "),KX=n(Yre,"A",{href:!0});var v9t=s(KX);rQo=r(v9t,"from_config()"),v9t.forEach(t),tQo=r(Yre,` class
method.`),Yre.forEach(t),aQo=i(dl),fL=n(dl,"P",{});var OQe=s(fL);nQo=r(OQe,"This class cannot be instantiated directly using "),aue=n(OQe,"CODE",{});var F9t=s(aue);sQo=r(F9t,"__init__()"),F9t.forEach(t),lQo=r(OQe," (throws an error)."),OQe.forEach(t),iQo=i(dl),ht=n(dl,"DIV",{class:!0});var Ew=s(ht);T(mL.$$.fragment,Ew),dQo=i(Ew),nue=n(Ew,"P",{});var T9t=s(nue);cQo=r(T9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),T9t.forEach(t),fQo=i(Ew),id=n(Ew,"P",{});var Kre=s(id);mQo=r(Kre,`Note:
Loading a model from its configuration file does `),sue=n(Kre,"STRONG",{});var M9t=s(sue);gQo=r(M9t,"not"),M9t.forEach(t),hQo=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(Kre,"A",{href:!0});var E9t=s(ZX);pQo=r(E9t,"from_pretrained()"),E9t.forEach(t),_Qo=r(Kre," to load the model weights."),Kre.forEach(t),uQo=i(Ew),T(Qv.$$.fragment,Ew),Ew.forEach(t),bQo=i(dl),to=n(dl,"DIV",{class:!0});var ga=s(to);T(gL.$$.fragment,ga),vQo=i(ga),lue=n(ga,"P",{});var C9t=s(lue);FQo=r(C9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),C9t.forEach(t),TQo=i(ga),Oa=n(ga,"P",{});var Cw=s(Oa);MQo=r(Cw,"The model class to instantiate is selected based on the "),iue=n(Cw,"CODE",{});var w9t=s(iue);EQo=r(w9t,"model_type"),w9t.forEach(t),CQo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),due=n(Cw,"CODE",{});var A9t=s(due);wQo=r(A9t,"pretrained_model_name_or_path"),A9t.forEach(t),AQo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=n(Cw,"CODE",{});var L9t=s(cue);LQo=r(L9t,"pretrained_model_name_or_path"),L9t.forEach(t),yQo=r(Cw,":"),Cw.forEach(t),xQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);Wv=n(ee,"LI",{});var DPe=s(Wv);fue=n(DPe,"STRONG",{});var y9t=s(fue);$Qo=r(y9t,"albert"),y9t.forEach(t),kQo=r(DPe," \u2014 "),ez=n(DPe,"A",{href:!0});var x9t=s(ez);SQo=r(x9t,"AlbertForMultipleChoice"),x9t.forEach(t),RQo=r(DPe," (ALBERT model)"),DPe.forEach(t),PQo=i(ee),Hv=n(ee,"LI",{});var GPe=s(Hv);mue=n(GPe,"STRONG",{});var $9t=s(mue);BQo=r($9t,"bert"),$9t.forEach(t),NQo=r(GPe," \u2014 "),oz=n(GPe,"A",{href:!0});var k9t=s(oz);IQo=r(k9t,"BertForMultipleChoice"),k9t.forEach(t),qQo=r(GPe," (BERT model)"),GPe.forEach(t),jQo=i(ee),Uv=n(ee,"LI",{});var OPe=s(Uv);gue=n(OPe,"STRONG",{});var S9t=s(gue);DQo=r(S9t,"big_bird"),S9t.forEach(t),GQo=r(OPe," \u2014 "),rz=n(OPe,"A",{href:!0});var R9t=s(rz);OQo=r(R9t,"BigBirdForMultipleChoice"),R9t.forEach(t),VQo=r(OPe," (BigBird model)"),OPe.forEach(t),XQo=i(ee),Jv=n(ee,"LI",{});var VPe=s(Jv);hue=n(VPe,"STRONG",{});var P9t=s(hue);zQo=r(P9t,"camembert"),P9t.forEach(t),QQo=r(VPe," \u2014 "),tz=n(VPe,"A",{href:!0});var B9t=s(tz);WQo=r(B9t,"CamembertForMultipleChoice"),B9t.forEach(t),HQo=r(VPe," (CamemBERT model)"),VPe.forEach(t),UQo=i(ee),Yv=n(ee,"LI",{});var XPe=s(Yv);pue=n(XPe,"STRONG",{});var N9t=s(pue);JQo=r(N9t,"canine"),N9t.forEach(t),YQo=r(XPe," \u2014 "),az=n(XPe,"A",{href:!0});var I9t=s(az);KQo=r(I9t,"CanineForMultipleChoice"),I9t.forEach(t),ZQo=r(XPe," (CANINE model)"),XPe.forEach(t),eWo=i(ee),Kv=n(ee,"LI",{});var zPe=s(Kv);_ue=n(zPe,"STRONG",{});var q9t=s(_ue);oWo=r(q9t,"convbert"),q9t.forEach(t),rWo=r(zPe," \u2014 "),nz=n(zPe,"A",{href:!0});var j9t=s(nz);tWo=r(j9t,"ConvBertForMultipleChoice"),j9t.forEach(t),aWo=r(zPe," (ConvBERT model)"),zPe.forEach(t),nWo=i(ee),Zv=n(ee,"LI",{});var QPe=s(Zv);uue=n(QPe,"STRONG",{});var D9t=s(uue);sWo=r(D9t,"data2vec-text"),D9t.forEach(t),lWo=r(QPe," \u2014 "),sz=n(QPe,"A",{href:!0});var G9t=s(sz);iWo=r(G9t,"Data2VecTextForMultipleChoice"),G9t.forEach(t),dWo=r(QPe," (Data2VecText model)"),QPe.forEach(t),cWo=i(ee),e0=n(ee,"LI",{});var WPe=s(e0);bue=n(WPe,"STRONG",{});var O9t=s(bue);fWo=r(O9t,"deberta-v2"),O9t.forEach(t),mWo=r(WPe," \u2014 "),lz=n(WPe,"A",{href:!0});var V9t=s(lz);gWo=r(V9t,"DebertaV2ForMultipleChoice"),V9t.forEach(t),hWo=r(WPe," (DeBERTa-v2 model)"),WPe.forEach(t),pWo=i(ee),o0=n(ee,"LI",{});var HPe=s(o0);vue=n(HPe,"STRONG",{});var X9t=s(vue);_Wo=r(X9t,"distilbert"),X9t.forEach(t),uWo=r(HPe," \u2014 "),iz=n(HPe,"A",{href:!0});var z9t=s(iz);bWo=r(z9t,"DistilBertForMultipleChoice"),z9t.forEach(t),vWo=r(HPe," (DistilBERT model)"),HPe.forEach(t),FWo=i(ee),r0=n(ee,"LI",{});var UPe=s(r0);Fue=n(UPe,"STRONG",{});var Q9t=s(Fue);TWo=r(Q9t,"electra"),Q9t.forEach(t),MWo=r(UPe," \u2014 "),dz=n(UPe,"A",{href:!0});var W9t=s(dz);EWo=r(W9t,"ElectraForMultipleChoice"),W9t.forEach(t),CWo=r(UPe," (ELECTRA model)"),UPe.forEach(t),wWo=i(ee),t0=n(ee,"LI",{});var JPe=s(t0);Tue=n(JPe,"STRONG",{});var H9t=s(Tue);AWo=r(H9t,"flaubert"),H9t.forEach(t),LWo=r(JPe," \u2014 "),cz=n(JPe,"A",{href:!0});var U9t=s(cz);yWo=r(U9t,"FlaubertForMultipleChoice"),U9t.forEach(t),xWo=r(JPe," (FlauBERT model)"),JPe.forEach(t),$Wo=i(ee),a0=n(ee,"LI",{});var YPe=s(a0);Mue=n(YPe,"STRONG",{});var J9t=s(Mue);kWo=r(J9t,"fnet"),J9t.forEach(t),SWo=r(YPe," \u2014 "),fz=n(YPe,"A",{href:!0});var Y9t=s(fz);RWo=r(Y9t,"FNetForMultipleChoice"),Y9t.forEach(t),PWo=r(YPe," (FNet model)"),YPe.forEach(t),BWo=i(ee),n0=n(ee,"LI",{});var KPe=s(n0);Eue=n(KPe,"STRONG",{});var K9t=s(Eue);NWo=r(K9t,"funnel"),K9t.forEach(t),IWo=r(KPe," \u2014 "),mz=n(KPe,"A",{href:!0});var Z9t=s(mz);qWo=r(Z9t,"FunnelForMultipleChoice"),Z9t.forEach(t),jWo=r(KPe," (Funnel Transformer model)"),KPe.forEach(t),DWo=i(ee),s0=n(ee,"LI",{});var ZPe=s(s0);Cue=n(ZPe,"STRONG",{});var eMt=s(Cue);GWo=r(eMt,"ibert"),eMt.forEach(t),OWo=r(ZPe," \u2014 "),gz=n(ZPe,"A",{href:!0});var oMt=s(gz);VWo=r(oMt,"IBertForMultipleChoice"),oMt.forEach(t),XWo=r(ZPe," (I-BERT model)"),ZPe.forEach(t),zWo=i(ee),l0=n(ee,"LI",{});var eBe=s(l0);wue=n(eBe,"STRONG",{});var rMt=s(wue);QWo=r(rMt,"longformer"),rMt.forEach(t),WWo=r(eBe," \u2014 "),hz=n(eBe,"A",{href:!0});var tMt=s(hz);HWo=r(tMt,"LongformerForMultipleChoice"),tMt.forEach(t),UWo=r(eBe," (Longformer model)"),eBe.forEach(t),JWo=i(ee),i0=n(ee,"LI",{});var oBe=s(i0);Aue=n(oBe,"STRONG",{});var aMt=s(Aue);YWo=r(aMt,"megatron-bert"),aMt.forEach(t),KWo=r(oBe," \u2014 "),pz=n(oBe,"A",{href:!0});var nMt=s(pz);ZWo=r(nMt,"MegatronBertForMultipleChoice"),nMt.forEach(t),eHo=r(oBe," (Megatron-BERT model)"),oBe.forEach(t),oHo=i(ee),d0=n(ee,"LI",{});var rBe=s(d0);Lue=n(rBe,"STRONG",{});var sMt=s(Lue);rHo=r(sMt,"mobilebert"),sMt.forEach(t),tHo=r(rBe," \u2014 "),_z=n(rBe,"A",{href:!0});var lMt=s(_z);aHo=r(lMt,"MobileBertForMultipleChoice"),lMt.forEach(t),nHo=r(rBe," (MobileBERT model)"),rBe.forEach(t),sHo=i(ee),c0=n(ee,"LI",{});var tBe=s(c0);yue=n(tBe,"STRONG",{});var iMt=s(yue);lHo=r(iMt,"mpnet"),iMt.forEach(t),iHo=r(tBe," \u2014 "),uz=n(tBe,"A",{href:!0});var dMt=s(uz);dHo=r(dMt,"MPNetForMultipleChoice"),dMt.forEach(t),cHo=r(tBe," (MPNet model)"),tBe.forEach(t),fHo=i(ee),f0=n(ee,"LI",{});var aBe=s(f0);xue=n(aBe,"STRONG",{});var cMt=s(xue);mHo=r(cMt,"nezha"),cMt.forEach(t),gHo=r(aBe," \u2014 "),bz=n(aBe,"A",{href:!0});var fMt=s(bz);hHo=r(fMt,"NezhaForMultipleChoice"),fMt.forEach(t),pHo=r(aBe," (Nezha model)"),aBe.forEach(t),_Ho=i(ee),m0=n(ee,"LI",{});var nBe=s(m0);$ue=n(nBe,"STRONG",{});var mMt=s($ue);uHo=r(mMt,"nystromformer"),mMt.forEach(t),bHo=r(nBe," \u2014 "),vz=n(nBe,"A",{href:!0});var gMt=s(vz);vHo=r(gMt,"NystromformerForMultipleChoice"),gMt.forEach(t),FHo=r(nBe," (Nystr\xF6mformer model)"),nBe.forEach(t),THo=i(ee),g0=n(ee,"LI",{});var sBe=s(g0);kue=n(sBe,"STRONG",{});var hMt=s(kue);MHo=r(hMt,"qdqbert"),hMt.forEach(t),EHo=r(sBe," \u2014 "),Fz=n(sBe,"A",{href:!0});var pMt=s(Fz);CHo=r(pMt,"QDQBertForMultipleChoice"),pMt.forEach(t),wHo=r(sBe," (QDQBert model)"),sBe.forEach(t),AHo=i(ee),h0=n(ee,"LI",{});var lBe=s(h0);Sue=n(lBe,"STRONG",{});var _Mt=s(Sue);LHo=r(_Mt,"rembert"),_Mt.forEach(t),yHo=r(lBe," \u2014 "),Tz=n(lBe,"A",{href:!0});var uMt=s(Tz);xHo=r(uMt,"RemBertForMultipleChoice"),uMt.forEach(t),$Ho=r(lBe," (RemBERT model)"),lBe.forEach(t),kHo=i(ee),p0=n(ee,"LI",{});var iBe=s(p0);Rue=n(iBe,"STRONG",{});var bMt=s(Rue);SHo=r(bMt,"roberta"),bMt.forEach(t),RHo=r(iBe," \u2014 "),Mz=n(iBe,"A",{href:!0});var vMt=s(Mz);PHo=r(vMt,"RobertaForMultipleChoice"),vMt.forEach(t),BHo=r(iBe," (RoBERTa model)"),iBe.forEach(t),NHo=i(ee),_0=n(ee,"LI",{});var dBe=s(_0);Pue=n(dBe,"STRONG",{});var FMt=s(Pue);IHo=r(FMt,"roformer"),FMt.forEach(t),qHo=r(dBe," \u2014 "),Ez=n(dBe,"A",{href:!0});var TMt=s(Ez);jHo=r(TMt,"RoFormerForMultipleChoice"),TMt.forEach(t),DHo=r(dBe," (RoFormer model)"),dBe.forEach(t),GHo=i(ee),u0=n(ee,"LI",{});var cBe=s(u0);Bue=n(cBe,"STRONG",{});var MMt=s(Bue);OHo=r(MMt,"squeezebert"),MMt.forEach(t),VHo=r(cBe," \u2014 "),Cz=n(cBe,"A",{href:!0});var EMt=s(Cz);XHo=r(EMt,"SqueezeBertForMultipleChoice"),EMt.forEach(t),zHo=r(cBe," (SqueezeBERT model)"),cBe.forEach(t),QHo=i(ee),b0=n(ee,"LI",{});var fBe=s(b0);Nue=n(fBe,"STRONG",{});var CMt=s(Nue);WHo=r(CMt,"xlm"),CMt.forEach(t),HHo=r(fBe," \u2014 "),wz=n(fBe,"A",{href:!0});var wMt=s(wz);UHo=r(wMt,"XLMForMultipleChoice"),wMt.forEach(t),JHo=r(fBe," (XLM model)"),fBe.forEach(t),YHo=i(ee),v0=n(ee,"LI",{});var mBe=s(v0);Iue=n(mBe,"STRONG",{});var AMt=s(Iue);KHo=r(AMt,"xlm-roberta"),AMt.forEach(t),ZHo=r(mBe," \u2014 "),Az=n(mBe,"A",{href:!0});var LMt=s(Az);eUo=r(LMt,"XLMRobertaForMultipleChoice"),LMt.forEach(t),oUo=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),rUo=i(ee),F0=n(ee,"LI",{});var gBe=s(F0);que=n(gBe,"STRONG",{});var yMt=s(que);tUo=r(yMt,"xlm-roberta-xl"),yMt.forEach(t),aUo=r(gBe," \u2014 "),Lz=n(gBe,"A",{href:!0});var xMt=s(Lz);nUo=r(xMt,"XLMRobertaXLForMultipleChoice"),xMt.forEach(t),sUo=r(gBe," (XLM-RoBERTa-XL model)"),gBe.forEach(t),lUo=i(ee),T0=n(ee,"LI",{});var hBe=s(T0);jue=n(hBe,"STRONG",{});var $Mt=s(jue);iUo=r($Mt,"xlnet"),$Mt.forEach(t),dUo=r(hBe," \u2014 "),yz=n(hBe,"A",{href:!0});var kMt=s(yz);cUo=r(kMt,"XLNetForMultipleChoice"),kMt.forEach(t),fUo=r(hBe," (XLNet model)"),hBe.forEach(t),mUo=i(ee),M0=n(ee,"LI",{});var pBe=s(M0);Due=n(pBe,"STRONG",{});var SMt=s(Due);gUo=r(SMt,"yoso"),SMt.forEach(t),hUo=r(pBe," \u2014 "),xz=n(pBe,"A",{href:!0});var RMt=s(xz);pUo=r(RMt,"YosoForMultipleChoice"),RMt.forEach(t),_Uo=r(pBe," (YOSO model)"),pBe.forEach(t),ee.forEach(t),uUo=i(ga),E0=n(ga,"P",{});var _Be=s(E0);bUo=r(_Be,"The model is set in evaluation mode by default using "),Gue=n(_Be,"CODE",{});var PMt=s(Gue);vUo=r(PMt,"model.eval()"),PMt.forEach(t),FUo=r(_Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(_Be,"CODE",{});var BMt=s(Oue);TUo=r(BMt,"model.train()"),BMt.forEach(t),_Be.forEach(t),MUo=i(ga),T(C0.$$.fragment,ga),ga.forEach(t),dl.forEach(t),IXe=i(f),dd=n(f,"H2",{class:!0});var VQe=s(dd);w0=n(VQe,"A",{id:!0,class:!0,href:!0});var NMt=s(w0);Vue=n(NMt,"SPAN",{});var IMt=s(Vue);T(hL.$$.fragment,IMt),IMt.forEach(t),NMt.forEach(t),EUo=i(VQe),Xue=n(VQe,"SPAN",{});var qMt=s(Xue);CUo=r(qMt,"AutoModelForNextSentencePrediction"),qMt.forEach(t),VQe.forEach(t),qXe=i(f),Io=n(f,"DIV",{class:!0});var cl=s(Io);T(pL.$$.fragment,cl),wUo=i(cl),cd=n(cl,"P",{});var Zre=s(cd);AUo=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$z=n(Zre,"A",{href:!0});var jMt=s($z);LUo=r(jMt,"from_pretrained()"),jMt.forEach(t),yUo=r(Zre," class method or the "),kz=n(Zre,"A",{href:!0});var DMt=s(kz);xUo=r(DMt,"from_config()"),DMt.forEach(t),$Uo=r(Zre,` class
method.`),Zre.forEach(t),kUo=i(cl),_L=n(cl,"P",{});var XQe=s(_L);SUo=r(XQe,"This class cannot be instantiated directly using "),zue=n(XQe,"CODE",{});var GMt=s(zue);RUo=r(GMt,"__init__()"),GMt.forEach(t),PUo=r(XQe," (throws an error)."),XQe.forEach(t),BUo=i(cl),pt=n(cl,"DIV",{class:!0});var ww=s(pt);T(uL.$$.fragment,ww),NUo=i(ww),Que=n(ww,"P",{});var OMt=s(Que);IUo=r(OMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),OMt.forEach(t),qUo=i(ww),fd=n(ww,"P",{});var ete=s(fd);jUo=r(ete,`Note:
Loading a model from its configuration file does `),Wue=n(ete,"STRONG",{});var VMt=s(Wue);DUo=r(VMt,"not"),VMt.forEach(t),GUo=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(ete,"A",{href:!0});var XMt=s(Sz);OUo=r(XMt,"from_pretrained()"),XMt.forEach(t),VUo=r(ete," to load the model weights."),ete.forEach(t),XUo=i(ww),T(A0.$$.fragment,ww),ww.forEach(t),zUo=i(cl),ao=n(cl,"DIV",{class:!0});var ha=s(ao);T(bL.$$.fragment,ha),QUo=i(ha),Hue=n(ha,"P",{});var zMt=s(Hue);WUo=r(zMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zMt.forEach(t),HUo=i(ha),Va=n(ha,"P",{});var Aw=s(Va);UUo=r(Aw,"The model class to instantiate is selected based on the "),Uue=n(Aw,"CODE",{});var QMt=s(Uue);JUo=r(QMt,"model_type"),QMt.forEach(t),YUo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Jue=n(Aw,"CODE",{});var WMt=s(Jue);KUo=r(WMt,"pretrained_model_name_or_path"),WMt.forEach(t),ZUo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(Aw,"CODE",{});var HMt=s(Yue);eJo=r(HMt,"pretrained_model_name_or_path"),HMt.forEach(t),oJo=r(Aw,":"),Aw.forEach(t),rJo=i(ha),qo=n(ha,"UL",{});var pa=s(qo);L0=n(pa,"LI",{});var uBe=s(L0);Kue=n(uBe,"STRONG",{});var UMt=s(Kue);tJo=r(UMt,"bert"),UMt.forEach(t),aJo=r(uBe," \u2014 "),Rz=n(uBe,"A",{href:!0});var JMt=s(Rz);nJo=r(JMt,"BertForNextSentencePrediction"),JMt.forEach(t),sJo=r(uBe," (BERT model)"),uBe.forEach(t),lJo=i(pa),y0=n(pa,"LI",{});var bBe=s(y0);Zue=n(bBe,"STRONG",{});var YMt=s(Zue);iJo=r(YMt,"fnet"),YMt.forEach(t),dJo=r(bBe," \u2014 "),Pz=n(bBe,"A",{href:!0});var KMt=s(Pz);cJo=r(KMt,"FNetForNextSentencePrediction"),KMt.forEach(t),fJo=r(bBe," (FNet model)"),bBe.forEach(t),mJo=i(pa),x0=n(pa,"LI",{});var vBe=s(x0);e1e=n(vBe,"STRONG",{});var ZMt=s(e1e);gJo=r(ZMt,"megatron-bert"),ZMt.forEach(t),hJo=r(vBe," \u2014 "),Bz=n(vBe,"A",{href:!0});var e4t=s(Bz);pJo=r(e4t,"MegatronBertForNextSentencePrediction"),e4t.forEach(t),_Jo=r(vBe," (Megatron-BERT model)"),vBe.forEach(t),uJo=i(pa),$0=n(pa,"LI",{});var FBe=s($0);o1e=n(FBe,"STRONG",{});var o4t=s(o1e);bJo=r(o4t,"mobilebert"),o4t.forEach(t),vJo=r(FBe," \u2014 "),Nz=n(FBe,"A",{href:!0});var r4t=s(Nz);FJo=r(r4t,"MobileBertForNextSentencePrediction"),r4t.forEach(t),TJo=r(FBe," (MobileBERT model)"),FBe.forEach(t),MJo=i(pa),k0=n(pa,"LI",{});var TBe=s(k0);r1e=n(TBe,"STRONG",{});var t4t=s(r1e);EJo=r(t4t,"nezha"),t4t.forEach(t),CJo=r(TBe," \u2014 "),Iz=n(TBe,"A",{href:!0});var a4t=s(Iz);wJo=r(a4t,"NezhaForNextSentencePrediction"),a4t.forEach(t),AJo=r(TBe," (Nezha model)"),TBe.forEach(t),LJo=i(pa),S0=n(pa,"LI",{});var MBe=s(S0);t1e=n(MBe,"STRONG",{});var n4t=s(t1e);yJo=r(n4t,"qdqbert"),n4t.forEach(t),xJo=r(MBe," \u2014 "),qz=n(MBe,"A",{href:!0});var s4t=s(qz);$Jo=r(s4t,"QDQBertForNextSentencePrediction"),s4t.forEach(t),kJo=r(MBe," (QDQBert model)"),MBe.forEach(t),pa.forEach(t),SJo=i(ha),R0=n(ha,"P",{});var EBe=s(R0);RJo=r(EBe,"The model is set in evaluation mode by default using "),a1e=n(EBe,"CODE",{});var l4t=s(a1e);PJo=r(l4t,"model.eval()"),l4t.forEach(t),BJo=r(EBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=n(EBe,"CODE",{});var i4t=s(n1e);NJo=r(i4t,"model.train()"),i4t.forEach(t),EBe.forEach(t),IJo=i(ha),T(P0.$$.fragment,ha),ha.forEach(t),cl.forEach(t),jXe=i(f),md=n(f,"H2",{class:!0});var zQe=s(md);B0=n(zQe,"A",{id:!0,class:!0,href:!0});var d4t=s(B0);s1e=n(d4t,"SPAN",{});var c4t=s(s1e);T(vL.$$.fragment,c4t),c4t.forEach(t),d4t.forEach(t),qJo=i(zQe),l1e=n(zQe,"SPAN",{});var f4t=s(l1e);jJo=r(f4t,"AutoModelForTokenClassification"),f4t.forEach(t),zQe.forEach(t),DXe=i(f),jo=n(f,"DIV",{class:!0});var fl=s(jo);T(FL.$$.fragment,fl),DJo=i(fl),gd=n(fl,"P",{});var ote=s(gd);GJo=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jz=n(ote,"A",{href:!0});var m4t=s(jz);OJo=r(m4t,"from_pretrained()"),m4t.forEach(t),VJo=r(ote," class method or the "),Dz=n(ote,"A",{href:!0});var g4t=s(Dz);XJo=r(g4t,"from_config()"),g4t.forEach(t),zJo=r(ote,` class
method.`),ote.forEach(t),QJo=i(fl),TL=n(fl,"P",{});var QQe=s(TL);WJo=r(QQe,"This class cannot be instantiated directly using "),i1e=n(QQe,"CODE",{});var h4t=s(i1e);HJo=r(h4t,"__init__()"),h4t.forEach(t),UJo=r(QQe," (throws an error)."),QQe.forEach(t),JJo=i(fl),_t=n(fl,"DIV",{class:!0});var Lw=s(_t);T(ML.$$.fragment,Lw),YJo=i(Lw),d1e=n(Lw,"P",{});var p4t=s(d1e);KJo=r(p4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),p4t.forEach(t),ZJo=i(Lw),hd=n(Lw,"P",{});var rte=s(hd);eYo=r(rte,`Note:
Loading a model from its configuration file does `),c1e=n(rte,"STRONG",{});var _4t=s(c1e);oYo=r(_4t,"not"),_4t.forEach(t),rYo=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(rte,"A",{href:!0});var u4t=s(Gz);tYo=r(u4t,"from_pretrained()"),u4t.forEach(t),aYo=r(rte," to load the model weights."),rte.forEach(t),nYo=i(Lw),T(N0.$$.fragment,Lw),Lw.forEach(t),sYo=i(fl),no=n(fl,"DIV",{class:!0});var _a=s(no);T(EL.$$.fragment,_a),lYo=i(_a),f1e=n(_a,"P",{});var b4t=s(f1e);iYo=r(b4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b4t.forEach(t),dYo=i(_a),Xa=n(_a,"P",{});var yw=s(Xa);cYo=r(yw,"The model class to instantiate is selected based on the "),m1e=n(yw,"CODE",{});var v4t=s(m1e);fYo=r(v4t,"model_type"),v4t.forEach(t),mYo=r(yw,` property of the config object (either
passed as an argument or loaded from `),g1e=n(yw,"CODE",{});var F4t=s(g1e);gYo=r(F4t,"pretrained_model_name_or_path"),F4t.forEach(t),hYo=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n(yw,"CODE",{});var T4t=s(h1e);pYo=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),_Yo=r(yw,":"),yw.forEach(t),uYo=i(_a),U=n(_a,"UL",{});var J=s(U);I0=n(J,"LI",{});var CBe=s(I0);p1e=n(CBe,"STRONG",{});var M4t=s(p1e);bYo=r(M4t,"albert"),M4t.forEach(t),vYo=r(CBe," \u2014 "),Oz=n(CBe,"A",{href:!0});var E4t=s(Oz);FYo=r(E4t,"AlbertForTokenClassification"),E4t.forEach(t),TYo=r(CBe," (ALBERT model)"),CBe.forEach(t),MYo=i(J),q0=n(J,"LI",{});var wBe=s(q0);_1e=n(wBe,"STRONG",{});var C4t=s(_1e);EYo=r(C4t,"bert"),C4t.forEach(t),CYo=r(wBe," \u2014 "),Vz=n(wBe,"A",{href:!0});var w4t=s(Vz);wYo=r(w4t,"BertForTokenClassification"),w4t.forEach(t),AYo=r(wBe," (BERT model)"),wBe.forEach(t),LYo=i(J),j0=n(J,"LI",{});var ABe=s(j0);u1e=n(ABe,"STRONG",{});var A4t=s(u1e);yYo=r(A4t,"big_bird"),A4t.forEach(t),xYo=r(ABe," \u2014 "),Xz=n(ABe,"A",{href:!0});var L4t=s(Xz);$Yo=r(L4t,"BigBirdForTokenClassification"),L4t.forEach(t),kYo=r(ABe," (BigBird model)"),ABe.forEach(t),SYo=i(J),D0=n(J,"LI",{});var LBe=s(D0);b1e=n(LBe,"STRONG",{});var y4t=s(b1e);RYo=r(y4t,"bloom"),y4t.forEach(t),PYo=r(LBe," \u2014 "),zz=n(LBe,"A",{href:!0});var x4t=s(zz);BYo=r(x4t,"BloomForTokenClassification"),x4t.forEach(t),NYo=r(LBe," (BLOOM model)"),LBe.forEach(t),IYo=i(J),G0=n(J,"LI",{});var yBe=s(G0);v1e=n(yBe,"STRONG",{});var $4t=s(v1e);qYo=r($4t,"camembert"),$4t.forEach(t),jYo=r(yBe," \u2014 "),Qz=n(yBe,"A",{href:!0});var k4t=s(Qz);DYo=r(k4t,"CamembertForTokenClassification"),k4t.forEach(t),GYo=r(yBe," (CamemBERT model)"),yBe.forEach(t),OYo=i(J),O0=n(J,"LI",{});var xBe=s(O0);F1e=n(xBe,"STRONG",{});var S4t=s(F1e);VYo=r(S4t,"canine"),S4t.forEach(t),XYo=r(xBe," \u2014 "),Wz=n(xBe,"A",{href:!0});var R4t=s(Wz);zYo=r(R4t,"CanineForTokenClassification"),R4t.forEach(t),QYo=r(xBe," (CANINE model)"),xBe.forEach(t),WYo=i(J),V0=n(J,"LI",{});var $Be=s(V0);T1e=n($Be,"STRONG",{});var P4t=s(T1e);HYo=r(P4t,"convbert"),P4t.forEach(t),UYo=r($Be," \u2014 "),Hz=n($Be,"A",{href:!0});var B4t=s(Hz);JYo=r(B4t,"ConvBertForTokenClassification"),B4t.forEach(t),YYo=r($Be," (ConvBERT model)"),$Be.forEach(t),KYo=i(J),X0=n(J,"LI",{});var kBe=s(X0);M1e=n(kBe,"STRONG",{});var N4t=s(M1e);ZYo=r(N4t,"data2vec-text"),N4t.forEach(t),eKo=r(kBe," \u2014 "),Uz=n(kBe,"A",{href:!0});var I4t=s(Uz);oKo=r(I4t,"Data2VecTextForTokenClassification"),I4t.forEach(t),rKo=r(kBe," (Data2VecText model)"),kBe.forEach(t),tKo=i(J),z0=n(J,"LI",{});var SBe=s(z0);E1e=n(SBe,"STRONG",{});var q4t=s(E1e);aKo=r(q4t,"deberta"),q4t.forEach(t),nKo=r(SBe," \u2014 "),Jz=n(SBe,"A",{href:!0});var j4t=s(Jz);sKo=r(j4t,"DebertaForTokenClassification"),j4t.forEach(t),lKo=r(SBe," (DeBERTa model)"),SBe.forEach(t),iKo=i(J),Q0=n(J,"LI",{});var RBe=s(Q0);C1e=n(RBe,"STRONG",{});var D4t=s(C1e);dKo=r(D4t,"deberta-v2"),D4t.forEach(t),cKo=r(RBe," \u2014 "),Yz=n(RBe,"A",{href:!0});var G4t=s(Yz);fKo=r(G4t,"DebertaV2ForTokenClassification"),G4t.forEach(t),mKo=r(RBe," (DeBERTa-v2 model)"),RBe.forEach(t),gKo=i(J),W0=n(J,"LI",{});var PBe=s(W0);w1e=n(PBe,"STRONG",{});var O4t=s(w1e);hKo=r(O4t,"distilbert"),O4t.forEach(t),pKo=r(PBe," \u2014 "),Kz=n(PBe,"A",{href:!0});var V4t=s(Kz);_Ko=r(V4t,"DistilBertForTokenClassification"),V4t.forEach(t),uKo=r(PBe," (DistilBERT model)"),PBe.forEach(t),bKo=i(J),H0=n(J,"LI",{});var BBe=s(H0);A1e=n(BBe,"STRONG",{});var X4t=s(A1e);vKo=r(X4t,"electra"),X4t.forEach(t),FKo=r(BBe," \u2014 "),Zz=n(BBe,"A",{href:!0});var z4t=s(Zz);TKo=r(z4t,"ElectraForTokenClassification"),z4t.forEach(t),MKo=r(BBe," (ELECTRA model)"),BBe.forEach(t),EKo=i(J),U0=n(J,"LI",{});var NBe=s(U0);L1e=n(NBe,"STRONG",{});var Q4t=s(L1e);CKo=r(Q4t,"flaubert"),Q4t.forEach(t),wKo=r(NBe," \u2014 "),eQ=n(NBe,"A",{href:!0});var W4t=s(eQ);AKo=r(W4t,"FlaubertForTokenClassification"),W4t.forEach(t),LKo=r(NBe," (FlauBERT model)"),NBe.forEach(t),yKo=i(J),J0=n(J,"LI",{});var IBe=s(J0);y1e=n(IBe,"STRONG",{});var H4t=s(y1e);xKo=r(H4t,"fnet"),H4t.forEach(t),$Ko=r(IBe," \u2014 "),oQ=n(IBe,"A",{href:!0});var U4t=s(oQ);kKo=r(U4t,"FNetForTokenClassification"),U4t.forEach(t),SKo=r(IBe," (FNet model)"),IBe.forEach(t),RKo=i(J),Y0=n(J,"LI",{});var qBe=s(Y0);x1e=n(qBe,"STRONG",{});var J4t=s(x1e);PKo=r(J4t,"funnel"),J4t.forEach(t),BKo=r(qBe," \u2014 "),rQ=n(qBe,"A",{href:!0});var Y4t=s(rQ);NKo=r(Y4t,"FunnelForTokenClassification"),Y4t.forEach(t),IKo=r(qBe," (Funnel Transformer model)"),qBe.forEach(t),qKo=i(J),K0=n(J,"LI",{});var jBe=s(K0);$1e=n(jBe,"STRONG",{});var K4t=s($1e);jKo=r(K4t,"gpt2"),K4t.forEach(t),DKo=r(jBe," \u2014 "),tQ=n(jBe,"A",{href:!0});var Z4t=s(tQ);GKo=r(Z4t,"GPT2ForTokenClassification"),Z4t.forEach(t),OKo=r(jBe," (OpenAI GPT-2 model)"),jBe.forEach(t),VKo=i(J),Z0=n(J,"LI",{});var DBe=s(Z0);k1e=n(DBe,"STRONG",{});var eEt=s(k1e);XKo=r(eEt,"ibert"),eEt.forEach(t),zKo=r(DBe," \u2014 "),aQ=n(DBe,"A",{href:!0});var oEt=s(aQ);QKo=r(oEt,"IBertForTokenClassification"),oEt.forEach(t),WKo=r(DBe," (I-BERT model)"),DBe.forEach(t),HKo=i(J),eF=n(J,"LI",{});var GBe=s(eF);S1e=n(GBe,"STRONG",{});var rEt=s(S1e);UKo=r(rEt,"layoutlm"),rEt.forEach(t),JKo=r(GBe," \u2014 "),nQ=n(GBe,"A",{href:!0});var tEt=s(nQ);YKo=r(tEt,"LayoutLMForTokenClassification"),tEt.forEach(t),KKo=r(GBe," (LayoutLM model)"),GBe.forEach(t),ZKo=i(J),oF=n(J,"LI",{});var OBe=s(oF);R1e=n(OBe,"STRONG",{});var aEt=s(R1e);eZo=r(aEt,"layoutlmv2"),aEt.forEach(t),oZo=r(OBe," \u2014 "),sQ=n(OBe,"A",{href:!0});var nEt=s(sQ);rZo=r(nEt,"LayoutLMv2ForTokenClassification"),nEt.forEach(t),tZo=r(OBe," (LayoutLMv2 model)"),OBe.forEach(t),aZo=i(J),rF=n(J,"LI",{});var VBe=s(rF);P1e=n(VBe,"STRONG",{});var sEt=s(P1e);nZo=r(sEt,"layoutlmv3"),sEt.forEach(t),sZo=r(VBe," \u2014 "),lQ=n(VBe,"A",{href:!0});var lEt=s(lQ);lZo=r(lEt,"LayoutLMv3ForTokenClassification"),lEt.forEach(t),iZo=r(VBe," (LayoutLMv3 model)"),VBe.forEach(t),dZo=i(J),tF=n(J,"LI",{});var XBe=s(tF);B1e=n(XBe,"STRONG",{});var iEt=s(B1e);cZo=r(iEt,"longformer"),iEt.forEach(t),fZo=r(XBe," \u2014 "),iQ=n(XBe,"A",{href:!0});var dEt=s(iQ);mZo=r(dEt,"LongformerForTokenClassification"),dEt.forEach(t),gZo=r(XBe," (Longformer model)"),XBe.forEach(t),hZo=i(J),aF=n(J,"LI",{});var zBe=s(aF);N1e=n(zBe,"STRONG",{});var cEt=s(N1e);pZo=r(cEt,"megatron-bert"),cEt.forEach(t),_Zo=r(zBe," \u2014 "),dQ=n(zBe,"A",{href:!0});var fEt=s(dQ);uZo=r(fEt,"MegatronBertForTokenClassification"),fEt.forEach(t),bZo=r(zBe," (Megatron-BERT model)"),zBe.forEach(t),vZo=i(J),nF=n(J,"LI",{});var QBe=s(nF);I1e=n(QBe,"STRONG",{});var mEt=s(I1e);FZo=r(mEt,"mobilebert"),mEt.forEach(t),TZo=r(QBe," \u2014 "),cQ=n(QBe,"A",{href:!0});var gEt=s(cQ);MZo=r(gEt,"MobileBertForTokenClassification"),gEt.forEach(t),EZo=r(QBe," (MobileBERT model)"),QBe.forEach(t),CZo=i(J),sF=n(J,"LI",{});var WBe=s(sF);q1e=n(WBe,"STRONG",{});var hEt=s(q1e);wZo=r(hEt,"mpnet"),hEt.forEach(t),AZo=r(WBe," \u2014 "),fQ=n(WBe,"A",{href:!0});var pEt=s(fQ);LZo=r(pEt,"MPNetForTokenClassification"),pEt.forEach(t),yZo=r(WBe," (MPNet model)"),WBe.forEach(t),xZo=i(J),lF=n(J,"LI",{});var HBe=s(lF);j1e=n(HBe,"STRONG",{});var _Et=s(j1e);$Zo=r(_Et,"nezha"),_Et.forEach(t),kZo=r(HBe," \u2014 "),mQ=n(HBe,"A",{href:!0});var uEt=s(mQ);SZo=r(uEt,"NezhaForTokenClassification"),uEt.forEach(t),RZo=r(HBe," (Nezha model)"),HBe.forEach(t),PZo=i(J),iF=n(J,"LI",{});var UBe=s(iF);D1e=n(UBe,"STRONG",{});var bEt=s(D1e);BZo=r(bEt,"nystromformer"),bEt.forEach(t),NZo=r(UBe," \u2014 "),gQ=n(UBe,"A",{href:!0});var vEt=s(gQ);IZo=r(vEt,"NystromformerForTokenClassification"),vEt.forEach(t),qZo=r(UBe," (Nystr\xF6mformer model)"),UBe.forEach(t),jZo=i(J),dF=n(J,"LI",{});var JBe=s(dF);G1e=n(JBe,"STRONG",{});var FEt=s(G1e);DZo=r(FEt,"qdqbert"),FEt.forEach(t),GZo=r(JBe," \u2014 "),hQ=n(JBe,"A",{href:!0});var TEt=s(hQ);OZo=r(TEt,"QDQBertForTokenClassification"),TEt.forEach(t),VZo=r(JBe," (QDQBert model)"),JBe.forEach(t),XZo=i(J),cF=n(J,"LI",{});var YBe=s(cF);O1e=n(YBe,"STRONG",{});var MEt=s(O1e);zZo=r(MEt,"rembert"),MEt.forEach(t),QZo=r(YBe," \u2014 "),pQ=n(YBe,"A",{href:!0});var EEt=s(pQ);WZo=r(EEt,"RemBertForTokenClassification"),EEt.forEach(t),HZo=r(YBe," (RemBERT model)"),YBe.forEach(t),UZo=i(J),fF=n(J,"LI",{});var KBe=s(fF);V1e=n(KBe,"STRONG",{});var CEt=s(V1e);JZo=r(CEt,"roberta"),CEt.forEach(t),YZo=r(KBe," \u2014 "),_Q=n(KBe,"A",{href:!0});var wEt=s(_Q);KZo=r(wEt,"RobertaForTokenClassification"),wEt.forEach(t),ZZo=r(KBe," (RoBERTa model)"),KBe.forEach(t),eer=i(J),mF=n(J,"LI",{});var ZBe=s(mF);X1e=n(ZBe,"STRONG",{});var AEt=s(X1e);oer=r(AEt,"roformer"),AEt.forEach(t),rer=r(ZBe," \u2014 "),uQ=n(ZBe,"A",{href:!0});var LEt=s(uQ);ter=r(LEt,"RoFormerForTokenClassification"),LEt.forEach(t),aer=r(ZBe," (RoFormer model)"),ZBe.forEach(t),ner=i(J),gF=n(J,"LI",{});var eNe=s(gF);z1e=n(eNe,"STRONG",{});var yEt=s(z1e);ser=r(yEt,"squeezebert"),yEt.forEach(t),ler=r(eNe," \u2014 "),bQ=n(eNe,"A",{href:!0});var xEt=s(bQ);ier=r(xEt,"SqueezeBertForTokenClassification"),xEt.forEach(t),der=r(eNe," (SqueezeBERT model)"),eNe.forEach(t),cer=i(J),hF=n(J,"LI",{});var oNe=s(hF);Q1e=n(oNe,"STRONG",{});var $Et=s(Q1e);fer=r($Et,"xlm"),$Et.forEach(t),mer=r(oNe," \u2014 "),vQ=n(oNe,"A",{href:!0});var kEt=s(vQ);ger=r(kEt,"XLMForTokenClassification"),kEt.forEach(t),her=r(oNe," (XLM model)"),oNe.forEach(t),per=i(J),pF=n(J,"LI",{});var rNe=s(pF);W1e=n(rNe,"STRONG",{});var SEt=s(W1e);_er=r(SEt,"xlm-roberta"),SEt.forEach(t),uer=r(rNe," \u2014 "),FQ=n(rNe,"A",{href:!0});var REt=s(FQ);ber=r(REt,"XLMRobertaForTokenClassification"),REt.forEach(t),ver=r(rNe," (XLM-RoBERTa model)"),rNe.forEach(t),Fer=i(J),_F=n(J,"LI",{});var tNe=s(_F);H1e=n(tNe,"STRONG",{});var PEt=s(H1e);Ter=r(PEt,"xlm-roberta-xl"),PEt.forEach(t),Mer=r(tNe," \u2014 "),TQ=n(tNe,"A",{href:!0});var BEt=s(TQ);Eer=r(BEt,"XLMRobertaXLForTokenClassification"),BEt.forEach(t),Cer=r(tNe," (XLM-RoBERTa-XL model)"),tNe.forEach(t),wer=i(J),uF=n(J,"LI",{});var aNe=s(uF);U1e=n(aNe,"STRONG",{});var NEt=s(U1e);Aer=r(NEt,"xlnet"),NEt.forEach(t),Ler=r(aNe," \u2014 "),MQ=n(aNe,"A",{href:!0});var IEt=s(MQ);yer=r(IEt,"XLNetForTokenClassification"),IEt.forEach(t),xer=r(aNe," (XLNet model)"),aNe.forEach(t),$er=i(J),bF=n(J,"LI",{});var nNe=s(bF);J1e=n(nNe,"STRONG",{});var qEt=s(J1e);ker=r(qEt,"yoso"),qEt.forEach(t),Ser=r(nNe," \u2014 "),EQ=n(nNe,"A",{href:!0});var jEt=s(EQ);Rer=r(jEt,"YosoForTokenClassification"),jEt.forEach(t),Per=r(nNe," (YOSO model)"),nNe.forEach(t),J.forEach(t),Ber=i(_a),vF=n(_a,"P",{});var sNe=s(vF);Ner=r(sNe,"The model is set in evaluation mode by default using "),Y1e=n(sNe,"CODE",{});var DEt=s(Y1e);Ier=r(DEt,"model.eval()"),DEt.forEach(t),qer=r(sNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=n(sNe,"CODE",{});var GEt=s(K1e);jer=r(GEt,"model.train()"),GEt.forEach(t),sNe.forEach(t),Der=i(_a),T(FF.$$.fragment,_a),_a.forEach(t),fl.forEach(t),GXe=i(f),pd=n(f,"H2",{class:!0});var WQe=s(pd);TF=n(WQe,"A",{id:!0,class:!0,href:!0});var OEt=s(TF);Z1e=n(OEt,"SPAN",{});var VEt=s(Z1e);T(CL.$$.fragment,VEt),VEt.forEach(t),OEt.forEach(t),Ger=i(WQe),e2e=n(WQe,"SPAN",{});var XEt=s(e2e);Oer=r(XEt,"AutoModelForQuestionAnswering"),XEt.forEach(t),WQe.forEach(t),OXe=i(f),Do=n(f,"DIV",{class:!0});var ml=s(Do);T(wL.$$.fragment,ml),Ver=i(ml),_d=n(ml,"P",{});var tte=s(_d);Xer=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CQ=n(tte,"A",{href:!0});var zEt=s(CQ);zer=r(zEt,"from_pretrained()"),zEt.forEach(t),Qer=r(tte," class method or the "),wQ=n(tte,"A",{href:!0});var QEt=s(wQ);Wer=r(QEt,"from_config()"),QEt.forEach(t),Her=r(tte,` class
method.`),tte.forEach(t),Uer=i(ml),AL=n(ml,"P",{});var HQe=s(AL);Jer=r(HQe,"This class cannot be instantiated directly using "),o2e=n(HQe,"CODE",{});var WEt=s(o2e);Yer=r(WEt,"__init__()"),WEt.forEach(t),Ker=r(HQe," (throws an error)."),HQe.forEach(t),Zer=i(ml),ut=n(ml,"DIV",{class:!0});var xw=s(ut);T(LL.$$.fragment,xw),eor=i(xw),r2e=n(xw,"P",{});var HEt=s(r2e);oor=r(HEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),HEt.forEach(t),ror=i(xw),ud=n(xw,"P",{});var ate=s(ud);tor=r(ate,`Note:
Loading a model from its configuration file does `),t2e=n(ate,"STRONG",{});var UEt=s(t2e);aor=r(UEt,"not"),UEt.forEach(t),nor=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=n(ate,"A",{href:!0});var JEt=s(AQ);sor=r(JEt,"from_pretrained()"),JEt.forEach(t),lor=r(ate," to load the model weights."),ate.forEach(t),ior=i(xw),T(MF.$$.fragment,xw),xw.forEach(t),dor=i(ml),so=n(ml,"DIV",{class:!0});var ua=s(so);T(yL.$$.fragment,ua),cor=i(ua),a2e=n(ua,"P",{});var YEt=s(a2e);mor=r(YEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),YEt.forEach(t),gor=i(ua),za=n(ua,"P",{});var $w=s(za);hor=r($w,"The model class to instantiate is selected based on the "),n2e=n($w,"CODE",{});var KEt=s(n2e);por=r(KEt,"model_type"),KEt.forEach(t),_or=r($w,` property of the config object (either
passed as an argument or loaded from `),s2e=n($w,"CODE",{});var ZEt=s(s2e);uor=r(ZEt,"pretrained_model_name_or_path"),ZEt.forEach(t),bor=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n($w,"CODE",{});var eCt=s(l2e);vor=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),For=r($w,":"),$w.forEach(t),Tor=i(ua),V=n(ua,"UL",{});var X=s(V);EF=n(X,"LI",{});var lNe=s(EF);i2e=n(lNe,"STRONG",{});var oCt=s(i2e);Mor=r(oCt,"albert"),oCt.forEach(t),Eor=r(lNe," \u2014 "),LQ=n(lNe,"A",{href:!0});var rCt=s(LQ);Cor=r(rCt,"AlbertForQuestionAnswering"),rCt.forEach(t),wor=r(lNe," (ALBERT model)"),lNe.forEach(t),Aor=i(X),CF=n(X,"LI",{});var iNe=s(CF);d2e=n(iNe,"STRONG",{});var tCt=s(d2e);Lor=r(tCt,"bart"),tCt.forEach(t),yor=r(iNe," \u2014 "),yQ=n(iNe,"A",{href:!0});var aCt=s(yQ);xor=r(aCt,"BartForQuestionAnswering"),aCt.forEach(t),$or=r(iNe," (BART model)"),iNe.forEach(t),kor=i(X),wF=n(X,"LI",{});var dNe=s(wF);c2e=n(dNe,"STRONG",{});var nCt=s(c2e);Sor=r(nCt,"bert"),nCt.forEach(t),Ror=r(dNe," \u2014 "),xQ=n(dNe,"A",{href:!0});var sCt=s(xQ);Por=r(sCt,"BertForQuestionAnswering"),sCt.forEach(t),Bor=r(dNe," (BERT model)"),dNe.forEach(t),Nor=i(X),AF=n(X,"LI",{});var cNe=s(AF);f2e=n(cNe,"STRONG",{});var lCt=s(f2e);Ior=r(lCt,"big_bird"),lCt.forEach(t),qor=r(cNe," \u2014 "),$Q=n(cNe,"A",{href:!0});var iCt=s($Q);jor=r(iCt,"BigBirdForQuestionAnswering"),iCt.forEach(t),Dor=r(cNe," (BigBird model)"),cNe.forEach(t),Gor=i(X),LF=n(X,"LI",{});var fNe=s(LF);m2e=n(fNe,"STRONG",{});var dCt=s(m2e);Oor=r(dCt,"bigbird_pegasus"),dCt.forEach(t),Vor=r(fNe," \u2014 "),kQ=n(fNe,"A",{href:!0});var cCt=s(kQ);Xor=r(cCt,"BigBirdPegasusForQuestionAnswering"),cCt.forEach(t),zor=r(fNe," (BigBird-Pegasus model)"),fNe.forEach(t),Qor=i(X),yF=n(X,"LI",{});var mNe=s(yF);g2e=n(mNe,"STRONG",{});var fCt=s(g2e);Wor=r(fCt,"camembert"),fCt.forEach(t),Hor=r(mNe," \u2014 "),SQ=n(mNe,"A",{href:!0});var mCt=s(SQ);Uor=r(mCt,"CamembertForQuestionAnswering"),mCt.forEach(t),Jor=r(mNe," (CamemBERT model)"),mNe.forEach(t),Yor=i(X),xF=n(X,"LI",{});var gNe=s(xF);h2e=n(gNe,"STRONG",{});var gCt=s(h2e);Kor=r(gCt,"canine"),gCt.forEach(t),Zor=r(gNe," \u2014 "),RQ=n(gNe,"A",{href:!0});var hCt=s(RQ);err=r(hCt,"CanineForQuestionAnswering"),hCt.forEach(t),orr=r(gNe," (CANINE model)"),gNe.forEach(t),rrr=i(X),$F=n(X,"LI",{});var hNe=s($F);p2e=n(hNe,"STRONG",{});var pCt=s(p2e);trr=r(pCt,"convbert"),pCt.forEach(t),arr=r(hNe," \u2014 "),PQ=n(hNe,"A",{href:!0});var _Ct=s(PQ);nrr=r(_Ct,"ConvBertForQuestionAnswering"),_Ct.forEach(t),srr=r(hNe," (ConvBERT model)"),hNe.forEach(t),lrr=i(X),kF=n(X,"LI",{});var pNe=s(kF);_2e=n(pNe,"STRONG",{});var uCt=s(_2e);irr=r(uCt,"data2vec-text"),uCt.forEach(t),drr=r(pNe," \u2014 "),BQ=n(pNe,"A",{href:!0});var bCt=s(BQ);crr=r(bCt,"Data2VecTextForQuestionAnswering"),bCt.forEach(t),frr=r(pNe," (Data2VecText model)"),pNe.forEach(t),mrr=i(X),SF=n(X,"LI",{});var _Ne=s(SF);u2e=n(_Ne,"STRONG",{});var vCt=s(u2e);grr=r(vCt,"deberta"),vCt.forEach(t),hrr=r(_Ne," \u2014 "),NQ=n(_Ne,"A",{href:!0});var FCt=s(NQ);prr=r(FCt,"DebertaForQuestionAnswering"),FCt.forEach(t),_rr=r(_Ne," (DeBERTa model)"),_Ne.forEach(t),urr=i(X),RF=n(X,"LI",{});var uNe=s(RF);b2e=n(uNe,"STRONG",{});var TCt=s(b2e);brr=r(TCt,"deberta-v2"),TCt.forEach(t),vrr=r(uNe," \u2014 "),IQ=n(uNe,"A",{href:!0});var MCt=s(IQ);Frr=r(MCt,"DebertaV2ForQuestionAnswering"),MCt.forEach(t),Trr=r(uNe," (DeBERTa-v2 model)"),uNe.forEach(t),Mrr=i(X),PF=n(X,"LI",{});var bNe=s(PF);v2e=n(bNe,"STRONG",{});var ECt=s(v2e);Err=r(ECt,"distilbert"),ECt.forEach(t),Crr=r(bNe," \u2014 "),qQ=n(bNe,"A",{href:!0});var CCt=s(qQ);wrr=r(CCt,"DistilBertForQuestionAnswering"),CCt.forEach(t),Arr=r(bNe," (DistilBERT model)"),bNe.forEach(t),Lrr=i(X),BF=n(X,"LI",{});var vNe=s(BF);F2e=n(vNe,"STRONG",{});var wCt=s(F2e);yrr=r(wCt,"electra"),wCt.forEach(t),xrr=r(vNe," \u2014 "),jQ=n(vNe,"A",{href:!0});var ACt=s(jQ);$rr=r(ACt,"ElectraForQuestionAnswering"),ACt.forEach(t),krr=r(vNe," (ELECTRA model)"),vNe.forEach(t),Srr=i(X),NF=n(X,"LI",{});var FNe=s(NF);T2e=n(FNe,"STRONG",{});var LCt=s(T2e);Rrr=r(LCt,"flaubert"),LCt.forEach(t),Prr=r(FNe," \u2014 "),DQ=n(FNe,"A",{href:!0});var yCt=s(DQ);Brr=r(yCt,"FlaubertForQuestionAnsweringSimple"),yCt.forEach(t),Nrr=r(FNe," (FlauBERT model)"),FNe.forEach(t),Irr=i(X),IF=n(X,"LI",{});var TNe=s(IF);M2e=n(TNe,"STRONG",{});var xCt=s(M2e);qrr=r(xCt,"fnet"),xCt.forEach(t),jrr=r(TNe," \u2014 "),GQ=n(TNe,"A",{href:!0});var $Ct=s(GQ);Drr=r($Ct,"FNetForQuestionAnswering"),$Ct.forEach(t),Grr=r(TNe," (FNet model)"),TNe.forEach(t),Orr=i(X),qF=n(X,"LI",{});var MNe=s(qF);E2e=n(MNe,"STRONG",{});var kCt=s(E2e);Vrr=r(kCt,"funnel"),kCt.forEach(t),Xrr=r(MNe," \u2014 "),OQ=n(MNe,"A",{href:!0});var SCt=s(OQ);zrr=r(SCt,"FunnelForQuestionAnswering"),SCt.forEach(t),Qrr=r(MNe," (Funnel Transformer model)"),MNe.forEach(t),Wrr=i(X),jF=n(X,"LI",{});var ENe=s(jF);C2e=n(ENe,"STRONG",{});var RCt=s(C2e);Hrr=r(RCt,"gptj"),RCt.forEach(t),Urr=r(ENe," \u2014 "),VQ=n(ENe,"A",{href:!0});var PCt=s(VQ);Jrr=r(PCt,"GPTJForQuestionAnswering"),PCt.forEach(t),Yrr=r(ENe," (GPT-J model)"),ENe.forEach(t),Krr=i(X),DF=n(X,"LI",{});var CNe=s(DF);w2e=n(CNe,"STRONG",{});var BCt=s(w2e);Zrr=r(BCt,"ibert"),BCt.forEach(t),etr=r(CNe," \u2014 "),XQ=n(CNe,"A",{href:!0});var NCt=s(XQ);otr=r(NCt,"IBertForQuestionAnswering"),NCt.forEach(t),rtr=r(CNe," (I-BERT model)"),CNe.forEach(t),ttr=i(X),GF=n(X,"LI",{});var wNe=s(GF);A2e=n(wNe,"STRONG",{});var ICt=s(A2e);atr=r(ICt,"layoutlmv2"),ICt.forEach(t),ntr=r(wNe," \u2014 "),zQ=n(wNe,"A",{href:!0});var qCt=s(zQ);str=r(qCt,"LayoutLMv2ForQuestionAnswering"),qCt.forEach(t),ltr=r(wNe," (LayoutLMv2 model)"),wNe.forEach(t),itr=i(X),OF=n(X,"LI",{});var ANe=s(OF);L2e=n(ANe,"STRONG",{});var jCt=s(L2e);dtr=r(jCt,"layoutlmv3"),jCt.forEach(t),ctr=r(ANe," \u2014 "),QQ=n(ANe,"A",{href:!0});var DCt=s(QQ);ftr=r(DCt,"LayoutLMv3ForQuestionAnswering"),DCt.forEach(t),mtr=r(ANe," (LayoutLMv3 model)"),ANe.forEach(t),gtr=i(X),VF=n(X,"LI",{});var LNe=s(VF);y2e=n(LNe,"STRONG",{});var GCt=s(y2e);htr=r(GCt,"led"),GCt.forEach(t),ptr=r(LNe," \u2014 "),WQ=n(LNe,"A",{href:!0});var OCt=s(WQ);_tr=r(OCt,"LEDForQuestionAnswering"),OCt.forEach(t),utr=r(LNe," (LED model)"),LNe.forEach(t),btr=i(X),XF=n(X,"LI",{});var yNe=s(XF);x2e=n(yNe,"STRONG",{});var VCt=s(x2e);vtr=r(VCt,"longformer"),VCt.forEach(t),Ftr=r(yNe," \u2014 "),HQ=n(yNe,"A",{href:!0});var XCt=s(HQ);Ttr=r(XCt,"LongformerForQuestionAnswering"),XCt.forEach(t),Mtr=r(yNe," (Longformer model)"),yNe.forEach(t),Etr=i(X),zF=n(X,"LI",{});var xNe=s(zF);$2e=n(xNe,"STRONG",{});var zCt=s($2e);Ctr=r(zCt,"lxmert"),zCt.forEach(t),wtr=r(xNe," \u2014 "),UQ=n(xNe,"A",{href:!0});var QCt=s(UQ);Atr=r(QCt,"LxmertForQuestionAnswering"),QCt.forEach(t),Ltr=r(xNe," (LXMERT model)"),xNe.forEach(t),ytr=i(X),QF=n(X,"LI",{});var $Ne=s(QF);k2e=n($Ne,"STRONG",{});var WCt=s(k2e);xtr=r(WCt,"mbart"),WCt.forEach(t),$tr=r($Ne," \u2014 "),JQ=n($Ne,"A",{href:!0});var HCt=s(JQ);ktr=r(HCt,"MBartForQuestionAnswering"),HCt.forEach(t),Str=r($Ne," (mBART model)"),$Ne.forEach(t),Rtr=i(X),WF=n(X,"LI",{});var kNe=s(WF);S2e=n(kNe,"STRONG",{});var UCt=s(S2e);Ptr=r(UCt,"megatron-bert"),UCt.forEach(t),Btr=r(kNe," \u2014 "),YQ=n(kNe,"A",{href:!0});var JCt=s(YQ);Ntr=r(JCt,"MegatronBertForQuestionAnswering"),JCt.forEach(t),Itr=r(kNe," (Megatron-BERT model)"),kNe.forEach(t),qtr=i(X),HF=n(X,"LI",{});var SNe=s(HF);R2e=n(SNe,"STRONG",{});var YCt=s(R2e);jtr=r(YCt,"mobilebert"),YCt.forEach(t),Dtr=r(SNe," \u2014 "),KQ=n(SNe,"A",{href:!0});var KCt=s(KQ);Gtr=r(KCt,"MobileBertForQuestionAnswering"),KCt.forEach(t),Otr=r(SNe," (MobileBERT model)"),SNe.forEach(t),Vtr=i(X),UF=n(X,"LI",{});var RNe=s(UF);P2e=n(RNe,"STRONG",{});var ZCt=s(P2e);Xtr=r(ZCt,"mpnet"),ZCt.forEach(t),ztr=r(RNe," \u2014 "),ZQ=n(RNe,"A",{href:!0});var e3t=s(ZQ);Qtr=r(e3t,"MPNetForQuestionAnswering"),e3t.forEach(t),Wtr=r(RNe," (MPNet model)"),RNe.forEach(t),Htr=i(X),JF=n(X,"LI",{});var PNe=s(JF);B2e=n(PNe,"STRONG",{});var o3t=s(B2e);Utr=r(o3t,"mvp"),o3t.forEach(t),Jtr=r(PNe," \u2014 "),eW=n(PNe,"A",{href:!0});var r3t=s(eW);Ytr=r(r3t,"MvpForQuestionAnswering"),r3t.forEach(t),Ktr=r(PNe," (MVP model)"),PNe.forEach(t),Ztr=i(X),YF=n(X,"LI",{});var BNe=s(YF);N2e=n(BNe,"STRONG",{});var t3t=s(N2e);ear=r(t3t,"nezha"),t3t.forEach(t),oar=r(BNe," \u2014 "),oW=n(BNe,"A",{href:!0});var a3t=s(oW);rar=r(a3t,"NezhaForQuestionAnswering"),a3t.forEach(t),tar=r(BNe," (Nezha model)"),BNe.forEach(t),aar=i(X),KF=n(X,"LI",{});var NNe=s(KF);I2e=n(NNe,"STRONG",{});var n3t=s(I2e);nar=r(n3t,"nystromformer"),n3t.forEach(t),sar=r(NNe," \u2014 "),rW=n(NNe,"A",{href:!0});var s3t=s(rW);lar=r(s3t,"NystromformerForQuestionAnswering"),s3t.forEach(t),iar=r(NNe," (Nystr\xF6mformer model)"),NNe.forEach(t),dar=i(X),ZF=n(X,"LI",{});var INe=s(ZF);q2e=n(INe,"STRONG",{});var l3t=s(q2e);car=r(l3t,"qdqbert"),l3t.forEach(t),far=r(INe," \u2014 "),tW=n(INe,"A",{href:!0});var i3t=s(tW);mar=r(i3t,"QDQBertForQuestionAnswering"),i3t.forEach(t),gar=r(INe," (QDQBert model)"),INe.forEach(t),har=i(X),eT=n(X,"LI",{});var qNe=s(eT);j2e=n(qNe,"STRONG",{});var d3t=s(j2e);par=r(d3t,"reformer"),d3t.forEach(t),_ar=r(qNe," \u2014 "),aW=n(qNe,"A",{href:!0});var c3t=s(aW);uar=r(c3t,"ReformerForQuestionAnswering"),c3t.forEach(t),bar=r(qNe," (Reformer model)"),qNe.forEach(t),Far=i(X),oT=n(X,"LI",{});var jNe=s(oT);D2e=n(jNe,"STRONG",{});var f3t=s(D2e);Tar=r(f3t,"rembert"),f3t.forEach(t),Mar=r(jNe," \u2014 "),nW=n(jNe,"A",{href:!0});var m3t=s(nW);Ear=r(m3t,"RemBertForQuestionAnswering"),m3t.forEach(t),Car=r(jNe," (RemBERT model)"),jNe.forEach(t),war=i(X),rT=n(X,"LI",{});var DNe=s(rT);G2e=n(DNe,"STRONG",{});var g3t=s(G2e);Aar=r(g3t,"roberta"),g3t.forEach(t),Lar=r(DNe," \u2014 "),sW=n(DNe,"A",{href:!0});var h3t=s(sW);yar=r(h3t,"RobertaForQuestionAnswering"),h3t.forEach(t),xar=r(DNe," (RoBERTa model)"),DNe.forEach(t),$ar=i(X),tT=n(X,"LI",{});var GNe=s(tT);O2e=n(GNe,"STRONG",{});var p3t=s(O2e);kar=r(p3t,"roformer"),p3t.forEach(t),Sar=r(GNe," \u2014 "),lW=n(GNe,"A",{href:!0});var _3t=s(lW);Rar=r(_3t,"RoFormerForQuestionAnswering"),_3t.forEach(t),Par=r(GNe," (RoFormer model)"),GNe.forEach(t),Bar=i(X),aT=n(X,"LI",{});var ONe=s(aT);V2e=n(ONe,"STRONG",{});var u3t=s(V2e);Nar=r(u3t,"splinter"),u3t.forEach(t),Iar=r(ONe," \u2014 "),iW=n(ONe,"A",{href:!0});var b3t=s(iW);qar=r(b3t,"SplinterForQuestionAnswering"),b3t.forEach(t),jar=r(ONe," (Splinter model)"),ONe.forEach(t),Dar=i(X),nT=n(X,"LI",{});var VNe=s(nT);X2e=n(VNe,"STRONG",{});var v3t=s(X2e);Gar=r(v3t,"squeezebert"),v3t.forEach(t),Oar=r(VNe," \u2014 "),dW=n(VNe,"A",{href:!0});var F3t=s(dW);Var=r(F3t,"SqueezeBertForQuestionAnswering"),F3t.forEach(t),Xar=r(VNe," (SqueezeBERT model)"),VNe.forEach(t),zar=i(X),sT=n(X,"LI",{});var XNe=s(sT);z2e=n(XNe,"STRONG",{});var T3t=s(z2e);Qar=r(T3t,"xlm"),T3t.forEach(t),War=r(XNe," \u2014 "),cW=n(XNe,"A",{href:!0});var M3t=s(cW);Har=r(M3t,"XLMForQuestionAnsweringSimple"),M3t.forEach(t),Uar=r(XNe," (XLM model)"),XNe.forEach(t),Jar=i(X),lT=n(X,"LI",{});var zNe=s(lT);Q2e=n(zNe,"STRONG",{});var E3t=s(Q2e);Yar=r(E3t,"xlm-roberta"),E3t.forEach(t),Kar=r(zNe," \u2014 "),fW=n(zNe,"A",{href:!0});var C3t=s(fW);Zar=r(C3t,"XLMRobertaForQuestionAnswering"),C3t.forEach(t),enr=r(zNe," (XLM-RoBERTa model)"),zNe.forEach(t),onr=i(X),iT=n(X,"LI",{});var QNe=s(iT);W2e=n(QNe,"STRONG",{});var w3t=s(W2e);rnr=r(w3t,"xlm-roberta-xl"),w3t.forEach(t),tnr=r(QNe," \u2014 "),mW=n(QNe,"A",{href:!0});var A3t=s(mW);anr=r(A3t,"XLMRobertaXLForQuestionAnswering"),A3t.forEach(t),nnr=r(QNe," (XLM-RoBERTa-XL model)"),QNe.forEach(t),snr=i(X),dT=n(X,"LI",{});var WNe=s(dT);H2e=n(WNe,"STRONG",{});var L3t=s(H2e);lnr=r(L3t,"xlnet"),L3t.forEach(t),inr=r(WNe," \u2014 "),gW=n(WNe,"A",{href:!0});var y3t=s(gW);dnr=r(y3t,"XLNetForQuestionAnsweringSimple"),y3t.forEach(t),cnr=r(WNe," (XLNet model)"),WNe.forEach(t),fnr=i(X),cT=n(X,"LI",{});var HNe=s(cT);U2e=n(HNe,"STRONG",{});var x3t=s(U2e);mnr=r(x3t,"yoso"),x3t.forEach(t),gnr=r(HNe," \u2014 "),hW=n(HNe,"A",{href:!0});var $3t=s(hW);hnr=r($3t,"YosoForQuestionAnswering"),$3t.forEach(t),pnr=r(HNe," (YOSO model)"),HNe.forEach(t),X.forEach(t),_nr=i(ua),fT=n(ua,"P",{});var UNe=s(fT);unr=r(UNe,"The model is set in evaluation mode by default using "),J2e=n(UNe,"CODE",{});var k3t=s(J2e);bnr=r(k3t,"model.eval()"),k3t.forEach(t),vnr=r(UNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y2e=n(UNe,"CODE",{});var S3t=s(Y2e);Fnr=r(S3t,"model.train()"),S3t.forEach(t),UNe.forEach(t),Tnr=i(ua),T(mT.$$.fragment,ua),ua.forEach(t),ml.forEach(t),VXe=i(f),bd=n(f,"H2",{class:!0});var UQe=s(bd);gT=n(UQe,"A",{id:!0,class:!0,href:!0});var R3t=s(gT);K2e=n(R3t,"SPAN",{});var P3t=s(K2e);T(xL.$$.fragment,P3t),P3t.forEach(t),R3t.forEach(t),Mnr=i(UQe),Z2e=n(UQe,"SPAN",{});var B3t=s(Z2e);Enr=r(B3t,"AutoModelForTableQuestionAnswering"),B3t.forEach(t),UQe.forEach(t),XXe=i(f),Go=n(f,"DIV",{class:!0});var gl=s(Go);T($L.$$.fragment,gl),Cnr=i(gl),vd=n(gl,"P",{});var nte=s(vd);wnr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pW=n(nte,"A",{href:!0});var N3t=s(pW);Anr=r(N3t,"from_pretrained()"),N3t.forEach(t),Lnr=r(nte," class method or the "),_W=n(nte,"A",{href:!0});var I3t=s(_W);ynr=r(I3t,"from_config()"),I3t.forEach(t),xnr=r(nte,` class
method.`),nte.forEach(t),$nr=i(gl),kL=n(gl,"P",{});var JQe=s(kL);knr=r(JQe,"This class cannot be instantiated directly using "),ebe=n(JQe,"CODE",{});var q3t=s(ebe);Snr=r(q3t,"__init__()"),q3t.forEach(t),Rnr=r(JQe," (throws an error)."),JQe.forEach(t),Pnr=i(gl),bt=n(gl,"DIV",{class:!0});var kw=s(bt);T(SL.$$.fragment,kw),Bnr=i(kw),obe=n(kw,"P",{});var j3t=s(obe);Nnr=r(j3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),j3t.forEach(t),Inr=i(kw),Fd=n(kw,"P",{});var ste=s(Fd);qnr=r(ste,`Note:
Loading a model from its configuration file does `),rbe=n(ste,"STRONG",{});var D3t=s(rbe);jnr=r(D3t,"not"),D3t.forEach(t),Dnr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(ste,"A",{href:!0});var G3t=s(uW);Gnr=r(G3t,"from_pretrained()"),G3t.forEach(t),Onr=r(ste," to load the model weights."),ste.forEach(t),Vnr=i(kw),T(hT.$$.fragment,kw),kw.forEach(t),Xnr=i(gl),lo=n(gl,"DIV",{class:!0});var ba=s(lo);T(RL.$$.fragment,ba),znr=i(ba),tbe=n(ba,"P",{});var O3t=s(tbe);Qnr=r(O3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),O3t.forEach(t),Wnr=i(ba),Qa=n(ba,"P",{});var Sw=s(Qa);Hnr=r(Sw,"The model class to instantiate is selected based on the "),abe=n(Sw,"CODE",{});var V3t=s(abe);Unr=r(V3t,"model_type"),V3t.forEach(t),Jnr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),nbe=n(Sw,"CODE",{});var X3t=s(nbe);Ynr=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),Knr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=n(Sw,"CODE",{});var z3t=s(sbe);Znr=r(z3t,"pretrained_model_name_or_path"),z3t.forEach(t),esr=r(Sw,":"),Sw.forEach(t),osr=i(ba),lbe=n(ba,"UL",{});var Q3t=s(lbe);pT=n(Q3t,"LI",{});var JNe=s(pT);ibe=n(JNe,"STRONG",{});var W3t=s(ibe);rsr=r(W3t,"tapas"),W3t.forEach(t),tsr=r(JNe," \u2014 "),bW=n(JNe,"A",{href:!0});var H3t=s(bW);asr=r(H3t,"TapasForQuestionAnswering"),H3t.forEach(t),nsr=r(JNe," (TAPAS model)"),JNe.forEach(t),Q3t.forEach(t),ssr=i(ba),_T=n(ba,"P",{});var YNe=s(_T);lsr=r(YNe,"The model is set in evaluation mode by default using "),dbe=n(YNe,"CODE",{});var U3t=s(dbe);isr=r(U3t,"model.eval()"),U3t.forEach(t),dsr=r(YNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=n(YNe,"CODE",{});var J3t=s(cbe);csr=r(J3t,"model.train()"),J3t.forEach(t),YNe.forEach(t),fsr=i(ba),T(uT.$$.fragment,ba),ba.forEach(t),gl.forEach(t),zXe=i(f),Td=n(f,"H2",{class:!0});var YQe=s(Td);bT=n(YQe,"A",{id:!0,class:!0,href:!0});var Y3t=s(bT);fbe=n(Y3t,"SPAN",{});var K3t=s(fbe);T(PL.$$.fragment,K3t),K3t.forEach(t),Y3t.forEach(t),msr=i(YQe),mbe=n(YQe,"SPAN",{});var Z3t=s(mbe);gsr=r(Z3t,"AutoModelForImageClassification"),Z3t.forEach(t),YQe.forEach(t),QXe=i(f),Oo=n(f,"DIV",{class:!0});var hl=s(Oo);T(BL.$$.fragment,hl),hsr=i(hl),Md=n(hl,"P",{});var lte=s(Md);psr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vW=n(lte,"A",{href:!0});var e5t=s(vW);_sr=r(e5t,"from_pretrained()"),e5t.forEach(t),usr=r(lte," class method or the "),FW=n(lte,"A",{href:!0});var o5t=s(FW);bsr=r(o5t,"from_config()"),o5t.forEach(t),vsr=r(lte,` class
method.`),lte.forEach(t),Fsr=i(hl),NL=n(hl,"P",{});var KQe=s(NL);Tsr=r(KQe,"This class cannot be instantiated directly using "),gbe=n(KQe,"CODE",{});var r5t=s(gbe);Msr=r(r5t,"__init__()"),r5t.forEach(t),Esr=r(KQe," (throws an error)."),KQe.forEach(t),Csr=i(hl),vt=n(hl,"DIV",{class:!0});var Rw=s(vt);T(IL.$$.fragment,Rw),wsr=i(Rw),hbe=n(Rw,"P",{});var t5t=s(hbe);Asr=r(t5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),t5t.forEach(t),Lsr=i(Rw),Ed=n(Rw,"P",{});var ite=s(Ed);ysr=r(ite,`Note:
Loading a model from its configuration file does `),pbe=n(ite,"STRONG",{});var a5t=s(pbe);xsr=r(a5t,"not"),a5t.forEach(t),$sr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(ite,"A",{href:!0});var n5t=s(TW);ksr=r(n5t,"from_pretrained()"),n5t.forEach(t),Ssr=r(ite," to load the model weights."),ite.forEach(t),Rsr=i(Rw),T(vT.$$.fragment,Rw),Rw.forEach(t),Psr=i(hl),io=n(hl,"DIV",{class:!0});var va=s(io);T(qL.$$.fragment,va),Bsr=i(va),_be=n(va,"P",{});var s5t=s(_be);Nsr=r(s5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),s5t.forEach(t),Isr=i(va),Wa=n(va,"P",{});var Pw=s(Wa);qsr=r(Pw,"The model class to instantiate is selected based on the "),ube=n(Pw,"CODE",{});var l5t=s(ube);jsr=r(l5t,"model_type"),l5t.forEach(t),Dsr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),bbe=n(Pw,"CODE",{});var i5t=s(bbe);Gsr=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),Osr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=n(Pw,"CODE",{});var d5t=s(vbe);Vsr=r(d5t,"pretrained_model_name_or_path"),d5t.forEach(t),Xsr=r(Pw,":"),Pw.forEach(t),zsr=i(va),ve=n(va,"UL",{});var Te=s(ve);FT=n(Te,"LI",{});var KNe=s(FT);Fbe=n(KNe,"STRONG",{});var c5t=s(Fbe);Qsr=r(c5t,"beit"),c5t.forEach(t),Wsr=r(KNe," \u2014 "),MW=n(KNe,"A",{href:!0});var f5t=s(MW);Hsr=r(f5t,"BeitForImageClassification"),f5t.forEach(t),Usr=r(KNe," (BEiT model)"),KNe.forEach(t),Jsr=i(Te),TT=n(Te,"LI",{});var ZNe=s(TT);Tbe=n(ZNe,"STRONG",{});var m5t=s(Tbe);Ysr=r(m5t,"convnext"),m5t.forEach(t),Ksr=r(ZNe," \u2014 "),EW=n(ZNe,"A",{href:!0});var g5t=s(EW);Zsr=r(g5t,"ConvNextForImageClassification"),g5t.forEach(t),elr=r(ZNe," (ConvNeXT model)"),ZNe.forEach(t),olr=i(Te),MT=n(Te,"LI",{});var eIe=s(MT);Mbe=n(eIe,"STRONG",{});var h5t=s(Mbe);rlr=r(h5t,"cvt"),h5t.forEach(t),tlr=r(eIe," \u2014 "),CW=n(eIe,"A",{href:!0});var p5t=s(CW);alr=r(p5t,"CvtForImageClassification"),p5t.forEach(t),nlr=r(eIe," (CvT model)"),eIe.forEach(t),slr=i(Te),ET=n(Te,"LI",{});var oIe=s(ET);Ebe=n(oIe,"STRONG",{});var _5t=s(Ebe);llr=r(_5t,"data2vec-vision"),_5t.forEach(t),ilr=r(oIe," \u2014 "),wW=n(oIe,"A",{href:!0});var u5t=s(wW);dlr=r(u5t,"Data2VecVisionForImageClassification"),u5t.forEach(t),clr=r(oIe," (Data2VecVision model)"),oIe.forEach(t),flr=i(Te),Us=n(Te,"LI",{});var BS=s(Us);Cbe=n(BS,"STRONG",{});var b5t=s(Cbe);mlr=r(b5t,"deit"),b5t.forEach(t),glr=r(BS," \u2014 "),AW=n(BS,"A",{href:!0});var v5t=s(AW);hlr=r(v5t,"DeiTForImageClassification"),v5t.forEach(t),plr=r(BS," or "),LW=n(BS,"A",{href:!0});var F5t=s(LW);_lr=r(F5t,"DeiTForImageClassificationWithTeacher"),F5t.forEach(t),ulr=r(BS," (DeiT model)"),BS.forEach(t),blr=i(Te),CT=n(Te,"LI",{});var rIe=s(CT);wbe=n(rIe,"STRONG",{});var T5t=s(wbe);vlr=r(T5t,"imagegpt"),T5t.forEach(t),Flr=r(rIe," \u2014 "),yW=n(rIe,"A",{href:!0});var M5t=s(yW);Tlr=r(M5t,"ImageGPTForImageClassification"),M5t.forEach(t),Mlr=r(rIe," (ImageGPT model)"),rIe.forEach(t),Elr=i(Te),Js=n(Te,"LI",{});var NS=s(Js);Abe=n(NS,"STRONG",{});var E5t=s(Abe);Clr=r(E5t,"levit"),E5t.forEach(t),wlr=r(NS," \u2014 "),xW=n(NS,"A",{href:!0});var C5t=s(xW);Alr=r(C5t,"LevitForImageClassification"),C5t.forEach(t),Llr=r(NS," or "),$W=n(NS,"A",{href:!0});var w5t=s($W);ylr=r(w5t,"LevitForImageClassificationWithTeacher"),w5t.forEach(t),xlr=r(NS," (LeViT model)"),NS.forEach(t),$lr=i(Te),wT=n(Te,"LI",{});var tIe=s(wT);Lbe=n(tIe,"STRONG",{});var A5t=s(Lbe);klr=r(A5t,"mobilevit"),A5t.forEach(t),Slr=r(tIe," \u2014 "),kW=n(tIe,"A",{href:!0});var L5t=s(kW);Rlr=r(L5t,"MobileViTForImageClassification"),L5t.forEach(t),Plr=r(tIe," (MobileViT model)"),tIe.forEach(t),Blr=i(Te),Ft=n(Te,"LI",{});var Pf=s(Ft);ybe=n(Pf,"STRONG",{});var y5t=s(ybe);Nlr=r(y5t,"perceiver"),y5t.forEach(t),Ilr=r(Pf," \u2014 "),SW=n(Pf,"A",{href:!0});var x5t=s(SW);qlr=r(x5t,"PerceiverForImageClassificationLearned"),x5t.forEach(t),jlr=r(Pf," or "),RW=n(Pf,"A",{href:!0});var $5t=s(RW);Dlr=r($5t,"PerceiverForImageClassificationFourier"),$5t.forEach(t),Glr=r(Pf," or "),PW=n(Pf,"A",{href:!0});var k5t=s(PW);Olr=r(k5t,"PerceiverForImageClassificationConvProcessing"),k5t.forEach(t),Vlr=r(Pf," (Perceiver model)"),Pf.forEach(t),Xlr=i(Te),AT=n(Te,"LI",{});var aIe=s(AT);xbe=n(aIe,"STRONG",{});var S5t=s(xbe);zlr=r(S5t,"poolformer"),S5t.forEach(t),Qlr=r(aIe," \u2014 "),BW=n(aIe,"A",{href:!0});var R5t=s(BW);Wlr=r(R5t,"PoolFormerForImageClassification"),R5t.forEach(t),Hlr=r(aIe," (PoolFormer model)"),aIe.forEach(t),Ulr=i(Te),LT=n(Te,"LI",{});var nIe=s(LT);$be=n(nIe,"STRONG",{});var P5t=s($be);Jlr=r(P5t,"regnet"),P5t.forEach(t),Ylr=r(nIe," \u2014 "),NW=n(nIe,"A",{href:!0});var B5t=s(NW);Klr=r(B5t,"RegNetForImageClassification"),B5t.forEach(t),Zlr=r(nIe," (RegNet model)"),nIe.forEach(t),eir=i(Te),yT=n(Te,"LI",{});var sIe=s(yT);kbe=n(sIe,"STRONG",{});var N5t=s(kbe);oir=r(N5t,"resnet"),N5t.forEach(t),rir=r(sIe," \u2014 "),IW=n(sIe,"A",{href:!0});var I5t=s(IW);tir=r(I5t,"ResNetForImageClassification"),I5t.forEach(t),air=r(sIe," (ResNet model)"),sIe.forEach(t),nir=i(Te),xT=n(Te,"LI",{});var lIe=s(xT);Sbe=n(lIe,"STRONG",{});var q5t=s(Sbe);sir=r(q5t,"segformer"),q5t.forEach(t),lir=r(lIe," \u2014 "),qW=n(lIe,"A",{href:!0});var j5t=s(qW);iir=r(j5t,"SegformerForImageClassification"),j5t.forEach(t),dir=r(lIe," (SegFormer model)"),lIe.forEach(t),cir=i(Te),$T=n(Te,"LI",{});var iIe=s($T);Rbe=n(iIe,"STRONG",{});var D5t=s(Rbe);fir=r(D5t,"swin"),D5t.forEach(t),mir=r(iIe," \u2014 "),jW=n(iIe,"A",{href:!0});var G5t=s(jW);gir=r(G5t,"SwinForImageClassification"),G5t.forEach(t),hir=r(iIe," (Swin Transformer model)"),iIe.forEach(t),pir=i(Te),kT=n(Te,"LI",{});var dIe=s(kT);Pbe=n(dIe,"STRONG",{});var O5t=s(Pbe);_ir=r(O5t,"van"),O5t.forEach(t),uir=r(dIe," \u2014 "),DW=n(dIe,"A",{href:!0});var V5t=s(DW);bir=r(V5t,"VanForImageClassification"),V5t.forEach(t),vir=r(dIe," (VAN model)"),dIe.forEach(t),Fir=i(Te),ST=n(Te,"LI",{});var cIe=s(ST);Bbe=n(cIe,"STRONG",{});var X5t=s(Bbe);Tir=r(X5t,"vit"),X5t.forEach(t),Mir=r(cIe," \u2014 "),GW=n(cIe,"A",{href:!0});var z5t=s(GW);Eir=r(z5t,"ViTForImageClassification"),z5t.forEach(t),Cir=r(cIe," (ViT model)"),cIe.forEach(t),Te.forEach(t),wir=i(va),RT=n(va,"P",{});var fIe=s(RT);Air=r(fIe,"The model is set in evaluation mode by default using "),Nbe=n(fIe,"CODE",{});var Q5t=s(Nbe);Lir=r(Q5t,"model.eval()"),Q5t.forEach(t),yir=r(fIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=n(fIe,"CODE",{});var W5t=s(Ibe);xir=r(W5t,"model.train()"),W5t.forEach(t),fIe.forEach(t),$ir=i(va),T(PT.$$.fragment,va),va.forEach(t),hl.forEach(t),WXe=i(f),Cd=n(f,"H2",{class:!0});var ZQe=s(Cd);BT=n(ZQe,"A",{id:!0,class:!0,href:!0});var H5t=s(BT);qbe=n(H5t,"SPAN",{});var U5t=s(qbe);T(jL.$$.fragment,U5t),U5t.forEach(t),H5t.forEach(t),kir=i(ZQe),jbe=n(ZQe,"SPAN",{});var J5t=s(jbe);Sir=r(J5t,"AutoModelForVision2Seq"),J5t.forEach(t),ZQe.forEach(t),HXe=i(f),Vo=n(f,"DIV",{class:!0});var pl=s(Vo);T(DL.$$.fragment,pl),Rir=i(pl),wd=n(pl,"P",{});var dte=s(wd);Pir=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OW=n(dte,"A",{href:!0});var Y5t=s(OW);Bir=r(Y5t,"from_pretrained()"),Y5t.forEach(t),Nir=r(dte," class method or the "),VW=n(dte,"A",{href:!0});var K5t=s(VW);Iir=r(K5t,"from_config()"),K5t.forEach(t),qir=r(dte,` class
method.`),dte.forEach(t),jir=i(pl),GL=n(pl,"P",{});var eWe=s(GL);Dir=r(eWe,"This class cannot be instantiated directly using "),Dbe=n(eWe,"CODE",{});var Z5t=s(Dbe);Gir=r(Z5t,"__init__()"),Z5t.forEach(t),Oir=r(eWe," (throws an error)."),eWe.forEach(t),Vir=i(pl),Tt=n(pl,"DIV",{class:!0});var Bw=s(Tt);T(OL.$$.fragment,Bw),Xir=i(Bw),Gbe=n(Bw,"P",{});var ewt=s(Gbe);zir=r(ewt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ewt.forEach(t),Qir=i(Bw),Ad=n(Bw,"P",{});var cte=s(Ad);Wir=r(cte,`Note:
Loading a model from its configuration file does `),Obe=n(cte,"STRONG",{});var owt=s(Obe);Hir=r(owt,"not"),owt.forEach(t),Uir=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(cte,"A",{href:!0});var rwt=s(XW);Jir=r(rwt,"from_pretrained()"),rwt.forEach(t),Yir=r(cte," to load the model weights."),cte.forEach(t),Kir=i(Bw),T(NT.$$.fragment,Bw),Bw.forEach(t),Zir=i(pl),co=n(pl,"DIV",{class:!0});var Fa=s(co);T(VL.$$.fragment,Fa),edr=i(Fa),Vbe=n(Fa,"P",{});var twt=s(Vbe);odr=r(twt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),twt.forEach(t),rdr=i(Fa),Ha=n(Fa,"P",{});var Nw=s(Ha);tdr=r(Nw,"The model class to instantiate is selected based on the "),Xbe=n(Nw,"CODE",{});var awt=s(Xbe);adr=r(awt,"model_type"),awt.forEach(t),ndr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),zbe=n(Nw,"CODE",{});var nwt=s(zbe);sdr=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),ldr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(Nw,"CODE",{});var swt=s(Qbe);idr=r(swt,"pretrained_model_name_or_path"),swt.forEach(t),ddr=r(Nw,":"),Nw.forEach(t),cdr=i(Fa),Wbe=n(Fa,"UL",{});var lwt=s(Wbe);IT=n(lwt,"LI",{});var mIe=s(IT);Hbe=n(mIe,"STRONG",{});var iwt=s(Hbe);fdr=r(iwt,"vision-encoder-decoder"),iwt.forEach(t),mdr=r(mIe," \u2014 "),zW=n(mIe,"A",{href:!0});var dwt=s(zW);gdr=r(dwt,"VisionEncoderDecoderModel"),dwt.forEach(t),hdr=r(mIe," (Vision Encoder decoder model)"),mIe.forEach(t),lwt.forEach(t),pdr=i(Fa),qT=n(Fa,"P",{});var gIe=s(qT);_dr=r(gIe,"The model is set in evaluation mode by default using "),Ube=n(gIe,"CODE",{});var cwt=s(Ube);udr=r(cwt,"model.eval()"),cwt.forEach(t),bdr=r(gIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=n(gIe,"CODE",{});var fwt=s(Jbe);vdr=r(fwt,"model.train()"),fwt.forEach(t),gIe.forEach(t),Fdr=i(Fa),T(jT.$$.fragment,Fa),Fa.forEach(t),pl.forEach(t),UXe=i(f),Ld=n(f,"H2",{class:!0});var oWe=s(Ld);DT=n(oWe,"A",{id:!0,class:!0,href:!0});var mwt=s(DT);Ybe=n(mwt,"SPAN",{});var gwt=s(Ybe);T(XL.$$.fragment,gwt),gwt.forEach(t),mwt.forEach(t),Tdr=i(oWe),Kbe=n(oWe,"SPAN",{});var hwt=s(Kbe);Mdr=r(hwt,"AutoModelForVisualQuestionAnswering"),hwt.forEach(t),oWe.forEach(t),JXe=i(f),Xo=n(f,"DIV",{class:!0});var _l=s(Xo);T(zL.$$.fragment,_l),Edr=i(_l),yd=n(_l,"P",{});var fte=s(yd);Cdr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),QW=n(fte,"A",{href:!0});var pwt=s(QW);wdr=r(pwt,"from_pretrained()"),pwt.forEach(t),Adr=r(fte," class method or the "),WW=n(fte,"A",{href:!0});var _wt=s(WW);Ldr=r(_wt,"from_config()"),_wt.forEach(t),ydr=r(fte,` class
method.`),fte.forEach(t),xdr=i(_l),QL=n(_l,"P",{});var rWe=s(QL);$dr=r(rWe,"This class cannot be instantiated directly using "),Zbe=n(rWe,"CODE",{});var uwt=s(Zbe);kdr=r(uwt,"__init__()"),uwt.forEach(t),Sdr=r(rWe," (throws an error)."),rWe.forEach(t),Rdr=i(_l),Mt=n(_l,"DIV",{class:!0});var Iw=s(Mt);T(WL.$$.fragment,Iw),Pdr=i(Iw),eve=n(Iw,"P",{});var bwt=s(eve);Bdr=r(bwt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),bwt.forEach(t),Ndr=i(Iw),xd=n(Iw,"P",{});var mte=s(xd);Idr=r(mte,`Note:
Loading a model from its configuration file does `),ove=n(mte,"STRONG",{});var vwt=s(ove);qdr=r(vwt,"not"),vwt.forEach(t),jdr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=n(mte,"A",{href:!0});var Fwt=s(HW);Ddr=r(Fwt,"from_pretrained()"),Fwt.forEach(t),Gdr=r(mte," to load the model weights."),mte.forEach(t),Odr=i(Iw),T(GT.$$.fragment,Iw),Iw.forEach(t),Vdr=i(_l),fo=n(_l,"DIV",{class:!0});var Ta=s(fo);T(HL.$$.fragment,Ta),Xdr=i(Ta),rve=n(Ta,"P",{});var Twt=s(rve);zdr=r(Twt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Twt.forEach(t),Qdr=i(Ta),Ua=n(Ta,"P",{});var qw=s(Ua);Wdr=r(qw,"The model class to instantiate is selected based on the "),tve=n(qw,"CODE",{});var Mwt=s(tve);Hdr=r(Mwt,"model_type"),Mwt.forEach(t),Udr=r(qw,` property of the config object (either
passed as an argument or loaded from `),ave=n(qw,"CODE",{});var Ewt=s(ave);Jdr=r(Ewt,"pretrained_model_name_or_path"),Ewt.forEach(t),Ydr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=n(qw,"CODE",{});var Cwt=s(nve);Kdr=r(Cwt,"pretrained_model_name_or_path"),Cwt.forEach(t),Zdr=r(qw,":"),qw.forEach(t),ecr=i(Ta),sve=n(Ta,"UL",{});var wwt=s(sve);OT=n(wwt,"LI",{});var hIe=s(OT);lve=n(hIe,"STRONG",{});var Awt=s(lve);ocr=r(Awt,"vilt"),Awt.forEach(t),rcr=r(hIe," \u2014 "),UW=n(hIe,"A",{href:!0});var Lwt=s(UW);tcr=r(Lwt,"ViltForQuestionAnswering"),Lwt.forEach(t),acr=r(hIe," (ViLT model)"),hIe.forEach(t),wwt.forEach(t),ncr=i(Ta),VT=n(Ta,"P",{});var pIe=s(VT);scr=r(pIe,"The model is set in evaluation mode by default using "),ive=n(pIe,"CODE",{});var ywt=s(ive);lcr=r(ywt,"model.eval()"),ywt.forEach(t),icr=r(pIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dve=n(pIe,"CODE",{});var xwt=s(dve);dcr=r(xwt,"model.train()"),xwt.forEach(t),pIe.forEach(t),ccr=i(Ta),T(XT.$$.fragment,Ta),Ta.forEach(t),_l.forEach(t),YXe=i(f),$d=n(f,"H2",{class:!0});var tWe=s($d);zT=n(tWe,"A",{id:!0,class:!0,href:!0});var $wt=s(zT);cve=n($wt,"SPAN",{});var kwt=s(cve);T(UL.$$.fragment,kwt),kwt.forEach(t),$wt.forEach(t),fcr=i(tWe),fve=n(tWe,"SPAN",{});var Swt=s(fve);mcr=r(Swt,"AutoModelForAudioClassification"),Swt.forEach(t),tWe.forEach(t),KXe=i(f),zo=n(f,"DIV",{class:!0});var ul=s(zo);T(JL.$$.fragment,ul),gcr=i(ul),kd=n(ul,"P",{});var gte=s(kd);hcr=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),JW=n(gte,"A",{href:!0});var Rwt=s(JW);pcr=r(Rwt,"from_pretrained()"),Rwt.forEach(t),_cr=r(gte," class method or the "),YW=n(gte,"A",{href:!0});var Pwt=s(YW);ucr=r(Pwt,"from_config()"),Pwt.forEach(t),bcr=r(gte,` class
method.`),gte.forEach(t),vcr=i(ul),YL=n(ul,"P",{});var aWe=s(YL);Fcr=r(aWe,"This class cannot be instantiated directly using "),mve=n(aWe,"CODE",{});var Bwt=s(mve);Tcr=r(Bwt,"__init__()"),Bwt.forEach(t),Mcr=r(aWe," (throws an error)."),aWe.forEach(t),Ecr=i(ul),Et=n(ul,"DIV",{class:!0});var jw=s(Et);T(KL.$$.fragment,jw),Ccr=i(jw),gve=n(jw,"P",{});var Nwt=s(gve);wcr=r(Nwt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Nwt.forEach(t),Acr=i(jw),Sd=n(jw,"P",{});var hte=s(Sd);Lcr=r(hte,`Note:
Loading a model from its configuration file does `),hve=n(hte,"STRONG",{});var Iwt=s(hve);ycr=r(Iwt,"not"),Iwt.forEach(t),xcr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(hte,"A",{href:!0});var qwt=s(KW);$cr=r(qwt,"from_pretrained()"),qwt.forEach(t),kcr=r(hte," to load the model weights."),hte.forEach(t),Scr=i(jw),T(QT.$$.fragment,jw),jw.forEach(t),Rcr=i(ul),mo=n(ul,"DIV",{class:!0});var Ma=s(mo);T(ZL.$$.fragment,Ma),Pcr=i(Ma),pve=n(Ma,"P",{});var jwt=s(pve);Bcr=r(jwt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),jwt.forEach(t),Ncr=i(Ma),Ja=n(Ma,"P",{});var Dw=s(Ja);Icr=r(Dw,"The model class to instantiate is selected based on the "),_ve=n(Dw,"CODE",{});var Dwt=s(_ve);qcr=r(Dwt,"model_type"),Dwt.forEach(t),jcr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),uve=n(Dw,"CODE",{});var Gwt=s(uve);Dcr=r(Gwt,"pretrained_model_name_or_path"),Gwt.forEach(t),Gcr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(Dw,"CODE",{});var Owt=s(bve);Ocr=r(Owt,"pretrained_model_name_or_path"),Owt.forEach(t),Vcr=r(Dw,":"),Dw.forEach(t),Xcr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);WT=n(ze,"LI",{});var _Ie=s(WT);vve=n(_Ie,"STRONG",{});var Vwt=s(vve);zcr=r(Vwt,"data2vec-audio"),Vwt.forEach(t),Qcr=r(_Ie," \u2014 "),ZW=n(_Ie,"A",{href:!0});var Xwt=s(ZW);Wcr=r(Xwt,"Data2VecAudioForSequenceClassification"),Xwt.forEach(t),Hcr=r(_Ie," (Data2VecAudio model)"),_Ie.forEach(t),Ucr=i(ze),HT=n(ze,"LI",{});var uIe=s(HT);Fve=n(uIe,"STRONG",{});var zwt=s(Fve);Jcr=r(zwt,"hubert"),zwt.forEach(t),Ycr=r(uIe," \u2014 "),eH=n(uIe,"A",{href:!0});var Qwt=s(eH);Kcr=r(Qwt,"HubertForSequenceClassification"),Qwt.forEach(t),Zcr=r(uIe," (Hubert model)"),uIe.forEach(t),efr=i(ze),UT=n(ze,"LI",{});var bIe=s(UT);Tve=n(bIe,"STRONG",{});var Wwt=s(Tve);ofr=r(Wwt,"sew"),Wwt.forEach(t),rfr=r(bIe," \u2014 "),oH=n(bIe,"A",{href:!0});var Hwt=s(oH);tfr=r(Hwt,"SEWForSequenceClassification"),Hwt.forEach(t),afr=r(bIe," (SEW model)"),bIe.forEach(t),nfr=i(ze),JT=n(ze,"LI",{});var vIe=s(JT);Mve=n(vIe,"STRONG",{});var Uwt=s(Mve);sfr=r(Uwt,"sew-d"),Uwt.forEach(t),lfr=r(vIe," \u2014 "),rH=n(vIe,"A",{href:!0});var Jwt=s(rH);ifr=r(Jwt,"SEWDForSequenceClassification"),Jwt.forEach(t),dfr=r(vIe," (SEW-D model)"),vIe.forEach(t),cfr=i(ze),YT=n(ze,"LI",{});var FIe=s(YT);Eve=n(FIe,"STRONG",{});var Ywt=s(Eve);ffr=r(Ywt,"unispeech"),Ywt.forEach(t),mfr=r(FIe," \u2014 "),tH=n(FIe,"A",{href:!0});var Kwt=s(tH);gfr=r(Kwt,"UniSpeechForSequenceClassification"),Kwt.forEach(t),hfr=r(FIe," (UniSpeech model)"),FIe.forEach(t),pfr=i(ze),KT=n(ze,"LI",{});var TIe=s(KT);Cve=n(TIe,"STRONG",{});var Zwt=s(Cve);_fr=r(Zwt,"unispeech-sat"),Zwt.forEach(t),ufr=r(TIe," \u2014 "),aH=n(TIe,"A",{href:!0});var eAt=s(aH);bfr=r(eAt,"UniSpeechSatForSequenceClassification"),eAt.forEach(t),vfr=r(TIe," (UniSpeechSat model)"),TIe.forEach(t),Ffr=i(ze),ZT=n(ze,"LI",{});var MIe=s(ZT);wve=n(MIe,"STRONG",{});var oAt=s(wve);Tfr=r(oAt,"wav2vec2"),oAt.forEach(t),Mfr=r(MIe," \u2014 "),nH=n(MIe,"A",{href:!0});var rAt=s(nH);Efr=r(rAt,"Wav2Vec2ForSequenceClassification"),rAt.forEach(t),Cfr=r(MIe," (Wav2Vec2 model)"),MIe.forEach(t),wfr=i(ze),e7=n(ze,"LI",{});var EIe=s(e7);Ave=n(EIe,"STRONG",{});var tAt=s(Ave);Afr=r(tAt,"wav2vec2-conformer"),tAt.forEach(t),Lfr=r(EIe," \u2014 "),sH=n(EIe,"A",{href:!0});var aAt=s(sH);yfr=r(aAt,"Wav2Vec2ConformerForSequenceClassification"),aAt.forEach(t),xfr=r(EIe," (Wav2Vec2-Conformer model)"),EIe.forEach(t),$fr=i(ze),o7=n(ze,"LI",{});var CIe=s(o7);Lve=n(CIe,"STRONG",{});var nAt=s(Lve);kfr=r(nAt,"wavlm"),nAt.forEach(t),Sfr=r(CIe," \u2014 "),lH=n(CIe,"A",{href:!0});var sAt=s(lH);Rfr=r(sAt,"WavLMForSequenceClassification"),sAt.forEach(t),Pfr=r(CIe," (WavLM model)"),CIe.forEach(t),ze.forEach(t),Bfr=i(Ma),r7=n(Ma,"P",{});var wIe=s(r7);Nfr=r(wIe,"The model is set in evaluation mode by default using "),yve=n(wIe,"CODE",{});var lAt=s(yve);Ifr=r(lAt,"model.eval()"),lAt.forEach(t),qfr=r(wIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=n(wIe,"CODE",{});var iAt=s(xve);jfr=r(iAt,"model.train()"),iAt.forEach(t),wIe.forEach(t),Dfr=i(Ma),T(t7.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),ZXe=i(f),Rd=n(f,"H2",{class:!0});var nWe=s(Rd);a7=n(nWe,"A",{id:!0,class:!0,href:!0});var dAt=s(a7);$ve=n(dAt,"SPAN",{});var cAt=s($ve);T(ey.$$.fragment,cAt),cAt.forEach(t),dAt.forEach(t),Gfr=i(nWe),kve=n(nWe,"SPAN",{});var fAt=s(kve);Ofr=r(fAt,"AutoModelForAudioFrameClassification"),fAt.forEach(t),nWe.forEach(t),eze=i(f),Qo=n(f,"DIV",{class:!0});var bl=s(Qo);T(oy.$$.fragment,bl),Vfr=i(bl),Pd=n(bl,"P",{});var pte=s(Pd);Xfr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iH=n(pte,"A",{href:!0});var mAt=s(iH);zfr=r(mAt,"from_pretrained()"),mAt.forEach(t),Qfr=r(pte," class method or the "),dH=n(pte,"A",{href:!0});var gAt=s(dH);Wfr=r(gAt,"from_config()"),gAt.forEach(t),Hfr=r(pte,` class
method.`),pte.forEach(t),Ufr=i(bl),ry=n(bl,"P",{});var sWe=s(ry);Jfr=r(sWe,"This class cannot be instantiated directly using "),Sve=n(sWe,"CODE",{});var hAt=s(Sve);Yfr=r(hAt,"__init__()"),hAt.forEach(t),Kfr=r(sWe," (throws an error)."),sWe.forEach(t),Zfr=i(bl),Ct=n(bl,"DIV",{class:!0});var Gw=s(Ct);T(ty.$$.fragment,Gw),emr=i(Gw),Rve=n(Gw,"P",{});var pAt=s(Rve);omr=r(pAt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),pAt.forEach(t),rmr=i(Gw),Bd=n(Gw,"P",{});var _te=s(Bd);tmr=r(_te,`Note:
Loading a model from its configuration file does `),Pve=n(_te,"STRONG",{});var _At=s(Pve);amr=r(_At,"not"),_At.forEach(t),nmr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(_te,"A",{href:!0});var uAt=s(cH);smr=r(uAt,"from_pretrained()"),uAt.forEach(t),lmr=r(_te," to load the model weights."),_te.forEach(t),imr=i(Gw),T(n7.$$.fragment,Gw),Gw.forEach(t),dmr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(ay.$$.fragment,Ea),cmr=i(Ea),Bve=n(Ea,"P",{});var bAt=s(Bve);fmr=r(bAt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),bAt.forEach(t),mmr=i(Ea),Ya=n(Ea,"P",{});var Ow=s(Ya);gmr=r(Ow,"The model class to instantiate is selected based on the "),Nve=n(Ow,"CODE",{});var vAt=s(Nve);hmr=r(vAt,"model_type"),vAt.forEach(t),pmr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),Ive=n(Ow,"CODE",{});var FAt=s(Ive);_mr=r(FAt,"pretrained_model_name_or_path"),FAt.forEach(t),umr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(Ow,"CODE",{});var TAt=s(qve);bmr=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),vmr=r(Ow,":"),Ow.forEach(t),Fmr=i(Ea),rt=n(Ea,"UL",{});var vl=s(rt);s7=n(vl,"LI",{});var AIe=s(s7);jve=n(AIe,"STRONG",{});var MAt=s(jve);Tmr=r(MAt,"data2vec-audio"),MAt.forEach(t),Mmr=r(AIe," \u2014 "),fH=n(AIe,"A",{href:!0});var EAt=s(fH);Emr=r(EAt,"Data2VecAudioForAudioFrameClassification"),EAt.forEach(t),Cmr=r(AIe," (Data2VecAudio model)"),AIe.forEach(t),wmr=i(vl),l7=n(vl,"LI",{});var LIe=s(l7);Dve=n(LIe,"STRONG",{});var CAt=s(Dve);Amr=r(CAt,"unispeech-sat"),CAt.forEach(t),Lmr=r(LIe," \u2014 "),mH=n(LIe,"A",{href:!0});var wAt=s(mH);ymr=r(wAt,"UniSpeechSatForAudioFrameClassification"),wAt.forEach(t),xmr=r(LIe," (UniSpeechSat model)"),LIe.forEach(t),$mr=i(vl),i7=n(vl,"LI",{});var yIe=s(i7);Gve=n(yIe,"STRONG",{});var AAt=s(Gve);kmr=r(AAt,"wav2vec2"),AAt.forEach(t),Smr=r(yIe," \u2014 "),gH=n(yIe,"A",{href:!0});var LAt=s(gH);Rmr=r(LAt,"Wav2Vec2ForAudioFrameClassification"),LAt.forEach(t),Pmr=r(yIe," (Wav2Vec2 model)"),yIe.forEach(t),Bmr=i(vl),d7=n(vl,"LI",{});var xIe=s(d7);Ove=n(xIe,"STRONG",{});var yAt=s(Ove);Nmr=r(yAt,"wav2vec2-conformer"),yAt.forEach(t),Imr=r(xIe," \u2014 "),hH=n(xIe,"A",{href:!0});var xAt=s(hH);qmr=r(xAt,"Wav2Vec2ConformerForAudioFrameClassification"),xAt.forEach(t),jmr=r(xIe," (Wav2Vec2-Conformer model)"),xIe.forEach(t),Dmr=i(vl),c7=n(vl,"LI",{});var $Ie=s(c7);Vve=n($Ie,"STRONG",{});var $At=s(Vve);Gmr=r($At,"wavlm"),$At.forEach(t),Omr=r($Ie," \u2014 "),pH=n($Ie,"A",{href:!0});var kAt=s(pH);Vmr=r(kAt,"WavLMForAudioFrameClassification"),kAt.forEach(t),Xmr=r($Ie," (WavLM model)"),$Ie.forEach(t),vl.forEach(t),zmr=i(Ea),f7=n(Ea,"P",{});var kIe=s(f7);Qmr=r(kIe,"The model is set in evaluation mode by default using "),Xve=n(kIe,"CODE",{});var SAt=s(Xve);Wmr=r(SAt,"model.eval()"),SAt.forEach(t),Hmr=r(kIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zve=n(kIe,"CODE",{});var RAt=s(zve);Umr=r(RAt,"model.train()"),RAt.forEach(t),kIe.forEach(t),Jmr=i(Ea),T(m7.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),oze=i(f),Nd=n(f,"H2",{class:!0});var lWe=s(Nd);g7=n(lWe,"A",{id:!0,class:!0,href:!0});var PAt=s(g7);Qve=n(PAt,"SPAN",{});var BAt=s(Qve);T(ny.$$.fragment,BAt),BAt.forEach(t),PAt.forEach(t),Ymr=i(lWe),Wve=n(lWe,"SPAN",{});var NAt=s(Wve);Kmr=r(NAt,"AutoModelForCTC"),NAt.forEach(t),lWe.forEach(t),rze=i(f),Wo=n(f,"DIV",{class:!0});var Fl=s(Wo);T(sy.$$.fragment,Fl),Zmr=i(Fl),Id=n(Fl,"P",{});var ute=s(Id);egr=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_H=n(ute,"A",{href:!0});var IAt=s(_H);ogr=r(IAt,"from_pretrained()"),IAt.forEach(t),rgr=r(ute," class method or the "),uH=n(ute,"A",{href:!0});var qAt=s(uH);tgr=r(qAt,"from_config()"),qAt.forEach(t),agr=r(ute,` class
method.`),ute.forEach(t),ngr=i(Fl),ly=n(Fl,"P",{});var iWe=s(ly);sgr=r(iWe,"This class cannot be instantiated directly using "),Hve=n(iWe,"CODE",{});var jAt=s(Hve);lgr=r(jAt,"__init__()"),jAt.forEach(t),igr=r(iWe," (throws an error)."),iWe.forEach(t),dgr=i(Fl),wt=n(Fl,"DIV",{class:!0});var Vw=s(wt);T(iy.$$.fragment,Vw),cgr=i(Vw),Uve=n(Vw,"P",{});var DAt=s(Uve);fgr=r(DAt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),DAt.forEach(t),mgr=i(Vw),qd=n(Vw,"P",{});var bte=s(qd);ggr=r(bte,`Note:
Loading a model from its configuration file does `),Jve=n(bte,"STRONG",{});var GAt=s(Jve);hgr=r(GAt,"not"),GAt.forEach(t),pgr=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(bte,"A",{href:!0});var OAt=s(bH);_gr=r(OAt,"from_pretrained()"),OAt.forEach(t),ugr=r(bte," to load the model weights."),bte.forEach(t),bgr=i(Vw),T(h7.$$.fragment,Vw),Vw.forEach(t),vgr=i(Fl),ho=n(Fl,"DIV",{class:!0});var Ca=s(ho);T(dy.$$.fragment,Ca),Fgr=i(Ca),Yve=n(Ca,"P",{});var VAt=s(Yve);Tgr=r(VAt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),VAt.forEach(t),Mgr=i(Ca),Ka=n(Ca,"P",{});var Xw=s(Ka);Egr=r(Xw,"The model class to instantiate is selected based on the "),Kve=n(Xw,"CODE",{});var XAt=s(Kve);Cgr=r(XAt,"model_type"),XAt.forEach(t),wgr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Zve=n(Xw,"CODE",{});var zAt=s(Zve);Agr=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),Lgr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=n(Xw,"CODE",{});var QAt=s(e0e);ygr=r(QAt,"pretrained_model_name_or_path"),QAt.forEach(t),xgr=r(Xw,":"),Xw.forEach(t),$gr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);p7=n(Be,"LI",{});var SIe=s(p7);o0e=n(SIe,"STRONG",{});var WAt=s(o0e);kgr=r(WAt,"data2vec-audio"),WAt.forEach(t),Sgr=r(SIe," \u2014 "),vH=n(SIe,"A",{href:!0});var HAt=s(vH);Rgr=r(HAt,"Data2VecAudioForCTC"),HAt.forEach(t),Pgr=r(SIe," (Data2VecAudio model)"),SIe.forEach(t),Bgr=i(Be),_7=n(Be,"LI",{});var RIe=s(_7);r0e=n(RIe,"STRONG",{});var UAt=s(r0e);Ngr=r(UAt,"hubert"),UAt.forEach(t),Igr=r(RIe," \u2014 "),FH=n(RIe,"A",{href:!0});var JAt=s(FH);qgr=r(JAt,"HubertForCTC"),JAt.forEach(t),jgr=r(RIe," (Hubert model)"),RIe.forEach(t),Dgr=i(Be),u7=n(Be,"LI",{});var PIe=s(u7);t0e=n(PIe,"STRONG",{});var YAt=s(t0e);Ggr=r(YAt,"mctct"),YAt.forEach(t),Ogr=r(PIe," \u2014 "),TH=n(PIe,"A",{href:!0});var KAt=s(TH);Vgr=r(KAt,"MCTCTForCTC"),KAt.forEach(t),Xgr=r(PIe," (M-CTC-T model)"),PIe.forEach(t),zgr=i(Be),b7=n(Be,"LI",{});var BIe=s(b7);a0e=n(BIe,"STRONG",{});var ZAt=s(a0e);Qgr=r(ZAt,"sew"),ZAt.forEach(t),Wgr=r(BIe," \u2014 "),MH=n(BIe,"A",{href:!0});var e6t=s(MH);Hgr=r(e6t,"SEWForCTC"),e6t.forEach(t),Ugr=r(BIe," (SEW model)"),BIe.forEach(t),Jgr=i(Be),v7=n(Be,"LI",{});var NIe=s(v7);n0e=n(NIe,"STRONG",{});var o6t=s(n0e);Ygr=r(o6t,"sew-d"),o6t.forEach(t),Kgr=r(NIe," \u2014 "),EH=n(NIe,"A",{href:!0});var r6t=s(EH);Zgr=r(r6t,"SEWDForCTC"),r6t.forEach(t),ehr=r(NIe," (SEW-D model)"),NIe.forEach(t),ohr=i(Be),F7=n(Be,"LI",{});var IIe=s(F7);s0e=n(IIe,"STRONG",{});var t6t=s(s0e);rhr=r(t6t,"unispeech"),t6t.forEach(t),thr=r(IIe," \u2014 "),CH=n(IIe,"A",{href:!0});var a6t=s(CH);ahr=r(a6t,"UniSpeechForCTC"),a6t.forEach(t),nhr=r(IIe," (UniSpeech model)"),IIe.forEach(t),shr=i(Be),T7=n(Be,"LI",{});var qIe=s(T7);l0e=n(qIe,"STRONG",{});var n6t=s(l0e);lhr=r(n6t,"unispeech-sat"),n6t.forEach(t),ihr=r(qIe," \u2014 "),wH=n(qIe,"A",{href:!0});var s6t=s(wH);dhr=r(s6t,"UniSpeechSatForCTC"),s6t.forEach(t),chr=r(qIe," (UniSpeechSat model)"),qIe.forEach(t),fhr=i(Be),M7=n(Be,"LI",{});var jIe=s(M7);i0e=n(jIe,"STRONG",{});var l6t=s(i0e);mhr=r(l6t,"wav2vec2"),l6t.forEach(t),ghr=r(jIe," \u2014 "),AH=n(jIe,"A",{href:!0});var i6t=s(AH);hhr=r(i6t,"Wav2Vec2ForCTC"),i6t.forEach(t),phr=r(jIe," (Wav2Vec2 model)"),jIe.forEach(t),_hr=i(Be),E7=n(Be,"LI",{});var DIe=s(E7);d0e=n(DIe,"STRONG",{});var d6t=s(d0e);uhr=r(d6t,"wav2vec2-conformer"),d6t.forEach(t),bhr=r(DIe," \u2014 "),LH=n(DIe,"A",{href:!0});var c6t=s(LH);vhr=r(c6t,"Wav2Vec2ConformerForCTC"),c6t.forEach(t),Fhr=r(DIe," (Wav2Vec2-Conformer model)"),DIe.forEach(t),Thr=i(Be),C7=n(Be,"LI",{});var GIe=s(C7);c0e=n(GIe,"STRONG",{});var f6t=s(c0e);Mhr=r(f6t,"wavlm"),f6t.forEach(t),Ehr=r(GIe," \u2014 "),yH=n(GIe,"A",{href:!0});var m6t=s(yH);Chr=r(m6t,"WavLMForCTC"),m6t.forEach(t),whr=r(GIe," (WavLM model)"),GIe.forEach(t),Be.forEach(t),Ahr=i(Ca),w7=n(Ca,"P",{});var OIe=s(w7);Lhr=r(OIe,"The model is set in evaluation mode by default using "),f0e=n(OIe,"CODE",{});var g6t=s(f0e);yhr=r(g6t,"model.eval()"),g6t.forEach(t),xhr=r(OIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m0e=n(OIe,"CODE",{});var h6t=s(m0e);$hr=r(h6t,"model.train()"),h6t.forEach(t),OIe.forEach(t),khr=i(Ca),T(A7.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),tze=i(f),jd=n(f,"H2",{class:!0});var dWe=s(jd);L7=n(dWe,"A",{id:!0,class:!0,href:!0});var p6t=s(L7);g0e=n(p6t,"SPAN",{});var _6t=s(g0e);T(cy.$$.fragment,_6t),_6t.forEach(t),p6t.forEach(t),Shr=i(dWe),h0e=n(dWe,"SPAN",{});var u6t=s(h0e);Rhr=r(u6t,"AutoModelForSpeechSeq2Seq"),u6t.forEach(t),dWe.forEach(t),aze=i(f),Ho=n(f,"DIV",{class:!0});var Tl=s(Ho);T(fy.$$.fragment,Tl),Phr=i(Tl),Dd=n(Tl,"P",{});var vte=s(Dd);Bhr=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xH=n(vte,"A",{href:!0});var b6t=s(xH);Nhr=r(b6t,"from_pretrained()"),b6t.forEach(t),Ihr=r(vte," class method or the "),$H=n(vte,"A",{href:!0});var v6t=s($H);qhr=r(v6t,"from_config()"),v6t.forEach(t),jhr=r(vte,` class
method.`),vte.forEach(t),Dhr=i(Tl),my=n(Tl,"P",{});var cWe=s(my);Ghr=r(cWe,"This class cannot be instantiated directly using "),p0e=n(cWe,"CODE",{});var F6t=s(p0e);Ohr=r(F6t,"__init__()"),F6t.forEach(t),Vhr=r(cWe," (throws an error)."),cWe.forEach(t),Xhr=i(Tl),At=n(Tl,"DIV",{class:!0});var zw=s(At);T(gy.$$.fragment,zw),zhr=i(zw),_0e=n(zw,"P",{});var T6t=s(_0e);Qhr=r(T6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),T6t.forEach(t),Whr=i(zw),Gd=n(zw,"P",{});var Fte=s(Gd);Hhr=r(Fte,`Note:
Loading a model from its configuration file does `),u0e=n(Fte,"STRONG",{});var M6t=s(u0e);Uhr=r(M6t,"not"),M6t.forEach(t),Jhr=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(Fte,"A",{href:!0});var E6t=s(kH);Yhr=r(E6t,"from_pretrained()"),E6t.forEach(t),Khr=r(Fte," to load the model weights."),Fte.forEach(t),Zhr=i(zw),T(y7.$$.fragment,zw),zw.forEach(t),epr=i(Tl),po=n(Tl,"DIV",{class:!0});var wa=s(po);T(hy.$$.fragment,wa),opr=i(wa),b0e=n(wa,"P",{});var C6t=s(b0e);rpr=r(C6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),C6t.forEach(t),tpr=i(wa),Za=n(wa,"P",{});var Qw=s(Za);apr=r(Qw,"The model class to instantiate is selected based on the "),v0e=n(Qw,"CODE",{});var w6t=s(v0e);npr=r(w6t,"model_type"),w6t.forEach(t),spr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),F0e=n(Qw,"CODE",{});var A6t=s(F0e);lpr=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),ipr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=n(Qw,"CODE",{});var L6t=s(T0e);dpr=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),cpr=r(Qw,":"),Qw.forEach(t),fpr=i(wa),py=n(wa,"UL",{});var fWe=s(py);x7=n(fWe,"LI",{});var VIe=s(x7);M0e=n(VIe,"STRONG",{});var y6t=s(M0e);mpr=r(y6t,"speech-encoder-decoder"),y6t.forEach(t),gpr=r(VIe," \u2014 "),SH=n(VIe,"A",{href:!0});var x6t=s(SH);hpr=r(x6t,"SpeechEncoderDecoderModel"),x6t.forEach(t),ppr=r(VIe," (Speech Encoder decoder model)"),VIe.forEach(t),_pr=i(fWe),$7=n(fWe,"LI",{});var XIe=s($7);E0e=n(XIe,"STRONG",{});var $6t=s(E0e);upr=r($6t,"speech_to_text"),$6t.forEach(t),bpr=r(XIe," \u2014 "),RH=n(XIe,"A",{href:!0});var k6t=s(RH);vpr=r(k6t,"Speech2TextForConditionalGeneration"),k6t.forEach(t),Fpr=r(XIe," (Speech2Text model)"),XIe.forEach(t),fWe.forEach(t),Tpr=i(wa),k7=n(wa,"P",{});var zIe=s(k7);Mpr=r(zIe,"The model is set in evaluation mode by default using "),C0e=n(zIe,"CODE",{});var S6t=s(C0e);Epr=r(S6t,"model.eval()"),S6t.forEach(t),Cpr=r(zIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w0e=n(zIe,"CODE",{});var R6t=s(w0e);wpr=r(R6t,"model.train()"),R6t.forEach(t),zIe.forEach(t),Apr=i(wa),T(S7.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),nze=i(f),Od=n(f,"H2",{class:!0});var mWe=s(Od);R7=n(mWe,"A",{id:!0,class:!0,href:!0});var P6t=s(R7);A0e=n(P6t,"SPAN",{});var B6t=s(A0e);T(_y.$$.fragment,B6t),B6t.forEach(t),P6t.forEach(t),Lpr=i(mWe),L0e=n(mWe,"SPAN",{});var N6t=s(L0e);ypr=r(N6t,"AutoModelForAudioXVector"),N6t.forEach(t),mWe.forEach(t),sze=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(uy.$$.fragment,Ml),xpr=i(Ml),Vd=n(Ml,"P",{});var Tte=s(Vd);$pr=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),PH=n(Tte,"A",{href:!0});var I6t=s(PH);kpr=r(I6t,"from_pretrained()"),I6t.forEach(t),Spr=r(Tte," class method or the "),BH=n(Tte,"A",{href:!0});var q6t=s(BH);Rpr=r(q6t,"from_config()"),q6t.forEach(t),Ppr=r(Tte,` class
method.`),Tte.forEach(t),Bpr=i(Ml),by=n(Ml,"P",{});var gWe=s(by);Npr=r(gWe,"This class cannot be instantiated directly using "),y0e=n(gWe,"CODE",{});var j6t=s(y0e);Ipr=r(j6t,"__init__()"),j6t.forEach(t),qpr=r(gWe," (throws an error)."),gWe.forEach(t),jpr=i(Ml),Lt=n(Ml,"DIV",{class:!0});var Ww=s(Lt);T(vy.$$.fragment,Ww),Dpr=i(Ww),x0e=n(Ww,"P",{});var D6t=s(x0e);Gpr=r(D6t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),D6t.forEach(t),Opr=i(Ww),Xd=n(Ww,"P",{});var Mte=s(Xd);Vpr=r(Mte,`Note:
Loading a model from its configuration file does `),$0e=n(Mte,"STRONG",{});var G6t=s($0e);Xpr=r(G6t,"not"),G6t.forEach(t),zpr=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(Mte,"A",{href:!0});var O6t=s(NH);Qpr=r(O6t,"from_pretrained()"),O6t.forEach(t),Wpr=r(Mte," to load the model weights."),Mte.forEach(t),Hpr=i(Ww),T(P7.$$.fragment,Ww),Ww.forEach(t),Upr=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(Fy.$$.fragment,Aa),Jpr=i(Aa),k0e=n(Aa,"P",{});var V6t=s(k0e);Ypr=r(V6t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),V6t.forEach(t),Kpr=i(Aa),en=n(Aa,"P",{});var Hw=s(en);Zpr=r(Hw,"The model class to instantiate is selected based on the "),S0e=n(Hw,"CODE",{});var X6t=s(S0e);e_r=r(X6t,"model_type"),X6t.forEach(t),o_r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),R0e=n(Hw,"CODE",{});var z6t=s(R0e);r_r=r(z6t,"pretrained_model_name_or_path"),z6t.forEach(t),t_r=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=n(Hw,"CODE",{});var Q6t=s(P0e);a_r=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),n_r=r(Hw,":"),Hw.forEach(t),s_r=i(Aa),tt=n(Aa,"UL",{});var El=s(tt);B7=n(El,"LI",{});var QIe=s(B7);B0e=n(QIe,"STRONG",{});var W6t=s(B0e);l_r=r(W6t,"data2vec-audio"),W6t.forEach(t),i_r=r(QIe," \u2014 "),IH=n(QIe,"A",{href:!0});var H6t=s(IH);d_r=r(H6t,"Data2VecAudioForXVector"),H6t.forEach(t),c_r=r(QIe," (Data2VecAudio model)"),QIe.forEach(t),f_r=i(El),N7=n(El,"LI",{});var WIe=s(N7);N0e=n(WIe,"STRONG",{});var U6t=s(N0e);m_r=r(U6t,"unispeech-sat"),U6t.forEach(t),g_r=r(WIe," \u2014 "),qH=n(WIe,"A",{href:!0});var J6t=s(qH);h_r=r(J6t,"UniSpeechSatForXVector"),J6t.forEach(t),p_r=r(WIe," (UniSpeechSat model)"),WIe.forEach(t),__r=i(El),I7=n(El,"LI",{});var HIe=s(I7);I0e=n(HIe,"STRONG",{});var Y6t=s(I0e);u_r=r(Y6t,"wav2vec2"),Y6t.forEach(t),b_r=r(HIe," \u2014 "),jH=n(HIe,"A",{href:!0});var K6t=s(jH);v_r=r(K6t,"Wav2Vec2ForXVector"),K6t.forEach(t),F_r=r(HIe," (Wav2Vec2 model)"),HIe.forEach(t),T_r=i(El),q7=n(El,"LI",{});var UIe=s(q7);q0e=n(UIe,"STRONG",{});var Z6t=s(q0e);M_r=r(Z6t,"wav2vec2-conformer"),Z6t.forEach(t),E_r=r(UIe," \u2014 "),DH=n(UIe,"A",{href:!0});var eLt=s(DH);C_r=r(eLt,"Wav2Vec2ConformerForXVector"),eLt.forEach(t),w_r=r(UIe," (Wav2Vec2-Conformer model)"),UIe.forEach(t),A_r=i(El),j7=n(El,"LI",{});var JIe=s(j7);j0e=n(JIe,"STRONG",{});var oLt=s(j0e);L_r=r(oLt,"wavlm"),oLt.forEach(t),y_r=r(JIe," \u2014 "),GH=n(JIe,"A",{href:!0});var rLt=s(GH);x_r=r(rLt,"WavLMForXVector"),rLt.forEach(t),$_r=r(JIe," (WavLM model)"),JIe.forEach(t),El.forEach(t),k_r=i(Aa),D7=n(Aa,"P",{});var YIe=s(D7);S_r=r(YIe,"The model is set in evaluation mode by default using "),D0e=n(YIe,"CODE",{});var tLt=s(D0e);R_r=r(tLt,"model.eval()"),tLt.forEach(t),P_r=r(YIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G0e=n(YIe,"CODE",{});var aLt=s(G0e);B_r=r(aLt,"model.train()"),aLt.forEach(t),YIe.forEach(t),N_r=i(Aa),T(G7.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),lze=i(f),zd=n(f,"H2",{class:!0});var hWe=s(zd);O7=n(hWe,"A",{id:!0,class:!0,href:!0});var nLt=s(O7);O0e=n(nLt,"SPAN",{});var sLt=s(O0e);T(Ty.$$.fragment,sLt),sLt.forEach(t),nLt.forEach(t),I_r=i(hWe),V0e=n(hWe,"SPAN",{});var lLt=s(V0e);q_r=r(lLt,"AutoModelForMaskedImageModeling"),lLt.forEach(t),hWe.forEach(t),ize=i(f),Jo=n(f,"DIV",{class:!0});var Cl=s(Jo);T(My.$$.fragment,Cl),j_r=i(Cl),Qd=n(Cl,"P",{});var Ete=s(Qd);D_r=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OH=n(Ete,"A",{href:!0});var iLt=s(OH);G_r=r(iLt,"from_pretrained()"),iLt.forEach(t),O_r=r(Ete," class method or the "),VH=n(Ete,"A",{href:!0});var dLt=s(VH);V_r=r(dLt,"from_config()"),dLt.forEach(t),X_r=r(Ete,` class
method.`),Ete.forEach(t),z_r=i(Cl),Ey=n(Cl,"P",{});var pWe=s(Ey);Q_r=r(pWe,"This class cannot be instantiated directly using "),X0e=n(pWe,"CODE",{});var cLt=s(X0e);W_r=r(cLt,"__init__()"),cLt.forEach(t),H_r=r(pWe," (throws an error)."),pWe.forEach(t),U_r=i(Cl),yt=n(Cl,"DIV",{class:!0});var Uw=s(yt);T(Cy.$$.fragment,Uw),J_r=i(Uw),z0e=n(Uw,"P",{});var fLt=s(z0e);Y_r=r(fLt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fLt.forEach(t),K_r=i(Uw),Wd=n(Uw,"P",{});var Cte=s(Wd);Z_r=r(Cte,`Note:
Loading a model from its configuration file does `),Q0e=n(Cte,"STRONG",{});var mLt=s(Q0e);eur=r(mLt,"not"),mLt.forEach(t),our=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(Cte,"A",{href:!0});var gLt=s(XH);rur=r(gLt,"from_pretrained()"),gLt.forEach(t),tur=r(Cte," to load the model weights."),Cte.forEach(t),aur=i(Uw),T(V7.$$.fragment,Uw),Uw.forEach(t),nur=i(Cl),uo=n(Cl,"DIV",{class:!0});var La=s(uo);T(wy.$$.fragment,La),sur=i(La),W0e=n(La,"P",{});var hLt=s(W0e);lur=r(hLt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),hLt.forEach(t),iur=i(La),on=n(La,"P",{});var Jw=s(on);dur=r(Jw,"The model class to instantiate is selected based on the "),H0e=n(Jw,"CODE",{});var pLt=s(H0e);cur=r(pLt,"model_type"),pLt.forEach(t),fur=r(Jw,` property of the config object (either
passed as an argument or loaded from `),U0e=n(Jw,"CODE",{});var _Lt=s(U0e);mur=r(_Lt,"pretrained_model_name_or_path"),_Lt.forEach(t),gur=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=n(Jw,"CODE",{});var uLt=s(J0e);hur=r(uLt,"pretrained_model_name_or_path"),uLt.forEach(t),pur=r(Jw,":"),Jw.forEach(t),_ur=i(La),Hd=n(La,"UL",{});var wte=s(Hd);X7=n(wte,"LI",{});var KIe=s(X7);Y0e=n(KIe,"STRONG",{});var bLt=s(Y0e);uur=r(bLt,"deit"),bLt.forEach(t),bur=r(KIe," \u2014 "),zH=n(KIe,"A",{href:!0});var vLt=s(zH);vur=r(vLt,"DeiTForMaskedImageModeling"),vLt.forEach(t),Fur=r(KIe," (DeiT model)"),KIe.forEach(t),Tur=i(wte),z7=n(wte,"LI",{});var ZIe=s(z7);K0e=n(ZIe,"STRONG",{});var FLt=s(K0e);Mur=r(FLt,"swin"),FLt.forEach(t),Eur=r(ZIe," \u2014 "),QH=n(ZIe,"A",{href:!0});var TLt=s(QH);Cur=r(TLt,"SwinForMaskedImageModeling"),TLt.forEach(t),wur=r(ZIe," (Swin Transformer model)"),ZIe.forEach(t),Aur=i(wte),Q7=n(wte,"LI",{});var eqe=s(Q7);Z0e=n(eqe,"STRONG",{});var MLt=s(Z0e);Lur=r(MLt,"vit"),MLt.forEach(t),yur=r(eqe," \u2014 "),WH=n(eqe,"A",{href:!0});var ELt=s(WH);xur=r(ELt,"ViTForMaskedImageModeling"),ELt.forEach(t),$ur=r(eqe," (ViT model)"),eqe.forEach(t),wte.forEach(t),kur=i(La),W7=n(La,"P",{});var oqe=s(W7);Sur=r(oqe,"The model is set in evaluation mode by default using "),eFe=n(oqe,"CODE",{});var CLt=s(eFe);Rur=r(CLt,"model.eval()"),CLt.forEach(t),Pur=r(oqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oFe=n(oqe,"CODE",{});var wLt=s(oFe);Bur=r(wLt,"model.train()"),wLt.forEach(t),oqe.forEach(t),Nur=i(La),T(H7.$$.fragment,La),La.forEach(t),Cl.forEach(t),dze=i(f),Ud=n(f,"H2",{class:!0});var _We=s(Ud);U7=n(_We,"A",{id:!0,class:!0,href:!0});var ALt=s(U7);rFe=n(ALt,"SPAN",{});var LLt=s(rFe);T(Ay.$$.fragment,LLt),LLt.forEach(t),ALt.forEach(t),Iur=i(_We),tFe=n(_We,"SPAN",{});var yLt=s(tFe);qur=r(yLt,"AutoModelForObjectDetection"),yLt.forEach(t),_We.forEach(t),cze=i(f),Yo=n(f,"DIV",{class:!0});var wl=s(Yo);T(Ly.$$.fragment,wl),jur=i(wl),Jd=n(wl,"P",{});var Ate=s(Jd);Dur=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HH=n(Ate,"A",{href:!0});var xLt=s(HH);Gur=r(xLt,"from_pretrained()"),xLt.forEach(t),Our=r(Ate," class method or the "),UH=n(Ate,"A",{href:!0});var $Lt=s(UH);Vur=r($Lt,"from_config()"),$Lt.forEach(t),Xur=r(Ate,` class
method.`),Ate.forEach(t),zur=i(wl),yy=n(wl,"P",{});var uWe=s(yy);Qur=r(uWe,"This class cannot be instantiated directly using "),aFe=n(uWe,"CODE",{});var kLt=s(aFe);Wur=r(kLt,"__init__()"),kLt.forEach(t),Hur=r(uWe," (throws an error)."),uWe.forEach(t),Uur=i(wl),xt=n(wl,"DIV",{class:!0});var Yw=s(xt);T(xy.$$.fragment,Yw),Jur=i(Yw),nFe=n(Yw,"P",{});var SLt=s(nFe);Yur=r(SLt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),SLt.forEach(t),Kur=i(Yw),Yd=n(Yw,"P",{});var Lte=s(Yd);Zur=r(Lte,`Note:
Loading a model from its configuration file does `),sFe=n(Lte,"STRONG",{});var RLt=s(sFe);e1r=r(RLt,"not"),RLt.forEach(t),o1r=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(Lte,"A",{href:!0});var PLt=s(JH);r1r=r(PLt,"from_pretrained()"),PLt.forEach(t),t1r=r(Lte," to load the model weights."),Lte.forEach(t),a1r=i(Yw),T(J7.$$.fragment,Yw),Yw.forEach(t),n1r=i(wl),bo=n(wl,"DIV",{class:!0});var ya=s(bo);T($y.$$.fragment,ya),s1r=i(ya),lFe=n(ya,"P",{});var BLt=s(lFe);l1r=r(BLt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),BLt.forEach(t),i1r=i(ya),rn=n(ya,"P",{});var Kw=s(rn);d1r=r(Kw,"The model class to instantiate is selected based on the "),iFe=n(Kw,"CODE",{});var NLt=s(iFe);c1r=r(NLt,"model_type"),NLt.forEach(t),f1r=r(Kw,` property of the config object (either
passed as an argument or loaded from `),dFe=n(Kw,"CODE",{});var ILt=s(dFe);m1r=r(ILt,"pretrained_model_name_or_path"),ILt.forEach(t),g1r=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(Kw,"CODE",{});var qLt=s(cFe);h1r=r(qLt,"pretrained_model_name_or_path"),qLt.forEach(t),p1r=r(Kw,":"),Kw.forEach(t),_1r=i(ya),ky=n(ya,"UL",{});var bWe=s(ky);Y7=n(bWe,"LI",{});var rqe=s(Y7);fFe=n(rqe,"STRONG",{});var jLt=s(fFe);u1r=r(jLt,"detr"),jLt.forEach(t),b1r=r(rqe," \u2014 "),YH=n(rqe,"A",{href:!0});var DLt=s(YH);v1r=r(DLt,"DetrForObjectDetection"),DLt.forEach(t),F1r=r(rqe," (DETR model)"),rqe.forEach(t),T1r=i(bWe),K7=n(bWe,"LI",{});var tqe=s(K7);mFe=n(tqe,"STRONG",{});var GLt=s(mFe);M1r=r(GLt,"yolos"),GLt.forEach(t),E1r=r(tqe," \u2014 "),KH=n(tqe,"A",{href:!0});var OLt=s(KH);C1r=r(OLt,"YolosForObjectDetection"),OLt.forEach(t),w1r=r(tqe," (YOLOS model)"),tqe.forEach(t),bWe.forEach(t),A1r=i(ya),Z7=n(ya,"P",{});var aqe=s(Z7);L1r=r(aqe,"The model is set in evaluation mode by default using "),gFe=n(aqe,"CODE",{});var VLt=s(gFe);y1r=r(VLt,"model.eval()"),VLt.forEach(t),x1r=r(aqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=n(aqe,"CODE",{});var XLt=s(hFe);$1r=r(XLt,"model.train()"),XLt.forEach(t),aqe.forEach(t),k1r=i(ya),T(e8.$$.fragment,ya),ya.forEach(t),wl.forEach(t),fze=i(f),Kd=n(f,"H2",{class:!0});var vWe=s(Kd);o8=n(vWe,"A",{id:!0,class:!0,href:!0});var zLt=s(o8);pFe=n(zLt,"SPAN",{});var QLt=s(pFe);T(Sy.$$.fragment,QLt),QLt.forEach(t),zLt.forEach(t),S1r=i(vWe),_Fe=n(vWe,"SPAN",{});var WLt=s(_Fe);R1r=r(WLt,"AutoModelForImageSegmentation"),WLt.forEach(t),vWe.forEach(t),mze=i(f),Ko=n(f,"DIV",{class:!0});var Al=s(Ko);T(Ry.$$.fragment,Al),P1r=i(Al),Zd=n(Al,"P",{});var yte=s(Zd);B1r=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZH=n(yte,"A",{href:!0});var HLt=s(ZH);N1r=r(HLt,"from_pretrained()"),HLt.forEach(t),I1r=r(yte," class method or the "),eU=n(yte,"A",{href:!0});var ULt=s(eU);q1r=r(ULt,"from_config()"),ULt.forEach(t),j1r=r(yte,` class
method.`),yte.forEach(t),D1r=i(Al),Py=n(Al,"P",{});var FWe=s(Py);G1r=r(FWe,"This class cannot be instantiated directly using "),uFe=n(FWe,"CODE",{});var JLt=s(uFe);O1r=r(JLt,"__init__()"),JLt.forEach(t),V1r=r(FWe," (throws an error)."),FWe.forEach(t),X1r=i(Al),$t=n(Al,"DIV",{class:!0});var Zw=s($t);T(By.$$.fragment,Zw),z1r=i(Zw),bFe=n(Zw,"P",{});var YLt=s(bFe);Q1r=r(YLt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),YLt.forEach(t),W1r=i(Zw),ec=n(Zw,"P",{});var xte=s(ec);H1r=r(xte,`Note:
Loading a model from its configuration file does `),vFe=n(xte,"STRONG",{});var KLt=s(vFe);U1r=r(KLt,"not"),KLt.forEach(t),J1r=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(xte,"A",{href:!0});var ZLt=s(oU);Y1r=r(ZLt,"from_pretrained()"),ZLt.forEach(t),K1r=r(xte," to load the model weights."),xte.forEach(t),Z1r=i(Zw),T(r8.$$.fragment,Zw),Zw.forEach(t),e2r=i(Al),vo=n(Al,"DIV",{class:!0});var xa=s(vo);T(Ny.$$.fragment,xa),o2r=i(xa),FFe=n(xa,"P",{});var eyt=s(FFe);r2r=r(eyt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),eyt.forEach(t),t2r=i(xa),tn=n(xa,"P",{});var eA=s(tn);a2r=r(eA,"The model class to instantiate is selected based on the "),TFe=n(eA,"CODE",{});var oyt=s(TFe);n2r=r(oyt,"model_type"),oyt.forEach(t),s2r=r(eA,` property of the config object (either
passed as an argument or loaded from `),MFe=n(eA,"CODE",{});var ryt=s(MFe);l2r=r(ryt,"pretrained_model_name_or_path"),ryt.forEach(t),i2r=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(eA,"CODE",{});var tyt=s(EFe);d2r=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),c2r=r(eA,":"),eA.forEach(t),f2r=i(xa),CFe=n(xa,"UL",{});var ayt=s(CFe);t8=n(ayt,"LI",{});var nqe=s(t8);wFe=n(nqe,"STRONG",{});var nyt=s(wFe);m2r=r(nyt,"detr"),nyt.forEach(t),g2r=r(nqe," \u2014 "),rU=n(nqe,"A",{href:!0});var syt=s(rU);h2r=r(syt,"DetrForSegmentation"),syt.forEach(t),p2r=r(nqe," (DETR model)"),nqe.forEach(t),ayt.forEach(t),_2r=i(xa),a8=n(xa,"P",{});var sqe=s(a8);u2r=r(sqe,"The model is set in evaluation mode by default using "),AFe=n(sqe,"CODE",{});var lyt=s(AFe);b2r=r(lyt,"model.eval()"),lyt.forEach(t),v2r=r(sqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LFe=n(sqe,"CODE",{});var iyt=s(LFe);F2r=r(iyt,"model.train()"),iyt.forEach(t),sqe.forEach(t),T2r=i(xa),T(n8.$$.fragment,xa),xa.forEach(t),Al.forEach(t),gze=i(f),oc=n(f,"H2",{class:!0});var TWe=s(oc);s8=n(TWe,"A",{id:!0,class:!0,href:!0});var dyt=s(s8);yFe=n(dyt,"SPAN",{});var cyt=s(yFe);T(Iy.$$.fragment,cyt),cyt.forEach(t),dyt.forEach(t),M2r=i(TWe),xFe=n(TWe,"SPAN",{});var fyt=s(xFe);E2r=r(fyt,"AutoModelForSemanticSegmentation"),fyt.forEach(t),TWe.forEach(t),hze=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(qy.$$.fragment,Ll),C2r=i(Ll),rc=n(Ll,"P",{});var $te=s(rc);w2r=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tU=n($te,"A",{href:!0});var myt=s(tU);A2r=r(myt,"from_pretrained()"),myt.forEach(t),L2r=r($te," class method or the "),aU=n($te,"A",{href:!0});var gyt=s(aU);y2r=r(gyt,"from_config()"),gyt.forEach(t),x2r=r($te,` class
method.`),$te.forEach(t),$2r=i(Ll),jy=n(Ll,"P",{});var MWe=s(jy);k2r=r(MWe,"This class cannot be instantiated directly using "),$Fe=n(MWe,"CODE",{});var hyt=s($Fe);S2r=r(hyt,"__init__()"),hyt.forEach(t),R2r=r(MWe," (throws an error)."),MWe.forEach(t),P2r=i(Ll),kt=n(Ll,"DIV",{class:!0});var oA=s(kt);T(Dy.$$.fragment,oA),B2r=i(oA),kFe=n(oA,"P",{});var pyt=s(kFe);N2r=r(pyt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),pyt.forEach(t),I2r=i(oA),tc=n(oA,"P",{});var kte=s(tc);q2r=r(kte,`Note:
Loading a model from its configuration file does `),SFe=n(kte,"STRONG",{});var _yt=s(SFe);j2r=r(_yt,"not"),_yt.forEach(t),D2r=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(kte,"A",{href:!0});var uyt=s(nU);G2r=r(uyt,"from_pretrained()"),uyt.forEach(t),O2r=r(kte," to load the model weights."),kte.forEach(t),V2r=i(oA),T(l8.$$.fragment,oA),oA.forEach(t),X2r=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(Gy.$$.fragment,$a),z2r=i($a),RFe=n($a,"P",{});var byt=s(RFe);Q2r=r(byt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),byt.forEach(t),W2r=i($a),an=n($a,"P",{});var rA=s(an);H2r=r(rA,"The model class to instantiate is selected based on the "),PFe=n(rA,"CODE",{});var vyt=s(PFe);U2r=r(vyt,"model_type"),vyt.forEach(t),J2r=r(rA,` property of the config object (either
passed as an argument or loaded from `),BFe=n(rA,"CODE",{});var Fyt=s(BFe);Y2r=r(Fyt,"pretrained_model_name_or_path"),Fyt.forEach(t),K2r=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(rA,"CODE",{});var Tyt=s(NFe);Z2r=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),ebr=r(rA,":"),rA.forEach(t),obr=i($a),at=n($a,"UL",{});var yl=s(at);i8=n(yl,"LI",{});var lqe=s(i8);IFe=n(lqe,"STRONG",{});var Myt=s(IFe);rbr=r(Myt,"beit"),Myt.forEach(t),tbr=r(lqe," \u2014 "),sU=n(lqe,"A",{href:!0});var Eyt=s(sU);abr=r(Eyt,"BeitForSemanticSegmentation"),Eyt.forEach(t),nbr=r(lqe," (BEiT model)"),lqe.forEach(t),sbr=i(yl),d8=n(yl,"LI",{});var iqe=s(d8);qFe=n(iqe,"STRONG",{});var Cyt=s(qFe);lbr=r(Cyt,"data2vec-vision"),Cyt.forEach(t),ibr=r(iqe," \u2014 "),lU=n(iqe,"A",{href:!0});var wyt=s(lU);dbr=r(wyt,"Data2VecVisionForSemanticSegmentation"),wyt.forEach(t),cbr=r(iqe," (Data2VecVision model)"),iqe.forEach(t),fbr=i(yl),c8=n(yl,"LI",{});var dqe=s(c8);jFe=n(dqe,"STRONG",{});var Ayt=s(jFe);mbr=r(Ayt,"dpt"),Ayt.forEach(t),gbr=r(dqe," \u2014 "),iU=n(dqe,"A",{href:!0});var Lyt=s(iU);hbr=r(Lyt,"DPTForSemanticSegmentation"),Lyt.forEach(t),pbr=r(dqe," (DPT model)"),dqe.forEach(t),_br=i(yl),f8=n(yl,"LI",{});var cqe=s(f8);DFe=n(cqe,"STRONG",{});var yyt=s(DFe);ubr=r(yyt,"mobilevit"),yyt.forEach(t),bbr=r(cqe," \u2014 "),dU=n(cqe,"A",{href:!0});var xyt=s(dU);vbr=r(xyt,"MobileViTForSemanticSegmentation"),xyt.forEach(t),Fbr=r(cqe," (MobileViT model)"),cqe.forEach(t),Tbr=i(yl),m8=n(yl,"LI",{});var fqe=s(m8);GFe=n(fqe,"STRONG",{});var $yt=s(GFe);Mbr=r($yt,"segformer"),$yt.forEach(t),Ebr=r(fqe," \u2014 "),cU=n(fqe,"A",{href:!0});var kyt=s(cU);Cbr=r(kyt,"SegformerForSemanticSegmentation"),kyt.forEach(t),wbr=r(fqe," (SegFormer model)"),fqe.forEach(t),yl.forEach(t),Abr=i($a),g8=n($a,"P",{});var mqe=s(g8);Lbr=r(mqe,"The model is set in evaluation mode by default using "),OFe=n(mqe,"CODE",{});var Syt=s(OFe);ybr=r(Syt,"model.eval()"),Syt.forEach(t),xbr=r(mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=n(mqe,"CODE",{});var Ryt=s(VFe);$br=r(Ryt,"model.train()"),Ryt.forEach(t),mqe.forEach(t),kbr=i($a),T(h8.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),pze=i(f),ac=n(f,"H2",{class:!0});var EWe=s(ac);p8=n(EWe,"A",{id:!0,class:!0,href:!0});var Pyt=s(p8);XFe=n(Pyt,"SPAN",{});var Byt=s(XFe);T(Oy.$$.fragment,Byt),Byt.forEach(t),Pyt.forEach(t),Sbr=i(EWe),zFe=n(EWe,"SPAN",{});var Nyt=s(zFe);Rbr=r(Nyt,"AutoModelForInstanceSegmentation"),Nyt.forEach(t),EWe.forEach(t),_ze=i(f),er=n(f,"DIV",{class:!0});var xl=s(er);T(Vy.$$.fragment,xl),Pbr=i(xl),nc=n(xl,"P",{});var Ste=s(nc);Bbr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fU=n(Ste,"A",{href:!0});var Iyt=s(fU);Nbr=r(Iyt,"from_pretrained()"),Iyt.forEach(t),Ibr=r(Ste," class method or the "),mU=n(Ste,"A",{href:!0});var qyt=s(mU);qbr=r(qyt,"from_config()"),qyt.forEach(t),jbr=r(Ste,` class
method.`),Ste.forEach(t),Dbr=i(xl),Xy=n(xl,"P",{});var CWe=s(Xy);Gbr=r(CWe,"This class cannot be instantiated directly using "),QFe=n(CWe,"CODE",{});var jyt=s(QFe);Obr=r(jyt,"__init__()"),jyt.forEach(t),Vbr=r(CWe," (throws an error)."),CWe.forEach(t),Xbr=i(xl),St=n(xl,"DIV",{class:!0});var tA=s(St);T(zy.$$.fragment,tA),zbr=i(tA),WFe=n(tA,"P",{});var Dyt=s(WFe);Qbr=r(Dyt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Dyt.forEach(t),Wbr=i(tA),sc=n(tA,"P",{});var Rte=s(sc);Hbr=r(Rte,`Note:
Loading a model from its configuration file does `),HFe=n(Rte,"STRONG",{});var Gyt=s(HFe);Ubr=r(Gyt,"not"),Gyt.forEach(t),Jbr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(Rte,"A",{href:!0});var Oyt=s(gU);Ybr=r(Oyt,"from_pretrained()"),Oyt.forEach(t),Kbr=r(Rte," to load the model weights."),Rte.forEach(t),Zbr=i(tA),T(_8.$$.fragment,tA),tA.forEach(t),evr=i(xl),To=n(xl,"DIV",{class:!0});var ka=s(To);T(Qy.$$.fragment,ka),ovr=i(ka),UFe=n(ka,"P",{});var Vyt=s(UFe);rvr=r(Vyt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Vyt.forEach(t),tvr=i(ka),nn=n(ka,"P",{});var aA=s(nn);avr=r(aA,"The model class to instantiate is selected based on the "),JFe=n(aA,"CODE",{});var Xyt=s(JFe);nvr=r(Xyt,"model_type"),Xyt.forEach(t),svr=r(aA,` property of the config object (either
passed as an argument or loaded from `),YFe=n(aA,"CODE",{});var zyt=s(YFe);lvr=r(zyt,"pretrained_model_name_or_path"),zyt.forEach(t),ivr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(aA,"CODE",{});var Qyt=s(KFe);dvr=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),cvr=r(aA,":"),aA.forEach(t),fvr=i(ka),ZFe=n(ka,"UL",{});var Wyt=s(ZFe);u8=n(Wyt,"LI",{});var gqe=s(u8);eTe=n(gqe,"STRONG",{});var Hyt=s(eTe);mvr=r(Hyt,"maskformer"),Hyt.forEach(t),gvr=r(gqe," \u2014 "),hU=n(gqe,"A",{href:!0});var Uyt=s(hU);hvr=r(Uyt,"MaskFormerForInstanceSegmentation"),Uyt.forEach(t),pvr=r(gqe," (MaskFormer model)"),gqe.forEach(t),Wyt.forEach(t),_vr=i(ka),b8=n(ka,"P",{});var hqe=s(b8);uvr=r(hqe,"The model is set in evaluation mode by default using "),oTe=n(hqe,"CODE",{});var Jyt=s(oTe);bvr=r(Jyt,"model.eval()"),Jyt.forEach(t),vvr=r(hqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rTe=n(hqe,"CODE",{});var Yyt=s(rTe);Fvr=r(Yyt,"model.train()"),Yyt.forEach(t),hqe.forEach(t),Tvr=i(ka),T(v8.$$.fragment,ka),ka.forEach(t),xl.forEach(t),uze=i(f),lc=n(f,"H2",{class:!0});var wWe=s(lc);F8=n(wWe,"A",{id:!0,class:!0,href:!0});var Kyt=s(F8);tTe=n(Kyt,"SPAN",{});var Zyt=s(tTe);T(Wy.$$.fragment,Zyt),Zyt.forEach(t),Kyt.forEach(t),Mvr=i(wWe),aTe=n(wWe,"SPAN",{});var ext=s(aTe);Evr=r(ext,"TFAutoModel"),ext.forEach(t),wWe.forEach(t),bze=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(Hy.$$.fragment,$l),Cvr=i($l),ic=n($l,"P",{});var Pte=s(ic);wvr=r(Pte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pU=n(Pte,"A",{href:!0});var oxt=s(pU);Avr=r(oxt,"from_pretrained()"),oxt.forEach(t),Lvr=r(Pte," class method or the "),_U=n(Pte,"A",{href:!0});var rxt=s(_U);yvr=r(rxt,"from_config()"),rxt.forEach(t),xvr=r(Pte,` class
method.`),Pte.forEach(t),$vr=i($l),Uy=n($l,"P",{});var AWe=s(Uy);kvr=r(AWe,"This class cannot be instantiated directly using "),nTe=n(AWe,"CODE",{});var txt=s(nTe);Svr=r(txt,"__init__()"),txt.forEach(t),Rvr=r(AWe," (throws an error)."),AWe.forEach(t),Pvr=i($l),Rt=n($l,"DIV",{class:!0});var nA=s(Rt);T(Jy.$$.fragment,nA),Bvr=i(nA),sTe=n(nA,"P",{});var axt=s(sTe);Nvr=r(axt,"Instantiates one of the base model classes of the library from a configuration."),axt.forEach(t),Ivr=i(nA),dc=n(nA,"P",{});var Bte=s(dc);qvr=r(Bte,`Note:
Loading a model from its configuration file does `),lTe=n(Bte,"STRONG",{});var nxt=s(lTe);jvr=r(nxt,"not"),nxt.forEach(t),Dvr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(Bte,"A",{href:!0});var sxt=s(uU);Gvr=r(sxt,"from_pretrained()"),sxt.forEach(t),Ovr=r(Bte," to load the model weights."),Bte.forEach(t),Vvr=i(nA),T(T8.$$.fragment,nA),nA.forEach(t),Xvr=i($l),xr=n($l,"DIV",{class:!0});var kl=s(xr);T(Yy.$$.fragment,kl),zvr=i(kl),iTe=n(kl,"P",{});var lxt=s(iTe);Qvr=r(lxt,"Instantiate one of the base model classes of the library from a pretrained model."),lxt.forEach(t),Wvr=i(kl),sn=n(kl,"P",{});var sA=s(sn);Hvr=r(sA,"The model class to instantiate is selected based on the "),dTe=n(sA,"CODE",{});var ixt=s(dTe);Uvr=r(ixt,"model_type"),ixt.forEach(t),Jvr=r(sA,` property of the config object (either
passed as an argument or loaded from `),cTe=n(sA,"CODE",{});var dxt=s(cTe);Yvr=r(dxt,"pretrained_model_name_or_path"),dxt.forEach(t),Kvr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n(sA,"CODE",{});var cxt=s(fTe);Zvr=r(cxt,"pretrained_model_name_or_path"),cxt.forEach(t),e0r=r(sA,":"),sA.forEach(t),o0r=i(kl),q=n(kl,"UL",{});var D=s(q);M8=n(D,"LI",{});var pqe=s(M8);mTe=n(pqe,"STRONG",{});var fxt=s(mTe);r0r=r(fxt,"albert"),fxt.forEach(t),t0r=r(pqe," \u2014 "),bU=n(pqe,"A",{href:!0});var mxt=s(bU);a0r=r(mxt,"TFAlbertModel"),mxt.forEach(t),n0r=r(pqe," (ALBERT model)"),pqe.forEach(t),s0r=i(D),E8=n(D,"LI",{});var _qe=s(E8);gTe=n(_qe,"STRONG",{});var gxt=s(gTe);l0r=r(gxt,"bart"),gxt.forEach(t),i0r=r(_qe," \u2014 "),vU=n(_qe,"A",{href:!0});var hxt=s(vU);d0r=r(hxt,"TFBartModel"),hxt.forEach(t),c0r=r(_qe," (BART model)"),_qe.forEach(t),f0r=i(D),C8=n(D,"LI",{});var uqe=s(C8);hTe=n(uqe,"STRONG",{});var pxt=s(hTe);m0r=r(pxt,"bert"),pxt.forEach(t),g0r=r(uqe," \u2014 "),FU=n(uqe,"A",{href:!0});var _xt=s(FU);h0r=r(_xt,"TFBertModel"),_xt.forEach(t),p0r=r(uqe," (BERT model)"),uqe.forEach(t),_0r=i(D),w8=n(D,"LI",{});var bqe=s(w8);pTe=n(bqe,"STRONG",{});var uxt=s(pTe);u0r=r(uxt,"blenderbot"),uxt.forEach(t),b0r=r(bqe," \u2014 "),TU=n(bqe,"A",{href:!0});var bxt=s(TU);v0r=r(bxt,"TFBlenderbotModel"),bxt.forEach(t),F0r=r(bqe," (Blenderbot model)"),bqe.forEach(t),T0r=i(D),A8=n(D,"LI",{});var vqe=s(A8);_Te=n(vqe,"STRONG",{});var vxt=s(_Te);M0r=r(vxt,"blenderbot-small"),vxt.forEach(t),E0r=r(vqe," \u2014 "),MU=n(vqe,"A",{href:!0});var Fxt=s(MU);C0r=r(Fxt,"TFBlenderbotSmallModel"),Fxt.forEach(t),w0r=r(vqe," (BlenderbotSmall model)"),vqe.forEach(t),A0r=i(D),L8=n(D,"LI",{});var Fqe=s(L8);uTe=n(Fqe,"STRONG",{});var Txt=s(uTe);L0r=r(Txt,"camembert"),Txt.forEach(t),y0r=r(Fqe," \u2014 "),EU=n(Fqe,"A",{href:!0});var Mxt=s(EU);x0r=r(Mxt,"TFCamembertModel"),Mxt.forEach(t),$0r=r(Fqe," (CamemBERT model)"),Fqe.forEach(t),k0r=i(D),y8=n(D,"LI",{});var Tqe=s(y8);bTe=n(Tqe,"STRONG",{});var Ext=s(bTe);S0r=r(Ext,"clip"),Ext.forEach(t),R0r=r(Tqe," \u2014 "),CU=n(Tqe,"A",{href:!0});var Cxt=s(CU);P0r=r(Cxt,"TFCLIPModel"),Cxt.forEach(t),B0r=r(Tqe," (CLIP model)"),Tqe.forEach(t),N0r=i(D),x8=n(D,"LI",{});var Mqe=s(x8);vTe=n(Mqe,"STRONG",{});var wxt=s(vTe);I0r=r(wxt,"convbert"),wxt.forEach(t),q0r=r(Mqe," \u2014 "),wU=n(Mqe,"A",{href:!0});var Axt=s(wU);j0r=r(Axt,"TFConvBertModel"),Axt.forEach(t),D0r=r(Mqe," (ConvBERT model)"),Mqe.forEach(t),G0r=i(D),$8=n(D,"LI",{});var Eqe=s($8);FTe=n(Eqe,"STRONG",{});var Lxt=s(FTe);O0r=r(Lxt,"convnext"),Lxt.forEach(t),V0r=r(Eqe," \u2014 "),AU=n(Eqe,"A",{href:!0});var yxt=s(AU);X0r=r(yxt,"TFConvNextModel"),yxt.forEach(t),z0r=r(Eqe," (ConvNeXT model)"),Eqe.forEach(t),Q0r=i(D),k8=n(D,"LI",{});var Cqe=s(k8);TTe=n(Cqe,"STRONG",{});var xxt=s(TTe);W0r=r(xxt,"ctrl"),xxt.forEach(t),H0r=r(Cqe," \u2014 "),LU=n(Cqe,"A",{href:!0});var $xt=s(LU);U0r=r($xt,"TFCTRLModel"),$xt.forEach(t),J0r=r(Cqe," (CTRL model)"),Cqe.forEach(t),Y0r=i(D),S8=n(D,"LI",{});var wqe=s(S8);MTe=n(wqe,"STRONG",{});var kxt=s(MTe);K0r=r(kxt,"data2vec-vision"),kxt.forEach(t),Z0r=r(wqe," \u2014 "),yU=n(wqe,"A",{href:!0});var Sxt=s(yU);eFr=r(Sxt,"TFData2VecVisionModel"),Sxt.forEach(t),oFr=r(wqe," (Data2VecVision model)"),wqe.forEach(t),rFr=i(D),R8=n(D,"LI",{});var Aqe=s(R8);ETe=n(Aqe,"STRONG",{});var Rxt=s(ETe);tFr=r(Rxt,"deberta"),Rxt.forEach(t),aFr=r(Aqe," \u2014 "),xU=n(Aqe,"A",{href:!0});var Pxt=s(xU);nFr=r(Pxt,"TFDebertaModel"),Pxt.forEach(t),sFr=r(Aqe," (DeBERTa model)"),Aqe.forEach(t),lFr=i(D),P8=n(D,"LI",{});var Lqe=s(P8);CTe=n(Lqe,"STRONG",{});var Bxt=s(CTe);iFr=r(Bxt,"deberta-v2"),Bxt.forEach(t),dFr=r(Lqe," \u2014 "),$U=n(Lqe,"A",{href:!0});var Nxt=s($U);cFr=r(Nxt,"TFDebertaV2Model"),Nxt.forEach(t),fFr=r(Lqe," (DeBERTa-v2 model)"),Lqe.forEach(t),mFr=i(D),B8=n(D,"LI",{});var yqe=s(B8);wTe=n(yqe,"STRONG",{});var Ixt=s(wTe);gFr=r(Ixt,"deit"),Ixt.forEach(t),hFr=r(yqe," \u2014 "),kU=n(yqe,"A",{href:!0});var qxt=s(kU);pFr=r(qxt,"TFDeiTModel"),qxt.forEach(t),_Fr=r(yqe," (DeiT model)"),yqe.forEach(t),uFr=i(D),N8=n(D,"LI",{});var xqe=s(N8);ATe=n(xqe,"STRONG",{});var jxt=s(ATe);bFr=r(jxt,"distilbert"),jxt.forEach(t),vFr=r(xqe," \u2014 "),SU=n(xqe,"A",{href:!0});var Dxt=s(SU);FFr=r(Dxt,"TFDistilBertModel"),Dxt.forEach(t),TFr=r(xqe," (DistilBERT model)"),xqe.forEach(t),MFr=i(D),I8=n(D,"LI",{});var $qe=s(I8);LTe=n($qe,"STRONG",{});var Gxt=s(LTe);EFr=r(Gxt,"dpr"),Gxt.forEach(t),CFr=r($qe," \u2014 "),RU=n($qe,"A",{href:!0});var Oxt=s(RU);wFr=r(Oxt,"TFDPRQuestionEncoder"),Oxt.forEach(t),AFr=r($qe," (DPR model)"),$qe.forEach(t),LFr=i(D),q8=n(D,"LI",{});var kqe=s(q8);yTe=n(kqe,"STRONG",{});var Vxt=s(yTe);yFr=r(Vxt,"electra"),Vxt.forEach(t),xFr=r(kqe," \u2014 "),PU=n(kqe,"A",{href:!0});var Xxt=s(PU);$Fr=r(Xxt,"TFElectraModel"),Xxt.forEach(t),kFr=r(kqe," (ELECTRA model)"),kqe.forEach(t),SFr=i(D),j8=n(D,"LI",{});var Sqe=s(j8);xTe=n(Sqe,"STRONG",{});var zxt=s(xTe);RFr=r(zxt,"flaubert"),zxt.forEach(t),PFr=r(Sqe," \u2014 "),BU=n(Sqe,"A",{href:!0});var Qxt=s(BU);BFr=r(Qxt,"TFFlaubertModel"),Qxt.forEach(t),NFr=r(Sqe," (FlauBERT model)"),Sqe.forEach(t),IFr=i(D),Ys=n(D,"LI",{});var IS=s(Ys);$Te=n(IS,"STRONG",{});var Wxt=s($Te);qFr=r(Wxt,"funnel"),Wxt.forEach(t),jFr=r(IS," \u2014 "),NU=n(IS,"A",{href:!0});var Hxt=s(NU);DFr=r(Hxt,"TFFunnelModel"),Hxt.forEach(t),GFr=r(IS," or "),IU=n(IS,"A",{href:!0});var Uxt=s(IU);OFr=r(Uxt,"TFFunnelBaseModel"),Uxt.forEach(t),VFr=r(IS," (Funnel Transformer model)"),IS.forEach(t),XFr=i(D),D8=n(D,"LI",{});var Rqe=s(D8);kTe=n(Rqe,"STRONG",{});var Jxt=s(kTe);zFr=r(Jxt,"gpt2"),Jxt.forEach(t),QFr=r(Rqe," \u2014 "),qU=n(Rqe,"A",{href:!0});var Yxt=s(qU);WFr=r(Yxt,"TFGPT2Model"),Yxt.forEach(t),HFr=r(Rqe," (OpenAI GPT-2 model)"),Rqe.forEach(t),UFr=i(D),G8=n(D,"LI",{});var Pqe=s(G8);STe=n(Pqe,"STRONG",{});var Kxt=s(STe);JFr=r(Kxt,"gptj"),Kxt.forEach(t),YFr=r(Pqe," \u2014 "),jU=n(Pqe,"A",{href:!0});var Zxt=s(jU);KFr=r(Zxt,"TFGPTJModel"),Zxt.forEach(t),ZFr=r(Pqe," (GPT-J model)"),Pqe.forEach(t),eTr=i(D),O8=n(D,"LI",{});var Bqe=s(O8);RTe=n(Bqe,"STRONG",{});var e$t=s(RTe);oTr=r(e$t,"hubert"),e$t.forEach(t),rTr=r(Bqe," \u2014 "),DU=n(Bqe,"A",{href:!0});var o$t=s(DU);tTr=r(o$t,"TFHubertModel"),o$t.forEach(t),aTr=r(Bqe," (Hubert model)"),Bqe.forEach(t),nTr=i(D),V8=n(D,"LI",{});var Nqe=s(V8);PTe=n(Nqe,"STRONG",{});var r$t=s(PTe);sTr=r(r$t,"layoutlm"),r$t.forEach(t),lTr=r(Nqe," \u2014 "),GU=n(Nqe,"A",{href:!0});var t$t=s(GU);iTr=r(t$t,"TFLayoutLMModel"),t$t.forEach(t),dTr=r(Nqe," (LayoutLM model)"),Nqe.forEach(t),cTr=i(D),X8=n(D,"LI",{});var Iqe=s(X8);BTe=n(Iqe,"STRONG",{});var a$t=s(BTe);fTr=r(a$t,"led"),a$t.forEach(t),mTr=r(Iqe," \u2014 "),OU=n(Iqe,"A",{href:!0});var n$t=s(OU);gTr=r(n$t,"TFLEDModel"),n$t.forEach(t),hTr=r(Iqe," (LED model)"),Iqe.forEach(t),pTr=i(D),z8=n(D,"LI",{});var qqe=s(z8);NTe=n(qqe,"STRONG",{});var s$t=s(NTe);_Tr=r(s$t,"longformer"),s$t.forEach(t),uTr=r(qqe," \u2014 "),VU=n(qqe,"A",{href:!0});var l$t=s(VU);bTr=r(l$t,"TFLongformerModel"),l$t.forEach(t),vTr=r(qqe," (Longformer model)"),qqe.forEach(t),FTr=i(D),Q8=n(D,"LI",{});var jqe=s(Q8);ITe=n(jqe,"STRONG",{});var i$t=s(ITe);TTr=r(i$t,"lxmert"),i$t.forEach(t),MTr=r(jqe," \u2014 "),XU=n(jqe,"A",{href:!0});var d$t=s(XU);ETr=r(d$t,"TFLxmertModel"),d$t.forEach(t),CTr=r(jqe," (LXMERT model)"),jqe.forEach(t),wTr=i(D),W8=n(D,"LI",{});var Dqe=s(W8);qTe=n(Dqe,"STRONG",{});var c$t=s(qTe);ATr=r(c$t,"marian"),c$t.forEach(t),LTr=r(Dqe," \u2014 "),zU=n(Dqe,"A",{href:!0});var f$t=s(zU);yTr=r(f$t,"TFMarianModel"),f$t.forEach(t),xTr=r(Dqe," (Marian model)"),Dqe.forEach(t),$Tr=i(D),H8=n(D,"LI",{});var Gqe=s(H8);jTe=n(Gqe,"STRONG",{});var m$t=s(jTe);kTr=r(m$t,"mbart"),m$t.forEach(t),STr=r(Gqe," \u2014 "),QU=n(Gqe,"A",{href:!0});var g$t=s(QU);RTr=r(g$t,"TFMBartModel"),g$t.forEach(t),PTr=r(Gqe," (mBART model)"),Gqe.forEach(t),BTr=i(D),U8=n(D,"LI",{});var Oqe=s(U8);DTe=n(Oqe,"STRONG",{});var h$t=s(DTe);NTr=r(h$t,"mobilebert"),h$t.forEach(t),ITr=r(Oqe," \u2014 "),WU=n(Oqe,"A",{href:!0});var p$t=s(WU);qTr=r(p$t,"TFMobileBertModel"),p$t.forEach(t),jTr=r(Oqe," (MobileBERT model)"),Oqe.forEach(t),DTr=i(D),J8=n(D,"LI",{});var Vqe=s(J8);GTe=n(Vqe,"STRONG",{});var _$t=s(GTe);GTr=r(_$t,"mpnet"),_$t.forEach(t),OTr=r(Vqe," \u2014 "),HU=n(Vqe,"A",{href:!0});var u$t=s(HU);VTr=r(u$t,"TFMPNetModel"),u$t.forEach(t),XTr=r(Vqe," (MPNet model)"),Vqe.forEach(t),zTr=i(D),Y8=n(D,"LI",{});var Xqe=s(Y8);OTe=n(Xqe,"STRONG",{});var b$t=s(OTe);QTr=r(b$t,"mt5"),b$t.forEach(t),WTr=r(Xqe," \u2014 "),UU=n(Xqe,"A",{href:!0});var v$t=s(UU);HTr=r(v$t,"TFMT5Model"),v$t.forEach(t),UTr=r(Xqe," (MT5 model)"),Xqe.forEach(t),JTr=i(D),K8=n(D,"LI",{});var zqe=s(K8);VTe=n(zqe,"STRONG",{});var F$t=s(VTe);YTr=r(F$t,"openai-gpt"),F$t.forEach(t),KTr=r(zqe," \u2014 "),JU=n(zqe,"A",{href:!0});var T$t=s(JU);ZTr=r(T$t,"TFOpenAIGPTModel"),T$t.forEach(t),e7r=r(zqe," (OpenAI GPT model)"),zqe.forEach(t),o7r=i(D),Z8=n(D,"LI",{});var Qqe=s(Z8);XTe=n(Qqe,"STRONG",{});var M$t=s(XTe);r7r=r(M$t,"opt"),M$t.forEach(t),t7r=r(Qqe," \u2014 "),YU=n(Qqe,"A",{href:!0});var E$t=s(YU);a7r=r(E$t,"TFOPTModel"),E$t.forEach(t),n7r=r(Qqe," (OPT model)"),Qqe.forEach(t),s7r=i(D),e9=n(D,"LI",{});var Wqe=s(e9);zTe=n(Wqe,"STRONG",{});var C$t=s(zTe);l7r=r(C$t,"pegasus"),C$t.forEach(t),i7r=r(Wqe," \u2014 "),KU=n(Wqe,"A",{href:!0});var w$t=s(KU);d7r=r(w$t,"TFPegasusModel"),w$t.forEach(t),c7r=r(Wqe," (Pegasus model)"),Wqe.forEach(t),f7r=i(D),o9=n(D,"LI",{});var Hqe=s(o9);QTe=n(Hqe,"STRONG",{});var A$t=s(QTe);m7r=r(A$t,"regnet"),A$t.forEach(t),g7r=r(Hqe," \u2014 "),ZU=n(Hqe,"A",{href:!0});var L$t=s(ZU);h7r=r(L$t,"TFRegNetModel"),L$t.forEach(t),p7r=r(Hqe," (RegNet model)"),Hqe.forEach(t),_7r=i(D),r9=n(D,"LI",{});var Uqe=s(r9);WTe=n(Uqe,"STRONG",{});var y$t=s(WTe);u7r=r(y$t,"rembert"),y$t.forEach(t),b7r=r(Uqe," \u2014 "),eJ=n(Uqe,"A",{href:!0});var x$t=s(eJ);v7r=r(x$t,"TFRemBertModel"),x$t.forEach(t),F7r=r(Uqe," (RemBERT model)"),Uqe.forEach(t),T7r=i(D),t9=n(D,"LI",{});var Jqe=s(t9);HTe=n(Jqe,"STRONG",{});var $$t=s(HTe);M7r=r($$t,"resnet"),$$t.forEach(t),E7r=r(Jqe," \u2014 "),oJ=n(Jqe,"A",{href:!0});var k$t=s(oJ);C7r=r(k$t,"TFResNetModel"),k$t.forEach(t),w7r=r(Jqe," (ResNet model)"),Jqe.forEach(t),A7r=i(D),a9=n(D,"LI",{});var Yqe=s(a9);UTe=n(Yqe,"STRONG",{});var S$t=s(UTe);L7r=r(S$t,"roberta"),S$t.forEach(t),y7r=r(Yqe," \u2014 "),rJ=n(Yqe,"A",{href:!0});var R$t=s(rJ);x7r=r(R$t,"TFRobertaModel"),R$t.forEach(t),$7r=r(Yqe," (RoBERTa model)"),Yqe.forEach(t),k7r=i(D),n9=n(D,"LI",{});var Kqe=s(n9);JTe=n(Kqe,"STRONG",{});var P$t=s(JTe);S7r=r(P$t,"roformer"),P$t.forEach(t),R7r=r(Kqe," \u2014 "),tJ=n(Kqe,"A",{href:!0});var B$t=s(tJ);P7r=r(B$t,"TFRoFormerModel"),B$t.forEach(t),B7r=r(Kqe," (RoFormer model)"),Kqe.forEach(t),N7r=i(D),s9=n(D,"LI",{});var Zqe=s(s9);YTe=n(Zqe,"STRONG",{});var N$t=s(YTe);I7r=r(N$t,"speech_to_text"),N$t.forEach(t),q7r=r(Zqe," \u2014 "),aJ=n(Zqe,"A",{href:!0});var I$t=s(aJ);j7r=r(I$t,"TFSpeech2TextModel"),I$t.forEach(t),D7r=r(Zqe," (Speech2Text model)"),Zqe.forEach(t),G7r=i(D),l9=n(D,"LI",{});var eje=s(l9);KTe=n(eje,"STRONG",{});var q$t=s(KTe);O7r=r(q$t,"swin"),q$t.forEach(t),V7r=r(eje," \u2014 "),nJ=n(eje,"A",{href:!0});var j$t=s(nJ);X7r=r(j$t,"TFSwinModel"),j$t.forEach(t),z7r=r(eje," (Swin Transformer model)"),eje.forEach(t),Q7r=i(D),i9=n(D,"LI",{});var oje=s(i9);ZTe=n(oje,"STRONG",{});var D$t=s(ZTe);W7r=r(D$t,"t5"),D$t.forEach(t),H7r=r(oje," \u2014 "),sJ=n(oje,"A",{href:!0});var G$t=s(sJ);U7r=r(G$t,"TFT5Model"),G$t.forEach(t),J7r=r(oje," (T5 model)"),oje.forEach(t),Y7r=i(D),d9=n(D,"LI",{});var rje=s(d9);e7e=n(rje,"STRONG",{});var O$t=s(e7e);K7r=r(O$t,"tapas"),O$t.forEach(t),Z7r=r(rje," \u2014 "),lJ=n(rje,"A",{href:!0});var V$t=s(lJ);e8r=r(V$t,"TFTapasModel"),V$t.forEach(t),o8r=r(rje," (TAPAS model)"),rje.forEach(t),r8r=i(D),c9=n(D,"LI",{});var tje=s(c9);o7e=n(tje,"STRONG",{});var X$t=s(o7e);t8r=r(X$t,"transfo-xl"),X$t.forEach(t),a8r=r(tje," \u2014 "),iJ=n(tje,"A",{href:!0});var z$t=s(iJ);n8r=r(z$t,"TFTransfoXLModel"),z$t.forEach(t),s8r=r(tje," (Transformer-XL model)"),tje.forEach(t),l8r=i(D),f9=n(D,"LI",{});var aje=s(f9);r7e=n(aje,"STRONG",{});var Q$t=s(r7e);i8r=r(Q$t,"vit"),Q$t.forEach(t),d8r=r(aje," \u2014 "),dJ=n(aje,"A",{href:!0});var W$t=s(dJ);c8r=r(W$t,"TFViTModel"),W$t.forEach(t),f8r=r(aje," (ViT model)"),aje.forEach(t),m8r=i(D),m9=n(D,"LI",{});var nje=s(m9);t7e=n(nje,"STRONG",{});var H$t=s(t7e);g8r=r(H$t,"vit_mae"),H$t.forEach(t),h8r=r(nje," \u2014 "),cJ=n(nje,"A",{href:!0});var U$t=s(cJ);p8r=r(U$t,"TFViTMAEModel"),U$t.forEach(t),_8r=r(nje," (ViTMAE model)"),nje.forEach(t),u8r=i(D),g9=n(D,"LI",{});var sje=s(g9);a7e=n(sje,"STRONG",{});var J$t=s(a7e);b8r=r(J$t,"wav2vec2"),J$t.forEach(t),v8r=r(sje," \u2014 "),fJ=n(sje,"A",{href:!0});var Y$t=s(fJ);F8r=r(Y$t,"TFWav2Vec2Model"),Y$t.forEach(t),T8r=r(sje," (Wav2Vec2 model)"),sje.forEach(t),M8r=i(D),h9=n(D,"LI",{});var lje=s(h9);n7e=n(lje,"STRONG",{});var K$t=s(n7e);E8r=r(K$t,"xlm"),K$t.forEach(t),C8r=r(lje," \u2014 "),mJ=n(lje,"A",{href:!0});var Z$t=s(mJ);w8r=r(Z$t,"TFXLMModel"),Z$t.forEach(t),A8r=r(lje," (XLM model)"),lje.forEach(t),L8r=i(D),p9=n(D,"LI",{});var ije=s(p9);s7e=n(ije,"STRONG",{});var ekt=s(s7e);y8r=r(ekt,"xlm-roberta"),ekt.forEach(t),x8r=r(ije," \u2014 "),gJ=n(ije,"A",{href:!0});var okt=s(gJ);$8r=r(okt,"TFXLMRobertaModel"),okt.forEach(t),k8r=r(ije," (XLM-RoBERTa model)"),ije.forEach(t),S8r=i(D),_9=n(D,"LI",{});var dje=s(_9);l7e=n(dje,"STRONG",{});var rkt=s(l7e);R8r=r(rkt,"xlnet"),rkt.forEach(t),P8r=r(dje," \u2014 "),hJ=n(dje,"A",{href:!0});var tkt=s(hJ);B8r=r(tkt,"TFXLNetModel"),tkt.forEach(t),N8r=r(dje," (XLNet model)"),dje.forEach(t),D.forEach(t),I8r=i(kl),T(u9.$$.fragment,kl),kl.forEach(t),$l.forEach(t),vze=i(f),cc=n(f,"H2",{class:!0});var LWe=s(cc);b9=n(LWe,"A",{id:!0,class:!0,href:!0});var akt=s(b9);i7e=n(akt,"SPAN",{});var nkt=s(i7e);T(Ky.$$.fragment,nkt),nkt.forEach(t),akt.forEach(t),q8r=i(LWe),d7e=n(LWe,"SPAN",{});var skt=s(d7e);j8r=r(skt,"TFAutoModelForPreTraining"),skt.forEach(t),LWe.forEach(t),Fze=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(Zy.$$.fragment,Sl),D8r=i(Sl),fc=n(Sl,"P",{});var Nte=s(fc);G8r=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pJ=n(Nte,"A",{href:!0});var lkt=s(pJ);O8r=r(lkt,"from_pretrained()"),lkt.forEach(t),V8r=r(Nte," class method or the "),_J=n(Nte,"A",{href:!0});var ikt=s(_J);X8r=r(ikt,"from_config()"),ikt.forEach(t),z8r=r(Nte,` class
method.`),Nte.forEach(t),Q8r=i(Sl),ex=n(Sl,"P",{});var yWe=s(ex);W8r=r(yWe,"This class cannot be instantiated directly using "),c7e=n(yWe,"CODE",{});var dkt=s(c7e);H8r=r(dkt,"__init__()"),dkt.forEach(t),U8r=r(yWe," (throws an error)."),yWe.forEach(t),J8r=i(Sl),Pt=n(Sl,"DIV",{class:!0});var lA=s(Pt);T(ox.$$.fragment,lA),Y8r=i(lA),f7e=n(lA,"P",{});var ckt=s(f7e);K8r=r(ckt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ckt.forEach(t),Z8r=i(lA),mc=n(lA,"P",{});var Ite=s(mc);e9r=r(Ite,`Note:
Loading a model from its configuration file does `),m7e=n(Ite,"STRONG",{});var fkt=s(m7e);o9r=r(fkt,"not"),fkt.forEach(t),r9r=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(Ite,"A",{href:!0});var mkt=s(uJ);t9r=r(mkt,"from_pretrained()"),mkt.forEach(t),a9r=r(Ite," to load the model weights."),Ite.forEach(t),n9r=i(lA),T(v9.$$.fragment,lA),lA.forEach(t),s9r=i(Sl),$r=n(Sl,"DIV",{class:!0});var Rl=s($r);T(rx.$$.fragment,Rl),l9r=i(Rl),g7e=n(Rl,"P",{});var gkt=s(g7e);i9r=r(gkt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gkt.forEach(t),d9r=i(Rl),ln=n(Rl,"P",{});var iA=s(ln);c9r=r(iA,"The model class to instantiate is selected based on the "),h7e=n(iA,"CODE",{});var hkt=s(h7e);f9r=r(hkt,"model_type"),hkt.forEach(t),m9r=r(iA,` property of the config object (either
passed as an argument or loaded from `),p7e=n(iA,"CODE",{});var pkt=s(p7e);g9r=r(pkt,"pretrained_model_name_or_path"),pkt.forEach(t),h9r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_7e=n(iA,"CODE",{});var _kt=s(_7e);p9r=r(_kt,"pretrained_model_name_or_path"),_kt.forEach(t),_9r=r(iA,":"),iA.forEach(t),u9r=i(Rl),se=n(Rl,"UL",{});var le=s(se);F9=n(le,"LI",{});var cje=s(F9);u7e=n(cje,"STRONG",{});var ukt=s(u7e);b9r=r(ukt,"albert"),ukt.forEach(t),v9r=r(cje," \u2014 "),bJ=n(cje,"A",{href:!0});var bkt=s(bJ);F9r=r(bkt,"TFAlbertForPreTraining"),bkt.forEach(t),T9r=r(cje," (ALBERT model)"),cje.forEach(t),M9r=i(le),T9=n(le,"LI",{});var fje=s(T9);b7e=n(fje,"STRONG",{});var vkt=s(b7e);E9r=r(vkt,"bart"),vkt.forEach(t),C9r=r(fje," \u2014 "),vJ=n(fje,"A",{href:!0});var Fkt=s(vJ);w9r=r(Fkt,"TFBartForConditionalGeneration"),Fkt.forEach(t),A9r=r(fje," (BART model)"),fje.forEach(t),L9r=i(le),M9=n(le,"LI",{});var mje=s(M9);v7e=n(mje,"STRONG",{});var Tkt=s(v7e);y9r=r(Tkt,"bert"),Tkt.forEach(t),x9r=r(mje," \u2014 "),FJ=n(mje,"A",{href:!0});var Mkt=s(FJ);$9r=r(Mkt,"TFBertForPreTraining"),Mkt.forEach(t),k9r=r(mje," (BERT model)"),mje.forEach(t),S9r=i(le),E9=n(le,"LI",{});var gje=s(E9);F7e=n(gje,"STRONG",{});var Ekt=s(F7e);R9r=r(Ekt,"camembert"),Ekt.forEach(t),P9r=r(gje," \u2014 "),TJ=n(gje,"A",{href:!0});var Ckt=s(TJ);B9r=r(Ckt,"TFCamembertForMaskedLM"),Ckt.forEach(t),N9r=r(gje," (CamemBERT model)"),gje.forEach(t),I9r=i(le),C9=n(le,"LI",{});var hje=s(C9);T7e=n(hje,"STRONG",{});var wkt=s(T7e);q9r=r(wkt,"ctrl"),wkt.forEach(t),j9r=r(hje," \u2014 "),MJ=n(hje,"A",{href:!0});var Akt=s(MJ);D9r=r(Akt,"TFCTRLLMHeadModel"),Akt.forEach(t),G9r=r(hje," (CTRL model)"),hje.forEach(t),O9r=i(le),w9=n(le,"LI",{});var pje=s(w9);M7e=n(pje,"STRONG",{});var Lkt=s(M7e);V9r=r(Lkt,"distilbert"),Lkt.forEach(t),X9r=r(pje," \u2014 "),EJ=n(pje,"A",{href:!0});var ykt=s(EJ);z9r=r(ykt,"TFDistilBertForMaskedLM"),ykt.forEach(t),Q9r=r(pje," (DistilBERT model)"),pje.forEach(t),W9r=i(le),A9=n(le,"LI",{});var _je=s(A9);E7e=n(_je,"STRONG",{});var xkt=s(E7e);H9r=r(xkt,"electra"),xkt.forEach(t),U9r=r(_je," \u2014 "),CJ=n(_je,"A",{href:!0});var $kt=s(CJ);J9r=r($kt,"TFElectraForPreTraining"),$kt.forEach(t),Y9r=r(_je," (ELECTRA model)"),_je.forEach(t),K9r=i(le),L9=n(le,"LI",{});var uje=s(L9);C7e=n(uje,"STRONG",{});var kkt=s(C7e);Z9r=r(kkt,"flaubert"),kkt.forEach(t),eMr=r(uje," \u2014 "),wJ=n(uje,"A",{href:!0});var Skt=s(wJ);oMr=r(Skt,"TFFlaubertWithLMHeadModel"),Skt.forEach(t),rMr=r(uje," (FlauBERT model)"),uje.forEach(t),tMr=i(le),y9=n(le,"LI",{});var bje=s(y9);w7e=n(bje,"STRONG",{});var Rkt=s(w7e);aMr=r(Rkt,"funnel"),Rkt.forEach(t),nMr=r(bje," \u2014 "),AJ=n(bje,"A",{href:!0});var Pkt=s(AJ);sMr=r(Pkt,"TFFunnelForPreTraining"),Pkt.forEach(t),lMr=r(bje," (Funnel Transformer model)"),bje.forEach(t),iMr=i(le),x9=n(le,"LI",{});var vje=s(x9);A7e=n(vje,"STRONG",{});var Bkt=s(A7e);dMr=r(Bkt,"gpt2"),Bkt.forEach(t),cMr=r(vje," \u2014 "),LJ=n(vje,"A",{href:!0});var Nkt=s(LJ);fMr=r(Nkt,"TFGPT2LMHeadModel"),Nkt.forEach(t),mMr=r(vje," (OpenAI GPT-2 model)"),vje.forEach(t),gMr=i(le),$9=n(le,"LI",{});var Fje=s($9);L7e=n(Fje,"STRONG",{});var Ikt=s(L7e);hMr=r(Ikt,"layoutlm"),Ikt.forEach(t),pMr=r(Fje," \u2014 "),yJ=n(Fje,"A",{href:!0});var qkt=s(yJ);_Mr=r(qkt,"TFLayoutLMForMaskedLM"),qkt.forEach(t),uMr=r(Fje," (LayoutLM model)"),Fje.forEach(t),bMr=i(le),k9=n(le,"LI",{});var Tje=s(k9);y7e=n(Tje,"STRONG",{});var jkt=s(y7e);vMr=r(jkt,"lxmert"),jkt.forEach(t),FMr=r(Tje," \u2014 "),xJ=n(Tje,"A",{href:!0});var Dkt=s(xJ);TMr=r(Dkt,"TFLxmertForPreTraining"),Dkt.forEach(t),MMr=r(Tje," (LXMERT model)"),Tje.forEach(t),EMr=i(le),S9=n(le,"LI",{});var Mje=s(S9);x7e=n(Mje,"STRONG",{});var Gkt=s(x7e);CMr=r(Gkt,"mobilebert"),Gkt.forEach(t),wMr=r(Mje," \u2014 "),$J=n(Mje,"A",{href:!0});var Okt=s($J);AMr=r(Okt,"TFMobileBertForPreTraining"),Okt.forEach(t),LMr=r(Mje," (MobileBERT model)"),Mje.forEach(t),yMr=i(le),R9=n(le,"LI",{});var Eje=s(R9);$7e=n(Eje,"STRONG",{});var Vkt=s($7e);xMr=r(Vkt,"mpnet"),Vkt.forEach(t),$Mr=r(Eje," \u2014 "),kJ=n(Eje,"A",{href:!0});var Xkt=s(kJ);kMr=r(Xkt,"TFMPNetForMaskedLM"),Xkt.forEach(t),SMr=r(Eje," (MPNet model)"),Eje.forEach(t),RMr=i(le),P9=n(le,"LI",{});var Cje=s(P9);k7e=n(Cje,"STRONG",{});var zkt=s(k7e);PMr=r(zkt,"openai-gpt"),zkt.forEach(t),BMr=r(Cje," \u2014 "),SJ=n(Cje,"A",{href:!0});var Qkt=s(SJ);NMr=r(Qkt,"TFOpenAIGPTLMHeadModel"),Qkt.forEach(t),IMr=r(Cje," (OpenAI GPT model)"),Cje.forEach(t),qMr=i(le),B9=n(le,"LI",{});var wje=s(B9);S7e=n(wje,"STRONG",{});var Wkt=s(S7e);jMr=r(Wkt,"roberta"),Wkt.forEach(t),DMr=r(wje," \u2014 "),RJ=n(wje,"A",{href:!0});var Hkt=s(RJ);GMr=r(Hkt,"TFRobertaForMaskedLM"),Hkt.forEach(t),OMr=r(wje," (RoBERTa model)"),wje.forEach(t),VMr=i(le),N9=n(le,"LI",{});var Aje=s(N9);R7e=n(Aje,"STRONG",{});var Ukt=s(R7e);XMr=r(Ukt,"t5"),Ukt.forEach(t),zMr=r(Aje," \u2014 "),PJ=n(Aje,"A",{href:!0});var Jkt=s(PJ);QMr=r(Jkt,"TFT5ForConditionalGeneration"),Jkt.forEach(t),WMr=r(Aje," (T5 model)"),Aje.forEach(t),HMr=i(le),I9=n(le,"LI",{});var Lje=s(I9);P7e=n(Lje,"STRONG",{});var Ykt=s(P7e);UMr=r(Ykt,"tapas"),Ykt.forEach(t),JMr=r(Lje," \u2014 "),BJ=n(Lje,"A",{href:!0});var Kkt=s(BJ);YMr=r(Kkt,"TFTapasForMaskedLM"),Kkt.forEach(t),KMr=r(Lje," (TAPAS model)"),Lje.forEach(t),ZMr=i(le),q9=n(le,"LI",{});var yje=s(q9);B7e=n(yje,"STRONG",{});var Zkt=s(B7e);e4r=r(Zkt,"transfo-xl"),Zkt.forEach(t),o4r=r(yje," \u2014 "),NJ=n(yje,"A",{href:!0});var eSt=s(NJ);r4r=r(eSt,"TFTransfoXLLMHeadModel"),eSt.forEach(t),t4r=r(yje," (Transformer-XL model)"),yje.forEach(t),a4r=i(le),j9=n(le,"LI",{});var xje=s(j9);N7e=n(xje,"STRONG",{});var oSt=s(N7e);n4r=r(oSt,"vit_mae"),oSt.forEach(t),s4r=r(xje," \u2014 "),IJ=n(xje,"A",{href:!0});var rSt=s(IJ);l4r=r(rSt,"TFViTMAEForPreTraining"),rSt.forEach(t),i4r=r(xje," (ViTMAE model)"),xje.forEach(t),d4r=i(le),D9=n(le,"LI",{});var $je=s(D9);I7e=n($je,"STRONG",{});var tSt=s(I7e);c4r=r(tSt,"xlm"),tSt.forEach(t),f4r=r($je," \u2014 "),qJ=n($je,"A",{href:!0});var aSt=s(qJ);m4r=r(aSt,"TFXLMWithLMHeadModel"),aSt.forEach(t),g4r=r($je," (XLM model)"),$je.forEach(t),h4r=i(le),G9=n(le,"LI",{});var kje=s(G9);q7e=n(kje,"STRONG",{});var nSt=s(q7e);p4r=r(nSt,"xlm-roberta"),nSt.forEach(t),_4r=r(kje," \u2014 "),jJ=n(kje,"A",{href:!0});var sSt=s(jJ);u4r=r(sSt,"TFXLMRobertaForMaskedLM"),sSt.forEach(t),b4r=r(kje," (XLM-RoBERTa model)"),kje.forEach(t),v4r=i(le),O9=n(le,"LI",{});var Sje=s(O9);j7e=n(Sje,"STRONG",{});var lSt=s(j7e);F4r=r(lSt,"xlnet"),lSt.forEach(t),T4r=r(Sje," \u2014 "),DJ=n(Sje,"A",{href:!0});var iSt=s(DJ);M4r=r(iSt,"TFXLNetLMHeadModel"),iSt.forEach(t),E4r=r(Sje," (XLNet model)"),Sje.forEach(t),le.forEach(t),C4r=i(Rl),T(V9.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Tze=i(f),gc=n(f,"H2",{class:!0});var xWe=s(gc);X9=n(xWe,"A",{id:!0,class:!0,href:!0});var dSt=s(X9);D7e=n(dSt,"SPAN",{});var cSt=s(D7e);T(tx.$$.fragment,cSt),cSt.forEach(t),dSt.forEach(t),w4r=i(xWe),G7e=n(xWe,"SPAN",{});var fSt=s(G7e);A4r=r(fSt,"TFAutoModelForCausalLM"),fSt.forEach(t),xWe.forEach(t),Mze=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(ax.$$.fragment,Pl),L4r=i(Pl),hc=n(Pl,"P",{});var qte=s(hc);y4r=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GJ=n(qte,"A",{href:!0});var mSt=s(GJ);x4r=r(mSt,"from_pretrained()"),mSt.forEach(t),$4r=r(qte," class method or the "),OJ=n(qte,"A",{href:!0});var gSt=s(OJ);k4r=r(gSt,"from_config()"),gSt.forEach(t),S4r=r(qte,` class
method.`),qte.forEach(t),R4r=i(Pl),nx=n(Pl,"P",{});var $We=s(nx);P4r=r($We,"This class cannot be instantiated directly using "),O7e=n($We,"CODE",{});var hSt=s(O7e);B4r=r(hSt,"__init__()"),hSt.forEach(t),N4r=r($We," (throws an error)."),$We.forEach(t),I4r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var dA=s(Bt);T(sx.$$.fragment,dA),q4r=i(dA),V7e=n(dA,"P",{});var pSt=s(V7e);j4r=r(pSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pSt.forEach(t),D4r=i(dA),pc=n(dA,"P",{});var jte=s(pc);G4r=r(jte,`Note:
Loading a model from its configuration file does `),X7e=n(jte,"STRONG",{});var _St=s(X7e);O4r=r(_St,"not"),_St.forEach(t),V4r=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(jte,"A",{href:!0});var uSt=s(VJ);X4r=r(uSt,"from_pretrained()"),uSt.forEach(t),z4r=r(jte," to load the model weights."),jte.forEach(t),Q4r=i(dA),T(z9.$$.fragment,dA),dA.forEach(t),W4r=i(Pl),kr=n(Pl,"DIV",{class:!0});var Bl=s(kr);T(lx.$$.fragment,Bl),H4r=i(Bl),z7e=n(Bl,"P",{});var bSt=s(z7e);U4r=r(bSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bSt.forEach(t),J4r=i(Bl),dn=n(Bl,"P",{});var cA=s(dn);Y4r=r(cA,"The model class to instantiate is selected based on the "),Q7e=n(cA,"CODE",{});var vSt=s(Q7e);K4r=r(vSt,"model_type"),vSt.forEach(t),Z4r=r(cA,` property of the config object (either
passed as an argument or loaded from `),W7e=n(cA,"CODE",{});var FSt=s(W7e);eEr=r(FSt,"pretrained_model_name_or_path"),FSt.forEach(t),oEr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H7e=n(cA,"CODE",{});var TSt=s(H7e);rEr=r(TSt,"pretrained_model_name_or_path"),TSt.forEach(t),tEr=r(cA,":"),cA.forEach(t),aEr=i(Bl),Me=n(Bl,"UL",{});var Ce=s(Me);Q9=n(Ce,"LI",{});var Rje=s(Q9);U7e=n(Rje,"STRONG",{});var MSt=s(U7e);nEr=r(MSt,"bert"),MSt.forEach(t),sEr=r(Rje," \u2014 "),XJ=n(Rje,"A",{href:!0});var ESt=s(XJ);lEr=r(ESt,"TFBertLMHeadModel"),ESt.forEach(t),iEr=r(Rje," (BERT model)"),Rje.forEach(t),dEr=i(Ce),W9=n(Ce,"LI",{});var Pje=s(W9);J7e=n(Pje,"STRONG",{});var CSt=s(J7e);cEr=r(CSt,"camembert"),CSt.forEach(t),fEr=r(Pje," \u2014 "),zJ=n(Pje,"A",{href:!0});var wSt=s(zJ);mEr=r(wSt,"TFCamembertForCausalLM"),wSt.forEach(t),gEr=r(Pje," (CamemBERT model)"),Pje.forEach(t),hEr=i(Ce),H9=n(Ce,"LI",{});var Bje=s(H9);Y7e=n(Bje,"STRONG",{});var ASt=s(Y7e);pEr=r(ASt,"ctrl"),ASt.forEach(t),_Er=r(Bje," \u2014 "),QJ=n(Bje,"A",{href:!0});var LSt=s(QJ);uEr=r(LSt,"TFCTRLLMHeadModel"),LSt.forEach(t),bEr=r(Bje," (CTRL model)"),Bje.forEach(t),vEr=i(Ce),U9=n(Ce,"LI",{});var Nje=s(U9);K7e=n(Nje,"STRONG",{});var ySt=s(K7e);FEr=r(ySt,"gpt2"),ySt.forEach(t),TEr=r(Nje," \u2014 "),WJ=n(Nje,"A",{href:!0});var xSt=s(WJ);MEr=r(xSt,"TFGPT2LMHeadModel"),xSt.forEach(t),EEr=r(Nje," (OpenAI GPT-2 model)"),Nje.forEach(t),CEr=i(Ce),J9=n(Ce,"LI",{});var Ije=s(J9);Z7e=n(Ije,"STRONG",{});var $St=s(Z7e);wEr=r($St,"gptj"),$St.forEach(t),AEr=r(Ije," \u2014 "),HJ=n(Ije,"A",{href:!0});var kSt=s(HJ);LEr=r(kSt,"TFGPTJForCausalLM"),kSt.forEach(t),yEr=r(Ije," (GPT-J model)"),Ije.forEach(t),xEr=i(Ce),Y9=n(Ce,"LI",{});var qje=s(Y9);e8e=n(qje,"STRONG",{});var SSt=s(e8e);$Er=r(SSt,"openai-gpt"),SSt.forEach(t),kEr=r(qje," \u2014 "),UJ=n(qje,"A",{href:!0});var RSt=s(UJ);SEr=r(RSt,"TFOpenAIGPTLMHeadModel"),RSt.forEach(t),REr=r(qje," (OpenAI GPT model)"),qje.forEach(t),PEr=i(Ce),K9=n(Ce,"LI",{});var jje=s(K9);o8e=n(jje,"STRONG",{});var PSt=s(o8e);BEr=r(PSt,"opt"),PSt.forEach(t),NEr=r(jje," \u2014 "),JJ=n(jje,"A",{href:!0});var BSt=s(JJ);IEr=r(BSt,"TFOPTForCausalLM"),BSt.forEach(t),qEr=r(jje," (OPT model)"),jje.forEach(t),jEr=i(Ce),Z9=n(Ce,"LI",{});var Dje=s(Z9);r8e=n(Dje,"STRONG",{});var NSt=s(r8e);DEr=r(NSt,"rembert"),NSt.forEach(t),GEr=r(Dje," \u2014 "),YJ=n(Dje,"A",{href:!0});var ISt=s(YJ);OEr=r(ISt,"TFRemBertForCausalLM"),ISt.forEach(t),VEr=r(Dje," (RemBERT model)"),Dje.forEach(t),XEr=i(Ce),eM=n(Ce,"LI",{});var Gje=s(eM);t8e=n(Gje,"STRONG",{});var qSt=s(t8e);zEr=r(qSt,"roberta"),qSt.forEach(t),QEr=r(Gje," \u2014 "),KJ=n(Gje,"A",{href:!0});var jSt=s(KJ);WEr=r(jSt,"TFRobertaForCausalLM"),jSt.forEach(t),HEr=r(Gje," (RoBERTa model)"),Gje.forEach(t),UEr=i(Ce),oM=n(Ce,"LI",{});var Oje=s(oM);a8e=n(Oje,"STRONG",{});var DSt=s(a8e);JEr=r(DSt,"roformer"),DSt.forEach(t),YEr=r(Oje," \u2014 "),ZJ=n(Oje,"A",{href:!0});var GSt=s(ZJ);KEr=r(GSt,"TFRoFormerForCausalLM"),GSt.forEach(t),ZEr=r(Oje," (RoFormer model)"),Oje.forEach(t),eCr=i(Ce),rM=n(Ce,"LI",{});var Vje=s(rM);n8e=n(Vje,"STRONG",{});var OSt=s(n8e);oCr=r(OSt,"transfo-xl"),OSt.forEach(t),rCr=r(Vje," \u2014 "),eY=n(Vje,"A",{href:!0});var VSt=s(eY);tCr=r(VSt,"TFTransfoXLLMHeadModel"),VSt.forEach(t),aCr=r(Vje," (Transformer-XL model)"),Vje.forEach(t),nCr=i(Ce),tM=n(Ce,"LI",{});var Xje=s(tM);s8e=n(Xje,"STRONG",{});var XSt=s(s8e);sCr=r(XSt,"xlm"),XSt.forEach(t),lCr=r(Xje," \u2014 "),oY=n(Xje,"A",{href:!0});var zSt=s(oY);iCr=r(zSt,"TFXLMWithLMHeadModel"),zSt.forEach(t),dCr=r(Xje," (XLM model)"),Xje.forEach(t),cCr=i(Ce),aM=n(Ce,"LI",{});var zje=s(aM);l8e=n(zje,"STRONG",{});var QSt=s(l8e);fCr=r(QSt,"xlnet"),QSt.forEach(t),mCr=r(zje," \u2014 "),rY=n(zje,"A",{href:!0});var WSt=s(rY);gCr=r(WSt,"TFXLNetLMHeadModel"),WSt.forEach(t),hCr=r(zje," (XLNet model)"),zje.forEach(t),Ce.forEach(t),pCr=i(Bl),T(nM.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),Eze=i(f),_c=n(f,"H2",{class:!0});var kWe=s(_c);sM=n(kWe,"A",{id:!0,class:!0,href:!0});var HSt=s(sM);i8e=n(HSt,"SPAN",{});var USt=s(i8e);T(ix.$$.fragment,USt),USt.forEach(t),HSt.forEach(t),_Cr=i(kWe),d8e=n(kWe,"SPAN",{});var JSt=s(d8e);uCr=r(JSt,"TFAutoModelForImageClassification"),JSt.forEach(t),kWe.forEach(t),Cze=i(f),ar=n(f,"DIV",{class:!0});var Nl=s(ar);T(dx.$$.fragment,Nl),bCr=i(Nl),uc=n(Nl,"P",{});var Dte=s(uc);vCr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tY=n(Dte,"A",{href:!0});var YSt=s(tY);FCr=r(YSt,"from_pretrained()"),YSt.forEach(t),TCr=r(Dte," class method or the "),aY=n(Dte,"A",{href:!0});var KSt=s(aY);MCr=r(KSt,"from_config()"),KSt.forEach(t),ECr=r(Dte,` class
method.`),Dte.forEach(t),CCr=i(Nl),cx=n(Nl,"P",{});var SWe=s(cx);wCr=r(SWe,"This class cannot be instantiated directly using "),c8e=n(SWe,"CODE",{});var ZSt=s(c8e);ACr=r(ZSt,"__init__()"),ZSt.forEach(t),LCr=r(SWe," (throws an error)."),SWe.forEach(t),yCr=i(Nl),Nt=n(Nl,"DIV",{class:!0});var fA=s(Nt);T(fx.$$.fragment,fA),xCr=i(fA),f8e=n(fA,"P",{});var eRt=s(f8e);$Cr=r(eRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eRt.forEach(t),kCr=i(fA),bc=n(fA,"P",{});var Gte=s(bc);SCr=r(Gte,`Note:
Loading a model from its configuration file does `),m8e=n(Gte,"STRONG",{});var oRt=s(m8e);RCr=r(oRt,"not"),oRt.forEach(t),PCr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(Gte,"A",{href:!0});var rRt=s(nY);BCr=r(rRt,"from_pretrained()"),rRt.forEach(t),NCr=r(Gte," to load the model weights."),Gte.forEach(t),ICr=i(fA),T(lM.$$.fragment,fA),fA.forEach(t),qCr=i(Nl),Sr=n(Nl,"DIV",{class:!0});var Il=s(Sr);T(mx.$$.fragment,Il),jCr=i(Il),g8e=n(Il,"P",{});var tRt=s(g8e);DCr=r(tRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tRt.forEach(t),GCr=i(Il),cn=n(Il,"P",{});var mA=s(cn);OCr=r(mA,"The model class to instantiate is selected based on the "),h8e=n(mA,"CODE",{});var aRt=s(h8e);VCr=r(aRt,"model_type"),aRt.forEach(t),XCr=r(mA,` property of the config object (either
passed as an argument or loaded from `),p8e=n(mA,"CODE",{});var nRt=s(p8e);zCr=r(nRt,"pretrained_model_name_or_path"),nRt.forEach(t),QCr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=n(mA,"CODE",{});var sRt=s(_8e);WCr=r(sRt,"pretrained_model_name_or_path"),sRt.forEach(t),HCr=r(mA,":"),mA.forEach(t),UCr=i(Il),Qe=n(Il,"UL",{});var ot=s(Qe);iM=n(ot,"LI",{});var Qje=s(iM);u8e=n(Qje,"STRONG",{});var lRt=s(u8e);JCr=r(lRt,"convnext"),lRt.forEach(t),YCr=r(Qje," \u2014 "),sY=n(Qje,"A",{href:!0});var iRt=s(sY);KCr=r(iRt,"TFConvNextForImageClassification"),iRt.forEach(t),ZCr=r(Qje," (ConvNeXT model)"),Qje.forEach(t),e3r=i(ot),dM=n(ot,"LI",{});var Wje=s(dM);b8e=n(Wje,"STRONG",{});var dRt=s(b8e);o3r=r(dRt,"data2vec-vision"),dRt.forEach(t),r3r=r(Wje," \u2014 "),lY=n(Wje,"A",{href:!0});var cRt=s(lY);t3r=r(cRt,"TFData2VecVisionForImageClassification"),cRt.forEach(t),a3r=r(Wje," (Data2VecVision model)"),Wje.forEach(t),n3r=i(ot),Ks=n(ot,"LI",{});var qS=s(Ks);v8e=n(qS,"STRONG",{});var fRt=s(v8e);s3r=r(fRt,"deit"),fRt.forEach(t),l3r=r(qS," \u2014 "),iY=n(qS,"A",{href:!0});var mRt=s(iY);i3r=r(mRt,"TFDeiTForImageClassification"),mRt.forEach(t),d3r=r(qS," or "),dY=n(qS,"A",{href:!0});var gRt=s(dY);c3r=r(gRt,"TFDeiTForImageClassificationWithTeacher"),gRt.forEach(t),f3r=r(qS," (DeiT model)"),qS.forEach(t),m3r=i(ot),cM=n(ot,"LI",{});var Hje=s(cM);F8e=n(Hje,"STRONG",{});var hRt=s(F8e);g3r=r(hRt,"regnet"),hRt.forEach(t),h3r=r(Hje," \u2014 "),cY=n(Hje,"A",{href:!0});var pRt=s(cY);p3r=r(pRt,"TFRegNetForImageClassification"),pRt.forEach(t),_3r=r(Hje," (RegNet model)"),Hje.forEach(t),u3r=i(ot),fM=n(ot,"LI",{});var Uje=s(fM);T8e=n(Uje,"STRONG",{});var _Rt=s(T8e);b3r=r(_Rt,"resnet"),_Rt.forEach(t),v3r=r(Uje," \u2014 "),fY=n(Uje,"A",{href:!0});var uRt=s(fY);F3r=r(uRt,"TFResNetForImageClassification"),uRt.forEach(t),T3r=r(Uje," (ResNet model)"),Uje.forEach(t),M3r=i(ot),mM=n(ot,"LI",{});var Jje=s(mM);M8e=n(Jje,"STRONG",{});var bRt=s(M8e);E3r=r(bRt,"swin"),bRt.forEach(t),C3r=r(Jje," \u2014 "),mY=n(Jje,"A",{href:!0});var vRt=s(mY);w3r=r(vRt,"TFSwinForImageClassification"),vRt.forEach(t),A3r=r(Jje," (Swin Transformer model)"),Jje.forEach(t),L3r=i(ot),gM=n(ot,"LI",{});var Yje=s(gM);E8e=n(Yje,"STRONG",{});var FRt=s(E8e);y3r=r(FRt,"vit"),FRt.forEach(t),x3r=r(Yje," \u2014 "),gY=n(Yje,"A",{href:!0});var TRt=s(gY);$3r=r(TRt,"TFViTForImageClassification"),TRt.forEach(t),k3r=r(Yje," (ViT model)"),Yje.forEach(t),ot.forEach(t),S3r=i(Il),T(hM.$$.fragment,Il),Il.forEach(t),Nl.forEach(t),wze=i(f),vc=n(f,"H2",{class:!0});var RWe=s(vc);pM=n(RWe,"A",{id:!0,class:!0,href:!0});var MRt=s(pM);C8e=n(MRt,"SPAN",{});var ERt=s(C8e);T(gx.$$.fragment,ERt),ERt.forEach(t),MRt.forEach(t),R3r=i(RWe),w8e=n(RWe,"SPAN",{});var CRt=s(w8e);P3r=r(CRt,"TFAutoModelForMaskedLM"),CRt.forEach(t),RWe.forEach(t),Aze=i(f),nr=n(f,"DIV",{class:!0});var ql=s(nr);T(hx.$$.fragment,ql),B3r=i(ql),Fc=n(ql,"P",{});var Ote=s(Fc);N3r=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hY=n(Ote,"A",{href:!0});var wRt=s(hY);I3r=r(wRt,"from_pretrained()"),wRt.forEach(t),q3r=r(Ote," class method or the "),pY=n(Ote,"A",{href:!0});var ARt=s(pY);j3r=r(ARt,"from_config()"),ARt.forEach(t),D3r=r(Ote,` class
method.`),Ote.forEach(t),G3r=i(ql),px=n(ql,"P",{});var PWe=s(px);O3r=r(PWe,"This class cannot be instantiated directly using "),A8e=n(PWe,"CODE",{});var LRt=s(A8e);V3r=r(LRt,"__init__()"),LRt.forEach(t),X3r=r(PWe," (throws an error)."),PWe.forEach(t),z3r=i(ql),It=n(ql,"DIV",{class:!0});var gA=s(It);T(_x.$$.fragment,gA),Q3r=i(gA),L8e=n(gA,"P",{});var yRt=s(L8e);W3r=r(yRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yRt.forEach(t),H3r=i(gA),Tc=n(gA,"P",{});var Vte=s(Tc);U3r=r(Vte,`Note:
Loading a model from its configuration file does `),y8e=n(Vte,"STRONG",{});var xRt=s(y8e);J3r=r(xRt,"not"),xRt.forEach(t),Y3r=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=n(Vte,"A",{href:!0});var $Rt=s(_Y);K3r=r($Rt,"from_pretrained()"),$Rt.forEach(t),Z3r=r(Vte," to load the model weights."),Vte.forEach(t),e5r=i(gA),T(_M.$$.fragment,gA),gA.forEach(t),o5r=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(ux.$$.fragment,jl),r5r=i(jl),x8e=n(jl,"P",{});var kRt=s(x8e);t5r=r(kRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kRt.forEach(t),a5r=i(jl),fn=n(jl,"P",{});var hA=s(fn);n5r=r(hA,"The model class to instantiate is selected based on the "),$8e=n(hA,"CODE",{});var SRt=s($8e);s5r=r(SRt,"model_type"),SRt.forEach(t),l5r=r(hA,` property of the config object (either
passed as an argument or loaded from `),k8e=n(hA,"CODE",{});var RRt=s(k8e);i5r=r(RRt,"pretrained_model_name_or_path"),RRt.forEach(t),d5r=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S8e=n(hA,"CODE",{});var PRt=s(S8e);c5r=r(PRt,"pretrained_model_name_or_path"),PRt.forEach(t),f5r=r(hA,":"),hA.forEach(t),m5r=i(jl),ie=n(jl,"UL",{});var me=s(ie);uM=n(me,"LI",{});var Kje=s(uM);R8e=n(Kje,"STRONG",{});var BRt=s(R8e);g5r=r(BRt,"albert"),BRt.forEach(t),h5r=r(Kje," \u2014 "),uY=n(Kje,"A",{href:!0});var NRt=s(uY);p5r=r(NRt,"TFAlbertForMaskedLM"),NRt.forEach(t),_5r=r(Kje," (ALBERT model)"),Kje.forEach(t),u5r=i(me),bM=n(me,"LI",{});var Zje=s(bM);P8e=n(Zje,"STRONG",{});var IRt=s(P8e);b5r=r(IRt,"bert"),IRt.forEach(t),v5r=r(Zje," \u2014 "),bY=n(Zje,"A",{href:!0});var qRt=s(bY);F5r=r(qRt,"TFBertForMaskedLM"),qRt.forEach(t),T5r=r(Zje," (BERT model)"),Zje.forEach(t),M5r=i(me),vM=n(me,"LI",{});var eDe=s(vM);B8e=n(eDe,"STRONG",{});var jRt=s(B8e);E5r=r(jRt,"camembert"),jRt.forEach(t),C5r=r(eDe," \u2014 "),vY=n(eDe,"A",{href:!0});var DRt=s(vY);w5r=r(DRt,"TFCamembertForMaskedLM"),DRt.forEach(t),A5r=r(eDe," (CamemBERT model)"),eDe.forEach(t),L5r=i(me),FM=n(me,"LI",{});var oDe=s(FM);N8e=n(oDe,"STRONG",{});var GRt=s(N8e);y5r=r(GRt,"convbert"),GRt.forEach(t),x5r=r(oDe," \u2014 "),FY=n(oDe,"A",{href:!0});var ORt=s(FY);$5r=r(ORt,"TFConvBertForMaskedLM"),ORt.forEach(t),k5r=r(oDe," (ConvBERT model)"),oDe.forEach(t),S5r=i(me),TM=n(me,"LI",{});var rDe=s(TM);I8e=n(rDe,"STRONG",{});var VRt=s(I8e);R5r=r(VRt,"deberta"),VRt.forEach(t),P5r=r(rDe," \u2014 "),TY=n(rDe,"A",{href:!0});var XRt=s(TY);B5r=r(XRt,"TFDebertaForMaskedLM"),XRt.forEach(t),N5r=r(rDe," (DeBERTa model)"),rDe.forEach(t),I5r=i(me),MM=n(me,"LI",{});var tDe=s(MM);q8e=n(tDe,"STRONG",{});var zRt=s(q8e);q5r=r(zRt,"deberta-v2"),zRt.forEach(t),j5r=r(tDe," \u2014 "),MY=n(tDe,"A",{href:!0});var QRt=s(MY);D5r=r(QRt,"TFDebertaV2ForMaskedLM"),QRt.forEach(t),G5r=r(tDe," (DeBERTa-v2 model)"),tDe.forEach(t),O5r=i(me),EM=n(me,"LI",{});var aDe=s(EM);j8e=n(aDe,"STRONG",{});var WRt=s(j8e);V5r=r(WRt,"distilbert"),WRt.forEach(t),X5r=r(aDe," \u2014 "),EY=n(aDe,"A",{href:!0});var HRt=s(EY);z5r=r(HRt,"TFDistilBertForMaskedLM"),HRt.forEach(t),Q5r=r(aDe," (DistilBERT model)"),aDe.forEach(t),W5r=i(me),CM=n(me,"LI",{});var nDe=s(CM);D8e=n(nDe,"STRONG",{});var URt=s(D8e);H5r=r(URt,"electra"),URt.forEach(t),U5r=r(nDe," \u2014 "),CY=n(nDe,"A",{href:!0});var JRt=s(CY);J5r=r(JRt,"TFElectraForMaskedLM"),JRt.forEach(t),Y5r=r(nDe," (ELECTRA model)"),nDe.forEach(t),K5r=i(me),wM=n(me,"LI",{});var sDe=s(wM);G8e=n(sDe,"STRONG",{});var YRt=s(G8e);Z5r=r(YRt,"flaubert"),YRt.forEach(t),ewr=r(sDe," \u2014 "),wY=n(sDe,"A",{href:!0});var KRt=s(wY);owr=r(KRt,"TFFlaubertWithLMHeadModel"),KRt.forEach(t),rwr=r(sDe," (FlauBERT model)"),sDe.forEach(t),twr=i(me),AM=n(me,"LI",{});var lDe=s(AM);O8e=n(lDe,"STRONG",{});var ZRt=s(O8e);awr=r(ZRt,"funnel"),ZRt.forEach(t),nwr=r(lDe," \u2014 "),AY=n(lDe,"A",{href:!0});var ePt=s(AY);swr=r(ePt,"TFFunnelForMaskedLM"),ePt.forEach(t),lwr=r(lDe," (Funnel Transformer model)"),lDe.forEach(t),iwr=i(me),LM=n(me,"LI",{});var iDe=s(LM);V8e=n(iDe,"STRONG",{});var oPt=s(V8e);dwr=r(oPt,"layoutlm"),oPt.forEach(t),cwr=r(iDe," \u2014 "),LY=n(iDe,"A",{href:!0});var rPt=s(LY);fwr=r(rPt,"TFLayoutLMForMaskedLM"),rPt.forEach(t),mwr=r(iDe," (LayoutLM model)"),iDe.forEach(t),gwr=i(me),yM=n(me,"LI",{});var dDe=s(yM);X8e=n(dDe,"STRONG",{});var tPt=s(X8e);hwr=r(tPt,"longformer"),tPt.forEach(t),pwr=r(dDe," \u2014 "),yY=n(dDe,"A",{href:!0});var aPt=s(yY);_wr=r(aPt,"TFLongformerForMaskedLM"),aPt.forEach(t),uwr=r(dDe," (Longformer model)"),dDe.forEach(t),bwr=i(me),xM=n(me,"LI",{});var cDe=s(xM);z8e=n(cDe,"STRONG",{});var nPt=s(z8e);vwr=r(nPt,"mobilebert"),nPt.forEach(t),Fwr=r(cDe," \u2014 "),xY=n(cDe,"A",{href:!0});var sPt=s(xY);Twr=r(sPt,"TFMobileBertForMaskedLM"),sPt.forEach(t),Mwr=r(cDe," (MobileBERT model)"),cDe.forEach(t),Ewr=i(me),$M=n(me,"LI",{});var fDe=s($M);Q8e=n(fDe,"STRONG",{});var lPt=s(Q8e);Cwr=r(lPt,"mpnet"),lPt.forEach(t),wwr=r(fDe," \u2014 "),$Y=n(fDe,"A",{href:!0});var iPt=s($Y);Awr=r(iPt,"TFMPNetForMaskedLM"),iPt.forEach(t),Lwr=r(fDe," (MPNet model)"),fDe.forEach(t),ywr=i(me),kM=n(me,"LI",{});var mDe=s(kM);W8e=n(mDe,"STRONG",{});var dPt=s(W8e);xwr=r(dPt,"rembert"),dPt.forEach(t),$wr=r(mDe," \u2014 "),kY=n(mDe,"A",{href:!0});var cPt=s(kY);kwr=r(cPt,"TFRemBertForMaskedLM"),cPt.forEach(t),Swr=r(mDe," (RemBERT model)"),mDe.forEach(t),Rwr=i(me),SM=n(me,"LI",{});var gDe=s(SM);H8e=n(gDe,"STRONG",{});var fPt=s(H8e);Pwr=r(fPt,"roberta"),fPt.forEach(t),Bwr=r(gDe," \u2014 "),SY=n(gDe,"A",{href:!0});var mPt=s(SY);Nwr=r(mPt,"TFRobertaForMaskedLM"),mPt.forEach(t),Iwr=r(gDe," (RoBERTa model)"),gDe.forEach(t),qwr=i(me),RM=n(me,"LI",{});var hDe=s(RM);U8e=n(hDe,"STRONG",{});var gPt=s(U8e);jwr=r(gPt,"roformer"),gPt.forEach(t),Dwr=r(hDe," \u2014 "),RY=n(hDe,"A",{href:!0});var hPt=s(RY);Gwr=r(hPt,"TFRoFormerForMaskedLM"),hPt.forEach(t),Owr=r(hDe," (RoFormer model)"),hDe.forEach(t),Vwr=i(me),PM=n(me,"LI",{});var pDe=s(PM);J8e=n(pDe,"STRONG",{});var pPt=s(J8e);Xwr=r(pPt,"tapas"),pPt.forEach(t),zwr=r(pDe," \u2014 "),PY=n(pDe,"A",{href:!0});var _Pt=s(PY);Qwr=r(_Pt,"TFTapasForMaskedLM"),_Pt.forEach(t),Wwr=r(pDe," (TAPAS model)"),pDe.forEach(t),Hwr=i(me),BM=n(me,"LI",{});var _De=s(BM);Y8e=n(_De,"STRONG",{});var uPt=s(Y8e);Uwr=r(uPt,"xlm"),uPt.forEach(t),Jwr=r(_De," \u2014 "),BY=n(_De,"A",{href:!0});var bPt=s(BY);Ywr=r(bPt,"TFXLMWithLMHeadModel"),bPt.forEach(t),Kwr=r(_De," (XLM model)"),_De.forEach(t),Zwr=i(me),NM=n(me,"LI",{});var uDe=s(NM);K8e=n(uDe,"STRONG",{});var vPt=s(K8e);eAr=r(vPt,"xlm-roberta"),vPt.forEach(t),oAr=r(uDe," \u2014 "),NY=n(uDe,"A",{href:!0});var FPt=s(NY);rAr=r(FPt,"TFXLMRobertaForMaskedLM"),FPt.forEach(t),tAr=r(uDe," (XLM-RoBERTa model)"),uDe.forEach(t),me.forEach(t),aAr=i(jl),T(IM.$$.fragment,jl),jl.forEach(t),ql.forEach(t),Lze=i(f),Mc=n(f,"H2",{class:!0});var BWe=s(Mc);qM=n(BWe,"A",{id:!0,class:!0,href:!0});var TPt=s(qM);Z8e=n(TPt,"SPAN",{});var MPt=s(Z8e);T(bx.$$.fragment,MPt),MPt.forEach(t),TPt.forEach(t),nAr=i(BWe),e9e=n(BWe,"SPAN",{});var EPt=s(e9e);sAr=r(EPt,"TFAutoModelForSeq2SeqLM"),EPt.forEach(t),BWe.forEach(t),yze=i(f),sr=n(f,"DIV",{class:!0});var Dl=s(sr);T(vx.$$.fragment,Dl),lAr=i(Dl),Ec=n(Dl,"P",{});var Xte=s(Ec);iAr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IY=n(Xte,"A",{href:!0});var CPt=s(IY);dAr=r(CPt,"from_pretrained()"),CPt.forEach(t),cAr=r(Xte," class method or the "),qY=n(Xte,"A",{href:!0});var wPt=s(qY);fAr=r(wPt,"from_config()"),wPt.forEach(t),mAr=r(Xte,` class
method.`),Xte.forEach(t),gAr=i(Dl),Fx=n(Dl,"P",{});var NWe=s(Fx);hAr=r(NWe,"This class cannot be instantiated directly using "),o9e=n(NWe,"CODE",{});var APt=s(o9e);pAr=r(APt,"__init__()"),APt.forEach(t),_Ar=r(NWe," (throws an error)."),NWe.forEach(t),uAr=i(Dl),qt=n(Dl,"DIV",{class:!0});var pA=s(qt);T(Tx.$$.fragment,pA),bAr=i(pA),r9e=n(pA,"P",{});var LPt=s(r9e);vAr=r(LPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LPt.forEach(t),FAr=i(pA),Cc=n(pA,"P",{});var zte=s(Cc);TAr=r(zte,`Note:
Loading a model from its configuration file does `),t9e=n(zte,"STRONG",{});var yPt=s(t9e);MAr=r(yPt,"not"),yPt.forEach(t),EAr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=n(zte,"A",{href:!0});var xPt=s(jY);CAr=r(xPt,"from_pretrained()"),xPt.forEach(t),wAr=r(zte," to load the model weights."),zte.forEach(t),AAr=i(pA),T(jM.$$.fragment,pA),pA.forEach(t),LAr=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(Mx.$$.fragment,Gl),yAr=i(Gl),a9e=n(Gl,"P",{});var $Pt=s(a9e);xAr=r($Pt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Pt.forEach(t),$Ar=i(Gl),mn=n(Gl,"P",{});var _A=s(mn);kAr=r(_A,"The model class to instantiate is selected based on the "),n9e=n(_A,"CODE",{});var kPt=s(n9e);SAr=r(kPt,"model_type"),kPt.forEach(t),RAr=r(_A,` property of the config object (either
passed as an argument or loaded from `),s9e=n(_A,"CODE",{});var SPt=s(s9e);PAr=r(SPt,"pretrained_model_name_or_path"),SPt.forEach(t),BAr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l9e=n(_A,"CODE",{});var RPt=s(l9e);NAr=r(RPt,"pretrained_model_name_or_path"),RPt.forEach(t),IAr=r(_A,":"),_A.forEach(t),qAr=i(Gl),ye=n(Gl,"UL",{});var Ne=s(ye);DM=n(Ne,"LI",{});var bDe=s(DM);i9e=n(bDe,"STRONG",{});var PPt=s(i9e);jAr=r(PPt,"bart"),PPt.forEach(t),DAr=r(bDe," \u2014 "),DY=n(bDe,"A",{href:!0});var BPt=s(DY);GAr=r(BPt,"TFBartForConditionalGeneration"),BPt.forEach(t),OAr=r(bDe," (BART model)"),bDe.forEach(t),VAr=i(Ne),GM=n(Ne,"LI",{});var vDe=s(GM);d9e=n(vDe,"STRONG",{});var NPt=s(d9e);XAr=r(NPt,"blenderbot"),NPt.forEach(t),zAr=r(vDe," \u2014 "),GY=n(vDe,"A",{href:!0});var IPt=s(GY);QAr=r(IPt,"TFBlenderbotForConditionalGeneration"),IPt.forEach(t),WAr=r(vDe," (Blenderbot model)"),vDe.forEach(t),HAr=i(Ne),OM=n(Ne,"LI",{});var FDe=s(OM);c9e=n(FDe,"STRONG",{});var qPt=s(c9e);UAr=r(qPt,"blenderbot-small"),qPt.forEach(t),JAr=r(FDe," \u2014 "),OY=n(FDe,"A",{href:!0});var jPt=s(OY);YAr=r(jPt,"TFBlenderbotSmallForConditionalGeneration"),jPt.forEach(t),KAr=r(FDe," (BlenderbotSmall model)"),FDe.forEach(t),ZAr=i(Ne),VM=n(Ne,"LI",{});var TDe=s(VM);f9e=n(TDe,"STRONG",{});var DPt=s(f9e);e6r=r(DPt,"encoder-decoder"),DPt.forEach(t),o6r=r(TDe," \u2014 "),VY=n(TDe,"A",{href:!0});var GPt=s(VY);r6r=r(GPt,"TFEncoderDecoderModel"),GPt.forEach(t),t6r=r(TDe," (Encoder decoder model)"),TDe.forEach(t),a6r=i(Ne),XM=n(Ne,"LI",{});var MDe=s(XM);m9e=n(MDe,"STRONG",{});var OPt=s(m9e);n6r=r(OPt,"led"),OPt.forEach(t),s6r=r(MDe," \u2014 "),XY=n(MDe,"A",{href:!0});var VPt=s(XY);l6r=r(VPt,"TFLEDForConditionalGeneration"),VPt.forEach(t),i6r=r(MDe," (LED model)"),MDe.forEach(t),d6r=i(Ne),zM=n(Ne,"LI",{});var EDe=s(zM);g9e=n(EDe,"STRONG",{});var XPt=s(g9e);c6r=r(XPt,"marian"),XPt.forEach(t),f6r=r(EDe," \u2014 "),zY=n(EDe,"A",{href:!0});var zPt=s(zY);m6r=r(zPt,"TFMarianMTModel"),zPt.forEach(t),g6r=r(EDe," (Marian model)"),EDe.forEach(t),h6r=i(Ne),QM=n(Ne,"LI",{});var CDe=s(QM);h9e=n(CDe,"STRONG",{});var QPt=s(h9e);p6r=r(QPt,"mbart"),QPt.forEach(t),_6r=r(CDe," \u2014 "),QY=n(CDe,"A",{href:!0});var WPt=s(QY);u6r=r(WPt,"TFMBartForConditionalGeneration"),WPt.forEach(t),b6r=r(CDe," (mBART model)"),CDe.forEach(t),v6r=i(Ne),WM=n(Ne,"LI",{});var wDe=s(WM);p9e=n(wDe,"STRONG",{});var HPt=s(p9e);F6r=r(HPt,"mt5"),HPt.forEach(t),T6r=r(wDe," \u2014 "),WY=n(wDe,"A",{href:!0});var UPt=s(WY);M6r=r(UPt,"TFMT5ForConditionalGeneration"),UPt.forEach(t),E6r=r(wDe," (MT5 model)"),wDe.forEach(t),C6r=i(Ne),HM=n(Ne,"LI",{});var ADe=s(HM);_9e=n(ADe,"STRONG",{});var JPt=s(_9e);w6r=r(JPt,"pegasus"),JPt.forEach(t),A6r=r(ADe," \u2014 "),HY=n(ADe,"A",{href:!0});var YPt=s(HY);L6r=r(YPt,"TFPegasusForConditionalGeneration"),YPt.forEach(t),y6r=r(ADe," (Pegasus model)"),ADe.forEach(t),x6r=i(Ne),UM=n(Ne,"LI",{});var LDe=s(UM);u9e=n(LDe,"STRONG",{});var KPt=s(u9e);$6r=r(KPt,"t5"),KPt.forEach(t),k6r=r(LDe," \u2014 "),UY=n(LDe,"A",{href:!0});var ZPt=s(UY);S6r=r(ZPt,"TFT5ForConditionalGeneration"),ZPt.forEach(t),R6r=r(LDe," (T5 model)"),LDe.forEach(t),Ne.forEach(t),P6r=i(Gl),T(JM.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),xze=i(f),wc=n(f,"H2",{class:!0});var IWe=s(wc);YM=n(IWe,"A",{id:!0,class:!0,href:!0});var eBt=s(YM);b9e=n(eBt,"SPAN",{});var oBt=s(b9e);T(Ex.$$.fragment,oBt),oBt.forEach(t),eBt.forEach(t),B6r=i(IWe),v9e=n(IWe,"SPAN",{});var rBt=s(v9e);N6r=r(rBt,"TFAutoModelForSequenceClassification"),rBt.forEach(t),IWe.forEach(t),$ze=i(f),lr=n(f,"DIV",{class:!0});var Ol=s(lr);T(Cx.$$.fragment,Ol),I6r=i(Ol),Ac=n(Ol,"P",{});var Qte=s(Ac);q6r=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JY=n(Qte,"A",{href:!0});var tBt=s(JY);j6r=r(tBt,"from_pretrained()"),tBt.forEach(t),D6r=r(Qte," class method or the "),YY=n(Qte,"A",{href:!0});var aBt=s(YY);G6r=r(aBt,"from_config()"),aBt.forEach(t),O6r=r(Qte,` class
method.`),Qte.forEach(t),V6r=i(Ol),wx=n(Ol,"P",{});var qWe=s(wx);X6r=r(qWe,"This class cannot be instantiated directly using "),F9e=n(qWe,"CODE",{});var nBt=s(F9e);z6r=r(nBt,"__init__()"),nBt.forEach(t),Q6r=r(qWe," (throws an error)."),qWe.forEach(t),W6r=i(Ol),jt=n(Ol,"DIV",{class:!0});var uA=s(jt);T(Ax.$$.fragment,uA),H6r=i(uA),T9e=n(uA,"P",{});var sBt=s(T9e);U6r=r(sBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sBt.forEach(t),J6r=i(uA),Lc=n(uA,"P",{});var Wte=s(Lc);Y6r=r(Wte,`Note:
Loading a model from its configuration file does `),M9e=n(Wte,"STRONG",{});var lBt=s(M9e);K6r=r(lBt,"not"),lBt.forEach(t),Z6r=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=n(Wte,"A",{href:!0});var iBt=s(KY);eLr=r(iBt,"from_pretrained()"),iBt.forEach(t),oLr=r(Wte," to load the model weights."),Wte.forEach(t),rLr=i(uA),T(KM.$$.fragment,uA),uA.forEach(t),tLr=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(Lx.$$.fragment,Vl),aLr=i(Vl),E9e=n(Vl,"P",{});var dBt=s(E9e);nLr=r(dBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dBt.forEach(t),sLr=i(Vl),gn=n(Vl,"P",{});var bA=s(gn);lLr=r(bA,"The model class to instantiate is selected based on the "),C9e=n(bA,"CODE",{});var cBt=s(C9e);iLr=r(cBt,"model_type"),cBt.forEach(t),dLr=r(bA,` property of the config object (either
passed as an argument or loaded from `),w9e=n(bA,"CODE",{});var fBt=s(w9e);cLr=r(fBt,"pretrained_model_name_or_path"),fBt.forEach(t),fLr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A9e=n(bA,"CODE",{});var mBt=s(A9e);mLr=r(mBt,"pretrained_model_name_or_path"),mBt.forEach(t),gLr=r(bA,":"),bA.forEach(t),hLr=i(Vl),te=n(Vl,"UL",{});var ne=s(te);ZM=n(ne,"LI",{});var yDe=s(ZM);L9e=n(yDe,"STRONG",{});var gBt=s(L9e);pLr=r(gBt,"albert"),gBt.forEach(t),_Lr=r(yDe," \u2014 "),ZY=n(yDe,"A",{href:!0});var hBt=s(ZY);uLr=r(hBt,"TFAlbertForSequenceClassification"),hBt.forEach(t),bLr=r(yDe," (ALBERT model)"),yDe.forEach(t),vLr=i(ne),e4=n(ne,"LI",{});var xDe=s(e4);y9e=n(xDe,"STRONG",{});var pBt=s(y9e);FLr=r(pBt,"bert"),pBt.forEach(t),TLr=r(xDe," \u2014 "),eK=n(xDe,"A",{href:!0});var _Bt=s(eK);MLr=r(_Bt,"TFBertForSequenceClassification"),_Bt.forEach(t),ELr=r(xDe," (BERT model)"),xDe.forEach(t),CLr=i(ne),o4=n(ne,"LI",{});var $De=s(o4);x9e=n($De,"STRONG",{});var uBt=s(x9e);wLr=r(uBt,"camembert"),uBt.forEach(t),ALr=r($De," \u2014 "),oK=n($De,"A",{href:!0});var bBt=s(oK);LLr=r(bBt,"TFCamembertForSequenceClassification"),bBt.forEach(t),yLr=r($De," (CamemBERT model)"),$De.forEach(t),xLr=i(ne),r4=n(ne,"LI",{});var kDe=s(r4);$9e=n(kDe,"STRONG",{});var vBt=s($9e);$Lr=r(vBt,"convbert"),vBt.forEach(t),kLr=r(kDe," \u2014 "),rK=n(kDe,"A",{href:!0});var FBt=s(rK);SLr=r(FBt,"TFConvBertForSequenceClassification"),FBt.forEach(t),RLr=r(kDe," (ConvBERT model)"),kDe.forEach(t),PLr=i(ne),t4=n(ne,"LI",{});var SDe=s(t4);k9e=n(SDe,"STRONG",{});var TBt=s(k9e);BLr=r(TBt,"ctrl"),TBt.forEach(t),NLr=r(SDe," \u2014 "),tK=n(SDe,"A",{href:!0});var MBt=s(tK);ILr=r(MBt,"TFCTRLForSequenceClassification"),MBt.forEach(t),qLr=r(SDe," (CTRL model)"),SDe.forEach(t),jLr=i(ne),a4=n(ne,"LI",{});var RDe=s(a4);S9e=n(RDe,"STRONG",{});var EBt=s(S9e);DLr=r(EBt,"deberta"),EBt.forEach(t),GLr=r(RDe," \u2014 "),aK=n(RDe,"A",{href:!0});var CBt=s(aK);OLr=r(CBt,"TFDebertaForSequenceClassification"),CBt.forEach(t),VLr=r(RDe," (DeBERTa model)"),RDe.forEach(t),XLr=i(ne),n4=n(ne,"LI",{});var PDe=s(n4);R9e=n(PDe,"STRONG",{});var wBt=s(R9e);zLr=r(wBt,"deberta-v2"),wBt.forEach(t),QLr=r(PDe," \u2014 "),nK=n(PDe,"A",{href:!0});var ABt=s(nK);WLr=r(ABt,"TFDebertaV2ForSequenceClassification"),ABt.forEach(t),HLr=r(PDe," (DeBERTa-v2 model)"),PDe.forEach(t),ULr=i(ne),s4=n(ne,"LI",{});var BDe=s(s4);P9e=n(BDe,"STRONG",{});var LBt=s(P9e);JLr=r(LBt,"distilbert"),LBt.forEach(t),YLr=r(BDe," \u2014 "),sK=n(BDe,"A",{href:!0});var yBt=s(sK);KLr=r(yBt,"TFDistilBertForSequenceClassification"),yBt.forEach(t),ZLr=r(BDe," (DistilBERT model)"),BDe.forEach(t),eyr=i(ne),l4=n(ne,"LI",{});var NDe=s(l4);B9e=n(NDe,"STRONG",{});var xBt=s(B9e);oyr=r(xBt,"electra"),xBt.forEach(t),ryr=r(NDe," \u2014 "),lK=n(NDe,"A",{href:!0});var $Bt=s(lK);tyr=r($Bt,"TFElectraForSequenceClassification"),$Bt.forEach(t),ayr=r(NDe," (ELECTRA model)"),NDe.forEach(t),nyr=i(ne),i4=n(ne,"LI",{});var IDe=s(i4);N9e=n(IDe,"STRONG",{});var kBt=s(N9e);syr=r(kBt,"flaubert"),kBt.forEach(t),lyr=r(IDe," \u2014 "),iK=n(IDe,"A",{href:!0});var SBt=s(iK);iyr=r(SBt,"TFFlaubertForSequenceClassification"),SBt.forEach(t),dyr=r(IDe," (FlauBERT model)"),IDe.forEach(t),cyr=i(ne),d4=n(ne,"LI",{});var qDe=s(d4);I9e=n(qDe,"STRONG",{});var RBt=s(I9e);fyr=r(RBt,"funnel"),RBt.forEach(t),myr=r(qDe," \u2014 "),dK=n(qDe,"A",{href:!0});var PBt=s(dK);gyr=r(PBt,"TFFunnelForSequenceClassification"),PBt.forEach(t),hyr=r(qDe," (Funnel Transformer model)"),qDe.forEach(t),pyr=i(ne),c4=n(ne,"LI",{});var jDe=s(c4);q9e=n(jDe,"STRONG",{});var BBt=s(q9e);_yr=r(BBt,"gpt2"),BBt.forEach(t),uyr=r(jDe," \u2014 "),cK=n(jDe,"A",{href:!0});var NBt=s(cK);byr=r(NBt,"TFGPT2ForSequenceClassification"),NBt.forEach(t),vyr=r(jDe," (OpenAI GPT-2 model)"),jDe.forEach(t),Fyr=i(ne),f4=n(ne,"LI",{});var DDe=s(f4);j9e=n(DDe,"STRONG",{});var IBt=s(j9e);Tyr=r(IBt,"gptj"),IBt.forEach(t),Myr=r(DDe," \u2014 "),fK=n(DDe,"A",{href:!0});var qBt=s(fK);Eyr=r(qBt,"TFGPTJForSequenceClassification"),qBt.forEach(t),Cyr=r(DDe," (GPT-J model)"),DDe.forEach(t),wyr=i(ne),m4=n(ne,"LI",{});var GDe=s(m4);D9e=n(GDe,"STRONG",{});var jBt=s(D9e);Ayr=r(jBt,"layoutlm"),jBt.forEach(t),Lyr=r(GDe," \u2014 "),mK=n(GDe,"A",{href:!0});var DBt=s(mK);yyr=r(DBt,"TFLayoutLMForSequenceClassification"),DBt.forEach(t),xyr=r(GDe," (LayoutLM model)"),GDe.forEach(t),$yr=i(ne),g4=n(ne,"LI",{});var ODe=s(g4);G9e=n(ODe,"STRONG",{});var GBt=s(G9e);kyr=r(GBt,"longformer"),GBt.forEach(t),Syr=r(ODe," \u2014 "),gK=n(ODe,"A",{href:!0});var OBt=s(gK);Ryr=r(OBt,"TFLongformerForSequenceClassification"),OBt.forEach(t),Pyr=r(ODe," (Longformer model)"),ODe.forEach(t),Byr=i(ne),h4=n(ne,"LI",{});var VDe=s(h4);O9e=n(VDe,"STRONG",{});var VBt=s(O9e);Nyr=r(VBt,"mobilebert"),VBt.forEach(t),Iyr=r(VDe," \u2014 "),hK=n(VDe,"A",{href:!0});var XBt=s(hK);qyr=r(XBt,"TFMobileBertForSequenceClassification"),XBt.forEach(t),jyr=r(VDe," (MobileBERT model)"),VDe.forEach(t),Dyr=i(ne),p4=n(ne,"LI",{});var XDe=s(p4);V9e=n(XDe,"STRONG",{});var zBt=s(V9e);Gyr=r(zBt,"mpnet"),zBt.forEach(t),Oyr=r(XDe," \u2014 "),pK=n(XDe,"A",{href:!0});var QBt=s(pK);Vyr=r(QBt,"TFMPNetForSequenceClassification"),QBt.forEach(t),Xyr=r(XDe," (MPNet model)"),XDe.forEach(t),zyr=i(ne),_4=n(ne,"LI",{});var zDe=s(_4);X9e=n(zDe,"STRONG",{});var WBt=s(X9e);Qyr=r(WBt,"openai-gpt"),WBt.forEach(t),Wyr=r(zDe," \u2014 "),_K=n(zDe,"A",{href:!0});var HBt=s(_K);Hyr=r(HBt,"TFOpenAIGPTForSequenceClassification"),HBt.forEach(t),Uyr=r(zDe," (OpenAI GPT model)"),zDe.forEach(t),Jyr=i(ne),u4=n(ne,"LI",{});var QDe=s(u4);z9e=n(QDe,"STRONG",{});var UBt=s(z9e);Yyr=r(UBt,"rembert"),UBt.forEach(t),Kyr=r(QDe," \u2014 "),uK=n(QDe,"A",{href:!0});var JBt=s(uK);Zyr=r(JBt,"TFRemBertForSequenceClassification"),JBt.forEach(t),exr=r(QDe," (RemBERT model)"),QDe.forEach(t),oxr=i(ne),b4=n(ne,"LI",{});var WDe=s(b4);Q9e=n(WDe,"STRONG",{});var YBt=s(Q9e);rxr=r(YBt,"roberta"),YBt.forEach(t),txr=r(WDe," \u2014 "),bK=n(WDe,"A",{href:!0});var KBt=s(bK);axr=r(KBt,"TFRobertaForSequenceClassification"),KBt.forEach(t),nxr=r(WDe," (RoBERTa model)"),WDe.forEach(t),sxr=i(ne),v4=n(ne,"LI",{});var HDe=s(v4);W9e=n(HDe,"STRONG",{});var ZBt=s(W9e);lxr=r(ZBt,"roformer"),ZBt.forEach(t),ixr=r(HDe," \u2014 "),vK=n(HDe,"A",{href:!0});var eNt=s(vK);dxr=r(eNt,"TFRoFormerForSequenceClassification"),eNt.forEach(t),cxr=r(HDe," (RoFormer model)"),HDe.forEach(t),fxr=i(ne),F4=n(ne,"LI",{});var UDe=s(F4);H9e=n(UDe,"STRONG",{});var oNt=s(H9e);mxr=r(oNt,"tapas"),oNt.forEach(t),gxr=r(UDe," \u2014 "),FK=n(UDe,"A",{href:!0});var rNt=s(FK);hxr=r(rNt,"TFTapasForSequenceClassification"),rNt.forEach(t),pxr=r(UDe," (TAPAS model)"),UDe.forEach(t),_xr=i(ne),T4=n(ne,"LI",{});var JDe=s(T4);U9e=n(JDe,"STRONG",{});var tNt=s(U9e);uxr=r(tNt,"transfo-xl"),tNt.forEach(t),bxr=r(JDe," \u2014 "),TK=n(JDe,"A",{href:!0});var aNt=s(TK);vxr=r(aNt,"TFTransfoXLForSequenceClassification"),aNt.forEach(t),Fxr=r(JDe," (Transformer-XL model)"),JDe.forEach(t),Txr=i(ne),M4=n(ne,"LI",{});var YDe=s(M4);J9e=n(YDe,"STRONG",{});var nNt=s(J9e);Mxr=r(nNt,"xlm"),nNt.forEach(t),Exr=r(YDe," \u2014 "),MK=n(YDe,"A",{href:!0});var sNt=s(MK);Cxr=r(sNt,"TFXLMForSequenceClassification"),sNt.forEach(t),wxr=r(YDe," (XLM model)"),YDe.forEach(t),Axr=i(ne),E4=n(ne,"LI",{});var KDe=s(E4);Y9e=n(KDe,"STRONG",{});var lNt=s(Y9e);Lxr=r(lNt,"xlm-roberta"),lNt.forEach(t),yxr=r(KDe," \u2014 "),EK=n(KDe,"A",{href:!0});var iNt=s(EK);xxr=r(iNt,"TFXLMRobertaForSequenceClassification"),iNt.forEach(t),$xr=r(KDe," (XLM-RoBERTa model)"),KDe.forEach(t),kxr=i(ne),C4=n(ne,"LI",{});var ZDe=s(C4);K9e=n(ZDe,"STRONG",{});var dNt=s(K9e);Sxr=r(dNt,"xlnet"),dNt.forEach(t),Rxr=r(ZDe," \u2014 "),CK=n(ZDe,"A",{href:!0});var cNt=s(CK);Pxr=r(cNt,"TFXLNetForSequenceClassification"),cNt.forEach(t),Bxr=r(ZDe," (XLNet model)"),ZDe.forEach(t),ne.forEach(t),Nxr=i(Vl),T(w4.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),kze=i(f),yc=n(f,"H2",{class:!0});var jWe=s(yc);A4=n(jWe,"A",{id:!0,class:!0,href:!0});var fNt=s(A4);Z9e=n(fNt,"SPAN",{});var mNt=s(Z9e);T(yx.$$.fragment,mNt),mNt.forEach(t),fNt.forEach(t),Ixr=i(jWe),eMe=n(jWe,"SPAN",{});var gNt=s(eMe);qxr=r(gNt,"TFAutoModelForMultipleChoice"),gNt.forEach(t),jWe.forEach(t),Sze=i(f),ir=n(f,"DIV",{class:!0});var Xl=s(ir);T(xx.$$.fragment,Xl),jxr=i(Xl),xc=n(Xl,"P",{});var Hte=s(xc);Dxr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wK=n(Hte,"A",{href:!0});var hNt=s(wK);Gxr=r(hNt,"from_pretrained()"),hNt.forEach(t),Oxr=r(Hte," class method or the "),AK=n(Hte,"A",{href:!0});var pNt=s(AK);Vxr=r(pNt,"from_config()"),pNt.forEach(t),Xxr=r(Hte,` class
method.`),Hte.forEach(t),zxr=i(Xl),$x=n(Xl,"P",{});var DWe=s($x);Qxr=r(DWe,"This class cannot be instantiated directly using "),oMe=n(DWe,"CODE",{});var _Nt=s(oMe);Wxr=r(_Nt,"__init__()"),_Nt.forEach(t),Hxr=r(DWe," (throws an error)."),DWe.forEach(t),Uxr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var vA=s(Dt);T(kx.$$.fragment,vA),Jxr=i(vA),rMe=n(vA,"P",{});var uNt=s(rMe);Yxr=r(uNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uNt.forEach(t),Kxr=i(vA),$c=n(vA,"P",{});var Ute=s($c);Zxr=r(Ute,`Note:
Loading a model from its configuration file does `),tMe=n(Ute,"STRONG",{});var bNt=s(tMe);e$r=r(bNt,"not"),bNt.forEach(t),o$r=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=n(Ute,"A",{href:!0});var vNt=s(LK);r$r=r(vNt,"from_pretrained()"),vNt.forEach(t),t$r=r(Ute," to load the model weights."),Ute.forEach(t),a$r=i(vA),T(L4.$$.fragment,vA),vA.forEach(t),n$r=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Sx.$$.fragment,zl),s$r=i(zl),aMe=n(zl,"P",{});var FNt=s(aMe);l$r=r(FNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FNt.forEach(t),i$r=i(zl),hn=n(zl,"P",{});var FA=s(hn);d$r=r(FA,"The model class to instantiate is selected based on the "),nMe=n(FA,"CODE",{});var TNt=s(nMe);c$r=r(TNt,"model_type"),TNt.forEach(t),f$r=r(FA,` property of the config object (either
passed as an argument or loaded from `),sMe=n(FA,"CODE",{});var MNt=s(sMe);m$r=r(MNt,"pretrained_model_name_or_path"),MNt.forEach(t),g$r=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=n(FA,"CODE",{});var ENt=s(lMe);h$r=r(ENt,"pretrained_model_name_or_path"),ENt.forEach(t),p$r=r(FA,":"),FA.forEach(t),_$r=i(zl),ue=n(zl,"UL",{});var Fe=s(ue);y4=n(Fe,"LI",{});var eGe=s(y4);iMe=n(eGe,"STRONG",{});var CNt=s(iMe);u$r=r(CNt,"albert"),CNt.forEach(t),b$r=r(eGe," \u2014 "),yK=n(eGe,"A",{href:!0});var wNt=s(yK);v$r=r(wNt,"TFAlbertForMultipleChoice"),wNt.forEach(t),F$r=r(eGe," (ALBERT model)"),eGe.forEach(t),T$r=i(Fe),x4=n(Fe,"LI",{});var oGe=s(x4);dMe=n(oGe,"STRONG",{});var ANt=s(dMe);M$r=r(ANt,"bert"),ANt.forEach(t),E$r=r(oGe," \u2014 "),xK=n(oGe,"A",{href:!0});var LNt=s(xK);C$r=r(LNt,"TFBertForMultipleChoice"),LNt.forEach(t),w$r=r(oGe," (BERT model)"),oGe.forEach(t),A$r=i(Fe),$4=n(Fe,"LI",{});var rGe=s($4);cMe=n(rGe,"STRONG",{});var yNt=s(cMe);L$r=r(yNt,"camembert"),yNt.forEach(t),y$r=r(rGe," \u2014 "),$K=n(rGe,"A",{href:!0});var xNt=s($K);x$r=r(xNt,"TFCamembertForMultipleChoice"),xNt.forEach(t),$$r=r(rGe," (CamemBERT model)"),rGe.forEach(t),k$r=i(Fe),k4=n(Fe,"LI",{});var tGe=s(k4);fMe=n(tGe,"STRONG",{});var $Nt=s(fMe);S$r=r($Nt,"convbert"),$Nt.forEach(t),R$r=r(tGe," \u2014 "),kK=n(tGe,"A",{href:!0});var kNt=s(kK);P$r=r(kNt,"TFConvBertForMultipleChoice"),kNt.forEach(t),B$r=r(tGe," (ConvBERT model)"),tGe.forEach(t),N$r=i(Fe),S4=n(Fe,"LI",{});var aGe=s(S4);mMe=n(aGe,"STRONG",{});var SNt=s(mMe);I$r=r(SNt,"distilbert"),SNt.forEach(t),q$r=r(aGe," \u2014 "),SK=n(aGe,"A",{href:!0});var RNt=s(SK);j$r=r(RNt,"TFDistilBertForMultipleChoice"),RNt.forEach(t),D$r=r(aGe," (DistilBERT model)"),aGe.forEach(t),G$r=i(Fe),R4=n(Fe,"LI",{});var nGe=s(R4);gMe=n(nGe,"STRONG",{});var PNt=s(gMe);O$r=r(PNt,"electra"),PNt.forEach(t),V$r=r(nGe," \u2014 "),RK=n(nGe,"A",{href:!0});var BNt=s(RK);X$r=r(BNt,"TFElectraForMultipleChoice"),BNt.forEach(t),z$r=r(nGe," (ELECTRA model)"),nGe.forEach(t),Q$r=i(Fe),P4=n(Fe,"LI",{});var sGe=s(P4);hMe=n(sGe,"STRONG",{});var NNt=s(hMe);W$r=r(NNt,"flaubert"),NNt.forEach(t),H$r=r(sGe," \u2014 "),PK=n(sGe,"A",{href:!0});var INt=s(PK);U$r=r(INt,"TFFlaubertForMultipleChoice"),INt.forEach(t),J$r=r(sGe," (FlauBERT model)"),sGe.forEach(t),Y$r=i(Fe),B4=n(Fe,"LI",{});var lGe=s(B4);pMe=n(lGe,"STRONG",{});var qNt=s(pMe);K$r=r(qNt,"funnel"),qNt.forEach(t),Z$r=r(lGe," \u2014 "),BK=n(lGe,"A",{href:!0});var jNt=s(BK);ekr=r(jNt,"TFFunnelForMultipleChoice"),jNt.forEach(t),okr=r(lGe," (Funnel Transformer model)"),lGe.forEach(t),rkr=i(Fe),N4=n(Fe,"LI",{});var iGe=s(N4);_Me=n(iGe,"STRONG",{});var DNt=s(_Me);tkr=r(DNt,"longformer"),DNt.forEach(t),akr=r(iGe," \u2014 "),NK=n(iGe,"A",{href:!0});var GNt=s(NK);nkr=r(GNt,"TFLongformerForMultipleChoice"),GNt.forEach(t),skr=r(iGe," (Longformer model)"),iGe.forEach(t),lkr=i(Fe),I4=n(Fe,"LI",{});var dGe=s(I4);uMe=n(dGe,"STRONG",{});var ONt=s(uMe);ikr=r(ONt,"mobilebert"),ONt.forEach(t),dkr=r(dGe," \u2014 "),IK=n(dGe,"A",{href:!0});var VNt=s(IK);ckr=r(VNt,"TFMobileBertForMultipleChoice"),VNt.forEach(t),fkr=r(dGe," (MobileBERT model)"),dGe.forEach(t),mkr=i(Fe),q4=n(Fe,"LI",{});var cGe=s(q4);bMe=n(cGe,"STRONG",{});var XNt=s(bMe);gkr=r(XNt,"mpnet"),XNt.forEach(t),hkr=r(cGe," \u2014 "),qK=n(cGe,"A",{href:!0});var zNt=s(qK);pkr=r(zNt,"TFMPNetForMultipleChoice"),zNt.forEach(t),_kr=r(cGe," (MPNet model)"),cGe.forEach(t),ukr=i(Fe),j4=n(Fe,"LI",{});var fGe=s(j4);vMe=n(fGe,"STRONG",{});var QNt=s(vMe);bkr=r(QNt,"rembert"),QNt.forEach(t),vkr=r(fGe," \u2014 "),jK=n(fGe,"A",{href:!0});var WNt=s(jK);Fkr=r(WNt,"TFRemBertForMultipleChoice"),WNt.forEach(t),Tkr=r(fGe," (RemBERT model)"),fGe.forEach(t),Mkr=i(Fe),D4=n(Fe,"LI",{});var mGe=s(D4);FMe=n(mGe,"STRONG",{});var HNt=s(FMe);Ekr=r(HNt,"roberta"),HNt.forEach(t),Ckr=r(mGe," \u2014 "),DK=n(mGe,"A",{href:!0});var UNt=s(DK);wkr=r(UNt,"TFRobertaForMultipleChoice"),UNt.forEach(t),Akr=r(mGe," (RoBERTa model)"),mGe.forEach(t),Lkr=i(Fe),G4=n(Fe,"LI",{});var gGe=s(G4);TMe=n(gGe,"STRONG",{});var JNt=s(TMe);ykr=r(JNt,"roformer"),JNt.forEach(t),xkr=r(gGe," \u2014 "),GK=n(gGe,"A",{href:!0});var YNt=s(GK);$kr=r(YNt,"TFRoFormerForMultipleChoice"),YNt.forEach(t),kkr=r(gGe," (RoFormer model)"),gGe.forEach(t),Skr=i(Fe),O4=n(Fe,"LI",{});var hGe=s(O4);MMe=n(hGe,"STRONG",{});var KNt=s(MMe);Rkr=r(KNt,"xlm"),KNt.forEach(t),Pkr=r(hGe," \u2014 "),OK=n(hGe,"A",{href:!0});var ZNt=s(OK);Bkr=r(ZNt,"TFXLMForMultipleChoice"),ZNt.forEach(t),Nkr=r(hGe," (XLM model)"),hGe.forEach(t),Ikr=i(Fe),V4=n(Fe,"LI",{});var pGe=s(V4);EMe=n(pGe,"STRONG",{});var eIt=s(EMe);qkr=r(eIt,"xlm-roberta"),eIt.forEach(t),jkr=r(pGe," \u2014 "),VK=n(pGe,"A",{href:!0});var oIt=s(VK);Dkr=r(oIt,"TFXLMRobertaForMultipleChoice"),oIt.forEach(t),Gkr=r(pGe," (XLM-RoBERTa model)"),pGe.forEach(t),Okr=i(Fe),X4=n(Fe,"LI",{});var _Ge=s(X4);CMe=n(_Ge,"STRONG",{});var rIt=s(CMe);Vkr=r(rIt,"xlnet"),rIt.forEach(t),Xkr=r(_Ge," \u2014 "),XK=n(_Ge,"A",{href:!0});var tIt=s(XK);zkr=r(tIt,"TFXLNetForMultipleChoice"),tIt.forEach(t),Qkr=r(_Ge," (XLNet model)"),_Ge.forEach(t),Fe.forEach(t),Wkr=i(zl),T(z4.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Rze=i(f),kc=n(f,"H2",{class:!0});var GWe=s(kc);Q4=n(GWe,"A",{id:!0,class:!0,href:!0});var aIt=s(Q4);wMe=n(aIt,"SPAN",{});var nIt=s(wMe);T(Rx.$$.fragment,nIt),nIt.forEach(t),aIt.forEach(t),Hkr=i(GWe),AMe=n(GWe,"SPAN",{});var sIt=s(AMe);Ukr=r(sIt,"TFAutoModelForNextSentencePrediction"),sIt.forEach(t),GWe.forEach(t),Pze=i(f),dr=n(f,"DIV",{class:!0});var Ql=s(dr);T(Px.$$.fragment,Ql),Jkr=i(Ql),Sc=n(Ql,"P",{});var Jte=s(Sc);Ykr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zK=n(Jte,"A",{href:!0});var lIt=s(zK);Kkr=r(lIt,"from_pretrained()"),lIt.forEach(t),Zkr=r(Jte," class method or the "),QK=n(Jte,"A",{href:!0});var iIt=s(QK);eSr=r(iIt,"from_config()"),iIt.forEach(t),oSr=r(Jte,` class
method.`),Jte.forEach(t),rSr=i(Ql),Bx=n(Ql,"P",{});var OWe=s(Bx);tSr=r(OWe,"This class cannot be instantiated directly using "),LMe=n(OWe,"CODE",{});var dIt=s(LMe);aSr=r(dIt,"__init__()"),dIt.forEach(t),nSr=r(OWe," (throws an error)."),OWe.forEach(t),sSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var TA=s(Gt);T(Nx.$$.fragment,TA),lSr=i(TA),yMe=n(TA,"P",{});var cIt=s(yMe);iSr=r(cIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cIt.forEach(t),dSr=i(TA),Rc=n(TA,"P",{});var Yte=s(Rc);cSr=r(Yte,`Note:
Loading a model from its configuration file does `),xMe=n(Yte,"STRONG",{});var fIt=s(xMe);fSr=r(fIt,"not"),fIt.forEach(t),mSr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(Yte,"A",{href:!0});var mIt=s(WK);gSr=r(mIt,"from_pretrained()"),mIt.forEach(t),hSr=r(Yte," to load the model weights."),Yte.forEach(t),pSr=i(TA),T(W4.$$.fragment,TA),TA.forEach(t),_Sr=i(Ql),Ir=n(Ql,"DIV",{class:!0});var Wl=s(Ir);T(Ix.$$.fragment,Wl),uSr=i(Wl),$Me=n(Wl,"P",{});var gIt=s($Me);bSr=r(gIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gIt.forEach(t),vSr=i(Wl),pn=n(Wl,"P",{});var MA=s(pn);FSr=r(MA,"The model class to instantiate is selected based on the "),kMe=n(MA,"CODE",{});var hIt=s(kMe);TSr=r(hIt,"model_type"),hIt.forEach(t),MSr=r(MA,` property of the config object (either
passed as an argument or loaded from `),SMe=n(MA,"CODE",{});var pIt=s(SMe);ESr=r(pIt,"pretrained_model_name_or_path"),pIt.forEach(t),CSr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RMe=n(MA,"CODE",{});var _It=s(RMe);wSr=r(_It,"pretrained_model_name_or_path"),_It.forEach(t),ASr=r(MA,":"),MA.forEach(t),LSr=i(Wl),qx=n(Wl,"UL",{});var VWe=s(qx);H4=n(VWe,"LI",{});var uGe=s(H4);PMe=n(uGe,"STRONG",{});var uIt=s(PMe);ySr=r(uIt,"bert"),uIt.forEach(t),xSr=r(uGe," \u2014 "),HK=n(uGe,"A",{href:!0});var bIt=s(HK);$Sr=r(bIt,"TFBertForNextSentencePrediction"),bIt.forEach(t),kSr=r(uGe," (BERT model)"),uGe.forEach(t),SSr=i(VWe),U4=n(VWe,"LI",{});var bGe=s(U4);BMe=n(bGe,"STRONG",{});var vIt=s(BMe);RSr=r(vIt,"mobilebert"),vIt.forEach(t),PSr=r(bGe," \u2014 "),UK=n(bGe,"A",{href:!0});var FIt=s(UK);BSr=r(FIt,"TFMobileBertForNextSentencePrediction"),FIt.forEach(t),NSr=r(bGe," (MobileBERT model)"),bGe.forEach(t),VWe.forEach(t),ISr=i(Wl),T(J4.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Bze=i(f),Pc=n(f,"H2",{class:!0});var XWe=s(Pc);Y4=n(XWe,"A",{id:!0,class:!0,href:!0});var TIt=s(Y4);NMe=n(TIt,"SPAN",{});var MIt=s(NMe);T(jx.$$.fragment,MIt),MIt.forEach(t),TIt.forEach(t),qSr=i(XWe),IMe=n(XWe,"SPAN",{});var EIt=s(IMe);jSr=r(EIt,"TFAutoModelForTableQuestionAnswering"),EIt.forEach(t),XWe.forEach(t),Nze=i(f),cr=n(f,"DIV",{class:!0});var Hl=s(cr);T(Dx.$$.fragment,Hl),DSr=i(Hl),Bc=n(Hl,"P",{});var Kte=s(Bc);GSr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),JK=n(Kte,"A",{href:!0});var CIt=s(JK);OSr=r(CIt,"from_pretrained()"),CIt.forEach(t),VSr=r(Kte," class method or the "),YK=n(Kte,"A",{href:!0});var wIt=s(YK);XSr=r(wIt,"from_config()"),wIt.forEach(t),zSr=r(Kte,` class
method.`),Kte.forEach(t),QSr=i(Hl),Gx=n(Hl,"P",{});var zWe=s(Gx);WSr=r(zWe,"This class cannot be instantiated directly using "),qMe=n(zWe,"CODE",{});var AIt=s(qMe);HSr=r(AIt,"__init__()"),AIt.forEach(t),USr=r(zWe," (throws an error)."),zWe.forEach(t),JSr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var EA=s(Ot);T(Ox.$$.fragment,EA),YSr=i(EA),jMe=n(EA,"P",{});var LIt=s(jMe);KSr=r(LIt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),LIt.forEach(t),ZSr=i(EA),Nc=n(EA,"P",{});var Zte=s(Nc);eRr=r(Zte,`Note:
Loading a model from its configuration file does `),DMe=n(Zte,"STRONG",{});var yIt=s(DMe);oRr=r(yIt,"not"),yIt.forEach(t),rRr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=n(Zte,"A",{href:!0});var xIt=s(KK);tRr=r(xIt,"from_pretrained()"),xIt.forEach(t),aRr=r(Zte," to load the model weights."),Zte.forEach(t),nRr=i(EA),T(K4.$$.fragment,EA),EA.forEach(t),sRr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(Vx.$$.fragment,Ul),lRr=i(Ul),GMe=n(Ul,"P",{});var $It=s(GMe);iRr=r($It,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$It.forEach(t),dRr=i(Ul),_n=n(Ul,"P",{});var CA=s(_n);cRr=r(CA,"The model class to instantiate is selected based on the "),OMe=n(CA,"CODE",{});var kIt=s(OMe);fRr=r(kIt,"model_type"),kIt.forEach(t),mRr=r(CA,` property of the config object (either
passed as an argument or loaded from `),VMe=n(CA,"CODE",{});var SIt=s(VMe);gRr=r(SIt,"pretrained_model_name_or_path"),SIt.forEach(t),hRr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=n(CA,"CODE",{});var RIt=s(XMe);pRr=r(RIt,"pretrained_model_name_or_path"),RIt.forEach(t),_Rr=r(CA,":"),CA.forEach(t),uRr=i(Ul),zMe=n(Ul,"UL",{});var PIt=s(zMe);Z4=n(PIt,"LI",{});var vGe=s(Z4);QMe=n(vGe,"STRONG",{});var BIt=s(QMe);bRr=r(BIt,"tapas"),BIt.forEach(t),vRr=r(vGe," \u2014 "),ZK=n(vGe,"A",{href:!0});var NIt=s(ZK);FRr=r(NIt,"TFTapasForQuestionAnswering"),NIt.forEach(t),TRr=r(vGe," (TAPAS model)"),vGe.forEach(t),PIt.forEach(t),MRr=i(Ul),T(eE.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Ize=i(f),Ic=n(f,"H2",{class:!0});var QWe=s(Ic);oE=n(QWe,"A",{id:!0,class:!0,href:!0});var IIt=s(oE);WMe=n(IIt,"SPAN",{});var qIt=s(WMe);T(Xx.$$.fragment,qIt),qIt.forEach(t),IIt.forEach(t),ERr=i(QWe),HMe=n(QWe,"SPAN",{});var jIt=s(HMe);CRr=r(jIt,"TFAutoModelForTokenClassification"),jIt.forEach(t),QWe.forEach(t),qze=i(f),fr=n(f,"DIV",{class:!0});var Jl=s(fr);T(zx.$$.fragment,Jl),wRr=i(Jl),qc=n(Jl,"P",{});var eae=s(qc);ARr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eZ=n(eae,"A",{href:!0});var DIt=s(eZ);LRr=r(DIt,"from_pretrained()"),DIt.forEach(t),yRr=r(eae," class method or the "),oZ=n(eae,"A",{href:!0});var GIt=s(oZ);xRr=r(GIt,"from_config()"),GIt.forEach(t),$Rr=r(eae,` class
method.`),eae.forEach(t),kRr=i(Jl),Qx=n(Jl,"P",{});var WWe=s(Qx);SRr=r(WWe,"This class cannot be instantiated directly using "),UMe=n(WWe,"CODE",{});var OIt=s(UMe);RRr=r(OIt,"__init__()"),OIt.forEach(t),PRr=r(WWe," (throws an error)."),WWe.forEach(t),BRr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var wA=s(Vt);T(Wx.$$.fragment,wA),NRr=i(wA),JMe=n(wA,"P",{});var VIt=s(JMe);IRr=r(VIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VIt.forEach(t),qRr=i(wA),jc=n(wA,"P",{});var oae=s(jc);jRr=r(oae,`Note:
Loading a model from its configuration file does `),YMe=n(oae,"STRONG",{});var XIt=s(YMe);DRr=r(XIt,"not"),XIt.forEach(t),GRr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(oae,"A",{href:!0});var zIt=s(rZ);ORr=r(zIt,"from_pretrained()"),zIt.forEach(t),VRr=r(oae," to load the model weights."),oae.forEach(t),XRr=i(wA),T(rE.$$.fragment,wA),wA.forEach(t),zRr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(Hx.$$.fragment,Yl),QRr=i(Yl),KMe=n(Yl,"P",{});var QIt=s(KMe);WRr=r(QIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QIt.forEach(t),HRr=i(Yl),un=n(Yl,"P",{});var AA=s(un);URr=r(AA,"The model class to instantiate is selected based on the "),ZMe=n(AA,"CODE",{});var WIt=s(ZMe);JRr=r(WIt,"model_type"),WIt.forEach(t),YRr=r(AA,` property of the config object (either
passed as an argument or loaded from `),e4e=n(AA,"CODE",{});var HIt=s(e4e);KRr=r(HIt,"pretrained_model_name_or_path"),HIt.forEach(t),ZRr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=n(AA,"CODE",{});var UIt=s(o4e);ePr=r(UIt,"pretrained_model_name_or_path"),UIt.forEach(t),oPr=r(AA,":"),AA.forEach(t),rPr=i(Yl),de=n(Yl,"UL",{});var ge=s(de);tE=n(ge,"LI",{});var FGe=s(tE);r4e=n(FGe,"STRONG",{});var JIt=s(r4e);tPr=r(JIt,"albert"),JIt.forEach(t),aPr=r(FGe," \u2014 "),tZ=n(FGe,"A",{href:!0});var YIt=s(tZ);nPr=r(YIt,"TFAlbertForTokenClassification"),YIt.forEach(t),sPr=r(FGe," (ALBERT model)"),FGe.forEach(t),lPr=i(ge),aE=n(ge,"LI",{});var TGe=s(aE);t4e=n(TGe,"STRONG",{});var KIt=s(t4e);iPr=r(KIt,"bert"),KIt.forEach(t),dPr=r(TGe," \u2014 "),aZ=n(TGe,"A",{href:!0});var ZIt=s(aZ);cPr=r(ZIt,"TFBertForTokenClassification"),ZIt.forEach(t),fPr=r(TGe," (BERT model)"),TGe.forEach(t),mPr=i(ge),nE=n(ge,"LI",{});var MGe=s(nE);a4e=n(MGe,"STRONG",{});var eqt=s(a4e);gPr=r(eqt,"camembert"),eqt.forEach(t),hPr=r(MGe," \u2014 "),nZ=n(MGe,"A",{href:!0});var oqt=s(nZ);pPr=r(oqt,"TFCamembertForTokenClassification"),oqt.forEach(t),_Pr=r(MGe," (CamemBERT model)"),MGe.forEach(t),uPr=i(ge),sE=n(ge,"LI",{});var EGe=s(sE);n4e=n(EGe,"STRONG",{});var rqt=s(n4e);bPr=r(rqt,"convbert"),rqt.forEach(t),vPr=r(EGe," \u2014 "),sZ=n(EGe,"A",{href:!0});var tqt=s(sZ);FPr=r(tqt,"TFConvBertForTokenClassification"),tqt.forEach(t),TPr=r(EGe," (ConvBERT model)"),EGe.forEach(t),MPr=i(ge),lE=n(ge,"LI",{});var CGe=s(lE);s4e=n(CGe,"STRONG",{});var aqt=s(s4e);EPr=r(aqt,"deberta"),aqt.forEach(t),CPr=r(CGe," \u2014 "),lZ=n(CGe,"A",{href:!0});var nqt=s(lZ);wPr=r(nqt,"TFDebertaForTokenClassification"),nqt.forEach(t),APr=r(CGe," (DeBERTa model)"),CGe.forEach(t),LPr=i(ge),iE=n(ge,"LI",{});var wGe=s(iE);l4e=n(wGe,"STRONG",{});var sqt=s(l4e);yPr=r(sqt,"deberta-v2"),sqt.forEach(t),xPr=r(wGe," \u2014 "),iZ=n(wGe,"A",{href:!0});var lqt=s(iZ);$Pr=r(lqt,"TFDebertaV2ForTokenClassification"),lqt.forEach(t),kPr=r(wGe," (DeBERTa-v2 model)"),wGe.forEach(t),SPr=i(ge),dE=n(ge,"LI",{});var AGe=s(dE);i4e=n(AGe,"STRONG",{});var iqt=s(i4e);RPr=r(iqt,"distilbert"),iqt.forEach(t),PPr=r(AGe," \u2014 "),dZ=n(AGe,"A",{href:!0});var dqt=s(dZ);BPr=r(dqt,"TFDistilBertForTokenClassification"),dqt.forEach(t),NPr=r(AGe," (DistilBERT model)"),AGe.forEach(t),IPr=i(ge),cE=n(ge,"LI",{});var LGe=s(cE);d4e=n(LGe,"STRONG",{});var cqt=s(d4e);qPr=r(cqt,"electra"),cqt.forEach(t),jPr=r(LGe," \u2014 "),cZ=n(LGe,"A",{href:!0});var fqt=s(cZ);DPr=r(fqt,"TFElectraForTokenClassification"),fqt.forEach(t),GPr=r(LGe," (ELECTRA model)"),LGe.forEach(t),OPr=i(ge),fE=n(ge,"LI",{});var yGe=s(fE);c4e=n(yGe,"STRONG",{});var mqt=s(c4e);VPr=r(mqt,"flaubert"),mqt.forEach(t),XPr=r(yGe," \u2014 "),fZ=n(yGe,"A",{href:!0});var gqt=s(fZ);zPr=r(gqt,"TFFlaubertForTokenClassification"),gqt.forEach(t),QPr=r(yGe," (FlauBERT model)"),yGe.forEach(t),WPr=i(ge),mE=n(ge,"LI",{});var xGe=s(mE);f4e=n(xGe,"STRONG",{});var hqt=s(f4e);HPr=r(hqt,"funnel"),hqt.forEach(t),UPr=r(xGe," \u2014 "),mZ=n(xGe,"A",{href:!0});var pqt=s(mZ);JPr=r(pqt,"TFFunnelForTokenClassification"),pqt.forEach(t),YPr=r(xGe," (Funnel Transformer model)"),xGe.forEach(t),KPr=i(ge),gE=n(ge,"LI",{});var $Ge=s(gE);m4e=n($Ge,"STRONG",{});var _qt=s(m4e);ZPr=r(_qt,"layoutlm"),_qt.forEach(t),eBr=r($Ge," \u2014 "),gZ=n($Ge,"A",{href:!0});var uqt=s(gZ);oBr=r(uqt,"TFLayoutLMForTokenClassification"),uqt.forEach(t),rBr=r($Ge," (LayoutLM model)"),$Ge.forEach(t),tBr=i(ge),hE=n(ge,"LI",{});var kGe=s(hE);g4e=n(kGe,"STRONG",{});var bqt=s(g4e);aBr=r(bqt,"longformer"),bqt.forEach(t),nBr=r(kGe," \u2014 "),hZ=n(kGe,"A",{href:!0});var vqt=s(hZ);sBr=r(vqt,"TFLongformerForTokenClassification"),vqt.forEach(t),lBr=r(kGe," (Longformer model)"),kGe.forEach(t),iBr=i(ge),pE=n(ge,"LI",{});var SGe=s(pE);h4e=n(SGe,"STRONG",{});var Fqt=s(h4e);dBr=r(Fqt,"mobilebert"),Fqt.forEach(t),cBr=r(SGe," \u2014 "),pZ=n(SGe,"A",{href:!0});var Tqt=s(pZ);fBr=r(Tqt,"TFMobileBertForTokenClassification"),Tqt.forEach(t),mBr=r(SGe," (MobileBERT model)"),SGe.forEach(t),gBr=i(ge),_E=n(ge,"LI",{});var RGe=s(_E);p4e=n(RGe,"STRONG",{});var Mqt=s(p4e);hBr=r(Mqt,"mpnet"),Mqt.forEach(t),pBr=r(RGe," \u2014 "),_Z=n(RGe,"A",{href:!0});var Eqt=s(_Z);_Br=r(Eqt,"TFMPNetForTokenClassification"),Eqt.forEach(t),uBr=r(RGe," (MPNet model)"),RGe.forEach(t),bBr=i(ge),uE=n(ge,"LI",{});var PGe=s(uE);_4e=n(PGe,"STRONG",{});var Cqt=s(_4e);vBr=r(Cqt,"rembert"),Cqt.forEach(t),FBr=r(PGe," \u2014 "),uZ=n(PGe,"A",{href:!0});var wqt=s(uZ);TBr=r(wqt,"TFRemBertForTokenClassification"),wqt.forEach(t),MBr=r(PGe," (RemBERT model)"),PGe.forEach(t),EBr=i(ge),bE=n(ge,"LI",{});var BGe=s(bE);u4e=n(BGe,"STRONG",{});var Aqt=s(u4e);CBr=r(Aqt,"roberta"),Aqt.forEach(t),wBr=r(BGe," \u2014 "),bZ=n(BGe,"A",{href:!0});var Lqt=s(bZ);ABr=r(Lqt,"TFRobertaForTokenClassification"),Lqt.forEach(t),LBr=r(BGe," (RoBERTa model)"),BGe.forEach(t),yBr=i(ge),vE=n(ge,"LI",{});var NGe=s(vE);b4e=n(NGe,"STRONG",{});var yqt=s(b4e);xBr=r(yqt,"roformer"),yqt.forEach(t),$Br=r(NGe," \u2014 "),vZ=n(NGe,"A",{href:!0});var xqt=s(vZ);kBr=r(xqt,"TFRoFormerForTokenClassification"),xqt.forEach(t),SBr=r(NGe," (RoFormer model)"),NGe.forEach(t),RBr=i(ge),FE=n(ge,"LI",{});var IGe=s(FE);v4e=n(IGe,"STRONG",{});var $qt=s(v4e);PBr=r($qt,"xlm"),$qt.forEach(t),BBr=r(IGe," \u2014 "),FZ=n(IGe,"A",{href:!0});var kqt=s(FZ);NBr=r(kqt,"TFXLMForTokenClassification"),kqt.forEach(t),IBr=r(IGe," (XLM model)"),IGe.forEach(t),qBr=i(ge),TE=n(ge,"LI",{});var qGe=s(TE);F4e=n(qGe,"STRONG",{});var Sqt=s(F4e);jBr=r(Sqt,"xlm-roberta"),Sqt.forEach(t),DBr=r(qGe," \u2014 "),TZ=n(qGe,"A",{href:!0});var Rqt=s(TZ);GBr=r(Rqt,"TFXLMRobertaForTokenClassification"),Rqt.forEach(t),OBr=r(qGe," (XLM-RoBERTa model)"),qGe.forEach(t),VBr=i(ge),ME=n(ge,"LI",{});var jGe=s(ME);T4e=n(jGe,"STRONG",{});var Pqt=s(T4e);XBr=r(Pqt,"xlnet"),Pqt.forEach(t),zBr=r(jGe," \u2014 "),MZ=n(jGe,"A",{href:!0});var Bqt=s(MZ);QBr=r(Bqt,"TFXLNetForTokenClassification"),Bqt.forEach(t),WBr=r(jGe," (XLNet model)"),jGe.forEach(t),ge.forEach(t),HBr=i(Yl),T(EE.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),jze=i(f),Dc=n(f,"H2",{class:!0});var HWe=s(Dc);CE=n(HWe,"A",{id:!0,class:!0,href:!0});var Nqt=s(CE);M4e=n(Nqt,"SPAN",{});var Iqt=s(M4e);T(Ux.$$.fragment,Iqt),Iqt.forEach(t),Nqt.forEach(t),UBr=i(HWe),E4e=n(HWe,"SPAN",{});var qqt=s(E4e);JBr=r(qqt,"TFAutoModelForQuestionAnswering"),qqt.forEach(t),HWe.forEach(t),Dze=i(f),mr=n(f,"DIV",{class:!0});var Kl=s(mr);T(Jx.$$.fragment,Kl),YBr=i(Kl),Gc=n(Kl,"P",{});var rae=s(Gc);KBr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EZ=n(rae,"A",{href:!0});var jqt=s(EZ);ZBr=r(jqt,"from_pretrained()"),jqt.forEach(t),eNr=r(rae," class method or the "),CZ=n(rae,"A",{href:!0});var Dqt=s(CZ);oNr=r(Dqt,"from_config()"),Dqt.forEach(t),rNr=r(rae,` class
method.`),rae.forEach(t),tNr=i(Kl),Yx=n(Kl,"P",{});var UWe=s(Yx);aNr=r(UWe,"This class cannot be instantiated directly using "),C4e=n(UWe,"CODE",{});var Gqt=s(C4e);nNr=r(Gqt,"__init__()"),Gqt.forEach(t),sNr=r(UWe," (throws an error)."),UWe.forEach(t),lNr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var LA=s(Xt);T(Kx.$$.fragment,LA),iNr=i(LA),w4e=n(LA,"P",{});var Oqt=s(w4e);dNr=r(Oqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Oqt.forEach(t),cNr=i(LA),Oc=n(LA,"P",{});var tae=s(Oc);fNr=r(tae,`Note:
Loading a model from its configuration file does `),A4e=n(tae,"STRONG",{});var Vqt=s(A4e);mNr=r(Vqt,"not"),Vqt.forEach(t),gNr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=n(tae,"A",{href:!0});var Xqt=s(wZ);hNr=r(Xqt,"from_pretrained()"),Xqt.forEach(t),pNr=r(tae," to load the model weights."),tae.forEach(t),_Nr=i(LA),T(wE.$$.fragment,LA),LA.forEach(t),uNr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(Zx.$$.fragment,Zl),bNr=i(Zl),L4e=n(Zl,"P",{});var zqt=s(L4e);vNr=r(zqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zqt.forEach(t),FNr=i(Zl),bn=n(Zl,"P",{});var yA=s(bn);TNr=r(yA,"The model class to instantiate is selected based on the "),y4e=n(yA,"CODE",{});var Qqt=s(y4e);MNr=r(Qqt,"model_type"),Qqt.forEach(t),ENr=r(yA,` property of the config object (either
passed as an argument or loaded from `),x4e=n(yA,"CODE",{});var Wqt=s(x4e);CNr=r(Wqt,"pretrained_model_name_or_path"),Wqt.forEach(t),wNr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=n(yA,"CODE",{});var Hqt=s($4e);ANr=r(Hqt,"pretrained_model_name_or_path"),Hqt.forEach(t),LNr=r(yA,":"),yA.forEach(t),yNr=i(Zl),ce=n(Zl,"UL",{});var he=s(ce);AE=n(he,"LI",{});var DGe=s(AE);k4e=n(DGe,"STRONG",{});var Uqt=s(k4e);xNr=r(Uqt,"albert"),Uqt.forEach(t),$Nr=r(DGe," \u2014 "),AZ=n(DGe,"A",{href:!0});var Jqt=s(AZ);kNr=r(Jqt,"TFAlbertForQuestionAnswering"),Jqt.forEach(t),SNr=r(DGe," (ALBERT model)"),DGe.forEach(t),RNr=i(he),LE=n(he,"LI",{});var GGe=s(LE);S4e=n(GGe,"STRONG",{});var Yqt=s(S4e);PNr=r(Yqt,"bert"),Yqt.forEach(t),BNr=r(GGe," \u2014 "),LZ=n(GGe,"A",{href:!0});var Kqt=s(LZ);NNr=r(Kqt,"TFBertForQuestionAnswering"),Kqt.forEach(t),INr=r(GGe," (BERT model)"),GGe.forEach(t),qNr=i(he),yE=n(he,"LI",{});var OGe=s(yE);R4e=n(OGe,"STRONG",{});var Zqt=s(R4e);jNr=r(Zqt,"camembert"),Zqt.forEach(t),DNr=r(OGe," \u2014 "),yZ=n(OGe,"A",{href:!0});var ejt=s(yZ);GNr=r(ejt,"TFCamembertForQuestionAnswering"),ejt.forEach(t),ONr=r(OGe," (CamemBERT model)"),OGe.forEach(t),VNr=i(he),xE=n(he,"LI",{});var VGe=s(xE);P4e=n(VGe,"STRONG",{});var ojt=s(P4e);XNr=r(ojt,"convbert"),ojt.forEach(t),zNr=r(VGe," \u2014 "),xZ=n(VGe,"A",{href:!0});var rjt=s(xZ);QNr=r(rjt,"TFConvBertForQuestionAnswering"),rjt.forEach(t),WNr=r(VGe," (ConvBERT model)"),VGe.forEach(t),HNr=i(he),$E=n(he,"LI",{});var XGe=s($E);B4e=n(XGe,"STRONG",{});var tjt=s(B4e);UNr=r(tjt,"deberta"),tjt.forEach(t),JNr=r(XGe," \u2014 "),$Z=n(XGe,"A",{href:!0});var ajt=s($Z);YNr=r(ajt,"TFDebertaForQuestionAnswering"),ajt.forEach(t),KNr=r(XGe," (DeBERTa model)"),XGe.forEach(t),ZNr=i(he),kE=n(he,"LI",{});var zGe=s(kE);N4e=n(zGe,"STRONG",{});var njt=s(N4e);eIr=r(njt,"deberta-v2"),njt.forEach(t),oIr=r(zGe," \u2014 "),kZ=n(zGe,"A",{href:!0});var sjt=s(kZ);rIr=r(sjt,"TFDebertaV2ForQuestionAnswering"),sjt.forEach(t),tIr=r(zGe," (DeBERTa-v2 model)"),zGe.forEach(t),aIr=i(he),SE=n(he,"LI",{});var QGe=s(SE);I4e=n(QGe,"STRONG",{});var ljt=s(I4e);nIr=r(ljt,"distilbert"),ljt.forEach(t),sIr=r(QGe," \u2014 "),SZ=n(QGe,"A",{href:!0});var ijt=s(SZ);lIr=r(ijt,"TFDistilBertForQuestionAnswering"),ijt.forEach(t),iIr=r(QGe," (DistilBERT model)"),QGe.forEach(t),dIr=i(he),RE=n(he,"LI",{});var WGe=s(RE);q4e=n(WGe,"STRONG",{});var djt=s(q4e);cIr=r(djt,"electra"),djt.forEach(t),fIr=r(WGe," \u2014 "),RZ=n(WGe,"A",{href:!0});var cjt=s(RZ);mIr=r(cjt,"TFElectraForQuestionAnswering"),cjt.forEach(t),gIr=r(WGe," (ELECTRA model)"),WGe.forEach(t),hIr=i(he),PE=n(he,"LI",{});var HGe=s(PE);j4e=n(HGe,"STRONG",{});var fjt=s(j4e);pIr=r(fjt,"flaubert"),fjt.forEach(t),_Ir=r(HGe," \u2014 "),PZ=n(HGe,"A",{href:!0});var mjt=s(PZ);uIr=r(mjt,"TFFlaubertForQuestionAnsweringSimple"),mjt.forEach(t),bIr=r(HGe," (FlauBERT model)"),HGe.forEach(t),vIr=i(he),BE=n(he,"LI",{});var UGe=s(BE);D4e=n(UGe,"STRONG",{});var gjt=s(D4e);FIr=r(gjt,"funnel"),gjt.forEach(t),TIr=r(UGe," \u2014 "),BZ=n(UGe,"A",{href:!0});var hjt=s(BZ);MIr=r(hjt,"TFFunnelForQuestionAnswering"),hjt.forEach(t),EIr=r(UGe," (Funnel Transformer model)"),UGe.forEach(t),CIr=i(he),NE=n(he,"LI",{});var JGe=s(NE);G4e=n(JGe,"STRONG",{});var pjt=s(G4e);wIr=r(pjt,"gptj"),pjt.forEach(t),AIr=r(JGe," \u2014 "),NZ=n(JGe,"A",{href:!0});var _jt=s(NZ);LIr=r(_jt,"TFGPTJForQuestionAnswering"),_jt.forEach(t),yIr=r(JGe," (GPT-J model)"),JGe.forEach(t),xIr=i(he),IE=n(he,"LI",{});var YGe=s(IE);O4e=n(YGe,"STRONG",{});var ujt=s(O4e);$Ir=r(ujt,"longformer"),ujt.forEach(t),kIr=r(YGe," \u2014 "),IZ=n(YGe,"A",{href:!0});var bjt=s(IZ);SIr=r(bjt,"TFLongformerForQuestionAnswering"),bjt.forEach(t),RIr=r(YGe," (Longformer model)"),YGe.forEach(t),PIr=i(he),qE=n(he,"LI",{});var KGe=s(qE);V4e=n(KGe,"STRONG",{});var vjt=s(V4e);BIr=r(vjt,"mobilebert"),vjt.forEach(t),NIr=r(KGe," \u2014 "),qZ=n(KGe,"A",{href:!0});var Fjt=s(qZ);IIr=r(Fjt,"TFMobileBertForQuestionAnswering"),Fjt.forEach(t),qIr=r(KGe," (MobileBERT model)"),KGe.forEach(t),jIr=i(he),jE=n(he,"LI",{});var ZGe=s(jE);X4e=n(ZGe,"STRONG",{});var Tjt=s(X4e);DIr=r(Tjt,"mpnet"),Tjt.forEach(t),GIr=r(ZGe," \u2014 "),jZ=n(ZGe,"A",{href:!0});var Mjt=s(jZ);OIr=r(Mjt,"TFMPNetForQuestionAnswering"),Mjt.forEach(t),VIr=r(ZGe," (MPNet model)"),ZGe.forEach(t),XIr=i(he),DE=n(he,"LI",{});var eOe=s(DE);z4e=n(eOe,"STRONG",{});var Ejt=s(z4e);zIr=r(Ejt,"rembert"),Ejt.forEach(t),QIr=r(eOe," \u2014 "),DZ=n(eOe,"A",{href:!0});var Cjt=s(DZ);WIr=r(Cjt,"TFRemBertForQuestionAnswering"),Cjt.forEach(t),HIr=r(eOe," (RemBERT model)"),eOe.forEach(t),UIr=i(he),GE=n(he,"LI",{});var oOe=s(GE);Q4e=n(oOe,"STRONG",{});var wjt=s(Q4e);JIr=r(wjt,"roberta"),wjt.forEach(t),YIr=r(oOe," \u2014 "),GZ=n(oOe,"A",{href:!0});var Ajt=s(GZ);KIr=r(Ajt,"TFRobertaForQuestionAnswering"),Ajt.forEach(t),ZIr=r(oOe," (RoBERTa model)"),oOe.forEach(t),eqr=i(he),OE=n(he,"LI",{});var rOe=s(OE);W4e=n(rOe,"STRONG",{});var Ljt=s(W4e);oqr=r(Ljt,"roformer"),Ljt.forEach(t),rqr=r(rOe," \u2014 "),OZ=n(rOe,"A",{href:!0});var yjt=s(OZ);tqr=r(yjt,"TFRoFormerForQuestionAnswering"),yjt.forEach(t),aqr=r(rOe," (RoFormer model)"),rOe.forEach(t),nqr=i(he),VE=n(he,"LI",{});var tOe=s(VE);H4e=n(tOe,"STRONG",{});var xjt=s(H4e);sqr=r(xjt,"xlm"),xjt.forEach(t),lqr=r(tOe," \u2014 "),VZ=n(tOe,"A",{href:!0});var $jt=s(VZ);iqr=r($jt,"TFXLMForQuestionAnsweringSimple"),$jt.forEach(t),dqr=r(tOe," (XLM model)"),tOe.forEach(t),cqr=i(he),XE=n(he,"LI",{});var aOe=s(XE);U4e=n(aOe,"STRONG",{});var kjt=s(U4e);fqr=r(kjt,"xlm-roberta"),kjt.forEach(t),mqr=r(aOe," \u2014 "),XZ=n(aOe,"A",{href:!0});var Sjt=s(XZ);gqr=r(Sjt,"TFXLMRobertaForQuestionAnswering"),Sjt.forEach(t),hqr=r(aOe," (XLM-RoBERTa model)"),aOe.forEach(t),pqr=i(he),zE=n(he,"LI",{});var nOe=s(zE);J4e=n(nOe,"STRONG",{});var Rjt=s(J4e);_qr=r(Rjt,"xlnet"),Rjt.forEach(t),uqr=r(nOe," \u2014 "),zZ=n(nOe,"A",{href:!0});var Pjt=s(zZ);bqr=r(Pjt,"TFXLNetForQuestionAnsweringSimple"),Pjt.forEach(t),vqr=r(nOe," (XLNet model)"),nOe.forEach(t),he.forEach(t),Fqr=i(Zl),T(QE.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Gze=i(f),Vc=n(f,"H2",{class:!0});var JWe=s(Vc);WE=n(JWe,"A",{id:!0,class:!0,href:!0});var Bjt=s(WE);Y4e=n(Bjt,"SPAN",{});var Njt=s(Y4e);T(e$.$$.fragment,Njt),Njt.forEach(t),Bjt.forEach(t),Tqr=i(JWe),K4e=n(JWe,"SPAN",{});var Ijt=s(K4e);Mqr=r(Ijt,"TFAutoModelForVision2Seq"),Ijt.forEach(t),JWe.forEach(t),Oze=i(f),gr=n(f,"DIV",{class:!0});var ei=s(gr);T(o$.$$.fragment,ei),Eqr=i(ei),Xc=n(ei,"P",{});var aae=s(Xc);Cqr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QZ=n(aae,"A",{href:!0});var qjt=s(QZ);wqr=r(qjt,"from_pretrained()"),qjt.forEach(t),Aqr=r(aae," class method or the "),WZ=n(aae,"A",{href:!0});var jjt=s(WZ);Lqr=r(jjt,"from_config()"),jjt.forEach(t),yqr=r(aae,` class
method.`),aae.forEach(t),xqr=i(ei),r$=n(ei,"P",{});var YWe=s(r$);$qr=r(YWe,"This class cannot be instantiated directly using "),Z4e=n(YWe,"CODE",{});var Djt=s(Z4e);kqr=r(Djt,"__init__()"),Djt.forEach(t),Sqr=r(YWe," (throws an error)."),YWe.forEach(t),Rqr=i(ei),zt=n(ei,"DIV",{class:!0});var xA=s(zt);T(t$.$$.fragment,xA),Pqr=i(xA),eEe=n(xA,"P",{});var Gjt=s(eEe);Bqr=r(Gjt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Gjt.forEach(t),Nqr=i(xA),zc=n(xA,"P",{});var nae=s(zc);Iqr=r(nae,`Note:
Loading a model from its configuration file does `),oEe=n(nae,"STRONG",{});var Ojt=s(oEe);qqr=r(Ojt,"not"),Ojt.forEach(t),jqr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=n(nae,"A",{href:!0});var Vjt=s(HZ);Dqr=r(Vjt,"from_pretrained()"),Vjt.forEach(t),Gqr=r(nae," to load the model weights."),nae.forEach(t),Oqr=i(xA),T(HE.$$.fragment,xA),xA.forEach(t),Vqr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(a$.$$.fragment,oi),Xqr=i(oi),rEe=n(oi,"P",{});var Xjt=s(rEe);zqr=r(Xjt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xjt.forEach(t),Qqr=i(oi),vn=n(oi,"P",{});var $A=s(vn);Wqr=r($A,"The model class to instantiate is selected based on the "),tEe=n($A,"CODE",{});var zjt=s(tEe);Hqr=r(zjt,"model_type"),zjt.forEach(t),Uqr=r($A,` property of the config object (either
passed as an argument or loaded from `),aEe=n($A,"CODE",{});var Qjt=s(aEe);Jqr=r(Qjt,"pretrained_model_name_or_path"),Qjt.forEach(t),Yqr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nEe=n($A,"CODE",{});var Wjt=s(nEe);Kqr=r(Wjt,"pretrained_model_name_or_path"),Wjt.forEach(t),Zqr=r($A,":"),$A.forEach(t),ejr=i(oi),sEe=n(oi,"UL",{});var Hjt=s(sEe);UE=n(Hjt,"LI",{});var sOe=s(UE);lEe=n(sOe,"STRONG",{});var Ujt=s(lEe);ojr=r(Ujt,"vision-encoder-decoder"),Ujt.forEach(t),rjr=r(sOe," \u2014 "),UZ=n(sOe,"A",{href:!0});var Jjt=s(UZ);tjr=r(Jjt,"TFVisionEncoderDecoderModel"),Jjt.forEach(t),ajr=r(sOe," (Vision Encoder decoder model)"),sOe.forEach(t),Hjt.forEach(t),njr=i(oi),T(JE.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Vze=i(f),Qc=n(f,"H2",{class:!0});var KWe=s(Qc);YE=n(KWe,"A",{id:!0,class:!0,href:!0});var Yjt=s(YE);iEe=n(Yjt,"SPAN",{});var Kjt=s(iEe);T(n$.$$.fragment,Kjt),Kjt.forEach(t),Yjt.forEach(t),sjr=i(KWe),dEe=n(KWe,"SPAN",{});var Zjt=s(dEe);ljr=r(Zjt,"TFAutoModelForSpeechSeq2Seq"),Zjt.forEach(t),KWe.forEach(t),Xze=i(f),hr=n(f,"DIV",{class:!0});var ri=s(hr);T(s$.$$.fragment,ri),ijr=i(ri),Wc=n(ri,"P",{});var sae=s(Wc);djr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JZ=n(sae,"A",{href:!0});var eDt=s(JZ);cjr=r(eDt,"from_pretrained()"),eDt.forEach(t),fjr=r(sae," class method or the "),YZ=n(sae,"A",{href:!0});var oDt=s(YZ);mjr=r(oDt,"from_config()"),oDt.forEach(t),gjr=r(sae,` class
method.`),sae.forEach(t),hjr=i(ri),l$=n(ri,"P",{});var ZWe=s(l$);pjr=r(ZWe,"This class cannot be instantiated directly using "),cEe=n(ZWe,"CODE",{});var rDt=s(cEe);_jr=r(rDt,"__init__()"),rDt.forEach(t),ujr=r(ZWe," (throws an error)."),ZWe.forEach(t),bjr=i(ri),Qt=n(ri,"DIV",{class:!0});var kA=s(Qt);T(i$.$$.fragment,kA),vjr=i(kA),fEe=n(kA,"P",{});var tDt=s(fEe);Fjr=r(tDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tDt.forEach(t),Tjr=i(kA),Hc=n(kA,"P",{});var lae=s(Hc);Mjr=r(lae,`Note:
Loading a model from its configuration file does `),mEe=n(lae,"STRONG",{});var aDt=s(mEe);Ejr=r(aDt,"not"),aDt.forEach(t),Cjr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=n(lae,"A",{href:!0});var nDt=s(KZ);wjr=r(nDt,"from_pretrained()"),nDt.forEach(t),Ajr=r(lae," to load the model weights."),lae.forEach(t),Ljr=i(kA),T(KE.$$.fragment,kA),kA.forEach(t),yjr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(d$.$$.fragment,ti),xjr=i(ti),gEe=n(ti,"P",{});var sDt=s(gEe);$jr=r(sDt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sDt.forEach(t),kjr=i(ti),Fn=n(ti,"P",{});var SA=s(Fn);Sjr=r(SA,"The model class to instantiate is selected based on the "),hEe=n(SA,"CODE",{});var lDt=s(hEe);Rjr=r(lDt,"model_type"),lDt.forEach(t),Pjr=r(SA,` property of the config object (either
passed as an argument or loaded from `),pEe=n(SA,"CODE",{});var iDt=s(pEe);Bjr=r(iDt,"pretrained_model_name_or_path"),iDt.forEach(t),Njr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ee=n(SA,"CODE",{});var dDt=s(_Ee);Ijr=r(dDt,"pretrained_model_name_or_path"),dDt.forEach(t),qjr=r(SA,":"),SA.forEach(t),jjr=i(ti),uEe=n(ti,"UL",{});var cDt=s(uEe);ZE=n(cDt,"LI",{});var lOe=s(ZE);bEe=n(lOe,"STRONG",{});var fDt=s(bEe);Djr=r(fDt,"speech_to_text"),fDt.forEach(t),Gjr=r(lOe," \u2014 "),ZZ=n(lOe,"A",{href:!0});var mDt=s(ZZ);Ojr=r(mDt,"TFSpeech2TextForConditionalGeneration"),mDt.forEach(t),Vjr=r(lOe," (Speech2Text model)"),lOe.forEach(t),cDt.forEach(t),Xjr=i(ti),T(eC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),zze=i(f),Uc=n(f,"H2",{class:!0});var eHe=s(Uc);oC=n(eHe,"A",{id:!0,class:!0,href:!0});var gDt=s(oC);vEe=n(gDt,"SPAN",{});var hDt=s(vEe);T(c$.$$.fragment,hDt),hDt.forEach(t),gDt.forEach(t),zjr=i(eHe),FEe=n(eHe,"SPAN",{});var pDt=s(FEe);Qjr=r(pDt,"FlaxAutoModel"),pDt.forEach(t),eHe.forEach(t),Qze=i(f),pr=n(f,"DIV",{class:!0});var ai=s(pr);T(f$.$$.fragment,ai),Wjr=i(ai),Jc=n(ai,"P",{});var iae=s(Jc);Hjr=r(iae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eee=n(iae,"A",{href:!0});var _Dt=s(eee);Ujr=r(_Dt,"from_pretrained()"),_Dt.forEach(t),Jjr=r(iae," class method or the "),oee=n(iae,"A",{href:!0});var uDt=s(oee);Yjr=r(uDt,"from_config()"),uDt.forEach(t),Kjr=r(iae,` class
method.`),iae.forEach(t),Zjr=i(ai),m$=n(ai,"P",{});var oHe=s(m$);eDr=r(oHe,"This class cannot be instantiated directly using "),TEe=n(oHe,"CODE",{});var bDt=s(TEe);oDr=r(bDt,"__init__()"),bDt.forEach(t),rDr=r(oHe," (throws an error)."),oHe.forEach(t),tDr=i(ai),Wt=n(ai,"DIV",{class:!0});var RA=s(Wt);T(g$.$$.fragment,RA),aDr=i(RA),MEe=n(RA,"P",{});var vDt=s(MEe);nDr=r(vDt,"Instantiates one of the base model classes of the library from a configuration."),vDt.forEach(t),sDr=i(RA),Yc=n(RA,"P",{});var dae=s(Yc);lDr=r(dae,`Note:
Loading a model from its configuration file does `),EEe=n(dae,"STRONG",{});var FDt=s(EEe);iDr=r(FDt,"not"),FDt.forEach(t),dDr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ree=n(dae,"A",{href:!0});var TDt=s(ree);cDr=r(TDt,"from_pretrained()"),TDt.forEach(t),fDr=r(dae," to load the model weights."),dae.forEach(t),mDr=i(RA),T(rC.$$.fragment,RA),RA.forEach(t),gDr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(h$.$$.fragment,ni),hDr=i(ni),CEe=n(ni,"P",{});var MDt=s(CEe);pDr=r(MDt,"Instantiate one of the base model classes of the library from a pretrained model."),MDt.forEach(t),_Dr=i(ni),Tn=n(ni,"P",{});var PA=s(Tn);uDr=r(PA,"The model class to instantiate is selected based on the "),wEe=n(PA,"CODE",{});var EDt=s(wEe);bDr=r(EDt,"model_type"),EDt.forEach(t),vDr=r(PA,` property of the config object (either
passed as an argument or loaded from `),AEe=n(PA,"CODE",{});var CDt=s(AEe);FDr=r(CDt,"pretrained_model_name_or_path"),CDt.forEach(t),TDr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=n(PA,"CODE",{});var wDt=s(LEe);MDr=r(wDt,"pretrained_model_name_or_path"),wDt.forEach(t),EDr=r(PA,":"),PA.forEach(t),CDr=i(ni),oe=n(ni,"UL",{});var ae=s(oe);tC=n(ae,"LI",{});var iOe=s(tC);yEe=n(iOe,"STRONG",{});var ADt=s(yEe);wDr=r(ADt,"albert"),ADt.forEach(t),ADr=r(iOe," \u2014 "),tee=n(iOe,"A",{href:!0});var LDt=s(tee);LDr=r(LDt,"FlaxAlbertModel"),LDt.forEach(t),yDr=r(iOe," (ALBERT model)"),iOe.forEach(t),xDr=i(ae),aC=n(ae,"LI",{});var dOe=s(aC);xEe=n(dOe,"STRONG",{});var yDt=s(xEe);$Dr=r(yDt,"bart"),yDt.forEach(t),kDr=r(dOe," \u2014 "),aee=n(dOe,"A",{href:!0});var xDt=s(aee);SDr=r(xDt,"FlaxBartModel"),xDt.forEach(t),RDr=r(dOe," (BART model)"),dOe.forEach(t),PDr=i(ae),nC=n(ae,"LI",{});var cOe=s(nC);$Ee=n(cOe,"STRONG",{});var $Dt=s($Ee);BDr=r($Dt,"beit"),$Dt.forEach(t),NDr=r(cOe," \u2014 "),nee=n(cOe,"A",{href:!0});var kDt=s(nee);IDr=r(kDt,"FlaxBeitModel"),kDt.forEach(t),qDr=r(cOe," (BEiT model)"),cOe.forEach(t),jDr=i(ae),sC=n(ae,"LI",{});var fOe=s(sC);kEe=n(fOe,"STRONG",{});var SDt=s(kEe);DDr=r(SDt,"bert"),SDt.forEach(t),GDr=r(fOe," \u2014 "),see=n(fOe,"A",{href:!0});var RDt=s(see);ODr=r(RDt,"FlaxBertModel"),RDt.forEach(t),VDr=r(fOe," (BERT model)"),fOe.forEach(t),XDr=i(ae),lC=n(ae,"LI",{});var mOe=s(lC);SEe=n(mOe,"STRONG",{});var PDt=s(SEe);zDr=r(PDt,"big_bird"),PDt.forEach(t),QDr=r(mOe," \u2014 "),lee=n(mOe,"A",{href:!0});var BDt=s(lee);WDr=r(BDt,"FlaxBigBirdModel"),BDt.forEach(t),HDr=r(mOe," (BigBird model)"),mOe.forEach(t),UDr=i(ae),iC=n(ae,"LI",{});var gOe=s(iC);REe=n(gOe,"STRONG",{});var NDt=s(REe);JDr=r(NDt,"blenderbot"),NDt.forEach(t),YDr=r(gOe," \u2014 "),iee=n(gOe,"A",{href:!0});var IDt=s(iee);KDr=r(IDt,"FlaxBlenderbotModel"),IDt.forEach(t),ZDr=r(gOe," (Blenderbot model)"),gOe.forEach(t),eGr=i(ae),dC=n(ae,"LI",{});var hOe=s(dC);PEe=n(hOe,"STRONG",{});var qDt=s(PEe);oGr=r(qDt,"blenderbot-small"),qDt.forEach(t),rGr=r(hOe," \u2014 "),dee=n(hOe,"A",{href:!0});var jDt=s(dee);tGr=r(jDt,"FlaxBlenderbotSmallModel"),jDt.forEach(t),aGr=r(hOe," (BlenderbotSmall model)"),hOe.forEach(t),nGr=i(ae),cC=n(ae,"LI",{});var pOe=s(cC);BEe=n(pOe,"STRONG",{});var DDt=s(BEe);sGr=r(DDt,"clip"),DDt.forEach(t),lGr=r(pOe," \u2014 "),cee=n(pOe,"A",{href:!0});var GDt=s(cee);iGr=r(GDt,"FlaxCLIPModel"),GDt.forEach(t),dGr=r(pOe," (CLIP model)"),pOe.forEach(t),cGr=i(ae),fC=n(ae,"LI",{});var _Oe=s(fC);NEe=n(_Oe,"STRONG",{});var ODt=s(NEe);fGr=r(ODt,"distilbert"),ODt.forEach(t),mGr=r(_Oe," \u2014 "),fee=n(_Oe,"A",{href:!0});var VDt=s(fee);gGr=r(VDt,"FlaxDistilBertModel"),VDt.forEach(t),hGr=r(_Oe," (DistilBERT model)"),_Oe.forEach(t),pGr=i(ae),mC=n(ae,"LI",{});var uOe=s(mC);IEe=n(uOe,"STRONG",{});var XDt=s(IEe);_Gr=r(XDt,"electra"),XDt.forEach(t),uGr=r(uOe," \u2014 "),mee=n(uOe,"A",{href:!0});var zDt=s(mee);bGr=r(zDt,"FlaxElectraModel"),zDt.forEach(t),vGr=r(uOe," (ELECTRA model)"),uOe.forEach(t),FGr=i(ae),gC=n(ae,"LI",{});var bOe=s(gC);qEe=n(bOe,"STRONG",{});var QDt=s(qEe);TGr=r(QDt,"gpt2"),QDt.forEach(t),MGr=r(bOe," \u2014 "),gee=n(bOe,"A",{href:!0});var WDt=s(gee);EGr=r(WDt,"FlaxGPT2Model"),WDt.forEach(t),CGr=r(bOe," (OpenAI GPT-2 model)"),bOe.forEach(t),wGr=i(ae),hC=n(ae,"LI",{});var vOe=s(hC);jEe=n(vOe,"STRONG",{});var HDt=s(jEe);AGr=r(HDt,"gpt_neo"),HDt.forEach(t),LGr=r(vOe," \u2014 "),hee=n(vOe,"A",{href:!0});var UDt=s(hee);yGr=r(UDt,"FlaxGPTNeoModel"),UDt.forEach(t),xGr=r(vOe," (GPT Neo model)"),vOe.forEach(t),$Gr=i(ae),pC=n(ae,"LI",{});var FOe=s(pC);DEe=n(FOe,"STRONG",{});var JDt=s(DEe);kGr=r(JDt,"gptj"),JDt.forEach(t),SGr=r(FOe," \u2014 "),pee=n(FOe,"A",{href:!0});var YDt=s(pee);RGr=r(YDt,"FlaxGPTJModel"),YDt.forEach(t),PGr=r(FOe," (GPT-J model)"),FOe.forEach(t),BGr=i(ae),_C=n(ae,"LI",{});var TOe=s(_C);GEe=n(TOe,"STRONG",{});var KDt=s(GEe);NGr=r(KDt,"longt5"),KDt.forEach(t),IGr=r(TOe," \u2014 "),_ee=n(TOe,"A",{href:!0});var ZDt=s(_ee);qGr=r(ZDt,"FlaxLongT5Model"),ZDt.forEach(t),jGr=r(TOe," (LongT5 model)"),TOe.forEach(t),DGr=i(ae),uC=n(ae,"LI",{});var MOe=s(uC);OEe=n(MOe,"STRONG",{});var eGt=s(OEe);GGr=r(eGt,"marian"),eGt.forEach(t),OGr=r(MOe," \u2014 "),uee=n(MOe,"A",{href:!0});var oGt=s(uee);VGr=r(oGt,"FlaxMarianModel"),oGt.forEach(t),XGr=r(MOe," (Marian model)"),MOe.forEach(t),zGr=i(ae),bC=n(ae,"LI",{});var EOe=s(bC);VEe=n(EOe,"STRONG",{});var rGt=s(VEe);QGr=r(rGt,"mbart"),rGt.forEach(t),WGr=r(EOe," \u2014 "),bee=n(EOe,"A",{href:!0});var tGt=s(bee);HGr=r(tGt,"FlaxMBartModel"),tGt.forEach(t),UGr=r(EOe," (mBART model)"),EOe.forEach(t),JGr=i(ae),vC=n(ae,"LI",{});var COe=s(vC);XEe=n(COe,"STRONG",{});var aGt=s(XEe);YGr=r(aGt,"mt5"),aGt.forEach(t),KGr=r(COe," \u2014 "),vee=n(COe,"A",{href:!0});var nGt=s(vee);ZGr=r(nGt,"FlaxMT5Model"),nGt.forEach(t),eOr=r(COe," (MT5 model)"),COe.forEach(t),oOr=i(ae),FC=n(ae,"LI",{});var wOe=s(FC);zEe=n(wOe,"STRONG",{});var sGt=s(zEe);rOr=r(sGt,"opt"),sGt.forEach(t),tOr=r(wOe," \u2014 "),Fee=n(wOe,"A",{href:!0});var lGt=s(Fee);aOr=r(lGt,"FlaxOPTModel"),lGt.forEach(t),nOr=r(wOe," (OPT model)"),wOe.forEach(t),sOr=i(ae),TC=n(ae,"LI",{});var AOe=s(TC);QEe=n(AOe,"STRONG",{});var iGt=s(QEe);lOr=r(iGt,"pegasus"),iGt.forEach(t),iOr=r(AOe," \u2014 "),Tee=n(AOe,"A",{href:!0});var dGt=s(Tee);dOr=r(dGt,"FlaxPegasusModel"),dGt.forEach(t),cOr=r(AOe," (Pegasus model)"),AOe.forEach(t),fOr=i(ae),MC=n(ae,"LI",{});var LOe=s(MC);WEe=n(LOe,"STRONG",{});var cGt=s(WEe);mOr=r(cGt,"roberta"),cGt.forEach(t),gOr=r(LOe," \u2014 "),Mee=n(LOe,"A",{href:!0});var fGt=s(Mee);hOr=r(fGt,"FlaxRobertaModel"),fGt.forEach(t),pOr=r(LOe," (RoBERTa model)"),LOe.forEach(t),_Or=i(ae),EC=n(ae,"LI",{});var yOe=s(EC);HEe=n(yOe,"STRONG",{});var mGt=s(HEe);uOr=r(mGt,"roformer"),mGt.forEach(t),bOr=r(yOe," \u2014 "),Eee=n(yOe,"A",{href:!0});var gGt=s(Eee);vOr=r(gGt,"FlaxRoFormerModel"),gGt.forEach(t),FOr=r(yOe," (RoFormer model)"),yOe.forEach(t),TOr=i(ae),CC=n(ae,"LI",{});var xOe=s(CC);UEe=n(xOe,"STRONG",{});var hGt=s(UEe);MOr=r(hGt,"t5"),hGt.forEach(t),EOr=r(xOe," \u2014 "),Cee=n(xOe,"A",{href:!0});var pGt=s(Cee);COr=r(pGt,"FlaxT5Model"),pGt.forEach(t),wOr=r(xOe," (T5 model)"),xOe.forEach(t),AOr=i(ae),wC=n(ae,"LI",{});var $Oe=s(wC);JEe=n($Oe,"STRONG",{});var _Gt=s(JEe);LOr=r(_Gt,"vision-text-dual-encoder"),_Gt.forEach(t),yOr=r($Oe," \u2014 "),wee=n($Oe,"A",{href:!0});var uGt=s(wee);xOr=r(uGt,"FlaxVisionTextDualEncoderModel"),uGt.forEach(t),$Or=r($Oe," (VisionTextDualEncoder model)"),$Oe.forEach(t),kOr=i(ae),AC=n(ae,"LI",{});var kOe=s(AC);YEe=n(kOe,"STRONG",{});var bGt=s(YEe);SOr=r(bGt,"vit"),bGt.forEach(t),ROr=r(kOe," \u2014 "),Aee=n(kOe,"A",{href:!0});var vGt=s(Aee);POr=r(vGt,"FlaxViTModel"),vGt.forEach(t),BOr=r(kOe," (ViT model)"),kOe.forEach(t),NOr=i(ae),LC=n(ae,"LI",{});var SOe=s(LC);KEe=n(SOe,"STRONG",{});var FGt=s(KEe);IOr=r(FGt,"wav2vec2"),FGt.forEach(t),qOr=r(SOe," \u2014 "),Lee=n(SOe,"A",{href:!0});var TGt=s(Lee);jOr=r(TGt,"FlaxWav2Vec2Model"),TGt.forEach(t),DOr=r(SOe," (Wav2Vec2 model)"),SOe.forEach(t),GOr=i(ae),yC=n(ae,"LI",{});var ROe=s(yC);ZEe=n(ROe,"STRONG",{});var MGt=s(ZEe);OOr=r(MGt,"xglm"),MGt.forEach(t),VOr=r(ROe," \u2014 "),yee=n(ROe,"A",{href:!0});var EGt=s(yee);XOr=r(EGt,"FlaxXGLMModel"),EGt.forEach(t),zOr=r(ROe," (XGLM model)"),ROe.forEach(t),QOr=i(ae),xC=n(ae,"LI",{});var POe=s(xC);eCe=n(POe,"STRONG",{});var CGt=s(eCe);WOr=r(CGt,"xlm-roberta"),CGt.forEach(t),HOr=r(POe," \u2014 "),xee=n(POe,"A",{href:!0});var wGt=s(xee);UOr=r(wGt,"FlaxXLMRobertaModel"),wGt.forEach(t),JOr=r(POe," (XLM-RoBERTa model)"),POe.forEach(t),ae.forEach(t),YOr=i(ni),T($C.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Wze=i(f),Kc=n(f,"H2",{class:!0});var rHe=s(Kc);kC=n(rHe,"A",{id:!0,class:!0,href:!0});var AGt=s(kC);oCe=n(AGt,"SPAN",{});var LGt=s(oCe);T(p$.$$.fragment,LGt),LGt.forEach(t),AGt.forEach(t),KOr=i(rHe),rCe=n(rHe,"SPAN",{});var yGt=s(rCe);ZOr=r(yGt,"FlaxAutoModelForCausalLM"),yGt.forEach(t),rHe.forEach(t),Hze=i(f),_r=n(f,"DIV",{class:!0});var si=s(_r);T(_$.$$.fragment,si),eVr=i(si),Zc=n(si,"P",{});var cae=s(Zc);oVr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$ee=n(cae,"A",{href:!0});var xGt=s($ee);rVr=r(xGt,"from_pretrained()"),xGt.forEach(t),tVr=r(cae," class method or the "),kee=n(cae,"A",{href:!0});var $Gt=s(kee);aVr=r($Gt,"from_config()"),$Gt.forEach(t),nVr=r(cae,` class
method.`),cae.forEach(t),sVr=i(si),u$=n(si,"P",{});var tHe=s(u$);lVr=r(tHe,"This class cannot be instantiated directly using "),tCe=n(tHe,"CODE",{});var kGt=s(tCe);iVr=r(kGt,"__init__()"),kGt.forEach(t),dVr=r(tHe," (throws an error)."),tHe.forEach(t),cVr=i(si),Ht=n(si,"DIV",{class:!0});var BA=s(Ht);T(b$.$$.fragment,BA),fVr=i(BA),aCe=n(BA,"P",{});var SGt=s(aCe);mVr=r(SGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),SGt.forEach(t),gVr=i(BA),ef=n(BA,"P",{});var fae=s(ef);hVr=r(fae,`Note:
Loading a model from its configuration file does `),nCe=n(fae,"STRONG",{});var RGt=s(nCe);pVr=r(RGt,"not"),RGt.forEach(t),_Vr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),See=n(fae,"A",{href:!0});var PGt=s(See);uVr=r(PGt,"from_pretrained()"),PGt.forEach(t),bVr=r(fae," to load the model weights."),fae.forEach(t),vVr=i(BA),T(SC.$$.fragment,BA),BA.forEach(t),FVr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(v$.$$.fragment,li),TVr=i(li),sCe=n(li,"P",{});var BGt=s(sCe);MVr=r(BGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BGt.forEach(t),EVr=i(li),Mn=n(li,"P",{});var NA=s(Mn);CVr=r(NA,"The model class to instantiate is selected based on the "),lCe=n(NA,"CODE",{});var NGt=s(lCe);wVr=r(NGt,"model_type"),NGt.forEach(t),AVr=r(NA,` property of the config object (either
passed as an argument or loaded from `),iCe=n(NA,"CODE",{});var IGt=s(iCe);LVr=r(IGt,"pretrained_model_name_or_path"),IGt.forEach(t),yVr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=n(NA,"CODE",{});var qGt=s(dCe);xVr=r(qGt,"pretrained_model_name_or_path"),qGt.forEach(t),$Vr=r(NA,":"),NA.forEach(t),kVr=i(li),xe=n(li,"UL",{});var Ie=s(xe);RC=n(Ie,"LI",{});var BOe=s(RC);cCe=n(BOe,"STRONG",{});var jGt=s(cCe);SVr=r(jGt,"bart"),jGt.forEach(t),RVr=r(BOe," \u2014 "),Ree=n(BOe,"A",{href:!0});var DGt=s(Ree);PVr=r(DGt,"FlaxBartForCausalLM"),DGt.forEach(t),BVr=r(BOe," (BART model)"),BOe.forEach(t),NVr=i(Ie),PC=n(Ie,"LI",{});var NOe=s(PC);fCe=n(NOe,"STRONG",{});var GGt=s(fCe);IVr=r(GGt,"bert"),GGt.forEach(t),qVr=r(NOe," \u2014 "),Pee=n(NOe,"A",{href:!0});var OGt=s(Pee);jVr=r(OGt,"FlaxBertForCausalLM"),OGt.forEach(t),DVr=r(NOe," (BERT model)"),NOe.forEach(t),GVr=i(Ie),BC=n(Ie,"LI",{});var IOe=s(BC);mCe=n(IOe,"STRONG",{});var VGt=s(mCe);OVr=r(VGt,"big_bird"),VGt.forEach(t),VVr=r(IOe," \u2014 "),Bee=n(IOe,"A",{href:!0});var XGt=s(Bee);XVr=r(XGt,"FlaxBigBirdForCausalLM"),XGt.forEach(t),zVr=r(IOe," (BigBird model)"),IOe.forEach(t),QVr=i(Ie),NC=n(Ie,"LI",{});var qOe=s(NC);gCe=n(qOe,"STRONG",{});var zGt=s(gCe);WVr=r(zGt,"electra"),zGt.forEach(t),HVr=r(qOe," \u2014 "),Nee=n(qOe,"A",{href:!0});var QGt=s(Nee);UVr=r(QGt,"FlaxElectraForCausalLM"),QGt.forEach(t),JVr=r(qOe," (ELECTRA model)"),qOe.forEach(t),YVr=i(Ie),IC=n(Ie,"LI",{});var jOe=s(IC);hCe=n(jOe,"STRONG",{});var WGt=s(hCe);KVr=r(WGt,"gpt2"),WGt.forEach(t),ZVr=r(jOe," \u2014 "),Iee=n(jOe,"A",{href:!0});var HGt=s(Iee);eXr=r(HGt,"FlaxGPT2LMHeadModel"),HGt.forEach(t),oXr=r(jOe," (OpenAI GPT-2 model)"),jOe.forEach(t),rXr=i(Ie),qC=n(Ie,"LI",{});var DOe=s(qC);pCe=n(DOe,"STRONG",{});var UGt=s(pCe);tXr=r(UGt,"gpt_neo"),UGt.forEach(t),aXr=r(DOe," \u2014 "),qee=n(DOe,"A",{href:!0});var JGt=s(qee);nXr=r(JGt,"FlaxGPTNeoForCausalLM"),JGt.forEach(t),sXr=r(DOe," (GPT Neo model)"),DOe.forEach(t),lXr=i(Ie),jC=n(Ie,"LI",{});var GOe=s(jC);_Ce=n(GOe,"STRONG",{});var YGt=s(_Ce);iXr=r(YGt,"gptj"),YGt.forEach(t),dXr=r(GOe," \u2014 "),jee=n(GOe,"A",{href:!0});var KGt=s(jee);cXr=r(KGt,"FlaxGPTJForCausalLM"),KGt.forEach(t),fXr=r(GOe," (GPT-J model)"),GOe.forEach(t),mXr=i(Ie),DC=n(Ie,"LI",{});var OOe=s(DC);uCe=n(OOe,"STRONG",{});var ZGt=s(uCe);gXr=r(ZGt,"opt"),ZGt.forEach(t),hXr=r(OOe," \u2014 "),Dee=n(OOe,"A",{href:!0});var eOt=s(Dee);pXr=r(eOt,"FlaxOPTForCausalLM"),eOt.forEach(t),_Xr=r(OOe," (OPT model)"),OOe.forEach(t),uXr=i(Ie),GC=n(Ie,"LI",{});var VOe=s(GC);bCe=n(VOe,"STRONG",{});var oOt=s(bCe);bXr=r(oOt,"roberta"),oOt.forEach(t),vXr=r(VOe," \u2014 "),Gee=n(VOe,"A",{href:!0});var rOt=s(Gee);FXr=r(rOt,"FlaxRobertaForCausalLM"),rOt.forEach(t),TXr=r(VOe," (RoBERTa model)"),VOe.forEach(t),MXr=i(Ie),OC=n(Ie,"LI",{});var XOe=s(OC);vCe=n(XOe,"STRONG",{});var tOt=s(vCe);EXr=r(tOt,"xglm"),tOt.forEach(t),CXr=r(XOe," \u2014 "),Oee=n(XOe,"A",{href:!0});var aOt=s(Oee);wXr=r(aOt,"FlaxXGLMForCausalLM"),aOt.forEach(t),AXr=r(XOe," (XGLM model)"),XOe.forEach(t),Ie.forEach(t),LXr=i(li),T(VC.$$.fragment,li),li.forEach(t),si.forEach(t),Uze=i(f),of=n(f,"H2",{class:!0});var aHe=s(of);XC=n(aHe,"A",{id:!0,class:!0,href:!0});var nOt=s(XC);FCe=n(nOt,"SPAN",{});var sOt=s(FCe);T(F$.$$.fragment,sOt),sOt.forEach(t),nOt.forEach(t),yXr=i(aHe),TCe=n(aHe,"SPAN",{});var lOt=s(TCe);xXr=r(lOt,"FlaxAutoModelForPreTraining"),lOt.forEach(t),aHe.forEach(t),Jze=i(f),ur=n(f,"DIV",{class:!0});var ii=s(ur);T(T$.$$.fragment,ii),$Xr=i(ii),rf=n(ii,"P",{});var mae=s(rf);kXr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vee=n(mae,"A",{href:!0});var iOt=s(Vee);SXr=r(iOt,"from_pretrained()"),iOt.forEach(t),RXr=r(mae," class method or the "),Xee=n(mae,"A",{href:!0});var dOt=s(Xee);PXr=r(dOt,"from_config()"),dOt.forEach(t),BXr=r(mae,` class
method.`),mae.forEach(t),NXr=i(ii),M$=n(ii,"P",{});var nHe=s(M$);IXr=r(nHe,"This class cannot be instantiated directly using "),MCe=n(nHe,"CODE",{});var cOt=s(MCe);qXr=r(cOt,"__init__()"),cOt.forEach(t),jXr=r(nHe," (throws an error)."),nHe.forEach(t),DXr=i(ii),Ut=n(ii,"DIV",{class:!0});var IA=s(Ut);T(E$.$$.fragment,IA),GXr=i(IA),ECe=n(IA,"P",{});var fOt=s(ECe);OXr=r(fOt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fOt.forEach(t),VXr=i(IA),tf=n(IA,"P",{});var gae=s(tf);XXr=r(gae,`Note:
Loading a model from its configuration file does `),CCe=n(gae,"STRONG",{});var mOt=s(CCe);zXr=r(mOt,"not"),mOt.forEach(t),QXr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=n(gae,"A",{href:!0});var gOt=s(zee);WXr=r(gOt,"from_pretrained()"),gOt.forEach(t),HXr=r(gae," to load the model weights."),gae.forEach(t),UXr=i(IA),T(zC.$$.fragment,IA),IA.forEach(t),JXr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(C$.$$.fragment,di),YXr=i(di),wCe=n(di,"P",{});var hOt=s(wCe);KXr=r(hOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hOt.forEach(t),ZXr=i(di),En=n(di,"P",{});var qA=s(En);ezr=r(qA,"The model class to instantiate is selected based on the "),ACe=n(qA,"CODE",{});var pOt=s(ACe);ozr=r(pOt,"model_type"),pOt.forEach(t),rzr=r(qA,` property of the config object (either
passed as an argument or loaded from `),LCe=n(qA,"CODE",{});var _Ot=s(LCe);tzr=r(_Ot,"pretrained_model_name_or_path"),_Ot.forEach(t),azr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=n(qA,"CODE",{});var uOt=s(yCe);nzr=r(uOt,"pretrained_model_name_or_path"),uOt.forEach(t),szr=r(qA,":"),qA.forEach(t),lzr=i(di),Ee=n(di,"UL",{});var we=s(Ee);QC=n(we,"LI",{});var zOe=s(QC);xCe=n(zOe,"STRONG",{});var bOt=s(xCe);izr=r(bOt,"albert"),bOt.forEach(t),dzr=r(zOe," \u2014 "),Qee=n(zOe,"A",{href:!0});var vOt=s(Qee);czr=r(vOt,"FlaxAlbertForPreTraining"),vOt.forEach(t),fzr=r(zOe," (ALBERT model)"),zOe.forEach(t),mzr=i(we),WC=n(we,"LI",{});var QOe=s(WC);$Ce=n(QOe,"STRONG",{});var FOt=s($Ce);gzr=r(FOt,"bart"),FOt.forEach(t),hzr=r(QOe," \u2014 "),Wee=n(QOe,"A",{href:!0});var TOt=s(Wee);pzr=r(TOt,"FlaxBartForConditionalGeneration"),TOt.forEach(t),_zr=r(QOe," (BART model)"),QOe.forEach(t),uzr=i(we),HC=n(we,"LI",{});var WOe=s(HC);kCe=n(WOe,"STRONG",{});var MOt=s(kCe);bzr=r(MOt,"bert"),MOt.forEach(t),vzr=r(WOe," \u2014 "),Hee=n(WOe,"A",{href:!0});var EOt=s(Hee);Fzr=r(EOt,"FlaxBertForPreTraining"),EOt.forEach(t),Tzr=r(WOe," (BERT model)"),WOe.forEach(t),Mzr=i(we),UC=n(we,"LI",{});var HOe=s(UC);SCe=n(HOe,"STRONG",{});var COt=s(SCe);Ezr=r(COt,"big_bird"),COt.forEach(t),Czr=r(HOe," \u2014 "),Uee=n(HOe,"A",{href:!0});var wOt=s(Uee);wzr=r(wOt,"FlaxBigBirdForPreTraining"),wOt.forEach(t),Azr=r(HOe," (BigBird model)"),HOe.forEach(t),Lzr=i(we),JC=n(we,"LI",{});var UOe=s(JC);RCe=n(UOe,"STRONG",{});var AOt=s(RCe);yzr=r(AOt,"electra"),AOt.forEach(t),xzr=r(UOe," \u2014 "),Jee=n(UOe,"A",{href:!0});var LOt=s(Jee);$zr=r(LOt,"FlaxElectraForPreTraining"),LOt.forEach(t),kzr=r(UOe," (ELECTRA model)"),UOe.forEach(t),Szr=i(we),YC=n(we,"LI",{});var JOe=s(YC);PCe=n(JOe,"STRONG",{});var yOt=s(PCe);Rzr=r(yOt,"longt5"),yOt.forEach(t),Pzr=r(JOe," \u2014 "),Yee=n(JOe,"A",{href:!0});var xOt=s(Yee);Bzr=r(xOt,"FlaxLongT5ForConditionalGeneration"),xOt.forEach(t),Nzr=r(JOe," (LongT5 model)"),JOe.forEach(t),Izr=i(we),KC=n(we,"LI",{});var YOe=s(KC);BCe=n(YOe,"STRONG",{});var $Ot=s(BCe);qzr=r($Ot,"mbart"),$Ot.forEach(t),jzr=r(YOe," \u2014 "),Kee=n(YOe,"A",{href:!0});var kOt=s(Kee);Dzr=r(kOt,"FlaxMBartForConditionalGeneration"),kOt.forEach(t),Gzr=r(YOe," (mBART model)"),YOe.forEach(t),Ozr=i(we),ZC=n(we,"LI",{});var KOe=s(ZC);NCe=n(KOe,"STRONG",{});var SOt=s(NCe);Vzr=r(SOt,"mt5"),SOt.forEach(t),Xzr=r(KOe," \u2014 "),Zee=n(KOe,"A",{href:!0});var ROt=s(Zee);zzr=r(ROt,"FlaxMT5ForConditionalGeneration"),ROt.forEach(t),Qzr=r(KOe," (MT5 model)"),KOe.forEach(t),Wzr=i(we),e3=n(we,"LI",{});var ZOe=s(e3);ICe=n(ZOe,"STRONG",{});var POt=s(ICe);Hzr=r(POt,"roberta"),POt.forEach(t),Uzr=r(ZOe," \u2014 "),eoe=n(ZOe,"A",{href:!0});var BOt=s(eoe);Jzr=r(BOt,"FlaxRobertaForMaskedLM"),BOt.forEach(t),Yzr=r(ZOe," (RoBERTa model)"),ZOe.forEach(t),Kzr=i(we),o3=n(we,"LI",{});var eVe=s(o3);qCe=n(eVe,"STRONG",{});var NOt=s(qCe);Zzr=r(NOt,"roformer"),NOt.forEach(t),eQr=r(eVe," \u2014 "),ooe=n(eVe,"A",{href:!0});var IOt=s(ooe);oQr=r(IOt,"FlaxRoFormerForMaskedLM"),IOt.forEach(t),rQr=r(eVe," (RoFormer model)"),eVe.forEach(t),tQr=i(we),r3=n(we,"LI",{});var oVe=s(r3);jCe=n(oVe,"STRONG",{});var qOt=s(jCe);aQr=r(qOt,"t5"),qOt.forEach(t),nQr=r(oVe," \u2014 "),roe=n(oVe,"A",{href:!0});var jOt=s(roe);sQr=r(jOt,"FlaxT5ForConditionalGeneration"),jOt.forEach(t),lQr=r(oVe," (T5 model)"),oVe.forEach(t),iQr=i(we),t3=n(we,"LI",{});var rVe=s(t3);DCe=n(rVe,"STRONG",{});var DOt=s(DCe);dQr=r(DOt,"wav2vec2"),DOt.forEach(t),cQr=r(rVe," \u2014 "),toe=n(rVe,"A",{href:!0});var GOt=s(toe);fQr=r(GOt,"FlaxWav2Vec2ForPreTraining"),GOt.forEach(t),mQr=r(rVe," (Wav2Vec2 model)"),rVe.forEach(t),gQr=i(we),a3=n(we,"LI",{});var tVe=s(a3);GCe=n(tVe,"STRONG",{});var OOt=s(GCe);hQr=r(OOt,"xlm-roberta"),OOt.forEach(t),pQr=r(tVe," \u2014 "),aoe=n(tVe,"A",{href:!0});var VOt=s(aoe);_Qr=r(VOt,"FlaxXLMRobertaForMaskedLM"),VOt.forEach(t),uQr=r(tVe," (XLM-RoBERTa model)"),tVe.forEach(t),we.forEach(t),bQr=i(di),T(n3.$$.fragment,di),di.forEach(t),ii.forEach(t),Yze=i(f),af=n(f,"H2",{class:!0});var sHe=s(af);s3=n(sHe,"A",{id:!0,class:!0,href:!0});var XOt=s(s3);OCe=n(XOt,"SPAN",{});var zOt=s(OCe);T(w$.$$.fragment,zOt),zOt.forEach(t),XOt.forEach(t),vQr=i(sHe),VCe=n(sHe,"SPAN",{});var QOt=s(VCe);FQr=r(QOt,"FlaxAutoModelForMaskedLM"),QOt.forEach(t),sHe.forEach(t),Kze=i(f),br=n(f,"DIV",{class:!0});var ci=s(br);T(A$.$$.fragment,ci),TQr=i(ci),nf=n(ci,"P",{});var hae=s(nf);MQr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),noe=n(hae,"A",{href:!0});var WOt=s(noe);EQr=r(WOt,"from_pretrained()"),WOt.forEach(t),CQr=r(hae," class method or the "),soe=n(hae,"A",{href:!0});var HOt=s(soe);wQr=r(HOt,"from_config()"),HOt.forEach(t),AQr=r(hae,` class
method.`),hae.forEach(t),LQr=i(ci),L$=n(ci,"P",{});var lHe=s(L$);yQr=r(lHe,"This class cannot be instantiated directly using "),XCe=n(lHe,"CODE",{});var UOt=s(XCe);xQr=r(UOt,"__init__()"),UOt.forEach(t),$Qr=r(lHe," (throws an error)."),lHe.forEach(t),kQr=i(ci),Jt=n(ci,"DIV",{class:!0});var jA=s(Jt);T(y$.$$.fragment,jA),SQr=i(jA),zCe=n(jA,"P",{});var JOt=s(zCe);RQr=r(JOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JOt.forEach(t),PQr=i(jA),sf=n(jA,"P",{});var pae=s(sf);BQr=r(pae,`Note:
Loading a model from its configuration file does `),QCe=n(pae,"STRONG",{});var YOt=s(QCe);NQr=r(YOt,"not"),YOt.forEach(t),IQr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),loe=n(pae,"A",{href:!0});var KOt=s(loe);qQr=r(KOt,"from_pretrained()"),KOt.forEach(t),jQr=r(pae," to load the model weights."),pae.forEach(t),DQr=i(jA),T(l3.$$.fragment,jA),jA.forEach(t),GQr=i(ci),Qr=n(ci,"DIV",{class:!0});var fi=s(Qr);T(x$.$$.fragment,fi),OQr=i(fi),WCe=n(fi,"P",{});var ZOt=s(WCe);VQr=r(ZOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZOt.forEach(t),XQr=i(fi),Cn=n(fi,"P",{});var DA=s(Cn);zQr=r(DA,"The model class to instantiate is selected based on the "),HCe=n(DA,"CODE",{});var eVt=s(HCe);QQr=r(eVt,"model_type"),eVt.forEach(t),WQr=r(DA,` property of the config object (either
passed as an argument or loaded from `),UCe=n(DA,"CODE",{});var oVt=s(UCe);HQr=r(oVt,"pretrained_model_name_or_path"),oVt.forEach(t),UQr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JCe=n(DA,"CODE",{});var rVt=s(JCe);JQr=r(rVt,"pretrained_model_name_or_path"),rVt.forEach(t),YQr=r(DA,":"),DA.forEach(t),KQr=i(fi),$e=n(fi,"UL",{});var qe=s($e);i3=n(qe,"LI",{});var aVe=s(i3);YCe=n(aVe,"STRONG",{});var tVt=s(YCe);ZQr=r(tVt,"albert"),tVt.forEach(t),eWr=r(aVe," \u2014 "),ioe=n(aVe,"A",{href:!0});var aVt=s(ioe);oWr=r(aVt,"FlaxAlbertForMaskedLM"),aVt.forEach(t),rWr=r(aVe," (ALBERT model)"),aVe.forEach(t),tWr=i(qe),d3=n(qe,"LI",{});var nVe=s(d3);KCe=n(nVe,"STRONG",{});var nVt=s(KCe);aWr=r(nVt,"bart"),nVt.forEach(t),nWr=r(nVe," \u2014 "),doe=n(nVe,"A",{href:!0});var sVt=s(doe);sWr=r(sVt,"FlaxBartForConditionalGeneration"),sVt.forEach(t),lWr=r(nVe," (BART model)"),nVe.forEach(t),iWr=i(qe),c3=n(qe,"LI",{});var sVe=s(c3);ZCe=n(sVe,"STRONG",{});var lVt=s(ZCe);dWr=r(lVt,"bert"),lVt.forEach(t),cWr=r(sVe," \u2014 "),coe=n(sVe,"A",{href:!0});var iVt=s(coe);fWr=r(iVt,"FlaxBertForMaskedLM"),iVt.forEach(t),mWr=r(sVe," (BERT model)"),sVe.forEach(t),gWr=i(qe),f3=n(qe,"LI",{});var lVe=s(f3);e3e=n(lVe,"STRONG",{});var dVt=s(e3e);hWr=r(dVt,"big_bird"),dVt.forEach(t),pWr=r(lVe," \u2014 "),foe=n(lVe,"A",{href:!0});var cVt=s(foe);_Wr=r(cVt,"FlaxBigBirdForMaskedLM"),cVt.forEach(t),uWr=r(lVe," (BigBird model)"),lVe.forEach(t),bWr=i(qe),m3=n(qe,"LI",{});var iVe=s(m3);o3e=n(iVe,"STRONG",{});var fVt=s(o3e);vWr=r(fVt,"distilbert"),fVt.forEach(t),FWr=r(iVe," \u2014 "),moe=n(iVe,"A",{href:!0});var mVt=s(moe);TWr=r(mVt,"FlaxDistilBertForMaskedLM"),mVt.forEach(t),MWr=r(iVe," (DistilBERT model)"),iVe.forEach(t),EWr=i(qe),g3=n(qe,"LI",{});var dVe=s(g3);r3e=n(dVe,"STRONG",{});var gVt=s(r3e);CWr=r(gVt,"electra"),gVt.forEach(t),wWr=r(dVe," \u2014 "),goe=n(dVe,"A",{href:!0});var hVt=s(goe);AWr=r(hVt,"FlaxElectraForMaskedLM"),hVt.forEach(t),LWr=r(dVe," (ELECTRA model)"),dVe.forEach(t),yWr=i(qe),h3=n(qe,"LI",{});var cVe=s(h3);t3e=n(cVe,"STRONG",{});var pVt=s(t3e);xWr=r(pVt,"mbart"),pVt.forEach(t),$Wr=r(cVe," \u2014 "),hoe=n(cVe,"A",{href:!0});var _Vt=s(hoe);kWr=r(_Vt,"FlaxMBartForConditionalGeneration"),_Vt.forEach(t),SWr=r(cVe," (mBART model)"),cVe.forEach(t),RWr=i(qe),p3=n(qe,"LI",{});var fVe=s(p3);a3e=n(fVe,"STRONG",{});var uVt=s(a3e);PWr=r(uVt,"roberta"),uVt.forEach(t),BWr=r(fVe," \u2014 "),poe=n(fVe,"A",{href:!0});var bVt=s(poe);NWr=r(bVt,"FlaxRobertaForMaskedLM"),bVt.forEach(t),IWr=r(fVe," (RoBERTa model)"),fVe.forEach(t),qWr=i(qe),_3=n(qe,"LI",{});var mVe=s(_3);n3e=n(mVe,"STRONG",{});var vVt=s(n3e);jWr=r(vVt,"roformer"),vVt.forEach(t),DWr=r(mVe," \u2014 "),_oe=n(mVe,"A",{href:!0});var FVt=s(_oe);GWr=r(FVt,"FlaxRoFormerForMaskedLM"),FVt.forEach(t),OWr=r(mVe," (RoFormer model)"),mVe.forEach(t),VWr=i(qe),u3=n(qe,"LI",{});var gVe=s(u3);s3e=n(gVe,"STRONG",{});var TVt=s(s3e);XWr=r(TVt,"xlm-roberta"),TVt.forEach(t),zWr=r(gVe," \u2014 "),uoe=n(gVe,"A",{href:!0});var MVt=s(uoe);QWr=r(MVt,"FlaxXLMRobertaForMaskedLM"),MVt.forEach(t),WWr=r(gVe," (XLM-RoBERTa model)"),gVe.forEach(t),qe.forEach(t),HWr=i(fi),T(b3.$$.fragment,fi),fi.forEach(t),ci.forEach(t),Zze=i(f),lf=n(f,"H2",{class:!0});var iHe=s(lf);v3=n(iHe,"A",{id:!0,class:!0,href:!0});var EVt=s(v3);l3e=n(EVt,"SPAN",{});var CVt=s(l3e);T($$.$$.fragment,CVt),CVt.forEach(t),EVt.forEach(t),UWr=i(iHe),i3e=n(iHe,"SPAN",{});var wVt=s(i3e);JWr=r(wVt,"FlaxAutoModelForSeq2SeqLM"),wVt.forEach(t),iHe.forEach(t),eQe=i(f),vr=n(f,"DIV",{class:!0});var mi=s(vr);T(k$.$$.fragment,mi),YWr=i(mi),df=n(mi,"P",{});var _ae=s(df);KWr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),boe=n(_ae,"A",{href:!0});var AVt=s(boe);ZWr=r(AVt,"from_pretrained()"),AVt.forEach(t),eHr=r(_ae," class method or the "),voe=n(_ae,"A",{href:!0});var LVt=s(voe);oHr=r(LVt,"from_config()"),LVt.forEach(t),rHr=r(_ae,` class
method.`),_ae.forEach(t),tHr=i(mi),S$=n(mi,"P",{});var dHe=s(S$);aHr=r(dHe,"This class cannot be instantiated directly using "),d3e=n(dHe,"CODE",{});var yVt=s(d3e);nHr=r(yVt,"__init__()"),yVt.forEach(t),sHr=r(dHe," (throws an error)."),dHe.forEach(t),lHr=i(mi),Yt=n(mi,"DIV",{class:!0});var GA=s(Yt);T(R$.$$.fragment,GA),iHr=i(GA),c3e=n(GA,"P",{});var xVt=s(c3e);dHr=r(xVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xVt.forEach(t),cHr=i(GA),cf=n(GA,"P",{});var uae=s(cf);fHr=r(uae,`Note:
Loading a model from its configuration file does `),f3e=n(uae,"STRONG",{});var $Vt=s(f3e);mHr=r($Vt,"not"),$Vt.forEach(t),gHr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Foe=n(uae,"A",{href:!0});var kVt=s(Foe);hHr=r(kVt,"from_pretrained()"),kVt.forEach(t),pHr=r(uae," to load the model weights."),uae.forEach(t),_Hr=i(GA),T(F3.$$.fragment,GA),GA.forEach(t),uHr=i(mi),Wr=n(mi,"DIV",{class:!0});var gi=s(Wr);T(P$.$$.fragment,gi),bHr=i(gi),m3e=n(gi,"P",{});var SVt=s(m3e);vHr=r(SVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SVt.forEach(t),FHr=i(gi),wn=n(gi,"P",{});var OA=s(wn);THr=r(OA,"The model class to instantiate is selected based on the "),g3e=n(OA,"CODE",{});var RVt=s(g3e);MHr=r(RVt,"model_type"),RVt.forEach(t),EHr=r(OA,` property of the config object (either
passed as an argument or loaded from `),h3e=n(OA,"CODE",{});var PVt=s(h3e);CHr=r(PVt,"pretrained_model_name_or_path"),PVt.forEach(t),wHr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=n(OA,"CODE",{});var BVt=s(p3e);AHr=r(BVt,"pretrained_model_name_or_path"),BVt.forEach(t),LHr=r(OA,":"),OA.forEach(t),yHr=i(gi),ke=n(gi,"UL",{});var je=s(ke);T3=n(je,"LI",{});var hVe=s(T3);_3e=n(hVe,"STRONG",{});var NVt=s(_3e);xHr=r(NVt,"bart"),NVt.forEach(t),$Hr=r(hVe," \u2014 "),Toe=n(hVe,"A",{href:!0});var IVt=s(Toe);kHr=r(IVt,"FlaxBartForConditionalGeneration"),IVt.forEach(t),SHr=r(hVe," (BART model)"),hVe.forEach(t),RHr=i(je),M3=n(je,"LI",{});var pVe=s(M3);u3e=n(pVe,"STRONG",{});var qVt=s(u3e);PHr=r(qVt,"blenderbot"),qVt.forEach(t),BHr=r(pVe," \u2014 "),Moe=n(pVe,"A",{href:!0});var jVt=s(Moe);NHr=r(jVt,"FlaxBlenderbotForConditionalGeneration"),jVt.forEach(t),IHr=r(pVe," (Blenderbot model)"),pVe.forEach(t),qHr=i(je),E3=n(je,"LI",{});var _Ve=s(E3);b3e=n(_Ve,"STRONG",{});var DVt=s(b3e);jHr=r(DVt,"blenderbot-small"),DVt.forEach(t),DHr=r(_Ve," \u2014 "),Eoe=n(_Ve,"A",{href:!0});var GVt=s(Eoe);GHr=r(GVt,"FlaxBlenderbotSmallForConditionalGeneration"),GVt.forEach(t),OHr=r(_Ve," (BlenderbotSmall model)"),_Ve.forEach(t),VHr=i(je),C3=n(je,"LI",{});var uVe=s(C3);v3e=n(uVe,"STRONG",{});var OVt=s(v3e);XHr=r(OVt,"encoder-decoder"),OVt.forEach(t),zHr=r(uVe," \u2014 "),Coe=n(uVe,"A",{href:!0});var VVt=s(Coe);QHr=r(VVt,"FlaxEncoderDecoderModel"),VVt.forEach(t),WHr=r(uVe," (Encoder decoder model)"),uVe.forEach(t),HHr=i(je),w3=n(je,"LI",{});var bVe=s(w3);F3e=n(bVe,"STRONG",{});var XVt=s(F3e);UHr=r(XVt,"longt5"),XVt.forEach(t),JHr=r(bVe," \u2014 "),woe=n(bVe,"A",{href:!0});var zVt=s(woe);YHr=r(zVt,"FlaxLongT5ForConditionalGeneration"),zVt.forEach(t),KHr=r(bVe," (LongT5 model)"),bVe.forEach(t),ZHr=i(je),A3=n(je,"LI",{});var vVe=s(A3);T3e=n(vVe,"STRONG",{});var QVt=s(T3e);eUr=r(QVt,"marian"),QVt.forEach(t),oUr=r(vVe," \u2014 "),Aoe=n(vVe,"A",{href:!0});var WVt=s(Aoe);rUr=r(WVt,"FlaxMarianMTModel"),WVt.forEach(t),tUr=r(vVe," (Marian model)"),vVe.forEach(t),aUr=i(je),L3=n(je,"LI",{});var FVe=s(L3);M3e=n(FVe,"STRONG",{});var HVt=s(M3e);nUr=r(HVt,"mbart"),HVt.forEach(t),sUr=r(FVe," \u2014 "),Loe=n(FVe,"A",{href:!0});var UVt=s(Loe);lUr=r(UVt,"FlaxMBartForConditionalGeneration"),UVt.forEach(t),iUr=r(FVe," (mBART model)"),FVe.forEach(t),dUr=i(je),y3=n(je,"LI",{});var TVe=s(y3);E3e=n(TVe,"STRONG",{});var JVt=s(E3e);cUr=r(JVt,"mt5"),JVt.forEach(t),fUr=r(TVe," \u2014 "),yoe=n(TVe,"A",{href:!0});var YVt=s(yoe);mUr=r(YVt,"FlaxMT5ForConditionalGeneration"),YVt.forEach(t),gUr=r(TVe," (MT5 model)"),TVe.forEach(t),hUr=i(je),x3=n(je,"LI",{});var MVe=s(x3);C3e=n(MVe,"STRONG",{});var KVt=s(C3e);pUr=r(KVt,"pegasus"),KVt.forEach(t),_Ur=r(MVe," \u2014 "),xoe=n(MVe,"A",{href:!0});var ZVt=s(xoe);uUr=r(ZVt,"FlaxPegasusForConditionalGeneration"),ZVt.forEach(t),bUr=r(MVe," (Pegasus model)"),MVe.forEach(t),vUr=i(je),$3=n(je,"LI",{});var EVe=s($3);w3e=n(EVe,"STRONG",{});var eXt=s(w3e);FUr=r(eXt,"t5"),eXt.forEach(t),TUr=r(EVe," \u2014 "),$oe=n(EVe,"A",{href:!0});var oXt=s($oe);MUr=r(oXt,"FlaxT5ForConditionalGeneration"),oXt.forEach(t),EUr=r(EVe," (T5 model)"),EVe.forEach(t),je.forEach(t),CUr=i(gi),T(k3.$$.fragment,gi),gi.forEach(t),mi.forEach(t),oQe=i(f),ff=n(f,"H2",{class:!0});var cHe=s(ff);S3=n(cHe,"A",{id:!0,class:!0,href:!0});var rXt=s(S3);A3e=n(rXt,"SPAN",{});var tXt=s(A3e);T(B$.$$.fragment,tXt),tXt.forEach(t),rXt.forEach(t),wUr=i(cHe),L3e=n(cHe,"SPAN",{});var aXt=s(L3e);AUr=r(aXt,"FlaxAutoModelForSequenceClassification"),aXt.forEach(t),cHe.forEach(t),rQe=i(f),Fr=n(f,"DIV",{class:!0});var hi=s(Fr);T(N$.$$.fragment,hi),LUr=i(hi),mf=n(hi,"P",{});var bae=s(mf);yUr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),koe=n(bae,"A",{href:!0});var nXt=s(koe);xUr=r(nXt,"from_pretrained()"),nXt.forEach(t),$Ur=r(bae," class method or the "),Soe=n(bae,"A",{href:!0});var sXt=s(Soe);kUr=r(sXt,"from_config()"),sXt.forEach(t),SUr=r(bae,` class
method.`),bae.forEach(t),RUr=i(hi),I$=n(hi,"P",{});var fHe=s(I$);PUr=r(fHe,"This class cannot be instantiated directly using "),y3e=n(fHe,"CODE",{});var lXt=s(y3e);BUr=r(lXt,"__init__()"),lXt.forEach(t),NUr=r(fHe," (throws an error)."),fHe.forEach(t),IUr=i(hi),Kt=n(hi,"DIV",{class:!0});var VA=s(Kt);T(q$.$$.fragment,VA),qUr=i(VA),x3e=n(VA,"P",{});var iXt=s(x3e);jUr=r(iXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iXt.forEach(t),DUr=i(VA),gf=n(VA,"P",{});var vae=s(gf);GUr=r(vae,`Note:
Loading a model from its configuration file does `),$3e=n(vae,"STRONG",{});var dXt=s($3e);OUr=r(dXt,"not"),dXt.forEach(t),VUr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=n(vae,"A",{href:!0});var cXt=s(Roe);XUr=r(cXt,"from_pretrained()"),cXt.forEach(t),zUr=r(vae," to load the model weights."),vae.forEach(t),QUr=i(VA),T(R3.$$.fragment,VA),VA.forEach(t),WUr=i(hi),Hr=n(hi,"DIV",{class:!0});var pi=s(Hr);T(j$.$$.fragment,pi),HUr=i(pi),k3e=n(pi,"P",{});var fXt=s(k3e);UUr=r(fXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fXt.forEach(t),JUr=i(pi),An=n(pi,"P",{});var XA=s(An);YUr=r(XA,"The model class to instantiate is selected based on the "),S3e=n(XA,"CODE",{});var mXt=s(S3e);KUr=r(mXt,"model_type"),mXt.forEach(t),ZUr=r(XA,` property of the config object (either
passed as an argument or loaded from `),R3e=n(XA,"CODE",{});var gXt=s(R3e);eJr=r(gXt,"pretrained_model_name_or_path"),gXt.forEach(t),oJr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=n(XA,"CODE",{});var hXt=s(P3e);rJr=r(hXt,"pretrained_model_name_or_path"),hXt.forEach(t),tJr=r(XA,":"),XA.forEach(t),aJr=i(pi),Se=n(pi,"UL",{});var De=s(Se);P3=n(De,"LI",{});var CVe=s(P3);B3e=n(CVe,"STRONG",{});var pXt=s(B3e);nJr=r(pXt,"albert"),pXt.forEach(t),sJr=r(CVe," \u2014 "),Poe=n(CVe,"A",{href:!0});var _Xt=s(Poe);lJr=r(_Xt,"FlaxAlbertForSequenceClassification"),_Xt.forEach(t),iJr=r(CVe," (ALBERT model)"),CVe.forEach(t),dJr=i(De),B3=n(De,"LI",{});var wVe=s(B3);N3e=n(wVe,"STRONG",{});var uXt=s(N3e);cJr=r(uXt,"bart"),uXt.forEach(t),fJr=r(wVe," \u2014 "),Boe=n(wVe,"A",{href:!0});var bXt=s(Boe);mJr=r(bXt,"FlaxBartForSequenceClassification"),bXt.forEach(t),gJr=r(wVe," (BART model)"),wVe.forEach(t),hJr=i(De),N3=n(De,"LI",{});var AVe=s(N3);I3e=n(AVe,"STRONG",{});var vXt=s(I3e);pJr=r(vXt,"bert"),vXt.forEach(t),_Jr=r(AVe," \u2014 "),Noe=n(AVe,"A",{href:!0});var FXt=s(Noe);uJr=r(FXt,"FlaxBertForSequenceClassification"),FXt.forEach(t),bJr=r(AVe," (BERT model)"),AVe.forEach(t),vJr=i(De),I3=n(De,"LI",{});var LVe=s(I3);q3e=n(LVe,"STRONG",{});var TXt=s(q3e);FJr=r(TXt,"big_bird"),TXt.forEach(t),TJr=r(LVe," \u2014 "),Ioe=n(LVe,"A",{href:!0});var MXt=s(Ioe);MJr=r(MXt,"FlaxBigBirdForSequenceClassification"),MXt.forEach(t),EJr=r(LVe," (BigBird model)"),LVe.forEach(t),CJr=i(De),q3=n(De,"LI",{});var yVe=s(q3);j3e=n(yVe,"STRONG",{});var EXt=s(j3e);wJr=r(EXt,"distilbert"),EXt.forEach(t),AJr=r(yVe," \u2014 "),qoe=n(yVe,"A",{href:!0});var CXt=s(qoe);LJr=r(CXt,"FlaxDistilBertForSequenceClassification"),CXt.forEach(t),yJr=r(yVe," (DistilBERT model)"),yVe.forEach(t),xJr=i(De),j3=n(De,"LI",{});var xVe=s(j3);D3e=n(xVe,"STRONG",{});var wXt=s(D3e);$Jr=r(wXt,"electra"),wXt.forEach(t),kJr=r(xVe," \u2014 "),joe=n(xVe,"A",{href:!0});var AXt=s(joe);SJr=r(AXt,"FlaxElectraForSequenceClassification"),AXt.forEach(t),RJr=r(xVe," (ELECTRA model)"),xVe.forEach(t),PJr=i(De),D3=n(De,"LI",{});var $Ve=s(D3);G3e=n($Ve,"STRONG",{});var LXt=s(G3e);BJr=r(LXt,"mbart"),LXt.forEach(t),NJr=r($Ve," \u2014 "),Doe=n($Ve,"A",{href:!0});var yXt=s(Doe);IJr=r(yXt,"FlaxMBartForSequenceClassification"),yXt.forEach(t),qJr=r($Ve," (mBART model)"),$Ve.forEach(t),jJr=i(De),G3=n(De,"LI",{});var kVe=s(G3);O3e=n(kVe,"STRONG",{});var xXt=s(O3e);DJr=r(xXt,"roberta"),xXt.forEach(t),GJr=r(kVe," \u2014 "),Goe=n(kVe,"A",{href:!0});var $Xt=s(Goe);OJr=r($Xt,"FlaxRobertaForSequenceClassification"),$Xt.forEach(t),VJr=r(kVe," (RoBERTa model)"),kVe.forEach(t),XJr=i(De),O3=n(De,"LI",{});var SVe=s(O3);V3e=n(SVe,"STRONG",{});var kXt=s(V3e);zJr=r(kXt,"roformer"),kXt.forEach(t),QJr=r(SVe," \u2014 "),Ooe=n(SVe,"A",{href:!0});var SXt=s(Ooe);WJr=r(SXt,"FlaxRoFormerForSequenceClassification"),SXt.forEach(t),HJr=r(SVe," (RoFormer model)"),SVe.forEach(t),UJr=i(De),V3=n(De,"LI",{});var RVe=s(V3);X3e=n(RVe,"STRONG",{});var RXt=s(X3e);JJr=r(RXt,"xlm-roberta"),RXt.forEach(t),YJr=r(RVe," \u2014 "),Voe=n(RVe,"A",{href:!0});var PXt=s(Voe);KJr=r(PXt,"FlaxXLMRobertaForSequenceClassification"),PXt.forEach(t),ZJr=r(RVe," (XLM-RoBERTa model)"),RVe.forEach(t),De.forEach(t),eYr=i(pi),T(X3.$$.fragment,pi),pi.forEach(t),hi.forEach(t),tQe=i(f),hf=n(f,"H2",{class:!0});var mHe=s(hf);z3=n(mHe,"A",{id:!0,class:!0,href:!0});var BXt=s(z3);z3e=n(BXt,"SPAN",{});var NXt=s(z3e);T(D$.$$.fragment,NXt),NXt.forEach(t),BXt.forEach(t),oYr=i(mHe),Q3e=n(mHe,"SPAN",{});var IXt=s(Q3e);rYr=r(IXt,"FlaxAutoModelForQuestionAnswering"),IXt.forEach(t),mHe.forEach(t),aQe=i(f),Tr=n(f,"DIV",{class:!0});var _i=s(Tr);T(G$.$$.fragment,_i),tYr=i(_i),pf=n(_i,"P",{});var Fae=s(pf);aYr=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Xoe=n(Fae,"A",{href:!0});var qXt=s(Xoe);nYr=r(qXt,"from_pretrained()"),qXt.forEach(t),sYr=r(Fae," class method or the "),zoe=n(Fae,"A",{href:!0});var jXt=s(zoe);lYr=r(jXt,"from_config()"),jXt.forEach(t),iYr=r(Fae,` class
method.`),Fae.forEach(t),dYr=i(_i),O$=n(_i,"P",{});var gHe=s(O$);cYr=r(gHe,"This class cannot be instantiated directly using "),W3e=n(gHe,"CODE",{});var DXt=s(W3e);fYr=r(DXt,"__init__()"),DXt.forEach(t),mYr=r(gHe," (throws an error)."),gHe.forEach(t),gYr=i(_i),Zt=n(_i,"DIV",{class:!0});var zA=s(Zt);T(V$.$$.fragment,zA),hYr=i(zA),H3e=n(zA,"P",{});var GXt=s(H3e);pYr=r(GXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),GXt.forEach(t),_Yr=i(zA),_f=n(zA,"P",{});var Tae=s(_f);uYr=r(Tae,`Note:
Loading a model from its configuration file does `),U3e=n(Tae,"STRONG",{});var OXt=s(U3e);bYr=r(OXt,"not"),OXt.forEach(t),vYr=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qoe=n(Tae,"A",{href:!0});var VXt=s(Qoe);FYr=r(VXt,"from_pretrained()"),VXt.forEach(t),TYr=r(Tae," to load the model weights."),Tae.forEach(t),MYr=i(zA),T(Q3.$$.fragment,zA),zA.forEach(t),EYr=i(_i),Ur=n(_i,"DIV",{class:!0});var ui=s(Ur);T(X$.$$.fragment,ui),CYr=i(ui),J3e=n(ui,"P",{});var XXt=s(J3e);wYr=r(XXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XXt.forEach(t),AYr=i(ui),Ln=n(ui,"P",{});var QA=s(Ln);LYr=r(QA,"The model class to instantiate is selected based on the "),Y3e=n(QA,"CODE",{});var zXt=s(Y3e);yYr=r(zXt,"model_type"),zXt.forEach(t),xYr=r(QA,` property of the config object (either
passed as an argument or loaded from `),K3e=n(QA,"CODE",{});var QXt=s(K3e);$Yr=r(QXt,"pretrained_model_name_or_path"),QXt.forEach(t),kYr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=n(QA,"CODE",{});var WXt=s(Z3e);SYr=r(WXt,"pretrained_model_name_or_path"),WXt.forEach(t),RYr=r(QA,":"),QA.forEach(t),PYr=i(ui),Re=n(ui,"UL",{});var Ge=s(Re);W3=n(Ge,"LI",{});var PVe=s(W3);e5e=n(PVe,"STRONG",{});var HXt=s(e5e);BYr=r(HXt,"albert"),HXt.forEach(t),NYr=r(PVe," \u2014 "),Woe=n(PVe,"A",{href:!0});var UXt=s(Woe);IYr=r(UXt,"FlaxAlbertForQuestionAnswering"),UXt.forEach(t),qYr=r(PVe," (ALBERT model)"),PVe.forEach(t),jYr=i(Ge),H3=n(Ge,"LI",{});var BVe=s(H3);o5e=n(BVe,"STRONG",{});var JXt=s(o5e);DYr=r(JXt,"bart"),JXt.forEach(t),GYr=r(BVe," \u2014 "),Hoe=n(BVe,"A",{href:!0});var YXt=s(Hoe);OYr=r(YXt,"FlaxBartForQuestionAnswering"),YXt.forEach(t),VYr=r(BVe," (BART model)"),BVe.forEach(t),XYr=i(Ge),U3=n(Ge,"LI",{});var NVe=s(U3);r5e=n(NVe,"STRONG",{});var KXt=s(r5e);zYr=r(KXt,"bert"),KXt.forEach(t),QYr=r(NVe," \u2014 "),Uoe=n(NVe,"A",{href:!0});var ZXt=s(Uoe);WYr=r(ZXt,"FlaxBertForQuestionAnswering"),ZXt.forEach(t),HYr=r(NVe," (BERT model)"),NVe.forEach(t),UYr=i(Ge),J3=n(Ge,"LI",{});var IVe=s(J3);t5e=n(IVe,"STRONG",{});var ezt=s(t5e);JYr=r(ezt,"big_bird"),ezt.forEach(t),YYr=r(IVe," \u2014 "),Joe=n(IVe,"A",{href:!0});var ozt=s(Joe);KYr=r(ozt,"FlaxBigBirdForQuestionAnswering"),ozt.forEach(t),ZYr=r(IVe," (BigBird model)"),IVe.forEach(t),eKr=i(Ge),Y3=n(Ge,"LI",{});var qVe=s(Y3);a5e=n(qVe,"STRONG",{});var rzt=s(a5e);oKr=r(rzt,"distilbert"),rzt.forEach(t),rKr=r(qVe," \u2014 "),Yoe=n(qVe,"A",{href:!0});var tzt=s(Yoe);tKr=r(tzt,"FlaxDistilBertForQuestionAnswering"),tzt.forEach(t),aKr=r(qVe," (DistilBERT model)"),qVe.forEach(t),nKr=i(Ge),K3=n(Ge,"LI",{});var jVe=s(K3);n5e=n(jVe,"STRONG",{});var azt=s(n5e);sKr=r(azt,"electra"),azt.forEach(t),lKr=r(jVe," \u2014 "),Koe=n(jVe,"A",{href:!0});var nzt=s(Koe);iKr=r(nzt,"FlaxElectraForQuestionAnswering"),nzt.forEach(t),dKr=r(jVe," (ELECTRA model)"),jVe.forEach(t),cKr=i(Ge),Z3=n(Ge,"LI",{});var DVe=s(Z3);s5e=n(DVe,"STRONG",{});var szt=s(s5e);fKr=r(szt,"mbart"),szt.forEach(t),mKr=r(DVe," \u2014 "),Zoe=n(DVe,"A",{href:!0});var lzt=s(Zoe);gKr=r(lzt,"FlaxMBartForQuestionAnswering"),lzt.forEach(t),hKr=r(DVe," (mBART model)"),DVe.forEach(t),pKr=i(Ge),e5=n(Ge,"LI",{});var GVe=s(e5);l5e=n(GVe,"STRONG",{});var izt=s(l5e);_Kr=r(izt,"roberta"),izt.forEach(t),uKr=r(GVe," \u2014 "),ere=n(GVe,"A",{href:!0});var dzt=s(ere);bKr=r(dzt,"FlaxRobertaForQuestionAnswering"),dzt.forEach(t),vKr=r(GVe," (RoBERTa model)"),GVe.forEach(t),FKr=i(Ge),o5=n(Ge,"LI",{});var OVe=s(o5);i5e=n(OVe,"STRONG",{});var czt=s(i5e);TKr=r(czt,"roformer"),czt.forEach(t),MKr=r(OVe," \u2014 "),ore=n(OVe,"A",{href:!0});var fzt=s(ore);EKr=r(fzt,"FlaxRoFormerForQuestionAnswering"),fzt.forEach(t),CKr=r(OVe," (RoFormer model)"),OVe.forEach(t),wKr=i(Ge),r5=n(Ge,"LI",{});var VVe=s(r5);d5e=n(VVe,"STRONG",{});var mzt=s(d5e);AKr=r(mzt,"xlm-roberta"),mzt.forEach(t),LKr=r(VVe," \u2014 "),rre=n(VVe,"A",{href:!0});var gzt=s(rre);yKr=r(gzt,"FlaxXLMRobertaForQuestionAnswering"),gzt.forEach(t),xKr=r(VVe," (XLM-RoBERTa model)"),VVe.forEach(t),Ge.forEach(t),$Kr=i(ui),T(t5.$$.fragment,ui),ui.forEach(t),_i.forEach(t),nQe=i(f),uf=n(f,"H2",{class:!0});var hHe=s(uf);a5=n(hHe,"A",{id:!0,class:!0,href:!0});var hzt=s(a5);c5e=n(hzt,"SPAN",{});var pzt=s(c5e);T(z$.$$.fragment,pzt),pzt.forEach(t),hzt.forEach(t),kKr=i(hHe),f5e=n(hHe,"SPAN",{});var _zt=s(f5e);SKr=r(_zt,"FlaxAutoModelForTokenClassification"),_zt.forEach(t),hHe.forEach(t),sQe=i(f),Mr=n(f,"DIV",{class:!0});var bi=s(Mr);T(Q$.$$.fragment,bi),RKr=i(bi),bf=n(bi,"P",{});var Mae=s(bf);PKr=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tre=n(Mae,"A",{href:!0});var uzt=s(tre);BKr=r(uzt,"from_pretrained()"),uzt.forEach(t),NKr=r(Mae," class method or the "),are=n(Mae,"A",{href:!0});var bzt=s(are);IKr=r(bzt,"from_config()"),bzt.forEach(t),qKr=r(Mae,` class
method.`),Mae.forEach(t),jKr=i(bi),W$=n(bi,"P",{});var pHe=s(W$);DKr=r(pHe,"This class cannot be instantiated directly using "),m5e=n(pHe,"CODE",{});var vzt=s(m5e);GKr=r(vzt,"__init__()"),vzt.forEach(t),OKr=r(pHe," (throws an error)."),pHe.forEach(t),VKr=i(bi),ea=n(bi,"DIV",{class:!0});var WA=s(ea);T(H$.$$.fragment,WA),XKr=i(WA),g5e=n(WA,"P",{});var Fzt=s(g5e);zKr=r(Fzt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Fzt.forEach(t),QKr=i(WA),vf=n(WA,"P",{});var Eae=s(vf);WKr=r(Eae,`Note:
Loading a model from its configuration file does `),h5e=n(Eae,"STRONG",{});var Tzt=s(h5e);HKr=r(Tzt,"not"),Tzt.forEach(t),UKr=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=n(Eae,"A",{href:!0});var Mzt=s(nre);JKr=r(Mzt,"from_pretrained()"),Mzt.forEach(t),YKr=r(Eae," to load the model weights."),Eae.forEach(t),KKr=i(WA),T(n5.$$.fragment,WA),WA.forEach(t),ZKr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(U$.$$.fragment,vi),eZr=i(vi),p5e=n(vi,"P",{});var Ezt=s(p5e);oZr=r(Ezt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ezt.forEach(t),rZr=i(vi),yn=n(vi,"P",{});var HA=s(yn);tZr=r(HA,"The model class to instantiate is selected based on the "),_5e=n(HA,"CODE",{});var Czt=s(_5e);aZr=r(Czt,"model_type"),Czt.forEach(t),nZr=r(HA,` property of the config object (either
passed as an argument or loaded from `),u5e=n(HA,"CODE",{});var wzt=s(u5e);sZr=r(wzt,"pretrained_model_name_or_path"),wzt.forEach(t),lZr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=n(HA,"CODE",{});var Azt=s(b5e);iZr=r(Azt,"pretrained_model_name_or_path"),Azt.forEach(t),dZr=r(HA,":"),HA.forEach(t),cZr=i(vi),Ve=n(vi,"UL",{});var Mo=s(Ve);s5=n(Mo,"LI",{});var XVe=s(s5);v5e=n(XVe,"STRONG",{});var Lzt=s(v5e);fZr=r(Lzt,"albert"),Lzt.forEach(t),mZr=r(XVe," \u2014 "),sre=n(XVe,"A",{href:!0});var yzt=s(sre);gZr=r(yzt,"FlaxAlbertForTokenClassification"),yzt.forEach(t),hZr=r(XVe," (ALBERT model)"),XVe.forEach(t),pZr=i(Mo),l5=n(Mo,"LI",{});var zVe=s(l5);F5e=n(zVe,"STRONG",{});var xzt=s(F5e);_Zr=r(xzt,"bert"),xzt.forEach(t),uZr=r(zVe," \u2014 "),lre=n(zVe,"A",{href:!0});var $zt=s(lre);bZr=r($zt,"FlaxBertForTokenClassification"),$zt.forEach(t),vZr=r(zVe," (BERT model)"),zVe.forEach(t),FZr=i(Mo),i5=n(Mo,"LI",{});var QVe=s(i5);T5e=n(QVe,"STRONG",{});var kzt=s(T5e);TZr=r(kzt,"big_bird"),kzt.forEach(t),MZr=r(QVe," \u2014 "),ire=n(QVe,"A",{href:!0});var Szt=s(ire);EZr=r(Szt,"FlaxBigBirdForTokenClassification"),Szt.forEach(t),CZr=r(QVe," (BigBird model)"),QVe.forEach(t),wZr=i(Mo),d5=n(Mo,"LI",{});var WVe=s(d5);M5e=n(WVe,"STRONG",{});var Rzt=s(M5e);AZr=r(Rzt,"distilbert"),Rzt.forEach(t),LZr=r(WVe," \u2014 "),dre=n(WVe,"A",{href:!0});var Pzt=s(dre);yZr=r(Pzt,"FlaxDistilBertForTokenClassification"),Pzt.forEach(t),xZr=r(WVe," (DistilBERT model)"),WVe.forEach(t),$Zr=i(Mo),c5=n(Mo,"LI",{});var HVe=s(c5);E5e=n(HVe,"STRONG",{});var Bzt=s(E5e);kZr=r(Bzt,"electra"),Bzt.forEach(t),SZr=r(HVe," \u2014 "),cre=n(HVe,"A",{href:!0});var Nzt=s(cre);RZr=r(Nzt,"FlaxElectraForTokenClassification"),Nzt.forEach(t),PZr=r(HVe," (ELECTRA model)"),HVe.forEach(t),BZr=i(Mo),f5=n(Mo,"LI",{});var UVe=s(f5);C5e=n(UVe,"STRONG",{});var Izt=s(C5e);NZr=r(Izt,"roberta"),Izt.forEach(t),IZr=r(UVe," \u2014 "),fre=n(UVe,"A",{href:!0});var qzt=s(fre);qZr=r(qzt,"FlaxRobertaForTokenClassification"),qzt.forEach(t),jZr=r(UVe," (RoBERTa model)"),UVe.forEach(t),DZr=i(Mo),m5=n(Mo,"LI",{});var JVe=s(m5);w5e=n(JVe,"STRONG",{});var jzt=s(w5e);GZr=r(jzt,"roformer"),jzt.forEach(t),OZr=r(JVe," \u2014 "),mre=n(JVe,"A",{href:!0});var Dzt=s(mre);VZr=r(Dzt,"FlaxRoFormerForTokenClassification"),Dzt.forEach(t),XZr=r(JVe," (RoFormer model)"),JVe.forEach(t),zZr=i(Mo),g5=n(Mo,"LI",{});var YVe=s(g5);A5e=n(YVe,"STRONG",{});var Gzt=s(A5e);QZr=r(Gzt,"xlm-roberta"),Gzt.forEach(t),WZr=r(YVe," \u2014 "),gre=n(YVe,"A",{href:!0});var Ozt=s(gre);HZr=r(Ozt,"FlaxXLMRobertaForTokenClassification"),Ozt.forEach(t),UZr=r(YVe," (XLM-RoBERTa model)"),YVe.forEach(t),Mo.forEach(t),JZr=i(vi),T(h5.$$.fragment,vi),vi.forEach(t),bi.forEach(t),lQe=i(f),Ff=n(f,"H2",{class:!0});var _He=s(Ff);p5=n(_He,"A",{id:!0,class:!0,href:!0});var Vzt=s(p5);L5e=n(Vzt,"SPAN",{});var Xzt=s(L5e);T(J$.$$.fragment,Xzt),Xzt.forEach(t),Vzt.forEach(t),YZr=i(_He),y5e=n(_He,"SPAN",{});var zzt=s(y5e);KZr=r(zzt,"FlaxAutoModelForMultipleChoice"),zzt.forEach(t),_He.forEach(t),iQe=i(f),Er=n(f,"DIV",{class:!0});var Fi=s(Er);T(Y$.$$.fragment,Fi),ZZr=i(Fi),Tf=n(Fi,"P",{});var Cae=s(Tf);eet=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hre=n(Cae,"A",{href:!0});var Qzt=s(hre);oet=r(Qzt,"from_pretrained()"),Qzt.forEach(t),ret=r(Cae," class method or the "),pre=n(Cae,"A",{href:!0});var Wzt=s(pre);tet=r(Wzt,"from_config()"),Wzt.forEach(t),aet=r(Cae,` class
method.`),Cae.forEach(t),net=i(Fi),K$=n(Fi,"P",{});var uHe=s(K$);set=r(uHe,"This class cannot be instantiated directly using "),x5e=n(uHe,"CODE",{});var Hzt=s(x5e);iet=r(Hzt,"__init__()"),Hzt.forEach(t),det=r(uHe," (throws an error)."),uHe.forEach(t),cet=i(Fi),oa=n(Fi,"DIV",{class:!0});var UA=s(oa);T(Z$.$$.fragment,UA),fet=i(UA),$5e=n(UA,"P",{});var Uzt=s($5e);met=r(Uzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Uzt.forEach(t),get=i(UA),Mf=n(UA,"P",{});var wae=s(Mf);het=r(wae,`Note:
Loading a model from its configuration file does `),k5e=n(wae,"STRONG",{});var Jzt=s(k5e);pet=r(Jzt,"not"),Jzt.forEach(t),_et=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),_re=n(wae,"A",{href:!0});var Yzt=s(_re);uet=r(Yzt,"from_pretrained()"),Yzt.forEach(t),bet=r(wae," to load the model weights."),wae.forEach(t),vet=i(UA),T(_5.$$.fragment,UA),UA.forEach(t),Fet=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(ek.$$.fragment,Ti),Tet=i(Ti),S5e=n(Ti,"P",{});var Kzt=s(S5e);Met=r(Kzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Kzt.forEach(t),Eet=i(Ti),xn=n(Ti,"P",{});var JA=s(xn);Cet=r(JA,"The model class to instantiate is selected based on the "),R5e=n(JA,"CODE",{});var Zzt=s(R5e);wet=r(Zzt,"model_type"),Zzt.forEach(t),Aet=r(JA,` property of the config object (either
passed as an argument or loaded from `),P5e=n(JA,"CODE",{});var eQt=s(P5e);Let=r(eQt,"pretrained_model_name_or_path"),eQt.forEach(t),yet=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(JA,"CODE",{});var oQt=s(B5e);xet=r(oQt,"pretrained_model_name_or_path"),oQt.forEach(t),$et=r(JA,":"),JA.forEach(t),ket=i(Ti),Xe=n(Ti,"UL",{});var Eo=s(Xe);u5=n(Eo,"LI",{});var KVe=s(u5);N5e=n(KVe,"STRONG",{});var rQt=s(N5e);Set=r(rQt,"albert"),rQt.forEach(t),Ret=r(KVe," \u2014 "),ure=n(KVe,"A",{href:!0});var tQt=s(ure);Pet=r(tQt,"FlaxAlbertForMultipleChoice"),tQt.forEach(t),Bet=r(KVe," (ALBERT model)"),KVe.forEach(t),Net=i(Eo),b5=n(Eo,"LI",{});var ZVe=s(b5);I5e=n(ZVe,"STRONG",{});var aQt=s(I5e);Iet=r(aQt,"bert"),aQt.forEach(t),qet=r(ZVe," \u2014 "),bre=n(ZVe,"A",{href:!0});var nQt=s(bre);jet=r(nQt,"FlaxBertForMultipleChoice"),nQt.forEach(t),Det=r(ZVe," (BERT model)"),ZVe.forEach(t),Get=i(Eo),v5=n(Eo,"LI",{});var eXe=s(v5);q5e=n(eXe,"STRONG",{});var sQt=s(q5e);Oet=r(sQt,"big_bird"),sQt.forEach(t),Vet=r(eXe," \u2014 "),vre=n(eXe,"A",{href:!0});var lQt=s(vre);Xet=r(lQt,"FlaxBigBirdForMultipleChoice"),lQt.forEach(t),zet=r(eXe," (BigBird model)"),eXe.forEach(t),Qet=i(Eo),F5=n(Eo,"LI",{});var oXe=s(F5);j5e=n(oXe,"STRONG",{});var iQt=s(j5e);Wet=r(iQt,"distilbert"),iQt.forEach(t),Het=r(oXe," \u2014 "),Fre=n(oXe,"A",{href:!0});var dQt=s(Fre);Uet=r(dQt,"FlaxDistilBertForMultipleChoice"),dQt.forEach(t),Jet=r(oXe," (DistilBERT model)"),oXe.forEach(t),Yet=i(Eo),T5=n(Eo,"LI",{});var rXe=s(T5);D5e=n(rXe,"STRONG",{});var cQt=s(D5e);Ket=r(cQt,"electra"),cQt.forEach(t),Zet=r(rXe," \u2014 "),Tre=n(rXe,"A",{href:!0});var fQt=s(Tre);eot=r(fQt,"FlaxElectraForMultipleChoice"),fQt.forEach(t),oot=r(rXe," (ELECTRA model)"),rXe.forEach(t),rot=i(Eo),M5=n(Eo,"LI",{});var tXe=s(M5);G5e=n(tXe,"STRONG",{});var mQt=s(G5e);tot=r(mQt,"roberta"),mQt.forEach(t),aot=r(tXe," \u2014 "),Mre=n(tXe,"A",{href:!0});var gQt=s(Mre);not=r(gQt,"FlaxRobertaForMultipleChoice"),gQt.forEach(t),sot=r(tXe," (RoBERTa model)"),tXe.forEach(t),lot=i(Eo),E5=n(Eo,"LI",{});var aXe=s(E5);O5e=n(aXe,"STRONG",{});var hQt=s(O5e);iot=r(hQt,"roformer"),hQt.forEach(t),dot=r(aXe," \u2014 "),Ere=n(aXe,"A",{href:!0});var pQt=s(Ere);cot=r(pQt,"FlaxRoFormerForMultipleChoice"),pQt.forEach(t),fot=r(aXe," (RoFormer model)"),aXe.forEach(t),mot=i(Eo),C5=n(Eo,"LI",{});var nXe=s(C5);V5e=n(nXe,"STRONG",{});var _Qt=s(V5e);got=r(_Qt,"xlm-roberta"),_Qt.forEach(t),hot=r(nXe," \u2014 "),Cre=n(nXe,"A",{href:!0});var uQt=s(Cre);pot=r(uQt,"FlaxXLMRobertaForMultipleChoice"),uQt.forEach(t),_ot=r(nXe," (XLM-RoBERTa model)"),nXe.forEach(t),Eo.forEach(t),uot=i(Ti),T(w5.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),dQe=i(f),Ef=n(f,"H2",{class:!0});var bHe=s(Ef);A5=n(bHe,"A",{id:!0,class:!0,href:!0});var bQt=s(A5);X5e=n(bQt,"SPAN",{});var vQt=s(X5e);T(ok.$$.fragment,vQt),vQt.forEach(t),bQt.forEach(t),bot=i(bHe),z5e=n(bHe,"SPAN",{});var FQt=s(z5e);vot=r(FQt,"FlaxAutoModelForNextSentencePrediction"),FQt.forEach(t),bHe.forEach(t),cQe=i(f),Cr=n(f,"DIV",{class:!0});var Mi=s(Cr);T(rk.$$.fragment,Mi),Fot=i(Mi),Cf=n(Mi,"P",{});var Aae=s(Cf);Tot=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wre=n(Aae,"A",{href:!0});var TQt=s(wre);Mot=r(TQt,"from_pretrained()"),TQt.forEach(t),Eot=r(Aae," class method or the "),Are=n(Aae,"A",{href:!0});var MQt=s(Are);Cot=r(MQt,"from_config()"),MQt.forEach(t),wot=r(Aae,` class
method.`),Aae.forEach(t),Aot=i(Mi),tk=n(Mi,"P",{});var vHe=s(tk);Lot=r(vHe,"This class cannot be instantiated directly using "),Q5e=n(vHe,"CODE",{});var EQt=s(Q5e);yot=r(EQt,"__init__()"),EQt.forEach(t),xot=r(vHe," (throws an error)."),vHe.forEach(t),$ot=i(Mi),ra=n(Mi,"DIV",{class:!0});var YA=s(ra);T(ak.$$.fragment,YA),kot=i(YA),W5e=n(YA,"P",{});var CQt=s(W5e);Sot=r(CQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CQt.forEach(t),Rot=i(YA),wf=n(YA,"P",{});var Lae=s(wf);Pot=r(Lae,`Note:
Loading a model from its configuration file does `),H5e=n(Lae,"STRONG",{});var wQt=s(H5e);Bot=r(wQt,"not"),wQt.forEach(t),Not=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=n(Lae,"A",{href:!0});var AQt=s(Lre);Iot=r(AQt,"from_pretrained()"),AQt.forEach(t),qot=r(Lae," to load the model weights."),Lae.forEach(t),jot=i(YA),T(L5.$$.fragment,YA),YA.forEach(t),Dot=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(nk.$$.fragment,Ei),Got=i(Ei),U5e=n(Ei,"P",{});var LQt=s(U5e);Oot=r(LQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LQt.forEach(t),Vot=i(Ei),$n=n(Ei,"P",{});var KA=s($n);Xot=r(KA,"The model class to instantiate is selected based on the "),J5e=n(KA,"CODE",{});var yQt=s(J5e);zot=r(yQt,"model_type"),yQt.forEach(t),Qot=r(KA,` property of the config object (either
passed as an argument or loaded from `),Y5e=n(KA,"CODE",{});var xQt=s(Y5e);Wot=r(xQt,"pretrained_model_name_or_path"),xQt.forEach(t),Hot=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=n(KA,"CODE",{});var $Qt=s(K5e);Uot=r($Qt,"pretrained_model_name_or_path"),$Qt.forEach(t),Jot=r(KA,":"),KA.forEach(t),Yot=i(Ei),Z5e=n(Ei,"UL",{});var kQt=s(Z5e);y5=n(kQt,"LI",{});var sXe=s(y5);ewe=n(sXe,"STRONG",{});var SQt=s(ewe);Kot=r(SQt,"bert"),SQt.forEach(t),Zot=r(sXe," \u2014 "),yre=n(sXe,"A",{href:!0});var RQt=s(yre);ert=r(RQt,"FlaxBertForNextSentencePrediction"),RQt.forEach(t),ort=r(sXe," (BERT model)"),sXe.forEach(t),kQt.forEach(t),rrt=i(Ei),T(x5.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),fQe=i(f),Af=n(f,"H2",{class:!0});var FHe=s(Af);$5=n(FHe,"A",{id:!0,class:!0,href:!0});var PQt=s($5);owe=n(PQt,"SPAN",{});var BQt=s(owe);T(sk.$$.fragment,BQt),BQt.forEach(t),PQt.forEach(t),trt=i(FHe),rwe=n(FHe,"SPAN",{});var NQt=s(rwe);art=r(NQt,"FlaxAutoModelForImageClassification"),NQt.forEach(t),FHe.forEach(t),mQe=i(f),wr=n(f,"DIV",{class:!0});var Ci=s(wr);T(lk.$$.fragment,Ci),nrt=i(Ci),Lf=n(Ci,"P",{});var yae=s(Lf);srt=r(yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xre=n(yae,"A",{href:!0});var IQt=s(xre);lrt=r(IQt,"from_pretrained()"),IQt.forEach(t),irt=r(yae," class method or the "),$re=n(yae,"A",{href:!0});var qQt=s($re);drt=r(qQt,"from_config()"),qQt.forEach(t),crt=r(yae,` class
method.`),yae.forEach(t),frt=i(Ci),ik=n(Ci,"P",{});var THe=s(ik);mrt=r(THe,"This class cannot be instantiated directly using "),twe=n(THe,"CODE",{});var jQt=s(twe);grt=r(jQt,"__init__()"),jQt.forEach(t),hrt=r(THe," (throws an error)."),THe.forEach(t),prt=i(Ci),ta=n(Ci,"DIV",{class:!0});var ZA=s(ta);T(dk.$$.fragment,ZA),_rt=i(ZA),awe=n(ZA,"P",{});var DQt=s(awe);urt=r(DQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DQt.forEach(t),brt=i(ZA),yf=n(ZA,"P",{});var xae=s(yf);vrt=r(xae,`Note:
Loading a model from its configuration file does `),nwe=n(xae,"STRONG",{});var GQt=s(nwe);Frt=r(GQt,"not"),GQt.forEach(t),Trt=r(xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=n(xae,"A",{href:!0});var OQt=s(kre);Mrt=r(OQt,"from_pretrained()"),OQt.forEach(t),Ert=r(xae," to load the model weights."),xae.forEach(t),Crt=i(ZA),T(k5.$$.fragment,ZA),ZA.forEach(t),wrt=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(ck.$$.fragment,wi),Art=i(wi),swe=n(wi,"P",{});var VQt=s(swe);Lrt=r(VQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VQt.forEach(t),yrt=i(wi),kn=n(wi,"P",{});var e6=s(kn);xrt=r(e6,"The model class to instantiate is selected based on the "),lwe=n(e6,"CODE",{});var XQt=s(lwe);$rt=r(XQt,"model_type"),XQt.forEach(t),krt=r(e6,` property of the config object (either
passed as an argument or loaded from `),iwe=n(e6,"CODE",{});var zQt=s(iwe);Srt=r(zQt,"pretrained_model_name_or_path"),zQt.forEach(t),Rrt=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dwe=n(e6,"CODE",{});var QQt=s(dwe);Prt=r(QQt,"pretrained_model_name_or_path"),QQt.forEach(t),Brt=r(e6,":"),e6.forEach(t),Nrt=i(wi),fk=n(wi,"UL",{});var MHe=s(fk);S5=n(MHe,"LI",{});var lXe=s(S5);cwe=n(lXe,"STRONG",{});var WQt=s(cwe);Irt=r(WQt,"beit"),WQt.forEach(t),qrt=r(lXe," \u2014 "),Sre=n(lXe,"A",{href:!0});var HQt=s(Sre);jrt=r(HQt,"FlaxBeitForImageClassification"),HQt.forEach(t),Drt=r(lXe," (BEiT model)"),lXe.forEach(t),Grt=i(MHe),R5=n(MHe,"LI",{});var iXe=s(R5);fwe=n(iXe,"STRONG",{});var UQt=s(fwe);Ort=r(UQt,"vit"),UQt.forEach(t),Vrt=r(iXe," \u2014 "),Rre=n(iXe,"A",{href:!0});var JQt=s(Rre);Xrt=r(JQt,"FlaxViTForImageClassification"),JQt.forEach(t),zrt=r(iXe," (ViT model)"),iXe.forEach(t),MHe.forEach(t),Qrt=i(wi),T(P5.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),gQe=i(f),xf=n(f,"H2",{class:!0});var EHe=s(xf);B5=n(EHe,"A",{id:!0,class:!0,href:!0});var YQt=s(B5);mwe=n(YQt,"SPAN",{});var KQt=s(mwe);T(mk.$$.fragment,KQt),KQt.forEach(t),YQt.forEach(t),Wrt=i(EHe),gwe=n(EHe,"SPAN",{});var ZQt=s(gwe);Hrt=r(ZQt,"FlaxAutoModelForVision2Seq"),ZQt.forEach(t),EHe.forEach(t),hQe=i(f),Ar=n(f,"DIV",{class:!0});var Ai=s(Ar);T(gk.$$.fragment,Ai),Urt=i(Ai),$f=n(Ai,"P",{});var $ae=s($f);Jrt=r($ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Pre=n($ae,"A",{href:!0});var eWt=s(Pre);Yrt=r(eWt,"from_pretrained()"),eWt.forEach(t),Krt=r($ae," class method or the "),Bre=n($ae,"A",{href:!0});var oWt=s(Bre);Zrt=r(oWt,"from_config()"),oWt.forEach(t),ett=r($ae,` class
method.`),$ae.forEach(t),ott=i(Ai),hk=n(Ai,"P",{});var CHe=s(hk);rtt=r(CHe,"This class cannot be instantiated directly using "),hwe=n(CHe,"CODE",{});var rWt=s(hwe);ttt=r(rWt,"__init__()"),rWt.forEach(t),att=r(CHe," (throws an error)."),CHe.forEach(t),ntt=i(Ai),aa=n(Ai,"DIV",{class:!0});var o6=s(aa);T(pk.$$.fragment,o6),stt=i(o6),pwe=n(o6,"P",{});var tWt=s(pwe);ltt=r(tWt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tWt.forEach(t),itt=i(o6),kf=n(o6,"P",{});var kae=s(kf);dtt=r(kae,`Note:
Loading a model from its configuration file does `),_we=n(kae,"STRONG",{});var aWt=s(_we);ctt=r(aWt,"not"),aWt.forEach(t),ftt=r(kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nre=n(kae,"A",{href:!0});var nWt=s(Nre);mtt=r(nWt,"from_pretrained()"),nWt.forEach(t),gtt=r(kae," to load the model weights."),kae.forEach(t),htt=i(o6),T(N5.$$.fragment,o6),o6.forEach(t),ptt=i(Ai),et=n(Ai,"DIV",{class:!0});var Li=s(et);T(_k.$$.fragment,Li),_tt=i(Li),uwe=n(Li,"P",{});var sWt=s(uwe);utt=r(sWt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sWt.forEach(t),btt=i(Li),Sn=n(Li,"P",{});var r6=s(Sn);vtt=r(r6,"The model class to instantiate is selected based on the "),bwe=n(r6,"CODE",{});var lWt=s(bwe);Ftt=r(lWt,"model_type"),lWt.forEach(t),Ttt=r(r6,` property of the config object (either
passed as an argument or loaded from `),vwe=n(r6,"CODE",{});var iWt=s(vwe);Mtt=r(iWt,"pretrained_model_name_or_path"),iWt.forEach(t),Ett=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fwe=n(r6,"CODE",{});var dWt=s(Fwe);Ctt=r(dWt,"pretrained_model_name_or_path"),dWt.forEach(t),wtt=r(r6,":"),r6.forEach(t),Att=i(Li),Twe=n(Li,"UL",{});var cWt=s(Twe);I5=n(cWt,"LI",{});var dXe=s(I5);Mwe=n(dXe,"STRONG",{});var fWt=s(Mwe);Ltt=r(fWt,"vision-encoder-decoder"),fWt.forEach(t),ytt=r(dXe," \u2014 "),Ire=n(dXe,"A",{href:!0});var mWt=s(Ire);xtt=r(mWt,"FlaxVisionEncoderDecoderModel"),mWt.forEach(t),$tt=r(dXe," (Vision Encoder decoder model)"),dXe.forEach(t),cWt.forEach(t),ktt=i(Li),T(q5.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(bUt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.AutoTokenizer"),c(Pi,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertModel"),c(jf,"id","extending-the-auto-classes"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#extending-the-auto-classes"),c(Bi,"class","relative group"),c(Gf,"id","transformers.AutoConfig"),c(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gf,"href","#transformers.AutoConfig"),c(Ni,"class","relative group"),c(zS,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(QS,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertConfig"),c(WS,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartConfig"),c(HS,"href","/docs/transformers/pr_18079/en/model_doc/beit#transformers.BeitConfig"),c(US,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertConfig"),c(JS,"href","/docs/transformers/pr_18079/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(YS,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdConfig"),c(KS,"href","/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ZS,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(eR,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(oR,"href","/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomConfig"),c(rR,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertConfig"),c(tR,"href","/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineConfig"),c(aR,"href","/docs/transformers/pr_18079/en/model_doc/clip#transformers.CLIPConfig"),c(nR,"href","/docs/transformers/pr_18079/en/model_doc/codegen#transformers.CodeGenConfig"),c(sR,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertConfig"),c(lR,"href","/docs/transformers/pr_18079/en/model_doc/convnext#transformers.ConvNextConfig"),c(iR,"href","/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLConfig"),c(dR,"href","/docs/transformers/pr_18079/en/model_doc/cvt#transformers.CvtConfig"),c(cR,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(fR,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(mR,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(gR,"href","/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaConfig"),c(hR,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(pR,"href","/docs/transformers/pr_18079/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(_R,"href","/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTConfig"),c(uR,"href","/docs/transformers/pr_18079/en/model_doc/detr#transformers.DetrConfig"),c(bR,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertConfig"),c(vR,"href","/docs/transformers/pr_18079/en/model_doc/dpr#transformers.DPRConfig"),c(FR,"href","/docs/transformers/pr_18079/en/model_doc/dpt#transformers.DPTConfig"),c(TR,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraConfig"),c(MR,"href","/docs/transformers/pr_18079/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(ER,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertConfig"),c(CR,"href","/docs/transformers/pr_18079/en/model_doc/flava#transformers.FlavaConfig"),c(wR,"href","/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetConfig"),c(AR,"href","/docs/transformers/pr_18079/en/model_doc/fsmt#transformers.FSMTConfig"),c(LR,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelConfig"),c(yR,"href","/docs/transformers/pr_18079/en/model_doc/glpn#transformers.GLPNConfig"),c(xR,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Config"),c($R,"href","/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(kR,"href","/docs/transformers/pr_18079/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(SR,"href","/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJConfig"),c(RR,"href","/docs/transformers/pr_18079/en/model_doc/groupvit#transformers.GroupViTConfig"),c(PR,"href","/docs/transformers/pr_18079/en/model_doc/hubert#transformers.HubertConfig"),c(BR,"href","/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertConfig"),c(NR,"href","/docs/transformers/pr_18079/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(IR,"href","/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(qR,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(jR,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(DR,"href","/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDConfig"),c(GR,"href","/docs/transformers/pr_18079/en/model_doc/levit#transformers.LevitConfig"),c(OR,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerConfig"),c(VR,"href","/docs/transformers/pr_18079/en/model_doc/longt5#transformers.LongT5Config"),c(XR,"href","/docs/transformers/pr_18079/en/model_doc/luke#transformers.LukeConfig"),c(zR,"href","/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.LxmertConfig"),c(QR,"href","/docs/transformers/pr_18079/en/model_doc/m2m_100#transformers.M2M100Config"),c(WR,"href","/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianConfig"),c(HR,"href","/docs/transformers/pr_18079/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(UR,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartConfig"),c(JR,"href","/docs/transformers/pr_18079/en/model_doc/mctct#transformers.MCTCTConfig"),c(YR,"href","/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(KR,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(ZR,"href","/docs/transformers/pr_18079/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(eP,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetConfig"),c(oP,"href","/docs/transformers/pr_18079/en/model_doc/mt5#transformers.MT5Config"),c(rP,"href","/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpConfig"),c(tP,"href","/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaConfig"),c(aP,"href","/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(nP,"href","/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(sP,"href","/docs/transformers/pr_18079/en/model_doc/opt#transformers.OPTConfig"),c(lP,"href","/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusConfig"),c(iP,"href","/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverConfig"),c(dP,"href","/docs/transformers/pr_18079/en/model_doc/plbart#transformers.PLBartConfig"),c(cP,"href","/docs/transformers/pr_18079/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(fP,"href","/docs/transformers/pr_18079/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(mP,"href","/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(gP,"href","/docs/transformers/pr_18079/en/model_doc/rag#transformers.RagConfig"),c(hP,"href","/docs/transformers/pr_18079/en/model_doc/realm#transformers.RealmConfig"),c(pP,"href","/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerConfig"),c(_P,"href","/docs/transformers/pr_18079/en/model_doc/regnet#transformers.RegNetConfig"),c(uP,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertConfig"),c(bP,"href","/docs/transformers/pr_18079/en/model_doc/resnet#transformers.ResNetConfig"),c(vP,"href","/docs/transformers/pr_18079/en/model_doc/retribert#transformers.RetriBertConfig"),c(FP,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaConfig"),c(TP,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerConfig"),c(MP,"href","/docs/transformers/pr_18079/en/model_doc/segformer#transformers.SegformerConfig"),c(EP,"href","/docs/transformers/pr_18079/en/model_doc/sew#transformers.SEWConfig"),c(CP,"href","/docs/transformers/pr_18079/en/model_doc/sew-d#transformers.SEWDConfig"),c(wP,"href","/docs/transformers/pr_18079/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(AP,"href","/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(LP,"href","/docs/transformers/pr_18079/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(yP,"href","/docs/transformers/pr_18079/en/model_doc/splinter#transformers.SplinterConfig"),c(xP,"href","/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c($P,"href","/docs/transformers/pr_18079/en/model_doc/swin#transformers.SwinConfig"),c(kP,"href","/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5Config"),c(SP,"href","/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasConfig"),c(RP,"href","/docs/transformers/pr_18079/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(PP,"href","/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(BP,"href","/docs/transformers/pr_18079/en/model_doc/trocr#transformers.TrOCRConfig"),c(NP,"href","/docs/transformers/pr_18079/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(IP,"href","/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(qP,"href","/docs/transformers/pr_18079/en/model_doc/van#transformers.VanConfig"),c(jP,"href","/docs/transformers/pr_18079/en/model_doc/vilt#transformers.ViltConfig"),c(DP,"href","/docs/transformers/pr_18079/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(GP,"href","/docs/transformers/pr_18079/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(OP,"href","/docs/transformers/pr_18079/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(VP,"href","/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTConfig"),c(XP,"href","/docs/transformers/pr_18079/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(zP,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(QP,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(WP,"href","/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMConfig"),c(HP,"href","/docs/transformers/pr_18079/en/model_doc/xglm#transformers.XGLMConfig"),c(UP,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMConfig"),c(JP,"href","/docs/transformers/pr_18079/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(YP,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(KP,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(ZP,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetConfig"),c(eB,"href","/docs/transformers/pr_18079/en/model_doc/yolos#transformers.YolosConfig"),c(oB,"href","/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoTokenizer"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoTokenizer"),c(qi,"class","relative group"),c(rB,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(tB,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertTokenizer"),c(aB,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(nB,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartTokenizer"),c(sB,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartTokenizerFast"),c(lB,"href","/docs/transformers/pr_18079/en/model_doc/barthez#transformers.BarthezTokenizer"),c(iB,"href","/docs/transformers/pr_18079/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(dB,"href","/docs/transformers/pr_18079/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(cB,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertTokenizer"),c(fB,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertTokenizerFast"),c(mB,"href","/docs/transformers/pr_18079/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(gB,"href","/docs/transformers/pr_18079/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(hB,"href","/docs/transformers/pr_18079/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(pB,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(_B,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(uB,"href","/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(bB,"href","/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(vB,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(FB,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(TB,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(MB,"href","/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(EB,"href","/docs/transformers/pr_18079/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(CB,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertTokenizer"),c(wB,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(AB,"href","/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineTokenizer"),c(LB,"href","/docs/transformers/pr_18079/en/model_doc/clip#transformers.CLIPTokenizer"),c(yB,"href","/docs/transformers/pr_18079/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(xB,"href","/docs/transformers/pr_18079/en/model_doc/codegen#transformers.CodeGenTokenizer"),c($B,"href","/docs/transformers/pr_18079/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(kB,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(SB,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(RB,"href","/docs/transformers/pr_18079/en/model_doc/cpm#transformers.CpmTokenizer"),c(PB,"href","/docs/transformers/pr_18079/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(BB,"href","/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(NB,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IB,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qB,"href","/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaTokenizer"),c(jB,"href","/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(DB,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(GB,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(OB,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(VB,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(XB,"href","/docs/transformers/pr_18079/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(zB,"href","/docs/transformers/pr_18079/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(QB,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraTokenizer"),c(WB,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(HB,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(UB,"href","/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetTokenizer"),c(JB,"href","/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(YB,"href","/docs/transformers/pr_18079/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(KB,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelTokenizer"),c(ZB,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(eN,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oN,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rN,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tN,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aN,"href","/docs/transformers/pr_18079/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(nN,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sN,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lN,"href","/docs/transformers/pr_18079/en/model_doc/clip#transformers.CLIPTokenizer"),c(iN,"href","/docs/transformers/pr_18079/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(dN,"href","/docs/transformers/pr_18079/en/model_doc/herbert#transformers.HerbertTokenizer"),c(cN,"href","/docs/transformers/pr_18079/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(fN,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mN,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gN,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hN,"href","/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(pN,"href","/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(_N,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(uN,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(bN,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(vN,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(FN,"href","/docs/transformers/pr_18079/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(TN,"href","/docs/transformers/pr_18079/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(MN,"href","/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDTokenizer"),c(EN,"href","/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDTokenizerFast"),c(CN,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerTokenizer"),c(wN,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(AN,"href","/docs/transformers/pr_18079/en/model_doc/mt5#transformers.T5Tokenizer"),c(LN,"href","/docs/transformers/pr_18079/en/model_doc/mt5#transformers.T5TokenizerFast"),c(yN,"href","/docs/transformers/pr_18079/en/model_doc/luke#transformers.LukeTokenizer"),c(xN,"href","/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.LxmertTokenizer"),c($N,"href","/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(kN,"href","/docs/transformers/pr_18079/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(SN,"href","/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianTokenizer"),c(RN,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartTokenizer"),c(PN,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(BN,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(NN,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(IN,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertTokenizer"),c(qN,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertTokenizerFast"),c(jN,"href","/docs/transformers/pr_18079/en/model_doc/mluke#transformers.MLukeTokenizer"),c(DN,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(GN,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(ON,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(VN,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(XN,"href","/docs/transformers/pr_18079/en/model_doc/mt5#transformers.T5Tokenizer"),c(zN,"href","/docs/transformers/pr_18079/en/model_doc/mt5#transformers.T5TokenizerFast"),c(QN,"href","/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpTokenizer"),c(WN,"href","/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(HN,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertTokenizer"),c(UN,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertTokenizerFast"),c(JN,"href","/docs/transformers/pr_18079/en/model_doc/nllb#transformers.NllbTokenizer"),c(YN,"href","/docs/transformers/pr_18079/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(KN,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZN,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(eI,"href","/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(oI,"href","/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(rI,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tI,"href","/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(aI,"href","/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(nI,"href","/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(sI,"href","/docs/transformers/pr_18079/en/model_doc/phobert#transformers.PhobertTokenizer"),c(lI,"href","/docs/transformers/pr_18079/en/model_doc/plbart#transformers.PLBartTokenizer"),c(iI,"href","/docs/transformers/pr_18079/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(dI,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertTokenizer"),c(cI,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertTokenizerFast"),c(fI,"href","/docs/transformers/pr_18079/en/model_doc/rag#transformers.RagTokenizer"),c(mI,"href","/docs/transformers/pr_18079/en/model_doc/realm#transformers.RealmTokenizer"),c(gI,"href","/docs/transformers/pr_18079/en/model_doc/realm#transformers.RealmTokenizerFast"),c(hI,"href","/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerTokenizer"),c(pI,"href","/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(_I,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertTokenizer"),c(uI,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(bI,"href","/docs/transformers/pr_18079/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(vI,"href","/docs/transformers/pr_18079/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(FI,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TI,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MI,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(EI,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(CI,"href","/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(wI,"href","/docs/transformers/pr_18079/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(AI,"href","/docs/transformers/pr_18079/en/model_doc/splinter#transformers.SplinterTokenizer"),c(LI,"href","/docs/transformers/pr_18079/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(yI,"href","/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(xI,"href","/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c($I,"href","/docs/transformers/pr_18079/en/model_doc/mt5#transformers.T5Tokenizer"),c(kI,"href","/docs/transformers/pr_18079/en/model_doc/mt5#transformers.T5TokenizerFast"),c(SI,"href","/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasTokenizer"),c(RI,"href","/docs/transformers/pr_18079/en/model_doc/tapex#transformers.TapexTokenizer"),c(PI,"href","/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(BI,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertTokenizer"),c(NI,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertTokenizerFast"),c(II,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertTokenizer"),c(qI,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertTokenizerFast"),c(jI,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DI,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GI,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(OI,"href","/docs/transformers/pr_18079/en/model_doc/xglm#transformers.XGLMTokenizer"),c(VI,"href","/docs/transformers/pr_18079/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(XI,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMTokenizer"),c(zI,"href","/docs/transformers/pr_18079/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(QI,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(WI,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(HI,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaTokenizer"),c(UI,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JI,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(YI,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(KI,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZI,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"id","transformers.AutoFeatureExtractor"),c(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nh,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(eq,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(oq,"href","/docs/transformers/pr_18079/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rq,"href","/docs/transformers/pr_18079/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(tq,"href","/docs/transformers/pr_18079/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aq,"href","/docs/transformers/pr_18079/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nq,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sq,"href","/docs/transformers/pr_18079/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(lq,"href","/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(iq,"href","/docs/transformers/pr_18079/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(dq,"href","/docs/transformers/pr_18079/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(cq,"href","/docs/transformers/pr_18079/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(fq,"href","/docs/transformers/pr_18079/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(mq,"href","/docs/transformers/pr_18079/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(gq,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hq,"href","/docs/transformers/pr_18079/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(pq,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(_q,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(uq,"href","/docs/transformers/pr_18079/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(bq,"href","/docs/transformers/pr_18079/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(vq,"href","/docs/transformers/pr_18079/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_18079/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_18079/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_18079/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_18079/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wq,"href","/docs/transformers/pr_18079/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yq,"href","/docs/transformers/pr_18079/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xq,"href","/docs/transformers/pr_18079/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c($q,"href","/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kq,"href","/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Sq,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Rq,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Pq,"href","/docs/transformers/pr_18079/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fp,"id","transformers.AutoProcessor"),c(Fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fp,"href","#transformers.AutoProcessor"),c(Di,"class","relative group"),c(Bq,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Nq,"href","/docs/transformers/pr_18079/en/model_doc/clip#transformers.CLIPProcessor"),c(Iq,"href","/docs/transformers/pr_18079/en/model_doc/clip#transformers.CLIPProcessor"),c(qq,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(jq,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Dq,"href","/docs/transformers/pr_18079/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Gq,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Oq,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Xq,"href","/docs/transformers/pr_18079/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(zq,"href","/docs/transformers/pr_18079/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Qq,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Wq,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Hq,"href","/docs/transformers/pr_18079/en/model_doc/vilt#transformers.ViltProcessor"),c(Uq,"href","/docs/transformers/pr_18079/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Jq,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Yq,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Kq,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Op,"id","transformers.AutoModel"),c(Op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Op,"href","#transformers.AutoModel"),c(Oi,"class","relative group"),c(Zq,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ej,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oj,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rj,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertModel"),c(tj,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartModel"),c(aj,"href","/docs/transformers/pr_18079/en/model_doc/beit#transformers.BeitModel"),c(nj,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertModel"),c(sj,"href","/docs/transformers/pr_18079/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(lj,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdModel"),c(ij,"href","/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(dj,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(cj,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(fj,"href","/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomModel"),c(mj,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertModel"),c(gj,"href","/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineModel"),c(hj,"href","/docs/transformers/pr_18079/en/model_doc/clip#transformers.CLIPModel"),c(pj,"href","/docs/transformers/pr_18079/en/model_doc/codegen#transformers.CodeGenModel"),c(_j,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertModel"),c(uj,"href","/docs/transformers/pr_18079/en/model_doc/convnext#transformers.ConvNextModel"),c(bj,"href","/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLModel"),c(vj,"href","/docs/transformers/pr_18079/en/model_doc/cvt#transformers.CvtModel"),c(Fj,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Tj,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Mj,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Ej,"href","/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaModel"),c(Cj,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(wj,"href","/docs/transformers/pr_18079/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Aj,"href","/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTModel"),c(Lj,"href","/docs/transformers/pr_18079/en/model_doc/detr#transformers.DetrModel"),c(yj,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertModel"),c(xj,"href","/docs/transformers/pr_18079/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c($j,"href","/docs/transformers/pr_18079/en/model_doc/dpt#transformers.DPTModel"),c(kj,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraModel"),c(Sj,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertModel"),c(Rj,"href","/docs/transformers/pr_18079/en/model_doc/flava#transformers.FlavaModel"),c(Pj,"href","/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetModel"),c(Bj,"href","/docs/transformers/pr_18079/en/model_doc/fsmt#transformers.FSMTModel"),c(Nj,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelModel"),c(Ij,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelBaseModel"),c(qj,"href","/docs/transformers/pr_18079/en/model_doc/glpn#transformers.GLPNModel"),c(jj,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2Model"),c(Dj,"href","/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Gj,"href","/docs/transformers/pr_18079/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Oj,"href","/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJModel"),c(Vj,"href","/docs/transformers/pr_18079/en/model_doc/groupvit#transformers.GroupViTModel"),c(Xj,"href","/docs/transformers/pr_18079/en/model_doc/hubert#transformers.HubertModel"),c(zj,"href","/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertModel"),c(Qj,"href","/docs/transformers/pr_18079/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Wj,"href","/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Hj,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Uj,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Jj,"href","/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDModel"),c(Yj,"href","/docs/transformers/pr_18079/en/model_doc/levit#transformers.LevitModel"),c(Kj,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerModel"),c(Zj,"href","/docs/transformers/pr_18079/en/model_doc/longt5#transformers.LongT5Model"),c(eD,"href","/docs/transformers/pr_18079/en/model_doc/luke#transformers.LukeModel"),c(oD,"href","/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.LxmertModel"),c(rD,"href","/docs/transformers/pr_18079/en/model_doc/m2m_100#transformers.M2M100Model"),c(tD,"href","/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianModel"),c(aD,"href","/docs/transformers/pr_18079/en/model_doc/maskformer#transformers.MaskFormerModel"),c(nD,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartModel"),c(sD,"href","/docs/transformers/pr_18079/en/model_doc/mctct#transformers.MCTCTModel"),c(lD,"href","/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(iD,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertModel"),c(dD,"href","/docs/transformers/pr_18079/en/model_doc/mobilevit#transformers.MobileViTModel"),c(cD,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetModel"),c(fD,"href","/docs/transformers/pr_18079/en/model_doc/mt5#transformers.MT5Model"),c(mD,"href","/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpModel"),c(gD,"href","/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaModel"),c(hD,"href","/docs/transformers/pr_18079/en/model_doc/m2m_100#transformers.M2M100Model"),c(pD,"href","/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerModel"),c(_D,"href","/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(uD,"href","/docs/transformers/pr_18079/en/model_doc/opt#transformers.OPTModel"),c(bD,"href","/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusModel"),c(vD,"href","/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverModel"),c(FD,"href","/docs/transformers/pr_18079/en/model_doc/plbart#transformers.PLBartModel"),c(TD,"href","/docs/transformers/pr_18079/en/model_doc/poolformer#transformers.PoolFormerModel"),c(MD,"href","/docs/transformers/pr_18079/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(ED,"href","/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertModel"),c(CD,"href","/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerModel"),c(wD,"href","/docs/transformers/pr_18079/en/model_doc/regnet#transformers.RegNetModel"),c(AD,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertModel"),c(LD,"href","/docs/transformers/pr_18079/en/model_doc/resnet#transformers.ResNetModel"),c(yD,"href","/docs/transformers/pr_18079/en/model_doc/retribert#transformers.RetriBertModel"),c(xD,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaModel"),c($D,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerModel"),c(kD,"href","/docs/transformers/pr_18079/en/model_doc/segformer#transformers.SegformerModel"),c(SD,"href","/docs/transformers/pr_18079/en/model_doc/sew#transformers.SEWModel"),c(RD,"href","/docs/transformers/pr_18079/en/model_doc/sew-d#transformers.SEWDModel"),c(PD,"href","/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(BD,"href","/docs/transformers/pr_18079/en/model_doc/splinter#transformers.SplinterModel"),c(ND,"href","/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(ID,"href","/docs/transformers/pr_18079/en/model_doc/swin#transformers.SwinModel"),c(qD,"href","/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5Model"),c(jD,"href","/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasModel"),c(DD,"href","/docs/transformers/pr_18079/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(GD,"href","/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(OD,"href","/docs/transformers/pr_18079/en/model_doc/unispeech#transformers.UniSpeechModel"),c(VD,"href","/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(XD,"href","/docs/transformers/pr_18079/en/model_doc/van#transformers.VanModel"),c(zD,"href","/docs/transformers/pr_18079/en/model_doc/vilt#transformers.ViltModel"),c(QD,"href","/docs/transformers/pr_18079/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(WD,"href","/docs/transformers/pr_18079/en/model_doc/visual_bert#transformers.VisualBertModel"),c(HD,"href","/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTModel"),c(UD,"href","/docs/transformers/pr_18079/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(JD,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(YD,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(KD,"href","/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMModel"),c(ZD,"href","/docs/transformers/pr_18079/en/model_doc/xglm#transformers.XGLMModel"),c(eG,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMModel"),c(oG,"href","/docs/transformers/pr_18079/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(rG,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(tG,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(aG,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetModel"),c(nG,"href","/docs/transformers/pr_18079/en/model_doc/yolos#transformers.YolosModel"),c(sG,"href","/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uu,"id","transformers.AutoModelForPreTraining"),c(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uu,"href","#transformers.AutoModelForPreTraining"),c(zi,"class","relative group"),c(lG,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iG,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dG,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cG,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertForPreTraining"),c(fG,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertForPreTraining"),c(gG,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(hG,"href","/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomForCausalLM"),c(pG,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(_G,"href","/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(uG,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(bG,"href","/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(vG,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(FG,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(TG,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraForPreTraining"),c(MG,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(EG,"href","/docs/transformers/pr_18079/en/model_doc/flava#transformers.FlavaForPreTraining"),c(CG,"href","/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetForPreTraining"),c(wG,"href","/docs/transformers/pr_18079/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(AG,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(LG,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(yG,"href","/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(xG,"href","/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c($G,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(kG,"href","/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(SG,"href","/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(RG,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(PG,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(BG,"href","/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(NG,"href","/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(IG,"href","/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(qG,"href","/docs/transformers/pr_18079/en/model_doc/retribert#transformers.RetriBertModel"),c(jG,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(DG,"href","/docs/transformers/pr_18079/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(GG,"href","/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(OG,"href","/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(VG,"href","/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(XG,"href","/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(zG,"href","/docs/transformers/pr_18079/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(QG,"href","/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(WG,"href","/docs/transformers/pr_18079/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(HG,"href","/docs/transformers/pr_18079/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(UG,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(JG,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(YG,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(KG,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ZG,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(eO,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X1,"id","transformers.AutoModelForCausalLM"),c(X1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X1,"href","#transformers.AutoModelForCausalLM"),c(Hi,"class","relative group"),c(oO,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rO,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tO,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aO,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartForCausalLM"),c(nO,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertLMHeadModel"),c(sO,"href","/docs/transformers/pr_18079/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(lO,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(iO,"href","/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(dO,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(cO,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(fO,"href","/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomForCausalLM"),c(mO,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(gO,"href","/docs/transformers/pr_18079/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(hO,"href","/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(pO,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(_O,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraForCausalLM"),c(uO,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bO,"href","/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(vO,"href","/docs/transformers/pr_18079/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(FO,"href","/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(TO,"href","/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianForCausalLM"),c(MO,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartForCausalLM"),c(EO,"href","/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(CO,"href","/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpForCausalLM"),c(wO,"href","/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(AO,"href","/docs/transformers/pr_18079/en/model_doc/opt#transformers.OPTForCausalLM"),c(LO,"href","/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(yO,"href","/docs/transformers/pr_18079/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(xO,"href","/docs/transformers/pr_18079/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c($O,"href","/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(kO,"href","/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(SO,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(RO,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(PO,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(BO,"href","/docs/transformers/pr_18079/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(NO,"href","/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(IO,"href","/docs/transformers/pr_18079/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(qO,"href","/docs/transformers/pr_18079/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(jO,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(DO,"href","/docs/transformers/pr_18079/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(GO,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(OO,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(VO,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P2,"id","transformers.AutoModelForMaskedLM"),c(P2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P2,"href","#transformers.AutoModelForMaskedLM"),c(Yi,"class","relative group"),c(XO,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zO,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QO,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WO,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(HO,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UO,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertForMaskedLM"),c(JO,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(YO,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(KO,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(ZO,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(eV,"href","/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(oV,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(rV,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(tV,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(aV,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(nV,"href","/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(sV,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(lV,"href","/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(iV,"href","/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(dV,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(cV,"href","/docs/transformers/pr_18079/en/model_doc/luke#transformers.LukeForMaskedLM"),c(fV,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(mV,"href","/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(gV,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(hV,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(pV,"href","/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(_V,"href","/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(uV,"href","/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(bV,"href","/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(vV,"href","/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(FV,"href","/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(TV,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(MV,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(EV,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(CV,"href","/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(wV,"href","/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AV,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LV,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(yV,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(xV,"href","/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mb,"id","transformers.AutoModelForSeq2SeqLM"),c(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mb,"href","#transformers.AutoModelForSeq2SeqLM"),c(ed,"class","relative group"),c($V,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kV,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SV,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RV,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_18079/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(qV,"href","/docs/transformers/pr_18079/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_18079/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_18079/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_18079/en/model_doc/marian#transformers.MarianMTModel"),c(VV,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_18079/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_18079/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(WV,"href","/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(HV,"href","/docs/transformers/pr_18079/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(UV,"href","/docs/transformers/pr_18079/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(JV,"href","/docs/transformers/pr_18079/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_18079/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zb,"id","transformers.AutoModelForSequenceClassification"),c(zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zb,"href","#transformers.AutoModelForSequenceClassification"),c(td,"class","relative group"),c(KV,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartForSequenceClassification"),c(tX,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(nX,"href","/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(sX,"href","/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(lX,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(iX,"href","/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(dX,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(cX,"href","/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(fX,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(mX,"href","/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(gX,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(hX,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(pX,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(_X,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(uX,"href","/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(bX,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(vX,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(FX,"href","/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(TX,"href","/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(MX,"href","/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(EX,"href","/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(CX,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(wX,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(AX,"href","/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDForSequenceClassification"),c(LX,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(yX,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(xX,"href","/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c($X,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(kX,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(SX,"href","/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(RX,"href","/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(PX,"href","/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(BX,"href","/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(NX,"href","/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(IX,"href","/docs/transformers/pr_18079/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(qX,"href","/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(jX,"href","/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(DX,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(GX,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(OX,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(VX,"href","/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(XX,"href","/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(zX,"href","/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(QX,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(WX,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(HX,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(UX,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(JX,"href","/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForMultipleChoice"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForMultipleChoice"),c(sd,"class","relative group"),c(YX,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(oz,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertForMultipleChoice"),c(rz,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(tz,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(az,"href","/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(nz,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(sz,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(lz,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(iz,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(dz,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(cz,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(fz,"href","/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(mz,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(gz,"href","/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(hz,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(pz,"href","/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(uz,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(bz,"href","/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(vz,"href","/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(wz,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Az,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Lz,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(yz,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(xz,"href","/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w0,"id","transformers.AutoModelForNextSentencePrediction"),c(w0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w0,"href","#transformers.AutoModelForNextSentencePrediction"),c(dd,"class","relative group"),c($z,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Pz,"href","/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Bz,"href","/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Nz,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Iz,"href","/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(qz,"href","/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B0,"id","transformers.AutoModelForTokenClassification"),c(B0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B0,"href","#transformers.AutoModelForTokenClassification"),c(md,"class","relative group"),c(jz,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Vz,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertForTokenClassification"),c(Xz,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(zz,"href","/docs/transformers/pr_18079/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Qz,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Wz,"href","/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Hz,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Jz,"href","/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Yz,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Kz,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Zz,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(eQ,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(oQ,"href","/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(rQ,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(tQ,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(aQ,"href","/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(nQ,"href","/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(sQ,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(lQ,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(iQ,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(dQ,"href","/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(cQ,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(fQ,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(mQ,"href","/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(gQ,"href","/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(hQ,"href","/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(pQ,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(_Q,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(uQ,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(bQ,"href","/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(vQ,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(FQ,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(TQ,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(MQ,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(EQ,"href","/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForQuestionAnswering"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForQuestionAnswering"),c(pd,"class","relative group"),c(CQ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wQ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AQ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LQ,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.BertForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_18079/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_18079/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_18079/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(GQ,"href","/docs/transformers/pr_18079/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_18079/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_18079/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_18079/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_18079/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_18079/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_18079/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_18079/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_18079/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_18079/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_18079/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(iW,"href","/docs/transformers/pr_18079/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(dW,"href","/docs/transformers/pr_18079/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(cW,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(fW,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(mW,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(gW,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(hW,"href","/docs/transformers/pr_18079/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForTableQuestionAnswering"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(bd,"class","relative group"),c(pW,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForImageClassification"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForImageClassification"),c(Td,"class","relative group"),c(vW,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_18079/en/model_doc/beit#transformers.BeitForImageClassification"),c(EW,"href","/docs/transformers/pr_18079/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(CW,"href","/docs/transformers/pr_18079/en/model_doc/cvt#transformers.CvtForImageClassification"),c(wW,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(AW,"href","/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTForImageClassification"),c(LW,"href","/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(yW,"href","/docs/transformers/pr_18079/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(xW,"href","/docs/transformers/pr_18079/en/model_doc/levit#transformers.LevitForImageClassification"),c($W,"href","/docs/transformers/pr_18079/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(kW,"href","/docs/transformers/pr_18079/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(SW,"href","/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(RW,"href","/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(PW,"href","/docs/transformers/pr_18079/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(BW,"href","/docs/transformers/pr_18079/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(NW,"href","/docs/transformers/pr_18079/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(IW,"href","/docs/transformers/pr_18079/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(qW,"href","/docs/transformers/pr_18079/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(jW,"href","/docs/transformers/pr_18079/en/model_doc/swin#transformers.SwinForImageClassification"),c(DW,"href","/docs/transformers/pr_18079/en/model_doc/van#transformers.VanForImageClassification"),c(GW,"href","/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.AutoModelForVision2Seq"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(OW,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/pr_18079/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ld,"class","relative group"),c(QW,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HW,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/pr_18079/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForAudioClassification"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForAudioClassification"),c($d,"class","relative group"),c(JW,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(eH,"href","/docs/transformers/pr_18079/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(oH,"href","/docs/transformers/pr_18079/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(rH,"href","/docs/transformers/pr_18079/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(tH,"href","/docs/transformers/pr_18079/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(aH,"href","/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(nH,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(sH,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(lH,"href","/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a7,"id","transformers.AutoModelForAudioFrameClassification"),c(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a7,"href","#transformers.AutoModelForAudioFrameClassification"),c(Rd,"class","relative group"),c(iH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fH,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(mH,"href","/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(gH,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(hH,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(pH,"href","/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g7,"id","transformers.AutoModelForCTC"),c(g7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g7,"href","#transformers.AutoModelForCTC"),c(Nd,"class","relative group"),c(_H,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(FH,"href","/docs/transformers/pr_18079/en/model_doc/hubert#transformers.HubertForCTC"),c(TH,"href","/docs/transformers/pr_18079/en/model_doc/mctct#transformers.MCTCTForCTC"),c(MH,"href","/docs/transformers/pr_18079/en/model_doc/sew#transformers.SEWForCTC"),c(EH,"href","/docs/transformers/pr_18079/en/model_doc/sew-d#transformers.SEWDForCTC"),c(CH,"href","/docs/transformers/pr_18079/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(wH,"href","/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(AH,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(LH,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(yH,"href","/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L7,"id","transformers.AutoModelForSpeechSeq2Seq"),c(L7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L7,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(jd,"class","relative group"),c(xH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($H,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SH,"href","/docs/transformers/pr_18079/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(RH,"href","/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R7,"id","transformers.AutoModelForAudioXVector"),c(R7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R7,"href","#transformers.AutoModelForAudioXVector"),c(Od,"class","relative group"),c(PH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(qH,"href","/docs/transformers/pr_18079/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(jH,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(DH,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(GH,"href","/docs/transformers/pr_18079/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O7,"id","transformers.AutoModelForMaskedImageModeling"),c(O7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O7,"href","#transformers.AutoModelForMaskedImageModeling"),c(zd,"class","relative group"),c(OH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_18079/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(QH,"href","/docs/transformers/pr_18079/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(WH,"href","/docs/transformers/pr_18079/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U7,"id","transformers.AutoModelForObjectDetection"),c(U7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U7,"href","#transformers.AutoModelForObjectDetection"),c(Ud,"class","relative group"),c(HH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/pr_18079/en/model_doc/detr#transformers.DetrForObjectDetection"),c(KH,"href","/docs/transformers/pr_18079/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o8,"id","transformers.AutoModelForImageSegmentation"),c(o8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o8,"href","#transformers.AutoModelForImageSegmentation"),c(Kd,"class","relative group"),c(ZH,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_18079/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s8,"id","transformers.AutoModelForSemanticSegmentation"),c(s8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s8,"href","#transformers.AutoModelForSemanticSegmentation"),c(oc,"class","relative group"),c(tU,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_18079/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(lU,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(iU,"href","/docs/transformers/pr_18079/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(dU,"href","/docs/transformers/pr_18079/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(cU,"href","/docs/transformers/pr_18079/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p8,"id","transformers.AutoModelForInstanceSegmentation"),c(p8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p8,"href","#transformers.AutoModelForInstanceSegmentation"),c(ac,"class","relative group"),c(fU,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_18079/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F8,"id","transformers.TFAutoModel"),c(F8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F8,"href","#transformers.TFAutoModel"),c(lc,"class","relative group"),c(pU,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.TFAlbertModel"),c(vU,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.TFBartModel"),c(FU,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertModel"),c(TU,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(MU,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(EU,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertModel"),c(CU,"href","/docs/transformers/pr_18079/en/model_doc/clip#transformers.TFCLIPModel"),c(wU,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.TFConvBertModel"),c(AU,"href","/docs/transformers/pr_18079/en/model_doc/convnext#transformers.TFConvNextModel"),c(LU,"href","/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.TFCTRLModel"),c(yU,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(xU,"href","/docs/transformers/pr_18079/en/model_doc/deberta#transformers.TFDebertaModel"),c($U,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(kU,"href","/docs/transformers/pr_18079/en/model_doc/deit#transformers.TFDeiTModel"),c(SU,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(RU,"href","/docs/transformers/pr_18079/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(PU,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.TFElectraModel"),c(BU,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(NU,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelModel"),c(IU,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(qU,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.TFGPT2Model"),c(jU,"href","/docs/transformers/pr_18079/en/model_doc/gptj#transformers.TFGPTJModel"),c(DU,"href","/docs/transformers/pr_18079/en/model_doc/hubert#transformers.TFHubertModel"),c(GU,"href","/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(OU,"href","/docs/transformers/pr_18079/en/model_doc/led#transformers.TFLEDModel"),c(VU,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.TFLongformerModel"),c(XU,"href","/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.TFLxmertModel"),c(zU,"href","/docs/transformers/pr_18079/en/model_doc/marian#transformers.TFMarianModel"),c(QU,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.TFMBartModel"),c(WU,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(HU,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.TFMPNetModel"),c(UU,"href","/docs/transformers/pr_18079/en/model_doc/mt5#transformers.TFMT5Model"),c(JU,"href","/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(YU,"href","/docs/transformers/pr_18079/en/model_doc/opt#transformers.TFOPTModel"),c(KU,"href","/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.TFPegasusModel"),c(ZU,"href","/docs/transformers/pr_18079/en/model_doc/regnet#transformers.TFRegNetModel"),c(eJ,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.TFRemBertModel"),c(oJ,"href","/docs/transformers/pr_18079/en/model_doc/resnet#transformers.TFResNetModel"),c(rJ,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaModel"),c(tJ,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.TFRoFormerModel"),c(aJ,"href","/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(nJ,"href","/docs/transformers/pr_18079/en/model_doc/swin#transformers.TFSwinModel"),c(sJ,"href","/docs/transformers/pr_18079/en/model_doc/t5#transformers.TFT5Model"),c(lJ,"href","/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TFTapasModel"),c(iJ,"href","/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(dJ,"href","/docs/transformers/pr_18079/en/model_doc/vit#transformers.TFViTModel"),c(cJ,"href","/docs/transformers/pr_18079/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(fJ,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(mJ,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMModel"),c(gJ,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(hJ,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b9,"id","transformers.TFAutoModelForPreTraining"),c(b9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b9,"href","#transformers.TFAutoModelForPreTraining"),c(cc,"class","relative group"),c(pJ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bJ,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(vJ,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(FJ,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertForPreTraining"),c(TJ,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MJ,"href","/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(EJ,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(CJ,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(wJ,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AJ,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(LJ,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(yJ,"href","/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xJ,"href","/docs/transformers/pr_18079/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($J,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(kJ,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SJ,"href","/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(RJ,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(PJ,"href","/docs/transformers/pr_18079/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(NJ,"href","/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(IJ,"href","/docs/transformers/pr_18079/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(qJ,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jJ,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(DJ,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X9,"id","transformers.TFAutoModelForCausalLM"),c(X9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X9,"href","#transformers.TFAutoModelForCausalLM"),c(gc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(zJ,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(QJ,"href","/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(WJ,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(HJ,"href","/docs/transformers/pr_18079/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(UJ,"href","/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(JJ,"href","/docs/transformers/pr_18079/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(YJ,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(KJ,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(ZJ,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(eY,"href","/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(oY,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rY,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.TFAutoModelForImageClassification"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForImageClassification"),c(_c,"class","relative group"),c(tY,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_18079/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(lY,"href","/docs/transformers/pr_18079/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(iY,"href","/docs/transformers/pr_18079/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(dY,"href","/docs/transformers/pr_18079/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(cY,"href","/docs/transformers/pr_18079/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(fY,"href","/docs/transformers/pr_18079/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(mY,"href","/docs/transformers/pr_18079/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(gY,"href","/docs/transformers/pr_18079/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForMaskedLM"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForMaskedLM"),c(vc,"class","relative group"),c(hY,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pY,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Y,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uY,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(bY,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(vY,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(FY,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(TY,"href","/docs/transformers/pr_18079/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(MY,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(EY,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(CY,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(wY,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AY,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(LY,"href","/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yY,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(xY,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c($Y,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(kY,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(SY,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(RY,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(PY,"href","/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(BY,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NY,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Mc,"class","relative group"),c(IY,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qY,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jY,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DY,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_18079/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(XY,"href","/docs/transformers/pr_18079/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_18079/en/model_doc/marian#transformers.TFMarianMTModel"),c(QY,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_18079/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(HY,"href","/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_18079/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YM,"id","transformers.TFAutoModelForSequenceClassification"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.TFAutoModelForSequenceClassification"),c(wc,"class","relative group"),c(JY,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YY,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KY,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZY,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(eK,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(oK,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(rK,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(tK,"href","/docs/transformers/pr_18079/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(aK,"href","/docs/transformers/pr_18079/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(nK,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(sK,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(lK,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(iK,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(dK,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(cK,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(fK,"href","/docs/transformers/pr_18079/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(mK,"href","/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(gK,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(hK,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(pK,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(_K,"href","/docs/transformers/pr_18079/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(uK,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(bK,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(vK,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(FK,"href","/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(TK,"href","/docs/transformers/pr_18079/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(MK,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(EK,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(CK,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.TFAutoModelForMultipleChoice"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.TFAutoModelForMultipleChoice"),c(yc,"class","relative group"),c(wK,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LK,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(xK,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c($K,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(kK,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(SK,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(RK,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(PK,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(BK,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(NK,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(IK,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(qK,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(jK,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(DK,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(GK,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(OK,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(VK,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(XK,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(kc,"class","relative group"),c(zK,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QK,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HK,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(UK,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Pc,"class","relative group"),c(JK,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YK,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KK,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZK,"href","/docs/transformers/pr_18079/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModelForTokenClassification"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(eZ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(nZ,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(lZ,"href","/docs/transformers/pr_18079/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(iZ,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(dZ,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(cZ,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(fZ,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(mZ,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(gZ,"href","/docs/transformers/pr_18079/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(hZ,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(pZ,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(_Z,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(uZ,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(bZ,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(vZ,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(FZ,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(TZ,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(MZ,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForQuestionAnswering"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Dc,"class","relative group"),c(EZ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CZ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wZ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AZ,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_18079/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_18079/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_18079/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_18079/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_18079/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(BZ,"href","/docs/transformers/pr_18079/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_18079/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(IZ,"href","/docs/transformers/pr_18079/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(qZ,"href","/docs/transformers/pr_18079/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(jZ,"href","/docs/transformers/pr_18079/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(DZ,"href","/docs/transformers/pr_18079/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(GZ,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(OZ,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(VZ,"href","/docs/transformers/pr_18079/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(XZ,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(zZ,"href","/docs/transformers/pr_18079/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.TFAutoModelForVision2Seq"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.TFAutoModelForVision2Seq"),c(Vc,"class","relative group"),c(QZ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WZ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HZ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UZ,"href","/docs/transformers/pr_18079/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Qc,"class","relative group"),c(JZ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YZ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KZ,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZZ,"href","/docs/transformers/pr_18079/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.FlaxAutoModel"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.FlaxAutoModel"),c(Uc,"class","relative group"),c(eee,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oee,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ree,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tee,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.FlaxAlbertModel"),c(aee,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.FlaxBartModel"),c(nee,"href","/docs/transformers/pr_18079/en/model_doc/beit#transformers.FlaxBeitModel"),c(see,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertModel"),c(lee,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(iee,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(dee,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(cee,"href","/docs/transformers/pr_18079/en/model_doc/clip#transformers.FlaxCLIPModel"),c(fee,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(mee,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraModel"),c(gee,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(hee,"href","/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(pee,"href","/docs/transformers/pr_18079/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(_ee,"href","/docs/transformers/pr_18079/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(uee,"href","/docs/transformers/pr_18079/en/model_doc/marian#transformers.FlaxMarianModel"),c(bee,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.FlaxMBartModel"),c(vee,"href","/docs/transformers/pr_18079/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Fee,"href","/docs/transformers/pr_18079/en/model_doc/opt#transformers.FlaxOPTModel"),c(Tee,"href","/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Mee,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Eee,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Cee,"href","/docs/transformers/pr_18079/en/model_doc/t5#transformers.FlaxT5Model"),c(wee,"href","/docs/transformers/pr_18079/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Aee,"href","/docs/transformers/pr_18079/en/model_doc/vit#transformers.FlaxViTModel"),c(Lee,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(yee,"href","/docs/transformers/pr_18079/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(xee,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kC,"id","transformers.FlaxAutoModelForCausalLM"),c(kC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Kc,"class","relative group"),c($ee,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kee,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(See,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ree,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Pee,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Bee,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Nee,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Iee,"href","/docs/transformers/pr_18079/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(qee,"href","/docs/transformers/pr_18079/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(jee,"href","/docs/transformers/pr_18079/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Dee,"href","/docs/transformers/pr_18079/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Gee,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Oee,"href","/docs/transformers/pr_18079/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.FlaxAutoModelForPreTraining"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.FlaxAutoModelForPreTraining"),c(of,"class","relative group"),c(Vee,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xee,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zee,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qee,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Wee,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Hee,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Uee,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Jee,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Yee,"href","/docs/transformers/pr_18079/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Kee,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Zee,"href","/docs/transformers/pr_18079/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(eoe,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ooe,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(roe,"href","/docs/transformers/pr_18079/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(toe,"href","/docs/transformers/pr_18079/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(aoe,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s3,"id","transformers.FlaxAutoModelForMaskedLM"),c(s3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(af,"class","relative group"),c(noe,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(soe,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(loe,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ioe,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(doe,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(coe,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(foe,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(moe,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(goe,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(hoe,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(poe,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(_oe,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(uoe,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(v3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(lf,"class","relative group"),c(boe,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(voe,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Foe,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Toe,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Moe,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Eoe,"href","/docs/transformers/pr_18079/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Coe,"href","/docs/transformers/pr_18079/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(woe,"href","/docs/transformers/pr_18079/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Aoe,"href","/docs/transformers/pr_18079/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Loe,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(yoe,"href","/docs/transformers/pr_18079/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(xoe,"href","/docs/transformers/pr_18079/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c($oe,"href","/docs/transformers/pr_18079/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(ff,"class","relative group"),c(koe,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Soe,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Roe,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Poe,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Boe,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Noe,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Ioe,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(qoe,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(joe,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Doe,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Goe,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Ooe,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Voe,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(hf,"class","relative group"),c(Xoe,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zoe,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qoe,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Woe,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Hoe,"href","/docs/transformers/pr_18079/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Yoe,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Zoe,"href","/docs/transformers/pr_18079/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(ere,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(ore,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(rre,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.FlaxAutoModelForTokenClassification"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(uf,"class","relative group"),c(tre,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(are,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nre,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sre,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(lre,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(ire,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(dre,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(cre,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(fre,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(mre,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(gre,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Ff,"class","relative group"),c(hre,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pre,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_re,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ure,"href","/docs/transformers/pr_18079/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(bre,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(vre,"href","/docs/transformers/pr_18079/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Fre,"href","/docs/transformers/pr_18079/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Tre,"href","/docs/transformers/pr_18079/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Mre,"href","/docs/transformers/pr_18079/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Ere,"href","/docs/transformers/pr_18079/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Cre,"href","/docs/transformers/pr_18079/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Ef,"class","relative group"),c(wre,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Are,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lre,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yre,"href","/docs/transformers/pr_18079/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.FlaxAutoModelForImageClassification"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.FlaxAutoModelForImageClassification"),c(Af,"class","relative group"),c(xre,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($re,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kre,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sre,"href","/docs/transformers/pr_18079/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Rre,"href","/docs/transformers/pr_18079/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.FlaxAutoModelForVision2Seq"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(xf,"class","relative group"),c(Pre,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bre,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nre,"href","/docs/transformers/pr_18079/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ire,"href","/docs/transformers/pr_18079/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Co),e(Co,yi),b(f,Bf,u),b(f,lt,u),e(lt,xi),e(lt,$i),e($i,t6),e(lt,Nf),b(f,Oe,u),b(f,We,u),e(We,ki),e(We,Pn),e(Pn,a6),e(We,Bn),e(We,Nn),e(Nn,n6),e(We,Si),e(We,In),e(In,s6),e(We,Ri),b(f,If,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,jS),e(Ae,Pi),e(Pi,DS),e(Ae,GS),b(f,wo,u),b(f,Ra,u),e(Ra,OS),e(Ra,qf),e(qf,VS),e(Ra,wHe),b(f,cXe,u),b(f,Bi,u),e(Bi,jf),e(jf,Sae),M(l6,Sae,null),e(Bi,AHe),e(Bi,Rae),e(Rae,LHe),b(f,fXe,u),b(f,qn,u),e(qn,yHe),e(qn,Pae),e(Pae,xHe),e(qn,$He),e(qn,Bae),e(Bae,kHe),e(qn,SHe),b(f,mXe,u),M(i6,f,u),b(f,gXe,u),b(f,XS,u),e(XS,RHe),b(f,hXe,u),M(Df,f,u),b(f,pXe,u),b(f,Ni,u),e(Ni,Gf),e(Gf,Nae),M(d6,Nae,null),e(Ni,PHe),e(Ni,Iae),e(Iae,BHe),b(f,_Xe,u),b(f,Ao,u),M(c6,Ao,null),e(Ao,NHe),e(Ao,f6),e(f6,IHe),e(f6,zS),e(zS,qHe),e(f6,jHe),e(Ao,DHe),e(Ao,m6),e(m6,GHe),e(m6,qae),e(qae,OHe),e(m6,VHe),e(Ao,XHe),e(Ao,Lr),M(g6,Lr,null),e(Lr,zHe),e(Lr,jae),e(jae,QHe),e(Lr,WHe),e(Lr,Ii),e(Ii,HHe),e(Ii,Dae),e(Dae,UHe),e(Ii,JHe),e(Ii,Gae),e(Gae,YHe),e(Ii,KHe),e(Lr,ZHe),e(Lr,A),e(A,Of),e(Of,Oae),e(Oae,eUe),e(Of,oUe),e(Of,QS),e(QS,rUe),e(Of,tUe),e(A,aUe),e(A,Vf),e(Vf,Vae),e(Vae,nUe),e(Vf,sUe),e(Vf,WS),e(WS,lUe),e(Vf,iUe),e(A,dUe),e(A,Xf),e(Xf,Xae),e(Xae,cUe),e(Xf,fUe),e(Xf,HS),e(HS,mUe),e(Xf,gUe),e(A,hUe),e(A,zf),e(zf,zae),e(zae,pUe),e(zf,_Ue),e(zf,US),e(US,uUe),e(zf,bUe),e(A,vUe),e(A,Qf),e(Qf,Qae),e(Qae,FUe),e(Qf,TUe),e(Qf,JS),e(JS,MUe),e(Qf,EUe),e(A,CUe),e(A,Wf),e(Wf,Wae),e(Wae,wUe),e(Wf,AUe),e(Wf,YS),e(YS,LUe),e(Wf,yUe),e(A,xUe),e(A,Hf),e(Hf,Hae),e(Hae,$Ue),e(Hf,kUe),e(Hf,KS),e(KS,SUe),e(Hf,RUe),e(A,PUe),e(A,Uf),e(Uf,Uae),e(Uae,BUe),e(Uf,NUe),e(Uf,ZS),e(ZS,IUe),e(Uf,qUe),e(A,jUe),e(A,Jf),e(Jf,Jae),e(Jae,DUe),e(Jf,GUe),e(Jf,eR),e(eR,OUe),e(Jf,VUe),e(A,XUe),e(A,Yf),e(Yf,Yae),e(Yae,zUe),e(Yf,QUe),e(Yf,oR),e(oR,WUe),e(Yf,HUe),e(A,UUe),e(A,Kf),e(Kf,Kae),e(Kae,JUe),e(Kf,YUe),e(Kf,rR),e(rR,KUe),e(Kf,ZUe),e(A,eJe),e(A,Zf),e(Zf,Zae),e(Zae,oJe),e(Zf,rJe),e(Zf,tR),e(tR,tJe),e(Zf,aJe),e(A,nJe),e(A,em),e(em,ene),e(ene,sJe),e(em,lJe),e(em,aR),e(aR,iJe),e(em,dJe),e(A,cJe),e(A,om),e(om,one),e(one,fJe),e(om,mJe),e(om,nR),e(nR,gJe),e(om,hJe),e(A,pJe),e(A,rm),e(rm,rne),e(rne,_Je),e(rm,uJe),e(rm,sR),e(sR,bJe),e(rm,vJe),e(A,FJe),e(A,tm),e(tm,tne),e(tne,TJe),e(tm,MJe),e(tm,lR),e(lR,EJe),e(tm,CJe),e(A,wJe),e(A,am),e(am,ane),e(ane,AJe),e(am,LJe),e(am,iR),e(iR,yJe),e(am,xJe),e(A,$Je),e(A,nm),e(nm,nne),e(nne,kJe),e(nm,SJe),e(nm,dR),e(dR,RJe),e(nm,PJe),e(A,BJe),e(A,sm),e(sm,sne),e(sne,NJe),e(sm,IJe),e(sm,cR),e(cR,qJe),e(sm,jJe),e(A,DJe),e(A,lm),e(lm,lne),e(lne,GJe),e(lm,OJe),e(lm,fR),e(fR,VJe),e(lm,XJe),e(A,zJe),e(A,im),e(im,ine),e(ine,QJe),e(im,WJe),e(im,mR),e(mR,HJe),e(im,UJe),e(A,JJe),e(A,dm),e(dm,dne),e(dne,YJe),e(dm,KJe),e(dm,gR),e(gR,ZJe),e(dm,eYe),e(A,oYe),e(A,cm),e(cm,cne),e(cne,rYe),e(cm,tYe),e(cm,hR),e(hR,aYe),e(cm,nYe),e(A,sYe),e(A,fm),e(fm,fne),e(fne,lYe),e(fm,iYe),e(fm,pR),e(pR,dYe),e(fm,cYe),e(A,fYe),e(A,mm),e(mm,mne),e(mne,mYe),e(mm,gYe),e(mm,_R),e(_R,hYe),e(mm,pYe),e(A,_Ye),e(A,gm),e(gm,gne),e(gne,uYe),e(gm,bYe),e(gm,uR),e(uR,vYe),e(gm,FYe),e(A,TYe),e(A,hm),e(hm,hne),e(hne,MYe),e(hm,EYe),e(hm,bR),e(bR,CYe),e(hm,wYe),e(A,AYe),e(A,pm),e(pm,pne),e(pne,LYe),e(pm,yYe),e(pm,vR),e(vR,xYe),e(pm,$Ye),e(A,kYe),e(A,_m),e(_m,_ne),e(_ne,SYe),e(_m,RYe),e(_m,FR),e(FR,PYe),e(_m,BYe),e(A,NYe),e(A,um),e(um,une),e(une,IYe),e(um,qYe),e(um,TR),e(TR,jYe),e(um,DYe),e(A,GYe),e(A,bm),e(bm,bne),e(bne,OYe),e(bm,VYe),e(bm,MR),e(MR,XYe),e(bm,zYe),e(A,QYe),e(A,vm),e(vm,vne),e(vne,WYe),e(vm,HYe),e(vm,ER),e(ER,UYe),e(vm,JYe),e(A,YYe),e(A,Fm),e(Fm,Fne),e(Fne,KYe),e(Fm,ZYe),e(Fm,CR),e(CR,eKe),e(Fm,oKe),e(A,rKe),e(A,Tm),e(Tm,Tne),e(Tne,tKe),e(Tm,aKe),e(Tm,wR),e(wR,nKe),e(Tm,sKe),e(A,lKe),e(A,Mm),e(Mm,Mne),e(Mne,iKe),e(Mm,dKe),e(Mm,AR),e(AR,cKe),e(Mm,fKe),e(A,mKe),e(A,Em),e(Em,Ene),e(Ene,gKe),e(Em,hKe),e(Em,LR),e(LR,pKe),e(Em,_Ke),e(A,uKe),e(A,Cm),e(Cm,Cne),e(Cne,bKe),e(Cm,vKe),e(Cm,yR),e(yR,FKe),e(Cm,TKe),e(A,MKe),e(A,wm),e(wm,wne),e(wne,EKe),e(wm,CKe),e(wm,xR),e(xR,wKe),e(wm,AKe),e(A,LKe),e(A,Am),e(Am,Ane),e(Ane,yKe),e(Am,xKe),e(Am,$R),e($R,$Ke),e(Am,kKe),e(A,SKe),e(A,Lm),e(Lm,Lne),e(Lne,RKe),e(Lm,PKe),e(Lm,kR),e(kR,BKe),e(Lm,NKe),e(A,IKe),e(A,ym),e(ym,yne),e(yne,qKe),e(ym,jKe),e(ym,SR),e(SR,DKe),e(ym,GKe),e(A,OKe),e(A,xm),e(xm,xne),e(xne,VKe),e(xm,XKe),e(xm,RR),e(RR,zKe),e(xm,QKe),e(A,WKe),e(A,$m),e($m,$ne),e($ne,HKe),e($m,UKe),e($m,PR),e(PR,JKe),e($m,YKe),e(A,KKe),e(A,km),e(km,kne),e(kne,ZKe),e(km,eZe),e(km,BR),e(BR,oZe),e(km,rZe),e(A,tZe),e(A,Sm),e(Sm,Sne),e(Sne,aZe),e(Sm,nZe),e(Sm,NR),e(NR,sZe),e(Sm,lZe),e(A,iZe),e(A,Rm),e(Rm,Rne),e(Rne,dZe),e(Rm,cZe),e(Rm,IR),e(IR,fZe),e(Rm,mZe),e(A,gZe),e(A,Pm),e(Pm,Pne),e(Pne,hZe),e(Pm,pZe),e(Pm,qR),e(qR,_Ze),e(Pm,uZe),e(A,bZe),e(A,Bm),e(Bm,Bne),e(Bne,vZe),e(Bm,FZe),e(Bm,jR),e(jR,TZe),e(Bm,MZe),e(A,EZe),e(A,Nm),e(Nm,Nne),e(Nne,CZe),e(Nm,wZe),e(Nm,DR),e(DR,AZe),e(Nm,LZe),e(A,yZe),e(A,Im),e(Im,Ine),e(Ine,xZe),e(Im,$Ze),e(Im,GR),e(GR,kZe),e(Im,SZe),e(A,RZe),e(A,qm),e(qm,qne),e(qne,PZe),e(qm,BZe),e(qm,OR),e(OR,NZe),e(qm,IZe),e(A,qZe),e(A,jm),e(jm,jne),e(jne,jZe),e(jm,DZe),e(jm,VR),e(VR,GZe),e(jm,OZe),e(A,VZe),e(A,Dm),e(Dm,Dne),e(Dne,XZe),e(Dm,zZe),e(Dm,XR),e(XR,QZe),e(Dm,WZe),e(A,HZe),e(A,Gm),e(Gm,Gne),e(Gne,UZe),e(Gm,JZe),e(Gm,zR),e(zR,YZe),e(Gm,KZe),e(A,ZZe),e(A,Om),e(Om,One),e(One,eeo),e(Om,oeo),e(Om,QR),e(QR,reo),e(Om,teo),e(A,aeo),e(A,Vm),e(Vm,Vne),e(Vne,neo),e(Vm,seo),e(Vm,WR),e(WR,leo),e(Vm,ieo),e(A,deo),e(A,Xm),e(Xm,Xne),e(Xne,ceo),e(Xm,feo),e(Xm,HR),e(HR,meo),e(Xm,geo),e(A,heo),e(A,zm),e(zm,zne),e(zne,peo),e(zm,_eo),e(zm,UR),e(UR,ueo),e(zm,beo),e(A,veo),e(A,Qm),e(Qm,Qne),e(Qne,Feo),e(Qm,Teo),e(Qm,JR),e(JR,Meo),e(Qm,Eeo),e(A,Ceo),e(A,Wm),e(Wm,Wne),e(Wne,weo),e(Wm,Aeo),e(Wm,YR),e(YR,Leo),e(Wm,yeo),e(A,xeo),e(A,Hm),e(Hm,Hne),e(Hne,$eo),e(Hm,keo),e(Hm,KR),e(KR,Seo),e(Hm,Reo),e(A,Peo),e(A,Um),e(Um,Une),e(Une,Beo),e(Um,Neo),e(Um,ZR),e(ZR,Ieo),e(Um,qeo),e(A,jeo),e(A,Jm),e(Jm,Jne),e(Jne,Deo),e(Jm,Geo),e(Jm,eP),e(eP,Oeo),e(Jm,Veo),e(A,Xeo),e(A,Ym),e(Ym,Yne),e(Yne,zeo),e(Ym,Qeo),e(Ym,oP),e(oP,Weo),e(Ym,Heo),e(A,Ueo),e(A,Km),e(Km,Kne),e(Kne,Jeo),e(Km,Yeo),e(Km,rP),e(rP,Keo),e(Km,Zeo),e(A,eoo),e(A,Zm),e(Zm,Zne),e(Zne,ooo),e(Zm,roo),e(Zm,tP),e(tP,too),e(Zm,aoo),e(A,noo),e(A,eg),e(eg,ese),e(ese,soo),e(eg,loo),e(eg,aP),e(aP,ioo),e(eg,doo),e(A,coo),e(A,og),e(og,ose),e(ose,foo),e(og,moo),e(og,nP),e(nP,goo),e(og,hoo),e(A,poo),e(A,rg),e(rg,rse),e(rse,_oo),e(rg,uoo),e(rg,sP),e(sP,boo),e(rg,voo),e(A,Foo),e(A,tg),e(tg,tse),e(tse,Too),e(tg,Moo),e(tg,lP),e(lP,Eoo),e(tg,Coo),e(A,woo),e(A,ag),e(ag,ase),e(ase,Aoo),e(ag,Loo),e(ag,iP),e(iP,yoo),e(ag,xoo),e(A,$oo),e(A,ng),e(ng,nse),e(nse,koo),e(ng,Soo),e(ng,dP),e(dP,Roo),e(ng,Poo),e(A,Boo),e(A,sg),e(sg,sse),e(sse,Noo),e(sg,Ioo),e(sg,cP),e(cP,qoo),e(sg,joo),e(A,Doo),e(A,lg),e(lg,lse),e(lse,Goo),e(lg,Ooo),e(lg,fP),e(fP,Voo),e(lg,Xoo),e(A,zoo),e(A,ig),e(ig,ise),e(ise,Qoo),e(ig,Woo),e(ig,mP),e(mP,Hoo),e(ig,Uoo),e(A,Joo),e(A,dg),e(dg,dse),e(dse,Yoo),e(dg,Koo),e(dg,gP),e(gP,Zoo),e(dg,ero),e(A,oro),e(A,cg),e(cg,cse),e(cse,rro),e(cg,tro),e(cg,hP),e(hP,aro),e(cg,nro),e(A,sro),e(A,fg),e(fg,fse),e(fse,lro),e(fg,iro),e(fg,pP),e(pP,dro),e(fg,cro),e(A,fro),e(A,mg),e(mg,mse),e(mse,mro),e(mg,gro),e(mg,_P),e(_P,hro),e(mg,pro),e(A,_ro),e(A,gg),e(gg,gse),e(gse,uro),e(gg,bro),e(gg,uP),e(uP,vro),e(gg,Fro),e(A,Tro),e(A,hg),e(hg,hse),e(hse,Mro),e(hg,Ero),e(hg,bP),e(bP,Cro),e(hg,wro),e(A,Aro),e(A,pg),e(pg,pse),e(pse,Lro),e(pg,yro),e(pg,vP),e(vP,xro),e(pg,$ro),e(A,kro),e(A,_g),e(_g,_se),e(_se,Sro),e(_g,Rro),e(_g,FP),e(FP,Pro),e(_g,Bro),e(A,Nro),e(A,ug),e(ug,use),e(use,Iro),e(ug,qro),e(ug,TP),e(TP,jro),e(ug,Dro),e(A,Gro),e(A,bg),e(bg,bse),e(bse,Oro),e(bg,Vro),e(bg,MP),e(MP,Xro),e(bg,zro),e(A,Qro),e(A,vg),e(vg,vse),e(vse,Wro),e(vg,Hro),e(vg,EP),e(EP,Uro),e(vg,Jro),e(A,Yro),e(A,Fg),e(Fg,Fse),e(Fse,Kro),e(Fg,Zro),e(Fg,CP),e(CP,eto),e(Fg,oto),e(A,rto),e(A,Tg),e(Tg,Tse),e(Tse,tto),e(Tg,ato),e(Tg,wP),e(wP,nto),e(Tg,sto),e(A,lto),e(A,Mg),e(Mg,Mse),e(Mse,ito),e(Mg,dto),e(Mg,AP),e(AP,cto),e(Mg,fto),e(A,mto),e(A,Eg),e(Eg,Ese),e(Ese,gto),e(Eg,hto),e(Eg,LP),e(LP,pto),e(Eg,_to),e(A,uto),e(A,Cg),e(Cg,Cse),e(Cse,bto),e(Cg,vto),e(Cg,yP),e(yP,Fto),e(Cg,Tto),e(A,Mto),e(A,wg),e(wg,wse),e(wse,Eto),e(wg,Cto),e(wg,xP),e(xP,wto),e(wg,Ato),e(A,Lto),e(A,Ag),e(Ag,Ase),e(Ase,yto),e(Ag,xto),e(Ag,$P),e($P,$to),e(Ag,kto),e(A,Sto),e(A,Lg),e(Lg,Lse),e(Lse,Rto),e(Lg,Pto),e(Lg,kP),e(kP,Bto),e(Lg,Nto),e(A,Ito),e(A,yg),e(yg,yse),e(yse,qto),e(yg,jto),e(yg,SP),e(SP,Dto),e(yg,Gto),e(A,Oto),e(A,xg),e(xg,xse),e(xse,Vto),e(xg,Xto),e(xg,RP),e(RP,zto),e(xg,Qto),e(A,Wto),e(A,$g),e($g,$se),e($se,Hto),e($g,Uto),e($g,PP),e(PP,Jto),e($g,Yto),e(A,Kto),e(A,kg),e(kg,kse),e(kse,Zto),e(kg,eao),e(kg,BP),e(BP,oao),e(kg,rao),e(A,tao),e(A,Sg),e(Sg,Sse),e(Sse,aao),e(Sg,nao),e(Sg,NP),e(NP,sao),e(Sg,lao),e(A,iao),e(A,Rg),e(Rg,Rse),e(Rse,dao),e(Rg,cao),e(Rg,IP),e(IP,fao),e(Rg,mao),e(A,gao),e(A,Pg),e(Pg,Pse),e(Pse,hao),e(Pg,pao),e(Pg,qP),e(qP,_ao),e(Pg,uao),e(A,bao),e(A,Bg),e(Bg,Bse),e(Bse,vao),e(Bg,Fao),e(Bg,jP),e(jP,Tao),e(Bg,Mao),e(A,Eao),e(A,Ng),e(Ng,Nse),e(Nse,Cao),e(Ng,wao),e(Ng,DP),e(DP,Aao),e(Ng,Lao),e(A,yao),e(A,Ig),e(Ig,Ise),e(Ise,xao),e(Ig,$ao),e(Ig,GP),e(GP,kao),e(Ig,Sao),e(A,Rao),e(A,qg),e(qg,qse),e(qse,Pao),e(qg,Bao),e(qg,OP),e(OP,Nao),e(qg,Iao),e(A,qao),e(A,jg),e(jg,jse),e(jse,jao),e(jg,Dao),e(jg,VP),e(VP,Gao),e(jg,Oao),e(A,Vao),e(A,Dg),e(Dg,Dse),e(Dse,Xao),e(Dg,zao),e(Dg,XP),e(XP,Qao),e(Dg,Wao),e(A,Hao),e(A,Gg),e(Gg,Gse),e(Gse,Uao),e(Gg,Jao),e(Gg,zP),e(zP,Yao),e(Gg,Kao),e(A,Zao),e(A,Og),e(Og,Ose),e(Ose,eno),e(Og,ono),e(Og,QP),e(QP,rno),e(Og,tno),e(A,ano),e(A,Vg),e(Vg,Vse),e(Vse,nno),e(Vg,sno),e(Vg,WP),e(WP,lno),e(Vg,ino),e(A,dno),e(A,Xg),e(Xg,Xse),e(Xse,cno),e(Xg,fno),e(Xg,HP),e(HP,mno),e(Xg,gno),e(A,hno),e(A,zg),e(zg,zse),e(zse,pno),e(zg,_no),e(zg,UP),e(UP,uno),e(zg,bno),e(A,vno),e(A,Qg),e(Qg,Qse),e(Qse,Fno),e(Qg,Tno),e(Qg,JP),e(JP,Mno),e(Qg,Eno),e(A,Cno),e(A,Wg),e(Wg,Wse),e(Wse,wno),e(Wg,Ano),e(Wg,YP),e(YP,Lno),e(Wg,yno),e(A,xno),e(A,Hg),e(Hg,Hse),e(Hse,$no),e(Hg,kno),e(Hg,KP),e(KP,Sno),e(Hg,Rno),e(A,Pno),e(A,Ug),e(Ug,Use),e(Use,Bno),e(Ug,Nno),e(Ug,ZP),e(ZP,Ino),e(Ug,qno),e(A,jno),e(A,Jg),e(Jg,Jse),e(Jse,Dno),e(Jg,Gno),e(Jg,eB),e(eB,Ono),e(Jg,Vno),e(A,Xno),e(A,Yg),e(Yg,Yse),e(Yse,zno),e(Yg,Qno),e(Yg,oB),e(oB,Wno),e(Yg,Hno),e(Lr,Uno),M(Kg,Lr,null),e(Ao,Jno),e(Ao,Zg),M(h6,Zg,null),e(Zg,Yno),e(Zg,Kse),e(Kse,Kno),b(f,uXe,u),b(f,qi,u),e(qi,eh),e(eh,Zse),M(p6,Zse,null),e(qi,Zno),e(qi,ele),e(ele,eso),b(f,bXe,u),b(f,Lo,u),M(_6,Lo,null),e(Lo,oso),e(Lo,u6),e(u6,rso),e(u6,rB),e(rB,tso),e(u6,aso),e(Lo,nso),e(Lo,b6),e(b6,sso),e(b6,ole),e(ole,lso),e(b6,iso),e(Lo,dso),e(Lo,yr),M(v6,yr,null),e(yr,cso),e(yr,rle),e(rle,fso),e(yr,mso),e(yr,Pa),e(Pa,gso),e(Pa,tle),e(tle,hso),e(Pa,pso),e(Pa,ale),e(ale,_so),e(Pa,uso),e(Pa,nle),e(nle,bso),e(Pa,vso),e(yr,Fso),e(yr,k),e(k,jn),e(jn,sle),e(sle,Tso),e(jn,Mso),e(jn,tB),e(tB,Eso),e(jn,Cso),e(jn,aB),e(aB,wso),e(jn,Aso),e(k,Lso),e(k,Dn),e(Dn,lle),e(lle,yso),e(Dn,xso),e(Dn,nB),e(nB,$so),e(Dn,kso),e(Dn,sB),e(sB,Sso),e(Dn,Rso),e(k,Pso),e(k,Gn),e(Gn,ile),e(ile,Bso),e(Gn,Nso),e(Gn,lB),e(lB,Iso),e(Gn,qso),e(Gn,iB),e(iB,jso),e(Gn,Dso),e(k,Gso),e(k,oh),e(oh,dle),e(dle,Oso),e(oh,Vso),e(oh,dB),e(dB,Xso),e(oh,zso),e(k,Qso),e(k,On),e(On,cle),e(cle,Wso),e(On,Hso),e(On,cB),e(cB,Uso),e(On,Jso),e(On,fB),e(fB,Yso),e(On,Kso),e(k,Zso),e(k,rh),e(rh,fle),e(fle,elo),e(rh,olo),e(rh,mB),e(mB,rlo),e(rh,tlo),e(k,alo),e(k,th),e(th,mle),e(mle,nlo),e(th,slo),e(th,gB),e(gB,llo),e(th,ilo),e(k,dlo),e(k,ah),e(ah,gle),e(gle,clo),e(ah,flo),e(ah,hB),e(hB,mlo),e(ah,glo),e(k,hlo),e(k,Vn),e(Vn,hle),e(hle,plo),e(Vn,_lo),e(Vn,pB),e(pB,ulo),e(Vn,blo),e(Vn,_B),e(_B,vlo),e(Vn,Flo),e(k,Tlo),e(k,Xn),e(Xn,ple),e(ple,Mlo),e(Xn,Elo),e(Xn,uB),e(uB,Clo),e(Xn,wlo),e(Xn,bB),e(bB,Alo),e(Xn,Llo),e(k,ylo),e(k,zn),e(zn,_le),e(_le,xlo),e(zn,$lo),e(zn,vB),e(vB,klo),e(zn,Slo),e(zn,FB),e(FB,Rlo),e(zn,Plo),e(k,Blo),e(k,nh),e(nh,ule),e(ule,Nlo),e(nh,Ilo),e(nh,TB),e(TB,qlo),e(nh,jlo),e(k,Dlo),e(k,sh),e(sh,ble),e(ble,Glo),e(sh,Olo),e(sh,MB),e(MB,Vlo),e(sh,Xlo),e(k,zlo),e(k,lh),e(lh,vle),e(vle,Qlo),e(lh,Wlo),e(lh,EB),e(EB,Hlo),e(lh,Ulo),e(k,Jlo),e(k,Qn),e(Qn,Fle),e(Fle,Ylo),e(Qn,Klo),e(Qn,CB),e(CB,Zlo),e(Qn,eio),e(Qn,wB),e(wB,oio),e(Qn,rio),e(k,tio),e(k,ih),e(ih,Tle),e(Tle,aio),e(ih,nio),e(ih,AB),e(AB,sio),e(ih,lio),e(k,iio),e(k,Wn),e(Wn,Mle),e(Mle,dio),e(Wn,cio),e(Wn,LB),e(LB,fio),e(Wn,mio),e(Wn,yB),e(yB,gio),e(Wn,hio),e(k,pio),e(k,Hn),e(Hn,Ele),e(Ele,_io),e(Hn,uio),e(Hn,xB),e(xB,bio),e(Hn,vio),e(Hn,$B),e($B,Fio),e(Hn,Tio),e(k,Mio),e(k,Un),e(Un,Cle),e(Cle,Eio),e(Un,Cio),e(Un,kB),e(kB,wio),e(Un,Aio),e(Un,SB),e(SB,Lio),e(Un,yio),e(k,xio),e(k,Jn),e(Jn,wle),e(wle,$io),e(Jn,kio),e(Jn,RB),e(RB,Sio),e(Jn,Rio),e(Jn,PB),e(PB,Pio),e(Jn,Bio),e(k,Nio),e(k,dh),e(dh,Ale),e(Ale,Iio),e(dh,qio),e(dh,BB),e(BB,jio),e(dh,Dio),e(k,Gio),e(k,Yn),e(Yn,Lle),e(Lle,Oio),e(Yn,Vio),e(Yn,NB),e(NB,Xio),e(Yn,zio),e(Yn,IB),e(IB,Qio),e(Yn,Wio),e(k,Hio),e(k,Kn),e(Kn,yle),e(yle,Uio),e(Kn,Jio),e(Kn,qB),e(qB,Yio),e(Kn,Kio),e(Kn,jB),e(jB,Zio),e(Kn,edo),e(k,odo),e(k,Zn),e(Zn,xle),e(xle,rdo),e(Zn,tdo),e(Zn,DB),e(DB,ado),e(Zn,ndo),e(Zn,GB),e(GB,sdo),e(Zn,ldo),e(k,ido),e(k,es),e(es,$le),e($le,ddo),e(es,cdo),e(es,OB),e(OB,fdo),e(es,mdo),e(es,VB),e(VB,gdo),e(es,hdo),e(k,pdo),e(k,os),e(os,kle),e(kle,_do),e(os,udo),e(os,XB),e(XB,bdo),e(os,vdo),e(os,zB),e(zB,Fdo),e(os,Tdo),e(k,Mdo),e(k,rs),e(rs,Sle),e(Sle,Edo),e(rs,Cdo),e(rs,QB),e(QB,wdo),e(rs,Ado),e(rs,WB),e(WB,Ldo),e(rs,ydo),e(k,xdo),e(k,ch),e(ch,Rle),e(Rle,$do),e(ch,kdo),e(ch,HB),e(HB,Sdo),e(ch,Rdo),e(k,Pdo),e(k,ts),e(ts,Ple),e(Ple,Bdo),e(ts,Ndo),e(ts,UB),e(UB,Ido),e(ts,qdo),e(ts,JB),e(JB,jdo),e(ts,Ddo),e(k,Gdo),e(k,fh),e(fh,Ble),e(Ble,Odo),e(fh,Vdo),e(fh,YB),e(YB,Xdo),e(fh,zdo),e(k,Qdo),e(k,as),e(as,Nle),e(Nle,Wdo),e(as,Hdo),e(as,KB),e(KB,Udo),e(as,Jdo),e(as,ZB),e(ZB,Ydo),e(as,Kdo),e(k,Zdo),e(k,ns),e(ns,Ile),e(Ile,eco),e(ns,oco),e(ns,eN),e(eN,rco),e(ns,tco),e(ns,oN),e(oN,aco),e(ns,nco),e(k,sco),e(k,ss),e(ss,qle),e(qle,lco),e(ss,ico),e(ss,rN),e(rN,dco),e(ss,cco),e(ss,tN),e(tN,fco),e(ss,mco),e(k,gco),e(k,mh),e(mh,jle),e(jle,hco),e(mh,pco),e(mh,aN),e(aN,_co),e(mh,uco),e(k,bco),e(k,ls),e(ls,Dle),e(Dle,vco),e(ls,Fco),e(ls,nN),e(nN,Tco),e(ls,Mco),e(ls,sN),e(sN,Eco),e(ls,Cco),e(k,wco),e(k,is),e(is,Gle),e(Gle,Aco),e(is,Lco),e(is,lN),e(lN,yco),e(is,xco),e(is,iN),e(iN,$co),e(is,kco),e(k,Sco),e(k,ds),e(ds,Ole),e(Ole,Rco),e(ds,Pco),e(ds,dN),e(dN,Bco),e(ds,Nco),e(ds,cN),e(cN,Ico),e(ds,qco),e(k,jco),e(k,gh),e(gh,Vle),e(Vle,Dco),e(gh,Gco),e(gh,fN),e(fN,Oco),e(gh,Vco),e(k,Xco),e(k,cs),e(cs,Xle),e(Xle,zco),e(cs,Qco),e(cs,mN),e(mN,Wco),e(cs,Hco),e(cs,gN),e(gN,Uco),e(cs,Jco),e(k,Yco),e(k,fs),e(fs,zle),e(zle,Kco),e(fs,Zco),e(fs,hN),e(hN,efo),e(fs,ofo),e(fs,pN),e(pN,rfo),e(fs,tfo),e(k,afo),e(k,ms),e(ms,Qle),e(Qle,nfo),e(ms,sfo),e(ms,_N),e(_N,lfo),e(ms,ifo),e(ms,uN),e(uN,dfo),e(ms,cfo),e(k,ffo),e(k,gs),e(gs,Wle),e(Wle,mfo),e(gs,gfo),e(gs,bN),e(bN,hfo),e(gs,pfo),e(gs,vN),e(vN,_fo),e(gs,ufo),e(k,bfo),e(k,hs),e(hs,Hle),e(Hle,vfo),e(hs,Ffo),e(hs,FN),e(FN,Tfo),e(hs,Mfo),e(hs,TN),e(TN,Efo),e(hs,Cfo),e(k,wfo),e(k,ps),e(ps,Ule),e(Ule,Afo),e(ps,Lfo),e(ps,MN),e(MN,yfo),e(ps,xfo),e(ps,EN),e(EN,$fo),e(ps,kfo),e(k,Sfo),e(k,_s),e(_s,Jle),e(Jle,Rfo),e(_s,Pfo),e(_s,CN),e(CN,Bfo),e(_s,Nfo),e(_s,wN),e(wN,Ifo),e(_s,qfo),e(k,jfo),e(k,us),e(us,Yle),e(Yle,Dfo),e(us,Gfo),e(us,AN),e(AN,Ofo),e(us,Vfo),e(us,LN),e(LN,Xfo),e(us,zfo),e(k,Qfo),e(k,hh),e(hh,Kle),e(Kle,Wfo),e(hh,Hfo),e(hh,yN),e(yN,Ufo),e(hh,Jfo),e(k,Yfo),e(k,bs),e(bs,Zle),e(Zle,Kfo),e(bs,Zfo),e(bs,xN),e(xN,emo),e(bs,omo),e(bs,$N),e($N,rmo),e(bs,tmo),e(k,amo),e(k,ph),e(ph,eie),e(eie,nmo),e(ph,smo),e(ph,kN),e(kN,lmo),e(ph,imo),e(k,dmo),e(k,_h),e(_h,oie),e(oie,cmo),e(_h,fmo),e(_h,SN),e(SN,mmo),e(_h,gmo),e(k,hmo),e(k,vs),e(vs,rie),e(rie,pmo),e(vs,_mo),e(vs,RN),e(RN,umo),e(vs,bmo),e(vs,PN),e(PN,vmo),e(vs,Fmo),e(k,Tmo),e(k,Fs),e(Fs,tie),e(tie,Mmo),e(Fs,Emo),e(Fs,BN),e(BN,Cmo),e(Fs,wmo),e(Fs,NN),e(NN,Amo),e(Fs,Lmo),e(k,ymo),e(k,Ts),e(Ts,aie),e(aie,xmo),e(Ts,$mo),e(Ts,IN),e(IN,kmo),e(Ts,Smo),e(Ts,qN),e(qN,Rmo),e(Ts,Pmo),e(k,Bmo),e(k,uh),e(uh,nie),e(nie,Nmo),e(uh,Imo),e(uh,jN),e(jN,qmo),e(uh,jmo),e(k,Dmo),e(k,Ms),e(Ms,sie),e(sie,Gmo),e(Ms,Omo),e(Ms,DN),e(DN,Vmo),e(Ms,Xmo),e(Ms,GN),e(GN,zmo),e(Ms,Qmo),e(k,Wmo),e(k,Es),e(Es,lie),e(lie,Hmo),e(Es,Umo),e(Es,ON),e(ON,Jmo),e(Es,Ymo),e(Es,VN),e(VN,Kmo),e(Es,Zmo),e(k,ego),e(k,Cs),e(Cs,iie),e(iie,ogo),e(Cs,rgo),e(Cs,XN),e(XN,tgo),e(Cs,ago),e(Cs,zN),e(zN,ngo),e(Cs,sgo),e(k,lgo),e(k,ws),e(ws,die),e(die,igo),e(ws,dgo),e(ws,QN),e(QN,cgo),e(ws,fgo),e(ws,WN),e(WN,mgo),e(ws,ggo),e(k,hgo),e(k,As),e(As,cie),e(cie,pgo),e(As,_go),e(As,HN),e(HN,ugo),e(As,bgo),e(As,UN),e(UN,vgo),e(As,Fgo),e(k,Tgo),e(k,Ls),e(Ls,fie),e(fie,Mgo),e(Ls,Ego),e(Ls,JN),e(JN,Cgo),e(Ls,wgo),e(Ls,YN),e(YN,Ago),e(Ls,Lgo),e(k,ygo),e(k,ys),e(ys,mie),e(mie,xgo),e(ys,$go),e(ys,KN),e(KN,kgo),e(ys,Sgo),e(ys,ZN),e(ZN,Rgo),e(ys,Pgo),e(k,Bgo),e(k,xs),e(xs,gie),e(gie,Ngo),e(xs,Igo),e(xs,eI),e(eI,qgo),e(xs,jgo),e(xs,oI),e(oI,Dgo),e(xs,Ggo),e(k,Ogo),e(k,bh),e(bh,hie),e(hie,Vgo),e(bh,Xgo),e(bh,rI),e(rI,zgo),e(bh,Qgo),e(k,Wgo),e(k,$s),e($s,pie),e(pie,Hgo),e($s,Ugo),e($s,tI),e(tI,Jgo),e($s,Ygo),e($s,aI),e(aI,Kgo),e($s,Zgo),e(k,eho),e(k,vh),e(vh,_ie),e(_ie,oho),e(vh,rho),e(vh,nI),e(nI,tho),e(vh,aho),e(k,nho),e(k,Fh),e(Fh,uie),e(uie,sho),e(Fh,lho),e(Fh,sI),e(sI,iho),e(Fh,dho),e(k,cho),e(k,Th),e(Th,bie),e(bie,fho),e(Th,mho),e(Th,lI),e(lI,gho),e(Th,hho),e(k,pho),e(k,Mh),e(Mh,vie),e(vie,_ho),e(Mh,uho),e(Mh,iI),e(iI,bho),e(Mh,vho),e(k,Fho),e(k,ks),e(ks,Fie),e(Fie,Tho),e(ks,Mho),e(ks,dI),e(dI,Eho),e(ks,Cho),e(ks,cI),e(cI,who),e(ks,Aho),e(k,Lho),e(k,Eh),e(Eh,Tie),e(Tie,yho),e(Eh,xho),e(Eh,fI),e(fI,$ho),e(Eh,kho),e(k,Sho),e(k,Ss),e(Ss,Mie),e(Mie,Rho),e(Ss,Pho),e(Ss,mI),e(mI,Bho),e(Ss,Nho),e(Ss,gI),e(gI,Iho),e(Ss,qho),e(k,jho),e(k,Rs),e(Rs,Eie),e(Eie,Dho),e(Rs,Gho),e(Rs,hI),e(hI,Oho),e(Rs,Vho),e(Rs,pI),e(pI,Xho),e(Rs,zho),e(k,Qho),e(k,Ps),e(Ps,Cie),e(Cie,Who),e(Ps,Hho),e(Ps,_I),e(_I,Uho),e(Ps,Jho),e(Ps,uI),e(uI,Yho),e(Ps,Kho),e(k,Zho),e(k,Bs),e(Bs,wie),e(wie,epo),e(Bs,opo),e(Bs,bI),e(bI,rpo),e(Bs,tpo),e(Bs,vI),e(vI,apo),e(Bs,npo),e(k,spo),e(k,Ns),e(Ns,Aie),e(Aie,lpo),e(Ns,ipo),e(Ns,FI),e(FI,dpo),e(Ns,cpo),e(Ns,TI),e(TI,fpo),e(Ns,mpo),e(k,gpo),e(k,Is),e(Is,Lie),e(Lie,hpo),e(Is,ppo),e(Is,MI),e(MI,_po),e(Is,upo),e(Is,EI),e(EI,bpo),e(Is,vpo),e(k,Fpo),e(k,Ch),e(Ch,yie),e(yie,Tpo),e(Ch,Mpo),e(Ch,CI),e(CI,Epo),e(Ch,Cpo),e(k,wpo),e(k,wh),e(wh,xie),e(xie,Apo),e(wh,Lpo),e(wh,wI),e(wI,ypo),e(wh,xpo),e(k,$po),e(k,qs),e(qs,$ie),e($ie,kpo),e(qs,Spo),e(qs,AI),e(AI,Rpo),e(qs,Ppo),e(qs,LI),e(LI,Bpo),e(qs,Npo),e(k,Ipo),e(k,js),e(js,kie),e(kie,qpo),e(js,jpo),e(js,yI),e(yI,Dpo),e(js,Gpo),e(js,xI),e(xI,Opo),e(js,Vpo),e(k,Xpo),e(k,Ds),e(Ds,Sie),e(Sie,zpo),e(Ds,Qpo),e(Ds,$I),e($I,Wpo),e(Ds,Hpo),e(Ds,kI),e(kI,Upo),e(Ds,Jpo),e(k,Ypo),e(k,Ah),e(Ah,Rie),e(Rie,Kpo),e(Ah,Zpo),e(Ah,SI),e(SI,e_o),e(Ah,o_o),e(k,r_o),e(k,Lh),e(Lh,Pie),e(Pie,t_o),e(Lh,a_o),e(Lh,RI),e(RI,n_o),e(Lh,s_o),e(k,l_o),e(k,yh),e(yh,Bie),e(Bie,i_o),e(yh,d_o),e(yh,PI),e(PI,c_o),e(yh,f_o),e(k,m_o),e(k,Gs),e(Gs,Nie),e(Nie,g_o),e(Gs,h_o),e(Gs,BI),e(BI,p_o),e(Gs,__o),e(Gs,NI),e(NI,u_o),e(Gs,b_o),e(k,v_o),e(k,Os),e(Os,Iie),e(Iie,F_o),e(Os,T_o),e(Os,II),e(II,M_o),e(Os,E_o),e(Os,qI),e(qI,C_o),e(Os,w_o),e(k,A_o),e(k,xh),e(xh,qie),e(qie,L_o),e(xh,y_o),e(xh,jI),e(jI,x_o),e(xh,$_o),e(k,k_o),e(k,$h),e($h,jie),e(jie,S_o),e($h,R_o),e($h,DI),e(DI,P_o),e($h,B_o),e(k,N_o),e(k,kh),e(kh,Die),e(Die,I_o),e(kh,q_o),e(kh,GI),e(GI,j_o),e(kh,D_o),e(k,G_o),e(k,Vs),e(Vs,Gie),e(Gie,O_o),e(Vs,V_o),e(Vs,OI),e(OI,X_o),e(Vs,z_o),e(Vs,VI),e(VI,Q_o),e(Vs,W_o),e(k,H_o),e(k,Sh),e(Sh,Oie),e(Oie,U_o),e(Sh,J_o),e(Sh,XI),e(XI,Y_o),e(Sh,K_o),e(k,Z_o),e(k,Rh),e(Rh,Vie),e(Vie,euo),e(Rh,ouo),e(Rh,zI),e(zI,ruo),e(Rh,tuo),e(k,auo),e(k,Xs),e(Xs,Xie),e(Xie,nuo),e(Xs,suo),e(Xs,QI),e(QI,luo),e(Xs,iuo),e(Xs,WI),e(WI,duo),e(Xs,cuo),e(k,fuo),e(k,zs),e(zs,zie),e(zie,muo),e(zs,guo),e(zs,HI),e(HI,huo),e(zs,puo),e(zs,UI),e(UI,_uo),e(zs,uuo),e(k,buo),e(k,Qs),e(Qs,Qie),e(Qie,vuo),e(Qs,Fuo),e(Qs,JI),e(JI,Tuo),e(Qs,Muo),e(Qs,YI),e(YI,Euo),e(Qs,Cuo),e(k,wuo),e(k,Ws),e(Ws,Wie),e(Wie,Auo),e(Ws,Luo),e(Ws,KI),e(KI,yuo),e(Ws,xuo),e(Ws,ZI),e(ZI,$uo),e(Ws,kuo),e(yr,Suo),M(Ph,yr,null),e(Lo,Ruo),e(Lo,Bh),M(F6,Bh,null),e(Bh,Puo),e(Bh,Hie),e(Hie,Buo),b(f,vXe,u),b(f,ji,u),e(ji,Nh),e(Nh,Uie),M(T6,Uie,null),e(ji,Nuo),e(ji,Jie),e(Jie,Iuo),b(f,FXe,u),b(f,yo,u),M(M6,yo,null),e(yo,quo),e(yo,E6),e(E6,juo),e(E6,eq),e(eq,Duo),e(E6,Guo),e(yo,Ouo),e(yo,C6),e(C6,Vuo),e(C6,Yie),e(Yie,Xuo),e(C6,zuo),e(yo,Quo),e(yo,Ue),M(w6,Ue,null),e(Ue,Wuo),e(Ue,Kie),e(Kie,Huo),e(Ue,Uuo),e(Ue,Ba),e(Ba,Juo),e(Ba,Zie),e(Zie,Yuo),e(Ba,Kuo),e(Ba,ede),e(ede,Zuo),e(Ba,e1o),e(Ba,ode),e(ode,o1o),e(Ba,r1o),e(Ue,t1o),e(Ue,Y),e(Y,Ih),e(Ih,rde),e(rde,a1o),e(Ih,n1o),e(Ih,oq),e(oq,s1o),e(Ih,l1o),e(Y,i1o),e(Y,qh),e(qh,tde),e(tde,d1o),e(qh,c1o),e(qh,rq),e(rq,f1o),e(qh,m1o),e(Y,g1o),e(Y,jh),e(jh,ade),e(ade,h1o),e(jh,p1o),e(jh,tq),e(tq,_1o),e(jh,u1o),e(Y,b1o),e(Y,Dh),e(Dh,nde),e(nde,v1o),e(Dh,F1o),e(Dh,aq),e(aq,T1o),e(Dh,M1o),e(Y,E1o),e(Y,Gh),e(Gh,sde),e(sde,C1o),e(Gh,w1o),e(Gh,nq),e(nq,A1o),e(Gh,L1o),e(Y,y1o),e(Y,Oh),e(Oh,lde),e(lde,x1o),e(Oh,$1o),e(Oh,sq),e(sq,k1o),e(Oh,S1o),e(Y,R1o),e(Y,Vh),e(Vh,ide),e(ide,P1o),e(Vh,B1o),e(Vh,lq),e(lq,N1o),e(Vh,I1o),e(Y,q1o),e(Y,Xh),e(Xh,dde),e(dde,j1o),e(Xh,D1o),e(Xh,iq),e(iq,G1o),e(Xh,O1o),e(Y,V1o),e(Y,zh),e(zh,cde),e(cde,X1o),e(zh,z1o),e(zh,dq),e(dq,Q1o),e(zh,W1o),e(Y,H1o),e(Y,Qh),e(Qh,fde),e(fde,U1o),e(Qh,J1o),e(Qh,cq),e(cq,Y1o),e(Qh,K1o),e(Y,Z1o),e(Y,Wh),e(Wh,mde),e(mde,e2o),e(Wh,o2o),e(Wh,fq),e(fq,r2o),e(Wh,t2o),e(Y,a2o),e(Y,Hh),e(Hh,gde),e(gde,n2o),e(Hh,s2o),e(Hh,mq),e(mq,l2o),e(Hh,i2o),e(Y,d2o),e(Y,Uh),e(Uh,hde),e(hde,c2o),e(Uh,f2o),e(Uh,gq),e(gq,m2o),e(Uh,g2o),e(Y,h2o),e(Y,Jh),e(Jh,pde),e(pde,p2o),e(Jh,_2o),e(Jh,hq),e(hq,u2o),e(Jh,b2o),e(Y,v2o),e(Y,Yh),e(Yh,_de),e(_de,F2o),e(Yh,T2o),e(Yh,pq),e(pq,M2o),e(Yh,E2o),e(Y,C2o),e(Y,Kh),e(Kh,ude),e(ude,w2o),e(Kh,A2o),e(Kh,_q),e(_q,L2o),e(Kh,y2o),e(Y,x2o),e(Y,Zh),e(Zh,bde),e(bde,$2o),e(Zh,k2o),e(Zh,uq),e(uq,S2o),e(Zh,R2o),e(Y,P2o),e(Y,ep),e(ep,vde),e(vde,B2o),e(ep,N2o),e(ep,bq),e(bq,I2o),e(ep,q2o),e(Y,j2o),e(Y,op),e(op,Fde),e(Fde,D2o),e(op,G2o),e(op,vq),e(vq,O2o),e(op,V2o),e(Y,X2o),e(Y,rp),e(rp,Tde),e(Tde,z2o),e(rp,Q2o),e(rp,Fq),e(Fq,W2o),e(rp,H2o),e(Y,U2o),e(Y,tp),e(tp,Mde),e(Mde,J2o),e(tp,Y2o),e(tp,Tq),e(Tq,K2o),e(tp,Z2o),e(Y,ebo),e(Y,ap),e(ap,Ede),e(Ede,obo),e(ap,rbo),e(ap,Mq),e(Mq,tbo),e(ap,abo),e(Y,nbo),e(Y,np),e(np,Cde),e(Cde,sbo),e(np,lbo),e(np,Eq),e(Eq,ibo),e(np,dbo),e(Y,cbo),e(Y,sp),e(sp,wde),e(wde,fbo),e(sp,mbo),e(sp,Cq),e(Cq,gbo),e(sp,hbo),e(Y,pbo),e(Y,lp),e(lp,Ade),e(Ade,_bo),e(lp,ubo),e(lp,wq),e(wq,bbo),e(lp,vbo),e(Y,Fbo),e(Y,ip),e(ip,Lde),e(Lde,Tbo),e(ip,Mbo),e(ip,Aq),e(Aq,Ebo),e(ip,Cbo),e(Y,wbo),e(Y,dp),e(dp,yde),e(yde,Abo),e(dp,Lbo),e(dp,Lq),e(Lq,ybo),e(dp,xbo),e(Y,$bo),e(Y,cp),e(cp,xde),e(xde,kbo),e(cp,Sbo),e(cp,yq),e(yq,Rbo),e(cp,Pbo),e(Y,Bbo),e(Y,fp),e(fp,$de),e($de,Nbo),e(fp,Ibo),e(fp,xq),e(xq,qbo),e(fp,jbo),e(Y,Dbo),e(Y,mp),e(mp,kde),e(kde,Gbo),e(mp,Obo),e(mp,$q),e($q,Vbo),e(mp,Xbo),e(Y,zbo),e(Y,gp),e(gp,Sde),e(Sde,Qbo),e(gp,Wbo),e(gp,kq),e(kq,Hbo),e(gp,Ubo),e(Y,Jbo),e(Y,hp),e(hp,Rde),e(Rde,Ybo),e(hp,Kbo),e(hp,Sq),e(Sq,Zbo),e(hp,evo),e(Y,ovo),e(Y,pp),e(pp,Pde),e(Pde,rvo),e(pp,tvo),e(pp,Rq),e(Rq,avo),e(pp,nvo),e(Y,svo),e(Y,_p),e(_p,Bde),e(Bde,lvo),e(_p,ivo),e(_p,Pq),e(Pq,dvo),e(_p,cvo),e(Ue,fvo),M(up,Ue,null),e(Ue,mvo),M(bp,Ue,null),e(yo,gvo),e(yo,vp),M(A6,vp,null),e(vp,hvo),e(vp,Nde),e(Nde,pvo),b(f,TXe,u),b(f,Di,u),e(Di,Fp),e(Fp,Ide),M(L6,Ide,null),e(Di,_vo),e(Di,qde),e(qde,uvo),b(f,MXe,u),b(f,xo,u),M(y6,xo,null),e(xo,bvo),e(xo,x6),e(x6,vvo),e(x6,Bq),e(Bq,Fvo),e(x6,Tvo),e(xo,Mvo),e(xo,$6),e($6,Evo),e($6,jde),e(jde,Cvo),e($6,wvo),e(xo,Avo),e(xo,Je),M(k6,Je,null),e(Je,Lvo),e(Je,Dde),e(Dde,yvo),e(Je,xvo),e(Je,Gi),e(Gi,$vo),e(Gi,Gde),e(Gde,kvo),e(Gi,Svo),e(Gi,Ode),e(Ode,Rvo),e(Gi,Pvo),e(Je,Bvo),e(Je,pe),e(pe,Tp),e(Tp,Vde),e(Vde,Nvo),e(Tp,Ivo),e(Tp,Nq),e(Nq,qvo),e(Tp,jvo),e(pe,Dvo),e(pe,Mp),e(Mp,Xde),e(Xde,Gvo),e(Mp,Ovo),e(Mp,zde),e(zde,Vvo),e(Mp,Xvo),e(pe,zvo),e(pe,Ep),e(Ep,Qde),e(Qde,Qvo),e(Ep,Wvo),e(Ep,Iq),e(Iq,Hvo),e(Ep,Uvo),e(pe,Jvo),e(pe,Cp),e(Cp,Wde),e(Wde,Yvo),e(Cp,Kvo),e(Cp,qq),e(qq,Zvo),e(Cp,e0o),e(pe,o0o),e(pe,wp),e(wp,Hde),e(Hde,r0o),e(wp,t0o),e(wp,jq),e(jq,a0o),e(wp,n0o),e(pe,s0o),e(pe,Ap),e(Ap,Ude),e(Ude,l0o),e(Ap,i0o),e(Ap,Dq),e(Dq,d0o),e(Ap,c0o),e(pe,f0o),e(pe,Lp),e(Lp,Jde),e(Jde,m0o),e(Lp,g0o),e(Lp,Gq),e(Gq,h0o),e(Lp,p0o),e(pe,_0o),e(pe,yp),e(yp,Yde),e(Yde,u0o),e(yp,b0o),e(yp,Oq),e(Oq,v0o),e(yp,F0o),e(pe,T0o),e(pe,xp),e(xp,Kde),e(Kde,M0o),e(xp,E0o),e(xp,Vq),e(Vq,C0o),e(xp,w0o),e(pe,A0o),e(pe,$p),e($p,Zde),e(Zde,L0o),e($p,y0o),e($p,Xq),e(Xq,x0o),e($p,$0o),e(pe,k0o),e(pe,kp),e(kp,ece),e(ece,S0o),e(kp,R0o),e(kp,zq),e(zq,P0o),e(kp,B0o),e(pe,N0o),e(pe,Sp),e(Sp,oce),e(oce,I0o),e(Sp,q0o),e(Sp,Qq),e(Qq,j0o),e(Sp,D0o),e(pe,G0o),e(pe,Rp),e(Rp,rce),e(rce,O0o),e(Rp,V0o),e(Rp,Wq),e(Wq,X0o),e(Rp,z0o),e(pe,Q0o),e(pe,Pp),e(Pp,tce),e(tce,W0o),e(Pp,H0o),e(Pp,Hq),e(Hq,U0o),e(Pp,J0o),e(pe,Y0o),e(pe,Bp),e(Bp,ace),e(ace,K0o),e(Bp,Z0o),e(Bp,Uq),e(Uq,eFo),e(Bp,oFo),e(pe,rFo),e(pe,Np),e(Np,nce),e(nce,tFo),e(Np,aFo),e(Np,Jq),e(Jq,nFo),e(Np,sFo),e(pe,lFo),e(pe,Ip),e(Ip,sce),e(sce,iFo),e(Ip,dFo),e(Ip,Yq),e(Yq,cFo),e(Ip,fFo),e(pe,mFo),e(pe,qp),e(qp,lce),e(lce,gFo),e(qp,hFo),e(qp,Kq),e(Kq,pFo),e(qp,_Fo),e(Je,uFo),M(jp,Je,null),e(Je,bFo),M(Dp,Je,null),e(xo,vFo),e(xo,Gp),M(S6,Gp,null),e(Gp,FFo),e(Gp,ice),e(ice,TFo),b(f,EXe,u),b(f,Oi,u),e(Oi,Op),e(Op,dce),M(R6,dce,null),e(Oi,MFo),e(Oi,cce),e(cce,EFo),b(f,CXe,u),b(f,$o,u),M(P6,$o,null),e($o,CFo),e($o,Vi),e(Vi,wFo),e(Vi,Zq),e(Zq,AFo),e(Vi,LFo),e(Vi,ej),e(ej,yFo),e(Vi,xFo),e($o,$Fo),e($o,B6),e(B6,kFo),e(B6,fce),e(fce,SFo),e(B6,RFo),e($o,PFo),e($o,it),M(N6,it,null),e(it,BFo),e(it,mce),e(mce,NFo),e(it,IFo),e(it,Xi),e(Xi,qFo),e(Xi,gce),e(gce,jFo),e(Xi,DFo),e(Xi,oj),e(oj,GFo),e(Xi,OFo),e(it,VFo),M(Vp,it,null),e($o,XFo),e($o,Ye),M(I6,Ye,null),e(Ye,zFo),e(Ye,hce),e(hce,QFo),e(Ye,WFo),e(Ye,Na),e(Na,HFo),e(Na,pce),e(pce,UFo),e(Na,JFo),e(Na,_ce),e(_ce,YFo),e(Na,KFo),e(Na,uce),e(uce,ZFo),e(Na,eTo),e(Ye,oTo),e(Ye,y),e(y,Xp),e(Xp,bce),e(bce,rTo),e(Xp,tTo),e(Xp,rj),e(rj,aTo),e(Xp,nTo),e(y,sTo),e(y,zp),e(zp,vce),e(vce,lTo),e(zp,iTo),e(zp,tj),e(tj,dTo),e(zp,cTo),e(y,fTo),e(y,Qp),e(Qp,Fce),e(Fce,mTo),e(Qp,gTo),e(Qp,aj),e(aj,hTo),e(Qp,pTo),e(y,_To),e(y,Wp),e(Wp,Tce),e(Tce,uTo),e(Wp,bTo),e(Wp,nj),e(nj,vTo),e(Wp,FTo),e(y,TTo),e(y,Hp),e(Hp,Mce),e(Mce,MTo),e(Hp,ETo),e(Hp,sj),e(sj,CTo),e(Hp,wTo),e(y,ATo),e(y,Up),e(Up,Ece),e(Ece,LTo),e(Up,yTo),e(Up,lj),e(lj,xTo),e(Up,$To),e(y,kTo),e(y,Jp),e(Jp,Cce),e(Cce,STo),e(Jp,RTo),e(Jp,ij),e(ij,PTo),e(Jp,BTo),e(y,NTo),e(y,Yp),e(Yp,wce),e(wce,ITo),e(Yp,qTo),e(Yp,dj),e(dj,jTo),e(Yp,DTo),e(y,GTo),e(y,Kp),e(Kp,Ace),e(Ace,OTo),e(Kp,VTo),e(Kp,cj),e(cj,XTo),e(Kp,zTo),e(y,QTo),e(y,Zp),e(Zp,Lce),e(Lce,WTo),e(Zp,HTo),e(Zp,fj),e(fj,UTo),e(Zp,JTo),e(y,YTo),e(y,e_),e(e_,yce),e(yce,KTo),e(e_,ZTo),e(e_,mj),e(mj,e7o),e(e_,o7o),e(y,r7o),e(y,o_),e(o_,xce),e(xce,t7o),e(o_,a7o),e(o_,gj),e(gj,n7o),e(o_,s7o),e(y,l7o),e(y,r_),e(r_,$ce),e($ce,i7o),e(r_,d7o),e(r_,hj),e(hj,c7o),e(r_,f7o),e(y,m7o),e(y,t_),e(t_,kce),e(kce,g7o),e(t_,h7o),e(t_,pj),e(pj,p7o),e(t_,_7o),e(y,u7o),e(y,a_),e(a_,Sce),e(Sce,b7o),e(a_,v7o),e(a_,_j),e(_j,F7o),e(a_,T7o),e(y,M7o),e(y,n_),e(n_,Rce),e(Rce,E7o),e(n_,C7o),e(n_,uj),e(uj,w7o),e(n_,A7o),e(y,L7o),e(y,s_),e(s_,Pce),e(Pce,y7o),e(s_,x7o),e(s_,bj),e(bj,$7o),e(s_,k7o),e(y,S7o),e(y,l_),e(l_,Bce),e(Bce,R7o),e(l_,P7o),e(l_,vj),e(vj,B7o),e(l_,N7o),e(y,I7o),e(y,i_),e(i_,Nce),e(Nce,q7o),e(i_,j7o),e(i_,Fj),e(Fj,D7o),e(i_,G7o),e(y,O7o),e(y,d_),e(d_,Ice),e(Ice,V7o),e(d_,X7o),e(d_,Tj),e(Tj,z7o),e(d_,Q7o),e(y,W7o),e(y,c_),e(c_,qce),e(qce,H7o),e(c_,U7o),e(c_,Mj),e(Mj,J7o),e(c_,Y7o),e(y,K7o),e(y,f_),e(f_,jce),e(jce,Z7o),e(f_,e8o),e(f_,Ej),e(Ej,o8o),e(f_,r8o),e(y,t8o),e(y,m_),e(m_,Dce),e(Dce,a8o),e(m_,n8o),e(m_,Cj),e(Cj,s8o),e(m_,l8o),e(y,i8o),e(y,g_),e(g_,Gce),e(Gce,d8o),e(g_,c8o),e(g_,wj),e(wj,f8o),e(g_,m8o),e(y,g8o),e(y,h_),e(h_,Oce),e(Oce,h8o),e(h_,p8o),e(h_,Aj),e(Aj,_8o),e(h_,u8o),e(y,b8o),e(y,p_),e(p_,Vce),e(Vce,v8o),e(p_,F8o),e(p_,Lj),e(Lj,T8o),e(p_,M8o),e(y,E8o),e(y,__),e(__,Xce),e(Xce,C8o),e(__,w8o),e(__,yj),e(yj,A8o),e(__,L8o),e(y,y8o),e(y,u_),e(u_,zce),e(zce,x8o),e(u_,$8o),e(u_,xj),e(xj,k8o),e(u_,S8o),e(y,R8o),e(y,b_),e(b_,Qce),e(Qce,P8o),e(b_,B8o),e(b_,$j),e($j,N8o),e(b_,I8o),e(y,q8o),e(y,v_),e(v_,Wce),e(Wce,j8o),e(v_,D8o),e(v_,kj),e(kj,G8o),e(v_,O8o),e(y,V8o),e(y,F_),e(F_,Hce),e(Hce,X8o),e(F_,z8o),e(F_,Sj),e(Sj,Q8o),e(F_,W8o),e(y,H8o),e(y,T_),e(T_,Uce),e(Uce,U8o),e(T_,J8o),e(T_,Rj),e(Rj,Y8o),e(T_,K8o),e(y,Z8o),e(y,M_),e(M_,Jce),e(Jce,e9o),e(M_,o9o),e(M_,Pj),e(Pj,r9o),e(M_,t9o),e(y,a9o),e(y,E_),e(E_,Yce),e(Yce,n9o),e(E_,s9o),e(E_,Bj),e(Bj,l9o),e(E_,i9o),e(y,d9o),e(y,Hs),e(Hs,Kce),e(Kce,c9o),e(Hs,f9o),e(Hs,Nj),e(Nj,m9o),e(Hs,g9o),e(Hs,Ij),e(Ij,h9o),e(Hs,p9o),e(y,_9o),e(y,C_),e(C_,Zce),e(Zce,u9o),e(C_,b9o),e(C_,qj),e(qj,v9o),e(C_,F9o),e(y,T9o),e(y,w_),e(w_,efe),e(efe,M9o),e(w_,E9o),e(w_,jj),e(jj,C9o),e(w_,w9o),e(y,A9o),e(y,A_),e(A_,ofe),e(ofe,L9o),e(A_,y9o),e(A_,Dj),e(Dj,x9o),e(A_,$9o),e(y,k9o),e(y,L_),e(L_,rfe),e(rfe,S9o),e(L_,R9o),e(L_,Gj),e(Gj,P9o),e(L_,B9o),e(y,N9o),e(y,y_),e(y_,tfe),e(tfe,I9o),e(y_,q9o),e(y_,Oj),e(Oj,j9o),e(y_,D9o),e(y,G9o),e(y,x_),e(x_,afe),e(afe,O9o),e(x_,V9o),e(x_,Vj),e(Vj,X9o),e(x_,z9o),e(y,Q9o),e(y,$_),e($_,nfe),e(nfe,W9o),e($_,H9o),e($_,Xj),e(Xj,U9o),e($_,J9o),e(y,Y9o),e(y,k_),e(k_,sfe),e(sfe,K9o),e(k_,Z9o),e(k_,zj),e(zj,eMo),e(k_,oMo),e(y,rMo),e(y,S_),e(S_,lfe),e(lfe,tMo),e(S_,aMo),e(S_,Qj),e(Qj,nMo),e(S_,sMo),e(y,lMo),e(y,R_),e(R_,ife),e(ife,iMo),e(R_,dMo),e(R_,Wj),e(Wj,cMo),e(R_,fMo),e(y,mMo),e(y,P_),e(P_,dfe),e(dfe,gMo),e(P_,hMo),e(P_,Hj),e(Hj,pMo),e(P_,_Mo),e(y,uMo),e(y,B_),e(B_,cfe),e(cfe,bMo),e(B_,vMo),e(B_,Uj),e(Uj,FMo),e(B_,TMo),e(y,MMo),e(y,N_),e(N_,ffe),e(ffe,EMo),e(N_,CMo),e(N_,Jj),e(Jj,wMo),e(N_,AMo),e(y,LMo),e(y,I_),e(I_,mfe),e(mfe,yMo),e(I_,xMo),e(I_,Yj),e(Yj,$Mo),e(I_,kMo),e(y,SMo),e(y,q_),e(q_,gfe),e(gfe,RMo),e(q_,PMo),e(q_,Kj),e(Kj,BMo),e(q_,NMo),e(y,IMo),e(y,j_),e(j_,hfe),e(hfe,qMo),e(j_,jMo),e(j_,Zj),e(Zj,DMo),e(j_,GMo),e(y,OMo),e(y,D_),e(D_,pfe),e(pfe,VMo),e(D_,XMo),e(D_,eD),e(eD,zMo),e(D_,QMo),e(y,WMo),e(y,G_),e(G_,_fe),e(_fe,HMo),e(G_,UMo),e(G_,oD),e(oD,JMo),e(G_,YMo),e(y,KMo),e(y,O_),e(O_,ufe),e(ufe,ZMo),e(O_,e4o),e(O_,rD),e(rD,o4o),e(O_,r4o),e(y,t4o),e(y,V_),e(V_,bfe),e(bfe,a4o),e(V_,n4o),e(V_,tD),e(tD,s4o),e(V_,l4o),e(y,i4o),e(y,X_),e(X_,vfe),e(vfe,d4o),e(X_,c4o),e(X_,aD),e(aD,f4o),e(X_,m4o),e(y,g4o),e(y,z_),e(z_,Ffe),e(Ffe,h4o),e(z_,p4o),e(z_,nD),e(nD,_4o),e(z_,u4o),e(y,b4o),e(y,Q_),e(Q_,Tfe),e(Tfe,v4o),e(Q_,F4o),e(Q_,sD),e(sD,T4o),e(Q_,M4o),e(y,E4o),e(y,W_),e(W_,Mfe),e(Mfe,C4o),e(W_,w4o),e(W_,lD),e(lD,A4o),e(W_,L4o),e(y,y4o),e(y,H_),e(H_,Efe),e(Efe,x4o),e(H_,$4o),e(H_,iD),e(iD,k4o),e(H_,S4o),e(y,R4o),e(y,U_),e(U_,Cfe),e(Cfe,P4o),e(U_,B4o),e(U_,dD),e(dD,N4o),e(U_,I4o),e(y,q4o),e(y,J_),e(J_,wfe),e(wfe,j4o),e(J_,D4o),e(J_,cD),e(cD,G4o),e(J_,O4o),e(y,V4o),e(y,Y_),e(Y_,Afe),e(Afe,X4o),e(Y_,z4o),e(Y_,fD),e(fD,Q4o),e(Y_,W4o),e(y,H4o),e(y,K_),e(K_,Lfe),e(Lfe,U4o),e(K_,J4o),e(K_,mD),e(mD,Y4o),e(K_,K4o),e(y,Z4o),e(y,Z_),e(Z_,yfe),e(yfe,eEo),e(Z_,oEo),e(Z_,gD),e(gD,rEo),e(Z_,tEo),e(y,aEo),e(y,eu),e(eu,xfe),e(xfe,nEo),e(eu,sEo),e(eu,hD),e(hD,lEo),e(eu,iEo),e(y,dEo),e(y,ou),e(ou,$fe),e($fe,cEo),e(ou,fEo),e(ou,pD),e(pD,mEo),e(ou,gEo),e(y,hEo),e(y,ru),e(ru,kfe),e(kfe,pEo),e(ru,_Eo),e(ru,_D),e(_D,uEo),e(ru,bEo),e(y,vEo),e(y,tu),e(tu,Sfe),e(Sfe,FEo),e(tu,TEo),e(tu,uD),e(uD,MEo),e(tu,EEo),e(y,CEo),e(y,au),e(au,Rfe),e(Rfe,wEo),e(au,AEo),e(au,bD),e(bD,LEo),e(au,yEo),e(y,xEo),e(y,nu),e(nu,Pfe),e(Pfe,$Eo),e(nu,kEo),e(nu,vD),e(vD,SEo),e(nu,REo),e(y,PEo),e(y,su),e(su,Bfe),e(Bfe,BEo),e(su,NEo),e(su,FD),e(FD,IEo),e(su,qEo),e(y,jEo),e(y,lu),e(lu,Nfe),e(Nfe,DEo),e(lu,GEo),e(lu,TD),e(TD,OEo),e(lu,VEo),e(y,XEo),e(y,iu),e(iu,Ife),e(Ife,zEo),e(iu,QEo),e(iu,MD),e(MD,WEo),e(iu,HEo),e(y,UEo),e(y,du),e(du,qfe),e(qfe,JEo),e(du,YEo),e(du,ED),e(ED,KEo),e(du,ZEo),e(y,eCo),e(y,cu),e(cu,jfe),e(jfe,oCo),e(cu,rCo),e(cu,CD),e(CD,tCo),e(cu,aCo),e(y,nCo),e(y,fu),e(fu,Dfe),e(Dfe,sCo),e(fu,lCo),e(fu,wD),e(wD,iCo),e(fu,dCo),e(y,cCo),e(y,mu),e(mu,Gfe),e(Gfe,fCo),e(mu,mCo),e(mu,AD),e(AD,gCo),e(mu,hCo),e(y,pCo),e(y,gu),e(gu,Ofe),e(Ofe,_Co),e(gu,uCo),e(gu,LD),e(LD,bCo),e(gu,vCo),e(y,FCo),e(y,hu),e(hu,Vfe),e(Vfe,TCo),e(hu,MCo),e(hu,yD),e(yD,ECo),e(hu,CCo),e(y,wCo),e(y,pu),e(pu,Xfe),e(Xfe,ACo),e(pu,LCo),e(pu,xD),e(xD,yCo),e(pu,xCo),e(y,$Co),e(y,_u),e(_u,zfe),e(zfe,kCo),e(_u,SCo),e(_u,$D),e($D,RCo),e(_u,PCo),e(y,BCo),e(y,uu),e(uu,Qfe),e(Qfe,NCo),e(uu,ICo),e(uu,kD),e(kD,qCo),e(uu,jCo),e(y,DCo),e(y,bu),e(bu,Wfe),e(Wfe,GCo),e(bu,OCo),e(bu,SD),e(SD,VCo),e(bu,XCo),e(y,zCo),e(y,vu),e(vu,Hfe),e(Hfe,QCo),e(vu,WCo),e(vu,RD),e(RD,HCo),e(vu,UCo),e(y,JCo),e(y,Fu),e(Fu,Ufe),e(Ufe,YCo),e(Fu,KCo),e(Fu,PD),e(PD,ZCo),e(Fu,e3o),e(y,o3o),e(y,Tu),e(Tu,Jfe),e(Jfe,r3o),e(Tu,t3o),e(Tu,BD),e(BD,a3o),e(Tu,n3o),e(y,s3o),e(y,Mu),e(Mu,Yfe),e(Yfe,l3o),e(Mu,i3o),e(Mu,ND),e(ND,d3o),e(Mu,c3o),e(y,f3o),e(y,Eu),e(Eu,Kfe),e(Kfe,m3o),e(Eu,g3o),e(Eu,ID),e(ID,h3o),e(Eu,p3o),e(y,_3o),e(y,Cu),e(Cu,Zfe),e(Zfe,u3o),e(Cu,b3o),e(Cu,qD),e(qD,v3o),e(Cu,F3o),e(y,T3o),e(y,wu),e(wu,eme),e(eme,M3o),e(wu,E3o),e(wu,jD),e(jD,C3o),e(wu,w3o),e(y,A3o),e(y,Au),e(Au,ome),e(ome,L3o),e(Au,y3o),e(Au,DD),e(DD,x3o),e(Au,$3o),e(y,k3o),e(y,Lu),e(Lu,rme),e(rme,S3o),e(Lu,R3o),e(Lu,GD),e(GD,P3o),e(Lu,B3o),e(y,N3o),e(y,yu),e(yu,tme),e(tme,I3o),e(yu,q3o),e(yu,OD),e(OD,j3o),e(yu,D3o),e(y,G3o),e(y,xu),e(xu,ame),e(ame,O3o),e(xu,V3o),e(xu,VD),e(VD,X3o),e(xu,z3o),e(y,Q3o),e(y,$u),e($u,nme),e(nme,W3o),e($u,H3o),e($u,XD),e(XD,U3o),e($u,J3o),e(y,Y3o),e(y,ku),e(ku,sme),e(sme,K3o),e(ku,Z3o),e(ku,zD),e(zD,e5o),e(ku,o5o),e(y,r5o),e(y,Su),e(Su,lme),e(lme,t5o),e(Su,a5o),e(Su,QD),e(QD,n5o),e(Su,s5o),e(y,l5o),e(y,Ru),e(Ru,ime),e(ime,i5o),e(Ru,d5o),e(Ru,WD),e(WD,c5o),e(Ru,f5o),e(y,m5o),e(y,Pu),e(Pu,dme),e(dme,g5o),e(Pu,h5o),e(Pu,HD),e(HD,p5o),e(Pu,_5o),e(y,u5o),e(y,Bu),e(Bu,cme),e(cme,b5o),e(Bu,v5o),e(Bu,UD),e(UD,F5o),e(Bu,T5o),e(y,M5o),e(y,Nu),e(Nu,fme),e(fme,E5o),e(Nu,C5o),e(Nu,JD),e(JD,w5o),e(Nu,A5o),e(y,L5o),e(y,Iu),e(Iu,mme),e(mme,y5o),e(Iu,x5o),e(Iu,YD),e(YD,$5o),e(Iu,k5o),e(y,S5o),e(y,qu),e(qu,gme),e(gme,R5o),e(qu,P5o),e(qu,KD),e(KD,B5o),e(qu,N5o),e(y,I5o),e(y,ju),e(ju,hme),e(hme,q5o),e(ju,j5o),e(ju,ZD),e(ZD,D5o),e(ju,G5o),e(y,O5o),e(y,Du),e(Du,pme),e(pme,V5o),e(Du,X5o),e(Du,eG),e(eG,z5o),e(Du,Q5o),e(y,W5o),e(y,Gu),e(Gu,_me),e(_me,H5o),e(Gu,U5o),e(Gu,oG),e(oG,J5o),e(Gu,Y5o),e(y,K5o),e(y,Ou),e(Ou,ume),e(ume,Z5o),e(Ou,ewo),e(Ou,rG),e(rG,owo),e(Ou,rwo),e(y,two),e(y,Vu),e(Vu,bme),e(bme,awo),e(Vu,nwo),e(Vu,tG),e(tG,swo),e(Vu,lwo),e(y,iwo),e(y,Xu),e(Xu,vme),e(vme,dwo),e(Xu,cwo),e(Xu,aG),e(aG,fwo),e(Xu,mwo),e(y,gwo),e(y,zu),e(zu,Fme),e(Fme,hwo),e(zu,pwo),e(zu,nG),e(nG,_wo),e(zu,uwo),e(y,bwo),e(y,Qu),e(Qu,Tme),e(Tme,vwo),e(Qu,Fwo),e(Qu,sG),e(sG,Two),e(Qu,Mwo),e(Ye,Ewo),e(Ye,Wu),e(Wu,Cwo),e(Wu,Mme),e(Mme,wwo),e(Wu,Awo),e(Wu,Eme),e(Eme,Lwo),e(Ye,ywo),M(Hu,Ye,null),b(f,wXe,u),b(f,zi,u),e(zi,Uu),e(Uu,Cme),M(q6,Cme,null),e(zi,xwo),e(zi,wme),e(wme,$wo),b(f,AXe,u),b(f,ko,u),M(j6,ko,null),e(ko,kwo),e(ko,Qi),e(Qi,Swo),e(Qi,lG),e(lG,Rwo),e(Qi,Pwo),e(Qi,iG),e(iG,Bwo),e(Qi,Nwo),e(ko,Iwo),e(ko,D6),e(D6,qwo),e(D6,Ame),e(Ame,jwo),e(D6,Dwo),e(ko,Gwo),e(ko,dt),M(G6,dt,null),e(dt,Owo),e(dt,Lme),e(Lme,Vwo),e(dt,Xwo),e(dt,Wi),e(Wi,zwo),e(Wi,yme),e(yme,Qwo),e(Wi,Wwo),e(Wi,dG),e(dG,Hwo),e(Wi,Uwo),e(dt,Jwo),M(Ju,dt,null),e(ko,Ywo),e(ko,Ke),M(O6,Ke,null),e(Ke,Kwo),e(Ke,xme),e(xme,Zwo),e(Ke,eAo),e(Ke,Ia),e(Ia,oAo),e(Ia,$me),e($me,rAo),e(Ia,tAo),e(Ia,kme),e(kme,aAo),e(Ia,nAo),e(Ia,Sme),e(Sme,sAo),e(Ia,lAo),e(Ke,iAo),e(Ke,G),e(G,Yu),e(Yu,Rme),e(Rme,dAo),e(Yu,cAo),e(Yu,cG),e(cG,fAo),e(Yu,mAo),e(G,gAo),e(G,Ku),e(Ku,Pme),e(Pme,hAo),e(Ku,pAo),e(Ku,fG),e(fG,_Ao),e(Ku,uAo),e(G,bAo),e(G,Zu),e(Zu,Bme),e(Bme,vAo),e(Zu,FAo),e(Zu,mG),e(mG,TAo),e(Zu,MAo),e(G,EAo),e(G,e1),e(e1,Nme),e(Nme,CAo),e(e1,wAo),e(e1,gG),e(gG,AAo),e(e1,LAo),e(G,yAo),e(G,o1),e(o1,Ime),e(Ime,xAo),e(o1,$Ao),e(o1,hG),e(hG,kAo),e(o1,SAo),e(G,RAo),e(G,r1),e(r1,qme),e(qme,PAo),e(r1,BAo),e(r1,pG),e(pG,NAo),e(r1,IAo),e(G,qAo),e(G,t1),e(t1,jme),e(jme,jAo),e(t1,DAo),e(t1,_G),e(_G,GAo),e(t1,OAo),e(G,VAo),e(G,a1),e(a1,Dme),e(Dme,XAo),e(a1,zAo),e(a1,uG),e(uG,QAo),e(a1,WAo),e(G,HAo),e(G,n1),e(n1,Gme),e(Gme,UAo),e(n1,JAo),e(n1,bG),e(bG,YAo),e(n1,KAo),e(G,ZAo),e(G,s1),e(s1,Ome),e(Ome,e6o),e(s1,o6o),e(s1,vG),e(vG,r6o),e(s1,t6o),e(G,a6o),e(G,l1),e(l1,Vme),e(Vme,n6o),e(l1,s6o),e(l1,FG),e(FG,l6o),e(l1,i6o),e(G,d6o),e(G,i1),e(i1,Xme),e(Xme,c6o),e(i1,f6o),e(i1,TG),e(TG,m6o),e(i1,g6o),e(G,h6o),e(G,d1),e(d1,zme),e(zme,p6o),e(d1,_6o),e(d1,MG),e(MG,u6o),e(d1,b6o),e(G,v6o),e(G,c1),e(c1,Qme),e(Qme,F6o),e(c1,T6o),e(c1,EG),e(EG,M6o),e(c1,E6o),e(G,C6o),e(G,f1),e(f1,Wme),e(Wme,w6o),e(f1,A6o),e(f1,CG),e(CG,L6o),e(f1,y6o),e(G,x6o),e(G,m1),e(m1,Hme),e(Hme,$6o),e(m1,k6o),e(m1,wG),e(wG,S6o),e(m1,R6o),e(G,P6o),e(G,g1),e(g1,Ume),e(Ume,B6o),e(g1,N6o),e(g1,AG),e(AG,I6o),e(g1,q6o),e(G,j6o),e(G,h1),e(h1,Jme),e(Jme,D6o),e(h1,G6o),e(h1,LG),e(LG,O6o),e(h1,V6o),e(G,X6o),e(G,p1),e(p1,Yme),e(Yme,z6o),e(p1,Q6o),e(p1,yG),e(yG,W6o),e(p1,H6o),e(G,U6o),e(G,_1),e(_1,Kme),e(Kme,J6o),e(_1,Y6o),e(_1,xG),e(xG,K6o),e(_1,Z6o),e(G,eLo),e(G,u1),e(u1,Zme),e(Zme,oLo),e(u1,rLo),e(u1,$G),e($G,tLo),e(u1,aLo),e(G,nLo),e(G,b1),e(b1,ege),e(ege,sLo),e(b1,lLo),e(b1,kG),e(kG,iLo),e(b1,dLo),e(G,cLo),e(G,v1),e(v1,oge),e(oge,fLo),e(v1,mLo),e(v1,SG),e(SG,gLo),e(v1,hLo),e(G,pLo),e(G,F1),e(F1,rge),e(rge,_Lo),e(F1,uLo),e(F1,RG),e(RG,bLo),e(F1,vLo),e(G,FLo),e(G,T1),e(T1,tge),e(tge,TLo),e(T1,MLo),e(T1,PG),e(PG,ELo),e(T1,CLo),e(G,wLo),e(G,M1),e(M1,age),e(age,ALo),e(M1,LLo),e(M1,BG),e(BG,yLo),e(M1,xLo),e(G,$Lo),e(G,E1),e(E1,nge),e(nge,kLo),e(E1,SLo),e(E1,NG),e(NG,RLo),e(E1,PLo),e(G,BLo),e(G,C1),e(C1,sge),e(sge,NLo),e(C1,ILo),e(C1,IG),e(IG,qLo),e(C1,jLo),e(G,DLo),e(G,w1),e(w1,lge),e(lge,GLo),e(w1,OLo),e(w1,qG),e(qG,VLo),e(w1,XLo),e(G,zLo),e(G,A1),e(A1,ige),e(ige,QLo),e(A1,WLo),e(A1,jG),e(jG,HLo),e(A1,ULo),e(G,JLo),e(G,L1),e(L1,dge),e(dge,YLo),e(L1,KLo),e(L1,DG),e(DG,ZLo),e(L1,eyo),e(G,oyo),e(G,y1),e(y1,cge),e(cge,ryo),e(y1,tyo),e(y1,GG),e(GG,ayo),e(y1,nyo),e(G,syo),e(G,x1),e(x1,fge),e(fge,lyo),e(x1,iyo),e(x1,OG),e(OG,dyo),e(x1,cyo),e(G,fyo),e(G,$1),e($1,mge),e(mge,myo),e($1,gyo),e($1,VG),e(VG,hyo),e($1,pyo),e(G,_yo),e(G,k1),e(k1,gge),e(gge,uyo),e(k1,byo),e(k1,XG),e(XG,vyo),e(k1,Fyo),e(G,Tyo),e(G,S1),e(S1,hge),e(hge,Myo),e(S1,Eyo),e(S1,zG),e(zG,Cyo),e(S1,wyo),e(G,Ayo),e(G,R1),e(R1,pge),e(pge,Lyo),e(R1,yyo),e(R1,QG),e(QG,xyo),e(R1,$yo),e(G,kyo),e(G,P1),e(P1,_ge),e(_ge,Syo),e(P1,Ryo),e(P1,WG),e(WG,Pyo),e(P1,Byo),e(G,Nyo),e(G,B1),e(B1,uge),e(uge,Iyo),e(B1,qyo),e(B1,HG),e(HG,jyo),e(B1,Dyo),e(G,Gyo),e(G,N1),e(N1,bge),e(bge,Oyo),e(N1,Vyo),e(N1,UG),e(UG,Xyo),e(N1,zyo),e(G,Qyo),e(G,I1),e(I1,vge),e(vge,Wyo),e(I1,Hyo),e(I1,JG),e(JG,Uyo),e(I1,Jyo),e(G,Yyo),e(G,q1),e(q1,Fge),e(Fge,Kyo),e(q1,Zyo),e(q1,YG),e(YG,exo),e(q1,oxo),e(G,rxo),e(G,j1),e(j1,Tge),e(Tge,txo),e(j1,axo),e(j1,KG),e(KG,nxo),e(j1,sxo),e(G,lxo),e(G,D1),e(D1,Mge),e(Mge,ixo),e(D1,dxo),e(D1,ZG),e(ZG,cxo),e(D1,fxo),e(G,mxo),e(G,G1),e(G1,Ege),e(Ege,gxo),e(G1,hxo),e(G1,eO),e(eO,pxo),e(G1,_xo),e(Ke,uxo),e(Ke,O1),e(O1,bxo),e(O1,Cge),e(Cge,vxo),e(O1,Fxo),e(O1,wge),e(wge,Txo),e(Ke,Mxo),M(V1,Ke,null),b(f,LXe,u),b(f,Hi,u),e(Hi,X1),e(X1,Age),M(V6,Age,null),e(Hi,Exo),e(Hi,Lge),e(Lge,Cxo),b(f,yXe,u),b(f,So,u),M(X6,So,null),e(So,wxo),e(So,Ui),e(Ui,Axo),e(Ui,oO),e(oO,Lxo),e(Ui,yxo),e(Ui,rO),e(rO,xxo),e(Ui,$xo),e(So,kxo),e(So,z6),e(z6,Sxo),e(z6,yge),e(yge,Rxo),e(z6,Pxo),e(So,Bxo),e(So,ct),M(Q6,ct,null),e(ct,Nxo),e(ct,xge),e(xge,Ixo),e(ct,qxo),e(ct,Ji),e(Ji,jxo),e(Ji,$ge),e($ge,Dxo),e(Ji,Gxo),e(Ji,tO),e(tO,Oxo),e(Ji,Vxo),e(ct,Xxo),M(z1,ct,null),e(So,zxo),e(So,Ze),M(W6,Ze,null),e(Ze,Qxo),e(Ze,kge),e(kge,Wxo),e(Ze,Hxo),e(Ze,qa),e(qa,Uxo),e(qa,Sge),e(Sge,Jxo),e(qa,Yxo),e(qa,Rge),e(Rge,Kxo),e(qa,Zxo),e(qa,Pge),e(Pge,e$o),e(qa,o$o),e(Ze,r$o),e(Ze,z),e(z,Q1),e(Q1,Bge),e(Bge,t$o),e(Q1,a$o),e(Q1,aO),e(aO,n$o),e(Q1,s$o),e(z,l$o),e(z,W1),e(W1,Nge),e(Nge,i$o),e(W1,d$o),e(W1,nO),e(nO,c$o),e(W1,f$o),e(z,m$o),e(z,H1),e(H1,Ige),e(Ige,g$o),e(H1,h$o),e(H1,sO),e(sO,p$o),e(H1,_$o),e(z,u$o),e(z,U1),e(U1,qge),e(qge,b$o),e(U1,v$o),e(U1,lO),e(lO,F$o),e(U1,T$o),e(z,M$o),e(z,J1),e(J1,jge),e(jge,E$o),e(J1,C$o),e(J1,iO),e(iO,w$o),e(J1,A$o),e(z,L$o),e(z,Y1),e(Y1,Dge),e(Dge,y$o),e(Y1,x$o),e(Y1,dO),e(dO,$$o),e(Y1,k$o),e(z,S$o),e(z,K1),e(K1,Gge),e(Gge,R$o),e(K1,P$o),e(K1,cO),e(cO,B$o),e(K1,N$o),e(z,I$o),e(z,Z1),e(Z1,Oge),e(Oge,q$o),e(Z1,j$o),e(Z1,fO),e(fO,D$o),e(Z1,G$o),e(z,O$o),e(z,e2),e(e2,Vge),e(Vge,V$o),e(e2,X$o),e(e2,mO),e(mO,z$o),e(e2,Q$o),e(z,W$o),e(z,o2),e(o2,Xge),e(Xge,H$o),e(o2,U$o),e(o2,gO),e(gO,J$o),e(o2,Y$o),e(z,K$o),e(z,r2),e(r2,zge),e(zge,Z$o),e(r2,eko),e(r2,hO),e(hO,oko),e(r2,rko),e(z,tko),e(z,t2),e(t2,Qge),e(Qge,ako),e(t2,nko),e(t2,pO),e(pO,sko),e(t2,lko),e(z,iko),e(z,a2),e(a2,Wge),e(Wge,dko),e(a2,cko),e(a2,_O),e(_O,fko),e(a2,mko),e(z,gko),e(z,n2),e(n2,Hge),e(Hge,hko),e(n2,pko),e(n2,uO),e(uO,_ko),e(n2,uko),e(z,bko),e(z,s2),e(s2,Uge),e(Uge,vko),e(s2,Fko),e(s2,bO),e(bO,Tko),e(s2,Mko),e(z,Eko),e(z,l2),e(l2,Jge),e(Jge,Cko),e(l2,wko),e(l2,vO),e(vO,Ako),e(l2,Lko),e(z,yko),e(z,i2),e(i2,Yge),e(Yge,xko),e(i2,$ko),e(i2,FO),e(FO,kko),e(i2,Sko),e(z,Rko),e(z,d2),e(d2,Kge),e(Kge,Pko),e(d2,Bko),e(d2,TO),e(TO,Nko),e(d2,Iko),e(z,qko),e(z,c2),e(c2,Zge),e(Zge,jko),e(c2,Dko),e(c2,MO),e(MO,Gko),e(c2,Oko),e(z,Vko),e(z,f2),e(f2,ehe),e(ehe,Xko),e(f2,zko),e(f2,EO),e(EO,Qko),e(f2,Wko),e(z,Hko),e(z,m2),e(m2,ohe),e(ohe,Uko),e(m2,Jko),e(m2,CO),e(CO,Yko),e(m2,Kko),e(z,Zko),e(z,g2),e(g2,rhe),e(rhe,eSo),e(g2,oSo),e(g2,wO),e(wO,rSo),e(g2,tSo),e(z,aSo),e(z,h2),e(h2,the),e(the,nSo),e(h2,sSo),e(h2,AO),e(AO,lSo),e(h2,iSo),e(z,dSo),e(z,p2),e(p2,ahe),e(ahe,cSo),e(p2,fSo),e(p2,LO),e(LO,mSo),e(p2,gSo),e(z,hSo),e(z,_2),e(_2,nhe),e(nhe,pSo),e(_2,_So),e(_2,yO),e(yO,uSo),e(_2,bSo),e(z,vSo),e(z,u2),e(u2,she),e(she,FSo),e(u2,TSo),e(u2,xO),e(xO,MSo),e(u2,ESo),e(z,CSo),e(z,b2),e(b2,lhe),e(lhe,wSo),e(b2,ASo),e(b2,$O),e($O,LSo),e(b2,ySo),e(z,xSo),e(z,v2),e(v2,ihe),e(ihe,$So),e(v2,kSo),e(v2,kO),e(kO,SSo),e(v2,RSo),e(z,PSo),e(z,F2),e(F2,dhe),e(dhe,BSo),e(F2,NSo),e(F2,SO),e(SO,ISo),e(F2,qSo),e(z,jSo),e(z,T2),e(T2,che),e(che,DSo),e(T2,GSo),e(T2,RO),e(RO,OSo),e(T2,VSo),e(z,XSo),e(z,M2),e(M2,fhe),e(fhe,zSo),e(M2,QSo),e(M2,PO),e(PO,WSo),e(M2,HSo),e(z,USo),e(z,E2),e(E2,mhe),e(mhe,JSo),e(E2,YSo),e(E2,BO),e(BO,KSo),e(E2,ZSo),e(z,eRo),e(z,C2),e(C2,ghe),e(ghe,oRo),e(C2,rRo),e(C2,NO),e(NO,tRo),e(C2,aRo),e(z,nRo),e(z,w2),e(w2,hhe),e(hhe,sRo),e(w2,lRo),e(w2,IO),e(IO,iRo),e(w2,dRo),e(z,cRo),e(z,A2),e(A2,phe),e(phe,fRo),e(A2,mRo),e(A2,qO),e(qO,gRo),e(A2,hRo),e(z,pRo),e(z,L2),e(L2,_he),e(_he,_Ro),e(L2,uRo),e(L2,jO),e(jO,bRo),e(L2,vRo),e(z,FRo),e(z,y2),e(y2,uhe),e(uhe,TRo),e(y2,MRo),e(y2,DO),e(DO,ERo),e(y2,CRo),e(z,wRo),e(z,x2),e(x2,bhe),e(bhe,ARo),e(x2,LRo),e(x2,GO),e(GO,yRo),e(x2,xRo),e(z,$Ro),e(z,$2),e($2,vhe),e(vhe,kRo),e($2,SRo),e($2,OO),e(OO,RRo),e($2,PRo),e(z,BRo),e(z,k2),e(k2,Fhe),e(Fhe,NRo),e(k2,IRo),e(k2,VO),e(VO,qRo),e(k2,jRo),e(Ze,DRo),e(Ze,S2),e(S2,GRo),e(S2,The),e(The,ORo),e(S2,VRo),e(S2,Mhe),e(Mhe,XRo),e(Ze,zRo),M(R2,Ze,null),b(f,xXe,u),b(f,Yi,u),e(Yi,P2),e(P2,Ehe),M(H6,Ehe,null),e(Yi,QRo),e(Yi,Che),e(Che,WRo),b(f,$Xe,u),b(f,Ro,u),M(U6,Ro,null),e(Ro,HRo),e(Ro,Ki),e(Ki,URo),e(Ki,XO),e(XO,JRo),e(Ki,YRo),e(Ki,zO),e(zO,KRo),e(Ki,ZRo),e(Ro,ePo),e(Ro,J6),e(J6,oPo),e(J6,whe),e(whe,rPo),e(J6,tPo),e(Ro,aPo),e(Ro,ft),M(Y6,ft,null),e(ft,nPo),e(ft,Ahe),e(Ahe,sPo),e(ft,lPo),e(ft,Zi),e(Zi,iPo),e(Zi,Lhe),e(Lhe,dPo),e(Zi,cPo),e(Zi,QO),e(QO,fPo),e(Zi,mPo),e(ft,gPo),M(B2,ft,null),e(Ro,hPo),e(Ro,eo),M(K6,eo,null),e(eo,pPo),e(eo,yhe),e(yhe,_Po),e(eo,uPo),e(eo,ja),e(ja,bPo),e(ja,xhe),e(xhe,vPo),e(ja,FPo),e(ja,$he),e($he,TPo),e(ja,MPo),e(ja,khe),e(khe,EPo),e(ja,CPo),e(eo,wPo),e(eo,W),e(W,N2),e(N2,She),e(She,APo),e(N2,LPo),e(N2,WO),e(WO,yPo),e(N2,xPo),e(W,$Po),e(W,I2),e(I2,Rhe),e(Rhe,kPo),e(I2,SPo),e(I2,HO),e(HO,RPo),e(I2,PPo),e(W,BPo),e(W,q2),e(q2,Phe),e(Phe,NPo),e(q2,IPo),e(q2,UO),e(UO,qPo),e(q2,jPo),e(W,DPo),e(W,j2),e(j2,Bhe),e(Bhe,GPo),e(j2,OPo),e(j2,JO),e(JO,VPo),e(j2,XPo),e(W,zPo),e(W,D2),e(D2,Nhe),e(Nhe,QPo),e(D2,WPo),e(D2,YO),e(YO,HPo),e(D2,UPo),e(W,JPo),e(W,G2),e(G2,Ihe),e(Ihe,YPo),e(G2,KPo),e(G2,KO),e(KO,ZPo),e(G2,eBo),e(W,oBo),e(W,O2),e(O2,qhe),e(qhe,rBo),e(O2,tBo),e(O2,ZO),e(ZO,aBo),e(O2,nBo),e(W,sBo),e(W,V2),e(V2,jhe),e(jhe,lBo),e(V2,iBo),e(V2,eV),e(eV,dBo),e(V2,cBo),e(W,fBo),e(W,X2),e(X2,Dhe),e(Dhe,mBo),e(X2,gBo),e(X2,oV),e(oV,hBo),e(X2,pBo),e(W,_Bo),e(W,z2),e(z2,Ghe),e(Ghe,uBo),e(z2,bBo),e(z2,rV),e(rV,vBo),e(z2,FBo),e(W,TBo),e(W,Q2),e(Q2,Ohe),e(Ohe,MBo),e(Q2,EBo),e(Q2,tV),e(tV,CBo),e(Q2,wBo),e(W,ABo),e(W,W2),e(W2,Vhe),e(Vhe,LBo),e(W2,yBo),e(W2,aV),e(aV,xBo),e(W2,$Bo),e(W,kBo),e(W,H2),e(H2,Xhe),e(Xhe,SBo),e(H2,RBo),e(H2,nV),e(nV,PBo),e(H2,BBo),e(W,NBo),e(W,U2),e(U2,zhe),e(zhe,IBo),e(U2,qBo),e(U2,sV),e(sV,jBo),e(U2,DBo),e(W,GBo),e(W,J2),e(J2,Qhe),e(Qhe,OBo),e(J2,VBo),e(J2,lV),e(lV,XBo),e(J2,zBo),e(W,QBo),e(W,Y2),e(Y2,Whe),e(Whe,WBo),e(Y2,HBo),e(Y2,iV),e(iV,UBo),e(Y2,JBo),e(W,YBo),e(W,K2),e(K2,Hhe),e(Hhe,KBo),e(K2,ZBo),e(K2,dV),e(dV,eNo),e(K2,oNo),e(W,rNo),e(W,Z2),e(Z2,Uhe),e(Uhe,tNo),e(Z2,aNo),e(Z2,cV),e(cV,nNo),e(Z2,sNo),e(W,lNo),e(W,eb),e(eb,Jhe),e(Jhe,iNo),e(eb,dNo),e(eb,fV),e(fV,cNo),e(eb,fNo),e(W,mNo),e(W,ob),e(ob,Yhe),e(Yhe,gNo),e(ob,hNo),e(ob,mV),e(mV,pNo),e(ob,_No),e(W,uNo),e(W,rb),e(rb,Khe),e(Khe,bNo),e(rb,vNo),e(rb,gV),e(gV,FNo),e(rb,TNo),e(W,MNo),e(W,tb),e(tb,Zhe),e(Zhe,ENo),e(tb,CNo),e(tb,hV),e(hV,wNo),e(tb,ANo),e(W,LNo),e(W,ab),e(ab,epe),e(epe,yNo),e(ab,xNo),e(ab,pV),e(pV,$No),e(ab,kNo),e(W,SNo),e(W,nb),e(nb,ope),e(ope,RNo),e(nb,PNo),e(nb,_V),e(_V,BNo),e(nb,NNo),e(W,INo),e(W,sb),e(sb,rpe),e(rpe,qNo),e(sb,jNo),e(sb,uV),e(uV,DNo),e(sb,GNo),e(W,ONo),e(W,lb),e(lb,tpe),e(tpe,VNo),e(lb,XNo),e(lb,bV),e(bV,zNo),e(lb,QNo),e(W,WNo),e(W,ib),e(ib,ape),e(ape,HNo),e(ib,UNo),e(ib,vV),e(vV,JNo),e(ib,YNo),e(W,KNo),e(W,db),e(db,npe),e(npe,ZNo),e(db,eIo),e(db,FV),e(FV,oIo),e(db,rIo),e(W,tIo),e(W,cb),e(cb,spe),e(spe,aIo),e(cb,nIo),e(cb,TV),e(TV,sIo),e(cb,lIo),e(W,iIo),e(W,fb),e(fb,lpe),e(lpe,dIo),e(fb,cIo),e(fb,MV),e(MV,fIo),e(fb,mIo),e(W,gIo),e(W,mb),e(mb,ipe),e(ipe,hIo),e(mb,pIo),e(mb,EV),e(EV,_Io),e(mb,uIo),e(W,bIo),e(W,gb),e(gb,dpe),e(dpe,vIo),e(gb,FIo),e(gb,CV),e(CV,TIo),e(gb,MIo),e(W,EIo),e(W,hb),e(hb,cpe),e(cpe,CIo),e(hb,wIo),e(hb,wV),e(wV,AIo),e(hb,LIo),e(W,yIo),e(W,pb),e(pb,fpe),e(fpe,xIo),e(pb,$Io),e(pb,mpe),e(mpe,kIo),e(pb,SIo),e(W,RIo),e(W,_b),e(_b,gpe),e(gpe,PIo),e(_b,BIo),e(_b,AV),e(AV,NIo),e(_b,IIo),e(W,qIo),e(W,ub),e(ub,hpe),e(hpe,jIo),e(ub,DIo),e(ub,LV),e(LV,GIo),e(ub,OIo),e(W,VIo),e(W,bb),e(bb,ppe),e(ppe,XIo),e(bb,zIo),e(bb,yV),e(yV,QIo),e(bb,WIo),e(W,HIo),e(W,vb),e(vb,_pe),e(_pe,UIo),e(vb,JIo),e(vb,xV),e(xV,YIo),e(vb,KIo),e(eo,ZIo),e(eo,Fb),e(Fb,eqo),e(Fb,upe),e(upe,oqo),e(Fb,rqo),e(Fb,bpe),e(bpe,tqo),e(eo,aqo),M(Tb,eo,null),b(f,kXe,u),b(f,ed,u),e(ed,Mb),e(Mb,vpe),M(Z6,vpe,null),e(ed,nqo),e(ed,Fpe),e(Fpe,sqo),b(f,SXe,u),b(f,Po,u),M(eL,Po,null),e(Po,lqo),e(Po,od),e(od,iqo),e(od,$V),e($V,dqo),e(od,cqo),e(od,kV),e(kV,fqo),e(od,mqo),e(Po,gqo),e(Po,oL),e(oL,hqo),e(oL,Tpe),e(Tpe,pqo),e(oL,_qo),e(Po,uqo),e(Po,mt),M(rL,mt,null),e(mt,bqo),e(mt,Mpe),e(Mpe,vqo),e(mt,Fqo),e(mt,rd),e(rd,Tqo),e(rd,Epe),e(Epe,Mqo),e(rd,Eqo),e(rd,SV),e(SV,Cqo),e(rd,wqo),e(mt,Aqo),M(Eb,mt,null),e(Po,Lqo),e(Po,oo),M(tL,oo,null),e(oo,yqo),e(oo,Cpe),e(Cpe,xqo),e(oo,$qo),e(oo,Da),e(Da,kqo),e(Da,wpe),e(wpe,Sqo),e(Da,Rqo),e(Da,Ape),e(Ape,Pqo),e(Da,Bqo),e(Da,Lpe),e(Lpe,Nqo),e(Da,Iqo),e(oo,qqo),e(oo,fe),e(fe,Cb),e(Cb,ype),e(ype,jqo),e(Cb,Dqo),e(Cb,RV),e(RV,Gqo),e(Cb,Oqo),e(fe,Vqo),e(fe,wb),e(wb,xpe),e(xpe,Xqo),e(wb,zqo),e(wb,PV),e(PV,Qqo),e(wb,Wqo),e(fe,Hqo),e(fe,Ab),e(Ab,$pe),e($pe,Uqo),e(Ab,Jqo),e(Ab,BV),e(BV,Yqo),e(Ab,Kqo),e(fe,Zqo),e(fe,Lb),e(Lb,kpe),e(kpe,ejo),e(Lb,ojo),e(Lb,NV),e(NV,rjo),e(Lb,tjo),e(fe,ajo),e(fe,yb),e(yb,Spe),e(Spe,njo),e(yb,sjo),e(yb,IV),e(IV,ljo),e(yb,ijo),e(fe,djo),e(fe,xb),e(xb,Rpe),e(Rpe,cjo),e(xb,fjo),e(xb,qV),e(qV,mjo),e(xb,gjo),e(fe,hjo),e(fe,$b),e($b,Ppe),e(Ppe,pjo),e($b,_jo),e($b,jV),e(jV,ujo),e($b,bjo),e(fe,vjo),e(fe,kb),e(kb,Bpe),e(Bpe,Fjo),e(kb,Tjo),e(kb,DV),e(DV,Mjo),e(kb,Ejo),e(fe,Cjo),e(fe,Sb),e(Sb,Npe),e(Npe,wjo),e(Sb,Ajo),e(Sb,GV),e(GV,Ljo),e(Sb,yjo),e(fe,xjo),e(fe,Rb),e(Rb,Ipe),e(Ipe,$jo),e(Rb,kjo),e(Rb,OV),e(OV,Sjo),e(Rb,Rjo),e(fe,Pjo),e(fe,Pb),e(Pb,qpe),e(qpe,Bjo),e(Pb,Njo),e(Pb,VV),e(VV,Ijo),e(Pb,qjo),e(fe,jjo),e(fe,Bb),e(Bb,jpe),e(jpe,Djo),e(Bb,Gjo),e(Bb,XV),e(XV,Ojo),e(Bb,Vjo),e(fe,Xjo),e(fe,Nb),e(Nb,Dpe),e(Dpe,zjo),e(Nb,Qjo),e(Nb,zV),e(zV,Wjo),e(Nb,Hjo),e(fe,Ujo),e(fe,Ib),e(Ib,Gpe),e(Gpe,Jjo),e(Ib,Yjo),e(Ib,QV),e(QV,Kjo),e(Ib,Zjo),e(fe,eDo),e(fe,qb),e(qb,Ope),e(Ope,oDo),e(qb,rDo),e(qb,WV),e(WV,tDo),e(qb,aDo),e(fe,nDo),e(fe,jb),e(jb,Vpe),e(Vpe,sDo),e(jb,lDo),e(jb,HV),e(HV,iDo),e(jb,dDo),e(fe,cDo),e(fe,Db),e(Db,Xpe),e(Xpe,fDo),e(Db,mDo),e(Db,UV),e(UV,gDo),e(Db,hDo),e(fe,pDo),e(fe,Gb),e(Gb,zpe),e(zpe,_Do),e(Gb,uDo),e(Gb,JV),e(JV,bDo),e(Gb,vDo),e(fe,FDo),e(fe,Ob),e(Ob,Qpe),e(Qpe,TDo),e(Ob,MDo),e(Ob,YV),e(YV,EDo),e(Ob,CDo),e(oo,wDo),e(oo,Vb),e(Vb,ADo),e(Vb,Wpe),e(Wpe,LDo),e(Vb,yDo),e(Vb,Hpe),e(Hpe,xDo),e(oo,$Do),M(Xb,oo,null),b(f,RXe,u),b(f,td,u),e(td,zb),e(zb,Upe),M(aL,Upe,null),e(td,kDo),e(td,Jpe),e(Jpe,SDo),b(f,PXe,u),b(f,Bo,u),M(nL,Bo,null),e(Bo,RDo),e(Bo,ad),e(ad,PDo),e(ad,KV),e(KV,BDo),e(ad,NDo),e(ad,ZV),e(ZV,IDo),e(ad,qDo),e(Bo,jDo),e(Bo,sL),e(sL,DDo),e(sL,Ype),e(Ype,GDo),e(sL,ODo),e(Bo,VDo),e(Bo,gt),M(lL,gt,null),e(gt,XDo),e(gt,Kpe),e(Kpe,zDo),e(gt,QDo),e(gt,nd),e(nd,WDo),e(nd,Zpe),e(Zpe,HDo),e(nd,UDo),e(nd,eX),e(eX,JDo),e(nd,YDo),e(gt,KDo),M(Qb,gt,null),e(Bo,ZDo),e(Bo,ro),M(iL,ro,null),e(ro,eGo),e(ro,e_e),e(e_e,oGo),e(ro,rGo),e(ro,Ga),e(Ga,tGo),e(Ga,o_e),e(o_e,aGo),e(Ga,nGo),e(Ga,r_e),e(r_e,sGo),e(Ga,lGo),e(Ga,t_e),e(t_e,iGo),e(Ga,dGo),e(ro,cGo),e(ro,I),e(I,Wb),e(Wb,a_e),e(a_e,fGo),e(Wb,mGo),e(Wb,oX),e(oX,gGo),e(Wb,hGo),e(I,pGo),e(I,Hb),e(Hb,n_e),e(n_e,_Go),e(Hb,uGo),e(Hb,rX),e(rX,bGo),e(Hb,vGo),e(I,FGo),e(I,Ub),e(Ub,s_e),e(s_e,TGo),e(Ub,MGo),e(Ub,tX),e(tX,EGo),e(Ub,CGo),e(I,wGo),e(I,Jb),e(Jb,l_e),e(l_e,AGo),e(Jb,LGo),e(Jb,aX),e(aX,yGo),e(Jb,xGo),e(I,$Go),e(I,Yb),e(Yb,i_e),e(i_e,kGo),e(Yb,SGo),e(Yb,nX),e(nX,RGo),e(Yb,PGo),e(I,BGo),e(I,Kb),e(Kb,d_e),e(d_e,NGo),e(Kb,IGo),e(Kb,sX),e(sX,qGo),e(Kb,jGo),e(I,DGo),e(I,Zb),e(Zb,c_e),e(c_e,GGo),e(Zb,OGo),e(Zb,lX),e(lX,VGo),e(Zb,XGo),e(I,zGo),e(I,ev),e(ev,f_e),e(f_e,QGo),e(ev,WGo),e(ev,iX),e(iX,HGo),e(ev,UGo),e(I,JGo),e(I,ov),e(ov,m_e),e(m_e,YGo),e(ov,KGo),e(ov,dX),e(dX,ZGo),e(ov,eOo),e(I,oOo),e(I,rv),e(rv,g_e),e(g_e,rOo),e(rv,tOo),e(rv,cX),e(cX,aOo),e(rv,nOo),e(I,sOo),e(I,tv),e(tv,h_e),e(h_e,lOo),e(tv,iOo),e(tv,fX),e(fX,dOo),e(tv,cOo),e(I,fOo),e(I,av),e(av,p_e),e(p_e,mOo),e(av,gOo),e(av,mX),e(mX,hOo),e(av,pOo),e(I,_Oo),e(I,nv),e(nv,__e),e(__e,uOo),e(nv,bOo),e(nv,gX),e(gX,vOo),e(nv,FOo),e(I,TOo),e(I,sv),e(sv,u_e),e(u_e,MOo),e(sv,EOo),e(sv,hX),e(hX,COo),e(sv,wOo),e(I,AOo),e(I,lv),e(lv,b_e),e(b_e,LOo),e(lv,yOo),e(lv,pX),e(pX,xOo),e(lv,$Oo),e(I,kOo),e(I,iv),e(iv,v_e),e(v_e,SOo),e(iv,ROo),e(iv,_X),e(_X,POo),e(iv,BOo),e(I,NOo),e(I,dv),e(dv,F_e),e(F_e,IOo),e(dv,qOo),e(dv,uX),e(uX,jOo),e(dv,DOo),e(I,GOo),e(I,cv),e(cv,T_e),e(T_e,OOo),e(cv,VOo),e(cv,bX),e(bX,XOo),e(cv,zOo),e(I,QOo),e(I,fv),e(fv,M_e),e(M_e,WOo),e(fv,HOo),e(fv,vX),e(vX,UOo),e(fv,JOo),e(I,YOo),e(I,mv),e(mv,E_e),e(E_e,KOo),e(mv,ZOo),e(mv,FX),e(FX,eVo),e(mv,oVo),e(I,rVo),e(I,gv),e(gv,C_e),e(C_e,tVo),e(gv,aVo),e(gv,TX),e(TX,nVo),e(gv,sVo),e(I,lVo),e(I,hv),e(hv,w_e),e(w_e,iVo),e(hv,dVo),e(hv,MX),e(MX,cVo),e(hv,fVo),e(I,mVo),e(I,pv),e(pv,A_e),e(A_e,gVo),e(pv,hVo),e(pv,EX),e(EX,pVo),e(pv,_Vo),e(I,uVo),e(I,_v),e(_v,L_e),e(L_e,bVo),e(_v,vVo),e(_v,CX),e(CX,FVo),e(_v,TVo),e(I,MVo),e(I,uv),e(uv,y_e),e(y_e,EVo),e(uv,CVo),e(uv,wX),e(wX,wVo),e(uv,AVo),e(I,LVo),e(I,bv),e(bv,x_e),e(x_e,yVo),e(bv,xVo),e(bv,AX),e(AX,$Vo),e(bv,kVo),e(I,SVo),e(I,vv),e(vv,$_e),e($_e,RVo),e(vv,PVo),e(vv,LX),e(LX,BVo),e(vv,NVo),e(I,IVo),e(I,Fv),e(Fv,k_e),e(k_e,qVo),e(Fv,jVo),e(Fv,yX),e(yX,DVo),e(Fv,GVo),e(I,OVo),e(I,Tv),e(Tv,S_e),e(S_e,VVo),e(Tv,XVo),e(Tv,xX),e(xX,zVo),e(Tv,QVo),e(I,WVo),e(I,Mv),e(Mv,R_e),e(R_e,HVo),e(Mv,UVo),e(Mv,$X),e($X,JVo),e(Mv,YVo),e(I,KVo),e(I,Ev),e(Ev,P_e),e(P_e,ZVo),e(Ev,eXo),e(Ev,kX),e(kX,oXo),e(Ev,rXo),e(I,tXo),e(I,Cv),e(Cv,B_e),e(B_e,aXo),e(Cv,nXo),e(Cv,SX),e(SX,sXo),e(Cv,lXo),e(I,iXo),e(I,wv),e(wv,N_e),e(N_e,dXo),e(wv,cXo),e(wv,RX),e(RX,fXo),e(wv,mXo),e(I,gXo),e(I,Av),e(Av,I_e),e(I_e,hXo),e(Av,pXo),e(Av,PX),e(PX,_Xo),e(Av,uXo),e(I,bXo),e(I,Lv),e(Lv,q_e),e(q_e,vXo),e(Lv,FXo),e(Lv,BX),e(BX,TXo),e(Lv,MXo),e(I,EXo),e(I,yv),e(yv,j_e),e(j_e,CXo),e(yv,wXo),e(yv,NX),e(NX,AXo),e(yv,LXo),e(I,yXo),e(I,xv),e(xv,D_e),e(D_e,xXo),e(xv,$Xo),e(xv,IX),e(IX,kXo),e(xv,SXo),e(I,RXo),e(I,$v),e($v,G_e),e(G_e,PXo),e($v,BXo),e($v,qX),e(qX,NXo),e($v,IXo),e(I,qXo),e(I,kv),e(kv,O_e),e(O_e,jXo),e(kv,DXo),e(kv,jX),e(jX,GXo),e(kv,OXo),e(I,VXo),e(I,Sv),e(Sv,V_e),e(V_e,XXo),e(Sv,zXo),e(Sv,DX),e(DX,QXo),e(Sv,WXo),e(I,HXo),e(I,Rv),e(Rv,X_e),e(X_e,UXo),e(Rv,JXo),e(Rv,GX),e(GX,YXo),e(Rv,KXo),e(I,ZXo),e(I,Pv),e(Pv,z_e),e(z_e,ezo),e(Pv,ozo),e(Pv,OX),e(OX,rzo),e(Pv,tzo),e(I,azo),e(I,Bv),e(Bv,Q_e),e(Q_e,nzo),e(Bv,szo),e(Bv,VX),e(VX,lzo),e(Bv,izo),e(I,dzo),e(I,Nv),e(Nv,W_e),e(W_e,czo),e(Nv,fzo),e(Nv,XX),e(XX,mzo),e(Nv,gzo),e(I,hzo),e(I,Iv),e(Iv,H_e),e(H_e,pzo),e(Iv,_zo),e(Iv,zX),e(zX,uzo),e(Iv,bzo),e(I,vzo),e(I,qv),e(qv,U_e),e(U_e,Fzo),e(qv,Tzo),e(qv,QX),e(QX,Mzo),e(qv,Ezo),e(I,Czo),e(I,jv),e(jv,J_e),e(J_e,wzo),e(jv,Azo),e(jv,WX),e(WX,Lzo),e(jv,yzo),e(I,xzo),e(I,Dv),e(Dv,Y_e),e(Y_e,$zo),e(Dv,kzo),e(Dv,HX),e(HX,Szo),e(Dv,Rzo),e(I,Pzo),e(I,Gv),e(Gv,K_e),e(K_e,Bzo),e(Gv,Nzo),e(Gv,UX),e(UX,Izo),e(Gv,qzo),e(I,jzo),e(I,Ov),e(Ov,Z_e),e(Z_e,Dzo),e(Ov,Gzo),e(Ov,JX),e(JX,Ozo),e(Ov,Vzo),e(ro,Xzo),e(ro,Vv),e(Vv,zzo),e(Vv,eue),e(eue,Qzo),e(Vv,Wzo),e(Vv,oue),e(oue,Hzo),e(ro,Uzo),M(Xv,ro,null),b(f,BXe,u),b(f,sd,u),e(sd,zv),e(zv,rue),M(dL,rue,null),e(sd,Jzo),e(sd,tue),e(tue,Yzo),b(f,NXe,u),b(f,No,u),M(cL,No,null),e(No,Kzo),e(No,ld),e(ld,Zzo),e(ld,YX),e(YX,eQo),e(ld,oQo),e(ld,KX),e(KX,rQo),e(ld,tQo),e(No,aQo),e(No,fL),e(fL,nQo),e(fL,aue),e(aue,sQo),e(fL,lQo),e(No,iQo),e(No,ht),M(mL,ht,null),e(ht,dQo),e(ht,nue),e(nue,cQo),e(ht,fQo),e(ht,id),e(id,mQo),e(id,sue),e(sue,gQo),e(id,hQo),e(id,ZX),e(ZX,pQo),e(id,_Qo),e(ht,uQo),M(Qv,ht,null),e(No,bQo),e(No,to),M(gL,to,null),e(to,vQo),e(to,lue),e(lue,FQo),e(to,TQo),e(to,Oa),e(Oa,MQo),e(Oa,iue),e(iue,EQo),e(Oa,CQo),e(Oa,due),e(due,wQo),e(Oa,AQo),e(Oa,cue),e(cue,LQo),e(Oa,yQo),e(to,xQo),e(to,Z),e(Z,Wv),e(Wv,fue),e(fue,$Qo),e(Wv,kQo),e(Wv,ez),e(ez,SQo),e(Wv,RQo),e(Z,PQo),e(Z,Hv),e(Hv,mue),e(mue,BQo),e(Hv,NQo),e(Hv,oz),e(oz,IQo),e(Hv,qQo),e(Z,jQo),e(Z,Uv),e(Uv,gue),e(gue,DQo),e(Uv,GQo),e(Uv,rz),e(rz,OQo),e(Uv,VQo),e(Z,XQo),e(Z,Jv),e(Jv,hue),e(hue,zQo),e(Jv,QQo),e(Jv,tz),e(tz,WQo),e(Jv,HQo),e(Z,UQo),e(Z,Yv),e(Yv,pue),e(pue,JQo),e(Yv,YQo),e(Yv,az),e(az,KQo),e(Yv,ZQo),e(Z,eWo),e(Z,Kv),e(Kv,_ue),e(_ue,oWo),e(Kv,rWo),e(Kv,nz),e(nz,tWo),e(Kv,aWo),e(Z,nWo),e(Z,Zv),e(Zv,uue),e(uue,sWo),e(Zv,lWo),e(Zv,sz),e(sz,iWo),e(Zv,dWo),e(Z,cWo),e(Z,e0),e(e0,bue),e(bue,fWo),e(e0,mWo),e(e0,lz),e(lz,gWo),e(e0,hWo),e(Z,pWo),e(Z,o0),e(o0,vue),e(vue,_Wo),e(o0,uWo),e(o0,iz),e(iz,bWo),e(o0,vWo),e(Z,FWo),e(Z,r0),e(r0,Fue),e(Fue,TWo),e(r0,MWo),e(r0,dz),e(dz,EWo),e(r0,CWo),e(Z,wWo),e(Z,t0),e(t0,Tue),e(Tue,AWo),e(t0,LWo),e(t0,cz),e(cz,yWo),e(t0,xWo),e(Z,$Wo),e(Z,a0),e(a0,Mue),e(Mue,kWo),e(a0,SWo),e(a0,fz),e(fz,RWo),e(a0,PWo),e(Z,BWo),e(Z,n0),e(n0,Eue),e(Eue,NWo),e(n0,IWo),e(n0,mz),e(mz,qWo),e(n0,jWo),e(Z,DWo),e(Z,s0),e(s0,Cue),e(Cue,GWo),e(s0,OWo),e(s0,gz),e(gz,VWo),e(s0,XWo),e(Z,zWo),e(Z,l0),e(l0,wue),e(wue,QWo),e(l0,WWo),e(l0,hz),e(hz,HWo),e(l0,UWo),e(Z,JWo),e(Z,i0),e(i0,Aue),e(Aue,YWo),e(i0,KWo),e(i0,pz),e(pz,ZWo),e(i0,eHo),e(Z,oHo),e(Z,d0),e(d0,Lue),e(Lue,rHo),e(d0,tHo),e(d0,_z),e(_z,aHo),e(d0,nHo),e(Z,sHo),e(Z,c0),e(c0,yue),e(yue,lHo),e(c0,iHo),e(c0,uz),e(uz,dHo),e(c0,cHo),e(Z,fHo),e(Z,f0),e(f0,xue),e(xue,mHo),e(f0,gHo),e(f0,bz),e(bz,hHo),e(f0,pHo),e(Z,_Ho),e(Z,m0),e(m0,$ue),e($ue,uHo),e(m0,bHo),e(m0,vz),e(vz,vHo),e(m0,FHo),e(Z,THo),e(Z,g0),e(g0,kue),e(kue,MHo),e(g0,EHo),e(g0,Fz),e(Fz,CHo),e(g0,wHo),e(Z,AHo),e(Z,h0),e(h0,Sue),e(Sue,LHo),e(h0,yHo),e(h0,Tz),e(Tz,xHo),e(h0,$Ho),e(Z,kHo),e(Z,p0),e(p0,Rue),e(Rue,SHo),e(p0,RHo),e(p0,Mz),e(Mz,PHo),e(p0,BHo),e(Z,NHo),e(Z,_0),e(_0,Pue),e(Pue,IHo),e(_0,qHo),e(_0,Ez),e(Ez,jHo),e(_0,DHo),e(Z,GHo),e(Z,u0),e(u0,Bue),e(Bue,OHo),e(u0,VHo),e(u0,Cz),e(Cz,XHo),e(u0,zHo),e(Z,QHo),e(Z,b0),e(b0,Nue),e(Nue,WHo),e(b0,HHo),e(b0,wz),e(wz,UHo),e(b0,JHo),e(Z,YHo),e(Z,v0),e(v0,Iue),e(Iue,KHo),e(v0,ZHo),e(v0,Az),e(Az,eUo),e(v0,oUo),e(Z,rUo),e(Z,F0),e(F0,que),e(que,tUo),e(F0,aUo),e(F0,Lz),e(Lz,nUo),e(F0,sUo),e(Z,lUo),e(Z,T0),e(T0,jue),e(jue,iUo),e(T0,dUo),e(T0,yz),e(yz,cUo),e(T0,fUo),e(Z,mUo),e(Z,M0),e(M0,Due),e(Due,gUo),e(M0,hUo),e(M0,xz),e(xz,pUo),e(M0,_Uo),e(to,uUo),e(to,E0),e(E0,bUo),e(E0,Gue),e(Gue,vUo),e(E0,FUo),e(E0,Oue),e(Oue,TUo),e(to,MUo),M(C0,to,null),b(f,IXe,u),b(f,dd,u),e(dd,w0),e(w0,Vue),M(hL,Vue,null),e(dd,EUo),e(dd,Xue),e(Xue,CUo),b(f,qXe,u),b(f,Io,u),M(pL,Io,null),e(Io,wUo),e(Io,cd),e(cd,AUo),e(cd,$z),e($z,LUo),e(cd,yUo),e(cd,kz),e(kz,xUo),e(cd,$Uo),e(Io,kUo),e(Io,_L),e(_L,SUo),e(_L,zue),e(zue,RUo),e(_L,PUo),e(Io,BUo),e(Io,pt),M(uL,pt,null),e(pt,NUo),e(pt,Que),e(Que,IUo),e(pt,qUo),e(pt,fd),e(fd,jUo),e(fd,Wue),e(Wue,DUo),e(fd,GUo),e(fd,Sz),e(Sz,OUo),e(fd,VUo),e(pt,XUo),M(A0,pt,null),e(Io,zUo),e(Io,ao),M(bL,ao,null),e(ao,QUo),e(ao,Hue),e(Hue,WUo),e(ao,HUo),e(ao,Va),e(Va,UUo),e(Va,Uue),e(Uue,JUo),e(Va,YUo),e(Va,Jue),e(Jue,KUo),e(Va,ZUo),e(Va,Yue),e(Yue,eJo),e(Va,oJo),e(ao,rJo),e(ao,qo),e(qo,L0),e(L0,Kue),e(Kue,tJo),e(L0,aJo),e(L0,Rz),e(Rz,nJo),e(L0,sJo),e(qo,lJo),e(qo,y0),e(y0,Zue),e(Zue,iJo),e(y0,dJo),e(y0,Pz),e(Pz,cJo),e(y0,fJo),e(qo,mJo),e(qo,x0),e(x0,e1e),e(e1e,gJo),e(x0,hJo),e(x0,Bz),e(Bz,pJo),e(x0,_Jo),e(qo,uJo),e(qo,$0),e($0,o1e),e(o1e,bJo),e($0,vJo),e($0,Nz),e(Nz,FJo),e($0,TJo),e(qo,MJo),e(qo,k0),e(k0,r1e),e(r1e,EJo),e(k0,CJo),e(k0,Iz),e(Iz,wJo),e(k0,AJo),e(qo,LJo),e(qo,S0),e(S0,t1e),e(t1e,yJo),e(S0,xJo),e(S0,qz),e(qz,$Jo),e(S0,kJo),e(ao,SJo),e(ao,R0),e(R0,RJo),e(R0,a1e),e(a1e,PJo),e(R0,BJo),e(R0,n1e),e(n1e,NJo),e(ao,IJo),M(P0,ao,null),b(f,jXe,u),b(f,md,u),e(md,B0),e(B0,s1e),M(vL,s1e,null),e(md,qJo),e(md,l1e),e(l1e,jJo),b(f,DXe,u),b(f,jo,u),M(FL,jo,null),e(jo,DJo),e(jo,gd),e(gd,GJo),e(gd,jz),e(jz,OJo),e(gd,VJo),e(gd,Dz),e(Dz,XJo),e(gd,zJo),e(jo,QJo),e(jo,TL),e(TL,WJo),e(TL,i1e),e(i1e,HJo),e(TL,UJo),e(jo,JJo),e(jo,_t),M(ML,_t,null),e(_t,YJo),e(_t,d1e),e(d1e,KJo),e(_t,ZJo),e(_t,hd),e(hd,eYo),e(hd,c1e),e(c1e,oYo),e(hd,rYo),e(hd,Gz),e(Gz,tYo),e(hd,aYo),e(_t,nYo),M(N0,_t,null),e(jo,sYo),e(jo,no),M(EL,no,null),e(no,lYo),e(no,f1e),e(f1e,iYo),e(no,dYo),e(no,Xa),e(Xa,cYo),e(Xa,m1e),e(m1e,fYo),e(Xa,mYo),e(Xa,g1e),e(g1e,gYo),e(Xa,hYo),e(Xa,h1e),e(h1e,pYo),e(Xa,_Yo),e(no,uYo),e(no,U),e(U,I0),e(I0,p1e),e(p1e,bYo),e(I0,vYo),e(I0,Oz),e(Oz,FYo),e(I0,TYo),e(U,MYo),e(U,q0),e(q0,_1e),e(_1e,EYo),e(q0,CYo),e(q0,Vz),e(Vz,wYo),e(q0,AYo),e(U,LYo),e(U,j0),e(j0,u1e),e(u1e,yYo),e(j0,xYo),e(j0,Xz),e(Xz,$Yo),e(j0,kYo),e(U,SYo),e(U,D0),e(D0,b1e),e(b1e,RYo),e(D0,PYo),e(D0,zz),e(zz,BYo),e(D0,NYo),e(U,IYo),e(U,G0),e(G0,v1e),e(v1e,qYo),e(G0,jYo),e(G0,Qz),e(Qz,DYo),e(G0,GYo),e(U,OYo),e(U,O0),e(O0,F1e),e(F1e,VYo),e(O0,XYo),e(O0,Wz),e(Wz,zYo),e(O0,QYo),e(U,WYo),e(U,V0),e(V0,T1e),e(T1e,HYo),e(V0,UYo),e(V0,Hz),e(Hz,JYo),e(V0,YYo),e(U,KYo),e(U,X0),e(X0,M1e),e(M1e,ZYo),e(X0,eKo),e(X0,Uz),e(Uz,oKo),e(X0,rKo),e(U,tKo),e(U,z0),e(z0,E1e),e(E1e,aKo),e(z0,nKo),e(z0,Jz),e(Jz,sKo),e(z0,lKo),e(U,iKo),e(U,Q0),e(Q0,C1e),e(C1e,dKo),e(Q0,cKo),e(Q0,Yz),e(Yz,fKo),e(Q0,mKo),e(U,gKo),e(U,W0),e(W0,w1e),e(w1e,hKo),e(W0,pKo),e(W0,Kz),e(Kz,_Ko),e(W0,uKo),e(U,bKo),e(U,H0),e(H0,A1e),e(A1e,vKo),e(H0,FKo),e(H0,Zz),e(Zz,TKo),e(H0,MKo),e(U,EKo),e(U,U0),e(U0,L1e),e(L1e,CKo),e(U0,wKo),e(U0,eQ),e(eQ,AKo),e(U0,LKo),e(U,yKo),e(U,J0),e(J0,y1e),e(y1e,xKo),e(J0,$Ko),e(J0,oQ),e(oQ,kKo),e(J0,SKo),e(U,RKo),e(U,Y0),e(Y0,x1e),e(x1e,PKo),e(Y0,BKo),e(Y0,rQ),e(rQ,NKo),e(Y0,IKo),e(U,qKo),e(U,K0),e(K0,$1e),e($1e,jKo),e(K0,DKo),e(K0,tQ),e(tQ,GKo),e(K0,OKo),e(U,VKo),e(U,Z0),e(Z0,k1e),e(k1e,XKo),e(Z0,zKo),e(Z0,aQ),e(aQ,QKo),e(Z0,WKo),e(U,HKo),e(U,eF),e(eF,S1e),e(S1e,UKo),e(eF,JKo),e(eF,nQ),e(nQ,YKo),e(eF,KKo),e(U,ZKo),e(U,oF),e(oF,R1e),e(R1e,eZo),e(oF,oZo),e(oF,sQ),e(sQ,rZo),e(oF,tZo),e(U,aZo),e(U,rF),e(rF,P1e),e(P1e,nZo),e(rF,sZo),e(rF,lQ),e(lQ,lZo),e(rF,iZo),e(U,dZo),e(U,tF),e(tF,B1e),e(B1e,cZo),e(tF,fZo),e(tF,iQ),e(iQ,mZo),e(tF,gZo),e(U,hZo),e(U,aF),e(aF,N1e),e(N1e,pZo),e(aF,_Zo),e(aF,dQ),e(dQ,uZo),e(aF,bZo),e(U,vZo),e(U,nF),e(nF,I1e),e(I1e,FZo),e(nF,TZo),e(nF,cQ),e(cQ,MZo),e(nF,EZo),e(U,CZo),e(U,sF),e(sF,q1e),e(q1e,wZo),e(sF,AZo),e(sF,fQ),e(fQ,LZo),e(sF,yZo),e(U,xZo),e(U,lF),e(lF,j1e),e(j1e,$Zo),e(lF,kZo),e(lF,mQ),e(mQ,SZo),e(lF,RZo),e(U,PZo),e(U,iF),e(iF,D1e),e(D1e,BZo),e(iF,NZo),e(iF,gQ),e(gQ,IZo),e(iF,qZo),e(U,jZo),e(U,dF),e(dF,G1e),e(G1e,DZo),e(dF,GZo),e(dF,hQ),e(hQ,OZo),e(dF,VZo),e(U,XZo),e(U,cF),e(cF,O1e),e(O1e,zZo),e(cF,QZo),e(cF,pQ),e(pQ,WZo),e(cF,HZo),e(U,UZo),e(U,fF),e(fF,V1e),e(V1e,JZo),e(fF,YZo),e(fF,_Q),e(_Q,KZo),e(fF,ZZo),e(U,eer),e(U,mF),e(mF,X1e),e(X1e,oer),e(mF,rer),e(mF,uQ),e(uQ,ter),e(mF,aer),e(U,ner),e(U,gF),e(gF,z1e),e(z1e,ser),e(gF,ler),e(gF,bQ),e(bQ,ier),e(gF,der),e(U,cer),e(U,hF),e(hF,Q1e),e(Q1e,fer),e(hF,mer),e(hF,vQ),e(vQ,ger),e(hF,her),e(U,per),e(U,pF),e(pF,W1e),e(W1e,_er),e(pF,uer),e(pF,FQ),e(FQ,ber),e(pF,ver),e(U,Fer),e(U,_F),e(_F,H1e),e(H1e,Ter),e(_F,Mer),e(_F,TQ),e(TQ,Eer),e(_F,Cer),e(U,wer),e(U,uF),e(uF,U1e),e(U1e,Aer),e(uF,Ler),e(uF,MQ),e(MQ,yer),e(uF,xer),e(U,$er),e(U,bF),e(bF,J1e),e(J1e,ker),e(bF,Ser),e(bF,EQ),e(EQ,Rer),e(bF,Per),e(no,Ber),e(no,vF),e(vF,Ner),e(vF,Y1e),e(Y1e,Ier),e(vF,qer),e(vF,K1e),e(K1e,jer),e(no,Der),M(FF,no,null),b(f,GXe,u),b(f,pd,u),e(pd,TF),e(TF,Z1e),M(CL,Z1e,null),e(pd,Ger),e(pd,e2e),e(e2e,Oer),b(f,OXe,u),b(f,Do,u),M(wL,Do,null),e(Do,Ver),e(Do,_d),e(_d,Xer),e(_d,CQ),e(CQ,zer),e(_d,Qer),e(_d,wQ),e(wQ,Wer),e(_d,Her),e(Do,Uer),e(Do,AL),e(AL,Jer),e(AL,o2e),e(o2e,Yer),e(AL,Ker),e(Do,Zer),e(Do,ut),M(LL,ut,null),e(ut,eor),e(ut,r2e),e(r2e,oor),e(ut,ror),e(ut,ud),e(ud,tor),e(ud,t2e),e(t2e,aor),e(ud,nor),e(ud,AQ),e(AQ,sor),e(ud,lor),e(ut,ior),M(MF,ut,null),e(Do,dor),e(Do,so),M(yL,so,null),e(so,cor),e(so,a2e),e(a2e,mor),e(so,gor),e(so,za),e(za,hor),e(za,n2e),e(n2e,por),e(za,_or),e(za,s2e),e(s2e,uor),e(za,bor),e(za,l2e),e(l2e,vor),e(za,For),e(so,Tor),e(so,V),e(V,EF),e(EF,i2e),e(i2e,Mor),e(EF,Eor),e(EF,LQ),e(LQ,Cor),e(EF,wor),e(V,Aor),e(V,CF),e(CF,d2e),e(d2e,Lor),e(CF,yor),e(CF,yQ),e(yQ,xor),e(CF,$or),e(V,kor),e(V,wF),e(wF,c2e),e(c2e,Sor),e(wF,Ror),e(wF,xQ),e(xQ,Por),e(wF,Bor),e(V,Nor),e(V,AF),e(AF,f2e),e(f2e,Ior),e(AF,qor),e(AF,$Q),e($Q,jor),e(AF,Dor),e(V,Gor),e(V,LF),e(LF,m2e),e(m2e,Oor),e(LF,Vor),e(LF,kQ),e(kQ,Xor),e(LF,zor),e(V,Qor),e(V,yF),e(yF,g2e),e(g2e,Wor),e(yF,Hor),e(yF,SQ),e(SQ,Uor),e(yF,Jor),e(V,Yor),e(V,xF),e(xF,h2e),e(h2e,Kor),e(xF,Zor),e(xF,RQ),e(RQ,err),e(xF,orr),e(V,rrr),e(V,$F),e($F,p2e),e(p2e,trr),e($F,arr),e($F,PQ),e(PQ,nrr),e($F,srr),e(V,lrr),e(V,kF),e(kF,_2e),e(_2e,irr),e(kF,drr),e(kF,BQ),e(BQ,crr),e(kF,frr),e(V,mrr),e(V,SF),e(SF,u2e),e(u2e,grr),e(SF,hrr),e(SF,NQ),e(NQ,prr),e(SF,_rr),e(V,urr),e(V,RF),e(RF,b2e),e(b2e,brr),e(RF,vrr),e(RF,IQ),e(IQ,Frr),e(RF,Trr),e(V,Mrr),e(V,PF),e(PF,v2e),e(v2e,Err),e(PF,Crr),e(PF,qQ),e(qQ,wrr),e(PF,Arr),e(V,Lrr),e(V,BF),e(BF,F2e),e(F2e,yrr),e(BF,xrr),e(BF,jQ),e(jQ,$rr),e(BF,krr),e(V,Srr),e(V,NF),e(NF,T2e),e(T2e,Rrr),e(NF,Prr),e(NF,DQ),e(DQ,Brr),e(NF,Nrr),e(V,Irr),e(V,IF),e(IF,M2e),e(M2e,qrr),e(IF,jrr),e(IF,GQ),e(GQ,Drr),e(IF,Grr),e(V,Orr),e(V,qF),e(qF,E2e),e(E2e,Vrr),e(qF,Xrr),e(qF,OQ),e(OQ,zrr),e(qF,Qrr),e(V,Wrr),e(V,jF),e(jF,C2e),e(C2e,Hrr),e(jF,Urr),e(jF,VQ),e(VQ,Jrr),e(jF,Yrr),e(V,Krr),e(V,DF),e(DF,w2e),e(w2e,Zrr),e(DF,etr),e(DF,XQ),e(XQ,otr),e(DF,rtr),e(V,ttr),e(V,GF),e(GF,A2e),e(A2e,atr),e(GF,ntr),e(GF,zQ),e(zQ,str),e(GF,ltr),e(V,itr),e(V,OF),e(OF,L2e),e(L2e,dtr),e(OF,ctr),e(OF,QQ),e(QQ,ftr),e(OF,mtr),e(V,gtr),e(V,VF),e(VF,y2e),e(y2e,htr),e(VF,ptr),e(VF,WQ),e(WQ,_tr),e(VF,utr),e(V,btr),e(V,XF),e(XF,x2e),e(x2e,vtr),e(XF,Ftr),e(XF,HQ),e(HQ,Ttr),e(XF,Mtr),e(V,Etr),e(V,zF),e(zF,$2e),e($2e,Ctr),e(zF,wtr),e(zF,UQ),e(UQ,Atr),e(zF,Ltr),e(V,ytr),e(V,QF),e(QF,k2e),e(k2e,xtr),e(QF,$tr),e(QF,JQ),e(JQ,ktr),e(QF,Str),e(V,Rtr),e(V,WF),e(WF,S2e),e(S2e,Ptr),e(WF,Btr),e(WF,YQ),e(YQ,Ntr),e(WF,Itr),e(V,qtr),e(V,HF),e(HF,R2e),e(R2e,jtr),e(HF,Dtr),e(HF,KQ),e(KQ,Gtr),e(HF,Otr),e(V,Vtr),e(V,UF),e(UF,P2e),e(P2e,Xtr),e(UF,ztr),e(UF,ZQ),e(ZQ,Qtr),e(UF,Wtr),e(V,Htr),e(V,JF),e(JF,B2e),e(B2e,Utr),e(JF,Jtr),e(JF,eW),e(eW,Ytr),e(JF,Ktr),e(V,Ztr),e(V,YF),e(YF,N2e),e(N2e,ear),e(YF,oar),e(YF,oW),e(oW,rar),e(YF,tar),e(V,aar),e(V,KF),e(KF,I2e),e(I2e,nar),e(KF,sar),e(KF,rW),e(rW,lar),e(KF,iar),e(V,dar),e(V,ZF),e(ZF,q2e),e(q2e,car),e(ZF,far),e(ZF,tW),e(tW,mar),e(ZF,gar),e(V,har),e(V,eT),e(eT,j2e),e(j2e,par),e(eT,_ar),e(eT,aW),e(aW,uar),e(eT,bar),e(V,Far),e(V,oT),e(oT,D2e),e(D2e,Tar),e(oT,Mar),e(oT,nW),e(nW,Ear),e(oT,Car),e(V,war),e(V,rT),e(rT,G2e),e(G2e,Aar),e(rT,Lar),e(rT,sW),e(sW,yar),e(rT,xar),e(V,$ar),e(V,tT),e(tT,O2e),e(O2e,kar),e(tT,Sar),e(tT,lW),e(lW,Rar),e(tT,Par),e(V,Bar),e(V,aT),e(aT,V2e),e(V2e,Nar),e(aT,Iar),e(aT,iW),e(iW,qar),e(aT,jar),e(V,Dar),e(V,nT),e(nT,X2e),e(X2e,Gar),e(nT,Oar),e(nT,dW),e(dW,Var),e(nT,Xar),e(V,zar),e(V,sT),e(sT,z2e),e(z2e,Qar),e(sT,War),e(sT,cW),e(cW,Har),e(sT,Uar),e(V,Jar),e(V,lT),e(lT,Q2e),e(Q2e,Yar),e(lT,Kar),e(lT,fW),e(fW,Zar),e(lT,enr),e(V,onr),e(V,iT),e(iT,W2e),e(W2e,rnr),e(iT,tnr),e(iT,mW),e(mW,anr),e(iT,nnr),e(V,snr),e(V,dT),e(dT,H2e),e(H2e,lnr),e(dT,inr),e(dT,gW),e(gW,dnr),e(dT,cnr),e(V,fnr),e(V,cT),e(cT,U2e),e(U2e,mnr),e(cT,gnr),e(cT,hW),e(hW,hnr),e(cT,pnr),e(so,_nr),e(so,fT),e(fT,unr),e(fT,J2e),e(J2e,bnr),e(fT,vnr),e(fT,Y2e),e(Y2e,Fnr),e(so,Tnr),M(mT,so,null),b(f,VXe,u),b(f,bd,u),e(bd,gT),e(gT,K2e),M(xL,K2e,null),e(bd,Mnr),e(bd,Z2e),e(Z2e,Enr),b(f,XXe,u),b(f,Go,u),M($L,Go,null),e(Go,Cnr),e(Go,vd),e(vd,wnr),e(vd,pW),e(pW,Anr),e(vd,Lnr),e(vd,_W),e(_W,ynr),e(vd,xnr),e(Go,$nr),e(Go,kL),e(kL,knr),e(kL,ebe),e(ebe,Snr),e(kL,Rnr),e(Go,Pnr),e(Go,bt),M(SL,bt,null),e(bt,Bnr),e(bt,obe),e(obe,Nnr),e(bt,Inr),e(bt,Fd),e(Fd,qnr),e(Fd,rbe),e(rbe,jnr),e(Fd,Dnr),e(Fd,uW),e(uW,Gnr),e(Fd,Onr),e(bt,Vnr),M(hT,bt,null),e(Go,Xnr),e(Go,lo),M(RL,lo,null),e(lo,znr),e(lo,tbe),e(tbe,Qnr),e(lo,Wnr),e(lo,Qa),e(Qa,Hnr),e(Qa,abe),e(abe,Unr),e(Qa,Jnr),e(Qa,nbe),e(nbe,Ynr),e(Qa,Knr),e(Qa,sbe),e(sbe,Znr),e(Qa,esr),e(lo,osr),e(lo,lbe),e(lbe,pT),e(pT,ibe),e(ibe,rsr),e(pT,tsr),e(pT,bW),e(bW,asr),e(pT,nsr),e(lo,ssr),e(lo,_T),e(_T,lsr),e(_T,dbe),e(dbe,isr),e(_T,dsr),e(_T,cbe),e(cbe,csr),e(lo,fsr),M(uT,lo,null),b(f,zXe,u),b(f,Td,u),e(Td,bT),e(bT,fbe),M(PL,fbe,null),e(Td,msr),e(Td,mbe),e(mbe,gsr),b(f,QXe,u),b(f,Oo,u),M(BL,Oo,null),e(Oo,hsr),e(Oo,Md),e(Md,psr),e(Md,vW),e(vW,_sr),e(Md,usr),e(Md,FW),e(FW,bsr),e(Md,vsr),e(Oo,Fsr),e(Oo,NL),e(NL,Tsr),e(NL,gbe),e(gbe,Msr),e(NL,Esr),e(Oo,Csr),e(Oo,vt),M(IL,vt,null),e(vt,wsr),e(vt,hbe),e(hbe,Asr),e(vt,Lsr),e(vt,Ed),e(Ed,ysr),e(Ed,pbe),e(pbe,xsr),e(Ed,$sr),e(Ed,TW),e(TW,ksr),e(Ed,Ssr),e(vt,Rsr),M(vT,vt,null),e(Oo,Psr),e(Oo,io),M(qL,io,null),e(io,Bsr),e(io,_be),e(_be,Nsr),e(io,Isr),e(io,Wa),e(Wa,qsr),e(Wa,ube),e(ube,jsr),e(Wa,Dsr),e(Wa,bbe),e(bbe,Gsr),e(Wa,Osr),e(Wa,vbe),e(vbe,Vsr),e(Wa,Xsr),e(io,zsr),e(io,ve),e(ve,FT),e(FT,Fbe),e(Fbe,Qsr),e(FT,Wsr),e(FT,MW),e(MW,Hsr),e(FT,Usr),e(ve,Jsr),e(ve,TT),e(TT,Tbe),e(Tbe,Ysr),e(TT,Ksr),e(TT,EW),e(EW,Zsr),e(TT,elr),e(ve,olr),e(ve,MT),e(MT,Mbe),e(Mbe,rlr),e(MT,tlr),e(MT,CW),e(CW,alr),e(MT,nlr),e(ve,slr),e(ve,ET),e(ET,Ebe),e(Ebe,llr),e(ET,ilr),e(ET,wW),e(wW,dlr),e(ET,clr),e(ve,flr),e(ve,Us),e(Us,Cbe),e(Cbe,mlr),e(Us,glr),e(Us,AW),e(AW,hlr),e(Us,plr),e(Us,LW),e(LW,_lr),e(Us,ulr),e(ve,blr),e(ve,CT),e(CT,wbe),e(wbe,vlr),e(CT,Flr),e(CT,yW),e(yW,Tlr),e(CT,Mlr),e(ve,Elr),e(ve,Js),e(Js,Abe),e(Abe,Clr),e(Js,wlr),e(Js,xW),e(xW,Alr),e(Js,Llr),e(Js,$W),e($W,ylr),e(Js,xlr),e(ve,$lr),e(ve,wT),e(wT,Lbe),e(Lbe,klr),e(wT,Slr),e(wT,kW),e(kW,Rlr),e(wT,Plr),e(ve,Blr),e(ve,Ft),e(Ft,ybe),e(ybe,Nlr),e(Ft,Ilr),e(Ft,SW),e(SW,qlr),e(Ft,jlr),e(Ft,RW),e(RW,Dlr),e(Ft,Glr),e(Ft,PW),e(PW,Olr),e(Ft,Vlr),e(ve,Xlr),e(ve,AT),e(AT,xbe),e(xbe,zlr),e(AT,Qlr),e(AT,BW),e(BW,Wlr),e(AT,Hlr),e(ve,Ulr),e(ve,LT),e(LT,$be),e($be,Jlr),e(LT,Ylr),e(LT,NW),e(NW,Klr),e(LT,Zlr),e(ve,eir),e(ve,yT),e(yT,kbe),e(kbe,oir),e(yT,rir),e(yT,IW),e(IW,tir),e(yT,air),e(ve,nir),e(ve,xT),e(xT,Sbe),e(Sbe,sir),e(xT,lir),e(xT,qW),e(qW,iir),e(xT,dir),e(ve,cir),e(ve,$T),e($T,Rbe),e(Rbe,fir),e($T,mir),e($T,jW),e(jW,gir),e($T,hir),e(ve,pir),e(ve,kT),e(kT,Pbe),e(Pbe,_ir),e(kT,uir),e(kT,DW),e(DW,bir),e(kT,vir),e(ve,Fir),e(ve,ST),e(ST,Bbe),e(Bbe,Tir),e(ST,Mir),e(ST,GW),e(GW,Eir),e(ST,Cir),e(io,wir),e(io,RT),e(RT,Air),e(RT,Nbe),e(Nbe,Lir),e(RT,yir),e(RT,Ibe),e(Ibe,xir),e(io,$ir),M(PT,io,null),b(f,WXe,u),b(f,Cd,u),e(Cd,BT),e(BT,qbe),M(jL,qbe,null),e(Cd,kir),e(Cd,jbe),e(jbe,Sir),b(f,HXe,u),b(f,Vo,u),M(DL,Vo,null),e(Vo,Rir),e(Vo,wd),e(wd,Pir),e(wd,OW),e(OW,Bir),e(wd,Nir),e(wd,VW),e(VW,Iir),e(wd,qir),e(Vo,jir),e(Vo,GL),e(GL,Dir),e(GL,Dbe),e(Dbe,Gir),e(GL,Oir),e(Vo,Vir),e(Vo,Tt),M(OL,Tt,null),e(Tt,Xir),e(Tt,Gbe),e(Gbe,zir),e(Tt,Qir),e(Tt,Ad),e(Ad,Wir),e(Ad,Obe),e(Obe,Hir),e(Ad,Uir),e(Ad,XW),e(XW,Jir),e(Ad,Yir),e(Tt,Kir),M(NT,Tt,null),e(Vo,Zir),e(Vo,co),M(VL,co,null),e(co,edr),e(co,Vbe),e(Vbe,odr),e(co,rdr),e(co,Ha),e(Ha,tdr),e(Ha,Xbe),e(Xbe,adr),e(Ha,ndr),e(Ha,zbe),e(zbe,sdr),e(Ha,ldr),e(Ha,Qbe),e(Qbe,idr),e(Ha,ddr),e(co,cdr),e(co,Wbe),e(Wbe,IT),e(IT,Hbe),e(Hbe,fdr),e(IT,mdr),e(IT,zW),e(zW,gdr),e(IT,hdr),e(co,pdr),e(co,qT),e(qT,_dr),e(qT,Ube),e(Ube,udr),e(qT,bdr),e(qT,Jbe),e(Jbe,vdr),e(co,Fdr),M(jT,co,null),b(f,UXe,u),b(f,Ld,u),e(Ld,DT),e(DT,Ybe),M(XL,Ybe,null),e(Ld,Tdr),e(Ld,Kbe),e(Kbe,Mdr),b(f,JXe,u),b(f,Xo,u),M(zL,Xo,null),e(Xo,Edr),e(Xo,yd),e(yd,Cdr),e(yd,QW),e(QW,wdr),e(yd,Adr),e(yd,WW),e(WW,Ldr),e(yd,ydr),e(Xo,xdr),e(Xo,QL),e(QL,$dr),e(QL,Zbe),e(Zbe,kdr),e(QL,Sdr),e(Xo,Rdr),e(Xo,Mt),M(WL,Mt,null),e(Mt,Pdr),e(Mt,eve),e(eve,Bdr),e(Mt,Ndr),e(Mt,xd),e(xd,Idr),e(xd,ove),e(ove,qdr),e(xd,jdr),e(xd,HW),e(HW,Ddr),e(xd,Gdr),e(Mt,Odr),M(GT,Mt,null),e(Xo,Vdr),e(Xo,fo),M(HL,fo,null),e(fo,Xdr),e(fo,rve),e(rve,zdr),e(fo,Qdr),e(fo,Ua),e(Ua,Wdr),e(Ua,tve),e(tve,Hdr),e(Ua,Udr),e(Ua,ave),e(ave,Jdr),e(Ua,Ydr),e(Ua,nve),e(nve,Kdr),e(Ua,Zdr),e(fo,ecr),e(fo,sve),e(sve,OT),e(OT,lve),e(lve,ocr),e(OT,rcr),e(OT,UW),e(UW,tcr),e(OT,acr),e(fo,ncr),e(fo,VT),e(VT,scr),e(VT,ive),e(ive,lcr),e(VT,icr),e(VT,dve),e(dve,dcr),e(fo,ccr),M(XT,fo,null),b(f,YXe,u),b(f,$d,u),e($d,zT),e(zT,cve),M(UL,cve,null),e($d,fcr),e($d,fve),e(fve,mcr),b(f,KXe,u),b(f,zo,u),M(JL,zo,null),e(zo,gcr),e(zo,kd),e(kd,hcr),e(kd,JW),e(JW,pcr),e(kd,_cr),e(kd,YW),e(YW,ucr),e(kd,bcr),e(zo,vcr),e(zo,YL),e(YL,Fcr),e(YL,mve),e(mve,Tcr),e(YL,Mcr),e(zo,Ecr),e(zo,Et),M(KL,Et,null),e(Et,Ccr),e(Et,gve),e(gve,wcr),e(Et,Acr),e(Et,Sd),e(Sd,Lcr),e(Sd,hve),e(hve,ycr),e(Sd,xcr),e(Sd,KW),e(KW,$cr),e(Sd,kcr),e(Et,Scr),M(QT,Et,null),e(zo,Rcr),e(zo,mo),M(ZL,mo,null),e(mo,Pcr),e(mo,pve),e(pve,Bcr),e(mo,Ncr),e(mo,Ja),e(Ja,Icr),e(Ja,_ve),e(_ve,qcr),e(Ja,jcr),e(Ja,uve),e(uve,Dcr),e(Ja,Gcr),e(Ja,bve),e(bve,Ocr),e(Ja,Vcr),e(mo,Xcr),e(mo,Pe),e(Pe,WT),e(WT,vve),e(vve,zcr),e(WT,Qcr),e(WT,ZW),e(ZW,Wcr),e(WT,Hcr),e(Pe,Ucr),e(Pe,HT),e(HT,Fve),e(Fve,Jcr),e(HT,Ycr),e(HT,eH),e(eH,Kcr),e(HT,Zcr),e(Pe,efr),e(Pe,UT),e(UT,Tve),e(Tve,ofr),e(UT,rfr),e(UT,oH),e(oH,tfr),e(UT,afr),e(Pe,nfr),e(Pe,JT),e(JT,Mve),e(Mve,sfr),e(JT,lfr),e(JT,rH),e(rH,ifr),e(JT,dfr),e(Pe,cfr),e(Pe,YT),e(YT,Eve),e(Eve,ffr),e(YT,mfr),e(YT,tH),e(tH,gfr),e(YT,hfr),e(Pe,pfr),e(Pe,KT),e(KT,Cve),e(Cve,_fr),e(KT,ufr),e(KT,aH),e(aH,bfr),e(KT,vfr),e(Pe,Ffr),e(Pe,ZT),e(ZT,wve),e(wve,Tfr),e(ZT,Mfr),e(ZT,nH),e(nH,Efr),e(ZT,Cfr),e(Pe,wfr),e(Pe,e7),e(e7,Ave),e(Ave,Afr),e(e7,Lfr),e(e7,sH),e(sH,yfr),e(e7,xfr),e(Pe,$fr),e(Pe,o7),e(o7,Lve),e(Lve,kfr),e(o7,Sfr),e(o7,lH),e(lH,Rfr),e(o7,Pfr),e(mo,Bfr),e(mo,r7),e(r7,Nfr),e(r7,yve),e(yve,Ifr),e(r7,qfr),e(r7,xve),e(xve,jfr),e(mo,Dfr),M(t7,mo,null),b(f,ZXe,u),b(f,Rd,u),e(Rd,a7),e(a7,$ve),M(ey,$ve,null),e(Rd,Gfr),e(Rd,kve),e(kve,Ofr),b(f,eze,u),b(f,Qo,u),M(oy,Qo,null),e(Qo,Vfr),e(Qo,Pd),e(Pd,Xfr),e(Pd,iH),e(iH,zfr),e(Pd,Qfr),e(Pd,dH),e(dH,Wfr),e(Pd,Hfr),e(Qo,Ufr),e(Qo,ry),e(ry,Jfr),e(ry,Sve),e(Sve,Yfr),e(ry,Kfr),e(Qo,Zfr),e(Qo,Ct),M(ty,Ct,null),e(Ct,emr),e(Ct,Rve),e(Rve,omr),e(Ct,rmr),e(Ct,Bd),e(Bd,tmr),e(Bd,Pve),e(Pve,amr),e(Bd,nmr),e(Bd,cH),e(cH,smr),e(Bd,lmr),e(Ct,imr),M(n7,Ct,null),e(Qo,dmr),e(Qo,go),M(ay,go,null),e(go,cmr),e(go,Bve),e(Bve,fmr),e(go,mmr),e(go,Ya),e(Ya,gmr),e(Ya,Nve),e(Nve,hmr),e(Ya,pmr),e(Ya,Ive),e(Ive,_mr),e(Ya,umr),e(Ya,qve),e(qve,bmr),e(Ya,vmr),e(go,Fmr),e(go,rt),e(rt,s7),e(s7,jve),e(jve,Tmr),e(s7,Mmr),e(s7,fH),e(fH,Emr),e(s7,Cmr),e(rt,wmr),e(rt,l7),e(l7,Dve),e(Dve,Amr),e(l7,Lmr),e(l7,mH),e(mH,ymr),e(l7,xmr),e(rt,$mr),e(rt,i7),e(i7,Gve),e(Gve,kmr),e(i7,Smr),e(i7,gH),e(gH,Rmr),e(i7,Pmr),e(rt,Bmr),e(rt,d7),e(d7,Ove),e(Ove,Nmr),e(d7,Imr),e(d7,hH),e(hH,qmr),e(d7,jmr),e(rt,Dmr),e(rt,c7),e(c7,Vve),e(Vve,Gmr),e(c7,Omr),e(c7,pH),e(pH,Vmr),e(c7,Xmr),e(go,zmr),e(go,f7),e(f7,Qmr),e(f7,Xve),e(Xve,Wmr),e(f7,Hmr),e(f7,zve),e(zve,Umr),e(go,Jmr),M(m7,go,null),b(f,oze,u),b(f,Nd,u),e(Nd,g7),e(g7,Qve),M(ny,Qve,null),e(Nd,Ymr),e(Nd,Wve),e(Wve,Kmr),b(f,rze,u),b(f,Wo,u),M(sy,Wo,null),e(Wo,Zmr),e(Wo,Id),e(Id,egr),e(Id,_H),e(_H,ogr),e(Id,rgr),e(Id,uH),e(uH,tgr),e(Id,agr),e(Wo,ngr),e(Wo,ly),e(ly,sgr),e(ly,Hve),e(Hve,lgr),e(ly,igr),e(Wo,dgr),e(Wo,wt),M(iy,wt,null),e(wt,cgr),e(wt,Uve),e(Uve,fgr),e(wt,mgr),e(wt,qd),e(qd,ggr),e(qd,Jve),e(Jve,hgr),e(qd,pgr),e(qd,bH),e(bH,_gr),e(qd,ugr),e(wt,bgr),M(h7,wt,null),e(Wo,vgr),e(Wo,ho),M(dy,ho,null),e(ho,Fgr),e(ho,Yve),e(Yve,Tgr),e(ho,Mgr),e(ho,Ka),e(Ka,Egr),e(Ka,Kve),e(Kve,Cgr),e(Ka,wgr),e(Ka,Zve),e(Zve,Agr),e(Ka,Lgr),e(Ka,e0e),e(e0e,ygr),e(Ka,xgr),e(ho,$gr),e(ho,Le),e(Le,p7),e(p7,o0e),e(o0e,kgr),e(p7,Sgr),e(p7,vH),e(vH,Rgr),e(p7,Pgr),e(Le,Bgr),e(Le,_7),e(_7,r0e),e(r0e,Ngr),e(_7,Igr),e(_7,FH),e(FH,qgr),e(_7,jgr),e(Le,Dgr),e(Le,u7),e(u7,t0e),e(t0e,Ggr),e(u7,Ogr),e(u7,TH),e(TH,Vgr),e(u7,Xgr),e(Le,zgr),e(Le,b7),e(b7,a0e),e(a0e,Qgr),e(b7,Wgr),e(b7,MH),e(MH,Hgr),e(b7,Ugr),e(Le,Jgr),e(Le,v7),e(v7,n0e),e(n0e,Ygr),e(v7,Kgr),e(v7,EH),e(EH,Zgr),e(v7,ehr),e(Le,ohr),e(Le,F7),e(F7,s0e),e(s0e,rhr),e(F7,thr),e(F7,CH),e(CH,ahr),e(F7,nhr),e(Le,shr),e(Le,T7),e(T7,l0e),e(l0e,lhr),e(T7,ihr),e(T7,wH),e(wH,dhr),e(T7,chr),e(Le,fhr),e(Le,M7),e(M7,i0e),e(i0e,mhr),e(M7,ghr),e(M7,AH),e(AH,hhr),e(M7,phr),e(Le,_hr),e(Le,E7),e(E7,d0e),e(d0e,uhr),e(E7,bhr),e(E7,LH),e(LH,vhr),e(E7,Fhr),e(Le,Thr),e(Le,C7),e(C7,c0e),e(c0e,Mhr),e(C7,Ehr),e(C7,yH),e(yH,Chr),e(C7,whr),e(ho,Ahr),e(ho,w7),e(w7,Lhr),e(w7,f0e),e(f0e,yhr),e(w7,xhr),e(w7,m0e),e(m0e,$hr),e(ho,khr),M(A7,ho,null),b(f,tze,u),b(f,jd,u),e(jd,L7),e(L7,g0e),M(cy,g0e,null),e(jd,Shr),e(jd,h0e),e(h0e,Rhr),b(f,aze,u),b(f,Ho,u),M(fy,Ho,null),e(Ho,Phr),e(Ho,Dd),e(Dd,Bhr),e(Dd,xH),e(xH,Nhr),e(Dd,Ihr),e(Dd,$H),e($H,qhr),e(Dd,jhr),e(Ho,Dhr),e(Ho,my),e(my,Ghr),e(my,p0e),e(p0e,Ohr),e(my,Vhr),e(Ho,Xhr),e(Ho,At),M(gy,At,null),e(At,zhr),e(At,_0e),e(_0e,Qhr),e(At,Whr),e(At,Gd),e(Gd,Hhr),e(Gd,u0e),e(u0e,Uhr),e(Gd,Jhr),e(Gd,kH),e(kH,Yhr),e(Gd,Khr),e(At,Zhr),M(y7,At,null),e(Ho,epr),e(Ho,po),M(hy,po,null),e(po,opr),e(po,b0e),e(b0e,rpr),e(po,tpr),e(po,Za),e(Za,apr),e(Za,v0e),e(v0e,npr),e(Za,spr),e(Za,F0e),e(F0e,lpr),e(Za,ipr),e(Za,T0e),e(T0e,dpr),e(Za,cpr),e(po,fpr),e(po,py),e(py,x7),e(x7,M0e),e(M0e,mpr),e(x7,gpr),e(x7,SH),e(SH,hpr),e(x7,ppr),e(py,_pr),e(py,$7),e($7,E0e),e(E0e,upr),e($7,bpr),e($7,RH),e(RH,vpr),e($7,Fpr),e(po,Tpr),e(po,k7),e(k7,Mpr),e(k7,C0e),e(C0e,Epr),e(k7,Cpr),e(k7,w0e),e(w0e,wpr),e(po,Apr),M(S7,po,null),b(f,nze,u),b(f,Od,u),e(Od,R7),e(R7,A0e),M(_y,A0e,null),e(Od,Lpr),e(Od,L0e),e(L0e,ypr),b(f,sze,u),b(f,Uo,u),M(uy,Uo,null),e(Uo,xpr),e(Uo,Vd),e(Vd,$pr),e(Vd,PH),e(PH,kpr),e(Vd,Spr),e(Vd,BH),e(BH,Rpr),e(Vd,Ppr),e(Uo,Bpr),e(Uo,by),e(by,Npr),e(by,y0e),e(y0e,Ipr),e(by,qpr),e(Uo,jpr),e(Uo,Lt),M(vy,Lt,null),e(Lt,Dpr),e(Lt,x0e),e(x0e,Gpr),e(Lt,Opr),e(Lt,Xd),e(Xd,Vpr),e(Xd,$0e),e($0e,Xpr),e(Xd,zpr),e(Xd,NH),e(NH,Qpr),e(Xd,Wpr),e(Lt,Hpr),M(P7,Lt,null),e(Uo,Upr),e(Uo,_o),M(Fy,_o,null),e(_o,Jpr),e(_o,k0e),e(k0e,Ypr),e(_o,Kpr),e(_o,en),e(en,Zpr),e(en,S0e),e(S0e,e_r),e(en,o_r),e(en,R0e),e(R0e,r_r),e(en,t_r),e(en,P0e),e(P0e,a_r),e(en,n_r),e(_o,s_r),e(_o,tt),e(tt,B7),e(B7,B0e),e(B0e,l_r),e(B7,i_r),e(B7,IH),e(IH,d_r),e(B7,c_r),e(tt,f_r),e(tt,N7),e(N7,N0e),e(N0e,m_r),e(N7,g_r),e(N7,qH),e(qH,h_r),e(N7,p_r),e(tt,__r),e(tt,I7),e(I7,I0e),e(I0e,u_r),e(I7,b_r),e(I7,jH),e(jH,v_r),e(I7,F_r),e(tt,T_r),e(tt,q7),e(q7,q0e),e(q0e,M_r),e(q7,E_r),e(q7,DH),e(DH,C_r),e(q7,w_r),e(tt,A_r),e(tt,j7),e(j7,j0e),e(j0e,L_r),e(j7,y_r),e(j7,GH),e(GH,x_r),e(j7,$_r),e(_o,k_r),e(_o,D7),e(D7,S_r),e(D7,D0e),e(D0e,R_r),e(D7,P_r),e(D7,G0e),e(G0e,B_r),e(_o,N_r),M(G7,_o,null),b(f,lze,u),b(f,zd,u),e(zd,O7),e(O7,O0e),M(Ty,O0e,null),e(zd,I_r),e(zd,V0e),e(V0e,q_r),b(f,ize,u),b(f,Jo,u),M(My,Jo,null),e(Jo,j_r),e(Jo,Qd),e(Qd,D_r),e(Qd,OH),e(OH,G_r),e(Qd,O_r),e(Qd,VH),e(VH,V_r),e(Qd,X_r),e(Jo,z_r),e(Jo,Ey),e(Ey,Q_r),e(Ey,X0e),e(X0e,W_r),e(Ey,H_r),e(Jo,U_r),e(Jo,yt),M(Cy,yt,null),e(yt,J_r),e(yt,z0e),e(z0e,Y_r),e(yt,K_r),e(yt,Wd),e(Wd,Z_r),e(Wd,Q0e),e(Q0e,eur),e(Wd,our),e(Wd,XH),e(XH,rur),e(Wd,tur),e(yt,aur),M(V7,yt,null),e(Jo,nur),e(Jo,uo),M(wy,uo,null),e(uo,sur),e(uo,W0e),e(W0e,lur),e(uo,iur),e(uo,on),e(on,dur),e(on,H0e),e(H0e,cur),e(on,fur),e(on,U0e),e(U0e,mur),e(on,gur),e(on,J0e),e(J0e,hur),e(on,pur),e(uo,_ur),e(uo,Hd),e(Hd,X7),e(X7,Y0e),e(Y0e,uur),e(X7,bur),e(X7,zH),e(zH,vur),e(X7,Fur),e(Hd,Tur),e(Hd,z7),e(z7,K0e),e(K0e,Mur),e(z7,Eur),e(z7,QH),e(QH,Cur),e(z7,wur),e(Hd,Aur),e(Hd,Q7),e(Q7,Z0e),e(Z0e,Lur),e(Q7,yur),e(Q7,WH),e(WH,xur),e(Q7,$ur),e(uo,kur),e(uo,W7),e(W7,Sur),e(W7,eFe),e(eFe,Rur),e(W7,Pur),e(W7,oFe),e(oFe,Bur),e(uo,Nur),M(H7,uo,null),b(f,dze,u),b(f,Ud,u),e(Ud,U7),e(U7,rFe),M(Ay,rFe,null),e(Ud,Iur),e(Ud,tFe),e(tFe,qur),b(f,cze,u),b(f,Yo,u),M(Ly,Yo,null),e(Yo,jur),e(Yo,Jd),e(Jd,Dur),e(Jd,HH),e(HH,Gur),e(Jd,Our),e(Jd,UH),e(UH,Vur),e(Jd,Xur),e(Yo,zur),e(Yo,yy),e(yy,Qur),e(yy,aFe),e(aFe,Wur),e(yy,Hur),e(Yo,Uur),e(Yo,xt),M(xy,xt,null),e(xt,Jur),e(xt,nFe),e(nFe,Yur),e(xt,Kur),e(xt,Yd),e(Yd,Zur),e(Yd,sFe),e(sFe,e1r),e(Yd,o1r),e(Yd,JH),e(JH,r1r),e(Yd,t1r),e(xt,a1r),M(J7,xt,null),e(Yo,n1r),e(Yo,bo),M($y,bo,null),e(bo,s1r),e(bo,lFe),e(lFe,l1r),e(bo,i1r),e(bo,rn),e(rn,d1r),e(rn,iFe),e(iFe,c1r),e(rn,f1r),e(rn,dFe),e(dFe,m1r),e(rn,g1r),e(rn,cFe),e(cFe,h1r),e(rn,p1r),e(bo,_1r),e(bo,ky),e(ky,Y7),e(Y7,fFe),e(fFe,u1r),e(Y7,b1r),e(Y7,YH),e(YH,v1r),e(Y7,F1r),e(ky,T1r),e(ky,K7),e(K7,mFe),e(mFe,M1r),e(K7,E1r),e(K7,KH),e(KH,C1r),e(K7,w1r),e(bo,A1r),e(bo,Z7),e(Z7,L1r),e(Z7,gFe),e(gFe,y1r),e(Z7,x1r),e(Z7,hFe),e(hFe,$1r),e(bo,k1r),M(e8,bo,null),b(f,fze,u),b(f,Kd,u),e(Kd,o8),e(o8,pFe),M(Sy,pFe,null),e(Kd,S1r),e(Kd,_Fe),e(_Fe,R1r),b(f,mze,u),b(f,Ko,u),M(Ry,Ko,null),e(Ko,P1r),e(Ko,Zd),e(Zd,B1r),e(Zd,ZH),e(ZH,N1r),e(Zd,I1r),e(Zd,eU),e(eU,q1r),e(Zd,j1r),e(Ko,D1r),e(Ko,Py),e(Py,G1r),e(Py,uFe),e(uFe,O1r),e(Py,V1r),e(Ko,X1r),e(Ko,$t),M(By,$t,null),e($t,z1r),e($t,bFe),e(bFe,Q1r),e($t,W1r),e($t,ec),e(ec,H1r),e(ec,vFe),e(vFe,U1r),e(ec,J1r),e(ec,oU),e(oU,Y1r),e(ec,K1r),e($t,Z1r),M(r8,$t,null),e(Ko,e2r),e(Ko,vo),M(Ny,vo,null),e(vo,o2r),e(vo,FFe),e(FFe,r2r),e(vo,t2r),e(vo,tn),e(tn,a2r),e(tn,TFe),e(TFe,n2r),e(tn,s2r),e(tn,MFe),e(MFe,l2r),e(tn,i2r),e(tn,EFe),e(EFe,d2r),e(tn,c2r),e(vo,f2r),e(vo,CFe),e(CFe,t8),e(t8,wFe),e(wFe,m2r),e(t8,g2r),e(t8,rU),e(rU,h2r),e(t8,p2r),e(vo,_2r),e(vo,a8),e(a8,u2r),e(a8,AFe),e(AFe,b2r),e(a8,v2r),e(a8,LFe),e(LFe,F2r),e(vo,T2r),M(n8,vo,null),b(f,gze,u),b(f,oc,u),e(oc,s8),e(s8,yFe),M(Iy,yFe,null),e(oc,M2r),e(oc,xFe),e(xFe,E2r),b(f,hze,u),b(f,Zo,u),M(qy,Zo,null),e(Zo,C2r),e(Zo,rc),e(rc,w2r),e(rc,tU),e(tU,A2r),e(rc,L2r),e(rc,aU),e(aU,y2r),e(rc,x2r),e(Zo,$2r),e(Zo,jy),e(jy,k2r),e(jy,$Fe),e($Fe,S2r),e(jy,R2r),e(Zo,P2r),e(Zo,kt),M(Dy,kt,null),e(kt,B2r),e(kt,kFe),e(kFe,N2r),e(kt,I2r),e(kt,tc),e(tc,q2r),e(tc,SFe),e(SFe,j2r),e(tc,D2r),e(tc,nU),e(nU,G2r),e(tc,O2r),e(kt,V2r),M(l8,kt,null),e(Zo,X2r),e(Zo,Fo),M(Gy,Fo,null),e(Fo,z2r),e(Fo,RFe),e(RFe,Q2r),e(Fo,W2r),e(Fo,an),e(an,H2r),e(an,PFe),e(PFe,U2r),e(an,J2r),e(an,BFe),e(BFe,Y2r),e(an,K2r),e(an,NFe),e(NFe,Z2r),e(an,ebr),e(Fo,obr),e(Fo,at),e(at,i8),e(i8,IFe),e(IFe,rbr),e(i8,tbr),e(i8,sU),e(sU,abr),e(i8,nbr),e(at,sbr),e(at,d8),e(d8,qFe),e(qFe,lbr),e(d8,ibr),e(d8,lU),e(lU,dbr),e(d8,cbr),e(at,fbr),e(at,c8),e(c8,jFe),e(jFe,mbr),e(c8,gbr),e(c8,iU),e(iU,hbr),e(c8,pbr),e(at,_br),e(at,f8),e(f8,DFe),e(DFe,ubr),e(f8,bbr),e(f8,dU),e(dU,vbr),e(f8,Fbr),e(at,Tbr),e(at,m8),e(m8,GFe),e(GFe,Mbr),e(m8,Ebr),e(m8,cU),e(cU,Cbr),e(m8,wbr),e(Fo,Abr),e(Fo,g8),e(g8,Lbr),e(g8,OFe),e(OFe,ybr),e(g8,xbr),e(g8,VFe),e(VFe,$br),e(Fo,kbr),M(h8,Fo,null),b(f,pze,u),b(f,ac,u),e(ac,p8),e(p8,XFe),M(Oy,XFe,null),e(ac,Sbr),e(ac,zFe),e(zFe,Rbr),b(f,_ze,u),b(f,er,u),M(Vy,er,null),e(er,Pbr),e(er,nc),e(nc,Bbr),e(nc,fU),e(fU,Nbr),e(nc,Ibr),e(nc,mU),e(mU,qbr),e(nc,jbr),e(er,Dbr),e(er,Xy),e(Xy,Gbr),e(Xy,QFe),e(QFe,Obr),e(Xy,Vbr),e(er,Xbr),e(er,St),M(zy,St,null),e(St,zbr),e(St,WFe),e(WFe,Qbr),e(St,Wbr),e(St,sc),e(sc,Hbr),e(sc,HFe),e(HFe,Ubr),e(sc,Jbr),e(sc,gU),e(gU,Ybr),e(sc,Kbr),e(St,Zbr),M(_8,St,null),e(er,evr),e(er,To),M(Qy,To,null),e(To,ovr),e(To,UFe),e(UFe,rvr),e(To,tvr),e(To,nn),e(nn,avr),e(nn,JFe),e(JFe,nvr),e(nn,svr),e(nn,YFe),e(YFe,lvr),e(nn,ivr),e(nn,KFe),e(KFe,dvr),e(nn,cvr),e(To,fvr),e(To,ZFe),e(ZFe,u8),e(u8,eTe),e(eTe,mvr),e(u8,gvr),e(u8,hU),e(hU,hvr),e(u8,pvr),e(To,_vr),e(To,b8),e(b8,uvr),e(b8,oTe),e(oTe,bvr),e(b8,vvr),e(b8,rTe),e(rTe,Fvr),e(To,Tvr),M(v8,To,null),b(f,uze,u),b(f,lc,u),e(lc,F8),e(F8,tTe),M(Wy,tTe,null),e(lc,Mvr),e(lc,aTe),e(aTe,Evr),b(f,bze,u),b(f,or,u),M(Hy,or,null),e(or,Cvr),e(or,ic),e(ic,wvr),e(ic,pU),e(pU,Avr),e(ic,Lvr),e(ic,_U),e(_U,yvr),e(ic,xvr),e(or,$vr),e(or,Uy),e(Uy,kvr),e(Uy,nTe),e(nTe,Svr),e(Uy,Rvr),e(or,Pvr),e(or,Rt),M(Jy,Rt,null),e(Rt,Bvr),e(Rt,sTe),e(sTe,Nvr),e(Rt,Ivr),e(Rt,dc),e(dc,qvr),e(dc,lTe),e(lTe,jvr),e(dc,Dvr),e(dc,uU),e(uU,Gvr),e(dc,Ovr),e(Rt,Vvr),M(T8,Rt,null),e(or,Xvr),e(or,xr),M(Yy,xr,null),e(xr,zvr),e(xr,iTe),e(iTe,Qvr),e(xr,Wvr),e(xr,sn),e(sn,Hvr),e(sn,dTe),e(dTe,Uvr),e(sn,Jvr),e(sn,cTe),e(cTe,Yvr),e(sn,Kvr),e(sn,fTe),e(fTe,Zvr),e(sn,e0r),e(xr,o0r),e(xr,q),e(q,M8),e(M8,mTe),e(mTe,r0r),e(M8,t0r),e(M8,bU),e(bU,a0r),e(M8,n0r),e(q,s0r),e(q,E8),e(E8,gTe),e(gTe,l0r),e(E8,i0r),e(E8,vU),e(vU,d0r),e(E8,c0r),e(q,f0r),e(q,C8),e(C8,hTe),e(hTe,m0r),e(C8,g0r),e(C8,FU),e(FU,h0r),e(C8,p0r),e(q,_0r),e(q,w8),e(w8,pTe),e(pTe,u0r),e(w8,b0r),e(w8,TU),e(TU,v0r),e(w8,F0r),e(q,T0r),e(q,A8),e(A8,_Te),e(_Te,M0r),e(A8,E0r),e(A8,MU),e(MU,C0r),e(A8,w0r),e(q,A0r),e(q,L8),e(L8,uTe),e(uTe,L0r),e(L8,y0r),e(L8,EU),e(EU,x0r),e(L8,$0r),e(q,k0r),e(q,y8),e(y8,bTe),e(bTe,S0r),e(y8,R0r),e(y8,CU),e(CU,P0r),e(y8,B0r),e(q,N0r),e(q,x8),e(x8,vTe),e(vTe,I0r),e(x8,q0r),e(x8,wU),e(wU,j0r),e(x8,D0r),e(q,G0r),e(q,$8),e($8,FTe),e(FTe,O0r),e($8,V0r),e($8,AU),e(AU,X0r),e($8,z0r),e(q,Q0r),e(q,k8),e(k8,TTe),e(TTe,W0r),e(k8,H0r),e(k8,LU),e(LU,U0r),e(k8,J0r),e(q,Y0r),e(q,S8),e(S8,MTe),e(MTe,K0r),e(S8,Z0r),e(S8,yU),e(yU,eFr),e(S8,oFr),e(q,rFr),e(q,R8),e(R8,ETe),e(ETe,tFr),e(R8,aFr),e(R8,xU),e(xU,nFr),e(R8,sFr),e(q,lFr),e(q,P8),e(P8,CTe),e(CTe,iFr),e(P8,dFr),e(P8,$U),e($U,cFr),e(P8,fFr),e(q,mFr),e(q,B8),e(B8,wTe),e(wTe,gFr),e(B8,hFr),e(B8,kU),e(kU,pFr),e(B8,_Fr),e(q,uFr),e(q,N8),e(N8,ATe),e(ATe,bFr),e(N8,vFr),e(N8,SU),e(SU,FFr),e(N8,TFr),e(q,MFr),e(q,I8),e(I8,LTe),e(LTe,EFr),e(I8,CFr),e(I8,RU),e(RU,wFr),e(I8,AFr),e(q,LFr),e(q,q8),e(q8,yTe),e(yTe,yFr),e(q8,xFr),e(q8,PU),e(PU,$Fr),e(q8,kFr),e(q,SFr),e(q,j8),e(j8,xTe),e(xTe,RFr),e(j8,PFr),e(j8,BU),e(BU,BFr),e(j8,NFr),e(q,IFr),e(q,Ys),e(Ys,$Te),e($Te,qFr),e(Ys,jFr),e(Ys,NU),e(NU,DFr),e(Ys,GFr),e(Ys,IU),e(IU,OFr),e(Ys,VFr),e(q,XFr),e(q,D8),e(D8,kTe),e(kTe,zFr),e(D8,QFr),e(D8,qU),e(qU,WFr),e(D8,HFr),e(q,UFr),e(q,G8),e(G8,STe),e(STe,JFr),e(G8,YFr),e(G8,jU),e(jU,KFr),e(G8,ZFr),e(q,eTr),e(q,O8),e(O8,RTe),e(RTe,oTr),e(O8,rTr),e(O8,DU),e(DU,tTr),e(O8,aTr),e(q,nTr),e(q,V8),e(V8,PTe),e(PTe,sTr),e(V8,lTr),e(V8,GU),e(GU,iTr),e(V8,dTr),e(q,cTr),e(q,X8),e(X8,BTe),e(BTe,fTr),e(X8,mTr),e(X8,OU),e(OU,gTr),e(X8,hTr),e(q,pTr),e(q,z8),e(z8,NTe),e(NTe,_Tr),e(z8,uTr),e(z8,VU),e(VU,bTr),e(z8,vTr),e(q,FTr),e(q,Q8),e(Q8,ITe),e(ITe,TTr),e(Q8,MTr),e(Q8,XU),e(XU,ETr),e(Q8,CTr),e(q,wTr),e(q,W8),e(W8,qTe),e(qTe,ATr),e(W8,LTr),e(W8,zU),e(zU,yTr),e(W8,xTr),e(q,$Tr),e(q,H8),e(H8,jTe),e(jTe,kTr),e(H8,STr),e(H8,QU),e(QU,RTr),e(H8,PTr),e(q,BTr),e(q,U8),e(U8,DTe),e(DTe,NTr),e(U8,ITr),e(U8,WU),e(WU,qTr),e(U8,jTr),e(q,DTr),e(q,J8),e(J8,GTe),e(GTe,GTr),e(J8,OTr),e(J8,HU),e(HU,VTr),e(J8,XTr),e(q,zTr),e(q,Y8),e(Y8,OTe),e(OTe,QTr),e(Y8,WTr),e(Y8,UU),e(UU,HTr),e(Y8,UTr),e(q,JTr),e(q,K8),e(K8,VTe),e(VTe,YTr),e(K8,KTr),e(K8,JU),e(JU,ZTr),e(K8,e7r),e(q,o7r),e(q,Z8),e(Z8,XTe),e(XTe,r7r),e(Z8,t7r),e(Z8,YU),e(YU,a7r),e(Z8,n7r),e(q,s7r),e(q,e9),e(e9,zTe),e(zTe,l7r),e(e9,i7r),e(e9,KU),e(KU,d7r),e(e9,c7r),e(q,f7r),e(q,o9),e(o9,QTe),e(QTe,m7r),e(o9,g7r),e(o9,ZU),e(ZU,h7r),e(o9,p7r),e(q,_7r),e(q,r9),e(r9,WTe),e(WTe,u7r),e(r9,b7r),e(r9,eJ),e(eJ,v7r),e(r9,F7r),e(q,T7r),e(q,t9),e(t9,HTe),e(HTe,M7r),e(t9,E7r),e(t9,oJ),e(oJ,C7r),e(t9,w7r),e(q,A7r),e(q,a9),e(a9,UTe),e(UTe,L7r),e(a9,y7r),e(a9,rJ),e(rJ,x7r),e(a9,$7r),e(q,k7r),e(q,n9),e(n9,JTe),e(JTe,S7r),e(n9,R7r),e(n9,tJ),e(tJ,P7r),e(n9,B7r),e(q,N7r),e(q,s9),e(s9,YTe),e(YTe,I7r),e(s9,q7r),e(s9,aJ),e(aJ,j7r),e(s9,D7r),e(q,G7r),e(q,l9),e(l9,KTe),e(KTe,O7r),e(l9,V7r),e(l9,nJ),e(nJ,X7r),e(l9,z7r),e(q,Q7r),e(q,i9),e(i9,ZTe),e(ZTe,W7r),e(i9,H7r),e(i9,sJ),e(sJ,U7r),e(i9,J7r),e(q,Y7r),e(q,d9),e(d9,e7e),e(e7e,K7r),e(d9,Z7r),e(d9,lJ),e(lJ,e8r),e(d9,o8r),e(q,r8r),e(q,c9),e(c9,o7e),e(o7e,t8r),e(c9,a8r),e(c9,iJ),e(iJ,n8r),e(c9,s8r),e(q,l8r),e(q,f9),e(f9,r7e),e(r7e,i8r),e(f9,d8r),e(f9,dJ),e(dJ,c8r),e(f9,f8r),e(q,m8r),e(q,m9),e(m9,t7e),e(t7e,g8r),e(m9,h8r),e(m9,cJ),e(cJ,p8r),e(m9,_8r),e(q,u8r),e(q,g9),e(g9,a7e),e(a7e,b8r),e(g9,v8r),e(g9,fJ),e(fJ,F8r),e(g9,T8r),e(q,M8r),e(q,h9),e(h9,n7e),e(n7e,E8r),e(h9,C8r),e(h9,mJ),e(mJ,w8r),e(h9,A8r),e(q,L8r),e(q,p9),e(p9,s7e),e(s7e,y8r),e(p9,x8r),e(p9,gJ),e(gJ,$8r),e(p9,k8r),e(q,S8r),e(q,_9),e(_9,l7e),e(l7e,R8r),e(_9,P8r),e(_9,hJ),e(hJ,B8r),e(_9,N8r),e(xr,I8r),M(u9,xr,null),b(f,vze,u),b(f,cc,u),e(cc,b9),e(b9,i7e),M(Ky,i7e,null),e(cc,q8r),e(cc,d7e),e(d7e,j8r),b(f,Fze,u),b(f,rr,u),M(Zy,rr,null),e(rr,D8r),e(rr,fc),e(fc,G8r),e(fc,pJ),e(pJ,O8r),e(fc,V8r),e(fc,_J),e(_J,X8r),e(fc,z8r),e(rr,Q8r),e(rr,ex),e(ex,W8r),e(ex,c7e),e(c7e,H8r),e(ex,U8r),e(rr,J8r),e(rr,Pt),M(ox,Pt,null),e(Pt,Y8r),e(Pt,f7e),e(f7e,K8r),e(Pt,Z8r),e(Pt,mc),e(mc,e9r),e(mc,m7e),e(m7e,o9r),e(mc,r9r),e(mc,uJ),e(uJ,t9r),e(mc,a9r),e(Pt,n9r),M(v9,Pt,null),e(rr,s9r),e(rr,$r),M(rx,$r,null),e($r,l9r),e($r,g7e),e(g7e,i9r),e($r,d9r),e($r,ln),e(ln,c9r),e(ln,h7e),e(h7e,f9r),e(ln,m9r),e(ln,p7e),e(p7e,g9r),e(ln,h9r),e(ln,_7e),e(_7e,p9r),e(ln,_9r),e($r,u9r),e($r,se),e(se,F9),e(F9,u7e),e(u7e,b9r),e(F9,v9r),e(F9,bJ),e(bJ,F9r),e(F9,T9r),e(se,M9r),e(se,T9),e(T9,b7e),e(b7e,E9r),e(T9,C9r),e(T9,vJ),e(vJ,w9r),e(T9,A9r),e(se,L9r),e(se,M9),e(M9,v7e),e(v7e,y9r),e(M9,x9r),e(M9,FJ),e(FJ,$9r),e(M9,k9r),e(se,S9r),e(se,E9),e(E9,F7e),e(F7e,R9r),e(E9,P9r),e(E9,TJ),e(TJ,B9r),e(E9,N9r),e(se,I9r),e(se,C9),e(C9,T7e),e(T7e,q9r),e(C9,j9r),e(C9,MJ),e(MJ,D9r),e(C9,G9r),e(se,O9r),e(se,w9),e(w9,M7e),e(M7e,V9r),e(w9,X9r),e(w9,EJ),e(EJ,z9r),e(w9,Q9r),e(se,W9r),e(se,A9),e(A9,E7e),e(E7e,H9r),e(A9,U9r),e(A9,CJ),e(CJ,J9r),e(A9,Y9r),e(se,K9r),e(se,L9),e(L9,C7e),e(C7e,Z9r),e(L9,eMr),e(L9,wJ),e(wJ,oMr),e(L9,rMr),e(se,tMr),e(se,y9),e(y9,w7e),e(w7e,aMr),e(y9,nMr),e(y9,AJ),e(AJ,sMr),e(y9,lMr),e(se,iMr),e(se,x9),e(x9,A7e),e(A7e,dMr),e(x9,cMr),e(x9,LJ),e(LJ,fMr),e(x9,mMr),e(se,gMr),e(se,$9),e($9,L7e),e(L7e,hMr),e($9,pMr),e($9,yJ),e(yJ,_Mr),e($9,uMr),e(se,bMr),e(se,k9),e(k9,y7e),e(y7e,vMr),e(k9,FMr),e(k9,xJ),e(xJ,TMr),e(k9,MMr),e(se,EMr),e(se,S9),e(S9,x7e),e(x7e,CMr),e(S9,wMr),e(S9,$J),e($J,AMr),e(S9,LMr),e(se,yMr),e(se,R9),e(R9,$7e),e($7e,xMr),e(R9,$Mr),e(R9,kJ),e(kJ,kMr),e(R9,SMr),e(se,RMr),e(se,P9),e(P9,k7e),e(k7e,PMr),e(P9,BMr),e(P9,SJ),e(SJ,NMr),e(P9,IMr),e(se,qMr),e(se,B9),e(B9,S7e),e(S7e,jMr),e(B9,DMr),e(B9,RJ),e(RJ,GMr),e(B9,OMr),e(se,VMr),e(se,N9),e(N9,R7e),e(R7e,XMr),e(N9,zMr),e(N9,PJ),e(PJ,QMr),e(N9,WMr),e(se,HMr),e(se,I9),e(I9,P7e),e(P7e,UMr),e(I9,JMr),e(I9,BJ),e(BJ,YMr),e(I9,KMr),e(se,ZMr),e(se,q9),e(q9,B7e),e(B7e,e4r),e(q9,o4r),e(q9,NJ),e(NJ,r4r),e(q9,t4r),e(se,a4r),e(se,j9),e(j9,N7e),e(N7e,n4r),e(j9,s4r),e(j9,IJ),e(IJ,l4r),e(j9,i4r),e(se,d4r),e(se,D9),e(D9,I7e),e(I7e,c4r),e(D9,f4r),e(D9,qJ),e(qJ,m4r),e(D9,g4r),e(se,h4r),e(se,G9),e(G9,q7e),e(q7e,p4r),e(G9,_4r),e(G9,jJ),e(jJ,u4r),e(G9,b4r),e(se,v4r),e(se,O9),e(O9,j7e),e(j7e,F4r),e(O9,T4r),e(O9,DJ),e(DJ,M4r),e(O9,E4r),e($r,C4r),M(V9,$r,null),b(f,Tze,u),b(f,gc,u),e(gc,X9),e(X9,D7e),M(tx,D7e,null),e(gc,w4r),e(gc,G7e),e(G7e,A4r),b(f,Mze,u),b(f,tr,u),M(ax,tr,null),e(tr,L4r),e(tr,hc),e(hc,y4r),e(hc,GJ),e(GJ,x4r),e(hc,$4r),e(hc,OJ),e(OJ,k4r),e(hc,S4r),e(tr,R4r),e(tr,nx),e(nx,P4r),e(nx,O7e),e(O7e,B4r),e(nx,N4r),e(tr,I4r),e(tr,Bt),M(sx,Bt,null),e(Bt,q4r),e(Bt,V7e),e(V7e,j4r),e(Bt,D4r),e(Bt,pc),e(pc,G4r),e(pc,X7e),e(X7e,O4r),e(pc,V4r),e(pc,VJ),e(VJ,X4r),e(pc,z4r),e(Bt,Q4r),M(z9,Bt,null),e(tr,W4r),e(tr,kr),M(lx,kr,null),e(kr,H4r),e(kr,z7e),e(z7e,U4r),e(kr,J4r),e(kr,dn),e(dn,Y4r),e(dn,Q7e),e(Q7e,K4r),e(dn,Z4r),e(dn,W7e),e(W7e,eEr),e(dn,oEr),e(dn,H7e),e(H7e,rEr),e(dn,tEr),e(kr,aEr),e(kr,Me),e(Me,Q9),e(Q9,U7e),e(U7e,nEr),e(Q9,sEr),e(Q9,XJ),e(XJ,lEr),e(Q9,iEr),e(Me,dEr),e(Me,W9),e(W9,J7e),e(J7e,cEr),e(W9,fEr),e(W9,zJ),e(zJ,mEr),e(W9,gEr),e(Me,hEr),e(Me,H9),e(H9,Y7e),e(Y7e,pEr),e(H9,_Er),e(H9,QJ),e(QJ,uEr),e(H9,bEr),e(Me,vEr),e(Me,U9),e(U9,K7e),e(K7e,FEr),e(U9,TEr),e(U9,WJ),e(WJ,MEr),e(U9,EEr),e(Me,CEr),e(Me,J9),e(J9,Z7e),e(Z7e,wEr),e(J9,AEr),e(J9,HJ),e(HJ,LEr),e(J9,yEr),e(Me,xEr),e(Me,Y9),e(Y9,e8e),e(e8e,$Er),e(Y9,kEr),e(Y9,UJ),e(UJ,SEr),e(Y9,REr),e(Me,PEr),e(Me,K9),e(K9,o8e),e(o8e,BEr),e(K9,NEr),e(K9,JJ),e(JJ,IEr),e(K9,qEr),e(Me,jEr),e(Me,Z9),e(Z9,r8e),e(r8e,DEr),e(Z9,GEr),e(Z9,YJ),e(YJ,OEr),e(Z9,VEr),e(Me,XEr),e(Me,eM),e(eM,t8e),e(t8e,zEr),e(eM,QEr),e(eM,KJ),e(KJ,WEr),e(eM,HEr),e(Me,UEr),e(Me,oM),e(oM,a8e),e(a8e,JEr),e(oM,YEr),e(oM,ZJ),e(ZJ,KEr),e(oM,ZEr),e(Me,eCr),e(Me,rM),e(rM,n8e),e(n8e,oCr),e(rM,rCr),e(rM,eY),e(eY,tCr),e(rM,aCr),e(Me,nCr),e(Me,tM),e(tM,s8e),e(s8e,sCr),e(tM,lCr),e(tM,oY),e(oY,iCr),e(tM,dCr),e(Me,cCr),e(Me,aM),e(aM,l8e),e(l8e,fCr),e(aM,mCr),e(aM,rY),e(rY,gCr),e(aM,hCr),e(kr,pCr),M(nM,kr,null),b(f,Eze,u),b(f,_c,u),e(_c,sM),e(sM,i8e),M(ix,i8e,null),e(_c,_Cr),e(_c,d8e),e(d8e,uCr),b(f,Cze,u),b(f,ar,u),M(dx,ar,null),e(ar,bCr),e(ar,uc),e(uc,vCr),e(uc,tY),e(tY,FCr),e(uc,TCr),e(uc,aY),e(aY,MCr),e(uc,ECr),e(ar,CCr),e(ar,cx),e(cx,wCr),e(cx,c8e),e(c8e,ACr),e(cx,LCr),e(ar,yCr),e(ar,Nt),M(fx,Nt,null),e(Nt,xCr),e(Nt,f8e),e(f8e,$Cr),e(Nt,kCr),e(Nt,bc),e(bc,SCr),e(bc,m8e),e(m8e,RCr),e(bc,PCr),e(bc,nY),e(nY,BCr),e(bc,NCr),e(Nt,ICr),M(lM,Nt,null),e(ar,qCr),e(ar,Sr),M(mx,Sr,null),e(Sr,jCr),e(Sr,g8e),e(g8e,DCr),e(Sr,GCr),e(Sr,cn),e(cn,OCr),e(cn,h8e),e(h8e,VCr),e(cn,XCr),e(cn,p8e),e(p8e,zCr),e(cn,QCr),e(cn,_8e),e(_8e,WCr),e(cn,HCr),e(Sr,UCr),e(Sr,Qe),e(Qe,iM),e(iM,u8e),e(u8e,JCr),e(iM,YCr),e(iM,sY),e(sY,KCr),e(iM,ZCr),e(Qe,e3r),e(Qe,dM),e(dM,b8e),e(b8e,o3r),e(dM,r3r),e(dM,lY),e(lY,t3r),e(dM,a3r),e(Qe,n3r),e(Qe,Ks),e(Ks,v8e),e(v8e,s3r),e(Ks,l3r),e(Ks,iY),e(iY,i3r),e(Ks,d3r),e(Ks,dY),e(dY,c3r),e(Ks,f3r),e(Qe,m3r),e(Qe,cM),e(cM,F8e),e(F8e,g3r),e(cM,h3r),e(cM,cY),e(cY,p3r),e(cM,_3r),e(Qe,u3r),e(Qe,fM),e(fM,T8e),e(T8e,b3r),e(fM,v3r),e(fM,fY),e(fY,F3r),e(fM,T3r),e(Qe,M3r),e(Qe,mM),e(mM,M8e),e(M8e,E3r),e(mM,C3r),e(mM,mY),e(mY,w3r),e(mM,A3r),e(Qe,L3r),e(Qe,gM),e(gM,E8e),e(E8e,y3r),e(gM,x3r),e(gM,gY),e(gY,$3r),e(gM,k3r),e(Sr,S3r),M(hM,Sr,null),b(f,wze,u),b(f,vc,u),e(vc,pM),e(pM,C8e),M(gx,C8e,null),e(vc,R3r),e(vc,w8e),e(w8e,P3r),b(f,Aze,u),b(f,nr,u),M(hx,nr,null),e(nr,B3r),e(nr,Fc),e(Fc,N3r),e(Fc,hY),e(hY,I3r),e(Fc,q3r),e(Fc,pY),e(pY,j3r),e(Fc,D3r),e(nr,G3r),e(nr,px),e(px,O3r),e(px,A8e),e(A8e,V3r),e(px,X3r),e(nr,z3r),e(nr,It),M(_x,It,null),e(It,Q3r),e(It,L8e),e(L8e,W3r),e(It,H3r),e(It,Tc),e(Tc,U3r),e(Tc,y8e),e(y8e,J3r),e(Tc,Y3r),e(Tc,_Y),e(_Y,K3r),e(Tc,Z3r),e(It,e5r),M(_M,It,null),e(nr,o5r),e(nr,Rr),M(ux,Rr,null),e(Rr,r5r),e(Rr,x8e),e(x8e,t5r),e(Rr,a5r),e(Rr,fn),e(fn,n5r),e(fn,$8e),e($8e,s5r),e(fn,l5r),e(fn,k8e),e(k8e,i5r),e(fn,d5r),e(fn,S8e),e(S8e,c5r),e(fn,f5r),e(Rr,m5r),e(Rr,ie),e(ie,uM),e(uM,R8e),e(R8e,g5r),e(uM,h5r),e(uM,uY),e(uY,p5r),e(uM,_5r),e(ie,u5r),e(ie,bM),e(bM,P8e),e(P8e,b5r),e(bM,v5r),e(bM,bY),e(bY,F5r),e(bM,T5r),e(ie,M5r),e(ie,vM),e(vM,B8e),e(B8e,E5r),e(vM,C5r),e(vM,vY),e(vY,w5r),e(vM,A5r),e(ie,L5r),e(ie,FM),e(FM,N8e),e(N8e,y5r),e(FM,x5r),e(FM,FY),e(FY,$5r),e(FM,k5r),e(ie,S5r),e(ie,TM),e(TM,I8e),e(I8e,R5r),e(TM,P5r),e(TM,TY),e(TY,B5r),e(TM,N5r),e(ie,I5r),e(ie,MM),e(MM,q8e),e(q8e,q5r),e(MM,j5r),e(MM,MY),e(MY,D5r),e(MM,G5r),e(ie,O5r),e(ie,EM),e(EM,j8e),e(j8e,V5r),e(EM,X5r),e(EM,EY),e(EY,z5r),e(EM,Q5r),e(ie,W5r),e(ie,CM),e(CM,D8e),e(D8e,H5r),e(CM,U5r),e(CM,CY),e(CY,J5r),e(CM,Y5r),e(ie,K5r),e(ie,wM),e(wM,G8e),e(G8e,Z5r),e(wM,ewr),e(wM,wY),e(wY,owr),e(wM,rwr),e(ie,twr),e(ie,AM),e(AM,O8e),e(O8e,awr),e(AM,nwr),e(AM,AY),e(AY,swr),e(AM,lwr),e(ie,iwr),e(ie,LM),e(LM,V8e),e(V8e,dwr),e(LM,cwr),e(LM,LY),e(LY,fwr),e(LM,mwr),e(ie,gwr),e(ie,yM),e(yM,X8e),e(X8e,hwr),e(yM,pwr),e(yM,yY),e(yY,_wr),e(yM,uwr),e(ie,bwr),e(ie,xM),e(xM,z8e),e(z8e,vwr),e(xM,Fwr),e(xM,xY),e(xY,Twr),e(xM,Mwr),e(ie,Ewr),e(ie,$M),e($M,Q8e),e(Q8e,Cwr),e($M,wwr),e($M,$Y),e($Y,Awr),e($M,Lwr),e(ie,ywr),e(ie,kM),e(kM,W8e),e(W8e,xwr),e(kM,$wr),e(kM,kY),e(kY,kwr),e(kM,Swr),e(ie,Rwr),e(ie,SM),e(SM,H8e),e(H8e,Pwr),e(SM,Bwr),e(SM,SY),e(SY,Nwr),e(SM,Iwr),e(ie,qwr),e(ie,RM),e(RM,U8e),e(U8e,jwr),e(RM,Dwr),e(RM,RY),e(RY,Gwr),e(RM,Owr),e(ie,Vwr),e(ie,PM),e(PM,J8e),e(J8e,Xwr),e(PM,zwr),e(PM,PY),e(PY,Qwr),e(PM,Wwr),e(ie,Hwr),e(ie,BM),e(BM,Y8e),e(Y8e,Uwr),e(BM,Jwr),e(BM,BY),e(BY,Ywr),e(BM,Kwr),e(ie,Zwr),e(ie,NM),e(NM,K8e),e(K8e,eAr),e(NM,oAr),e(NM,NY),e(NY,rAr),e(NM,tAr),e(Rr,aAr),M(IM,Rr,null),b(f,Lze,u),b(f,Mc,u),e(Mc,qM),e(qM,Z8e),M(bx,Z8e,null),e(Mc,nAr),e(Mc,e9e),e(e9e,sAr),b(f,yze,u),b(f,sr,u),M(vx,sr,null),e(sr,lAr),e(sr,Ec),e(Ec,iAr),e(Ec,IY),e(IY,dAr),e(Ec,cAr),e(Ec,qY),e(qY,fAr),e(Ec,mAr),e(sr,gAr),e(sr,Fx),e(Fx,hAr),e(Fx,o9e),e(o9e,pAr),e(Fx,_Ar),e(sr,uAr),e(sr,qt),M(Tx,qt,null),e(qt,bAr),e(qt,r9e),e(r9e,vAr),e(qt,FAr),e(qt,Cc),e(Cc,TAr),e(Cc,t9e),e(t9e,MAr),e(Cc,EAr),e(Cc,jY),e(jY,CAr),e(Cc,wAr),e(qt,AAr),M(jM,qt,null),e(sr,LAr),e(sr,Pr),M(Mx,Pr,null),e(Pr,yAr),e(Pr,a9e),e(a9e,xAr),e(Pr,$Ar),e(Pr,mn),e(mn,kAr),e(mn,n9e),e(n9e,SAr),e(mn,RAr),e(mn,s9e),e(s9e,PAr),e(mn,BAr),e(mn,l9e),e(l9e,NAr),e(mn,IAr),e(Pr,qAr),e(Pr,ye),e(ye,DM),e(DM,i9e),e(i9e,jAr),e(DM,DAr),e(DM,DY),e(DY,GAr),e(DM,OAr),e(ye,VAr),e(ye,GM),e(GM,d9e),e(d9e,XAr),e(GM,zAr),e(GM,GY),e(GY,QAr),e(GM,WAr),e(ye,HAr),e(ye,OM),e(OM,c9e),e(c9e,UAr),e(OM,JAr),e(OM,OY),e(OY,YAr),e(OM,KAr),e(ye,ZAr),e(ye,VM),e(VM,f9e),e(f9e,e6r),e(VM,o6r),e(VM,VY),e(VY,r6r),e(VM,t6r),e(ye,a6r),e(ye,XM),e(XM,m9e),e(m9e,n6r),e(XM,s6r),e(XM,XY),e(XY,l6r),e(XM,i6r),e(ye,d6r),e(ye,zM),e(zM,g9e),e(g9e,c6r),e(zM,f6r),e(zM,zY),e(zY,m6r),e(zM,g6r),e(ye,h6r),e(ye,QM),e(QM,h9e),e(h9e,p6r),e(QM,_6r),e(QM,QY),e(QY,u6r),e(QM,b6r),e(ye,v6r),e(ye,WM),e(WM,p9e),e(p9e,F6r),e(WM,T6r),e(WM,WY),e(WY,M6r),e(WM,E6r),e(ye,C6r),e(ye,HM),e(HM,_9e),e(_9e,w6r),e(HM,A6r),e(HM,HY),e(HY,L6r),e(HM,y6r),e(ye,x6r),e(ye,UM),e(UM,u9e),e(u9e,$6r),e(UM,k6r),e(UM,UY),e(UY,S6r),e(UM,R6r),e(Pr,P6r),M(JM,Pr,null),b(f,xze,u),b(f,wc,u),e(wc,YM),e(YM,b9e),M(Ex,b9e,null),e(wc,B6r),e(wc,v9e),e(v9e,N6r),b(f,$ze,u),b(f,lr,u),M(Cx,lr,null),e(lr,I6r),e(lr,Ac),e(Ac,q6r),e(Ac,JY),e(JY,j6r),e(Ac,D6r),e(Ac,YY),e(YY,G6r),e(Ac,O6r),e(lr,V6r),e(lr,wx),e(wx,X6r),e(wx,F9e),e(F9e,z6r),e(wx,Q6r),e(lr,W6r),e(lr,jt),M(Ax,jt,null),e(jt,H6r),e(jt,T9e),e(T9e,U6r),e(jt,J6r),e(jt,Lc),e(Lc,Y6r),e(Lc,M9e),e(M9e,K6r),e(Lc,Z6r),e(Lc,KY),e(KY,eLr),e(Lc,oLr),e(jt,rLr),M(KM,jt,null),e(lr,tLr),e(lr,Br),M(Lx,Br,null),e(Br,aLr),e(Br,E9e),e(E9e,nLr),e(Br,sLr),e(Br,gn),e(gn,lLr),e(gn,C9e),e(C9e,iLr),e(gn,dLr),e(gn,w9e),e(w9e,cLr),e(gn,fLr),e(gn,A9e),e(A9e,mLr),e(gn,gLr),e(Br,hLr),e(Br,te),e(te,ZM),e(ZM,L9e),e(L9e,pLr),e(ZM,_Lr),e(ZM,ZY),e(ZY,uLr),e(ZM,bLr),e(te,vLr),e(te,e4),e(e4,y9e),e(y9e,FLr),e(e4,TLr),e(e4,eK),e(eK,MLr),e(e4,ELr),e(te,CLr),e(te,o4),e(o4,x9e),e(x9e,wLr),e(o4,ALr),e(o4,oK),e(oK,LLr),e(o4,yLr),e(te,xLr),e(te,r4),e(r4,$9e),e($9e,$Lr),e(r4,kLr),e(r4,rK),e(rK,SLr),e(r4,RLr),e(te,PLr),e(te,t4),e(t4,k9e),e(k9e,BLr),e(t4,NLr),e(t4,tK),e(tK,ILr),e(t4,qLr),e(te,jLr),e(te,a4),e(a4,S9e),e(S9e,DLr),e(a4,GLr),e(a4,aK),e(aK,OLr),e(a4,VLr),e(te,XLr),e(te,n4),e(n4,R9e),e(R9e,zLr),e(n4,QLr),e(n4,nK),e(nK,WLr),e(n4,HLr),e(te,ULr),e(te,s4),e(s4,P9e),e(P9e,JLr),e(s4,YLr),e(s4,sK),e(sK,KLr),e(s4,ZLr),e(te,eyr),e(te,l4),e(l4,B9e),e(B9e,oyr),e(l4,ryr),e(l4,lK),e(lK,tyr),e(l4,ayr),e(te,nyr),e(te,i4),e(i4,N9e),e(N9e,syr),e(i4,lyr),e(i4,iK),e(iK,iyr),e(i4,dyr),e(te,cyr),e(te,d4),e(d4,I9e),e(I9e,fyr),e(d4,myr),e(d4,dK),e(dK,gyr),e(d4,hyr),e(te,pyr),e(te,c4),e(c4,q9e),e(q9e,_yr),e(c4,uyr),e(c4,cK),e(cK,byr),e(c4,vyr),e(te,Fyr),e(te,f4),e(f4,j9e),e(j9e,Tyr),e(f4,Myr),e(f4,fK),e(fK,Eyr),e(f4,Cyr),e(te,wyr),e(te,m4),e(m4,D9e),e(D9e,Ayr),e(m4,Lyr),e(m4,mK),e(mK,yyr),e(m4,xyr),e(te,$yr),e(te,g4),e(g4,G9e),e(G9e,kyr),e(g4,Syr),e(g4,gK),e(gK,Ryr),e(g4,Pyr),e(te,Byr),e(te,h4),e(h4,O9e),e(O9e,Nyr),e(h4,Iyr),e(h4,hK),e(hK,qyr),e(h4,jyr),e(te,Dyr),e(te,p4),e(p4,V9e),e(V9e,Gyr),e(p4,Oyr),e(p4,pK),e(pK,Vyr),e(p4,Xyr),e(te,zyr),e(te,_4),e(_4,X9e),e(X9e,Qyr),e(_4,Wyr),e(_4,_K),e(_K,Hyr),e(_4,Uyr),e(te,Jyr),e(te,u4),e(u4,z9e),e(z9e,Yyr),e(u4,Kyr),e(u4,uK),e(uK,Zyr),e(u4,exr),e(te,oxr),e(te,b4),e(b4,Q9e),e(Q9e,rxr),e(b4,txr),e(b4,bK),e(bK,axr),e(b4,nxr),e(te,sxr),e(te,v4),e(v4,W9e),e(W9e,lxr),e(v4,ixr),e(v4,vK),e(vK,dxr),e(v4,cxr),e(te,fxr),e(te,F4),e(F4,H9e),e(H9e,mxr),e(F4,gxr),e(F4,FK),e(FK,hxr),e(F4,pxr),e(te,_xr),e(te,T4),e(T4,U9e),e(U9e,uxr),e(T4,bxr),e(T4,TK),e(TK,vxr),e(T4,Fxr),e(te,Txr),e(te,M4),e(M4,J9e),e(J9e,Mxr),e(M4,Exr),e(M4,MK),e(MK,Cxr),e(M4,wxr),e(te,Axr),e(te,E4),e(E4,Y9e),e(Y9e,Lxr),e(E4,yxr),e(E4,EK),e(EK,xxr),e(E4,$xr),e(te,kxr),e(te,C4),e(C4,K9e),e(K9e,Sxr),e(C4,Rxr),e(C4,CK),e(CK,Pxr),e(C4,Bxr),e(Br,Nxr),M(w4,Br,null),b(f,kze,u),b(f,yc,u),e(yc,A4),e(A4,Z9e),M(yx,Z9e,null),e(yc,Ixr),e(yc,eMe),e(eMe,qxr),b(f,Sze,u),b(f,ir,u),M(xx,ir,null),e(ir,jxr),e(ir,xc),e(xc,Dxr),e(xc,wK),e(wK,Gxr),e(xc,Oxr),e(xc,AK),e(AK,Vxr),e(xc,Xxr),e(ir,zxr),e(ir,$x),e($x,Qxr),e($x,oMe),e(oMe,Wxr),e($x,Hxr),e(ir,Uxr),e(ir,Dt),M(kx,Dt,null),e(Dt,Jxr),e(Dt,rMe),e(rMe,Yxr),e(Dt,Kxr),e(Dt,$c),e($c,Zxr),e($c,tMe),e(tMe,e$r),e($c,o$r),e($c,LK),e(LK,r$r),e($c,t$r),e(Dt,a$r),M(L4,Dt,null),e(ir,n$r),e(ir,Nr),M(Sx,Nr,null),e(Nr,s$r),e(Nr,aMe),e(aMe,l$r),e(Nr,i$r),e(Nr,hn),e(hn,d$r),e(hn,nMe),e(nMe,c$r),e(hn,f$r),e(hn,sMe),e(sMe,m$r),e(hn,g$r),e(hn,lMe),e(lMe,h$r),e(hn,p$r),e(Nr,_$r),e(Nr,ue),e(ue,y4),e(y4,iMe),e(iMe,u$r),e(y4,b$r),e(y4,yK),e(yK,v$r),e(y4,F$r),e(ue,T$r),e(ue,x4),e(x4,dMe),e(dMe,M$r),e(x4,E$r),e(x4,xK),e(xK,C$r),e(x4,w$r),e(ue,A$r),e(ue,$4),e($4,cMe),e(cMe,L$r),e($4,y$r),e($4,$K),e($K,x$r),e($4,$$r),e(ue,k$r),e(ue,k4),e(k4,fMe),e(fMe,S$r),e(k4,R$r),e(k4,kK),e(kK,P$r),e(k4,B$r),e(ue,N$r),e(ue,S4),e(S4,mMe),e(mMe,I$r),e(S4,q$r),e(S4,SK),e(SK,j$r),e(S4,D$r),e(ue,G$r),e(ue,R4),e(R4,gMe),e(gMe,O$r),e(R4,V$r),e(R4,RK),e(RK,X$r),e(R4,z$r),e(ue,Q$r),e(ue,P4),e(P4,hMe),e(hMe,W$r),e(P4,H$r),e(P4,PK),e(PK,U$r),e(P4,J$r),e(ue,Y$r),e(ue,B4),e(B4,pMe),e(pMe,K$r),e(B4,Z$r),e(B4,BK),e(BK,ekr),e(B4,okr),e(ue,rkr),e(ue,N4),e(N4,_Me),e(_Me,tkr),e(N4,akr),e(N4,NK),e(NK,nkr),e(N4,skr),e(ue,lkr),e(ue,I4),e(I4,uMe),e(uMe,ikr),e(I4,dkr),e(I4,IK),e(IK,ckr),e(I4,fkr),e(ue,mkr),e(ue,q4),e(q4,bMe),e(bMe,gkr),e(q4,hkr),e(q4,qK),e(qK,pkr),e(q4,_kr),e(ue,ukr),e(ue,j4),e(j4,vMe),e(vMe,bkr),e(j4,vkr),e(j4,jK),e(jK,Fkr),e(j4,Tkr),e(ue,Mkr),e(ue,D4),e(D4,FMe),e(FMe,Ekr),e(D4,Ckr),e(D4,DK),e(DK,wkr),e(D4,Akr),e(ue,Lkr),e(ue,G4),e(G4,TMe),e(TMe,ykr),e(G4,xkr),e(G4,GK),e(GK,$kr),e(G4,kkr),e(ue,Skr),e(ue,O4),e(O4,MMe),e(MMe,Rkr),e(O4,Pkr),e(O4,OK),e(OK,Bkr),e(O4,Nkr),e(ue,Ikr),e(ue,V4),e(V4,EMe),e(EMe,qkr),e(V4,jkr),e(V4,VK),e(VK,Dkr),e(V4,Gkr),e(ue,Okr),e(ue,X4),e(X4,CMe),e(CMe,Vkr),e(X4,Xkr),e(X4,XK),e(XK,zkr),e(X4,Qkr),e(Nr,Wkr),M(z4,Nr,null),b(f,Rze,u),b(f,kc,u),e(kc,Q4),e(Q4,wMe),M(Rx,wMe,null),e(kc,Hkr),e(kc,AMe),e(AMe,Ukr),b(f,Pze,u),b(f,dr,u),M(Px,dr,null),e(dr,Jkr),e(dr,Sc),e(Sc,Ykr),e(Sc,zK),e(zK,Kkr),e(Sc,Zkr),e(Sc,QK),e(QK,eSr),e(Sc,oSr),e(dr,rSr),e(dr,Bx),e(Bx,tSr),e(Bx,LMe),e(LMe,aSr),e(Bx,nSr),e(dr,sSr),e(dr,Gt),M(Nx,Gt,null),e(Gt,lSr),e(Gt,yMe),e(yMe,iSr),e(Gt,dSr),e(Gt,Rc),e(Rc,cSr),e(Rc,xMe),e(xMe,fSr),e(Rc,mSr),e(Rc,WK),e(WK,gSr),e(Rc,hSr),e(Gt,pSr),M(W4,Gt,null),e(dr,_Sr),e(dr,Ir),M(Ix,Ir,null),e(Ir,uSr),e(Ir,$Me),e($Me,bSr),e(Ir,vSr),e(Ir,pn),e(pn,FSr),e(pn,kMe),e(kMe,TSr),e(pn,MSr),e(pn,SMe),e(SMe,ESr),e(pn,CSr),e(pn,RMe),e(RMe,wSr),e(pn,ASr),e(Ir,LSr),e(Ir,qx),e(qx,H4),e(H4,PMe),e(PMe,ySr),e(H4,xSr),e(H4,HK),e(HK,$Sr),e(H4,kSr),e(qx,SSr),e(qx,U4),e(U4,BMe),e(BMe,RSr),e(U4,PSr),e(U4,UK),e(UK,BSr),e(U4,NSr),e(Ir,ISr),M(J4,Ir,null),b(f,Bze,u),b(f,Pc,u),e(Pc,Y4),e(Y4,NMe),M(jx,NMe,null),e(Pc,qSr),e(Pc,IMe),e(IMe,jSr),b(f,Nze,u),b(f,cr,u),M(Dx,cr,null),e(cr,DSr),e(cr,Bc),e(Bc,GSr),e(Bc,JK),e(JK,OSr),e(Bc,VSr),e(Bc,YK),e(YK,XSr),e(Bc,zSr),e(cr,QSr),e(cr,Gx),e(Gx,WSr),e(Gx,qMe),e(qMe,HSr),e(Gx,USr),e(cr,JSr),e(cr,Ot),M(Ox,Ot,null),e(Ot,YSr),e(Ot,jMe),e(jMe,KSr),e(Ot,ZSr),e(Ot,Nc),e(Nc,eRr),e(Nc,DMe),e(DMe,oRr),e(Nc,rRr),e(Nc,KK),e(KK,tRr),e(Nc,aRr),e(Ot,nRr),M(K4,Ot,null),e(cr,sRr),e(cr,qr),M(Vx,qr,null),e(qr,lRr),e(qr,GMe),e(GMe,iRr),e(qr,dRr),e(qr,_n),e(_n,cRr),e(_n,OMe),e(OMe,fRr),e(_n,mRr),e(_n,VMe),e(VMe,gRr),e(_n,hRr),e(_n,XMe),e(XMe,pRr),e(_n,_Rr),e(qr,uRr),e(qr,zMe),e(zMe,Z4),e(Z4,QMe),e(QMe,bRr),e(Z4,vRr),e(Z4,ZK),e(ZK,FRr),e(Z4,TRr),e(qr,MRr),M(eE,qr,null),b(f,Ize,u),b(f,Ic,u),e(Ic,oE),e(oE,WMe),M(Xx,WMe,null),e(Ic,ERr),e(Ic,HMe),e(HMe,CRr),b(f,qze,u),b(f,fr,u),M(zx,fr,null),e(fr,wRr),e(fr,qc),e(qc,ARr),e(qc,eZ),e(eZ,LRr),e(qc,yRr),e(qc,oZ),e(oZ,xRr),e(qc,$Rr),e(fr,kRr),e(fr,Qx),e(Qx,SRr),e(Qx,UMe),e(UMe,RRr),e(Qx,PRr),e(fr,BRr),e(fr,Vt),M(Wx,Vt,null),e(Vt,NRr),e(Vt,JMe),e(JMe,IRr),e(Vt,qRr),e(Vt,jc),e(jc,jRr),e(jc,YMe),e(YMe,DRr),e(jc,GRr),e(jc,rZ),e(rZ,ORr),e(jc,VRr),e(Vt,XRr),M(rE,Vt,null),e(fr,zRr),e(fr,jr),M(Hx,jr,null),e(jr,QRr),e(jr,KMe),e(KMe,WRr),e(jr,HRr),e(jr,un),e(un,URr),e(un,ZMe),e(ZMe,JRr),e(un,YRr),e(un,e4e),e(e4e,KRr),e(un,ZRr),e(un,o4e),e(o4e,ePr),e(un,oPr),e(jr,rPr),e(jr,de),e(de,tE),e(tE,r4e),e(r4e,tPr),e(tE,aPr),e(tE,tZ),e(tZ,nPr),e(tE,sPr),e(de,lPr),e(de,aE),e(aE,t4e),e(t4e,iPr),e(aE,dPr),e(aE,aZ),e(aZ,cPr),e(aE,fPr),e(de,mPr),e(de,nE),e(nE,a4e),e(a4e,gPr),e(nE,hPr),e(nE,nZ),e(nZ,pPr),e(nE,_Pr),e(de,uPr),e(de,sE),e(sE,n4e),e(n4e,bPr),e(sE,vPr),e(sE,sZ),e(sZ,FPr),e(sE,TPr),e(de,MPr),e(de,lE),e(lE,s4e),e(s4e,EPr),e(lE,CPr),e(lE,lZ),e(lZ,wPr),e(lE,APr),e(de,LPr),e(de,iE),e(iE,l4e),e(l4e,yPr),e(iE,xPr),e(iE,iZ),e(iZ,$Pr),e(iE,kPr),e(de,SPr),e(de,dE),e(dE,i4e),e(i4e,RPr),e(dE,PPr),e(dE,dZ),e(dZ,BPr),e(dE,NPr),e(de,IPr),e(de,cE),e(cE,d4e),e(d4e,qPr),e(cE,jPr),e(cE,cZ),e(cZ,DPr),e(cE,GPr),e(de,OPr),e(de,fE),e(fE,c4e),e(c4e,VPr),e(fE,XPr),e(fE,fZ),e(fZ,zPr),e(fE,QPr),e(de,WPr),e(de,mE),e(mE,f4e),e(f4e,HPr),e(mE,UPr),e(mE,mZ),e(mZ,JPr),e(mE,YPr),e(de,KPr),e(de,gE),e(gE,m4e),e(m4e,ZPr),e(gE,eBr),e(gE,gZ),e(gZ,oBr),e(gE,rBr),e(de,tBr),e(de,hE),e(hE,g4e),e(g4e,aBr),e(hE,nBr),e(hE,hZ),e(hZ,sBr),e(hE,lBr),e(de,iBr),e(de,pE),e(pE,h4e),e(h4e,dBr),e(pE,cBr),e(pE,pZ),e(pZ,fBr),e(pE,mBr),e(de,gBr),e(de,_E),e(_E,p4e),e(p4e,hBr),e(_E,pBr),e(_E,_Z),e(_Z,_Br),e(_E,uBr),e(de,bBr),e(de,uE),e(uE,_4e),e(_4e,vBr),e(uE,FBr),e(uE,uZ),e(uZ,TBr),e(uE,MBr),e(de,EBr),e(de,bE),e(bE,u4e),e(u4e,CBr),e(bE,wBr),e(bE,bZ),e(bZ,ABr),e(bE,LBr),e(de,yBr),e(de,vE),e(vE,b4e),e(b4e,xBr),e(vE,$Br),e(vE,vZ),e(vZ,kBr),e(vE,SBr),e(de,RBr),e(de,FE),e(FE,v4e),e(v4e,PBr),e(FE,BBr),e(FE,FZ),e(FZ,NBr),e(FE,IBr),e(de,qBr),e(de,TE),e(TE,F4e),e(F4e,jBr),e(TE,DBr),e(TE,TZ),e(TZ,GBr),e(TE,OBr),e(de,VBr),e(de,ME),e(ME,T4e),e(T4e,XBr),e(ME,zBr),e(ME,MZ),e(MZ,QBr),e(ME,WBr),e(jr,HBr),M(EE,jr,null),b(f,jze,u),b(f,Dc,u),e(Dc,CE),e(CE,M4e),M(Ux,M4e,null),e(Dc,UBr),e(Dc,E4e),e(E4e,JBr),b(f,Dze,u),b(f,mr,u),M(Jx,mr,null),e(mr,YBr),e(mr,Gc),e(Gc,KBr),e(Gc,EZ),e(EZ,ZBr),e(Gc,eNr),e(Gc,CZ),e(CZ,oNr),e(Gc,rNr),e(mr,tNr),e(mr,Yx),e(Yx,aNr),e(Yx,C4e),e(C4e,nNr),e(Yx,sNr),e(mr,lNr),e(mr,Xt),M(Kx,Xt,null),e(Xt,iNr),e(Xt,w4e),e(w4e,dNr),e(Xt,cNr),e(Xt,Oc),e(Oc,fNr),e(Oc,A4e),e(A4e,mNr),e(Oc,gNr),e(Oc,wZ),e(wZ,hNr),e(Oc,pNr),e(Xt,_Nr),M(wE,Xt,null),e(mr,uNr),e(mr,Dr),M(Zx,Dr,null),e(Dr,bNr),e(Dr,L4e),e(L4e,vNr),e(Dr,FNr),e(Dr,bn),e(bn,TNr),e(bn,y4e),e(y4e,MNr),e(bn,ENr),e(bn,x4e),e(x4e,CNr),e(bn,wNr),e(bn,$4e),e($4e,ANr),e(bn,LNr),e(Dr,yNr),e(Dr,ce),e(ce,AE),e(AE,k4e),e(k4e,xNr),e(AE,$Nr),e(AE,AZ),e(AZ,kNr),e(AE,SNr),e(ce,RNr),e(ce,LE),e(LE,S4e),e(S4e,PNr),e(LE,BNr),e(LE,LZ),e(LZ,NNr),e(LE,INr),e(ce,qNr),e(ce,yE),e(yE,R4e),e(R4e,jNr),e(yE,DNr),e(yE,yZ),e(yZ,GNr),e(yE,ONr),e(ce,VNr),e(ce,xE),e(xE,P4e),e(P4e,XNr),e(xE,zNr),e(xE,xZ),e(xZ,QNr),e(xE,WNr),e(ce,HNr),e(ce,$E),e($E,B4e),e(B4e,UNr),e($E,JNr),e($E,$Z),e($Z,YNr),e($E,KNr),e(ce,ZNr),e(ce,kE),e(kE,N4e),e(N4e,eIr),e(kE,oIr),e(kE,kZ),e(kZ,rIr),e(kE,tIr),e(ce,aIr),e(ce,SE),e(SE,I4e),e(I4e,nIr),e(SE,sIr),e(SE,SZ),e(SZ,lIr),e(SE,iIr),e(ce,dIr),e(ce,RE),e(RE,q4e),e(q4e,cIr),e(RE,fIr),e(RE,RZ),e(RZ,mIr),e(RE,gIr),e(ce,hIr),e(ce,PE),e(PE,j4e),e(j4e,pIr),e(PE,_Ir),e(PE,PZ),e(PZ,uIr),e(PE,bIr),e(ce,vIr),e(ce,BE),e(BE,D4e),e(D4e,FIr),e(BE,TIr),e(BE,BZ),e(BZ,MIr),e(BE,EIr),e(ce,CIr),e(ce,NE),e(NE,G4e),e(G4e,wIr),e(NE,AIr),e(NE,NZ),e(NZ,LIr),e(NE,yIr),e(ce,xIr),e(ce,IE),e(IE,O4e),e(O4e,$Ir),e(IE,kIr),e(IE,IZ),e(IZ,SIr),e(IE,RIr),e(ce,PIr),e(ce,qE),e(qE,V4e),e(V4e,BIr),e(qE,NIr),e(qE,qZ),e(qZ,IIr),e(qE,qIr),e(ce,jIr),e(ce,jE),e(jE,X4e),e(X4e,DIr),e(jE,GIr),e(jE,jZ),e(jZ,OIr),e(jE,VIr),e(ce,XIr),e(ce,DE),e(DE,z4e),e(z4e,zIr),e(DE,QIr),e(DE,DZ),e(DZ,WIr),e(DE,HIr),e(ce,UIr),e(ce,GE),e(GE,Q4e),e(Q4e,JIr),e(GE,YIr),e(GE,GZ),e(GZ,KIr),e(GE,ZIr),e(ce,eqr),e(ce,OE),e(OE,W4e),e(W4e,oqr),e(OE,rqr),e(OE,OZ),e(OZ,tqr),e(OE,aqr),e(ce,nqr),e(ce,VE),e(VE,H4e),e(H4e,sqr),e(VE,lqr),e(VE,VZ),e(VZ,iqr),e(VE,dqr),e(ce,cqr),e(ce,XE),e(XE,U4e),e(U4e,fqr),e(XE,mqr),e(XE,XZ),e(XZ,gqr),e(XE,hqr),e(ce,pqr),e(ce,zE),e(zE,J4e),e(J4e,_qr),e(zE,uqr),e(zE,zZ),e(zZ,bqr),e(zE,vqr),e(Dr,Fqr),M(QE,Dr,null),b(f,Gze,u),b(f,Vc,u),e(Vc,WE),e(WE,Y4e),M(e$,Y4e,null),e(Vc,Tqr),e(Vc,K4e),e(K4e,Mqr),b(f,Oze,u),b(f,gr,u),M(o$,gr,null),e(gr,Eqr),e(gr,Xc),e(Xc,Cqr),e(Xc,QZ),e(QZ,wqr),e(Xc,Aqr),e(Xc,WZ),e(WZ,Lqr),e(Xc,yqr),e(gr,xqr),e(gr,r$),e(r$,$qr),e(r$,Z4e),e(Z4e,kqr),e(r$,Sqr),e(gr,Rqr),e(gr,zt),M(t$,zt,null),e(zt,Pqr),e(zt,eEe),e(eEe,Bqr),e(zt,Nqr),e(zt,zc),e(zc,Iqr),e(zc,oEe),e(oEe,qqr),e(zc,jqr),e(zc,HZ),e(HZ,Dqr),e(zc,Gqr),e(zt,Oqr),M(HE,zt,null),e(gr,Vqr),e(gr,Gr),M(a$,Gr,null),e(Gr,Xqr),e(Gr,rEe),e(rEe,zqr),e(Gr,Qqr),e(Gr,vn),e(vn,Wqr),e(vn,tEe),e(tEe,Hqr),e(vn,Uqr),e(vn,aEe),e(aEe,Jqr),e(vn,Yqr),e(vn,nEe),e(nEe,Kqr),e(vn,Zqr),e(Gr,ejr),e(Gr,sEe),e(sEe,UE),e(UE,lEe),e(lEe,ojr),e(UE,rjr),e(UE,UZ),e(UZ,tjr),e(UE,ajr),e(Gr,njr),M(JE,Gr,null),b(f,Vze,u),b(f,Qc,u),e(Qc,YE),e(YE,iEe),M(n$,iEe,null),e(Qc,sjr),e(Qc,dEe),e(dEe,ljr),b(f,Xze,u),b(f,hr,u),M(s$,hr,null),e(hr,ijr),e(hr,Wc),e(Wc,djr),e(Wc,JZ),e(JZ,cjr),e(Wc,fjr),e(Wc,YZ),e(YZ,mjr),e(Wc,gjr),e(hr,hjr),e(hr,l$),e(l$,pjr),e(l$,cEe),e(cEe,_jr),e(l$,ujr),e(hr,bjr),e(hr,Qt),M(i$,Qt,null),e(Qt,vjr),e(Qt,fEe),e(fEe,Fjr),e(Qt,Tjr),e(Qt,Hc),e(Hc,Mjr),e(Hc,mEe),e(mEe,Ejr),e(Hc,Cjr),e(Hc,KZ),e(KZ,wjr),e(Hc,Ajr),e(Qt,Ljr),M(KE,Qt,null),e(hr,yjr),e(hr,Or),M(d$,Or,null),e(Or,xjr),e(Or,gEe),e(gEe,$jr),e(Or,kjr),e(Or,Fn),e(Fn,Sjr),e(Fn,hEe),e(hEe,Rjr),e(Fn,Pjr),e(Fn,pEe),e(pEe,Bjr),e(Fn,Njr),e(Fn,_Ee),e(_Ee,Ijr),e(Fn,qjr),e(Or,jjr),e(Or,uEe),e(uEe,ZE),e(ZE,bEe),e(bEe,Djr),e(ZE,Gjr),e(ZE,ZZ),e(ZZ,Ojr),e(ZE,Vjr),e(Or,Xjr),M(eC,Or,null),b(f,zze,u),b(f,Uc,u),e(Uc,oC),e(oC,vEe),M(c$,vEe,null),e(Uc,zjr),e(Uc,FEe),e(FEe,Qjr),b(f,Qze,u),b(f,pr,u),M(f$,pr,null),e(pr,Wjr),e(pr,Jc),e(Jc,Hjr),e(Jc,eee),e(eee,Ujr),e(Jc,Jjr),e(Jc,oee),e(oee,Yjr),e(Jc,Kjr),e(pr,Zjr),e(pr,m$),e(m$,eDr),e(m$,TEe),e(TEe,oDr),e(m$,rDr),e(pr,tDr),e(pr,Wt),M(g$,Wt,null),e(Wt,aDr),e(Wt,MEe),e(MEe,nDr),e(Wt,sDr),e(Wt,Yc),e(Yc,lDr),e(Yc,EEe),e(EEe,iDr),e(Yc,dDr),e(Yc,ree),e(ree,cDr),e(Yc,fDr),e(Wt,mDr),M(rC,Wt,null),e(pr,gDr),e(pr,Vr),M(h$,Vr,null),e(Vr,hDr),e(Vr,CEe),e(CEe,pDr),e(Vr,_Dr),e(Vr,Tn),e(Tn,uDr),e(Tn,wEe),e(wEe,bDr),e(Tn,vDr),e(Tn,AEe),e(AEe,FDr),e(Tn,TDr),e(Tn,LEe),e(LEe,MDr),e(Tn,EDr),e(Vr,CDr),e(Vr,oe),e(oe,tC),e(tC,yEe),e(yEe,wDr),e(tC,ADr),e(tC,tee),e(tee,LDr),e(tC,yDr),e(oe,xDr),e(oe,aC),e(aC,xEe),e(xEe,$Dr),e(aC,kDr),e(aC,aee),e(aee,SDr),e(aC,RDr),e(oe,PDr),e(oe,nC),e(nC,$Ee),e($Ee,BDr),e(nC,NDr),e(nC,nee),e(nee,IDr),e(nC,qDr),e(oe,jDr),e(oe,sC),e(sC,kEe),e(kEe,DDr),e(sC,GDr),e(sC,see),e(see,ODr),e(sC,VDr),e(oe,XDr),e(oe,lC),e(lC,SEe),e(SEe,zDr),e(lC,QDr),e(lC,lee),e(lee,WDr),e(lC,HDr),e(oe,UDr),e(oe,iC),e(iC,REe),e(REe,JDr),e(iC,YDr),e(iC,iee),e(iee,KDr),e(iC,ZDr),e(oe,eGr),e(oe,dC),e(dC,PEe),e(PEe,oGr),e(dC,rGr),e(dC,dee),e(dee,tGr),e(dC,aGr),e(oe,nGr),e(oe,cC),e(cC,BEe),e(BEe,sGr),e(cC,lGr),e(cC,cee),e(cee,iGr),e(cC,dGr),e(oe,cGr),e(oe,fC),e(fC,NEe),e(NEe,fGr),e(fC,mGr),e(fC,fee),e(fee,gGr),e(fC,hGr),e(oe,pGr),e(oe,mC),e(mC,IEe),e(IEe,_Gr),e(mC,uGr),e(mC,mee),e(mee,bGr),e(mC,vGr),e(oe,FGr),e(oe,gC),e(gC,qEe),e(qEe,TGr),e(gC,MGr),e(gC,gee),e(gee,EGr),e(gC,CGr),e(oe,wGr),e(oe,hC),e(hC,jEe),e(jEe,AGr),e(hC,LGr),e(hC,hee),e(hee,yGr),e(hC,xGr),e(oe,$Gr),e(oe,pC),e(pC,DEe),e(DEe,kGr),e(pC,SGr),e(pC,pee),e(pee,RGr),e(pC,PGr),e(oe,BGr),e(oe,_C),e(_C,GEe),e(GEe,NGr),e(_C,IGr),e(_C,_ee),e(_ee,qGr),e(_C,jGr),e(oe,DGr),e(oe,uC),e(uC,OEe),e(OEe,GGr),e(uC,OGr),e(uC,uee),e(uee,VGr),e(uC,XGr),e(oe,zGr),e(oe,bC),e(bC,VEe),e(VEe,QGr),e(bC,WGr),e(bC,bee),e(bee,HGr),e(bC,UGr),e(oe,JGr),e(oe,vC),e(vC,XEe),e(XEe,YGr),e(vC,KGr),e(vC,vee),e(vee,ZGr),e(vC,eOr),e(oe,oOr),e(oe,FC),e(FC,zEe),e(zEe,rOr),e(FC,tOr),e(FC,Fee),e(Fee,aOr),e(FC,nOr),e(oe,sOr),e(oe,TC),e(TC,QEe),e(QEe,lOr),e(TC,iOr),e(TC,Tee),e(Tee,dOr),e(TC,cOr),e(oe,fOr),e(oe,MC),e(MC,WEe),e(WEe,mOr),e(MC,gOr),e(MC,Mee),e(Mee,hOr),e(MC,pOr),e(oe,_Or),e(oe,EC),e(EC,HEe),e(HEe,uOr),e(EC,bOr),e(EC,Eee),e(Eee,vOr),e(EC,FOr),e(oe,TOr),e(oe,CC),e(CC,UEe),e(UEe,MOr),e(CC,EOr),e(CC,Cee),e(Cee,COr),e(CC,wOr),e(oe,AOr),e(oe,wC),e(wC,JEe),e(JEe,LOr),e(wC,yOr),e(wC,wee),e(wee,xOr),e(wC,$Or),e(oe,kOr),e(oe,AC),e(AC,YEe),e(YEe,SOr),e(AC,ROr),e(AC,Aee),e(Aee,POr),e(AC,BOr),e(oe,NOr),e(oe,LC),e(LC,KEe),e(KEe,IOr),e(LC,qOr),e(LC,Lee),e(Lee,jOr),e(LC,DOr),e(oe,GOr),e(oe,yC),e(yC,ZEe),e(ZEe,OOr),e(yC,VOr),e(yC,yee),e(yee,XOr),e(yC,zOr),e(oe,QOr),e(oe,xC),e(xC,eCe),e(eCe,WOr),e(xC,HOr),e(xC,xee),e(xee,UOr),e(xC,JOr),e(Vr,YOr),M($C,Vr,null),b(f,Wze,u),b(f,Kc,u),e(Kc,kC),e(kC,oCe),M(p$,oCe,null),e(Kc,KOr),e(Kc,rCe),e(rCe,ZOr),b(f,Hze,u),b(f,_r,u),M(_$,_r,null),e(_r,eVr),e(_r,Zc),e(Zc,oVr),e(Zc,$ee),e($ee,rVr),e(Zc,tVr),e(Zc,kee),e(kee,aVr),e(Zc,nVr),e(_r,sVr),e(_r,u$),e(u$,lVr),e(u$,tCe),e(tCe,iVr),e(u$,dVr),e(_r,cVr),e(_r,Ht),M(b$,Ht,null),e(Ht,fVr),e(Ht,aCe),e(aCe,mVr),e(Ht,gVr),e(Ht,ef),e(ef,hVr),e(ef,nCe),e(nCe,pVr),e(ef,_Vr),e(ef,See),e(See,uVr),e(ef,bVr),e(Ht,vVr),M(SC,Ht,null),e(_r,FVr),e(_r,Xr),M(v$,Xr,null),e(Xr,TVr),e(Xr,sCe),e(sCe,MVr),e(Xr,EVr),e(Xr,Mn),e(Mn,CVr),e(Mn,lCe),e(lCe,wVr),e(Mn,AVr),e(Mn,iCe),e(iCe,LVr),e(Mn,yVr),e(Mn,dCe),e(dCe,xVr),e(Mn,$Vr),e(Xr,kVr),e(Xr,xe),e(xe,RC),e(RC,cCe),e(cCe,SVr),e(RC,RVr),e(RC,Ree),e(Ree,PVr),e(RC,BVr),e(xe,NVr),e(xe,PC),e(PC,fCe),e(fCe,IVr),e(PC,qVr),e(PC,Pee),e(Pee,jVr),e(PC,DVr),e(xe,GVr),e(xe,BC),e(BC,mCe),e(mCe,OVr),e(BC,VVr),e(BC,Bee),e(Bee,XVr),e(BC,zVr),e(xe,QVr),e(xe,NC),e(NC,gCe),e(gCe,WVr),e(NC,HVr),e(NC,Nee),e(Nee,UVr),e(NC,JVr),e(xe,YVr),e(xe,IC),e(IC,hCe),e(hCe,KVr),e(IC,ZVr),e(IC,Iee),e(Iee,eXr),e(IC,oXr),e(xe,rXr),e(xe,qC),e(qC,pCe),e(pCe,tXr),e(qC,aXr),e(qC,qee),e(qee,nXr),e(qC,sXr),e(xe,lXr),e(xe,jC),e(jC,_Ce),e(_Ce,iXr),e(jC,dXr),e(jC,jee),e(jee,cXr),e(jC,fXr),e(xe,mXr),e(xe,DC),e(DC,uCe),e(uCe,gXr),e(DC,hXr),e(DC,Dee),e(Dee,pXr),e(DC,_Xr),e(xe,uXr),e(xe,GC),e(GC,bCe),e(bCe,bXr),e(GC,vXr),e(GC,Gee),e(Gee,FXr),e(GC,TXr),e(xe,MXr),e(xe,OC),e(OC,vCe),e(vCe,EXr),e(OC,CXr),e(OC,Oee),e(Oee,wXr),e(OC,AXr),e(Xr,LXr),M(VC,Xr,null),b(f,Uze,u),b(f,of,u),e(of,XC),e(XC,FCe),M(F$,FCe,null),e(of,yXr),e(of,TCe),e(TCe,xXr),b(f,Jze,u),b(f,ur,u),M(T$,ur,null),e(ur,$Xr),e(ur,rf),e(rf,kXr),e(rf,Vee),e(Vee,SXr),e(rf,RXr),e(rf,Xee),e(Xee,PXr),e(rf,BXr),e(ur,NXr),e(ur,M$),e(M$,IXr),e(M$,MCe),e(MCe,qXr),e(M$,jXr),e(ur,DXr),e(ur,Ut),M(E$,Ut,null),e(Ut,GXr),e(Ut,ECe),e(ECe,OXr),e(Ut,VXr),e(Ut,tf),e(tf,XXr),e(tf,CCe),e(CCe,zXr),e(tf,QXr),e(tf,zee),e(zee,WXr),e(tf,HXr),e(Ut,UXr),M(zC,Ut,null),e(ur,JXr),e(ur,zr),M(C$,zr,null),e(zr,YXr),e(zr,wCe),e(wCe,KXr),e(zr,ZXr),e(zr,En),e(En,ezr),e(En,ACe),e(ACe,ozr),e(En,rzr),e(En,LCe),e(LCe,tzr),e(En,azr),e(En,yCe),e(yCe,nzr),e(En,szr),e(zr,lzr),e(zr,Ee),e(Ee,QC),e(QC,xCe),e(xCe,izr),e(QC,dzr),e(QC,Qee),e(Qee,czr),e(QC,fzr),e(Ee,mzr),e(Ee,WC),e(WC,$Ce),e($Ce,gzr),e(WC,hzr),e(WC,Wee),e(Wee,pzr),e(WC,_zr),e(Ee,uzr),e(Ee,HC),e(HC,kCe),e(kCe,bzr),e(HC,vzr),e(HC,Hee),e(Hee,Fzr),e(HC,Tzr),e(Ee,Mzr),e(Ee,UC),e(UC,SCe),e(SCe,Ezr),e(UC,Czr),e(UC,Uee),e(Uee,wzr),e(UC,Azr),e(Ee,Lzr),e(Ee,JC),e(JC,RCe),e(RCe,yzr),e(JC,xzr),e(JC,Jee),e(Jee,$zr),e(JC,kzr),e(Ee,Szr),e(Ee,YC),e(YC,PCe),e(PCe,Rzr),e(YC,Pzr),e(YC,Yee),e(Yee,Bzr),e(YC,Nzr),e(Ee,Izr),e(Ee,KC),e(KC,BCe),e(BCe,qzr),e(KC,jzr),e(KC,Kee),e(Kee,Dzr),e(KC,Gzr),e(Ee,Ozr),e(Ee,ZC),e(ZC,NCe),e(NCe,Vzr),e(ZC,Xzr),e(ZC,Zee),e(Zee,zzr),e(ZC,Qzr),e(Ee,Wzr),e(Ee,e3),e(e3,ICe),e(ICe,Hzr),e(e3,Uzr),e(e3,eoe),e(eoe,Jzr),e(e3,Yzr),e(Ee,Kzr),e(Ee,o3),e(o3,qCe),e(qCe,Zzr),e(o3,eQr),e(o3,ooe),e(ooe,oQr),e(o3,rQr),e(Ee,tQr),e(Ee,r3),e(r3,jCe),e(jCe,aQr),e(r3,nQr),e(r3,roe),e(roe,sQr),e(r3,lQr),e(Ee,iQr),e(Ee,t3),e(t3,DCe),e(DCe,dQr),e(t3,cQr),e(t3,toe),e(toe,fQr),e(t3,mQr),e(Ee,gQr),e(Ee,a3),e(a3,GCe),e(GCe,hQr),e(a3,pQr),e(a3,aoe),e(aoe,_Qr),e(a3,uQr),e(zr,bQr),M(n3,zr,null),b(f,Yze,u),b(f,af,u),e(af,s3),e(s3,OCe),M(w$,OCe,null),e(af,vQr),e(af,VCe),e(VCe,FQr),b(f,Kze,u),b(f,br,u),M(A$,br,null),e(br,TQr),e(br,nf),e(nf,MQr),e(nf,noe),e(noe,EQr),e(nf,CQr),e(nf,soe),e(soe,wQr),e(nf,AQr),e(br,LQr),e(br,L$),e(L$,yQr),e(L$,XCe),e(XCe,xQr),e(L$,$Qr),e(br,kQr),e(br,Jt),M(y$,Jt,null),e(Jt,SQr),e(Jt,zCe),e(zCe,RQr),e(Jt,PQr),e(Jt,sf),e(sf,BQr),e(sf,QCe),e(QCe,NQr),e(sf,IQr),e(sf,loe),e(loe,qQr),e(sf,jQr),e(Jt,DQr),M(l3,Jt,null),e(br,GQr),e(br,Qr),M(x$,Qr,null),e(Qr,OQr),e(Qr,WCe),e(WCe,VQr),e(Qr,XQr),e(Qr,Cn),e(Cn,zQr),e(Cn,HCe),e(HCe,QQr),e(Cn,WQr),e(Cn,UCe),e(UCe,HQr),e(Cn,UQr),e(Cn,JCe),e(JCe,JQr),e(Cn,YQr),e(Qr,KQr),e(Qr,$e),e($e,i3),e(i3,YCe),e(YCe,ZQr),e(i3,eWr),e(i3,ioe),e(ioe,oWr),e(i3,rWr),e($e,tWr),e($e,d3),e(d3,KCe),e(KCe,aWr),e(d3,nWr),e(d3,doe),e(doe,sWr),e(d3,lWr),e($e,iWr),e($e,c3),e(c3,ZCe),e(ZCe,dWr),e(c3,cWr),e(c3,coe),e(coe,fWr),e(c3,mWr),e($e,gWr),e($e,f3),e(f3,e3e),e(e3e,hWr),e(f3,pWr),e(f3,foe),e(foe,_Wr),e(f3,uWr),e($e,bWr),e($e,m3),e(m3,o3e),e(o3e,vWr),e(m3,FWr),e(m3,moe),e(moe,TWr),e(m3,MWr),e($e,EWr),e($e,g3),e(g3,r3e),e(r3e,CWr),e(g3,wWr),e(g3,goe),e(goe,AWr),e(g3,LWr),e($e,yWr),e($e,h3),e(h3,t3e),e(t3e,xWr),e(h3,$Wr),e(h3,hoe),e(hoe,kWr),e(h3,SWr),e($e,RWr),e($e,p3),e(p3,a3e),e(a3e,PWr),e(p3,BWr),e(p3,poe),e(poe,NWr),e(p3,IWr),e($e,qWr),e($e,_3),e(_3,n3e),e(n3e,jWr),e(_3,DWr),e(_3,_oe),e(_oe,GWr),e(_3,OWr),e($e,VWr),e($e,u3),e(u3,s3e),e(s3e,XWr),e(u3,zWr),e(u3,uoe),e(uoe,QWr),e(u3,WWr),e(Qr,HWr),M(b3,Qr,null),b(f,Zze,u),b(f,lf,u),e(lf,v3),e(v3,l3e),M($$,l3e,null),e(lf,UWr),e(lf,i3e),e(i3e,JWr),b(f,eQe,u),b(f,vr,u),M(k$,vr,null),e(vr,YWr),e(vr,df),e(df,KWr),e(df,boe),e(boe,ZWr),e(df,eHr),e(df,voe),e(voe,oHr),e(df,rHr),e(vr,tHr),e(vr,S$),e(S$,aHr),e(S$,d3e),e(d3e,nHr),e(S$,sHr),e(vr,lHr),e(vr,Yt),M(R$,Yt,null),e(Yt,iHr),e(Yt,c3e),e(c3e,dHr),e(Yt,cHr),e(Yt,cf),e(cf,fHr),e(cf,f3e),e(f3e,mHr),e(cf,gHr),e(cf,Foe),e(Foe,hHr),e(cf,pHr),e(Yt,_Hr),M(F3,Yt,null),e(vr,uHr),e(vr,Wr),M(P$,Wr,null),e(Wr,bHr),e(Wr,m3e),e(m3e,vHr),e(Wr,FHr),e(Wr,wn),e(wn,THr),e(wn,g3e),e(g3e,MHr),e(wn,EHr),e(wn,h3e),e(h3e,CHr),e(wn,wHr),e(wn,p3e),e(p3e,AHr),e(wn,LHr),e(Wr,yHr),e(Wr,ke),e(ke,T3),e(T3,_3e),e(_3e,xHr),e(T3,$Hr),e(T3,Toe),e(Toe,kHr),e(T3,SHr),e(ke,RHr),e(ke,M3),e(M3,u3e),e(u3e,PHr),e(M3,BHr),e(M3,Moe),e(Moe,NHr),e(M3,IHr),e(ke,qHr),e(ke,E3),e(E3,b3e),e(b3e,jHr),e(E3,DHr),e(E3,Eoe),e(Eoe,GHr),e(E3,OHr),e(ke,VHr),e(ke,C3),e(C3,v3e),e(v3e,XHr),e(C3,zHr),e(C3,Coe),e(Coe,QHr),e(C3,WHr),e(ke,HHr),e(ke,w3),e(w3,F3e),e(F3e,UHr),e(w3,JHr),e(w3,woe),e(woe,YHr),e(w3,KHr),e(ke,ZHr),e(ke,A3),e(A3,T3e),e(T3e,eUr),e(A3,oUr),e(A3,Aoe),e(Aoe,rUr),e(A3,tUr),e(ke,aUr),e(ke,L3),e(L3,M3e),e(M3e,nUr),e(L3,sUr),e(L3,Loe),e(Loe,lUr),e(L3,iUr),e(ke,dUr),e(ke,y3),e(y3,E3e),e(E3e,cUr),e(y3,fUr),e(y3,yoe),e(yoe,mUr),e(y3,gUr),e(ke,hUr),e(ke,x3),e(x3,C3e),e(C3e,pUr),e(x3,_Ur),e(x3,xoe),e(xoe,uUr),e(x3,bUr),e(ke,vUr),e(ke,$3),e($3,w3e),e(w3e,FUr),e($3,TUr),e($3,$oe),e($oe,MUr),e($3,EUr),e(Wr,CUr),M(k3,Wr,null),b(f,oQe,u),b(f,ff,u),e(ff,S3),e(S3,A3e),M(B$,A3e,null),e(ff,wUr),e(ff,L3e),e(L3e,AUr),b(f,rQe,u),b(f,Fr,u),M(N$,Fr,null),e(Fr,LUr),e(Fr,mf),e(mf,yUr),e(mf,koe),e(koe,xUr),e(mf,$Ur),e(mf,Soe),e(Soe,kUr),e(mf,SUr),e(Fr,RUr),e(Fr,I$),e(I$,PUr),e(I$,y3e),e(y3e,BUr),e(I$,NUr),e(Fr,IUr),e(Fr,Kt),M(q$,Kt,null),e(Kt,qUr),e(Kt,x3e),e(x3e,jUr),e(Kt,DUr),e(Kt,gf),e(gf,GUr),e(gf,$3e),e($3e,OUr),e(gf,VUr),e(gf,Roe),e(Roe,XUr),e(gf,zUr),e(Kt,QUr),M(R3,Kt,null),e(Fr,WUr),e(Fr,Hr),M(j$,Hr,null),e(Hr,HUr),e(Hr,k3e),e(k3e,UUr),e(Hr,JUr),e(Hr,An),e(An,YUr),e(An,S3e),e(S3e,KUr),e(An,ZUr),e(An,R3e),e(R3e,eJr),e(An,oJr),e(An,P3e),e(P3e,rJr),e(An,tJr),e(Hr,aJr),e(Hr,Se),e(Se,P3),e(P3,B3e),e(B3e,nJr),e(P3,sJr),e(P3,Poe),e(Poe,lJr),e(P3,iJr),e(Se,dJr),e(Se,B3),e(B3,N3e),e(N3e,cJr),e(B3,fJr),e(B3,Boe),e(Boe,mJr),e(B3,gJr),e(Se,hJr),e(Se,N3),e(N3,I3e),e(I3e,pJr),e(N3,_Jr),e(N3,Noe),e(Noe,uJr),e(N3,bJr),e(Se,vJr),e(Se,I3),e(I3,q3e),e(q3e,FJr),e(I3,TJr),e(I3,Ioe),e(Ioe,MJr),e(I3,EJr),e(Se,CJr),e(Se,q3),e(q3,j3e),e(j3e,wJr),e(q3,AJr),e(q3,qoe),e(qoe,LJr),e(q3,yJr),e(Se,xJr),e(Se,j3),e(j3,D3e),e(D3e,$Jr),e(j3,kJr),e(j3,joe),e(joe,SJr),e(j3,RJr),e(Se,PJr),e(Se,D3),e(D3,G3e),e(G3e,BJr),e(D3,NJr),e(D3,Doe),e(Doe,IJr),e(D3,qJr),e(Se,jJr),e(Se,G3),e(G3,O3e),e(O3e,DJr),e(G3,GJr),e(G3,Goe),e(Goe,OJr),e(G3,VJr),e(Se,XJr),e(Se,O3),e(O3,V3e),e(V3e,zJr),e(O3,QJr),e(O3,Ooe),e(Ooe,WJr),e(O3,HJr),e(Se,UJr),e(Se,V3),e(V3,X3e),e(X3e,JJr),e(V3,YJr),e(V3,Voe),e(Voe,KJr),e(V3,ZJr),e(Hr,eYr),M(X3,Hr,null),b(f,tQe,u),b(f,hf,u),e(hf,z3),e(z3,z3e),M(D$,z3e,null),e(hf,oYr),e(hf,Q3e),e(Q3e,rYr),b(f,aQe,u),b(f,Tr,u),M(G$,Tr,null),e(Tr,tYr),e(Tr,pf),e(pf,aYr),e(pf,Xoe),e(Xoe,nYr),e(pf,sYr),e(pf,zoe),e(zoe,lYr),e(pf,iYr),e(Tr,dYr),e(Tr,O$),e(O$,cYr),e(O$,W3e),e(W3e,fYr),e(O$,mYr),e(Tr,gYr),e(Tr,Zt),M(V$,Zt,null),e(Zt,hYr),e(Zt,H3e),e(H3e,pYr),e(Zt,_Yr),e(Zt,_f),e(_f,uYr),e(_f,U3e),e(U3e,bYr),e(_f,vYr),e(_f,Qoe),e(Qoe,FYr),e(_f,TYr),e(Zt,MYr),M(Q3,Zt,null),e(Tr,EYr),e(Tr,Ur),M(X$,Ur,null),e(Ur,CYr),e(Ur,J3e),e(J3e,wYr),e(Ur,AYr),e(Ur,Ln),e(Ln,LYr),e(Ln,Y3e),e(Y3e,yYr),e(Ln,xYr),e(Ln,K3e),e(K3e,$Yr),e(Ln,kYr),e(Ln,Z3e),e(Z3e,SYr),e(Ln,RYr),e(Ur,PYr),e(Ur,Re),e(Re,W3),e(W3,e5e),e(e5e,BYr),e(W3,NYr),e(W3,Woe),e(Woe,IYr),e(W3,qYr),e(Re,jYr),e(Re,H3),e(H3,o5e),e(o5e,DYr),e(H3,GYr),e(H3,Hoe),e(Hoe,OYr),e(H3,VYr),e(Re,XYr),e(Re,U3),e(U3,r5e),e(r5e,zYr),e(U3,QYr),e(U3,Uoe),e(Uoe,WYr),e(U3,HYr),e(Re,UYr),e(Re,J3),e(J3,t5e),e(t5e,JYr),e(J3,YYr),e(J3,Joe),e(Joe,KYr),e(J3,ZYr),e(Re,eKr),e(Re,Y3),e(Y3,a5e),e(a5e,oKr),e(Y3,rKr),e(Y3,Yoe),e(Yoe,tKr),e(Y3,aKr),e(Re,nKr),e(Re,K3),e(K3,n5e),e(n5e,sKr),e(K3,lKr),e(K3,Koe),e(Koe,iKr),e(K3,dKr),e(Re,cKr),e(Re,Z3),e(Z3,s5e),e(s5e,fKr),e(Z3,mKr),e(Z3,Zoe),e(Zoe,gKr),e(Z3,hKr),e(Re,pKr),e(Re,e5),e(e5,l5e),e(l5e,_Kr),e(e5,uKr),e(e5,ere),e(ere,bKr),e(e5,vKr),e(Re,FKr),e(Re,o5),e(o5,i5e),e(i5e,TKr),e(o5,MKr),e(o5,ore),e(ore,EKr),e(o5,CKr),e(Re,wKr),e(Re,r5),e(r5,d5e),e(d5e,AKr),e(r5,LKr),e(r5,rre),e(rre,yKr),e(r5,xKr),e(Ur,$Kr),M(t5,Ur,null),b(f,nQe,u),b(f,uf,u),e(uf,a5),e(a5,c5e),M(z$,c5e,null),e(uf,kKr),e(uf,f5e),e(f5e,SKr),b(f,sQe,u),b(f,Mr,u),M(Q$,Mr,null),e(Mr,RKr),e(Mr,bf),e(bf,PKr),e(bf,tre),e(tre,BKr),e(bf,NKr),e(bf,are),e(are,IKr),e(bf,qKr),e(Mr,jKr),e(Mr,W$),e(W$,DKr),e(W$,m5e),e(m5e,GKr),e(W$,OKr),e(Mr,VKr),e(Mr,ea),M(H$,ea,null),e(ea,XKr),e(ea,g5e),e(g5e,zKr),e(ea,QKr),e(ea,vf),e(vf,WKr),e(vf,h5e),e(h5e,HKr),e(vf,UKr),e(vf,nre),e(nre,JKr),e(vf,YKr),e(ea,KKr),M(n5,ea,null),e(Mr,ZKr),e(Mr,Jr),M(U$,Jr,null),e(Jr,eZr),e(Jr,p5e),e(p5e,oZr),e(Jr,rZr),e(Jr,yn),e(yn,tZr),e(yn,_5e),e(_5e,aZr),e(yn,nZr),e(yn,u5e),e(u5e,sZr),e(yn,lZr),e(yn,b5e),e(b5e,iZr),e(yn,dZr),e(Jr,cZr),e(Jr,Ve),e(Ve,s5),e(s5,v5e),e(v5e,fZr),e(s5,mZr),e(s5,sre),e(sre,gZr),e(s5,hZr),e(Ve,pZr),e(Ve,l5),e(l5,F5e),e(F5e,_Zr),e(l5,uZr),e(l5,lre),e(lre,bZr),e(l5,vZr),e(Ve,FZr),e(Ve,i5),e(i5,T5e),e(T5e,TZr),e(i5,MZr),e(i5,ire),e(ire,EZr),e(i5,CZr),e(Ve,wZr),e(Ve,d5),e(d5,M5e),e(M5e,AZr),e(d5,LZr),e(d5,dre),e(dre,yZr),e(d5,xZr),e(Ve,$Zr),e(Ve,c5),e(c5,E5e),e(E5e,kZr),e(c5,SZr),e(c5,cre),e(cre,RZr),e(c5,PZr),e(Ve,BZr),e(Ve,f5),e(f5,C5e),e(C5e,NZr),e(f5,IZr),e(f5,fre),e(fre,qZr),e(f5,jZr),e(Ve,DZr),e(Ve,m5),e(m5,w5e),e(w5e,GZr),e(m5,OZr),e(m5,mre),e(mre,VZr),e(m5,XZr),e(Ve,zZr),e(Ve,g5),e(g5,A5e),e(A5e,QZr),e(g5,WZr),e(g5,gre),e(gre,HZr),e(g5,UZr),e(Jr,JZr),M(h5,Jr,null),b(f,lQe,u),b(f,Ff,u),e(Ff,p5),e(p5,L5e),M(J$,L5e,null),e(Ff,YZr),e(Ff,y5e),e(y5e,KZr),b(f,iQe,u),b(f,Er,u),M(Y$,Er,null),e(Er,ZZr),e(Er,Tf),e(Tf,eet),e(Tf,hre),e(hre,oet),e(Tf,ret),e(Tf,pre),e(pre,tet),e(Tf,aet),e(Er,net),e(Er,K$),e(K$,set),e(K$,x5e),e(x5e,iet),e(K$,det),e(Er,cet),e(Er,oa),M(Z$,oa,null),e(oa,fet),e(oa,$5e),e($5e,met),e(oa,get),e(oa,Mf),e(Mf,het),e(Mf,k5e),e(k5e,pet),e(Mf,_et),e(Mf,_re),e(_re,uet),e(Mf,bet),e(oa,vet),M(_5,oa,null),e(Er,Fet),e(Er,Yr),M(ek,Yr,null),e(Yr,Tet),e(Yr,S5e),e(S5e,Met),e(Yr,Eet),e(Yr,xn),e(xn,Cet),e(xn,R5e),e(R5e,wet),e(xn,Aet),e(xn,P5e),e(P5e,Let),e(xn,yet),e(xn,B5e),e(B5e,xet),e(xn,$et),e(Yr,ket),e(Yr,Xe),e(Xe,u5),e(u5,N5e),e(N5e,Set),e(u5,Ret),e(u5,ure),e(ure,Pet),e(u5,Bet),e(Xe,Net),e(Xe,b5),e(b5,I5e),e(I5e,Iet),e(b5,qet),e(b5,bre),e(bre,jet),e(b5,Det),e(Xe,Get),e(Xe,v5),e(v5,q5e),e(q5e,Oet),e(v5,Vet),e(v5,vre),e(vre,Xet),e(v5,zet),e(Xe,Qet),e(Xe,F5),e(F5,j5e),e(j5e,Wet),e(F5,Het),e(F5,Fre),e(Fre,Uet),e(F5,Jet),e(Xe,Yet),e(Xe,T5),e(T5,D5e),e(D5e,Ket),e(T5,Zet),e(T5,Tre),e(Tre,eot),e(T5,oot),e(Xe,rot),e(Xe,M5),e(M5,G5e),e(G5e,tot),e(M5,aot),e(M5,Mre),e(Mre,not),e(M5,sot),e(Xe,lot),e(Xe,E5),e(E5,O5e),e(O5e,iot),e(E5,dot),e(E5,Ere),e(Ere,cot),e(E5,fot),e(Xe,mot),e(Xe,C5),e(C5,V5e),e(V5e,got),e(C5,hot),e(C5,Cre),e(Cre,pot),e(C5,_ot),e(Yr,uot),M(w5,Yr,null),b(f,dQe,u),b(f,Ef,u),e(Ef,A5),e(A5,X5e),M(ok,X5e,null),e(Ef,bot),e(Ef,z5e),e(z5e,vot),b(f,cQe,u),b(f,Cr,u),M(rk,Cr,null),e(Cr,Fot),e(Cr,Cf),e(Cf,Tot),e(Cf,wre),e(wre,Mot),e(Cf,Eot),e(Cf,Are),e(Are,Cot),e(Cf,wot),e(Cr,Aot),e(Cr,tk),e(tk,Lot),e(tk,Q5e),e(Q5e,yot),e(tk,xot),e(Cr,$ot),e(Cr,ra),M(ak,ra,null),e(ra,kot),e(ra,W5e),e(W5e,Sot),e(ra,Rot),e(ra,wf),e(wf,Pot),e(wf,H5e),e(H5e,Bot),e(wf,Not),e(wf,Lre),e(Lre,Iot),e(wf,qot),e(ra,jot),M(L5,ra,null),e(Cr,Dot),e(Cr,Kr),M(nk,Kr,null),e(Kr,Got),e(Kr,U5e),e(U5e,Oot),e(Kr,Vot),e(Kr,$n),e($n,Xot),e($n,J5e),e(J5e,zot),e($n,Qot),e($n,Y5e),e(Y5e,Wot),e($n,Hot),e($n,K5e),e(K5e,Uot),e($n,Jot),e(Kr,Yot),e(Kr,Z5e),e(Z5e,y5),e(y5,ewe),e(ewe,Kot),e(y5,Zot),e(y5,yre),e(yre,ert),e(y5,ort),e(Kr,rrt),M(x5,Kr,null),b(f,fQe,u),b(f,Af,u),e(Af,$5),e($5,owe),M(sk,owe,null),e(Af,trt),e(Af,rwe),e(rwe,art),b(f,mQe,u),b(f,wr,u),M(lk,wr,null),e(wr,nrt),e(wr,Lf),e(Lf,srt),e(Lf,xre),e(xre,lrt),e(Lf,irt),e(Lf,$re),e($re,drt),e(Lf,crt),e(wr,frt),e(wr,ik),e(ik,mrt),e(ik,twe),e(twe,grt),e(ik,hrt),e(wr,prt),e(wr,ta),M(dk,ta,null),e(ta,_rt),e(ta,awe),e(awe,urt),e(ta,brt),e(ta,yf),e(yf,vrt),e(yf,nwe),e(nwe,Frt),e(yf,Trt),e(yf,kre),e(kre,Mrt),e(yf,Ert),e(ta,Crt),M(k5,ta,null),e(wr,wrt),e(wr,Zr),M(ck,Zr,null),e(Zr,Art),e(Zr,swe),e(swe,Lrt),e(Zr,yrt),e(Zr,kn),e(kn,xrt),e(kn,lwe),e(lwe,$rt),e(kn,krt),e(kn,iwe),e(iwe,Srt),e(kn,Rrt),e(kn,dwe),e(dwe,Prt),e(kn,Brt),e(Zr,Nrt),e(Zr,fk),e(fk,S5),e(S5,cwe),e(cwe,Irt),e(S5,qrt),e(S5,Sre),e(Sre,jrt),e(S5,Drt),e(fk,Grt),e(fk,R5),e(R5,fwe),e(fwe,Ort),e(R5,Vrt),e(R5,Rre),e(Rre,Xrt),e(R5,zrt),e(Zr,Qrt),M(P5,Zr,null),b(f,gQe,u),b(f,xf,u),e(xf,B5),e(B5,mwe),M(mk,mwe,null),e(xf,Wrt),e(xf,gwe),e(gwe,Hrt),b(f,hQe,u),b(f,Ar,u),M(gk,Ar,null),e(Ar,Urt),e(Ar,$f),e($f,Jrt),e($f,Pre),e(Pre,Yrt),e($f,Krt),e($f,Bre),e(Bre,Zrt),e($f,ett),e(Ar,ott),e(Ar,hk),e(hk,rtt),e(hk,hwe),e(hwe,ttt),e(hk,att),e(Ar,ntt),e(Ar,aa),M(pk,aa,null),e(aa,stt),e(aa,pwe),e(pwe,ltt),e(aa,itt),e(aa,kf),e(kf,dtt),e(kf,_we),e(_we,ctt),e(kf,ftt),e(kf,Nre),e(Nre,mtt),e(kf,gtt),e(aa,htt),M(N5,aa,null),e(Ar,ptt),e(Ar,et),M(_k,et,null),e(et,_tt),e(et,uwe),e(uwe,utt),e(et,btt),e(et,Sn),e(Sn,vtt),e(Sn,bwe),e(bwe,Ftt),e(Sn,Ttt),e(Sn,vwe),e(vwe,Mtt),e(Sn,Ett),e(Sn,Fwe),e(Fwe,Ctt),e(Sn,wtt),e(et,Att),e(et,Twe),e(Twe,I5),e(I5,Mwe),e(Mwe,Ltt),e(I5,ytt),e(I5,Ire),e(Ire,xtt),e(I5,$tt),e(et,ktt),M(q5,et,null),pQe=!0},p(f,[u]){const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),Df.$set(uk);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),Kg.$set(Ewe);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),Ph.$set(Cwe);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),up.$set(wwe);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),bp.$set(bk);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),jp.$set(Awe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Dp.$set(Rn);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),Vp.$set(Lwe);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),Hu.$set(ywe);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),Ju.$set(xwe);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),V1.$set(vk);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),z1.$set($we);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),R2.$set(Fk);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),B2.$set(kwe);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),Tb.$set(Tk);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),Eb.$set(Swe);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),Xb.$set(Rwe);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),Qb.$set(Pwe);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),Xv.$set(Sf);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),Qv.$set(Bwe);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),C0.$set(Nwe);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),A0.$set(Iwe);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),P0.$set(Mk);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),N0.$set(qwe);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),FF.$set(jwe);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),MF.$set(Dwe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),mT.$set(nt);const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),hT.$set(Ek);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),uT.$set(Gwe);const Ck={};u&2&&(Ck.$$scope={dirty:u,ctx:f}),vT.$set(Ck);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),PT.$set(Owe);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),NT.$set(st);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),jT.$set(Vwe);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),GT.$set(Rf);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),XT.$set(Xwe);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),QT.$set(zwe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),t7.$set(L);const j5={};u&2&&(j5.$$scope={dirty:u,ctx:f}),n7.$set(j5);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),m7.$set(Qwe);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),h7.$set(Wwe);const D5={};u&2&&(D5.$$scope={dirty:u,ctx:f}),A7.$set(D5);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),y7.$set(Hwe);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),S7.$set(Uwe);const G5={};u&2&&(G5.$$scope={dirty:u,ctx:f}),P7.$set(G5);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),G7.$set(Jwe);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),V7.$set(Ywe);const O5={};u&2&&(O5.$$scope={dirty:u,ctx:f}),H7.$set(O5);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),J7.$set(Kwe);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),e8.$set(Zwe);const V5={};u&2&&(V5.$$scope={dirty:u,ctx:f}),r8.$set(V5);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),n8.$set(eAe);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),l8.$set(oAe);const X5={};u&2&&(X5.$$scope={dirty:u,ctx:f}),h8.$set(X5);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),_8.$set(rAe);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),v8.$set(tAe);const z5={};u&2&&(z5.$$scope={dirty:u,ctx:f}),T8.$set(z5);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),u9.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),v9.$set(nAe);const Q5={};u&2&&(Q5.$$scope={dirty:u,ctx:f}),V9.$set(Q5);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),z9.$set(sAe);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),nM.$set(lAe);const W5={};u&2&&(W5.$$scope={dirty:u,ctx:f}),lM.$set(W5);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),hM.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),_M.$set(dAe);const H5={};u&2&&(H5.$$scope={dirty:u,ctx:f}),IM.$set(H5);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),jM.$set(cAe);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),JM.$set(fAe);const U5={};u&2&&(U5.$$scope={dirty:u,ctx:f}),KM.$set(U5);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),w4.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),L4.$set(gAe);const J5={};u&2&&(J5.$$scope={dirty:u,ctx:f}),z4.$set(J5);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),W4.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),J4.$set(pAe);const Y5={};u&2&&(Y5.$$scope={dirty:u,ctx:f}),K4.$set(Y5);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),eE.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),rE.$set(uAe);const K5={};u&2&&(K5.$$scope={dirty:u,ctx:f}),EE.$set(K5);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),wE.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),QE.$set(vAe);const Z5={};u&2&&(Z5.$$scope={dirty:u,ctx:f}),HE.$set(Z5);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),JE.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),KE.$set(TAe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),eC.$set(ew);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),rC.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),$C.$set(EAe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),SC.$set(ow);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),VC.$set(CAe);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),zC.$set(wAe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),n3.$set(rw);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),l3.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),b3.$set(LAe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),F3.$set(tw);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),k3.$set(yAe);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),R3.$set(xAe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),X3.$set(aw);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),Q3.$set($Ae);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),t5.$set(kAe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),n5.$set(nw);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),h5.$set(SAe);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),_5.$set(RAe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),w5.$set(sw);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),L5.$set(PAe);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),x5.$set(BAe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),k5.$set(lw);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),P5.$set(NAe);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),N5.$set(IAe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),q5.$set(iw)},i(f){pQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(l6.$$.fragment,f),E(i6.$$.fragment,f),E(Df.$$.fragment,f),E(d6.$$.fragment,f),E(c6.$$.fragment,f),E(g6.$$.fragment,f),E(Kg.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(_6.$$.fragment,f),E(v6.$$.fragment,f),E(Ph.$$.fragment,f),E(F6.$$.fragment,f),E(T6.$$.fragment,f),E(M6.$$.fragment,f),E(w6.$$.fragment,f),E(up.$$.fragment,f),E(bp.$$.fragment,f),E(A6.$$.fragment,f),E(L6.$$.fragment,f),E(y6.$$.fragment,f),E(k6.$$.fragment,f),E(jp.$$.fragment,f),E(Dp.$$.fragment,f),E(S6.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(N6.$$.fragment,f),E(Vp.$$.fragment,f),E(I6.$$.fragment,f),E(Hu.$$.fragment,f),E(q6.$$.fragment,f),E(j6.$$.fragment,f),E(G6.$$.fragment,f),E(Ju.$$.fragment,f),E(O6.$$.fragment,f),E(V1.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(Q6.$$.fragment,f),E(z1.$$.fragment,f),E(W6.$$.fragment,f),E(R2.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(Y6.$$.fragment,f),E(B2.$$.fragment,f),E(K6.$$.fragment,f),E(Tb.$$.fragment,f),E(Z6.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(Eb.$$.fragment,f),E(tL.$$.fragment,f),E(Xb.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(Qb.$$.fragment,f),E(iL.$$.fragment,f),E(Xv.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(Qv.$$.fragment,f),E(gL.$$.fragment,f),E(C0.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(A0.$$.fragment,f),E(bL.$$.fragment,f),E(P0.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(N0.$$.fragment,f),E(EL.$$.fragment,f),E(FF.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(LL.$$.fragment,f),E(MF.$$.fragment,f),E(yL.$$.fragment,f),E(mT.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(hT.$$.fragment,f),E(RL.$$.fragment,f),E(uT.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(vT.$$.fragment,f),E(qL.$$.fragment,f),E(PT.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(NT.$$.fragment,f),E(VL.$$.fragment,f),E(jT.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(GT.$$.fragment,f),E(HL.$$.fragment,f),E(XT.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(QT.$$.fragment,f),E(ZL.$$.fragment,f),E(t7.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(n7.$$.fragment,f),E(ay.$$.fragment,f),E(m7.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(h7.$$.fragment,f),E(dy.$$.fragment,f),E(A7.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(y7.$$.fragment,f),E(hy.$$.fragment,f),E(S7.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(P7.$$.fragment,f),E(Fy.$$.fragment,f),E(G7.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(V7.$$.fragment,f),E(wy.$$.fragment,f),E(H7.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(J7.$$.fragment,f),E($y.$$.fragment,f),E(e8.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(r8.$$.fragment,f),E(Ny.$$.fragment,f),E(n8.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(l8.$$.fragment,f),E(Gy.$$.fragment,f),E(h8.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(_8.$$.fragment,f),E(Qy.$$.fragment,f),E(v8.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(T8.$$.fragment,f),E(Yy.$$.fragment,f),E(u9.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(ox.$$.fragment,f),E(v9.$$.fragment,f),E(rx.$$.fragment,f),E(V9.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(z9.$$.fragment,f),E(lx.$$.fragment,f),E(nM.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(lM.$$.fragment,f),E(mx.$$.fragment,f),E(hM.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(_M.$$.fragment,f),E(ux.$$.fragment,f),E(IM.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(jM.$$.fragment,f),E(Mx.$$.fragment,f),E(JM.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(KM.$$.fragment,f),E(Lx.$$.fragment,f),E(w4.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(L4.$$.fragment,f),E(Sx.$$.fragment,f),E(z4.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Nx.$$.fragment,f),E(W4.$$.fragment,f),E(Ix.$$.fragment,f),E(J4.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(K4.$$.fragment,f),E(Vx.$$.fragment,f),E(eE.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(rE.$$.fragment,f),E(Hx.$$.fragment,f),E(EE.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(wE.$$.fragment,f),E(Zx.$$.fragment,f),E(QE.$$.fragment,f),E(e$.$$.fragment,f),E(o$.$$.fragment,f),E(t$.$$.fragment,f),E(HE.$$.fragment,f),E(a$.$$.fragment,f),E(JE.$$.fragment,f),E(n$.$$.fragment,f),E(s$.$$.fragment,f),E(i$.$$.fragment,f),E(KE.$$.fragment,f),E(d$.$$.fragment,f),E(eC.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(rC.$$.fragment,f),E(h$.$$.fragment,f),E($C.$$.fragment,f),E(p$.$$.fragment,f),E(_$.$$.fragment,f),E(b$.$$.fragment,f),E(SC.$$.fragment,f),E(v$.$$.fragment,f),E(VC.$$.fragment,f),E(F$.$$.fragment,f),E(T$.$$.fragment,f),E(E$.$$.fragment,f),E(zC.$$.fragment,f),E(C$.$$.fragment,f),E(n3.$$.fragment,f),E(w$.$$.fragment,f),E(A$.$$.fragment,f),E(y$.$$.fragment,f),E(l3.$$.fragment,f),E(x$.$$.fragment,f),E(b3.$$.fragment,f),E($$.$$.fragment,f),E(k$.$$.fragment,f),E(R$.$$.fragment,f),E(F3.$$.fragment,f),E(P$.$$.fragment,f),E(k3.$$.fragment,f),E(B$.$$.fragment,f),E(N$.$$.fragment,f),E(q$.$$.fragment,f),E(R3.$$.fragment,f),E(j$.$$.fragment,f),E(X3.$$.fragment,f),E(D$.$$.fragment,f),E(G$.$$.fragment,f),E(V$.$$.fragment,f),E(Q3.$$.fragment,f),E(X$.$$.fragment,f),E(t5.$$.fragment,f),E(z$.$$.fragment,f),E(Q$.$$.fragment,f),E(H$.$$.fragment,f),E(n5.$$.fragment,f),E(U$.$$.fragment,f),E(h5.$$.fragment,f),E(J$.$$.fragment,f),E(Y$.$$.fragment,f),E(Z$.$$.fragment,f),E(_5.$$.fragment,f),E(ek.$$.fragment,f),E(w5.$$.fragment,f),E(ok.$$.fragment,f),E(rk.$$.fragment,f),E(ak.$$.fragment,f),E(L5.$$.fragment,f),E(nk.$$.fragment,f),E(x5.$$.fragment,f),E(sk.$$.fragment,f),E(lk.$$.fragment,f),E(dk.$$.fragment,f),E(k5.$$.fragment,f),E(ck.$$.fragment,f),E(P5.$$.fragment,f),E(mk.$$.fragment,f),E(gk.$$.fragment,f),E(pk.$$.fragment,f),E(N5.$$.fragment,f),E(_k.$$.fragment,f),E(q5.$$.fragment,f),pQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(l6.$$.fragment,f),C(i6.$$.fragment,f),C(Df.$$.fragment,f),C(d6.$$.fragment,f),C(c6.$$.fragment,f),C(g6.$$.fragment,f),C(Kg.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(_6.$$.fragment,f),C(v6.$$.fragment,f),C(Ph.$$.fragment,f),C(F6.$$.fragment,f),C(T6.$$.fragment,f),C(M6.$$.fragment,f),C(w6.$$.fragment,f),C(up.$$.fragment,f),C(bp.$$.fragment,f),C(A6.$$.fragment,f),C(L6.$$.fragment,f),C(y6.$$.fragment,f),C(k6.$$.fragment,f),C(jp.$$.fragment,f),C(Dp.$$.fragment,f),C(S6.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(N6.$$.fragment,f),C(Vp.$$.fragment,f),C(I6.$$.fragment,f),C(Hu.$$.fragment,f),C(q6.$$.fragment,f),C(j6.$$.fragment,f),C(G6.$$.fragment,f),C(Ju.$$.fragment,f),C(O6.$$.fragment,f),C(V1.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(Q6.$$.fragment,f),C(z1.$$.fragment,f),C(W6.$$.fragment,f),C(R2.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(Y6.$$.fragment,f),C(B2.$$.fragment,f),C(K6.$$.fragment,f),C(Tb.$$.fragment,f),C(Z6.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(Eb.$$.fragment,f),C(tL.$$.fragment,f),C(Xb.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(Qb.$$.fragment,f),C(iL.$$.fragment,f),C(Xv.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(Qv.$$.fragment,f),C(gL.$$.fragment,f),C(C0.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(A0.$$.fragment,f),C(bL.$$.fragment,f),C(P0.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(N0.$$.fragment,f),C(EL.$$.fragment,f),C(FF.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(LL.$$.fragment,f),C(MF.$$.fragment,f),C(yL.$$.fragment,f),C(mT.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(hT.$$.fragment,f),C(RL.$$.fragment,f),C(uT.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(vT.$$.fragment,f),C(qL.$$.fragment,f),C(PT.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(NT.$$.fragment,f),C(VL.$$.fragment,f),C(jT.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(GT.$$.fragment,f),C(HL.$$.fragment,f),C(XT.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(QT.$$.fragment,f),C(ZL.$$.fragment,f),C(t7.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(n7.$$.fragment,f),C(ay.$$.fragment,f),C(m7.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(h7.$$.fragment,f),C(dy.$$.fragment,f),C(A7.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(y7.$$.fragment,f),C(hy.$$.fragment,f),C(S7.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(P7.$$.fragment,f),C(Fy.$$.fragment,f),C(G7.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(V7.$$.fragment,f),C(wy.$$.fragment,f),C(H7.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(J7.$$.fragment,f),C($y.$$.fragment,f),C(e8.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(r8.$$.fragment,f),C(Ny.$$.fragment,f),C(n8.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(l8.$$.fragment,f),C(Gy.$$.fragment,f),C(h8.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(_8.$$.fragment,f),C(Qy.$$.fragment,f),C(v8.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(T8.$$.fragment,f),C(Yy.$$.fragment,f),C(u9.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(ox.$$.fragment,f),C(v9.$$.fragment,f),C(rx.$$.fragment,f),C(V9.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(z9.$$.fragment,f),C(lx.$$.fragment,f),C(nM.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(lM.$$.fragment,f),C(mx.$$.fragment,f),C(hM.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(_M.$$.fragment,f),C(ux.$$.fragment,f),C(IM.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(jM.$$.fragment,f),C(Mx.$$.fragment,f),C(JM.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(KM.$$.fragment,f),C(Lx.$$.fragment,f),C(w4.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(L4.$$.fragment,f),C(Sx.$$.fragment,f),C(z4.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Nx.$$.fragment,f),C(W4.$$.fragment,f),C(Ix.$$.fragment,f),C(J4.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(K4.$$.fragment,f),C(Vx.$$.fragment,f),C(eE.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(rE.$$.fragment,f),C(Hx.$$.fragment,f),C(EE.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(wE.$$.fragment,f),C(Zx.$$.fragment,f),C(QE.$$.fragment,f),C(e$.$$.fragment,f),C(o$.$$.fragment,f),C(t$.$$.fragment,f),C(HE.$$.fragment,f),C(a$.$$.fragment,f),C(JE.$$.fragment,f),C(n$.$$.fragment,f),C(s$.$$.fragment,f),C(i$.$$.fragment,f),C(KE.$$.fragment,f),C(d$.$$.fragment,f),C(eC.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(rC.$$.fragment,f),C(h$.$$.fragment,f),C($C.$$.fragment,f),C(p$.$$.fragment,f),C(_$.$$.fragment,f),C(b$.$$.fragment,f),C(SC.$$.fragment,f),C(v$.$$.fragment,f),C(VC.$$.fragment,f),C(F$.$$.fragment,f),C(T$.$$.fragment,f),C(E$.$$.fragment,f),C(zC.$$.fragment,f),C(C$.$$.fragment,f),C(n3.$$.fragment,f),C(w$.$$.fragment,f),C(A$.$$.fragment,f),C(y$.$$.fragment,f),C(l3.$$.fragment,f),C(x$.$$.fragment,f),C(b3.$$.fragment,f),C($$.$$.fragment,f),C(k$.$$.fragment,f),C(R$.$$.fragment,f),C(F3.$$.fragment,f),C(P$.$$.fragment,f),C(k3.$$.fragment,f),C(B$.$$.fragment,f),C(N$.$$.fragment,f),C(q$.$$.fragment,f),C(R3.$$.fragment,f),C(j$.$$.fragment,f),C(X3.$$.fragment,f),C(D$.$$.fragment,f),C(G$.$$.fragment,f),C(V$.$$.fragment,f),C(Q3.$$.fragment,f),C(X$.$$.fragment,f),C(t5.$$.fragment,f),C(z$.$$.fragment,f),C(Q$.$$.fragment,f),C(H$.$$.fragment,f),C(n5.$$.fragment,f),C(U$.$$.fragment,f),C(h5.$$.fragment,f),C(J$.$$.fragment,f),C(Y$.$$.fragment,f),C(Z$.$$.fragment,f),C(_5.$$.fragment,f),C(ek.$$.fragment,f),C(w5.$$.fragment,f),C(ok.$$.fragment,f),C(rk.$$.fragment,f),C(ak.$$.fragment,f),C(L5.$$.fragment,f),C(nk.$$.fragment,f),C(x5.$$.fragment,f),C(sk.$$.fragment,f),C(lk.$$.fragment,f),C(dk.$$.fragment,f),C(k5.$$.fragment,f),C(ck.$$.fragment,f),C(P5.$$.fragment,f),C(mk.$$.fragment,f),C(gk.$$.fragment,f),C(pk.$$.fragment,f),C(N5.$$.fragment,f),C(_k.$$.fragment,f),C(q5.$$.fragment,f),pQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Bf),f&&t(lt),f&&t(Oe),f&&t(We),f&&t(If),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(wo),f&&t(Ra),f&&t(cXe),f&&t(Bi),w(l6),f&&t(fXe),f&&t(qn),f&&t(mXe),w(i6,f),f&&t(gXe),f&&t(XS),f&&t(hXe),w(Df,f),f&&t(pXe),f&&t(Ni),w(d6),f&&t(_Xe),f&&t(Ao),w(c6),w(g6),w(Kg),w(h6),f&&t(uXe),f&&t(qi),w(p6),f&&t(bXe),f&&t(Lo),w(_6),w(v6),w(Ph),w(F6),f&&t(vXe),f&&t(ji),w(T6),f&&t(FXe),f&&t(yo),w(M6),w(w6),w(up),w(bp),w(A6),f&&t(TXe),f&&t(Di),w(L6),f&&t(MXe),f&&t(xo),w(y6),w(k6),w(jp),w(Dp),w(S6),f&&t(EXe),f&&t(Oi),w(R6),f&&t(CXe),f&&t($o),w(P6),w(N6),w(Vp),w(I6),w(Hu),f&&t(wXe),f&&t(zi),w(q6),f&&t(AXe),f&&t(ko),w(j6),w(G6),w(Ju),w(O6),w(V1),f&&t(LXe),f&&t(Hi),w(V6),f&&t(yXe),f&&t(So),w(X6),w(Q6),w(z1),w(W6),w(R2),f&&t(xXe),f&&t(Yi),w(H6),f&&t($Xe),f&&t(Ro),w(U6),w(Y6),w(B2),w(K6),w(Tb),f&&t(kXe),f&&t(ed),w(Z6),f&&t(SXe),f&&t(Po),w(eL),w(rL),w(Eb),w(tL),w(Xb),f&&t(RXe),f&&t(td),w(aL),f&&t(PXe),f&&t(Bo),w(nL),w(lL),w(Qb),w(iL),w(Xv),f&&t(BXe),f&&t(sd),w(dL),f&&t(NXe),f&&t(No),w(cL),w(mL),w(Qv),w(gL),w(C0),f&&t(IXe),f&&t(dd),w(hL),f&&t(qXe),f&&t(Io),w(pL),w(uL),w(A0),w(bL),w(P0),f&&t(jXe),f&&t(md),w(vL),f&&t(DXe),f&&t(jo),w(FL),w(ML),w(N0),w(EL),w(FF),f&&t(GXe),f&&t(pd),w(CL),f&&t(OXe),f&&t(Do),w(wL),w(LL),w(MF),w(yL),w(mT),f&&t(VXe),f&&t(bd),w(xL),f&&t(XXe),f&&t(Go),w($L),w(SL),w(hT),w(RL),w(uT),f&&t(zXe),f&&t(Td),w(PL),f&&t(QXe),f&&t(Oo),w(BL),w(IL),w(vT),w(qL),w(PT),f&&t(WXe),f&&t(Cd),w(jL),f&&t(HXe),f&&t(Vo),w(DL),w(OL),w(NT),w(VL),w(jT),f&&t(UXe),f&&t(Ld),w(XL),f&&t(JXe),f&&t(Xo),w(zL),w(WL),w(GT),w(HL),w(XT),f&&t(YXe),f&&t($d),w(UL),f&&t(KXe),f&&t(zo),w(JL),w(KL),w(QT),w(ZL),w(t7),f&&t(ZXe),f&&t(Rd),w(ey),f&&t(eze),f&&t(Qo),w(oy),w(ty),w(n7),w(ay),w(m7),f&&t(oze),f&&t(Nd),w(ny),f&&t(rze),f&&t(Wo),w(sy),w(iy),w(h7),w(dy),w(A7),f&&t(tze),f&&t(jd),w(cy),f&&t(aze),f&&t(Ho),w(fy),w(gy),w(y7),w(hy),w(S7),f&&t(nze),f&&t(Od),w(_y),f&&t(sze),f&&t(Uo),w(uy),w(vy),w(P7),w(Fy),w(G7),f&&t(lze),f&&t(zd),w(Ty),f&&t(ize),f&&t(Jo),w(My),w(Cy),w(V7),w(wy),w(H7),f&&t(dze),f&&t(Ud),w(Ay),f&&t(cze),f&&t(Yo),w(Ly),w(xy),w(J7),w($y),w(e8),f&&t(fze),f&&t(Kd),w(Sy),f&&t(mze),f&&t(Ko),w(Ry),w(By),w(r8),w(Ny),w(n8),f&&t(gze),f&&t(oc),w(Iy),f&&t(hze),f&&t(Zo),w(qy),w(Dy),w(l8),w(Gy),w(h8),f&&t(pze),f&&t(ac),w(Oy),f&&t(_ze),f&&t(er),w(Vy),w(zy),w(_8),w(Qy),w(v8),f&&t(uze),f&&t(lc),w(Wy),f&&t(bze),f&&t(or),w(Hy),w(Jy),w(T8),w(Yy),w(u9),f&&t(vze),f&&t(cc),w(Ky),f&&t(Fze),f&&t(rr),w(Zy),w(ox),w(v9),w(rx),w(V9),f&&t(Tze),f&&t(gc),w(tx),f&&t(Mze),f&&t(tr),w(ax),w(sx),w(z9),w(lx),w(nM),f&&t(Eze),f&&t(_c),w(ix),f&&t(Cze),f&&t(ar),w(dx),w(fx),w(lM),w(mx),w(hM),f&&t(wze),f&&t(vc),w(gx),f&&t(Aze),f&&t(nr),w(hx),w(_x),w(_M),w(ux),w(IM),f&&t(Lze),f&&t(Mc),w(bx),f&&t(yze),f&&t(sr),w(vx),w(Tx),w(jM),w(Mx),w(JM),f&&t(xze),f&&t(wc),w(Ex),f&&t($ze),f&&t(lr),w(Cx),w(Ax),w(KM),w(Lx),w(w4),f&&t(kze),f&&t(yc),w(yx),f&&t(Sze),f&&t(ir),w(xx),w(kx),w(L4),w(Sx),w(z4),f&&t(Rze),f&&t(kc),w(Rx),f&&t(Pze),f&&t(dr),w(Px),w(Nx),w(W4),w(Ix),w(J4),f&&t(Bze),f&&t(Pc),w(jx),f&&t(Nze),f&&t(cr),w(Dx),w(Ox),w(K4),w(Vx),w(eE),f&&t(Ize),f&&t(Ic),w(Xx),f&&t(qze),f&&t(fr),w(zx),w(Wx),w(rE),w(Hx),w(EE),f&&t(jze),f&&t(Dc),w(Ux),f&&t(Dze),f&&t(mr),w(Jx),w(Kx),w(wE),w(Zx),w(QE),f&&t(Gze),f&&t(Vc),w(e$),f&&t(Oze),f&&t(gr),w(o$),w(t$),w(HE),w(a$),w(JE),f&&t(Vze),f&&t(Qc),w(n$),f&&t(Xze),f&&t(hr),w(s$),w(i$),w(KE),w(d$),w(eC),f&&t(zze),f&&t(Uc),w(c$),f&&t(Qze),f&&t(pr),w(f$),w(g$),w(rC),w(h$),w($C),f&&t(Wze),f&&t(Kc),w(p$),f&&t(Hze),f&&t(_r),w(_$),w(b$),w(SC),w(v$),w(VC),f&&t(Uze),f&&t(of),w(F$),f&&t(Jze),f&&t(ur),w(T$),w(E$),w(zC),w(C$),w(n3),f&&t(Yze),f&&t(af),w(w$),f&&t(Kze),f&&t(br),w(A$),w(y$),w(l3),w(x$),w(b3),f&&t(Zze),f&&t(lf),w($$),f&&t(eQe),f&&t(vr),w(k$),w(R$),w(F3),w(P$),w(k3),f&&t(oQe),f&&t(ff),w(B$),f&&t(rQe),f&&t(Fr),w(N$),w(q$),w(R3),w(j$),w(X3),f&&t(tQe),f&&t(hf),w(D$),f&&t(aQe),f&&t(Tr),w(G$),w(V$),w(Q3),w(X$),w(t5),f&&t(nQe),f&&t(uf),w(z$),f&&t(sQe),f&&t(Mr),w(Q$),w(H$),w(n5),w(U$),w(h5),f&&t(lQe),f&&t(Ff),w(J$),f&&t(iQe),f&&t(Er),w(Y$),w(Z$),w(_5),w(ek),w(w5),f&&t(dQe),f&&t(Ef),w(ok),f&&t(cQe),f&&t(Cr),w(rk),w(ak),w(L5),w(nk),w(x5),f&&t(fQe),f&&t(Af),w(sk),f&&t(mQe),f&&t(wr),w(lk),w(dk),w(k5),w(ck),w(P5),f&&t(gQe),f&&t(xf),w(mk),f&&t(hQe),f&&t(Ar),w(gk),w(pk),w(N5),w(_k),w(q5)}}}const bUt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function vUt($){return uWt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class AUt extends gWt{constructor(g){super();hWt(this,g,vUt,uUt,pWt,{})}}export{AUt as default,bUt as metadata};
