import{S as zSt,i as WSt,s as QSt,e as a,k as l,w as F,t as o,M as HSt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as USt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Ozr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function JSt(L){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,IA,uf,Ge,We,pi,yn,NA,Ln,xn,qA,_i,$n,jA,ui,bf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),_f=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),IA=o(")."),uf=l(),Ge=a("p"),We=o("Likewise, if your "),pi=a("code"),yn=o("NewModel"),NA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),qA=o(`, make sure its
`),_i=a("code"),$n=o("config_class"),jA=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),bf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var nk=s(p);m=r(nk,"NewModelConfig"),nk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var sk=s(mi);_f=r(sk,"model_type"),sk.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var lk=s(gi);hi=r(lk,'"new-model"'),lk.forEach(t),IA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),Ge=n(Qe,"P",{});var Eo=s(Ge);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var wa=s(pi);yn=r(wa,"NewModel"),wa.forEach(t),NA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var ik=s(Ln);xn=r(ik,"PreTrainedModel"),ik.forEach(t),qA=r(Eo,`, make sure its
`),_i=n(Eo,"CODE",{});var vf=s(_i);$n=r(vf,"config_class"),vf.forEach(t),jA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var dk=s(ui);bf=r(dk,"NewModelConfig"),dk.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,_f),e(g,rt),e(g,gi),e(gi,hi),e(g,IA),b(Qe,uf,Ae),b(Qe,Ge,Ae),e(Ge,We),e(Ge,pi),e(pi,yn),e(Ge,NA),e(Ge,Ln),e(Ln,xn),e(Ge,qA),e(Ge,_i),e(_i,$n),e(Ge,jA),e(Ge,ui),e(ui,bf),e(Ge,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(Ge)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ARt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ORt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function URt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ePt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Pt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function APt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Pt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QPt(L){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,IA,uf,Ge,We,pi,yn,NA,Ln,xn,qA,_i,$n,jA,ui,bf,Ca,Qe,Ae,nk,bi,sk,lk,Eo,wa,ik,vf,dk,iVe,Yqe,vi,Ff,Poe,DA,dVe,Boe,cVe,Kqe,kn,fVe,Ioe,mVe,gVe,Noe,hVe,pVe,Zqe,GA,eje,ck,_Ve,oje,Tf,rje,Fi,Mf,qoe,OA,uVe,joe,bVe,tje,Co,VA,vVe,XA,FVe,fk,TVe,MVe,EVe,zA,CVe,Doe,wVe,AVe,yVe,Er,WA,LVe,Goe,xVe,$Ve,Ti,kVe,Ooe,SVe,RVe,Voe,PVe,BVe,IVe,A,Ef,Xoe,NVe,qVe,mk,jVe,DVe,GVe,Cf,zoe,OVe,VVe,gk,XVe,zVe,WVe,wf,Woe,QVe,HVe,hk,UVe,JVe,YVe,Af,Qoe,KVe,ZVe,pk,eXe,oXe,rXe,yf,Hoe,tXe,aXe,_k,nXe,sXe,lXe,Lf,Uoe,iXe,dXe,uk,cXe,fXe,mXe,xf,Joe,gXe,hXe,bk,pXe,_Xe,uXe,$f,Yoe,bXe,vXe,vk,FXe,TXe,MXe,kf,Koe,EXe,CXe,Fk,wXe,AXe,yXe,Sf,Zoe,LXe,xXe,Tk,$Xe,kXe,SXe,Rf,ere,RXe,PXe,Mk,BXe,IXe,NXe,Pf,ore,qXe,jXe,Ek,DXe,GXe,OXe,Bf,rre,VXe,XXe,Ck,zXe,WXe,QXe,If,tre,HXe,UXe,wk,JXe,YXe,KXe,Nf,are,ZXe,eze,Ak,oze,rze,tze,qf,nre,aze,nze,yk,sze,lze,ize,jf,sre,dze,cze,Lk,fze,mze,gze,Df,lre,hze,pze,xk,_ze,uze,bze,Gf,ire,vze,Fze,$k,Tze,Mze,Eze,Of,dre,Cze,wze,kk,Aze,yze,Lze,Vf,cre,xze,$ze,Sk,kze,Sze,Rze,Xf,fre,Pze,Bze,Rk,Ize,Nze,qze,zf,mre,jze,Dze,Pk,Gze,Oze,Vze,Wf,gre,Xze,zze,Bk,Wze,Qze,Hze,Qf,hre,Uze,Jze,Ik,Yze,Kze,Zze,Hf,pre,eWe,oWe,Nk,rWe,tWe,aWe,Uf,_re,nWe,sWe,qk,lWe,iWe,dWe,Jf,ure,cWe,fWe,jk,mWe,gWe,hWe,Yf,bre,pWe,_We,Dk,uWe,bWe,vWe,Kf,vre,FWe,TWe,Gk,MWe,EWe,CWe,Zf,Fre,wWe,AWe,Ok,yWe,LWe,xWe,em,Tre,$We,kWe,Vk,SWe,RWe,PWe,om,Mre,BWe,IWe,Xk,NWe,qWe,jWe,rm,Ere,DWe,GWe,zk,OWe,VWe,XWe,tm,Cre,zWe,WWe,Wk,QWe,HWe,UWe,am,wre,JWe,YWe,Qk,KWe,ZWe,eQe,nm,Are,oQe,rQe,Hk,tQe,aQe,nQe,sm,yre,sQe,lQe,Uk,iQe,dQe,cQe,lm,Lre,fQe,mQe,Jk,gQe,hQe,pQe,im,xre,_Qe,uQe,Yk,bQe,vQe,FQe,dm,$re,TQe,MQe,Kk,EQe,CQe,wQe,cm,kre,AQe,yQe,Zk,LQe,xQe,$Qe,fm,Sre,kQe,SQe,eS,RQe,PQe,BQe,mm,Rre,IQe,NQe,oS,qQe,jQe,DQe,gm,Pre,GQe,OQe,rS,VQe,XQe,zQe,hm,Bre,WQe,QQe,tS,HQe,UQe,JQe,pm,Ire,YQe,KQe,aS,ZQe,eHe,oHe,_m,Nre,rHe,tHe,nS,aHe,nHe,sHe,um,qre,lHe,iHe,sS,dHe,cHe,fHe,bm,jre,mHe,gHe,lS,hHe,pHe,_He,vm,Dre,uHe,bHe,iS,vHe,FHe,THe,Fm,Gre,MHe,EHe,dS,CHe,wHe,AHe,Tm,Ore,yHe,LHe,cS,xHe,$He,kHe,Mm,Vre,SHe,RHe,fS,PHe,BHe,IHe,Em,Xre,NHe,qHe,mS,jHe,DHe,GHe,Cm,zre,OHe,VHe,gS,XHe,zHe,WHe,wm,Wre,QHe,HHe,hS,UHe,JHe,YHe,Am,Qre,KHe,ZHe,pS,eUe,oUe,rUe,ym,Hre,tUe,aUe,_S,nUe,sUe,lUe,Lm,Ure,iUe,dUe,uS,cUe,fUe,mUe,xm,Jre,gUe,hUe,bS,pUe,_Ue,uUe,$m,Yre,bUe,vUe,vS,FUe,TUe,MUe,km,Kre,EUe,CUe,FS,wUe,AUe,yUe,Sm,Zre,LUe,xUe,TS,$Ue,kUe,SUe,Rm,ete,RUe,PUe,MS,BUe,IUe,NUe,Pm,ote,qUe,jUe,ES,DUe,GUe,OUe,Bm,rte,VUe,XUe,CS,zUe,WUe,QUe,Im,tte,HUe,UUe,wS,JUe,YUe,KUe,Nm,ate,ZUe,eJe,AS,oJe,rJe,tJe,qm,nte,aJe,nJe,yS,sJe,lJe,iJe,jm,ste,dJe,cJe,LS,fJe,mJe,gJe,Dm,lte,hJe,pJe,xS,_Je,uJe,bJe,Gm,ite,vJe,FJe,$S,TJe,MJe,EJe,Om,dte,CJe,wJe,kS,AJe,yJe,LJe,Vm,cte,xJe,$Je,SS,kJe,SJe,RJe,Xm,fte,PJe,BJe,RS,IJe,NJe,qJe,zm,mte,jJe,DJe,PS,GJe,OJe,VJe,Wm,gte,XJe,zJe,BS,WJe,QJe,HJe,Qm,hte,UJe,JJe,IS,YJe,KJe,ZJe,Hm,pte,eYe,oYe,NS,rYe,tYe,aYe,Um,_te,nYe,sYe,qS,lYe,iYe,dYe,Jm,ute,cYe,fYe,jS,mYe,gYe,hYe,Ym,bte,pYe,_Ye,DS,uYe,bYe,vYe,Km,vte,FYe,TYe,GS,MYe,EYe,CYe,Zm,Fte,wYe,AYe,OS,yYe,LYe,xYe,eg,Tte,$Ye,kYe,VS,SYe,RYe,PYe,og,Mte,BYe,IYe,XS,NYe,qYe,jYe,rg,Ete,DYe,GYe,zS,OYe,VYe,XYe,tg,Cte,zYe,WYe,WS,QYe,HYe,UYe,ag,wte,JYe,YYe,QS,KYe,ZYe,eKe,ng,Ate,oKe,rKe,HS,tKe,aKe,nKe,sg,yte,sKe,lKe,US,iKe,dKe,cKe,lg,Lte,fKe,mKe,JS,gKe,hKe,pKe,ig,xte,_Ke,uKe,YS,bKe,vKe,FKe,dg,$te,TKe,MKe,KS,EKe,CKe,wKe,cg,kte,AKe,yKe,ZS,LKe,xKe,$Ke,fg,Ste,kKe,SKe,eR,RKe,PKe,BKe,mg,Rte,IKe,NKe,oR,qKe,jKe,DKe,gg,Pte,GKe,OKe,rR,VKe,XKe,zKe,hg,Bte,WKe,QKe,tR,HKe,UKe,JKe,pg,Ite,YKe,KKe,aR,ZKe,eZe,oZe,_g,Nte,rZe,tZe,nR,aZe,nZe,sZe,ug,qte,lZe,iZe,sR,dZe,cZe,fZe,bg,jte,mZe,gZe,lR,hZe,pZe,_Ze,vg,Dte,uZe,bZe,iR,vZe,FZe,TZe,Fg,Gte,MZe,EZe,dR,CZe,wZe,AZe,Tg,Ote,yZe,LZe,cR,xZe,$Ze,kZe,Mg,Vte,SZe,RZe,fR,PZe,BZe,IZe,Eg,Xte,NZe,qZe,mR,jZe,DZe,GZe,Cg,zte,OZe,VZe,gR,XZe,zZe,WZe,wg,Wte,QZe,HZe,hR,UZe,JZe,YZe,Ag,KZe,yg,QA,ZZe,Qte,eeo,aje,Mi,Lg,Hte,HA,oeo,Ute,reo,nje,wo,UA,teo,JA,aeo,pR,neo,seo,leo,YA,ieo,Jte,deo,ceo,feo,Cr,KA,meo,Yte,geo,heo,Aa,peo,Kte,_eo,ueo,Zte,beo,veo,eae,Feo,Teo,Meo,k,Sn,oae,Eeo,Ceo,_R,weo,Aeo,uR,yeo,Leo,xeo,Rn,rae,$eo,keo,bR,Seo,Reo,vR,Peo,Beo,Ieo,Pn,tae,Neo,qeo,FR,jeo,Deo,TR,Geo,Oeo,Veo,xg,aae,Xeo,zeo,MR,Weo,Qeo,Heo,Bn,nae,Ueo,Jeo,ER,Yeo,Keo,CR,Zeo,eoo,ooo,$g,sae,roo,too,wR,aoo,noo,soo,kg,lae,loo,ioo,AR,doo,coo,foo,Sg,iae,moo,goo,yR,hoo,poo,_oo,In,dae,uoo,boo,LR,voo,Foo,xR,Too,Moo,Eoo,Nn,cae,Coo,woo,$R,Aoo,yoo,kR,Loo,xoo,$oo,qn,fae,koo,Soo,SR,Roo,Poo,RR,Boo,Ioo,Noo,Rg,mae,qoo,joo,PR,Doo,Goo,Ooo,Pg,gae,Voo,Xoo,BR,zoo,Woo,Qoo,jn,hae,Hoo,Uoo,IR,Joo,Yoo,NR,Koo,Zoo,ero,Bg,pae,oro,rro,qR,tro,aro,nro,Dn,_ae,sro,lro,jR,iro,dro,DR,cro,fro,mro,Gn,uae,gro,hro,GR,pro,_ro,OR,uro,bro,vro,On,bae,Fro,Tro,VR,Mro,Ero,XR,Cro,wro,Aro,Ig,vae,yro,Lro,zR,xro,$ro,kro,Vn,Fae,Sro,Rro,WR,Pro,Bro,QR,Iro,Nro,qro,Xn,Tae,jro,Dro,HR,Gro,Oro,UR,Vro,Xro,zro,zn,Mae,Wro,Qro,JR,Hro,Uro,YR,Jro,Yro,Kro,Wn,Eae,Zro,eto,KR,oto,rto,ZR,tto,ato,nto,Qn,Cae,sto,lto,eP,ito,dto,oP,cto,fto,mto,Hn,wae,gto,hto,rP,pto,_to,tP,uto,bto,vto,Ng,Aae,Fto,Tto,aP,Mto,Eto,Cto,Un,yae,wto,Ato,nP,yto,Lto,sP,xto,$to,kto,qg,Lae,Sto,Rto,lP,Pto,Bto,Ito,Jn,xae,Nto,qto,iP,jto,Dto,dP,Gto,Oto,Vto,Yn,$ae,Xto,zto,cP,Wto,Qto,fP,Hto,Uto,Jto,Kn,kae,Yto,Kto,mP,Zto,eao,gP,oao,rao,tao,jg,Sae,aao,nao,hP,sao,lao,iao,Zn,Rae,dao,cao,pP,fao,mao,_P,gao,hao,pao,es,Pae,_ao,uao,uP,bao,vao,bP,Fao,Tao,Mao,Dg,Bae,Eao,Cao,vP,wao,Aao,yao,os,Iae,Lao,xao,FP,$ao,kao,TP,Sao,Rao,Pao,rs,Nae,Bao,Iao,MP,Nao,qao,EP,jao,Dao,Gao,ts,qae,Oao,Vao,CP,Xao,zao,wP,Wao,Qao,Hao,as,jae,Uao,Jao,AP,Yao,Kao,yP,Zao,eno,ono,ns,Dae,rno,tno,LP,ano,nno,xP,sno,lno,ino,ss,Gae,dno,cno,$P,fno,mno,kP,gno,hno,pno,ls,Oae,_no,uno,SP,bno,vno,RP,Fno,Tno,Mno,Gg,Vae,Eno,Cno,PP,wno,Ano,yno,is,Xae,Lno,xno,BP,$no,kno,IP,Sno,Rno,Pno,Og,zae,Bno,Ino,NP,Nno,qno,jno,Vg,Wae,Dno,Gno,qP,Ono,Vno,Xno,ds,Qae,zno,Wno,jP,Qno,Hno,DP,Uno,Jno,Yno,cs,Hae,Kno,Zno,GP,eso,oso,OP,rso,tso,aso,fs,Uae,nso,sso,VP,lso,iso,XP,dso,cso,fso,Xg,Jae,mso,gso,zP,hso,pso,_so,ms,Yae,uso,bso,WP,vso,Fso,QP,Tso,Mso,Eso,gs,Kae,Cso,wso,HP,Aso,yso,UP,Lso,xso,$so,hs,Zae,kso,Sso,JP,Rso,Pso,YP,Bso,Iso,Nso,ps,ene,qso,jso,KP,Dso,Gso,ZP,Oso,Vso,Xso,_s,one,zso,Wso,eB,Qso,Hso,oB,Uso,Jso,Yso,zg,rne,Kso,Zso,rB,elo,olo,rlo,us,tne,tlo,alo,tB,nlo,slo,aB,llo,ilo,dlo,Wg,ane,clo,flo,nB,mlo,glo,hlo,Qg,nne,plo,_lo,sB,ulo,blo,vlo,Hg,sne,Flo,Tlo,lB,Mlo,Elo,Clo,Ug,lne,wlo,Alo,iB,ylo,Llo,xlo,bs,ine,$lo,klo,dB,Slo,Rlo,cB,Plo,Blo,Ilo,Jg,dne,Nlo,qlo,fB,jlo,Dlo,Glo,vs,cne,Olo,Vlo,mB,Xlo,zlo,gB,Wlo,Qlo,Hlo,Fs,fne,Ulo,Jlo,hB,Ylo,Klo,pB,Zlo,eio,oio,Ts,mne,rio,tio,_B,aio,nio,uB,sio,lio,iio,Ms,gne,dio,cio,bB,fio,mio,vB,gio,hio,pio,Es,hne,_io,uio,FB,bio,vio,TB,Fio,Tio,Mio,Cs,pne,Eio,Cio,MB,wio,Aio,EB,yio,Lio,xio,Yg,_ne,$io,kio,CB,Sio,Rio,Pio,Kg,une,Bio,Iio,wB,Nio,qio,jio,ws,bne,Dio,Gio,AB,Oio,Vio,yB,Xio,zio,Wio,As,vne,Qio,Hio,LB,Uio,Jio,xB,Yio,Kio,Zio,ys,Fne,edo,odo,$B,rdo,tdo,kB,ado,ndo,sdo,Zg,Tne,ldo,ido,SB,ddo,cdo,fdo,eh,Mne,mdo,gdo,RB,hdo,pdo,_do,oh,Ene,udo,bdo,PB,vdo,Fdo,Tdo,Ls,Cne,Mdo,Edo,BB,Cdo,wdo,IB,Ado,ydo,Ldo,rh,wne,xdo,$do,NB,kdo,Sdo,Rdo,th,Ane,Pdo,Bdo,qB,Ido,Ndo,qdo,ah,yne,jdo,Ddo,jB,Gdo,Odo,Vdo,xs,Lne,Xdo,zdo,DB,Wdo,Qdo,GB,Hdo,Udo,Jdo,nh,xne,Ydo,Kdo,OB,Zdo,eco,oco,sh,$ne,rco,tco,VB,aco,nco,sco,$s,kne,lco,ico,XB,dco,cco,zB,fco,mco,gco,ks,Sne,hco,pco,WB,_co,uco,QB,bco,vco,Fco,Ss,Rne,Tco,Mco,HB,Eco,Cco,UB,wco,Aco,yco,Rs,Pne,Lco,xco,JB,$co,kco,YB,Sco,Rco,Pco,lh,Bco,ih,ZA,Ico,Bne,Nco,sje,Ei,dh,Ine,ey,qco,Nne,jco,lje,Ao,oy,Dco,ry,Gco,KB,Oco,Vco,Xco,ty,zco,qne,Wco,Qco,Hco,He,ay,Uco,jne,Jco,Yco,ya,Kco,Dne,Zco,efo,Gne,ofo,rfo,One,tfo,afo,nfo,Y,ch,Vne,sfo,lfo,ZB,ifo,dfo,cfo,fh,Xne,ffo,mfo,eI,gfo,hfo,pfo,mh,zne,_fo,ufo,oI,bfo,vfo,Ffo,gh,Wne,Tfo,Mfo,rI,Efo,Cfo,wfo,hh,Qne,Afo,yfo,tI,Lfo,xfo,$fo,ph,Hne,kfo,Sfo,aI,Rfo,Pfo,Bfo,_h,Une,Ifo,Nfo,nI,qfo,jfo,Dfo,uh,Jne,Gfo,Ofo,sI,Vfo,Xfo,zfo,bh,Yne,Wfo,Qfo,lI,Hfo,Ufo,Jfo,vh,Kne,Yfo,Kfo,iI,Zfo,emo,omo,Fh,Zne,rmo,tmo,dI,amo,nmo,smo,Th,ese,lmo,imo,cI,dmo,cmo,fmo,Mh,ose,mmo,gmo,fI,hmo,pmo,_mo,Eh,rse,umo,bmo,mI,vmo,Fmo,Tmo,Ch,tse,Mmo,Emo,gI,Cmo,wmo,Amo,wh,ase,ymo,Lmo,hI,xmo,$mo,kmo,Ah,nse,Smo,Rmo,pI,Pmo,Bmo,Imo,yh,sse,Nmo,qmo,_I,jmo,Dmo,Gmo,Lh,lse,Omo,Vmo,uI,Xmo,zmo,Wmo,xh,ise,Qmo,Hmo,bI,Umo,Jmo,Ymo,$h,dse,Kmo,Zmo,vI,ego,ogo,rgo,kh,cse,tgo,ago,FI,ngo,sgo,lgo,Sh,fse,igo,dgo,TI,cgo,fgo,mgo,Rh,mse,ggo,hgo,MI,pgo,_go,ugo,Ph,gse,bgo,vgo,EI,Fgo,Tgo,Mgo,Bh,hse,Ego,Cgo,CI,wgo,Ago,ygo,Ih,pse,Lgo,xgo,wI,$go,kgo,Sgo,Nh,_se,Rgo,Pgo,AI,Bgo,Igo,Ngo,qh,use,qgo,jgo,yI,Dgo,Ggo,Ogo,jh,bse,Vgo,Xgo,LI,zgo,Wgo,Qgo,Dh,vse,Hgo,Ugo,xI,Jgo,Ygo,Kgo,Gh,Zgo,Oh,eho,Vh,ny,oho,Fse,rho,ije,Ci,Xh,Tse,sy,tho,Mse,aho,dje,yo,ly,nho,iy,sho,$I,lho,iho,dho,dy,cho,Ese,fho,mho,gho,Ue,cy,hho,Cse,pho,_ho,wi,uho,wse,bho,vho,Ase,Fho,Tho,Mho,he,zh,yse,Eho,Cho,kI,who,Aho,yho,Wh,Lse,Lho,xho,xse,$ho,kho,Sho,Qh,$se,Rho,Pho,SI,Bho,Iho,Nho,Hh,kse,qho,jho,RI,Dho,Gho,Oho,Uh,Sse,Vho,Xho,PI,zho,Who,Qho,Jh,Rse,Hho,Uho,BI,Jho,Yho,Kho,Yh,Pse,Zho,epo,II,opo,rpo,tpo,Kh,Bse,apo,npo,NI,spo,lpo,ipo,Zh,Ise,dpo,cpo,qI,fpo,mpo,gpo,ep,Nse,hpo,ppo,jI,_po,upo,bpo,op,qse,vpo,Fpo,DI,Tpo,Mpo,Epo,rp,jse,Cpo,wpo,GI,Apo,ypo,Lpo,tp,Dse,xpo,$po,OI,kpo,Spo,Rpo,ap,Gse,Ppo,Bpo,VI,Ipo,Npo,qpo,np,Ose,jpo,Dpo,XI,Gpo,Opo,Vpo,sp,Vse,Xpo,zpo,zI,Wpo,Qpo,Hpo,lp,Xse,Upo,Jpo,WI,Ypo,Kpo,Zpo,ip,e_o,dp,o_o,cp,fy,r_o,zse,t_o,cje,Ai,fp,Wse,my,a_o,Qse,n_o,fje,Lo,gy,s_o,yi,l_o,QI,i_o,d_o,HI,c_o,f_o,m_o,hy,g_o,Hse,h_o,p_o,__o,tt,py,u_o,Use,b_o,v_o,Li,F_o,Jse,T_o,M_o,UI,E_o,C_o,w_o,mp,A_o,Je,_y,y_o,Yse,L_o,x_o,La,$_o,Kse,k_o,S_o,Zse,R_o,P_o,ele,B_o,I_o,N_o,x,gp,ole,q_o,j_o,JI,D_o,G_o,O_o,hp,rle,V_o,X_o,YI,z_o,W_o,Q_o,pp,tle,H_o,U_o,KI,J_o,Y_o,K_o,_p,ale,Z_o,euo,ZI,ouo,ruo,tuo,up,nle,auo,nuo,eN,suo,luo,iuo,bp,sle,duo,cuo,oN,fuo,muo,guo,vp,lle,huo,puo,rN,_uo,uuo,buo,Fp,ile,vuo,Fuo,tN,Tuo,Muo,Euo,Tp,dle,Cuo,wuo,aN,Auo,yuo,Luo,Mp,cle,xuo,$uo,nN,kuo,Suo,Ruo,Ep,fle,Puo,Buo,sN,Iuo,Nuo,quo,Cp,mle,juo,Duo,lN,Guo,Ouo,Vuo,wp,gle,Xuo,zuo,iN,Wuo,Quo,Huo,Ap,hle,Uuo,Juo,dN,Yuo,Kuo,Zuo,yp,ple,e2o,o2o,cN,r2o,t2o,a2o,Lp,_le,n2o,s2o,fN,l2o,i2o,d2o,xp,ule,c2o,f2o,mN,m2o,g2o,h2o,$p,ble,p2o,_2o,gN,u2o,b2o,v2o,kp,vle,F2o,T2o,hN,M2o,E2o,C2o,Sp,Fle,w2o,A2o,pN,y2o,L2o,x2o,Rp,Tle,$2o,k2o,_N,S2o,R2o,P2o,Pp,Mle,B2o,I2o,uN,N2o,q2o,j2o,Bp,Ele,D2o,G2o,bN,O2o,V2o,X2o,Ip,Cle,z2o,W2o,vN,Q2o,H2o,U2o,Np,wle,J2o,Y2o,FN,K2o,Z2o,e1o,qp,Ale,o1o,r1o,TN,t1o,a1o,n1o,jp,yle,s1o,l1o,MN,i1o,d1o,c1o,Dp,Lle,f1o,m1o,EN,g1o,h1o,p1o,Gp,xle,_1o,u1o,CN,b1o,v1o,F1o,Op,$le,T1o,M1o,wN,E1o,C1o,w1o,Vp,kle,A1o,y1o,AN,L1o,x1o,$1o,Xp,Sle,k1o,S1o,yN,R1o,P1o,B1o,Ps,Rle,I1o,N1o,LN,q1o,j1o,xN,D1o,G1o,O1o,zp,Ple,V1o,X1o,$N,z1o,W1o,Q1o,Wp,Ble,H1o,U1o,kN,J1o,Y1o,K1o,Qp,Ile,Z1o,ebo,SN,obo,rbo,tbo,Hp,Nle,abo,nbo,RN,sbo,lbo,ibo,Up,qle,dbo,cbo,PN,fbo,mbo,gbo,Jp,jle,hbo,pbo,BN,_bo,ubo,bbo,Yp,Dle,vbo,Fbo,IN,Tbo,Mbo,Ebo,Kp,Gle,Cbo,wbo,NN,Abo,ybo,Lbo,Zp,Ole,xbo,$bo,qN,kbo,Sbo,Rbo,e_,Vle,Pbo,Bbo,jN,Ibo,Nbo,qbo,o_,Xle,jbo,Dbo,DN,Gbo,Obo,Vbo,r_,zle,Xbo,zbo,GN,Wbo,Qbo,Hbo,t_,Wle,Ubo,Jbo,ON,Ybo,Kbo,Zbo,a_,Qle,evo,ovo,VN,rvo,tvo,avo,n_,Hle,nvo,svo,XN,lvo,ivo,dvo,s_,Ule,cvo,fvo,zN,mvo,gvo,hvo,l_,Jle,pvo,_vo,WN,uvo,bvo,vvo,i_,Yle,Fvo,Tvo,QN,Mvo,Evo,Cvo,d_,Kle,wvo,Avo,HN,yvo,Lvo,xvo,c_,Zle,$vo,kvo,UN,Svo,Rvo,Pvo,f_,eie,Bvo,Ivo,JN,Nvo,qvo,jvo,m_,oie,Dvo,Gvo,YN,Ovo,Vvo,Xvo,g_,rie,zvo,Wvo,KN,Qvo,Hvo,Uvo,h_,tie,Jvo,Yvo,ZN,Kvo,Zvo,eFo,p_,aie,oFo,rFo,eq,tFo,aFo,nFo,__,nie,sFo,lFo,oq,iFo,dFo,cFo,u_,sie,fFo,mFo,rq,gFo,hFo,pFo,b_,lie,_Fo,uFo,tq,bFo,vFo,FFo,v_,iie,TFo,MFo,aq,EFo,CFo,wFo,F_,die,AFo,yFo,nq,LFo,xFo,$Fo,T_,cie,kFo,SFo,sq,RFo,PFo,BFo,M_,fie,IFo,NFo,lq,qFo,jFo,DFo,E_,mie,GFo,OFo,iq,VFo,XFo,zFo,C_,gie,WFo,QFo,dq,HFo,UFo,JFo,w_,hie,YFo,KFo,cq,ZFo,e6o,o6o,A_,pie,r6o,t6o,fq,a6o,n6o,s6o,y_,_ie,l6o,i6o,mq,d6o,c6o,f6o,L_,uie,m6o,g6o,gq,h6o,p6o,_6o,x_,bie,u6o,b6o,hq,v6o,F6o,T6o,$_,vie,M6o,E6o,pq,C6o,w6o,A6o,k_,Fie,y6o,L6o,_q,x6o,$6o,k6o,S_,Tie,S6o,R6o,uq,P6o,B6o,I6o,R_,Mie,N6o,q6o,bq,j6o,D6o,G6o,P_,Eie,O6o,V6o,vq,X6o,z6o,W6o,B_,Cie,Q6o,H6o,Fq,U6o,J6o,Y6o,I_,wie,K6o,Z6o,Tq,eTo,oTo,rTo,N_,Aie,tTo,aTo,Mq,nTo,sTo,lTo,q_,yie,iTo,dTo,Eq,cTo,fTo,mTo,j_,Lie,gTo,hTo,Cq,pTo,_To,uTo,D_,xie,bTo,vTo,wq,FTo,TTo,MTo,G_,$ie,ETo,CTo,Aq,wTo,ATo,yTo,O_,kie,LTo,xTo,yq,$To,kTo,STo,V_,Sie,RTo,PTo,Lq,BTo,ITo,NTo,X_,Rie,qTo,jTo,xq,DTo,GTo,OTo,z_,Pie,VTo,XTo,$q,zTo,WTo,QTo,W_,Bie,HTo,UTo,kq,JTo,YTo,KTo,Q_,Iie,ZTo,e7o,Sq,o7o,r7o,t7o,H_,Nie,a7o,n7o,Rq,s7o,l7o,i7o,U_,qie,d7o,c7o,Pq,f7o,m7o,g7o,J_,jie,h7o,p7o,Bq,_7o,u7o,b7o,Y_,Die,v7o,F7o,Iq,T7o,M7o,E7o,K_,Gie,C7o,w7o,Nq,A7o,y7o,L7o,Z_,Oie,x7o,$7o,qq,k7o,S7o,R7o,eu,Vie,P7o,B7o,jq,I7o,N7o,q7o,ou,Xie,j7o,D7o,Dq,G7o,O7o,V7o,ru,zie,X7o,z7o,Gq,W7o,Q7o,H7o,tu,Wie,U7o,J7o,Oq,Y7o,K7o,Z7o,au,Qie,eMo,oMo,Vq,rMo,tMo,aMo,nu,Hie,nMo,sMo,Xq,lMo,iMo,dMo,su,Uie,cMo,fMo,zq,mMo,gMo,hMo,lu,Jie,pMo,_Mo,Wq,uMo,bMo,vMo,iu,FMo,Yie,TMo,MMo,Kie,EMo,CMo,du,mje,xi,cu,Zie,uy,wMo,ede,AMo,gje,xo,by,yMo,$i,LMo,Qq,xMo,$Mo,Hq,kMo,SMo,RMo,vy,PMo,ode,BMo,IMo,NMo,at,Fy,qMo,rde,jMo,DMo,ki,GMo,tde,OMo,VMo,Uq,XMo,zMo,WMo,fu,QMo,Ye,Ty,HMo,ade,UMo,JMo,xa,YMo,nde,KMo,ZMo,sde,e4o,o4o,lde,r4o,t4o,a4o,G,mu,ide,n4o,s4o,Jq,l4o,i4o,d4o,gu,dde,c4o,f4o,Yq,m4o,g4o,h4o,hu,cde,p4o,_4o,Kq,u4o,b4o,v4o,pu,fde,F4o,T4o,Zq,M4o,E4o,C4o,_u,mde,w4o,A4o,ej,y4o,L4o,x4o,uu,gde,$4o,k4o,oj,S4o,R4o,P4o,bu,hde,B4o,I4o,rj,N4o,q4o,j4o,vu,pde,D4o,G4o,tj,O4o,V4o,X4o,Fu,_de,z4o,W4o,aj,Q4o,H4o,U4o,Tu,ude,J4o,Y4o,nj,K4o,Z4o,eEo,Mu,bde,oEo,rEo,sj,tEo,aEo,nEo,Eu,vde,sEo,lEo,lj,iEo,dEo,cEo,Cu,Fde,fEo,mEo,ij,gEo,hEo,pEo,wu,Tde,_Eo,uEo,dj,bEo,vEo,FEo,Au,Mde,TEo,MEo,cj,EEo,CEo,wEo,yu,Ede,AEo,yEo,fj,LEo,xEo,$Eo,Lu,Cde,kEo,SEo,mj,REo,PEo,BEo,xu,wde,IEo,NEo,gj,qEo,jEo,DEo,$u,Ade,GEo,OEo,hj,VEo,XEo,zEo,ku,yde,WEo,QEo,pj,HEo,UEo,JEo,Su,Lde,YEo,KEo,_j,ZEo,eCo,oCo,Ru,xde,rCo,tCo,uj,aCo,nCo,sCo,Pu,$de,lCo,iCo,bj,dCo,cCo,fCo,Bu,kde,mCo,gCo,vj,hCo,pCo,_Co,Iu,Sde,uCo,bCo,Fj,vCo,FCo,TCo,Nu,Rde,MCo,ECo,Tj,CCo,wCo,ACo,qu,Pde,yCo,LCo,Mj,xCo,$Co,kCo,ju,Bde,SCo,RCo,Ej,PCo,BCo,ICo,Du,Ide,NCo,qCo,Cj,jCo,DCo,GCo,Gu,Nde,OCo,VCo,wj,XCo,zCo,WCo,Ou,qde,QCo,HCo,Aj,UCo,JCo,YCo,Vu,jde,KCo,ZCo,yj,e5o,o5o,r5o,Xu,Dde,t5o,a5o,Lj,n5o,s5o,l5o,zu,Gde,i5o,d5o,xj,c5o,f5o,m5o,Wu,Ode,g5o,h5o,$j,p5o,_5o,u5o,Qu,Vde,b5o,v5o,kj,F5o,T5o,M5o,Hu,Xde,E5o,C5o,Sj,w5o,A5o,y5o,Uu,zde,L5o,x5o,Rj,$5o,k5o,S5o,Ju,Wde,R5o,P5o,Pj,B5o,I5o,N5o,Yu,Qde,q5o,j5o,Bj,D5o,G5o,O5o,Ku,Hde,V5o,X5o,Ij,z5o,W5o,Q5o,Zu,Ude,H5o,U5o,Nj,J5o,Y5o,K5o,e2,Z5o,Jde,e3o,o3o,Yde,r3o,t3o,o2,hje,Si,r2,Kde,My,a3o,Zde,n3o,pje,$o,Ey,s3o,Ri,l3o,qj,i3o,d3o,jj,c3o,f3o,m3o,Cy,g3o,ece,h3o,p3o,_3o,nt,wy,u3o,oce,b3o,v3o,Pi,F3o,rce,T3o,M3o,Dj,E3o,C3o,w3o,t2,A3o,Ke,Ay,y3o,tce,L3o,x3o,$a,$3o,ace,k3o,S3o,nce,R3o,P3o,sce,B3o,I3o,N3o,z,a2,lce,q3o,j3o,Gj,D3o,G3o,O3o,n2,ice,V3o,X3o,Oj,z3o,W3o,Q3o,s2,dce,H3o,U3o,Vj,J3o,Y3o,K3o,l2,cce,Z3o,e0o,Xj,o0o,r0o,t0o,i2,fce,a0o,n0o,zj,s0o,l0o,i0o,d2,mce,d0o,c0o,Wj,f0o,m0o,g0o,c2,gce,h0o,p0o,Qj,_0o,u0o,b0o,f2,hce,v0o,F0o,Hj,T0o,M0o,E0o,m2,pce,C0o,w0o,Uj,A0o,y0o,L0o,g2,_ce,x0o,$0o,Jj,k0o,S0o,R0o,h2,uce,P0o,B0o,Yj,I0o,N0o,q0o,p2,bce,j0o,D0o,Kj,G0o,O0o,V0o,_2,vce,X0o,z0o,Zj,W0o,Q0o,H0o,u2,Fce,U0o,J0o,eD,Y0o,K0o,Z0o,b2,Tce,ewo,owo,oD,rwo,two,awo,v2,Mce,nwo,swo,rD,lwo,iwo,dwo,F2,Ece,cwo,fwo,tD,mwo,gwo,hwo,T2,Cce,pwo,_wo,aD,uwo,bwo,vwo,M2,wce,Fwo,Two,nD,Mwo,Ewo,Cwo,E2,Ace,wwo,Awo,sD,ywo,Lwo,xwo,C2,yce,$wo,kwo,lD,Swo,Rwo,Pwo,w2,Lce,Bwo,Iwo,iD,Nwo,qwo,jwo,A2,xce,Dwo,Gwo,dD,Owo,Vwo,Xwo,y2,$ce,zwo,Wwo,cD,Qwo,Hwo,Uwo,L2,kce,Jwo,Ywo,fD,Kwo,Zwo,eAo,x2,Sce,oAo,rAo,mD,tAo,aAo,nAo,$2,Rce,sAo,lAo,gD,iAo,dAo,cAo,k2,Pce,fAo,mAo,hD,gAo,hAo,pAo,S2,Bce,_Ao,uAo,pD,bAo,vAo,FAo,R2,Ice,TAo,MAo,_D,EAo,CAo,wAo,P2,Nce,AAo,yAo,uD,LAo,xAo,$Ao,B2,qce,kAo,SAo,bD,RAo,PAo,BAo,I2,jce,IAo,NAo,vD,qAo,jAo,DAo,N2,Dce,GAo,OAo,FD,VAo,XAo,zAo,q2,Gce,WAo,QAo,TD,HAo,UAo,JAo,j2,Oce,YAo,KAo,MD,ZAo,eyo,oyo,D2,Vce,ryo,tyo,ED,ayo,nyo,syo,G2,lyo,Xce,iyo,dyo,zce,cyo,fyo,O2,_je,Bi,V2,Wce,yy,myo,Qce,gyo,uje,ko,Ly,hyo,Ii,pyo,CD,_yo,uyo,wD,byo,vyo,Fyo,xy,Tyo,Hce,Myo,Eyo,Cyo,st,$y,wyo,Uce,Ayo,yyo,Ni,Lyo,Jce,xyo,$yo,AD,kyo,Syo,Ryo,X2,Pyo,Ze,ky,Byo,Yce,Iyo,Nyo,ka,qyo,Kce,jyo,Dyo,Zce,Gyo,Oyo,efe,Vyo,Xyo,zyo,W,z2,ofe,Wyo,Qyo,yD,Hyo,Uyo,Jyo,W2,rfe,Yyo,Kyo,LD,Zyo,eLo,oLo,Q2,tfe,rLo,tLo,xD,aLo,nLo,sLo,H2,afe,lLo,iLo,$D,dLo,cLo,fLo,U2,nfe,mLo,gLo,kD,hLo,pLo,_Lo,J2,sfe,uLo,bLo,SD,vLo,FLo,TLo,Y2,lfe,MLo,ELo,RD,CLo,wLo,ALo,K2,ife,yLo,LLo,PD,xLo,$Lo,kLo,Z2,dfe,SLo,RLo,BD,PLo,BLo,ILo,e1,cfe,NLo,qLo,ID,jLo,DLo,GLo,o1,ffe,OLo,VLo,ND,XLo,zLo,WLo,r1,mfe,QLo,HLo,qD,ULo,JLo,YLo,t1,gfe,KLo,ZLo,jD,e8o,o8o,r8o,a1,hfe,t8o,a8o,DD,n8o,s8o,l8o,n1,pfe,i8o,d8o,GD,c8o,f8o,m8o,s1,_fe,g8o,h8o,OD,p8o,_8o,u8o,l1,ufe,b8o,v8o,VD,F8o,T8o,M8o,i1,bfe,E8o,C8o,XD,w8o,A8o,y8o,d1,vfe,L8o,x8o,zD,$8o,k8o,S8o,c1,Ffe,R8o,P8o,WD,B8o,I8o,N8o,f1,Tfe,q8o,j8o,QD,D8o,G8o,O8o,m1,Mfe,V8o,X8o,HD,z8o,W8o,Q8o,g1,Efe,H8o,U8o,UD,J8o,Y8o,K8o,h1,Cfe,Z8o,e9o,JD,o9o,r9o,t9o,p1,wfe,a9o,n9o,YD,s9o,l9o,i9o,_1,Afe,d9o,c9o,KD,f9o,m9o,g9o,u1,yfe,h9o,p9o,ZD,_9o,u9o,b9o,b1,Lfe,v9o,F9o,eG,T9o,M9o,E9o,v1,xfe,C9o,w9o,oG,A9o,y9o,L9o,F1,$fe,x9o,$9o,rG,k9o,S9o,R9o,T1,kfe,P9o,B9o,tG,I9o,N9o,q9o,M1,Sfe,j9o,D9o,Rfe,G9o,O9o,V9o,E1,Pfe,X9o,z9o,aG,W9o,Q9o,H9o,C1,Bfe,U9o,J9o,nG,Y9o,K9o,Z9o,w1,Ife,exo,oxo,sG,rxo,txo,axo,A1,Nfe,nxo,sxo,lG,lxo,ixo,dxo,y1,cxo,qfe,fxo,mxo,jfe,gxo,hxo,L1,bje,qi,x1,Dfe,Sy,pxo,Gfe,_xo,vje,So,Ry,uxo,ji,bxo,iG,vxo,Fxo,dG,Txo,Mxo,Exo,Py,Cxo,Ofe,wxo,Axo,yxo,lt,By,Lxo,Vfe,xxo,$xo,Di,kxo,Xfe,Sxo,Rxo,cG,Pxo,Bxo,Ixo,$1,Nxo,eo,Iy,qxo,zfe,jxo,Dxo,Sa,Gxo,Wfe,Oxo,Vxo,Qfe,Xxo,zxo,Hfe,Wxo,Qxo,Hxo,_e,k1,Ufe,Uxo,Jxo,fG,Yxo,Kxo,Zxo,S1,Jfe,e$o,o$o,mG,r$o,t$o,a$o,R1,Yfe,n$o,s$o,gG,l$o,i$o,d$o,P1,Kfe,c$o,f$o,hG,m$o,g$o,h$o,B1,Zfe,p$o,_$o,pG,u$o,b$o,v$o,I1,eme,F$o,T$o,_G,M$o,E$o,C$o,N1,ome,w$o,A$o,uG,y$o,L$o,x$o,q1,rme,$$o,k$o,bG,S$o,R$o,P$o,j1,tme,B$o,I$o,vG,N$o,q$o,j$o,D1,ame,D$o,G$o,FG,O$o,V$o,X$o,G1,nme,z$o,W$o,TG,Q$o,H$o,U$o,O1,sme,J$o,Y$o,MG,K$o,Z$o,eko,V1,lme,oko,rko,EG,tko,ako,nko,X1,ime,sko,lko,CG,iko,dko,cko,z1,dme,fko,mko,wG,gko,hko,pko,W1,cme,_ko,uko,AG,bko,vko,Fko,Q1,Tko,fme,Mko,Eko,mme,Cko,wko,H1,Fje,Gi,U1,gme,Ny,Ako,hme,yko,Tje,Ro,qy,Lko,Oi,xko,yG,$ko,kko,LG,Sko,Rko,Pko,jy,Bko,pme,Iko,Nko,qko,it,Dy,jko,_me,Dko,Gko,Vi,Oko,ume,Vko,Xko,xG,zko,Wko,Qko,J1,Hko,oo,Gy,Uko,bme,Jko,Yko,Ra,Kko,vme,Zko,eSo,Fme,oSo,rSo,Tme,tSo,aSo,nSo,N,Y1,Mme,sSo,lSo,$G,iSo,dSo,cSo,K1,Eme,fSo,mSo,kG,gSo,hSo,pSo,Z1,Cme,_So,uSo,SG,bSo,vSo,FSo,eb,wme,TSo,MSo,RG,ESo,CSo,wSo,ob,Ame,ASo,ySo,PG,LSo,xSo,$So,rb,yme,kSo,SSo,BG,RSo,PSo,BSo,tb,Lme,ISo,NSo,IG,qSo,jSo,DSo,ab,xme,GSo,OSo,NG,VSo,XSo,zSo,nb,$me,WSo,QSo,qG,HSo,USo,JSo,sb,kme,YSo,KSo,jG,ZSo,eRo,oRo,lb,Sme,rRo,tRo,DG,aRo,nRo,sRo,ib,Rme,lRo,iRo,GG,dRo,cRo,fRo,db,Pme,mRo,gRo,OG,hRo,pRo,_Ro,cb,Bme,uRo,bRo,VG,vRo,FRo,TRo,fb,Ime,MRo,ERo,XG,CRo,wRo,ARo,mb,Nme,yRo,LRo,zG,xRo,$Ro,kRo,gb,qme,SRo,RRo,WG,PRo,BRo,IRo,hb,jme,NRo,qRo,QG,jRo,DRo,GRo,pb,Dme,ORo,VRo,HG,XRo,zRo,WRo,_b,Gme,QRo,HRo,UG,URo,JRo,YRo,ub,Ome,KRo,ZRo,JG,ePo,oPo,rPo,bb,Vme,tPo,aPo,YG,nPo,sPo,lPo,vb,Xme,iPo,dPo,KG,cPo,fPo,mPo,Fb,zme,gPo,hPo,ZG,pPo,_Po,uPo,Tb,Wme,bPo,vPo,eO,FPo,TPo,MPo,Mb,Qme,EPo,CPo,oO,wPo,APo,yPo,Eb,Hme,LPo,xPo,rO,$Po,kPo,SPo,Cb,Ume,RPo,PPo,tO,BPo,IPo,NPo,wb,Jme,qPo,jPo,aO,DPo,GPo,OPo,Ab,Yme,VPo,XPo,nO,zPo,WPo,QPo,yb,Kme,HPo,UPo,sO,JPo,YPo,KPo,Lb,Zme,ZPo,eBo,lO,oBo,rBo,tBo,xb,ege,aBo,nBo,iO,sBo,lBo,iBo,$b,oge,dBo,cBo,dO,fBo,mBo,gBo,kb,rge,hBo,pBo,cO,_Bo,uBo,bBo,Sb,tge,vBo,FBo,fO,TBo,MBo,EBo,Rb,age,CBo,wBo,mO,ABo,yBo,LBo,Pb,nge,xBo,$Bo,gO,kBo,SBo,RBo,Bb,sge,PBo,BBo,hO,IBo,NBo,qBo,Ib,lge,jBo,DBo,pO,GBo,OBo,VBo,Nb,ige,XBo,zBo,_O,WBo,QBo,HBo,qb,dge,UBo,JBo,uO,YBo,KBo,ZBo,jb,cge,eIo,oIo,bO,rIo,tIo,aIo,Db,fge,nIo,sIo,vO,lIo,iIo,dIo,Gb,mge,cIo,fIo,FO,mIo,gIo,hIo,Ob,gge,pIo,_Io,TO,uIo,bIo,vIo,Vb,hge,FIo,TIo,MO,MIo,EIo,CIo,Xb,wIo,pge,AIo,yIo,_ge,LIo,xIo,zb,Mje,Xi,Wb,uge,Oy,$Io,bge,kIo,Eje,Po,Vy,SIo,zi,RIo,EO,PIo,BIo,CO,IIo,NIo,qIo,Xy,jIo,vge,DIo,GIo,OIo,dt,zy,VIo,Fge,XIo,zIo,Wi,WIo,Tge,QIo,HIo,wO,UIo,JIo,YIo,Qb,KIo,ro,Wy,ZIo,Mge,eNo,oNo,Pa,rNo,Ege,tNo,aNo,Cge,nNo,sNo,wge,lNo,iNo,dNo,Z,Hb,Age,cNo,fNo,AO,mNo,gNo,hNo,Ub,yge,pNo,_No,yO,uNo,bNo,vNo,Jb,Lge,FNo,TNo,LO,MNo,ENo,CNo,Yb,xge,wNo,ANo,xO,yNo,LNo,xNo,Kb,$ge,$No,kNo,$O,SNo,RNo,PNo,Zb,kge,BNo,INo,kO,NNo,qNo,jNo,ev,Sge,DNo,GNo,SO,ONo,VNo,XNo,ov,Rge,zNo,WNo,RO,QNo,HNo,UNo,rv,Pge,JNo,YNo,PO,KNo,ZNo,eqo,tv,Bge,oqo,rqo,BO,tqo,aqo,nqo,av,Ige,sqo,lqo,IO,iqo,dqo,cqo,nv,Nge,fqo,mqo,NO,gqo,hqo,pqo,sv,qge,_qo,uqo,qO,bqo,vqo,Fqo,lv,jge,Tqo,Mqo,jO,Eqo,Cqo,wqo,iv,Dge,Aqo,yqo,DO,Lqo,xqo,$qo,dv,Gge,kqo,Sqo,GO,Rqo,Pqo,Bqo,cv,Oge,Iqo,Nqo,OO,qqo,jqo,Dqo,fv,Vge,Gqo,Oqo,VO,Vqo,Xqo,zqo,mv,Xge,Wqo,Qqo,XO,Hqo,Uqo,Jqo,gv,zge,Yqo,Kqo,zO,Zqo,ejo,ojo,hv,Wge,rjo,tjo,WO,ajo,njo,sjo,pv,Qge,ljo,ijo,QO,djo,cjo,fjo,_v,Hge,mjo,gjo,HO,hjo,pjo,_jo,uv,Uge,ujo,bjo,UO,vjo,Fjo,Tjo,bv,Jge,Mjo,Ejo,JO,Cjo,wjo,Ajo,vv,Yge,yjo,Ljo,YO,xjo,$jo,kjo,Fv,Kge,Sjo,Rjo,KO,Pjo,Bjo,Ijo,Tv,Zge,Njo,qjo,ZO,jjo,Djo,Gjo,Mv,ehe,Ojo,Vjo,eV,Xjo,zjo,Wjo,Ev,Qjo,ohe,Hjo,Ujo,rhe,Jjo,Yjo,Cv,Cje,Qi,wv,the,Qy,Kjo,ahe,Zjo,wje,Bo,Hy,eDo,Hi,oDo,oV,rDo,tDo,rV,aDo,nDo,sDo,Uy,lDo,nhe,iDo,dDo,cDo,ct,Jy,fDo,she,mDo,gDo,Ui,hDo,lhe,pDo,_Do,tV,uDo,bDo,vDo,Av,FDo,to,Yy,TDo,ihe,MDo,EDo,Ba,CDo,dhe,wDo,ADo,che,yDo,LDo,fhe,xDo,$Do,kDo,Yr,yv,mhe,SDo,RDo,aV,PDo,BDo,IDo,Lv,ghe,NDo,qDo,nV,jDo,DDo,GDo,xv,hhe,ODo,VDo,sV,XDo,zDo,WDo,$v,phe,QDo,HDo,lV,UDo,JDo,YDo,kv,_he,KDo,ZDo,iV,eGo,oGo,rGo,Sv,tGo,uhe,aGo,nGo,bhe,sGo,lGo,Rv,Aje,Ji,Pv,vhe,Ky,iGo,Fhe,dGo,yje,Io,Zy,cGo,Yi,fGo,dV,mGo,gGo,cV,hGo,pGo,_Go,eL,uGo,The,bGo,vGo,FGo,ft,oL,TGo,Mhe,MGo,EGo,Ki,CGo,Ehe,wGo,AGo,fV,yGo,LGo,xGo,Bv,$Go,ao,rL,kGo,Che,SGo,RGo,Ia,PGo,whe,BGo,IGo,Ahe,NGo,qGo,yhe,jGo,DGo,GGo,U,Iv,Lhe,OGo,VGo,mV,XGo,zGo,WGo,Nv,xhe,QGo,HGo,gV,UGo,JGo,YGo,qv,$he,KGo,ZGo,hV,eOo,oOo,rOo,jv,khe,tOo,aOo,pV,nOo,sOo,lOo,Dv,She,iOo,dOo,_V,cOo,fOo,mOo,Gv,Rhe,gOo,hOo,uV,pOo,_Oo,uOo,Ov,Phe,bOo,vOo,bV,FOo,TOo,MOo,Vv,Bhe,EOo,COo,vV,wOo,AOo,yOo,Xv,Ihe,LOo,xOo,FV,$Oo,kOo,SOo,zv,Nhe,ROo,POo,TV,BOo,IOo,NOo,Wv,qhe,qOo,jOo,MV,DOo,GOo,OOo,Qv,jhe,VOo,XOo,EV,zOo,WOo,QOo,Hv,Dhe,HOo,UOo,CV,JOo,YOo,KOo,Uv,Ghe,ZOo,eVo,wV,oVo,rVo,tVo,Jv,Ohe,aVo,nVo,AV,sVo,lVo,iVo,Yv,Vhe,dVo,cVo,yV,fVo,mVo,gVo,Kv,Xhe,hVo,pVo,LV,_Vo,uVo,bVo,Zv,zhe,vVo,FVo,xV,TVo,MVo,EVo,eF,Whe,CVo,wVo,$V,AVo,yVo,LVo,oF,Qhe,xVo,$Vo,kV,kVo,SVo,RVo,rF,Hhe,PVo,BVo,SV,IVo,NVo,qVo,tF,Uhe,jVo,DVo,RV,GVo,OVo,VVo,aF,Jhe,XVo,zVo,PV,WVo,QVo,HVo,nF,Yhe,UVo,JVo,BV,YVo,KVo,ZVo,sF,Khe,eXo,oXo,IV,rXo,tXo,aXo,lF,Zhe,nXo,sXo,NV,lXo,iXo,dXo,iF,epe,cXo,fXo,qV,mXo,gXo,hXo,dF,ope,pXo,_Xo,jV,uXo,bXo,vXo,cF,rpe,FXo,TXo,DV,MXo,EXo,CXo,fF,tpe,wXo,AXo,GV,yXo,LXo,xXo,mF,ape,$Xo,kXo,OV,SXo,RXo,PXo,gF,npe,BXo,IXo,VV,NXo,qXo,jXo,hF,spe,DXo,GXo,XV,OXo,VXo,XXo,pF,lpe,zXo,WXo,zV,QXo,HXo,UXo,_F,JXo,ipe,YXo,KXo,dpe,ZXo,ezo,uF,Lje,Zi,bF,cpe,tL,ozo,fpe,rzo,xje,No,aL,tzo,ed,azo,WV,nzo,szo,QV,lzo,izo,dzo,nL,czo,mpe,fzo,mzo,gzo,mt,sL,hzo,gpe,pzo,_zo,od,uzo,hpe,bzo,vzo,HV,Fzo,Tzo,Mzo,vF,Ezo,no,lL,Czo,ppe,wzo,Azo,Na,yzo,_pe,Lzo,xzo,upe,$zo,kzo,bpe,Szo,Rzo,Pzo,V,FF,vpe,Bzo,Izo,UV,Nzo,qzo,jzo,TF,Fpe,Dzo,Gzo,JV,Ozo,Vzo,Xzo,MF,Tpe,zzo,Wzo,YV,Qzo,Hzo,Uzo,EF,Mpe,Jzo,Yzo,KV,Kzo,Zzo,eWo,CF,Epe,oWo,rWo,ZV,tWo,aWo,nWo,wF,Cpe,sWo,lWo,eX,iWo,dWo,cWo,AF,wpe,fWo,mWo,oX,gWo,hWo,pWo,yF,Ape,_Wo,uWo,rX,bWo,vWo,FWo,LF,ype,TWo,MWo,tX,EWo,CWo,wWo,xF,Lpe,AWo,yWo,aX,LWo,xWo,$Wo,$F,xpe,kWo,SWo,nX,RWo,PWo,BWo,kF,$pe,IWo,NWo,sX,qWo,jWo,DWo,SF,kpe,GWo,OWo,lX,VWo,XWo,zWo,RF,Spe,WWo,QWo,iX,HWo,UWo,JWo,PF,Rpe,YWo,KWo,dX,ZWo,eQo,oQo,BF,Ppe,rQo,tQo,cX,aQo,nQo,sQo,IF,Bpe,lQo,iQo,fX,dQo,cQo,fQo,NF,Ipe,mQo,gQo,mX,hQo,pQo,_Qo,qF,Npe,uQo,bQo,gX,vQo,FQo,TQo,jF,qpe,MQo,EQo,hX,CQo,wQo,AQo,DF,jpe,yQo,LQo,pX,xQo,$Qo,kQo,GF,Dpe,SQo,RQo,_X,PQo,BQo,IQo,OF,Gpe,NQo,qQo,uX,jQo,DQo,GQo,VF,Ope,OQo,VQo,bX,XQo,zQo,WQo,XF,Vpe,QQo,HQo,vX,UQo,JQo,YQo,zF,Xpe,KQo,ZQo,FX,eHo,oHo,rHo,WF,zpe,tHo,aHo,TX,nHo,sHo,lHo,QF,Wpe,iHo,dHo,MX,cHo,fHo,mHo,HF,Qpe,gHo,hHo,EX,pHo,_Ho,uHo,UF,Hpe,bHo,vHo,CX,FHo,THo,MHo,JF,Upe,EHo,CHo,wX,wHo,AHo,yHo,YF,Jpe,LHo,xHo,AX,$Ho,kHo,SHo,KF,Ype,RHo,PHo,yX,BHo,IHo,NHo,ZF,Kpe,qHo,jHo,LX,DHo,GHo,OHo,e6,Zpe,VHo,XHo,xX,zHo,WHo,QHo,o6,e_e,HHo,UHo,$X,JHo,YHo,KHo,r6,o_e,ZHo,eUo,kX,oUo,rUo,tUo,t6,r_e,aUo,nUo,SX,sUo,lUo,iUo,a6,t_e,dUo,cUo,RX,fUo,mUo,gUo,n6,a_e,hUo,pUo,PX,_Uo,uUo,bUo,s6,vUo,n_e,FUo,TUo,s_e,MUo,EUo,l6,$je,rd,i6,l_e,iL,CUo,i_e,wUo,kje,qo,dL,AUo,td,yUo,BX,LUo,xUo,IX,$Uo,kUo,SUo,cL,RUo,d_e,PUo,BUo,IUo,gt,fL,NUo,c_e,qUo,jUo,ad,DUo,f_e,GUo,OUo,NX,VUo,XUo,zUo,d6,WUo,so,mL,QUo,m_e,HUo,UUo,qa,JUo,g_e,YUo,KUo,h_e,ZUo,eJo,p_e,oJo,rJo,tJo,__e,c6,u_e,aJo,nJo,qX,sJo,lJo,iJo,f6,dJo,b_e,cJo,fJo,v_e,mJo,gJo,m6,Sje,nd,g6,F_e,gL,hJo,T_e,pJo,Rje,jo,hL,_Jo,sd,uJo,jX,bJo,vJo,DX,FJo,TJo,MJo,pL,EJo,M_e,CJo,wJo,AJo,ht,_L,yJo,E_e,LJo,xJo,ld,$Jo,C_e,kJo,SJo,GX,RJo,PJo,BJo,h6,IJo,lo,uL,NJo,w_e,qJo,jJo,ja,DJo,A_e,GJo,OJo,y_e,VJo,XJo,L_e,zJo,WJo,QJo,ve,p6,x_e,HJo,UJo,OX,JJo,YJo,KJo,_6,$_e,ZJo,eYo,VX,oYo,rYo,tYo,u6,k_e,aYo,nYo,XX,sYo,lYo,iYo,b6,S_e,dYo,cYo,zX,fYo,mYo,gYo,Bs,R_e,hYo,pYo,WX,_Yo,uYo,QX,bYo,vYo,FYo,v6,P_e,TYo,MYo,HX,EYo,CYo,wYo,Is,B_e,AYo,yYo,UX,LYo,xYo,JX,$Yo,kYo,SYo,pt,I_e,RYo,PYo,YX,BYo,IYo,KX,NYo,qYo,ZX,jYo,DYo,GYo,F6,N_e,OYo,VYo,ez,XYo,zYo,WYo,T6,q_e,QYo,HYo,oz,UYo,JYo,YYo,M6,j_e,KYo,ZYo,rz,eKo,oKo,rKo,E6,D_e,tKo,aKo,tz,nKo,sKo,lKo,C6,G_e,iKo,dKo,az,cKo,fKo,mKo,w6,O_e,gKo,hKo,nz,pKo,_Ko,uKo,A6,V_e,bKo,vKo,sz,FKo,TKo,MKo,y6,EKo,X_e,CKo,wKo,z_e,AKo,yKo,L6,Pje,id,x6,W_e,bL,LKo,Q_e,xKo,Bje,Do,vL,$Ko,dd,kKo,lz,SKo,RKo,iz,PKo,BKo,IKo,FL,NKo,H_e,qKo,jKo,DKo,_t,TL,GKo,U_e,OKo,VKo,cd,XKo,J_e,zKo,WKo,dz,QKo,HKo,UKo,$6,JKo,io,ML,YKo,Y_e,KKo,ZKo,Da,eZo,K_e,oZo,rZo,Z_e,tZo,aZo,eue,nZo,sZo,lZo,oue,k6,rue,iZo,dZo,cz,cZo,fZo,mZo,S6,gZo,tue,hZo,pZo,aue,_Zo,uZo,R6,Ije,fd,P6,nue,EL,bZo,sue,vZo,Nje,Go,CL,FZo,md,TZo,fz,MZo,EZo,mz,CZo,wZo,AZo,wL,yZo,lue,LZo,xZo,$Zo,ut,AL,kZo,iue,SZo,RZo,gd,PZo,due,BZo,IZo,gz,NZo,qZo,jZo,B6,DZo,co,yL,GZo,cue,OZo,VZo,Ga,XZo,fue,zZo,WZo,mue,QZo,HZo,gue,UZo,JZo,YZo,Re,I6,hue,KZo,ZZo,hz,eer,oer,rer,N6,pue,ter,aer,pz,ner,ser,ler,q6,_ue,ier,der,_z,cer,fer,mer,j6,uue,ger,her,uz,per,_er,uer,D6,bue,ber,ver,bz,Fer,Ter,Mer,G6,vue,Eer,Cer,vz,wer,Aer,yer,O6,Fue,Ler,xer,Fz,$er,ker,Ser,V6,Tue,Rer,Per,Tz,Ber,Ier,Ner,X6,Mue,qer,jer,Mz,Der,Ger,Oer,z6,Ver,Eue,Xer,zer,Cue,Wer,Qer,W6,qje,hd,Q6,wue,LL,Her,Aue,Uer,jje,Oo,xL,Jer,pd,Yer,Ez,Ker,Zer,Cz,eor,oor,ror,$L,tor,yue,aor,nor,sor,bt,kL,lor,Lue,ior,dor,_d,cor,xue,mor,gor,wz,hor,por,_or,H6,uor,fo,SL,bor,$ue,vor,For,Oa,Tor,kue,Mor,Eor,Sue,Cor,wor,Rue,Aor,yor,Lor,Kr,U6,Pue,xor,$or,Az,kor,Sor,Ror,J6,Bue,Por,Bor,yz,Ior,Nor,qor,Y6,Iue,jor,Dor,Lz,Gor,Oor,Vor,K6,Nue,Xor,zor,xz,Wor,Qor,Hor,Z6,que,Uor,Jor,$z,Yor,Kor,Zor,eT,err,jue,orr,rrr,Due,trr,arr,oT,Dje,ud,rT,Gue,RL,nrr,Oue,srr,Gje,Vo,PL,lrr,bd,irr,kz,drr,crr,Sz,frr,mrr,grr,BL,hrr,Vue,prr,_rr,urr,vt,IL,brr,Xue,vrr,Frr,vd,Trr,zue,Mrr,Err,Rz,Crr,wrr,Arr,tT,yrr,mo,NL,Lrr,Wue,xrr,$rr,Va,krr,Que,Srr,Rrr,Hue,Prr,Brr,Uue,Irr,Nrr,qrr,ye,aT,Jue,jrr,Drr,Pz,Grr,Orr,Vrr,nT,Yue,Xrr,zrr,Bz,Wrr,Qrr,Hrr,sT,Kue,Urr,Jrr,Iz,Yrr,Krr,Zrr,lT,Zue,etr,otr,Nz,rtr,ttr,atr,iT,e2e,ntr,str,qz,ltr,itr,dtr,dT,o2e,ctr,ftr,jz,mtr,gtr,htr,cT,r2e,ptr,_tr,Dz,utr,btr,vtr,fT,t2e,Ftr,Ttr,Gz,Mtr,Etr,Ctr,mT,a2e,wtr,Atr,Oz,ytr,Ltr,xtr,gT,n2e,$tr,ktr,Vz,Str,Rtr,Ptr,hT,Btr,s2e,Itr,Ntr,l2e,qtr,jtr,pT,Oje,Fd,_T,i2e,qL,Dtr,d2e,Gtr,Vje,Xo,jL,Otr,Td,Vtr,Xz,Xtr,ztr,zz,Wtr,Qtr,Htr,DL,Utr,c2e,Jtr,Ytr,Ktr,Ft,GL,Ztr,f2e,ear,oar,Md,rar,m2e,tar,aar,Wz,nar,sar,lar,uT,iar,go,OL,dar,g2e,car,far,Xa,mar,h2e,gar,har,p2e,par,_ar,_2e,uar,bar,Far,VL,bT,u2e,Tar,Mar,Qz,Ear,Car,war,vT,b2e,Aar,yar,Hz,Lar,xar,$ar,FT,kar,v2e,Sar,Rar,F2e,Par,Bar,TT,Xje,Ed,MT,T2e,XL,Iar,M2e,Nar,zje,zo,zL,qar,Cd,jar,Uz,Dar,Gar,Jz,Oar,Var,Xar,WL,zar,E2e,War,Qar,Har,Tt,QL,Uar,C2e,Jar,Yar,wd,Kar,w2e,Zar,enr,Yz,onr,rnr,tnr,ET,anr,ho,HL,nnr,A2e,snr,lnr,za,inr,y2e,dnr,cnr,L2e,fnr,mnr,x2e,gnr,hnr,pnr,Zr,CT,$2e,_nr,unr,Kz,bnr,vnr,Fnr,wT,k2e,Tnr,Mnr,Zz,Enr,Cnr,wnr,AT,S2e,Anr,ynr,eW,Lnr,xnr,$nr,yT,R2e,knr,Snr,oW,Rnr,Pnr,Bnr,LT,P2e,Inr,Nnr,rW,qnr,jnr,Dnr,xT,Gnr,B2e,Onr,Vnr,I2e,Xnr,znr,$T,Wje,Ad,kT,N2e,UL,Wnr,q2e,Qnr,Qje,Wo,JL,Hnr,yd,Unr,tW,Jnr,Ynr,aW,Knr,Znr,esr,YL,osr,j2e,rsr,tsr,asr,Mt,KL,nsr,D2e,ssr,lsr,Ld,isr,G2e,dsr,csr,nW,fsr,msr,gsr,ST,hsr,po,ZL,psr,O2e,_sr,usr,Wa,bsr,V2e,vsr,Fsr,X2e,Tsr,Msr,z2e,Esr,Csr,wsr,xd,RT,W2e,Asr,ysr,sW,Lsr,xsr,$sr,PT,Q2e,ksr,Ssr,lW,Rsr,Psr,Bsr,BT,H2e,Isr,Nsr,iW,qsr,jsr,Dsr,IT,Gsr,U2e,Osr,Vsr,J2e,Xsr,zsr,NT,Hje,$d,qT,Y2e,e8,Wsr,K2e,Qsr,Uje,Qo,o8,Hsr,kd,Usr,dW,Jsr,Ysr,cW,Ksr,Zsr,elr,r8,olr,Z2e,rlr,tlr,alr,Et,t8,nlr,e1e,slr,llr,Sd,ilr,o1e,dlr,clr,fW,flr,mlr,glr,jT,hlr,_o,a8,plr,r1e,_lr,ulr,Qa,blr,t1e,vlr,Flr,a1e,Tlr,Mlr,n1e,Elr,Clr,wlr,n8,DT,s1e,Alr,ylr,mW,Llr,xlr,$lr,GT,l1e,klr,Slr,gW,Rlr,Plr,Blr,OT,Ilr,i1e,Nlr,qlr,d1e,jlr,Dlr,VT,Jje,Rd,XT,c1e,s8,Glr,f1e,Olr,Yje,Ho,l8,Vlr,Pd,Xlr,hW,zlr,Wlr,pW,Qlr,Hlr,Ulr,i8,Jlr,m1e,Ylr,Klr,Zlr,Ct,d8,eir,g1e,oir,rir,Bd,tir,h1e,air,nir,_W,sir,lir,iir,zT,dir,uo,c8,cir,p1e,fir,mir,Ha,gir,_1e,hir,pir,u1e,_ir,uir,b1e,bir,vir,Fir,v1e,WT,F1e,Tir,Mir,uW,Eir,Cir,wir,QT,Air,T1e,yir,Lir,M1e,xir,$ir,HT,Kje,Id,UT,E1e,f8,kir,C1e,Sir,Zje,Uo,m8,Rir,Nd,Pir,bW,Bir,Iir,vW,Nir,qir,jir,g8,Dir,w1e,Gir,Oir,Vir,wt,h8,Xir,A1e,zir,Wir,qd,Qir,y1e,Hir,Uir,FW,Jir,Yir,Kir,JT,Zir,bo,p8,edr,L1e,odr,rdr,Ua,tdr,x1e,adr,ndr,$1e,sdr,ldr,k1e,idr,ddr,cdr,Ja,YT,S1e,fdr,mdr,TW,gdr,hdr,pdr,KT,R1e,_dr,udr,MW,bdr,vdr,Fdr,ZT,P1e,Tdr,Mdr,EW,Edr,Cdr,wdr,e7,B1e,Adr,ydr,CW,Ldr,xdr,$dr,o7,kdr,I1e,Sdr,Rdr,N1e,Pdr,Bdr,r7,eDe,jd,t7,q1e,_8,Idr,j1e,Ndr,oDe,Jo,u8,qdr,Dd,jdr,wW,Ddr,Gdr,AW,Odr,Vdr,Xdr,b8,zdr,D1e,Wdr,Qdr,Hdr,At,v8,Udr,G1e,Jdr,Ydr,Gd,Kdr,O1e,Zdr,ecr,yW,ocr,rcr,tcr,a7,acr,vo,F8,ncr,V1e,scr,lcr,Ya,icr,X1e,dcr,ccr,z1e,fcr,mcr,W1e,gcr,hcr,pcr,Q1e,n7,H1e,_cr,ucr,LW,bcr,vcr,Fcr,s7,Tcr,U1e,Mcr,Ecr,J1e,Ccr,wcr,l7,rDe,Od,i7,Y1e,T8,Acr,K1e,ycr,tDe,Yo,M8,Lcr,Vd,xcr,xW,$cr,kcr,$W,Scr,Rcr,Pcr,E8,Bcr,Z1e,Icr,Ncr,qcr,yt,C8,jcr,ebe,Dcr,Gcr,Xd,Ocr,obe,Vcr,Xcr,kW,zcr,Wcr,Qcr,d7,Hcr,wr,w8,Ucr,rbe,Jcr,Ycr,Ka,Kcr,tbe,Zcr,efr,abe,ofr,rfr,nbe,tfr,afr,nfr,q,c7,sbe,sfr,lfr,SW,ifr,dfr,cfr,f7,lbe,ffr,mfr,RW,gfr,hfr,pfr,m7,ibe,_fr,ufr,PW,bfr,vfr,Ffr,g7,dbe,Tfr,Mfr,BW,Efr,Cfr,wfr,h7,cbe,Afr,yfr,IW,Lfr,xfr,$fr,p7,fbe,kfr,Sfr,NW,Rfr,Pfr,Bfr,_7,mbe,Ifr,Nfr,qW,qfr,jfr,Dfr,u7,gbe,Gfr,Ofr,jW,Vfr,Xfr,zfr,b7,hbe,Wfr,Qfr,DW,Hfr,Ufr,Jfr,v7,pbe,Yfr,Kfr,GW,Zfr,emr,omr,F7,_be,rmr,tmr,OW,amr,nmr,smr,T7,ube,lmr,imr,VW,dmr,cmr,fmr,M7,bbe,mmr,gmr,XW,hmr,pmr,_mr,E7,vbe,umr,bmr,zW,vmr,Fmr,Tmr,C7,Fbe,Mmr,Emr,WW,Cmr,wmr,Amr,w7,Tbe,ymr,Lmr,QW,xmr,$mr,kmr,A7,Mbe,Smr,Rmr,HW,Pmr,Bmr,Imr,Ns,Ebe,Nmr,qmr,UW,jmr,Dmr,JW,Gmr,Omr,Vmr,y7,Cbe,Xmr,zmr,YW,Wmr,Qmr,Hmr,L7,wbe,Umr,Jmr,KW,Ymr,Kmr,Zmr,x7,Abe,egr,ogr,ZW,rgr,tgr,agr,$7,ybe,ngr,sgr,eQ,lgr,igr,dgr,k7,Lbe,cgr,fgr,oQ,mgr,ggr,hgr,S7,xbe,pgr,_gr,rQ,ugr,bgr,vgr,R7,$be,Fgr,Tgr,tQ,Mgr,Egr,Cgr,P7,kbe,wgr,Agr,aQ,ygr,Lgr,xgr,B7,Sbe,$gr,kgr,nQ,Sgr,Rgr,Pgr,I7,Rbe,Bgr,Igr,sQ,Ngr,qgr,jgr,N7,Pbe,Dgr,Ggr,lQ,Ogr,Vgr,Xgr,q7,Bbe,zgr,Wgr,iQ,Qgr,Hgr,Ugr,j7,Ibe,Jgr,Ygr,dQ,Kgr,Zgr,ehr,D7,Nbe,ohr,rhr,cQ,thr,ahr,nhr,G7,qbe,shr,lhr,fQ,ihr,dhr,chr,O7,jbe,fhr,mhr,mQ,ghr,hhr,phr,V7,Dbe,_hr,uhr,gQ,bhr,vhr,Fhr,X7,Gbe,Thr,Mhr,hQ,Ehr,Chr,whr,z7,Obe,Ahr,yhr,pQ,Lhr,xhr,$hr,W7,Vbe,khr,Shr,_Q,Rhr,Phr,Bhr,Q7,Xbe,Ihr,Nhr,uQ,qhr,jhr,Dhr,H7,zbe,Ghr,Ohr,bQ,Vhr,Xhr,zhr,U7,Wbe,Whr,Qhr,vQ,Hhr,Uhr,Jhr,J7,Qbe,Yhr,Khr,FQ,Zhr,epr,opr,Y7,Hbe,rpr,tpr,TQ,apr,npr,spr,K7,Ube,lpr,ipr,MQ,dpr,cpr,fpr,Z7,Jbe,mpr,gpr,EQ,hpr,ppr,_pr,eM,Ybe,upr,bpr,CQ,vpr,Fpr,Tpr,oM,Kbe,Mpr,Epr,wQ,Cpr,wpr,Apr,rM,aDe,zd,tM,Zbe,A8,ypr,eve,Lpr,nDe,Ko,y8,xpr,Wd,$pr,AQ,kpr,Spr,yQ,Rpr,Ppr,Bpr,L8,Ipr,ove,Npr,qpr,jpr,Lt,x8,Dpr,rve,Gpr,Opr,Qd,Vpr,tve,Xpr,zpr,LQ,Wpr,Qpr,Hpr,aM,Upr,Ar,$8,Jpr,ave,Ypr,Kpr,Za,Zpr,nve,e_r,o_r,sve,r_r,t_r,lve,a_r,n_r,s_r,se,nM,ive,l_r,i_r,xQ,d_r,c_r,f_r,sM,dve,m_r,g_r,$Q,h_r,p_r,__r,lM,cve,u_r,b_r,kQ,v_r,F_r,T_r,iM,fve,M_r,E_r,SQ,C_r,w_r,A_r,dM,mve,y_r,L_r,RQ,x_r,$_r,k_r,cM,gve,S_r,R_r,PQ,P_r,B_r,I_r,fM,hve,N_r,q_r,BQ,j_r,D_r,G_r,mM,pve,O_r,V_r,IQ,X_r,z_r,W_r,gM,_ve,Q_r,H_r,NQ,U_r,J_r,Y_r,hM,uve,K_r,Z_r,qQ,eur,our,rur,pM,bve,tur,aur,jQ,nur,sur,lur,_M,vve,iur,dur,DQ,cur,fur,mur,uM,Fve,gur,hur,GQ,pur,_ur,uur,bM,Tve,bur,vur,OQ,Fur,Tur,Mur,vM,Mve,Eur,Cur,VQ,wur,Aur,yur,FM,Eve,Lur,xur,XQ,$ur,kur,Sur,TM,Cve,Rur,Pur,zQ,Bur,Iur,Nur,MM,wve,qur,jur,WQ,Dur,Gur,Our,EM,Ave,Vur,Xur,QQ,zur,Wur,Qur,CM,yve,Hur,Uur,HQ,Jur,Yur,Kur,wM,Lve,Zur,e2r,UQ,o2r,r2r,t2r,AM,xve,a2r,n2r,JQ,s2r,l2r,i2r,yM,$ve,d2r,c2r,YQ,f2r,m2r,g2r,LM,sDe,Hd,xM,kve,k8,h2r,Sve,p2r,lDe,Zo,S8,_2r,Ud,u2r,KQ,b2r,v2r,ZQ,F2r,T2r,M2r,R8,E2r,Rve,C2r,w2r,A2r,xt,P8,y2r,Pve,L2r,x2r,Jd,$2r,Bve,k2r,S2r,eH,R2r,P2r,B2r,$M,I2r,yr,B8,N2r,Ive,q2r,j2r,en,D2r,Nve,G2r,O2r,qve,V2r,X2r,jve,z2r,W2r,Q2r,Me,kM,Dve,H2r,U2r,oH,J2r,Y2r,K2r,SM,Gve,Z2r,e1r,rH,o1r,r1r,t1r,RM,Ove,a1r,n1r,tH,s1r,l1r,i1r,PM,Vve,d1r,c1r,aH,f1r,m1r,g1r,BM,Xve,h1r,p1r,nH,_1r,u1r,b1r,IM,zve,v1r,F1r,sH,T1r,M1r,E1r,NM,Wve,C1r,w1r,lH,A1r,y1r,L1r,qM,Qve,x1r,$1r,iH,k1r,S1r,R1r,jM,Hve,P1r,B1r,dH,I1r,N1r,q1r,DM,Uve,j1r,D1r,cH,G1r,O1r,V1r,GM,Jve,X1r,z1r,fH,W1r,Q1r,H1r,OM,Yve,U1r,J1r,mH,Y1r,K1r,Z1r,VM,Kve,ebr,obr,gH,rbr,tbr,abr,XM,iDe,Yd,zM,Zve,I8,nbr,eFe,sbr,dDe,er,N8,lbr,Kd,ibr,hH,dbr,cbr,pH,fbr,mbr,gbr,q8,hbr,oFe,pbr,_br,ubr,$t,j8,bbr,rFe,vbr,Fbr,Zd,Tbr,tFe,Mbr,Ebr,_H,Cbr,wbr,Abr,WM,ybr,Lr,D8,Lbr,aFe,xbr,$br,on,kbr,nFe,Sbr,Rbr,sFe,Pbr,Bbr,lFe,Ibr,Nbr,qbr,rn,QM,iFe,jbr,Dbr,uH,Gbr,Obr,Vbr,HM,dFe,Xbr,zbr,bH,Wbr,Qbr,Hbr,UM,cFe,Ubr,Jbr,vH,Ybr,Kbr,Zbr,JM,fFe,evr,ovr,FH,rvr,tvr,avr,YM,cDe,ec,KM,mFe,G8,nvr,gFe,svr,fDe,or,O8,lvr,oc,ivr,TH,dvr,cvr,MH,fvr,mvr,gvr,V8,hvr,hFe,pvr,_vr,uvr,kt,X8,bvr,pFe,vvr,Fvr,rc,Tvr,_Fe,Mvr,Evr,EH,Cvr,wvr,Avr,ZM,yvr,xr,z8,Lvr,uFe,xvr,$vr,tn,kvr,bFe,Svr,Rvr,vFe,Pvr,Bvr,FFe,Ivr,Nvr,qvr,ie,e4,TFe,jvr,Dvr,CH,Gvr,Ovr,Vvr,o4,MFe,Xvr,zvr,wH,Wvr,Qvr,Hvr,r4,EFe,Uvr,Jvr,AH,Yvr,Kvr,Zvr,t4,CFe,eFr,oFr,yH,rFr,tFr,aFr,a4,wFe,nFr,sFr,LH,lFr,iFr,dFr,n4,AFe,cFr,fFr,xH,mFr,gFr,hFr,s4,yFe,pFr,_Fr,$H,uFr,bFr,vFr,l4,LFe,FFr,TFr,kH,MFr,EFr,CFr,i4,xFe,wFr,AFr,SH,yFr,LFr,xFr,d4,$Fe,$Fr,kFr,RH,SFr,RFr,PFr,c4,kFe,BFr,IFr,PH,NFr,qFr,jFr,f4,SFe,DFr,GFr,BH,OFr,VFr,XFr,m4,RFe,zFr,WFr,IH,QFr,HFr,UFr,g4,PFe,JFr,YFr,NH,KFr,ZFr,e6r,h4,BFe,o6r,r6r,qH,t6r,a6r,n6r,p4,IFe,s6r,l6r,jH,i6r,d6r,c6r,_4,NFe,f6r,m6r,DH,g6r,h6r,p6r,u4,qFe,_6r,u6r,GH,b6r,v6r,F6r,b4,jFe,T6r,M6r,OH,E6r,C6r,w6r,v4,DFe,A6r,y6r,VH,L6r,x6r,$6r,F4,mDe,tc,T4,GFe,W8,k6r,OFe,S6r,gDe,rr,Q8,R6r,ac,P6r,XH,B6r,I6r,zH,N6r,q6r,j6r,H8,D6r,VFe,G6r,O6r,V6r,St,U8,X6r,XFe,z6r,W6r,nc,Q6r,zFe,H6r,U6r,WH,J6r,Y6r,K6r,M4,Z6r,$r,J8,eTr,WFe,oTr,rTr,an,tTr,QFe,aTr,nTr,HFe,sTr,lTr,UFe,iTr,dTr,cTr,Le,E4,JFe,fTr,mTr,QH,gTr,hTr,pTr,C4,YFe,_Tr,uTr,HH,bTr,vTr,FTr,w4,KFe,TTr,MTr,UH,ETr,CTr,wTr,A4,ZFe,ATr,yTr,JH,LTr,xTr,$Tr,y4,e6e,kTr,STr,YH,RTr,PTr,BTr,L4,o6e,ITr,NTr,KH,qTr,jTr,DTr,x4,r6e,GTr,OTr,ZH,VTr,XTr,zTr,$4,t6e,WTr,QTr,eU,HTr,UTr,JTr,k4,a6e,YTr,KTr,oU,ZTr,e7r,o7r,S4,n6e,r7r,t7r,rU,a7r,n7r,s7r,R4,hDe,sc,P4,s6e,Y8,l7r,l6e,i7r,pDe,tr,K8,d7r,lc,c7r,tU,f7r,m7r,aU,g7r,h7r,p7r,Z8,_7r,i6e,u7r,b7r,v7r,Rt,e9,F7r,d6e,T7r,M7r,ic,E7r,c6e,C7r,w7r,nU,A7r,y7r,L7r,B4,x7r,kr,o9,$7r,f6e,k7r,S7r,nn,R7r,m6e,P7r,B7r,g6e,I7r,N7r,h6e,q7r,j7r,D7r,oe,I4,p6e,G7r,O7r,sU,V7r,X7r,z7r,N4,_6e,W7r,Q7r,lU,H7r,U7r,J7r,q4,u6e,Y7r,K7r,iU,Z7r,eMr,oMr,j4,b6e,rMr,tMr,dU,aMr,nMr,sMr,D4,v6e,lMr,iMr,cU,dMr,cMr,fMr,G4,F6e,mMr,gMr,fU,hMr,pMr,_Mr,O4,T6e,uMr,bMr,mU,vMr,FMr,TMr,V4,M6e,MMr,EMr,gU,CMr,wMr,AMr,X4,E6e,yMr,LMr,hU,xMr,$Mr,kMr,z4,C6e,SMr,RMr,pU,PMr,BMr,IMr,W4,w6e,NMr,qMr,_U,jMr,DMr,GMr,Q4,A6e,OMr,VMr,uU,XMr,zMr,WMr,H4,y6e,QMr,HMr,bU,UMr,JMr,YMr,U4,L6e,KMr,ZMr,vU,e4r,o4r,r4r,J4,x6e,t4r,a4r,FU,n4r,s4r,l4r,Y4,$6e,i4r,d4r,TU,c4r,f4r,m4r,K4,k6e,g4r,h4r,MU,p4r,_4r,u4r,Z4,S6e,b4r,v4r,EU,F4r,T4r,M4r,eE,R6e,E4r,C4r,CU,w4r,A4r,y4r,oE,P6e,L4r,x4r,wU,$4r,k4r,S4r,rE,B6e,R4r,P4r,AU,B4r,I4r,N4r,tE,I6e,q4r,j4r,yU,D4r,G4r,O4r,aE,N6e,V4r,X4r,LU,z4r,W4r,Q4r,nE,q6e,H4r,U4r,xU,J4r,Y4r,K4r,sE,j6e,Z4r,eEr,$U,oEr,rEr,tEr,lE,D6e,aEr,nEr,kU,sEr,lEr,iEr,iE,_De,dc,dE,G6e,r9,dEr,O6e,cEr,uDe,ar,t9,fEr,cc,mEr,SU,gEr,hEr,RU,pEr,_Er,uEr,a9,bEr,V6e,vEr,FEr,TEr,Pt,n9,MEr,X6e,EEr,CEr,fc,wEr,z6e,AEr,yEr,PU,LEr,xEr,$Er,cE,kEr,Sr,s9,SEr,W6e,REr,PEr,sn,BEr,Q6e,IEr,NEr,H6e,qEr,jEr,U6e,DEr,GEr,OEr,pe,fE,J6e,VEr,XEr,BU,zEr,WEr,QEr,mE,Y6e,HEr,UEr,IU,JEr,YEr,KEr,gE,K6e,ZEr,eCr,NU,oCr,rCr,tCr,hE,Z6e,aCr,nCr,qU,sCr,lCr,iCr,pE,eTe,dCr,cCr,jU,fCr,mCr,gCr,_E,oTe,hCr,pCr,DU,_Cr,uCr,bCr,uE,rTe,vCr,FCr,GU,TCr,MCr,ECr,bE,tTe,CCr,wCr,OU,ACr,yCr,LCr,vE,aTe,xCr,$Cr,VU,kCr,SCr,RCr,FE,nTe,PCr,BCr,XU,ICr,NCr,qCr,TE,sTe,jCr,DCr,zU,GCr,OCr,VCr,ME,lTe,XCr,zCr,WU,WCr,QCr,HCr,EE,iTe,UCr,JCr,QU,YCr,KCr,ZCr,CE,dTe,e5r,o5r,HU,r5r,t5r,a5r,wE,cTe,n5r,s5r,UU,l5r,i5r,d5r,AE,fTe,c5r,f5r,JU,m5r,g5r,h5r,yE,mTe,p5r,_5r,YU,u5r,b5r,v5r,LE,bDe,mc,xE,gTe,l9,F5r,hTe,T5r,vDe,nr,i9,M5r,gc,E5r,KU,C5r,w5r,ZU,A5r,y5r,L5r,d9,x5r,pTe,$5r,k5r,S5r,Bt,c9,R5r,_Te,P5r,B5r,hc,I5r,uTe,N5r,q5r,eJ,j5r,D5r,G5r,$E,O5r,Rr,f9,V5r,bTe,X5r,z5r,ln,W5r,vTe,Q5r,H5r,FTe,U5r,J5r,TTe,Y5r,K5r,Z5r,m9,kE,MTe,e3r,o3r,oJ,r3r,t3r,a3r,SE,ETe,n3r,s3r,rJ,l3r,i3r,d3r,RE,FDe,pc,PE,CTe,g9,c3r,wTe,f3r,TDe,sr,h9,m3r,_c,g3r,tJ,h3r,p3r,aJ,_3r,u3r,b3r,p9,v3r,ATe,F3r,T3r,M3r,It,_9,E3r,yTe,C3r,w3r,uc,A3r,LTe,y3r,L3r,nJ,x3r,$3r,k3r,BE,S3r,Pr,u9,R3r,xTe,P3r,B3r,dn,I3r,$Te,N3r,q3r,kTe,j3r,D3r,STe,G3r,O3r,V3r,RTe,IE,PTe,X3r,z3r,sJ,W3r,Q3r,H3r,NE,MDe,bc,qE,BTe,b9,U3r,ITe,J3r,EDe,lr,v9,Y3r,vc,K3r,lJ,Z3r,e0r,iJ,o0r,r0r,t0r,F9,a0r,NTe,n0r,s0r,l0r,Nt,T9,i0r,qTe,d0r,c0r,Fc,f0r,jTe,m0r,g0r,dJ,h0r,p0r,_0r,jE,u0r,Br,M9,b0r,DTe,v0r,F0r,cn,T0r,GTe,M0r,E0r,OTe,C0r,w0r,VTe,A0r,y0r,L0r,de,DE,XTe,x0r,$0r,cJ,k0r,S0r,R0r,GE,zTe,P0r,B0r,fJ,I0r,N0r,q0r,OE,WTe,j0r,D0r,mJ,G0r,O0r,V0r,VE,QTe,X0r,z0r,gJ,W0r,Q0r,H0r,XE,HTe,U0r,J0r,hJ,Y0r,K0r,Z0r,zE,UTe,ewr,owr,pJ,rwr,twr,awr,WE,JTe,nwr,swr,_J,lwr,iwr,dwr,QE,YTe,cwr,fwr,uJ,mwr,gwr,hwr,HE,KTe,pwr,_wr,bJ,uwr,bwr,vwr,UE,ZTe,Fwr,Twr,vJ,Mwr,Ewr,Cwr,JE,e7e,wwr,Awr,FJ,ywr,Lwr,xwr,YE,o7e,$wr,kwr,TJ,Swr,Rwr,Pwr,KE,r7e,Bwr,Iwr,MJ,Nwr,qwr,jwr,ZE,t7e,Dwr,Gwr,EJ,Owr,Vwr,Xwr,eC,a7e,zwr,Wwr,CJ,Qwr,Hwr,Uwr,oC,n7e,Jwr,Ywr,wJ,Kwr,Zwr,eAr,rC,s7e,oAr,rAr,AJ,tAr,aAr,nAr,tC,l7e,sAr,lAr,yJ,iAr,dAr,cAr,aC,i7e,fAr,mAr,LJ,gAr,hAr,pAr,nC,d7e,_Ar,uAr,xJ,bAr,vAr,FAr,sC,CDe,Tc,lC,c7e,E9,TAr,f7e,MAr,wDe,ir,C9,EAr,Mc,CAr,$J,wAr,AAr,kJ,yAr,LAr,xAr,w9,$Ar,m7e,kAr,SAr,RAr,qt,A9,PAr,g7e,BAr,IAr,Ec,NAr,h7e,qAr,jAr,SJ,DAr,GAr,OAr,iC,VAr,Ir,y9,XAr,p7e,zAr,WAr,fn,QAr,_7e,HAr,UAr,u7e,JAr,YAr,b7e,KAr,ZAr,eyr,ce,dC,v7e,oyr,ryr,RJ,tyr,ayr,nyr,cC,F7e,syr,lyr,PJ,iyr,dyr,cyr,fC,T7e,fyr,myr,BJ,gyr,hyr,pyr,mC,M7e,_yr,uyr,IJ,byr,vyr,Fyr,gC,E7e,Tyr,Myr,NJ,Eyr,Cyr,wyr,hC,C7e,Ayr,yyr,qJ,Lyr,xyr,$yr,pC,w7e,kyr,Syr,jJ,Ryr,Pyr,Byr,_C,A7e,Iyr,Nyr,DJ,qyr,jyr,Dyr,uC,y7e,Gyr,Oyr,GJ,Vyr,Xyr,zyr,bC,L7e,Wyr,Qyr,OJ,Hyr,Uyr,Jyr,vC,x7e,Yyr,Kyr,VJ,Zyr,eLr,oLr,FC,$7e,rLr,tLr,XJ,aLr,nLr,sLr,TC,k7e,lLr,iLr,zJ,dLr,cLr,fLr,MC,S7e,mLr,gLr,WJ,hLr,pLr,_Lr,EC,R7e,uLr,bLr,QJ,vLr,FLr,TLr,CC,P7e,MLr,ELr,HJ,CLr,wLr,ALr,wC,B7e,yLr,LLr,UJ,xLr,$Lr,kLr,AC,I7e,SLr,RLr,JJ,PLr,BLr,ILr,yC,N7e,NLr,qLr,YJ,jLr,DLr,GLr,LC,q7e,OLr,VLr,KJ,XLr,zLr,WLr,xC,ADe,Cc,$C,j7e,L9,QLr,D7e,HLr,yDe,dr,x9,ULr,wc,JLr,ZJ,YLr,KLr,eY,ZLr,e8r,o8r,$9,r8r,G7e,t8r,a8r,n8r,jt,k9,s8r,O7e,l8r,i8r,Ac,d8r,V7e,c8r,f8r,oY,m8r,g8r,h8r,kC,p8r,Nr,S9,_8r,X7e,u8r,b8r,mn,v8r,z7e,F8r,T8r,W7e,M8r,E8r,Q7e,C8r,w8r,A8r,H7e,SC,U7e,y8r,L8r,rY,x8r,$8r,k8r,RC,LDe,yc,PC,J7e,R9,S8r,Y7e,R8r,xDe,cr,P9,P8r,Lc,B8r,tY,I8r,N8r,aY,q8r,j8r,D8r,B9,G8r,K7e,O8r,V8r,X8r,Dt,I9,z8r,Z7e,W8r,Q8r,xc,H8r,eMe,U8r,J8r,nY,Y8r,K8r,Z8r,BC,e9r,qr,N9,o9r,oMe,r9r,t9r,gn,a9r,rMe,n9r,s9r,tMe,l9r,i9r,aMe,d9r,c9r,f9r,nMe,IC,sMe,m9r,g9r,sY,h9r,p9r,_9r,NC,$De,$c,qC,lMe,q9,u9r,iMe,b9r,kDe,fr,j9,v9r,kc,F9r,lY,T9r,M9r,iY,E9r,C9r,w9r,D9,A9r,dMe,y9r,L9r,x9r,Gt,G9,$9r,cMe,k9r,S9r,Sc,R9r,fMe,P9r,B9r,dY,I9r,N9r,q9r,jC,j9r,jr,O9,D9r,mMe,G9r,O9r,hn,V9r,gMe,X9r,z9r,hMe,W9r,Q9r,pMe,H9r,U9r,J9r,re,DC,_Me,Y9r,K9r,cY,Z9r,exr,oxr,GC,uMe,rxr,txr,fY,axr,nxr,sxr,OC,bMe,lxr,ixr,mY,dxr,cxr,fxr,VC,vMe,mxr,gxr,gY,hxr,pxr,_xr,XC,FMe,uxr,bxr,hY,vxr,Fxr,Txr,zC,TMe,Mxr,Exr,pY,Cxr,wxr,Axr,WC,MMe,yxr,Lxr,_Y,xxr,$xr,kxr,QC,EMe,Sxr,Rxr,uY,Pxr,Bxr,Ixr,HC,CMe,Nxr,qxr,bY,jxr,Dxr,Gxr,UC,wMe,Oxr,Vxr,vY,Xxr,zxr,Wxr,JC,AMe,Qxr,Hxr,FY,Uxr,Jxr,Yxr,YC,yMe,Kxr,Zxr,TY,e$r,o$r,r$r,KC,LMe,t$r,a$r,MY,n$r,s$r,l$r,ZC,xMe,i$r,d$r,EY,c$r,f$r,m$r,e5,$Me,g$r,h$r,CY,p$r,_$r,u$r,o5,kMe,b$r,v$r,wY,F$r,T$r,M$r,r5,SMe,E$r,C$r,AY,w$r,A$r,y$r,t5,RMe,L$r,x$r,yY,$$r,k$r,S$r,a5,PMe,R$r,P$r,LY,B$r,I$r,N$r,n5,BMe,q$r,j$r,xY,D$r,G$r,O$r,s5,IMe,V$r,X$r,$Y,z$r,W$r,Q$r,l5,NMe,H$r,U$r,kY,J$r,Y$r,K$r,i5,qMe,Z$r,ekr,SY,okr,rkr,tkr,d5,jMe,akr,nkr,RY,skr,lkr,ikr,c5,DMe,dkr,ckr,PY,fkr,mkr,gkr,f5,GMe,hkr,pkr,BY,_kr,ukr,bkr,m5,SDe,Rc,g5,OMe,V9,vkr,VMe,Fkr,RDe,mr,X9,Tkr,Pc,Mkr,IY,Ekr,Ckr,NY,wkr,Akr,ykr,z9,Lkr,XMe,xkr,$kr,kkr,Ot,W9,Skr,zMe,Rkr,Pkr,Bc,Bkr,WMe,Ikr,Nkr,qY,qkr,jkr,Dkr,h5,Gkr,Dr,Q9,Okr,QMe,Vkr,Xkr,pn,zkr,HMe,Wkr,Qkr,UMe,Hkr,Ukr,JMe,Jkr,Ykr,Kkr,xe,p5,YMe,Zkr,eSr,jY,oSr,rSr,tSr,_5,KMe,aSr,nSr,DY,sSr,lSr,iSr,u5,ZMe,dSr,cSr,GY,fSr,mSr,gSr,b5,e4e,hSr,pSr,OY,_Sr,uSr,bSr,v5,o4e,vSr,FSr,VY,TSr,MSr,ESr,F5,r4e,CSr,wSr,XY,ASr,ySr,LSr,T5,t4e,xSr,$Sr,zY,kSr,SSr,RSr,M5,a4e,PSr,BSr,WY,ISr,NSr,qSr,E5,n4e,jSr,DSr,QY,GSr,OSr,VSr,C5,s4e,XSr,zSr,HY,WSr,QSr,HSr,w5,PDe,Ic,A5,l4e,H9,USr,i4e,JSr,BDe,gr,U9,YSr,Nc,KSr,UY,ZSr,eRr,JY,oRr,rRr,tRr,J9,aRr,d4e,nRr,sRr,lRr,Vt,Y9,iRr,c4e,dRr,cRr,qc,fRr,f4e,mRr,gRr,YY,hRr,pRr,_Rr,y5,uRr,Gr,K9,bRr,m4e,vRr,FRr,_n,TRr,g4e,MRr,ERr,h4e,CRr,wRr,p4e,ARr,yRr,LRr,Ee,L5,_4e,xRr,$Rr,KY,kRr,SRr,RRr,x5,u4e,PRr,BRr,ZY,IRr,NRr,qRr,$5,b4e,jRr,DRr,eK,GRr,ORr,VRr,k5,v4e,XRr,zRr,oK,WRr,QRr,HRr,S5,F4e,URr,JRr,rK,YRr,KRr,ZRr,R5,T4e,ePr,oPr,tK,rPr,tPr,aPr,P5,M4e,nPr,sPr,aK,lPr,iPr,dPr,B5,E4e,cPr,fPr,nK,mPr,gPr,hPr,I5,C4e,pPr,_Pr,sK,uPr,bPr,vPr,N5,w4e,FPr,TPr,lK,MPr,EPr,CPr,q5,A4e,wPr,APr,iK,yPr,LPr,xPr,j5,y4e,$Pr,kPr,dK,SPr,RPr,PPr,D5,IDe,jc,G5,L4e,Z9,BPr,x4e,IPr,NDe,hr,ex,NPr,Dc,qPr,cK,jPr,DPr,fK,GPr,OPr,VPr,ox,XPr,$4e,zPr,WPr,QPr,Xt,rx,HPr,k4e,UPr,JPr,Gc,YPr,S4e,KPr,ZPr,mK,eBr,oBr,rBr,O5,tBr,Or,tx,aBr,R4e,nBr,sBr,un,lBr,P4e,iBr,dBr,B4e,cBr,fBr,I4e,mBr,gBr,hBr,$e,V5,N4e,pBr,_Br,gK,uBr,bBr,vBr,X5,q4e,FBr,TBr,hK,MBr,EBr,CBr,z5,j4e,wBr,ABr,pK,yBr,LBr,xBr,W5,D4e,$Br,kBr,_K,SBr,RBr,PBr,Q5,G4e,BBr,IBr,uK,NBr,qBr,jBr,H5,O4e,DBr,GBr,bK,OBr,VBr,XBr,U5,V4e,zBr,WBr,vK,QBr,HBr,UBr,J5,X4e,JBr,YBr,FK,KBr,ZBr,eIr,Y5,z4e,oIr,rIr,TK,tIr,aIr,nIr,K5,W4e,sIr,lIr,MK,iIr,dIr,cIr,Z5,qDe,Oc,e3,Q4e,ax,fIr,H4e,mIr,jDe,pr,nx,gIr,Vc,hIr,EK,pIr,_Ir,CK,uIr,bIr,vIr,sx,FIr,U4e,TIr,MIr,EIr,zt,lx,CIr,J4e,wIr,AIr,Xc,yIr,Y4e,LIr,xIr,wK,$Ir,kIr,SIr,o3,RIr,Vr,ix,PIr,K4e,BIr,IIr,bn,NIr,Z4e,qIr,jIr,eEe,DIr,GIr,oEe,OIr,VIr,XIr,Pe,r3,rEe,zIr,WIr,AK,QIr,HIr,UIr,t3,tEe,JIr,YIr,yK,KIr,ZIr,eNr,a3,aEe,oNr,rNr,LK,tNr,aNr,nNr,n3,nEe,sNr,lNr,xK,iNr,dNr,cNr,s3,sEe,fNr,mNr,$K,gNr,hNr,pNr,l3,lEe,_Nr,uNr,kK,bNr,vNr,FNr,i3,iEe,TNr,MNr,SK,ENr,CNr,wNr,d3,dEe,ANr,yNr,RK,LNr,xNr,$Nr,c3,cEe,kNr,SNr,PK,RNr,PNr,BNr,f3,DDe,zc,m3,fEe,dx,INr,mEe,NNr,GDe,_r,cx,qNr,Wc,jNr,BK,DNr,GNr,IK,ONr,VNr,XNr,fx,zNr,gEe,WNr,QNr,HNr,Wt,mx,UNr,hEe,JNr,YNr,Qc,KNr,pEe,ZNr,eqr,NK,oqr,rqr,tqr,g3,aqr,Xr,gx,nqr,_Ee,sqr,lqr,vn,iqr,uEe,dqr,cqr,bEe,fqr,mqr,vEe,gqr,hqr,pqr,ke,h3,FEe,_qr,uqr,qK,bqr,vqr,Fqr,p3,TEe,Tqr,Mqr,jK,Eqr,Cqr,wqr,_3,MEe,Aqr,yqr,DK,Lqr,xqr,$qr,u3,EEe,kqr,Sqr,GK,Rqr,Pqr,Bqr,b3,CEe,Iqr,Nqr,OK,qqr,jqr,Dqr,v3,wEe,Gqr,Oqr,VK,Vqr,Xqr,zqr,F3,AEe,Wqr,Qqr,XK,Hqr,Uqr,Jqr,T3,yEe,Yqr,Kqr,zK,Zqr,ejr,ojr,M3,LEe,rjr,tjr,WK,ajr,njr,sjr,E3,xEe,ljr,ijr,QK,djr,cjr,fjr,C3,ODe,Hc,w3,$Ee,hx,mjr,kEe,gjr,VDe,ur,px,hjr,Uc,pjr,HK,_jr,ujr,UK,bjr,vjr,Fjr,_x,Tjr,SEe,Mjr,Ejr,Cjr,Qt,ux,wjr,REe,Ajr,yjr,Jc,Ljr,PEe,xjr,$jr,JK,kjr,Sjr,Rjr,A3,Pjr,zr,bx,Bjr,BEe,Ijr,Njr,Fn,qjr,IEe,jjr,Djr,NEe,Gjr,Ojr,qEe,Vjr,Xjr,zjr,Se,y3,jEe,Wjr,Qjr,YK,Hjr,Ujr,Jjr,L3,DEe,Yjr,Kjr,KK,Zjr,eDr,oDr,x3,GEe,rDr,tDr,ZK,aDr,nDr,sDr,$3,OEe,lDr,iDr,eZ,dDr,cDr,fDr,k3,VEe,mDr,gDr,oZ,hDr,pDr,_Dr,S3,XEe,uDr,bDr,rZ,vDr,FDr,TDr,R3,zEe,MDr,EDr,tZ,CDr,wDr,ADr,P3,WEe,yDr,LDr,aZ,xDr,$Dr,kDr,B3,QEe,SDr,RDr,nZ,PDr,BDr,IDr,I3,HEe,NDr,qDr,sZ,jDr,DDr,GDr,N3,XDe,Yc,q3,UEe,vx,ODr,JEe,VDr,zDe,br,Fx,XDr,Kc,zDr,lZ,WDr,QDr,iZ,HDr,UDr,JDr,Tx,YDr,YEe,KDr,ZDr,eGr,Ht,Mx,oGr,KEe,rGr,tGr,Zc,aGr,ZEe,nGr,sGr,dZ,lGr,iGr,dGr,j3,cGr,Wr,Ex,fGr,eCe,mGr,gGr,Tn,hGr,oCe,pGr,_Gr,rCe,uGr,bGr,tCe,vGr,FGr,TGr,Oe,D3,aCe,MGr,EGr,cZ,CGr,wGr,AGr,G3,nCe,yGr,LGr,fZ,xGr,$Gr,kGr,O3,sCe,SGr,RGr,mZ,PGr,BGr,IGr,V3,lCe,NGr,qGr,gZ,jGr,DGr,GGr,X3,iCe,OGr,VGr,hZ,XGr,zGr,WGr,z3,dCe,QGr,HGr,pZ,UGr,JGr,YGr,W3,cCe,KGr,ZGr,_Z,eOr,oOr,rOr,Q3,fCe,tOr,aOr,uZ,nOr,sOr,lOr,H3,WDe,ef,U3,mCe,Cx,iOr,gCe,dOr,QDe,vr,wx,cOr,of,fOr,bZ,mOr,gOr,vZ,hOr,pOr,_Or,Ax,uOr,hCe,bOr,vOr,FOr,Ut,yx,TOr,pCe,MOr,EOr,rf,COr,_Ce,wOr,AOr,FZ,yOr,LOr,xOr,J3,$Or,Qr,Lx,kOr,uCe,SOr,ROr,Mn,POr,bCe,BOr,IOr,vCe,NOr,qOr,FCe,jOr,DOr,GOr,Ve,Y3,TCe,OOr,VOr,TZ,XOr,zOr,WOr,K3,MCe,QOr,HOr,MZ,UOr,JOr,YOr,Z3,ECe,KOr,ZOr,EZ,eVr,oVr,rVr,e0,CCe,tVr,aVr,CZ,nVr,sVr,lVr,o0,wCe,iVr,dVr,wZ,cVr,fVr,mVr,r0,ACe,gVr,hVr,AZ,pVr,_Vr,uVr,t0,yCe,bVr,vVr,yZ,FVr,TVr,MVr,a0,LCe,EVr,CVr,LZ,wVr,AVr,yVr,n0,HDe,tf,s0,xCe,xx,LVr,$Ce,xVr,UDe,Fr,$x,$Vr,af,kVr,xZ,SVr,RVr,$Z,PVr,BVr,IVr,kx,NVr,kCe,qVr,jVr,DVr,Jt,Sx,GVr,SCe,OVr,VVr,nf,XVr,RCe,zVr,WVr,kZ,QVr,HVr,UVr,l0,JVr,Hr,Rx,YVr,PCe,KVr,ZVr,En,eXr,BCe,oXr,rXr,ICe,tXr,aXr,NCe,nXr,sXr,lXr,qCe,i0,jCe,iXr,dXr,SZ,cXr,fXr,mXr,d0,JDe,sf,c0,DCe,Px,gXr,GCe,hXr,YDe,Tr,Bx,pXr,lf,_Xr,RZ,uXr,bXr,PZ,vXr,FXr,TXr,Ix,MXr,OCe,EXr,CXr,wXr,Yt,Nx,AXr,VCe,yXr,LXr,df,xXr,XCe,$Xr,kXr,BZ,SXr,RXr,PXr,f0,BXr,Ur,qx,IXr,zCe,NXr,qXr,Cn,jXr,WCe,DXr,GXr,QCe,OXr,VXr,HCe,XXr,zXr,WXr,jx,m0,UCe,QXr,HXr,IZ,UXr,JXr,YXr,g0,JCe,KXr,ZXr,NZ,ezr,ozr,rzr,h0,KDe,cf,p0,YCe,Dx,tzr,KCe,azr,ZDe,Mr,Gx,nzr,ff,szr,qZ,lzr,izr,jZ,dzr,czr,fzr,Ox,mzr,ZCe,gzr,hzr,pzr,Kt,Vx,_zr,e5e,uzr,bzr,mf,vzr,o5e,Fzr,Tzr,DZ,Mzr,Ezr,Czr,_0,wzr,Jr,Xx,Azr,r5e,yzr,Lzr,wn,xzr,t5e,$zr,kzr,a5e,Szr,Rzr,n5e,Pzr,Bzr,Izr,s5e,u0,l5e,Nzr,qzr,GZ,jzr,Dzr,Gzr,b0,eGe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),DA=new te({}),GA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new Ozr({props:{warning:!0,$$slots:{default:[JSt]},$$scope:{ctx:L}}}),OA=new te({}),VA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/configuration_auto.py#L590"}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/configuration_auto.py#L613"}}),Ag=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),QA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/configuration_auto.py#L736"}}),HA=new te({}),UA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/tokenization_auto.py#L390"}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17622/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/tokenization_auto.py#L404"}}),lh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),ZA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/tokenization_auto.py#L603"}}),ey=new te({}),oy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17622/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/feature_extraction_auto.py#L206"}}),Gh=new Ozr({props:{$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),Oh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),ny=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/feature_extraction_auto.py#L333"}}),sy=new te({}),ly=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/processing_auto.py#L88"}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/processing_auto.py#L102"}}),ip=new Ozr({props:{$$slots:{default:[oRt]},$$scope:{ctx:L}}}),dp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),fy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/processing_auto.py#L255"}}),my=new te({}),gy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L741"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),mp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),du=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),uy=new te({}),by=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L748"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),fu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),o2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),My=new te({}),Ey=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L763"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),t2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),O2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),yy=new te({}),Ly=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L770"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),X2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[dRt]},$$scope:{ctx:L}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),L1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[cRt]},$$scope:{ctx:L}}}),Sy=new te({}),Ry=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L777"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),$1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[fRt]},$$scope:{ctx:L}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),H1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[mRt]},$$scope:{ctx:L}}}),Ny=new te({}),qy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L786"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),J1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[gRt]},$$scope:{ctx:L}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[hRt]},$$scope:{ctx:L}}}),Oy=new te({}),Vy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L820"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[pRt]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),Cv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_Rt]},$$scope:{ctx:L}}}),Qy=new te({}),Hy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L827"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),Av=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uRt]},$$scope:{ctx:L}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bRt]},$$scope:{ctx:L}}}),Ky=new te({}),Zy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L813"}}),oL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),Bv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[vRt]},$$scope:{ctx:L}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[FRt]},$$scope:{ctx:L}}}),tL=new te({}),aL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L795"}}),sL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[TRt]},$$scope:{ctx:L}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),l6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[MRt]},$$scope:{ctx:L}}}),iL=new te({}),dL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L802"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),d6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ERt]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),m6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[CRt]},$$scope:{ctx:L}}}),gL=new te({}),hL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L836"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17622/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17622/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),h6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[wRt]},$$scope:{ctx:L}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),L6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ARt]},$$scope:{ctx:L}}}),bL=new te({}),vL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L875"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),$6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[yRt]},$$scope:{ctx:L}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),R6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[LRt]},$$scope:{ctx:L}}}),EL=new te({}),CL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L882"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),B6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[xRt]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),W6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[$Rt]},$$scope:{ctx:L}}}),LL=new te({}),xL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L905"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),H6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[kRt]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),oT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[SRt]},$$scope:{ctx:L}}}),RL=new te({}),PL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L889"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),tT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[RRt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[PRt]},$$scope:{ctx:L}}}),qL=new te({}),jL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L896"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[BRt]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[IRt]},$$scope:{ctx:L}}}),XL=new te({}),zL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L914"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[NRt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),$T=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[qRt]},$$scope:{ctx:L}}}),UL=new te({}),JL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L921"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),ST=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[jRt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[DRt]},$$scope:{ctx:L}}}),e8=new te({}),o8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L868"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[GRt]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[ORt]},$$scope:{ctx:L}}}),s8=new te({}),l8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L843"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[VRt]},$$scope:{ctx:L}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[XRt]},$$scope:{ctx:L}}}),f8=new te({}),m8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L850"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[zRt]},$$scope:{ctx:L}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),r7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[WRt]},$$scope:{ctx:L}}}),_8=new te({}),u8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_auto.py#L859"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),a7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[QRt]},$$scope:{ctx:L}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),l7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[HRt]},$$scope:{ctx:L}}}),T8=new te({}),M8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),C8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),d7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[URt]},$$scope:{ctx:L}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[JRt]},$$scope:{ctx:L}}}),A8=new te({}),y8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),x8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[YRt]},$$scope:{ctx:L}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[KRt]},$$scope:{ctx:L}}}),k8=new te({}),S8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[ZRt]},$$scope:{ctx:L}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ePt]},$$scope:{ctx:L}}}),I8=new te({}),N8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),j8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[oPt]},$$scope:{ctx:L}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[rPt]},$$scope:{ctx:L}}}),G8=new te({}),O8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),X8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[tPt]},$$scope:{ctx:L}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),F4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[aPt]},$$scope:{ctx:L}}}),W8=new te({}),Q8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),M4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[nPt]},$$scope:{ctx:L}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[sPt]},$$scope:{ctx:L}}}),Y8=new te({}),K8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[lPt]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[iPt]},$$scope:{ctx:L}}}),r9=new te({}),t9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[dPt]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[cPt]},$$scope:{ctx:L}}}),l9=new te({}),i9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[fPt]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[mPt]},$$scope:{ctx:L}}}),g9=new te({}),h9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),_9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[gPt]},$$scope:{ctx:L}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[hPt]},$$scope:{ctx:L}}}),b9=new te({}),v9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),T9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[pPt]},$$scope:{ctx:L}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[_Pt]},$$scope:{ctx:L}}}),E9=new te({}),C9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),A9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[uPt]},$$scope:{ctx:L}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[bPt]},$$scope:{ctx:L}}}),L9=new te({}),x9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),k9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[vPt]},$$scope:{ctx:L}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[FPt]},$$scope:{ctx:L}}}),R9=new te({}),P9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),I9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[TPt]},$$scope:{ctx:L}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[MPt]},$$scope:{ctx:L}}}),q9=new te({}),j9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),G9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[EPt]},$$scope:{ctx:L}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[CPt]},$$scope:{ctx:L}}}),V9=new te({}),X9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),W9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[wPt]},$$scope:{ctx:L}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[APt]},$$scope:{ctx:L}}}),H9=new te({}),U9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[yPt]},$$scope:{ctx:L}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[LPt]},$$scope:{ctx:L}}}),Z9=new te({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[xPt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$Pt]},$$scope:{ctx:L}}}),ax=new te({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[kPt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[SPt]},$$scope:{ctx:L}}}),dx=new te({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[RPt]},$$scope:{ctx:L}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[PPt]},$$scope:{ctx:L}}}),hx=new te({}),px=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[BPt]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),N3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[IPt]},$$scope:{ctx:L}}}),vx=new te({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[NPt]},$$scope:{ctx:L}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[qPt]},$$scope:{ctx:L}}}),Cx=new te({}),wx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[jPt]},$$scope:{ctx:L}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[DPt]},$$scope:{ctx:L}}}),xx=new te({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[GPt]},$$scope:{ctx:L}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[OPt]},$$scope:{ctx:L}}}),Px=new te({}),Bx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[VPt]},$$scope:{ctx:L}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[XPt]},$$scope:{ctx:L}}}),Dx=new te({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17622/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17622/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[zPt]},$$scope:{ctx:L}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17622/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17622/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17622/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[WPt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),_f=l(),rt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),IA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ge=l(),We=a("p"),pi=o("Instantiating one of "),yn=a("a"),NA=o("AutoConfig"),Ln=o(", "),xn=a("a"),qA=o("AutoModel"),_i=o(`, and
`),$n=a("a"),jA=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),nk=o("will create a model that is an instance of "),bi=a("a"),sk=o("BertModel"),lk=o("."),Eo=l(),wa=a("p"),ik=o("There is one class of "),vf=a("code"),dk=o("AutoModel"),iVe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Yqe=l(),vi=a("h2"),Ff=a("a"),Poe=a("span"),F(DA.$$.fragment),dVe=l(),Boe=a("span"),cVe=o("Extending the Auto Classes"),Kqe=l(),kn=a("p"),fVe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ioe=a("code"),mVe=o("NewModel"),gVe=o(", make sure you have a "),Noe=a("code"),hVe=o("NewModelConfig"),pVe=o(` then you can add those to the auto
classes like this:`),Zqe=l(),F(GA.$$.fragment),eje=l(),ck=a("p"),_Ve=o("You will then be able to use the auto classes like you would usually do!"),oje=l(),F(Tf.$$.fragment),rje=l(),Fi=a("h2"),Mf=a("a"),qoe=a("span"),F(OA.$$.fragment),uVe=l(),joe=a("span"),bVe=o("AutoConfig"),tje=l(),Co=a("div"),F(VA.$$.fragment),vVe=l(),XA=a("p"),FVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),fk=a("a"),TVe=o("from_pretrained()"),MVe=o(" class method."),EVe=l(),zA=a("p"),CVe=o("This class cannot be instantiated directly using "),Doe=a("code"),wVe=o("__init__()"),AVe=o(" (throws an error)."),yVe=l(),Er=a("div"),F(WA.$$.fragment),LVe=l(),Goe=a("p"),xVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),$Ve=l(),Ti=a("p"),kVe=o("The configuration class to instantiate is selected based on the "),Ooe=a("code"),SVe=o("model_type"),RVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Voe=a("code"),PVe=o("pretrained_model_name_or_path"),BVe=o(":"),IVe=l(),A=a("ul"),Ef=a("li"),Xoe=a("strong"),NVe=o("albert"),qVe=o(" \u2014 "),mk=a("a"),jVe=o("AlbertConfig"),DVe=o(" (ALBERT model)"),GVe=l(),Cf=a("li"),zoe=a("strong"),OVe=o("bart"),VVe=o(" \u2014 "),gk=a("a"),XVe=o("BartConfig"),zVe=o(" (BART model)"),WVe=l(),wf=a("li"),Woe=a("strong"),QVe=o("beit"),HVe=o(" \u2014 "),hk=a("a"),UVe=o("BeitConfig"),JVe=o(" (BEiT model)"),YVe=l(),Af=a("li"),Qoe=a("strong"),KVe=o("bert"),ZVe=o(" \u2014 "),pk=a("a"),eXe=o("BertConfig"),oXe=o(" (BERT model)"),rXe=l(),yf=a("li"),Hoe=a("strong"),tXe=o("bert-generation"),aXe=o(" \u2014 "),_k=a("a"),nXe=o("BertGenerationConfig"),sXe=o(" (Bert Generation model)"),lXe=l(),Lf=a("li"),Uoe=a("strong"),iXe=o("big_bird"),dXe=o(" \u2014 "),uk=a("a"),cXe=o("BigBirdConfig"),fXe=o(" (BigBird model)"),mXe=l(),xf=a("li"),Joe=a("strong"),gXe=o("bigbird_pegasus"),hXe=o(" \u2014 "),bk=a("a"),pXe=o("BigBirdPegasusConfig"),_Xe=o(" (BigBird-Pegasus model)"),uXe=l(),$f=a("li"),Yoe=a("strong"),bXe=o("blenderbot"),vXe=o(" \u2014 "),vk=a("a"),FXe=o("BlenderbotConfig"),TXe=o(" (Blenderbot model)"),MXe=l(),kf=a("li"),Koe=a("strong"),EXe=o("blenderbot-small"),CXe=o(" \u2014 "),Fk=a("a"),wXe=o("BlenderbotSmallConfig"),AXe=o(" (BlenderbotSmall model)"),yXe=l(),Sf=a("li"),Zoe=a("strong"),LXe=o("camembert"),xXe=o(" \u2014 "),Tk=a("a"),$Xe=o("CamembertConfig"),kXe=o(" (CamemBERT model)"),SXe=l(),Rf=a("li"),ere=a("strong"),RXe=o("canine"),PXe=o(" \u2014 "),Mk=a("a"),BXe=o("CanineConfig"),IXe=o(" (CANINE model)"),NXe=l(),Pf=a("li"),ore=a("strong"),qXe=o("clip"),jXe=o(" \u2014 "),Ek=a("a"),DXe=o("CLIPConfig"),GXe=o(" (CLIP model)"),OXe=l(),Bf=a("li"),rre=a("strong"),VXe=o("convbert"),XXe=o(" \u2014 "),Ck=a("a"),zXe=o("ConvBertConfig"),WXe=o(" (ConvBERT model)"),QXe=l(),If=a("li"),tre=a("strong"),HXe=o("convnext"),UXe=o(" \u2014 "),wk=a("a"),JXe=o("ConvNextConfig"),YXe=o(" (ConvNeXT model)"),KXe=l(),Nf=a("li"),are=a("strong"),ZXe=o("ctrl"),eze=o(" \u2014 "),Ak=a("a"),oze=o("CTRLConfig"),rze=o(" (CTRL model)"),tze=l(),qf=a("li"),nre=a("strong"),aze=o("cvt"),nze=o(" \u2014 "),yk=a("a"),sze=o("CvtConfig"),lze=o(" (CvT model)"),ize=l(),jf=a("li"),sre=a("strong"),dze=o("data2vec-audio"),cze=o(" \u2014 "),Lk=a("a"),fze=o("Data2VecAudioConfig"),mze=o(" (Data2VecAudio model)"),gze=l(),Df=a("li"),lre=a("strong"),hze=o("data2vec-text"),pze=o(" \u2014 "),xk=a("a"),_ze=o("Data2VecTextConfig"),uze=o(" (Data2VecText model)"),bze=l(),Gf=a("li"),ire=a("strong"),vze=o("data2vec-vision"),Fze=o(" \u2014 "),$k=a("a"),Tze=o("Data2VecVisionConfig"),Mze=o(" (Data2VecVision model)"),Eze=l(),Of=a("li"),dre=a("strong"),Cze=o("deberta"),wze=o(" \u2014 "),kk=a("a"),Aze=o("DebertaConfig"),yze=o(" (DeBERTa model)"),Lze=l(),Vf=a("li"),cre=a("strong"),xze=o("deberta-v2"),$ze=o(" \u2014 "),Sk=a("a"),kze=o("DebertaV2Config"),Sze=o(" (DeBERTa-v2 model)"),Rze=l(),Xf=a("li"),fre=a("strong"),Pze=o("decision_transformer"),Bze=o(" \u2014 "),Rk=a("a"),Ize=o("DecisionTransformerConfig"),Nze=o(" (Decision Transformer model)"),qze=l(),zf=a("li"),mre=a("strong"),jze=o("deit"),Dze=o(" \u2014 "),Pk=a("a"),Gze=o("DeiTConfig"),Oze=o(" (DeiT model)"),Vze=l(),Wf=a("li"),gre=a("strong"),Xze=o("detr"),zze=o(" \u2014 "),Bk=a("a"),Wze=o("DetrConfig"),Qze=o(" (DETR model)"),Hze=l(),Qf=a("li"),hre=a("strong"),Uze=o("distilbert"),Jze=o(" \u2014 "),Ik=a("a"),Yze=o("DistilBertConfig"),Kze=o(" (DistilBERT model)"),Zze=l(),Hf=a("li"),pre=a("strong"),eWe=o("dpr"),oWe=o(" \u2014 "),Nk=a("a"),rWe=o("DPRConfig"),tWe=o(" (DPR model)"),aWe=l(),Uf=a("li"),_re=a("strong"),nWe=o("dpt"),sWe=o(" \u2014 "),qk=a("a"),lWe=o("DPTConfig"),iWe=o(" (DPT model)"),dWe=l(),Jf=a("li"),ure=a("strong"),cWe=o("electra"),fWe=o(" \u2014 "),jk=a("a"),mWe=o("ElectraConfig"),gWe=o(" (ELECTRA model)"),hWe=l(),Yf=a("li"),bre=a("strong"),pWe=o("encoder-decoder"),_We=o(" \u2014 "),Dk=a("a"),uWe=o("EncoderDecoderConfig"),bWe=o(" (Encoder decoder model)"),vWe=l(),Kf=a("li"),vre=a("strong"),FWe=o("flaubert"),TWe=o(" \u2014 "),Gk=a("a"),MWe=o("FlaubertConfig"),EWe=o(" (FlauBERT model)"),CWe=l(),Zf=a("li"),Fre=a("strong"),wWe=o("flava"),AWe=o(" \u2014 "),Ok=a("a"),yWe=o("FlavaConfig"),LWe=o(" (FLAVA model)"),xWe=l(),em=a("li"),Tre=a("strong"),$We=o("fnet"),kWe=o(" \u2014 "),Vk=a("a"),SWe=o("FNetConfig"),RWe=o(" (FNet model)"),PWe=l(),om=a("li"),Mre=a("strong"),BWe=o("fsmt"),IWe=o(" \u2014 "),Xk=a("a"),NWe=o("FSMTConfig"),qWe=o(" (FairSeq Machine-Translation model)"),jWe=l(),rm=a("li"),Ere=a("strong"),DWe=o("funnel"),GWe=o(" \u2014 "),zk=a("a"),OWe=o("FunnelConfig"),VWe=o(" (Funnel Transformer model)"),XWe=l(),tm=a("li"),Cre=a("strong"),zWe=o("glpn"),WWe=o(" \u2014 "),Wk=a("a"),QWe=o("GLPNConfig"),HWe=o(" (GLPN model)"),UWe=l(),am=a("li"),wre=a("strong"),JWe=o("gpt2"),YWe=o(" \u2014 "),Qk=a("a"),KWe=o("GPT2Config"),ZWe=o(" (OpenAI GPT-2 model)"),eQe=l(),nm=a("li"),Are=a("strong"),oQe=o("gpt_neo"),rQe=o(" \u2014 "),Hk=a("a"),tQe=o("GPTNeoConfig"),aQe=o(" (GPT Neo model)"),nQe=l(),sm=a("li"),yre=a("strong"),sQe=o("gpt_neox"),lQe=o(" \u2014 "),Uk=a("a"),iQe=o("GPTNeoXConfig"),dQe=o(" (GPT NeoX model)"),cQe=l(),lm=a("li"),Lre=a("strong"),fQe=o("gptj"),mQe=o(" \u2014 "),Jk=a("a"),gQe=o("GPTJConfig"),hQe=o(" (GPT-J model)"),pQe=l(),im=a("li"),xre=a("strong"),_Qe=o("hubert"),uQe=o(" \u2014 "),Yk=a("a"),bQe=o("HubertConfig"),vQe=o(" (Hubert model)"),FQe=l(),dm=a("li"),$re=a("strong"),TQe=o("ibert"),MQe=o(" \u2014 "),Kk=a("a"),EQe=o("IBertConfig"),CQe=o(" (I-BERT model)"),wQe=l(),cm=a("li"),kre=a("strong"),AQe=o("imagegpt"),yQe=o(" \u2014 "),Zk=a("a"),LQe=o("ImageGPTConfig"),xQe=o(" (ImageGPT model)"),$Qe=l(),fm=a("li"),Sre=a("strong"),kQe=o("layoutlm"),SQe=o(" \u2014 "),eS=a("a"),RQe=o("LayoutLMConfig"),PQe=o(" (LayoutLM model)"),BQe=l(),mm=a("li"),Rre=a("strong"),IQe=o("layoutlmv2"),NQe=o(" \u2014 "),oS=a("a"),qQe=o("LayoutLMv2Config"),jQe=o(" (LayoutLMv2 model)"),DQe=l(),gm=a("li"),Pre=a("strong"),GQe=o("layoutlmv3"),OQe=o(" \u2014 "),rS=a("a"),VQe=o("LayoutLMv3Config"),XQe=o(" (LayoutLMv3 model)"),zQe=l(),hm=a("li"),Bre=a("strong"),WQe=o("led"),QQe=o(" \u2014 "),tS=a("a"),HQe=o("LEDConfig"),UQe=o(" (LED model)"),JQe=l(),pm=a("li"),Ire=a("strong"),YQe=o("levit"),KQe=o(" \u2014 "),aS=a("a"),ZQe=o("LevitConfig"),eHe=o(" (LeViT model)"),oHe=l(),_m=a("li"),Nre=a("strong"),rHe=o("longformer"),tHe=o(" \u2014 "),nS=a("a"),aHe=o("LongformerConfig"),nHe=o(" (Longformer model)"),sHe=l(),um=a("li"),qre=a("strong"),lHe=o("luke"),iHe=o(" \u2014 "),sS=a("a"),dHe=o("LukeConfig"),cHe=o(" (LUKE model)"),fHe=l(),bm=a("li"),jre=a("strong"),mHe=o("lxmert"),gHe=o(" \u2014 "),lS=a("a"),hHe=o("LxmertConfig"),pHe=o(" (LXMERT model)"),_He=l(),vm=a("li"),Dre=a("strong"),uHe=o("m2m_100"),bHe=o(" \u2014 "),iS=a("a"),vHe=o("M2M100Config"),FHe=o(" (M2M100 model)"),THe=l(),Fm=a("li"),Gre=a("strong"),MHe=o("marian"),EHe=o(" \u2014 "),dS=a("a"),CHe=o("MarianConfig"),wHe=o(" (Marian model)"),AHe=l(),Tm=a("li"),Ore=a("strong"),yHe=o("maskformer"),LHe=o(" \u2014 "),cS=a("a"),xHe=o("MaskFormerConfig"),$He=o(" (MaskFormer model)"),kHe=l(),Mm=a("li"),Vre=a("strong"),SHe=o("mbart"),RHe=o(" \u2014 "),fS=a("a"),PHe=o("MBartConfig"),BHe=o(" (mBART model)"),IHe=l(),Em=a("li"),Xre=a("strong"),NHe=o("mctct"),qHe=o(" \u2014 "),mS=a("a"),jHe=o("MCTCTConfig"),DHe=o(" (M-CTC-T model)"),GHe=l(),Cm=a("li"),zre=a("strong"),OHe=o("megatron-bert"),VHe=o(" \u2014 "),gS=a("a"),XHe=o("MegatronBertConfig"),zHe=o(" (Megatron-BERT model)"),WHe=l(),wm=a("li"),Wre=a("strong"),QHe=o("mobilebert"),HHe=o(" \u2014 "),hS=a("a"),UHe=o("MobileBertConfig"),JHe=o(" (MobileBERT model)"),YHe=l(),Am=a("li"),Qre=a("strong"),KHe=o("mpnet"),ZHe=o(" \u2014 "),pS=a("a"),eUe=o("MPNetConfig"),oUe=o(" (MPNet model)"),rUe=l(),ym=a("li"),Hre=a("strong"),tUe=o("mt5"),aUe=o(" \u2014 "),_S=a("a"),nUe=o("MT5Config"),sUe=o(" (MT5 model)"),lUe=l(),Lm=a("li"),Ure=a("strong"),iUe=o("nystromformer"),dUe=o(" \u2014 "),uS=a("a"),cUe=o("NystromformerConfig"),fUe=o(" (Nystr\xF6mformer model)"),mUe=l(),xm=a("li"),Jre=a("strong"),gUe=o("openai-gpt"),hUe=o(" \u2014 "),bS=a("a"),pUe=o("OpenAIGPTConfig"),_Ue=o(" (OpenAI GPT model)"),uUe=l(),$m=a("li"),Yre=a("strong"),bUe=o("opt"),vUe=o(" \u2014 "),vS=a("a"),FUe=o("OPTConfig"),TUe=o(" (OPT model)"),MUe=l(),km=a("li"),Kre=a("strong"),EUe=o("pegasus"),CUe=o(" \u2014 "),FS=a("a"),wUe=o("PegasusConfig"),AUe=o(" (Pegasus model)"),yUe=l(),Sm=a("li"),Zre=a("strong"),LUe=o("perceiver"),xUe=o(" \u2014 "),TS=a("a"),$Ue=o("PerceiverConfig"),kUe=o(" (Perceiver model)"),SUe=l(),Rm=a("li"),ete=a("strong"),RUe=o("plbart"),PUe=o(" \u2014 "),MS=a("a"),BUe=o("PLBartConfig"),IUe=o(" (PLBart model)"),NUe=l(),Pm=a("li"),ote=a("strong"),qUe=o("poolformer"),jUe=o(" \u2014 "),ES=a("a"),DUe=o("PoolFormerConfig"),GUe=o(" (PoolFormer model)"),OUe=l(),Bm=a("li"),rte=a("strong"),VUe=o("prophetnet"),XUe=o(" \u2014 "),CS=a("a"),zUe=o("ProphetNetConfig"),WUe=o(" (ProphetNet model)"),QUe=l(),Im=a("li"),tte=a("strong"),HUe=o("qdqbert"),UUe=o(" \u2014 "),wS=a("a"),JUe=o("QDQBertConfig"),YUe=o(" (QDQBert model)"),KUe=l(),Nm=a("li"),ate=a("strong"),ZUe=o("rag"),eJe=o(" \u2014 "),AS=a("a"),oJe=o("RagConfig"),rJe=o(" (RAG model)"),tJe=l(),qm=a("li"),nte=a("strong"),aJe=o("realm"),nJe=o(" \u2014 "),yS=a("a"),sJe=o("RealmConfig"),lJe=o(" (REALM model)"),iJe=l(),jm=a("li"),ste=a("strong"),dJe=o("reformer"),cJe=o(" \u2014 "),LS=a("a"),fJe=o("ReformerConfig"),mJe=o(" (Reformer model)"),gJe=l(),Dm=a("li"),lte=a("strong"),hJe=o("regnet"),pJe=o(" \u2014 "),xS=a("a"),_Je=o("RegNetConfig"),uJe=o(" (RegNet model)"),bJe=l(),Gm=a("li"),ite=a("strong"),vJe=o("rembert"),FJe=o(" \u2014 "),$S=a("a"),TJe=o("RemBertConfig"),MJe=o(" (RemBERT model)"),EJe=l(),Om=a("li"),dte=a("strong"),CJe=o("resnet"),wJe=o(" \u2014 "),kS=a("a"),AJe=o("ResNetConfig"),yJe=o(" (ResNet model)"),LJe=l(),Vm=a("li"),cte=a("strong"),xJe=o("retribert"),$Je=o(" \u2014 "),SS=a("a"),kJe=o("RetriBertConfig"),SJe=o(" (RetriBERT model)"),RJe=l(),Xm=a("li"),fte=a("strong"),PJe=o("roberta"),BJe=o(" \u2014 "),RS=a("a"),IJe=o("RobertaConfig"),NJe=o(" (RoBERTa model)"),qJe=l(),zm=a("li"),mte=a("strong"),jJe=o("roformer"),DJe=o(" \u2014 "),PS=a("a"),GJe=o("RoFormerConfig"),OJe=o(" (RoFormer model)"),VJe=l(),Wm=a("li"),gte=a("strong"),XJe=o("segformer"),zJe=o(" \u2014 "),BS=a("a"),WJe=o("SegformerConfig"),QJe=o(" (SegFormer model)"),HJe=l(),Qm=a("li"),hte=a("strong"),UJe=o("sew"),JJe=o(" \u2014 "),IS=a("a"),YJe=o("SEWConfig"),KJe=o(" (SEW model)"),ZJe=l(),Hm=a("li"),pte=a("strong"),eYe=o("sew-d"),oYe=o(" \u2014 "),NS=a("a"),rYe=o("SEWDConfig"),tYe=o(" (SEW-D model)"),aYe=l(),Um=a("li"),_te=a("strong"),nYe=o("speech-encoder-decoder"),sYe=o(" \u2014 "),qS=a("a"),lYe=o("SpeechEncoderDecoderConfig"),iYe=o(" (Speech Encoder decoder model)"),dYe=l(),Jm=a("li"),ute=a("strong"),cYe=o("speech_to_text"),fYe=o(" \u2014 "),jS=a("a"),mYe=o("Speech2TextConfig"),gYe=o(" (Speech2Text model)"),hYe=l(),Ym=a("li"),bte=a("strong"),pYe=o("speech_to_text_2"),_Ye=o(" \u2014 "),DS=a("a"),uYe=o("Speech2Text2Config"),bYe=o(" (Speech2Text2 model)"),vYe=l(),Km=a("li"),vte=a("strong"),FYe=o("splinter"),TYe=o(" \u2014 "),GS=a("a"),MYe=o("SplinterConfig"),EYe=o(" (Splinter model)"),CYe=l(),Zm=a("li"),Fte=a("strong"),wYe=o("squeezebert"),AYe=o(" \u2014 "),OS=a("a"),yYe=o("SqueezeBertConfig"),LYe=o(" (SqueezeBERT model)"),xYe=l(),eg=a("li"),Tte=a("strong"),$Ye=o("swin"),kYe=o(" \u2014 "),VS=a("a"),SYe=o("SwinConfig"),RYe=o(" (Swin Transformer model)"),PYe=l(),og=a("li"),Mte=a("strong"),BYe=o("t5"),IYe=o(" \u2014 "),XS=a("a"),NYe=o("T5Config"),qYe=o(" (T5 model)"),jYe=l(),rg=a("li"),Ete=a("strong"),DYe=o("tapas"),GYe=o(" \u2014 "),zS=a("a"),OYe=o("TapasConfig"),VYe=o(" (TAPAS model)"),XYe=l(),tg=a("li"),Cte=a("strong"),zYe=o("trajectory_transformer"),WYe=o(" \u2014 "),WS=a("a"),QYe=o("TrajectoryTransformerConfig"),HYe=o(" (Trajectory Transformer model)"),UYe=l(),ag=a("li"),wte=a("strong"),JYe=o("transfo-xl"),YYe=o(" \u2014 "),QS=a("a"),KYe=o("TransfoXLConfig"),ZYe=o(" (Transformer-XL model)"),eKe=l(),ng=a("li"),Ate=a("strong"),oKe=o("trocr"),rKe=o(" \u2014 "),HS=a("a"),tKe=o("TrOCRConfig"),aKe=o(" (TrOCR model)"),nKe=l(),sg=a("li"),yte=a("strong"),sKe=o("unispeech"),lKe=o(" \u2014 "),US=a("a"),iKe=o("UniSpeechConfig"),dKe=o(" (UniSpeech model)"),cKe=l(),lg=a("li"),Lte=a("strong"),fKe=o("unispeech-sat"),mKe=o(" \u2014 "),JS=a("a"),gKe=o("UniSpeechSatConfig"),hKe=o(" (UniSpeechSat model)"),pKe=l(),ig=a("li"),xte=a("strong"),_Ke=o("van"),uKe=o(" \u2014 "),YS=a("a"),bKe=o("VanConfig"),vKe=o(" (VAN model)"),FKe=l(),dg=a("li"),$te=a("strong"),TKe=o("vilt"),MKe=o(" \u2014 "),KS=a("a"),EKe=o("ViltConfig"),CKe=o(" (ViLT model)"),wKe=l(),cg=a("li"),kte=a("strong"),AKe=o("vision-encoder-decoder"),yKe=o(" \u2014 "),ZS=a("a"),LKe=o("VisionEncoderDecoderConfig"),xKe=o(" (Vision Encoder decoder model)"),$Ke=l(),fg=a("li"),Ste=a("strong"),kKe=o("vision-text-dual-encoder"),SKe=o(" \u2014 "),eR=a("a"),RKe=o("VisionTextDualEncoderConfig"),PKe=o(" (VisionTextDualEncoder model)"),BKe=l(),mg=a("li"),Rte=a("strong"),IKe=o("visual_bert"),NKe=o(" \u2014 "),oR=a("a"),qKe=o("VisualBertConfig"),jKe=o(" (VisualBERT model)"),DKe=l(),gg=a("li"),Pte=a("strong"),GKe=o("vit"),OKe=o(" \u2014 "),rR=a("a"),VKe=o("ViTConfig"),XKe=o(" (ViT model)"),zKe=l(),hg=a("li"),Bte=a("strong"),WKe=o("vit_mae"),QKe=o(" \u2014 "),tR=a("a"),HKe=o("ViTMAEConfig"),UKe=o(" (ViTMAE model)"),JKe=l(),pg=a("li"),Ite=a("strong"),YKe=o("wav2vec2"),KKe=o(" \u2014 "),aR=a("a"),ZKe=o("Wav2Vec2Config"),eZe=o(" (Wav2Vec2 model)"),oZe=l(),_g=a("li"),Nte=a("strong"),rZe=o("wav2vec2-conformer"),tZe=o(" \u2014 "),nR=a("a"),aZe=o("Wav2Vec2ConformerConfig"),nZe=o(" (Wav2Vec2-Conformer model)"),sZe=l(),ug=a("li"),qte=a("strong"),lZe=o("wavlm"),iZe=o(" \u2014 "),sR=a("a"),dZe=o("WavLMConfig"),cZe=o(" (WavLM model)"),fZe=l(),bg=a("li"),jte=a("strong"),mZe=o("xglm"),gZe=o(" \u2014 "),lR=a("a"),hZe=o("XGLMConfig"),pZe=o(" (XGLM model)"),_Ze=l(),vg=a("li"),Dte=a("strong"),uZe=o("xlm"),bZe=o(" \u2014 "),iR=a("a"),vZe=o("XLMConfig"),FZe=o(" (XLM model)"),TZe=l(),Fg=a("li"),Gte=a("strong"),MZe=o("xlm-prophetnet"),EZe=o(" \u2014 "),dR=a("a"),CZe=o("XLMProphetNetConfig"),wZe=o(" (XLM-ProphetNet model)"),AZe=l(),Tg=a("li"),Ote=a("strong"),yZe=o("xlm-roberta"),LZe=o(" \u2014 "),cR=a("a"),xZe=o("XLMRobertaConfig"),$Ze=o(" (XLM-RoBERTa model)"),kZe=l(),Mg=a("li"),Vte=a("strong"),SZe=o("xlm-roberta-xl"),RZe=o(" \u2014 "),fR=a("a"),PZe=o("XLMRobertaXLConfig"),BZe=o(" (XLM-RoBERTa-XL model)"),IZe=l(),Eg=a("li"),Xte=a("strong"),NZe=o("xlnet"),qZe=o(" \u2014 "),mR=a("a"),jZe=o("XLNetConfig"),DZe=o(" (XLNet model)"),GZe=l(),Cg=a("li"),zte=a("strong"),OZe=o("yolos"),VZe=o(" \u2014 "),gR=a("a"),XZe=o("YolosConfig"),zZe=o(" (YOLOS model)"),WZe=l(),wg=a("li"),Wte=a("strong"),QZe=o("yoso"),HZe=o(" \u2014 "),hR=a("a"),UZe=o("YosoConfig"),JZe=o(" (YOSO model)"),YZe=l(),F(Ag.$$.fragment),KZe=l(),yg=a("div"),F(QA.$$.fragment),ZZe=l(),Qte=a("p"),eeo=o("Register a new configuration for this class."),aje=l(),Mi=a("h2"),Lg=a("a"),Hte=a("span"),F(HA.$$.fragment),oeo=l(),Ute=a("span"),reo=o("AutoTokenizer"),nje=l(),wo=a("div"),F(UA.$$.fragment),teo=l(),JA=a("p"),aeo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),pR=a("a"),neo=o("AutoTokenizer.from_pretrained()"),seo=o(" class method."),leo=l(),YA=a("p"),ieo=o("This class cannot be instantiated directly using "),Jte=a("code"),deo=o("__init__()"),ceo=o(" (throws an error)."),feo=l(),Cr=a("div"),F(KA.$$.fragment),meo=l(),Yte=a("p"),geo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),heo=l(),Aa=a("p"),peo=o("The tokenizer class to instantiate is selected based on the "),Kte=a("code"),_eo=o("model_type"),ueo=o(` property of the config object (either
passed as an argument or loaded from `),Zte=a("code"),beo=o("pretrained_model_name_or_path"),veo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eae=a("code"),Feo=o("pretrained_model_name_or_path"),Teo=o(":"),Meo=l(),k=a("ul"),Sn=a("li"),oae=a("strong"),Eeo=o("albert"),Ceo=o(" \u2014 "),_R=a("a"),weo=o("AlbertTokenizer"),Aeo=o(" or "),uR=a("a"),yeo=o("AlbertTokenizerFast"),Leo=o(" (ALBERT model)"),xeo=l(),Rn=a("li"),rae=a("strong"),$eo=o("bart"),keo=o(" \u2014 "),bR=a("a"),Seo=o("BartTokenizer"),Reo=o(" or "),vR=a("a"),Peo=o("BartTokenizerFast"),Beo=o(" (BART model)"),Ieo=l(),Pn=a("li"),tae=a("strong"),Neo=o("barthez"),qeo=o(" \u2014 "),FR=a("a"),jeo=o("BarthezTokenizer"),Deo=o(" or "),TR=a("a"),Geo=o("BarthezTokenizerFast"),Oeo=o(" (BARThez model)"),Veo=l(),xg=a("li"),aae=a("strong"),Xeo=o("bartpho"),zeo=o(" \u2014 "),MR=a("a"),Weo=o("BartphoTokenizer"),Qeo=o(" (BARTpho model)"),Heo=l(),Bn=a("li"),nae=a("strong"),Ueo=o("bert"),Jeo=o(" \u2014 "),ER=a("a"),Yeo=o("BertTokenizer"),Keo=o(" or "),CR=a("a"),Zeo=o("BertTokenizerFast"),eoo=o(" (BERT model)"),ooo=l(),$g=a("li"),sae=a("strong"),roo=o("bert-generation"),too=o(" \u2014 "),wR=a("a"),aoo=o("BertGenerationTokenizer"),noo=o(" (Bert Generation model)"),soo=l(),kg=a("li"),lae=a("strong"),loo=o("bert-japanese"),ioo=o(" \u2014 "),AR=a("a"),doo=o("BertJapaneseTokenizer"),coo=o(" (BertJapanese model)"),foo=l(),Sg=a("li"),iae=a("strong"),moo=o("bertweet"),goo=o(" \u2014 "),yR=a("a"),hoo=o("BertweetTokenizer"),poo=o(" (BERTweet model)"),_oo=l(),In=a("li"),dae=a("strong"),uoo=o("big_bird"),boo=o(" \u2014 "),LR=a("a"),voo=o("BigBirdTokenizer"),Foo=o(" or "),xR=a("a"),Too=o("BigBirdTokenizerFast"),Moo=o(" (BigBird model)"),Eoo=l(),Nn=a("li"),cae=a("strong"),Coo=o("bigbird_pegasus"),woo=o(" \u2014 "),$R=a("a"),Aoo=o("PegasusTokenizer"),yoo=o(" or "),kR=a("a"),Loo=o("PegasusTokenizerFast"),xoo=o(" (BigBird-Pegasus model)"),$oo=l(),qn=a("li"),fae=a("strong"),koo=o("blenderbot"),Soo=o(" \u2014 "),SR=a("a"),Roo=o("BlenderbotTokenizer"),Poo=o(" or "),RR=a("a"),Boo=o("BlenderbotTokenizerFast"),Ioo=o(" (Blenderbot model)"),Noo=l(),Rg=a("li"),mae=a("strong"),qoo=o("blenderbot-small"),joo=o(" \u2014 "),PR=a("a"),Doo=o("BlenderbotSmallTokenizer"),Goo=o(" (BlenderbotSmall model)"),Ooo=l(),Pg=a("li"),gae=a("strong"),Voo=o("byt5"),Xoo=o(" \u2014 "),BR=a("a"),zoo=o("ByT5Tokenizer"),Woo=o(" (ByT5 model)"),Qoo=l(),jn=a("li"),hae=a("strong"),Hoo=o("camembert"),Uoo=o(" \u2014 "),IR=a("a"),Joo=o("CamembertTokenizer"),Yoo=o(" or "),NR=a("a"),Koo=o("CamembertTokenizerFast"),Zoo=o(" (CamemBERT model)"),ero=l(),Bg=a("li"),pae=a("strong"),oro=o("canine"),rro=o(" \u2014 "),qR=a("a"),tro=o("CanineTokenizer"),aro=o(" (CANINE model)"),nro=l(),Dn=a("li"),_ae=a("strong"),sro=o("clip"),lro=o(" \u2014 "),jR=a("a"),iro=o("CLIPTokenizer"),dro=o(" or "),DR=a("a"),cro=o("CLIPTokenizerFast"),fro=o(" (CLIP model)"),mro=l(),Gn=a("li"),uae=a("strong"),gro=o("convbert"),hro=o(" \u2014 "),GR=a("a"),pro=o("ConvBertTokenizer"),_ro=o(" or "),OR=a("a"),uro=o("ConvBertTokenizerFast"),bro=o(" (ConvBERT model)"),vro=l(),On=a("li"),bae=a("strong"),Fro=o("cpm"),Tro=o(" \u2014 "),VR=a("a"),Mro=o("CpmTokenizer"),Ero=o(" or "),XR=a("a"),Cro=o("CpmTokenizerFast"),wro=o(" (CPM model)"),Aro=l(),Ig=a("li"),vae=a("strong"),yro=o("ctrl"),Lro=o(" \u2014 "),zR=a("a"),xro=o("CTRLTokenizer"),$ro=o(" (CTRL model)"),kro=l(),Vn=a("li"),Fae=a("strong"),Sro=o("data2vec-text"),Rro=o(" \u2014 "),WR=a("a"),Pro=o("RobertaTokenizer"),Bro=o(" or "),QR=a("a"),Iro=o("RobertaTokenizerFast"),Nro=o(" (Data2VecText model)"),qro=l(),Xn=a("li"),Tae=a("strong"),jro=o("deberta"),Dro=o(" \u2014 "),HR=a("a"),Gro=o("DebertaTokenizer"),Oro=o(" or "),UR=a("a"),Vro=o("DebertaTokenizerFast"),Xro=o(" (DeBERTa model)"),zro=l(),zn=a("li"),Mae=a("strong"),Wro=o("deberta-v2"),Qro=o(" \u2014 "),JR=a("a"),Hro=o("DebertaV2Tokenizer"),Uro=o(" or "),YR=a("a"),Jro=o("DebertaV2TokenizerFast"),Yro=o(" (DeBERTa-v2 model)"),Kro=l(),Wn=a("li"),Eae=a("strong"),Zro=o("distilbert"),eto=o(" \u2014 "),KR=a("a"),oto=o("DistilBertTokenizer"),rto=o(" or "),ZR=a("a"),tto=o("DistilBertTokenizerFast"),ato=o(" (DistilBERT model)"),nto=l(),Qn=a("li"),Cae=a("strong"),sto=o("dpr"),lto=o(" \u2014 "),eP=a("a"),ito=o("DPRQuestionEncoderTokenizer"),dto=o(" or "),oP=a("a"),cto=o("DPRQuestionEncoderTokenizerFast"),fto=o(" (DPR model)"),mto=l(),Hn=a("li"),wae=a("strong"),gto=o("electra"),hto=o(" \u2014 "),rP=a("a"),pto=o("ElectraTokenizer"),_to=o(" or "),tP=a("a"),uto=o("ElectraTokenizerFast"),bto=o(" (ELECTRA model)"),vto=l(),Ng=a("li"),Aae=a("strong"),Fto=o("flaubert"),Tto=o(" \u2014 "),aP=a("a"),Mto=o("FlaubertTokenizer"),Eto=o(" (FlauBERT model)"),Cto=l(),Un=a("li"),yae=a("strong"),wto=o("fnet"),Ato=o(" \u2014 "),nP=a("a"),yto=o("FNetTokenizer"),Lto=o(" or "),sP=a("a"),xto=o("FNetTokenizerFast"),$to=o(" (FNet model)"),kto=l(),qg=a("li"),Lae=a("strong"),Sto=o("fsmt"),Rto=o(" \u2014 "),lP=a("a"),Pto=o("FSMTTokenizer"),Bto=o(" (FairSeq Machine-Translation model)"),Ito=l(),Jn=a("li"),xae=a("strong"),Nto=o("funnel"),qto=o(" \u2014 "),iP=a("a"),jto=o("FunnelTokenizer"),Dto=o(" or "),dP=a("a"),Gto=o("FunnelTokenizerFast"),Oto=o(" (Funnel Transformer model)"),Vto=l(),Yn=a("li"),$ae=a("strong"),Xto=o("gpt2"),zto=o(" \u2014 "),cP=a("a"),Wto=o("GPT2Tokenizer"),Qto=o(" or "),fP=a("a"),Hto=o("GPT2TokenizerFast"),Uto=o(" (OpenAI GPT-2 model)"),Jto=l(),Kn=a("li"),kae=a("strong"),Yto=o("gpt_neo"),Kto=o(" \u2014 "),mP=a("a"),Zto=o("GPT2Tokenizer"),eao=o(" or "),gP=a("a"),oao=o("GPT2TokenizerFast"),rao=o(" (GPT Neo model)"),tao=l(),jg=a("li"),Sae=a("strong"),aao=o("gpt_neox"),nao=o(" \u2014 "),hP=a("a"),sao=o("GPTNeoXTokenizerFast"),lao=o(" (GPT NeoX model)"),iao=l(),Zn=a("li"),Rae=a("strong"),dao=o("gptj"),cao=o(" \u2014 "),pP=a("a"),fao=o("GPT2Tokenizer"),mao=o(" or "),_P=a("a"),gao=o("GPT2TokenizerFast"),hao=o(" (GPT-J model)"),pao=l(),es=a("li"),Pae=a("strong"),_ao=o("herbert"),uao=o(" \u2014 "),uP=a("a"),bao=o("HerbertTokenizer"),vao=o(" or "),bP=a("a"),Fao=o("HerbertTokenizerFast"),Tao=o(" (HerBERT model)"),Mao=l(),Dg=a("li"),Bae=a("strong"),Eao=o("hubert"),Cao=o(" \u2014 "),vP=a("a"),wao=o("Wav2Vec2CTCTokenizer"),Aao=o(" (Hubert model)"),yao=l(),os=a("li"),Iae=a("strong"),Lao=o("ibert"),xao=o(" \u2014 "),FP=a("a"),$ao=o("RobertaTokenizer"),kao=o(" or "),TP=a("a"),Sao=o("RobertaTokenizerFast"),Rao=o(" (I-BERT model)"),Pao=l(),rs=a("li"),Nae=a("strong"),Bao=o("layoutlm"),Iao=o(" \u2014 "),MP=a("a"),Nao=o("LayoutLMTokenizer"),qao=o(" or "),EP=a("a"),jao=o("LayoutLMTokenizerFast"),Dao=o(" (LayoutLM model)"),Gao=l(),ts=a("li"),qae=a("strong"),Oao=o("layoutlmv2"),Vao=o(" \u2014 "),CP=a("a"),Xao=o("LayoutLMv2Tokenizer"),zao=o(" or "),wP=a("a"),Wao=o("LayoutLMv2TokenizerFast"),Qao=o(" (LayoutLMv2 model)"),Hao=l(),as=a("li"),jae=a("strong"),Uao=o("layoutlmv3"),Jao=o(" \u2014 "),AP=a("a"),Yao=o("LayoutLMv3Tokenizer"),Kao=o(" or "),yP=a("a"),Zao=o("LayoutLMv3TokenizerFast"),eno=o(" (LayoutLMv3 model)"),ono=l(),ns=a("li"),Dae=a("strong"),rno=o("layoutxlm"),tno=o(" \u2014 "),LP=a("a"),ano=o("LayoutXLMTokenizer"),nno=o(" or "),xP=a("a"),sno=o("LayoutXLMTokenizerFast"),lno=o(" (LayoutXLM model)"),ino=l(),ss=a("li"),Gae=a("strong"),dno=o("led"),cno=o(" \u2014 "),$P=a("a"),fno=o("LEDTokenizer"),mno=o(" or "),kP=a("a"),gno=o("LEDTokenizerFast"),hno=o(" (LED model)"),pno=l(),ls=a("li"),Oae=a("strong"),_no=o("longformer"),uno=o(" \u2014 "),SP=a("a"),bno=o("LongformerTokenizer"),vno=o(" or "),RP=a("a"),Fno=o("LongformerTokenizerFast"),Tno=o(" (Longformer model)"),Mno=l(),Gg=a("li"),Vae=a("strong"),Eno=o("luke"),Cno=o(" \u2014 "),PP=a("a"),wno=o("LukeTokenizer"),Ano=o(" (LUKE model)"),yno=l(),is=a("li"),Xae=a("strong"),Lno=o("lxmert"),xno=o(" \u2014 "),BP=a("a"),$no=o("LxmertTokenizer"),kno=o(" or "),IP=a("a"),Sno=o("LxmertTokenizerFast"),Rno=o(" (LXMERT model)"),Pno=l(),Og=a("li"),zae=a("strong"),Bno=o("m2m_100"),Ino=o(" \u2014 "),NP=a("a"),Nno=o("M2M100Tokenizer"),qno=o(" (M2M100 model)"),jno=l(),Vg=a("li"),Wae=a("strong"),Dno=o("marian"),Gno=o(" \u2014 "),qP=a("a"),Ono=o("MarianTokenizer"),Vno=o(" (Marian model)"),Xno=l(),ds=a("li"),Qae=a("strong"),zno=o("mbart"),Wno=o(" \u2014 "),jP=a("a"),Qno=o("MBartTokenizer"),Hno=o(" or "),DP=a("a"),Uno=o("MBartTokenizerFast"),Jno=o(" (mBART model)"),Yno=l(),cs=a("li"),Hae=a("strong"),Kno=o("mbart50"),Zno=o(" \u2014 "),GP=a("a"),eso=o("MBart50Tokenizer"),oso=o(" or "),OP=a("a"),rso=o("MBart50TokenizerFast"),tso=o(" (mBART-50 model)"),aso=l(),fs=a("li"),Uae=a("strong"),nso=o("megatron-bert"),sso=o(" \u2014 "),VP=a("a"),lso=o("BertTokenizer"),iso=o(" or "),XP=a("a"),dso=o("BertTokenizerFast"),cso=o(" (Megatron-BERT model)"),fso=l(),Xg=a("li"),Jae=a("strong"),mso=o("mluke"),gso=o(" \u2014 "),zP=a("a"),hso=o("MLukeTokenizer"),pso=o(" (mLUKE model)"),_so=l(),ms=a("li"),Yae=a("strong"),uso=o("mobilebert"),bso=o(" \u2014 "),WP=a("a"),vso=o("MobileBertTokenizer"),Fso=o(" or "),QP=a("a"),Tso=o("MobileBertTokenizerFast"),Mso=o(" (MobileBERT model)"),Eso=l(),gs=a("li"),Kae=a("strong"),Cso=o("mpnet"),wso=o(" \u2014 "),HP=a("a"),Aso=o("MPNetTokenizer"),yso=o(" or "),UP=a("a"),Lso=o("MPNetTokenizerFast"),xso=o(" (MPNet model)"),$so=l(),hs=a("li"),Zae=a("strong"),kso=o("mt5"),Sso=o(" \u2014 "),JP=a("a"),Rso=o("MT5Tokenizer"),Pso=o(" or "),YP=a("a"),Bso=o("MT5TokenizerFast"),Iso=o(" (MT5 model)"),Nso=l(),ps=a("li"),ene=a("strong"),qso=o("nystromformer"),jso=o(" \u2014 "),KP=a("a"),Dso=o("AlbertTokenizer"),Gso=o(" or "),ZP=a("a"),Oso=o("AlbertTokenizerFast"),Vso=o(" (Nystr\xF6mformer model)"),Xso=l(),_s=a("li"),one=a("strong"),zso=o("openai-gpt"),Wso=o(" \u2014 "),eB=a("a"),Qso=o("OpenAIGPTTokenizer"),Hso=o(" or "),oB=a("a"),Uso=o("OpenAIGPTTokenizerFast"),Jso=o(" (OpenAI GPT model)"),Yso=l(),zg=a("li"),rne=a("strong"),Kso=o("opt"),Zso=o(" \u2014 "),rB=a("a"),elo=o("GPT2Tokenizer"),olo=o(" (OPT model)"),rlo=l(),us=a("li"),tne=a("strong"),tlo=o("pegasus"),alo=o(" \u2014 "),tB=a("a"),nlo=o("PegasusTokenizer"),slo=o(" or "),aB=a("a"),llo=o("PegasusTokenizerFast"),ilo=o(" (Pegasus model)"),dlo=l(),Wg=a("li"),ane=a("strong"),clo=o("perceiver"),flo=o(" \u2014 "),nB=a("a"),mlo=o("PerceiverTokenizer"),glo=o(" (Perceiver model)"),hlo=l(),Qg=a("li"),nne=a("strong"),plo=o("phobert"),_lo=o(" \u2014 "),sB=a("a"),ulo=o("PhobertTokenizer"),blo=o(" (PhoBERT model)"),vlo=l(),Hg=a("li"),sne=a("strong"),Flo=o("plbart"),Tlo=o(" \u2014 "),lB=a("a"),Mlo=o("PLBartTokenizer"),Elo=o(" (PLBart model)"),Clo=l(),Ug=a("li"),lne=a("strong"),wlo=o("prophetnet"),Alo=o(" \u2014 "),iB=a("a"),ylo=o("ProphetNetTokenizer"),Llo=o(" (ProphetNet model)"),xlo=l(),bs=a("li"),ine=a("strong"),$lo=o("qdqbert"),klo=o(" \u2014 "),dB=a("a"),Slo=o("BertTokenizer"),Rlo=o(" or "),cB=a("a"),Plo=o("BertTokenizerFast"),Blo=o(" (QDQBert model)"),Ilo=l(),Jg=a("li"),dne=a("strong"),Nlo=o("rag"),qlo=o(" \u2014 "),fB=a("a"),jlo=o("RagTokenizer"),Dlo=o(" (RAG model)"),Glo=l(),vs=a("li"),cne=a("strong"),Olo=o("realm"),Vlo=o(" \u2014 "),mB=a("a"),Xlo=o("RealmTokenizer"),zlo=o(" or "),gB=a("a"),Wlo=o("RealmTokenizerFast"),Qlo=o(" (REALM model)"),Hlo=l(),Fs=a("li"),fne=a("strong"),Ulo=o("reformer"),Jlo=o(" \u2014 "),hB=a("a"),Ylo=o("ReformerTokenizer"),Klo=o(" or "),pB=a("a"),Zlo=o("ReformerTokenizerFast"),eio=o(" (Reformer model)"),oio=l(),Ts=a("li"),mne=a("strong"),rio=o("rembert"),tio=o(" \u2014 "),_B=a("a"),aio=o("RemBertTokenizer"),nio=o(" or "),uB=a("a"),sio=o("RemBertTokenizerFast"),lio=o(" (RemBERT model)"),iio=l(),Ms=a("li"),gne=a("strong"),dio=o("retribert"),cio=o(" \u2014 "),bB=a("a"),fio=o("RetriBertTokenizer"),mio=o(" or "),vB=a("a"),gio=o("RetriBertTokenizerFast"),hio=o(" (RetriBERT model)"),pio=l(),Es=a("li"),hne=a("strong"),_io=o("roberta"),uio=o(" \u2014 "),FB=a("a"),bio=o("RobertaTokenizer"),vio=o(" or "),TB=a("a"),Fio=o("RobertaTokenizerFast"),Tio=o(" (RoBERTa model)"),Mio=l(),Cs=a("li"),pne=a("strong"),Eio=o("roformer"),Cio=o(" \u2014 "),MB=a("a"),wio=o("RoFormerTokenizer"),Aio=o(" or "),EB=a("a"),yio=o("RoFormerTokenizerFast"),Lio=o(" (RoFormer model)"),xio=l(),Yg=a("li"),_ne=a("strong"),$io=o("speech_to_text"),kio=o(" \u2014 "),CB=a("a"),Sio=o("Speech2TextTokenizer"),Rio=o(" (Speech2Text model)"),Pio=l(),Kg=a("li"),une=a("strong"),Bio=o("speech_to_text_2"),Iio=o(" \u2014 "),wB=a("a"),Nio=o("Speech2Text2Tokenizer"),qio=o(" (Speech2Text2 model)"),jio=l(),ws=a("li"),bne=a("strong"),Dio=o("splinter"),Gio=o(" \u2014 "),AB=a("a"),Oio=o("SplinterTokenizer"),Vio=o(" or "),yB=a("a"),Xio=o("SplinterTokenizerFast"),zio=o(" (Splinter model)"),Wio=l(),As=a("li"),vne=a("strong"),Qio=o("squeezebert"),Hio=o(" \u2014 "),LB=a("a"),Uio=o("SqueezeBertTokenizer"),Jio=o(" or "),xB=a("a"),Yio=o("SqueezeBertTokenizerFast"),Kio=o(" (SqueezeBERT model)"),Zio=l(),ys=a("li"),Fne=a("strong"),edo=o("t5"),odo=o(" \u2014 "),$B=a("a"),rdo=o("T5Tokenizer"),tdo=o(" or "),kB=a("a"),ado=o("T5TokenizerFast"),ndo=o(" (T5 model)"),sdo=l(),Zg=a("li"),Tne=a("strong"),ldo=o("tapas"),ido=o(" \u2014 "),SB=a("a"),ddo=o("TapasTokenizer"),cdo=o(" (TAPAS model)"),fdo=l(),eh=a("li"),Mne=a("strong"),mdo=o("tapex"),gdo=o(" \u2014 "),RB=a("a"),hdo=o("TapexTokenizer"),pdo=o(" (TAPEX model)"),_do=l(),oh=a("li"),Ene=a("strong"),udo=o("transfo-xl"),bdo=o(" \u2014 "),PB=a("a"),vdo=o("TransfoXLTokenizer"),Fdo=o(" (Transformer-XL model)"),Tdo=l(),Ls=a("li"),Cne=a("strong"),Mdo=o("visual_bert"),Edo=o(" \u2014 "),BB=a("a"),Cdo=o("BertTokenizer"),wdo=o(" or "),IB=a("a"),Ado=o("BertTokenizerFast"),ydo=o(" (VisualBERT model)"),Ldo=l(),rh=a("li"),wne=a("strong"),xdo=o("wav2vec2"),$do=o(" \u2014 "),NB=a("a"),kdo=o("Wav2Vec2CTCTokenizer"),Sdo=o(" (Wav2Vec2 model)"),Rdo=l(),th=a("li"),Ane=a("strong"),Pdo=o("wav2vec2-conformer"),Bdo=o(" \u2014 "),qB=a("a"),Ido=o("Wav2Vec2CTCTokenizer"),Ndo=o(" (Wav2Vec2-Conformer model)"),qdo=l(),ah=a("li"),yne=a("strong"),jdo=o("wav2vec2_phoneme"),Ddo=o(" \u2014 "),jB=a("a"),Gdo=o("Wav2Vec2PhonemeCTCTokenizer"),Odo=o(" (Wav2Vec2Phoneme model)"),Vdo=l(),xs=a("li"),Lne=a("strong"),Xdo=o("xglm"),zdo=o(" \u2014 "),DB=a("a"),Wdo=o("XGLMTokenizer"),Qdo=o(" or "),GB=a("a"),Hdo=o("XGLMTokenizerFast"),Udo=o(" (XGLM model)"),Jdo=l(),nh=a("li"),xne=a("strong"),Ydo=o("xlm"),Kdo=o(" \u2014 "),OB=a("a"),Zdo=o("XLMTokenizer"),eco=o(" (XLM model)"),oco=l(),sh=a("li"),$ne=a("strong"),rco=o("xlm-prophetnet"),tco=o(" \u2014 "),VB=a("a"),aco=o("XLMProphetNetTokenizer"),nco=o(" (XLM-ProphetNet model)"),sco=l(),$s=a("li"),kne=a("strong"),lco=o("xlm-roberta"),ico=o(" \u2014 "),XB=a("a"),dco=o("XLMRobertaTokenizer"),cco=o(" or "),zB=a("a"),fco=o("XLMRobertaTokenizerFast"),mco=o(" (XLM-RoBERTa model)"),gco=l(),ks=a("li"),Sne=a("strong"),hco=o("xlm-roberta-xl"),pco=o(" \u2014 "),WB=a("a"),_co=o("RobertaTokenizer"),uco=o(" or "),QB=a("a"),bco=o("RobertaTokenizerFast"),vco=o(" (XLM-RoBERTa-XL model)"),Fco=l(),Ss=a("li"),Rne=a("strong"),Tco=o("xlnet"),Mco=o(" \u2014 "),HB=a("a"),Eco=o("XLNetTokenizer"),Cco=o(" or "),UB=a("a"),wco=o("XLNetTokenizerFast"),Aco=o(" (XLNet model)"),yco=l(),Rs=a("li"),Pne=a("strong"),Lco=o("yoso"),xco=o(" \u2014 "),JB=a("a"),$co=o("AlbertTokenizer"),kco=o(" or "),YB=a("a"),Sco=o("AlbertTokenizerFast"),Rco=o(" (YOSO model)"),Pco=l(),F(lh.$$.fragment),Bco=l(),ih=a("div"),F(ZA.$$.fragment),Ico=l(),Bne=a("p"),Nco=o("Register a new tokenizer in this mapping."),sje=l(),Ei=a("h2"),dh=a("a"),Ine=a("span"),F(ey.$$.fragment),qco=l(),Nne=a("span"),jco=o("AutoFeatureExtractor"),lje=l(),Ao=a("div"),F(oy.$$.fragment),Dco=l(),ry=a("p"),Gco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),KB=a("a"),Oco=o("AutoFeatureExtractor.from_pretrained()"),Vco=o(" class method."),Xco=l(),ty=a("p"),zco=o("This class cannot be instantiated directly using "),qne=a("code"),Wco=o("__init__()"),Qco=o(" (throws an error)."),Hco=l(),He=a("div"),F(ay.$$.fragment),Uco=l(),jne=a("p"),Jco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Yco=l(),ya=a("p"),Kco=o("The feature extractor class to instantiate is selected based on the "),Dne=a("code"),Zco=o("model_type"),efo=o(` property of the config object
(either passed as an argument or loaded from `),Gne=a("code"),ofo=o("pretrained_model_name_or_path"),rfo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),One=a("code"),tfo=o("pretrained_model_name_or_path"),afo=o(":"),nfo=l(),Y=a("ul"),ch=a("li"),Vne=a("strong"),sfo=o("beit"),lfo=o(" \u2014 "),ZB=a("a"),ifo=o("BeitFeatureExtractor"),dfo=o(" (BEiT model)"),cfo=l(),fh=a("li"),Xne=a("strong"),ffo=o("clip"),mfo=o(" \u2014 "),eI=a("a"),gfo=o("CLIPFeatureExtractor"),hfo=o(" (CLIP model)"),pfo=l(),mh=a("li"),zne=a("strong"),_fo=o("convnext"),ufo=o(" \u2014 "),oI=a("a"),bfo=o("ConvNextFeatureExtractor"),vfo=o(" (ConvNeXT model)"),Ffo=l(),gh=a("li"),Wne=a("strong"),Tfo=o("cvt"),Mfo=o(" \u2014 "),rI=a("a"),Efo=o("ConvNextFeatureExtractor"),Cfo=o(" (CvT model)"),wfo=l(),hh=a("li"),Qne=a("strong"),Afo=o("data2vec-audio"),yfo=o(" \u2014 "),tI=a("a"),Lfo=o("Wav2Vec2FeatureExtractor"),xfo=o(" (Data2VecAudio model)"),$fo=l(),ph=a("li"),Hne=a("strong"),kfo=o("data2vec-vision"),Sfo=o(" \u2014 "),aI=a("a"),Rfo=o("BeitFeatureExtractor"),Pfo=o(" (Data2VecVision model)"),Bfo=l(),_h=a("li"),Une=a("strong"),Ifo=o("deit"),Nfo=o(" \u2014 "),nI=a("a"),qfo=o("DeiTFeatureExtractor"),jfo=o(" (DeiT model)"),Dfo=l(),uh=a("li"),Jne=a("strong"),Gfo=o("detr"),Ofo=o(" \u2014 "),sI=a("a"),Vfo=o("DetrFeatureExtractor"),Xfo=o(" (DETR model)"),zfo=l(),bh=a("li"),Yne=a("strong"),Wfo=o("dpt"),Qfo=o(" \u2014 "),lI=a("a"),Hfo=o("DPTFeatureExtractor"),Ufo=o(" (DPT model)"),Jfo=l(),vh=a("li"),Kne=a("strong"),Yfo=o("flava"),Kfo=o(" \u2014 "),iI=a("a"),Zfo=o("FlavaFeatureExtractor"),emo=o(" (FLAVA model)"),omo=l(),Fh=a("li"),Zne=a("strong"),rmo=o("glpn"),tmo=o(" \u2014 "),dI=a("a"),amo=o("GLPNFeatureExtractor"),nmo=o(" (GLPN model)"),smo=l(),Th=a("li"),ese=a("strong"),lmo=o("hubert"),imo=o(" \u2014 "),cI=a("a"),dmo=o("Wav2Vec2FeatureExtractor"),cmo=o(" (Hubert model)"),fmo=l(),Mh=a("li"),ose=a("strong"),mmo=o("imagegpt"),gmo=o(" \u2014 "),fI=a("a"),hmo=o("ImageGPTFeatureExtractor"),pmo=o(" (ImageGPT model)"),_mo=l(),Eh=a("li"),rse=a("strong"),umo=o("layoutlmv2"),bmo=o(" \u2014 "),mI=a("a"),vmo=o("LayoutLMv2FeatureExtractor"),Fmo=o(" (LayoutLMv2 model)"),Tmo=l(),Ch=a("li"),tse=a("strong"),Mmo=o("layoutlmv3"),Emo=o(" \u2014 "),gI=a("a"),Cmo=o("LayoutLMv3FeatureExtractor"),wmo=o(" (LayoutLMv3 model)"),Amo=l(),wh=a("li"),ase=a("strong"),ymo=o("levit"),Lmo=o(" \u2014 "),hI=a("a"),xmo=o("LevitFeatureExtractor"),$mo=o(" (LeViT model)"),kmo=l(),Ah=a("li"),nse=a("strong"),Smo=o("maskformer"),Rmo=o(" \u2014 "),pI=a("a"),Pmo=o("MaskFormerFeatureExtractor"),Bmo=o(" (MaskFormer model)"),Imo=l(),yh=a("li"),sse=a("strong"),Nmo=o("mctct"),qmo=o(" \u2014 "),_I=a("a"),jmo=o("MCTCTFeatureExtractor"),Dmo=o(" (M-CTC-T model)"),Gmo=l(),Lh=a("li"),lse=a("strong"),Omo=o("perceiver"),Vmo=o(" \u2014 "),uI=a("a"),Xmo=o("PerceiverFeatureExtractor"),zmo=o(" (Perceiver model)"),Wmo=l(),xh=a("li"),ise=a("strong"),Qmo=o("poolformer"),Hmo=o(" \u2014 "),bI=a("a"),Umo=o("PoolFormerFeatureExtractor"),Jmo=o(" (PoolFormer model)"),Ymo=l(),$h=a("li"),dse=a("strong"),Kmo=o("regnet"),Zmo=o(" \u2014 "),vI=a("a"),ego=o("ConvNextFeatureExtractor"),ogo=o(" (RegNet model)"),rgo=l(),kh=a("li"),cse=a("strong"),tgo=o("resnet"),ago=o(" \u2014 "),FI=a("a"),ngo=o("ConvNextFeatureExtractor"),sgo=o(" (ResNet model)"),lgo=l(),Sh=a("li"),fse=a("strong"),igo=o("segformer"),dgo=o(" \u2014 "),TI=a("a"),cgo=o("SegformerFeatureExtractor"),fgo=o(" (SegFormer model)"),mgo=l(),Rh=a("li"),mse=a("strong"),ggo=o("speech_to_text"),hgo=o(" \u2014 "),MI=a("a"),pgo=o("Speech2TextFeatureExtractor"),_go=o(" (Speech2Text model)"),ugo=l(),Ph=a("li"),gse=a("strong"),bgo=o("swin"),vgo=o(" \u2014 "),EI=a("a"),Fgo=o("ViTFeatureExtractor"),Tgo=o(" (Swin Transformer model)"),Mgo=l(),Bh=a("li"),hse=a("strong"),Ego=o("van"),Cgo=o(" \u2014 "),CI=a("a"),wgo=o("ConvNextFeatureExtractor"),Ago=o(" (VAN model)"),ygo=l(),Ih=a("li"),pse=a("strong"),Lgo=o("vit"),xgo=o(" \u2014 "),wI=a("a"),$go=o("ViTFeatureExtractor"),kgo=o(" (ViT model)"),Sgo=l(),Nh=a("li"),_se=a("strong"),Rgo=o("vit_mae"),Pgo=o(" \u2014 "),AI=a("a"),Bgo=o("ViTFeatureExtractor"),Igo=o(" (ViTMAE model)"),Ngo=l(),qh=a("li"),use=a("strong"),qgo=o("wav2vec2"),jgo=o(" \u2014 "),yI=a("a"),Dgo=o("Wav2Vec2FeatureExtractor"),Ggo=o(" (Wav2Vec2 model)"),Ogo=l(),jh=a("li"),bse=a("strong"),Vgo=o("wav2vec2-conformer"),Xgo=o(" \u2014 "),LI=a("a"),zgo=o("Wav2Vec2FeatureExtractor"),Wgo=o(" (Wav2Vec2-Conformer model)"),Qgo=l(),Dh=a("li"),vse=a("strong"),Hgo=o("yolos"),Ugo=o(" \u2014 "),xI=a("a"),Jgo=o("YolosFeatureExtractor"),Ygo=o(" (YOLOS model)"),Kgo=l(),F(Gh.$$.fragment),Zgo=l(),F(Oh.$$.fragment),eho=l(),Vh=a("div"),F(ny.$$.fragment),oho=l(),Fse=a("p"),rho=o("Register a new feature extractor for this class."),ije=l(),Ci=a("h2"),Xh=a("a"),Tse=a("span"),F(sy.$$.fragment),tho=l(),Mse=a("span"),aho=o("AutoProcessor"),dje=l(),yo=a("div"),F(ly.$$.fragment),nho=l(),iy=a("p"),sho=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$I=a("a"),lho=o("AutoProcessor.from_pretrained()"),iho=o(" class method."),dho=l(),dy=a("p"),cho=o("This class cannot be instantiated directly using "),Ese=a("code"),fho=o("__init__()"),mho=o(" (throws an error)."),gho=l(),Ue=a("div"),F(cy.$$.fragment),hho=l(),Cse=a("p"),pho=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),_ho=l(),wi=a("p"),uho=o("The processor class to instantiate is selected based on the "),wse=a("code"),bho=o("model_type"),vho=o(` property of the config object (either
passed as an argument or loaded from `),Ase=a("code"),Fho=o("pretrained_model_name_or_path"),Tho=o(" if possible):"),Mho=l(),he=a("ul"),zh=a("li"),yse=a("strong"),Eho=o("clip"),Cho=o(" \u2014 "),kI=a("a"),who=o("CLIPProcessor"),Aho=o(" (CLIP model)"),yho=l(),Wh=a("li"),Lse=a("strong"),Lho=o("flava"),xho=o(" \u2014 "),xse=a("code"),$ho=o("FLAVAProcessor"),kho=o(" (FLAVA model)"),Sho=l(),Qh=a("li"),$se=a("strong"),Rho=o("layoutlmv2"),Pho=o(" \u2014 "),SI=a("a"),Bho=o("LayoutLMv2Processor"),Iho=o(" (LayoutLMv2 model)"),Nho=l(),Hh=a("li"),kse=a("strong"),qho=o("layoutlmv3"),jho=o(" \u2014 "),RI=a("a"),Dho=o("LayoutLMv3Processor"),Gho=o(" (LayoutLMv3 model)"),Oho=l(),Uh=a("li"),Sse=a("strong"),Vho=o("layoutxlm"),Xho=o(" \u2014 "),PI=a("a"),zho=o("LayoutXLMProcessor"),Who=o(" (LayoutXLM model)"),Qho=l(),Jh=a("li"),Rse=a("strong"),Hho=o("sew"),Uho=o(" \u2014 "),BI=a("a"),Jho=o("Wav2Vec2Processor"),Yho=o(" (SEW model)"),Kho=l(),Yh=a("li"),Pse=a("strong"),Zho=o("sew-d"),epo=o(" \u2014 "),II=a("a"),opo=o("Wav2Vec2Processor"),rpo=o(" (SEW-D model)"),tpo=l(),Kh=a("li"),Bse=a("strong"),apo=o("speech_to_text"),npo=o(" \u2014 "),NI=a("a"),spo=o("Speech2TextProcessor"),lpo=o(" (Speech2Text model)"),ipo=l(),Zh=a("li"),Ise=a("strong"),dpo=o("speech_to_text_2"),cpo=o(" \u2014 "),qI=a("a"),fpo=o("Speech2Text2Processor"),mpo=o(" (Speech2Text2 model)"),gpo=l(),ep=a("li"),Nse=a("strong"),hpo=o("trocr"),ppo=o(" \u2014 "),jI=a("a"),_po=o("TrOCRProcessor"),upo=o(" (TrOCR model)"),bpo=l(),op=a("li"),qse=a("strong"),vpo=o("unispeech"),Fpo=o(" \u2014 "),DI=a("a"),Tpo=o("Wav2Vec2Processor"),Mpo=o(" (UniSpeech model)"),Epo=l(),rp=a("li"),jse=a("strong"),Cpo=o("unispeech-sat"),wpo=o(" \u2014 "),GI=a("a"),Apo=o("Wav2Vec2Processor"),ypo=o(" (UniSpeechSat model)"),Lpo=l(),tp=a("li"),Dse=a("strong"),xpo=o("vilt"),$po=o(" \u2014 "),OI=a("a"),kpo=o("ViltProcessor"),Spo=o(" (ViLT model)"),Rpo=l(),ap=a("li"),Gse=a("strong"),Ppo=o("vision-text-dual-encoder"),Bpo=o(" \u2014 "),VI=a("a"),Ipo=o("VisionTextDualEncoderProcessor"),Npo=o(" (VisionTextDualEncoder model)"),qpo=l(),np=a("li"),Ose=a("strong"),jpo=o("wav2vec2"),Dpo=o(" \u2014 "),XI=a("a"),Gpo=o("Wav2Vec2Processor"),Opo=o(" (Wav2Vec2 model)"),Vpo=l(),sp=a("li"),Vse=a("strong"),Xpo=o("wav2vec2-conformer"),zpo=o(" \u2014 "),zI=a("a"),Wpo=o("Wav2Vec2Processor"),Qpo=o(" (Wav2Vec2-Conformer model)"),Hpo=l(),lp=a("li"),Xse=a("strong"),Upo=o("wavlm"),Jpo=o(" \u2014 "),WI=a("a"),Ypo=o("Wav2Vec2Processor"),Kpo=o(" (WavLM model)"),Zpo=l(),F(ip.$$.fragment),e_o=l(),F(dp.$$.fragment),o_o=l(),cp=a("div"),F(fy.$$.fragment),r_o=l(),zse=a("p"),t_o=o("Register a new processor for this class."),cje=l(),Ai=a("h2"),fp=a("a"),Wse=a("span"),F(my.$$.fragment),a_o=l(),Qse=a("span"),n_o=o("AutoModel"),fje=l(),Lo=a("div"),F(gy.$$.fragment),s_o=l(),yi=a("p"),l_o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QI=a("a"),i_o=o("from_pretrained()"),d_o=o(" class method or the "),HI=a("a"),c_o=o("from_config()"),f_o=o(` class
method.`),m_o=l(),hy=a("p"),g_o=o("This class cannot be instantiated directly using "),Hse=a("code"),h_o=o("__init__()"),p_o=o(" (throws an error)."),__o=l(),tt=a("div"),F(py.$$.fragment),u_o=l(),Use=a("p"),b_o=o("Instantiates one of the base model classes of the library from a configuration."),v_o=l(),Li=a("p"),F_o=o(`Note:
Loading a model from its configuration file does `),Jse=a("strong"),T_o=o("not"),M_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UI=a("a"),E_o=o("from_pretrained()"),C_o=o(" to load the model weights."),w_o=l(),F(mp.$$.fragment),A_o=l(),Je=a("div"),F(_y.$$.fragment),y_o=l(),Yse=a("p"),L_o=o("Instantiate one of the base model classes of the library from a pretrained model."),x_o=l(),La=a("p"),$_o=o("The model class to instantiate is selected based on the "),Kse=a("code"),k_o=o("model_type"),S_o=o(` property of the config object (either
passed as an argument or loaded from `),Zse=a("code"),R_o=o("pretrained_model_name_or_path"),P_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=a("code"),B_o=o("pretrained_model_name_or_path"),I_o=o(":"),N_o=l(),x=a("ul"),gp=a("li"),ole=a("strong"),q_o=o("albert"),j_o=o(" \u2014 "),JI=a("a"),D_o=o("AlbertModel"),G_o=o(" (ALBERT model)"),O_o=l(),hp=a("li"),rle=a("strong"),V_o=o("bart"),X_o=o(" \u2014 "),YI=a("a"),z_o=o("BartModel"),W_o=o(" (BART model)"),Q_o=l(),pp=a("li"),tle=a("strong"),H_o=o("beit"),U_o=o(" \u2014 "),KI=a("a"),J_o=o("BeitModel"),Y_o=o(" (BEiT model)"),K_o=l(),_p=a("li"),ale=a("strong"),Z_o=o("bert"),euo=o(" \u2014 "),ZI=a("a"),ouo=o("BertModel"),ruo=o(" (BERT model)"),tuo=l(),up=a("li"),nle=a("strong"),auo=o("bert-generation"),nuo=o(" \u2014 "),eN=a("a"),suo=o("BertGenerationEncoder"),luo=o(" (Bert Generation model)"),iuo=l(),bp=a("li"),sle=a("strong"),duo=o("big_bird"),cuo=o(" \u2014 "),oN=a("a"),fuo=o("BigBirdModel"),muo=o(" (BigBird model)"),guo=l(),vp=a("li"),lle=a("strong"),huo=o("bigbird_pegasus"),puo=o(" \u2014 "),rN=a("a"),_uo=o("BigBirdPegasusModel"),uuo=o(" (BigBird-Pegasus model)"),buo=l(),Fp=a("li"),ile=a("strong"),vuo=o("blenderbot"),Fuo=o(" \u2014 "),tN=a("a"),Tuo=o("BlenderbotModel"),Muo=o(" (Blenderbot model)"),Euo=l(),Tp=a("li"),dle=a("strong"),Cuo=o("blenderbot-small"),wuo=o(" \u2014 "),aN=a("a"),Auo=o("BlenderbotSmallModel"),yuo=o(" (BlenderbotSmall model)"),Luo=l(),Mp=a("li"),cle=a("strong"),xuo=o("camembert"),$uo=o(" \u2014 "),nN=a("a"),kuo=o("CamembertModel"),Suo=o(" (CamemBERT model)"),Ruo=l(),Ep=a("li"),fle=a("strong"),Puo=o("canine"),Buo=o(" \u2014 "),sN=a("a"),Iuo=o("CanineModel"),Nuo=o(" (CANINE model)"),quo=l(),Cp=a("li"),mle=a("strong"),juo=o("clip"),Duo=o(" \u2014 "),lN=a("a"),Guo=o("CLIPModel"),Ouo=o(" (CLIP model)"),Vuo=l(),wp=a("li"),gle=a("strong"),Xuo=o("convbert"),zuo=o(" \u2014 "),iN=a("a"),Wuo=o("ConvBertModel"),Quo=o(" (ConvBERT model)"),Huo=l(),Ap=a("li"),hle=a("strong"),Uuo=o("convnext"),Juo=o(" \u2014 "),dN=a("a"),Yuo=o("ConvNextModel"),Kuo=o(" (ConvNeXT model)"),Zuo=l(),yp=a("li"),ple=a("strong"),e2o=o("ctrl"),o2o=o(" \u2014 "),cN=a("a"),r2o=o("CTRLModel"),t2o=o(" (CTRL model)"),a2o=l(),Lp=a("li"),_le=a("strong"),n2o=o("cvt"),s2o=o(" \u2014 "),fN=a("a"),l2o=o("CvtModel"),i2o=o(" (CvT model)"),d2o=l(),xp=a("li"),ule=a("strong"),c2o=o("data2vec-audio"),f2o=o(" \u2014 "),mN=a("a"),m2o=o("Data2VecAudioModel"),g2o=o(" (Data2VecAudio model)"),h2o=l(),$p=a("li"),ble=a("strong"),p2o=o("data2vec-text"),_2o=o(" \u2014 "),gN=a("a"),u2o=o("Data2VecTextModel"),b2o=o(" (Data2VecText model)"),v2o=l(),kp=a("li"),vle=a("strong"),F2o=o("data2vec-vision"),T2o=o(" \u2014 "),hN=a("a"),M2o=o("Data2VecVisionModel"),E2o=o(" (Data2VecVision model)"),C2o=l(),Sp=a("li"),Fle=a("strong"),w2o=o("deberta"),A2o=o(" \u2014 "),pN=a("a"),y2o=o("DebertaModel"),L2o=o(" (DeBERTa model)"),x2o=l(),Rp=a("li"),Tle=a("strong"),$2o=o("deberta-v2"),k2o=o(" \u2014 "),_N=a("a"),S2o=o("DebertaV2Model"),R2o=o(" (DeBERTa-v2 model)"),P2o=l(),Pp=a("li"),Mle=a("strong"),B2o=o("decision_transformer"),I2o=o(" \u2014 "),uN=a("a"),N2o=o("DecisionTransformerModel"),q2o=o(" (Decision Transformer model)"),j2o=l(),Bp=a("li"),Ele=a("strong"),D2o=o("deit"),G2o=o(" \u2014 "),bN=a("a"),O2o=o("DeiTModel"),V2o=o(" (DeiT model)"),X2o=l(),Ip=a("li"),Cle=a("strong"),z2o=o("detr"),W2o=o(" \u2014 "),vN=a("a"),Q2o=o("DetrModel"),H2o=o(" (DETR model)"),U2o=l(),Np=a("li"),wle=a("strong"),J2o=o("distilbert"),Y2o=o(" \u2014 "),FN=a("a"),K2o=o("DistilBertModel"),Z2o=o(" (DistilBERT model)"),e1o=l(),qp=a("li"),Ale=a("strong"),o1o=o("dpr"),r1o=o(" \u2014 "),TN=a("a"),t1o=o("DPRQuestionEncoder"),a1o=o(" (DPR model)"),n1o=l(),jp=a("li"),yle=a("strong"),s1o=o("dpt"),l1o=o(" \u2014 "),MN=a("a"),i1o=o("DPTModel"),d1o=o(" (DPT model)"),c1o=l(),Dp=a("li"),Lle=a("strong"),f1o=o("electra"),m1o=o(" \u2014 "),EN=a("a"),g1o=o("ElectraModel"),h1o=o(" (ELECTRA model)"),p1o=l(),Gp=a("li"),xle=a("strong"),_1o=o("flaubert"),u1o=o(" \u2014 "),CN=a("a"),b1o=o("FlaubertModel"),v1o=o(" (FlauBERT model)"),F1o=l(),Op=a("li"),$le=a("strong"),T1o=o("flava"),M1o=o(" \u2014 "),wN=a("a"),E1o=o("FlavaModel"),C1o=o(" (FLAVA model)"),w1o=l(),Vp=a("li"),kle=a("strong"),A1o=o("fnet"),y1o=o(" \u2014 "),AN=a("a"),L1o=o("FNetModel"),x1o=o(" (FNet model)"),$1o=l(),Xp=a("li"),Sle=a("strong"),k1o=o("fsmt"),S1o=o(" \u2014 "),yN=a("a"),R1o=o("FSMTModel"),P1o=o(" (FairSeq Machine-Translation model)"),B1o=l(),Ps=a("li"),Rle=a("strong"),I1o=o("funnel"),N1o=o(" \u2014 "),LN=a("a"),q1o=o("FunnelModel"),j1o=o(" or "),xN=a("a"),D1o=o("FunnelBaseModel"),G1o=o(" (Funnel Transformer model)"),O1o=l(),zp=a("li"),Ple=a("strong"),V1o=o("glpn"),X1o=o(" \u2014 "),$N=a("a"),z1o=o("GLPNModel"),W1o=o(" (GLPN model)"),Q1o=l(),Wp=a("li"),Ble=a("strong"),H1o=o("gpt2"),U1o=o(" \u2014 "),kN=a("a"),J1o=o("GPT2Model"),Y1o=o(" (OpenAI GPT-2 model)"),K1o=l(),Qp=a("li"),Ile=a("strong"),Z1o=o("gpt_neo"),ebo=o(" \u2014 "),SN=a("a"),obo=o("GPTNeoModel"),rbo=o(" (GPT Neo model)"),tbo=l(),Hp=a("li"),Nle=a("strong"),abo=o("gpt_neox"),nbo=o(" \u2014 "),RN=a("a"),sbo=o("GPTNeoXModel"),lbo=o(" (GPT NeoX model)"),ibo=l(),Up=a("li"),qle=a("strong"),dbo=o("gptj"),cbo=o(" \u2014 "),PN=a("a"),fbo=o("GPTJModel"),mbo=o(" (GPT-J model)"),gbo=l(),Jp=a("li"),jle=a("strong"),hbo=o("hubert"),pbo=o(" \u2014 "),BN=a("a"),_bo=o("HubertModel"),ubo=o(" (Hubert model)"),bbo=l(),Yp=a("li"),Dle=a("strong"),vbo=o("ibert"),Fbo=o(" \u2014 "),IN=a("a"),Tbo=o("IBertModel"),Mbo=o(" (I-BERT model)"),Ebo=l(),Kp=a("li"),Gle=a("strong"),Cbo=o("imagegpt"),wbo=o(" \u2014 "),NN=a("a"),Abo=o("ImageGPTModel"),ybo=o(" (ImageGPT model)"),Lbo=l(),Zp=a("li"),Ole=a("strong"),xbo=o("layoutlm"),$bo=o(" \u2014 "),qN=a("a"),kbo=o("LayoutLMModel"),Sbo=o(" (LayoutLM model)"),Rbo=l(),e_=a("li"),Vle=a("strong"),Pbo=o("layoutlmv2"),Bbo=o(" \u2014 "),jN=a("a"),Ibo=o("LayoutLMv2Model"),Nbo=o(" (LayoutLMv2 model)"),qbo=l(),o_=a("li"),Xle=a("strong"),jbo=o("layoutlmv3"),Dbo=o(" \u2014 "),DN=a("a"),Gbo=o("LayoutLMv3Model"),Obo=o(" (LayoutLMv3 model)"),Vbo=l(),r_=a("li"),zle=a("strong"),Xbo=o("led"),zbo=o(" \u2014 "),GN=a("a"),Wbo=o("LEDModel"),Qbo=o(" (LED model)"),Hbo=l(),t_=a("li"),Wle=a("strong"),Ubo=o("levit"),Jbo=o(" \u2014 "),ON=a("a"),Ybo=o("LevitModel"),Kbo=o(" (LeViT model)"),Zbo=l(),a_=a("li"),Qle=a("strong"),evo=o("longformer"),ovo=o(" \u2014 "),VN=a("a"),rvo=o("LongformerModel"),tvo=o(" (Longformer model)"),avo=l(),n_=a("li"),Hle=a("strong"),nvo=o("luke"),svo=o(" \u2014 "),XN=a("a"),lvo=o("LukeModel"),ivo=o(" (LUKE model)"),dvo=l(),s_=a("li"),Ule=a("strong"),cvo=o("lxmert"),fvo=o(" \u2014 "),zN=a("a"),mvo=o("LxmertModel"),gvo=o(" (LXMERT model)"),hvo=l(),l_=a("li"),Jle=a("strong"),pvo=o("m2m_100"),_vo=o(" \u2014 "),WN=a("a"),uvo=o("M2M100Model"),bvo=o(" (M2M100 model)"),vvo=l(),i_=a("li"),Yle=a("strong"),Fvo=o("marian"),Tvo=o(" \u2014 "),QN=a("a"),Mvo=o("MarianModel"),Evo=o(" (Marian model)"),Cvo=l(),d_=a("li"),Kle=a("strong"),wvo=o("maskformer"),Avo=o(" \u2014 "),HN=a("a"),yvo=o("MaskFormerModel"),Lvo=o(" (MaskFormer model)"),xvo=l(),c_=a("li"),Zle=a("strong"),$vo=o("mbart"),kvo=o(" \u2014 "),UN=a("a"),Svo=o("MBartModel"),Rvo=o(" (mBART model)"),Pvo=l(),f_=a("li"),eie=a("strong"),Bvo=o("mctct"),Ivo=o(" \u2014 "),JN=a("a"),Nvo=o("MCTCTModel"),qvo=o(" (M-CTC-T model)"),jvo=l(),m_=a("li"),oie=a("strong"),Dvo=o("megatron-bert"),Gvo=o(" \u2014 "),YN=a("a"),Ovo=o("MegatronBertModel"),Vvo=o(" (Megatron-BERT model)"),Xvo=l(),g_=a("li"),rie=a("strong"),zvo=o("mobilebert"),Wvo=o(" \u2014 "),KN=a("a"),Qvo=o("MobileBertModel"),Hvo=o(" (MobileBERT model)"),Uvo=l(),h_=a("li"),tie=a("strong"),Jvo=o("mpnet"),Yvo=o(" \u2014 "),ZN=a("a"),Kvo=o("MPNetModel"),Zvo=o(" (MPNet model)"),eFo=l(),p_=a("li"),aie=a("strong"),oFo=o("mt5"),rFo=o(" \u2014 "),eq=a("a"),tFo=o("MT5Model"),aFo=o(" (MT5 model)"),nFo=l(),__=a("li"),nie=a("strong"),sFo=o("nystromformer"),lFo=o(" \u2014 "),oq=a("a"),iFo=o("NystromformerModel"),dFo=o(" (Nystr\xF6mformer model)"),cFo=l(),u_=a("li"),sie=a("strong"),fFo=o("openai-gpt"),mFo=o(" \u2014 "),rq=a("a"),gFo=o("OpenAIGPTModel"),hFo=o(" (OpenAI GPT model)"),pFo=l(),b_=a("li"),lie=a("strong"),_Fo=o("opt"),uFo=o(" \u2014 "),tq=a("a"),bFo=o("OPTModel"),vFo=o(" (OPT model)"),FFo=l(),v_=a("li"),iie=a("strong"),TFo=o("pegasus"),MFo=o(" \u2014 "),aq=a("a"),EFo=o("PegasusModel"),CFo=o(" (Pegasus model)"),wFo=l(),F_=a("li"),die=a("strong"),AFo=o("perceiver"),yFo=o(" \u2014 "),nq=a("a"),LFo=o("PerceiverModel"),xFo=o(" (Perceiver model)"),$Fo=l(),T_=a("li"),cie=a("strong"),kFo=o("plbart"),SFo=o(" \u2014 "),sq=a("a"),RFo=o("PLBartModel"),PFo=o(" (PLBart model)"),BFo=l(),M_=a("li"),fie=a("strong"),IFo=o("poolformer"),NFo=o(" \u2014 "),lq=a("a"),qFo=o("PoolFormerModel"),jFo=o(" (PoolFormer model)"),DFo=l(),E_=a("li"),mie=a("strong"),GFo=o("prophetnet"),OFo=o(" \u2014 "),iq=a("a"),VFo=o("ProphetNetModel"),XFo=o(" (ProphetNet model)"),zFo=l(),C_=a("li"),gie=a("strong"),WFo=o("qdqbert"),QFo=o(" \u2014 "),dq=a("a"),HFo=o("QDQBertModel"),UFo=o(" (QDQBert model)"),JFo=l(),w_=a("li"),hie=a("strong"),YFo=o("reformer"),KFo=o(" \u2014 "),cq=a("a"),ZFo=o("ReformerModel"),e6o=o(" (Reformer model)"),o6o=l(),A_=a("li"),pie=a("strong"),r6o=o("regnet"),t6o=o(" \u2014 "),fq=a("a"),a6o=o("RegNetModel"),n6o=o(" (RegNet model)"),s6o=l(),y_=a("li"),_ie=a("strong"),l6o=o("rembert"),i6o=o(" \u2014 "),mq=a("a"),d6o=o("RemBertModel"),c6o=o(" (RemBERT model)"),f6o=l(),L_=a("li"),uie=a("strong"),m6o=o("resnet"),g6o=o(" \u2014 "),gq=a("a"),h6o=o("ResNetModel"),p6o=o(" (ResNet model)"),_6o=l(),x_=a("li"),bie=a("strong"),u6o=o("retribert"),b6o=o(" \u2014 "),hq=a("a"),v6o=o("RetriBertModel"),F6o=o(" (RetriBERT model)"),T6o=l(),$_=a("li"),vie=a("strong"),M6o=o("roberta"),E6o=o(" \u2014 "),pq=a("a"),C6o=o("RobertaModel"),w6o=o(" (RoBERTa model)"),A6o=l(),k_=a("li"),Fie=a("strong"),y6o=o("roformer"),L6o=o(" \u2014 "),_q=a("a"),x6o=o("RoFormerModel"),$6o=o(" (RoFormer model)"),k6o=l(),S_=a("li"),Tie=a("strong"),S6o=o("segformer"),R6o=o(" \u2014 "),uq=a("a"),P6o=o("SegformerModel"),B6o=o(" (SegFormer model)"),I6o=l(),R_=a("li"),Mie=a("strong"),N6o=o("sew"),q6o=o(" \u2014 "),bq=a("a"),j6o=o("SEWModel"),D6o=o(" (SEW model)"),G6o=l(),P_=a("li"),Eie=a("strong"),O6o=o("sew-d"),V6o=o(" \u2014 "),vq=a("a"),X6o=o("SEWDModel"),z6o=o(" (SEW-D model)"),W6o=l(),B_=a("li"),Cie=a("strong"),Q6o=o("speech_to_text"),H6o=o(" \u2014 "),Fq=a("a"),U6o=o("Speech2TextModel"),J6o=o(" (Speech2Text model)"),Y6o=l(),I_=a("li"),wie=a("strong"),K6o=o("splinter"),Z6o=o(" \u2014 "),Tq=a("a"),eTo=o("SplinterModel"),oTo=o(" (Splinter model)"),rTo=l(),N_=a("li"),Aie=a("strong"),tTo=o("squeezebert"),aTo=o(" \u2014 "),Mq=a("a"),nTo=o("SqueezeBertModel"),sTo=o(" (SqueezeBERT model)"),lTo=l(),q_=a("li"),yie=a("strong"),iTo=o("swin"),dTo=o(" \u2014 "),Eq=a("a"),cTo=o("SwinModel"),fTo=o(" (Swin Transformer model)"),mTo=l(),j_=a("li"),Lie=a("strong"),gTo=o("t5"),hTo=o(" \u2014 "),Cq=a("a"),pTo=o("T5Model"),_To=o(" (T5 model)"),uTo=l(),D_=a("li"),xie=a("strong"),bTo=o("tapas"),vTo=o(" \u2014 "),wq=a("a"),FTo=o("TapasModel"),TTo=o(" (TAPAS model)"),MTo=l(),G_=a("li"),$ie=a("strong"),ETo=o("trajectory_transformer"),CTo=o(" \u2014 "),Aq=a("a"),wTo=o("TrajectoryTransformerModel"),ATo=o(" (Trajectory Transformer model)"),yTo=l(),O_=a("li"),kie=a("strong"),LTo=o("transfo-xl"),xTo=o(" \u2014 "),yq=a("a"),$To=o("TransfoXLModel"),kTo=o(" (Transformer-XL model)"),STo=l(),V_=a("li"),Sie=a("strong"),RTo=o("unispeech"),PTo=o(" \u2014 "),Lq=a("a"),BTo=o("UniSpeechModel"),ITo=o(" (UniSpeech model)"),NTo=l(),X_=a("li"),Rie=a("strong"),qTo=o("unispeech-sat"),jTo=o(" \u2014 "),xq=a("a"),DTo=o("UniSpeechSatModel"),GTo=o(" (UniSpeechSat model)"),OTo=l(),z_=a("li"),Pie=a("strong"),VTo=o("van"),XTo=o(" \u2014 "),$q=a("a"),zTo=o("VanModel"),WTo=o(" (VAN model)"),QTo=l(),W_=a("li"),Bie=a("strong"),HTo=o("vilt"),UTo=o(" \u2014 "),kq=a("a"),JTo=o("ViltModel"),YTo=o(" (ViLT model)"),KTo=l(),Q_=a("li"),Iie=a("strong"),ZTo=o("vision-text-dual-encoder"),e7o=o(" \u2014 "),Sq=a("a"),o7o=o("VisionTextDualEncoderModel"),r7o=o(" (VisionTextDualEncoder model)"),t7o=l(),H_=a("li"),Nie=a("strong"),a7o=o("visual_bert"),n7o=o(" \u2014 "),Rq=a("a"),s7o=o("VisualBertModel"),l7o=o(" (VisualBERT model)"),i7o=l(),U_=a("li"),qie=a("strong"),d7o=o("vit"),c7o=o(" \u2014 "),Pq=a("a"),f7o=o("ViTModel"),m7o=o(" (ViT model)"),g7o=l(),J_=a("li"),jie=a("strong"),h7o=o("vit_mae"),p7o=o(" \u2014 "),Bq=a("a"),_7o=o("ViTMAEModel"),u7o=o(" (ViTMAE model)"),b7o=l(),Y_=a("li"),Die=a("strong"),v7o=o("wav2vec2"),F7o=o(" \u2014 "),Iq=a("a"),T7o=o("Wav2Vec2Model"),M7o=o(" (Wav2Vec2 model)"),E7o=l(),K_=a("li"),Gie=a("strong"),C7o=o("wav2vec2-conformer"),w7o=o(" \u2014 "),Nq=a("a"),A7o=o("Wav2Vec2ConformerModel"),y7o=o(" (Wav2Vec2-Conformer model)"),L7o=l(),Z_=a("li"),Oie=a("strong"),x7o=o("wavlm"),$7o=o(" \u2014 "),qq=a("a"),k7o=o("WavLMModel"),S7o=o(" (WavLM model)"),R7o=l(),eu=a("li"),Vie=a("strong"),P7o=o("xglm"),B7o=o(" \u2014 "),jq=a("a"),I7o=o("XGLMModel"),N7o=o(" (XGLM model)"),q7o=l(),ou=a("li"),Xie=a("strong"),j7o=o("xlm"),D7o=o(" \u2014 "),Dq=a("a"),G7o=o("XLMModel"),O7o=o(" (XLM model)"),V7o=l(),ru=a("li"),zie=a("strong"),X7o=o("xlm-prophetnet"),z7o=o(" \u2014 "),Gq=a("a"),W7o=o("XLMProphetNetModel"),Q7o=o(" (XLM-ProphetNet model)"),H7o=l(),tu=a("li"),Wie=a("strong"),U7o=o("xlm-roberta"),J7o=o(" \u2014 "),Oq=a("a"),Y7o=o("XLMRobertaModel"),K7o=o(" (XLM-RoBERTa model)"),Z7o=l(),au=a("li"),Qie=a("strong"),eMo=o("xlm-roberta-xl"),oMo=o(" \u2014 "),Vq=a("a"),rMo=o("XLMRobertaXLModel"),tMo=o(" (XLM-RoBERTa-XL model)"),aMo=l(),nu=a("li"),Hie=a("strong"),nMo=o("xlnet"),sMo=o(" \u2014 "),Xq=a("a"),lMo=o("XLNetModel"),iMo=o(" (XLNet model)"),dMo=l(),su=a("li"),Uie=a("strong"),cMo=o("yolos"),fMo=o(" \u2014 "),zq=a("a"),mMo=o("YolosModel"),gMo=o(" (YOLOS model)"),hMo=l(),lu=a("li"),Jie=a("strong"),pMo=o("yoso"),_Mo=o(" \u2014 "),Wq=a("a"),uMo=o("YosoModel"),bMo=o(" (YOSO model)"),vMo=l(),iu=a("p"),FMo=o("The model is set in evaluation mode by default using "),Yie=a("code"),TMo=o("model.eval()"),MMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kie=a("code"),EMo=o("model.train()"),CMo=l(),F(du.$$.fragment),mje=l(),xi=a("h2"),cu=a("a"),Zie=a("span"),F(uy.$$.fragment),wMo=l(),ede=a("span"),AMo=o("AutoModelForPreTraining"),gje=l(),xo=a("div"),F(by.$$.fragment),yMo=l(),$i=a("p"),LMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qq=a("a"),xMo=o("from_pretrained()"),$Mo=o(" class method or the "),Hq=a("a"),kMo=o("from_config()"),SMo=o(` class
method.`),RMo=l(),vy=a("p"),PMo=o("This class cannot be instantiated directly using "),ode=a("code"),BMo=o("__init__()"),IMo=o(" (throws an error)."),NMo=l(),at=a("div"),F(Fy.$$.fragment),qMo=l(),rde=a("p"),jMo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DMo=l(),ki=a("p"),GMo=o(`Note:
Loading a model from its configuration file does `),tde=a("strong"),OMo=o("not"),VMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uq=a("a"),XMo=o("from_pretrained()"),zMo=o(" to load the model weights."),WMo=l(),F(fu.$$.fragment),QMo=l(),Ye=a("div"),F(Ty.$$.fragment),HMo=l(),ade=a("p"),UMo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),JMo=l(),xa=a("p"),YMo=o("The model class to instantiate is selected based on the "),nde=a("code"),KMo=o("model_type"),ZMo=o(` property of the config object (either
passed as an argument or loaded from `),sde=a("code"),e4o=o("pretrained_model_name_or_path"),o4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lde=a("code"),r4o=o("pretrained_model_name_or_path"),t4o=o(":"),a4o=l(),G=a("ul"),mu=a("li"),ide=a("strong"),n4o=o("albert"),s4o=o(" \u2014 "),Jq=a("a"),l4o=o("AlbertForPreTraining"),i4o=o(" (ALBERT model)"),d4o=l(),gu=a("li"),dde=a("strong"),c4o=o("bart"),f4o=o(" \u2014 "),Yq=a("a"),m4o=o("BartForConditionalGeneration"),g4o=o(" (BART model)"),h4o=l(),hu=a("li"),cde=a("strong"),p4o=o("bert"),_4o=o(" \u2014 "),Kq=a("a"),u4o=o("BertForPreTraining"),b4o=o(" (BERT model)"),v4o=l(),pu=a("li"),fde=a("strong"),F4o=o("big_bird"),T4o=o(" \u2014 "),Zq=a("a"),M4o=o("BigBirdForPreTraining"),E4o=o(" (BigBird model)"),C4o=l(),_u=a("li"),mde=a("strong"),w4o=o("camembert"),A4o=o(" \u2014 "),ej=a("a"),y4o=o("CamembertForMaskedLM"),L4o=o(" (CamemBERT model)"),x4o=l(),uu=a("li"),gde=a("strong"),$4o=o("ctrl"),k4o=o(" \u2014 "),oj=a("a"),S4o=o("CTRLLMHeadModel"),R4o=o(" (CTRL model)"),P4o=l(),bu=a("li"),hde=a("strong"),B4o=o("data2vec-text"),I4o=o(" \u2014 "),rj=a("a"),N4o=o("Data2VecTextForMaskedLM"),q4o=o(" (Data2VecText model)"),j4o=l(),vu=a("li"),pde=a("strong"),D4o=o("deberta"),G4o=o(" \u2014 "),tj=a("a"),O4o=o("DebertaForMaskedLM"),V4o=o(" (DeBERTa model)"),X4o=l(),Fu=a("li"),_de=a("strong"),z4o=o("deberta-v2"),W4o=o(" \u2014 "),aj=a("a"),Q4o=o("DebertaV2ForMaskedLM"),H4o=o(" (DeBERTa-v2 model)"),U4o=l(),Tu=a("li"),ude=a("strong"),J4o=o("distilbert"),Y4o=o(" \u2014 "),nj=a("a"),K4o=o("DistilBertForMaskedLM"),Z4o=o(" (DistilBERT model)"),eEo=l(),Mu=a("li"),bde=a("strong"),oEo=o("electra"),rEo=o(" \u2014 "),sj=a("a"),tEo=o("ElectraForPreTraining"),aEo=o(" (ELECTRA model)"),nEo=l(),Eu=a("li"),vde=a("strong"),sEo=o("flaubert"),lEo=o(" \u2014 "),lj=a("a"),iEo=o("FlaubertWithLMHeadModel"),dEo=o(" (FlauBERT model)"),cEo=l(),Cu=a("li"),Fde=a("strong"),fEo=o("flava"),mEo=o(" \u2014 "),ij=a("a"),gEo=o("FlavaForPreTraining"),hEo=o(" (FLAVA model)"),pEo=l(),wu=a("li"),Tde=a("strong"),_Eo=o("fnet"),uEo=o(" \u2014 "),dj=a("a"),bEo=o("FNetForPreTraining"),vEo=o(" (FNet model)"),FEo=l(),Au=a("li"),Mde=a("strong"),TEo=o("fsmt"),MEo=o(" \u2014 "),cj=a("a"),EEo=o("FSMTForConditionalGeneration"),CEo=o(" (FairSeq Machine-Translation model)"),wEo=l(),yu=a("li"),Ede=a("strong"),AEo=o("funnel"),yEo=o(" \u2014 "),fj=a("a"),LEo=o("FunnelForPreTraining"),xEo=o(" (Funnel Transformer model)"),$Eo=l(),Lu=a("li"),Cde=a("strong"),kEo=o("gpt2"),SEo=o(" \u2014 "),mj=a("a"),REo=o("GPT2LMHeadModel"),PEo=o(" (OpenAI GPT-2 model)"),BEo=l(),xu=a("li"),wde=a("strong"),IEo=o("ibert"),NEo=o(" \u2014 "),gj=a("a"),qEo=o("IBertForMaskedLM"),jEo=o(" (I-BERT model)"),DEo=l(),$u=a("li"),Ade=a("strong"),GEo=o("layoutlm"),OEo=o(" \u2014 "),hj=a("a"),VEo=o("LayoutLMForMaskedLM"),XEo=o(" (LayoutLM model)"),zEo=l(),ku=a("li"),yde=a("strong"),WEo=o("longformer"),QEo=o(" \u2014 "),pj=a("a"),HEo=o("LongformerForMaskedLM"),UEo=o(" (Longformer model)"),JEo=l(),Su=a("li"),Lde=a("strong"),YEo=o("lxmert"),KEo=o(" \u2014 "),_j=a("a"),ZEo=o("LxmertForPreTraining"),eCo=o(" (LXMERT model)"),oCo=l(),Ru=a("li"),xde=a("strong"),rCo=o("megatron-bert"),tCo=o(" \u2014 "),uj=a("a"),aCo=o("MegatronBertForPreTraining"),nCo=o(" (Megatron-BERT model)"),sCo=l(),Pu=a("li"),$de=a("strong"),lCo=o("mobilebert"),iCo=o(" \u2014 "),bj=a("a"),dCo=o("MobileBertForPreTraining"),cCo=o(" (MobileBERT model)"),fCo=l(),Bu=a("li"),kde=a("strong"),mCo=o("mpnet"),gCo=o(" \u2014 "),vj=a("a"),hCo=o("MPNetForMaskedLM"),pCo=o(" (MPNet model)"),_Co=l(),Iu=a("li"),Sde=a("strong"),uCo=o("openai-gpt"),bCo=o(" \u2014 "),Fj=a("a"),vCo=o("OpenAIGPTLMHeadModel"),FCo=o(" (OpenAI GPT model)"),TCo=l(),Nu=a("li"),Rde=a("strong"),MCo=o("retribert"),ECo=o(" \u2014 "),Tj=a("a"),CCo=o("RetriBertModel"),wCo=o(" (RetriBERT model)"),ACo=l(),qu=a("li"),Pde=a("strong"),yCo=o("roberta"),LCo=o(" \u2014 "),Mj=a("a"),xCo=o("RobertaForMaskedLM"),$Co=o(" (RoBERTa model)"),kCo=l(),ju=a("li"),Bde=a("strong"),SCo=o("splinter"),RCo=o(" \u2014 "),Ej=a("a"),PCo=o("SplinterForPreTraining"),BCo=o(" (Splinter model)"),ICo=l(),Du=a("li"),Ide=a("strong"),NCo=o("squeezebert"),qCo=o(" \u2014 "),Cj=a("a"),jCo=o("SqueezeBertForMaskedLM"),DCo=o(" (SqueezeBERT model)"),GCo=l(),Gu=a("li"),Nde=a("strong"),OCo=o("t5"),VCo=o(" \u2014 "),wj=a("a"),XCo=o("T5ForConditionalGeneration"),zCo=o(" (T5 model)"),WCo=l(),Ou=a("li"),qde=a("strong"),QCo=o("tapas"),HCo=o(" \u2014 "),Aj=a("a"),UCo=o("TapasForMaskedLM"),JCo=o(" (TAPAS model)"),YCo=l(),Vu=a("li"),jde=a("strong"),KCo=o("transfo-xl"),ZCo=o(" \u2014 "),yj=a("a"),e5o=o("TransfoXLLMHeadModel"),o5o=o(" (Transformer-XL model)"),r5o=l(),Xu=a("li"),Dde=a("strong"),t5o=o("unispeech"),a5o=o(" \u2014 "),Lj=a("a"),n5o=o("UniSpeechForPreTraining"),s5o=o(" (UniSpeech model)"),l5o=l(),zu=a("li"),Gde=a("strong"),i5o=o("unispeech-sat"),d5o=o(" \u2014 "),xj=a("a"),c5o=o("UniSpeechSatForPreTraining"),f5o=o(" (UniSpeechSat model)"),m5o=l(),Wu=a("li"),Ode=a("strong"),g5o=o("visual_bert"),h5o=o(" \u2014 "),$j=a("a"),p5o=o("VisualBertForPreTraining"),_5o=o(" (VisualBERT model)"),u5o=l(),Qu=a("li"),Vde=a("strong"),b5o=o("vit_mae"),v5o=o(" \u2014 "),kj=a("a"),F5o=o("ViTMAEForPreTraining"),T5o=o(" (ViTMAE model)"),M5o=l(),Hu=a("li"),Xde=a("strong"),E5o=o("wav2vec2"),C5o=o(" \u2014 "),Sj=a("a"),w5o=o("Wav2Vec2ForPreTraining"),A5o=o(" (Wav2Vec2 model)"),y5o=l(),Uu=a("li"),zde=a("strong"),L5o=o("wav2vec2-conformer"),x5o=o(" \u2014 "),Rj=a("a"),$5o=o("Wav2Vec2ConformerForPreTraining"),k5o=o(" (Wav2Vec2-Conformer model)"),S5o=l(),Ju=a("li"),Wde=a("strong"),R5o=o("xlm"),P5o=o(" \u2014 "),Pj=a("a"),B5o=o("XLMWithLMHeadModel"),I5o=o(" (XLM model)"),N5o=l(),Yu=a("li"),Qde=a("strong"),q5o=o("xlm-roberta"),j5o=o(" \u2014 "),Bj=a("a"),D5o=o("XLMRobertaForMaskedLM"),G5o=o(" (XLM-RoBERTa model)"),O5o=l(),Ku=a("li"),Hde=a("strong"),V5o=o("xlm-roberta-xl"),X5o=o(" \u2014 "),Ij=a("a"),z5o=o("XLMRobertaXLForMaskedLM"),W5o=o(" (XLM-RoBERTa-XL model)"),Q5o=l(),Zu=a("li"),Ude=a("strong"),H5o=o("xlnet"),U5o=o(" \u2014 "),Nj=a("a"),J5o=o("XLNetLMHeadModel"),Y5o=o(" (XLNet model)"),K5o=l(),e2=a("p"),Z5o=o("The model is set in evaluation mode by default using "),Jde=a("code"),e3o=o("model.eval()"),o3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yde=a("code"),r3o=o("model.train()"),t3o=l(),F(o2.$$.fragment),hje=l(),Si=a("h2"),r2=a("a"),Kde=a("span"),F(My.$$.fragment),a3o=l(),Zde=a("span"),n3o=o("AutoModelForCausalLM"),pje=l(),$o=a("div"),F(Ey.$$.fragment),s3o=l(),Ri=a("p"),l3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qj=a("a"),i3o=o("from_pretrained()"),d3o=o(" class method or the "),jj=a("a"),c3o=o("from_config()"),f3o=o(` class
method.`),m3o=l(),Cy=a("p"),g3o=o("This class cannot be instantiated directly using "),ece=a("code"),h3o=o("__init__()"),p3o=o(" (throws an error)."),_3o=l(),nt=a("div"),F(wy.$$.fragment),u3o=l(),oce=a("p"),b3o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),v3o=l(),Pi=a("p"),F3o=o(`Note:
Loading a model from its configuration file does `),rce=a("strong"),T3o=o("not"),M3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dj=a("a"),E3o=o("from_pretrained()"),C3o=o(" to load the model weights."),w3o=l(),F(t2.$$.fragment),A3o=l(),Ke=a("div"),F(Ay.$$.fragment),y3o=l(),tce=a("p"),L3o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),x3o=l(),$a=a("p"),$3o=o("The model class to instantiate is selected based on the "),ace=a("code"),k3o=o("model_type"),S3o=o(` property of the config object (either
passed as an argument or loaded from `),nce=a("code"),R3o=o("pretrained_model_name_or_path"),P3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=a("code"),B3o=o("pretrained_model_name_or_path"),I3o=o(":"),N3o=l(),z=a("ul"),a2=a("li"),lce=a("strong"),q3o=o("bart"),j3o=o(" \u2014 "),Gj=a("a"),D3o=o("BartForCausalLM"),G3o=o(" (BART model)"),O3o=l(),n2=a("li"),ice=a("strong"),V3o=o("bert"),X3o=o(" \u2014 "),Oj=a("a"),z3o=o("BertLMHeadModel"),W3o=o(" (BERT model)"),Q3o=l(),s2=a("li"),dce=a("strong"),H3o=o("bert-generation"),U3o=o(" \u2014 "),Vj=a("a"),J3o=o("BertGenerationDecoder"),Y3o=o(" (Bert Generation model)"),K3o=l(),l2=a("li"),cce=a("strong"),Z3o=o("big_bird"),e0o=o(" \u2014 "),Xj=a("a"),o0o=o("BigBirdForCausalLM"),r0o=o(" (BigBird model)"),t0o=l(),i2=a("li"),fce=a("strong"),a0o=o("bigbird_pegasus"),n0o=o(" \u2014 "),zj=a("a"),s0o=o("BigBirdPegasusForCausalLM"),l0o=o(" (BigBird-Pegasus model)"),i0o=l(),d2=a("li"),mce=a("strong"),d0o=o("blenderbot"),c0o=o(" \u2014 "),Wj=a("a"),f0o=o("BlenderbotForCausalLM"),m0o=o(" (Blenderbot model)"),g0o=l(),c2=a("li"),gce=a("strong"),h0o=o("blenderbot-small"),p0o=o(" \u2014 "),Qj=a("a"),_0o=o("BlenderbotSmallForCausalLM"),u0o=o(" (BlenderbotSmall model)"),b0o=l(),f2=a("li"),hce=a("strong"),v0o=o("camembert"),F0o=o(" \u2014 "),Hj=a("a"),T0o=o("CamembertForCausalLM"),M0o=o(" (CamemBERT model)"),E0o=l(),m2=a("li"),pce=a("strong"),C0o=o("ctrl"),w0o=o(" \u2014 "),Uj=a("a"),A0o=o("CTRLLMHeadModel"),y0o=o(" (CTRL model)"),L0o=l(),g2=a("li"),_ce=a("strong"),x0o=o("data2vec-text"),$0o=o(" \u2014 "),Jj=a("a"),k0o=o("Data2VecTextForCausalLM"),S0o=o(" (Data2VecText model)"),R0o=l(),h2=a("li"),uce=a("strong"),P0o=o("electra"),B0o=o(" \u2014 "),Yj=a("a"),I0o=o("ElectraForCausalLM"),N0o=o(" (ELECTRA model)"),q0o=l(),p2=a("li"),bce=a("strong"),j0o=o("gpt2"),D0o=o(" \u2014 "),Kj=a("a"),G0o=o("GPT2LMHeadModel"),O0o=o(" (OpenAI GPT-2 model)"),V0o=l(),_2=a("li"),vce=a("strong"),X0o=o("gpt_neo"),z0o=o(" \u2014 "),Zj=a("a"),W0o=o("GPTNeoForCausalLM"),Q0o=o(" (GPT Neo model)"),H0o=l(),u2=a("li"),Fce=a("strong"),U0o=o("gpt_neox"),J0o=o(" \u2014 "),eD=a("a"),Y0o=o("GPTNeoXForCausalLM"),K0o=o(" (GPT NeoX model)"),Z0o=l(),b2=a("li"),Tce=a("strong"),ewo=o("gptj"),owo=o(" \u2014 "),oD=a("a"),rwo=o("GPTJForCausalLM"),two=o(" (GPT-J model)"),awo=l(),v2=a("li"),Mce=a("strong"),nwo=o("marian"),swo=o(" \u2014 "),rD=a("a"),lwo=o("MarianForCausalLM"),iwo=o(" (Marian model)"),dwo=l(),F2=a("li"),Ece=a("strong"),cwo=o("mbart"),fwo=o(" \u2014 "),tD=a("a"),mwo=o("MBartForCausalLM"),gwo=o(" (mBART model)"),hwo=l(),T2=a("li"),Cce=a("strong"),pwo=o("megatron-bert"),_wo=o(" \u2014 "),aD=a("a"),uwo=o("MegatronBertForCausalLM"),bwo=o(" (Megatron-BERT model)"),vwo=l(),M2=a("li"),wce=a("strong"),Fwo=o("openai-gpt"),Two=o(" \u2014 "),nD=a("a"),Mwo=o("OpenAIGPTLMHeadModel"),Ewo=o(" (OpenAI GPT model)"),Cwo=l(),E2=a("li"),Ace=a("strong"),wwo=o("opt"),Awo=o(" \u2014 "),sD=a("a"),ywo=o("OPTForCausalLM"),Lwo=o(" (OPT model)"),xwo=l(),C2=a("li"),yce=a("strong"),$wo=o("pegasus"),kwo=o(" \u2014 "),lD=a("a"),Swo=o("PegasusForCausalLM"),Rwo=o(" (Pegasus model)"),Pwo=l(),w2=a("li"),Lce=a("strong"),Bwo=o("plbart"),Iwo=o(" \u2014 "),iD=a("a"),Nwo=o("PLBartForCausalLM"),qwo=o(" (PLBart model)"),jwo=l(),A2=a("li"),xce=a("strong"),Dwo=o("prophetnet"),Gwo=o(" \u2014 "),dD=a("a"),Owo=o("ProphetNetForCausalLM"),Vwo=o(" (ProphetNet model)"),Xwo=l(),y2=a("li"),$ce=a("strong"),zwo=o("qdqbert"),Wwo=o(" \u2014 "),cD=a("a"),Qwo=o("QDQBertLMHeadModel"),Hwo=o(" (QDQBert model)"),Uwo=l(),L2=a("li"),kce=a("strong"),Jwo=o("reformer"),Ywo=o(" \u2014 "),fD=a("a"),Kwo=o("ReformerModelWithLMHead"),Zwo=o(" (Reformer model)"),eAo=l(),x2=a("li"),Sce=a("strong"),oAo=o("rembert"),rAo=o(" \u2014 "),mD=a("a"),tAo=o("RemBertForCausalLM"),aAo=o(" (RemBERT model)"),nAo=l(),$2=a("li"),Rce=a("strong"),sAo=o("roberta"),lAo=o(" \u2014 "),gD=a("a"),iAo=o("RobertaForCausalLM"),dAo=o(" (RoBERTa model)"),cAo=l(),k2=a("li"),Pce=a("strong"),fAo=o("roformer"),mAo=o(" \u2014 "),hD=a("a"),gAo=o("RoFormerForCausalLM"),hAo=o(" (RoFormer model)"),pAo=l(),S2=a("li"),Bce=a("strong"),_Ao=o("speech_to_text_2"),uAo=o(" \u2014 "),pD=a("a"),bAo=o("Speech2Text2ForCausalLM"),vAo=o(" (Speech2Text2 model)"),FAo=l(),R2=a("li"),Ice=a("strong"),TAo=o("transfo-xl"),MAo=o(" \u2014 "),_D=a("a"),EAo=o("TransfoXLLMHeadModel"),CAo=o(" (Transformer-XL model)"),wAo=l(),P2=a("li"),Nce=a("strong"),AAo=o("trocr"),yAo=o(" \u2014 "),uD=a("a"),LAo=o("TrOCRForCausalLM"),xAo=o(" (TrOCR model)"),$Ao=l(),B2=a("li"),qce=a("strong"),kAo=o("xglm"),SAo=o(" \u2014 "),bD=a("a"),RAo=o("XGLMForCausalLM"),PAo=o(" (XGLM model)"),BAo=l(),I2=a("li"),jce=a("strong"),IAo=o("xlm"),NAo=o(" \u2014 "),vD=a("a"),qAo=o("XLMWithLMHeadModel"),jAo=o(" (XLM model)"),DAo=l(),N2=a("li"),Dce=a("strong"),GAo=o("xlm-prophetnet"),OAo=o(" \u2014 "),FD=a("a"),VAo=o("XLMProphetNetForCausalLM"),XAo=o(" (XLM-ProphetNet model)"),zAo=l(),q2=a("li"),Gce=a("strong"),WAo=o("xlm-roberta"),QAo=o(" \u2014 "),TD=a("a"),HAo=o("XLMRobertaForCausalLM"),UAo=o(" (XLM-RoBERTa model)"),JAo=l(),j2=a("li"),Oce=a("strong"),YAo=o("xlm-roberta-xl"),KAo=o(" \u2014 "),MD=a("a"),ZAo=o("XLMRobertaXLForCausalLM"),eyo=o(" (XLM-RoBERTa-XL model)"),oyo=l(),D2=a("li"),Vce=a("strong"),ryo=o("xlnet"),tyo=o(" \u2014 "),ED=a("a"),ayo=o("XLNetLMHeadModel"),nyo=o(" (XLNet model)"),syo=l(),G2=a("p"),lyo=o("The model is set in evaluation mode by default using "),Xce=a("code"),iyo=o("model.eval()"),dyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zce=a("code"),cyo=o("model.train()"),fyo=l(),F(O2.$$.fragment),_je=l(),Bi=a("h2"),V2=a("a"),Wce=a("span"),F(yy.$$.fragment),myo=l(),Qce=a("span"),gyo=o("AutoModelForMaskedLM"),uje=l(),ko=a("div"),F(Ly.$$.fragment),hyo=l(),Ii=a("p"),pyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CD=a("a"),_yo=o("from_pretrained()"),uyo=o(" class method or the "),wD=a("a"),byo=o("from_config()"),vyo=o(` class
method.`),Fyo=l(),xy=a("p"),Tyo=o("This class cannot be instantiated directly using "),Hce=a("code"),Myo=o("__init__()"),Eyo=o(" (throws an error)."),Cyo=l(),st=a("div"),F($y.$$.fragment),wyo=l(),Uce=a("p"),Ayo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yyo=l(),Ni=a("p"),Lyo=o(`Note:
Loading a model from its configuration file does `),Jce=a("strong"),xyo=o("not"),$yo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=a("a"),kyo=o("from_pretrained()"),Syo=o(" to load the model weights."),Ryo=l(),F(X2.$$.fragment),Pyo=l(),Ze=a("div"),F(ky.$$.fragment),Byo=l(),Yce=a("p"),Iyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Nyo=l(),ka=a("p"),qyo=o("The model class to instantiate is selected based on the "),Kce=a("code"),jyo=o("model_type"),Dyo=o(` property of the config object (either
passed as an argument or loaded from `),Zce=a("code"),Gyo=o("pretrained_model_name_or_path"),Oyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),efe=a("code"),Vyo=o("pretrained_model_name_or_path"),Xyo=o(":"),zyo=l(),W=a("ul"),z2=a("li"),ofe=a("strong"),Wyo=o("albert"),Qyo=o(" \u2014 "),yD=a("a"),Hyo=o("AlbertForMaskedLM"),Uyo=o(" (ALBERT model)"),Jyo=l(),W2=a("li"),rfe=a("strong"),Yyo=o("bart"),Kyo=o(" \u2014 "),LD=a("a"),Zyo=o("BartForConditionalGeneration"),eLo=o(" (BART model)"),oLo=l(),Q2=a("li"),tfe=a("strong"),rLo=o("bert"),tLo=o(" \u2014 "),xD=a("a"),aLo=o("BertForMaskedLM"),nLo=o(" (BERT model)"),sLo=l(),H2=a("li"),afe=a("strong"),lLo=o("big_bird"),iLo=o(" \u2014 "),$D=a("a"),dLo=o("BigBirdForMaskedLM"),cLo=o(" (BigBird model)"),fLo=l(),U2=a("li"),nfe=a("strong"),mLo=o("camembert"),gLo=o(" \u2014 "),kD=a("a"),hLo=o("CamembertForMaskedLM"),pLo=o(" (CamemBERT model)"),_Lo=l(),J2=a("li"),sfe=a("strong"),uLo=o("convbert"),bLo=o(" \u2014 "),SD=a("a"),vLo=o("ConvBertForMaskedLM"),FLo=o(" (ConvBERT model)"),TLo=l(),Y2=a("li"),lfe=a("strong"),MLo=o("data2vec-text"),ELo=o(" \u2014 "),RD=a("a"),CLo=o("Data2VecTextForMaskedLM"),wLo=o(" (Data2VecText model)"),ALo=l(),K2=a("li"),ife=a("strong"),yLo=o("deberta"),LLo=o(" \u2014 "),PD=a("a"),xLo=o("DebertaForMaskedLM"),$Lo=o(" (DeBERTa model)"),kLo=l(),Z2=a("li"),dfe=a("strong"),SLo=o("deberta-v2"),RLo=o(" \u2014 "),BD=a("a"),PLo=o("DebertaV2ForMaskedLM"),BLo=o(" (DeBERTa-v2 model)"),ILo=l(),e1=a("li"),cfe=a("strong"),NLo=o("distilbert"),qLo=o(" \u2014 "),ID=a("a"),jLo=o("DistilBertForMaskedLM"),DLo=o(" (DistilBERT model)"),GLo=l(),o1=a("li"),ffe=a("strong"),OLo=o("electra"),VLo=o(" \u2014 "),ND=a("a"),XLo=o("ElectraForMaskedLM"),zLo=o(" (ELECTRA model)"),WLo=l(),r1=a("li"),mfe=a("strong"),QLo=o("flaubert"),HLo=o(" \u2014 "),qD=a("a"),ULo=o("FlaubertWithLMHeadModel"),JLo=o(" (FlauBERT model)"),YLo=l(),t1=a("li"),gfe=a("strong"),KLo=o("fnet"),ZLo=o(" \u2014 "),jD=a("a"),e8o=o("FNetForMaskedLM"),o8o=o(" (FNet model)"),r8o=l(),a1=a("li"),hfe=a("strong"),t8o=o("funnel"),a8o=o(" \u2014 "),DD=a("a"),n8o=o("FunnelForMaskedLM"),s8o=o(" (Funnel Transformer model)"),l8o=l(),n1=a("li"),pfe=a("strong"),i8o=o("ibert"),d8o=o(" \u2014 "),GD=a("a"),c8o=o("IBertForMaskedLM"),f8o=o(" (I-BERT model)"),m8o=l(),s1=a("li"),_fe=a("strong"),g8o=o("layoutlm"),h8o=o(" \u2014 "),OD=a("a"),p8o=o("LayoutLMForMaskedLM"),_8o=o(" (LayoutLM model)"),u8o=l(),l1=a("li"),ufe=a("strong"),b8o=o("longformer"),v8o=o(" \u2014 "),VD=a("a"),F8o=o("LongformerForMaskedLM"),T8o=o(" (Longformer model)"),M8o=l(),i1=a("li"),bfe=a("strong"),E8o=o("luke"),C8o=o(" \u2014 "),XD=a("a"),w8o=o("LukeForMaskedLM"),A8o=o(" (LUKE model)"),y8o=l(),d1=a("li"),vfe=a("strong"),L8o=o("mbart"),x8o=o(" \u2014 "),zD=a("a"),$8o=o("MBartForConditionalGeneration"),k8o=o(" (mBART model)"),S8o=l(),c1=a("li"),Ffe=a("strong"),R8o=o("megatron-bert"),P8o=o(" \u2014 "),WD=a("a"),B8o=o("MegatronBertForMaskedLM"),I8o=o(" (Megatron-BERT model)"),N8o=l(),f1=a("li"),Tfe=a("strong"),q8o=o("mobilebert"),j8o=o(" \u2014 "),QD=a("a"),D8o=o("MobileBertForMaskedLM"),G8o=o(" (MobileBERT model)"),O8o=l(),m1=a("li"),Mfe=a("strong"),V8o=o("mpnet"),X8o=o(" \u2014 "),HD=a("a"),z8o=o("MPNetForMaskedLM"),W8o=o(" (MPNet model)"),Q8o=l(),g1=a("li"),Efe=a("strong"),H8o=o("nystromformer"),U8o=o(" \u2014 "),UD=a("a"),J8o=o("NystromformerForMaskedLM"),Y8o=o(" (Nystr\xF6mformer model)"),K8o=l(),h1=a("li"),Cfe=a("strong"),Z8o=o("perceiver"),e9o=o(" \u2014 "),JD=a("a"),o9o=o("PerceiverForMaskedLM"),r9o=o(" (Perceiver model)"),t9o=l(),p1=a("li"),wfe=a("strong"),a9o=o("qdqbert"),n9o=o(" \u2014 "),YD=a("a"),s9o=o("QDQBertForMaskedLM"),l9o=o(" (QDQBert model)"),i9o=l(),_1=a("li"),Afe=a("strong"),d9o=o("reformer"),c9o=o(" \u2014 "),KD=a("a"),f9o=o("ReformerForMaskedLM"),m9o=o(" (Reformer model)"),g9o=l(),u1=a("li"),yfe=a("strong"),h9o=o("rembert"),p9o=o(" \u2014 "),ZD=a("a"),_9o=o("RemBertForMaskedLM"),u9o=o(" (RemBERT model)"),b9o=l(),b1=a("li"),Lfe=a("strong"),v9o=o("roberta"),F9o=o(" \u2014 "),eG=a("a"),T9o=o("RobertaForMaskedLM"),M9o=o(" (RoBERTa model)"),E9o=l(),v1=a("li"),xfe=a("strong"),C9o=o("roformer"),w9o=o(" \u2014 "),oG=a("a"),A9o=o("RoFormerForMaskedLM"),y9o=o(" (RoFormer model)"),L9o=l(),F1=a("li"),$fe=a("strong"),x9o=o("squeezebert"),$9o=o(" \u2014 "),rG=a("a"),k9o=o("SqueezeBertForMaskedLM"),S9o=o(" (SqueezeBERT model)"),R9o=l(),T1=a("li"),kfe=a("strong"),P9o=o("tapas"),B9o=o(" \u2014 "),tG=a("a"),I9o=o("TapasForMaskedLM"),N9o=o(" (TAPAS model)"),q9o=l(),M1=a("li"),Sfe=a("strong"),j9o=o("wav2vec2"),D9o=o(" \u2014 "),Rfe=a("code"),G9o=o("Wav2Vec2ForMaskedLM"),O9o=o(" (Wav2Vec2 model)"),V9o=l(),E1=a("li"),Pfe=a("strong"),X9o=o("xlm"),z9o=o(" \u2014 "),aG=a("a"),W9o=o("XLMWithLMHeadModel"),Q9o=o(" (XLM model)"),H9o=l(),C1=a("li"),Bfe=a("strong"),U9o=o("xlm-roberta"),J9o=o(" \u2014 "),nG=a("a"),Y9o=o("XLMRobertaForMaskedLM"),K9o=o(" (XLM-RoBERTa model)"),Z9o=l(),w1=a("li"),Ife=a("strong"),exo=o("xlm-roberta-xl"),oxo=o(" \u2014 "),sG=a("a"),rxo=o("XLMRobertaXLForMaskedLM"),txo=o(" (XLM-RoBERTa-XL model)"),axo=l(),A1=a("li"),Nfe=a("strong"),nxo=o("yoso"),sxo=o(" \u2014 "),lG=a("a"),lxo=o("YosoForMaskedLM"),ixo=o(" (YOSO model)"),dxo=l(),y1=a("p"),cxo=o("The model is set in evaluation mode by default using "),qfe=a("code"),fxo=o("model.eval()"),mxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=a("code"),gxo=o("model.train()"),hxo=l(),F(L1.$$.fragment),bje=l(),qi=a("h2"),x1=a("a"),Dfe=a("span"),F(Sy.$$.fragment),pxo=l(),Gfe=a("span"),_xo=o("AutoModelForSeq2SeqLM"),vje=l(),So=a("div"),F(Ry.$$.fragment),uxo=l(),ji=a("p"),bxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iG=a("a"),vxo=o("from_pretrained()"),Fxo=o(" class method or the "),dG=a("a"),Txo=o("from_config()"),Mxo=o(` class
method.`),Exo=l(),Py=a("p"),Cxo=o("This class cannot be instantiated directly using "),Ofe=a("code"),wxo=o("__init__()"),Axo=o(" (throws an error)."),yxo=l(),lt=a("div"),F(By.$$.fragment),Lxo=l(),Vfe=a("p"),xxo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$xo=l(),Di=a("p"),kxo=o(`Note:
Loading a model from its configuration file does `),Xfe=a("strong"),Sxo=o("not"),Rxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=a("a"),Pxo=o("from_pretrained()"),Bxo=o(" to load the model weights."),Ixo=l(),F($1.$$.fragment),Nxo=l(),eo=a("div"),F(Iy.$$.fragment),qxo=l(),zfe=a("p"),jxo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Dxo=l(),Sa=a("p"),Gxo=o("The model class to instantiate is selected based on the "),Wfe=a("code"),Oxo=o("model_type"),Vxo=o(` property of the config object (either
passed as an argument or loaded from `),Qfe=a("code"),Xxo=o("pretrained_model_name_or_path"),zxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=a("code"),Wxo=o("pretrained_model_name_or_path"),Qxo=o(":"),Hxo=l(),_e=a("ul"),k1=a("li"),Ufe=a("strong"),Uxo=o("bart"),Jxo=o(" \u2014 "),fG=a("a"),Yxo=o("BartForConditionalGeneration"),Kxo=o(" (BART model)"),Zxo=l(),S1=a("li"),Jfe=a("strong"),e$o=o("bigbird_pegasus"),o$o=o(" \u2014 "),mG=a("a"),r$o=o("BigBirdPegasusForConditionalGeneration"),t$o=o(" (BigBird-Pegasus model)"),a$o=l(),R1=a("li"),Yfe=a("strong"),n$o=o("blenderbot"),s$o=o(" \u2014 "),gG=a("a"),l$o=o("BlenderbotForConditionalGeneration"),i$o=o(" (Blenderbot model)"),d$o=l(),P1=a("li"),Kfe=a("strong"),c$o=o("blenderbot-small"),f$o=o(" \u2014 "),hG=a("a"),m$o=o("BlenderbotSmallForConditionalGeneration"),g$o=o(" (BlenderbotSmall model)"),h$o=l(),B1=a("li"),Zfe=a("strong"),p$o=o("encoder-decoder"),_$o=o(" \u2014 "),pG=a("a"),u$o=o("EncoderDecoderModel"),b$o=o(" (Encoder decoder model)"),v$o=l(),I1=a("li"),eme=a("strong"),F$o=o("fsmt"),T$o=o(" \u2014 "),_G=a("a"),M$o=o("FSMTForConditionalGeneration"),E$o=o(" (FairSeq Machine-Translation model)"),C$o=l(),N1=a("li"),ome=a("strong"),w$o=o("led"),A$o=o(" \u2014 "),uG=a("a"),y$o=o("LEDForConditionalGeneration"),L$o=o(" (LED model)"),x$o=l(),q1=a("li"),rme=a("strong"),$$o=o("m2m_100"),k$o=o(" \u2014 "),bG=a("a"),S$o=o("M2M100ForConditionalGeneration"),R$o=o(" (M2M100 model)"),P$o=l(),j1=a("li"),tme=a("strong"),B$o=o("marian"),I$o=o(" \u2014 "),vG=a("a"),N$o=o("MarianMTModel"),q$o=o(" (Marian model)"),j$o=l(),D1=a("li"),ame=a("strong"),D$o=o("mbart"),G$o=o(" \u2014 "),FG=a("a"),O$o=o("MBartForConditionalGeneration"),V$o=o(" (mBART model)"),X$o=l(),G1=a("li"),nme=a("strong"),z$o=o("mt5"),W$o=o(" \u2014 "),TG=a("a"),Q$o=o("MT5ForConditionalGeneration"),H$o=o(" (MT5 model)"),U$o=l(),O1=a("li"),sme=a("strong"),J$o=o("pegasus"),Y$o=o(" \u2014 "),MG=a("a"),K$o=o("PegasusForConditionalGeneration"),Z$o=o(" (Pegasus model)"),eko=l(),V1=a("li"),lme=a("strong"),oko=o("plbart"),rko=o(" \u2014 "),EG=a("a"),tko=o("PLBartForConditionalGeneration"),ako=o(" (PLBart model)"),nko=l(),X1=a("li"),ime=a("strong"),sko=o("prophetnet"),lko=o(" \u2014 "),CG=a("a"),iko=o("ProphetNetForConditionalGeneration"),dko=o(" (ProphetNet model)"),cko=l(),z1=a("li"),dme=a("strong"),fko=o("t5"),mko=o(" \u2014 "),wG=a("a"),gko=o("T5ForConditionalGeneration"),hko=o(" (T5 model)"),pko=l(),W1=a("li"),cme=a("strong"),_ko=o("xlm-prophetnet"),uko=o(" \u2014 "),AG=a("a"),bko=o("XLMProphetNetForConditionalGeneration"),vko=o(" (XLM-ProphetNet model)"),Fko=l(),Q1=a("p"),Tko=o("The model is set in evaluation mode by default using "),fme=a("code"),Mko=o("model.eval()"),Eko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=a("code"),Cko=o("model.train()"),wko=l(),F(H1.$$.fragment),Fje=l(),Gi=a("h2"),U1=a("a"),gme=a("span"),F(Ny.$$.fragment),Ako=l(),hme=a("span"),yko=o("AutoModelForSequenceClassification"),Tje=l(),Ro=a("div"),F(qy.$$.fragment),Lko=l(),Oi=a("p"),xko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yG=a("a"),$ko=o("from_pretrained()"),kko=o(" class method or the "),LG=a("a"),Sko=o("from_config()"),Rko=o(` class
method.`),Pko=l(),jy=a("p"),Bko=o("This class cannot be instantiated directly using "),pme=a("code"),Iko=o("__init__()"),Nko=o(" (throws an error)."),qko=l(),it=a("div"),F(Dy.$$.fragment),jko=l(),_me=a("p"),Dko=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Gko=l(),Vi=a("p"),Oko=o(`Note:
Loading a model from its configuration file does `),ume=a("strong"),Vko=o("not"),Xko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),zko=o("from_pretrained()"),Wko=o(" to load the model weights."),Qko=l(),F(J1.$$.fragment),Hko=l(),oo=a("div"),F(Gy.$$.fragment),Uko=l(),bme=a("p"),Jko=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Yko=l(),Ra=a("p"),Kko=o("The model class to instantiate is selected based on the "),vme=a("code"),Zko=o("model_type"),eSo=o(` property of the config object (either
passed as an argument or loaded from `),Fme=a("code"),oSo=o("pretrained_model_name_or_path"),rSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=a("code"),tSo=o("pretrained_model_name_or_path"),aSo=o(":"),nSo=l(),N=a("ul"),Y1=a("li"),Mme=a("strong"),sSo=o("albert"),lSo=o(" \u2014 "),$G=a("a"),iSo=o("AlbertForSequenceClassification"),dSo=o(" (ALBERT model)"),cSo=l(),K1=a("li"),Eme=a("strong"),fSo=o("bart"),mSo=o(" \u2014 "),kG=a("a"),gSo=o("BartForSequenceClassification"),hSo=o(" (BART model)"),pSo=l(),Z1=a("li"),Cme=a("strong"),_So=o("bert"),uSo=o(" \u2014 "),SG=a("a"),bSo=o("BertForSequenceClassification"),vSo=o(" (BERT model)"),FSo=l(),eb=a("li"),wme=a("strong"),TSo=o("big_bird"),MSo=o(" \u2014 "),RG=a("a"),ESo=o("BigBirdForSequenceClassification"),CSo=o(" (BigBird model)"),wSo=l(),ob=a("li"),Ame=a("strong"),ASo=o("bigbird_pegasus"),ySo=o(" \u2014 "),PG=a("a"),LSo=o("BigBirdPegasusForSequenceClassification"),xSo=o(" (BigBird-Pegasus model)"),$So=l(),rb=a("li"),yme=a("strong"),kSo=o("camembert"),SSo=o(" \u2014 "),BG=a("a"),RSo=o("CamembertForSequenceClassification"),PSo=o(" (CamemBERT model)"),BSo=l(),tb=a("li"),Lme=a("strong"),ISo=o("canine"),NSo=o(" \u2014 "),IG=a("a"),qSo=o("CanineForSequenceClassification"),jSo=o(" (CANINE model)"),DSo=l(),ab=a("li"),xme=a("strong"),GSo=o("convbert"),OSo=o(" \u2014 "),NG=a("a"),VSo=o("ConvBertForSequenceClassification"),XSo=o(" (ConvBERT model)"),zSo=l(),nb=a("li"),$me=a("strong"),WSo=o("ctrl"),QSo=o(" \u2014 "),qG=a("a"),HSo=o("CTRLForSequenceClassification"),USo=o(" (CTRL model)"),JSo=l(),sb=a("li"),kme=a("strong"),YSo=o("data2vec-text"),KSo=o(" \u2014 "),jG=a("a"),ZSo=o("Data2VecTextForSequenceClassification"),eRo=o(" (Data2VecText model)"),oRo=l(),lb=a("li"),Sme=a("strong"),rRo=o("deberta"),tRo=o(" \u2014 "),DG=a("a"),aRo=o("DebertaForSequenceClassification"),nRo=o(" (DeBERTa model)"),sRo=l(),ib=a("li"),Rme=a("strong"),lRo=o("deberta-v2"),iRo=o(" \u2014 "),GG=a("a"),dRo=o("DebertaV2ForSequenceClassification"),cRo=o(" (DeBERTa-v2 model)"),fRo=l(),db=a("li"),Pme=a("strong"),mRo=o("distilbert"),gRo=o(" \u2014 "),OG=a("a"),hRo=o("DistilBertForSequenceClassification"),pRo=o(" (DistilBERT model)"),_Ro=l(),cb=a("li"),Bme=a("strong"),uRo=o("electra"),bRo=o(" \u2014 "),VG=a("a"),vRo=o("ElectraForSequenceClassification"),FRo=o(" (ELECTRA model)"),TRo=l(),fb=a("li"),Ime=a("strong"),MRo=o("flaubert"),ERo=o(" \u2014 "),XG=a("a"),CRo=o("FlaubertForSequenceClassification"),wRo=o(" (FlauBERT model)"),ARo=l(),mb=a("li"),Nme=a("strong"),yRo=o("fnet"),LRo=o(" \u2014 "),zG=a("a"),xRo=o("FNetForSequenceClassification"),$Ro=o(" (FNet model)"),kRo=l(),gb=a("li"),qme=a("strong"),SRo=o("funnel"),RRo=o(" \u2014 "),WG=a("a"),PRo=o("FunnelForSequenceClassification"),BRo=o(" (Funnel Transformer model)"),IRo=l(),hb=a("li"),jme=a("strong"),NRo=o("gpt2"),qRo=o(" \u2014 "),QG=a("a"),jRo=o("GPT2ForSequenceClassification"),DRo=o(" (OpenAI GPT-2 model)"),GRo=l(),pb=a("li"),Dme=a("strong"),ORo=o("gpt_neo"),VRo=o(" \u2014 "),HG=a("a"),XRo=o("GPTNeoForSequenceClassification"),zRo=o(" (GPT Neo model)"),WRo=l(),_b=a("li"),Gme=a("strong"),QRo=o("gptj"),HRo=o(" \u2014 "),UG=a("a"),URo=o("GPTJForSequenceClassification"),JRo=o(" (GPT-J model)"),YRo=l(),ub=a("li"),Ome=a("strong"),KRo=o("ibert"),ZRo=o(" \u2014 "),JG=a("a"),ePo=o("IBertForSequenceClassification"),oPo=o(" (I-BERT model)"),rPo=l(),bb=a("li"),Vme=a("strong"),tPo=o("layoutlm"),aPo=o(" \u2014 "),YG=a("a"),nPo=o("LayoutLMForSequenceClassification"),sPo=o(" (LayoutLM model)"),lPo=l(),vb=a("li"),Xme=a("strong"),iPo=o("layoutlmv2"),dPo=o(" \u2014 "),KG=a("a"),cPo=o("LayoutLMv2ForSequenceClassification"),fPo=o(" (LayoutLMv2 model)"),mPo=l(),Fb=a("li"),zme=a("strong"),gPo=o("layoutlmv3"),hPo=o(" \u2014 "),ZG=a("a"),pPo=o("LayoutLMv3ForSequenceClassification"),_Po=o(" (LayoutLMv3 model)"),uPo=l(),Tb=a("li"),Wme=a("strong"),bPo=o("led"),vPo=o(" \u2014 "),eO=a("a"),FPo=o("LEDForSequenceClassification"),TPo=o(" (LED model)"),MPo=l(),Mb=a("li"),Qme=a("strong"),EPo=o("longformer"),CPo=o(" \u2014 "),oO=a("a"),wPo=o("LongformerForSequenceClassification"),APo=o(" (Longformer model)"),yPo=l(),Eb=a("li"),Hme=a("strong"),LPo=o("mbart"),xPo=o(" \u2014 "),rO=a("a"),$Po=o("MBartForSequenceClassification"),kPo=o(" (mBART model)"),SPo=l(),Cb=a("li"),Ume=a("strong"),RPo=o("megatron-bert"),PPo=o(" \u2014 "),tO=a("a"),BPo=o("MegatronBertForSequenceClassification"),IPo=o(" (Megatron-BERT model)"),NPo=l(),wb=a("li"),Jme=a("strong"),qPo=o("mobilebert"),jPo=o(" \u2014 "),aO=a("a"),DPo=o("MobileBertForSequenceClassification"),GPo=o(" (MobileBERT model)"),OPo=l(),Ab=a("li"),Yme=a("strong"),VPo=o("mpnet"),XPo=o(" \u2014 "),nO=a("a"),zPo=o("MPNetForSequenceClassification"),WPo=o(" (MPNet model)"),QPo=l(),yb=a("li"),Kme=a("strong"),HPo=o("nystromformer"),UPo=o(" \u2014 "),sO=a("a"),JPo=o("NystromformerForSequenceClassification"),YPo=o(" (Nystr\xF6mformer model)"),KPo=l(),Lb=a("li"),Zme=a("strong"),ZPo=o("openai-gpt"),eBo=o(" \u2014 "),lO=a("a"),oBo=o("OpenAIGPTForSequenceClassification"),rBo=o(" (OpenAI GPT model)"),tBo=l(),xb=a("li"),ege=a("strong"),aBo=o("perceiver"),nBo=o(" \u2014 "),iO=a("a"),sBo=o("PerceiverForSequenceClassification"),lBo=o(" (Perceiver model)"),iBo=l(),$b=a("li"),oge=a("strong"),dBo=o("plbart"),cBo=o(" \u2014 "),dO=a("a"),fBo=o("PLBartForSequenceClassification"),mBo=o(" (PLBart model)"),gBo=l(),kb=a("li"),rge=a("strong"),hBo=o("qdqbert"),pBo=o(" \u2014 "),cO=a("a"),_Bo=o("QDQBertForSequenceClassification"),uBo=o(" (QDQBert model)"),bBo=l(),Sb=a("li"),tge=a("strong"),vBo=o("reformer"),FBo=o(" \u2014 "),fO=a("a"),TBo=o("ReformerForSequenceClassification"),MBo=o(" (Reformer model)"),EBo=l(),Rb=a("li"),age=a("strong"),CBo=o("rembert"),wBo=o(" \u2014 "),mO=a("a"),ABo=o("RemBertForSequenceClassification"),yBo=o(" (RemBERT model)"),LBo=l(),Pb=a("li"),nge=a("strong"),xBo=o("roberta"),$Bo=o(" \u2014 "),gO=a("a"),kBo=o("RobertaForSequenceClassification"),SBo=o(" (RoBERTa model)"),RBo=l(),Bb=a("li"),sge=a("strong"),PBo=o("roformer"),BBo=o(" \u2014 "),hO=a("a"),IBo=o("RoFormerForSequenceClassification"),NBo=o(" (RoFormer model)"),qBo=l(),Ib=a("li"),lge=a("strong"),jBo=o("squeezebert"),DBo=o(" \u2014 "),pO=a("a"),GBo=o("SqueezeBertForSequenceClassification"),OBo=o(" (SqueezeBERT model)"),VBo=l(),Nb=a("li"),ige=a("strong"),XBo=o("tapas"),zBo=o(" \u2014 "),_O=a("a"),WBo=o("TapasForSequenceClassification"),QBo=o(" (TAPAS model)"),HBo=l(),qb=a("li"),dge=a("strong"),UBo=o("transfo-xl"),JBo=o(" \u2014 "),uO=a("a"),YBo=o("TransfoXLForSequenceClassification"),KBo=o(" (Transformer-XL model)"),ZBo=l(),jb=a("li"),cge=a("strong"),eIo=o("xlm"),oIo=o(" \u2014 "),bO=a("a"),rIo=o("XLMForSequenceClassification"),tIo=o(" (XLM model)"),aIo=l(),Db=a("li"),fge=a("strong"),nIo=o("xlm-roberta"),sIo=o(" \u2014 "),vO=a("a"),lIo=o("XLMRobertaForSequenceClassification"),iIo=o(" (XLM-RoBERTa model)"),dIo=l(),Gb=a("li"),mge=a("strong"),cIo=o("xlm-roberta-xl"),fIo=o(" \u2014 "),FO=a("a"),mIo=o("XLMRobertaXLForSequenceClassification"),gIo=o(" (XLM-RoBERTa-XL model)"),hIo=l(),Ob=a("li"),gge=a("strong"),pIo=o("xlnet"),_Io=o(" \u2014 "),TO=a("a"),uIo=o("XLNetForSequenceClassification"),bIo=o(" (XLNet model)"),vIo=l(),Vb=a("li"),hge=a("strong"),FIo=o("yoso"),TIo=o(" \u2014 "),MO=a("a"),MIo=o("YosoForSequenceClassification"),EIo=o(" (YOSO model)"),CIo=l(),Xb=a("p"),wIo=o("The model is set in evaluation mode by default using "),pge=a("code"),AIo=o("model.eval()"),yIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ge=a("code"),LIo=o("model.train()"),xIo=l(),F(zb.$$.fragment),Mje=l(),Xi=a("h2"),Wb=a("a"),uge=a("span"),F(Oy.$$.fragment),$Io=l(),bge=a("span"),kIo=o("AutoModelForMultipleChoice"),Eje=l(),Po=a("div"),F(Vy.$$.fragment),SIo=l(),zi=a("p"),RIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EO=a("a"),PIo=o("from_pretrained()"),BIo=o(" class method or the "),CO=a("a"),IIo=o("from_config()"),NIo=o(` class
method.`),qIo=l(),Xy=a("p"),jIo=o("This class cannot be instantiated directly using "),vge=a("code"),DIo=o("__init__()"),GIo=o(" (throws an error)."),OIo=l(),dt=a("div"),F(zy.$$.fragment),VIo=l(),Fge=a("p"),XIo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zIo=l(),Wi=a("p"),WIo=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),QIo=o("not"),HIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),UIo=o("from_pretrained()"),JIo=o(" to load the model weights."),YIo=l(),F(Qb.$$.fragment),KIo=l(),ro=a("div"),F(Wy.$$.fragment),ZIo=l(),Mge=a("p"),eNo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oNo=l(),Pa=a("p"),rNo=o("The model class to instantiate is selected based on the "),Ege=a("code"),tNo=o("model_type"),aNo=o(` property of the config object (either
passed as an argument or loaded from `),Cge=a("code"),nNo=o("pretrained_model_name_or_path"),sNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=a("code"),lNo=o("pretrained_model_name_or_path"),iNo=o(":"),dNo=l(),Z=a("ul"),Hb=a("li"),Age=a("strong"),cNo=o("albert"),fNo=o(" \u2014 "),AO=a("a"),mNo=o("AlbertForMultipleChoice"),gNo=o(" (ALBERT model)"),hNo=l(),Ub=a("li"),yge=a("strong"),pNo=o("bert"),_No=o(" \u2014 "),yO=a("a"),uNo=o("BertForMultipleChoice"),bNo=o(" (BERT model)"),vNo=l(),Jb=a("li"),Lge=a("strong"),FNo=o("big_bird"),TNo=o(" \u2014 "),LO=a("a"),MNo=o("BigBirdForMultipleChoice"),ENo=o(" (BigBird model)"),CNo=l(),Yb=a("li"),xge=a("strong"),wNo=o("camembert"),ANo=o(" \u2014 "),xO=a("a"),yNo=o("CamembertForMultipleChoice"),LNo=o(" (CamemBERT model)"),xNo=l(),Kb=a("li"),$ge=a("strong"),$No=o("canine"),kNo=o(" \u2014 "),$O=a("a"),SNo=o("CanineForMultipleChoice"),RNo=o(" (CANINE model)"),PNo=l(),Zb=a("li"),kge=a("strong"),BNo=o("convbert"),INo=o(" \u2014 "),kO=a("a"),NNo=o("ConvBertForMultipleChoice"),qNo=o(" (ConvBERT model)"),jNo=l(),ev=a("li"),Sge=a("strong"),DNo=o("data2vec-text"),GNo=o(" \u2014 "),SO=a("a"),ONo=o("Data2VecTextForMultipleChoice"),VNo=o(" (Data2VecText model)"),XNo=l(),ov=a("li"),Rge=a("strong"),zNo=o("deberta-v2"),WNo=o(" \u2014 "),RO=a("a"),QNo=o("DebertaV2ForMultipleChoice"),HNo=o(" (DeBERTa-v2 model)"),UNo=l(),rv=a("li"),Pge=a("strong"),JNo=o("distilbert"),YNo=o(" \u2014 "),PO=a("a"),KNo=o("DistilBertForMultipleChoice"),ZNo=o(" (DistilBERT model)"),eqo=l(),tv=a("li"),Bge=a("strong"),oqo=o("electra"),rqo=o(" \u2014 "),BO=a("a"),tqo=o("ElectraForMultipleChoice"),aqo=o(" (ELECTRA model)"),nqo=l(),av=a("li"),Ige=a("strong"),sqo=o("flaubert"),lqo=o(" \u2014 "),IO=a("a"),iqo=o("FlaubertForMultipleChoice"),dqo=o(" (FlauBERT model)"),cqo=l(),nv=a("li"),Nge=a("strong"),fqo=o("fnet"),mqo=o(" \u2014 "),NO=a("a"),gqo=o("FNetForMultipleChoice"),hqo=o(" (FNet model)"),pqo=l(),sv=a("li"),qge=a("strong"),_qo=o("funnel"),uqo=o(" \u2014 "),qO=a("a"),bqo=o("FunnelForMultipleChoice"),vqo=o(" (Funnel Transformer model)"),Fqo=l(),lv=a("li"),jge=a("strong"),Tqo=o("ibert"),Mqo=o(" \u2014 "),jO=a("a"),Eqo=o("IBertForMultipleChoice"),Cqo=o(" (I-BERT model)"),wqo=l(),iv=a("li"),Dge=a("strong"),Aqo=o("longformer"),yqo=o(" \u2014 "),DO=a("a"),Lqo=o("LongformerForMultipleChoice"),xqo=o(" (Longformer model)"),$qo=l(),dv=a("li"),Gge=a("strong"),kqo=o("megatron-bert"),Sqo=o(" \u2014 "),GO=a("a"),Rqo=o("MegatronBertForMultipleChoice"),Pqo=o(" (Megatron-BERT model)"),Bqo=l(),cv=a("li"),Oge=a("strong"),Iqo=o("mobilebert"),Nqo=o(" \u2014 "),OO=a("a"),qqo=o("MobileBertForMultipleChoice"),jqo=o(" (MobileBERT model)"),Dqo=l(),fv=a("li"),Vge=a("strong"),Gqo=o("mpnet"),Oqo=o(" \u2014 "),VO=a("a"),Vqo=o("MPNetForMultipleChoice"),Xqo=o(" (MPNet model)"),zqo=l(),mv=a("li"),Xge=a("strong"),Wqo=o("nystromformer"),Qqo=o(" \u2014 "),XO=a("a"),Hqo=o("NystromformerForMultipleChoice"),Uqo=o(" (Nystr\xF6mformer model)"),Jqo=l(),gv=a("li"),zge=a("strong"),Yqo=o("qdqbert"),Kqo=o(" \u2014 "),zO=a("a"),Zqo=o("QDQBertForMultipleChoice"),ejo=o(" (QDQBert model)"),ojo=l(),hv=a("li"),Wge=a("strong"),rjo=o("rembert"),tjo=o(" \u2014 "),WO=a("a"),ajo=o("RemBertForMultipleChoice"),njo=o(" (RemBERT model)"),sjo=l(),pv=a("li"),Qge=a("strong"),ljo=o("roberta"),ijo=o(" \u2014 "),QO=a("a"),djo=o("RobertaForMultipleChoice"),cjo=o(" (RoBERTa model)"),fjo=l(),_v=a("li"),Hge=a("strong"),mjo=o("roformer"),gjo=o(" \u2014 "),HO=a("a"),hjo=o("RoFormerForMultipleChoice"),pjo=o(" (RoFormer model)"),_jo=l(),uv=a("li"),Uge=a("strong"),ujo=o("squeezebert"),bjo=o(" \u2014 "),UO=a("a"),vjo=o("SqueezeBertForMultipleChoice"),Fjo=o(" (SqueezeBERT model)"),Tjo=l(),bv=a("li"),Jge=a("strong"),Mjo=o("xlm"),Ejo=o(" \u2014 "),JO=a("a"),Cjo=o("XLMForMultipleChoice"),wjo=o(" (XLM model)"),Ajo=l(),vv=a("li"),Yge=a("strong"),yjo=o("xlm-roberta"),Ljo=o(" \u2014 "),YO=a("a"),xjo=o("XLMRobertaForMultipleChoice"),$jo=o(" (XLM-RoBERTa model)"),kjo=l(),Fv=a("li"),Kge=a("strong"),Sjo=o("xlm-roberta-xl"),Rjo=o(" \u2014 "),KO=a("a"),Pjo=o("XLMRobertaXLForMultipleChoice"),Bjo=o(" (XLM-RoBERTa-XL model)"),Ijo=l(),Tv=a("li"),Zge=a("strong"),Njo=o("xlnet"),qjo=o(" \u2014 "),ZO=a("a"),jjo=o("XLNetForMultipleChoice"),Djo=o(" (XLNet model)"),Gjo=l(),Mv=a("li"),ehe=a("strong"),Ojo=o("yoso"),Vjo=o(" \u2014 "),eV=a("a"),Xjo=o("YosoForMultipleChoice"),zjo=o(" (YOSO model)"),Wjo=l(),Ev=a("p"),Qjo=o("The model is set in evaluation mode by default using "),ohe=a("code"),Hjo=o("model.eval()"),Ujo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rhe=a("code"),Jjo=o("model.train()"),Yjo=l(),F(Cv.$$.fragment),Cje=l(),Qi=a("h2"),wv=a("a"),the=a("span"),F(Qy.$$.fragment),Kjo=l(),ahe=a("span"),Zjo=o("AutoModelForNextSentencePrediction"),wje=l(),Bo=a("div"),F(Hy.$$.fragment),eDo=l(),Hi=a("p"),oDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oV=a("a"),rDo=o("from_pretrained()"),tDo=o(" class method or the "),rV=a("a"),aDo=o("from_config()"),nDo=o(` class
method.`),sDo=l(),Uy=a("p"),lDo=o("This class cannot be instantiated directly using "),nhe=a("code"),iDo=o("__init__()"),dDo=o(" (throws an error)."),cDo=l(),ct=a("div"),F(Jy.$$.fragment),fDo=l(),she=a("p"),mDo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gDo=l(),Ui=a("p"),hDo=o(`Note:
Loading a model from its configuration file does `),lhe=a("strong"),pDo=o("not"),_Do=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=a("a"),uDo=o("from_pretrained()"),bDo=o(" to load the model weights."),vDo=l(),F(Av.$$.fragment),FDo=l(),to=a("div"),F(Yy.$$.fragment),TDo=l(),ihe=a("p"),MDo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),EDo=l(),Ba=a("p"),CDo=o("The model class to instantiate is selected based on the "),dhe=a("code"),wDo=o("model_type"),ADo=o(` property of the config object (either
passed as an argument or loaded from `),che=a("code"),yDo=o("pretrained_model_name_or_path"),LDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=a("code"),xDo=o("pretrained_model_name_or_path"),$Do=o(":"),kDo=l(),Yr=a("ul"),yv=a("li"),mhe=a("strong"),SDo=o("bert"),RDo=o(" \u2014 "),aV=a("a"),PDo=o("BertForNextSentencePrediction"),BDo=o(" (BERT model)"),IDo=l(),Lv=a("li"),ghe=a("strong"),NDo=o("fnet"),qDo=o(" \u2014 "),nV=a("a"),jDo=o("FNetForNextSentencePrediction"),DDo=o(" (FNet model)"),GDo=l(),xv=a("li"),hhe=a("strong"),ODo=o("megatron-bert"),VDo=o(" \u2014 "),sV=a("a"),XDo=o("MegatronBertForNextSentencePrediction"),zDo=o(" (Megatron-BERT model)"),WDo=l(),$v=a("li"),phe=a("strong"),QDo=o("mobilebert"),HDo=o(" \u2014 "),lV=a("a"),UDo=o("MobileBertForNextSentencePrediction"),JDo=o(" (MobileBERT model)"),YDo=l(),kv=a("li"),_he=a("strong"),KDo=o("qdqbert"),ZDo=o(" \u2014 "),iV=a("a"),eGo=o("QDQBertForNextSentencePrediction"),oGo=o(" (QDQBert model)"),rGo=l(),Sv=a("p"),tGo=o("The model is set in evaluation mode by default using "),uhe=a("code"),aGo=o("model.eval()"),nGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=a("code"),sGo=o("model.train()"),lGo=l(),F(Rv.$$.fragment),Aje=l(),Ji=a("h2"),Pv=a("a"),vhe=a("span"),F(Ky.$$.fragment),iGo=l(),Fhe=a("span"),dGo=o("AutoModelForTokenClassification"),yje=l(),Io=a("div"),F(Zy.$$.fragment),cGo=l(),Yi=a("p"),fGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dV=a("a"),mGo=o("from_pretrained()"),gGo=o(" class method or the "),cV=a("a"),hGo=o("from_config()"),pGo=o(` class
method.`),_Go=l(),eL=a("p"),uGo=o("This class cannot be instantiated directly using "),The=a("code"),bGo=o("__init__()"),vGo=o(" (throws an error)."),FGo=l(),ft=a("div"),F(oL.$$.fragment),TGo=l(),Mhe=a("p"),MGo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EGo=l(),Ki=a("p"),CGo=o(`Note:
Loading a model from its configuration file does `),Ehe=a("strong"),wGo=o("not"),AGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fV=a("a"),yGo=o("from_pretrained()"),LGo=o(" to load the model weights."),xGo=l(),F(Bv.$$.fragment),$Go=l(),ao=a("div"),F(rL.$$.fragment),kGo=l(),Che=a("p"),SGo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),RGo=l(),Ia=a("p"),PGo=o("The model class to instantiate is selected based on the "),whe=a("code"),BGo=o("model_type"),IGo=o(` property of the config object (either
passed as an argument or loaded from `),Ahe=a("code"),NGo=o("pretrained_model_name_or_path"),qGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=a("code"),jGo=o("pretrained_model_name_or_path"),DGo=o(":"),GGo=l(),U=a("ul"),Iv=a("li"),Lhe=a("strong"),OGo=o("albert"),VGo=o(" \u2014 "),mV=a("a"),XGo=o("AlbertForTokenClassification"),zGo=o(" (ALBERT model)"),WGo=l(),Nv=a("li"),xhe=a("strong"),QGo=o("bert"),HGo=o(" \u2014 "),gV=a("a"),UGo=o("BertForTokenClassification"),JGo=o(" (BERT model)"),YGo=l(),qv=a("li"),$he=a("strong"),KGo=o("big_bird"),ZGo=o(" \u2014 "),hV=a("a"),eOo=o("BigBirdForTokenClassification"),oOo=o(" (BigBird model)"),rOo=l(),jv=a("li"),khe=a("strong"),tOo=o("camembert"),aOo=o(" \u2014 "),pV=a("a"),nOo=o("CamembertForTokenClassification"),sOo=o(" (CamemBERT model)"),lOo=l(),Dv=a("li"),She=a("strong"),iOo=o("canine"),dOo=o(" \u2014 "),_V=a("a"),cOo=o("CanineForTokenClassification"),fOo=o(" (CANINE model)"),mOo=l(),Gv=a("li"),Rhe=a("strong"),gOo=o("convbert"),hOo=o(" \u2014 "),uV=a("a"),pOo=o("ConvBertForTokenClassification"),_Oo=o(" (ConvBERT model)"),uOo=l(),Ov=a("li"),Phe=a("strong"),bOo=o("data2vec-text"),vOo=o(" \u2014 "),bV=a("a"),FOo=o("Data2VecTextForTokenClassification"),TOo=o(" (Data2VecText model)"),MOo=l(),Vv=a("li"),Bhe=a("strong"),EOo=o("deberta"),COo=o(" \u2014 "),vV=a("a"),wOo=o("DebertaForTokenClassification"),AOo=o(" (DeBERTa model)"),yOo=l(),Xv=a("li"),Ihe=a("strong"),LOo=o("deberta-v2"),xOo=o(" \u2014 "),FV=a("a"),$Oo=o("DebertaV2ForTokenClassification"),kOo=o(" (DeBERTa-v2 model)"),SOo=l(),zv=a("li"),Nhe=a("strong"),ROo=o("distilbert"),POo=o(" \u2014 "),TV=a("a"),BOo=o("DistilBertForTokenClassification"),IOo=o(" (DistilBERT model)"),NOo=l(),Wv=a("li"),qhe=a("strong"),qOo=o("electra"),jOo=o(" \u2014 "),MV=a("a"),DOo=o("ElectraForTokenClassification"),GOo=o(" (ELECTRA model)"),OOo=l(),Qv=a("li"),jhe=a("strong"),VOo=o("flaubert"),XOo=o(" \u2014 "),EV=a("a"),zOo=o("FlaubertForTokenClassification"),WOo=o(" (FlauBERT model)"),QOo=l(),Hv=a("li"),Dhe=a("strong"),HOo=o("fnet"),UOo=o(" \u2014 "),CV=a("a"),JOo=o("FNetForTokenClassification"),YOo=o(" (FNet model)"),KOo=l(),Uv=a("li"),Ghe=a("strong"),ZOo=o("funnel"),eVo=o(" \u2014 "),wV=a("a"),oVo=o("FunnelForTokenClassification"),rVo=o(" (Funnel Transformer model)"),tVo=l(),Jv=a("li"),Ohe=a("strong"),aVo=o("gpt2"),nVo=o(" \u2014 "),AV=a("a"),sVo=o("GPT2ForTokenClassification"),lVo=o(" (OpenAI GPT-2 model)"),iVo=l(),Yv=a("li"),Vhe=a("strong"),dVo=o("ibert"),cVo=o(" \u2014 "),yV=a("a"),fVo=o("IBertForTokenClassification"),mVo=o(" (I-BERT model)"),gVo=l(),Kv=a("li"),Xhe=a("strong"),hVo=o("layoutlm"),pVo=o(" \u2014 "),LV=a("a"),_Vo=o("LayoutLMForTokenClassification"),uVo=o(" (LayoutLM model)"),bVo=l(),Zv=a("li"),zhe=a("strong"),vVo=o("layoutlmv2"),FVo=o(" \u2014 "),xV=a("a"),TVo=o("LayoutLMv2ForTokenClassification"),MVo=o(" (LayoutLMv2 model)"),EVo=l(),eF=a("li"),Whe=a("strong"),CVo=o("layoutlmv3"),wVo=o(" \u2014 "),$V=a("a"),AVo=o("LayoutLMv3ForTokenClassification"),yVo=o(" (LayoutLMv3 model)"),LVo=l(),oF=a("li"),Qhe=a("strong"),xVo=o("longformer"),$Vo=o(" \u2014 "),kV=a("a"),kVo=o("LongformerForTokenClassification"),SVo=o(" (Longformer model)"),RVo=l(),rF=a("li"),Hhe=a("strong"),PVo=o("megatron-bert"),BVo=o(" \u2014 "),SV=a("a"),IVo=o("MegatronBertForTokenClassification"),NVo=o(" (Megatron-BERT model)"),qVo=l(),tF=a("li"),Uhe=a("strong"),jVo=o("mobilebert"),DVo=o(" \u2014 "),RV=a("a"),GVo=o("MobileBertForTokenClassification"),OVo=o(" (MobileBERT model)"),VVo=l(),aF=a("li"),Jhe=a("strong"),XVo=o("mpnet"),zVo=o(" \u2014 "),PV=a("a"),WVo=o("MPNetForTokenClassification"),QVo=o(" (MPNet model)"),HVo=l(),nF=a("li"),Yhe=a("strong"),UVo=o("nystromformer"),JVo=o(" \u2014 "),BV=a("a"),YVo=o("NystromformerForTokenClassification"),KVo=o(" (Nystr\xF6mformer model)"),ZVo=l(),sF=a("li"),Khe=a("strong"),eXo=o("qdqbert"),oXo=o(" \u2014 "),IV=a("a"),rXo=o("QDQBertForTokenClassification"),tXo=o(" (QDQBert model)"),aXo=l(),lF=a("li"),Zhe=a("strong"),nXo=o("rembert"),sXo=o(" \u2014 "),NV=a("a"),lXo=o("RemBertForTokenClassification"),iXo=o(" (RemBERT model)"),dXo=l(),iF=a("li"),epe=a("strong"),cXo=o("roberta"),fXo=o(" \u2014 "),qV=a("a"),mXo=o("RobertaForTokenClassification"),gXo=o(" (RoBERTa model)"),hXo=l(),dF=a("li"),ope=a("strong"),pXo=o("roformer"),_Xo=o(" \u2014 "),jV=a("a"),uXo=o("RoFormerForTokenClassification"),bXo=o(" (RoFormer model)"),vXo=l(),cF=a("li"),rpe=a("strong"),FXo=o("squeezebert"),TXo=o(" \u2014 "),DV=a("a"),MXo=o("SqueezeBertForTokenClassification"),EXo=o(" (SqueezeBERT model)"),CXo=l(),fF=a("li"),tpe=a("strong"),wXo=o("xlm"),AXo=o(" \u2014 "),GV=a("a"),yXo=o("XLMForTokenClassification"),LXo=o(" (XLM model)"),xXo=l(),mF=a("li"),ape=a("strong"),$Xo=o("xlm-roberta"),kXo=o(" \u2014 "),OV=a("a"),SXo=o("XLMRobertaForTokenClassification"),RXo=o(" (XLM-RoBERTa model)"),PXo=l(),gF=a("li"),npe=a("strong"),BXo=o("xlm-roberta-xl"),IXo=o(" \u2014 "),VV=a("a"),NXo=o("XLMRobertaXLForTokenClassification"),qXo=o(" (XLM-RoBERTa-XL model)"),jXo=l(),hF=a("li"),spe=a("strong"),DXo=o("xlnet"),GXo=o(" \u2014 "),XV=a("a"),OXo=o("XLNetForTokenClassification"),VXo=o(" (XLNet model)"),XXo=l(),pF=a("li"),lpe=a("strong"),zXo=o("yoso"),WXo=o(" \u2014 "),zV=a("a"),QXo=o("YosoForTokenClassification"),HXo=o(" (YOSO model)"),UXo=l(),_F=a("p"),JXo=o("The model is set in evaluation mode by default using "),ipe=a("code"),YXo=o("model.eval()"),KXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dpe=a("code"),ZXo=o("model.train()"),ezo=l(),F(uF.$$.fragment),Lje=l(),Zi=a("h2"),bF=a("a"),cpe=a("span"),F(tL.$$.fragment),ozo=l(),fpe=a("span"),rzo=o("AutoModelForQuestionAnswering"),xje=l(),No=a("div"),F(aL.$$.fragment),tzo=l(),ed=a("p"),azo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WV=a("a"),nzo=o("from_pretrained()"),szo=o(" class method or the "),QV=a("a"),lzo=o("from_config()"),izo=o(` class
method.`),dzo=l(),nL=a("p"),czo=o("This class cannot be instantiated directly using "),mpe=a("code"),fzo=o("__init__()"),mzo=o(" (throws an error)."),gzo=l(),mt=a("div"),F(sL.$$.fragment),hzo=l(),gpe=a("p"),pzo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_zo=l(),od=a("p"),uzo=o(`Note:
Loading a model from its configuration file does `),hpe=a("strong"),bzo=o("not"),vzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),Fzo=o("from_pretrained()"),Tzo=o(" to load the model weights."),Mzo=l(),F(vF.$$.fragment),Ezo=l(),no=a("div"),F(lL.$$.fragment),Czo=l(),ppe=a("p"),wzo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Azo=l(),Na=a("p"),yzo=o("The model class to instantiate is selected based on the "),_pe=a("code"),Lzo=o("model_type"),xzo=o(` property of the config object (either
passed as an argument or loaded from `),upe=a("code"),$zo=o("pretrained_model_name_or_path"),kzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bpe=a("code"),Szo=o("pretrained_model_name_or_path"),Rzo=o(":"),Pzo=l(),V=a("ul"),FF=a("li"),vpe=a("strong"),Bzo=o("albert"),Izo=o(" \u2014 "),UV=a("a"),Nzo=o("AlbertForQuestionAnswering"),qzo=o(" (ALBERT model)"),jzo=l(),TF=a("li"),Fpe=a("strong"),Dzo=o("bart"),Gzo=o(" \u2014 "),JV=a("a"),Ozo=o("BartForQuestionAnswering"),Vzo=o(" (BART model)"),Xzo=l(),MF=a("li"),Tpe=a("strong"),zzo=o("bert"),Wzo=o(" \u2014 "),YV=a("a"),Qzo=o("BertForQuestionAnswering"),Hzo=o(" (BERT model)"),Uzo=l(),EF=a("li"),Mpe=a("strong"),Jzo=o("big_bird"),Yzo=o(" \u2014 "),KV=a("a"),Kzo=o("BigBirdForQuestionAnswering"),Zzo=o(" (BigBird model)"),eWo=l(),CF=a("li"),Epe=a("strong"),oWo=o("bigbird_pegasus"),rWo=o(" \u2014 "),ZV=a("a"),tWo=o("BigBirdPegasusForQuestionAnswering"),aWo=o(" (BigBird-Pegasus model)"),nWo=l(),wF=a("li"),Cpe=a("strong"),sWo=o("camembert"),lWo=o(" \u2014 "),eX=a("a"),iWo=o("CamembertForQuestionAnswering"),dWo=o(" (CamemBERT model)"),cWo=l(),AF=a("li"),wpe=a("strong"),fWo=o("canine"),mWo=o(" \u2014 "),oX=a("a"),gWo=o("CanineForQuestionAnswering"),hWo=o(" (CANINE model)"),pWo=l(),yF=a("li"),Ape=a("strong"),_Wo=o("convbert"),uWo=o(" \u2014 "),rX=a("a"),bWo=o("ConvBertForQuestionAnswering"),vWo=o(" (ConvBERT model)"),FWo=l(),LF=a("li"),ype=a("strong"),TWo=o("data2vec-text"),MWo=o(" \u2014 "),tX=a("a"),EWo=o("Data2VecTextForQuestionAnswering"),CWo=o(" (Data2VecText model)"),wWo=l(),xF=a("li"),Lpe=a("strong"),AWo=o("deberta"),yWo=o(" \u2014 "),aX=a("a"),LWo=o("DebertaForQuestionAnswering"),xWo=o(" (DeBERTa model)"),$Wo=l(),$F=a("li"),xpe=a("strong"),kWo=o("deberta-v2"),SWo=o(" \u2014 "),nX=a("a"),RWo=o("DebertaV2ForQuestionAnswering"),PWo=o(" (DeBERTa-v2 model)"),BWo=l(),kF=a("li"),$pe=a("strong"),IWo=o("distilbert"),NWo=o(" \u2014 "),sX=a("a"),qWo=o("DistilBertForQuestionAnswering"),jWo=o(" (DistilBERT model)"),DWo=l(),SF=a("li"),kpe=a("strong"),GWo=o("electra"),OWo=o(" \u2014 "),lX=a("a"),VWo=o("ElectraForQuestionAnswering"),XWo=o(" (ELECTRA model)"),zWo=l(),RF=a("li"),Spe=a("strong"),WWo=o("flaubert"),QWo=o(" \u2014 "),iX=a("a"),HWo=o("FlaubertForQuestionAnsweringSimple"),UWo=o(" (FlauBERT model)"),JWo=l(),PF=a("li"),Rpe=a("strong"),YWo=o("fnet"),KWo=o(" \u2014 "),dX=a("a"),ZWo=o("FNetForQuestionAnswering"),eQo=o(" (FNet model)"),oQo=l(),BF=a("li"),Ppe=a("strong"),rQo=o("funnel"),tQo=o(" \u2014 "),cX=a("a"),aQo=o("FunnelForQuestionAnswering"),nQo=o(" (Funnel Transformer model)"),sQo=l(),IF=a("li"),Bpe=a("strong"),lQo=o("gptj"),iQo=o(" \u2014 "),fX=a("a"),dQo=o("GPTJForQuestionAnswering"),cQo=o(" (GPT-J model)"),fQo=l(),NF=a("li"),Ipe=a("strong"),mQo=o("ibert"),gQo=o(" \u2014 "),mX=a("a"),hQo=o("IBertForQuestionAnswering"),pQo=o(" (I-BERT model)"),_Qo=l(),qF=a("li"),Npe=a("strong"),uQo=o("layoutlmv2"),bQo=o(" \u2014 "),gX=a("a"),vQo=o("LayoutLMv2ForQuestionAnswering"),FQo=o(" (LayoutLMv2 model)"),TQo=l(),jF=a("li"),qpe=a("strong"),MQo=o("layoutlmv3"),EQo=o(" \u2014 "),hX=a("a"),CQo=o("LayoutLMv3ForQuestionAnswering"),wQo=o(" (LayoutLMv3 model)"),AQo=l(),DF=a("li"),jpe=a("strong"),yQo=o("led"),LQo=o(" \u2014 "),pX=a("a"),xQo=o("LEDForQuestionAnswering"),$Qo=o(" (LED model)"),kQo=l(),GF=a("li"),Dpe=a("strong"),SQo=o("longformer"),RQo=o(" \u2014 "),_X=a("a"),PQo=o("LongformerForQuestionAnswering"),BQo=o(" (Longformer model)"),IQo=l(),OF=a("li"),Gpe=a("strong"),NQo=o("lxmert"),qQo=o(" \u2014 "),uX=a("a"),jQo=o("LxmertForQuestionAnswering"),DQo=o(" (LXMERT model)"),GQo=l(),VF=a("li"),Ope=a("strong"),OQo=o("mbart"),VQo=o(" \u2014 "),bX=a("a"),XQo=o("MBartForQuestionAnswering"),zQo=o(" (mBART model)"),WQo=l(),XF=a("li"),Vpe=a("strong"),QQo=o("megatron-bert"),HQo=o(" \u2014 "),vX=a("a"),UQo=o("MegatronBertForQuestionAnswering"),JQo=o(" (Megatron-BERT model)"),YQo=l(),zF=a("li"),Xpe=a("strong"),KQo=o("mobilebert"),ZQo=o(" \u2014 "),FX=a("a"),eHo=o("MobileBertForQuestionAnswering"),oHo=o(" (MobileBERT model)"),rHo=l(),WF=a("li"),zpe=a("strong"),tHo=o("mpnet"),aHo=o(" \u2014 "),TX=a("a"),nHo=o("MPNetForQuestionAnswering"),sHo=o(" (MPNet model)"),lHo=l(),QF=a("li"),Wpe=a("strong"),iHo=o("nystromformer"),dHo=o(" \u2014 "),MX=a("a"),cHo=o("NystromformerForQuestionAnswering"),fHo=o(" (Nystr\xF6mformer model)"),mHo=l(),HF=a("li"),Qpe=a("strong"),gHo=o("qdqbert"),hHo=o(" \u2014 "),EX=a("a"),pHo=o("QDQBertForQuestionAnswering"),_Ho=o(" (QDQBert model)"),uHo=l(),UF=a("li"),Hpe=a("strong"),bHo=o("reformer"),vHo=o(" \u2014 "),CX=a("a"),FHo=o("ReformerForQuestionAnswering"),THo=o(" (Reformer model)"),MHo=l(),JF=a("li"),Upe=a("strong"),EHo=o("rembert"),CHo=o(" \u2014 "),wX=a("a"),wHo=o("RemBertForQuestionAnswering"),AHo=o(" (RemBERT model)"),yHo=l(),YF=a("li"),Jpe=a("strong"),LHo=o("roberta"),xHo=o(" \u2014 "),AX=a("a"),$Ho=o("RobertaForQuestionAnswering"),kHo=o(" (RoBERTa model)"),SHo=l(),KF=a("li"),Ype=a("strong"),RHo=o("roformer"),PHo=o(" \u2014 "),yX=a("a"),BHo=o("RoFormerForQuestionAnswering"),IHo=o(" (RoFormer model)"),NHo=l(),ZF=a("li"),Kpe=a("strong"),qHo=o("splinter"),jHo=o(" \u2014 "),LX=a("a"),DHo=o("SplinterForQuestionAnswering"),GHo=o(" (Splinter model)"),OHo=l(),e6=a("li"),Zpe=a("strong"),VHo=o("squeezebert"),XHo=o(" \u2014 "),xX=a("a"),zHo=o("SqueezeBertForQuestionAnswering"),WHo=o(" (SqueezeBERT model)"),QHo=l(),o6=a("li"),e_e=a("strong"),HHo=o("xlm"),UHo=o(" \u2014 "),$X=a("a"),JHo=o("XLMForQuestionAnsweringSimple"),YHo=o(" (XLM model)"),KHo=l(),r6=a("li"),o_e=a("strong"),ZHo=o("xlm-roberta"),eUo=o(" \u2014 "),kX=a("a"),oUo=o("XLMRobertaForQuestionAnswering"),rUo=o(" (XLM-RoBERTa model)"),tUo=l(),t6=a("li"),r_e=a("strong"),aUo=o("xlm-roberta-xl"),nUo=o(" \u2014 "),SX=a("a"),sUo=o("XLMRobertaXLForQuestionAnswering"),lUo=o(" (XLM-RoBERTa-XL model)"),iUo=l(),a6=a("li"),t_e=a("strong"),dUo=o("xlnet"),cUo=o(" \u2014 "),RX=a("a"),fUo=o("XLNetForQuestionAnsweringSimple"),mUo=o(" (XLNet model)"),gUo=l(),n6=a("li"),a_e=a("strong"),hUo=o("yoso"),pUo=o(" \u2014 "),PX=a("a"),_Uo=o("YosoForQuestionAnswering"),uUo=o(" (YOSO model)"),bUo=l(),s6=a("p"),vUo=o("The model is set in evaluation mode by default using "),n_e=a("code"),FUo=o("model.eval()"),TUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=a("code"),MUo=o("model.train()"),EUo=l(),F(l6.$$.fragment),$je=l(),rd=a("h2"),i6=a("a"),l_e=a("span"),F(iL.$$.fragment),CUo=l(),i_e=a("span"),wUo=o("AutoModelForTableQuestionAnswering"),kje=l(),qo=a("div"),F(dL.$$.fragment),AUo=l(),td=a("p"),yUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BX=a("a"),LUo=o("from_pretrained()"),xUo=o(" class method or the "),IX=a("a"),$Uo=o("from_config()"),kUo=o(` class
method.`),SUo=l(),cL=a("p"),RUo=o("This class cannot be instantiated directly using "),d_e=a("code"),PUo=o("__init__()"),BUo=o(" (throws an error)."),IUo=l(),gt=a("div"),F(fL.$$.fragment),NUo=l(),c_e=a("p"),qUo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),jUo=l(),ad=a("p"),DUo=o(`Note:
Loading a model from its configuration file does `),f_e=a("strong"),GUo=o("not"),OUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),VUo=o("from_pretrained()"),XUo=o(" to load the model weights."),zUo=l(),F(d6.$$.fragment),WUo=l(),so=a("div"),F(mL.$$.fragment),QUo=l(),m_e=a("p"),HUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),UUo=l(),qa=a("p"),JUo=o("The model class to instantiate is selected based on the "),g_e=a("code"),YUo=o("model_type"),KUo=o(` property of the config object (either
passed as an argument or loaded from `),h_e=a("code"),ZUo=o("pretrained_model_name_or_path"),eJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=a("code"),oJo=o("pretrained_model_name_or_path"),rJo=o(":"),tJo=l(),__e=a("ul"),c6=a("li"),u_e=a("strong"),aJo=o("tapas"),nJo=o(" \u2014 "),qX=a("a"),sJo=o("TapasForQuestionAnswering"),lJo=o(" (TAPAS model)"),iJo=l(),f6=a("p"),dJo=o("The model is set in evaluation mode by default using "),b_e=a("code"),cJo=o("model.eval()"),fJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=a("code"),mJo=o("model.train()"),gJo=l(),F(m6.$$.fragment),Sje=l(),nd=a("h2"),g6=a("a"),F_e=a("span"),F(gL.$$.fragment),hJo=l(),T_e=a("span"),pJo=o("AutoModelForImageClassification"),Rje=l(),jo=a("div"),F(hL.$$.fragment),_Jo=l(),sd=a("p"),uJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jX=a("a"),bJo=o("from_pretrained()"),vJo=o(" class method or the "),DX=a("a"),FJo=o("from_config()"),TJo=o(` class
method.`),MJo=l(),pL=a("p"),EJo=o("This class cannot be instantiated directly using "),M_e=a("code"),CJo=o("__init__()"),wJo=o(" (throws an error)."),AJo=l(),ht=a("div"),F(_L.$$.fragment),yJo=l(),E_e=a("p"),LJo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xJo=l(),ld=a("p"),$Jo=o(`Note:
Loading a model from its configuration file does `),C_e=a("strong"),kJo=o("not"),SJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=a("a"),RJo=o("from_pretrained()"),PJo=o(" to load the model weights."),BJo=l(),F(h6.$$.fragment),IJo=l(),lo=a("div"),F(uL.$$.fragment),NJo=l(),w_e=a("p"),qJo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jJo=l(),ja=a("p"),DJo=o("The model class to instantiate is selected based on the "),A_e=a("code"),GJo=o("model_type"),OJo=o(` property of the config object (either
passed as an argument or loaded from `),y_e=a("code"),VJo=o("pretrained_model_name_or_path"),XJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=a("code"),zJo=o("pretrained_model_name_or_path"),WJo=o(":"),QJo=l(),ve=a("ul"),p6=a("li"),x_e=a("strong"),HJo=o("beit"),UJo=o(" \u2014 "),OX=a("a"),JJo=o("BeitForImageClassification"),YJo=o(" (BEiT model)"),KJo=l(),_6=a("li"),$_e=a("strong"),ZJo=o("convnext"),eYo=o(" \u2014 "),VX=a("a"),oYo=o("ConvNextForImageClassification"),rYo=o(" (ConvNeXT model)"),tYo=l(),u6=a("li"),k_e=a("strong"),aYo=o("cvt"),nYo=o(" \u2014 "),XX=a("a"),sYo=o("CvtForImageClassification"),lYo=o(" (CvT model)"),iYo=l(),b6=a("li"),S_e=a("strong"),dYo=o("data2vec-vision"),cYo=o(" \u2014 "),zX=a("a"),fYo=o("Data2VecVisionForImageClassification"),mYo=o(" (Data2VecVision model)"),gYo=l(),Bs=a("li"),R_e=a("strong"),hYo=o("deit"),pYo=o(" \u2014 "),WX=a("a"),_Yo=o("DeiTForImageClassification"),uYo=o(" or "),QX=a("a"),bYo=o("DeiTForImageClassificationWithTeacher"),vYo=o(" (DeiT model)"),FYo=l(),v6=a("li"),P_e=a("strong"),TYo=o("imagegpt"),MYo=o(" \u2014 "),HX=a("a"),EYo=o("ImageGPTForImageClassification"),CYo=o(" (ImageGPT model)"),wYo=l(),Is=a("li"),B_e=a("strong"),AYo=o("levit"),yYo=o(" \u2014 "),UX=a("a"),LYo=o("LevitForImageClassification"),xYo=o(" or "),JX=a("a"),$Yo=o("LevitForImageClassificationWithTeacher"),kYo=o(" (LeViT model)"),SYo=l(),pt=a("li"),I_e=a("strong"),RYo=o("perceiver"),PYo=o(" \u2014 "),YX=a("a"),BYo=o("PerceiverForImageClassificationLearned"),IYo=o(" or "),KX=a("a"),NYo=o("PerceiverForImageClassificationFourier"),qYo=o(" or "),ZX=a("a"),jYo=o("PerceiverForImageClassificationConvProcessing"),DYo=o(" (Perceiver model)"),GYo=l(),F6=a("li"),N_e=a("strong"),OYo=o("poolformer"),VYo=o(" \u2014 "),ez=a("a"),XYo=o("PoolFormerForImageClassification"),zYo=o(" (PoolFormer model)"),WYo=l(),T6=a("li"),q_e=a("strong"),QYo=o("regnet"),HYo=o(" \u2014 "),oz=a("a"),UYo=o("RegNetForImageClassification"),JYo=o(" (RegNet model)"),YYo=l(),M6=a("li"),j_e=a("strong"),KYo=o("resnet"),ZYo=o(" \u2014 "),rz=a("a"),eKo=o("ResNetForImageClassification"),oKo=o(" (ResNet model)"),rKo=l(),E6=a("li"),D_e=a("strong"),tKo=o("segformer"),aKo=o(" \u2014 "),tz=a("a"),nKo=o("SegformerForImageClassification"),sKo=o(" (SegFormer model)"),lKo=l(),C6=a("li"),G_e=a("strong"),iKo=o("swin"),dKo=o(" \u2014 "),az=a("a"),cKo=o("SwinForImageClassification"),fKo=o(" (Swin Transformer model)"),mKo=l(),w6=a("li"),O_e=a("strong"),gKo=o("van"),hKo=o(" \u2014 "),nz=a("a"),pKo=o("VanForImageClassification"),_Ko=o(" (VAN model)"),uKo=l(),A6=a("li"),V_e=a("strong"),bKo=o("vit"),vKo=o(" \u2014 "),sz=a("a"),FKo=o("ViTForImageClassification"),TKo=o(" (ViT model)"),MKo=l(),y6=a("p"),EKo=o("The model is set in evaluation mode by default using "),X_e=a("code"),CKo=o("model.eval()"),wKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=a("code"),AKo=o("model.train()"),yKo=l(),F(L6.$$.fragment),Pje=l(),id=a("h2"),x6=a("a"),W_e=a("span"),F(bL.$$.fragment),LKo=l(),Q_e=a("span"),xKo=o("AutoModelForVision2Seq"),Bje=l(),Do=a("div"),F(vL.$$.fragment),$Ko=l(),dd=a("p"),kKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lz=a("a"),SKo=o("from_pretrained()"),RKo=o(" class method or the "),iz=a("a"),PKo=o("from_config()"),BKo=o(` class
method.`),IKo=l(),FL=a("p"),NKo=o("This class cannot be instantiated directly using "),H_e=a("code"),qKo=o("__init__()"),jKo=o(" (throws an error)."),DKo=l(),_t=a("div"),F(TL.$$.fragment),GKo=l(),U_e=a("p"),OKo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VKo=l(),cd=a("p"),XKo=o(`Note:
Loading a model from its configuration file does `),J_e=a("strong"),zKo=o("not"),WKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=a("a"),QKo=o("from_pretrained()"),HKo=o(" to load the model weights."),UKo=l(),F($6.$$.fragment),JKo=l(),io=a("div"),F(ML.$$.fragment),YKo=l(),Y_e=a("p"),KKo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZKo=l(),Da=a("p"),eZo=o("The model class to instantiate is selected based on the "),K_e=a("code"),oZo=o("model_type"),rZo=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),tZo=o("pretrained_model_name_or_path"),aZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),nZo=o("pretrained_model_name_or_path"),sZo=o(":"),lZo=l(),oue=a("ul"),k6=a("li"),rue=a("strong"),iZo=o("vision-encoder-decoder"),dZo=o(" \u2014 "),cz=a("a"),cZo=o("VisionEncoderDecoderModel"),fZo=o(" (Vision Encoder decoder model)"),mZo=l(),S6=a("p"),gZo=o("The model is set in evaluation mode by default using "),tue=a("code"),hZo=o("model.eval()"),pZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),_Zo=o("model.train()"),uZo=l(),F(R6.$$.fragment),Ije=l(),fd=a("h2"),P6=a("a"),nue=a("span"),F(EL.$$.fragment),bZo=l(),sue=a("span"),vZo=o("AutoModelForAudioClassification"),Nje=l(),Go=a("div"),F(CL.$$.fragment),FZo=l(),md=a("p"),TZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),fz=a("a"),MZo=o("from_pretrained()"),EZo=o(" class method or the "),mz=a("a"),CZo=o("from_config()"),wZo=o(` class
method.`),AZo=l(),wL=a("p"),yZo=o("This class cannot be instantiated directly using "),lue=a("code"),LZo=o("__init__()"),xZo=o(" (throws an error)."),$Zo=l(),ut=a("div"),F(AL.$$.fragment),kZo=l(),iue=a("p"),SZo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),RZo=l(),gd=a("p"),PZo=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),BZo=o("not"),IZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gz=a("a"),NZo=o("from_pretrained()"),qZo=o(" to load the model weights."),jZo=l(),F(B6.$$.fragment),DZo=l(),co=a("div"),F(yL.$$.fragment),GZo=l(),cue=a("p"),OZo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),VZo=l(),Ga=a("p"),XZo=o("The model class to instantiate is selected based on the "),fue=a("code"),zZo=o("model_type"),WZo=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),QZo=o("pretrained_model_name_or_path"),HZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),UZo=o("pretrained_model_name_or_path"),JZo=o(":"),YZo=l(),Re=a("ul"),I6=a("li"),hue=a("strong"),KZo=o("data2vec-audio"),ZZo=o(" \u2014 "),hz=a("a"),eer=o("Data2VecAudioForSequenceClassification"),oer=o(" (Data2VecAudio model)"),rer=l(),N6=a("li"),pue=a("strong"),ter=o("hubert"),aer=o(" \u2014 "),pz=a("a"),ner=o("HubertForSequenceClassification"),ser=o(" (Hubert model)"),ler=l(),q6=a("li"),_ue=a("strong"),ier=o("sew"),der=o(" \u2014 "),_z=a("a"),cer=o("SEWForSequenceClassification"),fer=o(" (SEW model)"),mer=l(),j6=a("li"),uue=a("strong"),ger=o("sew-d"),her=o(" \u2014 "),uz=a("a"),per=o("SEWDForSequenceClassification"),_er=o(" (SEW-D model)"),uer=l(),D6=a("li"),bue=a("strong"),ber=o("unispeech"),ver=o(" \u2014 "),bz=a("a"),Fer=o("UniSpeechForSequenceClassification"),Ter=o(" (UniSpeech model)"),Mer=l(),G6=a("li"),vue=a("strong"),Eer=o("unispeech-sat"),Cer=o(" \u2014 "),vz=a("a"),wer=o("UniSpeechSatForSequenceClassification"),Aer=o(" (UniSpeechSat model)"),yer=l(),O6=a("li"),Fue=a("strong"),Ler=o("wav2vec2"),xer=o(" \u2014 "),Fz=a("a"),$er=o("Wav2Vec2ForSequenceClassification"),ker=o(" (Wav2Vec2 model)"),Ser=l(),V6=a("li"),Tue=a("strong"),Rer=o("wav2vec2-conformer"),Per=o(" \u2014 "),Tz=a("a"),Ber=o("Wav2Vec2ConformerForSequenceClassification"),Ier=o(" (Wav2Vec2-Conformer model)"),Ner=l(),X6=a("li"),Mue=a("strong"),qer=o("wavlm"),jer=o(" \u2014 "),Mz=a("a"),Der=o("WavLMForSequenceClassification"),Ger=o(" (WavLM model)"),Oer=l(),z6=a("p"),Ver=o("The model is set in evaluation mode by default using "),Eue=a("code"),Xer=o("model.eval()"),zer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=a("code"),Wer=o("model.train()"),Qer=l(),F(W6.$$.fragment),qje=l(),hd=a("h2"),Q6=a("a"),wue=a("span"),F(LL.$$.fragment),Her=l(),Aue=a("span"),Uer=o("AutoModelForAudioFrameClassification"),jje=l(),Oo=a("div"),F(xL.$$.fragment),Jer=l(),pd=a("p"),Yer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Ez=a("a"),Ker=o("from_pretrained()"),Zer=o(" class method or the "),Cz=a("a"),eor=o("from_config()"),oor=o(` class
method.`),ror=l(),$L=a("p"),tor=o("This class cannot be instantiated directly using "),yue=a("code"),aor=o("__init__()"),nor=o(" (throws an error)."),sor=l(),bt=a("div"),F(kL.$$.fragment),lor=l(),Lue=a("p"),ior=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),dor=l(),_d=a("p"),cor=o(`Note:
Loading a model from its configuration file does `),xue=a("strong"),mor=o("not"),gor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),hor=o("from_pretrained()"),por=o(" to load the model weights."),_or=l(),F(H6.$$.fragment),uor=l(),fo=a("div"),F(SL.$$.fragment),bor=l(),$ue=a("p"),vor=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),For=l(),Oa=a("p"),Tor=o("The model class to instantiate is selected based on the "),kue=a("code"),Mor=o("model_type"),Eor=o(` property of the config object (either
passed as an argument or loaded from `),Sue=a("code"),Cor=o("pretrained_model_name_or_path"),wor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),Aor=o("pretrained_model_name_or_path"),yor=o(":"),Lor=l(),Kr=a("ul"),U6=a("li"),Pue=a("strong"),xor=o("data2vec-audio"),$or=o(" \u2014 "),Az=a("a"),kor=o("Data2VecAudioForAudioFrameClassification"),Sor=o(" (Data2VecAudio model)"),Ror=l(),J6=a("li"),Bue=a("strong"),Por=o("unispeech-sat"),Bor=o(" \u2014 "),yz=a("a"),Ior=o("UniSpeechSatForAudioFrameClassification"),Nor=o(" (UniSpeechSat model)"),qor=l(),Y6=a("li"),Iue=a("strong"),jor=o("wav2vec2"),Dor=o(" \u2014 "),Lz=a("a"),Gor=o("Wav2Vec2ForAudioFrameClassification"),Oor=o(" (Wav2Vec2 model)"),Vor=l(),K6=a("li"),Nue=a("strong"),Xor=o("wav2vec2-conformer"),zor=o(" \u2014 "),xz=a("a"),Wor=o("Wav2Vec2ConformerForAudioFrameClassification"),Qor=o(" (Wav2Vec2-Conformer model)"),Hor=l(),Z6=a("li"),que=a("strong"),Uor=o("wavlm"),Jor=o(" \u2014 "),$z=a("a"),Yor=o("WavLMForAudioFrameClassification"),Kor=o(" (WavLM model)"),Zor=l(),eT=a("p"),err=o("The model is set in evaluation mode by default using "),jue=a("code"),orr=o("model.eval()"),rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=a("code"),trr=o("model.train()"),arr=l(),F(oT.$$.fragment),Dje=l(),ud=a("h2"),rT=a("a"),Gue=a("span"),F(RL.$$.fragment),nrr=l(),Oue=a("span"),srr=o("AutoModelForCTC"),Gje=l(),Vo=a("div"),F(PL.$$.fragment),lrr=l(),bd=a("p"),irr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),kz=a("a"),drr=o("from_pretrained()"),crr=o(" class method or the "),Sz=a("a"),frr=o("from_config()"),mrr=o(` class
method.`),grr=l(),BL=a("p"),hrr=o("This class cannot be instantiated directly using "),Vue=a("code"),prr=o("__init__()"),_rr=o(" (throws an error)."),urr=l(),vt=a("div"),F(IL.$$.fragment),brr=l(),Xue=a("p"),vrr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Frr=l(),vd=a("p"),Trr=o(`Note:
Loading a model from its configuration file does `),zue=a("strong"),Mrr=o("not"),Err=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),Crr=o("from_pretrained()"),wrr=o(" to load the model weights."),Arr=l(),F(tT.$$.fragment),yrr=l(),mo=a("div"),F(NL.$$.fragment),Lrr=l(),Wue=a("p"),xrr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),$rr=l(),Va=a("p"),krr=o("The model class to instantiate is selected based on the "),Que=a("code"),Srr=o("model_type"),Rrr=o(` property of the config object (either
passed as an argument or loaded from `),Hue=a("code"),Prr=o("pretrained_model_name_or_path"),Brr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=a("code"),Irr=o("pretrained_model_name_or_path"),Nrr=o(":"),qrr=l(),ye=a("ul"),aT=a("li"),Jue=a("strong"),jrr=o("data2vec-audio"),Drr=o(" \u2014 "),Pz=a("a"),Grr=o("Data2VecAudioForCTC"),Orr=o(" (Data2VecAudio model)"),Vrr=l(),nT=a("li"),Yue=a("strong"),Xrr=o("hubert"),zrr=o(" \u2014 "),Bz=a("a"),Wrr=o("HubertForCTC"),Qrr=o(" (Hubert model)"),Hrr=l(),sT=a("li"),Kue=a("strong"),Urr=o("mctct"),Jrr=o(" \u2014 "),Iz=a("a"),Yrr=o("MCTCTForCTC"),Krr=o(" (M-CTC-T model)"),Zrr=l(),lT=a("li"),Zue=a("strong"),etr=o("sew"),otr=o(" \u2014 "),Nz=a("a"),rtr=o("SEWForCTC"),ttr=o(" (SEW model)"),atr=l(),iT=a("li"),e2e=a("strong"),ntr=o("sew-d"),str=o(" \u2014 "),qz=a("a"),ltr=o("SEWDForCTC"),itr=o(" (SEW-D model)"),dtr=l(),dT=a("li"),o2e=a("strong"),ctr=o("unispeech"),ftr=o(" \u2014 "),jz=a("a"),mtr=o("UniSpeechForCTC"),gtr=o(" (UniSpeech model)"),htr=l(),cT=a("li"),r2e=a("strong"),ptr=o("unispeech-sat"),_tr=o(" \u2014 "),Dz=a("a"),utr=o("UniSpeechSatForCTC"),btr=o(" (UniSpeechSat model)"),vtr=l(),fT=a("li"),t2e=a("strong"),Ftr=o("wav2vec2"),Ttr=o(" \u2014 "),Gz=a("a"),Mtr=o("Wav2Vec2ForCTC"),Etr=o(" (Wav2Vec2 model)"),Ctr=l(),mT=a("li"),a2e=a("strong"),wtr=o("wav2vec2-conformer"),Atr=o(" \u2014 "),Oz=a("a"),ytr=o("Wav2Vec2ConformerForCTC"),Ltr=o(" (Wav2Vec2-Conformer model)"),xtr=l(),gT=a("li"),n2e=a("strong"),$tr=o("wavlm"),ktr=o(" \u2014 "),Vz=a("a"),Str=o("WavLMForCTC"),Rtr=o(" (WavLM model)"),Ptr=l(),hT=a("p"),Btr=o("The model is set in evaluation mode by default using "),s2e=a("code"),Itr=o("model.eval()"),Ntr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l2e=a("code"),qtr=o("model.train()"),jtr=l(),F(pT.$$.fragment),Oje=l(),Fd=a("h2"),_T=a("a"),i2e=a("span"),F(qL.$$.fragment),Dtr=l(),d2e=a("span"),Gtr=o("AutoModelForSpeechSeq2Seq"),Vje=l(),Xo=a("div"),F(jL.$$.fragment),Otr=l(),Td=a("p"),Vtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Xz=a("a"),Xtr=o("from_pretrained()"),ztr=o(" class method or the "),zz=a("a"),Wtr=o("from_config()"),Qtr=o(` class
method.`),Htr=l(),DL=a("p"),Utr=o("This class cannot be instantiated directly using "),c2e=a("code"),Jtr=o("__init__()"),Ytr=o(" (throws an error)."),Ktr=l(),Ft=a("div"),F(GL.$$.fragment),Ztr=l(),f2e=a("p"),ear=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),oar=l(),Md=a("p"),rar=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),tar=o("not"),aar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=a("a"),nar=o("from_pretrained()"),sar=o(" to load the model weights."),lar=l(),F(uT.$$.fragment),iar=l(),go=a("div"),F(OL.$$.fragment),dar=l(),g2e=a("p"),car=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),far=l(),Xa=a("p"),mar=o("The model class to instantiate is selected based on the "),h2e=a("code"),gar=o("model_type"),har=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),par=o("pretrained_model_name_or_path"),_ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),uar=o("pretrained_model_name_or_path"),bar=o(":"),Far=l(),VL=a("ul"),bT=a("li"),u2e=a("strong"),Tar=o("speech-encoder-decoder"),Mar=o(" \u2014 "),Qz=a("a"),Ear=o("SpeechEncoderDecoderModel"),Car=o(" (Speech Encoder decoder model)"),war=l(),vT=a("li"),b2e=a("strong"),Aar=o("speech_to_text"),yar=o(" \u2014 "),Hz=a("a"),Lar=o("Speech2TextForConditionalGeneration"),xar=o(" (Speech2Text model)"),$ar=l(),FT=a("p"),kar=o("The model is set in evaluation mode by default using "),v2e=a("code"),Sar=o("model.eval()"),Rar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F2e=a("code"),Par=o("model.train()"),Bar=l(),F(TT.$$.fragment),Xje=l(),Ed=a("h2"),MT=a("a"),T2e=a("span"),F(XL.$$.fragment),Iar=l(),M2e=a("span"),Nar=o("AutoModelForAudioXVector"),zje=l(),zo=a("div"),F(zL.$$.fragment),qar=l(),Cd=a("p"),jar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Uz=a("a"),Dar=o("from_pretrained()"),Gar=o(" class method or the "),Jz=a("a"),Oar=o("from_config()"),Var=o(` class
method.`),Xar=l(),WL=a("p"),zar=o("This class cannot be instantiated directly using "),E2e=a("code"),War=o("__init__()"),Qar=o(" (throws an error)."),Har=l(),Tt=a("div"),F(QL.$$.fragment),Uar=l(),C2e=a("p"),Jar=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Yar=l(),wd=a("p"),Kar=o(`Note:
Loading a model from its configuration file does `),w2e=a("strong"),Zar=o("not"),enr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=a("a"),onr=o("from_pretrained()"),rnr=o(" to load the model weights."),tnr=l(),F(ET.$$.fragment),anr=l(),ho=a("div"),F(HL.$$.fragment),nnr=l(),A2e=a("p"),snr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),lnr=l(),za=a("p"),inr=o("The model class to instantiate is selected based on the "),y2e=a("code"),dnr=o("model_type"),cnr=o(` property of the config object (either
passed as an argument or loaded from `),L2e=a("code"),fnr=o("pretrained_model_name_or_path"),mnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=a("code"),gnr=o("pretrained_model_name_or_path"),hnr=o(":"),pnr=l(),Zr=a("ul"),CT=a("li"),$2e=a("strong"),_nr=o("data2vec-audio"),unr=o(" \u2014 "),Kz=a("a"),bnr=o("Data2VecAudioForXVector"),vnr=o(" (Data2VecAudio model)"),Fnr=l(),wT=a("li"),k2e=a("strong"),Tnr=o("unispeech-sat"),Mnr=o(" \u2014 "),Zz=a("a"),Enr=o("UniSpeechSatForXVector"),Cnr=o(" (UniSpeechSat model)"),wnr=l(),AT=a("li"),S2e=a("strong"),Anr=o("wav2vec2"),ynr=o(" \u2014 "),eW=a("a"),Lnr=o("Wav2Vec2ForXVector"),xnr=o(" (Wav2Vec2 model)"),$nr=l(),yT=a("li"),R2e=a("strong"),knr=o("wav2vec2-conformer"),Snr=o(" \u2014 "),oW=a("a"),Rnr=o("Wav2Vec2ConformerForXVector"),Pnr=o(" (Wav2Vec2-Conformer model)"),Bnr=l(),LT=a("li"),P2e=a("strong"),Inr=o("wavlm"),Nnr=o(" \u2014 "),rW=a("a"),qnr=o("WavLMForXVector"),jnr=o(" (WavLM model)"),Dnr=l(),xT=a("p"),Gnr=o("The model is set in evaluation mode by default using "),B2e=a("code"),Onr=o("model.eval()"),Vnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=a("code"),Xnr=o("model.train()"),znr=l(),F($T.$$.fragment),Wje=l(),Ad=a("h2"),kT=a("a"),N2e=a("span"),F(UL.$$.fragment),Wnr=l(),q2e=a("span"),Qnr=o("AutoModelForMaskedImageModeling"),Qje=l(),Wo=a("div"),F(JL.$$.fragment),Hnr=l(),yd=a("p"),Unr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),tW=a("a"),Jnr=o("from_pretrained()"),Ynr=o(" class method or the "),aW=a("a"),Knr=o("from_config()"),Znr=o(` class
method.`),esr=l(),YL=a("p"),osr=o("This class cannot be instantiated directly using "),j2e=a("code"),rsr=o("__init__()"),tsr=o(" (throws an error)."),asr=l(),Mt=a("div"),F(KL.$$.fragment),nsr=l(),D2e=a("p"),ssr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),lsr=l(),Ld=a("p"),isr=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),dsr=o("not"),csr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),fsr=o("from_pretrained()"),msr=o(" to load the model weights."),gsr=l(),F(ST.$$.fragment),hsr=l(),po=a("div"),F(ZL.$$.fragment),psr=l(),O2e=a("p"),_sr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),usr=l(),Wa=a("p"),bsr=o("The model class to instantiate is selected based on the "),V2e=a("code"),vsr=o("model_type"),Fsr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),Tsr=o("pretrained_model_name_or_path"),Msr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),Esr=o("pretrained_model_name_or_path"),Csr=o(":"),wsr=l(),xd=a("ul"),RT=a("li"),W2e=a("strong"),Asr=o("deit"),ysr=o(" \u2014 "),sW=a("a"),Lsr=o("DeiTForMaskedImageModeling"),xsr=o(" (DeiT model)"),$sr=l(),PT=a("li"),Q2e=a("strong"),ksr=o("swin"),Ssr=o(" \u2014 "),lW=a("a"),Rsr=o("SwinForMaskedImageModeling"),Psr=o(" (Swin Transformer model)"),Bsr=l(),BT=a("li"),H2e=a("strong"),Isr=o("vit"),Nsr=o(" \u2014 "),iW=a("a"),qsr=o("ViTForMaskedImageModeling"),jsr=o(" (ViT model)"),Dsr=l(),IT=a("p"),Gsr=o("The model is set in evaluation mode by default using "),U2e=a("code"),Osr=o("model.eval()"),Vsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J2e=a("code"),Xsr=o("model.train()"),zsr=l(),F(NT.$$.fragment),Hje=l(),$d=a("h2"),qT=a("a"),Y2e=a("span"),F(e8.$$.fragment),Wsr=l(),K2e=a("span"),Qsr=o("AutoModelForObjectDetection"),Uje=l(),Qo=a("div"),F(o8.$$.fragment),Hsr=l(),kd=a("p"),Usr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),dW=a("a"),Jsr=o("from_pretrained()"),Ysr=o(" class method or the "),cW=a("a"),Ksr=o("from_config()"),Zsr=o(` class
method.`),elr=l(),r8=a("p"),olr=o("This class cannot be instantiated directly using "),Z2e=a("code"),rlr=o("__init__()"),tlr=o(" (throws an error)."),alr=l(),Et=a("div"),F(t8.$$.fragment),nlr=l(),e1e=a("p"),slr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),llr=l(),Sd=a("p"),ilr=o(`Note:
Loading a model from its configuration file does `),o1e=a("strong"),dlr=o("not"),clr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),flr=o("from_pretrained()"),mlr=o(" to load the model weights."),glr=l(),F(jT.$$.fragment),hlr=l(),_o=a("div"),F(a8.$$.fragment),plr=l(),r1e=a("p"),_lr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ulr=l(),Qa=a("p"),blr=o("The model class to instantiate is selected based on the "),t1e=a("code"),vlr=o("model_type"),Flr=o(` property of the config object (either
passed as an argument or loaded from `),a1e=a("code"),Tlr=o("pretrained_model_name_or_path"),Mlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),Elr=o("pretrained_model_name_or_path"),Clr=o(":"),wlr=l(),n8=a("ul"),DT=a("li"),s1e=a("strong"),Alr=o("detr"),ylr=o(" \u2014 "),mW=a("a"),Llr=o("DetrForObjectDetection"),xlr=o(" (DETR model)"),$lr=l(),GT=a("li"),l1e=a("strong"),klr=o("yolos"),Slr=o(" \u2014 "),gW=a("a"),Rlr=o("YolosForObjectDetection"),Plr=o(" (YOLOS model)"),Blr=l(),OT=a("p"),Ilr=o("The model is set in evaluation mode by default using "),i1e=a("code"),Nlr=o("model.eval()"),qlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d1e=a("code"),jlr=o("model.train()"),Dlr=l(),F(VT.$$.fragment),Jje=l(),Rd=a("h2"),XT=a("a"),c1e=a("span"),F(s8.$$.fragment),Glr=l(),f1e=a("span"),Olr=o("AutoModelForImageSegmentation"),Yje=l(),Ho=a("div"),F(l8.$$.fragment),Vlr=l(),Pd=a("p"),Xlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),hW=a("a"),zlr=o("from_pretrained()"),Wlr=o(" class method or the "),pW=a("a"),Qlr=o("from_config()"),Hlr=o(` class
method.`),Ulr=l(),i8=a("p"),Jlr=o("This class cannot be instantiated directly using "),m1e=a("code"),Ylr=o("__init__()"),Klr=o(" (throws an error)."),Zlr=l(),Ct=a("div"),F(d8.$$.fragment),eir=l(),g1e=a("p"),oir=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),rir=l(),Bd=a("p"),tir=o(`Note:
Loading a model from its configuration file does `),h1e=a("strong"),air=o("not"),nir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),sir=o("from_pretrained()"),lir=o(" to load the model weights."),iir=l(),F(zT.$$.fragment),dir=l(),uo=a("div"),F(c8.$$.fragment),cir=l(),p1e=a("p"),fir=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),mir=l(),Ha=a("p"),gir=o("The model class to instantiate is selected based on the "),_1e=a("code"),hir=o("model_type"),pir=o(` property of the config object (either
passed as an argument or loaded from `),u1e=a("code"),_ir=o("pretrained_model_name_or_path"),uir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=a("code"),bir=o("pretrained_model_name_or_path"),vir=o(":"),Fir=l(),v1e=a("ul"),WT=a("li"),F1e=a("strong"),Tir=o("detr"),Mir=o(" \u2014 "),uW=a("a"),Eir=o("DetrForSegmentation"),Cir=o(" (DETR model)"),wir=l(),QT=a("p"),Air=o("The model is set in evaluation mode by default using "),T1e=a("code"),yir=o("model.eval()"),Lir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M1e=a("code"),xir=o("model.train()"),$ir=l(),F(HT.$$.fragment),Kje=l(),Id=a("h2"),UT=a("a"),E1e=a("span"),F(f8.$$.fragment),kir=l(),C1e=a("span"),Sir=o("AutoModelForSemanticSegmentation"),Zje=l(),Uo=a("div"),F(m8.$$.fragment),Rir=l(),Nd=a("p"),Pir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),bW=a("a"),Bir=o("from_pretrained()"),Iir=o(" class method or the "),vW=a("a"),Nir=o("from_config()"),qir=o(` class
method.`),jir=l(),g8=a("p"),Dir=o("This class cannot be instantiated directly using "),w1e=a("code"),Gir=o("__init__()"),Oir=o(" (throws an error)."),Vir=l(),wt=a("div"),F(h8.$$.fragment),Xir=l(),A1e=a("p"),zir=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Wir=l(),qd=a("p"),Qir=o(`Note:
Loading a model from its configuration file does `),y1e=a("strong"),Hir=o("not"),Uir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),Jir=o("from_pretrained()"),Yir=o(" to load the model weights."),Kir=l(),F(JT.$$.fragment),Zir=l(),bo=a("div"),F(p8.$$.fragment),edr=l(),L1e=a("p"),odr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rdr=l(),Ua=a("p"),tdr=o("The model class to instantiate is selected based on the "),x1e=a("code"),adr=o("model_type"),ndr=o(` property of the config object (either
passed as an argument or loaded from `),$1e=a("code"),sdr=o("pretrained_model_name_or_path"),ldr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k1e=a("code"),idr=o("pretrained_model_name_or_path"),ddr=o(":"),cdr=l(),Ja=a("ul"),YT=a("li"),S1e=a("strong"),fdr=o("beit"),mdr=o(" \u2014 "),TW=a("a"),gdr=o("BeitForSemanticSegmentation"),hdr=o(" (BEiT model)"),pdr=l(),KT=a("li"),R1e=a("strong"),_dr=o("data2vec-vision"),udr=o(" \u2014 "),MW=a("a"),bdr=o("Data2VecVisionForSemanticSegmentation"),vdr=o(" (Data2VecVision model)"),Fdr=l(),ZT=a("li"),P1e=a("strong"),Tdr=o("dpt"),Mdr=o(" \u2014 "),EW=a("a"),Edr=o("DPTForSemanticSegmentation"),Cdr=o(" (DPT model)"),wdr=l(),e7=a("li"),B1e=a("strong"),Adr=o("segformer"),ydr=o(" \u2014 "),CW=a("a"),Ldr=o("SegformerForSemanticSegmentation"),xdr=o(" (SegFormer model)"),$dr=l(),o7=a("p"),kdr=o("The model is set in evaluation mode by default using "),I1e=a("code"),Sdr=o("model.eval()"),Rdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N1e=a("code"),Pdr=o("model.train()"),Bdr=l(),F(r7.$$.fragment),eDe=l(),jd=a("h2"),t7=a("a"),q1e=a("span"),F(_8.$$.fragment),Idr=l(),j1e=a("span"),Ndr=o("AutoModelForInstanceSegmentation"),oDe=l(),Jo=a("div"),F(u8.$$.fragment),qdr=l(),Dd=a("p"),jdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),wW=a("a"),Ddr=o("from_pretrained()"),Gdr=o(" class method or the "),AW=a("a"),Odr=o("from_config()"),Vdr=o(` class
method.`),Xdr=l(),b8=a("p"),zdr=o("This class cannot be instantiated directly using "),D1e=a("code"),Wdr=o("__init__()"),Qdr=o(" (throws an error)."),Hdr=l(),At=a("div"),F(v8.$$.fragment),Udr=l(),G1e=a("p"),Jdr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ydr=l(),Gd=a("p"),Kdr=o(`Note:
Loading a model from its configuration file does `),O1e=a("strong"),Zdr=o("not"),ecr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),ocr=o("from_pretrained()"),rcr=o(" to load the model weights."),tcr=l(),F(a7.$$.fragment),acr=l(),vo=a("div"),F(F8.$$.fragment),ncr=l(),V1e=a("p"),scr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),lcr=l(),Ya=a("p"),icr=o("The model class to instantiate is selected based on the "),X1e=a("code"),dcr=o("model_type"),ccr=o(` property of the config object (either
passed as an argument or loaded from `),z1e=a("code"),fcr=o("pretrained_model_name_or_path"),mcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=a("code"),gcr=o("pretrained_model_name_or_path"),hcr=o(":"),pcr=l(),Q1e=a("ul"),n7=a("li"),H1e=a("strong"),_cr=o("maskformer"),ucr=o(" \u2014 "),LW=a("a"),bcr=o("MaskFormerForInstanceSegmentation"),vcr=o(" (MaskFormer model)"),Fcr=l(),s7=a("p"),Tcr=o("The model is set in evaluation mode by default using "),U1e=a("code"),Mcr=o("model.eval()"),Ecr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J1e=a("code"),Ccr=o("model.train()"),wcr=l(),F(l7.$$.fragment),rDe=l(),Od=a("h2"),i7=a("a"),Y1e=a("span"),F(T8.$$.fragment),Acr=l(),K1e=a("span"),ycr=o("TFAutoModel"),tDe=l(),Yo=a("div"),F(M8.$$.fragment),Lcr=l(),Vd=a("p"),xcr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xW=a("a"),$cr=o("from_pretrained()"),kcr=o(" class method or the "),$W=a("a"),Scr=o("from_config()"),Rcr=o(` class
method.`),Pcr=l(),E8=a("p"),Bcr=o("This class cannot be instantiated directly using "),Z1e=a("code"),Icr=o("__init__()"),Ncr=o(" (throws an error)."),qcr=l(),yt=a("div"),F(C8.$$.fragment),jcr=l(),ebe=a("p"),Dcr=o("Instantiates one of the base model classes of the library from a configuration."),Gcr=l(),Xd=a("p"),Ocr=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),Vcr=o("not"),Xcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=a("a"),zcr=o("from_pretrained()"),Wcr=o(" to load the model weights."),Qcr=l(),F(d7.$$.fragment),Hcr=l(),wr=a("div"),F(w8.$$.fragment),Ucr=l(),rbe=a("p"),Jcr=o("Instantiate one of the base model classes of the library from a pretrained model."),Ycr=l(),Ka=a("p"),Kcr=o("The model class to instantiate is selected based on the "),tbe=a("code"),Zcr=o("model_type"),efr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),ofr=o("pretrained_model_name_or_path"),rfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),tfr=o("pretrained_model_name_or_path"),afr=o(":"),nfr=l(),q=a("ul"),c7=a("li"),sbe=a("strong"),sfr=o("albert"),lfr=o(" \u2014 "),SW=a("a"),ifr=o("TFAlbertModel"),dfr=o(" (ALBERT model)"),cfr=l(),f7=a("li"),lbe=a("strong"),ffr=o("bart"),mfr=o(" \u2014 "),RW=a("a"),gfr=o("TFBartModel"),hfr=o(" (BART model)"),pfr=l(),m7=a("li"),ibe=a("strong"),_fr=o("bert"),ufr=o(" \u2014 "),PW=a("a"),bfr=o("TFBertModel"),vfr=o(" (BERT model)"),Ffr=l(),g7=a("li"),dbe=a("strong"),Tfr=o("blenderbot"),Mfr=o(" \u2014 "),BW=a("a"),Efr=o("TFBlenderbotModel"),Cfr=o(" (Blenderbot model)"),wfr=l(),h7=a("li"),cbe=a("strong"),Afr=o("blenderbot-small"),yfr=o(" \u2014 "),IW=a("a"),Lfr=o("TFBlenderbotSmallModel"),xfr=o(" (BlenderbotSmall model)"),$fr=l(),p7=a("li"),fbe=a("strong"),kfr=o("camembert"),Sfr=o(" \u2014 "),NW=a("a"),Rfr=o("TFCamembertModel"),Pfr=o(" (CamemBERT model)"),Bfr=l(),_7=a("li"),mbe=a("strong"),Ifr=o("clip"),Nfr=o(" \u2014 "),qW=a("a"),qfr=o("TFCLIPModel"),jfr=o(" (CLIP model)"),Dfr=l(),u7=a("li"),gbe=a("strong"),Gfr=o("convbert"),Ofr=o(" \u2014 "),jW=a("a"),Vfr=o("TFConvBertModel"),Xfr=o(" (ConvBERT model)"),zfr=l(),b7=a("li"),hbe=a("strong"),Wfr=o("convnext"),Qfr=o(" \u2014 "),DW=a("a"),Hfr=o("TFConvNextModel"),Ufr=o(" (ConvNeXT model)"),Jfr=l(),v7=a("li"),pbe=a("strong"),Yfr=o("ctrl"),Kfr=o(" \u2014 "),GW=a("a"),Zfr=o("TFCTRLModel"),emr=o(" (CTRL model)"),omr=l(),F7=a("li"),_be=a("strong"),rmr=o("data2vec-vision"),tmr=o(" \u2014 "),OW=a("a"),amr=o("TFData2VecVisionModel"),nmr=o(" (Data2VecVision model)"),smr=l(),T7=a("li"),ube=a("strong"),lmr=o("deberta"),imr=o(" \u2014 "),VW=a("a"),dmr=o("TFDebertaModel"),cmr=o(" (DeBERTa model)"),fmr=l(),M7=a("li"),bbe=a("strong"),mmr=o("deberta-v2"),gmr=o(" \u2014 "),XW=a("a"),hmr=o("TFDebertaV2Model"),pmr=o(" (DeBERTa-v2 model)"),_mr=l(),E7=a("li"),vbe=a("strong"),umr=o("distilbert"),bmr=o(" \u2014 "),zW=a("a"),vmr=o("TFDistilBertModel"),Fmr=o(" (DistilBERT model)"),Tmr=l(),C7=a("li"),Fbe=a("strong"),Mmr=o("dpr"),Emr=o(" \u2014 "),WW=a("a"),Cmr=o("TFDPRQuestionEncoder"),wmr=o(" (DPR model)"),Amr=l(),w7=a("li"),Tbe=a("strong"),ymr=o("electra"),Lmr=o(" \u2014 "),QW=a("a"),xmr=o("TFElectraModel"),$mr=o(" (ELECTRA model)"),kmr=l(),A7=a("li"),Mbe=a("strong"),Smr=o("flaubert"),Rmr=o(" \u2014 "),HW=a("a"),Pmr=o("TFFlaubertModel"),Bmr=o(" (FlauBERT model)"),Imr=l(),Ns=a("li"),Ebe=a("strong"),Nmr=o("funnel"),qmr=o(" \u2014 "),UW=a("a"),jmr=o("TFFunnelModel"),Dmr=o(" or "),JW=a("a"),Gmr=o("TFFunnelBaseModel"),Omr=o(" (Funnel Transformer model)"),Vmr=l(),y7=a("li"),Cbe=a("strong"),Xmr=o("gpt2"),zmr=o(" \u2014 "),YW=a("a"),Wmr=o("TFGPT2Model"),Qmr=o(" (OpenAI GPT-2 model)"),Hmr=l(),L7=a("li"),wbe=a("strong"),Umr=o("gptj"),Jmr=o(" \u2014 "),KW=a("a"),Ymr=o("TFGPTJModel"),Kmr=o(" (GPT-J model)"),Zmr=l(),x7=a("li"),Abe=a("strong"),egr=o("hubert"),ogr=o(" \u2014 "),ZW=a("a"),rgr=o("TFHubertModel"),tgr=o(" (Hubert model)"),agr=l(),$7=a("li"),ybe=a("strong"),ngr=o("layoutlm"),sgr=o(" \u2014 "),eQ=a("a"),lgr=o("TFLayoutLMModel"),igr=o(" (LayoutLM model)"),dgr=l(),k7=a("li"),Lbe=a("strong"),cgr=o("led"),fgr=o(" \u2014 "),oQ=a("a"),mgr=o("TFLEDModel"),ggr=o(" (LED model)"),hgr=l(),S7=a("li"),xbe=a("strong"),pgr=o("longformer"),_gr=o(" \u2014 "),rQ=a("a"),ugr=o("TFLongformerModel"),bgr=o(" (Longformer model)"),vgr=l(),R7=a("li"),$be=a("strong"),Fgr=o("lxmert"),Tgr=o(" \u2014 "),tQ=a("a"),Mgr=o("TFLxmertModel"),Egr=o(" (LXMERT model)"),Cgr=l(),P7=a("li"),kbe=a("strong"),wgr=o("marian"),Agr=o(" \u2014 "),aQ=a("a"),ygr=o("TFMarianModel"),Lgr=o(" (Marian model)"),xgr=l(),B7=a("li"),Sbe=a("strong"),$gr=o("mbart"),kgr=o(" \u2014 "),nQ=a("a"),Sgr=o("TFMBartModel"),Rgr=o(" (mBART model)"),Pgr=l(),I7=a("li"),Rbe=a("strong"),Bgr=o("mobilebert"),Igr=o(" \u2014 "),sQ=a("a"),Ngr=o("TFMobileBertModel"),qgr=o(" (MobileBERT model)"),jgr=l(),N7=a("li"),Pbe=a("strong"),Dgr=o("mpnet"),Ggr=o(" \u2014 "),lQ=a("a"),Ogr=o("TFMPNetModel"),Vgr=o(" (MPNet model)"),Xgr=l(),q7=a("li"),Bbe=a("strong"),zgr=o("mt5"),Wgr=o(" \u2014 "),iQ=a("a"),Qgr=o("TFMT5Model"),Hgr=o(" (MT5 model)"),Ugr=l(),j7=a("li"),Ibe=a("strong"),Jgr=o("openai-gpt"),Ygr=o(" \u2014 "),dQ=a("a"),Kgr=o("TFOpenAIGPTModel"),Zgr=o(" (OpenAI GPT model)"),ehr=l(),D7=a("li"),Nbe=a("strong"),ohr=o("opt"),rhr=o(" \u2014 "),cQ=a("a"),thr=o("TFOPTModel"),ahr=o(" (OPT model)"),nhr=l(),G7=a("li"),qbe=a("strong"),shr=o("pegasus"),lhr=o(" \u2014 "),fQ=a("a"),ihr=o("TFPegasusModel"),dhr=o(" (Pegasus model)"),chr=l(),O7=a("li"),jbe=a("strong"),fhr=o("rembert"),mhr=o(" \u2014 "),mQ=a("a"),ghr=o("TFRemBertModel"),hhr=o(" (RemBERT model)"),phr=l(),V7=a("li"),Dbe=a("strong"),_hr=o("roberta"),uhr=o(" \u2014 "),gQ=a("a"),bhr=o("TFRobertaModel"),vhr=o(" (RoBERTa model)"),Fhr=l(),X7=a("li"),Gbe=a("strong"),Thr=o("roformer"),Mhr=o(" \u2014 "),hQ=a("a"),Ehr=o("TFRoFormerModel"),Chr=o(" (RoFormer model)"),whr=l(),z7=a("li"),Obe=a("strong"),Ahr=o("speech_to_text"),yhr=o(" \u2014 "),pQ=a("a"),Lhr=o("TFSpeech2TextModel"),xhr=o(" (Speech2Text model)"),$hr=l(),W7=a("li"),Vbe=a("strong"),khr=o("swin"),Shr=o(" \u2014 "),_Q=a("a"),Rhr=o("TFSwinModel"),Phr=o(" (Swin Transformer model)"),Bhr=l(),Q7=a("li"),Xbe=a("strong"),Ihr=o("t5"),Nhr=o(" \u2014 "),uQ=a("a"),qhr=o("TFT5Model"),jhr=o(" (T5 model)"),Dhr=l(),H7=a("li"),zbe=a("strong"),Ghr=o("tapas"),Ohr=o(" \u2014 "),bQ=a("a"),Vhr=o("TFTapasModel"),Xhr=o(" (TAPAS model)"),zhr=l(),U7=a("li"),Wbe=a("strong"),Whr=o("transfo-xl"),Qhr=o(" \u2014 "),vQ=a("a"),Hhr=o("TFTransfoXLModel"),Uhr=o(" (Transformer-XL model)"),Jhr=l(),J7=a("li"),Qbe=a("strong"),Yhr=o("vit"),Khr=o(" \u2014 "),FQ=a("a"),Zhr=o("TFViTModel"),epr=o(" (ViT model)"),opr=l(),Y7=a("li"),Hbe=a("strong"),rpr=o("vit_mae"),tpr=o(" \u2014 "),TQ=a("a"),apr=o("TFViTMAEModel"),npr=o(" (ViTMAE model)"),spr=l(),K7=a("li"),Ube=a("strong"),lpr=o("wav2vec2"),ipr=o(" \u2014 "),MQ=a("a"),dpr=o("TFWav2Vec2Model"),cpr=o(" (Wav2Vec2 model)"),fpr=l(),Z7=a("li"),Jbe=a("strong"),mpr=o("xlm"),gpr=o(" \u2014 "),EQ=a("a"),hpr=o("TFXLMModel"),ppr=o(" (XLM model)"),_pr=l(),eM=a("li"),Ybe=a("strong"),upr=o("xlm-roberta"),bpr=o(" \u2014 "),CQ=a("a"),vpr=o("TFXLMRobertaModel"),Fpr=o(" (XLM-RoBERTa model)"),Tpr=l(),oM=a("li"),Kbe=a("strong"),Mpr=o("xlnet"),Epr=o(" \u2014 "),wQ=a("a"),Cpr=o("TFXLNetModel"),wpr=o(" (XLNet model)"),Apr=l(),F(rM.$$.fragment),aDe=l(),zd=a("h2"),tM=a("a"),Zbe=a("span"),F(A8.$$.fragment),ypr=l(),eve=a("span"),Lpr=o("TFAutoModelForPreTraining"),nDe=l(),Ko=a("div"),F(y8.$$.fragment),xpr=l(),Wd=a("p"),$pr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),AQ=a("a"),kpr=o("from_pretrained()"),Spr=o(" class method or the "),yQ=a("a"),Rpr=o("from_config()"),Ppr=o(` class
method.`),Bpr=l(),L8=a("p"),Ipr=o("This class cannot be instantiated directly using "),ove=a("code"),Npr=o("__init__()"),qpr=o(" (throws an error)."),jpr=l(),Lt=a("div"),F(x8.$$.fragment),Dpr=l(),rve=a("p"),Gpr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Opr=l(),Qd=a("p"),Vpr=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),Xpr=o("not"),zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=a("a"),Wpr=o("from_pretrained()"),Qpr=o(" to load the model weights."),Hpr=l(),F(aM.$$.fragment),Upr=l(),Ar=a("div"),F($8.$$.fragment),Jpr=l(),ave=a("p"),Ypr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kpr=l(),Za=a("p"),Zpr=o("The model class to instantiate is selected based on the "),nve=a("code"),e_r=o("model_type"),o_r=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),r_r=o("pretrained_model_name_or_path"),t_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),a_r=o("pretrained_model_name_or_path"),n_r=o(":"),s_r=l(),se=a("ul"),nM=a("li"),ive=a("strong"),l_r=o("albert"),i_r=o(" \u2014 "),xQ=a("a"),d_r=o("TFAlbertForPreTraining"),c_r=o(" (ALBERT model)"),f_r=l(),sM=a("li"),dve=a("strong"),m_r=o("bart"),g_r=o(" \u2014 "),$Q=a("a"),h_r=o("TFBartForConditionalGeneration"),p_r=o(" (BART model)"),__r=l(),lM=a("li"),cve=a("strong"),u_r=o("bert"),b_r=o(" \u2014 "),kQ=a("a"),v_r=o("TFBertForPreTraining"),F_r=o(" (BERT model)"),T_r=l(),iM=a("li"),fve=a("strong"),M_r=o("camembert"),E_r=o(" \u2014 "),SQ=a("a"),C_r=o("TFCamembertForMaskedLM"),w_r=o(" (CamemBERT model)"),A_r=l(),dM=a("li"),mve=a("strong"),y_r=o("ctrl"),L_r=o(" \u2014 "),RQ=a("a"),x_r=o("TFCTRLLMHeadModel"),$_r=o(" (CTRL model)"),k_r=l(),cM=a("li"),gve=a("strong"),S_r=o("distilbert"),R_r=o(" \u2014 "),PQ=a("a"),P_r=o("TFDistilBertForMaskedLM"),B_r=o(" (DistilBERT model)"),I_r=l(),fM=a("li"),hve=a("strong"),N_r=o("electra"),q_r=o(" \u2014 "),BQ=a("a"),j_r=o("TFElectraForPreTraining"),D_r=o(" (ELECTRA model)"),G_r=l(),mM=a("li"),pve=a("strong"),O_r=o("flaubert"),V_r=o(" \u2014 "),IQ=a("a"),X_r=o("TFFlaubertWithLMHeadModel"),z_r=o(" (FlauBERT model)"),W_r=l(),gM=a("li"),_ve=a("strong"),Q_r=o("funnel"),H_r=o(" \u2014 "),NQ=a("a"),U_r=o("TFFunnelForPreTraining"),J_r=o(" (Funnel Transformer model)"),Y_r=l(),hM=a("li"),uve=a("strong"),K_r=o("gpt2"),Z_r=o(" \u2014 "),qQ=a("a"),eur=o("TFGPT2LMHeadModel"),our=o(" (OpenAI GPT-2 model)"),rur=l(),pM=a("li"),bve=a("strong"),tur=o("layoutlm"),aur=o(" \u2014 "),jQ=a("a"),nur=o("TFLayoutLMForMaskedLM"),sur=o(" (LayoutLM model)"),lur=l(),_M=a("li"),vve=a("strong"),iur=o("lxmert"),dur=o(" \u2014 "),DQ=a("a"),cur=o("TFLxmertForPreTraining"),fur=o(" (LXMERT model)"),mur=l(),uM=a("li"),Fve=a("strong"),gur=o("mobilebert"),hur=o(" \u2014 "),GQ=a("a"),pur=o("TFMobileBertForPreTraining"),_ur=o(" (MobileBERT model)"),uur=l(),bM=a("li"),Tve=a("strong"),bur=o("mpnet"),vur=o(" \u2014 "),OQ=a("a"),Fur=o("TFMPNetForMaskedLM"),Tur=o(" (MPNet model)"),Mur=l(),vM=a("li"),Mve=a("strong"),Eur=o("openai-gpt"),Cur=o(" \u2014 "),VQ=a("a"),wur=o("TFOpenAIGPTLMHeadModel"),Aur=o(" (OpenAI GPT model)"),yur=l(),FM=a("li"),Eve=a("strong"),Lur=o("roberta"),xur=o(" \u2014 "),XQ=a("a"),$ur=o("TFRobertaForMaskedLM"),kur=o(" (RoBERTa model)"),Sur=l(),TM=a("li"),Cve=a("strong"),Rur=o("t5"),Pur=o(" \u2014 "),zQ=a("a"),Bur=o("TFT5ForConditionalGeneration"),Iur=o(" (T5 model)"),Nur=l(),MM=a("li"),wve=a("strong"),qur=o("tapas"),jur=o(" \u2014 "),WQ=a("a"),Dur=o("TFTapasForMaskedLM"),Gur=o(" (TAPAS model)"),Our=l(),EM=a("li"),Ave=a("strong"),Vur=o("transfo-xl"),Xur=o(" \u2014 "),QQ=a("a"),zur=o("TFTransfoXLLMHeadModel"),Wur=o(" (Transformer-XL model)"),Qur=l(),CM=a("li"),yve=a("strong"),Hur=o("vit_mae"),Uur=o(" \u2014 "),HQ=a("a"),Jur=o("TFViTMAEForPreTraining"),Yur=o(" (ViTMAE model)"),Kur=l(),wM=a("li"),Lve=a("strong"),Zur=o("xlm"),e2r=o(" \u2014 "),UQ=a("a"),o2r=o("TFXLMWithLMHeadModel"),r2r=o(" (XLM model)"),t2r=l(),AM=a("li"),xve=a("strong"),a2r=o("xlm-roberta"),n2r=o(" \u2014 "),JQ=a("a"),s2r=o("TFXLMRobertaForMaskedLM"),l2r=o(" (XLM-RoBERTa model)"),i2r=l(),yM=a("li"),$ve=a("strong"),d2r=o("xlnet"),c2r=o(" \u2014 "),YQ=a("a"),f2r=o("TFXLNetLMHeadModel"),m2r=o(" (XLNet model)"),g2r=l(),F(LM.$$.fragment),sDe=l(),Hd=a("h2"),xM=a("a"),kve=a("span"),F(k8.$$.fragment),h2r=l(),Sve=a("span"),p2r=o("TFAutoModelForCausalLM"),lDe=l(),Zo=a("div"),F(S8.$$.fragment),_2r=l(),Ud=a("p"),u2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KQ=a("a"),b2r=o("from_pretrained()"),v2r=o(" class method or the "),ZQ=a("a"),F2r=o("from_config()"),T2r=o(` class
method.`),M2r=l(),R8=a("p"),E2r=o("This class cannot be instantiated directly using "),Rve=a("code"),C2r=o("__init__()"),w2r=o(" (throws an error)."),A2r=l(),xt=a("div"),F(P8.$$.fragment),y2r=l(),Pve=a("p"),L2r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),x2r=l(),Jd=a("p"),$2r=o(`Note:
Loading a model from its configuration file does `),Bve=a("strong"),k2r=o("not"),S2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),R2r=o("from_pretrained()"),P2r=o(" to load the model weights."),B2r=l(),F($M.$$.fragment),I2r=l(),yr=a("div"),F(B8.$$.fragment),N2r=l(),Ive=a("p"),q2r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),j2r=l(),en=a("p"),D2r=o("The model class to instantiate is selected based on the "),Nve=a("code"),G2r=o("model_type"),O2r=o(` property of the config object (either
passed as an argument or loaded from `),qve=a("code"),V2r=o("pretrained_model_name_or_path"),X2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=a("code"),z2r=o("pretrained_model_name_or_path"),W2r=o(":"),Q2r=l(),Me=a("ul"),kM=a("li"),Dve=a("strong"),H2r=o("bert"),U2r=o(" \u2014 "),oH=a("a"),J2r=o("TFBertLMHeadModel"),Y2r=o(" (BERT model)"),K2r=l(),SM=a("li"),Gve=a("strong"),Z2r=o("camembert"),e1r=o(" \u2014 "),rH=a("a"),o1r=o("TFCamembertForCausalLM"),r1r=o(" (CamemBERT model)"),t1r=l(),RM=a("li"),Ove=a("strong"),a1r=o("ctrl"),n1r=o(" \u2014 "),tH=a("a"),s1r=o("TFCTRLLMHeadModel"),l1r=o(" (CTRL model)"),i1r=l(),PM=a("li"),Vve=a("strong"),d1r=o("gpt2"),c1r=o(" \u2014 "),aH=a("a"),f1r=o("TFGPT2LMHeadModel"),m1r=o(" (OpenAI GPT-2 model)"),g1r=l(),BM=a("li"),Xve=a("strong"),h1r=o("gptj"),p1r=o(" \u2014 "),nH=a("a"),_1r=o("TFGPTJForCausalLM"),u1r=o(" (GPT-J model)"),b1r=l(),IM=a("li"),zve=a("strong"),v1r=o("openai-gpt"),F1r=o(" \u2014 "),sH=a("a"),T1r=o("TFOpenAIGPTLMHeadModel"),M1r=o(" (OpenAI GPT model)"),E1r=l(),NM=a("li"),Wve=a("strong"),C1r=o("opt"),w1r=o(" \u2014 "),lH=a("a"),A1r=o("TFOPTForCausalLM"),y1r=o(" (OPT model)"),L1r=l(),qM=a("li"),Qve=a("strong"),x1r=o("rembert"),$1r=o(" \u2014 "),iH=a("a"),k1r=o("TFRemBertForCausalLM"),S1r=o(" (RemBERT model)"),R1r=l(),jM=a("li"),Hve=a("strong"),P1r=o("roberta"),B1r=o(" \u2014 "),dH=a("a"),I1r=o("TFRobertaForCausalLM"),N1r=o(" (RoBERTa model)"),q1r=l(),DM=a("li"),Uve=a("strong"),j1r=o("roformer"),D1r=o(" \u2014 "),cH=a("a"),G1r=o("TFRoFormerForCausalLM"),O1r=o(" (RoFormer model)"),V1r=l(),GM=a("li"),Jve=a("strong"),X1r=o("transfo-xl"),z1r=o(" \u2014 "),fH=a("a"),W1r=o("TFTransfoXLLMHeadModel"),Q1r=o(" (Transformer-XL model)"),H1r=l(),OM=a("li"),Yve=a("strong"),U1r=o("xlm"),J1r=o(" \u2014 "),mH=a("a"),Y1r=o("TFXLMWithLMHeadModel"),K1r=o(" (XLM model)"),Z1r=l(),VM=a("li"),Kve=a("strong"),ebr=o("xlnet"),obr=o(" \u2014 "),gH=a("a"),rbr=o("TFXLNetLMHeadModel"),tbr=o(" (XLNet model)"),abr=l(),F(XM.$$.fragment),iDe=l(),Yd=a("h2"),zM=a("a"),Zve=a("span"),F(I8.$$.fragment),nbr=l(),eFe=a("span"),sbr=o("TFAutoModelForImageClassification"),dDe=l(),er=a("div"),F(N8.$$.fragment),lbr=l(),Kd=a("p"),ibr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hH=a("a"),dbr=o("from_pretrained()"),cbr=o(" class method or the "),pH=a("a"),fbr=o("from_config()"),mbr=o(` class
method.`),gbr=l(),q8=a("p"),hbr=o("This class cannot be instantiated directly using "),oFe=a("code"),pbr=o("__init__()"),_br=o(" (throws an error)."),ubr=l(),$t=a("div"),F(j8.$$.fragment),bbr=l(),rFe=a("p"),vbr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Fbr=l(),Zd=a("p"),Tbr=o(`Note:
Loading a model from its configuration file does `),tFe=a("strong"),Mbr=o("not"),Ebr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),Cbr=o("from_pretrained()"),wbr=o(" to load the model weights."),Abr=l(),F(WM.$$.fragment),ybr=l(),Lr=a("div"),F(D8.$$.fragment),Lbr=l(),aFe=a("p"),xbr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$br=l(),on=a("p"),kbr=o("The model class to instantiate is selected based on the "),nFe=a("code"),Sbr=o("model_type"),Rbr=o(` property of the config object (either
passed as an argument or loaded from `),sFe=a("code"),Pbr=o("pretrained_model_name_or_path"),Bbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=a("code"),Ibr=o("pretrained_model_name_or_path"),Nbr=o(":"),qbr=l(),rn=a("ul"),QM=a("li"),iFe=a("strong"),jbr=o("convnext"),Dbr=o(" \u2014 "),uH=a("a"),Gbr=o("TFConvNextForImageClassification"),Obr=o(" (ConvNeXT model)"),Vbr=l(),HM=a("li"),dFe=a("strong"),Xbr=o("data2vec-vision"),zbr=o(" \u2014 "),bH=a("a"),Wbr=o("TFData2VecVisionForImageClassification"),Qbr=o(" (Data2VecVision model)"),Hbr=l(),UM=a("li"),cFe=a("strong"),Ubr=o("swin"),Jbr=o(" \u2014 "),vH=a("a"),Ybr=o("TFSwinForImageClassification"),Kbr=o(" (Swin Transformer model)"),Zbr=l(),JM=a("li"),fFe=a("strong"),evr=o("vit"),ovr=o(" \u2014 "),FH=a("a"),rvr=o("TFViTForImageClassification"),tvr=o(" (ViT model)"),avr=l(),F(YM.$$.fragment),cDe=l(),ec=a("h2"),KM=a("a"),mFe=a("span"),F(G8.$$.fragment),nvr=l(),gFe=a("span"),svr=o("TFAutoModelForMaskedLM"),fDe=l(),or=a("div"),F(O8.$$.fragment),lvr=l(),oc=a("p"),ivr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TH=a("a"),dvr=o("from_pretrained()"),cvr=o(" class method or the "),MH=a("a"),fvr=o("from_config()"),mvr=o(` class
method.`),gvr=l(),V8=a("p"),hvr=o("This class cannot be instantiated directly using "),hFe=a("code"),pvr=o("__init__()"),_vr=o(" (throws an error)."),uvr=l(),kt=a("div"),F(X8.$$.fragment),bvr=l(),pFe=a("p"),vvr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Fvr=l(),rc=a("p"),Tvr=o(`Note:
Loading a model from its configuration file does `),_Fe=a("strong"),Mvr=o("not"),Evr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),Cvr=o("from_pretrained()"),wvr=o(" to load the model weights."),Avr=l(),F(ZM.$$.fragment),yvr=l(),xr=a("div"),F(z8.$$.fragment),Lvr=l(),uFe=a("p"),xvr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$vr=l(),tn=a("p"),kvr=o("The model class to instantiate is selected based on the "),bFe=a("code"),Svr=o("model_type"),Rvr=o(` property of the config object (either
passed as an argument or loaded from `),vFe=a("code"),Pvr=o("pretrained_model_name_or_path"),Bvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=a("code"),Ivr=o("pretrained_model_name_or_path"),Nvr=o(":"),qvr=l(),ie=a("ul"),e4=a("li"),TFe=a("strong"),jvr=o("albert"),Dvr=o(" \u2014 "),CH=a("a"),Gvr=o("TFAlbertForMaskedLM"),Ovr=o(" (ALBERT model)"),Vvr=l(),o4=a("li"),MFe=a("strong"),Xvr=o("bert"),zvr=o(" \u2014 "),wH=a("a"),Wvr=o("TFBertForMaskedLM"),Qvr=o(" (BERT model)"),Hvr=l(),r4=a("li"),EFe=a("strong"),Uvr=o("camembert"),Jvr=o(" \u2014 "),AH=a("a"),Yvr=o("TFCamembertForMaskedLM"),Kvr=o(" (CamemBERT model)"),Zvr=l(),t4=a("li"),CFe=a("strong"),eFr=o("convbert"),oFr=o(" \u2014 "),yH=a("a"),rFr=o("TFConvBertForMaskedLM"),tFr=o(" (ConvBERT model)"),aFr=l(),a4=a("li"),wFe=a("strong"),nFr=o("deberta"),sFr=o(" \u2014 "),LH=a("a"),lFr=o("TFDebertaForMaskedLM"),iFr=o(" (DeBERTa model)"),dFr=l(),n4=a("li"),AFe=a("strong"),cFr=o("deberta-v2"),fFr=o(" \u2014 "),xH=a("a"),mFr=o("TFDebertaV2ForMaskedLM"),gFr=o(" (DeBERTa-v2 model)"),hFr=l(),s4=a("li"),yFe=a("strong"),pFr=o("distilbert"),_Fr=o(" \u2014 "),$H=a("a"),uFr=o("TFDistilBertForMaskedLM"),bFr=o(" (DistilBERT model)"),vFr=l(),l4=a("li"),LFe=a("strong"),FFr=o("electra"),TFr=o(" \u2014 "),kH=a("a"),MFr=o("TFElectraForMaskedLM"),EFr=o(" (ELECTRA model)"),CFr=l(),i4=a("li"),xFe=a("strong"),wFr=o("flaubert"),AFr=o(" \u2014 "),SH=a("a"),yFr=o("TFFlaubertWithLMHeadModel"),LFr=o(" (FlauBERT model)"),xFr=l(),d4=a("li"),$Fe=a("strong"),$Fr=o("funnel"),kFr=o(" \u2014 "),RH=a("a"),SFr=o("TFFunnelForMaskedLM"),RFr=o(" (Funnel Transformer model)"),PFr=l(),c4=a("li"),kFe=a("strong"),BFr=o("layoutlm"),IFr=o(" \u2014 "),PH=a("a"),NFr=o("TFLayoutLMForMaskedLM"),qFr=o(" (LayoutLM model)"),jFr=l(),f4=a("li"),SFe=a("strong"),DFr=o("longformer"),GFr=o(" \u2014 "),BH=a("a"),OFr=o("TFLongformerForMaskedLM"),VFr=o(" (Longformer model)"),XFr=l(),m4=a("li"),RFe=a("strong"),zFr=o("mobilebert"),WFr=o(" \u2014 "),IH=a("a"),QFr=o("TFMobileBertForMaskedLM"),HFr=o(" (MobileBERT model)"),UFr=l(),g4=a("li"),PFe=a("strong"),JFr=o("mpnet"),YFr=o(" \u2014 "),NH=a("a"),KFr=o("TFMPNetForMaskedLM"),ZFr=o(" (MPNet model)"),e6r=l(),h4=a("li"),BFe=a("strong"),o6r=o("rembert"),r6r=o(" \u2014 "),qH=a("a"),t6r=o("TFRemBertForMaskedLM"),a6r=o(" (RemBERT model)"),n6r=l(),p4=a("li"),IFe=a("strong"),s6r=o("roberta"),l6r=o(" \u2014 "),jH=a("a"),i6r=o("TFRobertaForMaskedLM"),d6r=o(" (RoBERTa model)"),c6r=l(),_4=a("li"),NFe=a("strong"),f6r=o("roformer"),m6r=o(" \u2014 "),DH=a("a"),g6r=o("TFRoFormerForMaskedLM"),h6r=o(" (RoFormer model)"),p6r=l(),u4=a("li"),qFe=a("strong"),_6r=o("tapas"),u6r=o(" \u2014 "),GH=a("a"),b6r=o("TFTapasForMaskedLM"),v6r=o(" (TAPAS model)"),F6r=l(),b4=a("li"),jFe=a("strong"),T6r=o("xlm"),M6r=o(" \u2014 "),OH=a("a"),E6r=o("TFXLMWithLMHeadModel"),C6r=o(" (XLM model)"),w6r=l(),v4=a("li"),DFe=a("strong"),A6r=o("xlm-roberta"),y6r=o(" \u2014 "),VH=a("a"),L6r=o("TFXLMRobertaForMaskedLM"),x6r=o(" (XLM-RoBERTa model)"),$6r=l(),F(F4.$$.fragment),mDe=l(),tc=a("h2"),T4=a("a"),GFe=a("span"),F(W8.$$.fragment),k6r=l(),OFe=a("span"),S6r=o("TFAutoModelForSeq2SeqLM"),gDe=l(),rr=a("div"),F(Q8.$$.fragment),R6r=l(),ac=a("p"),P6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XH=a("a"),B6r=o("from_pretrained()"),I6r=o(" class method or the "),zH=a("a"),N6r=o("from_config()"),q6r=o(` class
method.`),j6r=l(),H8=a("p"),D6r=o("This class cannot be instantiated directly using "),VFe=a("code"),G6r=o("__init__()"),O6r=o(" (throws an error)."),V6r=l(),St=a("div"),F(U8.$$.fragment),X6r=l(),XFe=a("p"),z6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W6r=l(),nc=a("p"),Q6r=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),H6r=o("not"),U6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),J6r=o("from_pretrained()"),Y6r=o(" to load the model weights."),K6r=l(),F(M4.$$.fragment),Z6r=l(),$r=a("div"),F(J8.$$.fragment),eTr=l(),WFe=a("p"),oTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rTr=l(),an=a("p"),tTr=o("The model class to instantiate is selected based on the "),QFe=a("code"),aTr=o("model_type"),nTr=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),sTr=o("pretrained_model_name_or_path"),lTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),iTr=o("pretrained_model_name_or_path"),dTr=o(":"),cTr=l(),Le=a("ul"),E4=a("li"),JFe=a("strong"),fTr=o("bart"),mTr=o(" \u2014 "),QH=a("a"),gTr=o("TFBartForConditionalGeneration"),hTr=o(" (BART model)"),pTr=l(),C4=a("li"),YFe=a("strong"),_Tr=o("blenderbot"),uTr=o(" \u2014 "),HH=a("a"),bTr=o("TFBlenderbotForConditionalGeneration"),vTr=o(" (Blenderbot model)"),FTr=l(),w4=a("li"),KFe=a("strong"),TTr=o("blenderbot-small"),MTr=o(" \u2014 "),UH=a("a"),ETr=o("TFBlenderbotSmallForConditionalGeneration"),CTr=o(" (BlenderbotSmall model)"),wTr=l(),A4=a("li"),ZFe=a("strong"),ATr=o("encoder-decoder"),yTr=o(" \u2014 "),JH=a("a"),LTr=o("TFEncoderDecoderModel"),xTr=o(" (Encoder decoder model)"),$Tr=l(),y4=a("li"),e6e=a("strong"),kTr=o("led"),STr=o(" \u2014 "),YH=a("a"),RTr=o("TFLEDForConditionalGeneration"),PTr=o(" (LED model)"),BTr=l(),L4=a("li"),o6e=a("strong"),ITr=o("marian"),NTr=o(" \u2014 "),KH=a("a"),qTr=o("TFMarianMTModel"),jTr=o(" (Marian model)"),DTr=l(),x4=a("li"),r6e=a("strong"),GTr=o("mbart"),OTr=o(" \u2014 "),ZH=a("a"),VTr=o("TFMBartForConditionalGeneration"),XTr=o(" (mBART model)"),zTr=l(),$4=a("li"),t6e=a("strong"),WTr=o("mt5"),QTr=o(" \u2014 "),eU=a("a"),HTr=o("TFMT5ForConditionalGeneration"),UTr=o(" (MT5 model)"),JTr=l(),k4=a("li"),a6e=a("strong"),YTr=o("pegasus"),KTr=o(" \u2014 "),oU=a("a"),ZTr=o("TFPegasusForConditionalGeneration"),e7r=o(" (Pegasus model)"),o7r=l(),S4=a("li"),n6e=a("strong"),r7r=o("t5"),t7r=o(" \u2014 "),rU=a("a"),a7r=o("TFT5ForConditionalGeneration"),n7r=o(" (T5 model)"),s7r=l(),F(R4.$$.fragment),hDe=l(),sc=a("h2"),P4=a("a"),s6e=a("span"),F(Y8.$$.fragment),l7r=l(),l6e=a("span"),i7r=o("TFAutoModelForSequenceClassification"),pDe=l(),tr=a("div"),F(K8.$$.fragment),d7r=l(),lc=a("p"),c7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tU=a("a"),f7r=o("from_pretrained()"),m7r=o(" class method or the "),aU=a("a"),g7r=o("from_config()"),h7r=o(` class
method.`),p7r=l(),Z8=a("p"),_7r=o("This class cannot be instantiated directly using "),i6e=a("code"),u7r=o("__init__()"),b7r=o(" (throws an error)."),v7r=l(),Rt=a("div"),F(e9.$$.fragment),F7r=l(),d6e=a("p"),T7r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),M7r=l(),ic=a("p"),E7r=o(`Note:
Loading a model from its configuration file does `),c6e=a("strong"),C7r=o("not"),w7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),A7r=o("from_pretrained()"),y7r=o(" to load the model weights."),L7r=l(),F(B4.$$.fragment),x7r=l(),kr=a("div"),F(o9.$$.fragment),$7r=l(),f6e=a("p"),k7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),S7r=l(),nn=a("p"),R7r=o("The model class to instantiate is selected based on the "),m6e=a("code"),P7r=o("model_type"),B7r=o(` property of the config object (either
passed as an argument or loaded from `),g6e=a("code"),I7r=o("pretrained_model_name_or_path"),N7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h6e=a("code"),q7r=o("pretrained_model_name_or_path"),j7r=o(":"),D7r=l(),oe=a("ul"),I4=a("li"),p6e=a("strong"),G7r=o("albert"),O7r=o(" \u2014 "),sU=a("a"),V7r=o("TFAlbertForSequenceClassification"),X7r=o(" (ALBERT model)"),z7r=l(),N4=a("li"),_6e=a("strong"),W7r=o("bert"),Q7r=o(" \u2014 "),lU=a("a"),H7r=o("TFBertForSequenceClassification"),U7r=o(" (BERT model)"),J7r=l(),q4=a("li"),u6e=a("strong"),Y7r=o("camembert"),K7r=o(" \u2014 "),iU=a("a"),Z7r=o("TFCamembertForSequenceClassification"),eMr=o(" (CamemBERT model)"),oMr=l(),j4=a("li"),b6e=a("strong"),rMr=o("convbert"),tMr=o(" \u2014 "),dU=a("a"),aMr=o("TFConvBertForSequenceClassification"),nMr=o(" (ConvBERT model)"),sMr=l(),D4=a("li"),v6e=a("strong"),lMr=o("ctrl"),iMr=o(" \u2014 "),cU=a("a"),dMr=o("TFCTRLForSequenceClassification"),cMr=o(" (CTRL model)"),fMr=l(),G4=a("li"),F6e=a("strong"),mMr=o("deberta"),gMr=o(" \u2014 "),fU=a("a"),hMr=o("TFDebertaForSequenceClassification"),pMr=o(" (DeBERTa model)"),_Mr=l(),O4=a("li"),T6e=a("strong"),uMr=o("deberta-v2"),bMr=o(" \u2014 "),mU=a("a"),vMr=o("TFDebertaV2ForSequenceClassification"),FMr=o(" (DeBERTa-v2 model)"),TMr=l(),V4=a("li"),M6e=a("strong"),MMr=o("distilbert"),EMr=o(" \u2014 "),gU=a("a"),CMr=o("TFDistilBertForSequenceClassification"),wMr=o(" (DistilBERT model)"),AMr=l(),X4=a("li"),E6e=a("strong"),yMr=o("electra"),LMr=o(" \u2014 "),hU=a("a"),xMr=o("TFElectraForSequenceClassification"),$Mr=o(" (ELECTRA model)"),kMr=l(),z4=a("li"),C6e=a("strong"),SMr=o("flaubert"),RMr=o(" \u2014 "),pU=a("a"),PMr=o("TFFlaubertForSequenceClassification"),BMr=o(" (FlauBERT model)"),IMr=l(),W4=a("li"),w6e=a("strong"),NMr=o("funnel"),qMr=o(" \u2014 "),_U=a("a"),jMr=o("TFFunnelForSequenceClassification"),DMr=o(" (Funnel Transformer model)"),GMr=l(),Q4=a("li"),A6e=a("strong"),OMr=o("gpt2"),VMr=o(" \u2014 "),uU=a("a"),XMr=o("TFGPT2ForSequenceClassification"),zMr=o(" (OpenAI GPT-2 model)"),WMr=l(),H4=a("li"),y6e=a("strong"),QMr=o("gptj"),HMr=o(" \u2014 "),bU=a("a"),UMr=o("TFGPTJForSequenceClassification"),JMr=o(" (GPT-J model)"),YMr=l(),U4=a("li"),L6e=a("strong"),KMr=o("layoutlm"),ZMr=o(" \u2014 "),vU=a("a"),e4r=o("TFLayoutLMForSequenceClassification"),o4r=o(" (LayoutLM model)"),r4r=l(),J4=a("li"),x6e=a("strong"),t4r=o("longformer"),a4r=o(" \u2014 "),FU=a("a"),n4r=o("TFLongformerForSequenceClassification"),s4r=o(" (Longformer model)"),l4r=l(),Y4=a("li"),$6e=a("strong"),i4r=o("mobilebert"),d4r=o(" \u2014 "),TU=a("a"),c4r=o("TFMobileBertForSequenceClassification"),f4r=o(" (MobileBERT model)"),m4r=l(),K4=a("li"),k6e=a("strong"),g4r=o("mpnet"),h4r=o(" \u2014 "),MU=a("a"),p4r=o("TFMPNetForSequenceClassification"),_4r=o(" (MPNet model)"),u4r=l(),Z4=a("li"),S6e=a("strong"),b4r=o("openai-gpt"),v4r=o(" \u2014 "),EU=a("a"),F4r=o("TFOpenAIGPTForSequenceClassification"),T4r=o(" (OpenAI GPT model)"),M4r=l(),eE=a("li"),R6e=a("strong"),E4r=o("rembert"),C4r=o(" \u2014 "),CU=a("a"),w4r=o("TFRemBertForSequenceClassification"),A4r=o(" (RemBERT model)"),y4r=l(),oE=a("li"),P6e=a("strong"),L4r=o("roberta"),x4r=o(" \u2014 "),wU=a("a"),$4r=o("TFRobertaForSequenceClassification"),k4r=o(" (RoBERTa model)"),S4r=l(),rE=a("li"),B6e=a("strong"),R4r=o("roformer"),P4r=o(" \u2014 "),AU=a("a"),B4r=o("TFRoFormerForSequenceClassification"),I4r=o(" (RoFormer model)"),N4r=l(),tE=a("li"),I6e=a("strong"),q4r=o("tapas"),j4r=o(" \u2014 "),yU=a("a"),D4r=o("TFTapasForSequenceClassification"),G4r=o(" (TAPAS model)"),O4r=l(),aE=a("li"),N6e=a("strong"),V4r=o("transfo-xl"),X4r=o(" \u2014 "),LU=a("a"),z4r=o("TFTransfoXLForSequenceClassification"),W4r=o(" (Transformer-XL model)"),Q4r=l(),nE=a("li"),q6e=a("strong"),H4r=o("xlm"),U4r=o(" \u2014 "),xU=a("a"),J4r=o("TFXLMForSequenceClassification"),Y4r=o(" (XLM model)"),K4r=l(),sE=a("li"),j6e=a("strong"),Z4r=o("xlm-roberta"),eEr=o(" \u2014 "),$U=a("a"),oEr=o("TFXLMRobertaForSequenceClassification"),rEr=o(" (XLM-RoBERTa model)"),tEr=l(),lE=a("li"),D6e=a("strong"),aEr=o("xlnet"),nEr=o(" \u2014 "),kU=a("a"),sEr=o("TFXLNetForSequenceClassification"),lEr=o(" (XLNet model)"),iEr=l(),F(iE.$$.fragment),_De=l(),dc=a("h2"),dE=a("a"),G6e=a("span"),F(r9.$$.fragment),dEr=l(),O6e=a("span"),cEr=o("TFAutoModelForMultipleChoice"),uDe=l(),ar=a("div"),F(t9.$$.fragment),fEr=l(),cc=a("p"),mEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SU=a("a"),gEr=o("from_pretrained()"),hEr=o(" class method or the "),RU=a("a"),pEr=o("from_config()"),_Er=o(` class
method.`),uEr=l(),a9=a("p"),bEr=o("This class cannot be instantiated directly using "),V6e=a("code"),vEr=o("__init__()"),FEr=o(" (throws an error)."),TEr=l(),Pt=a("div"),F(n9.$$.fragment),MEr=l(),X6e=a("p"),EEr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),CEr=l(),fc=a("p"),wEr=o(`Note:
Loading a model from its configuration file does `),z6e=a("strong"),AEr=o("not"),yEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),LEr=o("from_pretrained()"),xEr=o(" to load the model weights."),$Er=l(),F(cE.$$.fragment),kEr=l(),Sr=a("div"),F(s9.$$.fragment),SEr=l(),W6e=a("p"),REr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),PEr=l(),sn=a("p"),BEr=o("The model class to instantiate is selected based on the "),Q6e=a("code"),IEr=o("model_type"),NEr=o(` property of the config object (either
passed as an argument or loaded from `),H6e=a("code"),qEr=o("pretrained_model_name_or_path"),jEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=a("code"),DEr=o("pretrained_model_name_or_path"),GEr=o(":"),OEr=l(),pe=a("ul"),fE=a("li"),J6e=a("strong"),VEr=o("albert"),XEr=o(" \u2014 "),BU=a("a"),zEr=o("TFAlbertForMultipleChoice"),WEr=o(" (ALBERT model)"),QEr=l(),mE=a("li"),Y6e=a("strong"),HEr=o("bert"),UEr=o(" \u2014 "),IU=a("a"),JEr=o("TFBertForMultipleChoice"),YEr=o(" (BERT model)"),KEr=l(),gE=a("li"),K6e=a("strong"),ZEr=o("camembert"),eCr=o(" \u2014 "),NU=a("a"),oCr=o("TFCamembertForMultipleChoice"),rCr=o(" (CamemBERT model)"),tCr=l(),hE=a("li"),Z6e=a("strong"),aCr=o("convbert"),nCr=o(" \u2014 "),qU=a("a"),sCr=o("TFConvBertForMultipleChoice"),lCr=o(" (ConvBERT model)"),iCr=l(),pE=a("li"),eTe=a("strong"),dCr=o("distilbert"),cCr=o(" \u2014 "),jU=a("a"),fCr=o("TFDistilBertForMultipleChoice"),mCr=o(" (DistilBERT model)"),gCr=l(),_E=a("li"),oTe=a("strong"),hCr=o("electra"),pCr=o(" \u2014 "),DU=a("a"),_Cr=o("TFElectraForMultipleChoice"),uCr=o(" (ELECTRA model)"),bCr=l(),uE=a("li"),rTe=a("strong"),vCr=o("flaubert"),FCr=o(" \u2014 "),GU=a("a"),TCr=o("TFFlaubertForMultipleChoice"),MCr=o(" (FlauBERT model)"),ECr=l(),bE=a("li"),tTe=a("strong"),CCr=o("funnel"),wCr=o(" \u2014 "),OU=a("a"),ACr=o("TFFunnelForMultipleChoice"),yCr=o(" (Funnel Transformer model)"),LCr=l(),vE=a("li"),aTe=a("strong"),xCr=o("longformer"),$Cr=o(" \u2014 "),VU=a("a"),kCr=o("TFLongformerForMultipleChoice"),SCr=o(" (Longformer model)"),RCr=l(),FE=a("li"),nTe=a("strong"),PCr=o("mobilebert"),BCr=o(" \u2014 "),XU=a("a"),ICr=o("TFMobileBertForMultipleChoice"),NCr=o(" (MobileBERT model)"),qCr=l(),TE=a("li"),sTe=a("strong"),jCr=o("mpnet"),DCr=o(" \u2014 "),zU=a("a"),GCr=o("TFMPNetForMultipleChoice"),OCr=o(" (MPNet model)"),VCr=l(),ME=a("li"),lTe=a("strong"),XCr=o("rembert"),zCr=o(" \u2014 "),WU=a("a"),WCr=o("TFRemBertForMultipleChoice"),QCr=o(" (RemBERT model)"),HCr=l(),EE=a("li"),iTe=a("strong"),UCr=o("roberta"),JCr=o(" \u2014 "),QU=a("a"),YCr=o("TFRobertaForMultipleChoice"),KCr=o(" (RoBERTa model)"),ZCr=l(),CE=a("li"),dTe=a("strong"),e5r=o("roformer"),o5r=o(" \u2014 "),HU=a("a"),r5r=o("TFRoFormerForMultipleChoice"),t5r=o(" (RoFormer model)"),a5r=l(),wE=a("li"),cTe=a("strong"),n5r=o("xlm"),s5r=o(" \u2014 "),UU=a("a"),l5r=o("TFXLMForMultipleChoice"),i5r=o(" (XLM model)"),d5r=l(),AE=a("li"),fTe=a("strong"),c5r=o("xlm-roberta"),f5r=o(" \u2014 "),JU=a("a"),m5r=o("TFXLMRobertaForMultipleChoice"),g5r=o(" (XLM-RoBERTa model)"),h5r=l(),yE=a("li"),mTe=a("strong"),p5r=o("xlnet"),_5r=o(" \u2014 "),YU=a("a"),u5r=o("TFXLNetForMultipleChoice"),b5r=o(" (XLNet model)"),v5r=l(),F(LE.$$.fragment),bDe=l(),mc=a("h2"),xE=a("a"),gTe=a("span"),F(l9.$$.fragment),F5r=l(),hTe=a("span"),T5r=o("TFAutoModelForNextSentencePrediction"),vDe=l(),nr=a("div"),F(i9.$$.fragment),M5r=l(),gc=a("p"),E5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KU=a("a"),C5r=o("from_pretrained()"),w5r=o(" class method or the "),ZU=a("a"),A5r=o("from_config()"),y5r=o(` class
method.`),L5r=l(),d9=a("p"),x5r=o("This class cannot be instantiated directly using "),pTe=a("code"),$5r=o("__init__()"),k5r=o(" (throws an error)."),S5r=l(),Bt=a("div"),F(c9.$$.fragment),R5r=l(),_Te=a("p"),P5r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),B5r=l(),hc=a("p"),I5r=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),N5r=o("not"),q5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=a("a"),j5r=o("from_pretrained()"),D5r=o(" to load the model weights."),G5r=l(),F($E.$$.fragment),O5r=l(),Rr=a("div"),F(f9.$$.fragment),V5r=l(),bTe=a("p"),X5r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z5r=l(),ln=a("p"),W5r=o("The model class to instantiate is selected based on the "),vTe=a("code"),Q5r=o("model_type"),H5r=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),U5r=o("pretrained_model_name_or_path"),J5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=a("code"),Y5r=o("pretrained_model_name_or_path"),K5r=o(":"),Z5r=l(),m9=a("ul"),kE=a("li"),MTe=a("strong"),e3r=o("bert"),o3r=o(" \u2014 "),oJ=a("a"),r3r=o("TFBertForNextSentencePrediction"),t3r=o(" (BERT model)"),a3r=l(),SE=a("li"),ETe=a("strong"),n3r=o("mobilebert"),s3r=o(" \u2014 "),rJ=a("a"),l3r=o("TFMobileBertForNextSentencePrediction"),i3r=o(" (MobileBERT model)"),d3r=l(),F(RE.$$.fragment),FDe=l(),pc=a("h2"),PE=a("a"),CTe=a("span"),F(g9.$$.fragment),c3r=l(),wTe=a("span"),f3r=o("TFAutoModelForTableQuestionAnswering"),TDe=l(),sr=a("div"),F(h9.$$.fragment),m3r=l(),_c=a("p"),g3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),tJ=a("a"),h3r=o("from_pretrained()"),p3r=o(" class method or the "),aJ=a("a"),_3r=o("from_config()"),u3r=o(` class
method.`),b3r=l(),p9=a("p"),v3r=o("This class cannot be instantiated directly using "),ATe=a("code"),F3r=o("__init__()"),T3r=o(" (throws an error)."),M3r=l(),It=a("div"),F(_9.$$.fragment),E3r=l(),yTe=a("p"),C3r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),w3r=l(),uc=a("p"),A3r=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),y3r=o("not"),L3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),x3r=o("from_pretrained()"),$3r=o(" to load the model weights."),k3r=l(),F(BE.$$.fragment),S3r=l(),Pr=a("div"),F(u9.$$.fragment),R3r=l(),xTe=a("p"),P3r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),B3r=l(),dn=a("p"),I3r=o("The model class to instantiate is selected based on the "),$Te=a("code"),N3r=o("model_type"),q3r=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),j3r=o("pretrained_model_name_or_path"),D3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),G3r=o("pretrained_model_name_or_path"),O3r=o(":"),V3r=l(),RTe=a("ul"),IE=a("li"),PTe=a("strong"),X3r=o("tapas"),z3r=o(" \u2014 "),sJ=a("a"),W3r=o("TFTapasForQuestionAnswering"),Q3r=o(" (TAPAS model)"),H3r=l(),F(NE.$$.fragment),MDe=l(),bc=a("h2"),qE=a("a"),BTe=a("span"),F(b9.$$.fragment),U3r=l(),ITe=a("span"),J3r=o("TFAutoModelForTokenClassification"),EDe=l(),lr=a("div"),F(v9.$$.fragment),Y3r=l(),vc=a("p"),K3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lJ=a("a"),Z3r=o("from_pretrained()"),e0r=o(" class method or the "),iJ=a("a"),o0r=o("from_config()"),r0r=o(` class
method.`),t0r=l(),F9=a("p"),a0r=o("This class cannot be instantiated directly using "),NTe=a("code"),n0r=o("__init__()"),s0r=o(" (throws an error)."),l0r=l(),Nt=a("div"),F(T9.$$.fragment),i0r=l(),qTe=a("p"),d0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),c0r=l(),Fc=a("p"),f0r=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),m0r=o("not"),g0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=a("a"),h0r=o("from_pretrained()"),p0r=o(" to load the model weights."),_0r=l(),F(jE.$$.fragment),u0r=l(),Br=a("div"),F(M9.$$.fragment),b0r=l(),DTe=a("p"),v0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),F0r=l(),cn=a("p"),T0r=o("The model class to instantiate is selected based on the "),GTe=a("code"),M0r=o("model_type"),E0r=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),C0r=o("pretrained_model_name_or_path"),w0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),A0r=o("pretrained_model_name_or_path"),y0r=o(":"),L0r=l(),de=a("ul"),DE=a("li"),XTe=a("strong"),x0r=o("albert"),$0r=o(" \u2014 "),cJ=a("a"),k0r=o("TFAlbertForTokenClassification"),S0r=o(" (ALBERT model)"),R0r=l(),GE=a("li"),zTe=a("strong"),P0r=o("bert"),B0r=o(" \u2014 "),fJ=a("a"),I0r=o("TFBertForTokenClassification"),N0r=o(" (BERT model)"),q0r=l(),OE=a("li"),WTe=a("strong"),j0r=o("camembert"),D0r=o(" \u2014 "),mJ=a("a"),G0r=o("TFCamembertForTokenClassification"),O0r=o(" (CamemBERT model)"),V0r=l(),VE=a("li"),QTe=a("strong"),X0r=o("convbert"),z0r=o(" \u2014 "),gJ=a("a"),W0r=o("TFConvBertForTokenClassification"),Q0r=o(" (ConvBERT model)"),H0r=l(),XE=a("li"),HTe=a("strong"),U0r=o("deberta"),J0r=o(" \u2014 "),hJ=a("a"),Y0r=o("TFDebertaForTokenClassification"),K0r=o(" (DeBERTa model)"),Z0r=l(),zE=a("li"),UTe=a("strong"),ewr=o("deberta-v2"),owr=o(" \u2014 "),pJ=a("a"),rwr=o("TFDebertaV2ForTokenClassification"),twr=o(" (DeBERTa-v2 model)"),awr=l(),WE=a("li"),JTe=a("strong"),nwr=o("distilbert"),swr=o(" \u2014 "),_J=a("a"),lwr=o("TFDistilBertForTokenClassification"),iwr=o(" (DistilBERT model)"),dwr=l(),QE=a("li"),YTe=a("strong"),cwr=o("electra"),fwr=o(" \u2014 "),uJ=a("a"),mwr=o("TFElectraForTokenClassification"),gwr=o(" (ELECTRA model)"),hwr=l(),HE=a("li"),KTe=a("strong"),pwr=o("flaubert"),_wr=o(" \u2014 "),bJ=a("a"),uwr=o("TFFlaubertForTokenClassification"),bwr=o(" (FlauBERT model)"),vwr=l(),UE=a("li"),ZTe=a("strong"),Fwr=o("funnel"),Twr=o(" \u2014 "),vJ=a("a"),Mwr=o("TFFunnelForTokenClassification"),Ewr=o(" (Funnel Transformer model)"),Cwr=l(),JE=a("li"),e7e=a("strong"),wwr=o("layoutlm"),Awr=o(" \u2014 "),FJ=a("a"),ywr=o("TFLayoutLMForTokenClassification"),Lwr=o(" (LayoutLM model)"),xwr=l(),YE=a("li"),o7e=a("strong"),$wr=o("longformer"),kwr=o(" \u2014 "),TJ=a("a"),Swr=o("TFLongformerForTokenClassification"),Rwr=o(" (Longformer model)"),Pwr=l(),KE=a("li"),r7e=a("strong"),Bwr=o("mobilebert"),Iwr=o(" \u2014 "),MJ=a("a"),Nwr=o("TFMobileBertForTokenClassification"),qwr=o(" (MobileBERT model)"),jwr=l(),ZE=a("li"),t7e=a("strong"),Dwr=o("mpnet"),Gwr=o(" \u2014 "),EJ=a("a"),Owr=o("TFMPNetForTokenClassification"),Vwr=o(" (MPNet model)"),Xwr=l(),eC=a("li"),a7e=a("strong"),zwr=o("rembert"),Wwr=o(" \u2014 "),CJ=a("a"),Qwr=o("TFRemBertForTokenClassification"),Hwr=o(" (RemBERT model)"),Uwr=l(),oC=a("li"),n7e=a("strong"),Jwr=o("roberta"),Ywr=o(" \u2014 "),wJ=a("a"),Kwr=o("TFRobertaForTokenClassification"),Zwr=o(" (RoBERTa model)"),eAr=l(),rC=a("li"),s7e=a("strong"),oAr=o("roformer"),rAr=o(" \u2014 "),AJ=a("a"),tAr=o("TFRoFormerForTokenClassification"),aAr=o(" (RoFormer model)"),nAr=l(),tC=a("li"),l7e=a("strong"),sAr=o("xlm"),lAr=o(" \u2014 "),yJ=a("a"),iAr=o("TFXLMForTokenClassification"),dAr=o(" (XLM model)"),cAr=l(),aC=a("li"),i7e=a("strong"),fAr=o("xlm-roberta"),mAr=o(" \u2014 "),LJ=a("a"),gAr=o("TFXLMRobertaForTokenClassification"),hAr=o(" (XLM-RoBERTa model)"),pAr=l(),nC=a("li"),d7e=a("strong"),_Ar=o("xlnet"),uAr=o(" \u2014 "),xJ=a("a"),bAr=o("TFXLNetForTokenClassification"),vAr=o(" (XLNet model)"),FAr=l(),F(sC.$$.fragment),CDe=l(),Tc=a("h2"),lC=a("a"),c7e=a("span"),F(E9.$$.fragment),TAr=l(),f7e=a("span"),MAr=o("TFAutoModelForQuestionAnswering"),wDe=l(),ir=a("div"),F(C9.$$.fragment),EAr=l(),Mc=a("p"),CAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$J=a("a"),wAr=o("from_pretrained()"),AAr=o(" class method or the "),kJ=a("a"),yAr=o("from_config()"),LAr=o(` class
method.`),xAr=l(),w9=a("p"),$Ar=o("This class cannot be instantiated directly using "),m7e=a("code"),kAr=o("__init__()"),SAr=o(" (throws an error)."),RAr=l(),qt=a("div"),F(A9.$$.fragment),PAr=l(),g7e=a("p"),BAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),IAr=l(),Ec=a("p"),NAr=o(`Note:
Loading a model from its configuration file does `),h7e=a("strong"),qAr=o("not"),jAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=a("a"),DAr=o("from_pretrained()"),GAr=o(" to load the model weights."),OAr=l(),F(iC.$$.fragment),VAr=l(),Ir=a("div"),F(y9.$$.fragment),XAr=l(),p7e=a("p"),zAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WAr=l(),fn=a("p"),QAr=o("The model class to instantiate is selected based on the "),_7e=a("code"),HAr=o("model_type"),UAr=o(` property of the config object (either
passed as an argument or loaded from `),u7e=a("code"),JAr=o("pretrained_model_name_or_path"),YAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=a("code"),KAr=o("pretrained_model_name_or_path"),ZAr=o(":"),eyr=l(),ce=a("ul"),dC=a("li"),v7e=a("strong"),oyr=o("albert"),ryr=o(" \u2014 "),RJ=a("a"),tyr=o("TFAlbertForQuestionAnswering"),ayr=o(" (ALBERT model)"),nyr=l(),cC=a("li"),F7e=a("strong"),syr=o("bert"),lyr=o(" \u2014 "),PJ=a("a"),iyr=o("TFBertForQuestionAnswering"),dyr=o(" (BERT model)"),cyr=l(),fC=a("li"),T7e=a("strong"),fyr=o("camembert"),myr=o(" \u2014 "),BJ=a("a"),gyr=o("TFCamembertForQuestionAnswering"),hyr=o(" (CamemBERT model)"),pyr=l(),mC=a("li"),M7e=a("strong"),_yr=o("convbert"),uyr=o(" \u2014 "),IJ=a("a"),byr=o("TFConvBertForQuestionAnswering"),vyr=o(" (ConvBERT model)"),Fyr=l(),gC=a("li"),E7e=a("strong"),Tyr=o("deberta"),Myr=o(" \u2014 "),NJ=a("a"),Eyr=o("TFDebertaForQuestionAnswering"),Cyr=o(" (DeBERTa model)"),wyr=l(),hC=a("li"),C7e=a("strong"),Ayr=o("deberta-v2"),yyr=o(" \u2014 "),qJ=a("a"),Lyr=o("TFDebertaV2ForQuestionAnswering"),xyr=o(" (DeBERTa-v2 model)"),$yr=l(),pC=a("li"),w7e=a("strong"),kyr=o("distilbert"),Syr=o(" \u2014 "),jJ=a("a"),Ryr=o("TFDistilBertForQuestionAnswering"),Pyr=o(" (DistilBERT model)"),Byr=l(),_C=a("li"),A7e=a("strong"),Iyr=o("electra"),Nyr=o(" \u2014 "),DJ=a("a"),qyr=o("TFElectraForQuestionAnswering"),jyr=o(" (ELECTRA model)"),Dyr=l(),uC=a("li"),y7e=a("strong"),Gyr=o("flaubert"),Oyr=o(" \u2014 "),GJ=a("a"),Vyr=o("TFFlaubertForQuestionAnsweringSimple"),Xyr=o(" (FlauBERT model)"),zyr=l(),bC=a("li"),L7e=a("strong"),Wyr=o("funnel"),Qyr=o(" \u2014 "),OJ=a("a"),Hyr=o("TFFunnelForQuestionAnswering"),Uyr=o(" (Funnel Transformer model)"),Jyr=l(),vC=a("li"),x7e=a("strong"),Yyr=o("gptj"),Kyr=o(" \u2014 "),VJ=a("a"),Zyr=o("TFGPTJForQuestionAnswering"),eLr=o(" (GPT-J model)"),oLr=l(),FC=a("li"),$7e=a("strong"),rLr=o("longformer"),tLr=o(" \u2014 "),XJ=a("a"),aLr=o("TFLongformerForQuestionAnswering"),nLr=o(" (Longformer model)"),sLr=l(),TC=a("li"),k7e=a("strong"),lLr=o("mobilebert"),iLr=o(" \u2014 "),zJ=a("a"),dLr=o("TFMobileBertForQuestionAnswering"),cLr=o(" (MobileBERT model)"),fLr=l(),MC=a("li"),S7e=a("strong"),mLr=o("mpnet"),gLr=o(" \u2014 "),WJ=a("a"),hLr=o("TFMPNetForQuestionAnswering"),pLr=o(" (MPNet model)"),_Lr=l(),EC=a("li"),R7e=a("strong"),uLr=o("rembert"),bLr=o(" \u2014 "),QJ=a("a"),vLr=o("TFRemBertForQuestionAnswering"),FLr=o(" (RemBERT model)"),TLr=l(),CC=a("li"),P7e=a("strong"),MLr=o("roberta"),ELr=o(" \u2014 "),HJ=a("a"),CLr=o("TFRobertaForQuestionAnswering"),wLr=o(" (RoBERTa model)"),ALr=l(),wC=a("li"),B7e=a("strong"),yLr=o("roformer"),LLr=o(" \u2014 "),UJ=a("a"),xLr=o("TFRoFormerForQuestionAnswering"),$Lr=o(" (RoFormer model)"),kLr=l(),AC=a("li"),I7e=a("strong"),SLr=o("xlm"),RLr=o(" \u2014 "),JJ=a("a"),PLr=o("TFXLMForQuestionAnsweringSimple"),BLr=o(" (XLM model)"),ILr=l(),yC=a("li"),N7e=a("strong"),NLr=o("xlm-roberta"),qLr=o(" \u2014 "),YJ=a("a"),jLr=o("TFXLMRobertaForQuestionAnswering"),DLr=o(" (XLM-RoBERTa model)"),GLr=l(),LC=a("li"),q7e=a("strong"),OLr=o("xlnet"),VLr=o(" \u2014 "),KJ=a("a"),XLr=o("TFXLNetForQuestionAnsweringSimple"),zLr=o(" (XLNet model)"),WLr=l(),F(xC.$$.fragment),ADe=l(),Cc=a("h2"),$C=a("a"),j7e=a("span"),F(L9.$$.fragment),QLr=l(),D7e=a("span"),HLr=o("TFAutoModelForVision2Seq"),yDe=l(),dr=a("div"),F(x9.$$.fragment),ULr=l(),wc=a("p"),JLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZJ=a("a"),YLr=o("from_pretrained()"),KLr=o(" class method or the "),eY=a("a"),ZLr=o("from_config()"),e8r=o(` class
method.`),o8r=l(),$9=a("p"),r8r=o("This class cannot be instantiated directly using "),G7e=a("code"),t8r=o("__init__()"),a8r=o(" (throws an error)."),n8r=l(),jt=a("div"),F(k9.$$.fragment),s8r=l(),O7e=a("p"),l8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),i8r=l(),Ac=a("p"),d8r=o(`Note:
Loading a model from its configuration file does `),V7e=a("strong"),c8r=o("not"),f8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),m8r=o("from_pretrained()"),g8r=o(" to load the model weights."),h8r=l(),F(kC.$$.fragment),p8r=l(),Nr=a("div"),F(S9.$$.fragment),_8r=l(),X7e=a("p"),u8r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),b8r=l(),mn=a("p"),v8r=o("The model class to instantiate is selected based on the "),z7e=a("code"),F8r=o("model_type"),T8r=o(` property of the config object (either
passed as an argument or loaded from `),W7e=a("code"),M8r=o("pretrained_model_name_or_path"),E8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=a("code"),C8r=o("pretrained_model_name_or_path"),w8r=o(":"),A8r=l(),H7e=a("ul"),SC=a("li"),U7e=a("strong"),y8r=o("vision-encoder-decoder"),L8r=o(" \u2014 "),rY=a("a"),x8r=o("TFVisionEncoderDecoderModel"),$8r=o(" (Vision Encoder decoder model)"),k8r=l(),F(RC.$$.fragment),LDe=l(),yc=a("h2"),PC=a("a"),J7e=a("span"),F(R9.$$.fragment),S8r=l(),Y7e=a("span"),R8r=o("TFAutoModelForSpeechSeq2Seq"),xDe=l(),cr=a("div"),F(P9.$$.fragment),P8r=l(),Lc=a("p"),B8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tY=a("a"),I8r=o("from_pretrained()"),N8r=o(" class method or the "),aY=a("a"),q8r=o("from_config()"),j8r=o(` class
method.`),D8r=l(),B9=a("p"),G8r=o("This class cannot be instantiated directly using "),K7e=a("code"),O8r=o("__init__()"),V8r=o(" (throws an error)."),X8r=l(),Dt=a("div"),F(I9.$$.fragment),z8r=l(),Z7e=a("p"),W8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Q8r=l(),xc=a("p"),H8r=o(`Note:
Loading a model from its configuration file does `),eMe=a("strong"),U8r=o("not"),J8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),Y8r=o("from_pretrained()"),K8r=o(" to load the model weights."),Z8r=l(),F(BC.$$.fragment),e9r=l(),qr=a("div"),F(N9.$$.fragment),o9r=l(),oMe=a("p"),r9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),t9r=l(),gn=a("p"),a9r=o("The model class to instantiate is selected based on the "),rMe=a("code"),n9r=o("model_type"),s9r=o(` property of the config object (either
passed as an argument or loaded from `),tMe=a("code"),l9r=o("pretrained_model_name_or_path"),i9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=a("code"),d9r=o("pretrained_model_name_or_path"),c9r=o(":"),f9r=l(),nMe=a("ul"),IC=a("li"),sMe=a("strong"),m9r=o("speech_to_text"),g9r=o(" \u2014 "),sY=a("a"),h9r=o("TFSpeech2TextForConditionalGeneration"),p9r=o(" (Speech2Text model)"),_9r=l(),F(NC.$$.fragment),$De=l(),$c=a("h2"),qC=a("a"),lMe=a("span"),F(q9.$$.fragment),u9r=l(),iMe=a("span"),b9r=o("FlaxAutoModel"),kDe=l(),fr=a("div"),F(j9.$$.fragment),v9r=l(),kc=a("p"),F9r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lY=a("a"),T9r=o("from_pretrained()"),M9r=o(" class method or the "),iY=a("a"),E9r=o("from_config()"),C9r=o(` class
method.`),w9r=l(),D9=a("p"),A9r=o("This class cannot be instantiated directly using "),dMe=a("code"),y9r=o("__init__()"),L9r=o(" (throws an error)."),x9r=l(),Gt=a("div"),F(G9.$$.fragment),$9r=l(),cMe=a("p"),k9r=o("Instantiates one of the base model classes of the library from a configuration."),S9r=l(),Sc=a("p"),R9r=o(`Note:
Loading a model from its configuration file does `),fMe=a("strong"),P9r=o("not"),B9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),I9r=o("from_pretrained()"),N9r=o(" to load the model weights."),q9r=l(),F(jC.$$.fragment),j9r=l(),jr=a("div"),F(O9.$$.fragment),D9r=l(),mMe=a("p"),G9r=o("Instantiate one of the base model classes of the library from a pretrained model."),O9r=l(),hn=a("p"),V9r=o("The model class to instantiate is selected based on the "),gMe=a("code"),X9r=o("model_type"),z9r=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),W9r=o("pretrained_model_name_or_path"),Q9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=a("code"),H9r=o("pretrained_model_name_or_path"),U9r=o(":"),J9r=l(),re=a("ul"),DC=a("li"),_Me=a("strong"),Y9r=o("albert"),K9r=o(" \u2014 "),cY=a("a"),Z9r=o("FlaxAlbertModel"),exr=o(" (ALBERT model)"),oxr=l(),GC=a("li"),uMe=a("strong"),rxr=o("bart"),txr=o(" \u2014 "),fY=a("a"),axr=o("FlaxBartModel"),nxr=o(" (BART model)"),sxr=l(),OC=a("li"),bMe=a("strong"),lxr=o("beit"),ixr=o(" \u2014 "),mY=a("a"),dxr=o("FlaxBeitModel"),cxr=o(" (BEiT model)"),fxr=l(),VC=a("li"),vMe=a("strong"),mxr=o("bert"),gxr=o(" \u2014 "),gY=a("a"),hxr=o("FlaxBertModel"),pxr=o(" (BERT model)"),_xr=l(),XC=a("li"),FMe=a("strong"),uxr=o("big_bird"),bxr=o(" \u2014 "),hY=a("a"),vxr=o("FlaxBigBirdModel"),Fxr=o(" (BigBird model)"),Txr=l(),zC=a("li"),TMe=a("strong"),Mxr=o("blenderbot"),Exr=o(" \u2014 "),pY=a("a"),Cxr=o("FlaxBlenderbotModel"),wxr=o(" (Blenderbot model)"),Axr=l(),WC=a("li"),MMe=a("strong"),yxr=o("blenderbot-small"),Lxr=o(" \u2014 "),_Y=a("a"),xxr=o("FlaxBlenderbotSmallModel"),$xr=o(" (BlenderbotSmall model)"),kxr=l(),QC=a("li"),EMe=a("strong"),Sxr=o("clip"),Rxr=o(" \u2014 "),uY=a("a"),Pxr=o("FlaxCLIPModel"),Bxr=o(" (CLIP model)"),Ixr=l(),HC=a("li"),CMe=a("strong"),Nxr=o("distilbert"),qxr=o(" \u2014 "),bY=a("a"),jxr=o("FlaxDistilBertModel"),Dxr=o(" (DistilBERT model)"),Gxr=l(),UC=a("li"),wMe=a("strong"),Oxr=o("electra"),Vxr=o(" \u2014 "),vY=a("a"),Xxr=o("FlaxElectraModel"),zxr=o(" (ELECTRA model)"),Wxr=l(),JC=a("li"),AMe=a("strong"),Qxr=o("gpt2"),Hxr=o(" \u2014 "),FY=a("a"),Uxr=o("FlaxGPT2Model"),Jxr=o(" (OpenAI GPT-2 model)"),Yxr=l(),YC=a("li"),yMe=a("strong"),Kxr=o("gpt_neo"),Zxr=o(" \u2014 "),TY=a("a"),e$r=o("FlaxGPTNeoModel"),o$r=o(" (GPT Neo model)"),r$r=l(),KC=a("li"),LMe=a("strong"),t$r=o("gptj"),a$r=o(" \u2014 "),MY=a("a"),n$r=o("FlaxGPTJModel"),s$r=o(" (GPT-J model)"),l$r=l(),ZC=a("li"),xMe=a("strong"),i$r=o("marian"),d$r=o(" \u2014 "),EY=a("a"),c$r=o("FlaxMarianModel"),f$r=o(" (Marian model)"),m$r=l(),e5=a("li"),$Me=a("strong"),g$r=o("mbart"),h$r=o(" \u2014 "),CY=a("a"),p$r=o("FlaxMBartModel"),_$r=o(" (mBART model)"),u$r=l(),o5=a("li"),kMe=a("strong"),b$r=o("mt5"),v$r=o(" \u2014 "),wY=a("a"),F$r=o("FlaxMT5Model"),T$r=o(" (MT5 model)"),M$r=l(),r5=a("li"),SMe=a("strong"),E$r=o("opt"),C$r=o(" \u2014 "),AY=a("a"),w$r=o("FlaxOPTModel"),A$r=o(" (OPT model)"),y$r=l(),t5=a("li"),RMe=a("strong"),L$r=o("pegasus"),x$r=o(" \u2014 "),yY=a("a"),$$r=o("FlaxPegasusModel"),k$r=o(" (Pegasus model)"),S$r=l(),a5=a("li"),PMe=a("strong"),R$r=o("roberta"),P$r=o(" \u2014 "),LY=a("a"),B$r=o("FlaxRobertaModel"),I$r=o(" (RoBERTa model)"),N$r=l(),n5=a("li"),BMe=a("strong"),q$r=o("roformer"),j$r=o(" \u2014 "),xY=a("a"),D$r=o("FlaxRoFormerModel"),G$r=o(" (RoFormer model)"),O$r=l(),s5=a("li"),IMe=a("strong"),V$r=o("t5"),X$r=o(" \u2014 "),$Y=a("a"),z$r=o("FlaxT5Model"),W$r=o(" (T5 model)"),Q$r=l(),l5=a("li"),NMe=a("strong"),H$r=o("vision-text-dual-encoder"),U$r=o(" \u2014 "),kY=a("a"),J$r=o("FlaxVisionTextDualEncoderModel"),Y$r=o(" (VisionTextDualEncoder model)"),K$r=l(),i5=a("li"),qMe=a("strong"),Z$r=o("vit"),ekr=o(" \u2014 "),SY=a("a"),okr=o("FlaxViTModel"),rkr=o(" (ViT model)"),tkr=l(),d5=a("li"),jMe=a("strong"),akr=o("wav2vec2"),nkr=o(" \u2014 "),RY=a("a"),skr=o("FlaxWav2Vec2Model"),lkr=o(" (Wav2Vec2 model)"),ikr=l(),c5=a("li"),DMe=a("strong"),dkr=o("xglm"),ckr=o(" \u2014 "),PY=a("a"),fkr=o("FlaxXGLMModel"),mkr=o(" (XGLM model)"),gkr=l(),f5=a("li"),GMe=a("strong"),hkr=o("xlm-roberta"),pkr=o(" \u2014 "),BY=a("a"),_kr=o("FlaxXLMRobertaModel"),ukr=o(" (XLM-RoBERTa model)"),bkr=l(),F(m5.$$.fragment),SDe=l(),Rc=a("h2"),g5=a("a"),OMe=a("span"),F(V9.$$.fragment),vkr=l(),VMe=a("span"),Fkr=o("FlaxAutoModelForCausalLM"),RDe=l(),mr=a("div"),F(X9.$$.fragment),Tkr=l(),Pc=a("p"),Mkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IY=a("a"),Ekr=o("from_pretrained()"),Ckr=o(" class method or the "),NY=a("a"),wkr=o("from_config()"),Akr=o(` class
method.`),ykr=l(),z9=a("p"),Lkr=o("This class cannot be instantiated directly using "),XMe=a("code"),xkr=o("__init__()"),$kr=o(" (throws an error)."),kkr=l(),Ot=a("div"),F(W9.$$.fragment),Skr=l(),zMe=a("p"),Rkr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pkr=l(),Bc=a("p"),Bkr=o(`Note:
Loading a model from its configuration file does `),WMe=a("strong"),Ikr=o("not"),Nkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),qkr=o("from_pretrained()"),jkr=o(" to load the model weights."),Dkr=l(),F(h5.$$.fragment),Gkr=l(),Dr=a("div"),F(Q9.$$.fragment),Okr=l(),QMe=a("p"),Vkr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xkr=l(),pn=a("p"),zkr=o("The model class to instantiate is selected based on the "),HMe=a("code"),Wkr=o("model_type"),Qkr=o(` property of the config object (either
passed as an argument or loaded from `),UMe=a("code"),Hkr=o("pretrained_model_name_or_path"),Ukr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=a("code"),Jkr=o("pretrained_model_name_or_path"),Ykr=o(":"),Kkr=l(),xe=a("ul"),p5=a("li"),YMe=a("strong"),Zkr=o("bart"),eSr=o(" \u2014 "),jY=a("a"),oSr=o("FlaxBartForCausalLM"),rSr=o(" (BART model)"),tSr=l(),_5=a("li"),KMe=a("strong"),aSr=o("bert"),nSr=o(" \u2014 "),DY=a("a"),sSr=o("FlaxBertForCausalLM"),lSr=o(" (BERT model)"),iSr=l(),u5=a("li"),ZMe=a("strong"),dSr=o("big_bird"),cSr=o(" \u2014 "),GY=a("a"),fSr=o("FlaxBigBirdForCausalLM"),mSr=o(" (BigBird model)"),gSr=l(),b5=a("li"),e4e=a("strong"),hSr=o("electra"),pSr=o(" \u2014 "),OY=a("a"),_Sr=o("FlaxElectraForCausalLM"),uSr=o(" (ELECTRA model)"),bSr=l(),v5=a("li"),o4e=a("strong"),vSr=o("gpt2"),FSr=o(" \u2014 "),VY=a("a"),TSr=o("FlaxGPT2LMHeadModel"),MSr=o(" (OpenAI GPT-2 model)"),ESr=l(),F5=a("li"),r4e=a("strong"),CSr=o("gpt_neo"),wSr=o(" \u2014 "),XY=a("a"),ASr=o("FlaxGPTNeoForCausalLM"),ySr=o(" (GPT Neo model)"),LSr=l(),T5=a("li"),t4e=a("strong"),xSr=o("gptj"),$Sr=o(" \u2014 "),zY=a("a"),kSr=o("FlaxGPTJForCausalLM"),SSr=o(" (GPT-J model)"),RSr=l(),M5=a("li"),a4e=a("strong"),PSr=o("opt"),BSr=o(" \u2014 "),WY=a("a"),ISr=o("FlaxOPTForCausalLM"),NSr=o(" (OPT model)"),qSr=l(),E5=a("li"),n4e=a("strong"),jSr=o("roberta"),DSr=o(" \u2014 "),QY=a("a"),GSr=o("FlaxRobertaForCausalLM"),OSr=o(" (RoBERTa model)"),VSr=l(),C5=a("li"),s4e=a("strong"),XSr=o("xglm"),zSr=o(" \u2014 "),HY=a("a"),WSr=o("FlaxXGLMForCausalLM"),QSr=o(" (XGLM model)"),HSr=l(),F(w5.$$.fragment),PDe=l(),Ic=a("h2"),A5=a("a"),l4e=a("span"),F(H9.$$.fragment),USr=l(),i4e=a("span"),JSr=o("FlaxAutoModelForPreTraining"),BDe=l(),gr=a("div"),F(U9.$$.fragment),YSr=l(),Nc=a("p"),KSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UY=a("a"),ZSr=o("from_pretrained()"),eRr=o(" class method or the "),JY=a("a"),oRr=o("from_config()"),rRr=o(` class
method.`),tRr=l(),J9=a("p"),aRr=o("This class cannot be instantiated directly using "),d4e=a("code"),nRr=o("__init__()"),sRr=o(" (throws an error)."),lRr=l(),Vt=a("div"),F(Y9.$$.fragment),iRr=l(),c4e=a("p"),dRr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cRr=l(),qc=a("p"),fRr=o(`Note:
Loading a model from its configuration file does `),f4e=a("strong"),mRr=o("not"),gRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("a"),hRr=o("from_pretrained()"),pRr=o(" to load the model weights."),_Rr=l(),F(y5.$$.fragment),uRr=l(),Gr=a("div"),F(K9.$$.fragment),bRr=l(),m4e=a("p"),vRr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FRr=l(),_n=a("p"),TRr=o("The model class to instantiate is selected based on the "),g4e=a("code"),MRr=o("model_type"),ERr=o(` property of the config object (either
passed as an argument or loaded from `),h4e=a("code"),CRr=o("pretrained_model_name_or_path"),wRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=a("code"),ARr=o("pretrained_model_name_or_path"),yRr=o(":"),LRr=l(),Ee=a("ul"),L5=a("li"),_4e=a("strong"),xRr=o("albert"),$Rr=o(" \u2014 "),KY=a("a"),kRr=o("FlaxAlbertForPreTraining"),SRr=o(" (ALBERT model)"),RRr=l(),x5=a("li"),u4e=a("strong"),PRr=o("bart"),BRr=o(" \u2014 "),ZY=a("a"),IRr=o("FlaxBartForConditionalGeneration"),NRr=o(" (BART model)"),qRr=l(),$5=a("li"),b4e=a("strong"),jRr=o("bert"),DRr=o(" \u2014 "),eK=a("a"),GRr=o("FlaxBertForPreTraining"),ORr=o(" (BERT model)"),VRr=l(),k5=a("li"),v4e=a("strong"),XRr=o("big_bird"),zRr=o(" \u2014 "),oK=a("a"),WRr=o("FlaxBigBirdForPreTraining"),QRr=o(" (BigBird model)"),HRr=l(),S5=a("li"),F4e=a("strong"),URr=o("electra"),JRr=o(" \u2014 "),rK=a("a"),YRr=o("FlaxElectraForPreTraining"),KRr=o(" (ELECTRA model)"),ZRr=l(),R5=a("li"),T4e=a("strong"),ePr=o("mbart"),oPr=o(" \u2014 "),tK=a("a"),rPr=o("FlaxMBartForConditionalGeneration"),tPr=o(" (mBART model)"),aPr=l(),P5=a("li"),M4e=a("strong"),nPr=o("mt5"),sPr=o(" \u2014 "),aK=a("a"),lPr=o("FlaxMT5ForConditionalGeneration"),iPr=o(" (MT5 model)"),dPr=l(),B5=a("li"),E4e=a("strong"),cPr=o("roberta"),fPr=o(" \u2014 "),nK=a("a"),mPr=o("FlaxRobertaForMaskedLM"),gPr=o(" (RoBERTa model)"),hPr=l(),I5=a("li"),C4e=a("strong"),pPr=o("roformer"),_Pr=o(" \u2014 "),sK=a("a"),uPr=o("FlaxRoFormerForMaskedLM"),bPr=o(" (RoFormer model)"),vPr=l(),N5=a("li"),w4e=a("strong"),FPr=o("t5"),TPr=o(" \u2014 "),lK=a("a"),MPr=o("FlaxT5ForConditionalGeneration"),EPr=o(" (T5 model)"),CPr=l(),q5=a("li"),A4e=a("strong"),wPr=o("wav2vec2"),APr=o(" \u2014 "),iK=a("a"),yPr=o("FlaxWav2Vec2ForPreTraining"),LPr=o(" (Wav2Vec2 model)"),xPr=l(),j5=a("li"),y4e=a("strong"),$Pr=o("xlm-roberta"),kPr=o(" \u2014 "),dK=a("a"),SPr=o("FlaxXLMRobertaForMaskedLM"),RPr=o(" (XLM-RoBERTa model)"),PPr=l(),F(D5.$$.fragment),IDe=l(),jc=a("h2"),G5=a("a"),L4e=a("span"),F(Z9.$$.fragment),BPr=l(),x4e=a("span"),IPr=o("FlaxAutoModelForMaskedLM"),NDe=l(),hr=a("div"),F(ex.$$.fragment),NPr=l(),Dc=a("p"),qPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cK=a("a"),jPr=o("from_pretrained()"),DPr=o(" class method or the "),fK=a("a"),GPr=o("from_config()"),OPr=o(` class
method.`),VPr=l(),ox=a("p"),XPr=o("This class cannot be instantiated directly using "),$4e=a("code"),zPr=o("__init__()"),WPr=o(" (throws an error)."),QPr=l(),Xt=a("div"),F(rx.$$.fragment),HPr=l(),k4e=a("p"),UPr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JPr=l(),Gc=a("p"),YPr=o(`Note:
Loading a model from its configuration file does `),S4e=a("strong"),KPr=o("not"),ZPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=a("a"),eBr=o("from_pretrained()"),oBr=o(" to load the model weights."),rBr=l(),F(O5.$$.fragment),tBr=l(),Or=a("div"),F(tx.$$.fragment),aBr=l(),R4e=a("p"),nBr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sBr=l(),un=a("p"),lBr=o("The model class to instantiate is selected based on the "),P4e=a("code"),iBr=o("model_type"),dBr=o(` property of the config object (either
passed as an argument or loaded from `),B4e=a("code"),cBr=o("pretrained_model_name_or_path"),fBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=a("code"),mBr=o("pretrained_model_name_or_path"),gBr=o(":"),hBr=l(),$e=a("ul"),V5=a("li"),N4e=a("strong"),pBr=o("albert"),_Br=o(" \u2014 "),gK=a("a"),uBr=o("FlaxAlbertForMaskedLM"),bBr=o(" (ALBERT model)"),vBr=l(),X5=a("li"),q4e=a("strong"),FBr=o("bart"),TBr=o(" \u2014 "),hK=a("a"),MBr=o("FlaxBartForConditionalGeneration"),EBr=o(" (BART model)"),CBr=l(),z5=a("li"),j4e=a("strong"),wBr=o("bert"),ABr=o(" \u2014 "),pK=a("a"),yBr=o("FlaxBertForMaskedLM"),LBr=o(" (BERT model)"),xBr=l(),W5=a("li"),D4e=a("strong"),$Br=o("big_bird"),kBr=o(" \u2014 "),_K=a("a"),SBr=o("FlaxBigBirdForMaskedLM"),RBr=o(" (BigBird model)"),PBr=l(),Q5=a("li"),G4e=a("strong"),BBr=o("distilbert"),IBr=o(" \u2014 "),uK=a("a"),NBr=o("FlaxDistilBertForMaskedLM"),qBr=o(" (DistilBERT model)"),jBr=l(),H5=a("li"),O4e=a("strong"),DBr=o("electra"),GBr=o(" \u2014 "),bK=a("a"),OBr=o("FlaxElectraForMaskedLM"),VBr=o(" (ELECTRA model)"),XBr=l(),U5=a("li"),V4e=a("strong"),zBr=o("mbart"),WBr=o(" \u2014 "),vK=a("a"),QBr=o("FlaxMBartForConditionalGeneration"),HBr=o(" (mBART model)"),UBr=l(),J5=a("li"),X4e=a("strong"),JBr=o("roberta"),YBr=o(" \u2014 "),FK=a("a"),KBr=o("FlaxRobertaForMaskedLM"),ZBr=o(" (RoBERTa model)"),eIr=l(),Y5=a("li"),z4e=a("strong"),oIr=o("roformer"),rIr=o(" \u2014 "),TK=a("a"),tIr=o("FlaxRoFormerForMaskedLM"),aIr=o(" (RoFormer model)"),nIr=l(),K5=a("li"),W4e=a("strong"),sIr=o("xlm-roberta"),lIr=o(" \u2014 "),MK=a("a"),iIr=o("FlaxXLMRobertaForMaskedLM"),dIr=o(" (XLM-RoBERTa model)"),cIr=l(),F(Z5.$$.fragment),qDe=l(),Oc=a("h2"),e3=a("a"),Q4e=a("span"),F(ax.$$.fragment),fIr=l(),H4e=a("span"),mIr=o("FlaxAutoModelForSeq2SeqLM"),jDe=l(),pr=a("div"),F(nx.$$.fragment),gIr=l(),Vc=a("p"),hIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EK=a("a"),pIr=o("from_pretrained()"),_Ir=o(" class method or the "),CK=a("a"),uIr=o("from_config()"),bIr=o(` class
method.`),vIr=l(),sx=a("p"),FIr=o("This class cannot be instantiated directly using "),U4e=a("code"),TIr=o("__init__()"),MIr=o(" (throws an error)."),EIr=l(),zt=a("div"),F(lx.$$.fragment),CIr=l(),J4e=a("p"),wIr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),AIr=l(),Xc=a("p"),yIr=o(`Note:
Loading a model from its configuration file does `),Y4e=a("strong"),LIr=o("not"),xIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),$Ir=o("from_pretrained()"),kIr=o(" to load the model weights."),SIr=l(),F(o3.$$.fragment),RIr=l(),Vr=a("div"),F(ix.$$.fragment),PIr=l(),K4e=a("p"),BIr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),IIr=l(),bn=a("p"),NIr=o("The model class to instantiate is selected based on the "),Z4e=a("code"),qIr=o("model_type"),jIr=o(` property of the config object (either
passed as an argument or loaded from `),eEe=a("code"),DIr=o("pretrained_model_name_or_path"),GIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=a("code"),OIr=o("pretrained_model_name_or_path"),VIr=o(":"),XIr=l(),Pe=a("ul"),r3=a("li"),rEe=a("strong"),zIr=o("bart"),WIr=o(" \u2014 "),AK=a("a"),QIr=o("FlaxBartForConditionalGeneration"),HIr=o(" (BART model)"),UIr=l(),t3=a("li"),tEe=a("strong"),JIr=o("blenderbot"),YIr=o(" \u2014 "),yK=a("a"),KIr=o("FlaxBlenderbotForConditionalGeneration"),ZIr=o(" (Blenderbot model)"),eNr=l(),a3=a("li"),aEe=a("strong"),oNr=o("blenderbot-small"),rNr=o(" \u2014 "),LK=a("a"),tNr=o("FlaxBlenderbotSmallForConditionalGeneration"),aNr=o(" (BlenderbotSmall model)"),nNr=l(),n3=a("li"),nEe=a("strong"),sNr=o("encoder-decoder"),lNr=o(" \u2014 "),xK=a("a"),iNr=o("FlaxEncoderDecoderModel"),dNr=o(" (Encoder decoder model)"),cNr=l(),s3=a("li"),sEe=a("strong"),fNr=o("marian"),mNr=o(" \u2014 "),$K=a("a"),gNr=o("FlaxMarianMTModel"),hNr=o(" (Marian model)"),pNr=l(),l3=a("li"),lEe=a("strong"),_Nr=o("mbart"),uNr=o(" \u2014 "),kK=a("a"),bNr=o("FlaxMBartForConditionalGeneration"),vNr=o(" (mBART model)"),FNr=l(),i3=a("li"),iEe=a("strong"),TNr=o("mt5"),MNr=o(" \u2014 "),SK=a("a"),ENr=o("FlaxMT5ForConditionalGeneration"),CNr=o(" (MT5 model)"),wNr=l(),d3=a("li"),dEe=a("strong"),ANr=o("pegasus"),yNr=o(" \u2014 "),RK=a("a"),LNr=o("FlaxPegasusForConditionalGeneration"),xNr=o(" (Pegasus model)"),$Nr=l(),c3=a("li"),cEe=a("strong"),kNr=o("t5"),SNr=o(" \u2014 "),PK=a("a"),RNr=o("FlaxT5ForConditionalGeneration"),PNr=o(" (T5 model)"),BNr=l(),F(f3.$$.fragment),DDe=l(),zc=a("h2"),m3=a("a"),fEe=a("span"),F(dx.$$.fragment),INr=l(),mEe=a("span"),NNr=o("FlaxAutoModelForSequenceClassification"),GDe=l(),_r=a("div"),F(cx.$$.fragment),qNr=l(),Wc=a("p"),jNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BK=a("a"),DNr=o("from_pretrained()"),GNr=o(" class method or the "),IK=a("a"),ONr=o("from_config()"),VNr=o(` class
method.`),XNr=l(),fx=a("p"),zNr=o("This class cannot be instantiated directly using "),gEe=a("code"),WNr=o("__init__()"),QNr=o(" (throws an error)."),HNr=l(),Wt=a("div"),F(mx.$$.fragment),UNr=l(),hEe=a("p"),JNr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YNr=l(),Qc=a("p"),KNr=o(`Note:
Loading a model from its configuration file does `),pEe=a("strong"),ZNr=o("not"),eqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=a("a"),oqr=o("from_pretrained()"),rqr=o(" to load the model weights."),tqr=l(),F(g3.$$.fragment),aqr=l(),Xr=a("div"),F(gx.$$.fragment),nqr=l(),_Ee=a("p"),sqr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lqr=l(),vn=a("p"),iqr=o("The model class to instantiate is selected based on the "),uEe=a("code"),dqr=o("model_type"),cqr=o(` property of the config object (either
passed as an argument or loaded from `),bEe=a("code"),fqr=o("pretrained_model_name_or_path"),mqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=a("code"),gqr=o("pretrained_model_name_or_path"),hqr=o(":"),pqr=l(),ke=a("ul"),h3=a("li"),FEe=a("strong"),_qr=o("albert"),uqr=o(" \u2014 "),qK=a("a"),bqr=o("FlaxAlbertForSequenceClassification"),vqr=o(" (ALBERT model)"),Fqr=l(),p3=a("li"),TEe=a("strong"),Tqr=o("bart"),Mqr=o(" \u2014 "),jK=a("a"),Eqr=o("FlaxBartForSequenceClassification"),Cqr=o(" (BART model)"),wqr=l(),_3=a("li"),MEe=a("strong"),Aqr=o("bert"),yqr=o(" \u2014 "),DK=a("a"),Lqr=o("FlaxBertForSequenceClassification"),xqr=o(" (BERT model)"),$qr=l(),u3=a("li"),EEe=a("strong"),kqr=o("big_bird"),Sqr=o(" \u2014 "),GK=a("a"),Rqr=o("FlaxBigBirdForSequenceClassification"),Pqr=o(" (BigBird model)"),Bqr=l(),b3=a("li"),CEe=a("strong"),Iqr=o("distilbert"),Nqr=o(" \u2014 "),OK=a("a"),qqr=o("FlaxDistilBertForSequenceClassification"),jqr=o(" (DistilBERT model)"),Dqr=l(),v3=a("li"),wEe=a("strong"),Gqr=o("electra"),Oqr=o(" \u2014 "),VK=a("a"),Vqr=o("FlaxElectraForSequenceClassification"),Xqr=o(" (ELECTRA model)"),zqr=l(),F3=a("li"),AEe=a("strong"),Wqr=o("mbart"),Qqr=o(" \u2014 "),XK=a("a"),Hqr=o("FlaxMBartForSequenceClassification"),Uqr=o(" (mBART model)"),Jqr=l(),T3=a("li"),yEe=a("strong"),Yqr=o("roberta"),Kqr=o(" \u2014 "),zK=a("a"),Zqr=o("FlaxRobertaForSequenceClassification"),ejr=o(" (RoBERTa model)"),ojr=l(),M3=a("li"),LEe=a("strong"),rjr=o("roformer"),tjr=o(" \u2014 "),WK=a("a"),ajr=o("FlaxRoFormerForSequenceClassification"),njr=o(" (RoFormer model)"),sjr=l(),E3=a("li"),xEe=a("strong"),ljr=o("xlm-roberta"),ijr=o(" \u2014 "),QK=a("a"),djr=o("FlaxXLMRobertaForSequenceClassification"),cjr=o(" (XLM-RoBERTa model)"),fjr=l(),F(C3.$$.fragment),ODe=l(),Hc=a("h2"),w3=a("a"),$Ee=a("span"),F(hx.$$.fragment),mjr=l(),kEe=a("span"),gjr=o("FlaxAutoModelForQuestionAnswering"),VDe=l(),ur=a("div"),F(px.$$.fragment),hjr=l(),Uc=a("p"),pjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HK=a("a"),_jr=o("from_pretrained()"),ujr=o(" class method or the "),UK=a("a"),bjr=o("from_config()"),vjr=o(` class
method.`),Fjr=l(),_x=a("p"),Tjr=o("This class cannot be instantiated directly using "),SEe=a("code"),Mjr=o("__init__()"),Ejr=o(" (throws an error)."),Cjr=l(),Qt=a("div"),F(ux.$$.fragment),wjr=l(),REe=a("p"),Ajr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yjr=l(),Jc=a("p"),Ljr=o(`Note:
Loading a model from its configuration file does `),PEe=a("strong"),xjr=o("not"),$jr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),kjr=o("from_pretrained()"),Sjr=o(" to load the model weights."),Rjr=l(),F(A3.$$.fragment),Pjr=l(),zr=a("div"),F(bx.$$.fragment),Bjr=l(),BEe=a("p"),Ijr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Njr=l(),Fn=a("p"),qjr=o("The model class to instantiate is selected based on the "),IEe=a("code"),jjr=o("model_type"),Djr=o(` property of the config object (either
passed as an argument or loaded from `),NEe=a("code"),Gjr=o("pretrained_model_name_or_path"),Ojr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=a("code"),Vjr=o("pretrained_model_name_or_path"),Xjr=o(":"),zjr=l(),Se=a("ul"),y3=a("li"),jEe=a("strong"),Wjr=o("albert"),Qjr=o(" \u2014 "),YK=a("a"),Hjr=o("FlaxAlbertForQuestionAnswering"),Ujr=o(" (ALBERT model)"),Jjr=l(),L3=a("li"),DEe=a("strong"),Yjr=o("bart"),Kjr=o(" \u2014 "),KK=a("a"),Zjr=o("FlaxBartForQuestionAnswering"),eDr=o(" (BART model)"),oDr=l(),x3=a("li"),GEe=a("strong"),rDr=o("bert"),tDr=o(" \u2014 "),ZK=a("a"),aDr=o("FlaxBertForQuestionAnswering"),nDr=o(" (BERT model)"),sDr=l(),$3=a("li"),OEe=a("strong"),lDr=o("big_bird"),iDr=o(" \u2014 "),eZ=a("a"),dDr=o("FlaxBigBirdForQuestionAnswering"),cDr=o(" (BigBird model)"),fDr=l(),k3=a("li"),VEe=a("strong"),mDr=o("distilbert"),gDr=o(" \u2014 "),oZ=a("a"),hDr=o("FlaxDistilBertForQuestionAnswering"),pDr=o(" (DistilBERT model)"),_Dr=l(),S3=a("li"),XEe=a("strong"),uDr=o("electra"),bDr=o(" \u2014 "),rZ=a("a"),vDr=o("FlaxElectraForQuestionAnswering"),FDr=o(" (ELECTRA model)"),TDr=l(),R3=a("li"),zEe=a("strong"),MDr=o("mbart"),EDr=o(" \u2014 "),tZ=a("a"),CDr=o("FlaxMBartForQuestionAnswering"),wDr=o(" (mBART model)"),ADr=l(),P3=a("li"),WEe=a("strong"),yDr=o("roberta"),LDr=o(" \u2014 "),aZ=a("a"),xDr=o("FlaxRobertaForQuestionAnswering"),$Dr=o(" (RoBERTa model)"),kDr=l(),B3=a("li"),QEe=a("strong"),SDr=o("roformer"),RDr=o(" \u2014 "),nZ=a("a"),PDr=o("FlaxRoFormerForQuestionAnswering"),BDr=o(" (RoFormer model)"),IDr=l(),I3=a("li"),HEe=a("strong"),NDr=o("xlm-roberta"),qDr=o(" \u2014 "),sZ=a("a"),jDr=o("FlaxXLMRobertaForQuestionAnswering"),DDr=o(" (XLM-RoBERTa model)"),GDr=l(),F(N3.$$.fragment),XDe=l(),Yc=a("h2"),q3=a("a"),UEe=a("span"),F(vx.$$.fragment),ODr=l(),JEe=a("span"),VDr=o("FlaxAutoModelForTokenClassification"),zDe=l(),br=a("div"),F(Fx.$$.fragment),XDr=l(),Kc=a("p"),zDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lZ=a("a"),WDr=o("from_pretrained()"),QDr=o(" class method or the "),iZ=a("a"),HDr=o("from_config()"),UDr=o(` class
method.`),JDr=l(),Tx=a("p"),YDr=o("This class cannot be instantiated directly using "),YEe=a("code"),KDr=o("__init__()"),ZDr=o(" (throws an error)."),eGr=l(),Ht=a("div"),F(Mx.$$.fragment),oGr=l(),KEe=a("p"),rGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tGr=l(),Zc=a("p"),aGr=o(`Note:
Loading a model from its configuration file does `),ZEe=a("strong"),nGr=o("not"),sGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=a("a"),lGr=o("from_pretrained()"),iGr=o(" to load the model weights."),dGr=l(),F(j3.$$.fragment),cGr=l(),Wr=a("div"),F(Ex.$$.fragment),fGr=l(),eCe=a("p"),mGr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gGr=l(),Tn=a("p"),hGr=o("The model class to instantiate is selected based on the "),oCe=a("code"),pGr=o("model_type"),_Gr=o(` property of the config object (either
passed as an argument or loaded from `),rCe=a("code"),uGr=o("pretrained_model_name_or_path"),bGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=a("code"),vGr=o("pretrained_model_name_or_path"),FGr=o(":"),TGr=l(),Oe=a("ul"),D3=a("li"),aCe=a("strong"),MGr=o("albert"),EGr=o(" \u2014 "),cZ=a("a"),CGr=o("FlaxAlbertForTokenClassification"),wGr=o(" (ALBERT model)"),AGr=l(),G3=a("li"),nCe=a("strong"),yGr=o("bert"),LGr=o(" \u2014 "),fZ=a("a"),xGr=o("FlaxBertForTokenClassification"),$Gr=o(" (BERT model)"),kGr=l(),O3=a("li"),sCe=a("strong"),SGr=o("big_bird"),RGr=o(" \u2014 "),mZ=a("a"),PGr=o("FlaxBigBirdForTokenClassification"),BGr=o(" (BigBird model)"),IGr=l(),V3=a("li"),lCe=a("strong"),NGr=o("distilbert"),qGr=o(" \u2014 "),gZ=a("a"),jGr=o("FlaxDistilBertForTokenClassification"),DGr=o(" (DistilBERT model)"),GGr=l(),X3=a("li"),iCe=a("strong"),OGr=o("electra"),VGr=o(" \u2014 "),hZ=a("a"),XGr=o("FlaxElectraForTokenClassification"),zGr=o(" (ELECTRA model)"),WGr=l(),z3=a("li"),dCe=a("strong"),QGr=o("roberta"),HGr=o(" \u2014 "),pZ=a("a"),UGr=o("FlaxRobertaForTokenClassification"),JGr=o(" (RoBERTa model)"),YGr=l(),W3=a("li"),cCe=a("strong"),KGr=o("roformer"),ZGr=o(" \u2014 "),_Z=a("a"),eOr=o("FlaxRoFormerForTokenClassification"),oOr=o(" (RoFormer model)"),rOr=l(),Q3=a("li"),fCe=a("strong"),tOr=o("xlm-roberta"),aOr=o(" \u2014 "),uZ=a("a"),nOr=o("FlaxXLMRobertaForTokenClassification"),sOr=o(" (XLM-RoBERTa model)"),lOr=l(),F(H3.$$.fragment),WDe=l(),ef=a("h2"),U3=a("a"),mCe=a("span"),F(Cx.$$.fragment),iOr=l(),gCe=a("span"),dOr=o("FlaxAutoModelForMultipleChoice"),QDe=l(),vr=a("div"),F(wx.$$.fragment),cOr=l(),of=a("p"),fOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bZ=a("a"),mOr=o("from_pretrained()"),gOr=o(" class method or the "),vZ=a("a"),hOr=o("from_config()"),pOr=o(` class
method.`),_Or=l(),Ax=a("p"),uOr=o("This class cannot be instantiated directly using "),hCe=a("code"),bOr=o("__init__()"),vOr=o(" (throws an error)."),FOr=l(),Ut=a("div"),F(yx.$$.fragment),TOr=l(),pCe=a("p"),MOr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),EOr=l(),rf=a("p"),COr=o(`Note:
Loading a model from its configuration file does `),_Ce=a("strong"),wOr=o("not"),AOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FZ=a("a"),yOr=o("from_pretrained()"),LOr=o(" to load the model weights."),xOr=l(),F(J3.$$.fragment),$Or=l(),Qr=a("div"),F(Lx.$$.fragment),kOr=l(),uCe=a("p"),SOr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ROr=l(),Mn=a("p"),POr=o("The model class to instantiate is selected based on the "),bCe=a("code"),BOr=o("model_type"),IOr=o(` property of the config object (either
passed as an argument or loaded from `),vCe=a("code"),NOr=o("pretrained_model_name_or_path"),qOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=a("code"),jOr=o("pretrained_model_name_or_path"),DOr=o(":"),GOr=l(),Ve=a("ul"),Y3=a("li"),TCe=a("strong"),OOr=o("albert"),VOr=o(" \u2014 "),TZ=a("a"),XOr=o("FlaxAlbertForMultipleChoice"),zOr=o(" (ALBERT model)"),WOr=l(),K3=a("li"),MCe=a("strong"),QOr=o("bert"),HOr=o(" \u2014 "),MZ=a("a"),UOr=o("FlaxBertForMultipleChoice"),JOr=o(" (BERT model)"),YOr=l(),Z3=a("li"),ECe=a("strong"),KOr=o("big_bird"),ZOr=o(" \u2014 "),EZ=a("a"),eVr=o("FlaxBigBirdForMultipleChoice"),oVr=o(" (BigBird model)"),rVr=l(),e0=a("li"),CCe=a("strong"),tVr=o("distilbert"),aVr=o(" \u2014 "),CZ=a("a"),nVr=o("FlaxDistilBertForMultipleChoice"),sVr=o(" (DistilBERT model)"),lVr=l(),o0=a("li"),wCe=a("strong"),iVr=o("electra"),dVr=o(" \u2014 "),wZ=a("a"),cVr=o("FlaxElectraForMultipleChoice"),fVr=o(" (ELECTRA model)"),mVr=l(),r0=a("li"),ACe=a("strong"),gVr=o("roberta"),hVr=o(" \u2014 "),AZ=a("a"),pVr=o("FlaxRobertaForMultipleChoice"),_Vr=o(" (RoBERTa model)"),uVr=l(),t0=a("li"),yCe=a("strong"),bVr=o("roformer"),vVr=o(" \u2014 "),yZ=a("a"),FVr=o("FlaxRoFormerForMultipleChoice"),TVr=o(" (RoFormer model)"),MVr=l(),a0=a("li"),LCe=a("strong"),EVr=o("xlm-roberta"),CVr=o(" \u2014 "),LZ=a("a"),wVr=o("FlaxXLMRobertaForMultipleChoice"),AVr=o(" (XLM-RoBERTa model)"),yVr=l(),F(n0.$$.fragment),HDe=l(),tf=a("h2"),s0=a("a"),xCe=a("span"),F(xx.$$.fragment),LVr=l(),$Ce=a("span"),xVr=o("FlaxAutoModelForNextSentencePrediction"),UDe=l(),Fr=a("div"),F($x.$$.fragment),$Vr=l(),af=a("p"),kVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xZ=a("a"),SVr=o("from_pretrained()"),RVr=o(" class method or the "),$Z=a("a"),PVr=o("from_config()"),BVr=o(` class
method.`),IVr=l(),kx=a("p"),NVr=o("This class cannot be instantiated directly using "),kCe=a("code"),qVr=o("__init__()"),jVr=o(" (throws an error)."),DVr=l(),Jt=a("div"),F(Sx.$$.fragment),GVr=l(),SCe=a("p"),OVr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),VVr=l(),nf=a("p"),XVr=o(`Note:
Loading a model from its configuration file does `),RCe=a("strong"),zVr=o("not"),WVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=a("a"),QVr=o("from_pretrained()"),HVr=o(" to load the model weights."),UVr=l(),F(l0.$$.fragment),JVr=l(),Hr=a("div"),F(Rx.$$.fragment),YVr=l(),PCe=a("p"),KVr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ZVr=l(),En=a("p"),eXr=o("The model class to instantiate is selected based on the "),BCe=a("code"),oXr=o("model_type"),rXr=o(` property of the config object (either
passed as an argument or loaded from `),ICe=a("code"),tXr=o("pretrained_model_name_or_path"),aXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NCe=a("code"),nXr=o("pretrained_model_name_or_path"),sXr=o(":"),lXr=l(),qCe=a("ul"),i0=a("li"),jCe=a("strong"),iXr=o("bert"),dXr=o(" \u2014 "),SZ=a("a"),cXr=o("FlaxBertForNextSentencePrediction"),fXr=o(" (BERT model)"),mXr=l(),F(d0.$$.fragment),JDe=l(),sf=a("h2"),c0=a("a"),DCe=a("span"),F(Px.$$.fragment),gXr=l(),GCe=a("span"),hXr=o("FlaxAutoModelForImageClassification"),YDe=l(),Tr=a("div"),F(Bx.$$.fragment),pXr=l(),lf=a("p"),_Xr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RZ=a("a"),uXr=o("from_pretrained()"),bXr=o(" class method or the "),PZ=a("a"),vXr=o("from_config()"),FXr=o(` class
method.`),TXr=l(),Ix=a("p"),MXr=o("This class cannot be instantiated directly using "),OCe=a("code"),EXr=o("__init__()"),CXr=o(" (throws an error)."),wXr=l(),Yt=a("div"),F(Nx.$$.fragment),AXr=l(),VCe=a("p"),yXr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LXr=l(),df=a("p"),xXr=o(`Note:
Loading a model from its configuration file does `),XCe=a("strong"),$Xr=o("not"),kXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=a("a"),SXr=o("from_pretrained()"),RXr=o(" to load the model weights."),PXr=l(),F(f0.$$.fragment),BXr=l(),Ur=a("div"),F(qx.$$.fragment),IXr=l(),zCe=a("p"),NXr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qXr=l(),Cn=a("p"),jXr=o("The model class to instantiate is selected based on the "),WCe=a("code"),DXr=o("model_type"),GXr=o(` property of the config object (either
passed as an argument or loaded from `),QCe=a("code"),OXr=o("pretrained_model_name_or_path"),VXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=a("code"),XXr=o("pretrained_model_name_or_path"),zXr=o(":"),WXr=l(),jx=a("ul"),m0=a("li"),UCe=a("strong"),QXr=o("beit"),HXr=o(" \u2014 "),IZ=a("a"),UXr=o("FlaxBeitForImageClassification"),JXr=o(" (BEiT model)"),YXr=l(),g0=a("li"),JCe=a("strong"),KXr=o("vit"),ZXr=o(" \u2014 "),NZ=a("a"),ezr=o("FlaxViTForImageClassification"),ozr=o(" (ViT model)"),rzr=l(),F(h0.$$.fragment),KDe=l(),cf=a("h2"),p0=a("a"),YCe=a("span"),F(Dx.$$.fragment),tzr=l(),KCe=a("span"),azr=o("FlaxAutoModelForVision2Seq"),ZDe=l(),Mr=a("div"),F(Gx.$$.fragment),nzr=l(),ff=a("p"),szr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qZ=a("a"),lzr=o("from_pretrained()"),izr=o(" class method or the "),jZ=a("a"),dzr=o("from_config()"),czr=o(` class
method.`),fzr=l(),Ox=a("p"),mzr=o("This class cannot be instantiated directly using "),ZCe=a("code"),gzr=o("__init__()"),hzr=o(" (throws an error)."),pzr=l(),Kt=a("div"),F(Vx.$$.fragment),_zr=l(),e5e=a("p"),uzr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bzr=l(),mf=a("p"),vzr=o(`Note:
Loading a model from its configuration file does `),o5e=a("strong"),Fzr=o("not"),Tzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=a("a"),Mzr=o("from_pretrained()"),Ezr=o(" to load the model weights."),Czr=l(),F(_0.$$.fragment),wzr=l(),Jr=a("div"),F(Xx.$$.fragment),Azr=l(),r5e=a("p"),yzr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Lzr=l(),wn=a("p"),xzr=o("The model class to instantiate is selected based on the "),t5e=a("code"),$zr=o("model_type"),kzr=o(` property of the config object (either
passed as an argument or loaded from `),a5e=a("code"),Szr=o("pretrained_model_name_or_path"),Rzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=a("code"),Pzr=o("pretrained_model_name_or_path"),Bzr=o(":"),Izr=l(),s5e=a("ul"),u0=a("li"),l5e=a("strong"),Nzr=o("vision-encoder-decoder"),qzr=o(" \u2014 "),GZ=a("a"),jzr=o("FlaxVisionEncoderDecoderModel"),Dzr=o(" (Vision Encoder decoder model)"),Gzr=l(),F(b0.$$.fragment),this.h()},l(f){const u=HSt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var zx=s(p);m=n(zx,"A",{id:!0,class:!0,href:!0});var i5e=s(m);_=n(i5e,"SPAN",{});var d5e=s(_);T(d.$$.fragment,d5e),d5e.forEach(t),i5e.forEach(t),h=i(zx),Mo=n(zx,"SPAN",{});var c5e=s(Mo);mi=r(c5e,"Auto Classes"),c5e.forEach(t),zx.forEach(t),_f=i(f),rt=n(f,"P",{});var Wx=s(rt);gi=r(Wx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(Wx,"CODE",{});var f5e=s(hi);IA=r(f5e,"from_pretrained()"),f5e.forEach(t),uf=r(Wx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Wx.forEach(t),Ge=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var m5e=s(yn);NA=r(m5e,"AutoConfig"),m5e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var g5e=s(xn);qA=r(g5e,"AutoModel"),g5e.forEach(t),_i=r(An,`, and
`),$n=n(An,"A",{href:!0});var h5e=s($n);jA=r(h5e,"AutoTokenizer"),h5e.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Qx=s(Ae);nk=r(Qx,"will create a model that is an instance of "),bi=n(Qx,"A",{href:!0});var p5e=s(bi);sk=r(p5e,"BertModel"),p5e.forEach(t),lk=r(Qx,"."),Qx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Hx=s(wa);ik=r(Hx,"There is one class of "),vf=n(Hx,"CODE",{});var _5e=s(vf);dk=r(_5e,"AutoModel"),_5e.forEach(t),iVe=r(Hx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Hx.forEach(t),Yqe=i(f),vi=n(f,"H2",{class:!0});var Ux=s(vi);Ff=n(Ux,"A",{id:!0,class:!0,href:!0});var u5e=s(Ff);Poe=n(u5e,"SPAN",{});var b5e=s(Poe);T(DA.$$.fragment,b5e),b5e.forEach(t),u5e.forEach(t),dVe=i(Ux),Boe=n(Ux,"SPAN",{});var v5e=s(Boe);cVe=r(v5e,"Extending the Auto Classes"),v5e.forEach(t),Ux.forEach(t),Kqe=i(f),kn=n(f,"P",{});var gf=s(kn);fVe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ioe=n(gf,"CODE",{});var F5e=s(Ioe);mVe=r(F5e,"NewModel"),F5e.forEach(t),gVe=r(gf,", make sure you have a "),Noe=n(gf,"CODE",{});var T5e=s(Noe);hVe=r(T5e,"NewModelConfig"),T5e.forEach(t),pVe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),Zqe=i(f),T(GA.$$.fragment,f),eje=i(f),ck=n(f,"P",{});var M5e=s(ck);_Ve=r(M5e,"You will then be able to use the auto classes like you would usually do!"),M5e.forEach(t),oje=i(f),T(Tf.$$.fragment,f),rje=i(f),Fi=n(f,"H2",{class:!0});var Jx=s(Fi);Mf=n(Jx,"A",{id:!0,class:!0,href:!0});var E5e=s(Mf);qoe=n(E5e,"SPAN",{});var C5e=s(qoe);T(OA.$$.fragment,C5e),C5e.forEach(t),E5e.forEach(t),uVe=i(Jx),joe=n(Jx,"SPAN",{});var w5e=s(joe);bVe=r(w5e,"AutoConfig"),w5e.forEach(t),Jx.forEach(t),tje=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(VA.$$.fragment,et),vVe=i(et),XA=n(et,"P",{});var Yx=s(XA);FVe=r(Yx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),fk=n(Yx,"A",{href:!0});var A5e=s(fk);TVe=r(A5e,"from_pretrained()"),A5e.forEach(t),MVe=r(Yx," class method."),Yx.forEach(t),EVe=i(et),zA=n(et,"P",{});var Kx=s(zA);CVe=r(Kx,"This class cannot be instantiated directly using "),Doe=n(Kx,"CODE",{});var y5e=s(Doe);wVe=r(y5e,"__init__()"),y5e.forEach(t),AVe=r(Kx," (throws an error)."),Kx.forEach(t),yVe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(WA.$$.fragment,ot),LVe=i(ot),Goe=n(ot,"P",{});var L5e=s(Goe);xVe=r(L5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),L5e.forEach(t),$Ve=i(ot),Ti=n(ot,"P",{});var hf=s(Ti);kVe=r(hf,"The configuration class to instantiate is selected based on the "),Ooe=n(hf,"CODE",{});var x5e=s(Ooe);SVe=r(x5e,"model_type"),x5e.forEach(t),RVe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Voe=n(hf,"CODE",{});var $5e=s(Voe);PVe=r($5e,"pretrained_model_name_or_path"),$5e.forEach(t),BVe=r(hf,":"),hf.forEach(t),IVe=i(ot),A=n(ot,"UL",{});var y=s(A);Ef=n(y,"LI",{});var v0=s(Ef);Xoe=n(v0,"STRONG",{});var k5e=s(Xoe);NVe=r(k5e,"albert"),k5e.forEach(t),qVe=r(v0," \u2014 "),mk=n(v0,"A",{href:!0});var S5e=s(mk);jVe=r(S5e,"AlbertConfig"),S5e.forEach(t),DVe=r(v0," (ALBERT model)"),v0.forEach(t),GVe=i(y),Cf=n(y,"LI",{});var F0=s(Cf);zoe=n(F0,"STRONG",{});var R5e=s(zoe);OVe=r(R5e,"bart"),R5e.forEach(t),VVe=r(F0," \u2014 "),gk=n(F0,"A",{href:!0});var P5e=s(gk);XVe=r(P5e,"BartConfig"),P5e.forEach(t),zVe=r(F0," (BART model)"),F0.forEach(t),WVe=i(y),wf=n(y,"LI",{});var T0=s(wf);Woe=n(T0,"STRONG",{});var B5e=s(Woe);QVe=r(B5e,"beit"),B5e.forEach(t),HVe=r(T0," \u2014 "),hk=n(T0,"A",{href:!0});var I5e=s(hk);UVe=r(I5e,"BeitConfig"),I5e.forEach(t),JVe=r(T0," (BEiT model)"),T0.forEach(t),YVe=i(y),Af=n(y,"LI",{});var M0=s(Af);Qoe=n(M0,"STRONG",{});var N5e=s(Qoe);KVe=r(N5e,"bert"),N5e.forEach(t),ZVe=r(M0," \u2014 "),pk=n(M0,"A",{href:!0});var q5e=s(pk);eXe=r(q5e,"BertConfig"),q5e.forEach(t),oXe=r(M0," (BERT model)"),M0.forEach(t),rXe=i(y),yf=n(y,"LI",{});var E0=s(yf);Hoe=n(E0,"STRONG",{});var j5e=s(Hoe);tXe=r(j5e,"bert-generation"),j5e.forEach(t),aXe=r(E0," \u2014 "),_k=n(E0,"A",{href:!0});var D5e=s(_k);nXe=r(D5e,"BertGenerationConfig"),D5e.forEach(t),sXe=r(E0," (Bert Generation model)"),E0.forEach(t),lXe=i(y),Lf=n(y,"LI",{});var C0=s(Lf);Uoe=n(C0,"STRONG",{});var G5e=s(Uoe);iXe=r(G5e,"big_bird"),G5e.forEach(t),dXe=r(C0," \u2014 "),uk=n(C0,"A",{href:!0});var O5e=s(uk);cXe=r(O5e,"BigBirdConfig"),O5e.forEach(t),fXe=r(C0," (BigBird model)"),C0.forEach(t),mXe=i(y),xf=n(y,"LI",{});var w0=s(xf);Joe=n(w0,"STRONG",{});var V5e=s(Joe);gXe=r(V5e,"bigbird_pegasus"),V5e.forEach(t),hXe=r(w0," \u2014 "),bk=n(w0,"A",{href:!0});var X5e=s(bk);pXe=r(X5e,"BigBirdPegasusConfig"),X5e.forEach(t),_Xe=r(w0," (BigBird-Pegasus model)"),w0.forEach(t),uXe=i(y),$f=n(y,"LI",{});var A0=s($f);Yoe=n(A0,"STRONG",{});var z5e=s(Yoe);bXe=r(z5e,"blenderbot"),z5e.forEach(t),vXe=r(A0," \u2014 "),vk=n(A0,"A",{href:!0});var W5e=s(vk);FXe=r(W5e,"BlenderbotConfig"),W5e.forEach(t),TXe=r(A0," (Blenderbot model)"),A0.forEach(t),MXe=i(y),kf=n(y,"LI",{});var y0=s(kf);Koe=n(y0,"STRONG",{});var Q5e=s(Koe);EXe=r(Q5e,"blenderbot-small"),Q5e.forEach(t),CXe=r(y0," \u2014 "),Fk=n(y0,"A",{href:!0});var H5e=s(Fk);wXe=r(H5e,"BlenderbotSmallConfig"),H5e.forEach(t),AXe=r(y0," (BlenderbotSmall model)"),y0.forEach(t),yXe=i(y),Sf=n(y,"LI",{});var L0=s(Sf);Zoe=n(L0,"STRONG",{});var U5e=s(Zoe);LXe=r(U5e,"camembert"),U5e.forEach(t),xXe=r(L0," \u2014 "),Tk=n(L0,"A",{href:!0});var J5e=s(Tk);$Xe=r(J5e,"CamembertConfig"),J5e.forEach(t),kXe=r(L0," (CamemBERT model)"),L0.forEach(t),SXe=i(y),Rf=n(y,"LI",{});var x0=s(Rf);ere=n(x0,"STRONG",{});var Y5e=s(ere);RXe=r(Y5e,"canine"),Y5e.forEach(t),PXe=r(x0," \u2014 "),Mk=n(x0,"A",{href:!0});var K5e=s(Mk);BXe=r(K5e,"CanineConfig"),K5e.forEach(t),IXe=r(x0," (CANINE model)"),x0.forEach(t),NXe=i(y),Pf=n(y,"LI",{});var $0=s(Pf);ore=n($0,"STRONG",{});var Z5e=s(ore);qXe=r(Z5e,"clip"),Z5e.forEach(t),jXe=r($0," \u2014 "),Ek=n($0,"A",{href:!0});var e3e=s(Ek);DXe=r(e3e,"CLIPConfig"),e3e.forEach(t),GXe=r($0," (CLIP model)"),$0.forEach(t),OXe=i(y),Bf=n(y,"LI",{});var k0=s(Bf);rre=n(k0,"STRONG",{});var o3e=s(rre);VXe=r(o3e,"convbert"),o3e.forEach(t),XXe=r(k0," \u2014 "),Ck=n(k0,"A",{href:!0});var r3e=s(Ck);zXe=r(r3e,"ConvBertConfig"),r3e.forEach(t),WXe=r(k0," (ConvBERT model)"),k0.forEach(t),QXe=i(y),If=n(y,"LI",{});var S0=s(If);tre=n(S0,"STRONG",{});var t3e=s(tre);HXe=r(t3e,"convnext"),t3e.forEach(t),UXe=r(S0," \u2014 "),wk=n(S0,"A",{href:!0});var a3e=s(wk);JXe=r(a3e,"ConvNextConfig"),a3e.forEach(t),YXe=r(S0," (ConvNeXT model)"),S0.forEach(t),KXe=i(y),Nf=n(y,"LI",{});var R0=s(Nf);are=n(R0,"STRONG",{});var n3e=s(are);ZXe=r(n3e,"ctrl"),n3e.forEach(t),eze=r(R0," \u2014 "),Ak=n(R0,"A",{href:!0});var s3e=s(Ak);oze=r(s3e,"CTRLConfig"),s3e.forEach(t),rze=r(R0," (CTRL model)"),R0.forEach(t),tze=i(y),qf=n(y,"LI",{});var P0=s(qf);nre=n(P0,"STRONG",{});var l3e=s(nre);aze=r(l3e,"cvt"),l3e.forEach(t),nze=r(P0," \u2014 "),yk=n(P0,"A",{href:!0});var i3e=s(yk);sze=r(i3e,"CvtConfig"),i3e.forEach(t),lze=r(P0," (CvT model)"),P0.forEach(t),ize=i(y),jf=n(y,"LI",{});var B0=s(jf);sre=n(B0,"STRONG",{});var d3e=s(sre);dze=r(d3e,"data2vec-audio"),d3e.forEach(t),cze=r(B0," \u2014 "),Lk=n(B0,"A",{href:!0});var c3e=s(Lk);fze=r(c3e,"Data2VecAudioConfig"),c3e.forEach(t),mze=r(B0," (Data2VecAudio model)"),B0.forEach(t),gze=i(y),Df=n(y,"LI",{});var I0=s(Df);lre=n(I0,"STRONG",{});var f3e=s(lre);hze=r(f3e,"data2vec-text"),f3e.forEach(t),pze=r(I0," \u2014 "),xk=n(I0,"A",{href:!0});var m3e=s(xk);_ze=r(m3e,"Data2VecTextConfig"),m3e.forEach(t),uze=r(I0," (Data2VecText model)"),I0.forEach(t),bze=i(y),Gf=n(y,"LI",{});var N0=s(Gf);ire=n(N0,"STRONG",{});var g3e=s(ire);vze=r(g3e,"data2vec-vision"),g3e.forEach(t),Fze=r(N0," \u2014 "),$k=n(N0,"A",{href:!0});var h3e=s($k);Tze=r(h3e,"Data2VecVisionConfig"),h3e.forEach(t),Mze=r(N0," (Data2VecVision model)"),N0.forEach(t),Eze=i(y),Of=n(y,"LI",{});var q0=s(Of);dre=n(q0,"STRONG",{});var p3e=s(dre);Cze=r(p3e,"deberta"),p3e.forEach(t),wze=r(q0," \u2014 "),kk=n(q0,"A",{href:!0});var _3e=s(kk);Aze=r(_3e,"DebertaConfig"),_3e.forEach(t),yze=r(q0," (DeBERTa model)"),q0.forEach(t),Lze=i(y),Vf=n(y,"LI",{});var j0=s(Vf);cre=n(j0,"STRONG",{});var u3e=s(cre);xze=r(u3e,"deberta-v2"),u3e.forEach(t),$ze=r(j0," \u2014 "),Sk=n(j0,"A",{href:!0});var b3e=s(Sk);kze=r(b3e,"DebertaV2Config"),b3e.forEach(t),Sze=r(j0," (DeBERTa-v2 model)"),j0.forEach(t),Rze=i(y),Xf=n(y,"LI",{});var D0=s(Xf);fre=n(D0,"STRONG",{});var v3e=s(fre);Pze=r(v3e,"decision_transformer"),v3e.forEach(t),Bze=r(D0," \u2014 "),Rk=n(D0,"A",{href:!0});var F3e=s(Rk);Ize=r(F3e,"DecisionTransformerConfig"),F3e.forEach(t),Nze=r(D0," (Decision Transformer model)"),D0.forEach(t),qze=i(y),zf=n(y,"LI",{});var G0=s(zf);mre=n(G0,"STRONG",{});var T3e=s(mre);jze=r(T3e,"deit"),T3e.forEach(t),Dze=r(G0," \u2014 "),Pk=n(G0,"A",{href:!0});var Vzr=s(Pk);Gze=r(Vzr,"DeiTConfig"),Vzr.forEach(t),Oze=r(G0," (DeiT model)"),G0.forEach(t),Vze=i(y),Wf=n(y,"LI",{});var M3e=s(Wf);gre=n(M3e,"STRONG",{});var Xzr=s(gre);Xze=r(Xzr,"detr"),Xzr.forEach(t),zze=r(M3e," \u2014 "),Bk=n(M3e,"A",{href:!0});var zzr=s(Bk);Wze=r(zzr,"DetrConfig"),zzr.forEach(t),Qze=r(M3e," (DETR model)"),M3e.forEach(t),Hze=i(y),Qf=n(y,"LI",{});var E3e=s(Qf);hre=n(E3e,"STRONG",{});var Wzr=s(hre);Uze=r(Wzr,"distilbert"),Wzr.forEach(t),Jze=r(E3e," \u2014 "),Ik=n(E3e,"A",{href:!0});var Qzr=s(Ik);Yze=r(Qzr,"DistilBertConfig"),Qzr.forEach(t),Kze=r(E3e," (DistilBERT model)"),E3e.forEach(t),Zze=i(y),Hf=n(y,"LI",{});var C3e=s(Hf);pre=n(C3e,"STRONG",{});var Hzr=s(pre);eWe=r(Hzr,"dpr"),Hzr.forEach(t),oWe=r(C3e," \u2014 "),Nk=n(C3e,"A",{href:!0});var Uzr=s(Nk);rWe=r(Uzr,"DPRConfig"),Uzr.forEach(t),tWe=r(C3e," (DPR model)"),C3e.forEach(t),aWe=i(y),Uf=n(y,"LI",{});var w3e=s(Uf);_re=n(w3e,"STRONG",{});var Jzr=s(_re);nWe=r(Jzr,"dpt"),Jzr.forEach(t),sWe=r(w3e," \u2014 "),qk=n(w3e,"A",{href:!0});var Yzr=s(qk);lWe=r(Yzr,"DPTConfig"),Yzr.forEach(t),iWe=r(w3e," (DPT model)"),w3e.forEach(t),dWe=i(y),Jf=n(y,"LI",{});var A3e=s(Jf);ure=n(A3e,"STRONG",{});var Kzr=s(ure);cWe=r(Kzr,"electra"),Kzr.forEach(t),fWe=r(A3e," \u2014 "),jk=n(A3e,"A",{href:!0});var Zzr=s(jk);mWe=r(Zzr,"ElectraConfig"),Zzr.forEach(t),gWe=r(A3e," (ELECTRA model)"),A3e.forEach(t),hWe=i(y),Yf=n(y,"LI",{});var y3e=s(Yf);bre=n(y3e,"STRONG",{});var eWr=s(bre);pWe=r(eWr,"encoder-decoder"),eWr.forEach(t),_We=r(y3e," \u2014 "),Dk=n(y3e,"A",{href:!0});var oWr=s(Dk);uWe=r(oWr,"EncoderDecoderConfig"),oWr.forEach(t),bWe=r(y3e," (Encoder decoder model)"),y3e.forEach(t),vWe=i(y),Kf=n(y,"LI",{});var L3e=s(Kf);vre=n(L3e,"STRONG",{});var rWr=s(vre);FWe=r(rWr,"flaubert"),rWr.forEach(t),TWe=r(L3e," \u2014 "),Gk=n(L3e,"A",{href:!0});var tWr=s(Gk);MWe=r(tWr,"FlaubertConfig"),tWr.forEach(t),EWe=r(L3e," (FlauBERT model)"),L3e.forEach(t),CWe=i(y),Zf=n(y,"LI",{});var x3e=s(Zf);Fre=n(x3e,"STRONG",{});var aWr=s(Fre);wWe=r(aWr,"flava"),aWr.forEach(t),AWe=r(x3e," \u2014 "),Ok=n(x3e,"A",{href:!0});var nWr=s(Ok);yWe=r(nWr,"FlavaConfig"),nWr.forEach(t),LWe=r(x3e," (FLAVA model)"),x3e.forEach(t),xWe=i(y),em=n(y,"LI",{});var $3e=s(em);Tre=n($3e,"STRONG",{});var sWr=s(Tre);$We=r(sWr,"fnet"),sWr.forEach(t),kWe=r($3e," \u2014 "),Vk=n($3e,"A",{href:!0});var lWr=s(Vk);SWe=r(lWr,"FNetConfig"),lWr.forEach(t),RWe=r($3e," (FNet model)"),$3e.forEach(t),PWe=i(y),om=n(y,"LI",{});var k3e=s(om);Mre=n(k3e,"STRONG",{});var iWr=s(Mre);BWe=r(iWr,"fsmt"),iWr.forEach(t),IWe=r(k3e," \u2014 "),Xk=n(k3e,"A",{href:!0});var dWr=s(Xk);NWe=r(dWr,"FSMTConfig"),dWr.forEach(t),qWe=r(k3e," (FairSeq Machine-Translation model)"),k3e.forEach(t),jWe=i(y),rm=n(y,"LI",{});var S3e=s(rm);Ere=n(S3e,"STRONG",{});var cWr=s(Ere);DWe=r(cWr,"funnel"),cWr.forEach(t),GWe=r(S3e," \u2014 "),zk=n(S3e,"A",{href:!0});var fWr=s(zk);OWe=r(fWr,"FunnelConfig"),fWr.forEach(t),VWe=r(S3e," (Funnel Transformer model)"),S3e.forEach(t),XWe=i(y),tm=n(y,"LI",{});var R3e=s(tm);Cre=n(R3e,"STRONG",{});var mWr=s(Cre);zWe=r(mWr,"glpn"),mWr.forEach(t),WWe=r(R3e," \u2014 "),Wk=n(R3e,"A",{href:!0});var gWr=s(Wk);QWe=r(gWr,"GLPNConfig"),gWr.forEach(t),HWe=r(R3e," (GLPN model)"),R3e.forEach(t),UWe=i(y),am=n(y,"LI",{});var P3e=s(am);wre=n(P3e,"STRONG",{});var hWr=s(wre);JWe=r(hWr,"gpt2"),hWr.forEach(t),YWe=r(P3e," \u2014 "),Qk=n(P3e,"A",{href:!0});var pWr=s(Qk);KWe=r(pWr,"GPT2Config"),pWr.forEach(t),ZWe=r(P3e," (OpenAI GPT-2 model)"),P3e.forEach(t),eQe=i(y),nm=n(y,"LI",{});var B3e=s(nm);Are=n(B3e,"STRONG",{});var _Wr=s(Are);oQe=r(_Wr,"gpt_neo"),_Wr.forEach(t),rQe=r(B3e," \u2014 "),Hk=n(B3e,"A",{href:!0});var uWr=s(Hk);tQe=r(uWr,"GPTNeoConfig"),uWr.forEach(t),aQe=r(B3e," (GPT Neo model)"),B3e.forEach(t),nQe=i(y),sm=n(y,"LI",{});var I3e=s(sm);yre=n(I3e,"STRONG",{});var bWr=s(yre);sQe=r(bWr,"gpt_neox"),bWr.forEach(t),lQe=r(I3e," \u2014 "),Uk=n(I3e,"A",{href:!0});var vWr=s(Uk);iQe=r(vWr,"GPTNeoXConfig"),vWr.forEach(t),dQe=r(I3e," (GPT NeoX model)"),I3e.forEach(t),cQe=i(y),lm=n(y,"LI",{});var N3e=s(lm);Lre=n(N3e,"STRONG",{});var FWr=s(Lre);fQe=r(FWr,"gptj"),FWr.forEach(t),mQe=r(N3e," \u2014 "),Jk=n(N3e,"A",{href:!0});var TWr=s(Jk);gQe=r(TWr,"GPTJConfig"),TWr.forEach(t),hQe=r(N3e," (GPT-J model)"),N3e.forEach(t),pQe=i(y),im=n(y,"LI",{});var q3e=s(im);xre=n(q3e,"STRONG",{});var MWr=s(xre);_Qe=r(MWr,"hubert"),MWr.forEach(t),uQe=r(q3e," \u2014 "),Yk=n(q3e,"A",{href:!0});var EWr=s(Yk);bQe=r(EWr,"HubertConfig"),EWr.forEach(t),vQe=r(q3e," (Hubert model)"),q3e.forEach(t),FQe=i(y),dm=n(y,"LI",{});var j3e=s(dm);$re=n(j3e,"STRONG",{});var CWr=s($re);TQe=r(CWr,"ibert"),CWr.forEach(t),MQe=r(j3e," \u2014 "),Kk=n(j3e,"A",{href:!0});var wWr=s(Kk);EQe=r(wWr,"IBertConfig"),wWr.forEach(t),CQe=r(j3e," (I-BERT model)"),j3e.forEach(t),wQe=i(y),cm=n(y,"LI",{});var D3e=s(cm);kre=n(D3e,"STRONG",{});var AWr=s(kre);AQe=r(AWr,"imagegpt"),AWr.forEach(t),yQe=r(D3e," \u2014 "),Zk=n(D3e,"A",{href:!0});var yWr=s(Zk);LQe=r(yWr,"ImageGPTConfig"),yWr.forEach(t),xQe=r(D3e," (ImageGPT model)"),D3e.forEach(t),$Qe=i(y),fm=n(y,"LI",{});var G3e=s(fm);Sre=n(G3e,"STRONG",{});var LWr=s(Sre);kQe=r(LWr,"layoutlm"),LWr.forEach(t),SQe=r(G3e," \u2014 "),eS=n(G3e,"A",{href:!0});var xWr=s(eS);RQe=r(xWr,"LayoutLMConfig"),xWr.forEach(t),PQe=r(G3e," (LayoutLM model)"),G3e.forEach(t),BQe=i(y),mm=n(y,"LI",{});var O3e=s(mm);Rre=n(O3e,"STRONG",{});var $Wr=s(Rre);IQe=r($Wr,"layoutlmv2"),$Wr.forEach(t),NQe=r(O3e," \u2014 "),oS=n(O3e,"A",{href:!0});var kWr=s(oS);qQe=r(kWr,"LayoutLMv2Config"),kWr.forEach(t),jQe=r(O3e," (LayoutLMv2 model)"),O3e.forEach(t),DQe=i(y),gm=n(y,"LI",{});var V3e=s(gm);Pre=n(V3e,"STRONG",{});var SWr=s(Pre);GQe=r(SWr,"layoutlmv3"),SWr.forEach(t),OQe=r(V3e," \u2014 "),rS=n(V3e,"A",{href:!0});var RWr=s(rS);VQe=r(RWr,"LayoutLMv3Config"),RWr.forEach(t),XQe=r(V3e," (LayoutLMv3 model)"),V3e.forEach(t),zQe=i(y),hm=n(y,"LI",{});var X3e=s(hm);Bre=n(X3e,"STRONG",{});var PWr=s(Bre);WQe=r(PWr,"led"),PWr.forEach(t),QQe=r(X3e," \u2014 "),tS=n(X3e,"A",{href:!0});var BWr=s(tS);HQe=r(BWr,"LEDConfig"),BWr.forEach(t),UQe=r(X3e," (LED model)"),X3e.forEach(t),JQe=i(y),pm=n(y,"LI",{});var z3e=s(pm);Ire=n(z3e,"STRONG",{});var IWr=s(Ire);YQe=r(IWr,"levit"),IWr.forEach(t),KQe=r(z3e," \u2014 "),aS=n(z3e,"A",{href:!0});var NWr=s(aS);ZQe=r(NWr,"LevitConfig"),NWr.forEach(t),eHe=r(z3e," (LeViT model)"),z3e.forEach(t),oHe=i(y),_m=n(y,"LI",{});var W3e=s(_m);Nre=n(W3e,"STRONG",{});var qWr=s(Nre);rHe=r(qWr,"longformer"),qWr.forEach(t),tHe=r(W3e," \u2014 "),nS=n(W3e,"A",{href:!0});var jWr=s(nS);aHe=r(jWr,"LongformerConfig"),jWr.forEach(t),nHe=r(W3e," (Longformer model)"),W3e.forEach(t),sHe=i(y),um=n(y,"LI",{});var Q3e=s(um);qre=n(Q3e,"STRONG",{});var DWr=s(qre);lHe=r(DWr,"luke"),DWr.forEach(t),iHe=r(Q3e," \u2014 "),sS=n(Q3e,"A",{href:!0});var GWr=s(sS);dHe=r(GWr,"LukeConfig"),GWr.forEach(t),cHe=r(Q3e," (LUKE model)"),Q3e.forEach(t),fHe=i(y),bm=n(y,"LI",{});var H3e=s(bm);jre=n(H3e,"STRONG",{});var OWr=s(jre);mHe=r(OWr,"lxmert"),OWr.forEach(t),gHe=r(H3e," \u2014 "),lS=n(H3e,"A",{href:!0});var VWr=s(lS);hHe=r(VWr,"LxmertConfig"),VWr.forEach(t),pHe=r(H3e," (LXMERT model)"),H3e.forEach(t),_He=i(y),vm=n(y,"LI",{});var U3e=s(vm);Dre=n(U3e,"STRONG",{});var XWr=s(Dre);uHe=r(XWr,"m2m_100"),XWr.forEach(t),bHe=r(U3e," \u2014 "),iS=n(U3e,"A",{href:!0});var zWr=s(iS);vHe=r(zWr,"M2M100Config"),zWr.forEach(t),FHe=r(U3e," (M2M100 model)"),U3e.forEach(t),THe=i(y),Fm=n(y,"LI",{});var J3e=s(Fm);Gre=n(J3e,"STRONG",{});var WWr=s(Gre);MHe=r(WWr,"marian"),WWr.forEach(t),EHe=r(J3e," \u2014 "),dS=n(J3e,"A",{href:!0});var QWr=s(dS);CHe=r(QWr,"MarianConfig"),QWr.forEach(t),wHe=r(J3e," (Marian model)"),J3e.forEach(t),AHe=i(y),Tm=n(y,"LI",{});var Y3e=s(Tm);Ore=n(Y3e,"STRONG",{});var HWr=s(Ore);yHe=r(HWr,"maskformer"),HWr.forEach(t),LHe=r(Y3e," \u2014 "),cS=n(Y3e,"A",{href:!0});var UWr=s(cS);xHe=r(UWr,"MaskFormerConfig"),UWr.forEach(t),$He=r(Y3e," (MaskFormer model)"),Y3e.forEach(t),kHe=i(y),Mm=n(y,"LI",{});var K3e=s(Mm);Vre=n(K3e,"STRONG",{});var JWr=s(Vre);SHe=r(JWr,"mbart"),JWr.forEach(t),RHe=r(K3e," \u2014 "),fS=n(K3e,"A",{href:!0});var YWr=s(fS);PHe=r(YWr,"MBartConfig"),YWr.forEach(t),BHe=r(K3e," (mBART model)"),K3e.forEach(t),IHe=i(y),Em=n(y,"LI",{});var Z3e=s(Em);Xre=n(Z3e,"STRONG",{});var KWr=s(Xre);NHe=r(KWr,"mctct"),KWr.forEach(t),qHe=r(Z3e," \u2014 "),mS=n(Z3e,"A",{href:!0});var ZWr=s(mS);jHe=r(ZWr,"MCTCTConfig"),ZWr.forEach(t),DHe=r(Z3e," (M-CTC-T model)"),Z3e.forEach(t),GHe=i(y),Cm=n(y,"LI",{});var e0e=s(Cm);zre=n(e0e,"STRONG",{});var eQr=s(zre);OHe=r(eQr,"megatron-bert"),eQr.forEach(t),VHe=r(e0e," \u2014 "),gS=n(e0e,"A",{href:!0});var oQr=s(gS);XHe=r(oQr,"MegatronBertConfig"),oQr.forEach(t),zHe=r(e0e," (Megatron-BERT model)"),e0e.forEach(t),WHe=i(y),wm=n(y,"LI",{});var o0e=s(wm);Wre=n(o0e,"STRONG",{});var rQr=s(Wre);QHe=r(rQr,"mobilebert"),rQr.forEach(t),HHe=r(o0e," \u2014 "),hS=n(o0e,"A",{href:!0});var tQr=s(hS);UHe=r(tQr,"MobileBertConfig"),tQr.forEach(t),JHe=r(o0e," (MobileBERT model)"),o0e.forEach(t),YHe=i(y),Am=n(y,"LI",{});var r0e=s(Am);Qre=n(r0e,"STRONG",{});var aQr=s(Qre);KHe=r(aQr,"mpnet"),aQr.forEach(t),ZHe=r(r0e," \u2014 "),pS=n(r0e,"A",{href:!0});var nQr=s(pS);eUe=r(nQr,"MPNetConfig"),nQr.forEach(t),oUe=r(r0e," (MPNet model)"),r0e.forEach(t),rUe=i(y),ym=n(y,"LI",{});var t0e=s(ym);Hre=n(t0e,"STRONG",{});var sQr=s(Hre);tUe=r(sQr,"mt5"),sQr.forEach(t),aUe=r(t0e," \u2014 "),_S=n(t0e,"A",{href:!0});var lQr=s(_S);nUe=r(lQr,"MT5Config"),lQr.forEach(t),sUe=r(t0e," (MT5 model)"),t0e.forEach(t),lUe=i(y),Lm=n(y,"LI",{});var a0e=s(Lm);Ure=n(a0e,"STRONG",{});var iQr=s(Ure);iUe=r(iQr,"nystromformer"),iQr.forEach(t),dUe=r(a0e," \u2014 "),uS=n(a0e,"A",{href:!0});var dQr=s(uS);cUe=r(dQr,"NystromformerConfig"),dQr.forEach(t),fUe=r(a0e," (Nystr\xF6mformer model)"),a0e.forEach(t),mUe=i(y),xm=n(y,"LI",{});var n0e=s(xm);Jre=n(n0e,"STRONG",{});var cQr=s(Jre);gUe=r(cQr,"openai-gpt"),cQr.forEach(t),hUe=r(n0e," \u2014 "),bS=n(n0e,"A",{href:!0});var fQr=s(bS);pUe=r(fQr,"OpenAIGPTConfig"),fQr.forEach(t),_Ue=r(n0e," (OpenAI GPT model)"),n0e.forEach(t),uUe=i(y),$m=n(y,"LI",{});var s0e=s($m);Yre=n(s0e,"STRONG",{});var mQr=s(Yre);bUe=r(mQr,"opt"),mQr.forEach(t),vUe=r(s0e," \u2014 "),vS=n(s0e,"A",{href:!0});var gQr=s(vS);FUe=r(gQr,"OPTConfig"),gQr.forEach(t),TUe=r(s0e," (OPT model)"),s0e.forEach(t),MUe=i(y),km=n(y,"LI",{});var l0e=s(km);Kre=n(l0e,"STRONG",{});var hQr=s(Kre);EUe=r(hQr,"pegasus"),hQr.forEach(t),CUe=r(l0e," \u2014 "),FS=n(l0e,"A",{href:!0});var pQr=s(FS);wUe=r(pQr,"PegasusConfig"),pQr.forEach(t),AUe=r(l0e," (Pegasus model)"),l0e.forEach(t),yUe=i(y),Sm=n(y,"LI",{});var i0e=s(Sm);Zre=n(i0e,"STRONG",{});var _Qr=s(Zre);LUe=r(_Qr,"perceiver"),_Qr.forEach(t),xUe=r(i0e," \u2014 "),TS=n(i0e,"A",{href:!0});var uQr=s(TS);$Ue=r(uQr,"PerceiverConfig"),uQr.forEach(t),kUe=r(i0e," (Perceiver model)"),i0e.forEach(t),SUe=i(y),Rm=n(y,"LI",{});var d0e=s(Rm);ete=n(d0e,"STRONG",{});var bQr=s(ete);RUe=r(bQr,"plbart"),bQr.forEach(t),PUe=r(d0e," \u2014 "),MS=n(d0e,"A",{href:!0});var vQr=s(MS);BUe=r(vQr,"PLBartConfig"),vQr.forEach(t),IUe=r(d0e," (PLBart model)"),d0e.forEach(t),NUe=i(y),Pm=n(y,"LI",{});var c0e=s(Pm);ote=n(c0e,"STRONG",{});var FQr=s(ote);qUe=r(FQr,"poolformer"),FQr.forEach(t),jUe=r(c0e," \u2014 "),ES=n(c0e,"A",{href:!0});var TQr=s(ES);DUe=r(TQr,"PoolFormerConfig"),TQr.forEach(t),GUe=r(c0e," (PoolFormer model)"),c0e.forEach(t),OUe=i(y),Bm=n(y,"LI",{});var f0e=s(Bm);rte=n(f0e,"STRONG",{});var MQr=s(rte);VUe=r(MQr,"prophetnet"),MQr.forEach(t),XUe=r(f0e," \u2014 "),CS=n(f0e,"A",{href:!0});var EQr=s(CS);zUe=r(EQr,"ProphetNetConfig"),EQr.forEach(t),WUe=r(f0e," (ProphetNet model)"),f0e.forEach(t),QUe=i(y),Im=n(y,"LI",{});var m0e=s(Im);tte=n(m0e,"STRONG",{});var CQr=s(tte);HUe=r(CQr,"qdqbert"),CQr.forEach(t),UUe=r(m0e," \u2014 "),wS=n(m0e,"A",{href:!0});var wQr=s(wS);JUe=r(wQr,"QDQBertConfig"),wQr.forEach(t),YUe=r(m0e," (QDQBert model)"),m0e.forEach(t),KUe=i(y),Nm=n(y,"LI",{});var g0e=s(Nm);ate=n(g0e,"STRONG",{});var AQr=s(ate);ZUe=r(AQr,"rag"),AQr.forEach(t),eJe=r(g0e," \u2014 "),AS=n(g0e,"A",{href:!0});var yQr=s(AS);oJe=r(yQr,"RagConfig"),yQr.forEach(t),rJe=r(g0e," (RAG model)"),g0e.forEach(t),tJe=i(y),qm=n(y,"LI",{});var h0e=s(qm);nte=n(h0e,"STRONG",{});var LQr=s(nte);aJe=r(LQr,"realm"),LQr.forEach(t),nJe=r(h0e," \u2014 "),yS=n(h0e,"A",{href:!0});var xQr=s(yS);sJe=r(xQr,"RealmConfig"),xQr.forEach(t),lJe=r(h0e," (REALM model)"),h0e.forEach(t),iJe=i(y),jm=n(y,"LI",{});var p0e=s(jm);ste=n(p0e,"STRONG",{});var $Qr=s(ste);dJe=r($Qr,"reformer"),$Qr.forEach(t),cJe=r(p0e," \u2014 "),LS=n(p0e,"A",{href:!0});var kQr=s(LS);fJe=r(kQr,"ReformerConfig"),kQr.forEach(t),mJe=r(p0e," (Reformer model)"),p0e.forEach(t),gJe=i(y),Dm=n(y,"LI",{});var _0e=s(Dm);lte=n(_0e,"STRONG",{});var SQr=s(lte);hJe=r(SQr,"regnet"),SQr.forEach(t),pJe=r(_0e," \u2014 "),xS=n(_0e,"A",{href:!0});var RQr=s(xS);_Je=r(RQr,"RegNetConfig"),RQr.forEach(t),uJe=r(_0e," (RegNet model)"),_0e.forEach(t),bJe=i(y),Gm=n(y,"LI",{});var u0e=s(Gm);ite=n(u0e,"STRONG",{});var PQr=s(ite);vJe=r(PQr,"rembert"),PQr.forEach(t),FJe=r(u0e," \u2014 "),$S=n(u0e,"A",{href:!0});var BQr=s($S);TJe=r(BQr,"RemBertConfig"),BQr.forEach(t),MJe=r(u0e," (RemBERT model)"),u0e.forEach(t),EJe=i(y),Om=n(y,"LI",{});var b0e=s(Om);dte=n(b0e,"STRONG",{});var IQr=s(dte);CJe=r(IQr,"resnet"),IQr.forEach(t),wJe=r(b0e," \u2014 "),kS=n(b0e,"A",{href:!0});var NQr=s(kS);AJe=r(NQr,"ResNetConfig"),NQr.forEach(t),yJe=r(b0e," (ResNet model)"),b0e.forEach(t),LJe=i(y),Vm=n(y,"LI",{});var v0e=s(Vm);cte=n(v0e,"STRONG",{});var qQr=s(cte);xJe=r(qQr,"retribert"),qQr.forEach(t),$Je=r(v0e," \u2014 "),SS=n(v0e,"A",{href:!0});var jQr=s(SS);kJe=r(jQr,"RetriBertConfig"),jQr.forEach(t),SJe=r(v0e," (RetriBERT model)"),v0e.forEach(t),RJe=i(y),Xm=n(y,"LI",{});var F0e=s(Xm);fte=n(F0e,"STRONG",{});var DQr=s(fte);PJe=r(DQr,"roberta"),DQr.forEach(t),BJe=r(F0e," \u2014 "),RS=n(F0e,"A",{href:!0});var GQr=s(RS);IJe=r(GQr,"RobertaConfig"),GQr.forEach(t),NJe=r(F0e," (RoBERTa model)"),F0e.forEach(t),qJe=i(y),zm=n(y,"LI",{});var T0e=s(zm);mte=n(T0e,"STRONG",{});var OQr=s(mte);jJe=r(OQr,"roformer"),OQr.forEach(t),DJe=r(T0e," \u2014 "),PS=n(T0e,"A",{href:!0});var VQr=s(PS);GJe=r(VQr,"RoFormerConfig"),VQr.forEach(t),OJe=r(T0e," (RoFormer model)"),T0e.forEach(t),VJe=i(y),Wm=n(y,"LI",{});var M0e=s(Wm);gte=n(M0e,"STRONG",{});var XQr=s(gte);XJe=r(XQr,"segformer"),XQr.forEach(t),zJe=r(M0e," \u2014 "),BS=n(M0e,"A",{href:!0});var zQr=s(BS);WJe=r(zQr,"SegformerConfig"),zQr.forEach(t),QJe=r(M0e," (SegFormer model)"),M0e.forEach(t),HJe=i(y),Qm=n(y,"LI",{});var E0e=s(Qm);hte=n(E0e,"STRONG",{});var WQr=s(hte);UJe=r(WQr,"sew"),WQr.forEach(t),JJe=r(E0e," \u2014 "),IS=n(E0e,"A",{href:!0});var QQr=s(IS);YJe=r(QQr,"SEWConfig"),QQr.forEach(t),KJe=r(E0e," (SEW model)"),E0e.forEach(t),ZJe=i(y),Hm=n(y,"LI",{});var C0e=s(Hm);pte=n(C0e,"STRONG",{});var HQr=s(pte);eYe=r(HQr,"sew-d"),HQr.forEach(t),oYe=r(C0e," \u2014 "),NS=n(C0e,"A",{href:!0});var UQr=s(NS);rYe=r(UQr,"SEWDConfig"),UQr.forEach(t),tYe=r(C0e," (SEW-D model)"),C0e.forEach(t),aYe=i(y),Um=n(y,"LI",{});var w0e=s(Um);_te=n(w0e,"STRONG",{});var JQr=s(_te);nYe=r(JQr,"speech-encoder-decoder"),JQr.forEach(t),sYe=r(w0e," \u2014 "),qS=n(w0e,"A",{href:!0});var YQr=s(qS);lYe=r(YQr,"SpeechEncoderDecoderConfig"),YQr.forEach(t),iYe=r(w0e," (Speech Encoder decoder model)"),w0e.forEach(t),dYe=i(y),Jm=n(y,"LI",{});var A0e=s(Jm);ute=n(A0e,"STRONG",{});var KQr=s(ute);cYe=r(KQr,"speech_to_text"),KQr.forEach(t),fYe=r(A0e," \u2014 "),jS=n(A0e,"A",{href:!0});var ZQr=s(jS);mYe=r(ZQr,"Speech2TextConfig"),ZQr.forEach(t),gYe=r(A0e," (Speech2Text model)"),A0e.forEach(t),hYe=i(y),Ym=n(y,"LI",{});var y0e=s(Ym);bte=n(y0e,"STRONG",{});var eHr=s(bte);pYe=r(eHr,"speech_to_text_2"),eHr.forEach(t),_Ye=r(y0e," \u2014 "),DS=n(y0e,"A",{href:!0});var oHr=s(DS);uYe=r(oHr,"Speech2Text2Config"),oHr.forEach(t),bYe=r(y0e," (Speech2Text2 model)"),y0e.forEach(t),vYe=i(y),Km=n(y,"LI",{});var L0e=s(Km);vte=n(L0e,"STRONG",{});var rHr=s(vte);FYe=r(rHr,"splinter"),rHr.forEach(t),TYe=r(L0e," \u2014 "),GS=n(L0e,"A",{href:!0});var tHr=s(GS);MYe=r(tHr,"SplinterConfig"),tHr.forEach(t),EYe=r(L0e," (Splinter model)"),L0e.forEach(t),CYe=i(y),Zm=n(y,"LI",{});var x0e=s(Zm);Fte=n(x0e,"STRONG",{});var aHr=s(Fte);wYe=r(aHr,"squeezebert"),aHr.forEach(t),AYe=r(x0e," \u2014 "),OS=n(x0e,"A",{href:!0});var nHr=s(OS);yYe=r(nHr,"SqueezeBertConfig"),nHr.forEach(t),LYe=r(x0e," (SqueezeBERT model)"),x0e.forEach(t),xYe=i(y),eg=n(y,"LI",{});var $0e=s(eg);Tte=n($0e,"STRONG",{});var sHr=s(Tte);$Ye=r(sHr,"swin"),sHr.forEach(t),kYe=r($0e," \u2014 "),VS=n($0e,"A",{href:!0});var lHr=s(VS);SYe=r(lHr,"SwinConfig"),lHr.forEach(t),RYe=r($0e," (Swin Transformer model)"),$0e.forEach(t),PYe=i(y),og=n(y,"LI",{});var k0e=s(og);Mte=n(k0e,"STRONG",{});var iHr=s(Mte);BYe=r(iHr,"t5"),iHr.forEach(t),IYe=r(k0e," \u2014 "),XS=n(k0e,"A",{href:!0});var dHr=s(XS);NYe=r(dHr,"T5Config"),dHr.forEach(t),qYe=r(k0e," (T5 model)"),k0e.forEach(t),jYe=i(y),rg=n(y,"LI",{});var S0e=s(rg);Ete=n(S0e,"STRONG",{});var cHr=s(Ete);DYe=r(cHr,"tapas"),cHr.forEach(t),GYe=r(S0e," \u2014 "),zS=n(S0e,"A",{href:!0});var fHr=s(zS);OYe=r(fHr,"TapasConfig"),fHr.forEach(t),VYe=r(S0e," (TAPAS model)"),S0e.forEach(t),XYe=i(y),tg=n(y,"LI",{});var R0e=s(tg);Cte=n(R0e,"STRONG",{});var mHr=s(Cte);zYe=r(mHr,"trajectory_transformer"),mHr.forEach(t),WYe=r(R0e," \u2014 "),WS=n(R0e,"A",{href:!0});var gHr=s(WS);QYe=r(gHr,"TrajectoryTransformerConfig"),gHr.forEach(t),HYe=r(R0e," (Trajectory Transformer model)"),R0e.forEach(t),UYe=i(y),ag=n(y,"LI",{});var P0e=s(ag);wte=n(P0e,"STRONG",{});var hHr=s(wte);JYe=r(hHr,"transfo-xl"),hHr.forEach(t),YYe=r(P0e," \u2014 "),QS=n(P0e,"A",{href:!0});var pHr=s(QS);KYe=r(pHr,"TransfoXLConfig"),pHr.forEach(t),ZYe=r(P0e," (Transformer-XL model)"),P0e.forEach(t),eKe=i(y),ng=n(y,"LI",{});var B0e=s(ng);Ate=n(B0e,"STRONG",{});var _Hr=s(Ate);oKe=r(_Hr,"trocr"),_Hr.forEach(t),rKe=r(B0e," \u2014 "),HS=n(B0e,"A",{href:!0});var uHr=s(HS);tKe=r(uHr,"TrOCRConfig"),uHr.forEach(t),aKe=r(B0e," (TrOCR model)"),B0e.forEach(t),nKe=i(y),sg=n(y,"LI",{});var I0e=s(sg);yte=n(I0e,"STRONG",{});var bHr=s(yte);sKe=r(bHr,"unispeech"),bHr.forEach(t),lKe=r(I0e," \u2014 "),US=n(I0e,"A",{href:!0});var vHr=s(US);iKe=r(vHr,"UniSpeechConfig"),vHr.forEach(t),dKe=r(I0e," (UniSpeech model)"),I0e.forEach(t),cKe=i(y),lg=n(y,"LI",{});var N0e=s(lg);Lte=n(N0e,"STRONG",{});var FHr=s(Lte);fKe=r(FHr,"unispeech-sat"),FHr.forEach(t),mKe=r(N0e," \u2014 "),JS=n(N0e,"A",{href:!0});var THr=s(JS);gKe=r(THr,"UniSpeechSatConfig"),THr.forEach(t),hKe=r(N0e," (UniSpeechSat model)"),N0e.forEach(t),pKe=i(y),ig=n(y,"LI",{});var q0e=s(ig);xte=n(q0e,"STRONG",{});var MHr=s(xte);_Ke=r(MHr,"van"),MHr.forEach(t),uKe=r(q0e," \u2014 "),YS=n(q0e,"A",{href:!0});var EHr=s(YS);bKe=r(EHr,"VanConfig"),EHr.forEach(t),vKe=r(q0e," (VAN model)"),q0e.forEach(t),FKe=i(y),dg=n(y,"LI",{});var j0e=s(dg);$te=n(j0e,"STRONG",{});var CHr=s($te);TKe=r(CHr,"vilt"),CHr.forEach(t),MKe=r(j0e," \u2014 "),KS=n(j0e,"A",{href:!0});var wHr=s(KS);EKe=r(wHr,"ViltConfig"),wHr.forEach(t),CKe=r(j0e," (ViLT model)"),j0e.forEach(t),wKe=i(y),cg=n(y,"LI",{});var D0e=s(cg);kte=n(D0e,"STRONG",{});var AHr=s(kte);AKe=r(AHr,"vision-encoder-decoder"),AHr.forEach(t),yKe=r(D0e," \u2014 "),ZS=n(D0e,"A",{href:!0});var yHr=s(ZS);LKe=r(yHr,"VisionEncoderDecoderConfig"),yHr.forEach(t),xKe=r(D0e," (Vision Encoder decoder model)"),D0e.forEach(t),$Ke=i(y),fg=n(y,"LI",{});var G0e=s(fg);Ste=n(G0e,"STRONG",{});var LHr=s(Ste);kKe=r(LHr,"vision-text-dual-encoder"),LHr.forEach(t),SKe=r(G0e," \u2014 "),eR=n(G0e,"A",{href:!0});var xHr=s(eR);RKe=r(xHr,"VisionTextDualEncoderConfig"),xHr.forEach(t),PKe=r(G0e," (VisionTextDualEncoder model)"),G0e.forEach(t),BKe=i(y),mg=n(y,"LI",{});var O0e=s(mg);Rte=n(O0e,"STRONG",{});var $Hr=s(Rte);IKe=r($Hr,"visual_bert"),$Hr.forEach(t),NKe=r(O0e," \u2014 "),oR=n(O0e,"A",{href:!0});var kHr=s(oR);qKe=r(kHr,"VisualBertConfig"),kHr.forEach(t),jKe=r(O0e," (VisualBERT model)"),O0e.forEach(t),DKe=i(y),gg=n(y,"LI",{});var V0e=s(gg);Pte=n(V0e,"STRONG",{});var SHr=s(Pte);GKe=r(SHr,"vit"),SHr.forEach(t),OKe=r(V0e," \u2014 "),rR=n(V0e,"A",{href:!0});var RHr=s(rR);VKe=r(RHr,"ViTConfig"),RHr.forEach(t),XKe=r(V0e," (ViT model)"),V0e.forEach(t),zKe=i(y),hg=n(y,"LI",{});var X0e=s(hg);Bte=n(X0e,"STRONG",{});var PHr=s(Bte);WKe=r(PHr,"vit_mae"),PHr.forEach(t),QKe=r(X0e," \u2014 "),tR=n(X0e,"A",{href:!0});var BHr=s(tR);HKe=r(BHr,"ViTMAEConfig"),BHr.forEach(t),UKe=r(X0e," (ViTMAE model)"),X0e.forEach(t),JKe=i(y),pg=n(y,"LI",{});var z0e=s(pg);Ite=n(z0e,"STRONG",{});var IHr=s(Ite);YKe=r(IHr,"wav2vec2"),IHr.forEach(t),KKe=r(z0e," \u2014 "),aR=n(z0e,"A",{href:!0});var NHr=s(aR);ZKe=r(NHr,"Wav2Vec2Config"),NHr.forEach(t),eZe=r(z0e," (Wav2Vec2 model)"),z0e.forEach(t),oZe=i(y),_g=n(y,"LI",{});var W0e=s(_g);Nte=n(W0e,"STRONG",{});var qHr=s(Nte);rZe=r(qHr,"wav2vec2-conformer"),qHr.forEach(t),tZe=r(W0e," \u2014 "),nR=n(W0e,"A",{href:!0});var jHr=s(nR);aZe=r(jHr,"Wav2Vec2ConformerConfig"),jHr.forEach(t),nZe=r(W0e," (Wav2Vec2-Conformer model)"),W0e.forEach(t),sZe=i(y),ug=n(y,"LI",{});var Q0e=s(ug);qte=n(Q0e,"STRONG",{});var DHr=s(qte);lZe=r(DHr,"wavlm"),DHr.forEach(t),iZe=r(Q0e," \u2014 "),sR=n(Q0e,"A",{href:!0});var GHr=s(sR);dZe=r(GHr,"WavLMConfig"),GHr.forEach(t),cZe=r(Q0e," (WavLM model)"),Q0e.forEach(t),fZe=i(y),bg=n(y,"LI",{});var H0e=s(bg);jte=n(H0e,"STRONG",{});var OHr=s(jte);mZe=r(OHr,"xglm"),OHr.forEach(t),gZe=r(H0e," \u2014 "),lR=n(H0e,"A",{href:!0});var VHr=s(lR);hZe=r(VHr,"XGLMConfig"),VHr.forEach(t),pZe=r(H0e," (XGLM model)"),H0e.forEach(t),_Ze=i(y),vg=n(y,"LI",{});var U0e=s(vg);Dte=n(U0e,"STRONG",{});var XHr=s(Dte);uZe=r(XHr,"xlm"),XHr.forEach(t),bZe=r(U0e," \u2014 "),iR=n(U0e,"A",{href:!0});var zHr=s(iR);vZe=r(zHr,"XLMConfig"),zHr.forEach(t),FZe=r(U0e," (XLM model)"),U0e.forEach(t),TZe=i(y),Fg=n(y,"LI",{});var J0e=s(Fg);Gte=n(J0e,"STRONG",{});var WHr=s(Gte);MZe=r(WHr,"xlm-prophetnet"),WHr.forEach(t),EZe=r(J0e," \u2014 "),dR=n(J0e,"A",{href:!0});var QHr=s(dR);CZe=r(QHr,"XLMProphetNetConfig"),QHr.forEach(t),wZe=r(J0e," (XLM-ProphetNet model)"),J0e.forEach(t),AZe=i(y),Tg=n(y,"LI",{});var Y0e=s(Tg);Ote=n(Y0e,"STRONG",{});var HHr=s(Ote);yZe=r(HHr,"xlm-roberta"),HHr.forEach(t),LZe=r(Y0e," \u2014 "),cR=n(Y0e,"A",{href:!0});var UHr=s(cR);xZe=r(UHr,"XLMRobertaConfig"),UHr.forEach(t),$Ze=r(Y0e," (XLM-RoBERTa model)"),Y0e.forEach(t),kZe=i(y),Mg=n(y,"LI",{});var K0e=s(Mg);Vte=n(K0e,"STRONG",{});var JHr=s(Vte);SZe=r(JHr,"xlm-roberta-xl"),JHr.forEach(t),RZe=r(K0e," \u2014 "),fR=n(K0e,"A",{href:!0});var YHr=s(fR);PZe=r(YHr,"XLMRobertaXLConfig"),YHr.forEach(t),BZe=r(K0e," (XLM-RoBERTa-XL model)"),K0e.forEach(t),IZe=i(y),Eg=n(y,"LI",{});var Z0e=s(Eg);Xte=n(Z0e,"STRONG",{});var KHr=s(Xte);NZe=r(KHr,"xlnet"),KHr.forEach(t),qZe=r(Z0e," \u2014 "),mR=n(Z0e,"A",{href:!0});var ZHr=s(mR);jZe=r(ZHr,"XLNetConfig"),ZHr.forEach(t),DZe=r(Z0e," (XLNet model)"),Z0e.forEach(t),GZe=i(y),Cg=n(y,"LI",{});var ewe=s(Cg);zte=n(ewe,"STRONG",{});var eUr=s(zte);OZe=r(eUr,"yolos"),eUr.forEach(t),VZe=r(ewe," \u2014 "),gR=n(ewe,"A",{href:!0});var oUr=s(gR);XZe=r(oUr,"YolosConfig"),oUr.forEach(t),zZe=r(ewe," (YOLOS model)"),ewe.forEach(t),WZe=i(y),wg=n(y,"LI",{});var owe=s(wg);Wte=n(owe,"STRONG",{});var rUr=s(Wte);QZe=r(rUr,"yoso"),rUr.forEach(t),HZe=r(owe," \u2014 "),hR=n(owe,"A",{href:!0});var tUr=s(hR);UZe=r(tUr,"YosoConfig"),tUr.forEach(t),JZe=r(owe," (YOSO model)"),owe.forEach(t),y.forEach(t),YZe=i(ot),T(Ag.$$.fragment,ot),ot.forEach(t),KZe=i(et),yg=n(et,"DIV",{class:!0});var oGe=s(yg);T(QA.$$.fragment,oGe),ZZe=i(oGe),Qte=n(oGe,"P",{});var aUr=s(Qte);eeo=r(aUr,"Register a new configuration for this class."),aUr.forEach(t),oGe.forEach(t),et.forEach(t),aje=i(f),Mi=n(f,"H2",{class:!0});var rGe=s(Mi);Lg=n(rGe,"A",{id:!0,class:!0,href:!0});var nUr=s(Lg);Hte=n(nUr,"SPAN",{});var sUr=s(Hte);T(HA.$$.fragment,sUr),sUr.forEach(t),nUr.forEach(t),oeo=i(rGe),Ute=n(rGe,"SPAN",{});var lUr=s(Ute);reo=r(lUr,"AutoTokenizer"),lUr.forEach(t),rGe.forEach(t),nje=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(UA.$$.fragment,qs),teo=i(qs),JA=n(qs,"P",{});var tGe=s(JA);aeo=r(tGe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),pR=n(tGe,"A",{href:!0});var iUr=s(pR);neo=r(iUr,"AutoTokenizer.from_pretrained()"),iUr.forEach(t),seo=r(tGe," class method."),tGe.forEach(t),leo=i(qs),YA=n(qs,"P",{});var aGe=s(YA);ieo=r(aGe,"This class cannot be instantiated directly using "),Jte=n(aGe,"CODE",{});var dUr=s(Jte);deo=r(dUr,"__init__()"),dUr.forEach(t),ceo=r(aGe," (throws an error)."),aGe.forEach(t),feo=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(KA.$$.fragment,js),meo=i(js),Yte=n(js,"P",{});var cUr=s(Yte);geo=r(cUr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),cUr.forEach(t),heo=i(js),Aa=n(js,"P",{});var O0=s(Aa);peo=r(O0,"The tokenizer class to instantiate is selected based on the "),Kte=n(O0,"CODE",{});var fUr=s(Kte);_eo=r(fUr,"model_type"),fUr.forEach(t),ueo=r(O0,` property of the config object (either
passed as an argument or loaded from `),Zte=n(O0,"CODE",{});var mUr=s(Zte);beo=r(mUr,"pretrained_model_name_or_path"),mUr.forEach(t),veo=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eae=n(O0,"CODE",{});var gUr=s(eae);Feo=r(gUr,"pretrained_model_name_or_path"),gUr.forEach(t),Teo=r(O0,":"),O0.forEach(t),Meo=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Zx=s(Sn);oae=n(Zx,"STRONG",{});var hUr=s(oae);Eeo=r(hUr,"albert"),hUr.forEach(t),Ceo=r(Zx," \u2014 "),_R=n(Zx,"A",{href:!0});var pUr=s(_R);weo=r(pUr,"AlbertTokenizer"),pUr.forEach(t),Aeo=r(Zx," or "),uR=n(Zx,"A",{href:!0});var _Ur=s(uR);yeo=r(_Ur,"AlbertTokenizerFast"),_Ur.forEach(t),Leo=r(Zx," (ALBERT model)"),Zx.forEach(t),xeo=i(S),Rn=n(S,"LI",{});var e$=s(Rn);rae=n(e$,"STRONG",{});var uUr=s(rae);$eo=r(uUr,"bart"),uUr.forEach(t),keo=r(e$," \u2014 "),bR=n(e$,"A",{href:!0});var bUr=s(bR);Seo=r(bUr,"BartTokenizer"),bUr.forEach(t),Reo=r(e$," or "),vR=n(e$,"A",{href:!0});var vUr=s(vR);Peo=r(vUr,"BartTokenizerFast"),vUr.forEach(t),Beo=r(e$," (BART model)"),e$.forEach(t),Ieo=i(S),Pn=n(S,"LI",{});var o$=s(Pn);tae=n(o$,"STRONG",{});var FUr=s(tae);Neo=r(FUr,"barthez"),FUr.forEach(t),qeo=r(o$," \u2014 "),FR=n(o$,"A",{href:!0});var TUr=s(FR);jeo=r(TUr,"BarthezTokenizer"),TUr.forEach(t),Deo=r(o$," or "),TR=n(o$,"A",{href:!0});var MUr=s(TR);Geo=r(MUr,"BarthezTokenizerFast"),MUr.forEach(t),Oeo=r(o$," (BARThez model)"),o$.forEach(t),Veo=i(S),xg=n(S,"LI",{});var rwe=s(xg);aae=n(rwe,"STRONG",{});var EUr=s(aae);Xeo=r(EUr,"bartpho"),EUr.forEach(t),zeo=r(rwe," \u2014 "),MR=n(rwe,"A",{href:!0});var CUr=s(MR);Weo=r(CUr,"BartphoTokenizer"),CUr.forEach(t),Qeo=r(rwe," (BARTpho model)"),rwe.forEach(t),Heo=i(S),Bn=n(S,"LI",{});var r$=s(Bn);nae=n(r$,"STRONG",{});var wUr=s(nae);Ueo=r(wUr,"bert"),wUr.forEach(t),Jeo=r(r$," \u2014 "),ER=n(r$,"A",{href:!0});var AUr=s(ER);Yeo=r(AUr,"BertTokenizer"),AUr.forEach(t),Keo=r(r$," or "),CR=n(r$,"A",{href:!0});var yUr=s(CR);Zeo=r(yUr,"BertTokenizerFast"),yUr.forEach(t),eoo=r(r$," (BERT model)"),r$.forEach(t),ooo=i(S),$g=n(S,"LI",{});var twe=s($g);sae=n(twe,"STRONG",{});var LUr=s(sae);roo=r(LUr,"bert-generation"),LUr.forEach(t),too=r(twe," \u2014 "),wR=n(twe,"A",{href:!0});var xUr=s(wR);aoo=r(xUr,"BertGenerationTokenizer"),xUr.forEach(t),noo=r(twe," (Bert Generation model)"),twe.forEach(t),soo=i(S),kg=n(S,"LI",{});var awe=s(kg);lae=n(awe,"STRONG",{});var $Ur=s(lae);loo=r($Ur,"bert-japanese"),$Ur.forEach(t),ioo=r(awe," \u2014 "),AR=n(awe,"A",{href:!0});var kUr=s(AR);doo=r(kUr,"BertJapaneseTokenizer"),kUr.forEach(t),coo=r(awe," (BertJapanese model)"),awe.forEach(t),foo=i(S),Sg=n(S,"LI",{});var nwe=s(Sg);iae=n(nwe,"STRONG",{});var SUr=s(iae);moo=r(SUr,"bertweet"),SUr.forEach(t),goo=r(nwe," \u2014 "),yR=n(nwe,"A",{href:!0});var RUr=s(yR);hoo=r(RUr,"BertweetTokenizer"),RUr.forEach(t),poo=r(nwe," (BERTweet model)"),nwe.forEach(t),_oo=i(S),In=n(S,"LI",{});var t$=s(In);dae=n(t$,"STRONG",{});var PUr=s(dae);uoo=r(PUr,"big_bird"),PUr.forEach(t),boo=r(t$," \u2014 "),LR=n(t$,"A",{href:!0});var BUr=s(LR);voo=r(BUr,"BigBirdTokenizer"),BUr.forEach(t),Foo=r(t$," or "),xR=n(t$,"A",{href:!0});var IUr=s(xR);Too=r(IUr,"BigBirdTokenizerFast"),IUr.forEach(t),Moo=r(t$," (BigBird model)"),t$.forEach(t),Eoo=i(S),Nn=n(S,"LI",{});var a$=s(Nn);cae=n(a$,"STRONG",{});var NUr=s(cae);Coo=r(NUr,"bigbird_pegasus"),NUr.forEach(t),woo=r(a$," \u2014 "),$R=n(a$,"A",{href:!0});var qUr=s($R);Aoo=r(qUr,"PegasusTokenizer"),qUr.forEach(t),yoo=r(a$," or "),kR=n(a$,"A",{href:!0});var jUr=s(kR);Loo=r(jUr,"PegasusTokenizerFast"),jUr.forEach(t),xoo=r(a$," (BigBird-Pegasus model)"),a$.forEach(t),$oo=i(S),qn=n(S,"LI",{});var n$=s(qn);fae=n(n$,"STRONG",{});var DUr=s(fae);koo=r(DUr,"blenderbot"),DUr.forEach(t),Soo=r(n$," \u2014 "),SR=n(n$,"A",{href:!0});var GUr=s(SR);Roo=r(GUr,"BlenderbotTokenizer"),GUr.forEach(t),Poo=r(n$," or "),RR=n(n$,"A",{href:!0});var OUr=s(RR);Boo=r(OUr,"BlenderbotTokenizerFast"),OUr.forEach(t),Ioo=r(n$," (Blenderbot model)"),n$.forEach(t),Noo=i(S),Rg=n(S,"LI",{});var swe=s(Rg);mae=n(swe,"STRONG",{});var VUr=s(mae);qoo=r(VUr,"blenderbot-small"),VUr.forEach(t),joo=r(swe," \u2014 "),PR=n(swe,"A",{href:!0});var XUr=s(PR);Doo=r(XUr,"BlenderbotSmallTokenizer"),XUr.forEach(t),Goo=r(swe," (BlenderbotSmall model)"),swe.forEach(t),Ooo=i(S),Pg=n(S,"LI",{});var lwe=s(Pg);gae=n(lwe,"STRONG",{});var zUr=s(gae);Voo=r(zUr,"byt5"),zUr.forEach(t),Xoo=r(lwe," \u2014 "),BR=n(lwe,"A",{href:!0});var WUr=s(BR);zoo=r(WUr,"ByT5Tokenizer"),WUr.forEach(t),Woo=r(lwe," (ByT5 model)"),lwe.forEach(t),Qoo=i(S),jn=n(S,"LI",{});var s$=s(jn);hae=n(s$,"STRONG",{});var QUr=s(hae);Hoo=r(QUr,"camembert"),QUr.forEach(t),Uoo=r(s$," \u2014 "),IR=n(s$,"A",{href:!0});var HUr=s(IR);Joo=r(HUr,"CamembertTokenizer"),HUr.forEach(t),Yoo=r(s$," or "),NR=n(s$,"A",{href:!0});var UUr=s(NR);Koo=r(UUr,"CamembertTokenizerFast"),UUr.forEach(t),Zoo=r(s$," (CamemBERT model)"),s$.forEach(t),ero=i(S),Bg=n(S,"LI",{});var iwe=s(Bg);pae=n(iwe,"STRONG",{});var JUr=s(pae);oro=r(JUr,"canine"),JUr.forEach(t),rro=r(iwe," \u2014 "),qR=n(iwe,"A",{href:!0});var YUr=s(qR);tro=r(YUr,"CanineTokenizer"),YUr.forEach(t),aro=r(iwe," (CANINE model)"),iwe.forEach(t),nro=i(S),Dn=n(S,"LI",{});var l$=s(Dn);_ae=n(l$,"STRONG",{});var KUr=s(_ae);sro=r(KUr,"clip"),KUr.forEach(t),lro=r(l$," \u2014 "),jR=n(l$,"A",{href:!0});var ZUr=s(jR);iro=r(ZUr,"CLIPTokenizer"),ZUr.forEach(t),dro=r(l$," or "),DR=n(l$,"A",{href:!0});var eJr=s(DR);cro=r(eJr,"CLIPTokenizerFast"),eJr.forEach(t),fro=r(l$," (CLIP model)"),l$.forEach(t),mro=i(S),Gn=n(S,"LI",{});var i$=s(Gn);uae=n(i$,"STRONG",{});var oJr=s(uae);gro=r(oJr,"convbert"),oJr.forEach(t),hro=r(i$," \u2014 "),GR=n(i$,"A",{href:!0});var rJr=s(GR);pro=r(rJr,"ConvBertTokenizer"),rJr.forEach(t),_ro=r(i$," or "),OR=n(i$,"A",{href:!0});var tJr=s(OR);uro=r(tJr,"ConvBertTokenizerFast"),tJr.forEach(t),bro=r(i$," (ConvBERT model)"),i$.forEach(t),vro=i(S),On=n(S,"LI",{});var d$=s(On);bae=n(d$,"STRONG",{});var aJr=s(bae);Fro=r(aJr,"cpm"),aJr.forEach(t),Tro=r(d$," \u2014 "),VR=n(d$,"A",{href:!0});var nJr=s(VR);Mro=r(nJr,"CpmTokenizer"),nJr.forEach(t),Ero=r(d$," or "),XR=n(d$,"A",{href:!0});var sJr=s(XR);Cro=r(sJr,"CpmTokenizerFast"),sJr.forEach(t),wro=r(d$," (CPM model)"),d$.forEach(t),Aro=i(S),Ig=n(S,"LI",{});var dwe=s(Ig);vae=n(dwe,"STRONG",{});var lJr=s(vae);yro=r(lJr,"ctrl"),lJr.forEach(t),Lro=r(dwe," \u2014 "),zR=n(dwe,"A",{href:!0});var iJr=s(zR);xro=r(iJr,"CTRLTokenizer"),iJr.forEach(t),$ro=r(dwe," (CTRL model)"),dwe.forEach(t),kro=i(S),Vn=n(S,"LI",{});var c$=s(Vn);Fae=n(c$,"STRONG",{});var dJr=s(Fae);Sro=r(dJr,"data2vec-text"),dJr.forEach(t),Rro=r(c$," \u2014 "),WR=n(c$,"A",{href:!0});var cJr=s(WR);Pro=r(cJr,"RobertaTokenizer"),cJr.forEach(t),Bro=r(c$," or "),QR=n(c$,"A",{href:!0});var fJr=s(QR);Iro=r(fJr,"RobertaTokenizerFast"),fJr.forEach(t),Nro=r(c$," (Data2VecText model)"),c$.forEach(t),qro=i(S),Xn=n(S,"LI",{});var f$=s(Xn);Tae=n(f$,"STRONG",{});var mJr=s(Tae);jro=r(mJr,"deberta"),mJr.forEach(t),Dro=r(f$," \u2014 "),HR=n(f$,"A",{href:!0});var gJr=s(HR);Gro=r(gJr,"DebertaTokenizer"),gJr.forEach(t),Oro=r(f$," or "),UR=n(f$,"A",{href:!0});var hJr=s(UR);Vro=r(hJr,"DebertaTokenizerFast"),hJr.forEach(t),Xro=r(f$," (DeBERTa model)"),f$.forEach(t),zro=i(S),zn=n(S,"LI",{});var m$=s(zn);Mae=n(m$,"STRONG",{});var pJr=s(Mae);Wro=r(pJr,"deberta-v2"),pJr.forEach(t),Qro=r(m$," \u2014 "),JR=n(m$,"A",{href:!0});var _Jr=s(JR);Hro=r(_Jr,"DebertaV2Tokenizer"),_Jr.forEach(t),Uro=r(m$," or "),YR=n(m$,"A",{href:!0});var uJr=s(YR);Jro=r(uJr,"DebertaV2TokenizerFast"),uJr.forEach(t),Yro=r(m$," (DeBERTa-v2 model)"),m$.forEach(t),Kro=i(S),Wn=n(S,"LI",{});var g$=s(Wn);Eae=n(g$,"STRONG",{});var bJr=s(Eae);Zro=r(bJr,"distilbert"),bJr.forEach(t),eto=r(g$," \u2014 "),KR=n(g$,"A",{href:!0});var vJr=s(KR);oto=r(vJr,"DistilBertTokenizer"),vJr.forEach(t),rto=r(g$," or "),ZR=n(g$,"A",{href:!0});var FJr=s(ZR);tto=r(FJr,"DistilBertTokenizerFast"),FJr.forEach(t),ato=r(g$," (DistilBERT model)"),g$.forEach(t),nto=i(S),Qn=n(S,"LI",{});var h$=s(Qn);Cae=n(h$,"STRONG",{});var TJr=s(Cae);sto=r(TJr,"dpr"),TJr.forEach(t),lto=r(h$," \u2014 "),eP=n(h$,"A",{href:!0});var MJr=s(eP);ito=r(MJr,"DPRQuestionEncoderTokenizer"),MJr.forEach(t),dto=r(h$," or "),oP=n(h$,"A",{href:!0});var EJr=s(oP);cto=r(EJr,"DPRQuestionEncoderTokenizerFast"),EJr.forEach(t),fto=r(h$," (DPR model)"),h$.forEach(t),mto=i(S),Hn=n(S,"LI",{});var p$=s(Hn);wae=n(p$,"STRONG",{});var CJr=s(wae);gto=r(CJr,"electra"),CJr.forEach(t),hto=r(p$," \u2014 "),rP=n(p$,"A",{href:!0});var wJr=s(rP);pto=r(wJr,"ElectraTokenizer"),wJr.forEach(t),_to=r(p$," or "),tP=n(p$,"A",{href:!0});var AJr=s(tP);uto=r(AJr,"ElectraTokenizerFast"),AJr.forEach(t),bto=r(p$," (ELECTRA model)"),p$.forEach(t),vto=i(S),Ng=n(S,"LI",{});var cwe=s(Ng);Aae=n(cwe,"STRONG",{});var yJr=s(Aae);Fto=r(yJr,"flaubert"),yJr.forEach(t),Tto=r(cwe," \u2014 "),aP=n(cwe,"A",{href:!0});var LJr=s(aP);Mto=r(LJr,"FlaubertTokenizer"),LJr.forEach(t),Eto=r(cwe," (FlauBERT model)"),cwe.forEach(t),Cto=i(S),Un=n(S,"LI",{});var _$=s(Un);yae=n(_$,"STRONG",{});var xJr=s(yae);wto=r(xJr,"fnet"),xJr.forEach(t),Ato=r(_$," \u2014 "),nP=n(_$,"A",{href:!0});var $Jr=s(nP);yto=r($Jr,"FNetTokenizer"),$Jr.forEach(t),Lto=r(_$," or "),sP=n(_$,"A",{href:!0});var kJr=s(sP);xto=r(kJr,"FNetTokenizerFast"),kJr.forEach(t),$to=r(_$," (FNet model)"),_$.forEach(t),kto=i(S),qg=n(S,"LI",{});var fwe=s(qg);Lae=n(fwe,"STRONG",{});var SJr=s(Lae);Sto=r(SJr,"fsmt"),SJr.forEach(t),Rto=r(fwe," \u2014 "),lP=n(fwe,"A",{href:!0});var RJr=s(lP);Pto=r(RJr,"FSMTTokenizer"),RJr.forEach(t),Bto=r(fwe," (FairSeq Machine-Translation model)"),fwe.forEach(t),Ito=i(S),Jn=n(S,"LI",{});var u$=s(Jn);xae=n(u$,"STRONG",{});var PJr=s(xae);Nto=r(PJr,"funnel"),PJr.forEach(t),qto=r(u$," \u2014 "),iP=n(u$,"A",{href:!0});var BJr=s(iP);jto=r(BJr,"FunnelTokenizer"),BJr.forEach(t),Dto=r(u$," or "),dP=n(u$,"A",{href:!0});var IJr=s(dP);Gto=r(IJr,"FunnelTokenizerFast"),IJr.forEach(t),Oto=r(u$," (Funnel Transformer model)"),u$.forEach(t),Vto=i(S),Yn=n(S,"LI",{});var b$=s(Yn);$ae=n(b$,"STRONG",{});var NJr=s($ae);Xto=r(NJr,"gpt2"),NJr.forEach(t),zto=r(b$," \u2014 "),cP=n(b$,"A",{href:!0});var qJr=s(cP);Wto=r(qJr,"GPT2Tokenizer"),qJr.forEach(t),Qto=r(b$," or "),fP=n(b$,"A",{href:!0});var jJr=s(fP);Hto=r(jJr,"GPT2TokenizerFast"),jJr.forEach(t),Uto=r(b$," (OpenAI GPT-2 model)"),b$.forEach(t),Jto=i(S),Kn=n(S,"LI",{});var v$=s(Kn);kae=n(v$,"STRONG",{});var DJr=s(kae);Yto=r(DJr,"gpt_neo"),DJr.forEach(t),Kto=r(v$," \u2014 "),mP=n(v$,"A",{href:!0});var GJr=s(mP);Zto=r(GJr,"GPT2Tokenizer"),GJr.forEach(t),eao=r(v$," or "),gP=n(v$,"A",{href:!0});var OJr=s(gP);oao=r(OJr,"GPT2TokenizerFast"),OJr.forEach(t),rao=r(v$," (GPT Neo model)"),v$.forEach(t),tao=i(S),jg=n(S,"LI",{});var mwe=s(jg);Sae=n(mwe,"STRONG",{});var VJr=s(Sae);aao=r(VJr,"gpt_neox"),VJr.forEach(t),nao=r(mwe," \u2014 "),hP=n(mwe,"A",{href:!0});var XJr=s(hP);sao=r(XJr,"GPTNeoXTokenizerFast"),XJr.forEach(t),lao=r(mwe," (GPT NeoX model)"),mwe.forEach(t),iao=i(S),Zn=n(S,"LI",{});var F$=s(Zn);Rae=n(F$,"STRONG",{});var zJr=s(Rae);dao=r(zJr,"gptj"),zJr.forEach(t),cao=r(F$," \u2014 "),pP=n(F$,"A",{href:!0});var WJr=s(pP);fao=r(WJr,"GPT2Tokenizer"),WJr.forEach(t),mao=r(F$," or "),_P=n(F$,"A",{href:!0});var QJr=s(_P);gao=r(QJr,"GPT2TokenizerFast"),QJr.forEach(t),hao=r(F$," (GPT-J model)"),F$.forEach(t),pao=i(S),es=n(S,"LI",{});var T$=s(es);Pae=n(T$,"STRONG",{});var HJr=s(Pae);_ao=r(HJr,"herbert"),HJr.forEach(t),uao=r(T$," \u2014 "),uP=n(T$,"A",{href:!0});var UJr=s(uP);bao=r(UJr,"HerbertTokenizer"),UJr.forEach(t),vao=r(T$," or "),bP=n(T$,"A",{href:!0});var JJr=s(bP);Fao=r(JJr,"HerbertTokenizerFast"),JJr.forEach(t),Tao=r(T$," (HerBERT model)"),T$.forEach(t),Mao=i(S),Dg=n(S,"LI",{});var gwe=s(Dg);Bae=n(gwe,"STRONG",{});var YJr=s(Bae);Eao=r(YJr,"hubert"),YJr.forEach(t),Cao=r(gwe," \u2014 "),vP=n(gwe,"A",{href:!0});var KJr=s(vP);wao=r(KJr,"Wav2Vec2CTCTokenizer"),KJr.forEach(t),Aao=r(gwe," (Hubert model)"),gwe.forEach(t),yao=i(S),os=n(S,"LI",{});var M$=s(os);Iae=n(M$,"STRONG",{});var ZJr=s(Iae);Lao=r(ZJr,"ibert"),ZJr.forEach(t),xao=r(M$," \u2014 "),FP=n(M$,"A",{href:!0});var eYr=s(FP);$ao=r(eYr,"RobertaTokenizer"),eYr.forEach(t),kao=r(M$," or "),TP=n(M$,"A",{href:!0});var oYr=s(TP);Sao=r(oYr,"RobertaTokenizerFast"),oYr.forEach(t),Rao=r(M$," (I-BERT model)"),M$.forEach(t),Pao=i(S),rs=n(S,"LI",{});var E$=s(rs);Nae=n(E$,"STRONG",{});var rYr=s(Nae);Bao=r(rYr,"layoutlm"),rYr.forEach(t),Iao=r(E$," \u2014 "),MP=n(E$,"A",{href:!0});var tYr=s(MP);Nao=r(tYr,"LayoutLMTokenizer"),tYr.forEach(t),qao=r(E$," or "),EP=n(E$,"A",{href:!0});var aYr=s(EP);jao=r(aYr,"LayoutLMTokenizerFast"),aYr.forEach(t),Dao=r(E$," (LayoutLM model)"),E$.forEach(t),Gao=i(S),ts=n(S,"LI",{});var C$=s(ts);qae=n(C$,"STRONG",{});var nYr=s(qae);Oao=r(nYr,"layoutlmv2"),nYr.forEach(t),Vao=r(C$," \u2014 "),CP=n(C$,"A",{href:!0});var sYr=s(CP);Xao=r(sYr,"LayoutLMv2Tokenizer"),sYr.forEach(t),zao=r(C$," or "),wP=n(C$,"A",{href:!0});var lYr=s(wP);Wao=r(lYr,"LayoutLMv2TokenizerFast"),lYr.forEach(t),Qao=r(C$," (LayoutLMv2 model)"),C$.forEach(t),Hao=i(S),as=n(S,"LI",{});var w$=s(as);jae=n(w$,"STRONG",{});var iYr=s(jae);Uao=r(iYr,"layoutlmv3"),iYr.forEach(t),Jao=r(w$," \u2014 "),AP=n(w$,"A",{href:!0});var dYr=s(AP);Yao=r(dYr,"LayoutLMv3Tokenizer"),dYr.forEach(t),Kao=r(w$," or "),yP=n(w$,"A",{href:!0});var cYr=s(yP);Zao=r(cYr,"LayoutLMv3TokenizerFast"),cYr.forEach(t),eno=r(w$," (LayoutLMv3 model)"),w$.forEach(t),ono=i(S),ns=n(S,"LI",{});var A$=s(ns);Dae=n(A$,"STRONG",{});var fYr=s(Dae);rno=r(fYr,"layoutxlm"),fYr.forEach(t),tno=r(A$," \u2014 "),LP=n(A$,"A",{href:!0});var mYr=s(LP);ano=r(mYr,"LayoutXLMTokenizer"),mYr.forEach(t),nno=r(A$," or "),xP=n(A$,"A",{href:!0});var gYr=s(xP);sno=r(gYr,"LayoutXLMTokenizerFast"),gYr.forEach(t),lno=r(A$," (LayoutXLM model)"),A$.forEach(t),ino=i(S),ss=n(S,"LI",{});var y$=s(ss);Gae=n(y$,"STRONG",{});var hYr=s(Gae);dno=r(hYr,"led"),hYr.forEach(t),cno=r(y$," \u2014 "),$P=n(y$,"A",{href:!0});var pYr=s($P);fno=r(pYr,"LEDTokenizer"),pYr.forEach(t),mno=r(y$," or "),kP=n(y$,"A",{href:!0});var _Yr=s(kP);gno=r(_Yr,"LEDTokenizerFast"),_Yr.forEach(t),hno=r(y$," (LED model)"),y$.forEach(t),pno=i(S),ls=n(S,"LI",{});var L$=s(ls);Oae=n(L$,"STRONG",{});var uYr=s(Oae);_no=r(uYr,"longformer"),uYr.forEach(t),uno=r(L$," \u2014 "),SP=n(L$,"A",{href:!0});var bYr=s(SP);bno=r(bYr,"LongformerTokenizer"),bYr.forEach(t),vno=r(L$," or "),RP=n(L$,"A",{href:!0});var vYr=s(RP);Fno=r(vYr,"LongformerTokenizerFast"),vYr.forEach(t),Tno=r(L$," (Longformer model)"),L$.forEach(t),Mno=i(S),Gg=n(S,"LI",{});var hwe=s(Gg);Vae=n(hwe,"STRONG",{});var FYr=s(Vae);Eno=r(FYr,"luke"),FYr.forEach(t),Cno=r(hwe," \u2014 "),PP=n(hwe,"A",{href:!0});var TYr=s(PP);wno=r(TYr,"LukeTokenizer"),TYr.forEach(t),Ano=r(hwe," (LUKE model)"),hwe.forEach(t),yno=i(S),is=n(S,"LI",{});var x$=s(is);Xae=n(x$,"STRONG",{});var MYr=s(Xae);Lno=r(MYr,"lxmert"),MYr.forEach(t),xno=r(x$," \u2014 "),BP=n(x$,"A",{href:!0});var EYr=s(BP);$no=r(EYr,"LxmertTokenizer"),EYr.forEach(t),kno=r(x$," or "),IP=n(x$,"A",{href:!0});var CYr=s(IP);Sno=r(CYr,"LxmertTokenizerFast"),CYr.forEach(t),Rno=r(x$," (LXMERT model)"),x$.forEach(t),Pno=i(S),Og=n(S,"LI",{});var pwe=s(Og);zae=n(pwe,"STRONG",{});var wYr=s(zae);Bno=r(wYr,"m2m_100"),wYr.forEach(t),Ino=r(pwe," \u2014 "),NP=n(pwe,"A",{href:!0});var AYr=s(NP);Nno=r(AYr,"M2M100Tokenizer"),AYr.forEach(t),qno=r(pwe," (M2M100 model)"),pwe.forEach(t),jno=i(S),Vg=n(S,"LI",{});var _we=s(Vg);Wae=n(_we,"STRONG",{});var yYr=s(Wae);Dno=r(yYr,"marian"),yYr.forEach(t),Gno=r(_we," \u2014 "),qP=n(_we,"A",{href:!0});var LYr=s(qP);Ono=r(LYr,"MarianTokenizer"),LYr.forEach(t),Vno=r(_we," (Marian model)"),_we.forEach(t),Xno=i(S),ds=n(S,"LI",{});var $$=s(ds);Qae=n($$,"STRONG",{});var xYr=s(Qae);zno=r(xYr,"mbart"),xYr.forEach(t),Wno=r($$," \u2014 "),jP=n($$,"A",{href:!0});var $Yr=s(jP);Qno=r($Yr,"MBartTokenizer"),$Yr.forEach(t),Hno=r($$," or "),DP=n($$,"A",{href:!0});var kYr=s(DP);Uno=r(kYr,"MBartTokenizerFast"),kYr.forEach(t),Jno=r($$," (mBART model)"),$$.forEach(t),Yno=i(S),cs=n(S,"LI",{});var k$=s(cs);Hae=n(k$,"STRONG",{});var SYr=s(Hae);Kno=r(SYr,"mbart50"),SYr.forEach(t),Zno=r(k$," \u2014 "),GP=n(k$,"A",{href:!0});var RYr=s(GP);eso=r(RYr,"MBart50Tokenizer"),RYr.forEach(t),oso=r(k$," or "),OP=n(k$,"A",{href:!0});var PYr=s(OP);rso=r(PYr,"MBart50TokenizerFast"),PYr.forEach(t),tso=r(k$," (mBART-50 model)"),k$.forEach(t),aso=i(S),fs=n(S,"LI",{});var S$=s(fs);Uae=n(S$,"STRONG",{});var BYr=s(Uae);nso=r(BYr,"megatron-bert"),BYr.forEach(t),sso=r(S$," \u2014 "),VP=n(S$,"A",{href:!0});var IYr=s(VP);lso=r(IYr,"BertTokenizer"),IYr.forEach(t),iso=r(S$," or "),XP=n(S$,"A",{href:!0});var NYr=s(XP);dso=r(NYr,"BertTokenizerFast"),NYr.forEach(t),cso=r(S$," (Megatron-BERT model)"),S$.forEach(t),fso=i(S),Xg=n(S,"LI",{});var uwe=s(Xg);Jae=n(uwe,"STRONG",{});var qYr=s(Jae);mso=r(qYr,"mluke"),qYr.forEach(t),gso=r(uwe," \u2014 "),zP=n(uwe,"A",{href:!0});var jYr=s(zP);hso=r(jYr,"MLukeTokenizer"),jYr.forEach(t),pso=r(uwe," (mLUKE model)"),uwe.forEach(t),_so=i(S),ms=n(S,"LI",{});var R$=s(ms);Yae=n(R$,"STRONG",{});var DYr=s(Yae);uso=r(DYr,"mobilebert"),DYr.forEach(t),bso=r(R$," \u2014 "),WP=n(R$,"A",{href:!0});var GYr=s(WP);vso=r(GYr,"MobileBertTokenizer"),GYr.forEach(t),Fso=r(R$," or "),QP=n(R$,"A",{href:!0});var OYr=s(QP);Tso=r(OYr,"MobileBertTokenizerFast"),OYr.forEach(t),Mso=r(R$," (MobileBERT model)"),R$.forEach(t),Eso=i(S),gs=n(S,"LI",{});var P$=s(gs);Kae=n(P$,"STRONG",{});var VYr=s(Kae);Cso=r(VYr,"mpnet"),VYr.forEach(t),wso=r(P$," \u2014 "),HP=n(P$,"A",{href:!0});var XYr=s(HP);Aso=r(XYr,"MPNetTokenizer"),XYr.forEach(t),yso=r(P$," or "),UP=n(P$,"A",{href:!0});var zYr=s(UP);Lso=r(zYr,"MPNetTokenizerFast"),zYr.forEach(t),xso=r(P$," (MPNet model)"),P$.forEach(t),$so=i(S),hs=n(S,"LI",{});var B$=s(hs);Zae=n(B$,"STRONG",{});var WYr=s(Zae);kso=r(WYr,"mt5"),WYr.forEach(t),Sso=r(B$," \u2014 "),JP=n(B$,"A",{href:!0});var QYr=s(JP);Rso=r(QYr,"MT5Tokenizer"),QYr.forEach(t),Pso=r(B$," or "),YP=n(B$,"A",{href:!0});var HYr=s(YP);Bso=r(HYr,"MT5TokenizerFast"),HYr.forEach(t),Iso=r(B$," (MT5 model)"),B$.forEach(t),Nso=i(S),ps=n(S,"LI",{});var I$=s(ps);ene=n(I$,"STRONG",{});var UYr=s(ene);qso=r(UYr,"nystromformer"),UYr.forEach(t),jso=r(I$," \u2014 "),KP=n(I$,"A",{href:!0});var JYr=s(KP);Dso=r(JYr,"AlbertTokenizer"),JYr.forEach(t),Gso=r(I$," or "),ZP=n(I$,"A",{href:!0});var YYr=s(ZP);Oso=r(YYr,"AlbertTokenizerFast"),YYr.forEach(t),Vso=r(I$," (Nystr\xF6mformer model)"),I$.forEach(t),Xso=i(S),_s=n(S,"LI",{});var N$=s(_s);one=n(N$,"STRONG",{});var KYr=s(one);zso=r(KYr,"openai-gpt"),KYr.forEach(t),Wso=r(N$," \u2014 "),eB=n(N$,"A",{href:!0});var ZYr=s(eB);Qso=r(ZYr,"OpenAIGPTTokenizer"),ZYr.forEach(t),Hso=r(N$," or "),oB=n(N$,"A",{href:!0});var eKr=s(oB);Uso=r(eKr,"OpenAIGPTTokenizerFast"),eKr.forEach(t),Jso=r(N$," (OpenAI GPT model)"),N$.forEach(t),Yso=i(S),zg=n(S,"LI",{});var bwe=s(zg);rne=n(bwe,"STRONG",{});var oKr=s(rne);Kso=r(oKr,"opt"),oKr.forEach(t),Zso=r(bwe," \u2014 "),rB=n(bwe,"A",{href:!0});var rKr=s(rB);elo=r(rKr,"GPT2Tokenizer"),rKr.forEach(t),olo=r(bwe," (OPT model)"),bwe.forEach(t),rlo=i(S),us=n(S,"LI",{});var q$=s(us);tne=n(q$,"STRONG",{});var tKr=s(tne);tlo=r(tKr,"pegasus"),tKr.forEach(t),alo=r(q$," \u2014 "),tB=n(q$,"A",{href:!0});var aKr=s(tB);nlo=r(aKr,"PegasusTokenizer"),aKr.forEach(t),slo=r(q$," or "),aB=n(q$,"A",{href:!0});var nKr=s(aB);llo=r(nKr,"PegasusTokenizerFast"),nKr.forEach(t),ilo=r(q$," (Pegasus model)"),q$.forEach(t),dlo=i(S),Wg=n(S,"LI",{});var vwe=s(Wg);ane=n(vwe,"STRONG",{});var sKr=s(ane);clo=r(sKr,"perceiver"),sKr.forEach(t),flo=r(vwe," \u2014 "),nB=n(vwe,"A",{href:!0});var lKr=s(nB);mlo=r(lKr,"PerceiverTokenizer"),lKr.forEach(t),glo=r(vwe," (Perceiver model)"),vwe.forEach(t),hlo=i(S),Qg=n(S,"LI",{});var Fwe=s(Qg);nne=n(Fwe,"STRONG",{});var iKr=s(nne);plo=r(iKr,"phobert"),iKr.forEach(t),_lo=r(Fwe," \u2014 "),sB=n(Fwe,"A",{href:!0});var dKr=s(sB);ulo=r(dKr,"PhobertTokenizer"),dKr.forEach(t),blo=r(Fwe," (PhoBERT model)"),Fwe.forEach(t),vlo=i(S),Hg=n(S,"LI",{});var Twe=s(Hg);sne=n(Twe,"STRONG",{});var cKr=s(sne);Flo=r(cKr,"plbart"),cKr.forEach(t),Tlo=r(Twe," \u2014 "),lB=n(Twe,"A",{href:!0});var fKr=s(lB);Mlo=r(fKr,"PLBartTokenizer"),fKr.forEach(t),Elo=r(Twe," (PLBart model)"),Twe.forEach(t),Clo=i(S),Ug=n(S,"LI",{});var Mwe=s(Ug);lne=n(Mwe,"STRONG",{});var mKr=s(lne);wlo=r(mKr,"prophetnet"),mKr.forEach(t),Alo=r(Mwe," \u2014 "),iB=n(Mwe,"A",{href:!0});var gKr=s(iB);ylo=r(gKr,"ProphetNetTokenizer"),gKr.forEach(t),Llo=r(Mwe," (ProphetNet model)"),Mwe.forEach(t),xlo=i(S),bs=n(S,"LI",{});var j$=s(bs);ine=n(j$,"STRONG",{});var hKr=s(ine);$lo=r(hKr,"qdqbert"),hKr.forEach(t),klo=r(j$," \u2014 "),dB=n(j$,"A",{href:!0});var pKr=s(dB);Slo=r(pKr,"BertTokenizer"),pKr.forEach(t),Rlo=r(j$," or "),cB=n(j$,"A",{href:!0});var _Kr=s(cB);Plo=r(_Kr,"BertTokenizerFast"),_Kr.forEach(t),Blo=r(j$," (QDQBert model)"),j$.forEach(t),Ilo=i(S),Jg=n(S,"LI",{});var Ewe=s(Jg);dne=n(Ewe,"STRONG",{});var uKr=s(dne);Nlo=r(uKr,"rag"),uKr.forEach(t),qlo=r(Ewe," \u2014 "),fB=n(Ewe,"A",{href:!0});var bKr=s(fB);jlo=r(bKr,"RagTokenizer"),bKr.forEach(t),Dlo=r(Ewe," (RAG model)"),Ewe.forEach(t),Glo=i(S),vs=n(S,"LI",{});var D$=s(vs);cne=n(D$,"STRONG",{});var vKr=s(cne);Olo=r(vKr,"realm"),vKr.forEach(t),Vlo=r(D$," \u2014 "),mB=n(D$,"A",{href:!0});var FKr=s(mB);Xlo=r(FKr,"RealmTokenizer"),FKr.forEach(t),zlo=r(D$," or "),gB=n(D$,"A",{href:!0});var TKr=s(gB);Wlo=r(TKr,"RealmTokenizerFast"),TKr.forEach(t),Qlo=r(D$," (REALM model)"),D$.forEach(t),Hlo=i(S),Fs=n(S,"LI",{});var G$=s(Fs);fne=n(G$,"STRONG",{});var MKr=s(fne);Ulo=r(MKr,"reformer"),MKr.forEach(t),Jlo=r(G$," \u2014 "),hB=n(G$,"A",{href:!0});var EKr=s(hB);Ylo=r(EKr,"ReformerTokenizer"),EKr.forEach(t),Klo=r(G$," or "),pB=n(G$,"A",{href:!0});var CKr=s(pB);Zlo=r(CKr,"ReformerTokenizerFast"),CKr.forEach(t),eio=r(G$," (Reformer model)"),G$.forEach(t),oio=i(S),Ts=n(S,"LI",{});var O$=s(Ts);mne=n(O$,"STRONG",{});var wKr=s(mne);rio=r(wKr,"rembert"),wKr.forEach(t),tio=r(O$," \u2014 "),_B=n(O$,"A",{href:!0});var AKr=s(_B);aio=r(AKr,"RemBertTokenizer"),AKr.forEach(t),nio=r(O$," or "),uB=n(O$,"A",{href:!0});var yKr=s(uB);sio=r(yKr,"RemBertTokenizerFast"),yKr.forEach(t),lio=r(O$," (RemBERT model)"),O$.forEach(t),iio=i(S),Ms=n(S,"LI",{});var V$=s(Ms);gne=n(V$,"STRONG",{});var LKr=s(gne);dio=r(LKr,"retribert"),LKr.forEach(t),cio=r(V$," \u2014 "),bB=n(V$,"A",{href:!0});var xKr=s(bB);fio=r(xKr,"RetriBertTokenizer"),xKr.forEach(t),mio=r(V$," or "),vB=n(V$,"A",{href:!0});var $Kr=s(vB);gio=r($Kr,"RetriBertTokenizerFast"),$Kr.forEach(t),hio=r(V$," (RetriBERT model)"),V$.forEach(t),pio=i(S),Es=n(S,"LI",{});var X$=s(Es);hne=n(X$,"STRONG",{});var kKr=s(hne);_io=r(kKr,"roberta"),kKr.forEach(t),uio=r(X$," \u2014 "),FB=n(X$,"A",{href:!0});var SKr=s(FB);bio=r(SKr,"RobertaTokenizer"),SKr.forEach(t),vio=r(X$," or "),TB=n(X$,"A",{href:!0});var RKr=s(TB);Fio=r(RKr,"RobertaTokenizerFast"),RKr.forEach(t),Tio=r(X$," (RoBERTa model)"),X$.forEach(t),Mio=i(S),Cs=n(S,"LI",{});var z$=s(Cs);pne=n(z$,"STRONG",{});var PKr=s(pne);Eio=r(PKr,"roformer"),PKr.forEach(t),Cio=r(z$," \u2014 "),MB=n(z$,"A",{href:!0});var BKr=s(MB);wio=r(BKr,"RoFormerTokenizer"),BKr.forEach(t),Aio=r(z$," or "),EB=n(z$,"A",{href:!0});var IKr=s(EB);yio=r(IKr,"RoFormerTokenizerFast"),IKr.forEach(t),Lio=r(z$," (RoFormer model)"),z$.forEach(t),xio=i(S),Yg=n(S,"LI",{});var Cwe=s(Yg);_ne=n(Cwe,"STRONG",{});var NKr=s(_ne);$io=r(NKr,"speech_to_text"),NKr.forEach(t),kio=r(Cwe," \u2014 "),CB=n(Cwe,"A",{href:!0});var qKr=s(CB);Sio=r(qKr,"Speech2TextTokenizer"),qKr.forEach(t),Rio=r(Cwe," (Speech2Text model)"),Cwe.forEach(t),Pio=i(S),Kg=n(S,"LI",{});var wwe=s(Kg);une=n(wwe,"STRONG",{});var jKr=s(une);Bio=r(jKr,"speech_to_text_2"),jKr.forEach(t),Iio=r(wwe," \u2014 "),wB=n(wwe,"A",{href:!0});var DKr=s(wB);Nio=r(DKr,"Speech2Text2Tokenizer"),DKr.forEach(t),qio=r(wwe," (Speech2Text2 model)"),wwe.forEach(t),jio=i(S),ws=n(S,"LI",{});var W$=s(ws);bne=n(W$,"STRONG",{});var GKr=s(bne);Dio=r(GKr,"splinter"),GKr.forEach(t),Gio=r(W$," \u2014 "),AB=n(W$,"A",{href:!0});var OKr=s(AB);Oio=r(OKr,"SplinterTokenizer"),OKr.forEach(t),Vio=r(W$," or "),yB=n(W$,"A",{href:!0});var VKr=s(yB);Xio=r(VKr,"SplinterTokenizerFast"),VKr.forEach(t),zio=r(W$," (Splinter model)"),W$.forEach(t),Wio=i(S),As=n(S,"LI",{});var Q$=s(As);vne=n(Q$,"STRONG",{});var XKr=s(vne);Qio=r(XKr,"squeezebert"),XKr.forEach(t),Hio=r(Q$," \u2014 "),LB=n(Q$,"A",{href:!0});var zKr=s(LB);Uio=r(zKr,"SqueezeBertTokenizer"),zKr.forEach(t),Jio=r(Q$," or "),xB=n(Q$,"A",{href:!0});var WKr=s(xB);Yio=r(WKr,"SqueezeBertTokenizerFast"),WKr.forEach(t),Kio=r(Q$," (SqueezeBERT model)"),Q$.forEach(t),Zio=i(S),ys=n(S,"LI",{});var H$=s(ys);Fne=n(H$,"STRONG",{});var QKr=s(Fne);edo=r(QKr,"t5"),QKr.forEach(t),odo=r(H$," \u2014 "),$B=n(H$,"A",{href:!0});var HKr=s($B);rdo=r(HKr,"T5Tokenizer"),HKr.forEach(t),tdo=r(H$," or "),kB=n(H$,"A",{href:!0});var UKr=s(kB);ado=r(UKr,"T5TokenizerFast"),UKr.forEach(t),ndo=r(H$," (T5 model)"),H$.forEach(t),sdo=i(S),Zg=n(S,"LI",{});var Awe=s(Zg);Tne=n(Awe,"STRONG",{});var JKr=s(Tne);ldo=r(JKr,"tapas"),JKr.forEach(t),ido=r(Awe," \u2014 "),SB=n(Awe,"A",{href:!0});var YKr=s(SB);ddo=r(YKr,"TapasTokenizer"),YKr.forEach(t),cdo=r(Awe," (TAPAS model)"),Awe.forEach(t),fdo=i(S),eh=n(S,"LI",{});var ywe=s(eh);Mne=n(ywe,"STRONG",{});var KKr=s(Mne);mdo=r(KKr,"tapex"),KKr.forEach(t),gdo=r(ywe," \u2014 "),RB=n(ywe,"A",{href:!0});var ZKr=s(RB);hdo=r(ZKr,"TapexTokenizer"),ZKr.forEach(t),pdo=r(ywe," (TAPEX model)"),ywe.forEach(t),_do=i(S),oh=n(S,"LI",{});var Lwe=s(oh);Ene=n(Lwe,"STRONG",{});var eZr=s(Ene);udo=r(eZr,"transfo-xl"),eZr.forEach(t),bdo=r(Lwe," \u2014 "),PB=n(Lwe,"A",{href:!0});var oZr=s(PB);vdo=r(oZr,"TransfoXLTokenizer"),oZr.forEach(t),Fdo=r(Lwe," (Transformer-XL model)"),Lwe.forEach(t),Tdo=i(S),Ls=n(S,"LI",{});var U$=s(Ls);Cne=n(U$,"STRONG",{});var rZr=s(Cne);Mdo=r(rZr,"visual_bert"),rZr.forEach(t),Edo=r(U$," \u2014 "),BB=n(U$,"A",{href:!0});var tZr=s(BB);Cdo=r(tZr,"BertTokenizer"),tZr.forEach(t),wdo=r(U$," or "),IB=n(U$,"A",{href:!0});var aZr=s(IB);Ado=r(aZr,"BertTokenizerFast"),aZr.forEach(t),ydo=r(U$," (VisualBERT model)"),U$.forEach(t),Ldo=i(S),rh=n(S,"LI",{});var xwe=s(rh);wne=n(xwe,"STRONG",{});var nZr=s(wne);xdo=r(nZr,"wav2vec2"),nZr.forEach(t),$do=r(xwe," \u2014 "),NB=n(xwe,"A",{href:!0});var sZr=s(NB);kdo=r(sZr,"Wav2Vec2CTCTokenizer"),sZr.forEach(t),Sdo=r(xwe," (Wav2Vec2 model)"),xwe.forEach(t),Rdo=i(S),th=n(S,"LI",{});var $we=s(th);Ane=n($we,"STRONG",{});var lZr=s(Ane);Pdo=r(lZr,"wav2vec2-conformer"),lZr.forEach(t),Bdo=r($we," \u2014 "),qB=n($we,"A",{href:!0});var iZr=s(qB);Ido=r(iZr,"Wav2Vec2CTCTokenizer"),iZr.forEach(t),Ndo=r($we," (Wav2Vec2-Conformer model)"),$we.forEach(t),qdo=i(S),ah=n(S,"LI",{});var kwe=s(ah);yne=n(kwe,"STRONG",{});var dZr=s(yne);jdo=r(dZr,"wav2vec2_phoneme"),dZr.forEach(t),Ddo=r(kwe," \u2014 "),jB=n(kwe,"A",{href:!0});var cZr=s(jB);Gdo=r(cZr,"Wav2Vec2PhonemeCTCTokenizer"),cZr.forEach(t),Odo=r(kwe," (Wav2Vec2Phoneme model)"),kwe.forEach(t),Vdo=i(S),xs=n(S,"LI",{});var J$=s(xs);Lne=n(J$,"STRONG",{});var fZr=s(Lne);Xdo=r(fZr,"xglm"),fZr.forEach(t),zdo=r(J$," \u2014 "),DB=n(J$,"A",{href:!0});var mZr=s(DB);Wdo=r(mZr,"XGLMTokenizer"),mZr.forEach(t),Qdo=r(J$," or "),GB=n(J$,"A",{href:!0});var gZr=s(GB);Hdo=r(gZr,"XGLMTokenizerFast"),gZr.forEach(t),Udo=r(J$," (XGLM model)"),J$.forEach(t),Jdo=i(S),nh=n(S,"LI",{});var Swe=s(nh);xne=n(Swe,"STRONG",{});var hZr=s(xne);Ydo=r(hZr,"xlm"),hZr.forEach(t),Kdo=r(Swe," \u2014 "),OB=n(Swe,"A",{href:!0});var pZr=s(OB);Zdo=r(pZr,"XLMTokenizer"),pZr.forEach(t),eco=r(Swe," (XLM model)"),Swe.forEach(t),oco=i(S),sh=n(S,"LI",{});var Rwe=s(sh);$ne=n(Rwe,"STRONG",{});var _Zr=s($ne);rco=r(_Zr,"xlm-prophetnet"),_Zr.forEach(t),tco=r(Rwe," \u2014 "),VB=n(Rwe,"A",{href:!0});var uZr=s(VB);aco=r(uZr,"XLMProphetNetTokenizer"),uZr.forEach(t),nco=r(Rwe," (XLM-ProphetNet model)"),Rwe.forEach(t),sco=i(S),$s=n(S,"LI",{});var Y$=s($s);kne=n(Y$,"STRONG",{});var bZr=s(kne);lco=r(bZr,"xlm-roberta"),bZr.forEach(t),ico=r(Y$," \u2014 "),XB=n(Y$,"A",{href:!0});var vZr=s(XB);dco=r(vZr,"XLMRobertaTokenizer"),vZr.forEach(t),cco=r(Y$," or "),zB=n(Y$,"A",{href:!0});var FZr=s(zB);fco=r(FZr,"XLMRobertaTokenizerFast"),FZr.forEach(t),mco=r(Y$," (XLM-RoBERTa model)"),Y$.forEach(t),gco=i(S),ks=n(S,"LI",{});var K$=s(ks);Sne=n(K$,"STRONG",{});var TZr=s(Sne);hco=r(TZr,"xlm-roberta-xl"),TZr.forEach(t),pco=r(K$," \u2014 "),WB=n(K$,"A",{href:!0});var MZr=s(WB);_co=r(MZr,"RobertaTokenizer"),MZr.forEach(t),uco=r(K$," or "),QB=n(K$,"A",{href:!0});var EZr=s(QB);bco=r(EZr,"RobertaTokenizerFast"),EZr.forEach(t),vco=r(K$," (XLM-RoBERTa-XL model)"),K$.forEach(t),Fco=i(S),Ss=n(S,"LI",{});var Z$=s(Ss);Rne=n(Z$,"STRONG",{});var CZr=s(Rne);Tco=r(CZr,"xlnet"),CZr.forEach(t),Mco=r(Z$," \u2014 "),HB=n(Z$,"A",{href:!0});var wZr=s(HB);Eco=r(wZr,"XLNetTokenizer"),wZr.forEach(t),Cco=r(Z$," or "),UB=n(Z$,"A",{href:!0});var AZr=s(UB);wco=r(AZr,"XLNetTokenizerFast"),AZr.forEach(t),Aco=r(Z$," (XLNet model)"),Z$.forEach(t),yco=i(S),Rs=n(S,"LI",{});var ek=s(Rs);Pne=n(ek,"STRONG",{});var yZr=s(Pne);Lco=r(yZr,"yoso"),yZr.forEach(t),xco=r(ek," \u2014 "),JB=n(ek,"A",{href:!0});var LZr=s(JB);$co=r(LZr,"AlbertTokenizer"),LZr.forEach(t),kco=r(ek," or "),YB=n(ek,"A",{href:!0});var xZr=s(YB);Sco=r(xZr,"AlbertTokenizerFast"),xZr.forEach(t),Rco=r(ek," (YOSO model)"),ek.forEach(t),S.forEach(t),Pco=i(js),T(lh.$$.fragment,js),js.forEach(t),Bco=i(qs),ih=n(qs,"DIV",{class:!0});var nGe=s(ih);T(ZA.$$.fragment,nGe),Ico=i(nGe),Bne=n(nGe,"P",{});var $Zr=s(Bne);Nco=r($Zr,"Register a new tokenizer in this mapping."),$Zr.forEach(t),nGe.forEach(t),qs.forEach(t),sje=i(f),Ei=n(f,"H2",{class:!0});var sGe=s(Ei);dh=n(sGe,"A",{id:!0,class:!0,href:!0});var kZr=s(dh);Ine=n(kZr,"SPAN",{});var SZr=s(Ine);T(ey.$$.fragment,SZr),SZr.forEach(t),kZr.forEach(t),qco=i(sGe),Nne=n(sGe,"SPAN",{});var RZr=s(Nne);jco=r(RZr,"AutoFeatureExtractor"),RZr.forEach(t),sGe.forEach(t),lje=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(oy.$$.fragment,Ds),Dco=i(Ds),ry=n(Ds,"P",{});var lGe=s(ry);Gco=r(lGe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),KB=n(lGe,"A",{href:!0});var PZr=s(KB);Oco=r(PZr,"AutoFeatureExtractor.from_pretrained()"),PZr.forEach(t),Vco=r(lGe," class method."),lGe.forEach(t),Xco=i(Ds),ty=n(Ds,"P",{});var iGe=s(ty);zco=r(iGe,"This class cannot be instantiated directly using "),qne=n(iGe,"CODE",{});var BZr=s(qne);Wco=r(BZr,"__init__()"),BZr.forEach(t),Qco=r(iGe," (throws an error)."),iGe.forEach(t),Hco=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(ay.$$.fragment,Zt),Uco=i(Zt),jne=n(Zt,"P",{});var IZr=s(jne);Jco=r(IZr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),IZr.forEach(t),Yco=i(Zt),ya=n(Zt,"P",{});var V0=s(ya);Kco=r(V0,"The feature extractor class to instantiate is selected based on the "),Dne=n(V0,"CODE",{});var NZr=s(Dne);Zco=r(NZr,"model_type"),NZr.forEach(t),efo=r(V0,` property of the config object
(either passed as an argument or loaded from `),Gne=n(V0,"CODE",{});var qZr=s(Gne);ofo=r(qZr,"pretrained_model_name_or_path"),qZr.forEach(t),rfo=r(V0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),One=n(V0,"CODE",{});var jZr=s(One);tfo=r(jZr,"pretrained_model_name_or_path"),jZr.forEach(t),afo=r(V0,":"),V0.forEach(t),nfo=i(Zt),Y=n(Zt,"UL",{});var K=s(Y);ch=n(K,"LI",{});var Pwe=s(ch);Vne=n(Pwe,"STRONG",{});var DZr=s(Vne);sfo=r(DZr,"beit"),DZr.forEach(t),lfo=r(Pwe," \u2014 "),ZB=n(Pwe,"A",{href:!0});var GZr=s(ZB);ifo=r(GZr,"BeitFeatureExtractor"),GZr.forEach(t),dfo=r(Pwe," (BEiT model)"),Pwe.forEach(t),cfo=i(K),fh=n(K,"LI",{});var Bwe=s(fh);Xne=n(Bwe,"STRONG",{});var OZr=s(Xne);ffo=r(OZr,"clip"),OZr.forEach(t),mfo=r(Bwe," \u2014 "),eI=n(Bwe,"A",{href:!0});var VZr=s(eI);gfo=r(VZr,"CLIPFeatureExtractor"),VZr.forEach(t),hfo=r(Bwe," (CLIP model)"),Bwe.forEach(t),pfo=i(K),mh=n(K,"LI",{});var Iwe=s(mh);zne=n(Iwe,"STRONG",{});var XZr=s(zne);_fo=r(XZr,"convnext"),XZr.forEach(t),ufo=r(Iwe," \u2014 "),oI=n(Iwe,"A",{href:!0});var zZr=s(oI);bfo=r(zZr,"ConvNextFeatureExtractor"),zZr.forEach(t),vfo=r(Iwe," (ConvNeXT model)"),Iwe.forEach(t),Ffo=i(K),gh=n(K,"LI",{});var Nwe=s(gh);Wne=n(Nwe,"STRONG",{});var WZr=s(Wne);Tfo=r(WZr,"cvt"),WZr.forEach(t),Mfo=r(Nwe," \u2014 "),rI=n(Nwe,"A",{href:!0});var QZr=s(rI);Efo=r(QZr,"ConvNextFeatureExtractor"),QZr.forEach(t),Cfo=r(Nwe," (CvT model)"),Nwe.forEach(t),wfo=i(K),hh=n(K,"LI",{});var qwe=s(hh);Qne=n(qwe,"STRONG",{});var HZr=s(Qne);Afo=r(HZr,"data2vec-audio"),HZr.forEach(t),yfo=r(qwe," \u2014 "),tI=n(qwe,"A",{href:!0});var UZr=s(tI);Lfo=r(UZr,"Wav2Vec2FeatureExtractor"),UZr.forEach(t),xfo=r(qwe," (Data2VecAudio model)"),qwe.forEach(t),$fo=i(K),ph=n(K,"LI",{});var jwe=s(ph);Hne=n(jwe,"STRONG",{});var JZr=s(Hne);kfo=r(JZr,"data2vec-vision"),JZr.forEach(t),Sfo=r(jwe," \u2014 "),aI=n(jwe,"A",{href:!0});var YZr=s(aI);Rfo=r(YZr,"BeitFeatureExtractor"),YZr.forEach(t),Pfo=r(jwe," (Data2VecVision model)"),jwe.forEach(t),Bfo=i(K),_h=n(K,"LI",{});var Dwe=s(_h);Une=n(Dwe,"STRONG",{});var KZr=s(Une);Ifo=r(KZr,"deit"),KZr.forEach(t),Nfo=r(Dwe," \u2014 "),nI=n(Dwe,"A",{href:!0});var ZZr=s(nI);qfo=r(ZZr,"DeiTFeatureExtractor"),ZZr.forEach(t),jfo=r(Dwe," (DeiT model)"),Dwe.forEach(t),Dfo=i(K),uh=n(K,"LI",{});var Gwe=s(uh);Jne=n(Gwe,"STRONG",{});var eet=s(Jne);Gfo=r(eet,"detr"),eet.forEach(t),Ofo=r(Gwe," \u2014 "),sI=n(Gwe,"A",{href:!0});var oet=s(sI);Vfo=r(oet,"DetrFeatureExtractor"),oet.forEach(t),Xfo=r(Gwe," (DETR model)"),Gwe.forEach(t),zfo=i(K),bh=n(K,"LI",{});var Owe=s(bh);Yne=n(Owe,"STRONG",{});var ret=s(Yne);Wfo=r(ret,"dpt"),ret.forEach(t),Qfo=r(Owe," \u2014 "),lI=n(Owe,"A",{href:!0});var tet=s(lI);Hfo=r(tet,"DPTFeatureExtractor"),tet.forEach(t),Ufo=r(Owe," (DPT model)"),Owe.forEach(t),Jfo=i(K),vh=n(K,"LI",{});var Vwe=s(vh);Kne=n(Vwe,"STRONG",{});var aet=s(Kne);Yfo=r(aet,"flava"),aet.forEach(t),Kfo=r(Vwe," \u2014 "),iI=n(Vwe,"A",{href:!0});var net=s(iI);Zfo=r(net,"FlavaFeatureExtractor"),net.forEach(t),emo=r(Vwe," (FLAVA model)"),Vwe.forEach(t),omo=i(K),Fh=n(K,"LI",{});var Xwe=s(Fh);Zne=n(Xwe,"STRONG",{});var set=s(Zne);rmo=r(set,"glpn"),set.forEach(t),tmo=r(Xwe," \u2014 "),dI=n(Xwe,"A",{href:!0});var iet=s(dI);amo=r(iet,"GLPNFeatureExtractor"),iet.forEach(t),nmo=r(Xwe," (GLPN model)"),Xwe.forEach(t),smo=i(K),Th=n(K,"LI",{});var zwe=s(Th);ese=n(zwe,"STRONG",{});var det=s(ese);lmo=r(det,"hubert"),det.forEach(t),imo=r(zwe," \u2014 "),cI=n(zwe,"A",{href:!0});var cet=s(cI);dmo=r(cet,"Wav2Vec2FeatureExtractor"),cet.forEach(t),cmo=r(zwe," (Hubert model)"),zwe.forEach(t),fmo=i(K),Mh=n(K,"LI",{});var Wwe=s(Mh);ose=n(Wwe,"STRONG",{});var fet=s(ose);mmo=r(fet,"imagegpt"),fet.forEach(t),gmo=r(Wwe," \u2014 "),fI=n(Wwe,"A",{href:!0});var met=s(fI);hmo=r(met,"ImageGPTFeatureExtractor"),met.forEach(t),pmo=r(Wwe," (ImageGPT model)"),Wwe.forEach(t),_mo=i(K),Eh=n(K,"LI",{});var Qwe=s(Eh);rse=n(Qwe,"STRONG",{});var get=s(rse);umo=r(get,"layoutlmv2"),get.forEach(t),bmo=r(Qwe," \u2014 "),mI=n(Qwe,"A",{href:!0});var het=s(mI);vmo=r(het,"LayoutLMv2FeatureExtractor"),het.forEach(t),Fmo=r(Qwe," (LayoutLMv2 model)"),Qwe.forEach(t),Tmo=i(K),Ch=n(K,"LI",{});var Hwe=s(Ch);tse=n(Hwe,"STRONG",{});var pet=s(tse);Mmo=r(pet,"layoutlmv3"),pet.forEach(t),Emo=r(Hwe," \u2014 "),gI=n(Hwe,"A",{href:!0});var _et=s(gI);Cmo=r(_et,"LayoutLMv3FeatureExtractor"),_et.forEach(t),wmo=r(Hwe," (LayoutLMv3 model)"),Hwe.forEach(t),Amo=i(K),wh=n(K,"LI",{});var Uwe=s(wh);ase=n(Uwe,"STRONG",{});var uet=s(ase);ymo=r(uet,"levit"),uet.forEach(t),Lmo=r(Uwe," \u2014 "),hI=n(Uwe,"A",{href:!0});var bet=s(hI);xmo=r(bet,"LevitFeatureExtractor"),bet.forEach(t),$mo=r(Uwe," (LeViT model)"),Uwe.forEach(t),kmo=i(K),Ah=n(K,"LI",{});var Jwe=s(Ah);nse=n(Jwe,"STRONG",{});var vet=s(nse);Smo=r(vet,"maskformer"),vet.forEach(t),Rmo=r(Jwe," \u2014 "),pI=n(Jwe,"A",{href:!0});var Fet=s(pI);Pmo=r(Fet,"MaskFormerFeatureExtractor"),Fet.forEach(t),Bmo=r(Jwe," (MaskFormer model)"),Jwe.forEach(t),Imo=i(K),yh=n(K,"LI",{});var Ywe=s(yh);sse=n(Ywe,"STRONG",{});var Tet=s(sse);Nmo=r(Tet,"mctct"),Tet.forEach(t),qmo=r(Ywe," \u2014 "),_I=n(Ywe,"A",{href:!0});var Met=s(_I);jmo=r(Met,"MCTCTFeatureExtractor"),Met.forEach(t),Dmo=r(Ywe," (M-CTC-T model)"),Ywe.forEach(t),Gmo=i(K),Lh=n(K,"LI",{});var Kwe=s(Lh);lse=n(Kwe,"STRONG",{});var Eet=s(lse);Omo=r(Eet,"perceiver"),Eet.forEach(t),Vmo=r(Kwe," \u2014 "),uI=n(Kwe,"A",{href:!0});var Cet=s(uI);Xmo=r(Cet,"PerceiverFeatureExtractor"),Cet.forEach(t),zmo=r(Kwe," (Perceiver model)"),Kwe.forEach(t),Wmo=i(K),xh=n(K,"LI",{});var Zwe=s(xh);ise=n(Zwe,"STRONG",{});var wet=s(ise);Qmo=r(wet,"poolformer"),wet.forEach(t),Hmo=r(Zwe," \u2014 "),bI=n(Zwe,"A",{href:!0});var Aet=s(bI);Umo=r(Aet,"PoolFormerFeatureExtractor"),Aet.forEach(t),Jmo=r(Zwe," (PoolFormer model)"),Zwe.forEach(t),Ymo=i(K),$h=n(K,"LI",{});var eAe=s($h);dse=n(eAe,"STRONG",{});var yet=s(dse);Kmo=r(yet,"regnet"),yet.forEach(t),Zmo=r(eAe," \u2014 "),vI=n(eAe,"A",{href:!0});var Let=s(vI);ego=r(Let,"ConvNextFeatureExtractor"),Let.forEach(t),ogo=r(eAe," (RegNet model)"),eAe.forEach(t),rgo=i(K),kh=n(K,"LI",{});var oAe=s(kh);cse=n(oAe,"STRONG",{});var xet=s(cse);tgo=r(xet,"resnet"),xet.forEach(t),ago=r(oAe," \u2014 "),FI=n(oAe,"A",{href:!0});var $et=s(FI);ngo=r($et,"ConvNextFeatureExtractor"),$et.forEach(t),sgo=r(oAe," (ResNet model)"),oAe.forEach(t),lgo=i(K),Sh=n(K,"LI",{});var rAe=s(Sh);fse=n(rAe,"STRONG",{});var ket=s(fse);igo=r(ket,"segformer"),ket.forEach(t),dgo=r(rAe," \u2014 "),TI=n(rAe,"A",{href:!0});var Set=s(TI);cgo=r(Set,"SegformerFeatureExtractor"),Set.forEach(t),fgo=r(rAe," (SegFormer model)"),rAe.forEach(t),mgo=i(K),Rh=n(K,"LI",{});var tAe=s(Rh);mse=n(tAe,"STRONG",{});var Ret=s(mse);ggo=r(Ret,"speech_to_text"),Ret.forEach(t),hgo=r(tAe," \u2014 "),MI=n(tAe,"A",{href:!0});var Pet=s(MI);pgo=r(Pet,"Speech2TextFeatureExtractor"),Pet.forEach(t),_go=r(tAe," (Speech2Text model)"),tAe.forEach(t),ugo=i(K),Ph=n(K,"LI",{});var aAe=s(Ph);gse=n(aAe,"STRONG",{});var Bet=s(gse);bgo=r(Bet,"swin"),Bet.forEach(t),vgo=r(aAe," \u2014 "),EI=n(aAe,"A",{href:!0});var Iet=s(EI);Fgo=r(Iet,"ViTFeatureExtractor"),Iet.forEach(t),Tgo=r(aAe," (Swin Transformer model)"),aAe.forEach(t),Mgo=i(K),Bh=n(K,"LI",{});var nAe=s(Bh);hse=n(nAe,"STRONG",{});var Net=s(hse);Ego=r(Net,"van"),Net.forEach(t),Cgo=r(nAe," \u2014 "),CI=n(nAe,"A",{href:!0});var qet=s(CI);wgo=r(qet,"ConvNextFeatureExtractor"),qet.forEach(t),Ago=r(nAe," (VAN model)"),nAe.forEach(t),ygo=i(K),Ih=n(K,"LI",{});var sAe=s(Ih);pse=n(sAe,"STRONG",{});var jet=s(pse);Lgo=r(jet,"vit"),jet.forEach(t),xgo=r(sAe," \u2014 "),wI=n(sAe,"A",{href:!0});var Det=s(wI);$go=r(Det,"ViTFeatureExtractor"),Det.forEach(t),kgo=r(sAe," (ViT model)"),sAe.forEach(t),Sgo=i(K),Nh=n(K,"LI",{});var lAe=s(Nh);_se=n(lAe,"STRONG",{});var Get=s(_se);Rgo=r(Get,"vit_mae"),Get.forEach(t),Pgo=r(lAe," \u2014 "),AI=n(lAe,"A",{href:!0});var Oet=s(AI);Bgo=r(Oet,"ViTFeatureExtractor"),Oet.forEach(t),Igo=r(lAe," (ViTMAE model)"),lAe.forEach(t),Ngo=i(K),qh=n(K,"LI",{});var iAe=s(qh);use=n(iAe,"STRONG",{});var Vet=s(use);qgo=r(Vet,"wav2vec2"),Vet.forEach(t),jgo=r(iAe," \u2014 "),yI=n(iAe,"A",{href:!0});var Xet=s(yI);Dgo=r(Xet,"Wav2Vec2FeatureExtractor"),Xet.forEach(t),Ggo=r(iAe," (Wav2Vec2 model)"),iAe.forEach(t),Ogo=i(K),jh=n(K,"LI",{});var dAe=s(jh);bse=n(dAe,"STRONG",{});var zet=s(bse);Vgo=r(zet,"wav2vec2-conformer"),zet.forEach(t),Xgo=r(dAe," \u2014 "),LI=n(dAe,"A",{href:!0});var Wet=s(LI);zgo=r(Wet,"Wav2Vec2FeatureExtractor"),Wet.forEach(t),Wgo=r(dAe," (Wav2Vec2-Conformer model)"),dAe.forEach(t),Qgo=i(K),Dh=n(K,"LI",{});var cAe=s(Dh);vse=n(cAe,"STRONG",{});var Qet=s(vse);Hgo=r(Qet,"yolos"),Qet.forEach(t),Ugo=r(cAe," \u2014 "),xI=n(cAe,"A",{href:!0});var Het=s(xI);Jgo=r(Het,"YolosFeatureExtractor"),Het.forEach(t),Ygo=r(cAe," (YOLOS model)"),cAe.forEach(t),K.forEach(t),Kgo=i(Zt),T(Gh.$$.fragment,Zt),Zgo=i(Zt),T(Oh.$$.fragment,Zt),Zt.forEach(t),eho=i(Ds),Vh=n(Ds,"DIV",{class:!0});var dGe=s(Vh);T(ny.$$.fragment,dGe),oho=i(dGe),Fse=n(dGe,"P",{});var Uet=s(Fse);rho=r(Uet,"Register a new feature extractor for this class."),Uet.forEach(t),dGe.forEach(t),Ds.forEach(t),ije=i(f),Ci=n(f,"H2",{class:!0});var cGe=s(Ci);Xh=n(cGe,"A",{id:!0,class:!0,href:!0});var Jet=s(Xh);Tse=n(Jet,"SPAN",{});var Yet=s(Tse);T(sy.$$.fragment,Yet),Yet.forEach(t),Jet.forEach(t),tho=i(cGe),Mse=n(cGe,"SPAN",{});var Ket=s(Mse);aho=r(Ket,"AutoProcessor"),Ket.forEach(t),cGe.forEach(t),dje=i(f),yo=n(f,"DIV",{class:!0});var Gs=s(yo);T(ly.$$.fragment,Gs),nho=i(Gs),iy=n(Gs,"P",{});var fGe=s(iy);sho=r(fGe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$I=n(fGe,"A",{href:!0});var Zet=s($I);lho=r(Zet,"AutoProcessor.from_pretrained()"),Zet.forEach(t),iho=r(fGe," class method."),fGe.forEach(t),dho=i(Gs),dy=n(Gs,"P",{});var mGe=s(dy);cho=r(mGe,"This class cannot be instantiated directly using "),Ese=n(mGe,"CODE",{});var eot=s(Ese);fho=r(eot,"__init__()"),eot.forEach(t),mho=r(mGe," (throws an error)."),mGe.forEach(t),gho=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(cy.$$.fragment,ea),hho=i(ea),Cse=n(ea,"P",{});var oot=s(Cse);pho=r(oot,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),oot.forEach(t),_ho=i(ea),wi=n(ea,"P",{});var OZ=s(wi);uho=r(OZ,"The processor class to instantiate is selected based on the "),wse=n(OZ,"CODE",{});var rot=s(wse);bho=r(rot,"model_type"),rot.forEach(t),vho=r(OZ,` property of the config object (either
passed as an argument or loaded from `),Ase=n(OZ,"CODE",{});var tot=s(Ase);Fho=r(tot,"pretrained_model_name_or_path"),tot.forEach(t),Tho=r(OZ," if possible):"),OZ.forEach(t),Mho=i(ea),he=n(ea,"UL",{});var ue=s(he);zh=n(ue,"LI",{});var fAe=s(zh);yse=n(fAe,"STRONG",{});var aot=s(yse);Eho=r(aot,"clip"),aot.forEach(t),Cho=r(fAe," \u2014 "),kI=n(fAe,"A",{href:!0});var not=s(kI);who=r(not,"CLIPProcessor"),not.forEach(t),Aho=r(fAe," (CLIP model)"),fAe.forEach(t),yho=i(ue),Wh=n(ue,"LI",{});var mAe=s(Wh);Lse=n(mAe,"STRONG",{});var sot=s(Lse);Lho=r(sot,"flava"),sot.forEach(t),xho=r(mAe," \u2014 "),xse=n(mAe,"CODE",{});var lot=s(xse);$ho=r(lot,"FLAVAProcessor"),lot.forEach(t),kho=r(mAe," (FLAVA model)"),mAe.forEach(t),Sho=i(ue),Qh=n(ue,"LI",{});var gAe=s(Qh);$se=n(gAe,"STRONG",{});var iot=s($se);Rho=r(iot,"layoutlmv2"),iot.forEach(t),Pho=r(gAe," \u2014 "),SI=n(gAe,"A",{href:!0});var dot=s(SI);Bho=r(dot,"LayoutLMv2Processor"),dot.forEach(t),Iho=r(gAe," (LayoutLMv2 model)"),gAe.forEach(t),Nho=i(ue),Hh=n(ue,"LI",{});var hAe=s(Hh);kse=n(hAe,"STRONG",{});var cot=s(kse);qho=r(cot,"layoutlmv3"),cot.forEach(t),jho=r(hAe," \u2014 "),RI=n(hAe,"A",{href:!0});var fot=s(RI);Dho=r(fot,"LayoutLMv3Processor"),fot.forEach(t),Gho=r(hAe," (LayoutLMv3 model)"),hAe.forEach(t),Oho=i(ue),Uh=n(ue,"LI",{});var pAe=s(Uh);Sse=n(pAe,"STRONG",{});var mot=s(Sse);Vho=r(mot,"layoutxlm"),mot.forEach(t),Xho=r(pAe," \u2014 "),PI=n(pAe,"A",{href:!0});var got=s(PI);zho=r(got,"LayoutXLMProcessor"),got.forEach(t),Who=r(pAe," (LayoutXLM model)"),pAe.forEach(t),Qho=i(ue),Jh=n(ue,"LI",{});var _Ae=s(Jh);Rse=n(_Ae,"STRONG",{});var hot=s(Rse);Hho=r(hot,"sew"),hot.forEach(t),Uho=r(_Ae," \u2014 "),BI=n(_Ae,"A",{href:!0});var pot=s(BI);Jho=r(pot,"Wav2Vec2Processor"),pot.forEach(t),Yho=r(_Ae," (SEW model)"),_Ae.forEach(t),Kho=i(ue),Yh=n(ue,"LI",{});var uAe=s(Yh);Pse=n(uAe,"STRONG",{});var _ot=s(Pse);Zho=r(_ot,"sew-d"),_ot.forEach(t),epo=r(uAe," \u2014 "),II=n(uAe,"A",{href:!0});var uot=s(II);opo=r(uot,"Wav2Vec2Processor"),uot.forEach(t),rpo=r(uAe," (SEW-D model)"),uAe.forEach(t),tpo=i(ue),Kh=n(ue,"LI",{});var bAe=s(Kh);Bse=n(bAe,"STRONG",{});var bot=s(Bse);apo=r(bot,"speech_to_text"),bot.forEach(t),npo=r(bAe," \u2014 "),NI=n(bAe,"A",{href:!0});var vot=s(NI);spo=r(vot,"Speech2TextProcessor"),vot.forEach(t),lpo=r(bAe," (Speech2Text model)"),bAe.forEach(t),ipo=i(ue),Zh=n(ue,"LI",{});var vAe=s(Zh);Ise=n(vAe,"STRONG",{});var Fot=s(Ise);dpo=r(Fot,"speech_to_text_2"),Fot.forEach(t),cpo=r(vAe," \u2014 "),qI=n(vAe,"A",{href:!0});var Tot=s(qI);fpo=r(Tot,"Speech2Text2Processor"),Tot.forEach(t),mpo=r(vAe," (Speech2Text2 model)"),vAe.forEach(t),gpo=i(ue),ep=n(ue,"LI",{});var FAe=s(ep);Nse=n(FAe,"STRONG",{});var Mot=s(Nse);hpo=r(Mot,"trocr"),Mot.forEach(t),ppo=r(FAe," \u2014 "),jI=n(FAe,"A",{href:!0});var Eot=s(jI);_po=r(Eot,"TrOCRProcessor"),Eot.forEach(t),upo=r(FAe," (TrOCR model)"),FAe.forEach(t),bpo=i(ue),op=n(ue,"LI",{});var TAe=s(op);qse=n(TAe,"STRONG",{});var Cot=s(qse);vpo=r(Cot,"unispeech"),Cot.forEach(t),Fpo=r(TAe," \u2014 "),DI=n(TAe,"A",{href:!0});var wot=s(DI);Tpo=r(wot,"Wav2Vec2Processor"),wot.forEach(t),Mpo=r(TAe," (UniSpeech model)"),TAe.forEach(t),Epo=i(ue),rp=n(ue,"LI",{});var MAe=s(rp);jse=n(MAe,"STRONG",{});var Aot=s(jse);Cpo=r(Aot,"unispeech-sat"),Aot.forEach(t),wpo=r(MAe," \u2014 "),GI=n(MAe,"A",{href:!0});var yot=s(GI);Apo=r(yot,"Wav2Vec2Processor"),yot.forEach(t),ypo=r(MAe," (UniSpeechSat model)"),MAe.forEach(t),Lpo=i(ue),tp=n(ue,"LI",{});var EAe=s(tp);Dse=n(EAe,"STRONG",{});var Lot=s(Dse);xpo=r(Lot,"vilt"),Lot.forEach(t),$po=r(EAe," \u2014 "),OI=n(EAe,"A",{href:!0});var xot=s(OI);kpo=r(xot,"ViltProcessor"),xot.forEach(t),Spo=r(EAe," (ViLT model)"),EAe.forEach(t),Rpo=i(ue),ap=n(ue,"LI",{});var CAe=s(ap);Gse=n(CAe,"STRONG",{});var $ot=s(Gse);Ppo=r($ot,"vision-text-dual-encoder"),$ot.forEach(t),Bpo=r(CAe," \u2014 "),VI=n(CAe,"A",{href:!0});var kot=s(VI);Ipo=r(kot,"VisionTextDualEncoderProcessor"),kot.forEach(t),Npo=r(CAe," (VisionTextDualEncoder model)"),CAe.forEach(t),qpo=i(ue),np=n(ue,"LI",{});var wAe=s(np);Ose=n(wAe,"STRONG",{});var Sot=s(Ose);jpo=r(Sot,"wav2vec2"),Sot.forEach(t),Dpo=r(wAe," \u2014 "),XI=n(wAe,"A",{href:!0});var Rot=s(XI);Gpo=r(Rot,"Wav2Vec2Processor"),Rot.forEach(t),Opo=r(wAe," (Wav2Vec2 model)"),wAe.forEach(t),Vpo=i(ue),sp=n(ue,"LI",{});var AAe=s(sp);Vse=n(AAe,"STRONG",{});var Pot=s(Vse);Xpo=r(Pot,"wav2vec2-conformer"),Pot.forEach(t),zpo=r(AAe," \u2014 "),zI=n(AAe,"A",{href:!0});var Bot=s(zI);Wpo=r(Bot,"Wav2Vec2Processor"),Bot.forEach(t),Qpo=r(AAe," (Wav2Vec2-Conformer model)"),AAe.forEach(t),Hpo=i(ue),lp=n(ue,"LI",{});var yAe=s(lp);Xse=n(yAe,"STRONG",{});var Iot=s(Xse);Upo=r(Iot,"wavlm"),Iot.forEach(t),Jpo=r(yAe," \u2014 "),WI=n(yAe,"A",{href:!0});var Not=s(WI);Ypo=r(Not,"Wav2Vec2Processor"),Not.forEach(t),Kpo=r(yAe," (WavLM model)"),yAe.forEach(t),ue.forEach(t),Zpo=i(ea),T(ip.$$.fragment,ea),e_o=i(ea),T(dp.$$.fragment,ea),ea.forEach(t),o_o=i(Gs),cp=n(Gs,"DIV",{class:!0});var gGe=s(cp);T(fy.$$.fragment,gGe),r_o=i(gGe),zse=n(gGe,"P",{});var qot=s(zse);t_o=r(qot,"Register a new processor for this class."),qot.forEach(t),gGe.forEach(t),Gs.forEach(t),cje=i(f),Ai=n(f,"H2",{class:!0});var hGe=s(Ai);fp=n(hGe,"A",{id:!0,class:!0,href:!0});var jot=s(fp);Wse=n(jot,"SPAN",{});var Dot=s(Wse);T(my.$$.fragment,Dot),Dot.forEach(t),jot.forEach(t),a_o=i(hGe),Qse=n(hGe,"SPAN",{});var Got=s(Qse);n_o=r(Got,"AutoModel"),Got.forEach(t),hGe.forEach(t),fje=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(gy.$$.fragment,Os),s_o=i(Os),yi=n(Os,"P",{});var VZ=s(yi);l_o=r(VZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QI=n(VZ,"A",{href:!0});var Oot=s(QI);i_o=r(Oot,"from_pretrained()"),Oot.forEach(t),d_o=r(VZ," class method or the "),HI=n(VZ,"A",{href:!0});var Vot=s(HI);c_o=r(Vot,"from_config()"),Vot.forEach(t),f_o=r(VZ,` class
method.`),VZ.forEach(t),m_o=i(Os),hy=n(Os,"P",{});var pGe=s(hy);g_o=r(pGe,"This class cannot be instantiated directly using "),Hse=n(pGe,"CODE",{});var Xot=s(Hse);h_o=r(Xot,"__init__()"),Xot.forEach(t),p_o=r(pGe," (throws an error)."),pGe.forEach(t),__o=i(Os),tt=n(Os,"DIV",{class:!0});var X0=s(tt);T(py.$$.fragment,X0),u_o=i(X0),Use=n(X0,"P",{});var zot=s(Use);b_o=r(zot,"Instantiates one of the base model classes of the library from a configuration."),zot.forEach(t),v_o=i(X0),Li=n(X0,"P",{});var XZ=s(Li);F_o=r(XZ,`Note:
Loading a model from its configuration file does `),Jse=n(XZ,"STRONG",{});var Wot=s(Jse);T_o=r(Wot,"not"),Wot.forEach(t),M_o=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UI=n(XZ,"A",{href:!0});var Qot=s(UI);E_o=r(Qot,"from_pretrained()"),Qot.forEach(t),C_o=r(XZ," to load the model weights."),XZ.forEach(t),w_o=i(X0),T(mp.$$.fragment,X0),X0.forEach(t),A_o=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(_y.$$.fragment,oa),y_o=i(oa),Yse=n(oa,"P",{});var Hot=s(Yse);L_o=r(Hot,"Instantiate one of the base model classes of the library from a pretrained model."),Hot.forEach(t),x_o=i(oa),La=n(oa,"P",{});var z0=s(La);$_o=r(z0,"The model class to instantiate is selected based on the "),Kse=n(z0,"CODE",{});var Uot=s(Kse);k_o=r(Uot,"model_type"),Uot.forEach(t),S_o=r(z0,` property of the config object (either
passed as an argument or loaded from `),Zse=n(z0,"CODE",{});var Jot=s(Zse);R_o=r(Jot,"pretrained_model_name_or_path"),Jot.forEach(t),P_o=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=n(z0,"CODE",{});var Yot=s(ele);B_o=r(Yot,"pretrained_model_name_or_path"),Yot.forEach(t),I_o=r(z0,":"),z0.forEach(t),N_o=i(oa),x=n(oa,"UL",{});var $=s(x);gp=n($,"LI",{});var LAe=s(gp);ole=n(LAe,"STRONG",{});var Kot=s(ole);q_o=r(Kot,"albert"),Kot.forEach(t),j_o=r(LAe," \u2014 "),JI=n(LAe,"A",{href:!0});var Zot=s(JI);D_o=r(Zot,"AlbertModel"),Zot.forEach(t),G_o=r(LAe," (ALBERT model)"),LAe.forEach(t),O_o=i($),hp=n($,"LI",{});var xAe=s(hp);rle=n(xAe,"STRONG",{});var ert=s(rle);V_o=r(ert,"bart"),ert.forEach(t),X_o=r(xAe," \u2014 "),YI=n(xAe,"A",{href:!0});var ort=s(YI);z_o=r(ort,"BartModel"),ort.forEach(t),W_o=r(xAe," (BART model)"),xAe.forEach(t),Q_o=i($),pp=n($,"LI",{});var $Ae=s(pp);tle=n($Ae,"STRONG",{});var rrt=s(tle);H_o=r(rrt,"beit"),rrt.forEach(t),U_o=r($Ae," \u2014 "),KI=n($Ae,"A",{href:!0});var trt=s(KI);J_o=r(trt,"BeitModel"),trt.forEach(t),Y_o=r($Ae," (BEiT model)"),$Ae.forEach(t),K_o=i($),_p=n($,"LI",{});var kAe=s(_p);ale=n(kAe,"STRONG",{});var art=s(ale);Z_o=r(art,"bert"),art.forEach(t),euo=r(kAe," \u2014 "),ZI=n(kAe,"A",{href:!0});var nrt=s(ZI);ouo=r(nrt,"BertModel"),nrt.forEach(t),ruo=r(kAe," (BERT model)"),kAe.forEach(t),tuo=i($),up=n($,"LI",{});var SAe=s(up);nle=n(SAe,"STRONG",{});var srt=s(nle);auo=r(srt,"bert-generation"),srt.forEach(t),nuo=r(SAe," \u2014 "),eN=n(SAe,"A",{href:!0});var lrt=s(eN);suo=r(lrt,"BertGenerationEncoder"),lrt.forEach(t),luo=r(SAe," (Bert Generation model)"),SAe.forEach(t),iuo=i($),bp=n($,"LI",{});var RAe=s(bp);sle=n(RAe,"STRONG",{});var irt=s(sle);duo=r(irt,"big_bird"),irt.forEach(t),cuo=r(RAe," \u2014 "),oN=n(RAe,"A",{href:!0});var drt=s(oN);fuo=r(drt,"BigBirdModel"),drt.forEach(t),muo=r(RAe," (BigBird model)"),RAe.forEach(t),guo=i($),vp=n($,"LI",{});var PAe=s(vp);lle=n(PAe,"STRONG",{});var crt=s(lle);huo=r(crt,"bigbird_pegasus"),crt.forEach(t),puo=r(PAe," \u2014 "),rN=n(PAe,"A",{href:!0});var frt=s(rN);_uo=r(frt,"BigBirdPegasusModel"),frt.forEach(t),uuo=r(PAe," (BigBird-Pegasus model)"),PAe.forEach(t),buo=i($),Fp=n($,"LI",{});var BAe=s(Fp);ile=n(BAe,"STRONG",{});var mrt=s(ile);vuo=r(mrt,"blenderbot"),mrt.forEach(t),Fuo=r(BAe," \u2014 "),tN=n(BAe,"A",{href:!0});var grt=s(tN);Tuo=r(grt,"BlenderbotModel"),grt.forEach(t),Muo=r(BAe," (Blenderbot model)"),BAe.forEach(t),Euo=i($),Tp=n($,"LI",{});var IAe=s(Tp);dle=n(IAe,"STRONG",{});var hrt=s(dle);Cuo=r(hrt,"blenderbot-small"),hrt.forEach(t),wuo=r(IAe," \u2014 "),aN=n(IAe,"A",{href:!0});var prt=s(aN);Auo=r(prt,"BlenderbotSmallModel"),prt.forEach(t),yuo=r(IAe," (BlenderbotSmall model)"),IAe.forEach(t),Luo=i($),Mp=n($,"LI",{});var NAe=s(Mp);cle=n(NAe,"STRONG",{});var _rt=s(cle);xuo=r(_rt,"camembert"),_rt.forEach(t),$uo=r(NAe," \u2014 "),nN=n(NAe,"A",{href:!0});var urt=s(nN);kuo=r(urt,"CamembertModel"),urt.forEach(t),Suo=r(NAe," (CamemBERT model)"),NAe.forEach(t),Ruo=i($),Ep=n($,"LI",{});var qAe=s(Ep);fle=n(qAe,"STRONG",{});var brt=s(fle);Puo=r(brt,"canine"),brt.forEach(t),Buo=r(qAe," \u2014 "),sN=n(qAe,"A",{href:!0});var vrt=s(sN);Iuo=r(vrt,"CanineModel"),vrt.forEach(t),Nuo=r(qAe," (CANINE model)"),qAe.forEach(t),quo=i($),Cp=n($,"LI",{});var jAe=s(Cp);mle=n(jAe,"STRONG",{});var Frt=s(mle);juo=r(Frt,"clip"),Frt.forEach(t),Duo=r(jAe," \u2014 "),lN=n(jAe,"A",{href:!0});var Trt=s(lN);Guo=r(Trt,"CLIPModel"),Trt.forEach(t),Ouo=r(jAe," (CLIP model)"),jAe.forEach(t),Vuo=i($),wp=n($,"LI",{});var DAe=s(wp);gle=n(DAe,"STRONG",{});var Mrt=s(gle);Xuo=r(Mrt,"convbert"),Mrt.forEach(t),zuo=r(DAe," \u2014 "),iN=n(DAe,"A",{href:!0});var Ert=s(iN);Wuo=r(Ert,"ConvBertModel"),Ert.forEach(t),Quo=r(DAe," (ConvBERT model)"),DAe.forEach(t),Huo=i($),Ap=n($,"LI",{});var GAe=s(Ap);hle=n(GAe,"STRONG",{});var Crt=s(hle);Uuo=r(Crt,"convnext"),Crt.forEach(t),Juo=r(GAe," \u2014 "),dN=n(GAe,"A",{href:!0});var wrt=s(dN);Yuo=r(wrt,"ConvNextModel"),wrt.forEach(t),Kuo=r(GAe," (ConvNeXT model)"),GAe.forEach(t),Zuo=i($),yp=n($,"LI",{});var OAe=s(yp);ple=n(OAe,"STRONG",{});var Art=s(ple);e2o=r(Art,"ctrl"),Art.forEach(t),o2o=r(OAe," \u2014 "),cN=n(OAe,"A",{href:!0});var yrt=s(cN);r2o=r(yrt,"CTRLModel"),yrt.forEach(t),t2o=r(OAe," (CTRL model)"),OAe.forEach(t),a2o=i($),Lp=n($,"LI",{});var VAe=s(Lp);_le=n(VAe,"STRONG",{});var Lrt=s(_le);n2o=r(Lrt,"cvt"),Lrt.forEach(t),s2o=r(VAe," \u2014 "),fN=n(VAe,"A",{href:!0});var xrt=s(fN);l2o=r(xrt,"CvtModel"),xrt.forEach(t),i2o=r(VAe," (CvT model)"),VAe.forEach(t),d2o=i($),xp=n($,"LI",{});var XAe=s(xp);ule=n(XAe,"STRONG",{});var $rt=s(ule);c2o=r($rt,"data2vec-audio"),$rt.forEach(t),f2o=r(XAe," \u2014 "),mN=n(XAe,"A",{href:!0});var krt=s(mN);m2o=r(krt,"Data2VecAudioModel"),krt.forEach(t),g2o=r(XAe," (Data2VecAudio model)"),XAe.forEach(t),h2o=i($),$p=n($,"LI",{});var zAe=s($p);ble=n(zAe,"STRONG",{});var Srt=s(ble);p2o=r(Srt,"data2vec-text"),Srt.forEach(t),_2o=r(zAe," \u2014 "),gN=n(zAe,"A",{href:!0});var Rrt=s(gN);u2o=r(Rrt,"Data2VecTextModel"),Rrt.forEach(t),b2o=r(zAe," (Data2VecText model)"),zAe.forEach(t),v2o=i($),kp=n($,"LI",{});var WAe=s(kp);vle=n(WAe,"STRONG",{});var Prt=s(vle);F2o=r(Prt,"data2vec-vision"),Prt.forEach(t),T2o=r(WAe," \u2014 "),hN=n(WAe,"A",{href:!0});var Brt=s(hN);M2o=r(Brt,"Data2VecVisionModel"),Brt.forEach(t),E2o=r(WAe," (Data2VecVision model)"),WAe.forEach(t),C2o=i($),Sp=n($,"LI",{});var QAe=s(Sp);Fle=n(QAe,"STRONG",{});var Irt=s(Fle);w2o=r(Irt,"deberta"),Irt.forEach(t),A2o=r(QAe," \u2014 "),pN=n(QAe,"A",{href:!0});var Nrt=s(pN);y2o=r(Nrt,"DebertaModel"),Nrt.forEach(t),L2o=r(QAe," (DeBERTa model)"),QAe.forEach(t),x2o=i($),Rp=n($,"LI",{});var HAe=s(Rp);Tle=n(HAe,"STRONG",{});var qrt=s(Tle);$2o=r(qrt,"deberta-v2"),qrt.forEach(t),k2o=r(HAe," \u2014 "),_N=n(HAe,"A",{href:!0});var jrt=s(_N);S2o=r(jrt,"DebertaV2Model"),jrt.forEach(t),R2o=r(HAe," (DeBERTa-v2 model)"),HAe.forEach(t),P2o=i($),Pp=n($,"LI",{});var UAe=s(Pp);Mle=n(UAe,"STRONG",{});var Drt=s(Mle);B2o=r(Drt,"decision_transformer"),Drt.forEach(t),I2o=r(UAe," \u2014 "),uN=n(UAe,"A",{href:!0});var Grt=s(uN);N2o=r(Grt,"DecisionTransformerModel"),Grt.forEach(t),q2o=r(UAe," (Decision Transformer model)"),UAe.forEach(t),j2o=i($),Bp=n($,"LI",{});var JAe=s(Bp);Ele=n(JAe,"STRONG",{});var Ort=s(Ele);D2o=r(Ort,"deit"),Ort.forEach(t),G2o=r(JAe," \u2014 "),bN=n(JAe,"A",{href:!0});var Vrt=s(bN);O2o=r(Vrt,"DeiTModel"),Vrt.forEach(t),V2o=r(JAe," (DeiT model)"),JAe.forEach(t),X2o=i($),Ip=n($,"LI",{});var YAe=s(Ip);Cle=n(YAe,"STRONG",{});var Xrt=s(Cle);z2o=r(Xrt,"detr"),Xrt.forEach(t),W2o=r(YAe," \u2014 "),vN=n(YAe,"A",{href:!0});var zrt=s(vN);Q2o=r(zrt,"DetrModel"),zrt.forEach(t),H2o=r(YAe," (DETR model)"),YAe.forEach(t),U2o=i($),Np=n($,"LI",{});var KAe=s(Np);wle=n(KAe,"STRONG",{});var Wrt=s(wle);J2o=r(Wrt,"distilbert"),Wrt.forEach(t),Y2o=r(KAe," \u2014 "),FN=n(KAe,"A",{href:!0});var Qrt=s(FN);K2o=r(Qrt,"DistilBertModel"),Qrt.forEach(t),Z2o=r(KAe," (DistilBERT model)"),KAe.forEach(t),e1o=i($),qp=n($,"LI",{});var ZAe=s(qp);Ale=n(ZAe,"STRONG",{});var Hrt=s(Ale);o1o=r(Hrt,"dpr"),Hrt.forEach(t),r1o=r(ZAe," \u2014 "),TN=n(ZAe,"A",{href:!0});var Urt=s(TN);t1o=r(Urt,"DPRQuestionEncoder"),Urt.forEach(t),a1o=r(ZAe," (DPR model)"),ZAe.forEach(t),n1o=i($),jp=n($,"LI",{});var eye=s(jp);yle=n(eye,"STRONG",{});var Jrt=s(yle);s1o=r(Jrt,"dpt"),Jrt.forEach(t),l1o=r(eye," \u2014 "),MN=n(eye,"A",{href:!0});var Yrt=s(MN);i1o=r(Yrt,"DPTModel"),Yrt.forEach(t),d1o=r(eye," (DPT model)"),eye.forEach(t),c1o=i($),Dp=n($,"LI",{});var oye=s(Dp);Lle=n(oye,"STRONG",{});var Krt=s(Lle);f1o=r(Krt,"electra"),Krt.forEach(t),m1o=r(oye," \u2014 "),EN=n(oye,"A",{href:!0});var Zrt=s(EN);g1o=r(Zrt,"ElectraModel"),Zrt.forEach(t),h1o=r(oye," (ELECTRA model)"),oye.forEach(t),p1o=i($),Gp=n($,"LI",{});var rye=s(Gp);xle=n(rye,"STRONG",{});var ett=s(xle);_1o=r(ett,"flaubert"),ett.forEach(t),u1o=r(rye," \u2014 "),CN=n(rye,"A",{href:!0});var ott=s(CN);b1o=r(ott,"FlaubertModel"),ott.forEach(t),v1o=r(rye," (FlauBERT model)"),rye.forEach(t),F1o=i($),Op=n($,"LI",{});var tye=s(Op);$le=n(tye,"STRONG",{});var rtt=s($le);T1o=r(rtt,"flava"),rtt.forEach(t),M1o=r(tye," \u2014 "),wN=n(tye,"A",{href:!0});var ttt=s(wN);E1o=r(ttt,"FlavaModel"),ttt.forEach(t),C1o=r(tye," (FLAVA model)"),tye.forEach(t),w1o=i($),Vp=n($,"LI",{});var aye=s(Vp);kle=n(aye,"STRONG",{});var att=s(kle);A1o=r(att,"fnet"),att.forEach(t),y1o=r(aye," \u2014 "),AN=n(aye,"A",{href:!0});var ntt=s(AN);L1o=r(ntt,"FNetModel"),ntt.forEach(t),x1o=r(aye," (FNet model)"),aye.forEach(t),$1o=i($),Xp=n($,"LI",{});var nye=s(Xp);Sle=n(nye,"STRONG",{});var stt=s(Sle);k1o=r(stt,"fsmt"),stt.forEach(t),S1o=r(nye," \u2014 "),yN=n(nye,"A",{href:!0});var ltt=s(yN);R1o=r(ltt,"FSMTModel"),ltt.forEach(t),P1o=r(nye," (FairSeq Machine-Translation model)"),nye.forEach(t),B1o=i($),Ps=n($,"LI",{});var ok=s(Ps);Rle=n(ok,"STRONG",{});var itt=s(Rle);I1o=r(itt,"funnel"),itt.forEach(t),N1o=r(ok," \u2014 "),LN=n(ok,"A",{href:!0});var dtt=s(LN);q1o=r(dtt,"FunnelModel"),dtt.forEach(t),j1o=r(ok," or "),xN=n(ok,"A",{href:!0});var ctt=s(xN);D1o=r(ctt,"FunnelBaseModel"),ctt.forEach(t),G1o=r(ok," (Funnel Transformer model)"),ok.forEach(t),O1o=i($),zp=n($,"LI",{});var sye=s(zp);Ple=n(sye,"STRONG",{});var ftt=s(Ple);V1o=r(ftt,"glpn"),ftt.forEach(t),X1o=r(sye," \u2014 "),$N=n(sye,"A",{href:!0});var mtt=s($N);z1o=r(mtt,"GLPNModel"),mtt.forEach(t),W1o=r(sye," (GLPN model)"),sye.forEach(t),Q1o=i($),Wp=n($,"LI",{});var lye=s(Wp);Ble=n(lye,"STRONG",{});var gtt=s(Ble);H1o=r(gtt,"gpt2"),gtt.forEach(t),U1o=r(lye," \u2014 "),kN=n(lye,"A",{href:!0});var htt=s(kN);J1o=r(htt,"GPT2Model"),htt.forEach(t),Y1o=r(lye," (OpenAI GPT-2 model)"),lye.forEach(t),K1o=i($),Qp=n($,"LI",{});var iye=s(Qp);Ile=n(iye,"STRONG",{});var ptt=s(Ile);Z1o=r(ptt,"gpt_neo"),ptt.forEach(t),ebo=r(iye," \u2014 "),SN=n(iye,"A",{href:!0});var _tt=s(SN);obo=r(_tt,"GPTNeoModel"),_tt.forEach(t),rbo=r(iye," (GPT Neo model)"),iye.forEach(t),tbo=i($),Hp=n($,"LI",{});var dye=s(Hp);Nle=n(dye,"STRONG",{});var utt=s(Nle);abo=r(utt,"gpt_neox"),utt.forEach(t),nbo=r(dye," \u2014 "),RN=n(dye,"A",{href:!0});var btt=s(RN);sbo=r(btt,"GPTNeoXModel"),btt.forEach(t),lbo=r(dye," (GPT NeoX model)"),dye.forEach(t),ibo=i($),Up=n($,"LI",{});var cye=s(Up);qle=n(cye,"STRONG",{});var vtt=s(qle);dbo=r(vtt,"gptj"),vtt.forEach(t),cbo=r(cye," \u2014 "),PN=n(cye,"A",{href:!0});var Ftt=s(PN);fbo=r(Ftt,"GPTJModel"),Ftt.forEach(t),mbo=r(cye," (GPT-J model)"),cye.forEach(t),gbo=i($),Jp=n($,"LI",{});var fye=s(Jp);jle=n(fye,"STRONG",{});var Ttt=s(jle);hbo=r(Ttt,"hubert"),Ttt.forEach(t),pbo=r(fye," \u2014 "),BN=n(fye,"A",{href:!0});var Mtt=s(BN);_bo=r(Mtt,"HubertModel"),Mtt.forEach(t),ubo=r(fye," (Hubert model)"),fye.forEach(t),bbo=i($),Yp=n($,"LI",{});var mye=s(Yp);Dle=n(mye,"STRONG",{});var Ett=s(Dle);vbo=r(Ett,"ibert"),Ett.forEach(t),Fbo=r(mye," \u2014 "),IN=n(mye,"A",{href:!0});var Ctt=s(IN);Tbo=r(Ctt,"IBertModel"),Ctt.forEach(t),Mbo=r(mye," (I-BERT model)"),mye.forEach(t),Ebo=i($),Kp=n($,"LI",{});var gye=s(Kp);Gle=n(gye,"STRONG",{});var wtt=s(Gle);Cbo=r(wtt,"imagegpt"),wtt.forEach(t),wbo=r(gye," \u2014 "),NN=n(gye,"A",{href:!0});var Att=s(NN);Abo=r(Att,"ImageGPTModel"),Att.forEach(t),ybo=r(gye," (ImageGPT model)"),gye.forEach(t),Lbo=i($),Zp=n($,"LI",{});var hye=s(Zp);Ole=n(hye,"STRONG",{});var ytt=s(Ole);xbo=r(ytt,"layoutlm"),ytt.forEach(t),$bo=r(hye," \u2014 "),qN=n(hye,"A",{href:!0});var Ltt=s(qN);kbo=r(Ltt,"LayoutLMModel"),Ltt.forEach(t),Sbo=r(hye," (LayoutLM model)"),hye.forEach(t),Rbo=i($),e_=n($,"LI",{});var pye=s(e_);Vle=n(pye,"STRONG",{});var xtt=s(Vle);Pbo=r(xtt,"layoutlmv2"),xtt.forEach(t),Bbo=r(pye," \u2014 "),jN=n(pye,"A",{href:!0});var $tt=s(jN);Ibo=r($tt,"LayoutLMv2Model"),$tt.forEach(t),Nbo=r(pye," (LayoutLMv2 model)"),pye.forEach(t),qbo=i($),o_=n($,"LI",{});var _ye=s(o_);Xle=n(_ye,"STRONG",{});var ktt=s(Xle);jbo=r(ktt,"layoutlmv3"),ktt.forEach(t),Dbo=r(_ye," \u2014 "),DN=n(_ye,"A",{href:!0});var Stt=s(DN);Gbo=r(Stt,"LayoutLMv3Model"),Stt.forEach(t),Obo=r(_ye," (LayoutLMv3 model)"),_ye.forEach(t),Vbo=i($),r_=n($,"LI",{});var uye=s(r_);zle=n(uye,"STRONG",{});var Rtt=s(zle);Xbo=r(Rtt,"led"),Rtt.forEach(t),zbo=r(uye," \u2014 "),GN=n(uye,"A",{href:!0});var Ptt=s(GN);Wbo=r(Ptt,"LEDModel"),Ptt.forEach(t),Qbo=r(uye," (LED model)"),uye.forEach(t),Hbo=i($),t_=n($,"LI",{});var bye=s(t_);Wle=n(bye,"STRONG",{});var Btt=s(Wle);Ubo=r(Btt,"levit"),Btt.forEach(t),Jbo=r(bye," \u2014 "),ON=n(bye,"A",{href:!0});var Itt=s(ON);Ybo=r(Itt,"LevitModel"),Itt.forEach(t),Kbo=r(bye," (LeViT model)"),bye.forEach(t),Zbo=i($),a_=n($,"LI",{});var vye=s(a_);Qle=n(vye,"STRONG",{});var Ntt=s(Qle);evo=r(Ntt,"longformer"),Ntt.forEach(t),ovo=r(vye," \u2014 "),VN=n(vye,"A",{href:!0});var qtt=s(VN);rvo=r(qtt,"LongformerModel"),qtt.forEach(t),tvo=r(vye," (Longformer model)"),vye.forEach(t),avo=i($),n_=n($,"LI",{});var Fye=s(n_);Hle=n(Fye,"STRONG",{});var jtt=s(Hle);nvo=r(jtt,"luke"),jtt.forEach(t),svo=r(Fye," \u2014 "),XN=n(Fye,"A",{href:!0});var Dtt=s(XN);lvo=r(Dtt,"LukeModel"),Dtt.forEach(t),ivo=r(Fye," (LUKE model)"),Fye.forEach(t),dvo=i($),s_=n($,"LI",{});var Tye=s(s_);Ule=n(Tye,"STRONG",{});var Gtt=s(Ule);cvo=r(Gtt,"lxmert"),Gtt.forEach(t),fvo=r(Tye," \u2014 "),zN=n(Tye,"A",{href:!0});var Ott=s(zN);mvo=r(Ott,"LxmertModel"),Ott.forEach(t),gvo=r(Tye," (LXMERT model)"),Tye.forEach(t),hvo=i($),l_=n($,"LI",{});var Mye=s(l_);Jle=n(Mye,"STRONG",{});var Vtt=s(Jle);pvo=r(Vtt,"m2m_100"),Vtt.forEach(t),_vo=r(Mye," \u2014 "),WN=n(Mye,"A",{href:!0});var Xtt=s(WN);uvo=r(Xtt,"M2M100Model"),Xtt.forEach(t),bvo=r(Mye," (M2M100 model)"),Mye.forEach(t),vvo=i($),i_=n($,"LI",{});var Eye=s(i_);Yle=n(Eye,"STRONG",{});var ztt=s(Yle);Fvo=r(ztt,"marian"),ztt.forEach(t),Tvo=r(Eye," \u2014 "),QN=n(Eye,"A",{href:!0});var Wtt=s(QN);Mvo=r(Wtt,"MarianModel"),Wtt.forEach(t),Evo=r(Eye," (Marian model)"),Eye.forEach(t),Cvo=i($),d_=n($,"LI",{});var Cye=s(d_);Kle=n(Cye,"STRONG",{});var Qtt=s(Kle);wvo=r(Qtt,"maskformer"),Qtt.forEach(t),Avo=r(Cye," \u2014 "),HN=n(Cye,"A",{href:!0});var Htt=s(HN);yvo=r(Htt,"MaskFormerModel"),Htt.forEach(t),Lvo=r(Cye," (MaskFormer model)"),Cye.forEach(t),xvo=i($),c_=n($,"LI",{});var wye=s(c_);Zle=n(wye,"STRONG",{});var Utt=s(Zle);$vo=r(Utt,"mbart"),Utt.forEach(t),kvo=r(wye," \u2014 "),UN=n(wye,"A",{href:!0});var Jtt=s(UN);Svo=r(Jtt,"MBartModel"),Jtt.forEach(t),Rvo=r(wye," (mBART model)"),wye.forEach(t),Pvo=i($),f_=n($,"LI",{});var Aye=s(f_);eie=n(Aye,"STRONG",{});var Ytt=s(eie);Bvo=r(Ytt,"mctct"),Ytt.forEach(t),Ivo=r(Aye," \u2014 "),JN=n(Aye,"A",{href:!0});var Ktt=s(JN);Nvo=r(Ktt,"MCTCTModel"),Ktt.forEach(t),qvo=r(Aye," (M-CTC-T model)"),Aye.forEach(t),jvo=i($),m_=n($,"LI",{});var yye=s(m_);oie=n(yye,"STRONG",{});var Ztt=s(oie);Dvo=r(Ztt,"megatron-bert"),Ztt.forEach(t),Gvo=r(yye," \u2014 "),YN=n(yye,"A",{href:!0});var eat=s(YN);Ovo=r(eat,"MegatronBertModel"),eat.forEach(t),Vvo=r(yye," (Megatron-BERT model)"),yye.forEach(t),Xvo=i($),g_=n($,"LI",{});var Lye=s(g_);rie=n(Lye,"STRONG",{});var oat=s(rie);zvo=r(oat,"mobilebert"),oat.forEach(t),Wvo=r(Lye," \u2014 "),KN=n(Lye,"A",{href:!0});var rat=s(KN);Qvo=r(rat,"MobileBertModel"),rat.forEach(t),Hvo=r(Lye," (MobileBERT model)"),Lye.forEach(t),Uvo=i($),h_=n($,"LI",{});var xye=s(h_);tie=n(xye,"STRONG",{});var tat=s(tie);Jvo=r(tat,"mpnet"),tat.forEach(t),Yvo=r(xye," \u2014 "),ZN=n(xye,"A",{href:!0});var aat=s(ZN);Kvo=r(aat,"MPNetModel"),aat.forEach(t),Zvo=r(xye," (MPNet model)"),xye.forEach(t),eFo=i($),p_=n($,"LI",{});var $ye=s(p_);aie=n($ye,"STRONG",{});var nat=s(aie);oFo=r(nat,"mt5"),nat.forEach(t),rFo=r($ye," \u2014 "),eq=n($ye,"A",{href:!0});var sat=s(eq);tFo=r(sat,"MT5Model"),sat.forEach(t),aFo=r($ye," (MT5 model)"),$ye.forEach(t),nFo=i($),__=n($,"LI",{});var kye=s(__);nie=n(kye,"STRONG",{});var lat=s(nie);sFo=r(lat,"nystromformer"),lat.forEach(t),lFo=r(kye," \u2014 "),oq=n(kye,"A",{href:!0});var iat=s(oq);iFo=r(iat,"NystromformerModel"),iat.forEach(t),dFo=r(kye," (Nystr\xF6mformer model)"),kye.forEach(t),cFo=i($),u_=n($,"LI",{});var Sye=s(u_);sie=n(Sye,"STRONG",{});var dat=s(sie);fFo=r(dat,"openai-gpt"),dat.forEach(t),mFo=r(Sye," \u2014 "),rq=n(Sye,"A",{href:!0});var cat=s(rq);gFo=r(cat,"OpenAIGPTModel"),cat.forEach(t),hFo=r(Sye," (OpenAI GPT model)"),Sye.forEach(t),pFo=i($),b_=n($,"LI",{});var Rye=s(b_);lie=n(Rye,"STRONG",{});var fat=s(lie);_Fo=r(fat,"opt"),fat.forEach(t),uFo=r(Rye," \u2014 "),tq=n(Rye,"A",{href:!0});var mat=s(tq);bFo=r(mat,"OPTModel"),mat.forEach(t),vFo=r(Rye," (OPT model)"),Rye.forEach(t),FFo=i($),v_=n($,"LI",{});var Pye=s(v_);iie=n(Pye,"STRONG",{});var gat=s(iie);TFo=r(gat,"pegasus"),gat.forEach(t),MFo=r(Pye," \u2014 "),aq=n(Pye,"A",{href:!0});var hat=s(aq);EFo=r(hat,"PegasusModel"),hat.forEach(t),CFo=r(Pye," (Pegasus model)"),Pye.forEach(t),wFo=i($),F_=n($,"LI",{});var Bye=s(F_);die=n(Bye,"STRONG",{});var pat=s(die);AFo=r(pat,"perceiver"),pat.forEach(t),yFo=r(Bye," \u2014 "),nq=n(Bye,"A",{href:!0});var _at=s(nq);LFo=r(_at,"PerceiverModel"),_at.forEach(t),xFo=r(Bye," (Perceiver model)"),Bye.forEach(t),$Fo=i($),T_=n($,"LI",{});var Iye=s(T_);cie=n(Iye,"STRONG",{});var uat=s(cie);kFo=r(uat,"plbart"),uat.forEach(t),SFo=r(Iye," \u2014 "),sq=n(Iye,"A",{href:!0});var bat=s(sq);RFo=r(bat,"PLBartModel"),bat.forEach(t),PFo=r(Iye," (PLBart model)"),Iye.forEach(t),BFo=i($),M_=n($,"LI",{});var Nye=s(M_);fie=n(Nye,"STRONG",{});var vat=s(fie);IFo=r(vat,"poolformer"),vat.forEach(t),NFo=r(Nye," \u2014 "),lq=n(Nye,"A",{href:!0});var Fat=s(lq);qFo=r(Fat,"PoolFormerModel"),Fat.forEach(t),jFo=r(Nye," (PoolFormer model)"),Nye.forEach(t),DFo=i($),E_=n($,"LI",{});var qye=s(E_);mie=n(qye,"STRONG",{});var Tat=s(mie);GFo=r(Tat,"prophetnet"),Tat.forEach(t),OFo=r(qye," \u2014 "),iq=n(qye,"A",{href:!0});var Mat=s(iq);VFo=r(Mat,"ProphetNetModel"),Mat.forEach(t),XFo=r(qye," (ProphetNet model)"),qye.forEach(t),zFo=i($),C_=n($,"LI",{});var jye=s(C_);gie=n(jye,"STRONG",{});var Eat=s(gie);WFo=r(Eat,"qdqbert"),Eat.forEach(t),QFo=r(jye," \u2014 "),dq=n(jye,"A",{href:!0});var Cat=s(dq);HFo=r(Cat,"QDQBertModel"),Cat.forEach(t),UFo=r(jye," (QDQBert model)"),jye.forEach(t),JFo=i($),w_=n($,"LI",{});var Dye=s(w_);hie=n(Dye,"STRONG",{});var wat=s(hie);YFo=r(wat,"reformer"),wat.forEach(t),KFo=r(Dye," \u2014 "),cq=n(Dye,"A",{href:!0});var Aat=s(cq);ZFo=r(Aat,"ReformerModel"),Aat.forEach(t),e6o=r(Dye," (Reformer model)"),Dye.forEach(t),o6o=i($),A_=n($,"LI",{});var Gye=s(A_);pie=n(Gye,"STRONG",{});var yat=s(pie);r6o=r(yat,"regnet"),yat.forEach(t),t6o=r(Gye," \u2014 "),fq=n(Gye,"A",{href:!0});var Lat=s(fq);a6o=r(Lat,"RegNetModel"),Lat.forEach(t),n6o=r(Gye," (RegNet model)"),Gye.forEach(t),s6o=i($),y_=n($,"LI",{});var Oye=s(y_);_ie=n(Oye,"STRONG",{});var xat=s(_ie);l6o=r(xat,"rembert"),xat.forEach(t),i6o=r(Oye," \u2014 "),mq=n(Oye,"A",{href:!0});var $at=s(mq);d6o=r($at,"RemBertModel"),$at.forEach(t),c6o=r(Oye," (RemBERT model)"),Oye.forEach(t),f6o=i($),L_=n($,"LI",{});var Vye=s(L_);uie=n(Vye,"STRONG",{});var kat=s(uie);m6o=r(kat,"resnet"),kat.forEach(t),g6o=r(Vye," \u2014 "),gq=n(Vye,"A",{href:!0});var Sat=s(gq);h6o=r(Sat,"ResNetModel"),Sat.forEach(t),p6o=r(Vye," (ResNet model)"),Vye.forEach(t),_6o=i($),x_=n($,"LI",{});var Xye=s(x_);bie=n(Xye,"STRONG",{});var Rat=s(bie);u6o=r(Rat,"retribert"),Rat.forEach(t),b6o=r(Xye," \u2014 "),hq=n(Xye,"A",{href:!0});var Pat=s(hq);v6o=r(Pat,"RetriBertModel"),Pat.forEach(t),F6o=r(Xye," (RetriBERT model)"),Xye.forEach(t),T6o=i($),$_=n($,"LI",{});var zye=s($_);vie=n(zye,"STRONG",{});var Bat=s(vie);M6o=r(Bat,"roberta"),Bat.forEach(t),E6o=r(zye," \u2014 "),pq=n(zye,"A",{href:!0});var Iat=s(pq);C6o=r(Iat,"RobertaModel"),Iat.forEach(t),w6o=r(zye," (RoBERTa model)"),zye.forEach(t),A6o=i($),k_=n($,"LI",{});var Wye=s(k_);Fie=n(Wye,"STRONG",{});var Nat=s(Fie);y6o=r(Nat,"roformer"),Nat.forEach(t),L6o=r(Wye," \u2014 "),_q=n(Wye,"A",{href:!0});var qat=s(_q);x6o=r(qat,"RoFormerModel"),qat.forEach(t),$6o=r(Wye," (RoFormer model)"),Wye.forEach(t),k6o=i($),S_=n($,"LI",{});var Qye=s(S_);Tie=n(Qye,"STRONG",{});var jat=s(Tie);S6o=r(jat,"segformer"),jat.forEach(t),R6o=r(Qye," \u2014 "),uq=n(Qye,"A",{href:!0});var Dat=s(uq);P6o=r(Dat,"SegformerModel"),Dat.forEach(t),B6o=r(Qye," (SegFormer model)"),Qye.forEach(t),I6o=i($),R_=n($,"LI",{});var Hye=s(R_);Mie=n(Hye,"STRONG",{});var Gat=s(Mie);N6o=r(Gat,"sew"),Gat.forEach(t),q6o=r(Hye," \u2014 "),bq=n(Hye,"A",{href:!0});var Oat=s(bq);j6o=r(Oat,"SEWModel"),Oat.forEach(t),D6o=r(Hye," (SEW model)"),Hye.forEach(t),G6o=i($),P_=n($,"LI",{});var Uye=s(P_);Eie=n(Uye,"STRONG",{});var Vat=s(Eie);O6o=r(Vat,"sew-d"),Vat.forEach(t),V6o=r(Uye," \u2014 "),vq=n(Uye,"A",{href:!0});var Xat=s(vq);X6o=r(Xat,"SEWDModel"),Xat.forEach(t),z6o=r(Uye," (SEW-D model)"),Uye.forEach(t),W6o=i($),B_=n($,"LI",{});var Jye=s(B_);Cie=n(Jye,"STRONG",{});var zat=s(Cie);Q6o=r(zat,"speech_to_text"),zat.forEach(t),H6o=r(Jye," \u2014 "),Fq=n(Jye,"A",{href:!0});var Wat=s(Fq);U6o=r(Wat,"Speech2TextModel"),Wat.forEach(t),J6o=r(Jye," (Speech2Text model)"),Jye.forEach(t),Y6o=i($),I_=n($,"LI",{});var Yye=s(I_);wie=n(Yye,"STRONG",{});var Qat=s(wie);K6o=r(Qat,"splinter"),Qat.forEach(t),Z6o=r(Yye," \u2014 "),Tq=n(Yye,"A",{href:!0});var Hat=s(Tq);eTo=r(Hat,"SplinterModel"),Hat.forEach(t),oTo=r(Yye," (Splinter model)"),Yye.forEach(t),rTo=i($),N_=n($,"LI",{});var Kye=s(N_);Aie=n(Kye,"STRONG",{});var Uat=s(Aie);tTo=r(Uat,"squeezebert"),Uat.forEach(t),aTo=r(Kye," \u2014 "),Mq=n(Kye,"A",{href:!0});var Jat=s(Mq);nTo=r(Jat,"SqueezeBertModel"),Jat.forEach(t),sTo=r(Kye," (SqueezeBERT model)"),Kye.forEach(t),lTo=i($),q_=n($,"LI",{});var Zye=s(q_);yie=n(Zye,"STRONG",{});var Yat=s(yie);iTo=r(Yat,"swin"),Yat.forEach(t),dTo=r(Zye," \u2014 "),Eq=n(Zye,"A",{href:!0});var Kat=s(Eq);cTo=r(Kat,"SwinModel"),Kat.forEach(t),fTo=r(Zye," (Swin Transformer model)"),Zye.forEach(t),mTo=i($),j_=n($,"LI",{});var eLe=s(j_);Lie=n(eLe,"STRONG",{});var Zat=s(Lie);gTo=r(Zat,"t5"),Zat.forEach(t),hTo=r(eLe," \u2014 "),Cq=n(eLe,"A",{href:!0});var ent=s(Cq);pTo=r(ent,"T5Model"),ent.forEach(t),_To=r(eLe," (T5 model)"),eLe.forEach(t),uTo=i($),D_=n($,"LI",{});var oLe=s(D_);xie=n(oLe,"STRONG",{});var ont=s(xie);bTo=r(ont,"tapas"),ont.forEach(t),vTo=r(oLe," \u2014 "),wq=n(oLe,"A",{href:!0});var rnt=s(wq);FTo=r(rnt,"TapasModel"),rnt.forEach(t),TTo=r(oLe," (TAPAS model)"),oLe.forEach(t),MTo=i($),G_=n($,"LI",{});var rLe=s(G_);$ie=n(rLe,"STRONG",{});var tnt=s($ie);ETo=r(tnt,"trajectory_transformer"),tnt.forEach(t),CTo=r(rLe," \u2014 "),Aq=n(rLe,"A",{href:!0});var ant=s(Aq);wTo=r(ant,"TrajectoryTransformerModel"),ant.forEach(t),ATo=r(rLe," (Trajectory Transformer model)"),rLe.forEach(t),yTo=i($),O_=n($,"LI",{});var tLe=s(O_);kie=n(tLe,"STRONG",{});var nnt=s(kie);LTo=r(nnt,"transfo-xl"),nnt.forEach(t),xTo=r(tLe," \u2014 "),yq=n(tLe,"A",{href:!0});var snt=s(yq);$To=r(snt,"TransfoXLModel"),snt.forEach(t),kTo=r(tLe," (Transformer-XL model)"),tLe.forEach(t),STo=i($),V_=n($,"LI",{});var aLe=s(V_);Sie=n(aLe,"STRONG",{});var lnt=s(Sie);RTo=r(lnt,"unispeech"),lnt.forEach(t),PTo=r(aLe," \u2014 "),Lq=n(aLe,"A",{href:!0});var int=s(Lq);BTo=r(int,"UniSpeechModel"),int.forEach(t),ITo=r(aLe," (UniSpeech model)"),aLe.forEach(t),NTo=i($),X_=n($,"LI",{});var nLe=s(X_);Rie=n(nLe,"STRONG",{});var dnt=s(Rie);qTo=r(dnt,"unispeech-sat"),dnt.forEach(t),jTo=r(nLe," \u2014 "),xq=n(nLe,"A",{href:!0});var cnt=s(xq);DTo=r(cnt,"UniSpeechSatModel"),cnt.forEach(t),GTo=r(nLe," (UniSpeechSat model)"),nLe.forEach(t),OTo=i($),z_=n($,"LI",{});var sLe=s(z_);Pie=n(sLe,"STRONG",{});var fnt=s(Pie);VTo=r(fnt,"van"),fnt.forEach(t),XTo=r(sLe," \u2014 "),$q=n(sLe,"A",{href:!0});var mnt=s($q);zTo=r(mnt,"VanModel"),mnt.forEach(t),WTo=r(sLe," (VAN model)"),sLe.forEach(t),QTo=i($),W_=n($,"LI",{});var lLe=s(W_);Bie=n(lLe,"STRONG",{});var gnt=s(Bie);HTo=r(gnt,"vilt"),gnt.forEach(t),UTo=r(lLe," \u2014 "),kq=n(lLe,"A",{href:!0});var hnt=s(kq);JTo=r(hnt,"ViltModel"),hnt.forEach(t),YTo=r(lLe," (ViLT model)"),lLe.forEach(t),KTo=i($),Q_=n($,"LI",{});var iLe=s(Q_);Iie=n(iLe,"STRONG",{});var pnt=s(Iie);ZTo=r(pnt,"vision-text-dual-encoder"),pnt.forEach(t),e7o=r(iLe," \u2014 "),Sq=n(iLe,"A",{href:!0});var _nt=s(Sq);o7o=r(_nt,"VisionTextDualEncoderModel"),_nt.forEach(t),r7o=r(iLe," (VisionTextDualEncoder model)"),iLe.forEach(t),t7o=i($),H_=n($,"LI",{});var dLe=s(H_);Nie=n(dLe,"STRONG",{});var unt=s(Nie);a7o=r(unt,"visual_bert"),unt.forEach(t),n7o=r(dLe," \u2014 "),Rq=n(dLe,"A",{href:!0});var bnt=s(Rq);s7o=r(bnt,"VisualBertModel"),bnt.forEach(t),l7o=r(dLe," (VisualBERT model)"),dLe.forEach(t),i7o=i($),U_=n($,"LI",{});var cLe=s(U_);qie=n(cLe,"STRONG",{});var vnt=s(qie);d7o=r(vnt,"vit"),vnt.forEach(t),c7o=r(cLe," \u2014 "),Pq=n(cLe,"A",{href:!0});var Fnt=s(Pq);f7o=r(Fnt,"ViTModel"),Fnt.forEach(t),m7o=r(cLe," (ViT model)"),cLe.forEach(t),g7o=i($),J_=n($,"LI",{});var fLe=s(J_);jie=n(fLe,"STRONG",{});var Tnt=s(jie);h7o=r(Tnt,"vit_mae"),Tnt.forEach(t),p7o=r(fLe," \u2014 "),Bq=n(fLe,"A",{href:!0});var Mnt=s(Bq);_7o=r(Mnt,"ViTMAEModel"),Mnt.forEach(t),u7o=r(fLe," (ViTMAE model)"),fLe.forEach(t),b7o=i($),Y_=n($,"LI",{});var mLe=s(Y_);Die=n(mLe,"STRONG",{});var Ent=s(Die);v7o=r(Ent,"wav2vec2"),Ent.forEach(t),F7o=r(mLe," \u2014 "),Iq=n(mLe,"A",{href:!0});var Cnt=s(Iq);T7o=r(Cnt,"Wav2Vec2Model"),Cnt.forEach(t),M7o=r(mLe," (Wav2Vec2 model)"),mLe.forEach(t),E7o=i($),K_=n($,"LI",{});var gLe=s(K_);Gie=n(gLe,"STRONG",{});var wnt=s(Gie);C7o=r(wnt,"wav2vec2-conformer"),wnt.forEach(t),w7o=r(gLe," \u2014 "),Nq=n(gLe,"A",{href:!0});var Ant=s(Nq);A7o=r(Ant,"Wav2Vec2ConformerModel"),Ant.forEach(t),y7o=r(gLe," (Wav2Vec2-Conformer model)"),gLe.forEach(t),L7o=i($),Z_=n($,"LI",{});var hLe=s(Z_);Oie=n(hLe,"STRONG",{});var ynt=s(Oie);x7o=r(ynt,"wavlm"),ynt.forEach(t),$7o=r(hLe," \u2014 "),qq=n(hLe,"A",{href:!0});var Lnt=s(qq);k7o=r(Lnt,"WavLMModel"),Lnt.forEach(t),S7o=r(hLe," (WavLM model)"),hLe.forEach(t),R7o=i($),eu=n($,"LI",{});var pLe=s(eu);Vie=n(pLe,"STRONG",{});var xnt=s(Vie);P7o=r(xnt,"xglm"),xnt.forEach(t),B7o=r(pLe," \u2014 "),jq=n(pLe,"A",{href:!0});var $nt=s(jq);I7o=r($nt,"XGLMModel"),$nt.forEach(t),N7o=r(pLe," (XGLM model)"),pLe.forEach(t),q7o=i($),ou=n($,"LI",{});var _Le=s(ou);Xie=n(_Le,"STRONG",{});var knt=s(Xie);j7o=r(knt,"xlm"),knt.forEach(t),D7o=r(_Le," \u2014 "),Dq=n(_Le,"A",{href:!0});var Snt=s(Dq);G7o=r(Snt,"XLMModel"),Snt.forEach(t),O7o=r(_Le," (XLM model)"),_Le.forEach(t),V7o=i($),ru=n($,"LI",{});var uLe=s(ru);zie=n(uLe,"STRONG",{});var Rnt=s(zie);X7o=r(Rnt,"xlm-prophetnet"),Rnt.forEach(t),z7o=r(uLe," \u2014 "),Gq=n(uLe,"A",{href:!0});var Pnt=s(Gq);W7o=r(Pnt,"XLMProphetNetModel"),Pnt.forEach(t),Q7o=r(uLe," (XLM-ProphetNet model)"),uLe.forEach(t),H7o=i($),tu=n($,"LI",{});var bLe=s(tu);Wie=n(bLe,"STRONG",{});var Bnt=s(Wie);U7o=r(Bnt,"xlm-roberta"),Bnt.forEach(t),J7o=r(bLe," \u2014 "),Oq=n(bLe,"A",{href:!0});var Int=s(Oq);Y7o=r(Int,"XLMRobertaModel"),Int.forEach(t),K7o=r(bLe," (XLM-RoBERTa model)"),bLe.forEach(t),Z7o=i($),au=n($,"LI",{});var vLe=s(au);Qie=n(vLe,"STRONG",{});var Nnt=s(Qie);eMo=r(Nnt,"xlm-roberta-xl"),Nnt.forEach(t),oMo=r(vLe," \u2014 "),Vq=n(vLe,"A",{href:!0});var qnt=s(Vq);rMo=r(qnt,"XLMRobertaXLModel"),qnt.forEach(t),tMo=r(vLe," (XLM-RoBERTa-XL model)"),vLe.forEach(t),aMo=i($),nu=n($,"LI",{});var FLe=s(nu);Hie=n(FLe,"STRONG",{});var jnt=s(Hie);nMo=r(jnt,"xlnet"),jnt.forEach(t),sMo=r(FLe," \u2014 "),Xq=n(FLe,"A",{href:!0});var Dnt=s(Xq);lMo=r(Dnt,"XLNetModel"),Dnt.forEach(t),iMo=r(FLe," (XLNet model)"),FLe.forEach(t),dMo=i($),su=n($,"LI",{});var TLe=s(su);Uie=n(TLe,"STRONG",{});var Gnt=s(Uie);cMo=r(Gnt,"yolos"),Gnt.forEach(t),fMo=r(TLe," \u2014 "),zq=n(TLe,"A",{href:!0});var Ont=s(zq);mMo=r(Ont,"YolosModel"),Ont.forEach(t),gMo=r(TLe," (YOLOS model)"),TLe.forEach(t),hMo=i($),lu=n($,"LI",{});var MLe=s(lu);Jie=n(MLe,"STRONG",{});var Vnt=s(Jie);pMo=r(Vnt,"yoso"),Vnt.forEach(t),_Mo=r(MLe," \u2014 "),Wq=n(MLe,"A",{href:!0});var Xnt=s(Wq);uMo=r(Xnt,"YosoModel"),Xnt.forEach(t),bMo=r(MLe," (YOSO model)"),MLe.forEach(t),$.forEach(t),vMo=i(oa),iu=n(oa,"P",{});var ELe=s(iu);FMo=r(ELe,"The model is set in evaluation mode by default using "),Yie=n(ELe,"CODE",{});var znt=s(Yie);TMo=r(znt,"model.eval()"),znt.forEach(t),MMo=r(ELe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kie=n(ELe,"CODE",{});var Wnt=s(Kie);EMo=r(Wnt,"model.train()"),Wnt.forEach(t),ELe.forEach(t),CMo=i(oa),T(du.$$.fragment,oa),oa.forEach(t),Os.forEach(t),mje=i(f),xi=n(f,"H2",{class:!0});var _Ge=s(xi);cu=n(_Ge,"A",{id:!0,class:!0,href:!0});var Qnt=s(cu);Zie=n(Qnt,"SPAN",{});var Hnt=s(Zie);T(uy.$$.fragment,Hnt),Hnt.forEach(t),Qnt.forEach(t),wMo=i(_Ge),ede=n(_Ge,"SPAN",{});var Unt=s(ede);AMo=r(Unt,"AutoModelForPreTraining"),Unt.forEach(t),_Ge.forEach(t),gje=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(by.$$.fragment,Vs),yMo=i(Vs),$i=n(Vs,"P",{});var zZ=s($i);LMo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qq=n(zZ,"A",{href:!0});var Jnt=s(Qq);xMo=r(Jnt,"from_pretrained()"),Jnt.forEach(t),$Mo=r(zZ," class method or the "),Hq=n(zZ,"A",{href:!0});var Ynt=s(Hq);kMo=r(Ynt,"from_config()"),Ynt.forEach(t),SMo=r(zZ,` class
method.`),zZ.forEach(t),RMo=i(Vs),vy=n(Vs,"P",{});var uGe=s(vy);PMo=r(uGe,"This class cannot be instantiated directly using "),ode=n(uGe,"CODE",{});var Knt=s(ode);BMo=r(Knt,"__init__()"),Knt.forEach(t),IMo=r(uGe," (throws an error)."),uGe.forEach(t),NMo=i(Vs),at=n(Vs,"DIV",{class:!0});var W0=s(at);T(Fy.$$.fragment,W0),qMo=i(W0),rde=n(W0,"P",{});var Znt=s(rde);jMo=r(Znt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Znt.forEach(t),DMo=i(W0),ki=n(W0,"P",{});var WZ=s(ki);GMo=r(WZ,`Note:
Loading a model from its configuration file does `),tde=n(WZ,"STRONG",{});var est=s(tde);OMo=r(est,"not"),est.forEach(t),VMo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uq=n(WZ,"A",{href:!0});var ost=s(Uq);XMo=r(ost,"from_pretrained()"),ost.forEach(t),zMo=r(WZ," to load the model weights."),WZ.forEach(t),WMo=i(W0),T(fu.$$.fragment,W0),W0.forEach(t),QMo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(Ty.$$.fragment,ra),HMo=i(ra),ade=n(ra,"P",{});var rst=s(ade);UMo=r(rst,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rst.forEach(t),JMo=i(ra),xa=n(ra,"P",{});var Q0=s(xa);YMo=r(Q0,"The model class to instantiate is selected based on the "),nde=n(Q0,"CODE",{});var tst=s(nde);KMo=r(tst,"model_type"),tst.forEach(t),ZMo=r(Q0,` property of the config object (either
passed as an argument or loaded from `),sde=n(Q0,"CODE",{});var ast=s(sde);e4o=r(ast,"pretrained_model_name_or_path"),ast.forEach(t),o4o=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lde=n(Q0,"CODE",{});var nst=s(lde);r4o=r(nst,"pretrained_model_name_or_path"),nst.forEach(t),t4o=r(Q0,":"),Q0.forEach(t),a4o=i(ra),G=n(ra,"UL",{});var O=s(G);mu=n(O,"LI",{});var CLe=s(mu);ide=n(CLe,"STRONG",{});var sst=s(ide);n4o=r(sst,"albert"),sst.forEach(t),s4o=r(CLe," \u2014 "),Jq=n(CLe,"A",{href:!0});var lst=s(Jq);l4o=r(lst,"AlbertForPreTraining"),lst.forEach(t),i4o=r(CLe," (ALBERT model)"),CLe.forEach(t),d4o=i(O),gu=n(O,"LI",{});var wLe=s(gu);dde=n(wLe,"STRONG",{});var ist=s(dde);c4o=r(ist,"bart"),ist.forEach(t),f4o=r(wLe," \u2014 "),Yq=n(wLe,"A",{href:!0});var dst=s(Yq);m4o=r(dst,"BartForConditionalGeneration"),dst.forEach(t),g4o=r(wLe," (BART model)"),wLe.forEach(t),h4o=i(O),hu=n(O,"LI",{});var ALe=s(hu);cde=n(ALe,"STRONG",{});var cst=s(cde);p4o=r(cst,"bert"),cst.forEach(t),_4o=r(ALe," \u2014 "),Kq=n(ALe,"A",{href:!0});var fst=s(Kq);u4o=r(fst,"BertForPreTraining"),fst.forEach(t),b4o=r(ALe," (BERT model)"),ALe.forEach(t),v4o=i(O),pu=n(O,"LI",{});var yLe=s(pu);fde=n(yLe,"STRONG",{});var mst=s(fde);F4o=r(mst,"big_bird"),mst.forEach(t),T4o=r(yLe," \u2014 "),Zq=n(yLe,"A",{href:!0});var gst=s(Zq);M4o=r(gst,"BigBirdForPreTraining"),gst.forEach(t),E4o=r(yLe," (BigBird model)"),yLe.forEach(t),C4o=i(O),_u=n(O,"LI",{});var LLe=s(_u);mde=n(LLe,"STRONG",{});var hst=s(mde);w4o=r(hst,"camembert"),hst.forEach(t),A4o=r(LLe," \u2014 "),ej=n(LLe,"A",{href:!0});var pst=s(ej);y4o=r(pst,"CamembertForMaskedLM"),pst.forEach(t),L4o=r(LLe," (CamemBERT model)"),LLe.forEach(t),x4o=i(O),uu=n(O,"LI",{});var xLe=s(uu);gde=n(xLe,"STRONG",{});var _st=s(gde);$4o=r(_st,"ctrl"),_st.forEach(t),k4o=r(xLe," \u2014 "),oj=n(xLe,"A",{href:!0});var ust=s(oj);S4o=r(ust,"CTRLLMHeadModel"),ust.forEach(t),R4o=r(xLe," (CTRL model)"),xLe.forEach(t),P4o=i(O),bu=n(O,"LI",{});var $Le=s(bu);hde=n($Le,"STRONG",{});var bst=s(hde);B4o=r(bst,"data2vec-text"),bst.forEach(t),I4o=r($Le," \u2014 "),rj=n($Le,"A",{href:!0});var vst=s(rj);N4o=r(vst,"Data2VecTextForMaskedLM"),vst.forEach(t),q4o=r($Le," (Data2VecText model)"),$Le.forEach(t),j4o=i(O),vu=n(O,"LI",{});var kLe=s(vu);pde=n(kLe,"STRONG",{});var Fst=s(pde);D4o=r(Fst,"deberta"),Fst.forEach(t),G4o=r(kLe," \u2014 "),tj=n(kLe,"A",{href:!0});var Tst=s(tj);O4o=r(Tst,"DebertaForMaskedLM"),Tst.forEach(t),V4o=r(kLe," (DeBERTa model)"),kLe.forEach(t),X4o=i(O),Fu=n(O,"LI",{});var SLe=s(Fu);_de=n(SLe,"STRONG",{});var Mst=s(_de);z4o=r(Mst,"deberta-v2"),Mst.forEach(t),W4o=r(SLe," \u2014 "),aj=n(SLe,"A",{href:!0});var Est=s(aj);Q4o=r(Est,"DebertaV2ForMaskedLM"),Est.forEach(t),H4o=r(SLe," (DeBERTa-v2 model)"),SLe.forEach(t),U4o=i(O),Tu=n(O,"LI",{});var RLe=s(Tu);ude=n(RLe,"STRONG",{});var Cst=s(ude);J4o=r(Cst,"distilbert"),Cst.forEach(t),Y4o=r(RLe," \u2014 "),nj=n(RLe,"A",{href:!0});var wst=s(nj);K4o=r(wst,"DistilBertForMaskedLM"),wst.forEach(t),Z4o=r(RLe," (DistilBERT model)"),RLe.forEach(t),eEo=i(O),Mu=n(O,"LI",{});var PLe=s(Mu);bde=n(PLe,"STRONG",{});var Ast=s(bde);oEo=r(Ast,"electra"),Ast.forEach(t),rEo=r(PLe," \u2014 "),sj=n(PLe,"A",{href:!0});var yst=s(sj);tEo=r(yst,"ElectraForPreTraining"),yst.forEach(t),aEo=r(PLe," (ELECTRA model)"),PLe.forEach(t),nEo=i(O),Eu=n(O,"LI",{});var BLe=s(Eu);vde=n(BLe,"STRONG",{});var Lst=s(vde);sEo=r(Lst,"flaubert"),Lst.forEach(t),lEo=r(BLe," \u2014 "),lj=n(BLe,"A",{href:!0});var xst=s(lj);iEo=r(xst,"FlaubertWithLMHeadModel"),xst.forEach(t),dEo=r(BLe," (FlauBERT model)"),BLe.forEach(t),cEo=i(O),Cu=n(O,"LI",{});var ILe=s(Cu);Fde=n(ILe,"STRONG",{});var $st=s(Fde);fEo=r($st,"flava"),$st.forEach(t),mEo=r(ILe," \u2014 "),ij=n(ILe,"A",{href:!0});var kst=s(ij);gEo=r(kst,"FlavaForPreTraining"),kst.forEach(t),hEo=r(ILe," (FLAVA model)"),ILe.forEach(t),pEo=i(O),wu=n(O,"LI",{});var NLe=s(wu);Tde=n(NLe,"STRONG",{});var Sst=s(Tde);_Eo=r(Sst,"fnet"),Sst.forEach(t),uEo=r(NLe," \u2014 "),dj=n(NLe,"A",{href:!0});var Rst=s(dj);bEo=r(Rst,"FNetForPreTraining"),Rst.forEach(t),vEo=r(NLe," (FNet model)"),NLe.forEach(t),FEo=i(O),Au=n(O,"LI",{});var qLe=s(Au);Mde=n(qLe,"STRONG",{});var Pst=s(Mde);TEo=r(Pst,"fsmt"),Pst.forEach(t),MEo=r(qLe," \u2014 "),cj=n(qLe,"A",{href:!0});var Bst=s(cj);EEo=r(Bst,"FSMTForConditionalGeneration"),Bst.forEach(t),CEo=r(qLe," (FairSeq Machine-Translation model)"),qLe.forEach(t),wEo=i(O),yu=n(O,"LI",{});var jLe=s(yu);Ede=n(jLe,"STRONG",{});var Ist=s(Ede);AEo=r(Ist,"funnel"),Ist.forEach(t),yEo=r(jLe," \u2014 "),fj=n(jLe,"A",{href:!0});var Nst=s(fj);LEo=r(Nst,"FunnelForPreTraining"),Nst.forEach(t),xEo=r(jLe," (Funnel Transformer model)"),jLe.forEach(t),$Eo=i(O),Lu=n(O,"LI",{});var DLe=s(Lu);Cde=n(DLe,"STRONG",{});var qst=s(Cde);kEo=r(qst,"gpt2"),qst.forEach(t),SEo=r(DLe," \u2014 "),mj=n(DLe,"A",{href:!0});var jst=s(mj);REo=r(jst,"GPT2LMHeadModel"),jst.forEach(t),PEo=r(DLe," (OpenAI GPT-2 model)"),DLe.forEach(t),BEo=i(O),xu=n(O,"LI",{});var GLe=s(xu);wde=n(GLe,"STRONG",{});var Dst=s(wde);IEo=r(Dst,"ibert"),Dst.forEach(t),NEo=r(GLe," \u2014 "),gj=n(GLe,"A",{href:!0});var Gst=s(gj);qEo=r(Gst,"IBertForMaskedLM"),Gst.forEach(t),jEo=r(GLe," (I-BERT model)"),GLe.forEach(t),DEo=i(O),$u=n(O,"LI",{});var OLe=s($u);Ade=n(OLe,"STRONG",{});var Ost=s(Ade);GEo=r(Ost,"layoutlm"),Ost.forEach(t),OEo=r(OLe," \u2014 "),hj=n(OLe,"A",{href:!0});var Vst=s(hj);VEo=r(Vst,"LayoutLMForMaskedLM"),Vst.forEach(t),XEo=r(OLe," (LayoutLM model)"),OLe.forEach(t),zEo=i(O),ku=n(O,"LI",{});var VLe=s(ku);yde=n(VLe,"STRONG",{});var Xst=s(yde);WEo=r(Xst,"longformer"),Xst.forEach(t),QEo=r(VLe," \u2014 "),pj=n(VLe,"A",{href:!0});var zst=s(pj);HEo=r(zst,"LongformerForMaskedLM"),zst.forEach(t),UEo=r(VLe," (Longformer model)"),VLe.forEach(t),JEo=i(O),Su=n(O,"LI",{});var XLe=s(Su);Lde=n(XLe,"STRONG",{});var Wst=s(Lde);YEo=r(Wst,"lxmert"),Wst.forEach(t),KEo=r(XLe," \u2014 "),_j=n(XLe,"A",{href:!0});var Qst=s(_j);ZEo=r(Qst,"LxmertForPreTraining"),Qst.forEach(t),eCo=r(XLe," (LXMERT model)"),XLe.forEach(t),oCo=i(O),Ru=n(O,"LI",{});var zLe=s(Ru);xde=n(zLe,"STRONG",{});var Hst=s(xde);rCo=r(Hst,"megatron-bert"),Hst.forEach(t),tCo=r(zLe," \u2014 "),uj=n(zLe,"A",{href:!0});var Ust=s(uj);aCo=r(Ust,"MegatronBertForPreTraining"),Ust.forEach(t),nCo=r(zLe," (Megatron-BERT model)"),zLe.forEach(t),sCo=i(O),Pu=n(O,"LI",{});var WLe=s(Pu);$de=n(WLe,"STRONG",{});var Jst=s($de);lCo=r(Jst,"mobilebert"),Jst.forEach(t),iCo=r(WLe," \u2014 "),bj=n(WLe,"A",{href:!0});var Yst=s(bj);dCo=r(Yst,"MobileBertForPreTraining"),Yst.forEach(t),cCo=r(WLe," (MobileBERT model)"),WLe.forEach(t),fCo=i(O),Bu=n(O,"LI",{});var QLe=s(Bu);kde=n(QLe,"STRONG",{});var Kst=s(kde);mCo=r(Kst,"mpnet"),Kst.forEach(t),gCo=r(QLe," \u2014 "),vj=n(QLe,"A",{href:!0});var Zst=s(vj);hCo=r(Zst,"MPNetForMaskedLM"),Zst.forEach(t),pCo=r(QLe," (MPNet model)"),QLe.forEach(t),_Co=i(O),Iu=n(O,"LI",{});var HLe=s(Iu);Sde=n(HLe,"STRONG",{});var elt=s(Sde);uCo=r(elt,"openai-gpt"),elt.forEach(t),bCo=r(HLe," \u2014 "),Fj=n(HLe,"A",{href:!0});var olt=s(Fj);vCo=r(olt,"OpenAIGPTLMHeadModel"),olt.forEach(t),FCo=r(HLe," (OpenAI GPT model)"),HLe.forEach(t),TCo=i(O),Nu=n(O,"LI",{});var ULe=s(Nu);Rde=n(ULe,"STRONG",{});var rlt=s(Rde);MCo=r(rlt,"retribert"),rlt.forEach(t),ECo=r(ULe," \u2014 "),Tj=n(ULe,"A",{href:!0});var tlt=s(Tj);CCo=r(tlt,"RetriBertModel"),tlt.forEach(t),wCo=r(ULe," (RetriBERT model)"),ULe.forEach(t),ACo=i(O),qu=n(O,"LI",{});var JLe=s(qu);Pde=n(JLe,"STRONG",{});var alt=s(Pde);yCo=r(alt,"roberta"),alt.forEach(t),LCo=r(JLe," \u2014 "),Mj=n(JLe,"A",{href:!0});var nlt=s(Mj);xCo=r(nlt,"RobertaForMaskedLM"),nlt.forEach(t),$Co=r(JLe," (RoBERTa model)"),JLe.forEach(t),kCo=i(O),ju=n(O,"LI",{});var YLe=s(ju);Bde=n(YLe,"STRONG",{});var slt=s(Bde);SCo=r(slt,"splinter"),slt.forEach(t),RCo=r(YLe," \u2014 "),Ej=n(YLe,"A",{href:!0});var llt=s(Ej);PCo=r(llt,"SplinterForPreTraining"),llt.forEach(t),BCo=r(YLe," (Splinter model)"),YLe.forEach(t),ICo=i(O),Du=n(O,"LI",{});var KLe=s(Du);Ide=n(KLe,"STRONG",{});var ilt=s(Ide);NCo=r(ilt,"squeezebert"),ilt.forEach(t),qCo=r(KLe," \u2014 "),Cj=n(KLe,"A",{href:!0});var dlt=s(Cj);jCo=r(dlt,"SqueezeBertForMaskedLM"),dlt.forEach(t),DCo=r(KLe," (SqueezeBERT model)"),KLe.forEach(t),GCo=i(O),Gu=n(O,"LI",{});var ZLe=s(Gu);Nde=n(ZLe,"STRONG",{});var clt=s(Nde);OCo=r(clt,"t5"),clt.forEach(t),VCo=r(ZLe," \u2014 "),wj=n(ZLe,"A",{href:!0});var flt=s(wj);XCo=r(flt,"T5ForConditionalGeneration"),flt.forEach(t),zCo=r(ZLe," (T5 model)"),ZLe.forEach(t),WCo=i(O),Ou=n(O,"LI",{});var e8e=s(Ou);qde=n(e8e,"STRONG",{});var mlt=s(qde);QCo=r(mlt,"tapas"),mlt.forEach(t),HCo=r(e8e," \u2014 "),Aj=n(e8e,"A",{href:!0});var glt=s(Aj);UCo=r(glt,"TapasForMaskedLM"),glt.forEach(t),JCo=r(e8e," (TAPAS model)"),e8e.forEach(t),YCo=i(O),Vu=n(O,"LI",{});var o8e=s(Vu);jde=n(o8e,"STRONG",{});var hlt=s(jde);KCo=r(hlt,"transfo-xl"),hlt.forEach(t),ZCo=r(o8e," \u2014 "),yj=n(o8e,"A",{href:!0});var plt=s(yj);e5o=r(plt,"TransfoXLLMHeadModel"),plt.forEach(t),o5o=r(o8e," (Transformer-XL model)"),o8e.forEach(t),r5o=i(O),Xu=n(O,"LI",{});var r8e=s(Xu);Dde=n(r8e,"STRONG",{});var _lt=s(Dde);t5o=r(_lt,"unispeech"),_lt.forEach(t),a5o=r(r8e," \u2014 "),Lj=n(r8e,"A",{href:!0});var ult=s(Lj);n5o=r(ult,"UniSpeechForPreTraining"),ult.forEach(t),s5o=r(r8e," (UniSpeech model)"),r8e.forEach(t),l5o=i(O),zu=n(O,"LI",{});var t8e=s(zu);Gde=n(t8e,"STRONG",{});var blt=s(Gde);i5o=r(blt,"unispeech-sat"),blt.forEach(t),d5o=r(t8e," \u2014 "),xj=n(t8e,"A",{href:!0});var vlt=s(xj);c5o=r(vlt,"UniSpeechSatForPreTraining"),vlt.forEach(t),f5o=r(t8e," (UniSpeechSat model)"),t8e.forEach(t),m5o=i(O),Wu=n(O,"LI",{});var a8e=s(Wu);Ode=n(a8e,"STRONG",{});var Flt=s(Ode);g5o=r(Flt,"visual_bert"),Flt.forEach(t),h5o=r(a8e," \u2014 "),$j=n(a8e,"A",{href:!0});var Tlt=s($j);p5o=r(Tlt,"VisualBertForPreTraining"),Tlt.forEach(t),_5o=r(a8e," (VisualBERT model)"),a8e.forEach(t),u5o=i(O),Qu=n(O,"LI",{});var n8e=s(Qu);Vde=n(n8e,"STRONG",{});var Mlt=s(Vde);b5o=r(Mlt,"vit_mae"),Mlt.forEach(t),v5o=r(n8e," \u2014 "),kj=n(n8e,"A",{href:!0});var Elt=s(kj);F5o=r(Elt,"ViTMAEForPreTraining"),Elt.forEach(t),T5o=r(n8e," (ViTMAE model)"),n8e.forEach(t),M5o=i(O),Hu=n(O,"LI",{});var s8e=s(Hu);Xde=n(s8e,"STRONG",{});var Clt=s(Xde);E5o=r(Clt,"wav2vec2"),Clt.forEach(t),C5o=r(s8e," \u2014 "),Sj=n(s8e,"A",{href:!0});var wlt=s(Sj);w5o=r(wlt,"Wav2Vec2ForPreTraining"),wlt.forEach(t),A5o=r(s8e," (Wav2Vec2 model)"),s8e.forEach(t),y5o=i(O),Uu=n(O,"LI",{});var l8e=s(Uu);zde=n(l8e,"STRONG",{});var Alt=s(zde);L5o=r(Alt,"wav2vec2-conformer"),Alt.forEach(t),x5o=r(l8e," \u2014 "),Rj=n(l8e,"A",{href:!0});var ylt=s(Rj);$5o=r(ylt,"Wav2Vec2ConformerForPreTraining"),ylt.forEach(t),k5o=r(l8e," (Wav2Vec2-Conformer model)"),l8e.forEach(t),S5o=i(O),Ju=n(O,"LI",{});var i8e=s(Ju);Wde=n(i8e,"STRONG",{});var Llt=s(Wde);R5o=r(Llt,"xlm"),Llt.forEach(t),P5o=r(i8e," \u2014 "),Pj=n(i8e,"A",{href:!0});var xlt=s(Pj);B5o=r(xlt,"XLMWithLMHeadModel"),xlt.forEach(t),I5o=r(i8e," (XLM model)"),i8e.forEach(t),N5o=i(O),Yu=n(O,"LI",{});var d8e=s(Yu);Qde=n(d8e,"STRONG",{});var $lt=s(Qde);q5o=r($lt,"xlm-roberta"),$lt.forEach(t),j5o=r(d8e," \u2014 "),Bj=n(d8e,"A",{href:!0});var klt=s(Bj);D5o=r(klt,"XLMRobertaForMaskedLM"),klt.forEach(t),G5o=r(d8e," (XLM-RoBERTa model)"),d8e.forEach(t),O5o=i(O),Ku=n(O,"LI",{});var c8e=s(Ku);Hde=n(c8e,"STRONG",{});var Slt=s(Hde);V5o=r(Slt,"xlm-roberta-xl"),Slt.forEach(t),X5o=r(c8e," \u2014 "),Ij=n(c8e,"A",{href:!0});var Rlt=s(Ij);z5o=r(Rlt,"XLMRobertaXLForMaskedLM"),Rlt.forEach(t),W5o=r(c8e," (XLM-RoBERTa-XL model)"),c8e.forEach(t),Q5o=i(O),Zu=n(O,"LI",{});var f8e=s(Zu);Ude=n(f8e,"STRONG",{});var Plt=s(Ude);H5o=r(Plt,"xlnet"),Plt.forEach(t),U5o=r(f8e," \u2014 "),Nj=n(f8e,"A",{href:!0});var Blt=s(Nj);J5o=r(Blt,"XLNetLMHeadModel"),Blt.forEach(t),Y5o=r(f8e," (XLNet model)"),f8e.forEach(t),O.forEach(t),K5o=i(ra),e2=n(ra,"P",{});var m8e=s(e2);Z5o=r(m8e,"The model is set in evaluation mode by default using "),Jde=n(m8e,"CODE",{});var Ilt=s(Jde);e3o=r(Ilt,"model.eval()"),Ilt.forEach(t),o3o=r(m8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yde=n(m8e,"CODE",{});var Nlt=s(Yde);r3o=r(Nlt,"model.train()"),Nlt.forEach(t),m8e.forEach(t),t3o=i(ra),T(o2.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),hje=i(f),Si=n(f,"H2",{class:!0});var bGe=s(Si);r2=n(bGe,"A",{id:!0,class:!0,href:!0});var qlt=s(r2);Kde=n(qlt,"SPAN",{});var jlt=s(Kde);T(My.$$.fragment,jlt),jlt.forEach(t),qlt.forEach(t),a3o=i(bGe),Zde=n(bGe,"SPAN",{});var Dlt=s(Zde);n3o=r(Dlt,"AutoModelForCausalLM"),Dlt.forEach(t),bGe.forEach(t),pje=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T(Ey.$$.fragment,Xs),s3o=i(Xs),Ri=n(Xs,"P",{});var QZ=s(Ri);l3o=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qj=n(QZ,"A",{href:!0});var Glt=s(qj);i3o=r(Glt,"from_pretrained()"),Glt.forEach(t),d3o=r(QZ," class method or the "),jj=n(QZ,"A",{href:!0});var Olt=s(jj);c3o=r(Olt,"from_config()"),Olt.forEach(t),f3o=r(QZ,` class
method.`),QZ.forEach(t),m3o=i(Xs),Cy=n(Xs,"P",{});var vGe=s(Cy);g3o=r(vGe,"This class cannot be instantiated directly using "),ece=n(vGe,"CODE",{});var Vlt=s(ece);h3o=r(Vlt,"__init__()"),Vlt.forEach(t),p3o=r(vGe," (throws an error)."),vGe.forEach(t),_3o=i(Xs),nt=n(Xs,"DIV",{class:!0});var H0=s(nt);T(wy.$$.fragment,H0),u3o=i(H0),oce=n(H0,"P",{});var Xlt=s(oce);b3o=r(Xlt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Xlt.forEach(t),v3o=i(H0),Pi=n(H0,"P",{});var HZ=s(Pi);F3o=r(HZ,`Note:
Loading a model from its configuration file does `),rce=n(HZ,"STRONG",{});var zlt=s(rce);T3o=r(zlt,"not"),zlt.forEach(t),M3o=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dj=n(HZ,"A",{href:!0});var Wlt=s(Dj);E3o=r(Wlt,"from_pretrained()"),Wlt.forEach(t),C3o=r(HZ," to load the model weights."),HZ.forEach(t),w3o=i(H0),T(t2.$$.fragment,H0),H0.forEach(t),A3o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(Ay.$$.fragment,ta),y3o=i(ta),tce=n(ta,"P",{});var Qlt=s(tce);L3o=r(Qlt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qlt.forEach(t),x3o=i(ta),$a=n(ta,"P",{});var U0=s($a);$3o=r(U0,"The model class to instantiate is selected based on the "),ace=n(U0,"CODE",{});var Hlt=s(ace);k3o=r(Hlt,"model_type"),Hlt.forEach(t),S3o=r(U0,` property of the config object (either
passed as an argument or loaded from `),nce=n(U0,"CODE",{});var Ult=s(nce);R3o=r(Ult,"pretrained_model_name_or_path"),Ult.forEach(t),P3o=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=n(U0,"CODE",{});var Jlt=s(sce);B3o=r(Jlt,"pretrained_model_name_or_path"),Jlt.forEach(t),I3o=r(U0,":"),U0.forEach(t),N3o=i(ta),z=n(ta,"UL",{});var Q=s(z);a2=n(Q,"LI",{});var g8e=s(a2);lce=n(g8e,"STRONG",{});var Ylt=s(lce);q3o=r(Ylt,"bart"),Ylt.forEach(t),j3o=r(g8e," \u2014 "),Gj=n(g8e,"A",{href:!0});var Klt=s(Gj);D3o=r(Klt,"BartForCausalLM"),Klt.forEach(t),G3o=r(g8e," (BART model)"),g8e.forEach(t),O3o=i(Q),n2=n(Q,"LI",{});var h8e=s(n2);ice=n(h8e,"STRONG",{});var Zlt=s(ice);V3o=r(Zlt,"bert"),Zlt.forEach(t),X3o=r(h8e," \u2014 "),Oj=n(h8e,"A",{href:!0});var eit=s(Oj);z3o=r(eit,"BertLMHeadModel"),eit.forEach(t),W3o=r(h8e," (BERT model)"),h8e.forEach(t),Q3o=i(Q),s2=n(Q,"LI",{});var p8e=s(s2);dce=n(p8e,"STRONG",{});var oit=s(dce);H3o=r(oit,"bert-generation"),oit.forEach(t),U3o=r(p8e," \u2014 "),Vj=n(p8e,"A",{href:!0});var rit=s(Vj);J3o=r(rit,"BertGenerationDecoder"),rit.forEach(t),Y3o=r(p8e," (Bert Generation model)"),p8e.forEach(t),K3o=i(Q),l2=n(Q,"LI",{});var _8e=s(l2);cce=n(_8e,"STRONG",{});var tit=s(cce);Z3o=r(tit,"big_bird"),tit.forEach(t),e0o=r(_8e," \u2014 "),Xj=n(_8e,"A",{href:!0});var ait=s(Xj);o0o=r(ait,"BigBirdForCausalLM"),ait.forEach(t),r0o=r(_8e," (BigBird model)"),_8e.forEach(t),t0o=i(Q),i2=n(Q,"LI",{});var u8e=s(i2);fce=n(u8e,"STRONG",{});var nit=s(fce);a0o=r(nit,"bigbird_pegasus"),nit.forEach(t),n0o=r(u8e," \u2014 "),zj=n(u8e,"A",{href:!0});var sit=s(zj);s0o=r(sit,"BigBirdPegasusForCausalLM"),sit.forEach(t),l0o=r(u8e," (BigBird-Pegasus model)"),u8e.forEach(t),i0o=i(Q),d2=n(Q,"LI",{});var b8e=s(d2);mce=n(b8e,"STRONG",{});var lit=s(mce);d0o=r(lit,"blenderbot"),lit.forEach(t),c0o=r(b8e," \u2014 "),Wj=n(b8e,"A",{href:!0});var iit=s(Wj);f0o=r(iit,"BlenderbotForCausalLM"),iit.forEach(t),m0o=r(b8e," (Blenderbot model)"),b8e.forEach(t),g0o=i(Q),c2=n(Q,"LI",{});var v8e=s(c2);gce=n(v8e,"STRONG",{});var dit=s(gce);h0o=r(dit,"blenderbot-small"),dit.forEach(t),p0o=r(v8e," \u2014 "),Qj=n(v8e,"A",{href:!0});var cit=s(Qj);_0o=r(cit,"BlenderbotSmallForCausalLM"),cit.forEach(t),u0o=r(v8e," (BlenderbotSmall model)"),v8e.forEach(t),b0o=i(Q),f2=n(Q,"LI",{});var F8e=s(f2);hce=n(F8e,"STRONG",{});var fit=s(hce);v0o=r(fit,"camembert"),fit.forEach(t),F0o=r(F8e," \u2014 "),Hj=n(F8e,"A",{href:!0});var mit=s(Hj);T0o=r(mit,"CamembertForCausalLM"),mit.forEach(t),M0o=r(F8e," (CamemBERT model)"),F8e.forEach(t),E0o=i(Q),m2=n(Q,"LI",{});var T8e=s(m2);pce=n(T8e,"STRONG",{});var git=s(pce);C0o=r(git,"ctrl"),git.forEach(t),w0o=r(T8e," \u2014 "),Uj=n(T8e,"A",{href:!0});var hit=s(Uj);A0o=r(hit,"CTRLLMHeadModel"),hit.forEach(t),y0o=r(T8e," (CTRL model)"),T8e.forEach(t),L0o=i(Q),g2=n(Q,"LI",{});var M8e=s(g2);_ce=n(M8e,"STRONG",{});var pit=s(_ce);x0o=r(pit,"data2vec-text"),pit.forEach(t),$0o=r(M8e," \u2014 "),Jj=n(M8e,"A",{href:!0});var _it=s(Jj);k0o=r(_it,"Data2VecTextForCausalLM"),_it.forEach(t),S0o=r(M8e," (Data2VecText model)"),M8e.forEach(t),R0o=i(Q),h2=n(Q,"LI",{});var E8e=s(h2);uce=n(E8e,"STRONG",{});var uit=s(uce);P0o=r(uit,"electra"),uit.forEach(t),B0o=r(E8e," \u2014 "),Yj=n(E8e,"A",{href:!0});var bit=s(Yj);I0o=r(bit,"ElectraForCausalLM"),bit.forEach(t),N0o=r(E8e," (ELECTRA model)"),E8e.forEach(t),q0o=i(Q),p2=n(Q,"LI",{});var C8e=s(p2);bce=n(C8e,"STRONG",{});var vit=s(bce);j0o=r(vit,"gpt2"),vit.forEach(t),D0o=r(C8e," \u2014 "),Kj=n(C8e,"A",{href:!0});var Fit=s(Kj);G0o=r(Fit,"GPT2LMHeadModel"),Fit.forEach(t),O0o=r(C8e," (OpenAI GPT-2 model)"),C8e.forEach(t),V0o=i(Q),_2=n(Q,"LI",{});var w8e=s(_2);vce=n(w8e,"STRONG",{});var Tit=s(vce);X0o=r(Tit,"gpt_neo"),Tit.forEach(t),z0o=r(w8e," \u2014 "),Zj=n(w8e,"A",{href:!0});var Mit=s(Zj);W0o=r(Mit,"GPTNeoForCausalLM"),Mit.forEach(t),Q0o=r(w8e," (GPT Neo model)"),w8e.forEach(t),H0o=i(Q),u2=n(Q,"LI",{});var A8e=s(u2);Fce=n(A8e,"STRONG",{});var Eit=s(Fce);U0o=r(Eit,"gpt_neox"),Eit.forEach(t),J0o=r(A8e," \u2014 "),eD=n(A8e,"A",{href:!0});var Cit=s(eD);Y0o=r(Cit,"GPTNeoXForCausalLM"),Cit.forEach(t),K0o=r(A8e," (GPT NeoX model)"),A8e.forEach(t),Z0o=i(Q),b2=n(Q,"LI",{});var y8e=s(b2);Tce=n(y8e,"STRONG",{});var wit=s(Tce);ewo=r(wit,"gptj"),wit.forEach(t),owo=r(y8e," \u2014 "),oD=n(y8e,"A",{href:!0});var Ait=s(oD);rwo=r(Ait,"GPTJForCausalLM"),Ait.forEach(t),two=r(y8e," (GPT-J model)"),y8e.forEach(t),awo=i(Q),v2=n(Q,"LI",{});var L8e=s(v2);Mce=n(L8e,"STRONG",{});var yit=s(Mce);nwo=r(yit,"marian"),yit.forEach(t),swo=r(L8e," \u2014 "),rD=n(L8e,"A",{href:!0});var Lit=s(rD);lwo=r(Lit,"MarianForCausalLM"),Lit.forEach(t),iwo=r(L8e," (Marian model)"),L8e.forEach(t),dwo=i(Q),F2=n(Q,"LI",{});var x8e=s(F2);Ece=n(x8e,"STRONG",{});var xit=s(Ece);cwo=r(xit,"mbart"),xit.forEach(t),fwo=r(x8e," \u2014 "),tD=n(x8e,"A",{href:!0});var $it=s(tD);mwo=r($it,"MBartForCausalLM"),$it.forEach(t),gwo=r(x8e," (mBART model)"),x8e.forEach(t),hwo=i(Q),T2=n(Q,"LI",{});var $8e=s(T2);Cce=n($8e,"STRONG",{});var kit=s(Cce);pwo=r(kit,"megatron-bert"),kit.forEach(t),_wo=r($8e," \u2014 "),aD=n($8e,"A",{href:!0});var Sit=s(aD);uwo=r(Sit,"MegatronBertForCausalLM"),Sit.forEach(t),bwo=r($8e," (Megatron-BERT model)"),$8e.forEach(t),vwo=i(Q),M2=n(Q,"LI",{});var k8e=s(M2);wce=n(k8e,"STRONG",{});var Rit=s(wce);Fwo=r(Rit,"openai-gpt"),Rit.forEach(t),Two=r(k8e," \u2014 "),nD=n(k8e,"A",{href:!0});var Pit=s(nD);Mwo=r(Pit,"OpenAIGPTLMHeadModel"),Pit.forEach(t),Ewo=r(k8e," (OpenAI GPT model)"),k8e.forEach(t),Cwo=i(Q),E2=n(Q,"LI",{});var S8e=s(E2);Ace=n(S8e,"STRONG",{});var Bit=s(Ace);wwo=r(Bit,"opt"),Bit.forEach(t),Awo=r(S8e," \u2014 "),sD=n(S8e,"A",{href:!0});var Iit=s(sD);ywo=r(Iit,"OPTForCausalLM"),Iit.forEach(t),Lwo=r(S8e," (OPT model)"),S8e.forEach(t),xwo=i(Q),C2=n(Q,"LI",{});var R8e=s(C2);yce=n(R8e,"STRONG",{});var Nit=s(yce);$wo=r(Nit,"pegasus"),Nit.forEach(t),kwo=r(R8e," \u2014 "),lD=n(R8e,"A",{href:!0});var qit=s(lD);Swo=r(qit,"PegasusForCausalLM"),qit.forEach(t),Rwo=r(R8e," (Pegasus model)"),R8e.forEach(t),Pwo=i(Q),w2=n(Q,"LI",{});var P8e=s(w2);Lce=n(P8e,"STRONG",{});var jit=s(Lce);Bwo=r(jit,"plbart"),jit.forEach(t),Iwo=r(P8e," \u2014 "),iD=n(P8e,"A",{href:!0});var Dit=s(iD);Nwo=r(Dit,"PLBartForCausalLM"),Dit.forEach(t),qwo=r(P8e," (PLBart model)"),P8e.forEach(t),jwo=i(Q),A2=n(Q,"LI",{});var B8e=s(A2);xce=n(B8e,"STRONG",{});var Git=s(xce);Dwo=r(Git,"prophetnet"),Git.forEach(t),Gwo=r(B8e," \u2014 "),dD=n(B8e,"A",{href:!0});var Oit=s(dD);Owo=r(Oit,"ProphetNetForCausalLM"),Oit.forEach(t),Vwo=r(B8e," (ProphetNet model)"),B8e.forEach(t),Xwo=i(Q),y2=n(Q,"LI",{});var I8e=s(y2);$ce=n(I8e,"STRONG",{});var Vit=s($ce);zwo=r(Vit,"qdqbert"),Vit.forEach(t),Wwo=r(I8e," \u2014 "),cD=n(I8e,"A",{href:!0});var Xit=s(cD);Qwo=r(Xit,"QDQBertLMHeadModel"),Xit.forEach(t),Hwo=r(I8e," (QDQBert model)"),I8e.forEach(t),Uwo=i(Q),L2=n(Q,"LI",{});var N8e=s(L2);kce=n(N8e,"STRONG",{});var zit=s(kce);Jwo=r(zit,"reformer"),zit.forEach(t),Ywo=r(N8e," \u2014 "),fD=n(N8e,"A",{href:!0});var Wit=s(fD);Kwo=r(Wit,"ReformerModelWithLMHead"),Wit.forEach(t),Zwo=r(N8e," (Reformer model)"),N8e.forEach(t),eAo=i(Q),x2=n(Q,"LI",{});var q8e=s(x2);Sce=n(q8e,"STRONG",{});var Qit=s(Sce);oAo=r(Qit,"rembert"),Qit.forEach(t),rAo=r(q8e," \u2014 "),mD=n(q8e,"A",{href:!0});var Hit=s(mD);tAo=r(Hit,"RemBertForCausalLM"),Hit.forEach(t),aAo=r(q8e," (RemBERT model)"),q8e.forEach(t),nAo=i(Q),$2=n(Q,"LI",{});var j8e=s($2);Rce=n(j8e,"STRONG",{});var Uit=s(Rce);sAo=r(Uit,"roberta"),Uit.forEach(t),lAo=r(j8e," \u2014 "),gD=n(j8e,"A",{href:!0});var Jit=s(gD);iAo=r(Jit,"RobertaForCausalLM"),Jit.forEach(t),dAo=r(j8e," (RoBERTa model)"),j8e.forEach(t),cAo=i(Q),k2=n(Q,"LI",{});var D8e=s(k2);Pce=n(D8e,"STRONG",{});var Yit=s(Pce);fAo=r(Yit,"roformer"),Yit.forEach(t),mAo=r(D8e," \u2014 "),hD=n(D8e,"A",{href:!0});var Kit=s(hD);gAo=r(Kit,"RoFormerForCausalLM"),Kit.forEach(t),hAo=r(D8e," (RoFormer model)"),D8e.forEach(t),pAo=i(Q),S2=n(Q,"LI",{});var G8e=s(S2);Bce=n(G8e,"STRONG",{});var Zit=s(Bce);_Ao=r(Zit,"speech_to_text_2"),Zit.forEach(t),uAo=r(G8e," \u2014 "),pD=n(G8e,"A",{href:!0});var edt=s(pD);bAo=r(edt,"Speech2Text2ForCausalLM"),edt.forEach(t),vAo=r(G8e," (Speech2Text2 model)"),G8e.forEach(t),FAo=i(Q),R2=n(Q,"LI",{});var O8e=s(R2);Ice=n(O8e,"STRONG",{});var odt=s(Ice);TAo=r(odt,"transfo-xl"),odt.forEach(t),MAo=r(O8e," \u2014 "),_D=n(O8e,"A",{href:!0});var rdt=s(_D);EAo=r(rdt,"TransfoXLLMHeadModel"),rdt.forEach(t),CAo=r(O8e," (Transformer-XL model)"),O8e.forEach(t),wAo=i(Q),P2=n(Q,"LI",{});var V8e=s(P2);Nce=n(V8e,"STRONG",{});var tdt=s(Nce);AAo=r(tdt,"trocr"),tdt.forEach(t),yAo=r(V8e," \u2014 "),uD=n(V8e,"A",{href:!0});var adt=s(uD);LAo=r(adt,"TrOCRForCausalLM"),adt.forEach(t),xAo=r(V8e," (TrOCR model)"),V8e.forEach(t),$Ao=i(Q),B2=n(Q,"LI",{});var X8e=s(B2);qce=n(X8e,"STRONG",{});var ndt=s(qce);kAo=r(ndt,"xglm"),ndt.forEach(t),SAo=r(X8e," \u2014 "),bD=n(X8e,"A",{href:!0});var sdt=s(bD);RAo=r(sdt,"XGLMForCausalLM"),sdt.forEach(t),PAo=r(X8e," (XGLM model)"),X8e.forEach(t),BAo=i(Q),I2=n(Q,"LI",{});var z8e=s(I2);jce=n(z8e,"STRONG",{});var ldt=s(jce);IAo=r(ldt,"xlm"),ldt.forEach(t),NAo=r(z8e," \u2014 "),vD=n(z8e,"A",{href:!0});var idt=s(vD);qAo=r(idt,"XLMWithLMHeadModel"),idt.forEach(t),jAo=r(z8e," (XLM model)"),z8e.forEach(t),DAo=i(Q),N2=n(Q,"LI",{});var W8e=s(N2);Dce=n(W8e,"STRONG",{});var ddt=s(Dce);GAo=r(ddt,"xlm-prophetnet"),ddt.forEach(t),OAo=r(W8e," \u2014 "),FD=n(W8e,"A",{href:!0});var cdt=s(FD);VAo=r(cdt,"XLMProphetNetForCausalLM"),cdt.forEach(t),XAo=r(W8e," (XLM-ProphetNet model)"),W8e.forEach(t),zAo=i(Q),q2=n(Q,"LI",{});var Q8e=s(q2);Gce=n(Q8e,"STRONG",{});var fdt=s(Gce);WAo=r(fdt,"xlm-roberta"),fdt.forEach(t),QAo=r(Q8e," \u2014 "),TD=n(Q8e,"A",{href:!0});var mdt=s(TD);HAo=r(mdt,"XLMRobertaForCausalLM"),mdt.forEach(t),UAo=r(Q8e," (XLM-RoBERTa model)"),Q8e.forEach(t),JAo=i(Q),j2=n(Q,"LI",{});var H8e=s(j2);Oce=n(H8e,"STRONG",{});var gdt=s(Oce);YAo=r(gdt,"xlm-roberta-xl"),gdt.forEach(t),KAo=r(H8e," \u2014 "),MD=n(H8e,"A",{href:!0});var hdt=s(MD);ZAo=r(hdt,"XLMRobertaXLForCausalLM"),hdt.forEach(t),eyo=r(H8e," (XLM-RoBERTa-XL model)"),H8e.forEach(t),oyo=i(Q),D2=n(Q,"LI",{});var U8e=s(D2);Vce=n(U8e,"STRONG",{});var pdt=s(Vce);ryo=r(pdt,"xlnet"),pdt.forEach(t),tyo=r(U8e," \u2014 "),ED=n(U8e,"A",{href:!0});var _dt=s(ED);ayo=r(_dt,"XLNetLMHeadModel"),_dt.forEach(t),nyo=r(U8e," (XLNet model)"),U8e.forEach(t),Q.forEach(t),syo=i(ta),G2=n(ta,"P",{});var J8e=s(G2);lyo=r(J8e,"The model is set in evaluation mode by default using "),Xce=n(J8e,"CODE",{});var udt=s(Xce);iyo=r(udt,"model.eval()"),udt.forEach(t),dyo=r(J8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zce=n(J8e,"CODE",{});var bdt=s(zce);cyo=r(bdt,"model.train()"),bdt.forEach(t),J8e.forEach(t),fyo=i(ta),T(O2.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),_je=i(f),Bi=n(f,"H2",{class:!0});var FGe=s(Bi);V2=n(FGe,"A",{id:!0,class:!0,href:!0});var vdt=s(V2);Wce=n(vdt,"SPAN",{});var Fdt=s(Wce);T(yy.$$.fragment,Fdt),Fdt.forEach(t),vdt.forEach(t),myo=i(FGe),Qce=n(FGe,"SPAN",{});var Tdt=s(Qce);gyo=r(Tdt,"AutoModelForMaskedLM"),Tdt.forEach(t),FGe.forEach(t),uje=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(Ly.$$.fragment,zs),hyo=i(zs),Ii=n(zs,"P",{});var UZ=s(Ii);pyo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CD=n(UZ,"A",{href:!0});var Mdt=s(CD);_yo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),uyo=r(UZ," class method or the "),wD=n(UZ,"A",{href:!0});var Edt=s(wD);byo=r(Edt,"from_config()"),Edt.forEach(t),vyo=r(UZ,` class
method.`),UZ.forEach(t),Fyo=i(zs),xy=n(zs,"P",{});var TGe=s(xy);Tyo=r(TGe,"This class cannot be instantiated directly using "),Hce=n(TGe,"CODE",{});var Cdt=s(Hce);Myo=r(Cdt,"__init__()"),Cdt.forEach(t),Eyo=r(TGe," (throws an error)."),TGe.forEach(t),Cyo=i(zs),st=n(zs,"DIV",{class:!0});var J0=s(st);T($y.$$.fragment,J0),wyo=i(J0),Uce=n(J0,"P",{});var wdt=s(Uce);Ayo=r(wdt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wdt.forEach(t),yyo=i(J0),Ni=n(J0,"P",{});var JZ=s(Ni);Lyo=r(JZ,`Note:
Loading a model from its configuration file does `),Jce=n(JZ,"STRONG",{});var Adt=s(Jce);xyo=r(Adt,"not"),Adt.forEach(t),$yo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=n(JZ,"A",{href:!0});var ydt=s(AD);kyo=r(ydt,"from_pretrained()"),ydt.forEach(t),Syo=r(JZ," to load the model weights."),JZ.forEach(t),Ryo=i(J0),T(X2.$$.fragment,J0),J0.forEach(t),Pyo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(ky.$$.fragment,aa),Byo=i(aa),Yce=n(aa,"P",{});var Ldt=s(Yce);Iyo=r(Ldt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ldt.forEach(t),Nyo=i(aa),ka=n(aa,"P",{});var Y0=s(ka);qyo=r(Y0,"The model class to instantiate is selected based on the "),Kce=n(Y0,"CODE",{});var xdt=s(Kce);jyo=r(xdt,"model_type"),xdt.forEach(t),Dyo=r(Y0,` property of the config object (either
passed as an argument or loaded from `),Zce=n(Y0,"CODE",{});var $dt=s(Zce);Gyo=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),Oyo=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),efe=n(Y0,"CODE",{});var kdt=s(efe);Vyo=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),Xyo=r(Y0,":"),Y0.forEach(t),zyo=i(aa),W=n(aa,"UL",{});var H=s(W);z2=n(H,"LI",{});var Y8e=s(z2);ofe=n(Y8e,"STRONG",{});var Sdt=s(ofe);Wyo=r(Sdt,"albert"),Sdt.forEach(t),Qyo=r(Y8e," \u2014 "),yD=n(Y8e,"A",{href:!0});var Rdt=s(yD);Hyo=r(Rdt,"AlbertForMaskedLM"),Rdt.forEach(t),Uyo=r(Y8e," (ALBERT model)"),Y8e.forEach(t),Jyo=i(H),W2=n(H,"LI",{});var K8e=s(W2);rfe=n(K8e,"STRONG",{});var Pdt=s(rfe);Yyo=r(Pdt,"bart"),Pdt.forEach(t),Kyo=r(K8e," \u2014 "),LD=n(K8e,"A",{href:!0});var Bdt=s(LD);Zyo=r(Bdt,"BartForConditionalGeneration"),Bdt.forEach(t),eLo=r(K8e," (BART model)"),K8e.forEach(t),oLo=i(H),Q2=n(H,"LI",{});var Z8e=s(Q2);tfe=n(Z8e,"STRONG",{});var Idt=s(tfe);rLo=r(Idt,"bert"),Idt.forEach(t),tLo=r(Z8e," \u2014 "),xD=n(Z8e,"A",{href:!0});var Ndt=s(xD);aLo=r(Ndt,"BertForMaskedLM"),Ndt.forEach(t),nLo=r(Z8e," (BERT model)"),Z8e.forEach(t),sLo=i(H),H2=n(H,"LI",{});var e9e=s(H2);afe=n(e9e,"STRONG",{});var qdt=s(afe);lLo=r(qdt,"big_bird"),qdt.forEach(t),iLo=r(e9e," \u2014 "),$D=n(e9e,"A",{href:!0});var jdt=s($D);dLo=r(jdt,"BigBirdForMaskedLM"),jdt.forEach(t),cLo=r(e9e," (BigBird model)"),e9e.forEach(t),fLo=i(H),U2=n(H,"LI",{});var o9e=s(U2);nfe=n(o9e,"STRONG",{});var Ddt=s(nfe);mLo=r(Ddt,"camembert"),Ddt.forEach(t),gLo=r(o9e," \u2014 "),kD=n(o9e,"A",{href:!0});var Gdt=s(kD);hLo=r(Gdt,"CamembertForMaskedLM"),Gdt.forEach(t),pLo=r(o9e," (CamemBERT model)"),o9e.forEach(t),_Lo=i(H),J2=n(H,"LI",{});var r9e=s(J2);sfe=n(r9e,"STRONG",{});var Odt=s(sfe);uLo=r(Odt,"convbert"),Odt.forEach(t),bLo=r(r9e," \u2014 "),SD=n(r9e,"A",{href:!0});var Vdt=s(SD);vLo=r(Vdt,"ConvBertForMaskedLM"),Vdt.forEach(t),FLo=r(r9e," (ConvBERT model)"),r9e.forEach(t),TLo=i(H),Y2=n(H,"LI",{});var t9e=s(Y2);lfe=n(t9e,"STRONG",{});var Xdt=s(lfe);MLo=r(Xdt,"data2vec-text"),Xdt.forEach(t),ELo=r(t9e," \u2014 "),RD=n(t9e,"A",{href:!0});var zdt=s(RD);CLo=r(zdt,"Data2VecTextForMaskedLM"),zdt.forEach(t),wLo=r(t9e," (Data2VecText model)"),t9e.forEach(t),ALo=i(H),K2=n(H,"LI",{});var a9e=s(K2);ife=n(a9e,"STRONG",{});var Wdt=s(ife);yLo=r(Wdt,"deberta"),Wdt.forEach(t),LLo=r(a9e," \u2014 "),PD=n(a9e,"A",{href:!0});var Qdt=s(PD);xLo=r(Qdt,"DebertaForMaskedLM"),Qdt.forEach(t),$Lo=r(a9e," (DeBERTa model)"),a9e.forEach(t),kLo=i(H),Z2=n(H,"LI",{});var n9e=s(Z2);dfe=n(n9e,"STRONG",{});var Hdt=s(dfe);SLo=r(Hdt,"deberta-v2"),Hdt.forEach(t),RLo=r(n9e," \u2014 "),BD=n(n9e,"A",{href:!0});var Udt=s(BD);PLo=r(Udt,"DebertaV2ForMaskedLM"),Udt.forEach(t),BLo=r(n9e," (DeBERTa-v2 model)"),n9e.forEach(t),ILo=i(H),e1=n(H,"LI",{});var s9e=s(e1);cfe=n(s9e,"STRONG",{});var Jdt=s(cfe);NLo=r(Jdt,"distilbert"),Jdt.forEach(t),qLo=r(s9e," \u2014 "),ID=n(s9e,"A",{href:!0});var Ydt=s(ID);jLo=r(Ydt,"DistilBertForMaskedLM"),Ydt.forEach(t),DLo=r(s9e," (DistilBERT model)"),s9e.forEach(t),GLo=i(H),o1=n(H,"LI",{});var l9e=s(o1);ffe=n(l9e,"STRONG",{});var Kdt=s(ffe);OLo=r(Kdt,"electra"),Kdt.forEach(t),VLo=r(l9e," \u2014 "),ND=n(l9e,"A",{href:!0});var Zdt=s(ND);XLo=r(Zdt,"ElectraForMaskedLM"),Zdt.forEach(t),zLo=r(l9e," (ELECTRA model)"),l9e.forEach(t),WLo=i(H),r1=n(H,"LI",{});var i9e=s(r1);mfe=n(i9e,"STRONG",{});var ect=s(mfe);QLo=r(ect,"flaubert"),ect.forEach(t),HLo=r(i9e," \u2014 "),qD=n(i9e,"A",{href:!0});var oct=s(qD);ULo=r(oct,"FlaubertWithLMHeadModel"),oct.forEach(t),JLo=r(i9e," (FlauBERT model)"),i9e.forEach(t),YLo=i(H),t1=n(H,"LI",{});var d9e=s(t1);gfe=n(d9e,"STRONG",{});var rct=s(gfe);KLo=r(rct,"fnet"),rct.forEach(t),ZLo=r(d9e," \u2014 "),jD=n(d9e,"A",{href:!0});var tct=s(jD);e8o=r(tct,"FNetForMaskedLM"),tct.forEach(t),o8o=r(d9e," (FNet model)"),d9e.forEach(t),r8o=i(H),a1=n(H,"LI",{});var c9e=s(a1);hfe=n(c9e,"STRONG",{});var act=s(hfe);t8o=r(act,"funnel"),act.forEach(t),a8o=r(c9e," \u2014 "),DD=n(c9e,"A",{href:!0});var nct=s(DD);n8o=r(nct,"FunnelForMaskedLM"),nct.forEach(t),s8o=r(c9e," (Funnel Transformer model)"),c9e.forEach(t),l8o=i(H),n1=n(H,"LI",{});var f9e=s(n1);pfe=n(f9e,"STRONG",{});var sct=s(pfe);i8o=r(sct,"ibert"),sct.forEach(t),d8o=r(f9e," \u2014 "),GD=n(f9e,"A",{href:!0});var lct=s(GD);c8o=r(lct,"IBertForMaskedLM"),lct.forEach(t),f8o=r(f9e," (I-BERT model)"),f9e.forEach(t),m8o=i(H),s1=n(H,"LI",{});var m9e=s(s1);_fe=n(m9e,"STRONG",{});var ict=s(_fe);g8o=r(ict,"layoutlm"),ict.forEach(t),h8o=r(m9e," \u2014 "),OD=n(m9e,"A",{href:!0});var dct=s(OD);p8o=r(dct,"LayoutLMForMaskedLM"),dct.forEach(t),_8o=r(m9e," (LayoutLM model)"),m9e.forEach(t),u8o=i(H),l1=n(H,"LI",{});var g9e=s(l1);ufe=n(g9e,"STRONG",{});var cct=s(ufe);b8o=r(cct,"longformer"),cct.forEach(t),v8o=r(g9e," \u2014 "),VD=n(g9e,"A",{href:!0});var fct=s(VD);F8o=r(fct,"LongformerForMaskedLM"),fct.forEach(t),T8o=r(g9e," (Longformer model)"),g9e.forEach(t),M8o=i(H),i1=n(H,"LI",{});var h9e=s(i1);bfe=n(h9e,"STRONG",{});var mct=s(bfe);E8o=r(mct,"luke"),mct.forEach(t),C8o=r(h9e," \u2014 "),XD=n(h9e,"A",{href:!0});var gct=s(XD);w8o=r(gct,"LukeForMaskedLM"),gct.forEach(t),A8o=r(h9e," (LUKE model)"),h9e.forEach(t),y8o=i(H),d1=n(H,"LI",{});var p9e=s(d1);vfe=n(p9e,"STRONG",{});var hct=s(vfe);L8o=r(hct,"mbart"),hct.forEach(t),x8o=r(p9e," \u2014 "),zD=n(p9e,"A",{href:!0});var pct=s(zD);$8o=r(pct,"MBartForConditionalGeneration"),pct.forEach(t),k8o=r(p9e," (mBART model)"),p9e.forEach(t),S8o=i(H),c1=n(H,"LI",{});var _9e=s(c1);Ffe=n(_9e,"STRONG",{});var _ct=s(Ffe);R8o=r(_ct,"megatron-bert"),_ct.forEach(t),P8o=r(_9e," \u2014 "),WD=n(_9e,"A",{href:!0});var uct=s(WD);B8o=r(uct,"MegatronBertForMaskedLM"),uct.forEach(t),I8o=r(_9e," (Megatron-BERT model)"),_9e.forEach(t),N8o=i(H),f1=n(H,"LI",{});var u9e=s(f1);Tfe=n(u9e,"STRONG",{});var bct=s(Tfe);q8o=r(bct,"mobilebert"),bct.forEach(t),j8o=r(u9e," \u2014 "),QD=n(u9e,"A",{href:!0});var vct=s(QD);D8o=r(vct,"MobileBertForMaskedLM"),vct.forEach(t),G8o=r(u9e," (MobileBERT model)"),u9e.forEach(t),O8o=i(H),m1=n(H,"LI",{});var b9e=s(m1);Mfe=n(b9e,"STRONG",{});var Fct=s(Mfe);V8o=r(Fct,"mpnet"),Fct.forEach(t),X8o=r(b9e," \u2014 "),HD=n(b9e,"A",{href:!0});var Tct=s(HD);z8o=r(Tct,"MPNetForMaskedLM"),Tct.forEach(t),W8o=r(b9e," (MPNet model)"),b9e.forEach(t),Q8o=i(H),g1=n(H,"LI",{});var v9e=s(g1);Efe=n(v9e,"STRONG",{});var Mct=s(Efe);H8o=r(Mct,"nystromformer"),Mct.forEach(t),U8o=r(v9e," \u2014 "),UD=n(v9e,"A",{href:!0});var Ect=s(UD);J8o=r(Ect,"NystromformerForMaskedLM"),Ect.forEach(t),Y8o=r(v9e," (Nystr\xF6mformer model)"),v9e.forEach(t),K8o=i(H),h1=n(H,"LI",{});var F9e=s(h1);Cfe=n(F9e,"STRONG",{});var Cct=s(Cfe);Z8o=r(Cct,"perceiver"),Cct.forEach(t),e9o=r(F9e," \u2014 "),JD=n(F9e,"A",{href:!0});var wct=s(JD);o9o=r(wct,"PerceiverForMaskedLM"),wct.forEach(t),r9o=r(F9e," (Perceiver model)"),F9e.forEach(t),t9o=i(H),p1=n(H,"LI",{});var T9e=s(p1);wfe=n(T9e,"STRONG",{});var Act=s(wfe);a9o=r(Act,"qdqbert"),Act.forEach(t),n9o=r(T9e," \u2014 "),YD=n(T9e,"A",{href:!0});var yct=s(YD);s9o=r(yct,"QDQBertForMaskedLM"),yct.forEach(t),l9o=r(T9e," (QDQBert model)"),T9e.forEach(t),i9o=i(H),_1=n(H,"LI",{});var M9e=s(_1);Afe=n(M9e,"STRONG",{});var Lct=s(Afe);d9o=r(Lct,"reformer"),Lct.forEach(t),c9o=r(M9e," \u2014 "),KD=n(M9e,"A",{href:!0});var xct=s(KD);f9o=r(xct,"ReformerForMaskedLM"),xct.forEach(t),m9o=r(M9e," (Reformer model)"),M9e.forEach(t),g9o=i(H),u1=n(H,"LI",{});var E9e=s(u1);yfe=n(E9e,"STRONG",{});var $ct=s(yfe);h9o=r($ct,"rembert"),$ct.forEach(t),p9o=r(E9e," \u2014 "),ZD=n(E9e,"A",{href:!0});var kct=s(ZD);_9o=r(kct,"RemBertForMaskedLM"),kct.forEach(t),u9o=r(E9e," (RemBERT model)"),E9e.forEach(t),b9o=i(H),b1=n(H,"LI",{});var C9e=s(b1);Lfe=n(C9e,"STRONG",{});var Sct=s(Lfe);v9o=r(Sct,"roberta"),Sct.forEach(t),F9o=r(C9e," \u2014 "),eG=n(C9e,"A",{href:!0});var Rct=s(eG);T9o=r(Rct,"RobertaForMaskedLM"),Rct.forEach(t),M9o=r(C9e," (RoBERTa model)"),C9e.forEach(t),E9o=i(H),v1=n(H,"LI",{});var w9e=s(v1);xfe=n(w9e,"STRONG",{});var Pct=s(xfe);C9o=r(Pct,"roformer"),Pct.forEach(t),w9o=r(w9e," \u2014 "),oG=n(w9e,"A",{href:!0});var Bct=s(oG);A9o=r(Bct,"RoFormerForMaskedLM"),Bct.forEach(t),y9o=r(w9e," (RoFormer model)"),w9e.forEach(t),L9o=i(H),F1=n(H,"LI",{});var A9e=s(F1);$fe=n(A9e,"STRONG",{});var Ict=s($fe);x9o=r(Ict,"squeezebert"),Ict.forEach(t),$9o=r(A9e," \u2014 "),rG=n(A9e,"A",{href:!0});var Nct=s(rG);k9o=r(Nct,"SqueezeBertForMaskedLM"),Nct.forEach(t),S9o=r(A9e," (SqueezeBERT model)"),A9e.forEach(t),R9o=i(H),T1=n(H,"LI",{});var y9e=s(T1);kfe=n(y9e,"STRONG",{});var qct=s(kfe);P9o=r(qct,"tapas"),qct.forEach(t),B9o=r(y9e," \u2014 "),tG=n(y9e,"A",{href:!0});var jct=s(tG);I9o=r(jct,"TapasForMaskedLM"),jct.forEach(t),N9o=r(y9e," (TAPAS model)"),y9e.forEach(t),q9o=i(H),M1=n(H,"LI",{});var L9e=s(M1);Sfe=n(L9e,"STRONG",{});var Dct=s(Sfe);j9o=r(Dct,"wav2vec2"),Dct.forEach(t),D9o=r(L9e," \u2014 "),Rfe=n(L9e,"CODE",{});var Gct=s(Rfe);G9o=r(Gct,"Wav2Vec2ForMaskedLM"),Gct.forEach(t),O9o=r(L9e," (Wav2Vec2 model)"),L9e.forEach(t),V9o=i(H),E1=n(H,"LI",{});var x9e=s(E1);Pfe=n(x9e,"STRONG",{});var Oct=s(Pfe);X9o=r(Oct,"xlm"),Oct.forEach(t),z9o=r(x9e," \u2014 "),aG=n(x9e,"A",{href:!0});var Vct=s(aG);W9o=r(Vct,"XLMWithLMHeadModel"),Vct.forEach(t),Q9o=r(x9e," (XLM model)"),x9e.forEach(t),H9o=i(H),C1=n(H,"LI",{});var $9e=s(C1);Bfe=n($9e,"STRONG",{});var Xct=s(Bfe);U9o=r(Xct,"xlm-roberta"),Xct.forEach(t),J9o=r($9e," \u2014 "),nG=n($9e,"A",{href:!0});var zct=s(nG);Y9o=r(zct,"XLMRobertaForMaskedLM"),zct.forEach(t),K9o=r($9e," (XLM-RoBERTa model)"),$9e.forEach(t),Z9o=i(H),w1=n(H,"LI",{});var k9e=s(w1);Ife=n(k9e,"STRONG",{});var Wct=s(Ife);exo=r(Wct,"xlm-roberta-xl"),Wct.forEach(t),oxo=r(k9e," \u2014 "),sG=n(k9e,"A",{href:!0});var Qct=s(sG);rxo=r(Qct,"XLMRobertaXLForMaskedLM"),Qct.forEach(t),txo=r(k9e," (XLM-RoBERTa-XL model)"),k9e.forEach(t),axo=i(H),A1=n(H,"LI",{});var S9e=s(A1);Nfe=n(S9e,"STRONG",{});var Hct=s(Nfe);nxo=r(Hct,"yoso"),Hct.forEach(t),sxo=r(S9e," \u2014 "),lG=n(S9e,"A",{href:!0});var Uct=s(lG);lxo=r(Uct,"YosoForMaskedLM"),Uct.forEach(t),ixo=r(S9e," (YOSO model)"),S9e.forEach(t),H.forEach(t),dxo=i(aa),y1=n(aa,"P",{});var R9e=s(y1);cxo=r(R9e,"The model is set in evaluation mode by default using "),qfe=n(R9e,"CODE",{});var Jct=s(qfe);fxo=r(Jct,"model.eval()"),Jct.forEach(t),mxo=r(R9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=n(R9e,"CODE",{});var Yct=s(jfe);gxo=r(Yct,"model.train()"),Yct.forEach(t),R9e.forEach(t),hxo=i(aa),T(L1.$$.fragment,aa),aa.forEach(t),zs.forEach(t),bje=i(f),qi=n(f,"H2",{class:!0});var MGe=s(qi);x1=n(MGe,"A",{id:!0,class:!0,href:!0});var Kct=s(x1);Dfe=n(Kct,"SPAN",{});var Zct=s(Dfe);T(Sy.$$.fragment,Zct),Zct.forEach(t),Kct.forEach(t),pxo=i(MGe),Gfe=n(MGe,"SPAN",{});var eft=s(Gfe);_xo=r(eft,"AutoModelForSeq2SeqLM"),eft.forEach(t),MGe.forEach(t),vje=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(Ry.$$.fragment,Ws),uxo=i(Ws),ji=n(Ws,"P",{});var YZ=s(ji);bxo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iG=n(YZ,"A",{href:!0});var oft=s(iG);vxo=r(oft,"from_pretrained()"),oft.forEach(t),Fxo=r(YZ," class method or the "),dG=n(YZ,"A",{href:!0});var rft=s(dG);Txo=r(rft,"from_config()"),rft.forEach(t),Mxo=r(YZ,` class
method.`),YZ.forEach(t),Exo=i(Ws),Py=n(Ws,"P",{});var EGe=s(Py);Cxo=r(EGe,"This class cannot be instantiated directly using "),Ofe=n(EGe,"CODE",{});var tft=s(Ofe);wxo=r(tft,"__init__()"),tft.forEach(t),Axo=r(EGe," (throws an error)."),EGe.forEach(t),yxo=i(Ws),lt=n(Ws,"DIV",{class:!0});var K0=s(lt);T(By.$$.fragment,K0),Lxo=i(K0),Vfe=n(K0,"P",{});var aft=s(Vfe);xxo=r(aft,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aft.forEach(t),$xo=i(K0),Di=n(K0,"P",{});var KZ=s(Di);kxo=r(KZ,`Note:
Loading a model from its configuration file does `),Xfe=n(KZ,"STRONG",{});var nft=s(Xfe);Sxo=r(nft,"not"),nft.forEach(t),Rxo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=n(KZ,"A",{href:!0});var sft=s(cG);Pxo=r(sft,"from_pretrained()"),sft.forEach(t),Bxo=r(KZ," to load the model weights."),KZ.forEach(t),Ixo=i(K0),T($1.$$.fragment,K0),K0.forEach(t),Nxo=i(Ws),eo=n(Ws,"DIV",{class:!0});var na=s(eo);T(Iy.$$.fragment,na),qxo=i(na),zfe=n(na,"P",{});var lft=s(zfe);jxo=r(lft,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lft.forEach(t),Dxo=i(na),Sa=n(na,"P",{});var Z0=s(Sa);Gxo=r(Z0,"The model class to instantiate is selected based on the "),Wfe=n(Z0,"CODE",{});var ift=s(Wfe);Oxo=r(ift,"model_type"),ift.forEach(t),Vxo=r(Z0,` property of the config object (either
passed as an argument or loaded from `),Qfe=n(Z0,"CODE",{});var dft=s(Qfe);Xxo=r(dft,"pretrained_model_name_or_path"),dft.forEach(t),zxo=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=n(Z0,"CODE",{});var cft=s(Hfe);Wxo=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),Qxo=r(Z0,":"),Z0.forEach(t),Hxo=i(na),_e=n(na,"UL",{});var Fe=s(_e);k1=n(Fe,"LI",{});var P9e=s(k1);Ufe=n(P9e,"STRONG",{});var fft=s(Ufe);Uxo=r(fft,"bart"),fft.forEach(t),Jxo=r(P9e," \u2014 "),fG=n(P9e,"A",{href:!0});var mft=s(fG);Yxo=r(mft,"BartForConditionalGeneration"),mft.forEach(t),Kxo=r(P9e," (BART model)"),P9e.forEach(t),Zxo=i(Fe),S1=n(Fe,"LI",{});var B9e=s(S1);Jfe=n(B9e,"STRONG",{});var gft=s(Jfe);e$o=r(gft,"bigbird_pegasus"),gft.forEach(t),o$o=r(B9e," \u2014 "),mG=n(B9e,"A",{href:!0});var hft=s(mG);r$o=r(hft,"BigBirdPegasusForConditionalGeneration"),hft.forEach(t),t$o=r(B9e," (BigBird-Pegasus model)"),B9e.forEach(t),a$o=i(Fe),R1=n(Fe,"LI",{});var I9e=s(R1);Yfe=n(I9e,"STRONG",{});var pft=s(Yfe);n$o=r(pft,"blenderbot"),pft.forEach(t),s$o=r(I9e," \u2014 "),gG=n(I9e,"A",{href:!0});var _ft=s(gG);l$o=r(_ft,"BlenderbotForConditionalGeneration"),_ft.forEach(t),i$o=r(I9e," (Blenderbot model)"),I9e.forEach(t),d$o=i(Fe),P1=n(Fe,"LI",{});var N9e=s(P1);Kfe=n(N9e,"STRONG",{});var uft=s(Kfe);c$o=r(uft,"blenderbot-small"),uft.forEach(t),f$o=r(N9e," \u2014 "),hG=n(N9e,"A",{href:!0});var bft=s(hG);m$o=r(bft,"BlenderbotSmallForConditionalGeneration"),bft.forEach(t),g$o=r(N9e," (BlenderbotSmall model)"),N9e.forEach(t),h$o=i(Fe),B1=n(Fe,"LI",{});var q9e=s(B1);Zfe=n(q9e,"STRONG",{});var vft=s(Zfe);p$o=r(vft,"encoder-decoder"),vft.forEach(t),_$o=r(q9e," \u2014 "),pG=n(q9e,"A",{href:!0});var Fft=s(pG);u$o=r(Fft,"EncoderDecoderModel"),Fft.forEach(t),b$o=r(q9e," (Encoder decoder model)"),q9e.forEach(t),v$o=i(Fe),I1=n(Fe,"LI",{});var j9e=s(I1);eme=n(j9e,"STRONG",{});var Tft=s(eme);F$o=r(Tft,"fsmt"),Tft.forEach(t),T$o=r(j9e," \u2014 "),_G=n(j9e,"A",{href:!0});var Mft=s(_G);M$o=r(Mft,"FSMTForConditionalGeneration"),Mft.forEach(t),E$o=r(j9e," (FairSeq Machine-Translation model)"),j9e.forEach(t),C$o=i(Fe),N1=n(Fe,"LI",{});var D9e=s(N1);ome=n(D9e,"STRONG",{});var Eft=s(ome);w$o=r(Eft,"led"),Eft.forEach(t),A$o=r(D9e," \u2014 "),uG=n(D9e,"A",{href:!0});var Cft=s(uG);y$o=r(Cft,"LEDForConditionalGeneration"),Cft.forEach(t),L$o=r(D9e," (LED model)"),D9e.forEach(t),x$o=i(Fe),q1=n(Fe,"LI",{});var G9e=s(q1);rme=n(G9e,"STRONG",{});var wft=s(rme);$$o=r(wft,"m2m_100"),wft.forEach(t),k$o=r(G9e," \u2014 "),bG=n(G9e,"A",{href:!0});var Aft=s(bG);S$o=r(Aft,"M2M100ForConditionalGeneration"),Aft.forEach(t),R$o=r(G9e," (M2M100 model)"),G9e.forEach(t),P$o=i(Fe),j1=n(Fe,"LI",{});var O9e=s(j1);tme=n(O9e,"STRONG",{});var yft=s(tme);B$o=r(yft,"marian"),yft.forEach(t),I$o=r(O9e," \u2014 "),vG=n(O9e,"A",{href:!0});var Lft=s(vG);N$o=r(Lft,"MarianMTModel"),Lft.forEach(t),q$o=r(O9e," (Marian model)"),O9e.forEach(t),j$o=i(Fe),D1=n(Fe,"LI",{});var V9e=s(D1);ame=n(V9e,"STRONG",{});var xft=s(ame);D$o=r(xft,"mbart"),xft.forEach(t),G$o=r(V9e," \u2014 "),FG=n(V9e,"A",{href:!0});var $ft=s(FG);O$o=r($ft,"MBartForConditionalGeneration"),$ft.forEach(t),V$o=r(V9e," (mBART model)"),V9e.forEach(t),X$o=i(Fe),G1=n(Fe,"LI",{});var X9e=s(G1);nme=n(X9e,"STRONG",{});var kft=s(nme);z$o=r(kft,"mt5"),kft.forEach(t),W$o=r(X9e," \u2014 "),TG=n(X9e,"A",{href:!0});var Sft=s(TG);Q$o=r(Sft,"MT5ForConditionalGeneration"),Sft.forEach(t),H$o=r(X9e," (MT5 model)"),X9e.forEach(t),U$o=i(Fe),O1=n(Fe,"LI",{});var z9e=s(O1);sme=n(z9e,"STRONG",{});var Rft=s(sme);J$o=r(Rft,"pegasus"),Rft.forEach(t),Y$o=r(z9e," \u2014 "),MG=n(z9e,"A",{href:!0});var Pft=s(MG);K$o=r(Pft,"PegasusForConditionalGeneration"),Pft.forEach(t),Z$o=r(z9e," (Pegasus model)"),z9e.forEach(t),eko=i(Fe),V1=n(Fe,"LI",{});var W9e=s(V1);lme=n(W9e,"STRONG",{});var Bft=s(lme);oko=r(Bft,"plbart"),Bft.forEach(t),rko=r(W9e," \u2014 "),EG=n(W9e,"A",{href:!0});var Ift=s(EG);tko=r(Ift,"PLBartForConditionalGeneration"),Ift.forEach(t),ako=r(W9e," (PLBart model)"),W9e.forEach(t),nko=i(Fe),X1=n(Fe,"LI",{});var Q9e=s(X1);ime=n(Q9e,"STRONG",{});var Nft=s(ime);sko=r(Nft,"prophetnet"),Nft.forEach(t),lko=r(Q9e," \u2014 "),CG=n(Q9e,"A",{href:!0});var qft=s(CG);iko=r(qft,"ProphetNetForConditionalGeneration"),qft.forEach(t),dko=r(Q9e," (ProphetNet model)"),Q9e.forEach(t),cko=i(Fe),z1=n(Fe,"LI",{});var H9e=s(z1);dme=n(H9e,"STRONG",{});var jft=s(dme);fko=r(jft,"t5"),jft.forEach(t),mko=r(H9e," \u2014 "),wG=n(H9e,"A",{href:!0});var Dft=s(wG);gko=r(Dft,"T5ForConditionalGeneration"),Dft.forEach(t),hko=r(H9e," (T5 model)"),H9e.forEach(t),pko=i(Fe),W1=n(Fe,"LI",{});var U9e=s(W1);cme=n(U9e,"STRONG",{});var Gft=s(cme);_ko=r(Gft,"xlm-prophetnet"),Gft.forEach(t),uko=r(U9e," \u2014 "),AG=n(U9e,"A",{href:!0});var Oft=s(AG);bko=r(Oft,"XLMProphetNetForConditionalGeneration"),Oft.forEach(t),vko=r(U9e," (XLM-ProphetNet model)"),U9e.forEach(t),Fe.forEach(t),Fko=i(na),Q1=n(na,"P",{});var J9e=s(Q1);Tko=r(J9e,"The model is set in evaluation mode by default using "),fme=n(J9e,"CODE",{});var Vft=s(fme);Mko=r(Vft,"model.eval()"),Vft.forEach(t),Eko=r(J9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=n(J9e,"CODE",{});var Xft=s(mme);Cko=r(Xft,"model.train()"),Xft.forEach(t),J9e.forEach(t),wko=i(na),T(H1.$$.fragment,na),na.forEach(t),Ws.forEach(t),Fje=i(f),Gi=n(f,"H2",{class:!0});var CGe=s(Gi);U1=n(CGe,"A",{id:!0,class:!0,href:!0});var zft=s(U1);gme=n(zft,"SPAN",{});var Wft=s(gme);T(Ny.$$.fragment,Wft),Wft.forEach(t),zft.forEach(t),Ako=i(CGe),hme=n(CGe,"SPAN",{});var Qft=s(hme);yko=r(Qft,"AutoModelForSequenceClassification"),Qft.forEach(t),CGe.forEach(t),Tje=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(qy.$$.fragment,Qs),Lko=i(Qs),Oi=n(Qs,"P",{});var ZZ=s(Oi);xko=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yG=n(ZZ,"A",{href:!0});var Hft=s(yG);$ko=r(Hft,"from_pretrained()"),Hft.forEach(t),kko=r(ZZ," class method or the "),LG=n(ZZ,"A",{href:!0});var Uft=s(LG);Sko=r(Uft,"from_config()"),Uft.forEach(t),Rko=r(ZZ,` class
method.`),ZZ.forEach(t),Pko=i(Qs),jy=n(Qs,"P",{});var wGe=s(jy);Bko=r(wGe,"This class cannot be instantiated directly using "),pme=n(wGe,"CODE",{});var Jft=s(pme);Iko=r(Jft,"__init__()"),Jft.forEach(t),Nko=r(wGe," (throws an error)."),wGe.forEach(t),qko=i(Qs),it=n(Qs,"DIV",{class:!0});var ew=s(it);T(Dy.$$.fragment,ew),jko=i(ew),_me=n(ew,"P",{});var Yft=s(_me);Dko=r(Yft,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Yft.forEach(t),Gko=i(ew),Vi=n(ew,"P",{});var eee=s(Vi);Oko=r(eee,`Note:
Loading a model from its configuration file does `),ume=n(eee,"STRONG",{});var Kft=s(ume);Vko=r(Kft,"not"),Kft.forEach(t),Xko=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(eee,"A",{href:!0});var Zft=s(xG);zko=r(Zft,"from_pretrained()"),Zft.forEach(t),Wko=r(eee," to load the model weights."),eee.forEach(t),Qko=i(ew),T(J1.$$.fragment,ew),ew.forEach(t),Hko=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(Gy.$$.fragment,sa),Uko=i(sa),bme=n(sa,"P",{});var emt=s(bme);Jko=r(emt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),emt.forEach(t),Yko=i(sa),Ra=n(sa,"P",{});var ow=s(Ra);Kko=r(ow,"The model class to instantiate is selected based on the "),vme=n(ow,"CODE",{});var omt=s(vme);Zko=r(omt,"model_type"),omt.forEach(t),eSo=r(ow,` property of the config object (either
passed as an argument or loaded from `),Fme=n(ow,"CODE",{});var rmt=s(Fme);oSo=r(rmt,"pretrained_model_name_or_path"),rmt.forEach(t),rSo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=n(ow,"CODE",{});var tmt=s(Tme);tSo=r(tmt,"pretrained_model_name_or_path"),tmt.forEach(t),aSo=r(ow,":"),ow.forEach(t),nSo=i(sa),N=n(sa,"UL",{});var j=s(N);Y1=n(j,"LI",{});var Y9e=s(Y1);Mme=n(Y9e,"STRONG",{});var amt=s(Mme);sSo=r(amt,"albert"),amt.forEach(t),lSo=r(Y9e," \u2014 "),$G=n(Y9e,"A",{href:!0});var nmt=s($G);iSo=r(nmt,"AlbertForSequenceClassification"),nmt.forEach(t),dSo=r(Y9e," (ALBERT model)"),Y9e.forEach(t),cSo=i(j),K1=n(j,"LI",{});var K9e=s(K1);Eme=n(K9e,"STRONG",{});var smt=s(Eme);fSo=r(smt,"bart"),smt.forEach(t),mSo=r(K9e," \u2014 "),kG=n(K9e,"A",{href:!0});var lmt=s(kG);gSo=r(lmt,"BartForSequenceClassification"),lmt.forEach(t),hSo=r(K9e," (BART model)"),K9e.forEach(t),pSo=i(j),Z1=n(j,"LI",{});var Z9e=s(Z1);Cme=n(Z9e,"STRONG",{});var imt=s(Cme);_So=r(imt,"bert"),imt.forEach(t),uSo=r(Z9e," \u2014 "),SG=n(Z9e,"A",{href:!0});var dmt=s(SG);bSo=r(dmt,"BertForSequenceClassification"),dmt.forEach(t),vSo=r(Z9e," (BERT model)"),Z9e.forEach(t),FSo=i(j),eb=n(j,"LI",{});var exe=s(eb);wme=n(exe,"STRONG",{});var cmt=s(wme);TSo=r(cmt,"big_bird"),cmt.forEach(t),MSo=r(exe," \u2014 "),RG=n(exe,"A",{href:!0});var fmt=s(RG);ESo=r(fmt,"BigBirdForSequenceClassification"),fmt.forEach(t),CSo=r(exe," (BigBird model)"),exe.forEach(t),wSo=i(j),ob=n(j,"LI",{});var oxe=s(ob);Ame=n(oxe,"STRONG",{});var mmt=s(Ame);ASo=r(mmt,"bigbird_pegasus"),mmt.forEach(t),ySo=r(oxe," \u2014 "),PG=n(oxe,"A",{href:!0});var gmt=s(PG);LSo=r(gmt,"BigBirdPegasusForSequenceClassification"),gmt.forEach(t),xSo=r(oxe," (BigBird-Pegasus model)"),oxe.forEach(t),$So=i(j),rb=n(j,"LI",{});var rxe=s(rb);yme=n(rxe,"STRONG",{});var hmt=s(yme);kSo=r(hmt,"camembert"),hmt.forEach(t),SSo=r(rxe," \u2014 "),BG=n(rxe,"A",{href:!0});var pmt=s(BG);RSo=r(pmt,"CamembertForSequenceClassification"),pmt.forEach(t),PSo=r(rxe," (CamemBERT model)"),rxe.forEach(t),BSo=i(j),tb=n(j,"LI",{});var txe=s(tb);Lme=n(txe,"STRONG",{});var _mt=s(Lme);ISo=r(_mt,"canine"),_mt.forEach(t),NSo=r(txe," \u2014 "),IG=n(txe,"A",{href:!0});var umt=s(IG);qSo=r(umt,"CanineForSequenceClassification"),umt.forEach(t),jSo=r(txe," (CANINE model)"),txe.forEach(t),DSo=i(j),ab=n(j,"LI",{});var axe=s(ab);xme=n(axe,"STRONG",{});var bmt=s(xme);GSo=r(bmt,"convbert"),bmt.forEach(t),OSo=r(axe," \u2014 "),NG=n(axe,"A",{href:!0});var vmt=s(NG);VSo=r(vmt,"ConvBertForSequenceClassification"),vmt.forEach(t),XSo=r(axe," (ConvBERT model)"),axe.forEach(t),zSo=i(j),nb=n(j,"LI",{});var nxe=s(nb);$me=n(nxe,"STRONG",{});var Fmt=s($me);WSo=r(Fmt,"ctrl"),Fmt.forEach(t),QSo=r(nxe," \u2014 "),qG=n(nxe,"A",{href:!0});var Tmt=s(qG);HSo=r(Tmt,"CTRLForSequenceClassification"),Tmt.forEach(t),USo=r(nxe," (CTRL model)"),nxe.forEach(t),JSo=i(j),sb=n(j,"LI",{});var sxe=s(sb);kme=n(sxe,"STRONG",{});var Mmt=s(kme);YSo=r(Mmt,"data2vec-text"),Mmt.forEach(t),KSo=r(sxe," \u2014 "),jG=n(sxe,"A",{href:!0});var Emt=s(jG);ZSo=r(Emt,"Data2VecTextForSequenceClassification"),Emt.forEach(t),eRo=r(sxe," (Data2VecText model)"),sxe.forEach(t),oRo=i(j),lb=n(j,"LI",{});var lxe=s(lb);Sme=n(lxe,"STRONG",{});var Cmt=s(Sme);rRo=r(Cmt,"deberta"),Cmt.forEach(t),tRo=r(lxe," \u2014 "),DG=n(lxe,"A",{href:!0});var wmt=s(DG);aRo=r(wmt,"DebertaForSequenceClassification"),wmt.forEach(t),nRo=r(lxe," (DeBERTa model)"),lxe.forEach(t),sRo=i(j),ib=n(j,"LI",{});var ixe=s(ib);Rme=n(ixe,"STRONG",{});var Amt=s(Rme);lRo=r(Amt,"deberta-v2"),Amt.forEach(t),iRo=r(ixe," \u2014 "),GG=n(ixe,"A",{href:!0});var ymt=s(GG);dRo=r(ymt,"DebertaV2ForSequenceClassification"),ymt.forEach(t),cRo=r(ixe," (DeBERTa-v2 model)"),ixe.forEach(t),fRo=i(j),db=n(j,"LI",{});var dxe=s(db);Pme=n(dxe,"STRONG",{});var Lmt=s(Pme);mRo=r(Lmt,"distilbert"),Lmt.forEach(t),gRo=r(dxe," \u2014 "),OG=n(dxe,"A",{href:!0});var xmt=s(OG);hRo=r(xmt,"DistilBertForSequenceClassification"),xmt.forEach(t),pRo=r(dxe," (DistilBERT model)"),dxe.forEach(t),_Ro=i(j),cb=n(j,"LI",{});var cxe=s(cb);Bme=n(cxe,"STRONG",{});var $mt=s(Bme);uRo=r($mt,"electra"),$mt.forEach(t),bRo=r(cxe," \u2014 "),VG=n(cxe,"A",{href:!0});var kmt=s(VG);vRo=r(kmt,"ElectraForSequenceClassification"),kmt.forEach(t),FRo=r(cxe," (ELECTRA model)"),cxe.forEach(t),TRo=i(j),fb=n(j,"LI",{});var fxe=s(fb);Ime=n(fxe,"STRONG",{});var Smt=s(Ime);MRo=r(Smt,"flaubert"),Smt.forEach(t),ERo=r(fxe," \u2014 "),XG=n(fxe,"A",{href:!0});var Rmt=s(XG);CRo=r(Rmt,"FlaubertForSequenceClassification"),Rmt.forEach(t),wRo=r(fxe," (FlauBERT model)"),fxe.forEach(t),ARo=i(j),mb=n(j,"LI",{});var mxe=s(mb);Nme=n(mxe,"STRONG",{});var Pmt=s(Nme);yRo=r(Pmt,"fnet"),Pmt.forEach(t),LRo=r(mxe," \u2014 "),zG=n(mxe,"A",{href:!0});var Bmt=s(zG);xRo=r(Bmt,"FNetForSequenceClassification"),Bmt.forEach(t),$Ro=r(mxe," (FNet model)"),mxe.forEach(t),kRo=i(j),gb=n(j,"LI",{});var gxe=s(gb);qme=n(gxe,"STRONG",{});var Imt=s(qme);SRo=r(Imt,"funnel"),Imt.forEach(t),RRo=r(gxe," \u2014 "),WG=n(gxe,"A",{href:!0});var Nmt=s(WG);PRo=r(Nmt,"FunnelForSequenceClassification"),Nmt.forEach(t),BRo=r(gxe," (Funnel Transformer model)"),gxe.forEach(t),IRo=i(j),hb=n(j,"LI",{});var hxe=s(hb);jme=n(hxe,"STRONG",{});var qmt=s(jme);NRo=r(qmt,"gpt2"),qmt.forEach(t),qRo=r(hxe," \u2014 "),QG=n(hxe,"A",{href:!0});var jmt=s(QG);jRo=r(jmt,"GPT2ForSequenceClassification"),jmt.forEach(t),DRo=r(hxe," (OpenAI GPT-2 model)"),hxe.forEach(t),GRo=i(j),pb=n(j,"LI",{});var pxe=s(pb);Dme=n(pxe,"STRONG",{});var Dmt=s(Dme);ORo=r(Dmt,"gpt_neo"),Dmt.forEach(t),VRo=r(pxe," \u2014 "),HG=n(pxe,"A",{href:!0});var Gmt=s(HG);XRo=r(Gmt,"GPTNeoForSequenceClassification"),Gmt.forEach(t),zRo=r(pxe," (GPT Neo model)"),pxe.forEach(t),WRo=i(j),_b=n(j,"LI",{});var _xe=s(_b);Gme=n(_xe,"STRONG",{});var Omt=s(Gme);QRo=r(Omt,"gptj"),Omt.forEach(t),HRo=r(_xe," \u2014 "),UG=n(_xe,"A",{href:!0});var Vmt=s(UG);URo=r(Vmt,"GPTJForSequenceClassification"),Vmt.forEach(t),JRo=r(_xe," (GPT-J model)"),_xe.forEach(t),YRo=i(j),ub=n(j,"LI",{});var uxe=s(ub);Ome=n(uxe,"STRONG",{});var Xmt=s(Ome);KRo=r(Xmt,"ibert"),Xmt.forEach(t),ZRo=r(uxe," \u2014 "),JG=n(uxe,"A",{href:!0});var zmt=s(JG);ePo=r(zmt,"IBertForSequenceClassification"),zmt.forEach(t),oPo=r(uxe," (I-BERT model)"),uxe.forEach(t),rPo=i(j),bb=n(j,"LI",{});var bxe=s(bb);Vme=n(bxe,"STRONG",{});var Wmt=s(Vme);tPo=r(Wmt,"layoutlm"),Wmt.forEach(t),aPo=r(bxe," \u2014 "),YG=n(bxe,"A",{href:!0});var Qmt=s(YG);nPo=r(Qmt,"LayoutLMForSequenceClassification"),Qmt.forEach(t),sPo=r(bxe," (LayoutLM model)"),bxe.forEach(t),lPo=i(j),vb=n(j,"LI",{});var vxe=s(vb);Xme=n(vxe,"STRONG",{});var Hmt=s(Xme);iPo=r(Hmt,"layoutlmv2"),Hmt.forEach(t),dPo=r(vxe," \u2014 "),KG=n(vxe,"A",{href:!0});var Umt=s(KG);cPo=r(Umt,"LayoutLMv2ForSequenceClassification"),Umt.forEach(t),fPo=r(vxe," (LayoutLMv2 model)"),vxe.forEach(t),mPo=i(j),Fb=n(j,"LI",{});var Fxe=s(Fb);zme=n(Fxe,"STRONG",{});var Jmt=s(zme);gPo=r(Jmt,"layoutlmv3"),Jmt.forEach(t),hPo=r(Fxe," \u2014 "),ZG=n(Fxe,"A",{href:!0});var Ymt=s(ZG);pPo=r(Ymt,"LayoutLMv3ForSequenceClassification"),Ymt.forEach(t),_Po=r(Fxe," (LayoutLMv3 model)"),Fxe.forEach(t),uPo=i(j),Tb=n(j,"LI",{});var Txe=s(Tb);Wme=n(Txe,"STRONG",{});var Kmt=s(Wme);bPo=r(Kmt,"led"),Kmt.forEach(t),vPo=r(Txe," \u2014 "),eO=n(Txe,"A",{href:!0});var Zmt=s(eO);FPo=r(Zmt,"LEDForSequenceClassification"),Zmt.forEach(t),TPo=r(Txe," (LED model)"),Txe.forEach(t),MPo=i(j),Mb=n(j,"LI",{});var Mxe=s(Mb);Qme=n(Mxe,"STRONG",{});var egt=s(Qme);EPo=r(egt,"longformer"),egt.forEach(t),CPo=r(Mxe," \u2014 "),oO=n(Mxe,"A",{href:!0});var ogt=s(oO);wPo=r(ogt,"LongformerForSequenceClassification"),ogt.forEach(t),APo=r(Mxe," (Longformer model)"),Mxe.forEach(t),yPo=i(j),Eb=n(j,"LI",{});var Exe=s(Eb);Hme=n(Exe,"STRONG",{});var rgt=s(Hme);LPo=r(rgt,"mbart"),rgt.forEach(t),xPo=r(Exe," \u2014 "),rO=n(Exe,"A",{href:!0});var tgt=s(rO);$Po=r(tgt,"MBartForSequenceClassification"),tgt.forEach(t),kPo=r(Exe," (mBART model)"),Exe.forEach(t),SPo=i(j),Cb=n(j,"LI",{});var Cxe=s(Cb);Ume=n(Cxe,"STRONG",{});var agt=s(Ume);RPo=r(agt,"megatron-bert"),agt.forEach(t),PPo=r(Cxe," \u2014 "),tO=n(Cxe,"A",{href:!0});var ngt=s(tO);BPo=r(ngt,"MegatronBertForSequenceClassification"),ngt.forEach(t),IPo=r(Cxe," (Megatron-BERT model)"),Cxe.forEach(t),NPo=i(j),wb=n(j,"LI",{});var wxe=s(wb);Jme=n(wxe,"STRONG",{});var sgt=s(Jme);qPo=r(sgt,"mobilebert"),sgt.forEach(t),jPo=r(wxe," \u2014 "),aO=n(wxe,"A",{href:!0});var lgt=s(aO);DPo=r(lgt,"MobileBertForSequenceClassification"),lgt.forEach(t),GPo=r(wxe," (MobileBERT model)"),wxe.forEach(t),OPo=i(j),Ab=n(j,"LI",{});var Axe=s(Ab);Yme=n(Axe,"STRONG",{});var igt=s(Yme);VPo=r(igt,"mpnet"),igt.forEach(t),XPo=r(Axe," \u2014 "),nO=n(Axe,"A",{href:!0});var dgt=s(nO);zPo=r(dgt,"MPNetForSequenceClassification"),dgt.forEach(t),WPo=r(Axe," (MPNet model)"),Axe.forEach(t),QPo=i(j),yb=n(j,"LI",{});var yxe=s(yb);Kme=n(yxe,"STRONG",{});var cgt=s(Kme);HPo=r(cgt,"nystromformer"),cgt.forEach(t),UPo=r(yxe," \u2014 "),sO=n(yxe,"A",{href:!0});var fgt=s(sO);JPo=r(fgt,"NystromformerForSequenceClassification"),fgt.forEach(t),YPo=r(yxe," (Nystr\xF6mformer model)"),yxe.forEach(t),KPo=i(j),Lb=n(j,"LI",{});var Lxe=s(Lb);Zme=n(Lxe,"STRONG",{});var mgt=s(Zme);ZPo=r(mgt,"openai-gpt"),mgt.forEach(t),eBo=r(Lxe," \u2014 "),lO=n(Lxe,"A",{href:!0});var ggt=s(lO);oBo=r(ggt,"OpenAIGPTForSequenceClassification"),ggt.forEach(t),rBo=r(Lxe," (OpenAI GPT model)"),Lxe.forEach(t),tBo=i(j),xb=n(j,"LI",{});var xxe=s(xb);ege=n(xxe,"STRONG",{});var hgt=s(ege);aBo=r(hgt,"perceiver"),hgt.forEach(t),nBo=r(xxe," \u2014 "),iO=n(xxe,"A",{href:!0});var pgt=s(iO);sBo=r(pgt,"PerceiverForSequenceClassification"),pgt.forEach(t),lBo=r(xxe," (Perceiver model)"),xxe.forEach(t),iBo=i(j),$b=n(j,"LI",{});var $xe=s($b);oge=n($xe,"STRONG",{});var _gt=s(oge);dBo=r(_gt,"plbart"),_gt.forEach(t),cBo=r($xe," \u2014 "),dO=n($xe,"A",{href:!0});var ugt=s(dO);fBo=r(ugt,"PLBartForSequenceClassification"),ugt.forEach(t),mBo=r($xe," (PLBart model)"),$xe.forEach(t),gBo=i(j),kb=n(j,"LI",{});var kxe=s(kb);rge=n(kxe,"STRONG",{});var bgt=s(rge);hBo=r(bgt,"qdqbert"),bgt.forEach(t),pBo=r(kxe," \u2014 "),cO=n(kxe,"A",{href:!0});var vgt=s(cO);_Bo=r(vgt,"QDQBertForSequenceClassification"),vgt.forEach(t),uBo=r(kxe," (QDQBert model)"),kxe.forEach(t),bBo=i(j),Sb=n(j,"LI",{});var Sxe=s(Sb);tge=n(Sxe,"STRONG",{});var Fgt=s(tge);vBo=r(Fgt,"reformer"),Fgt.forEach(t),FBo=r(Sxe," \u2014 "),fO=n(Sxe,"A",{href:!0});var Tgt=s(fO);TBo=r(Tgt,"ReformerForSequenceClassification"),Tgt.forEach(t),MBo=r(Sxe," (Reformer model)"),Sxe.forEach(t),EBo=i(j),Rb=n(j,"LI",{});var Rxe=s(Rb);age=n(Rxe,"STRONG",{});var Mgt=s(age);CBo=r(Mgt,"rembert"),Mgt.forEach(t),wBo=r(Rxe," \u2014 "),mO=n(Rxe,"A",{href:!0});var Egt=s(mO);ABo=r(Egt,"RemBertForSequenceClassification"),Egt.forEach(t),yBo=r(Rxe," (RemBERT model)"),Rxe.forEach(t),LBo=i(j),Pb=n(j,"LI",{});var Pxe=s(Pb);nge=n(Pxe,"STRONG",{});var Cgt=s(nge);xBo=r(Cgt,"roberta"),Cgt.forEach(t),$Bo=r(Pxe," \u2014 "),gO=n(Pxe,"A",{href:!0});var wgt=s(gO);kBo=r(wgt,"RobertaForSequenceClassification"),wgt.forEach(t),SBo=r(Pxe," (RoBERTa model)"),Pxe.forEach(t),RBo=i(j),Bb=n(j,"LI",{});var Bxe=s(Bb);sge=n(Bxe,"STRONG",{});var Agt=s(sge);PBo=r(Agt,"roformer"),Agt.forEach(t),BBo=r(Bxe," \u2014 "),hO=n(Bxe,"A",{href:!0});var ygt=s(hO);IBo=r(ygt,"RoFormerForSequenceClassification"),ygt.forEach(t),NBo=r(Bxe," (RoFormer model)"),Bxe.forEach(t),qBo=i(j),Ib=n(j,"LI",{});var Ixe=s(Ib);lge=n(Ixe,"STRONG",{});var Lgt=s(lge);jBo=r(Lgt,"squeezebert"),Lgt.forEach(t),DBo=r(Ixe," \u2014 "),pO=n(Ixe,"A",{href:!0});var xgt=s(pO);GBo=r(xgt,"SqueezeBertForSequenceClassification"),xgt.forEach(t),OBo=r(Ixe," (SqueezeBERT model)"),Ixe.forEach(t),VBo=i(j),Nb=n(j,"LI",{});var Nxe=s(Nb);ige=n(Nxe,"STRONG",{});var $gt=s(ige);XBo=r($gt,"tapas"),$gt.forEach(t),zBo=r(Nxe," \u2014 "),_O=n(Nxe,"A",{href:!0});var kgt=s(_O);WBo=r(kgt,"TapasForSequenceClassification"),kgt.forEach(t),QBo=r(Nxe," (TAPAS model)"),Nxe.forEach(t),HBo=i(j),qb=n(j,"LI",{});var qxe=s(qb);dge=n(qxe,"STRONG",{});var Sgt=s(dge);UBo=r(Sgt,"transfo-xl"),Sgt.forEach(t),JBo=r(qxe," \u2014 "),uO=n(qxe,"A",{href:!0});var Rgt=s(uO);YBo=r(Rgt,"TransfoXLForSequenceClassification"),Rgt.forEach(t),KBo=r(qxe," (Transformer-XL model)"),qxe.forEach(t),ZBo=i(j),jb=n(j,"LI",{});var jxe=s(jb);cge=n(jxe,"STRONG",{});var Pgt=s(cge);eIo=r(Pgt,"xlm"),Pgt.forEach(t),oIo=r(jxe," \u2014 "),bO=n(jxe,"A",{href:!0});var Bgt=s(bO);rIo=r(Bgt,"XLMForSequenceClassification"),Bgt.forEach(t),tIo=r(jxe," (XLM model)"),jxe.forEach(t),aIo=i(j),Db=n(j,"LI",{});var Dxe=s(Db);fge=n(Dxe,"STRONG",{});var Igt=s(fge);nIo=r(Igt,"xlm-roberta"),Igt.forEach(t),sIo=r(Dxe," \u2014 "),vO=n(Dxe,"A",{href:!0});var Ngt=s(vO);lIo=r(Ngt,"XLMRobertaForSequenceClassification"),Ngt.forEach(t),iIo=r(Dxe," (XLM-RoBERTa model)"),Dxe.forEach(t),dIo=i(j),Gb=n(j,"LI",{});var Gxe=s(Gb);mge=n(Gxe,"STRONG",{});var qgt=s(mge);cIo=r(qgt,"xlm-roberta-xl"),qgt.forEach(t),fIo=r(Gxe," \u2014 "),FO=n(Gxe,"A",{href:!0});var jgt=s(FO);mIo=r(jgt,"XLMRobertaXLForSequenceClassification"),jgt.forEach(t),gIo=r(Gxe," (XLM-RoBERTa-XL model)"),Gxe.forEach(t),hIo=i(j),Ob=n(j,"LI",{});var Oxe=s(Ob);gge=n(Oxe,"STRONG",{});var Dgt=s(gge);pIo=r(Dgt,"xlnet"),Dgt.forEach(t),_Io=r(Oxe," \u2014 "),TO=n(Oxe,"A",{href:!0});var Ggt=s(TO);uIo=r(Ggt,"XLNetForSequenceClassification"),Ggt.forEach(t),bIo=r(Oxe," (XLNet model)"),Oxe.forEach(t),vIo=i(j),Vb=n(j,"LI",{});var Vxe=s(Vb);hge=n(Vxe,"STRONG",{});var Ogt=s(hge);FIo=r(Ogt,"yoso"),Ogt.forEach(t),TIo=r(Vxe," \u2014 "),MO=n(Vxe,"A",{href:!0});var Vgt=s(MO);MIo=r(Vgt,"YosoForSequenceClassification"),Vgt.forEach(t),EIo=r(Vxe," (YOSO model)"),Vxe.forEach(t),j.forEach(t),CIo=i(sa),Xb=n(sa,"P",{});var Xxe=s(Xb);wIo=r(Xxe,"The model is set in evaluation mode by default using "),pge=n(Xxe,"CODE",{});var Xgt=s(pge);AIo=r(Xgt,"model.eval()"),Xgt.forEach(t),yIo=r(Xxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ge=n(Xxe,"CODE",{});var zgt=s(_ge);LIo=r(zgt,"model.train()"),zgt.forEach(t),Xxe.forEach(t),xIo=i(sa),T(zb.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),Mje=i(f),Xi=n(f,"H2",{class:!0});var AGe=s(Xi);Wb=n(AGe,"A",{id:!0,class:!0,href:!0});var Wgt=s(Wb);uge=n(Wgt,"SPAN",{});var Qgt=s(uge);T(Oy.$$.fragment,Qgt),Qgt.forEach(t),Wgt.forEach(t),$Io=i(AGe),bge=n(AGe,"SPAN",{});var Hgt=s(bge);kIo=r(Hgt,"AutoModelForMultipleChoice"),Hgt.forEach(t),AGe.forEach(t),Eje=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(Vy.$$.fragment,Hs),SIo=i(Hs),zi=n(Hs,"P",{});var oee=s(zi);RIo=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EO=n(oee,"A",{href:!0});var Ugt=s(EO);PIo=r(Ugt,"from_pretrained()"),Ugt.forEach(t),BIo=r(oee," class method or the "),CO=n(oee,"A",{href:!0});var Jgt=s(CO);IIo=r(Jgt,"from_config()"),Jgt.forEach(t),NIo=r(oee,` class
method.`),oee.forEach(t),qIo=i(Hs),Xy=n(Hs,"P",{});var yGe=s(Xy);jIo=r(yGe,"This class cannot be instantiated directly using "),vge=n(yGe,"CODE",{});var Ygt=s(vge);DIo=r(Ygt,"__init__()"),Ygt.forEach(t),GIo=r(yGe," (throws an error)."),yGe.forEach(t),OIo=i(Hs),dt=n(Hs,"DIV",{class:!0});var rw=s(dt);T(zy.$$.fragment,rw),VIo=i(rw),Fge=n(rw,"P",{});var Kgt=s(Fge);XIo=r(Kgt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Kgt.forEach(t),zIo=i(rw),Wi=n(rw,"P",{});var ree=s(Wi);WIo=r(ree,`Note:
Loading a model from its configuration file does `),Tge=n(ree,"STRONG",{});var Zgt=s(Tge);QIo=r(Zgt,"not"),Zgt.forEach(t),HIo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(ree,"A",{href:!0});var eht=s(wO);UIo=r(eht,"from_pretrained()"),eht.forEach(t),JIo=r(ree," to load the model weights."),ree.forEach(t),YIo=i(rw),T(Qb.$$.fragment,rw),rw.forEach(t),KIo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(Wy.$$.fragment,la),ZIo=i(la),Mge=n(la,"P",{});var oht=s(Mge);eNo=r(oht,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oht.forEach(t),oNo=i(la),Pa=n(la,"P",{});var tw=s(Pa);rNo=r(tw,"The model class to instantiate is selected based on the "),Ege=n(tw,"CODE",{});var rht=s(Ege);tNo=r(rht,"model_type"),rht.forEach(t),aNo=r(tw,` property of the config object (either
passed as an argument or loaded from `),Cge=n(tw,"CODE",{});var tht=s(Cge);nNo=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),sNo=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=n(tw,"CODE",{});var aht=s(wge);lNo=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),iNo=r(tw,":"),tw.forEach(t),dNo=i(la),Z=n(la,"UL",{});var ee=s(Z);Hb=n(ee,"LI",{});var zxe=s(Hb);Age=n(zxe,"STRONG",{});var nht=s(Age);cNo=r(nht,"albert"),nht.forEach(t),fNo=r(zxe," \u2014 "),AO=n(zxe,"A",{href:!0});var sht=s(AO);mNo=r(sht,"AlbertForMultipleChoice"),sht.forEach(t),gNo=r(zxe," (ALBERT model)"),zxe.forEach(t),hNo=i(ee),Ub=n(ee,"LI",{});var Wxe=s(Ub);yge=n(Wxe,"STRONG",{});var lht=s(yge);pNo=r(lht,"bert"),lht.forEach(t),_No=r(Wxe," \u2014 "),yO=n(Wxe,"A",{href:!0});var iht=s(yO);uNo=r(iht,"BertForMultipleChoice"),iht.forEach(t),bNo=r(Wxe," (BERT model)"),Wxe.forEach(t),vNo=i(ee),Jb=n(ee,"LI",{});var Qxe=s(Jb);Lge=n(Qxe,"STRONG",{});var dht=s(Lge);FNo=r(dht,"big_bird"),dht.forEach(t),TNo=r(Qxe," \u2014 "),LO=n(Qxe,"A",{href:!0});var cht=s(LO);MNo=r(cht,"BigBirdForMultipleChoice"),cht.forEach(t),ENo=r(Qxe," (BigBird model)"),Qxe.forEach(t),CNo=i(ee),Yb=n(ee,"LI",{});var Hxe=s(Yb);xge=n(Hxe,"STRONG",{});var fht=s(xge);wNo=r(fht,"camembert"),fht.forEach(t),ANo=r(Hxe," \u2014 "),xO=n(Hxe,"A",{href:!0});var mht=s(xO);yNo=r(mht,"CamembertForMultipleChoice"),mht.forEach(t),LNo=r(Hxe," (CamemBERT model)"),Hxe.forEach(t),xNo=i(ee),Kb=n(ee,"LI",{});var Uxe=s(Kb);$ge=n(Uxe,"STRONG",{});var ght=s($ge);$No=r(ght,"canine"),ght.forEach(t),kNo=r(Uxe," \u2014 "),$O=n(Uxe,"A",{href:!0});var hht=s($O);SNo=r(hht,"CanineForMultipleChoice"),hht.forEach(t),RNo=r(Uxe," (CANINE model)"),Uxe.forEach(t),PNo=i(ee),Zb=n(ee,"LI",{});var Jxe=s(Zb);kge=n(Jxe,"STRONG",{});var pht=s(kge);BNo=r(pht,"convbert"),pht.forEach(t),INo=r(Jxe," \u2014 "),kO=n(Jxe,"A",{href:!0});var _ht=s(kO);NNo=r(_ht,"ConvBertForMultipleChoice"),_ht.forEach(t),qNo=r(Jxe," (ConvBERT model)"),Jxe.forEach(t),jNo=i(ee),ev=n(ee,"LI",{});var Yxe=s(ev);Sge=n(Yxe,"STRONG",{});var uht=s(Sge);DNo=r(uht,"data2vec-text"),uht.forEach(t),GNo=r(Yxe," \u2014 "),SO=n(Yxe,"A",{href:!0});var bht=s(SO);ONo=r(bht,"Data2VecTextForMultipleChoice"),bht.forEach(t),VNo=r(Yxe," (Data2VecText model)"),Yxe.forEach(t),XNo=i(ee),ov=n(ee,"LI",{});var Kxe=s(ov);Rge=n(Kxe,"STRONG",{});var vht=s(Rge);zNo=r(vht,"deberta-v2"),vht.forEach(t),WNo=r(Kxe," \u2014 "),RO=n(Kxe,"A",{href:!0});var Fht=s(RO);QNo=r(Fht,"DebertaV2ForMultipleChoice"),Fht.forEach(t),HNo=r(Kxe," (DeBERTa-v2 model)"),Kxe.forEach(t),UNo=i(ee),rv=n(ee,"LI",{});var Zxe=s(rv);Pge=n(Zxe,"STRONG",{});var Tht=s(Pge);JNo=r(Tht,"distilbert"),Tht.forEach(t),YNo=r(Zxe," \u2014 "),PO=n(Zxe,"A",{href:!0});var Mht=s(PO);KNo=r(Mht,"DistilBertForMultipleChoice"),Mht.forEach(t),ZNo=r(Zxe," (DistilBERT model)"),Zxe.forEach(t),eqo=i(ee),tv=n(ee,"LI",{});var e$e=s(tv);Bge=n(e$e,"STRONG",{});var Eht=s(Bge);oqo=r(Eht,"electra"),Eht.forEach(t),rqo=r(e$e," \u2014 "),BO=n(e$e,"A",{href:!0});var Cht=s(BO);tqo=r(Cht,"ElectraForMultipleChoice"),Cht.forEach(t),aqo=r(e$e," (ELECTRA model)"),e$e.forEach(t),nqo=i(ee),av=n(ee,"LI",{});var o$e=s(av);Ige=n(o$e,"STRONG",{});var wht=s(Ige);sqo=r(wht,"flaubert"),wht.forEach(t),lqo=r(o$e," \u2014 "),IO=n(o$e,"A",{href:!0});var Aht=s(IO);iqo=r(Aht,"FlaubertForMultipleChoice"),Aht.forEach(t),dqo=r(o$e," (FlauBERT model)"),o$e.forEach(t),cqo=i(ee),nv=n(ee,"LI",{});var r$e=s(nv);Nge=n(r$e,"STRONG",{});var yht=s(Nge);fqo=r(yht,"fnet"),yht.forEach(t),mqo=r(r$e," \u2014 "),NO=n(r$e,"A",{href:!0});var Lht=s(NO);gqo=r(Lht,"FNetForMultipleChoice"),Lht.forEach(t),hqo=r(r$e," (FNet model)"),r$e.forEach(t),pqo=i(ee),sv=n(ee,"LI",{});var t$e=s(sv);qge=n(t$e,"STRONG",{});var xht=s(qge);_qo=r(xht,"funnel"),xht.forEach(t),uqo=r(t$e," \u2014 "),qO=n(t$e,"A",{href:!0});var $ht=s(qO);bqo=r($ht,"FunnelForMultipleChoice"),$ht.forEach(t),vqo=r(t$e," (Funnel Transformer model)"),t$e.forEach(t),Fqo=i(ee),lv=n(ee,"LI",{});var a$e=s(lv);jge=n(a$e,"STRONG",{});var kht=s(jge);Tqo=r(kht,"ibert"),kht.forEach(t),Mqo=r(a$e," \u2014 "),jO=n(a$e,"A",{href:!0});var Sht=s(jO);Eqo=r(Sht,"IBertForMultipleChoice"),Sht.forEach(t),Cqo=r(a$e," (I-BERT model)"),a$e.forEach(t),wqo=i(ee),iv=n(ee,"LI",{});var n$e=s(iv);Dge=n(n$e,"STRONG",{});var Rht=s(Dge);Aqo=r(Rht,"longformer"),Rht.forEach(t),yqo=r(n$e," \u2014 "),DO=n(n$e,"A",{href:!0});var Pht=s(DO);Lqo=r(Pht,"LongformerForMultipleChoice"),Pht.forEach(t),xqo=r(n$e," (Longformer model)"),n$e.forEach(t),$qo=i(ee),dv=n(ee,"LI",{});var s$e=s(dv);Gge=n(s$e,"STRONG",{});var Bht=s(Gge);kqo=r(Bht,"megatron-bert"),Bht.forEach(t),Sqo=r(s$e," \u2014 "),GO=n(s$e,"A",{href:!0});var Iht=s(GO);Rqo=r(Iht,"MegatronBertForMultipleChoice"),Iht.forEach(t),Pqo=r(s$e," (Megatron-BERT model)"),s$e.forEach(t),Bqo=i(ee),cv=n(ee,"LI",{});var l$e=s(cv);Oge=n(l$e,"STRONG",{});var Nht=s(Oge);Iqo=r(Nht,"mobilebert"),Nht.forEach(t),Nqo=r(l$e," \u2014 "),OO=n(l$e,"A",{href:!0});var qht=s(OO);qqo=r(qht,"MobileBertForMultipleChoice"),qht.forEach(t),jqo=r(l$e," (MobileBERT model)"),l$e.forEach(t),Dqo=i(ee),fv=n(ee,"LI",{});var i$e=s(fv);Vge=n(i$e,"STRONG",{});var jht=s(Vge);Gqo=r(jht,"mpnet"),jht.forEach(t),Oqo=r(i$e," \u2014 "),VO=n(i$e,"A",{href:!0});var Dht=s(VO);Vqo=r(Dht,"MPNetForMultipleChoice"),Dht.forEach(t),Xqo=r(i$e," (MPNet model)"),i$e.forEach(t),zqo=i(ee),mv=n(ee,"LI",{});var d$e=s(mv);Xge=n(d$e,"STRONG",{});var Ght=s(Xge);Wqo=r(Ght,"nystromformer"),Ght.forEach(t),Qqo=r(d$e," \u2014 "),XO=n(d$e,"A",{href:!0});var Oht=s(XO);Hqo=r(Oht,"NystromformerForMultipleChoice"),Oht.forEach(t),Uqo=r(d$e," (Nystr\xF6mformer model)"),d$e.forEach(t),Jqo=i(ee),gv=n(ee,"LI",{});var c$e=s(gv);zge=n(c$e,"STRONG",{});var Vht=s(zge);Yqo=r(Vht,"qdqbert"),Vht.forEach(t),Kqo=r(c$e," \u2014 "),zO=n(c$e,"A",{href:!0});var Xht=s(zO);Zqo=r(Xht,"QDQBertForMultipleChoice"),Xht.forEach(t),ejo=r(c$e," (QDQBert model)"),c$e.forEach(t),ojo=i(ee),hv=n(ee,"LI",{});var f$e=s(hv);Wge=n(f$e,"STRONG",{});var zht=s(Wge);rjo=r(zht,"rembert"),zht.forEach(t),tjo=r(f$e," \u2014 "),WO=n(f$e,"A",{href:!0});var Wht=s(WO);ajo=r(Wht,"RemBertForMultipleChoice"),Wht.forEach(t),njo=r(f$e," (RemBERT model)"),f$e.forEach(t),sjo=i(ee),pv=n(ee,"LI",{});var m$e=s(pv);Qge=n(m$e,"STRONG",{});var Qht=s(Qge);ljo=r(Qht,"roberta"),Qht.forEach(t),ijo=r(m$e," \u2014 "),QO=n(m$e,"A",{href:!0});var Hht=s(QO);djo=r(Hht,"RobertaForMultipleChoice"),Hht.forEach(t),cjo=r(m$e," (RoBERTa model)"),m$e.forEach(t),fjo=i(ee),_v=n(ee,"LI",{});var g$e=s(_v);Hge=n(g$e,"STRONG",{});var Uht=s(Hge);mjo=r(Uht,"roformer"),Uht.forEach(t),gjo=r(g$e," \u2014 "),HO=n(g$e,"A",{href:!0});var Jht=s(HO);hjo=r(Jht,"RoFormerForMultipleChoice"),Jht.forEach(t),pjo=r(g$e," (RoFormer model)"),g$e.forEach(t),_jo=i(ee),uv=n(ee,"LI",{});var h$e=s(uv);Uge=n(h$e,"STRONG",{});var Yht=s(Uge);ujo=r(Yht,"squeezebert"),Yht.forEach(t),bjo=r(h$e," \u2014 "),UO=n(h$e,"A",{href:!0});var Kht=s(UO);vjo=r(Kht,"SqueezeBertForMultipleChoice"),Kht.forEach(t),Fjo=r(h$e," (SqueezeBERT model)"),h$e.forEach(t),Tjo=i(ee),bv=n(ee,"LI",{});var p$e=s(bv);Jge=n(p$e,"STRONG",{});var Zht=s(Jge);Mjo=r(Zht,"xlm"),Zht.forEach(t),Ejo=r(p$e," \u2014 "),JO=n(p$e,"A",{href:!0});var ept=s(JO);Cjo=r(ept,"XLMForMultipleChoice"),ept.forEach(t),wjo=r(p$e," (XLM model)"),p$e.forEach(t),Ajo=i(ee),vv=n(ee,"LI",{});var _$e=s(vv);Yge=n(_$e,"STRONG",{});var opt=s(Yge);yjo=r(opt,"xlm-roberta"),opt.forEach(t),Ljo=r(_$e," \u2014 "),YO=n(_$e,"A",{href:!0});var rpt=s(YO);xjo=r(rpt,"XLMRobertaForMultipleChoice"),rpt.forEach(t),$jo=r(_$e," (XLM-RoBERTa model)"),_$e.forEach(t),kjo=i(ee),Fv=n(ee,"LI",{});var u$e=s(Fv);Kge=n(u$e,"STRONG",{});var tpt=s(Kge);Sjo=r(tpt,"xlm-roberta-xl"),tpt.forEach(t),Rjo=r(u$e," \u2014 "),KO=n(u$e,"A",{href:!0});var apt=s(KO);Pjo=r(apt,"XLMRobertaXLForMultipleChoice"),apt.forEach(t),Bjo=r(u$e," (XLM-RoBERTa-XL model)"),u$e.forEach(t),Ijo=i(ee),Tv=n(ee,"LI",{});var b$e=s(Tv);Zge=n(b$e,"STRONG",{});var npt=s(Zge);Njo=r(npt,"xlnet"),npt.forEach(t),qjo=r(b$e," \u2014 "),ZO=n(b$e,"A",{href:!0});var spt=s(ZO);jjo=r(spt,"XLNetForMultipleChoice"),spt.forEach(t),Djo=r(b$e," (XLNet model)"),b$e.forEach(t),Gjo=i(ee),Mv=n(ee,"LI",{});var v$e=s(Mv);ehe=n(v$e,"STRONG",{});var lpt=s(ehe);Ojo=r(lpt,"yoso"),lpt.forEach(t),Vjo=r(v$e," \u2014 "),eV=n(v$e,"A",{href:!0});var ipt=s(eV);Xjo=r(ipt,"YosoForMultipleChoice"),ipt.forEach(t),zjo=r(v$e," (YOSO model)"),v$e.forEach(t),ee.forEach(t),Wjo=i(la),Ev=n(la,"P",{});var F$e=s(Ev);Qjo=r(F$e,"The model is set in evaluation mode by default using "),ohe=n(F$e,"CODE",{});var dpt=s(ohe);Hjo=r(dpt,"model.eval()"),dpt.forEach(t),Ujo=r(F$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rhe=n(F$e,"CODE",{});var cpt=s(rhe);Jjo=r(cpt,"model.train()"),cpt.forEach(t),F$e.forEach(t),Yjo=i(la),T(Cv.$$.fragment,la),la.forEach(t),Hs.forEach(t),Cje=i(f),Qi=n(f,"H2",{class:!0});var LGe=s(Qi);wv=n(LGe,"A",{id:!0,class:!0,href:!0});var fpt=s(wv);the=n(fpt,"SPAN",{});var mpt=s(the);T(Qy.$$.fragment,mpt),mpt.forEach(t),fpt.forEach(t),Kjo=i(LGe),ahe=n(LGe,"SPAN",{});var gpt=s(ahe);Zjo=r(gpt,"AutoModelForNextSentencePrediction"),gpt.forEach(t),LGe.forEach(t),wje=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(Hy.$$.fragment,Us),eDo=i(Us),Hi=n(Us,"P",{});var tee=s(Hi);oDo=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oV=n(tee,"A",{href:!0});var hpt=s(oV);rDo=r(hpt,"from_pretrained()"),hpt.forEach(t),tDo=r(tee," class method or the "),rV=n(tee,"A",{href:!0});var ppt=s(rV);aDo=r(ppt,"from_config()"),ppt.forEach(t),nDo=r(tee,` class
method.`),tee.forEach(t),sDo=i(Us),Uy=n(Us,"P",{});var xGe=s(Uy);lDo=r(xGe,"This class cannot be instantiated directly using "),nhe=n(xGe,"CODE",{});var _pt=s(nhe);iDo=r(_pt,"__init__()"),_pt.forEach(t),dDo=r(xGe," (throws an error)."),xGe.forEach(t),cDo=i(Us),ct=n(Us,"DIV",{class:!0});var aw=s(ct);T(Jy.$$.fragment,aw),fDo=i(aw),she=n(aw,"P",{});var upt=s(she);mDo=r(upt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),upt.forEach(t),gDo=i(aw),Ui=n(aw,"P",{});var aee=s(Ui);hDo=r(aee,`Note:
Loading a model from its configuration file does `),lhe=n(aee,"STRONG",{});var bpt=s(lhe);pDo=r(bpt,"not"),bpt.forEach(t),_Do=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=n(aee,"A",{href:!0});var vpt=s(tV);uDo=r(vpt,"from_pretrained()"),vpt.forEach(t),bDo=r(aee," to load the model weights."),aee.forEach(t),vDo=i(aw),T(Av.$$.fragment,aw),aw.forEach(t),FDo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(Yy.$$.fragment,ia),TDo=i(ia),ihe=n(ia,"P",{});var Fpt=s(ihe);MDo=r(Fpt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Fpt.forEach(t),EDo=i(ia),Ba=n(ia,"P",{});var nw=s(Ba);CDo=r(nw,"The model class to instantiate is selected based on the "),dhe=n(nw,"CODE",{});var Tpt=s(dhe);wDo=r(Tpt,"model_type"),Tpt.forEach(t),ADo=r(nw,` property of the config object (either
passed as an argument or loaded from `),che=n(nw,"CODE",{});var Mpt=s(che);yDo=r(Mpt,"pretrained_model_name_or_path"),Mpt.forEach(t),LDo=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=n(nw,"CODE",{});var Ept=s(fhe);xDo=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),$Do=r(nw,":"),nw.forEach(t),kDo=i(ia),Yr=n(ia,"UL",{});var Js=s(Yr);yv=n(Js,"LI",{});var T$e=s(yv);mhe=n(T$e,"STRONG",{});var Cpt=s(mhe);SDo=r(Cpt,"bert"),Cpt.forEach(t),RDo=r(T$e," \u2014 "),aV=n(T$e,"A",{href:!0});var wpt=s(aV);PDo=r(wpt,"BertForNextSentencePrediction"),wpt.forEach(t),BDo=r(T$e," (BERT model)"),T$e.forEach(t),IDo=i(Js),Lv=n(Js,"LI",{});var M$e=s(Lv);ghe=n(M$e,"STRONG",{});var Apt=s(ghe);NDo=r(Apt,"fnet"),Apt.forEach(t),qDo=r(M$e," \u2014 "),nV=n(M$e,"A",{href:!0});var ypt=s(nV);jDo=r(ypt,"FNetForNextSentencePrediction"),ypt.forEach(t),DDo=r(M$e," (FNet model)"),M$e.forEach(t),GDo=i(Js),xv=n(Js,"LI",{});var E$e=s(xv);hhe=n(E$e,"STRONG",{});var Lpt=s(hhe);ODo=r(Lpt,"megatron-bert"),Lpt.forEach(t),VDo=r(E$e," \u2014 "),sV=n(E$e,"A",{href:!0});var xpt=s(sV);XDo=r(xpt,"MegatronBertForNextSentencePrediction"),xpt.forEach(t),zDo=r(E$e," (Megatron-BERT model)"),E$e.forEach(t),WDo=i(Js),$v=n(Js,"LI",{});var C$e=s($v);phe=n(C$e,"STRONG",{});var $pt=s(phe);QDo=r($pt,"mobilebert"),$pt.forEach(t),HDo=r(C$e," \u2014 "),lV=n(C$e,"A",{href:!0});var kpt=s(lV);UDo=r(kpt,"MobileBertForNextSentencePrediction"),kpt.forEach(t),JDo=r(C$e," (MobileBERT model)"),C$e.forEach(t),YDo=i(Js),kv=n(Js,"LI",{});var w$e=s(kv);_he=n(w$e,"STRONG",{});var Spt=s(_he);KDo=r(Spt,"qdqbert"),Spt.forEach(t),ZDo=r(w$e," \u2014 "),iV=n(w$e,"A",{href:!0});var Rpt=s(iV);eGo=r(Rpt,"QDQBertForNextSentencePrediction"),Rpt.forEach(t),oGo=r(w$e," (QDQBert model)"),w$e.forEach(t),Js.forEach(t),rGo=i(ia),Sv=n(ia,"P",{});var A$e=s(Sv);tGo=r(A$e,"The model is set in evaluation mode by default using "),uhe=n(A$e,"CODE",{});var Ppt=s(uhe);aGo=r(Ppt,"model.eval()"),Ppt.forEach(t),nGo=r(A$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=n(A$e,"CODE",{});var Bpt=s(bhe);sGo=r(Bpt,"model.train()"),Bpt.forEach(t),A$e.forEach(t),lGo=i(ia),T(Rv.$$.fragment,ia),ia.forEach(t),Us.forEach(t),Aje=i(f),Ji=n(f,"H2",{class:!0});var $Ge=s(Ji);Pv=n($Ge,"A",{id:!0,class:!0,href:!0});var Ipt=s(Pv);vhe=n(Ipt,"SPAN",{});var Npt=s(vhe);T(Ky.$$.fragment,Npt),Npt.forEach(t),Ipt.forEach(t),iGo=i($Ge),Fhe=n($Ge,"SPAN",{});var qpt=s(Fhe);dGo=r(qpt,"AutoModelForTokenClassification"),qpt.forEach(t),$Ge.forEach(t),yje=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(Zy.$$.fragment,Ys),cGo=i(Ys),Yi=n(Ys,"P",{});var nee=s(Yi);fGo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dV=n(nee,"A",{href:!0});var jpt=s(dV);mGo=r(jpt,"from_pretrained()"),jpt.forEach(t),gGo=r(nee," class method or the "),cV=n(nee,"A",{href:!0});var Dpt=s(cV);hGo=r(Dpt,"from_config()"),Dpt.forEach(t),pGo=r(nee,` class
method.`),nee.forEach(t),_Go=i(Ys),eL=n(Ys,"P",{});var kGe=s(eL);uGo=r(kGe,"This class cannot be instantiated directly using "),The=n(kGe,"CODE",{});var Gpt=s(The);bGo=r(Gpt,"__init__()"),Gpt.forEach(t),vGo=r(kGe," (throws an error)."),kGe.forEach(t),FGo=i(Ys),ft=n(Ys,"DIV",{class:!0});var sw=s(ft);T(oL.$$.fragment,sw),TGo=i(sw),Mhe=n(sw,"P",{});var Opt=s(Mhe);MGo=r(Opt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Opt.forEach(t),EGo=i(sw),Ki=n(sw,"P",{});var see=s(Ki);CGo=r(see,`Note:
Loading a model from its configuration file does `),Ehe=n(see,"STRONG",{});var Vpt=s(Ehe);wGo=r(Vpt,"not"),Vpt.forEach(t),AGo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),fV=n(see,"A",{href:!0});var Xpt=s(fV);yGo=r(Xpt,"from_pretrained()"),Xpt.forEach(t),LGo=r(see," to load the model weights."),see.forEach(t),xGo=i(sw),T(Bv.$$.fragment,sw),sw.forEach(t),$Go=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(rL.$$.fragment,da),kGo=i(da),Che=n(da,"P",{});var zpt=s(Che);SGo=r(zpt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zpt.forEach(t),RGo=i(da),Ia=n(da,"P",{});var lw=s(Ia);PGo=r(lw,"The model class to instantiate is selected based on the "),whe=n(lw,"CODE",{});var Wpt=s(whe);BGo=r(Wpt,"model_type"),Wpt.forEach(t),IGo=r(lw,` property of the config object (either
passed as an argument or loaded from `),Ahe=n(lw,"CODE",{});var Qpt=s(Ahe);NGo=r(Qpt,"pretrained_model_name_or_path"),Qpt.forEach(t),qGo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=n(lw,"CODE",{});var Hpt=s(yhe);jGo=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),DGo=r(lw,":"),lw.forEach(t),GGo=i(da),U=n(da,"UL",{});var J=s(U);Iv=n(J,"LI",{});var y$e=s(Iv);Lhe=n(y$e,"STRONG",{});var Upt=s(Lhe);OGo=r(Upt,"albert"),Upt.forEach(t),VGo=r(y$e," \u2014 "),mV=n(y$e,"A",{href:!0});var Jpt=s(mV);XGo=r(Jpt,"AlbertForTokenClassification"),Jpt.forEach(t),zGo=r(y$e," (ALBERT model)"),y$e.forEach(t),WGo=i(J),Nv=n(J,"LI",{});var L$e=s(Nv);xhe=n(L$e,"STRONG",{});var Ypt=s(xhe);QGo=r(Ypt,"bert"),Ypt.forEach(t),HGo=r(L$e," \u2014 "),gV=n(L$e,"A",{href:!0});var Kpt=s(gV);UGo=r(Kpt,"BertForTokenClassification"),Kpt.forEach(t),JGo=r(L$e," (BERT model)"),L$e.forEach(t),YGo=i(J),qv=n(J,"LI",{});var x$e=s(qv);$he=n(x$e,"STRONG",{});var Zpt=s($he);KGo=r(Zpt,"big_bird"),Zpt.forEach(t),ZGo=r(x$e," \u2014 "),hV=n(x$e,"A",{href:!0});var e_t=s(hV);eOo=r(e_t,"BigBirdForTokenClassification"),e_t.forEach(t),oOo=r(x$e," (BigBird model)"),x$e.forEach(t),rOo=i(J),jv=n(J,"LI",{});var $$e=s(jv);khe=n($$e,"STRONG",{});var o_t=s(khe);tOo=r(o_t,"camembert"),o_t.forEach(t),aOo=r($$e," \u2014 "),pV=n($$e,"A",{href:!0});var r_t=s(pV);nOo=r(r_t,"CamembertForTokenClassification"),r_t.forEach(t),sOo=r($$e," (CamemBERT model)"),$$e.forEach(t),lOo=i(J),Dv=n(J,"LI",{});var k$e=s(Dv);She=n(k$e,"STRONG",{});var t_t=s(She);iOo=r(t_t,"canine"),t_t.forEach(t),dOo=r(k$e," \u2014 "),_V=n(k$e,"A",{href:!0});var a_t=s(_V);cOo=r(a_t,"CanineForTokenClassification"),a_t.forEach(t),fOo=r(k$e," (CANINE model)"),k$e.forEach(t),mOo=i(J),Gv=n(J,"LI",{});var S$e=s(Gv);Rhe=n(S$e,"STRONG",{});var n_t=s(Rhe);gOo=r(n_t,"convbert"),n_t.forEach(t),hOo=r(S$e," \u2014 "),uV=n(S$e,"A",{href:!0});var s_t=s(uV);pOo=r(s_t,"ConvBertForTokenClassification"),s_t.forEach(t),_Oo=r(S$e," (ConvBERT model)"),S$e.forEach(t),uOo=i(J),Ov=n(J,"LI",{});var R$e=s(Ov);Phe=n(R$e,"STRONG",{});var l_t=s(Phe);bOo=r(l_t,"data2vec-text"),l_t.forEach(t),vOo=r(R$e," \u2014 "),bV=n(R$e,"A",{href:!0});var i_t=s(bV);FOo=r(i_t,"Data2VecTextForTokenClassification"),i_t.forEach(t),TOo=r(R$e," (Data2VecText model)"),R$e.forEach(t),MOo=i(J),Vv=n(J,"LI",{});var P$e=s(Vv);Bhe=n(P$e,"STRONG",{});var d_t=s(Bhe);EOo=r(d_t,"deberta"),d_t.forEach(t),COo=r(P$e," \u2014 "),vV=n(P$e,"A",{href:!0});var c_t=s(vV);wOo=r(c_t,"DebertaForTokenClassification"),c_t.forEach(t),AOo=r(P$e," (DeBERTa model)"),P$e.forEach(t),yOo=i(J),Xv=n(J,"LI",{});var B$e=s(Xv);Ihe=n(B$e,"STRONG",{});var f_t=s(Ihe);LOo=r(f_t,"deberta-v2"),f_t.forEach(t),xOo=r(B$e," \u2014 "),FV=n(B$e,"A",{href:!0});var m_t=s(FV);$Oo=r(m_t,"DebertaV2ForTokenClassification"),m_t.forEach(t),kOo=r(B$e," (DeBERTa-v2 model)"),B$e.forEach(t),SOo=i(J),zv=n(J,"LI",{});var I$e=s(zv);Nhe=n(I$e,"STRONG",{});var g_t=s(Nhe);ROo=r(g_t,"distilbert"),g_t.forEach(t),POo=r(I$e," \u2014 "),TV=n(I$e,"A",{href:!0});var h_t=s(TV);BOo=r(h_t,"DistilBertForTokenClassification"),h_t.forEach(t),IOo=r(I$e," (DistilBERT model)"),I$e.forEach(t),NOo=i(J),Wv=n(J,"LI",{});var N$e=s(Wv);qhe=n(N$e,"STRONG",{});var p_t=s(qhe);qOo=r(p_t,"electra"),p_t.forEach(t),jOo=r(N$e," \u2014 "),MV=n(N$e,"A",{href:!0});var __t=s(MV);DOo=r(__t,"ElectraForTokenClassification"),__t.forEach(t),GOo=r(N$e," (ELECTRA model)"),N$e.forEach(t),OOo=i(J),Qv=n(J,"LI",{});var q$e=s(Qv);jhe=n(q$e,"STRONG",{});var u_t=s(jhe);VOo=r(u_t,"flaubert"),u_t.forEach(t),XOo=r(q$e," \u2014 "),EV=n(q$e,"A",{href:!0});var b_t=s(EV);zOo=r(b_t,"FlaubertForTokenClassification"),b_t.forEach(t),WOo=r(q$e," (FlauBERT model)"),q$e.forEach(t),QOo=i(J),Hv=n(J,"LI",{});var j$e=s(Hv);Dhe=n(j$e,"STRONG",{});var v_t=s(Dhe);HOo=r(v_t,"fnet"),v_t.forEach(t),UOo=r(j$e," \u2014 "),CV=n(j$e,"A",{href:!0});var F_t=s(CV);JOo=r(F_t,"FNetForTokenClassification"),F_t.forEach(t),YOo=r(j$e," (FNet model)"),j$e.forEach(t),KOo=i(J),Uv=n(J,"LI",{});var D$e=s(Uv);Ghe=n(D$e,"STRONG",{});var T_t=s(Ghe);ZOo=r(T_t,"funnel"),T_t.forEach(t),eVo=r(D$e," \u2014 "),wV=n(D$e,"A",{href:!0});var M_t=s(wV);oVo=r(M_t,"FunnelForTokenClassification"),M_t.forEach(t),rVo=r(D$e," (Funnel Transformer model)"),D$e.forEach(t),tVo=i(J),Jv=n(J,"LI",{});var G$e=s(Jv);Ohe=n(G$e,"STRONG",{});var E_t=s(Ohe);aVo=r(E_t,"gpt2"),E_t.forEach(t),nVo=r(G$e," \u2014 "),AV=n(G$e,"A",{href:!0});var C_t=s(AV);sVo=r(C_t,"GPT2ForTokenClassification"),C_t.forEach(t),lVo=r(G$e," (OpenAI GPT-2 model)"),G$e.forEach(t),iVo=i(J),Yv=n(J,"LI",{});var O$e=s(Yv);Vhe=n(O$e,"STRONG",{});var w_t=s(Vhe);dVo=r(w_t,"ibert"),w_t.forEach(t),cVo=r(O$e," \u2014 "),yV=n(O$e,"A",{href:!0});var A_t=s(yV);fVo=r(A_t,"IBertForTokenClassification"),A_t.forEach(t),mVo=r(O$e," (I-BERT model)"),O$e.forEach(t),gVo=i(J),Kv=n(J,"LI",{});var V$e=s(Kv);Xhe=n(V$e,"STRONG",{});var y_t=s(Xhe);hVo=r(y_t,"layoutlm"),y_t.forEach(t),pVo=r(V$e," \u2014 "),LV=n(V$e,"A",{href:!0});var L_t=s(LV);_Vo=r(L_t,"LayoutLMForTokenClassification"),L_t.forEach(t),uVo=r(V$e," (LayoutLM model)"),V$e.forEach(t),bVo=i(J),Zv=n(J,"LI",{});var X$e=s(Zv);zhe=n(X$e,"STRONG",{});var x_t=s(zhe);vVo=r(x_t,"layoutlmv2"),x_t.forEach(t),FVo=r(X$e," \u2014 "),xV=n(X$e,"A",{href:!0});var $_t=s(xV);TVo=r($_t,"LayoutLMv2ForTokenClassification"),$_t.forEach(t),MVo=r(X$e," (LayoutLMv2 model)"),X$e.forEach(t),EVo=i(J),eF=n(J,"LI",{});var z$e=s(eF);Whe=n(z$e,"STRONG",{});var k_t=s(Whe);CVo=r(k_t,"layoutlmv3"),k_t.forEach(t),wVo=r(z$e," \u2014 "),$V=n(z$e,"A",{href:!0});var S_t=s($V);AVo=r(S_t,"LayoutLMv3ForTokenClassification"),S_t.forEach(t),yVo=r(z$e," (LayoutLMv3 model)"),z$e.forEach(t),LVo=i(J),oF=n(J,"LI",{});var W$e=s(oF);Qhe=n(W$e,"STRONG",{});var R_t=s(Qhe);xVo=r(R_t,"longformer"),R_t.forEach(t),$Vo=r(W$e," \u2014 "),kV=n(W$e,"A",{href:!0});var P_t=s(kV);kVo=r(P_t,"LongformerForTokenClassification"),P_t.forEach(t),SVo=r(W$e," (Longformer model)"),W$e.forEach(t),RVo=i(J),rF=n(J,"LI",{});var Q$e=s(rF);Hhe=n(Q$e,"STRONG",{});var B_t=s(Hhe);PVo=r(B_t,"megatron-bert"),B_t.forEach(t),BVo=r(Q$e," \u2014 "),SV=n(Q$e,"A",{href:!0});var I_t=s(SV);IVo=r(I_t,"MegatronBertForTokenClassification"),I_t.forEach(t),NVo=r(Q$e," (Megatron-BERT model)"),Q$e.forEach(t),qVo=i(J),tF=n(J,"LI",{});var H$e=s(tF);Uhe=n(H$e,"STRONG",{});var N_t=s(Uhe);jVo=r(N_t,"mobilebert"),N_t.forEach(t),DVo=r(H$e," \u2014 "),RV=n(H$e,"A",{href:!0});var q_t=s(RV);GVo=r(q_t,"MobileBertForTokenClassification"),q_t.forEach(t),OVo=r(H$e," (MobileBERT model)"),H$e.forEach(t),VVo=i(J),aF=n(J,"LI",{});var U$e=s(aF);Jhe=n(U$e,"STRONG",{});var j_t=s(Jhe);XVo=r(j_t,"mpnet"),j_t.forEach(t),zVo=r(U$e," \u2014 "),PV=n(U$e,"A",{href:!0});var D_t=s(PV);WVo=r(D_t,"MPNetForTokenClassification"),D_t.forEach(t),QVo=r(U$e," (MPNet model)"),U$e.forEach(t),HVo=i(J),nF=n(J,"LI",{});var J$e=s(nF);Yhe=n(J$e,"STRONG",{});var G_t=s(Yhe);UVo=r(G_t,"nystromformer"),G_t.forEach(t),JVo=r(J$e," \u2014 "),BV=n(J$e,"A",{href:!0});var O_t=s(BV);YVo=r(O_t,"NystromformerForTokenClassification"),O_t.forEach(t),KVo=r(J$e," (Nystr\xF6mformer model)"),J$e.forEach(t),ZVo=i(J),sF=n(J,"LI",{});var Y$e=s(sF);Khe=n(Y$e,"STRONG",{});var V_t=s(Khe);eXo=r(V_t,"qdqbert"),V_t.forEach(t),oXo=r(Y$e," \u2014 "),IV=n(Y$e,"A",{href:!0});var X_t=s(IV);rXo=r(X_t,"QDQBertForTokenClassification"),X_t.forEach(t),tXo=r(Y$e," (QDQBert model)"),Y$e.forEach(t),aXo=i(J),lF=n(J,"LI",{});var K$e=s(lF);Zhe=n(K$e,"STRONG",{});var z_t=s(Zhe);nXo=r(z_t,"rembert"),z_t.forEach(t),sXo=r(K$e," \u2014 "),NV=n(K$e,"A",{href:!0});var W_t=s(NV);lXo=r(W_t,"RemBertForTokenClassification"),W_t.forEach(t),iXo=r(K$e," (RemBERT model)"),K$e.forEach(t),dXo=i(J),iF=n(J,"LI",{});var Z$e=s(iF);epe=n(Z$e,"STRONG",{});var Q_t=s(epe);cXo=r(Q_t,"roberta"),Q_t.forEach(t),fXo=r(Z$e," \u2014 "),qV=n(Z$e,"A",{href:!0});var H_t=s(qV);mXo=r(H_t,"RobertaForTokenClassification"),H_t.forEach(t),gXo=r(Z$e," (RoBERTa model)"),Z$e.forEach(t),hXo=i(J),dF=n(J,"LI",{});var eke=s(dF);ope=n(eke,"STRONG",{});var U_t=s(ope);pXo=r(U_t,"roformer"),U_t.forEach(t),_Xo=r(eke," \u2014 "),jV=n(eke,"A",{href:!0});var J_t=s(jV);uXo=r(J_t,"RoFormerForTokenClassification"),J_t.forEach(t),bXo=r(eke," (RoFormer model)"),eke.forEach(t),vXo=i(J),cF=n(J,"LI",{});var oke=s(cF);rpe=n(oke,"STRONG",{});var Y_t=s(rpe);FXo=r(Y_t,"squeezebert"),Y_t.forEach(t),TXo=r(oke," \u2014 "),DV=n(oke,"A",{href:!0});var K_t=s(DV);MXo=r(K_t,"SqueezeBertForTokenClassification"),K_t.forEach(t),EXo=r(oke," (SqueezeBERT model)"),oke.forEach(t),CXo=i(J),fF=n(J,"LI",{});var rke=s(fF);tpe=n(rke,"STRONG",{});var Z_t=s(tpe);wXo=r(Z_t,"xlm"),Z_t.forEach(t),AXo=r(rke," \u2014 "),GV=n(rke,"A",{href:!0});var eut=s(GV);yXo=r(eut,"XLMForTokenClassification"),eut.forEach(t),LXo=r(rke," (XLM model)"),rke.forEach(t),xXo=i(J),mF=n(J,"LI",{});var tke=s(mF);ape=n(tke,"STRONG",{});var out=s(ape);$Xo=r(out,"xlm-roberta"),out.forEach(t),kXo=r(tke," \u2014 "),OV=n(tke,"A",{href:!0});var rut=s(OV);SXo=r(rut,"XLMRobertaForTokenClassification"),rut.forEach(t),RXo=r(tke," (XLM-RoBERTa model)"),tke.forEach(t),PXo=i(J),gF=n(J,"LI",{});var ake=s(gF);npe=n(ake,"STRONG",{});var tut=s(npe);BXo=r(tut,"xlm-roberta-xl"),tut.forEach(t),IXo=r(ake," \u2014 "),VV=n(ake,"A",{href:!0});var aut=s(VV);NXo=r(aut,"XLMRobertaXLForTokenClassification"),aut.forEach(t),qXo=r(ake," (XLM-RoBERTa-XL model)"),ake.forEach(t),jXo=i(J),hF=n(J,"LI",{});var nke=s(hF);spe=n(nke,"STRONG",{});var nut=s(spe);DXo=r(nut,"xlnet"),nut.forEach(t),GXo=r(nke," \u2014 "),XV=n(nke,"A",{href:!0});var sut=s(XV);OXo=r(sut,"XLNetForTokenClassification"),sut.forEach(t),VXo=r(nke," (XLNet model)"),nke.forEach(t),XXo=i(J),pF=n(J,"LI",{});var ske=s(pF);lpe=n(ske,"STRONG",{});var lut=s(lpe);zXo=r(lut,"yoso"),lut.forEach(t),WXo=r(ske," \u2014 "),zV=n(ske,"A",{href:!0});var iut=s(zV);QXo=r(iut,"YosoForTokenClassification"),iut.forEach(t),HXo=r(ske," (YOSO model)"),ske.forEach(t),J.forEach(t),UXo=i(da),_F=n(da,"P",{});var lke=s(_F);JXo=r(lke,"The model is set in evaluation mode by default using "),ipe=n(lke,"CODE",{});var dut=s(ipe);YXo=r(dut,"model.eval()"),dut.forEach(t),KXo=r(lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dpe=n(lke,"CODE",{});var cut=s(dpe);ZXo=r(cut,"model.train()"),cut.forEach(t),lke.forEach(t),ezo=i(da),T(uF.$$.fragment,da),da.forEach(t),Ys.forEach(t),Lje=i(f),Zi=n(f,"H2",{class:!0});var SGe=s(Zi);bF=n(SGe,"A",{id:!0,class:!0,href:!0});var fut=s(bF);cpe=n(fut,"SPAN",{});var mut=s(cpe);T(tL.$$.fragment,mut),mut.forEach(t),fut.forEach(t),ozo=i(SGe),fpe=n(SGe,"SPAN",{});var gut=s(fpe);rzo=r(gut,"AutoModelForQuestionAnswering"),gut.forEach(t),SGe.forEach(t),xje=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(aL.$$.fragment,Ks),tzo=i(Ks),ed=n(Ks,"P",{});var lee=s(ed);azo=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WV=n(lee,"A",{href:!0});var hut=s(WV);nzo=r(hut,"from_pretrained()"),hut.forEach(t),szo=r(lee," class method or the "),QV=n(lee,"A",{href:!0});var put=s(QV);lzo=r(put,"from_config()"),put.forEach(t),izo=r(lee,` class
method.`),lee.forEach(t),dzo=i(Ks),nL=n(Ks,"P",{});var RGe=s(nL);czo=r(RGe,"This class cannot be instantiated directly using "),mpe=n(RGe,"CODE",{});var _ut=s(mpe);fzo=r(_ut,"__init__()"),_ut.forEach(t),mzo=r(RGe," (throws an error)."),RGe.forEach(t),gzo=i(Ks),mt=n(Ks,"DIV",{class:!0});var iw=s(mt);T(sL.$$.fragment,iw),hzo=i(iw),gpe=n(iw,"P",{});var uut=s(gpe);pzo=r(uut,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uut.forEach(t),_zo=i(iw),od=n(iw,"P",{});var iee=s(od);uzo=r(iee,`Note:
Loading a model from its configuration file does `),hpe=n(iee,"STRONG",{});var but=s(hpe);bzo=r(but,"not"),but.forEach(t),vzo=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(iee,"A",{href:!0});var vut=s(HV);Fzo=r(vut,"from_pretrained()"),vut.forEach(t),Tzo=r(iee," to load the model weights."),iee.forEach(t),Mzo=i(iw),T(vF.$$.fragment,iw),iw.forEach(t),Ezo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(lL.$$.fragment,ca),Czo=i(ca),ppe=n(ca,"P",{});var Fut=s(ppe);wzo=r(Fut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Fut.forEach(t),Azo=i(ca),Na=n(ca,"P",{});var dw=s(Na);yzo=r(dw,"The model class to instantiate is selected based on the "),_pe=n(dw,"CODE",{});var Tut=s(_pe);Lzo=r(Tut,"model_type"),Tut.forEach(t),xzo=r(dw,` property of the config object (either
passed as an argument or loaded from `),upe=n(dw,"CODE",{});var Mut=s(upe);$zo=r(Mut,"pretrained_model_name_or_path"),Mut.forEach(t),kzo=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bpe=n(dw,"CODE",{});var Eut=s(bpe);Szo=r(Eut,"pretrained_model_name_or_path"),Eut.forEach(t),Rzo=r(dw,":"),dw.forEach(t),Pzo=i(ca),V=n(ca,"UL",{});var X=s(V);FF=n(X,"LI",{});var ike=s(FF);vpe=n(ike,"STRONG",{});var Cut=s(vpe);Bzo=r(Cut,"albert"),Cut.forEach(t),Izo=r(ike," \u2014 "),UV=n(ike,"A",{href:!0});var wut=s(UV);Nzo=r(wut,"AlbertForQuestionAnswering"),wut.forEach(t),qzo=r(ike," (ALBERT model)"),ike.forEach(t),jzo=i(X),TF=n(X,"LI",{});var dke=s(TF);Fpe=n(dke,"STRONG",{});var Aut=s(Fpe);Dzo=r(Aut,"bart"),Aut.forEach(t),Gzo=r(dke," \u2014 "),JV=n(dke,"A",{href:!0});var yut=s(JV);Ozo=r(yut,"BartForQuestionAnswering"),yut.forEach(t),Vzo=r(dke," (BART model)"),dke.forEach(t),Xzo=i(X),MF=n(X,"LI",{});var cke=s(MF);Tpe=n(cke,"STRONG",{});var Lut=s(Tpe);zzo=r(Lut,"bert"),Lut.forEach(t),Wzo=r(cke," \u2014 "),YV=n(cke,"A",{href:!0});var xut=s(YV);Qzo=r(xut,"BertForQuestionAnswering"),xut.forEach(t),Hzo=r(cke," (BERT model)"),cke.forEach(t),Uzo=i(X),EF=n(X,"LI",{});var fke=s(EF);Mpe=n(fke,"STRONG",{});var $ut=s(Mpe);Jzo=r($ut,"big_bird"),$ut.forEach(t),Yzo=r(fke," \u2014 "),KV=n(fke,"A",{href:!0});var kut=s(KV);Kzo=r(kut,"BigBirdForQuestionAnswering"),kut.forEach(t),Zzo=r(fke," (BigBird model)"),fke.forEach(t),eWo=i(X),CF=n(X,"LI",{});var mke=s(CF);Epe=n(mke,"STRONG",{});var Sut=s(Epe);oWo=r(Sut,"bigbird_pegasus"),Sut.forEach(t),rWo=r(mke," \u2014 "),ZV=n(mke,"A",{href:!0});var Rut=s(ZV);tWo=r(Rut,"BigBirdPegasusForQuestionAnswering"),Rut.forEach(t),aWo=r(mke," (BigBird-Pegasus model)"),mke.forEach(t),nWo=i(X),wF=n(X,"LI",{});var gke=s(wF);Cpe=n(gke,"STRONG",{});var Put=s(Cpe);sWo=r(Put,"camembert"),Put.forEach(t),lWo=r(gke," \u2014 "),eX=n(gke,"A",{href:!0});var But=s(eX);iWo=r(But,"CamembertForQuestionAnswering"),But.forEach(t),dWo=r(gke," (CamemBERT model)"),gke.forEach(t),cWo=i(X),AF=n(X,"LI",{});var hke=s(AF);wpe=n(hke,"STRONG",{});var Iut=s(wpe);fWo=r(Iut,"canine"),Iut.forEach(t),mWo=r(hke," \u2014 "),oX=n(hke,"A",{href:!0});var Nut=s(oX);gWo=r(Nut,"CanineForQuestionAnswering"),Nut.forEach(t),hWo=r(hke," (CANINE model)"),hke.forEach(t),pWo=i(X),yF=n(X,"LI",{});var pke=s(yF);Ape=n(pke,"STRONG",{});var qut=s(Ape);_Wo=r(qut,"convbert"),qut.forEach(t),uWo=r(pke," \u2014 "),rX=n(pke,"A",{href:!0});var jut=s(rX);bWo=r(jut,"ConvBertForQuestionAnswering"),jut.forEach(t),vWo=r(pke," (ConvBERT model)"),pke.forEach(t),FWo=i(X),LF=n(X,"LI",{});var _ke=s(LF);ype=n(_ke,"STRONG",{});var Dut=s(ype);TWo=r(Dut,"data2vec-text"),Dut.forEach(t),MWo=r(_ke," \u2014 "),tX=n(_ke,"A",{href:!0});var Gut=s(tX);EWo=r(Gut,"Data2VecTextForQuestionAnswering"),Gut.forEach(t),CWo=r(_ke," (Data2VecText model)"),_ke.forEach(t),wWo=i(X),xF=n(X,"LI",{});var uke=s(xF);Lpe=n(uke,"STRONG",{});var Out=s(Lpe);AWo=r(Out,"deberta"),Out.forEach(t),yWo=r(uke," \u2014 "),aX=n(uke,"A",{href:!0});var Vut=s(aX);LWo=r(Vut,"DebertaForQuestionAnswering"),Vut.forEach(t),xWo=r(uke," (DeBERTa model)"),uke.forEach(t),$Wo=i(X),$F=n(X,"LI",{});var bke=s($F);xpe=n(bke,"STRONG",{});var Xut=s(xpe);kWo=r(Xut,"deberta-v2"),Xut.forEach(t),SWo=r(bke," \u2014 "),nX=n(bke,"A",{href:!0});var zut=s(nX);RWo=r(zut,"DebertaV2ForQuestionAnswering"),zut.forEach(t),PWo=r(bke," (DeBERTa-v2 model)"),bke.forEach(t),BWo=i(X),kF=n(X,"LI",{});var vke=s(kF);$pe=n(vke,"STRONG",{});var Wut=s($pe);IWo=r(Wut,"distilbert"),Wut.forEach(t),NWo=r(vke," \u2014 "),sX=n(vke,"A",{href:!0});var Qut=s(sX);qWo=r(Qut,"DistilBertForQuestionAnswering"),Qut.forEach(t),jWo=r(vke," (DistilBERT model)"),vke.forEach(t),DWo=i(X),SF=n(X,"LI",{});var Fke=s(SF);kpe=n(Fke,"STRONG",{});var Hut=s(kpe);GWo=r(Hut,"electra"),Hut.forEach(t),OWo=r(Fke," \u2014 "),lX=n(Fke,"A",{href:!0});var Uut=s(lX);VWo=r(Uut,"ElectraForQuestionAnswering"),Uut.forEach(t),XWo=r(Fke," (ELECTRA model)"),Fke.forEach(t),zWo=i(X),RF=n(X,"LI",{});var Tke=s(RF);Spe=n(Tke,"STRONG",{});var Jut=s(Spe);WWo=r(Jut,"flaubert"),Jut.forEach(t),QWo=r(Tke," \u2014 "),iX=n(Tke,"A",{href:!0});var Yut=s(iX);HWo=r(Yut,"FlaubertForQuestionAnsweringSimple"),Yut.forEach(t),UWo=r(Tke," (FlauBERT model)"),Tke.forEach(t),JWo=i(X),PF=n(X,"LI",{});var Mke=s(PF);Rpe=n(Mke,"STRONG",{});var Kut=s(Rpe);YWo=r(Kut,"fnet"),Kut.forEach(t),KWo=r(Mke," \u2014 "),dX=n(Mke,"A",{href:!0});var Zut=s(dX);ZWo=r(Zut,"FNetForQuestionAnswering"),Zut.forEach(t),eQo=r(Mke," (FNet model)"),Mke.forEach(t),oQo=i(X),BF=n(X,"LI",{});var Eke=s(BF);Ppe=n(Eke,"STRONG",{});var e2t=s(Ppe);rQo=r(e2t,"funnel"),e2t.forEach(t),tQo=r(Eke," \u2014 "),cX=n(Eke,"A",{href:!0});var o2t=s(cX);aQo=r(o2t,"FunnelForQuestionAnswering"),o2t.forEach(t),nQo=r(Eke," (Funnel Transformer model)"),Eke.forEach(t),sQo=i(X),IF=n(X,"LI",{});var Cke=s(IF);Bpe=n(Cke,"STRONG",{});var r2t=s(Bpe);lQo=r(r2t,"gptj"),r2t.forEach(t),iQo=r(Cke," \u2014 "),fX=n(Cke,"A",{href:!0});var t2t=s(fX);dQo=r(t2t,"GPTJForQuestionAnswering"),t2t.forEach(t),cQo=r(Cke," (GPT-J model)"),Cke.forEach(t),fQo=i(X),NF=n(X,"LI",{});var wke=s(NF);Ipe=n(wke,"STRONG",{});var a2t=s(Ipe);mQo=r(a2t,"ibert"),a2t.forEach(t),gQo=r(wke," \u2014 "),mX=n(wke,"A",{href:!0});var n2t=s(mX);hQo=r(n2t,"IBertForQuestionAnswering"),n2t.forEach(t),pQo=r(wke," (I-BERT model)"),wke.forEach(t),_Qo=i(X),qF=n(X,"LI",{});var Ake=s(qF);Npe=n(Ake,"STRONG",{});var s2t=s(Npe);uQo=r(s2t,"layoutlmv2"),s2t.forEach(t),bQo=r(Ake," \u2014 "),gX=n(Ake,"A",{href:!0});var l2t=s(gX);vQo=r(l2t,"LayoutLMv2ForQuestionAnswering"),l2t.forEach(t),FQo=r(Ake," (LayoutLMv2 model)"),Ake.forEach(t),TQo=i(X),jF=n(X,"LI",{});var yke=s(jF);qpe=n(yke,"STRONG",{});var i2t=s(qpe);MQo=r(i2t,"layoutlmv3"),i2t.forEach(t),EQo=r(yke," \u2014 "),hX=n(yke,"A",{href:!0});var d2t=s(hX);CQo=r(d2t,"LayoutLMv3ForQuestionAnswering"),d2t.forEach(t),wQo=r(yke," (LayoutLMv3 model)"),yke.forEach(t),AQo=i(X),DF=n(X,"LI",{});var Lke=s(DF);jpe=n(Lke,"STRONG",{});var c2t=s(jpe);yQo=r(c2t,"led"),c2t.forEach(t),LQo=r(Lke," \u2014 "),pX=n(Lke,"A",{href:!0});var f2t=s(pX);xQo=r(f2t,"LEDForQuestionAnswering"),f2t.forEach(t),$Qo=r(Lke," (LED model)"),Lke.forEach(t),kQo=i(X),GF=n(X,"LI",{});var xke=s(GF);Dpe=n(xke,"STRONG",{});var m2t=s(Dpe);SQo=r(m2t,"longformer"),m2t.forEach(t),RQo=r(xke," \u2014 "),_X=n(xke,"A",{href:!0});var g2t=s(_X);PQo=r(g2t,"LongformerForQuestionAnswering"),g2t.forEach(t),BQo=r(xke," (Longformer model)"),xke.forEach(t),IQo=i(X),OF=n(X,"LI",{});var $ke=s(OF);Gpe=n($ke,"STRONG",{});var h2t=s(Gpe);NQo=r(h2t,"lxmert"),h2t.forEach(t),qQo=r($ke," \u2014 "),uX=n($ke,"A",{href:!0});var p2t=s(uX);jQo=r(p2t,"LxmertForQuestionAnswering"),p2t.forEach(t),DQo=r($ke," (LXMERT model)"),$ke.forEach(t),GQo=i(X),VF=n(X,"LI",{});var kke=s(VF);Ope=n(kke,"STRONG",{});var _2t=s(Ope);OQo=r(_2t,"mbart"),_2t.forEach(t),VQo=r(kke," \u2014 "),bX=n(kke,"A",{href:!0});var u2t=s(bX);XQo=r(u2t,"MBartForQuestionAnswering"),u2t.forEach(t),zQo=r(kke," (mBART model)"),kke.forEach(t),WQo=i(X),XF=n(X,"LI",{});var Ske=s(XF);Vpe=n(Ske,"STRONG",{});var b2t=s(Vpe);QQo=r(b2t,"megatron-bert"),b2t.forEach(t),HQo=r(Ske," \u2014 "),vX=n(Ske,"A",{href:!0});var v2t=s(vX);UQo=r(v2t,"MegatronBertForQuestionAnswering"),v2t.forEach(t),JQo=r(Ske," (Megatron-BERT model)"),Ske.forEach(t),YQo=i(X),zF=n(X,"LI",{});var Rke=s(zF);Xpe=n(Rke,"STRONG",{});var F2t=s(Xpe);KQo=r(F2t,"mobilebert"),F2t.forEach(t),ZQo=r(Rke," \u2014 "),FX=n(Rke,"A",{href:!0});var T2t=s(FX);eHo=r(T2t,"MobileBertForQuestionAnswering"),T2t.forEach(t),oHo=r(Rke," (MobileBERT model)"),Rke.forEach(t),rHo=i(X),WF=n(X,"LI",{});var Pke=s(WF);zpe=n(Pke,"STRONG",{});var M2t=s(zpe);tHo=r(M2t,"mpnet"),M2t.forEach(t),aHo=r(Pke," \u2014 "),TX=n(Pke,"A",{href:!0});var E2t=s(TX);nHo=r(E2t,"MPNetForQuestionAnswering"),E2t.forEach(t),sHo=r(Pke," (MPNet model)"),Pke.forEach(t),lHo=i(X),QF=n(X,"LI",{});var Bke=s(QF);Wpe=n(Bke,"STRONG",{});var C2t=s(Wpe);iHo=r(C2t,"nystromformer"),C2t.forEach(t),dHo=r(Bke," \u2014 "),MX=n(Bke,"A",{href:!0});var w2t=s(MX);cHo=r(w2t,"NystromformerForQuestionAnswering"),w2t.forEach(t),fHo=r(Bke," (Nystr\xF6mformer model)"),Bke.forEach(t),mHo=i(X),HF=n(X,"LI",{});var Ike=s(HF);Qpe=n(Ike,"STRONG",{});var A2t=s(Qpe);gHo=r(A2t,"qdqbert"),A2t.forEach(t),hHo=r(Ike," \u2014 "),EX=n(Ike,"A",{href:!0});var y2t=s(EX);pHo=r(y2t,"QDQBertForQuestionAnswering"),y2t.forEach(t),_Ho=r(Ike," (QDQBert model)"),Ike.forEach(t),uHo=i(X),UF=n(X,"LI",{});var Nke=s(UF);Hpe=n(Nke,"STRONG",{});var L2t=s(Hpe);bHo=r(L2t,"reformer"),L2t.forEach(t),vHo=r(Nke," \u2014 "),CX=n(Nke,"A",{href:!0});var x2t=s(CX);FHo=r(x2t,"ReformerForQuestionAnswering"),x2t.forEach(t),THo=r(Nke," (Reformer model)"),Nke.forEach(t),MHo=i(X),JF=n(X,"LI",{});var qke=s(JF);Upe=n(qke,"STRONG",{});var $2t=s(Upe);EHo=r($2t,"rembert"),$2t.forEach(t),CHo=r(qke," \u2014 "),wX=n(qke,"A",{href:!0});var k2t=s(wX);wHo=r(k2t,"RemBertForQuestionAnswering"),k2t.forEach(t),AHo=r(qke," (RemBERT model)"),qke.forEach(t),yHo=i(X),YF=n(X,"LI",{});var jke=s(YF);Jpe=n(jke,"STRONG",{});var S2t=s(Jpe);LHo=r(S2t,"roberta"),S2t.forEach(t),xHo=r(jke," \u2014 "),AX=n(jke,"A",{href:!0});var R2t=s(AX);$Ho=r(R2t,"RobertaForQuestionAnswering"),R2t.forEach(t),kHo=r(jke," (RoBERTa model)"),jke.forEach(t),SHo=i(X),KF=n(X,"LI",{});var Dke=s(KF);Ype=n(Dke,"STRONG",{});var P2t=s(Ype);RHo=r(P2t,"roformer"),P2t.forEach(t),PHo=r(Dke," \u2014 "),yX=n(Dke,"A",{href:!0});var B2t=s(yX);BHo=r(B2t,"RoFormerForQuestionAnswering"),B2t.forEach(t),IHo=r(Dke," (RoFormer model)"),Dke.forEach(t),NHo=i(X),ZF=n(X,"LI",{});var Gke=s(ZF);Kpe=n(Gke,"STRONG",{});var I2t=s(Kpe);qHo=r(I2t,"splinter"),I2t.forEach(t),jHo=r(Gke," \u2014 "),LX=n(Gke,"A",{href:!0});var N2t=s(LX);DHo=r(N2t,"SplinterForQuestionAnswering"),N2t.forEach(t),GHo=r(Gke," (Splinter model)"),Gke.forEach(t),OHo=i(X),e6=n(X,"LI",{});var Oke=s(e6);Zpe=n(Oke,"STRONG",{});var q2t=s(Zpe);VHo=r(q2t,"squeezebert"),q2t.forEach(t),XHo=r(Oke," \u2014 "),xX=n(Oke,"A",{href:!0});var j2t=s(xX);zHo=r(j2t,"SqueezeBertForQuestionAnswering"),j2t.forEach(t),WHo=r(Oke," (SqueezeBERT model)"),Oke.forEach(t),QHo=i(X),o6=n(X,"LI",{});var Vke=s(o6);e_e=n(Vke,"STRONG",{});var D2t=s(e_e);HHo=r(D2t,"xlm"),D2t.forEach(t),UHo=r(Vke," \u2014 "),$X=n(Vke,"A",{href:!0});var G2t=s($X);JHo=r(G2t,"XLMForQuestionAnsweringSimple"),G2t.forEach(t),YHo=r(Vke," (XLM model)"),Vke.forEach(t),KHo=i(X),r6=n(X,"LI",{});var Xke=s(r6);o_e=n(Xke,"STRONG",{});var O2t=s(o_e);ZHo=r(O2t,"xlm-roberta"),O2t.forEach(t),eUo=r(Xke," \u2014 "),kX=n(Xke,"A",{href:!0});var V2t=s(kX);oUo=r(V2t,"XLMRobertaForQuestionAnswering"),V2t.forEach(t),rUo=r(Xke," (XLM-RoBERTa model)"),Xke.forEach(t),tUo=i(X),t6=n(X,"LI",{});var zke=s(t6);r_e=n(zke,"STRONG",{});var X2t=s(r_e);aUo=r(X2t,"xlm-roberta-xl"),X2t.forEach(t),nUo=r(zke," \u2014 "),SX=n(zke,"A",{href:!0});var z2t=s(SX);sUo=r(z2t,"XLMRobertaXLForQuestionAnswering"),z2t.forEach(t),lUo=r(zke," (XLM-RoBERTa-XL model)"),zke.forEach(t),iUo=i(X),a6=n(X,"LI",{});var Wke=s(a6);t_e=n(Wke,"STRONG",{});var W2t=s(t_e);dUo=r(W2t,"xlnet"),W2t.forEach(t),cUo=r(Wke," \u2014 "),RX=n(Wke,"A",{href:!0});var Q2t=s(RX);fUo=r(Q2t,"XLNetForQuestionAnsweringSimple"),Q2t.forEach(t),mUo=r(Wke," (XLNet model)"),Wke.forEach(t),gUo=i(X),n6=n(X,"LI",{});var Qke=s(n6);a_e=n(Qke,"STRONG",{});var H2t=s(a_e);hUo=r(H2t,"yoso"),H2t.forEach(t),pUo=r(Qke," \u2014 "),PX=n(Qke,"A",{href:!0});var U2t=s(PX);_Uo=r(U2t,"YosoForQuestionAnswering"),U2t.forEach(t),uUo=r(Qke," (YOSO model)"),Qke.forEach(t),X.forEach(t),bUo=i(ca),s6=n(ca,"P",{});var Hke=s(s6);vUo=r(Hke,"The model is set in evaluation mode by default using "),n_e=n(Hke,"CODE",{});var J2t=s(n_e);FUo=r(J2t,"model.eval()"),J2t.forEach(t),TUo=r(Hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=n(Hke,"CODE",{});var Y2t=s(s_e);MUo=r(Y2t,"model.train()"),Y2t.forEach(t),Hke.forEach(t),EUo=i(ca),T(l6.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),$je=i(f),rd=n(f,"H2",{class:!0});var PGe=s(rd);i6=n(PGe,"A",{id:!0,class:!0,href:!0});var K2t=s(i6);l_e=n(K2t,"SPAN",{});var Z2t=s(l_e);T(iL.$$.fragment,Z2t),Z2t.forEach(t),K2t.forEach(t),CUo=i(PGe),i_e=n(PGe,"SPAN",{});var e1t=s(i_e);wUo=r(e1t,"AutoModelForTableQuestionAnswering"),e1t.forEach(t),PGe.forEach(t),kje=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(dL.$$.fragment,Zs),AUo=i(Zs),td=n(Zs,"P",{});var dee=s(td);yUo=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BX=n(dee,"A",{href:!0});var o1t=s(BX);LUo=r(o1t,"from_pretrained()"),o1t.forEach(t),xUo=r(dee," class method or the "),IX=n(dee,"A",{href:!0});var r1t=s(IX);$Uo=r(r1t,"from_config()"),r1t.forEach(t),kUo=r(dee,` class
method.`),dee.forEach(t),SUo=i(Zs),cL=n(Zs,"P",{});var BGe=s(cL);RUo=r(BGe,"This class cannot be instantiated directly using "),d_e=n(BGe,"CODE",{});var t1t=s(d_e);PUo=r(t1t,"__init__()"),t1t.forEach(t),BUo=r(BGe," (throws an error)."),BGe.forEach(t),IUo=i(Zs),gt=n(Zs,"DIV",{class:!0});var cw=s(gt);T(fL.$$.fragment,cw),NUo=i(cw),c_e=n(cw,"P",{});var a1t=s(c_e);qUo=r(a1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),a1t.forEach(t),jUo=i(cw),ad=n(cw,"P",{});var cee=s(ad);DUo=r(cee,`Note:
Loading a model from its configuration file does `),f_e=n(cee,"STRONG",{});var n1t=s(f_e);GUo=r(n1t,"not"),n1t.forEach(t),OUo=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(cee,"A",{href:!0});var s1t=s(NX);VUo=r(s1t,"from_pretrained()"),s1t.forEach(t),XUo=r(cee," to load the model weights."),cee.forEach(t),zUo=i(cw),T(d6.$$.fragment,cw),cw.forEach(t),WUo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(mL.$$.fragment,fa),QUo=i(fa),m_e=n(fa,"P",{});var l1t=s(m_e);HUo=r(l1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),l1t.forEach(t),UUo=i(fa),qa=n(fa,"P",{});var fw=s(qa);JUo=r(fw,"The model class to instantiate is selected based on the "),g_e=n(fw,"CODE",{});var i1t=s(g_e);YUo=r(i1t,"model_type"),i1t.forEach(t),KUo=r(fw,` property of the config object (either
passed as an argument or loaded from `),h_e=n(fw,"CODE",{});var d1t=s(h_e);ZUo=r(d1t,"pretrained_model_name_or_path"),d1t.forEach(t),eJo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=n(fw,"CODE",{});var c1t=s(p_e);oJo=r(c1t,"pretrained_model_name_or_path"),c1t.forEach(t),rJo=r(fw,":"),fw.forEach(t),tJo=i(fa),__e=n(fa,"UL",{});var f1t=s(__e);c6=n(f1t,"LI",{});var Uke=s(c6);u_e=n(Uke,"STRONG",{});var m1t=s(u_e);aJo=r(m1t,"tapas"),m1t.forEach(t),nJo=r(Uke," \u2014 "),qX=n(Uke,"A",{href:!0});var g1t=s(qX);sJo=r(g1t,"TapasForQuestionAnswering"),g1t.forEach(t),lJo=r(Uke," (TAPAS model)"),Uke.forEach(t),f1t.forEach(t),iJo=i(fa),f6=n(fa,"P",{});var Jke=s(f6);dJo=r(Jke,"The model is set in evaluation mode by default using "),b_e=n(Jke,"CODE",{});var h1t=s(b_e);cJo=r(h1t,"model.eval()"),h1t.forEach(t),fJo=r(Jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=n(Jke,"CODE",{});var p1t=s(v_e);mJo=r(p1t,"model.train()"),p1t.forEach(t),Jke.forEach(t),gJo=i(fa),T(m6.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),Sje=i(f),nd=n(f,"H2",{class:!0});var IGe=s(nd);g6=n(IGe,"A",{id:!0,class:!0,href:!0});var _1t=s(g6);F_e=n(_1t,"SPAN",{});var u1t=s(F_e);T(gL.$$.fragment,u1t),u1t.forEach(t),_1t.forEach(t),hJo=i(IGe),T_e=n(IGe,"SPAN",{});var b1t=s(T_e);pJo=r(b1t,"AutoModelForImageClassification"),b1t.forEach(t),IGe.forEach(t),Rje=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(hL.$$.fragment,el),_Jo=i(el),sd=n(el,"P",{});var fee=s(sd);uJo=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jX=n(fee,"A",{href:!0});var v1t=s(jX);bJo=r(v1t,"from_pretrained()"),v1t.forEach(t),vJo=r(fee," class method or the "),DX=n(fee,"A",{href:!0});var F1t=s(DX);FJo=r(F1t,"from_config()"),F1t.forEach(t),TJo=r(fee,` class
method.`),fee.forEach(t),MJo=i(el),pL=n(el,"P",{});var NGe=s(pL);EJo=r(NGe,"This class cannot be instantiated directly using "),M_e=n(NGe,"CODE",{});var T1t=s(M_e);CJo=r(T1t,"__init__()"),T1t.forEach(t),wJo=r(NGe," (throws an error)."),NGe.forEach(t),AJo=i(el),ht=n(el,"DIV",{class:!0});var mw=s(ht);T(_L.$$.fragment,mw),yJo=i(mw),E_e=n(mw,"P",{});var M1t=s(E_e);LJo=r(M1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),M1t.forEach(t),xJo=i(mw),ld=n(mw,"P",{});var mee=s(ld);$Jo=r(mee,`Note:
Loading a model from its configuration file does `),C_e=n(mee,"STRONG",{});var E1t=s(C_e);kJo=r(E1t,"not"),E1t.forEach(t),SJo=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=n(mee,"A",{href:!0});var C1t=s(GX);RJo=r(C1t,"from_pretrained()"),C1t.forEach(t),PJo=r(mee," to load the model weights."),mee.forEach(t),BJo=i(mw),T(h6.$$.fragment,mw),mw.forEach(t),IJo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(uL.$$.fragment,ma),NJo=i(ma),w_e=n(ma,"P",{});var w1t=s(w_e);qJo=r(w1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),w1t.forEach(t),jJo=i(ma),ja=n(ma,"P",{});var gw=s(ja);DJo=r(gw,"The model class to instantiate is selected based on the "),A_e=n(gw,"CODE",{});var A1t=s(A_e);GJo=r(A1t,"model_type"),A1t.forEach(t),OJo=r(gw,` property of the config object (either
passed as an argument or loaded from `),y_e=n(gw,"CODE",{});var y1t=s(y_e);VJo=r(y1t,"pretrained_model_name_or_path"),y1t.forEach(t),XJo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=n(gw,"CODE",{});var L1t=s(L_e);zJo=r(L1t,"pretrained_model_name_or_path"),L1t.forEach(t),WJo=r(gw,":"),gw.forEach(t),QJo=i(ma),ve=n(ma,"UL",{});var Te=s(ve);p6=n(Te,"LI",{});var Yke=s(p6);x_e=n(Yke,"STRONG",{});var x1t=s(x_e);HJo=r(x1t,"beit"),x1t.forEach(t),UJo=r(Yke," \u2014 "),OX=n(Yke,"A",{href:!0});var $1t=s(OX);JJo=r($1t,"BeitForImageClassification"),$1t.forEach(t),YJo=r(Yke," (BEiT model)"),Yke.forEach(t),KJo=i(Te),_6=n(Te,"LI",{});var Kke=s(_6);$_e=n(Kke,"STRONG",{});var k1t=s($_e);ZJo=r(k1t,"convnext"),k1t.forEach(t),eYo=r(Kke," \u2014 "),VX=n(Kke,"A",{href:!0});var S1t=s(VX);oYo=r(S1t,"ConvNextForImageClassification"),S1t.forEach(t),rYo=r(Kke," (ConvNeXT model)"),Kke.forEach(t),tYo=i(Te),u6=n(Te,"LI",{});var Zke=s(u6);k_e=n(Zke,"STRONG",{});var R1t=s(k_e);aYo=r(R1t,"cvt"),R1t.forEach(t),nYo=r(Zke," \u2014 "),XX=n(Zke,"A",{href:!0});var P1t=s(XX);sYo=r(P1t,"CvtForImageClassification"),P1t.forEach(t),lYo=r(Zke," (CvT model)"),Zke.forEach(t),iYo=i(Te),b6=n(Te,"LI",{});var eSe=s(b6);S_e=n(eSe,"STRONG",{});var B1t=s(S_e);dYo=r(B1t,"data2vec-vision"),B1t.forEach(t),cYo=r(eSe," \u2014 "),zX=n(eSe,"A",{href:!0});var I1t=s(zX);fYo=r(I1t,"Data2VecVisionForImageClassification"),I1t.forEach(t),mYo=r(eSe," (Data2VecVision model)"),eSe.forEach(t),gYo=i(Te),Bs=n(Te,"LI",{});var rk=s(Bs);R_e=n(rk,"STRONG",{});var N1t=s(R_e);hYo=r(N1t,"deit"),N1t.forEach(t),pYo=r(rk," \u2014 "),WX=n(rk,"A",{href:!0});var q1t=s(WX);_Yo=r(q1t,"DeiTForImageClassification"),q1t.forEach(t),uYo=r(rk," or "),QX=n(rk,"A",{href:!0});var j1t=s(QX);bYo=r(j1t,"DeiTForImageClassificationWithTeacher"),j1t.forEach(t),vYo=r(rk," (DeiT model)"),rk.forEach(t),FYo=i(Te),v6=n(Te,"LI",{});var oSe=s(v6);P_e=n(oSe,"STRONG",{});var D1t=s(P_e);TYo=r(D1t,"imagegpt"),D1t.forEach(t),MYo=r(oSe," \u2014 "),HX=n(oSe,"A",{href:!0});var G1t=s(HX);EYo=r(G1t,"ImageGPTForImageClassification"),G1t.forEach(t),CYo=r(oSe," (ImageGPT model)"),oSe.forEach(t),wYo=i(Te),Is=n(Te,"LI",{});var tk=s(Is);B_e=n(tk,"STRONG",{});var O1t=s(B_e);AYo=r(O1t,"levit"),O1t.forEach(t),yYo=r(tk," \u2014 "),UX=n(tk,"A",{href:!0});var V1t=s(UX);LYo=r(V1t,"LevitForImageClassification"),V1t.forEach(t),xYo=r(tk," or "),JX=n(tk,"A",{href:!0});var X1t=s(JX);$Yo=r(X1t,"LevitForImageClassificationWithTeacher"),X1t.forEach(t),kYo=r(tk," (LeViT model)"),tk.forEach(t),SYo=i(Te),pt=n(Te,"LI",{});var pf=s(pt);I_e=n(pf,"STRONG",{});var z1t=s(I_e);RYo=r(z1t,"perceiver"),z1t.forEach(t),PYo=r(pf," \u2014 "),YX=n(pf,"A",{href:!0});var W1t=s(YX);BYo=r(W1t,"PerceiverForImageClassificationLearned"),W1t.forEach(t),IYo=r(pf," or "),KX=n(pf,"A",{href:!0});var Q1t=s(KX);NYo=r(Q1t,"PerceiverForImageClassificationFourier"),Q1t.forEach(t),qYo=r(pf," or "),ZX=n(pf,"A",{href:!0});var H1t=s(ZX);jYo=r(H1t,"PerceiverForImageClassificationConvProcessing"),H1t.forEach(t),DYo=r(pf," (Perceiver model)"),pf.forEach(t),GYo=i(Te),F6=n(Te,"LI",{});var rSe=s(F6);N_e=n(rSe,"STRONG",{});var U1t=s(N_e);OYo=r(U1t,"poolformer"),U1t.forEach(t),VYo=r(rSe," \u2014 "),ez=n(rSe,"A",{href:!0});var J1t=s(ez);XYo=r(J1t,"PoolFormerForImageClassification"),J1t.forEach(t),zYo=r(rSe," (PoolFormer model)"),rSe.forEach(t),WYo=i(Te),T6=n(Te,"LI",{});var tSe=s(T6);q_e=n(tSe,"STRONG",{});var Y1t=s(q_e);QYo=r(Y1t,"regnet"),Y1t.forEach(t),HYo=r(tSe," \u2014 "),oz=n(tSe,"A",{href:!0});var K1t=s(oz);UYo=r(K1t,"RegNetForImageClassification"),K1t.forEach(t),JYo=r(tSe," (RegNet model)"),tSe.forEach(t),YYo=i(Te),M6=n(Te,"LI",{});var aSe=s(M6);j_e=n(aSe,"STRONG",{});var Z1t=s(j_e);KYo=r(Z1t,"resnet"),Z1t.forEach(t),ZYo=r(aSe," \u2014 "),rz=n(aSe,"A",{href:!0});var ebt=s(rz);eKo=r(ebt,"ResNetForImageClassification"),ebt.forEach(t),oKo=r(aSe," (ResNet model)"),aSe.forEach(t),rKo=i(Te),E6=n(Te,"LI",{});var nSe=s(E6);D_e=n(nSe,"STRONG",{});var obt=s(D_e);tKo=r(obt,"segformer"),obt.forEach(t),aKo=r(nSe," \u2014 "),tz=n(nSe,"A",{href:!0});var rbt=s(tz);nKo=r(rbt,"SegformerForImageClassification"),rbt.forEach(t),sKo=r(nSe," (SegFormer model)"),nSe.forEach(t),lKo=i(Te),C6=n(Te,"LI",{});var sSe=s(C6);G_e=n(sSe,"STRONG",{});var tbt=s(G_e);iKo=r(tbt,"swin"),tbt.forEach(t),dKo=r(sSe," \u2014 "),az=n(sSe,"A",{href:!0});var abt=s(az);cKo=r(abt,"SwinForImageClassification"),abt.forEach(t),fKo=r(sSe," (Swin Transformer model)"),sSe.forEach(t),mKo=i(Te),w6=n(Te,"LI",{});var lSe=s(w6);O_e=n(lSe,"STRONG",{});var nbt=s(O_e);gKo=r(nbt,"van"),nbt.forEach(t),hKo=r(lSe," \u2014 "),nz=n(lSe,"A",{href:!0});var sbt=s(nz);pKo=r(sbt,"VanForImageClassification"),sbt.forEach(t),_Ko=r(lSe," (VAN model)"),lSe.forEach(t),uKo=i(Te),A6=n(Te,"LI",{});var iSe=s(A6);V_e=n(iSe,"STRONG",{});var lbt=s(V_e);bKo=r(lbt,"vit"),lbt.forEach(t),vKo=r(iSe," \u2014 "),sz=n(iSe,"A",{href:!0});var ibt=s(sz);FKo=r(ibt,"ViTForImageClassification"),ibt.forEach(t),TKo=r(iSe," (ViT model)"),iSe.forEach(t),Te.forEach(t),MKo=i(ma),y6=n(ma,"P",{});var dSe=s(y6);EKo=r(dSe,"The model is set in evaluation mode by default using "),X_e=n(dSe,"CODE",{});var dbt=s(X_e);CKo=r(dbt,"model.eval()"),dbt.forEach(t),wKo=r(dSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=n(dSe,"CODE",{});var cbt=s(z_e);AKo=r(cbt,"model.train()"),cbt.forEach(t),dSe.forEach(t),yKo=i(ma),T(L6.$$.fragment,ma),ma.forEach(t),el.forEach(t),Pje=i(f),id=n(f,"H2",{class:!0});var qGe=s(id);x6=n(qGe,"A",{id:!0,class:!0,href:!0});var fbt=s(x6);W_e=n(fbt,"SPAN",{});var mbt=s(W_e);T(bL.$$.fragment,mbt),mbt.forEach(t),fbt.forEach(t),LKo=i(qGe),Q_e=n(qGe,"SPAN",{});var gbt=s(Q_e);xKo=r(gbt,"AutoModelForVision2Seq"),gbt.forEach(t),qGe.forEach(t),Bje=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(vL.$$.fragment,ol),$Ko=i(ol),dd=n(ol,"P",{});var gee=s(dd);kKo=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lz=n(gee,"A",{href:!0});var hbt=s(lz);SKo=r(hbt,"from_pretrained()"),hbt.forEach(t),RKo=r(gee," class method or the "),iz=n(gee,"A",{href:!0});var pbt=s(iz);PKo=r(pbt,"from_config()"),pbt.forEach(t),BKo=r(gee,` class
method.`),gee.forEach(t),IKo=i(ol),FL=n(ol,"P",{});var jGe=s(FL);NKo=r(jGe,"This class cannot be instantiated directly using "),H_e=n(jGe,"CODE",{});var _bt=s(H_e);qKo=r(_bt,"__init__()"),_bt.forEach(t),jKo=r(jGe," (throws an error)."),jGe.forEach(t),DKo=i(ol),_t=n(ol,"DIV",{class:!0});var hw=s(_t);T(TL.$$.fragment,hw),GKo=i(hw),U_e=n(hw,"P",{});var ubt=s(U_e);OKo=r(ubt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ubt.forEach(t),VKo=i(hw),cd=n(hw,"P",{});var hee=s(cd);XKo=r(hee,`Note:
Loading a model from its configuration file does `),J_e=n(hee,"STRONG",{});var bbt=s(J_e);zKo=r(bbt,"not"),bbt.forEach(t),WKo=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=n(hee,"A",{href:!0});var vbt=s(dz);QKo=r(vbt,"from_pretrained()"),vbt.forEach(t),HKo=r(hee," to load the model weights."),hee.forEach(t),UKo=i(hw),T($6.$$.fragment,hw),hw.forEach(t),JKo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(ML.$$.fragment,ga),YKo=i(ga),Y_e=n(ga,"P",{});var Fbt=s(Y_e);KKo=r(Fbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Fbt.forEach(t),ZKo=i(ga),Da=n(ga,"P",{});var pw=s(Da);eZo=r(pw,"The model class to instantiate is selected based on the "),K_e=n(pw,"CODE",{});var Tbt=s(K_e);oZo=r(Tbt,"model_type"),Tbt.forEach(t),rZo=r(pw,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(pw,"CODE",{});var Mbt=s(Z_e);tZo=r(Mbt,"pretrained_model_name_or_path"),Mbt.forEach(t),aZo=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(pw,"CODE",{});var Ebt=s(eue);nZo=r(Ebt,"pretrained_model_name_or_path"),Ebt.forEach(t),sZo=r(pw,":"),pw.forEach(t),lZo=i(ga),oue=n(ga,"UL",{});var Cbt=s(oue);k6=n(Cbt,"LI",{});var cSe=s(k6);rue=n(cSe,"STRONG",{});var wbt=s(rue);iZo=r(wbt,"vision-encoder-decoder"),wbt.forEach(t),dZo=r(cSe," \u2014 "),cz=n(cSe,"A",{href:!0});var Abt=s(cz);cZo=r(Abt,"VisionEncoderDecoderModel"),Abt.forEach(t),fZo=r(cSe," (Vision Encoder decoder model)"),cSe.forEach(t),Cbt.forEach(t),mZo=i(ga),S6=n(ga,"P",{});var fSe=s(S6);gZo=r(fSe,"The model is set in evaluation mode by default using "),tue=n(fSe,"CODE",{});var ybt=s(tue);hZo=r(ybt,"model.eval()"),ybt.forEach(t),pZo=r(fSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(fSe,"CODE",{});var Lbt=s(aue);_Zo=r(Lbt,"model.train()"),Lbt.forEach(t),fSe.forEach(t),uZo=i(ga),T(R6.$$.fragment,ga),ga.forEach(t),ol.forEach(t),Ije=i(f),fd=n(f,"H2",{class:!0});var DGe=s(fd);P6=n(DGe,"A",{id:!0,class:!0,href:!0});var xbt=s(P6);nue=n(xbt,"SPAN",{});var $bt=s(nue);T(EL.$$.fragment,$bt),$bt.forEach(t),xbt.forEach(t),bZo=i(DGe),sue=n(DGe,"SPAN",{});var kbt=s(sue);vZo=r(kbt,"AutoModelForAudioClassification"),kbt.forEach(t),DGe.forEach(t),Nje=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(CL.$$.fragment,rl),FZo=i(rl),md=n(rl,"P",{});var pee=s(md);TZo=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),fz=n(pee,"A",{href:!0});var Sbt=s(fz);MZo=r(Sbt,"from_pretrained()"),Sbt.forEach(t),EZo=r(pee," class method or the "),mz=n(pee,"A",{href:!0});var Rbt=s(mz);CZo=r(Rbt,"from_config()"),Rbt.forEach(t),wZo=r(pee,` class
method.`),pee.forEach(t),AZo=i(rl),wL=n(rl,"P",{});var GGe=s(wL);yZo=r(GGe,"This class cannot be instantiated directly using "),lue=n(GGe,"CODE",{});var Pbt=s(lue);LZo=r(Pbt,"__init__()"),Pbt.forEach(t),xZo=r(GGe," (throws an error)."),GGe.forEach(t),$Zo=i(rl),ut=n(rl,"DIV",{class:!0});var _w=s(ut);T(AL.$$.fragment,_w),kZo=i(_w),iue=n(_w,"P",{});var Bbt=s(iue);SZo=r(Bbt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Bbt.forEach(t),RZo=i(_w),gd=n(_w,"P",{});var _ee=s(gd);PZo=r(_ee,`Note:
Loading a model from its configuration file does `),due=n(_ee,"STRONG",{});var Ibt=s(due);BZo=r(Ibt,"not"),Ibt.forEach(t),IZo=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gz=n(_ee,"A",{href:!0});var Nbt=s(gz);NZo=r(Nbt,"from_pretrained()"),Nbt.forEach(t),qZo=r(_ee," to load the model weights."),_ee.forEach(t),jZo=i(_w),T(B6.$$.fragment,_w),_w.forEach(t),DZo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(yL.$$.fragment,ha),GZo=i(ha),cue=n(ha,"P",{});var qbt=s(cue);OZo=r(qbt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qbt.forEach(t),VZo=i(ha),Ga=n(ha,"P",{});var uw=s(Ga);XZo=r(uw,"The model class to instantiate is selected based on the "),fue=n(uw,"CODE",{});var jbt=s(fue);zZo=r(jbt,"model_type"),jbt.forEach(t),WZo=r(uw,` property of the config object (either
passed as an argument or loaded from `),mue=n(uw,"CODE",{});var Dbt=s(mue);QZo=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),HZo=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(uw,"CODE",{});var Gbt=s(gue);UZo=r(Gbt,"pretrained_model_name_or_path"),Gbt.forEach(t),JZo=r(uw,":"),uw.forEach(t),YZo=i(ha),Re=n(ha,"UL",{});var Xe=s(Re);I6=n(Xe,"LI",{});var mSe=s(I6);hue=n(mSe,"STRONG",{});var Obt=s(hue);KZo=r(Obt,"data2vec-audio"),Obt.forEach(t),ZZo=r(mSe," \u2014 "),hz=n(mSe,"A",{href:!0});var Vbt=s(hz);eer=r(Vbt,"Data2VecAudioForSequenceClassification"),Vbt.forEach(t),oer=r(mSe," (Data2VecAudio model)"),mSe.forEach(t),rer=i(Xe),N6=n(Xe,"LI",{});var gSe=s(N6);pue=n(gSe,"STRONG",{});var Xbt=s(pue);ter=r(Xbt,"hubert"),Xbt.forEach(t),aer=r(gSe," \u2014 "),pz=n(gSe,"A",{href:!0});var zbt=s(pz);ner=r(zbt,"HubertForSequenceClassification"),zbt.forEach(t),ser=r(gSe," (Hubert model)"),gSe.forEach(t),ler=i(Xe),q6=n(Xe,"LI",{});var hSe=s(q6);_ue=n(hSe,"STRONG",{});var Wbt=s(_ue);ier=r(Wbt,"sew"),Wbt.forEach(t),der=r(hSe," \u2014 "),_z=n(hSe,"A",{href:!0});var Qbt=s(_z);cer=r(Qbt,"SEWForSequenceClassification"),Qbt.forEach(t),fer=r(hSe," (SEW model)"),hSe.forEach(t),mer=i(Xe),j6=n(Xe,"LI",{});var pSe=s(j6);uue=n(pSe,"STRONG",{});var Hbt=s(uue);ger=r(Hbt,"sew-d"),Hbt.forEach(t),her=r(pSe," \u2014 "),uz=n(pSe,"A",{href:!0});var Ubt=s(uz);per=r(Ubt,"SEWDForSequenceClassification"),Ubt.forEach(t),_er=r(pSe," (SEW-D model)"),pSe.forEach(t),uer=i(Xe),D6=n(Xe,"LI",{});var _Se=s(D6);bue=n(_Se,"STRONG",{});var Jbt=s(bue);ber=r(Jbt,"unispeech"),Jbt.forEach(t),ver=r(_Se," \u2014 "),bz=n(_Se,"A",{href:!0});var Ybt=s(bz);Fer=r(Ybt,"UniSpeechForSequenceClassification"),Ybt.forEach(t),Ter=r(_Se," (UniSpeech model)"),_Se.forEach(t),Mer=i(Xe),G6=n(Xe,"LI",{});var uSe=s(G6);vue=n(uSe,"STRONG",{});var Kbt=s(vue);Eer=r(Kbt,"unispeech-sat"),Kbt.forEach(t),Cer=r(uSe," \u2014 "),vz=n(uSe,"A",{href:!0});var Zbt=s(vz);wer=r(Zbt,"UniSpeechSatForSequenceClassification"),Zbt.forEach(t),Aer=r(uSe," (UniSpeechSat model)"),uSe.forEach(t),yer=i(Xe),O6=n(Xe,"LI",{});var bSe=s(O6);Fue=n(bSe,"STRONG",{});var evt=s(Fue);Ler=r(evt,"wav2vec2"),evt.forEach(t),xer=r(bSe," \u2014 "),Fz=n(bSe,"A",{href:!0});var ovt=s(Fz);$er=r(ovt,"Wav2Vec2ForSequenceClassification"),ovt.forEach(t),ker=r(bSe," (Wav2Vec2 model)"),bSe.forEach(t),Ser=i(Xe),V6=n(Xe,"LI",{});var vSe=s(V6);Tue=n(vSe,"STRONG",{});var rvt=s(Tue);Rer=r(rvt,"wav2vec2-conformer"),rvt.forEach(t),Per=r(vSe," \u2014 "),Tz=n(vSe,"A",{href:!0});var tvt=s(Tz);Ber=r(tvt,"Wav2Vec2ConformerForSequenceClassification"),tvt.forEach(t),Ier=r(vSe," (Wav2Vec2-Conformer model)"),vSe.forEach(t),Ner=i(Xe),X6=n(Xe,"LI",{});var FSe=s(X6);Mue=n(FSe,"STRONG",{});var avt=s(Mue);qer=r(avt,"wavlm"),avt.forEach(t),jer=r(FSe," \u2014 "),Mz=n(FSe,"A",{href:!0});var nvt=s(Mz);Der=r(nvt,"WavLMForSequenceClassification"),nvt.forEach(t),Ger=r(FSe," (WavLM model)"),FSe.forEach(t),Xe.forEach(t),Oer=i(ha),z6=n(ha,"P",{});var TSe=s(z6);Ver=r(TSe,"The model is set in evaluation mode by default using "),Eue=n(TSe,"CODE",{});var svt=s(Eue);Xer=r(svt,"model.eval()"),svt.forEach(t),zer=r(TSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=n(TSe,"CODE",{});var lvt=s(Cue);Wer=r(lvt,"model.train()"),lvt.forEach(t),TSe.forEach(t),Qer=i(ha),T(W6.$$.fragment,ha),ha.forEach(t),rl.forEach(t),qje=i(f),hd=n(f,"H2",{class:!0});var OGe=s(hd);Q6=n(OGe,"A",{id:!0,class:!0,href:!0});var ivt=s(Q6);wue=n(ivt,"SPAN",{});var dvt=s(wue);T(LL.$$.fragment,dvt),dvt.forEach(t),ivt.forEach(t),Her=i(OGe),Aue=n(OGe,"SPAN",{});var cvt=s(Aue);Uer=r(cvt,"AutoModelForAudioFrameClassification"),cvt.forEach(t),OGe.forEach(t),jje=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T(xL.$$.fragment,tl),Jer=i(tl),pd=n(tl,"P",{});var uee=s(pd);Yer=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Ez=n(uee,"A",{href:!0});var fvt=s(Ez);Ker=r(fvt,"from_pretrained()"),fvt.forEach(t),Zer=r(uee," class method or the "),Cz=n(uee,"A",{href:!0});var mvt=s(Cz);eor=r(mvt,"from_config()"),mvt.forEach(t),oor=r(uee,` class
method.`),uee.forEach(t),ror=i(tl),$L=n(tl,"P",{});var VGe=s($L);tor=r(VGe,"This class cannot be instantiated directly using "),yue=n(VGe,"CODE",{});var gvt=s(yue);aor=r(gvt,"__init__()"),gvt.forEach(t),nor=r(VGe," (throws an error)."),VGe.forEach(t),sor=i(tl),bt=n(tl,"DIV",{class:!0});var bw=s(bt);T(kL.$$.fragment,bw),lor=i(bw),Lue=n(bw,"P",{});var hvt=s(Lue);ior=r(hvt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),hvt.forEach(t),dor=i(bw),_d=n(bw,"P",{});var bee=s(_d);cor=r(bee,`Note:
Loading a model from its configuration file does `),xue=n(bee,"STRONG",{});var pvt=s(xue);mor=r(pvt,"not"),pvt.forEach(t),gor=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(bee,"A",{href:!0});var _vt=s(wz);hor=r(_vt,"from_pretrained()"),_vt.forEach(t),por=r(bee," to load the model weights."),bee.forEach(t),_or=i(bw),T(H6.$$.fragment,bw),bw.forEach(t),uor=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(SL.$$.fragment,pa),bor=i(pa),$ue=n(pa,"P",{});var uvt=s($ue);vor=r(uvt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),uvt.forEach(t),For=i(pa),Oa=n(pa,"P",{});var vw=s(Oa);Tor=r(vw,"The model class to instantiate is selected based on the "),kue=n(vw,"CODE",{});var bvt=s(kue);Mor=r(bvt,"model_type"),bvt.forEach(t),Eor=r(vw,` property of the config object (either
passed as an argument or loaded from `),Sue=n(vw,"CODE",{});var vvt=s(Sue);Cor=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),wor=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=n(vw,"CODE",{});var Fvt=s(Rue);Aor=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),yor=r(vw,":"),vw.forEach(t),Lor=i(pa),Kr=n(pa,"UL",{});var al=s(Kr);U6=n(al,"LI",{});var MSe=s(U6);Pue=n(MSe,"STRONG",{});var Tvt=s(Pue);xor=r(Tvt,"data2vec-audio"),Tvt.forEach(t),$or=r(MSe," \u2014 "),Az=n(MSe,"A",{href:!0});var Mvt=s(Az);kor=r(Mvt,"Data2VecAudioForAudioFrameClassification"),Mvt.forEach(t),Sor=r(MSe," (Data2VecAudio model)"),MSe.forEach(t),Ror=i(al),J6=n(al,"LI",{});var ESe=s(J6);Bue=n(ESe,"STRONG",{});var Evt=s(Bue);Por=r(Evt,"unispeech-sat"),Evt.forEach(t),Bor=r(ESe," \u2014 "),yz=n(ESe,"A",{href:!0});var Cvt=s(yz);Ior=r(Cvt,"UniSpeechSatForAudioFrameClassification"),Cvt.forEach(t),Nor=r(ESe," (UniSpeechSat model)"),ESe.forEach(t),qor=i(al),Y6=n(al,"LI",{});var CSe=s(Y6);Iue=n(CSe,"STRONG",{});var wvt=s(Iue);jor=r(wvt,"wav2vec2"),wvt.forEach(t),Dor=r(CSe," \u2014 "),Lz=n(CSe,"A",{href:!0});var Avt=s(Lz);Gor=r(Avt,"Wav2Vec2ForAudioFrameClassification"),Avt.forEach(t),Oor=r(CSe," (Wav2Vec2 model)"),CSe.forEach(t),Vor=i(al),K6=n(al,"LI",{});var wSe=s(K6);Nue=n(wSe,"STRONG",{});var yvt=s(Nue);Xor=r(yvt,"wav2vec2-conformer"),yvt.forEach(t),zor=r(wSe," \u2014 "),xz=n(wSe,"A",{href:!0});var Lvt=s(xz);Wor=r(Lvt,"Wav2Vec2ConformerForAudioFrameClassification"),Lvt.forEach(t),Qor=r(wSe," (Wav2Vec2-Conformer model)"),wSe.forEach(t),Hor=i(al),Z6=n(al,"LI",{});var ASe=s(Z6);que=n(ASe,"STRONG",{});var xvt=s(que);Uor=r(xvt,"wavlm"),xvt.forEach(t),Jor=r(ASe," \u2014 "),$z=n(ASe,"A",{href:!0});var $vt=s($z);Yor=r($vt,"WavLMForAudioFrameClassification"),$vt.forEach(t),Kor=r(ASe," (WavLM model)"),ASe.forEach(t),al.forEach(t),Zor=i(pa),eT=n(pa,"P",{});var ySe=s(eT);err=r(ySe,"The model is set in evaluation mode by default using "),jue=n(ySe,"CODE",{});var kvt=s(jue);orr=r(kvt,"model.eval()"),kvt.forEach(t),rrr=r(ySe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=n(ySe,"CODE",{});var Svt=s(Due);trr=r(Svt,"model.train()"),Svt.forEach(t),ySe.forEach(t),arr=i(pa),T(oT.$$.fragment,pa),pa.forEach(t),tl.forEach(t),Dje=i(f),ud=n(f,"H2",{class:!0});var XGe=s(ud);rT=n(XGe,"A",{id:!0,class:!0,href:!0});var Rvt=s(rT);Gue=n(Rvt,"SPAN",{});var Pvt=s(Gue);T(RL.$$.fragment,Pvt),Pvt.forEach(t),Rvt.forEach(t),nrr=i(XGe),Oue=n(XGe,"SPAN",{});var Bvt=s(Oue);srr=r(Bvt,"AutoModelForCTC"),Bvt.forEach(t),XGe.forEach(t),Gje=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T(PL.$$.fragment,nl),lrr=i(nl),bd=n(nl,"P",{});var vee=s(bd);irr=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),kz=n(vee,"A",{href:!0});var Ivt=s(kz);drr=r(Ivt,"from_pretrained()"),Ivt.forEach(t),crr=r(vee," class method or the "),Sz=n(vee,"A",{href:!0});var Nvt=s(Sz);frr=r(Nvt,"from_config()"),Nvt.forEach(t),mrr=r(vee,` class
method.`),vee.forEach(t),grr=i(nl),BL=n(nl,"P",{});var zGe=s(BL);hrr=r(zGe,"This class cannot be instantiated directly using "),Vue=n(zGe,"CODE",{});var qvt=s(Vue);prr=r(qvt,"__init__()"),qvt.forEach(t),_rr=r(zGe," (throws an error)."),zGe.forEach(t),urr=i(nl),vt=n(nl,"DIV",{class:!0});var Fw=s(vt);T(IL.$$.fragment,Fw),brr=i(Fw),Xue=n(Fw,"P",{});var jvt=s(Xue);vrr=r(jvt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),jvt.forEach(t),Frr=i(Fw),vd=n(Fw,"P",{});var Fee=s(vd);Trr=r(Fee,`Note:
Loading a model from its configuration file does `),zue=n(Fee,"STRONG",{});var Dvt=s(zue);Mrr=r(Dvt,"not"),Dvt.forEach(t),Err=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(Fee,"A",{href:!0});var Gvt=s(Rz);Crr=r(Gvt,"from_pretrained()"),Gvt.forEach(t),wrr=r(Fee," to load the model weights."),Fee.forEach(t),Arr=i(Fw),T(tT.$$.fragment,Fw),Fw.forEach(t),yrr=i(nl),mo=n(nl,"DIV",{class:!0});var _a=s(mo);T(NL.$$.fragment,_a),Lrr=i(_a),Wue=n(_a,"P",{});var Ovt=s(Wue);xrr=r(Ovt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ovt.forEach(t),$rr=i(_a),Va=n(_a,"P",{});var Tw=s(Va);krr=r(Tw,"The model class to instantiate is selected based on the "),Que=n(Tw,"CODE",{});var Vvt=s(Que);Srr=r(Vvt,"model_type"),Vvt.forEach(t),Rrr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),Hue=n(Tw,"CODE",{});var Xvt=s(Hue);Prr=r(Xvt,"pretrained_model_name_or_path"),Xvt.forEach(t),Brr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=n(Tw,"CODE",{});var zvt=s(Uue);Irr=r(zvt,"pretrained_model_name_or_path"),zvt.forEach(t),Nrr=r(Tw,":"),Tw.forEach(t),qrr=i(_a),ye=n(_a,"UL",{});var Be=s(ye);aT=n(Be,"LI",{});var LSe=s(aT);Jue=n(LSe,"STRONG",{});var Wvt=s(Jue);jrr=r(Wvt,"data2vec-audio"),Wvt.forEach(t),Drr=r(LSe," \u2014 "),Pz=n(LSe,"A",{href:!0});var Qvt=s(Pz);Grr=r(Qvt,"Data2VecAudioForCTC"),Qvt.forEach(t),Orr=r(LSe," (Data2VecAudio model)"),LSe.forEach(t),Vrr=i(Be),nT=n(Be,"LI",{});var xSe=s(nT);Yue=n(xSe,"STRONG",{});var Hvt=s(Yue);Xrr=r(Hvt,"hubert"),Hvt.forEach(t),zrr=r(xSe," \u2014 "),Bz=n(xSe,"A",{href:!0});var Uvt=s(Bz);Wrr=r(Uvt,"HubertForCTC"),Uvt.forEach(t),Qrr=r(xSe," (Hubert model)"),xSe.forEach(t),Hrr=i(Be),sT=n(Be,"LI",{});var $Se=s(sT);Kue=n($Se,"STRONG",{});var Jvt=s(Kue);Urr=r(Jvt,"mctct"),Jvt.forEach(t),Jrr=r($Se," \u2014 "),Iz=n($Se,"A",{href:!0});var Yvt=s(Iz);Yrr=r(Yvt,"MCTCTForCTC"),Yvt.forEach(t),Krr=r($Se," (M-CTC-T model)"),$Se.forEach(t),Zrr=i(Be),lT=n(Be,"LI",{});var kSe=s(lT);Zue=n(kSe,"STRONG",{});var Kvt=s(Zue);etr=r(Kvt,"sew"),Kvt.forEach(t),otr=r(kSe," \u2014 "),Nz=n(kSe,"A",{href:!0});var Zvt=s(Nz);rtr=r(Zvt,"SEWForCTC"),Zvt.forEach(t),ttr=r(kSe," (SEW model)"),kSe.forEach(t),atr=i(Be),iT=n(Be,"LI",{});var SSe=s(iT);e2e=n(SSe,"STRONG",{});var eFt=s(e2e);ntr=r(eFt,"sew-d"),eFt.forEach(t),str=r(SSe," \u2014 "),qz=n(SSe,"A",{href:!0});var oFt=s(qz);ltr=r(oFt,"SEWDForCTC"),oFt.forEach(t),itr=r(SSe," (SEW-D model)"),SSe.forEach(t),dtr=i(Be),dT=n(Be,"LI",{});var RSe=s(dT);o2e=n(RSe,"STRONG",{});var rFt=s(o2e);ctr=r(rFt,"unispeech"),rFt.forEach(t),ftr=r(RSe," \u2014 "),jz=n(RSe,"A",{href:!0});var tFt=s(jz);mtr=r(tFt,"UniSpeechForCTC"),tFt.forEach(t),gtr=r(RSe," (UniSpeech model)"),RSe.forEach(t),htr=i(Be),cT=n(Be,"LI",{});var PSe=s(cT);r2e=n(PSe,"STRONG",{});var aFt=s(r2e);ptr=r(aFt,"unispeech-sat"),aFt.forEach(t),_tr=r(PSe," \u2014 "),Dz=n(PSe,"A",{href:!0});var nFt=s(Dz);utr=r(nFt,"UniSpeechSatForCTC"),nFt.forEach(t),btr=r(PSe," (UniSpeechSat model)"),PSe.forEach(t),vtr=i(Be),fT=n(Be,"LI",{});var BSe=s(fT);t2e=n(BSe,"STRONG",{});var sFt=s(t2e);Ftr=r(sFt,"wav2vec2"),sFt.forEach(t),Ttr=r(BSe," \u2014 "),Gz=n(BSe,"A",{href:!0});var lFt=s(Gz);Mtr=r(lFt,"Wav2Vec2ForCTC"),lFt.forEach(t),Etr=r(BSe," (Wav2Vec2 model)"),BSe.forEach(t),Ctr=i(Be),mT=n(Be,"LI",{});var ISe=s(mT);a2e=n(ISe,"STRONG",{});var iFt=s(a2e);wtr=r(iFt,"wav2vec2-conformer"),iFt.forEach(t),Atr=r(ISe," \u2014 "),Oz=n(ISe,"A",{href:!0});var dFt=s(Oz);ytr=r(dFt,"Wav2Vec2ConformerForCTC"),dFt.forEach(t),Ltr=r(ISe," (Wav2Vec2-Conformer model)"),ISe.forEach(t),xtr=i(Be),gT=n(Be,"LI",{});var NSe=s(gT);n2e=n(NSe,"STRONG",{});var cFt=s(n2e);$tr=r(cFt,"wavlm"),cFt.forEach(t),ktr=r(NSe," \u2014 "),Vz=n(NSe,"A",{href:!0});var fFt=s(Vz);Str=r(fFt,"WavLMForCTC"),fFt.forEach(t),Rtr=r(NSe," (WavLM model)"),NSe.forEach(t),Be.forEach(t),Ptr=i(_a),hT=n(_a,"P",{});var qSe=s(hT);Btr=r(qSe,"The model is set in evaluation mode by default using "),s2e=n(qSe,"CODE",{});var mFt=s(s2e);Itr=r(mFt,"model.eval()"),mFt.forEach(t),Ntr=r(qSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l2e=n(qSe,"CODE",{});var gFt=s(l2e);qtr=r(gFt,"model.train()"),gFt.forEach(t),qSe.forEach(t),jtr=i(_a),T(pT.$$.fragment,_a),_a.forEach(t),nl.forEach(t),Oje=i(f),Fd=n(f,"H2",{class:!0});var WGe=s(Fd);_T=n(WGe,"A",{id:!0,class:!0,href:!0});var hFt=s(_T);i2e=n(hFt,"SPAN",{});var pFt=s(i2e);T(qL.$$.fragment,pFt),pFt.forEach(t),hFt.forEach(t),Dtr=i(WGe),d2e=n(WGe,"SPAN",{});var _Ft=s(d2e);Gtr=r(_Ft,"AutoModelForSpeechSeq2Seq"),_Ft.forEach(t),WGe.forEach(t),Vje=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(jL.$$.fragment,sl),Otr=i(sl),Td=n(sl,"P",{});var Tee=s(Td);Vtr=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Xz=n(Tee,"A",{href:!0});var uFt=s(Xz);Xtr=r(uFt,"from_pretrained()"),uFt.forEach(t),ztr=r(Tee," class method or the "),zz=n(Tee,"A",{href:!0});var bFt=s(zz);Wtr=r(bFt,"from_config()"),bFt.forEach(t),Qtr=r(Tee,` class
method.`),Tee.forEach(t),Htr=i(sl),DL=n(sl,"P",{});var QGe=s(DL);Utr=r(QGe,"This class cannot be instantiated directly using "),c2e=n(QGe,"CODE",{});var vFt=s(c2e);Jtr=r(vFt,"__init__()"),vFt.forEach(t),Ytr=r(QGe," (throws an error)."),QGe.forEach(t),Ktr=i(sl),Ft=n(sl,"DIV",{class:!0});var Mw=s(Ft);T(GL.$$.fragment,Mw),Ztr=i(Mw),f2e=n(Mw,"P",{});var FFt=s(f2e);ear=r(FFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),FFt.forEach(t),oar=i(Mw),Md=n(Mw,"P",{});var Mee=s(Md);rar=r(Mee,`Note:
Loading a model from its configuration file does `),m2e=n(Mee,"STRONG",{});var TFt=s(m2e);tar=r(TFt,"not"),TFt.forEach(t),aar=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=n(Mee,"A",{href:!0});var MFt=s(Wz);nar=r(MFt,"from_pretrained()"),MFt.forEach(t),sar=r(Mee," to load the model weights."),Mee.forEach(t),lar=i(Mw),T(uT.$$.fragment,Mw),Mw.forEach(t),iar=i(sl),go=n(sl,"DIV",{class:!0});var ua=s(go);T(OL.$$.fragment,ua),dar=i(ua),g2e=n(ua,"P",{});var EFt=s(g2e);car=r(EFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),EFt.forEach(t),far=i(ua),Xa=n(ua,"P",{});var Ew=s(Xa);mar=r(Ew,"The model class to instantiate is selected based on the "),h2e=n(Ew,"CODE",{});var CFt=s(h2e);gar=r(CFt,"model_type"),CFt.forEach(t),har=r(Ew,` property of the config object (either
passed as an argument or loaded from `),p2e=n(Ew,"CODE",{});var wFt=s(p2e);par=r(wFt,"pretrained_model_name_or_path"),wFt.forEach(t),_ar=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(Ew,"CODE",{});var AFt=s(_2e);uar=r(AFt,"pretrained_model_name_or_path"),AFt.forEach(t),bar=r(Ew,":"),Ew.forEach(t),Far=i(ua),VL=n(ua,"UL",{});var HGe=s(VL);bT=n(HGe,"LI",{});var jSe=s(bT);u2e=n(jSe,"STRONG",{});var yFt=s(u2e);Tar=r(yFt,"speech-encoder-decoder"),yFt.forEach(t),Mar=r(jSe," \u2014 "),Qz=n(jSe,"A",{href:!0});var LFt=s(Qz);Ear=r(LFt,"SpeechEncoderDecoderModel"),LFt.forEach(t),Car=r(jSe," (Speech Encoder decoder model)"),jSe.forEach(t),war=i(HGe),vT=n(HGe,"LI",{});var DSe=s(vT);b2e=n(DSe,"STRONG",{});var xFt=s(b2e);Aar=r(xFt,"speech_to_text"),xFt.forEach(t),yar=r(DSe," \u2014 "),Hz=n(DSe,"A",{href:!0});var $Ft=s(Hz);Lar=r($Ft,"Speech2TextForConditionalGeneration"),$Ft.forEach(t),xar=r(DSe," (Speech2Text model)"),DSe.forEach(t),HGe.forEach(t),$ar=i(ua),FT=n(ua,"P",{});var GSe=s(FT);kar=r(GSe,"The model is set in evaluation mode by default using "),v2e=n(GSe,"CODE",{});var kFt=s(v2e);Sar=r(kFt,"model.eval()"),kFt.forEach(t),Rar=r(GSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F2e=n(GSe,"CODE",{});var SFt=s(F2e);Par=r(SFt,"model.train()"),SFt.forEach(t),GSe.forEach(t),Bar=i(ua),T(TT.$$.fragment,ua),ua.forEach(t),sl.forEach(t),Xje=i(f),Ed=n(f,"H2",{class:!0});var UGe=s(Ed);MT=n(UGe,"A",{id:!0,class:!0,href:!0});var RFt=s(MT);T2e=n(RFt,"SPAN",{});var PFt=s(T2e);T(XL.$$.fragment,PFt),PFt.forEach(t),RFt.forEach(t),Iar=i(UGe),M2e=n(UGe,"SPAN",{});var BFt=s(M2e);Nar=r(BFt,"AutoModelForAudioXVector"),BFt.forEach(t),UGe.forEach(t),zje=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(zL.$$.fragment,ll),qar=i(ll),Cd=n(ll,"P",{});var Eee=s(Cd);jar=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Uz=n(Eee,"A",{href:!0});var IFt=s(Uz);Dar=r(IFt,"from_pretrained()"),IFt.forEach(t),Gar=r(Eee," class method or the "),Jz=n(Eee,"A",{href:!0});var NFt=s(Jz);Oar=r(NFt,"from_config()"),NFt.forEach(t),Var=r(Eee,` class
method.`),Eee.forEach(t),Xar=i(ll),WL=n(ll,"P",{});var JGe=s(WL);zar=r(JGe,"This class cannot be instantiated directly using "),E2e=n(JGe,"CODE",{});var qFt=s(E2e);War=r(qFt,"__init__()"),qFt.forEach(t),Qar=r(JGe," (throws an error)."),JGe.forEach(t),Har=i(ll),Tt=n(ll,"DIV",{class:!0});var Cw=s(Tt);T(QL.$$.fragment,Cw),Uar=i(Cw),C2e=n(Cw,"P",{});var jFt=s(C2e);Jar=r(jFt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),jFt.forEach(t),Yar=i(Cw),wd=n(Cw,"P",{});var Cee=s(wd);Kar=r(Cee,`Note:
Loading a model from its configuration file does `),w2e=n(Cee,"STRONG",{});var DFt=s(w2e);Zar=r(DFt,"not"),DFt.forEach(t),enr=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=n(Cee,"A",{href:!0});var GFt=s(Yz);onr=r(GFt,"from_pretrained()"),GFt.forEach(t),rnr=r(Cee," to load the model weights."),Cee.forEach(t),tnr=i(Cw),T(ET.$$.fragment,Cw),Cw.forEach(t),anr=i(ll),ho=n(ll,"DIV",{class:!0});var ba=s(ho);T(HL.$$.fragment,ba),nnr=i(ba),A2e=n(ba,"P",{});var OFt=s(A2e);snr=r(OFt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),OFt.forEach(t),lnr=i(ba),za=n(ba,"P",{});var ww=s(za);inr=r(ww,"The model class to instantiate is selected based on the "),y2e=n(ww,"CODE",{});var VFt=s(y2e);dnr=r(VFt,"model_type"),VFt.forEach(t),cnr=r(ww,` property of the config object (either
passed as an argument or loaded from `),L2e=n(ww,"CODE",{});var XFt=s(L2e);fnr=r(XFt,"pretrained_model_name_or_path"),XFt.forEach(t),mnr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=n(ww,"CODE",{});var zFt=s(x2e);gnr=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),hnr=r(ww,":"),ww.forEach(t),pnr=i(ba),Zr=n(ba,"UL",{});var il=s(Zr);CT=n(il,"LI",{});var OSe=s(CT);$2e=n(OSe,"STRONG",{});var WFt=s($2e);_nr=r(WFt,"data2vec-audio"),WFt.forEach(t),unr=r(OSe," \u2014 "),Kz=n(OSe,"A",{href:!0});var QFt=s(Kz);bnr=r(QFt,"Data2VecAudioForXVector"),QFt.forEach(t),vnr=r(OSe," (Data2VecAudio model)"),OSe.forEach(t),Fnr=i(il),wT=n(il,"LI",{});var VSe=s(wT);k2e=n(VSe,"STRONG",{});var HFt=s(k2e);Tnr=r(HFt,"unispeech-sat"),HFt.forEach(t),Mnr=r(VSe," \u2014 "),Zz=n(VSe,"A",{href:!0});var UFt=s(Zz);Enr=r(UFt,"UniSpeechSatForXVector"),UFt.forEach(t),Cnr=r(VSe," (UniSpeechSat model)"),VSe.forEach(t),wnr=i(il),AT=n(il,"LI",{});var XSe=s(AT);S2e=n(XSe,"STRONG",{});var JFt=s(S2e);Anr=r(JFt,"wav2vec2"),JFt.forEach(t),ynr=r(XSe," \u2014 "),eW=n(XSe,"A",{href:!0});var YFt=s(eW);Lnr=r(YFt,"Wav2Vec2ForXVector"),YFt.forEach(t),xnr=r(XSe," (Wav2Vec2 model)"),XSe.forEach(t),$nr=i(il),yT=n(il,"LI",{});var zSe=s(yT);R2e=n(zSe,"STRONG",{});var KFt=s(R2e);knr=r(KFt,"wav2vec2-conformer"),KFt.forEach(t),Snr=r(zSe," \u2014 "),oW=n(zSe,"A",{href:!0});var ZFt=s(oW);Rnr=r(ZFt,"Wav2Vec2ConformerForXVector"),ZFt.forEach(t),Pnr=r(zSe," (Wav2Vec2-Conformer model)"),zSe.forEach(t),Bnr=i(il),LT=n(il,"LI",{});var WSe=s(LT);P2e=n(WSe,"STRONG",{});var e6t=s(P2e);Inr=r(e6t,"wavlm"),e6t.forEach(t),Nnr=r(WSe," \u2014 "),rW=n(WSe,"A",{href:!0});var o6t=s(rW);qnr=r(o6t,"WavLMForXVector"),o6t.forEach(t),jnr=r(WSe," (WavLM model)"),WSe.forEach(t),il.forEach(t),Dnr=i(ba),xT=n(ba,"P",{});var QSe=s(xT);Gnr=r(QSe,"The model is set in evaluation mode by default using "),B2e=n(QSe,"CODE",{});var r6t=s(B2e);Onr=r(r6t,"model.eval()"),r6t.forEach(t),Vnr=r(QSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=n(QSe,"CODE",{});var t6t=s(I2e);Xnr=r(t6t,"model.train()"),t6t.forEach(t),QSe.forEach(t),znr=i(ba),T($T.$$.fragment,ba),ba.forEach(t),ll.forEach(t),Wje=i(f),Ad=n(f,"H2",{class:!0});var YGe=s(Ad);kT=n(YGe,"A",{id:!0,class:!0,href:!0});var a6t=s(kT);N2e=n(a6t,"SPAN",{});var n6t=s(N2e);T(UL.$$.fragment,n6t),n6t.forEach(t),a6t.forEach(t),Wnr=i(YGe),q2e=n(YGe,"SPAN",{});var s6t=s(q2e);Qnr=r(s6t,"AutoModelForMaskedImageModeling"),s6t.forEach(t),YGe.forEach(t),Qje=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(JL.$$.fragment,dl),Hnr=i(dl),yd=n(dl,"P",{});var wee=s(yd);Unr=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),tW=n(wee,"A",{href:!0});var l6t=s(tW);Jnr=r(l6t,"from_pretrained()"),l6t.forEach(t),Ynr=r(wee," class method or the "),aW=n(wee,"A",{href:!0});var i6t=s(aW);Knr=r(i6t,"from_config()"),i6t.forEach(t),Znr=r(wee,` class
method.`),wee.forEach(t),esr=i(dl),YL=n(dl,"P",{});var KGe=s(YL);osr=r(KGe,"This class cannot be instantiated directly using "),j2e=n(KGe,"CODE",{});var d6t=s(j2e);rsr=r(d6t,"__init__()"),d6t.forEach(t),tsr=r(KGe," (throws an error)."),KGe.forEach(t),asr=i(dl),Mt=n(dl,"DIV",{class:!0});var Aw=s(Mt);T(KL.$$.fragment,Aw),nsr=i(Aw),D2e=n(Aw,"P",{});var c6t=s(D2e);ssr=r(c6t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),c6t.forEach(t),lsr=i(Aw),Ld=n(Aw,"P",{});var Aee=s(Ld);isr=r(Aee,`Note:
Loading a model from its configuration file does `),G2e=n(Aee,"STRONG",{});var f6t=s(G2e);dsr=r(f6t,"not"),f6t.forEach(t),csr=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(Aee,"A",{href:!0});var m6t=s(nW);fsr=r(m6t,"from_pretrained()"),m6t.forEach(t),msr=r(Aee," to load the model weights."),Aee.forEach(t),gsr=i(Aw),T(ST.$$.fragment,Aw),Aw.forEach(t),hsr=i(dl),po=n(dl,"DIV",{class:!0});var va=s(po);T(ZL.$$.fragment,va),psr=i(va),O2e=n(va,"P",{});var g6t=s(O2e);_sr=r(g6t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),g6t.forEach(t),usr=i(va),Wa=n(va,"P",{});var yw=s(Wa);bsr=r(yw,"The model class to instantiate is selected based on the "),V2e=n(yw,"CODE",{});var h6t=s(V2e);vsr=r(h6t,"model_type"),h6t.forEach(t),Fsr=r(yw,` property of the config object (either
passed as an argument or loaded from `),X2e=n(yw,"CODE",{});var p6t=s(X2e);Tsr=r(p6t,"pretrained_model_name_or_path"),p6t.forEach(t),Msr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(yw,"CODE",{});var _6t=s(z2e);Esr=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),Csr=r(yw,":"),yw.forEach(t),wsr=i(va),xd=n(va,"UL",{});var yee=s(xd);RT=n(yee,"LI",{});var HSe=s(RT);W2e=n(HSe,"STRONG",{});var u6t=s(W2e);Asr=r(u6t,"deit"),u6t.forEach(t),ysr=r(HSe," \u2014 "),sW=n(HSe,"A",{href:!0});var b6t=s(sW);Lsr=r(b6t,"DeiTForMaskedImageModeling"),b6t.forEach(t),xsr=r(HSe," (DeiT model)"),HSe.forEach(t),$sr=i(yee),PT=n(yee,"LI",{});var USe=s(PT);Q2e=n(USe,"STRONG",{});var v6t=s(Q2e);ksr=r(v6t,"swin"),v6t.forEach(t),Ssr=r(USe," \u2014 "),lW=n(USe,"A",{href:!0});var F6t=s(lW);Rsr=r(F6t,"SwinForMaskedImageModeling"),F6t.forEach(t),Psr=r(USe," (Swin Transformer model)"),USe.forEach(t),Bsr=i(yee),BT=n(yee,"LI",{});var JSe=s(BT);H2e=n(JSe,"STRONG",{});var T6t=s(H2e);Isr=r(T6t,"vit"),T6t.forEach(t),Nsr=r(JSe," \u2014 "),iW=n(JSe,"A",{href:!0});var M6t=s(iW);qsr=r(M6t,"ViTForMaskedImageModeling"),M6t.forEach(t),jsr=r(JSe," (ViT model)"),JSe.forEach(t),yee.forEach(t),Dsr=i(va),IT=n(va,"P",{});var YSe=s(IT);Gsr=r(YSe,"The model is set in evaluation mode by default using "),U2e=n(YSe,"CODE",{});var E6t=s(U2e);Osr=r(E6t,"model.eval()"),E6t.forEach(t),Vsr=r(YSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J2e=n(YSe,"CODE",{});var C6t=s(J2e);Xsr=r(C6t,"model.train()"),C6t.forEach(t),YSe.forEach(t),zsr=i(va),T(NT.$$.fragment,va),va.forEach(t),dl.forEach(t),Hje=i(f),$d=n(f,"H2",{class:!0});var ZGe=s($d);qT=n(ZGe,"A",{id:!0,class:!0,href:!0});var w6t=s(qT);Y2e=n(w6t,"SPAN",{});var A6t=s(Y2e);T(e8.$$.fragment,A6t),A6t.forEach(t),w6t.forEach(t),Wsr=i(ZGe),K2e=n(ZGe,"SPAN",{});var y6t=s(K2e);Qsr=r(y6t,"AutoModelForObjectDetection"),y6t.forEach(t),ZGe.forEach(t),Uje=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(o8.$$.fragment,cl),Hsr=i(cl),kd=n(cl,"P",{});var Lee=s(kd);Usr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),dW=n(Lee,"A",{href:!0});var L6t=s(dW);Jsr=r(L6t,"from_pretrained()"),L6t.forEach(t),Ysr=r(Lee," class method or the "),cW=n(Lee,"A",{href:!0});var x6t=s(cW);Ksr=r(x6t,"from_config()"),x6t.forEach(t),Zsr=r(Lee,` class
method.`),Lee.forEach(t),elr=i(cl),r8=n(cl,"P",{});var eOe=s(r8);olr=r(eOe,"This class cannot be instantiated directly using "),Z2e=n(eOe,"CODE",{});var $6t=s(Z2e);rlr=r($6t,"__init__()"),$6t.forEach(t),tlr=r(eOe," (throws an error)."),eOe.forEach(t),alr=i(cl),Et=n(cl,"DIV",{class:!0});var Lw=s(Et);T(t8.$$.fragment,Lw),nlr=i(Lw),e1e=n(Lw,"P",{});var k6t=s(e1e);slr=r(k6t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),k6t.forEach(t),llr=i(Lw),Sd=n(Lw,"P",{});var xee=s(Sd);ilr=r(xee,`Note:
Loading a model from its configuration file does `),o1e=n(xee,"STRONG",{});var S6t=s(o1e);dlr=r(S6t,"not"),S6t.forEach(t),clr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(xee,"A",{href:!0});var R6t=s(fW);flr=r(R6t,"from_pretrained()"),R6t.forEach(t),mlr=r(xee," to load the model weights."),xee.forEach(t),glr=i(Lw),T(jT.$$.fragment,Lw),Lw.forEach(t),hlr=i(cl),_o=n(cl,"DIV",{class:!0});var Fa=s(_o);T(a8.$$.fragment,Fa),plr=i(Fa),r1e=n(Fa,"P",{});var P6t=s(r1e);_lr=r(P6t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),P6t.forEach(t),ulr=i(Fa),Qa=n(Fa,"P",{});var xw=s(Qa);blr=r(xw,"The model class to instantiate is selected based on the "),t1e=n(xw,"CODE",{});var B6t=s(t1e);vlr=r(B6t,"model_type"),B6t.forEach(t),Flr=r(xw,` property of the config object (either
passed as an argument or loaded from `),a1e=n(xw,"CODE",{});var I6t=s(a1e);Tlr=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),Mlr=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=n(xw,"CODE",{});var N6t=s(n1e);Elr=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),Clr=r(xw,":"),xw.forEach(t),wlr=i(Fa),n8=n(Fa,"UL",{});var oOe=s(n8);DT=n(oOe,"LI",{});var KSe=s(DT);s1e=n(KSe,"STRONG",{});var q6t=s(s1e);Alr=r(q6t,"detr"),q6t.forEach(t),ylr=r(KSe," \u2014 "),mW=n(KSe,"A",{href:!0});var j6t=s(mW);Llr=r(j6t,"DetrForObjectDetection"),j6t.forEach(t),xlr=r(KSe," (DETR model)"),KSe.forEach(t),$lr=i(oOe),GT=n(oOe,"LI",{});var ZSe=s(GT);l1e=n(ZSe,"STRONG",{});var D6t=s(l1e);klr=r(D6t,"yolos"),D6t.forEach(t),Slr=r(ZSe," \u2014 "),gW=n(ZSe,"A",{href:!0});var G6t=s(gW);Rlr=r(G6t,"YolosForObjectDetection"),G6t.forEach(t),Plr=r(ZSe," (YOLOS model)"),ZSe.forEach(t),oOe.forEach(t),Blr=i(Fa),OT=n(Fa,"P",{});var eRe=s(OT);Ilr=r(eRe,"The model is set in evaluation mode by default using "),i1e=n(eRe,"CODE",{});var O6t=s(i1e);Nlr=r(O6t,"model.eval()"),O6t.forEach(t),qlr=r(eRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d1e=n(eRe,"CODE",{});var V6t=s(d1e);jlr=r(V6t,"model.train()"),V6t.forEach(t),eRe.forEach(t),Dlr=i(Fa),T(VT.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),Jje=i(f),Rd=n(f,"H2",{class:!0});var rOe=s(Rd);XT=n(rOe,"A",{id:!0,class:!0,href:!0});var X6t=s(XT);c1e=n(X6t,"SPAN",{});var z6t=s(c1e);T(s8.$$.fragment,z6t),z6t.forEach(t),X6t.forEach(t),Glr=i(rOe),f1e=n(rOe,"SPAN",{});var W6t=s(f1e);Olr=r(W6t,"AutoModelForImageSegmentation"),W6t.forEach(t),rOe.forEach(t),Yje=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(l8.$$.fragment,fl),Vlr=i(fl),Pd=n(fl,"P",{});var $ee=s(Pd);Xlr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),hW=n($ee,"A",{href:!0});var Q6t=s(hW);zlr=r(Q6t,"from_pretrained()"),Q6t.forEach(t),Wlr=r($ee," class method or the "),pW=n($ee,"A",{href:!0});var H6t=s(pW);Qlr=r(H6t,"from_config()"),H6t.forEach(t),Hlr=r($ee,` class
method.`),$ee.forEach(t),Ulr=i(fl),i8=n(fl,"P",{});var tOe=s(i8);Jlr=r(tOe,"This class cannot be instantiated directly using "),m1e=n(tOe,"CODE",{});var U6t=s(m1e);Ylr=r(U6t,"__init__()"),U6t.forEach(t),Klr=r(tOe," (throws an error)."),tOe.forEach(t),Zlr=i(fl),Ct=n(fl,"DIV",{class:!0});var $w=s(Ct);T(d8.$$.fragment,$w),eir=i($w),g1e=n($w,"P",{});var J6t=s(g1e);oir=r(J6t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),J6t.forEach(t),rir=i($w),Bd=n($w,"P",{});var kee=s(Bd);tir=r(kee,`Note:
Loading a model from its configuration file does `),h1e=n(kee,"STRONG",{});var Y6t=s(h1e);air=r(Y6t,"not"),Y6t.forEach(t),nir=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(kee,"A",{href:!0});var K6t=s(_W);sir=r(K6t,"from_pretrained()"),K6t.forEach(t),lir=r(kee," to load the model weights."),kee.forEach(t),iir=i($w),T(zT.$$.fragment,$w),$w.forEach(t),dir=i(fl),uo=n(fl,"DIV",{class:!0});var Ta=s(uo);T(c8.$$.fragment,Ta),cir=i(Ta),p1e=n(Ta,"P",{});var Z6t=s(p1e);fir=r(Z6t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Z6t.forEach(t),mir=i(Ta),Ha=n(Ta,"P",{});var kw=s(Ha);gir=r(kw,"The model class to instantiate is selected based on the "),_1e=n(kw,"CODE",{});var eTt=s(_1e);hir=r(eTt,"model_type"),eTt.forEach(t),pir=r(kw,` property of the config object (either
passed as an argument or loaded from `),u1e=n(kw,"CODE",{});var oTt=s(u1e);_ir=r(oTt,"pretrained_model_name_or_path"),oTt.forEach(t),uir=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=n(kw,"CODE",{});var rTt=s(b1e);bir=r(rTt,"pretrained_model_name_or_path"),rTt.forEach(t),vir=r(kw,":"),kw.forEach(t),Fir=i(Ta),v1e=n(Ta,"UL",{});var tTt=s(v1e);WT=n(tTt,"LI",{});var oRe=s(WT);F1e=n(oRe,"STRONG",{});var aTt=s(F1e);Tir=r(aTt,"detr"),aTt.forEach(t),Mir=r(oRe," \u2014 "),uW=n(oRe,"A",{href:!0});var nTt=s(uW);Eir=r(nTt,"DetrForSegmentation"),nTt.forEach(t),Cir=r(oRe," (DETR model)"),oRe.forEach(t),tTt.forEach(t),wir=i(Ta),QT=n(Ta,"P",{});var rRe=s(QT);Air=r(rRe,"The model is set in evaluation mode by default using "),T1e=n(rRe,"CODE",{});var sTt=s(T1e);yir=r(sTt,"model.eval()"),sTt.forEach(t),Lir=r(rRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M1e=n(rRe,"CODE",{});var lTt=s(M1e);xir=r(lTt,"model.train()"),lTt.forEach(t),rRe.forEach(t),$ir=i(Ta),T(HT.$$.fragment,Ta),Ta.forEach(t),fl.forEach(t),Kje=i(f),Id=n(f,"H2",{class:!0});var aOe=s(Id);UT=n(aOe,"A",{id:!0,class:!0,href:!0});var iTt=s(UT);E1e=n(iTt,"SPAN",{});var dTt=s(E1e);T(f8.$$.fragment,dTt),dTt.forEach(t),iTt.forEach(t),kir=i(aOe),C1e=n(aOe,"SPAN",{});var cTt=s(C1e);Sir=r(cTt,"AutoModelForSemanticSegmentation"),cTt.forEach(t),aOe.forEach(t),Zje=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(m8.$$.fragment,ml),Rir=i(ml),Nd=n(ml,"P",{});var See=s(Nd);Pir=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),bW=n(See,"A",{href:!0});var fTt=s(bW);Bir=r(fTt,"from_pretrained()"),fTt.forEach(t),Iir=r(See," class method or the "),vW=n(See,"A",{href:!0});var mTt=s(vW);Nir=r(mTt,"from_config()"),mTt.forEach(t),qir=r(See,` class
method.`),See.forEach(t),jir=i(ml),g8=n(ml,"P",{});var nOe=s(g8);Dir=r(nOe,"This class cannot be instantiated directly using "),w1e=n(nOe,"CODE",{});var gTt=s(w1e);Gir=r(gTt,"__init__()"),gTt.forEach(t),Oir=r(nOe," (throws an error)."),nOe.forEach(t),Vir=i(ml),wt=n(ml,"DIV",{class:!0});var Sw=s(wt);T(h8.$$.fragment,Sw),Xir=i(Sw),A1e=n(Sw,"P",{});var hTt=s(A1e);zir=r(hTt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),hTt.forEach(t),Wir=i(Sw),qd=n(Sw,"P",{});var Ree=s(qd);Qir=r(Ree,`Note:
Loading a model from its configuration file does `),y1e=n(Ree,"STRONG",{});var pTt=s(y1e);Hir=r(pTt,"not"),pTt.forEach(t),Uir=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(Ree,"A",{href:!0});var _Tt=s(FW);Jir=r(_Tt,"from_pretrained()"),_Tt.forEach(t),Yir=r(Ree," to load the model weights."),Ree.forEach(t),Kir=i(Sw),T(JT.$$.fragment,Sw),Sw.forEach(t),Zir=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(p8.$$.fragment,Ma),edr=i(Ma),L1e=n(Ma,"P",{});var uTt=s(L1e);odr=r(uTt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),uTt.forEach(t),rdr=i(Ma),Ua=n(Ma,"P",{});var Rw=s(Ua);tdr=r(Rw,"The model class to instantiate is selected based on the "),x1e=n(Rw,"CODE",{});var bTt=s(x1e);adr=r(bTt,"model_type"),bTt.forEach(t),ndr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),$1e=n(Rw,"CODE",{});var vTt=s($1e);sdr=r(vTt,"pretrained_model_name_or_path"),vTt.forEach(t),ldr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k1e=n(Rw,"CODE",{});var FTt=s(k1e);idr=r(FTt,"pretrained_model_name_or_path"),FTt.forEach(t),ddr=r(Rw,":"),Rw.forEach(t),cdr=i(Ma),Ja=n(Ma,"UL",{});var Pw=s(Ja);YT=n(Pw,"LI",{});var tRe=s(YT);S1e=n(tRe,"STRONG",{});var TTt=s(S1e);fdr=r(TTt,"beit"),TTt.forEach(t),mdr=r(tRe," \u2014 "),TW=n(tRe,"A",{href:!0});var MTt=s(TW);gdr=r(MTt,"BeitForSemanticSegmentation"),MTt.forEach(t),hdr=r(tRe," (BEiT model)"),tRe.forEach(t),pdr=i(Pw),KT=n(Pw,"LI",{});var aRe=s(KT);R1e=n(aRe,"STRONG",{});var ETt=s(R1e);_dr=r(ETt,"data2vec-vision"),ETt.forEach(t),udr=r(aRe," \u2014 "),MW=n(aRe,"A",{href:!0});var CTt=s(MW);bdr=r(CTt,"Data2VecVisionForSemanticSegmentation"),CTt.forEach(t),vdr=r(aRe," (Data2VecVision model)"),aRe.forEach(t),Fdr=i(Pw),ZT=n(Pw,"LI",{});var nRe=s(ZT);P1e=n(nRe,"STRONG",{});var wTt=s(P1e);Tdr=r(wTt,"dpt"),wTt.forEach(t),Mdr=r(nRe," \u2014 "),EW=n(nRe,"A",{href:!0});var ATt=s(EW);Edr=r(ATt,"DPTForSemanticSegmentation"),ATt.forEach(t),Cdr=r(nRe," (DPT model)"),nRe.forEach(t),wdr=i(Pw),e7=n(Pw,"LI",{});var sRe=s(e7);B1e=n(sRe,"STRONG",{});var yTt=s(B1e);Adr=r(yTt,"segformer"),yTt.forEach(t),ydr=r(sRe," \u2014 "),CW=n(sRe,"A",{href:!0});var LTt=s(CW);Ldr=r(LTt,"SegformerForSemanticSegmentation"),LTt.forEach(t),xdr=r(sRe," (SegFormer model)"),sRe.forEach(t),Pw.forEach(t),$dr=i(Ma),o7=n(Ma,"P",{});var lRe=s(o7);kdr=r(lRe,"The model is set in evaluation mode by default using "),I1e=n(lRe,"CODE",{});var xTt=s(I1e);Sdr=r(xTt,"model.eval()"),xTt.forEach(t),Rdr=r(lRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N1e=n(lRe,"CODE",{});var $Tt=s(N1e);Pdr=r($Tt,"model.train()"),$Tt.forEach(t),lRe.forEach(t),Bdr=i(Ma),T(r7.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),eDe=i(f),jd=n(f,"H2",{class:!0});var sOe=s(jd);t7=n(sOe,"A",{id:!0,class:!0,href:!0});var kTt=s(t7);q1e=n(kTt,"SPAN",{});var STt=s(q1e);T(_8.$$.fragment,STt),STt.forEach(t),kTt.forEach(t),Idr=i(sOe),j1e=n(sOe,"SPAN",{});var RTt=s(j1e);Ndr=r(RTt,"AutoModelForInstanceSegmentation"),RTt.forEach(t),sOe.forEach(t),oDe=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(u8.$$.fragment,gl),qdr=i(gl),Dd=n(gl,"P",{});var Pee=s(Dd);jdr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),wW=n(Pee,"A",{href:!0});var PTt=s(wW);Ddr=r(PTt,"from_pretrained()"),PTt.forEach(t),Gdr=r(Pee," class method or the "),AW=n(Pee,"A",{href:!0});var BTt=s(AW);Odr=r(BTt,"from_config()"),BTt.forEach(t),Vdr=r(Pee,` class
method.`),Pee.forEach(t),Xdr=i(gl),b8=n(gl,"P",{});var lOe=s(b8);zdr=r(lOe,"This class cannot be instantiated directly using "),D1e=n(lOe,"CODE",{});var ITt=s(D1e);Wdr=r(ITt,"__init__()"),ITt.forEach(t),Qdr=r(lOe," (throws an error)."),lOe.forEach(t),Hdr=i(gl),At=n(gl,"DIV",{class:!0});var Bw=s(At);T(v8.$$.fragment,Bw),Udr=i(Bw),G1e=n(Bw,"P",{});var NTt=s(G1e);Jdr=r(NTt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),NTt.forEach(t),Ydr=i(Bw),Gd=n(Bw,"P",{});var Bee=s(Gd);Kdr=r(Bee,`Note:
Loading a model from its configuration file does `),O1e=n(Bee,"STRONG",{});var qTt=s(O1e);Zdr=r(qTt,"not"),qTt.forEach(t),ecr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(Bee,"A",{href:!0});var jTt=s(yW);ocr=r(jTt,"from_pretrained()"),jTt.forEach(t),rcr=r(Bee," to load the model weights."),Bee.forEach(t),tcr=i(Bw),T(a7.$$.fragment,Bw),Bw.forEach(t),acr=i(gl),vo=n(gl,"DIV",{class:!0});var Ea=s(vo);T(F8.$$.fragment,Ea),ncr=i(Ea),V1e=n(Ea,"P",{});var DTt=s(V1e);scr=r(DTt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),DTt.forEach(t),lcr=i(Ea),Ya=n(Ea,"P",{});var Iw=s(Ya);icr=r(Iw,"The model class to instantiate is selected based on the "),X1e=n(Iw,"CODE",{});var GTt=s(X1e);dcr=r(GTt,"model_type"),GTt.forEach(t),ccr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),z1e=n(Iw,"CODE",{});var OTt=s(z1e);fcr=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),mcr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=n(Iw,"CODE",{});var VTt=s(W1e);gcr=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),hcr=r(Iw,":"),Iw.forEach(t),pcr=i(Ea),Q1e=n(Ea,"UL",{});var XTt=s(Q1e);n7=n(XTt,"LI",{});var iRe=s(n7);H1e=n(iRe,"STRONG",{});var zTt=s(H1e);_cr=r(zTt,"maskformer"),zTt.forEach(t),ucr=r(iRe," \u2014 "),LW=n(iRe,"A",{href:!0});var WTt=s(LW);bcr=r(WTt,"MaskFormerForInstanceSegmentation"),WTt.forEach(t),vcr=r(iRe," (MaskFormer model)"),iRe.forEach(t),XTt.forEach(t),Fcr=i(Ea),s7=n(Ea,"P",{});var dRe=s(s7);Tcr=r(dRe,"The model is set in evaluation mode by default using "),U1e=n(dRe,"CODE",{});var QTt=s(U1e);Mcr=r(QTt,"model.eval()"),QTt.forEach(t),Ecr=r(dRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J1e=n(dRe,"CODE",{});var HTt=s(J1e);Ccr=r(HTt,"model.train()"),HTt.forEach(t),dRe.forEach(t),wcr=i(Ea),T(l7.$$.fragment,Ea),Ea.forEach(t),gl.forEach(t),rDe=i(f),Od=n(f,"H2",{class:!0});var iOe=s(Od);i7=n(iOe,"A",{id:!0,class:!0,href:!0});var UTt=s(i7);Y1e=n(UTt,"SPAN",{});var JTt=s(Y1e);T(T8.$$.fragment,JTt),JTt.forEach(t),UTt.forEach(t),Acr=i(iOe),K1e=n(iOe,"SPAN",{});var YTt=s(K1e);ycr=r(YTt,"TFAutoModel"),YTt.forEach(t),iOe.forEach(t),tDe=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(M8.$$.fragment,hl),Lcr=i(hl),Vd=n(hl,"P",{});var Iee=s(Vd);xcr=r(Iee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xW=n(Iee,"A",{href:!0});var KTt=s(xW);$cr=r(KTt,"from_pretrained()"),KTt.forEach(t),kcr=r(Iee," class method or the "),$W=n(Iee,"A",{href:!0});var ZTt=s($W);Scr=r(ZTt,"from_config()"),ZTt.forEach(t),Rcr=r(Iee,` class
method.`),Iee.forEach(t),Pcr=i(hl),E8=n(hl,"P",{});var dOe=s(E8);Bcr=r(dOe,"This class cannot be instantiated directly using "),Z1e=n(dOe,"CODE",{});var e7t=s(Z1e);Icr=r(e7t,"__init__()"),e7t.forEach(t),Ncr=r(dOe," (throws an error)."),dOe.forEach(t),qcr=i(hl),yt=n(hl,"DIV",{class:!0});var Nw=s(yt);T(C8.$$.fragment,Nw),jcr=i(Nw),ebe=n(Nw,"P",{});var o7t=s(ebe);Dcr=r(o7t,"Instantiates one of the base model classes of the library from a configuration."),o7t.forEach(t),Gcr=i(Nw),Xd=n(Nw,"P",{});var Nee=s(Xd);Ocr=r(Nee,`Note:
Loading a model from its configuration file does `),obe=n(Nee,"STRONG",{});var r7t=s(obe);Vcr=r(r7t,"not"),r7t.forEach(t),Xcr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=n(Nee,"A",{href:!0});var t7t=s(kW);zcr=r(t7t,"from_pretrained()"),t7t.forEach(t),Wcr=r(Nee," to load the model weights."),Nee.forEach(t),Qcr=i(Nw),T(d7.$$.fragment,Nw),Nw.forEach(t),Hcr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(w8.$$.fragment,pl),Ucr=i(pl),rbe=n(pl,"P",{});var a7t=s(rbe);Jcr=r(a7t,"Instantiate one of the base model classes of the library from a pretrained model."),a7t.forEach(t),Ycr=i(pl),Ka=n(pl,"P",{});var qw=s(Ka);Kcr=r(qw,"The model class to instantiate is selected based on the "),tbe=n(qw,"CODE",{});var n7t=s(tbe);Zcr=r(n7t,"model_type"),n7t.forEach(t),efr=r(qw,` property of the config object (either
passed as an argument or loaded from `),abe=n(qw,"CODE",{});var s7t=s(abe);ofr=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),rfr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(qw,"CODE",{});var l7t=s(nbe);tfr=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),afr=r(qw,":"),qw.forEach(t),nfr=i(pl),q=n(pl,"UL",{});var D=s(q);c7=n(D,"LI",{});var cRe=s(c7);sbe=n(cRe,"STRONG",{});var i7t=s(sbe);sfr=r(i7t,"albert"),i7t.forEach(t),lfr=r(cRe," \u2014 "),SW=n(cRe,"A",{href:!0});var d7t=s(SW);ifr=r(d7t,"TFAlbertModel"),d7t.forEach(t),dfr=r(cRe," (ALBERT model)"),cRe.forEach(t),cfr=i(D),f7=n(D,"LI",{});var fRe=s(f7);lbe=n(fRe,"STRONG",{});var c7t=s(lbe);ffr=r(c7t,"bart"),c7t.forEach(t),mfr=r(fRe," \u2014 "),RW=n(fRe,"A",{href:!0});var f7t=s(RW);gfr=r(f7t,"TFBartModel"),f7t.forEach(t),hfr=r(fRe," (BART model)"),fRe.forEach(t),pfr=i(D),m7=n(D,"LI",{});var mRe=s(m7);ibe=n(mRe,"STRONG",{});var m7t=s(ibe);_fr=r(m7t,"bert"),m7t.forEach(t),ufr=r(mRe," \u2014 "),PW=n(mRe,"A",{href:!0});var g7t=s(PW);bfr=r(g7t,"TFBertModel"),g7t.forEach(t),vfr=r(mRe," (BERT model)"),mRe.forEach(t),Ffr=i(D),g7=n(D,"LI",{});var gRe=s(g7);dbe=n(gRe,"STRONG",{});var h7t=s(dbe);Tfr=r(h7t,"blenderbot"),h7t.forEach(t),Mfr=r(gRe," \u2014 "),BW=n(gRe,"A",{href:!0});var p7t=s(BW);Efr=r(p7t,"TFBlenderbotModel"),p7t.forEach(t),Cfr=r(gRe," (Blenderbot model)"),gRe.forEach(t),wfr=i(D),h7=n(D,"LI",{});var hRe=s(h7);cbe=n(hRe,"STRONG",{});var _7t=s(cbe);Afr=r(_7t,"blenderbot-small"),_7t.forEach(t),yfr=r(hRe," \u2014 "),IW=n(hRe,"A",{href:!0});var u7t=s(IW);Lfr=r(u7t,"TFBlenderbotSmallModel"),u7t.forEach(t),xfr=r(hRe," (BlenderbotSmall model)"),hRe.forEach(t),$fr=i(D),p7=n(D,"LI",{});var pRe=s(p7);fbe=n(pRe,"STRONG",{});var b7t=s(fbe);kfr=r(b7t,"camembert"),b7t.forEach(t),Sfr=r(pRe," \u2014 "),NW=n(pRe,"A",{href:!0});var v7t=s(NW);Rfr=r(v7t,"TFCamembertModel"),v7t.forEach(t),Pfr=r(pRe," (CamemBERT model)"),pRe.forEach(t),Bfr=i(D),_7=n(D,"LI",{});var _Re=s(_7);mbe=n(_Re,"STRONG",{});var F7t=s(mbe);Ifr=r(F7t,"clip"),F7t.forEach(t),Nfr=r(_Re," \u2014 "),qW=n(_Re,"A",{href:!0});var T7t=s(qW);qfr=r(T7t,"TFCLIPModel"),T7t.forEach(t),jfr=r(_Re," (CLIP model)"),_Re.forEach(t),Dfr=i(D),u7=n(D,"LI",{});var uRe=s(u7);gbe=n(uRe,"STRONG",{});var M7t=s(gbe);Gfr=r(M7t,"convbert"),M7t.forEach(t),Ofr=r(uRe," \u2014 "),jW=n(uRe,"A",{href:!0});var E7t=s(jW);Vfr=r(E7t,"TFConvBertModel"),E7t.forEach(t),Xfr=r(uRe," (ConvBERT model)"),uRe.forEach(t),zfr=i(D),b7=n(D,"LI",{});var bRe=s(b7);hbe=n(bRe,"STRONG",{});var C7t=s(hbe);Wfr=r(C7t,"convnext"),C7t.forEach(t),Qfr=r(bRe," \u2014 "),DW=n(bRe,"A",{href:!0});var w7t=s(DW);Hfr=r(w7t,"TFConvNextModel"),w7t.forEach(t),Ufr=r(bRe," (ConvNeXT model)"),bRe.forEach(t),Jfr=i(D),v7=n(D,"LI",{});var vRe=s(v7);pbe=n(vRe,"STRONG",{});var A7t=s(pbe);Yfr=r(A7t,"ctrl"),A7t.forEach(t),Kfr=r(vRe," \u2014 "),GW=n(vRe,"A",{href:!0});var y7t=s(GW);Zfr=r(y7t,"TFCTRLModel"),y7t.forEach(t),emr=r(vRe," (CTRL model)"),vRe.forEach(t),omr=i(D),F7=n(D,"LI",{});var FRe=s(F7);_be=n(FRe,"STRONG",{});var L7t=s(_be);rmr=r(L7t,"data2vec-vision"),L7t.forEach(t),tmr=r(FRe," \u2014 "),OW=n(FRe,"A",{href:!0});var x7t=s(OW);amr=r(x7t,"TFData2VecVisionModel"),x7t.forEach(t),nmr=r(FRe," (Data2VecVision model)"),FRe.forEach(t),smr=i(D),T7=n(D,"LI",{});var TRe=s(T7);ube=n(TRe,"STRONG",{});var $7t=s(ube);lmr=r($7t,"deberta"),$7t.forEach(t),imr=r(TRe," \u2014 "),VW=n(TRe,"A",{href:!0});var k7t=s(VW);dmr=r(k7t,"TFDebertaModel"),k7t.forEach(t),cmr=r(TRe," (DeBERTa model)"),TRe.forEach(t),fmr=i(D),M7=n(D,"LI",{});var MRe=s(M7);bbe=n(MRe,"STRONG",{});var S7t=s(bbe);mmr=r(S7t,"deberta-v2"),S7t.forEach(t),gmr=r(MRe," \u2014 "),XW=n(MRe,"A",{href:!0});var R7t=s(XW);hmr=r(R7t,"TFDebertaV2Model"),R7t.forEach(t),pmr=r(MRe," (DeBERTa-v2 model)"),MRe.forEach(t),_mr=i(D),E7=n(D,"LI",{});var ERe=s(E7);vbe=n(ERe,"STRONG",{});var P7t=s(vbe);umr=r(P7t,"distilbert"),P7t.forEach(t),bmr=r(ERe," \u2014 "),zW=n(ERe,"A",{href:!0});var B7t=s(zW);vmr=r(B7t,"TFDistilBertModel"),B7t.forEach(t),Fmr=r(ERe," (DistilBERT model)"),ERe.forEach(t),Tmr=i(D),C7=n(D,"LI",{});var CRe=s(C7);Fbe=n(CRe,"STRONG",{});var I7t=s(Fbe);Mmr=r(I7t,"dpr"),I7t.forEach(t),Emr=r(CRe," \u2014 "),WW=n(CRe,"A",{href:!0});var N7t=s(WW);Cmr=r(N7t,"TFDPRQuestionEncoder"),N7t.forEach(t),wmr=r(CRe," (DPR model)"),CRe.forEach(t),Amr=i(D),w7=n(D,"LI",{});var wRe=s(w7);Tbe=n(wRe,"STRONG",{});var q7t=s(Tbe);ymr=r(q7t,"electra"),q7t.forEach(t),Lmr=r(wRe," \u2014 "),QW=n(wRe,"A",{href:!0});var j7t=s(QW);xmr=r(j7t,"TFElectraModel"),j7t.forEach(t),$mr=r(wRe," (ELECTRA model)"),wRe.forEach(t),kmr=i(D),A7=n(D,"LI",{});var ARe=s(A7);Mbe=n(ARe,"STRONG",{});var D7t=s(Mbe);Smr=r(D7t,"flaubert"),D7t.forEach(t),Rmr=r(ARe," \u2014 "),HW=n(ARe,"A",{href:!0});var G7t=s(HW);Pmr=r(G7t,"TFFlaubertModel"),G7t.forEach(t),Bmr=r(ARe," (FlauBERT model)"),ARe.forEach(t),Imr=i(D),Ns=n(D,"LI",{});var ak=s(Ns);Ebe=n(ak,"STRONG",{});var O7t=s(Ebe);Nmr=r(O7t,"funnel"),O7t.forEach(t),qmr=r(ak," \u2014 "),UW=n(ak,"A",{href:!0});var V7t=s(UW);jmr=r(V7t,"TFFunnelModel"),V7t.forEach(t),Dmr=r(ak," or "),JW=n(ak,"A",{href:!0});var X7t=s(JW);Gmr=r(X7t,"TFFunnelBaseModel"),X7t.forEach(t),Omr=r(ak," (Funnel Transformer model)"),ak.forEach(t),Vmr=i(D),y7=n(D,"LI",{});var yRe=s(y7);Cbe=n(yRe,"STRONG",{});var z7t=s(Cbe);Xmr=r(z7t,"gpt2"),z7t.forEach(t),zmr=r(yRe," \u2014 "),YW=n(yRe,"A",{href:!0});var W7t=s(YW);Wmr=r(W7t,"TFGPT2Model"),W7t.forEach(t),Qmr=r(yRe," (OpenAI GPT-2 model)"),yRe.forEach(t),Hmr=i(D),L7=n(D,"LI",{});var LRe=s(L7);wbe=n(LRe,"STRONG",{});var Q7t=s(wbe);Umr=r(Q7t,"gptj"),Q7t.forEach(t),Jmr=r(LRe," \u2014 "),KW=n(LRe,"A",{href:!0});var H7t=s(KW);Ymr=r(H7t,"TFGPTJModel"),H7t.forEach(t),Kmr=r(LRe," (GPT-J model)"),LRe.forEach(t),Zmr=i(D),x7=n(D,"LI",{});var xRe=s(x7);Abe=n(xRe,"STRONG",{});var U7t=s(Abe);egr=r(U7t,"hubert"),U7t.forEach(t),ogr=r(xRe," \u2014 "),ZW=n(xRe,"A",{href:!0});var J7t=s(ZW);rgr=r(J7t,"TFHubertModel"),J7t.forEach(t),tgr=r(xRe," (Hubert model)"),xRe.forEach(t),agr=i(D),$7=n(D,"LI",{});var $Re=s($7);ybe=n($Re,"STRONG",{});var Y7t=s(ybe);ngr=r(Y7t,"layoutlm"),Y7t.forEach(t),sgr=r($Re," \u2014 "),eQ=n($Re,"A",{href:!0});var K7t=s(eQ);lgr=r(K7t,"TFLayoutLMModel"),K7t.forEach(t),igr=r($Re," (LayoutLM model)"),$Re.forEach(t),dgr=i(D),k7=n(D,"LI",{});var kRe=s(k7);Lbe=n(kRe,"STRONG",{});var Z7t=s(Lbe);cgr=r(Z7t,"led"),Z7t.forEach(t),fgr=r(kRe," \u2014 "),oQ=n(kRe,"A",{href:!0});var eMt=s(oQ);mgr=r(eMt,"TFLEDModel"),eMt.forEach(t),ggr=r(kRe," (LED model)"),kRe.forEach(t),hgr=i(D),S7=n(D,"LI",{});var SRe=s(S7);xbe=n(SRe,"STRONG",{});var oMt=s(xbe);pgr=r(oMt,"longformer"),oMt.forEach(t),_gr=r(SRe," \u2014 "),rQ=n(SRe,"A",{href:!0});var rMt=s(rQ);ugr=r(rMt,"TFLongformerModel"),rMt.forEach(t),bgr=r(SRe," (Longformer model)"),SRe.forEach(t),vgr=i(D),R7=n(D,"LI",{});var RRe=s(R7);$be=n(RRe,"STRONG",{});var tMt=s($be);Fgr=r(tMt,"lxmert"),tMt.forEach(t),Tgr=r(RRe," \u2014 "),tQ=n(RRe,"A",{href:!0});var aMt=s(tQ);Mgr=r(aMt,"TFLxmertModel"),aMt.forEach(t),Egr=r(RRe," (LXMERT model)"),RRe.forEach(t),Cgr=i(D),P7=n(D,"LI",{});var PRe=s(P7);kbe=n(PRe,"STRONG",{});var nMt=s(kbe);wgr=r(nMt,"marian"),nMt.forEach(t),Agr=r(PRe," \u2014 "),aQ=n(PRe,"A",{href:!0});var sMt=s(aQ);ygr=r(sMt,"TFMarianModel"),sMt.forEach(t),Lgr=r(PRe," (Marian model)"),PRe.forEach(t),xgr=i(D),B7=n(D,"LI",{});var BRe=s(B7);Sbe=n(BRe,"STRONG",{});var lMt=s(Sbe);$gr=r(lMt,"mbart"),lMt.forEach(t),kgr=r(BRe," \u2014 "),nQ=n(BRe,"A",{href:!0});var iMt=s(nQ);Sgr=r(iMt,"TFMBartModel"),iMt.forEach(t),Rgr=r(BRe," (mBART model)"),BRe.forEach(t),Pgr=i(D),I7=n(D,"LI",{});var IRe=s(I7);Rbe=n(IRe,"STRONG",{});var dMt=s(Rbe);Bgr=r(dMt,"mobilebert"),dMt.forEach(t),Igr=r(IRe," \u2014 "),sQ=n(IRe,"A",{href:!0});var cMt=s(sQ);Ngr=r(cMt,"TFMobileBertModel"),cMt.forEach(t),qgr=r(IRe," (MobileBERT model)"),IRe.forEach(t),jgr=i(D),N7=n(D,"LI",{});var NRe=s(N7);Pbe=n(NRe,"STRONG",{});var fMt=s(Pbe);Dgr=r(fMt,"mpnet"),fMt.forEach(t),Ggr=r(NRe," \u2014 "),lQ=n(NRe,"A",{href:!0});var mMt=s(lQ);Ogr=r(mMt,"TFMPNetModel"),mMt.forEach(t),Vgr=r(NRe," (MPNet model)"),NRe.forEach(t),Xgr=i(D),q7=n(D,"LI",{});var qRe=s(q7);Bbe=n(qRe,"STRONG",{});var gMt=s(Bbe);zgr=r(gMt,"mt5"),gMt.forEach(t),Wgr=r(qRe," \u2014 "),iQ=n(qRe,"A",{href:!0});var hMt=s(iQ);Qgr=r(hMt,"TFMT5Model"),hMt.forEach(t),Hgr=r(qRe," (MT5 model)"),qRe.forEach(t),Ugr=i(D),j7=n(D,"LI",{});var jRe=s(j7);Ibe=n(jRe,"STRONG",{});var pMt=s(Ibe);Jgr=r(pMt,"openai-gpt"),pMt.forEach(t),Ygr=r(jRe," \u2014 "),dQ=n(jRe,"A",{href:!0});var _Mt=s(dQ);Kgr=r(_Mt,"TFOpenAIGPTModel"),_Mt.forEach(t),Zgr=r(jRe," (OpenAI GPT model)"),jRe.forEach(t),ehr=i(D),D7=n(D,"LI",{});var DRe=s(D7);Nbe=n(DRe,"STRONG",{});var uMt=s(Nbe);ohr=r(uMt,"opt"),uMt.forEach(t),rhr=r(DRe," \u2014 "),cQ=n(DRe,"A",{href:!0});var bMt=s(cQ);thr=r(bMt,"TFOPTModel"),bMt.forEach(t),ahr=r(DRe," (OPT model)"),DRe.forEach(t),nhr=i(D),G7=n(D,"LI",{});var GRe=s(G7);qbe=n(GRe,"STRONG",{});var vMt=s(qbe);shr=r(vMt,"pegasus"),vMt.forEach(t),lhr=r(GRe," \u2014 "),fQ=n(GRe,"A",{href:!0});var FMt=s(fQ);ihr=r(FMt,"TFPegasusModel"),FMt.forEach(t),dhr=r(GRe," (Pegasus model)"),GRe.forEach(t),chr=i(D),O7=n(D,"LI",{});var ORe=s(O7);jbe=n(ORe,"STRONG",{});var TMt=s(jbe);fhr=r(TMt,"rembert"),TMt.forEach(t),mhr=r(ORe," \u2014 "),mQ=n(ORe,"A",{href:!0});var MMt=s(mQ);ghr=r(MMt,"TFRemBertModel"),MMt.forEach(t),hhr=r(ORe," (RemBERT model)"),ORe.forEach(t),phr=i(D),V7=n(D,"LI",{});var VRe=s(V7);Dbe=n(VRe,"STRONG",{});var EMt=s(Dbe);_hr=r(EMt,"roberta"),EMt.forEach(t),uhr=r(VRe," \u2014 "),gQ=n(VRe,"A",{href:!0});var CMt=s(gQ);bhr=r(CMt,"TFRobertaModel"),CMt.forEach(t),vhr=r(VRe," (RoBERTa model)"),VRe.forEach(t),Fhr=i(D),X7=n(D,"LI",{});var XRe=s(X7);Gbe=n(XRe,"STRONG",{});var wMt=s(Gbe);Thr=r(wMt,"roformer"),wMt.forEach(t),Mhr=r(XRe," \u2014 "),hQ=n(XRe,"A",{href:!0});var AMt=s(hQ);Ehr=r(AMt,"TFRoFormerModel"),AMt.forEach(t),Chr=r(XRe," (RoFormer model)"),XRe.forEach(t),whr=i(D),z7=n(D,"LI",{});var zRe=s(z7);Obe=n(zRe,"STRONG",{});var yMt=s(Obe);Ahr=r(yMt,"speech_to_text"),yMt.forEach(t),yhr=r(zRe," \u2014 "),pQ=n(zRe,"A",{href:!0});var LMt=s(pQ);Lhr=r(LMt,"TFSpeech2TextModel"),LMt.forEach(t),xhr=r(zRe," (Speech2Text model)"),zRe.forEach(t),$hr=i(D),W7=n(D,"LI",{});var WRe=s(W7);Vbe=n(WRe,"STRONG",{});var xMt=s(Vbe);khr=r(xMt,"swin"),xMt.forEach(t),Shr=r(WRe," \u2014 "),_Q=n(WRe,"A",{href:!0});var $Mt=s(_Q);Rhr=r($Mt,"TFSwinModel"),$Mt.forEach(t),Phr=r(WRe," (Swin Transformer model)"),WRe.forEach(t),Bhr=i(D),Q7=n(D,"LI",{});var QRe=s(Q7);Xbe=n(QRe,"STRONG",{});var kMt=s(Xbe);Ihr=r(kMt,"t5"),kMt.forEach(t),Nhr=r(QRe," \u2014 "),uQ=n(QRe,"A",{href:!0});var SMt=s(uQ);qhr=r(SMt,"TFT5Model"),SMt.forEach(t),jhr=r(QRe," (T5 model)"),QRe.forEach(t),Dhr=i(D),H7=n(D,"LI",{});var HRe=s(H7);zbe=n(HRe,"STRONG",{});var RMt=s(zbe);Ghr=r(RMt,"tapas"),RMt.forEach(t),Ohr=r(HRe," \u2014 "),bQ=n(HRe,"A",{href:!0});var PMt=s(bQ);Vhr=r(PMt,"TFTapasModel"),PMt.forEach(t),Xhr=r(HRe," (TAPAS model)"),HRe.forEach(t),zhr=i(D),U7=n(D,"LI",{});var URe=s(U7);Wbe=n(URe,"STRONG",{});var BMt=s(Wbe);Whr=r(BMt,"transfo-xl"),BMt.forEach(t),Qhr=r(URe," \u2014 "),vQ=n(URe,"A",{href:!0});var IMt=s(vQ);Hhr=r(IMt,"TFTransfoXLModel"),IMt.forEach(t),Uhr=r(URe," (Transformer-XL model)"),URe.forEach(t),Jhr=i(D),J7=n(D,"LI",{});var JRe=s(J7);Qbe=n(JRe,"STRONG",{});var NMt=s(Qbe);Yhr=r(NMt,"vit"),NMt.forEach(t),Khr=r(JRe," \u2014 "),FQ=n(JRe,"A",{href:!0});var qMt=s(FQ);Zhr=r(qMt,"TFViTModel"),qMt.forEach(t),epr=r(JRe," (ViT model)"),JRe.forEach(t),opr=i(D),Y7=n(D,"LI",{});var YRe=s(Y7);Hbe=n(YRe,"STRONG",{});var jMt=s(Hbe);rpr=r(jMt,"vit_mae"),jMt.forEach(t),tpr=r(YRe," \u2014 "),TQ=n(YRe,"A",{href:!0});var DMt=s(TQ);apr=r(DMt,"TFViTMAEModel"),DMt.forEach(t),npr=r(YRe," (ViTMAE model)"),YRe.forEach(t),spr=i(D),K7=n(D,"LI",{});var KRe=s(K7);Ube=n(KRe,"STRONG",{});var GMt=s(Ube);lpr=r(GMt,"wav2vec2"),GMt.forEach(t),ipr=r(KRe," \u2014 "),MQ=n(KRe,"A",{href:!0});var OMt=s(MQ);dpr=r(OMt,"TFWav2Vec2Model"),OMt.forEach(t),cpr=r(KRe," (Wav2Vec2 model)"),KRe.forEach(t),fpr=i(D),Z7=n(D,"LI",{});var ZRe=s(Z7);Jbe=n(ZRe,"STRONG",{});var VMt=s(Jbe);mpr=r(VMt,"xlm"),VMt.forEach(t),gpr=r(ZRe," \u2014 "),EQ=n(ZRe,"A",{href:!0});var XMt=s(EQ);hpr=r(XMt,"TFXLMModel"),XMt.forEach(t),ppr=r(ZRe," (XLM model)"),ZRe.forEach(t),_pr=i(D),eM=n(D,"LI",{});var ePe=s(eM);Ybe=n(ePe,"STRONG",{});var zMt=s(Ybe);upr=r(zMt,"xlm-roberta"),zMt.forEach(t),bpr=r(ePe," \u2014 "),CQ=n(ePe,"A",{href:!0});var WMt=s(CQ);vpr=r(WMt,"TFXLMRobertaModel"),WMt.forEach(t),Fpr=r(ePe," (XLM-RoBERTa model)"),ePe.forEach(t),Tpr=i(D),oM=n(D,"LI",{});var oPe=s(oM);Kbe=n(oPe,"STRONG",{});var QMt=s(Kbe);Mpr=r(QMt,"xlnet"),QMt.forEach(t),Epr=r(oPe," \u2014 "),wQ=n(oPe,"A",{href:!0});var HMt=s(wQ);Cpr=r(HMt,"TFXLNetModel"),HMt.forEach(t),wpr=r(oPe," (XLNet model)"),oPe.forEach(t),D.forEach(t),Apr=i(pl),T(rM.$$.fragment,pl),pl.forEach(t),hl.forEach(t),aDe=i(f),zd=n(f,"H2",{class:!0});var cOe=s(zd);tM=n(cOe,"A",{id:!0,class:!0,href:!0});var UMt=s(tM);Zbe=n(UMt,"SPAN",{});var JMt=s(Zbe);T(A8.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),ypr=i(cOe),eve=n(cOe,"SPAN",{});var YMt=s(eve);Lpr=r(YMt,"TFAutoModelForPreTraining"),YMt.forEach(t),cOe.forEach(t),nDe=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(y8.$$.fragment,_l),xpr=i(_l),Wd=n(_l,"P",{});var qee=s(Wd);$pr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),AQ=n(qee,"A",{href:!0});var KMt=s(AQ);kpr=r(KMt,"from_pretrained()"),KMt.forEach(t),Spr=r(qee," class method or the "),yQ=n(qee,"A",{href:!0});var ZMt=s(yQ);Rpr=r(ZMt,"from_config()"),ZMt.forEach(t),Ppr=r(qee,` class
method.`),qee.forEach(t),Bpr=i(_l),L8=n(_l,"P",{});var fOe=s(L8);Ipr=r(fOe,"This class cannot be instantiated directly using "),ove=n(fOe,"CODE",{});var e4t=s(ove);Npr=r(e4t,"__init__()"),e4t.forEach(t),qpr=r(fOe," (throws an error)."),fOe.forEach(t),jpr=i(_l),Lt=n(_l,"DIV",{class:!0});var jw=s(Lt);T(x8.$$.fragment,jw),Dpr=i(jw),rve=n(jw,"P",{});var o4t=s(rve);Gpr=r(o4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),o4t.forEach(t),Opr=i(jw),Qd=n(jw,"P",{});var jee=s(Qd);Vpr=r(jee,`Note:
Loading a model from its configuration file does `),tve=n(jee,"STRONG",{});var r4t=s(tve);Xpr=r(r4t,"not"),r4t.forEach(t),zpr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=n(jee,"A",{href:!0});var t4t=s(LQ);Wpr=r(t4t,"from_pretrained()"),t4t.forEach(t),Qpr=r(jee," to load the model weights."),jee.forEach(t),Hpr=i(jw),T(aM.$$.fragment,jw),jw.forEach(t),Upr=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T($8.$$.fragment,ul),Jpr=i(ul),ave=n(ul,"P",{});var a4t=s(ave);Ypr=r(a4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),a4t.forEach(t),Kpr=i(ul),Za=n(ul,"P",{});var Dw=s(Za);Zpr=r(Dw,"The model class to instantiate is selected based on the "),nve=n(Dw,"CODE",{});var n4t=s(nve);e_r=r(n4t,"model_type"),n4t.forEach(t),o_r=r(Dw,` property of the config object (either
passed as an argument or loaded from `),sve=n(Dw,"CODE",{});var s4t=s(sve);r_r=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),t_r=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(Dw,"CODE",{});var l4t=s(lve);a_r=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),n_r=r(Dw,":"),Dw.forEach(t),s_r=i(ul),se=n(ul,"UL",{});var le=s(se);nM=n(le,"LI",{});var rPe=s(nM);ive=n(rPe,"STRONG",{});var i4t=s(ive);l_r=r(i4t,"albert"),i4t.forEach(t),i_r=r(rPe," \u2014 "),xQ=n(rPe,"A",{href:!0});var d4t=s(xQ);d_r=r(d4t,"TFAlbertForPreTraining"),d4t.forEach(t),c_r=r(rPe," (ALBERT model)"),rPe.forEach(t),f_r=i(le),sM=n(le,"LI",{});var tPe=s(sM);dve=n(tPe,"STRONG",{});var c4t=s(dve);m_r=r(c4t,"bart"),c4t.forEach(t),g_r=r(tPe," \u2014 "),$Q=n(tPe,"A",{href:!0});var f4t=s($Q);h_r=r(f4t,"TFBartForConditionalGeneration"),f4t.forEach(t),p_r=r(tPe," (BART model)"),tPe.forEach(t),__r=i(le),lM=n(le,"LI",{});var aPe=s(lM);cve=n(aPe,"STRONG",{});var m4t=s(cve);u_r=r(m4t,"bert"),m4t.forEach(t),b_r=r(aPe," \u2014 "),kQ=n(aPe,"A",{href:!0});var g4t=s(kQ);v_r=r(g4t,"TFBertForPreTraining"),g4t.forEach(t),F_r=r(aPe," (BERT model)"),aPe.forEach(t),T_r=i(le),iM=n(le,"LI",{});var nPe=s(iM);fve=n(nPe,"STRONG",{});var h4t=s(fve);M_r=r(h4t,"camembert"),h4t.forEach(t),E_r=r(nPe," \u2014 "),SQ=n(nPe,"A",{href:!0});var p4t=s(SQ);C_r=r(p4t,"TFCamembertForMaskedLM"),p4t.forEach(t),w_r=r(nPe," (CamemBERT model)"),nPe.forEach(t),A_r=i(le),dM=n(le,"LI",{});var sPe=s(dM);mve=n(sPe,"STRONG",{});var _4t=s(mve);y_r=r(_4t,"ctrl"),_4t.forEach(t),L_r=r(sPe," \u2014 "),RQ=n(sPe,"A",{href:!0});var u4t=s(RQ);x_r=r(u4t,"TFCTRLLMHeadModel"),u4t.forEach(t),$_r=r(sPe," (CTRL model)"),sPe.forEach(t),k_r=i(le),cM=n(le,"LI",{});var lPe=s(cM);gve=n(lPe,"STRONG",{});var b4t=s(gve);S_r=r(b4t,"distilbert"),b4t.forEach(t),R_r=r(lPe," \u2014 "),PQ=n(lPe,"A",{href:!0});var v4t=s(PQ);P_r=r(v4t,"TFDistilBertForMaskedLM"),v4t.forEach(t),B_r=r(lPe," (DistilBERT model)"),lPe.forEach(t),I_r=i(le),fM=n(le,"LI",{});var iPe=s(fM);hve=n(iPe,"STRONG",{});var F4t=s(hve);N_r=r(F4t,"electra"),F4t.forEach(t),q_r=r(iPe," \u2014 "),BQ=n(iPe,"A",{href:!0});var T4t=s(BQ);j_r=r(T4t,"TFElectraForPreTraining"),T4t.forEach(t),D_r=r(iPe," (ELECTRA model)"),iPe.forEach(t),G_r=i(le),mM=n(le,"LI",{});var dPe=s(mM);pve=n(dPe,"STRONG",{});var M4t=s(pve);O_r=r(M4t,"flaubert"),M4t.forEach(t),V_r=r(dPe," \u2014 "),IQ=n(dPe,"A",{href:!0});var E4t=s(IQ);X_r=r(E4t,"TFFlaubertWithLMHeadModel"),E4t.forEach(t),z_r=r(dPe," (FlauBERT model)"),dPe.forEach(t),W_r=i(le),gM=n(le,"LI",{});var cPe=s(gM);_ve=n(cPe,"STRONG",{});var C4t=s(_ve);Q_r=r(C4t,"funnel"),C4t.forEach(t),H_r=r(cPe," \u2014 "),NQ=n(cPe,"A",{href:!0});var w4t=s(NQ);U_r=r(w4t,"TFFunnelForPreTraining"),w4t.forEach(t),J_r=r(cPe," (Funnel Transformer model)"),cPe.forEach(t),Y_r=i(le),hM=n(le,"LI",{});var fPe=s(hM);uve=n(fPe,"STRONG",{});var A4t=s(uve);K_r=r(A4t,"gpt2"),A4t.forEach(t),Z_r=r(fPe," \u2014 "),qQ=n(fPe,"A",{href:!0});var y4t=s(qQ);eur=r(y4t,"TFGPT2LMHeadModel"),y4t.forEach(t),our=r(fPe," (OpenAI GPT-2 model)"),fPe.forEach(t),rur=i(le),pM=n(le,"LI",{});var mPe=s(pM);bve=n(mPe,"STRONG",{});var L4t=s(bve);tur=r(L4t,"layoutlm"),L4t.forEach(t),aur=r(mPe," \u2014 "),jQ=n(mPe,"A",{href:!0});var x4t=s(jQ);nur=r(x4t,"TFLayoutLMForMaskedLM"),x4t.forEach(t),sur=r(mPe," (LayoutLM model)"),mPe.forEach(t),lur=i(le),_M=n(le,"LI",{});var gPe=s(_M);vve=n(gPe,"STRONG",{});var $4t=s(vve);iur=r($4t,"lxmert"),$4t.forEach(t),dur=r(gPe," \u2014 "),DQ=n(gPe,"A",{href:!0});var k4t=s(DQ);cur=r(k4t,"TFLxmertForPreTraining"),k4t.forEach(t),fur=r(gPe," (LXMERT model)"),gPe.forEach(t),mur=i(le),uM=n(le,"LI",{});var hPe=s(uM);Fve=n(hPe,"STRONG",{});var S4t=s(Fve);gur=r(S4t,"mobilebert"),S4t.forEach(t),hur=r(hPe," \u2014 "),GQ=n(hPe,"A",{href:!0});var R4t=s(GQ);pur=r(R4t,"TFMobileBertForPreTraining"),R4t.forEach(t),_ur=r(hPe," (MobileBERT model)"),hPe.forEach(t),uur=i(le),bM=n(le,"LI",{});var pPe=s(bM);Tve=n(pPe,"STRONG",{});var P4t=s(Tve);bur=r(P4t,"mpnet"),P4t.forEach(t),vur=r(pPe," \u2014 "),OQ=n(pPe,"A",{href:!0});var B4t=s(OQ);Fur=r(B4t,"TFMPNetForMaskedLM"),B4t.forEach(t),Tur=r(pPe," (MPNet model)"),pPe.forEach(t),Mur=i(le),vM=n(le,"LI",{});var _Pe=s(vM);Mve=n(_Pe,"STRONG",{});var I4t=s(Mve);Eur=r(I4t,"openai-gpt"),I4t.forEach(t),Cur=r(_Pe," \u2014 "),VQ=n(_Pe,"A",{href:!0});var N4t=s(VQ);wur=r(N4t,"TFOpenAIGPTLMHeadModel"),N4t.forEach(t),Aur=r(_Pe," (OpenAI GPT model)"),_Pe.forEach(t),yur=i(le),FM=n(le,"LI",{});var uPe=s(FM);Eve=n(uPe,"STRONG",{});var q4t=s(Eve);Lur=r(q4t,"roberta"),q4t.forEach(t),xur=r(uPe," \u2014 "),XQ=n(uPe,"A",{href:!0});var j4t=s(XQ);$ur=r(j4t,"TFRobertaForMaskedLM"),j4t.forEach(t),kur=r(uPe," (RoBERTa model)"),uPe.forEach(t),Sur=i(le),TM=n(le,"LI",{});var bPe=s(TM);Cve=n(bPe,"STRONG",{});var D4t=s(Cve);Rur=r(D4t,"t5"),D4t.forEach(t),Pur=r(bPe," \u2014 "),zQ=n(bPe,"A",{href:!0});var G4t=s(zQ);Bur=r(G4t,"TFT5ForConditionalGeneration"),G4t.forEach(t),Iur=r(bPe," (T5 model)"),bPe.forEach(t),Nur=i(le),MM=n(le,"LI",{});var vPe=s(MM);wve=n(vPe,"STRONG",{});var O4t=s(wve);qur=r(O4t,"tapas"),O4t.forEach(t),jur=r(vPe," \u2014 "),WQ=n(vPe,"A",{href:!0});var V4t=s(WQ);Dur=r(V4t,"TFTapasForMaskedLM"),V4t.forEach(t),Gur=r(vPe," (TAPAS model)"),vPe.forEach(t),Our=i(le),EM=n(le,"LI",{});var FPe=s(EM);Ave=n(FPe,"STRONG",{});var X4t=s(Ave);Vur=r(X4t,"transfo-xl"),X4t.forEach(t),Xur=r(FPe," \u2014 "),QQ=n(FPe,"A",{href:!0});var z4t=s(QQ);zur=r(z4t,"TFTransfoXLLMHeadModel"),z4t.forEach(t),Wur=r(FPe," (Transformer-XL model)"),FPe.forEach(t),Qur=i(le),CM=n(le,"LI",{});var TPe=s(CM);yve=n(TPe,"STRONG",{});var W4t=s(yve);Hur=r(W4t,"vit_mae"),W4t.forEach(t),Uur=r(TPe," \u2014 "),HQ=n(TPe,"A",{href:!0});var Q4t=s(HQ);Jur=r(Q4t,"TFViTMAEForPreTraining"),Q4t.forEach(t),Yur=r(TPe," (ViTMAE model)"),TPe.forEach(t),Kur=i(le),wM=n(le,"LI",{});var MPe=s(wM);Lve=n(MPe,"STRONG",{});var H4t=s(Lve);Zur=r(H4t,"xlm"),H4t.forEach(t),e2r=r(MPe," \u2014 "),UQ=n(MPe,"A",{href:!0});var U4t=s(UQ);o2r=r(U4t,"TFXLMWithLMHeadModel"),U4t.forEach(t),r2r=r(MPe," (XLM model)"),MPe.forEach(t),t2r=i(le),AM=n(le,"LI",{});var EPe=s(AM);xve=n(EPe,"STRONG",{});var J4t=s(xve);a2r=r(J4t,"xlm-roberta"),J4t.forEach(t),n2r=r(EPe," \u2014 "),JQ=n(EPe,"A",{href:!0});var Y4t=s(JQ);s2r=r(Y4t,"TFXLMRobertaForMaskedLM"),Y4t.forEach(t),l2r=r(EPe," (XLM-RoBERTa model)"),EPe.forEach(t),i2r=i(le),yM=n(le,"LI",{});var CPe=s(yM);$ve=n(CPe,"STRONG",{});var K4t=s($ve);d2r=r(K4t,"xlnet"),K4t.forEach(t),c2r=r(CPe," \u2014 "),YQ=n(CPe,"A",{href:!0});var Z4t=s(YQ);f2r=r(Z4t,"TFXLNetLMHeadModel"),Z4t.forEach(t),m2r=r(CPe," (XLNet model)"),CPe.forEach(t),le.forEach(t),g2r=i(ul),T(LM.$$.fragment,ul),ul.forEach(t),_l.forEach(t),sDe=i(f),Hd=n(f,"H2",{class:!0});var mOe=s(Hd);xM=n(mOe,"A",{id:!0,class:!0,href:!0});var eEt=s(xM);kve=n(eEt,"SPAN",{});var oEt=s(kve);T(k8.$$.fragment,oEt),oEt.forEach(t),eEt.forEach(t),h2r=i(mOe),Sve=n(mOe,"SPAN",{});var rEt=s(Sve);p2r=r(rEt,"TFAutoModelForCausalLM"),rEt.forEach(t),mOe.forEach(t),lDe=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(S8.$$.fragment,bl),_2r=i(bl),Ud=n(bl,"P",{});var Dee=s(Ud);u2r=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KQ=n(Dee,"A",{href:!0});var tEt=s(KQ);b2r=r(tEt,"from_pretrained()"),tEt.forEach(t),v2r=r(Dee," class method or the "),ZQ=n(Dee,"A",{href:!0});var aEt=s(ZQ);F2r=r(aEt,"from_config()"),aEt.forEach(t),T2r=r(Dee,` class
method.`),Dee.forEach(t),M2r=i(bl),R8=n(bl,"P",{});var gOe=s(R8);E2r=r(gOe,"This class cannot be instantiated directly using "),Rve=n(gOe,"CODE",{});var nEt=s(Rve);C2r=r(nEt,"__init__()"),nEt.forEach(t),w2r=r(gOe," (throws an error)."),gOe.forEach(t),A2r=i(bl),xt=n(bl,"DIV",{class:!0});var Gw=s(xt);T(P8.$$.fragment,Gw),y2r=i(Gw),Pve=n(Gw,"P",{});var sEt=s(Pve);L2r=r(sEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),sEt.forEach(t),x2r=i(Gw),Jd=n(Gw,"P",{});var Gee=s(Jd);$2r=r(Gee,`Note:
Loading a model from its configuration file does `),Bve=n(Gee,"STRONG",{});var lEt=s(Bve);k2r=r(lEt,"not"),lEt.forEach(t),S2r=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(Gee,"A",{href:!0});var iEt=s(eH);R2r=r(iEt,"from_pretrained()"),iEt.forEach(t),P2r=r(Gee," to load the model weights."),Gee.forEach(t),B2r=i(Gw),T($M.$$.fragment,Gw),Gw.forEach(t),I2r=i(bl),yr=n(bl,"DIV",{class:!0});var vl=s(yr);T(B8.$$.fragment,vl),N2r=i(vl),Ive=n(vl,"P",{});var dEt=s(Ive);q2r=r(dEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),dEt.forEach(t),j2r=i(vl),en=n(vl,"P",{});var Ow=s(en);D2r=r(Ow,"The model class to instantiate is selected based on the "),Nve=n(Ow,"CODE",{});var cEt=s(Nve);G2r=r(cEt,"model_type"),cEt.forEach(t),O2r=r(Ow,` property of the config object (either
passed as an argument or loaded from `),qve=n(Ow,"CODE",{});var fEt=s(qve);V2r=r(fEt,"pretrained_model_name_or_path"),fEt.forEach(t),X2r=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=n(Ow,"CODE",{});var mEt=s(jve);z2r=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),W2r=r(Ow,":"),Ow.forEach(t),Q2r=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);kM=n(Ce,"LI",{});var wPe=s(kM);Dve=n(wPe,"STRONG",{});var gEt=s(Dve);H2r=r(gEt,"bert"),gEt.forEach(t),U2r=r(wPe," \u2014 "),oH=n(wPe,"A",{href:!0});var hEt=s(oH);J2r=r(hEt,"TFBertLMHeadModel"),hEt.forEach(t),Y2r=r(wPe," (BERT model)"),wPe.forEach(t),K2r=i(Ce),SM=n(Ce,"LI",{});var APe=s(SM);Gve=n(APe,"STRONG",{});var pEt=s(Gve);Z2r=r(pEt,"camembert"),pEt.forEach(t),e1r=r(APe," \u2014 "),rH=n(APe,"A",{href:!0});var _Et=s(rH);o1r=r(_Et,"TFCamembertForCausalLM"),_Et.forEach(t),r1r=r(APe," (CamemBERT model)"),APe.forEach(t),t1r=i(Ce),RM=n(Ce,"LI",{});var yPe=s(RM);Ove=n(yPe,"STRONG",{});var uEt=s(Ove);a1r=r(uEt,"ctrl"),uEt.forEach(t),n1r=r(yPe," \u2014 "),tH=n(yPe,"A",{href:!0});var bEt=s(tH);s1r=r(bEt,"TFCTRLLMHeadModel"),bEt.forEach(t),l1r=r(yPe," (CTRL model)"),yPe.forEach(t),i1r=i(Ce),PM=n(Ce,"LI",{});var LPe=s(PM);Vve=n(LPe,"STRONG",{});var vEt=s(Vve);d1r=r(vEt,"gpt2"),vEt.forEach(t),c1r=r(LPe," \u2014 "),aH=n(LPe,"A",{href:!0});var FEt=s(aH);f1r=r(FEt,"TFGPT2LMHeadModel"),FEt.forEach(t),m1r=r(LPe," (OpenAI GPT-2 model)"),LPe.forEach(t),g1r=i(Ce),BM=n(Ce,"LI",{});var xPe=s(BM);Xve=n(xPe,"STRONG",{});var TEt=s(Xve);h1r=r(TEt,"gptj"),TEt.forEach(t),p1r=r(xPe," \u2014 "),nH=n(xPe,"A",{href:!0});var MEt=s(nH);_1r=r(MEt,"TFGPTJForCausalLM"),MEt.forEach(t),u1r=r(xPe," (GPT-J model)"),xPe.forEach(t),b1r=i(Ce),IM=n(Ce,"LI",{});var $Pe=s(IM);zve=n($Pe,"STRONG",{});var EEt=s(zve);v1r=r(EEt,"openai-gpt"),EEt.forEach(t),F1r=r($Pe," \u2014 "),sH=n($Pe,"A",{href:!0});var CEt=s(sH);T1r=r(CEt,"TFOpenAIGPTLMHeadModel"),CEt.forEach(t),M1r=r($Pe," (OpenAI GPT model)"),$Pe.forEach(t),E1r=i(Ce),NM=n(Ce,"LI",{});var kPe=s(NM);Wve=n(kPe,"STRONG",{});var wEt=s(Wve);C1r=r(wEt,"opt"),wEt.forEach(t),w1r=r(kPe," \u2014 "),lH=n(kPe,"A",{href:!0});var AEt=s(lH);A1r=r(AEt,"TFOPTForCausalLM"),AEt.forEach(t),y1r=r(kPe," (OPT model)"),kPe.forEach(t),L1r=i(Ce),qM=n(Ce,"LI",{});var SPe=s(qM);Qve=n(SPe,"STRONG",{});var yEt=s(Qve);x1r=r(yEt,"rembert"),yEt.forEach(t),$1r=r(SPe," \u2014 "),iH=n(SPe,"A",{href:!0});var LEt=s(iH);k1r=r(LEt,"TFRemBertForCausalLM"),LEt.forEach(t),S1r=r(SPe," (RemBERT model)"),SPe.forEach(t),R1r=i(Ce),jM=n(Ce,"LI",{});var RPe=s(jM);Hve=n(RPe,"STRONG",{});var xEt=s(Hve);P1r=r(xEt,"roberta"),xEt.forEach(t),B1r=r(RPe," \u2014 "),dH=n(RPe,"A",{href:!0});var $Et=s(dH);I1r=r($Et,"TFRobertaForCausalLM"),$Et.forEach(t),N1r=r(RPe," (RoBERTa model)"),RPe.forEach(t),q1r=i(Ce),DM=n(Ce,"LI",{});var PPe=s(DM);Uve=n(PPe,"STRONG",{});var kEt=s(Uve);j1r=r(kEt,"roformer"),kEt.forEach(t),D1r=r(PPe," \u2014 "),cH=n(PPe,"A",{href:!0});var SEt=s(cH);G1r=r(SEt,"TFRoFormerForCausalLM"),SEt.forEach(t),O1r=r(PPe," (RoFormer model)"),PPe.forEach(t),V1r=i(Ce),GM=n(Ce,"LI",{});var BPe=s(GM);Jve=n(BPe,"STRONG",{});var REt=s(Jve);X1r=r(REt,"transfo-xl"),REt.forEach(t),z1r=r(BPe," \u2014 "),fH=n(BPe,"A",{href:!0});var PEt=s(fH);W1r=r(PEt,"TFTransfoXLLMHeadModel"),PEt.forEach(t),Q1r=r(BPe," (Transformer-XL model)"),BPe.forEach(t),H1r=i(Ce),OM=n(Ce,"LI",{});var IPe=s(OM);Yve=n(IPe,"STRONG",{});var BEt=s(Yve);U1r=r(BEt,"xlm"),BEt.forEach(t),J1r=r(IPe," \u2014 "),mH=n(IPe,"A",{href:!0});var IEt=s(mH);Y1r=r(IEt,"TFXLMWithLMHeadModel"),IEt.forEach(t),K1r=r(IPe," (XLM model)"),IPe.forEach(t),Z1r=i(Ce),VM=n(Ce,"LI",{});var NPe=s(VM);Kve=n(NPe,"STRONG",{});var NEt=s(Kve);ebr=r(NEt,"xlnet"),NEt.forEach(t),obr=r(NPe," \u2014 "),gH=n(NPe,"A",{href:!0});var qEt=s(gH);rbr=r(qEt,"TFXLNetLMHeadModel"),qEt.forEach(t),tbr=r(NPe," (XLNet model)"),NPe.forEach(t),Ce.forEach(t),abr=i(vl),T(XM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),iDe=i(f),Yd=n(f,"H2",{class:!0});var hOe=s(Yd);zM=n(hOe,"A",{id:!0,class:!0,href:!0});var jEt=s(zM);Zve=n(jEt,"SPAN",{});var DEt=s(Zve);T(I8.$$.fragment,DEt),DEt.forEach(t),jEt.forEach(t),nbr=i(hOe),eFe=n(hOe,"SPAN",{});var GEt=s(eFe);sbr=r(GEt,"TFAutoModelForImageClassification"),GEt.forEach(t),hOe.forEach(t),dDe=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(N8.$$.fragment,Fl),lbr=i(Fl),Kd=n(Fl,"P",{});var Oee=s(Kd);ibr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hH=n(Oee,"A",{href:!0});var OEt=s(hH);dbr=r(OEt,"from_pretrained()"),OEt.forEach(t),cbr=r(Oee," class method or the "),pH=n(Oee,"A",{href:!0});var VEt=s(pH);fbr=r(VEt,"from_config()"),VEt.forEach(t),mbr=r(Oee,` class
method.`),Oee.forEach(t),gbr=i(Fl),q8=n(Fl,"P",{});var pOe=s(q8);hbr=r(pOe,"This class cannot be instantiated directly using "),oFe=n(pOe,"CODE",{});var XEt=s(oFe);pbr=r(XEt,"__init__()"),XEt.forEach(t),_br=r(pOe," (throws an error)."),pOe.forEach(t),ubr=i(Fl),$t=n(Fl,"DIV",{class:!0});var Vw=s($t);T(j8.$$.fragment,Vw),bbr=i(Vw),rFe=n(Vw,"P",{});var zEt=s(rFe);vbr=r(zEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zEt.forEach(t),Fbr=i(Vw),Zd=n(Vw,"P",{});var Vee=s(Zd);Tbr=r(Vee,`Note:
Loading a model from its configuration file does `),tFe=n(Vee,"STRONG",{});var WEt=s(tFe);Mbr=r(WEt,"not"),WEt.forEach(t),Ebr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(Vee,"A",{href:!0});var QEt=s(_H);Cbr=r(QEt,"from_pretrained()"),QEt.forEach(t),wbr=r(Vee," to load the model weights."),Vee.forEach(t),Abr=i(Vw),T(WM.$$.fragment,Vw),Vw.forEach(t),ybr=i(Fl),Lr=n(Fl,"DIV",{class:!0});var Tl=s(Lr);T(D8.$$.fragment,Tl),Lbr=i(Tl),aFe=n(Tl,"P",{});var HEt=s(aFe);xbr=r(HEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HEt.forEach(t),$br=i(Tl),on=n(Tl,"P",{});var Xw=s(on);kbr=r(Xw,"The model class to instantiate is selected based on the "),nFe=n(Xw,"CODE",{});var UEt=s(nFe);Sbr=r(UEt,"model_type"),UEt.forEach(t),Rbr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),sFe=n(Xw,"CODE",{});var JEt=s(sFe);Pbr=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),Bbr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=n(Xw,"CODE",{});var YEt=s(lFe);Ibr=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),Nbr=r(Xw,":"),Xw.forEach(t),qbr=i(Tl),rn=n(Tl,"UL",{});var zw=s(rn);QM=n(zw,"LI",{});var qPe=s(QM);iFe=n(qPe,"STRONG",{});var KEt=s(iFe);jbr=r(KEt,"convnext"),KEt.forEach(t),Dbr=r(qPe," \u2014 "),uH=n(qPe,"A",{href:!0});var ZEt=s(uH);Gbr=r(ZEt,"TFConvNextForImageClassification"),ZEt.forEach(t),Obr=r(qPe," (ConvNeXT model)"),qPe.forEach(t),Vbr=i(zw),HM=n(zw,"LI",{});var jPe=s(HM);dFe=n(jPe,"STRONG",{});var eCt=s(dFe);Xbr=r(eCt,"data2vec-vision"),eCt.forEach(t),zbr=r(jPe," \u2014 "),bH=n(jPe,"A",{href:!0});var oCt=s(bH);Wbr=r(oCt,"TFData2VecVisionForImageClassification"),oCt.forEach(t),Qbr=r(jPe," (Data2VecVision model)"),jPe.forEach(t),Hbr=i(zw),UM=n(zw,"LI",{});var DPe=s(UM);cFe=n(DPe,"STRONG",{});var rCt=s(cFe);Ubr=r(rCt,"swin"),rCt.forEach(t),Jbr=r(DPe," \u2014 "),vH=n(DPe,"A",{href:!0});var tCt=s(vH);Ybr=r(tCt,"TFSwinForImageClassification"),tCt.forEach(t),Kbr=r(DPe," (Swin Transformer model)"),DPe.forEach(t),Zbr=i(zw),JM=n(zw,"LI",{});var GPe=s(JM);fFe=n(GPe,"STRONG",{});var aCt=s(fFe);evr=r(aCt,"vit"),aCt.forEach(t),ovr=r(GPe," \u2014 "),FH=n(GPe,"A",{href:!0});var nCt=s(FH);rvr=r(nCt,"TFViTForImageClassification"),nCt.forEach(t),tvr=r(GPe," (ViT model)"),GPe.forEach(t),zw.forEach(t),avr=i(Tl),T(YM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),cDe=i(f),ec=n(f,"H2",{class:!0});var _Oe=s(ec);KM=n(_Oe,"A",{id:!0,class:!0,href:!0});var sCt=s(KM);mFe=n(sCt,"SPAN",{});var lCt=s(mFe);T(G8.$$.fragment,lCt),lCt.forEach(t),sCt.forEach(t),nvr=i(_Oe),gFe=n(_Oe,"SPAN",{});var iCt=s(gFe);svr=r(iCt,"TFAutoModelForMaskedLM"),iCt.forEach(t),_Oe.forEach(t),fDe=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(O8.$$.fragment,Ml),lvr=i(Ml),oc=n(Ml,"P",{});var Xee=s(oc);ivr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TH=n(Xee,"A",{href:!0});var dCt=s(TH);dvr=r(dCt,"from_pretrained()"),dCt.forEach(t),cvr=r(Xee," class method or the "),MH=n(Xee,"A",{href:!0});var cCt=s(MH);fvr=r(cCt,"from_config()"),cCt.forEach(t),mvr=r(Xee,` class
method.`),Xee.forEach(t),gvr=i(Ml),V8=n(Ml,"P",{});var uOe=s(V8);hvr=r(uOe,"This class cannot be instantiated directly using "),hFe=n(uOe,"CODE",{});var fCt=s(hFe);pvr=r(fCt,"__init__()"),fCt.forEach(t),_vr=r(uOe," (throws an error)."),uOe.forEach(t),uvr=i(Ml),kt=n(Ml,"DIV",{class:!0});var Ww=s(kt);T(X8.$$.fragment,Ww),bvr=i(Ww),pFe=n(Ww,"P",{});var mCt=s(pFe);vvr=r(mCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mCt.forEach(t),Fvr=i(Ww),rc=n(Ww,"P",{});var zee=s(rc);Tvr=r(zee,`Note:
Loading a model from its configuration file does `),_Fe=n(zee,"STRONG",{});var gCt=s(_Fe);Mvr=r(gCt,"not"),gCt.forEach(t),Evr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(zee,"A",{href:!0});var hCt=s(EH);Cvr=r(hCt,"from_pretrained()"),hCt.forEach(t),wvr=r(zee," to load the model weights."),zee.forEach(t),Avr=i(Ww),T(ZM.$$.fragment,Ww),Ww.forEach(t),yvr=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(z8.$$.fragment,El),Lvr=i(El),uFe=n(El,"P",{});var pCt=s(uFe);xvr=r(pCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pCt.forEach(t),$vr=i(El),tn=n(El,"P",{});var Qw=s(tn);kvr=r(Qw,"The model class to instantiate is selected based on the "),bFe=n(Qw,"CODE",{});var _Ct=s(bFe);Svr=r(_Ct,"model_type"),_Ct.forEach(t),Rvr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),vFe=n(Qw,"CODE",{});var uCt=s(vFe);Pvr=r(uCt,"pretrained_model_name_or_path"),uCt.forEach(t),Bvr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=n(Qw,"CODE",{});var bCt=s(FFe);Ivr=r(bCt,"pretrained_model_name_or_path"),bCt.forEach(t),Nvr=r(Qw,":"),Qw.forEach(t),qvr=i(El),ie=n(El,"UL",{});var fe=s(ie);e4=n(fe,"LI",{});var OPe=s(e4);TFe=n(OPe,"STRONG",{});var vCt=s(TFe);jvr=r(vCt,"albert"),vCt.forEach(t),Dvr=r(OPe," \u2014 "),CH=n(OPe,"A",{href:!0});var FCt=s(CH);Gvr=r(FCt,"TFAlbertForMaskedLM"),FCt.forEach(t),Ovr=r(OPe," (ALBERT model)"),OPe.forEach(t),Vvr=i(fe),o4=n(fe,"LI",{});var VPe=s(o4);MFe=n(VPe,"STRONG",{});var TCt=s(MFe);Xvr=r(TCt,"bert"),TCt.forEach(t),zvr=r(VPe," \u2014 "),wH=n(VPe,"A",{href:!0});var MCt=s(wH);Wvr=r(MCt,"TFBertForMaskedLM"),MCt.forEach(t),Qvr=r(VPe," (BERT model)"),VPe.forEach(t),Hvr=i(fe),r4=n(fe,"LI",{});var XPe=s(r4);EFe=n(XPe,"STRONG",{});var ECt=s(EFe);Uvr=r(ECt,"camembert"),ECt.forEach(t),Jvr=r(XPe," \u2014 "),AH=n(XPe,"A",{href:!0});var CCt=s(AH);Yvr=r(CCt,"TFCamembertForMaskedLM"),CCt.forEach(t),Kvr=r(XPe," (CamemBERT model)"),XPe.forEach(t),Zvr=i(fe),t4=n(fe,"LI",{});var zPe=s(t4);CFe=n(zPe,"STRONG",{});var wCt=s(CFe);eFr=r(wCt,"convbert"),wCt.forEach(t),oFr=r(zPe," \u2014 "),yH=n(zPe,"A",{href:!0});var ACt=s(yH);rFr=r(ACt,"TFConvBertForMaskedLM"),ACt.forEach(t),tFr=r(zPe," (ConvBERT model)"),zPe.forEach(t),aFr=i(fe),a4=n(fe,"LI",{});var WPe=s(a4);wFe=n(WPe,"STRONG",{});var yCt=s(wFe);nFr=r(yCt,"deberta"),yCt.forEach(t),sFr=r(WPe," \u2014 "),LH=n(WPe,"A",{href:!0});var LCt=s(LH);lFr=r(LCt,"TFDebertaForMaskedLM"),LCt.forEach(t),iFr=r(WPe," (DeBERTa model)"),WPe.forEach(t),dFr=i(fe),n4=n(fe,"LI",{});var QPe=s(n4);AFe=n(QPe,"STRONG",{});var xCt=s(AFe);cFr=r(xCt,"deberta-v2"),xCt.forEach(t),fFr=r(QPe," \u2014 "),xH=n(QPe,"A",{href:!0});var $Ct=s(xH);mFr=r($Ct,"TFDebertaV2ForMaskedLM"),$Ct.forEach(t),gFr=r(QPe," (DeBERTa-v2 model)"),QPe.forEach(t),hFr=i(fe),s4=n(fe,"LI",{});var HPe=s(s4);yFe=n(HPe,"STRONG",{});var kCt=s(yFe);pFr=r(kCt,"distilbert"),kCt.forEach(t),_Fr=r(HPe," \u2014 "),$H=n(HPe,"A",{href:!0});var SCt=s($H);uFr=r(SCt,"TFDistilBertForMaskedLM"),SCt.forEach(t),bFr=r(HPe," (DistilBERT model)"),HPe.forEach(t),vFr=i(fe),l4=n(fe,"LI",{});var UPe=s(l4);LFe=n(UPe,"STRONG",{});var RCt=s(LFe);FFr=r(RCt,"electra"),RCt.forEach(t),TFr=r(UPe," \u2014 "),kH=n(UPe,"A",{href:!0});var PCt=s(kH);MFr=r(PCt,"TFElectraForMaskedLM"),PCt.forEach(t),EFr=r(UPe," (ELECTRA model)"),UPe.forEach(t),CFr=i(fe),i4=n(fe,"LI",{});var JPe=s(i4);xFe=n(JPe,"STRONG",{});var BCt=s(xFe);wFr=r(BCt,"flaubert"),BCt.forEach(t),AFr=r(JPe," \u2014 "),SH=n(JPe,"A",{href:!0});var ICt=s(SH);yFr=r(ICt,"TFFlaubertWithLMHeadModel"),ICt.forEach(t),LFr=r(JPe," (FlauBERT model)"),JPe.forEach(t),xFr=i(fe),d4=n(fe,"LI",{});var YPe=s(d4);$Fe=n(YPe,"STRONG",{});var NCt=s($Fe);$Fr=r(NCt,"funnel"),NCt.forEach(t),kFr=r(YPe," \u2014 "),RH=n(YPe,"A",{href:!0});var qCt=s(RH);SFr=r(qCt,"TFFunnelForMaskedLM"),qCt.forEach(t),RFr=r(YPe," (Funnel Transformer model)"),YPe.forEach(t),PFr=i(fe),c4=n(fe,"LI",{});var KPe=s(c4);kFe=n(KPe,"STRONG",{});var jCt=s(kFe);BFr=r(jCt,"layoutlm"),jCt.forEach(t),IFr=r(KPe," \u2014 "),PH=n(KPe,"A",{href:!0});var DCt=s(PH);NFr=r(DCt,"TFLayoutLMForMaskedLM"),DCt.forEach(t),qFr=r(KPe," (LayoutLM model)"),KPe.forEach(t),jFr=i(fe),f4=n(fe,"LI",{});var ZPe=s(f4);SFe=n(ZPe,"STRONG",{});var GCt=s(SFe);DFr=r(GCt,"longformer"),GCt.forEach(t),GFr=r(ZPe," \u2014 "),BH=n(ZPe,"A",{href:!0});var OCt=s(BH);OFr=r(OCt,"TFLongformerForMaskedLM"),OCt.forEach(t),VFr=r(ZPe," (Longformer model)"),ZPe.forEach(t),XFr=i(fe),m4=n(fe,"LI",{});var eBe=s(m4);RFe=n(eBe,"STRONG",{});var VCt=s(RFe);zFr=r(VCt,"mobilebert"),VCt.forEach(t),WFr=r(eBe," \u2014 "),IH=n(eBe,"A",{href:!0});var XCt=s(IH);QFr=r(XCt,"TFMobileBertForMaskedLM"),XCt.forEach(t),HFr=r(eBe," (MobileBERT model)"),eBe.forEach(t),UFr=i(fe),g4=n(fe,"LI",{});var oBe=s(g4);PFe=n(oBe,"STRONG",{});var zCt=s(PFe);JFr=r(zCt,"mpnet"),zCt.forEach(t),YFr=r(oBe," \u2014 "),NH=n(oBe,"A",{href:!0});var WCt=s(NH);KFr=r(WCt,"TFMPNetForMaskedLM"),WCt.forEach(t),ZFr=r(oBe," (MPNet model)"),oBe.forEach(t),e6r=i(fe),h4=n(fe,"LI",{});var rBe=s(h4);BFe=n(rBe,"STRONG",{});var QCt=s(BFe);o6r=r(QCt,"rembert"),QCt.forEach(t),r6r=r(rBe," \u2014 "),qH=n(rBe,"A",{href:!0});var HCt=s(qH);t6r=r(HCt,"TFRemBertForMaskedLM"),HCt.forEach(t),a6r=r(rBe," (RemBERT model)"),rBe.forEach(t),n6r=i(fe),p4=n(fe,"LI",{});var tBe=s(p4);IFe=n(tBe,"STRONG",{});var UCt=s(IFe);s6r=r(UCt,"roberta"),UCt.forEach(t),l6r=r(tBe," \u2014 "),jH=n(tBe,"A",{href:!0});var JCt=s(jH);i6r=r(JCt,"TFRobertaForMaskedLM"),JCt.forEach(t),d6r=r(tBe," (RoBERTa model)"),tBe.forEach(t),c6r=i(fe),_4=n(fe,"LI",{});var aBe=s(_4);NFe=n(aBe,"STRONG",{});var YCt=s(NFe);f6r=r(YCt,"roformer"),YCt.forEach(t),m6r=r(aBe," \u2014 "),DH=n(aBe,"A",{href:!0});var KCt=s(DH);g6r=r(KCt,"TFRoFormerForMaskedLM"),KCt.forEach(t),h6r=r(aBe," (RoFormer model)"),aBe.forEach(t),p6r=i(fe),u4=n(fe,"LI",{});var nBe=s(u4);qFe=n(nBe,"STRONG",{});var ZCt=s(qFe);_6r=r(ZCt,"tapas"),ZCt.forEach(t),u6r=r(nBe," \u2014 "),GH=n(nBe,"A",{href:!0});var e5t=s(GH);b6r=r(e5t,"TFTapasForMaskedLM"),e5t.forEach(t),v6r=r(nBe," (TAPAS model)"),nBe.forEach(t),F6r=i(fe),b4=n(fe,"LI",{});var sBe=s(b4);jFe=n(sBe,"STRONG",{});var o5t=s(jFe);T6r=r(o5t,"xlm"),o5t.forEach(t),M6r=r(sBe," \u2014 "),OH=n(sBe,"A",{href:!0});var r5t=s(OH);E6r=r(r5t,"TFXLMWithLMHeadModel"),r5t.forEach(t),C6r=r(sBe," (XLM model)"),sBe.forEach(t),w6r=i(fe),v4=n(fe,"LI",{});var lBe=s(v4);DFe=n(lBe,"STRONG",{});var t5t=s(DFe);A6r=r(t5t,"xlm-roberta"),t5t.forEach(t),y6r=r(lBe," \u2014 "),VH=n(lBe,"A",{href:!0});var a5t=s(VH);L6r=r(a5t,"TFXLMRobertaForMaskedLM"),a5t.forEach(t),x6r=r(lBe," (XLM-RoBERTa model)"),lBe.forEach(t),fe.forEach(t),$6r=i(El),T(F4.$$.fragment,El),El.forEach(t),Ml.forEach(t),mDe=i(f),tc=n(f,"H2",{class:!0});var bOe=s(tc);T4=n(bOe,"A",{id:!0,class:!0,href:!0});var n5t=s(T4);GFe=n(n5t,"SPAN",{});var s5t=s(GFe);T(W8.$$.fragment,s5t),s5t.forEach(t),n5t.forEach(t),k6r=i(bOe),OFe=n(bOe,"SPAN",{});var l5t=s(OFe);S6r=r(l5t,"TFAutoModelForSeq2SeqLM"),l5t.forEach(t),bOe.forEach(t),gDe=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(Q8.$$.fragment,Cl),R6r=i(Cl),ac=n(Cl,"P",{});var Wee=s(ac);P6r=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XH=n(Wee,"A",{href:!0});var i5t=s(XH);B6r=r(i5t,"from_pretrained()"),i5t.forEach(t),I6r=r(Wee," class method or the "),zH=n(Wee,"A",{href:!0});var d5t=s(zH);N6r=r(d5t,"from_config()"),d5t.forEach(t),q6r=r(Wee,` class
method.`),Wee.forEach(t),j6r=i(Cl),H8=n(Cl,"P",{});var vOe=s(H8);D6r=r(vOe,"This class cannot be instantiated directly using "),VFe=n(vOe,"CODE",{});var c5t=s(VFe);G6r=r(c5t,"__init__()"),c5t.forEach(t),O6r=r(vOe," (throws an error)."),vOe.forEach(t),V6r=i(Cl),St=n(Cl,"DIV",{class:!0});var Hw=s(St);T(U8.$$.fragment,Hw),X6r=i(Hw),XFe=n(Hw,"P",{});var f5t=s(XFe);z6r=r(f5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),f5t.forEach(t),W6r=i(Hw),nc=n(Hw,"P",{});var Qee=s(nc);Q6r=r(Qee,`Note:
Loading a model from its configuration file does `),zFe=n(Qee,"STRONG",{});var m5t=s(zFe);H6r=r(m5t,"not"),m5t.forEach(t),U6r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(Qee,"A",{href:!0});var g5t=s(WH);J6r=r(g5t,"from_pretrained()"),g5t.forEach(t),Y6r=r(Qee," to load the model weights."),Qee.forEach(t),K6r=i(Hw),T(M4.$$.fragment,Hw),Hw.forEach(t),Z6r=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(J8.$$.fragment,wl),eTr=i(wl),WFe=n(wl,"P",{});var h5t=s(WFe);oTr=r(h5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),h5t.forEach(t),rTr=i(wl),an=n(wl,"P",{});var Uw=s(an);tTr=r(Uw,"The model class to instantiate is selected based on the "),QFe=n(Uw,"CODE",{});var p5t=s(QFe);aTr=r(p5t,"model_type"),p5t.forEach(t),nTr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),HFe=n(Uw,"CODE",{});var _5t=s(HFe);sTr=r(_5t,"pretrained_model_name_or_path"),_5t.forEach(t),lTr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(Uw,"CODE",{});var u5t=s(UFe);iTr=r(u5t,"pretrained_model_name_or_path"),u5t.forEach(t),dTr=r(Uw,":"),Uw.forEach(t),cTr=i(wl),Le=n(wl,"UL",{});var Ie=s(Le);E4=n(Ie,"LI",{});var iBe=s(E4);JFe=n(iBe,"STRONG",{});var b5t=s(JFe);fTr=r(b5t,"bart"),b5t.forEach(t),mTr=r(iBe," \u2014 "),QH=n(iBe,"A",{href:!0});var v5t=s(QH);gTr=r(v5t,"TFBartForConditionalGeneration"),v5t.forEach(t),hTr=r(iBe," (BART model)"),iBe.forEach(t),pTr=i(Ie),C4=n(Ie,"LI",{});var dBe=s(C4);YFe=n(dBe,"STRONG",{});var F5t=s(YFe);_Tr=r(F5t,"blenderbot"),F5t.forEach(t),uTr=r(dBe," \u2014 "),HH=n(dBe,"A",{href:!0});var T5t=s(HH);bTr=r(T5t,"TFBlenderbotForConditionalGeneration"),T5t.forEach(t),vTr=r(dBe," (Blenderbot model)"),dBe.forEach(t),FTr=i(Ie),w4=n(Ie,"LI",{});var cBe=s(w4);KFe=n(cBe,"STRONG",{});var M5t=s(KFe);TTr=r(M5t,"blenderbot-small"),M5t.forEach(t),MTr=r(cBe," \u2014 "),UH=n(cBe,"A",{href:!0});var E5t=s(UH);ETr=r(E5t,"TFBlenderbotSmallForConditionalGeneration"),E5t.forEach(t),CTr=r(cBe," (BlenderbotSmall model)"),cBe.forEach(t),wTr=i(Ie),A4=n(Ie,"LI",{});var fBe=s(A4);ZFe=n(fBe,"STRONG",{});var C5t=s(ZFe);ATr=r(C5t,"encoder-decoder"),C5t.forEach(t),yTr=r(fBe," \u2014 "),JH=n(fBe,"A",{href:!0});var w5t=s(JH);LTr=r(w5t,"TFEncoderDecoderModel"),w5t.forEach(t),xTr=r(fBe," (Encoder decoder model)"),fBe.forEach(t),$Tr=i(Ie),y4=n(Ie,"LI",{});var mBe=s(y4);e6e=n(mBe,"STRONG",{});var A5t=s(e6e);kTr=r(A5t,"led"),A5t.forEach(t),STr=r(mBe," \u2014 "),YH=n(mBe,"A",{href:!0});var y5t=s(YH);RTr=r(y5t,"TFLEDForConditionalGeneration"),y5t.forEach(t),PTr=r(mBe," (LED model)"),mBe.forEach(t),BTr=i(Ie),L4=n(Ie,"LI",{});var gBe=s(L4);o6e=n(gBe,"STRONG",{});var L5t=s(o6e);ITr=r(L5t,"marian"),L5t.forEach(t),NTr=r(gBe," \u2014 "),KH=n(gBe,"A",{href:!0});var x5t=s(KH);qTr=r(x5t,"TFMarianMTModel"),x5t.forEach(t),jTr=r(gBe," (Marian model)"),gBe.forEach(t),DTr=i(Ie),x4=n(Ie,"LI",{});var hBe=s(x4);r6e=n(hBe,"STRONG",{});var $5t=s(r6e);GTr=r($5t,"mbart"),$5t.forEach(t),OTr=r(hBe," \u2014 "),ZH=n(hBe,"A",{href:!0});var k5t=s(ZH);VTr=r(k5t,"TFMBartForConditionalGeneration"),k5t.forEach(t),XTr=r(hBe," (mBART model)"),hBe.forEach(t),zTr=i(Ie),$4=n(Ie,"LI",{});var pBe=s($4);t6e=n(pBe,"STRONG",{});var S5t=s(t6e);WTr=r(S5t,"mt5"),S5t.forEach(t),QTr=r(pBe," \u2014 "),eU=n(pBe,"A",{href:!0});var R5t=s(eU);HTr=r(R5t,"TFMT5ForConditionalGeneration"),R5t.forEach(t),UTr=r(pBe," (MT5 model)"),pBe.forEach(t),JTr=i(Ie),k4=n(Ie,"LI",{});var _Be=s(k4);a6e=n(_Be,"STRONG",{});var P5t=s(a6e);YTr=r(P5t,"pegasus"),P5t.forEach(t),KTr=r(_Be," \u2014 "),oU=n(_Be,"A",{href:!0});var B5t=s(oU);ZTr=r(B5t,"TFPegasusForConditionalGeneration"),B5t.forEach(t),e7r=r(_Be," (Pegasus model)"),_Be.forEach(t),o7r=i(Ie),S4=n(Ie,"LI",{});var uBe=s(S4);n6e=n(uBe,"STRONG",{});var I5t=s(n6e);r7r=r(I5t,"t5"),I5t.forEach(t),t7r=r(uBe," \u2014 "),rU=n(uBe,"A",{href:!0});var N5t=s(rU);a7r=r(N5t,"TFT5ForConditionalGeneration"),N5t.forEach(t),n7r=r(uBe," (T5 model)"),uBe.forEach(t),Ie.forEach(t),s7r=i(wl),T(R4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),hDe=i(f),sc=n(f,"H2",{class:!0});var FOe=s(sc);P4=n(FOe,"A",{id:!0,class:!0,href:!0});var q5t=s(P4);s6e=n(q5t,"SPAN",{});var j5t=s(s6e);T(Y8.$$.fragment,j5t),j5t.forEach(t),q5t.forEach(t),l7r=i(FOe),l6e=n(FOe,"SPAN",{});var D5t=s(l6e);i7r=r(D5t,"TFAutoModelForSequenceClassification"),D5t.forEach(t),FOe.forEach(t),pDe=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(K8.$$.fragment,Al),d7r=i(Al),lc=n(Al,"P",{});var Hee=s(lc);c7r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tU=n(Hee,"A",{href:!0});var G5t=s(tU);f7r=r(G5t,"from_pretrained()"),G5t.forEach(t),m7r=r(Hee," class method or the "),aU=n(Hee,"A",{href:!0});var O5t=s(aU);g7r=r(O5t,"from_config()"),O5t.forEach(t),h7r=r(Hee,` class
method.`),Hee.forEach(t),p7r=i(Al),Z8=n(Al,"P",{});var TOe=s(Z8);_7r=r(TOe,"This class cannot be instantiated directly using "),i6e=n(TOe,"CODE",{});var V5t=s(i6e);u7r=r(V5t,"__init__()"),V5t.forEach(t),b7r=r(TOe," (throws an error)."),TOe.forEach(t),v7r=i(Al),Rt=n(Al,"DIV",{class:!0});var Jw=s(Rt);T(e9.$$.fragment,Jw),F7r=i(Jw),d6e=n(Jw,"P",{});var X5t=s(d6e);T7r=r(X5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X5t.forEach(t),M7r=i(Jw),ic=n(Jw,"P",{});var Uee=s(ic);E7r=r(Uee,`Note:
Loading a model from its configuration file does `),c6e=n(Uee,"STRONG",{});var z5t=s(c6e);C7r=r(z5t,"not"),z5t.forEach(t),w7r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(Uee,"A",{href:!0});var W5t=s(nU);A7r=r(W5t,"from_pretrained()"),W5t.forEach(t),y7r=r(Uee," to load the model weights."),Uee.forEach(t),L7r=i(Jw),T(B4.$$.fragment,Jw),Jw.forEach(t),x7r=i(Al),kr=n(Al,"DIV",{class:!0});var yl=s(kr);T(o9.$$.fragment,yl),$7r=i(yl),f6e=n(yl,"P",{});var Q5t=s(f6e);k7r=r(Q5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Q5t.forEach(t),S7r=i(yl),nn=n(yl,"P",{});var Yw=s(nn);R7r=r(Yw,"The model class to instantiate is selected based on the "),m6e=n(Yw,"CODE",{});var H5t=s(m6e);P7r=r(H5t,"model_type"),H5t.forEach(t),B7r=r(Yw,` property of the config object (either
passed as an argument or loaded from `),g6e=n(Yw,"CODE",{});var U5t=s(g6e);I7r=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),N7r=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h6e=n(Yw,"CODE",{});var J5t=s(h6e);q7r=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),j7r=r(Yw,":"),Yw.forEach(t),D7r=i(yl),oe=n(yl,"UL",{});var ae=s(oe);I4=n(ae,"LI",{});var bBe=s(I4);p6e=n(bBe,"STRONG",{});var Y5t=s(p6e);G7r=r(Y5t,"albert"),Y5t.forEach(t),O7r=r(bBe," \u2014 "),sU=n(bBe,"A",{href:!0});var K5t=s(sU);V7r=r(K5t,"TFAlbertForSequenceClassification"),K5t.forEach(t),X7r=r(bBe," (ALBERT model)"),bBe.forEach(t),z7r=i(ae),N4=n(ae,"LI",{});var vBe=s(N4);_6e=n(vBe,"STRONG",{});var Z5t=s(_6e);W7r=r(Z5t,"bert"),Z5t.forEach(t),Q7r=r(vBe," \u2014 "),lU=n(vBe,"A",{href:!0});var e3t=s(lU);H7r=r(e3t,"TFBertForSequenceClassification"),e3t.forEach(t),U7r=r(vBe," (BERT model)"),vBe.forEach(t),J7r=i(ae),q4=n(ae,"LI",{});var FBe=s(q4);u6e=n(FBe,"STRONG",{});var o3t=s(u6e);Y7r=r(o3t,"camembert"),o3t.forEach(t),K7r=r(FBe," \u2014 "),iU=n(FBe,"A",{href:!0});var r3t=s(iU);Z7r=r(r3t,"TFCamembertForSequenceClassification"),r3t.forEach(t),eMr=r(FBe," (CamemBERT model)"),FBe.forEach(t),oMr=i(ae),j4=n(ae,"LI",{});var TBe=s(j4);b6e=n(TBe,"STRONG",{});var t3t=s(b6e);rMr=r(t3t,"convbert"),t3t.forEach(t),tMr=r(TBe," \u2014 "),dU=n(TBe,"A",{href:!0});var a3t=s(dU);aMr=r(a3t,"TFConvBertForSequenceClassification"),a3t.forEach(t),nMr=r(TBe," (ConvBERT model)"),TBe.forEach(t),sMr=i(ae),D4=n(ae,"LI",{});var MBe=s(D4);v6e=n(MBe,"STRONG",{});var n3t=s(v6e);lMr=r(n3t,"ctrl"),n3t.forEach(t),iMr=r(MBe," \u2014 "),cU=n(MBe,"A",{href:!0});var s3t=s(cU);dMr=r(s3t,"TFCTRLForSequenceClassification"),s3t.forEach(t),cMr=r(MBe," (CTRL model)"),MBe.forEach(t),fMr=i(ae),G4=n(ae,"LI",{});var EBe=s(G4);F6e=n(EBe,"STRONG",{});var l3t=s(F6e);mMr=r(l3t,"deberta"),l3t.forEach(t),gMr=r(EBe," \u2014 "),fU=n(EBe,"A",{href:!0});var i3t=s(fU);hMr=r(i3t,"TFDebertaForSequenceClassification"),i3t.forEach(t),pMr=r(EBe," (DeBERTa model)"),EBe.forEach(t),_Mr=i(ae),O4=n(ae,"LI",{});var CBe=s(O4);T6e=n(CBe,"STRONG",{});var d3t=s(T6e);uMr=r(d3t,"deberta-v2"),d3t.forEach(t),bMr=r(CBe," \u2014 "),mU=n(CBe,"A",{href:!0});var c3t=s(mU);vMr=r(c3t,"TFDebertaV2ForSequenceClassification"),c3t.forEach(t),FMr=r(CBe," (DeBERTa-v2 model)"),CBe.forEach(t),TMr=i(ae),V4=n(ae,"LI",{});var wBe=s(V4);M6e=n(wBe,"STRONG",{});var f3t=s(M6e);MMr=r(f3t,"distilbert"),f3t.forEach(t),EMr=r(wBe," \u2014 "),gU=n(wBe,"A",{href:!0});var m3t=s(gU);CMr=r(m3t,"TFDistilBertForSequenceClassification"),m3t.forEach(t),wMr=r(wBe," (DistilBERT model)"),wBe.forEach(t),AMr=i(ae),X4=n(ae,"LI",{});var ABe=s(X4);E6e=n(ABe,"STRONG",{});var g3t=s(E6e);yMr=r(g3t,"electra"),g3t.forEach(t),LMr=r(ABe," \u2014 "),hU=n(ABe,"A",{href:!0});var h3t=s(hU);xMr=r(h3t,"TFElectraForSequenceClassification"),h3t.forEach(t),$Mr=r(ABe," (ELECTRA model)"),ABe.forEach(t),kMr=i(ae),z4=n(ae,"LI",{});var yBe=s(z4);C6e=n(yBe,"STRONG",{});var p3t=s(C6e);SMr=r(p3t,"flaubert"),p3t.forEach(t),RMr=r(yBe," \u2014 "),pU=n(yBe,"A",{href:!0});var _3t=s(pU);PMr=r(_3t,"TFFlaubertForSequenceClassification"),_3t.forEach(t),BMr=r(yBe," (FlauBERT model)"),yBe.forEach(t),IMr=i(ae),W4=n(ae,"LI",{});var LBe=s(W4);w6e=n(LBe,"STRONG",{});var u3t=s(w6e);NMr=r(u3t,"funnel"),u3t.forEach(t),qMr=r(LBe," \u2014 "),_U=n(LBe,"A",{href:!0});var b3t=s(_U);jMr=r(b3t,"TFFunnelForSequenceClassification"),b3t.forEach(t),DMr=r(LBe," (Funnel Transformer model)"),LBe.forEach(t),GMr=i(ae),Q4=n(ae,"LI",{});var xBe=s(Q4);A6e=n(xBe,"STRONG",{});var v3t=s(A6e);OMr=r(v3t,"gpt2"),v3t.forEach(t),VMr=r(xBe," \u2014 "),uU=n(xBe,"A",{href:!0});var F3t=s(uU);XMr=r(F3t,"TFGPT2ForSequenceClassification"),F3t.forEach(t),zMr=r(xBe," (OpenAI GPT-2 model)"),xBe.forEach(t),WMr=i(ae),H4=n(ae,"LI",{});var $Be=s(H4);y6e=n($Be,"STRONG",{});var T3t=s(y6e);QMr=r(T3t,"gptj"),T3t.forEach(t),HMr=r($Be," \u2014 "),bU=n($Be,"A",{href:!0});var M3t=s(bU);UMr=r(M3t,"TFGPTJForSequenceClassification"),M3t.forEach(t),JMr=r($Be," (GPT-J model)"),$Be.forEach(t),YMr=i(ae),U4=n(ae,"LI",{});var kBe=s(U4);L6e=n(kBe,"STRONG",{});var E3t=s(L6e);KMr=r(E3t,"layoutlm"),E3t.forEach(t),ZMr=r(kBe," \u2014 "),vU=n(kBe,"A",{href:!0});var C3t=s(vU);e4r=r(C3t,"TFLayoutLMForSequenceClassification"),C3t.forEach(t),o4r=r(kBe," (LayoutLM model)"),kBe.forEach(t),r4r=i(ae),J4=n(ae,"LI",{});var SBe=s(J4);x6e=n(SBe,"STRONG",{});var w3t=s(x6e);t4r=r(w3t,"longformer"),w3t.forEach(t),a4r=r(SBe," \u2014 "),FU=n(SBe,"A",{href:!0});var A3t=s(FU);n4r=r(A3t,"TFLongformerForSequenceClassification"),A3t.forEach(t),s4r=r(SBe," (Longformer model)"),SBe.forEach(t),l4r=i(ae),Y4=n(ae,"LI",{});var RBe=s(Y4);$6e=n(RBe,"STRONG",{});var y3t=s($6e);i4r=r(y3t,"mobilebert"),y3t.forEach(t),d4r=r(RBe," \u2014 "),TU=n(RBe,"A",{href:!0});var L3t=s(TU);c4r=r(L3t,"TFMobileBertForSequenceClassification"),L3t.forEach(t),f4r=r(RBe," (MobileBERT model)"),RBe.forEach(t),m4r=i(ae),K4=n(ae,"LI",{});var PBe=s(K4);k6e=n(PBe,"STRONG",{});var x3t=s(k6e);g4r=r(x3t,"mpnet"),x3t.forEach(t),h4r=r(PBe," \u2014 "),MU=n(PBe,"A",{href:!0});var $3t=s(MU);p4r=r($3t,"TFMPNetForSequenceClassification"),$3t.forEach(t),_4r=r(PBe," (MPNet model)"),PBe.forEach(t),u4r=i(ae),Z4=n(ae,"LI",{});var BBe=s(Z4);S6e=n(BBe,"STRONG",{});var k3t=s(S6e);b4r=r(k3t,"openai-gpt"),k3t.forEach(t),v4r=r(BBe," \u2014 "),EU=n(BBe,"A",{href:!0});var S3t=s(EU);F4r=r(S3t,"TFOpenAIGPTForSequenceClassification"),S3t.forEach(t),T4r=r(BBe," (OpenAI GPT model)"),BBe.forEach(t),M4r=i(ae),eE=n(ae,"LI",{});var IBe=s(eE);R6e=n(IBe,"STRONG",{});var R3t=s(R6e);E4r=r(R3t,"rembert"),R3t.forEach(t),C4r=r(IBe," \u2014 "),CU=n(IBe,"A",{href:!0});var P3t=s(CU);w4r=r(P3t,"TFRemBertForSequenceClassification"),P3t.forEach(t),A4r=r(IBe," (RemBERT model)"),IBe.forEach(t),y4r=i(ae),oE=n(ae,"LI",{});var NBe=s(oE);P6e=n(NBe,"STRONG",{});var B3t=s(P6e);L4r=r(B3t,"roberta"),B3t.forEach(t),x4r=r(NBe," \u2014 "),wU=n(NBe,"A",{href:!0});var I3t=s(wU);$4r=r(I3t,"TFRobertaForSequenceClassification"),I3t.forEach(t),k4r=r(NBe," (RoBERTa model)"),NBe.forEach(t),S4r=i(ae),rE=n(ae,"LI",{});var qBe=s(rE);B6e=n(qBe,"STRONG",{});var N3t=s(B6e);R4r=r(N3t,"roformer"),N3t.forEach(t),P4r=r(qBe," \u2014 "),AU=n(qBe,"A",{href:!0});var q3t=s(AU);B4r=r(q3t,"TFRoFormerForSequenceClassification"),q3t.forEach(t),I4r=r(qBe," (RoFormer model)"),qBe.forEach(t),N4r=i(ae),tE=n(ae,"LI",{});var jBe=s(tE);I6e=n(jBe,"STRONG",{});var j3t=s(I6e);q4r=r(j3t,"tapas"),j3t.forEach(t),j4r=r(jBe," \u2014 "),yU=n(jBe,"A",{href:!0});var D3t=s(yU);D4r=r(D3t,"TFTapasForSequenceClassification"),D3t.forEach(t),G4r=r(jBe," (TAPAS model)"),jBe.forEach(t),O4r=i(ae),aE=n(ae,"LI",{});var DBe=s(aE);N6e=n(DBe,"STRONG",{});var G3t=s(N6e);V4r=r(G3t,"transfo-xl"),G3t.forEach(t),X4r=r(DBe," \u2014 "),LU=n(DBe,"A",{href:!0});var O3t=s(LU);z4r=r(O3t,"TFTransfoXLForSequenceClassification"),O3t.forEach(t),W4r=r(DBe," (Transformer-XL model)"),DBe.forEach(t),Q4r=i(ae),nE=n(ae,"LI",{});var GBe=s(nE);q6e=n(GBe,"STRONG",{});var V3t=s(q6e);H4r=r(V3t,"xlm"),V3t.forEach(t),U4r=r(GBe," \u2014 "),xU=n(GBe,"A",{href:!0});var X3t=s(xU);J4r=r(X3t,"TFXLMForSequenceClassification"),X3t.forEach(t),Y4r=r(GBe," (XLM model)"),GBe.forEach(t),K4r=i(ae),sE=n(ae,"LI",{});var OBe=s(sE);j6e=n(OBe,"STRONG",{});var z3t=s(j6e);Z4r=r(z3t,"xlm-roberta"),z3t.forEach(t),eEr=r(OBe," \u2014 "),$U=n(OBe,"A",{href:!0});var W3t=s($U);oEr=r(W3t,"TFXLMRobertaForSequenceClassification"),W3t.forEach(t),rEr=r(OBe," (XLM-RoBERTa model)"),OBe.forEach(t),tEr=i(ae),lE=n(ae,"LI",{});var VBe=s(lE);D6e=n(VBe,"STRONG",{});var Q3t=s(D6e);aEr=r(Q3t,"xlnet"),Q3t.forEach(t),nEr=r(VBe," \u2014 "),kU=n(VBe,"A",{href:!0});var H3t=s(kU);sEr=r(H3t,"TFXLNetForSequenceClassification"),H3t.forEach(t),lEr=r(VBe," (XLNet model)"),VBe.forEach(t),ae.forEach(t),iEr=i(yl),T(iE.$$.fragment,yl),yl.forEach(t),Al.forEach(t),_De=i(f),dc=n(f,"H2",{class:!0});var MOe=s(dc);dE=n(MOe,"A",{id:!0,class:!0,href:!0});var U3t=s(dE);G6e=n(U3t,"SPAN",{});var J3t=s(G6e);T(r9.$$.fragment,J3t),J3t.forEach(t),U3t.forEach(t),dEr=i(MOe),O6e=n(MOe,"SPAN",{});var Y3t=s(O6e);cEr=r(Y3t,"TFAutoModelForMultipleChoice"),Y3t.forEach(t),MOe.forEach(t),uDe=i(f),ar=n(f,"DIV",{class:!0});var Ll=s(ar);T(t9.$$.fragment,Ll),fEr=i(Ll),cc=n(Ll,"P",{});var Jee=s(cc);mEr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SU=n(Jee,"A",{href:!0});var K3t=s(SU);gEr=r(K3t,"from_pretrained()"),K3t.forEach(t),hEr=r(Jee," class method or the "),RU=n(Jee,"A",{href:!0});var Z3t=s(RU);pEr=r(Z3t,"from_config()"),Z3t.forEach(t),_Er=r(Jee,` class
method.`),Jee.forEach(t),uEr=i(Ll),a9=n(Ll,"P",{});var EOe=s(a9);bEr=r(EOe,"This class cannot be instantiated directly using "),V6e=n(EOe,"CODE",{});var e0t=s(V6e);vEr=r(e0t,"__init__()"),e0t.forEach(t),FEr=r(EOe," (throws an error)."),EOe.forEach(t),TEr=i(Ll),Pt=n(Ll,"DIV",{class:!0});var Kw=s(Pt);T(n9.$$.fragment,Kw),MEr=i(Kw),X6e=n(Kw,"P",{});var o0t=s(X6e);EEr=r(o0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),o0t.forEach(t),CEr=i(Kw),fc=n(Kw,"P",{});var Yee=s(fc);wEr=r(Yee,`Note:
Loading a model from its configuration file does `),z6e=n(Yee,"STRONG",{});var r0t=s(z6e);AEr=r(r0t,"not"),r0t.forEach(t),yEr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(Yee,"A",{href:!0});var t0t=s(PU);LEr=r(t0t,"from_pretrained()"),t0t.forEach(t),xEr=r(Yee," to load the model weights."),Yee.forEach(t),$Er=i(Kw),T(cE.$$.fragment,Kw),Kw.forEach(t),kEr=i(Ll),Sr=n(Ll,"DIV",{class:!0});var xl=s(Sr);T(s9.$$.fragment,xl),SEr=i(xl),W6e=n(xl,"P",{});var a0t=s(W6e);REr=r(a0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),a0t.forEach(t),PEr=i(xl),sn=n(xl,"P",{});var Zw=s(sn);BEr=r(Zw,"The model class to instantiate is selected based on the "),Q6e=n(Zw,"CODE",{});var n0t=s(Q6e);IEr=r(n0t,"model_type"),n0t.forEach(t),NEr=r(Zw,` property of the config object (either
passed as an argument or loaded from `),H6e=n(Zw,"CODE",{});var s0t=s(H6e);qEr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),jEr=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=n(Zw,"CODE",{});var l0t=s(U6e);DEr=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),GEr=r(Zw,":"),Zw.forEach(t),OEr=i(xl),pe=n(xl,"UL",{});var be=s(pe);fE=n(be,"LI",{});var XBe=s(fE);J6e=n(XBe,"STRONG",{});var i0t=s(J6e);VEr=r(i0t,"albert"),i0t.forEach(t),XEr=r(XBe," \u2014 "),BU=n(XBe,"A",{href:!0});var d0t=s(BU);zEr=r(d0t,"TFAlbertForMultipleChoice"),d0t.forEach(t),WEr=r(XBe," (ALBERT model)"),XBe.forEach(t),QEr=i(be),mE=n(be,"LI",{});var zBe=s(mE);Y6e=n(zBe,"STRONG",{});var c0t=s(Y6e);HEr=r(c0t,"bert"),c0t.forEach(t),UEr=r(zBe," \u2014 "),IU=n(zBe,"A",{href:!0});var f0t=s(IU);JEr=r(f0t,"TFBertForMultipleChoice"),f0t.forEach(t),YEr=r(zBe," (BERT model)"),zBe.forEach(t),KEr=i(be),gE=n(be,"LI",{});var WBe=s(gE);K6e=n(WBe,"STRONG",{});var m0t=s(K6e);ZEr=r(m0t,"camembert"),m0t.forEach(t),eCr=r(WBe," \u2014 "),NU=n(WBe,"A",{href:!0});var g0t=s(NU);oCr=r(g0t,"TFCamembertForMultipleChoice"),g0t.forEach(t),rCr=r(WBe," (CamemBERT model)"),WBe.forEach(t),tCr=i(be),hE=n(be,"LI",{});var QBe=s(hE);Z6e=n(QBe,"STRONG",{});var h0t=s(Z6e);aCr=r(h0t,"convbert"),h0t.forEach(t),nCr=r(QBe," \u2014 "),qU=n(QBe,"A",{href:!0});var p0t=s(qU);sCr=r(p0t,"TFConvBertForMultipleChoice"),p0t.forEach(t),lCr=r(QBe," (ConvBERT model)"),QBe.forEach(t),iCr=i(be),pE=n(be,"LI",{});var HBe=s(pE);eTe=n(HBe,"STRONG",{});var _0t=s(eTe);dCr=r(_0t,"distilbert"),_0t.forEach(t),cCr=r(HBe," \u2014 "),jU=n(HBe,"A",{href:!0});var u0t=s(jU);fCr=r(u0t,"TFDistilBertForMultipleChoice"),u0t.forEach(t),mCr=r(HBe," (DistilBERT model)"),HBe.forEach(t),gCr=i(be),_E=n(be,"LI",{});var UBe=s(_E);oTe=n(UBe,"STRONG",{});var b0t=s(oTe);hCr=r(b0t,"electra"),b0t.forEach(t),pCr=r(UBe," \u2014 "),DU=n(UBe,"A",{href:!0});var v0t=s(DU);_Cr=r(v0t,"TFElectraForMultipleChoice"),v0t.forEach(t),uCr=r(UBe," (ELECTRA model)"),UBe.forEach(t),bCr=i(be),uE=n(be,"LI",{});var JBe=s(uE);rTe=n(JBe,"STRONG",{});var F0t=s(rTe);vCr=r(F0t,"flaubert"),F0t.forEach(t),FCr=r(JBe," \u2014 "),GU=n(JBe,"A",{href:!0});var T0t=s(GU);TCr=r(T0t,"TFFlaubertForMultipleChoice"),T0t.forEach(t),MCr=r(JBe," (FlauBERT model)"),JBe.forEach(t),ECr=i(be),bE=n(be,"LI",{});var YBe=s(bE);tTe=n(YBe,"STRONG",{});var M0t=s(tTe);CCr=r(M0t,"funnel"),M0t.forEach(t),wCr=r(YBe," \u2014 "),OU=n(YBe,"A",{href:!0});var E0t=s(OU);ACr=r(E0t,"TFFunnelForMultipleChoice"),E0t.forEach(t),yCr=r(YBe," (Funnel Transformer model)"),YBe.forEach(t),LCr=i(be),vE=n(be,"LI",{});var KBe=s(vE);aTe=n(KBe,"STRONG",{});var C0t=s(aTe);xCr=r(C0t,"longformer"),C0t.forEach(t),$Cr=r(KBe," \u2014 "),VU=n(KBe,"A",{href:!0});var w0t=s(VU);kCr=r(w0t,"TFLongformerForMultipleChoice"),w0t.forEach(t),SCr=r(KBe," (Longformer model)"),KBe.forEach(t),RCr=i(be),FE=n(be,"LI",{});var ZBe=s(FE);nTe=n(ZBe,"STRONG",{});var A0t=s(nTe);PCr=r(A0t,"mobilebert"),A0t.forEach(t),BCr=r(ZBe," \u2014 "),XU=n(ZBe,"A",{href:!0});var y0t=s(XU);ICr=r(y0t,"TFMobileBertForMultipleChoice"),y0t.forEach(t),NCr=r(ZBe," (MobileBERT model)"),ZBe.forEach(t),qCr=i(be),TE=n(be,"LI",{});var eIe=s(TE);sTe=n(eIe,"STRONG",{});var L0t=s(sTe);jCr=r(L0t,"mpnet"),L0t.forEach(t),DCr=r(eIe," \u2014 "),zU=n(eIe,"A",{href:!0});var x0t=s(zU);GCr=r(x0t,"TFMPNetForMultipleChoice"),x0t.forEach(t),OCr=r(eIe," (MPNet model)"),eIe.forEach(t),VCr=i(be),ME=n(be,"LI",{});var oIe=s(ME);lTe=n(oIe,"STRONG",{});var $0t=s(lTe);XCr=r($0t,"rembert"),$0t.forEach(t),zCr=r(oIe," \u2014 "),WU=n(oIe,"A",{href:!0});var k0t=s(WU);WCr=r(k0t,"TFRemBertForMultipleChoice"),k0t.forEach(t),QCr=r(oIe," (RemBERT model)"),oIe.forEach(t),HCr=i(be),EE=n(be,"LI",{});var rIe=s(EE);iTe=n(rIe,"STRONG",{});var S0t=s(iTe);UCr=r(S0t,"roberta"),S0t.forEach(t),JCr=r(rIe," \u2014 "),QU=n(rIe,"A",{href:!0});var R0t=s(QU);YCr=r(R0t,"TFRobertaForMultipleChoice"),R0t.forEach(t),KCr=r(rIe," (RoBERTa model)"),rIe.forEach(t),ZCr=i(be),CE=n(be,"LI",{});var tIe=s(CE);dTe=n(tIe,"STRONG",{});var P0t=s(dTe);e5r=r(P0t,"roformer"),P0t.forEach(t),o5r=r(tIe," \u2014 "),HU=n(tIe,"A",{href:!0});var B0t=s(HU);r5r=r(B0t,"TFRoFormerForMultipleChoice"),B0t.forEach(t),t5r=r(tIe," (RoFormer model)"),tIe.forEach(t),a5r=i(be),wE=n(be,"LI",{});var aIe=s(wE);cTe=n(aIe,"STRONG",{});var I0t=s(cTe);n5r=r(I0t,"xlm"),I0t.forEach(t),s5r=r(aIe," \u2014 "),UU=n(aIe,"A",{href:!0});var N0t=s(UU);l5r=r(N0t,"TFXLMForMultipleChoice"),N0t.forEach(t),i5r=r(aIe," (XLM model)"),aIe.forEach(t),d5r=i(be),AE=n(be,"LI",{});var nIe=s(AE);fTe=n(nIe,"STRONG",{});var q0t=s(fTe);c5r=r(q0t,"xlm-roberta"),q0t.forEach(t),f5r=r(nIe," \u2014 "),JU=n(nIe,"A",{href:!0});var j0t=s(JU);m5r=r(j0t,"TFXLMRobertaForMultipleChoice"),j0t.forEach(t),g5r=r(nIe," (XLM-RoBERTa model)"),nIe.forEach(t),h5r=i(be),yE=n(be,"LI",{});var sIe=s(yE);mTe=n(sIe,"STRONG",{});var D0t=s(mTe);p5r=r(D0t,"xlnet"),D0t.forEach(t),_5r=r(sIe," \u2014 "),YU=n(sIe,"A",{href:!0});var G0t=s(YU);u5r=r(G0t,"TFXLNetForMultipleChoice"),G0t.forEach(t),b5r=r(sIe," (XLNet model)"),sIe.forEach(t),be.forEach(t),v5r=i(xl),T(LE.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),bDe=i(f),mc=n(f,"H2",{class:!0});var COe=s(mc);xE=n(COe,"A",{id:!0,class:!0,href:!0});var O0t=s(xE);gTe=n(O0t,"SPAN",{});var V0t=s(gTe);T(l9.$$.fragment,V0t),V0t.forEach(t),O0t.forEach(t),F5r=i(COe),hTe=n(COe,"SPAN",{});var X0t=s(hTe);T5r=r(X0t,"TFAutoModelForNextSentencePrediction"),X0t.forEach(t),COe.forEach(t),vDe=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(i9.$$.fragment,$l),M5r=i($l),gc=n($l,"P",{});var Kee=s(gc);E5r=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KU=n(Kee,"A",{href:!0});var z0t=s(KU);C5r=r(z0t,"from_pretrained()"),z0t.forEach(t),w5r=r(Kee," class method or the "),ZU=n(Kee,"A",{href:!0});var W0t=s(ZU);A5r=r(W0t,"from_config()"),W0t.forEach(t),y5r=r(Kee,` class
method.`),Kee.forEach(t),L5r=i($l),d9=n($l,"P",{});var wOe=s(d9);x5r=r(wOe,"This class cannot be instantiated directly using "),pTe=n(wOe,"CODE",{});var Q0t=s(pTe);$5r=r(Q0t,"__init__()"),Q0t.forEach(t),k5r=r(wOe," (throws an error)."),wOe.forEach(t),S5r=i($l),Bt=n($l,"DIV",{class:!0});var eA=s(Bt);T(c9.$$.fragment,eA),R5r=i(eA),_Te=n(eA,"P",{});var H0t=s(_Te);P5r=r(H0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),H0t.forEach(t),B5r=i(eA),hc=n(eA,"P",{});var Zee=s(hc);I5r=r(Zee,`Note:
Loading a model from its configuration file does `),uTe=n(Zee,"STRONG",{});var U0t=s(uTe);N5r=r(U0t,"not"),U0t.forEach(t),q5r=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=n(Zee,"A",{href:!0});var J0t=s(eJ);j5r=r(J0t,"from_pretrained()"),J0t.forEach(t),D5r=r(Zee," to load the model weights."),Zee.forEach(t),G5r=i(eA),T($E.$$.fragment,eA),eA.forEach(t),O5r=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(f9.$$.fragment,kl),V5r=i(kl),bTe=n(kl,"P",{});var Y0t=s(bTe);X5r=r(Y0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Y0t.forEach(t),z5r=i(kl),ln=n(kl,"P",{});var oA=s(ln);W5r=r(oA,"The model class to instantiate is selected based on the "),vTe=n(oA,"CODE",{});var K0t=s(vTe);Q5r=r(K0t,"model_type"),K0t.forEach(t),H5r=r(oA,` property of the config object (either
passed as an argument or loaded from `),FTe=n(oA,"CODE",{});var Z0t=s(FTe);U5r=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),J5r=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=n(oA,"CODE",{});var ewt=s(TTe);Y5r=r(ewt,"pretrained_model_name_or_path"),ewt.forEach(t),K5r=r(oA,":"),oA.forEach(t),Z5r=i(kl),m9=n(kl,"UL",{});var AOe=s(m9);kE=n(AOe,"LI",{});var lIe=s(kE);MTe=n(lIe,"STRONG",{});var owt=s(MTe);e3r=r(owt,"bert"),owt.forEach(t),o3r=r(lIe," \u2014 "),oJ=n(lIe,"A",{href:!0});var rwt=s(oJ);r3r=r(rwt,"TFBertForNextSentencePrediction"),rwt.forEach(t),t3r=r(lIe," (BERT model)"),lIe.forEach(t),a3r=i(AOe),SE=n(AOe,"LI",{});var iIe=s(SE);ETe=n(iIe,"STRONG",{});var twt=s(ETe);n3r=r(twt,"mobilebert"),twt.forEach(t),s3r=r(iIe," \u2014 "),rJ=n(iIe,"A",{href:!0});var awt=s(rJ);l3r=r(awt,"TFMobileBertForNextSentencePrediction"),awt.forEach(t),i3r=r(iIe," (MobileBERT model)"),iIe.forEach(t),AOe.forEach(t),d3r=i(kl),T(RE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),FDe=i(f),pc=n(f,"H2",{class:!0});var yOe=s(pc);PE=n(yOe,"A",{id:!0,class:!0,href:!0});var nwt=s(PE);CTe=n(nwt,"SPAN",{});var swt=s(CTe);T(g9.$$.fragment,swt),swt.forEach(t),nwt.forEach(t),c3r=i(yOe),wTe=n(yOe,"SPAN",{});var lwt=s(wTe);f3r=r(lwt,"TFAutoModelForTableQuestionAnswering"),lwt.forEach(t),yOe.forEach(t),TDe=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(h9.$$.fragment,Sl),m3r=i(Sl),_c=n(Sl,"P",{});var eoe=s(_c);g3r=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),tJ=n(eoe,"A",{href:!0});var iwt=s(tJ);h3r=r(iwt,"from_pretrained()"),iwt.forEach(t),p3r=r(eoe," class method or the "),aJ=n(eoe,"A",{href:!0});var dwt=s(aJ);_3r=r(dwt,"from_config()"),dwt.forEach(t),u3r=r(eoe,` class
method.`),eoe.forEach(t),b3r=i(Sl),p9=n(Sl,"P",{});var LOe=s(p9);v3r=r(LOe,"This class cannot be instantiated directly using "),ATe=n(LOe,"CODE",{});var cwt=s(ATe);F3r=r(cwt,"__init__()"),cwt.forEach(t),T3r=r(LOe," (throws an error)."),LOe.forEach(t),M3r=i(Sl),It=n(Sl,"DIV",{class:!0});var rA=s(It);T(_9.$$.fragment,rA),E3r=i(rA),yTe=n(rA,"P",{});var fwt=s(yTe);C3r=r(fwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fwt.forEach(t),w3r=i(rA),uc=n(rA,"P",{});var ooe=s(uc);A3r=r(ooe,`Note:
Loading a model from its configuration file does `),LTe=n(ooe,"STRONG",{});var mwt=s(LTe);y3r=r(mwt,"not"),mwt.forEach(t),L3r=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(ooe,"A",{href:!0});var gwt=s(nJ);x3r=r(gwt,"from_pretrained()"),gwt.forEach(t),$3r=r(ooe," to load the model weights."),ooe.forEach(t),k3r=i(rA),T(BE.$$.fragment,rA),rA.forEach(t),S3r=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(u9.$$.fragment,Rl),R3r=i(Rl),xTe=n(Rl,"P",{});var hwt=s(xTe);P3r=r(hwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),hwt.forEach(t),B3r=i(Rl),dn=n(Rl,"P",{});var tA=s(dn);I3r=r(tA,"The model class to instantiate is selected based on the "),$Te=n(tA,"CODE",{});var pwt=s($Te);N3r=r(pwt,"model_type"),pwt.forEach(t),q3r=r(tA,` property of the config object (either
passed as an argument or loaded from `),kTe=n(tA,"CODE",{});var _wt=s(kTe);j3r=r(_wt,"pretrained_model_name_or_path"),_wt.forEach(t),D3r=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=n(tA,"CODE",{});var uwt=s(STe);G3r=r(uwt,"pretrained_model_name_or_path"),uwt.forEach(t),O3r=r(tA,":"),tA.forEach(t),V3r=i(Rl),RTe=n(Rl,"UL",{});var bwt=s(RTe);IE=n(bwt,"LI",{});var dIe=s(IE);PTe=n(dIe,"STRONG",{});var vwt=s(PTe);X3r=r(vwt,"tapas"),vwt.forEach(t),z3r=r(dIe," \u2014 "),sJ=n(dIe,"A",{href:!0});var Fwt=s(sJ);W3r=r(Fwt,"TFTapasForQuestionAnswering"),Fwt.forEach(t),Q3r=r(dIe," (TAPAS model)"),dIe.forEach(t),bwt.forEach(t),H3r=i(Rl),T(NE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),MDe=i(f),bc=n(f,"H2",{class:!0});var xOe=s(bc);qE=n(xOe,"A",{id:!0,class:!0,href:!0});var Twt=s(qE);BTe=n(Twt,"SPAN",{});var Mwt=s(BTe);T(b9.$$.fragment,Mwt),Mwt.forEach(t),Twt.forEach(t),U3r=i(xOe),ITe=n(xOe,"SPAN",{});var Ewt=s(ITe);J3r=r(Ewt,"TFAutoModelForTokenClassification"),Ewt.forEach(t),xOe.forEach(t),EDe=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(v9.$$.fragment,Pl),Y3r=i(Pl),vc=n(Pl,"P",{});var roe=s(vc);K3r=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lJ=n(roe,"A",{href:!0});var Cwt=s(lJ);Z3r=r(Cwt,"from_pretrained()"),Cwt.forEach(t),e0r=r(roe," class method or the "),iJ=n(roe,"A",{href:!0});var wwt=s(iJ);o0r=r(wwt,"from_config()"),wwt.forEach(t),r0r=r(roe,` class
method.`),roe.forEach(t),t0r=i(Pl),F9=n(Pl,"P",{});var $Oe=s(F9);a0r=r($Oe,"This class cannot be instantiated directly using "),NTe=n($Oe,"CODE",{});var Awt=s(NTe);n0r=r(Awt,"__init__()"),Awt.forEach(t),s0r=r($Oe," (throws an error)."),$Oe.forEach(t),l0r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var aA=s(Nt);T(T9.$$.fragment,aA),i0r=i(aA),qTe=n(aA,"P",{});var ywt=s(qTe);d0r=r(ywt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ywt.forEach(t),c0r=i(aA),Fc=n(aA,"P",{});var toe=s(Fc);f0r=r(toe,`Note:
Loading a model from its configuration file does `),jTe=n(toe,"STRONG",{});var Lwt=s(jTe);m0r=r(Lwt,"not"),Lwt.forEach(t),g0r=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=n(toe,"A",{href:!0});var xwt=s(dJ);h0r=r(xwt,"from_pretrained()"),xwt.forEach(t),p0r=r(toe," to load the model weights."),toe.forEach(t),_0r=i(aA),T(jE.$$.fragment,aA),aA.forEach(t),u0r=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(M9.$$.fragment,Bl),b0r=i(Bl),DTe=n(Bl,"P",{});var $wt=s(DTe);v0r=r($wt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$wt.forEach(t),F0r=i(Bl),cn=n(Bl,"P",{});var nA=s(cn);T0r=r(nA,"The model class to instantiate is selected based on the "),GTe=n(nA,"CODE",{});var kwt=s(GTe);M0r=r(kwt,"model_type"),kwt.forEach(t),E0r=r(nA,` property of the config object (either
passed as an argument or loaded from `),OTe=n(nA,"CODE",{});var Swt=s(OTe);C0r=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),w0r=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(nA,"CODE",{});var Rwt=s(VTe);A0r=r(Rwt,"pretrained_model_name_or_path"),Rwt.forEach(t),y0r=r(nA,":"),nA.forEach(t),L0r=i(Bl),de=n(Bl,"UL",{});var me=s(de);DE=n(me,"LI",{});var cIe=s(DE);XTe=n(cIe,"STRONG",{});var Pwt=s(XTe);x0r=r(Pwt,"albert"),Pwt.forEach(t),$0r=r(cIe," \u2014 "),cJ=n(cIe,"A",{href:!0});var Bwt=s(cJ);k0r=r(Bwt,"TFAlbertForTokenClassification"),Bwt.forEach(t),S0r=r(cIe," (ALBERT model)"),cIe.forEach(t),R0r=i(me),GE=n(me,"LI",{});var fIe=s(GE);zTe=n(fIe,"STRONG",{});var Iwt=s(zTe);P0r=r(Iwt,"bert"),Iwt.forEach(t),B0r=r(fIe," \u2014 "),fJ=n(fIe,"A",{href:!0});var Nwt=s(fJ);I0r=r(Nwt,"TFBertForTokenClassification"),Nwt.forEach(t),N0r=r(fIe," (BERT model)"),fIe.forEach(t),q0r=i(me),OE=n(me,"LI",{});var mIe=s(OE);WTe=n(mIe,"STRONG",{});var qwt=s(WTe);j0r=r(qwt,"camembert"),qwt.forEach(t),D0r=r(mIe," \u2014 "),mJ=n(mIe,"A",{href:!0});var jwt=s(mJ);G0r=r(jwt,"TFCamembertForTokenClassification"),jwt.forEach(t),O0r=r(mIe," (CamemBERT model)"),mIe.forEach(t),V0r=i(me),VE=n(me,"LI",{});var gIe=s(VE);QTe=n(gIe,"STRONG",{});var Dwt=s(QTe);X0r=r(Dwt,"convbert"),Dwt.forEach(t),z0r=r(gIe," \u2014 "),gJ=n(gIe,"A",{href:!0});var Gwt=s(gJ);W0r=r(Gwt,"TFConvBertForTokenClassification"),Gwt.forEach(t),Q0r=r(gIe," (ConvBERT model)"),gIe.forEach(t),H0r=i(me),XE=n(me,"LI",{});var hIe=s(XE);HTe=n(hIe,"STRONG",{});var Owt=s(HTe);U0r=r(Owt,"deberta"),Owt.forEach(t),J0r=r(hIe," \u2014 "),hJ=n(hIe,"A",{href:!0});var Vwt=s(hJ);Y0r=r(Vwt,"TFDebertaForTokenClassification"),Vwt.forEach(t),K0r=r(hIe," (DeBERTa model)"),hIe.forEach(t),Z0r=i(me),zE=n(me,"LI",{});var pIe=s(zE);UTe=n(pIe,"STRONG",{});var Xwt=s(UTe);ewr=r(Xwt,"deberta-v2"),Xwt.forEach(t),owr=r(pIe," \u2014 "),pJ=n(pIe,"A",{href:!0});var zwt=s(pJ);rwr=r(zwt,"TFDebertaV2ForTokenClassification"),zwt.forEach(t),twr=r(pIe," (DeBERTa-v2 model)"),pIe.forEach(t),awr=i(me),WE=n(me,"LI",{});var _Ie=s(WE);JTe=n(_Ie,"STRONG",{});var Wwt=s(JTe);nwr=r(Wwt,"distilbert"),Wwt.forEach(t),swr=r(_Ie," \u2014 "),_J=n(_Ie,"A",{href:!0});var Qwt=s(_J);lwr=r(Qwt,"TFDistilBertForTokenClassification"),Qwt.forEach(t),iwr=r(_Ie," (DistilBERT model)"),_Ie.forEach(t),dwr=i(me),QE=n(me,"LI",{});var uIe=s(QE);YTe=n(uIe,"STRONG",{});var Hwt=s(YTe);cwr=r(Hwt,"electra"),Hwt.forEach(t),fwr=r(uIe," \u2014 "),uJ=n(uIe,"A",{href:!0});var Uwt=s(uJ);mwr=r(Uwt,"TFElectraForTokenClassification"),Uwt.forEach(t),gwr=r(uIe," (ELECTRA model)"),uIe.forEach(t),hwr=i(me),HE=n(me,"LI",{});var bIe=s(HE);KTe=n(bIe,"STRONG",{});var Jwt=s(KTe);pwr=r(Jwt,"flaubert"),Jwt.forEach(t),_wr=r(bIe," \u2014 "),bJ=n(bIe,"A",{href:!0});var Ywt=s(bJ);uwr=r(Ywt,"TFFlaubertForTokenClassification"),Ywt.forEach(t),bwr=r(bIe," (FlauBERT model)"),bIe.forEach(t),vwr=i(me),UE=n(me,"LI",{});var vIe=s(UE);ZTe=n(vIe,"STRONG",{});var Kwt=s(ZTe);Fwr=r(Kwt,"funnel"),Kwt.forEach(t),Twr=r(vIe," \u2014 "),vJ=n(vIe,"A",{href:!0});var Zwt=s(vJ);Mwr=r(Zwt,"TFFunnelForTokenClassification"),Zwt.forEach(t),Ewr=r(vIe," (Funnel Transformer model)"),vIe.forEach(t),Cwr=i(me),JE=n(me,"LI",{});var FIe=s(JE);e7e=n(FIe,"STRONG",{});var eAt=s(e7e);wwr=r(eAt,"layoutlm"),eAt.forEach(t),Awr=r(FIe," \u2014 "),FJ=n(FIe,"A",{href:!0});var oAt=s(FJ);ywr=r(oAt,"TFLayoutLMForTokenClassification"),oAt.forEach(t),Lwr=r(FIe," (LayoutLM model)"),FIe.forEach(t),xwr=i(me),YE=n(me,"LI",{});var TIe=s(YE);o7e=n(TIe,"STRONG",{});var rAt=s(o7e);$wr=r(rAt,"longformer"),rAt.forEach(t),kwr=r(TIe," \u2014 "),TJ=n(TIe,"A",{href:!0});var tAt=s(TJ);Swr=r(tAt,"TFLongformerForTokenClassification"),tAt.forEach(t),Rwr=r(TIe," (Longformer model)"),TIe.forEach(t),Pwr=i(me),KE=n(me,"LI",{});var MIe=s(KE);r7e=n(MIe,"STRONG",{});var aAt=s(r7e);Bwr=r(aAt,"mobilebert"),aAt.forEach(t),Iwr=r(MIe," \u2014 "),MJ=n(MIe,"A",{href:!0});var nAt=s(MJ);Nwr=r(nAt,"TFMobileBertForTokenClassification"),nAt.forEach(t),qwr=r(MIe," (MobileBERT model)"),MIe.forEach(t),jwr=i(me),ZE=n(me,"LI",{});var EIe=s(ZE);t7e=n(EIe,"STRONG",{});var sAt=s(t7e);Dwr=r(sAt,"mpnet"),sAt.forEach(t),Gwr=r(EIe," \u2014 "),EJ=n(EIe,"A",{href:!0});var lAt=s(EJ);Owr=r(lAt,"TFMPNetForTokenClassification"),lAt.forEach(t),Vwr=r(EIe," (MPNet model)"),EIe.forEach(t),Xwr=i(me),eC=n(me,"LI",{});var CIe=s(eC);a7e=n(CIe,"STRONG",{});var iAt=s(a7e);zwr=r(iAt,"rembert"),iAt.forEach(t),Wwr=r(CIe," \u2014 "),CJ=n(CIe,"A",{href:!0});var dAt=s(CJ);Qwr=r(dAt,"TFRemBertForTokenClassification"),dAt.forEach(t),Hwr=r(CIe," (RemBERT model)"),CIe.forEach(t),Uwr=i(me),oC=n(me,"LI",{});var wIe=s(oC);n7e=n(wIe,"STRONG",{});var cAt=s(n7e);Jwr=r(cAt,"roberta"),cAt.forEach(t),Ywr=r(wIe," \u2014 "),wJ=n(wIe,"A",{href:!0});var fAt=s(wJ);Kwr=r(fAt,"TFRobertaForTokenClassification"),fAt.forEach(t),Zwr=r(wIe," (RoBERTa model)"),wIe.forEach(t),eAr=i(me),rC=n(me,"LI",{});var AIe=s(rC);s7e=n(AIe,"STRONG",{});var mAt=s(s7e);oAr=r(mAt,"roformer"),mAt.forEach(t),rAr=r(AIe," \u2014 "),AJ=n(AIe,"A",{href:!0});var gAt=s(AJ);tAr=r(gAt,"TFRoFormerForTokenClassification"),gAt.forEach(t),aAr=r(AIe," (RoFormer model)"),AIe.forEach(t),nAr=i(me),tC=n(me,"LI",{});var yIe=s(tC);l7e=n(yIe,"STRONG",{});var hAt=s(l7e);sAr=r(hAt,"xlm"),hAt.forEach(t),lAr=r(yIe," \u2014 "),yJ=n(yIe,"A",{href:!0});var pAt=s(yJ);iAr=r(pAt,"TFXLMForTokenClassification"),pAt.forEach(t),dAr=r(yIe," (XLM model)"),yIe.forEach(t),cAr=i(me),aC=n(me,"LI",{});var LIe=s(aC);i7e=n(LIe,"STRONG",{});var _At=s(i7e);fAr=r(_At,"xlm-roberta"),_At.forEach(t),mAr=r(LIe," \u2014 "),LJ=n(LIe,"A",{href:!0});var uAt=s(LJ);gAr=r(uAt,"TFXLMRobertaForTokenClassification"),uAt.forEach(t),hAr=r(LIe," (XLM-RoBERTa model)"),LIe.forEach(t),pAr=i(me),nC=n(me,"LI",{});var xIe=s(nC);d7e=n(xIe,"STRONG",{});var bAt=s(d7e);_Ar=r(bAt,"xlnet"),bAt.forEach(t),uAr=r(xIe," \u2014 "),xJ=n(xIe,"A",{href:!0});var vAt=s(xJ);bAr=r(vAt,"TFXLNetForTokenClassification"),vAt.forEach(t),vAr=r(xIe," (XLNet model)"),xIe.forEach(t),me.forEach(t),FAr=i(Bl),T(sC.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),CDe=i(f),Tc=n(f,"H2",{class:!0});var kOe=s(Tc);lC=n(kOe,"A",{id:!0,class:!0,href:!0});var FAt=s(lC);c7e=n(FAt,"SPAN",{});var TAt=s(c7e);T(E9.$$.fragment,TAt),TAt.forEach(t),FAt.forEach(t),TAr=i(kOe),f7e=n(kOe,"SPAN",{});var MAt=s(f7e);MAr=r(MAt,"TFAutoModelForQuestionAnswering"),MAt.forEach(t),kOe.forEach(t),wDe=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(C9.$$.fragment,Il),EAr=i(Il),Mc=n(Il,"P",{});var aoe=s(Mc);CAr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$J=n(aoe,"A",{href:!0});var EAt=s($J);wAr=r(EAt,"from_pretrained()"),EAt.forEach(t),AAr=r(aoe," class method or the "),kJ=n(aoe,"A",{href:!0});var CAt=s(kJ);yAr=r(CAt,"from_config()"),CAt.forEach(t),LAr=r(aoe,` class
method.`),aoe.forEach(t),xAr=i(Il),w9=n(Il,"P",{});var SOe=s(w9);$Ar=r(SOe,"This class cannot be instantiated directly using "),m7e=n(SOe,"CODE",{});var wAt=s(m7e);kAr=r(wAt,"__init__()"),wAt.forEach(t),SAr=r(SOe," (throws an error)."),SOe.forEach(t),RAr=i(Il),qt=n(Il,"DIV",{class:!0});var sA=s(qt);T(A9.$$.fragment,sA),PAr=i(sA),g7e=n(sA,"P",{});var AAt=s(g7e);BAr=r(AAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),AAt.forEach(t),IAr=i(sA),Ec=n(sA,"P",{});var noe=s(Ec);NAr=r(noe,`Note:
Loading a model from its configuration file does `),h7e=n(noe,"STRONG",{});var yAt=s(h7e);qAr=r(yAt,"not"),yAt.forEach(t),jAr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=n(noe,"A",{href:!0});var LAt=s(SJ);DAr=r(LAt,"from_pretrained()"),LAt.forEach(t),GAr=r(noe," to load the model weights."),noe.forEach(t),OAr=i(sA),T(iC.$$.fragment,sA),sA.forEach(t),VAr=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(y9.$$.fragment,Nl),XAr=i(Nl),p7e=n(Nl,"P",{});var xAt=s(p7e);zAr=r(xAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xAt.forEach(t),WAr=i(Nl),fn=n(Nl,"P",{});var lA=s(fn);QAr=r(lA,"The model class to instantiate is selected based on the "),_7e=n(lA,"CODE",{});var $At=s(_7e);HAr=r($At,"model_type"),$At.forEach(t),UAr=r(lA,` property of the config object (either
passed as an argument or loaded from `),u7e=n(lA,"CODE",{});var kAt=s(u7e);JAr=r(kAt,"pretrained_model_name_or_path"),kAt.forEach(t),YAr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=n(lA,"CODE",{});var SAt=s(b7e);KAr=r(SAt,"pretrained_model_name_or_path"),SAt.forEach(t),ZAr=r(lA,":"),lA.forEach(t),eyr=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);dC=n(ge,"LI",{});var $Ie=s(dC);v7e=n($Ie,"STRONG",{});var RAt=s(v7e);oyr=r(RAt,"albert"),RAt.forEach(t),ryr=r($Ie," \u2014 "),RJ=n($Ie,"A",{href:!0});var PAt=s(RJ);tyr=r(PAt,"TFAlbertForQuestionAnswering"),PAt.forEach(t),ayr=r($Ie," (ALBERT model)"),$Ie.forEach(t),nyr=i(ge),cC=n(ge,"LI",{});var kIe=s(cC);F7e=n(kIe,"STRONG",{});var BAt=s(F7e);syr=r(BAt,"bert"),BAt.forEach(t),lyr=r(kIe," \u2014 "),PJ=n(kIe,"A",{href:!0});var IAt=s(PJ);iyr=r(IAt,"TFBertForQuestionAnswering"),IAt.forEach(t),dyr=r(kIe," (BERT model)"),kIe.forEach(t),cyr=i(ge),fC=n(ge,"LI",{});var SIe=s(fC);T7e=n(SIe,"STRONG",{});var NAt=s(T7e);fyr=r(NAt,"camembert"),NAt.forEach(t),myr=r(SIe," \u2014 "),BJ=n(SIe,"A",{href:!0});var qAt=s(BJ);gyr=r(qAt,"TFCamembertForQuestionAnswering"),qAt.forEach(t),hyr=r(SIe," (CamemBERT model)"),SIe.forEach(t),pyr=i(ge),mC=n(ge,"LI",{});var RIe=s(mC);M7e=n(RIe,"STRONG",{});var jAt=s(M7e);_yr=r(jAt,"convbert"),jAt.forEach(t),uyr=r(RIe," \u2014 "),IJ=n(RIe,"A",{href:!0});var DAt=s(IJ);byr=r(DAt,"TFConvBertForQuestionAnswering"),DAt.forEach(t),vyr=r(RIe," (ConvBERT model)"),RIe.forEach(t),Fyr=i(ge),gC=n(ge,"LI",{});var PIe=s(gC);E7e=n(PIe,"STRONG",{});var GAt=s(E7e);Tyr=r(GAt,"deberta"),GAt.forEach(t),Myr=r(PIe," \u2014 "),NJ=n(PIe,"A",{href:!0});var OAt=s(NJ);Eyr=r(OAt,"TFDebertaForQuestionAnswering"),OAt.forEach(t),Cyr=r(PIe," (DeBERTa model)"),PIe.forEach(t),wyr=i(ge),hC=n(ge,"LI",{});var BIe=s(hC);C7e=n(BIe,"STRONG",{});var VAt=s(C7e);Ayr=r(VAt,"deberta-v2"),VAt.forEach(t),yyr=r(BIe," \u2014 "),qJ=n(BIe,"A",{href:!0});var XAt=s(qJ);Lyr=r(XAt,"TFDebertaV2ForQuestionAnswering"),XAt.forEach(t),xyr=r(BIe," (DeBERTa-v2 model)"),BIe.forEach(t),$yr=i(ge),pC=n(ge,"LI",{});var IIe=s(pC);w7e=n(IIe,"STRONG",{});var zAt=s(w7e);kyr=r(zAt,"distilbert"),zAt.forEach(t),Syr=r(IIe," \u2014 "),jJ=n(IIe,"A",{href:!0});var WAt=s(jJ);Ryr=r(WAt,"TFDistilBertForQuestionAnswering"),WAt.forEach(t),Pyr=r(IIe," (DistilBERT model)"),IIe.forEach(t),Byr=i(ge),_C=n(ge,"LI",{});var NIe=s(_C);A7e=n(NIe,"STRONG",{});var QAt=s(A7e);Iyr=r(QAt,"electra"),QAt.forEach(t),Nyr=r(NIe," \u2014 "),DJ=n(NIe,"A",{href:!0});var HAt=s(DJ);qyr=r(HAt,"TFElectraForQuestionAnswering"),HAt.forEach(t),jyr=r(NIe," (ELECTRA model)"),NIe.forEach(t),Dyr=i(ge),uC=n(ge,"LI",{});var qIe=s(uC);y7e=n(qIe,"STRONG",{});var UAt=s(y7e);Gyr=r(UAt,"flaubert"),UAt.forEach(t),Oyr=r(qIe," \u2014 "),GJ=n(qIe,"A",{href:!0});var JAt=s(GJ);Vyr=r(JAt,"TFFlaubertForQuestionAnsweringSimple"),JAt.forEach(t),Xyr=r(qIe," (FlauBERT model)"),qIe.forEach(t),zyr=i(ge),bC=n(ge,"LI",{});var jIe=s(bC);L7e=n(jIe,"STRONG",{});var YAt=s(L7e);Wyr=r(YAt,"funnel"),YAt.forEach(t),Qyr=r(jIe," \u2014 "),OJ=n(jIe,"A",{href:!0});var KAt=s(OJ);Hyr=r(KAt,"TFFunnelForQuestionAnswering"),KAt.forEach(t),Uyr=r(jIe," (Funnel Transformer model)"),jIe.forEach(t),Jyr=i(ge),vC=n(ge,"LI",{});var DIe=s(vC);x7e=n(DIe,"STRONG",{});var ZAt=s(x7e);Yyr=r(ZAt,"gptj"),ZAt.forEach(t),Kyr=r(DIe," \u2014 "),VJ=n(DIe,"A",{href:!0});var eyt=s(VJ);Zyr=r(eyt,"TFGPTJForQuestionAnswering"),eyt.forEach(t),eLr=r(DIe," (GPT-J model)"),DIe.forEach(t),oLr=i(ge),FC=n(ge,"LI",{});var GIe=s(FC);$7e=n(GIe,"STRONG",{});var oyt=s($7e);rLr=r(oyt,"longformer"),oyt.forEach(t),tLr=r(GIe," \u2014 "),XJ=n(GIe,"A",{href:!0});var ryt=s(XJ);aLr=r(ryt,"TFLongformerForQuestionAnswering"),ryt.forEach(t),nLr=r(GIe," (Longformer model)"),GIe.forEach(t),sLr=i(ge),TC=n(ge,"LI",{});var OIe=s(TC);k7e=n(OIe,"STRONG",{});var tyt=s(k7e);lLr=r(tyt,"mobilebert"),tyt.forEach(t),iLr=r(OIe," \u2014 "),zJ=n(OIe,"A",{href:!0});var ayt=s(zJ);dLr=r(ayt,"TFMobileBertForQuestionAnswering"),ayt.forEach(t),cLr=r(OIe," (MobileBERT model)"),OIe.forEach(t),fLr=i(ge),MC=n(ge,"LI",{});var VIe=s(MC);S7e=n(VIe,"STRONG",{});var nyt=s(S7e);mLr=r(nyt,"mpnet"),nyt.forEach(t),gLr=r(VIe," \u2014 "),WJ=n(VIe,"A",{href:!0});var syt=s(WJ);hLr=r(syt,"TFMPNetForQuestionAnswering"),syt.forEach(t),pLr=r(VIe," (MPNet model)"),VIe.forEach(t),_Lr=i(ge),EC=n(ge,"LI",{});var XIe=s(EC);R7e=n(XIe,"STRONG",{});var lyt=s(R7e);uLr=r(lyt,"rembert"),lyt.forEach(t),bLr=r(XIe," \u2014 "),QJ=n(XIe,"A",{href:!0});var iyt=s(QJ);vLr=r(iyt,"TFRemBertForQuestionAnswering"),iyt.forEach(t),FLr=r(XIe," (RemBERT model)"),XIe.forEach(t),TLr=i(ge),CC=n(ge,"LI",{});var zIe=s(CC);P7e=n(zIe,"STRONG",{});var dyt=s(P7e);MLr=r(dyt,"roberta"),dyt.forEach(t),ELr=r(zIe," \u2014 "),HJ=n(zIe,"A",{href:!0});var cyt=s(HJ);CLr=r(cyt,"TFRobertaForQuestionAnswering"),cyt.forEach(t),wLr=r(zIe," (RoBERTa model)"),zIe.forEach(t),ALr=i(ge),wC=n(ge,"LI",{});var WIe=s(wC);B7e=n(WIe,"STRONG",{});var fyt=s(B7e);yLr=r(fyt,"roformer"),fyt.forEach(t),LLr=r(WIe," \u2014 "),UJ=n(WIe,"A",{href:!0});var myt=s(UJ);xLr=r(myt,"TFRoFormerForQuestionAnswering"),myt.forEach(t),$Lr=r(WIe," (RoFormer model)"),WIe.forEach(t),kLr=i(ge),AC=n(ge,"LI",{});var QIe=s(AC);I7e=n(QIe,"STRONG",{});var gyt=s(I7e);SLr=r(gyt,"xlm"),gyt.forEach(t),RLr=r(QIe," \u2014 "),JJ=n(QIe,"A",{href:!0});var hyt=s(JJ);PLr=r(hyt,"TFXLMForQuestionAnsweringSimple"),hyt.forEach(t),BLr=r(QIe," (XLM model)"),QIe.forEach(t),ILr=i(ge),yC=n(ge,"LI",{});var HIe=s(yC);N7e=n(HIe,"STRONG",{});var pyt=s(N7e);NLr=r(pyt,"xlm-roberta"),pyt.forEach(t),qLr=r(HIe," \u2014 "),YJ=n(HIe,"A",{href:!0});var _yt=s(YJ);jLr=r(_yt,"TFXLMRobertaForQuestionAnswering"),_yt.forEach(t),DLr=r(HIe," (XLM-RoBERTa model)"),HIe.forEach(t),GLr=i(ge),LC=n(ge,"LI",{});var UIe=s(LC);q7e=n(UIe,"STRONG",{});var uyt=s(q7e);OLr=r(uyt,"xlnet"),uyt.forEach(t),VLr=r(UIe," \u2014 "),KJ=n(UIe,"A",{href:!0});var byt=s(KJ);XLr=r(byt,"TFXLNetForQuestionAnsweringSimple"),byt.forEach(t),zLr=r(UIe," (XLNet model)"),UIe.forEach(t),ge.forEach(t),WLr=i(Nl),T(xC.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),ADe=i(f),Cc=n(f,"H2",{class:!0});var ROe=s(Cc);$C=n(ROe,"A",{id:!0,class:!0,href:!0});var vyt=s($C);j7e=n(vyt,"SPAN",{});var Fyt=s(j7e);T(L9.$$.fragment,Fyt),Fyt.forEach(t),vyt.forEach(t),QLr=i(ROe),D7e=n(ROe,"SPAN",{});var Tyt=s(D7e);HLr=r(Tyt,"TFAutoModelForVision2Seq"),Tyt.forEach(t),ROe.forEach(t),yDe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(x9.$$.fragment,ql),ULr=i(ql),wc=n(ql,"P",{});var soe=s(wc);JLr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZJ=n(soe,"A",{href:!0});var Myt=s(ZJ);YLr=r(Myt,"from_pretrained()"),Myt.forEach(t),KLr=r(soe," class method or the "),eY=n(soe,"A",{href:!0});var Eyt=s(eY);ZLr=r(Eyt,"from_config()"),Eyt.forEach(t),e8r=r(soe,` class
method.`),soe.forEach(t),o8r=i(ql),$9=n(ql,"P",{});var POe=s($9);r8r=r(POe,"This class cannot be instantiated directly using "),G7e=n(POe,"CODE",{});var Cyt=s(G7e);t8r=r(Cyt,"__init__()"),Cyt.forEach(t),a8r=r(POe," (throws an error)."),POe.forEach(t),n8r=i(ql),jt=n(ql,"DIV",{class:!0});var iA=s(jt);T(k9.$$.fragment,iA),s8r=i(iA),O7e=n(iA,"P",{});var wyt=s(O7e);l8r=r(wyt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wyt.forEach(t),i8r=i(iA),Ac=n(iA,"P",{});var loe=s(Ac);d8r=r(loe,`Note:
Loading a model from its configuration file does `),V7e=n(loe,"STRONG",{});var Ayt=s(V7e);c8r=r(Ayt,"not"),Ayt.forEach(t),f8r=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(loe,"A",{href:!0});var yyt=s(oY);m8r=r(yyt,"from_pretrained()"),yyt.forEach(t),g8r=r(loe," to load the model weights."),loe.forEach(t),h8r=i(iA),T(kC.$$.fragment,iA),iA.forEach(t),p8r=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(S9.$$.fragment,jl),_8r=i(jl),X7e=n(jl,"P",{});var Lyt=s(X7e);u8r=r(Lyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Lyt.forEach(t),b8r=i(jl),mn=n(jl,"P",{});var dA=s(mn);v8r=r(dA,"The model class to instantiate is selected based on the "),z7e=n(dA,"CODE",{});var xyt=s(z7e);F8r=r(xyt,"model_type"),xyt.forEach(t),T8r=r(dA,` property of the config object (either
passed as an argument or loaded from `),W7e=n(dA,"CODE",{});var $yt=s(W7e);M8r=r($yt,"pretrained_model_name_or_path"),$yt.forEach(t),E8r=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=n(dA,"CODE",{});var kyt=s(Q7e);C8r=r(kyt,"pretrained_model_name_or_path"),kyt.forEach(t),w8r=r(dA,":"),dA.forEach(t),A8r=i(jl),H7e=n(jl,"UL",{});var Syt=s(H7e);SC=n(Syt,"LI",{});var JIe=s(SC);U7e=n(JIe,"STRONG",{});var Ryt=s(U7e);y8r=r(Ryt,"vision-encoder-decoder"),Ryt.forEach(t),L8r=r(JIe," \u2014 "),rY=n(JIe,"A",{href:!0});var Pyt=s(rY);x8r=r(Pyt,"TFVisionEncoderDecoderModel"),Pyt.forEach(t),$8r=r(JIe," (Vision Encoder decoder model)"),JIe.forEach(t),Syt.forEach(t),k8r=i(jl),T(RC.$$.fragment,jl),jl.forEach(t),ql.forEach(t),LDe=i(f),yc=n(f,"H2",{class:!0});var BOe=s(yc);PC=n(BOe,"A",{id:!0,class:!0,href:!0});var Byt=s(PC);J7e=n(Byt,"SPAN",{});var Iyt=s(J7e);T(R9.$$.fragment,Iyt),Iyt.forEach(t),Byt.forEach(t),S8r=i(BOe),Y7e=n(BOe,"SPAN",{});var Nyt=s(Y7e);R8r=r(Nyt,"TFAutoModelForSpeechSeq2Seq"),Nyt.forEach(t),BOe.forEach(t),xDe=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T(P9.$$.fragment,Dl),P8r=i(Dl),Lc=n(Dl,"P",{});var ioe=s(Lc);B8r=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tY=n(ioe,"A",{href:!0});var qyt=s(tY);I8r=r(qyt,"from_pretrained()"),qyt.forEach(t),N8r=r(ioe," class method or the "),aY=n(ioe,"A",{href:!0});var jyt=s(aY);q8r=r(jyt,"from_config()"),jyt.forEach(t),j8r=r(ioe,` class
method.`),ioe.forEach(t),D8r=i(Dl),B9=n(Dl,"P",{});var IOe=s(B9);G8r=r(IOe,"This class cannot be instantiated directly using "),K7e=n(IOe,"CODE",{});var Dyt=s(K7e);O8r=r(Dyt,"__init__()"),Dyt.forEach(t),V8r=r(IOe," (throws an error)."),IOe.forEach(t),X8r=i(Dl),Dt=n(Dl,"DIV",{class:!0});var cA=s(Dt);T(I9.$$.fragment,cA),z8r=i(cA),Z7e=n(cA,"P",{});var Gyt=s(Z7e);W8r=r(Gyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Gyt.forEach(t),Q8r=i(cA),xc=n(cA,"P",{});var doe=s(xc);H8r=r(doe,`Note:
Loading a model from its configuration file does `),eMe=n(doe,"STRONG",{});var Oyt=s(eMe);U8r=r(Oyt,"not"),Oyt.forEach(t),J8r=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(doe,"A",{href:!0});var Vyt=s(nY);Y8r=r(Vyt,"from_pretrained()"),Vyt.forEach(t),K8r=r(doe," to load the model weights."),doe.forEach(t),Z8r=i(cA),T(BC.$$.fragment,cA),cA.forEach(t),e9r=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(N9.$$.fragment,Gl),o9r=i(Gl),oMe=n(Gl,"P",{});var Xyt=s(oMe);r9r=r(Xyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Xyt.forEach(t),t9r=i(Gl),gn=n(Gl,"P",{});var fA=s(gn);a9r=r(fA,"The model class to instantiate is selected based on the "),rMe=n(fA,"CODE",{});var zyt=s(rMe);n9r=r(zyt,"model_type"),zyt.forEach(t),s9r=r(fA,` property of the config object (either
passed as an argument or loaded from `),tMe=n(fA,"CODE",{});var Wyt=s(tMe);l9r=r(Wyt,"pretrained_model_name_or_path"),Wyt.forEach(t),i9r=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=n(fA,"CODE",{});var Qyt=s(aMe);d9r=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),c9r=r(fA,":"),fA.forEach(t),f9r=i(Gl),nMe=n(Gl,"UL",{});var Hyt=s(nMe);IC=n(Hyt,"LI",{});var YIe=s(IC);sMe=n(YIe,"STRONG",{});var Uyt=s(sMe);m9r=r(Uyt,"speech_to_text"),Uyt.forEach(t),g9r=r(YIe," \u2014 "),sY=n(YIe,"A",{href:!0});var Jyt=s(sY);h9r=r(Jyt,"TFSpeech2TextForConditionalGeneration"),Jyt.forEach(t),p9r=r(YIe," (Speech2Text model)"),YIe.forEach(t),Hyt.forEach(t),_9r=i(Gl),T(NC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),$De=i(f),$c=n(f,"H2",{class:!0});var NOe=s($c);qC=n(NOe,"A",{id:!0,class:!0,href:!0});var Yyt=s(qC);lMe=n(Yyt,"SPAN",{});var Kyt=s(lMe);T(q9.$$.fragment,Kyt),Kyt.forEach(t),Yyt.forEach(t),u9r=i(NOe),iMe=n(NOe,"SPAN",{});var Zyt=s(iMe);b9r=r(Zyt,"FlaxAutoModel"),Zyt.forEach(t),NOe.forEach(t),kDe=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(j9.$$.fragment,Ol),v9r=i(Ol),kc=n(Ol,"P",{});var coe=s(kc);F9r=r(coe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lY=n(coe,"A",{href:!0});var eLt=s(lY);T9r=r(eLt,"from_pretrained()"),eLt.forEach(t),M9r=r(coe," class method or the "),iY=n(coe,"A",{href:!0});var oLt=s(iY);E9r=r(oLt,"from_config()"),oLt.forEach(t),C9r=r(coe,` class
method.`),coe.forEach(t),w9r=i(Ol),D9=n(Ol,"P",{});var qOe=s(D9);A9r=r(qOe,"This class cannot be instantiated directly using "),dMe=n(qOe,"CODE",{});var rLt=s(dMe);y9r=r(rLt,"__init__()"),rLt.forEach(t),L9r=r(qOe," (throws an error)."),qOe.forEach(t),x9r=i(Ol),Gt=n(Ol,"DIV",{class:!0});var mA=s(Gt);T(G9.$$.fragment,mA),$9r=i(mA),cMe=n(mA,"P",{});var tLt=s(cMe);k9r=r(tLt,"Instantiates one of the base model classes of the library from a configuration."),tLt.forEach(t),S9r=i(mA),Sc=n(mA,"P",{});var foe=s(Sc);R9r=r(foe,`Note:
Loading a model from its configuration file does `),fMe=n(foe,"STRONG",{});var aLt=s(fMe);P9r=r(aLt,"not"),aLt.forEach(t),B9r=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(foe,"A",{href:!0});var nLt=s(dY);I9r=r(nLt,"from_pretrained()"),nLt.forEach(t),N9r=r(foe," to load the model weights."),foe.forEach(t),q9r=i(mA),T(jC.$$.fragment,mA),mA.forEach(t),j9r=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(O9.$$.fragment,Vl),D9r=i(Vl),mMe=n(Vl,"P",{});var sLt=s(mMe);G9r=r(sLt,"Instantiate one of the base model classes of the library from a pretrained model."),sLt.forEach(t),O9r=i(Vl),hn=n(Vl,"P",{});var gA=s(hn);V9r=r(gA,"The model class to instantiate is selected based on the "),gMe=n(gA,"CODE",{});var lLt=s(gMe);X9r=r(lLt,"model_type"),lLt.forEach(t),z9r=r(gA,` property of the config object (either
passed as an argument or loaded from `),hMe=n(gA,"CODE",{});var iLt=s(hMe);W9r=r(iLt,"pretrained_model_name_or_path"),iLt.forEach(t),Q9r=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=n(gA,"CODE",{});var dLt=s(pMe);H9r=r(dLt,"pretrained_model_name_or_path"),dLt.forEach(t),U9r=r(gA,":"),gA.forEach(t),J9r=i(Vl),re=n(Vl,"UL",{});var ne=s(re);DC=n(ne,"LI",{});var KIe=s(DC);_Me=n(KIe,"STRONG",{});var cLt=s(_Me);Y9r=r(cLt,"albert"),cLt.forEach(t),K9r=r(KIe," \u2014 "),cY=n(KIe,"A",{href:!0});var fLt=s(cY);Z9r=r(fLt,"FlaxAlbertModel"),fLt.forEach(t),exr=r(KIe," (ALBERT model)"),KIe.forEach(t),oxr=i(ne),GC=n(ne,"LI",{});var ZIe=s(GC);uMe=n(ZIe,"STRONG",{});var mLt=s(uMe);rxr=r(mLt,"bart"),mLt.forEach(t),txr=r(ZIe," \u2014 "),fY=n(ZIe,"A",{href:!0});var gLt=s(fY);axr=r(gLt,"FlaxBartModel"),gLt.forEach(t),nxr=r(ZIe," (BART model)"),ZIe.forEach(t),sxr=i(ne),OC=n(ne,"LI",{});var eNe=s(OC);bMe=n(eNe,"STRONG",{});var hLt=s(bMe);lxr=r(hLt,"beit"),hLt.forEach(t),ixr=r(eNe," \u2014 "),mY=n(eNe,"A",{href:!0});var pLt=s(mY);dxr=r(pLt,"FlaxBeitModel"),pLt.forEach(t),cxr=r(eNe," (BEiT model)"),eNe.forEach(t),fxr=i(ne),VC=n(ne,"LI",{});var oNe=s(VC);vMe=n(oNe,"STRONG",{});var _Lt=s(vMe);mxr=r(_Lt,"bert"),_Lt.forEach(t),gxr=r(oNe," \u2014 "),gY=n(oNe,"A",{href:!0});var uLt=s(gY);hxr=r(uLt,"FlaxBertModel"),uLt.forEach(t),pxr=r(oNe," (BERT model)"),oNe.forEach(t),_xr=i(ne),XC=n(ne,"LI",{});var rNe=s(XC);FMe=n(rNe,"STRONG",{});var bLt=s(FMe);uxr=r(bLt,"big_bird"),bLt.forEach(t),bxr=r(rNe," \u2014 "),hY=n(rNe,"A",{href:!0});var vLt=s(hY);vxr=r(vLt,"FlaxBigBirdModel"),vLt.forEach(t),Fxr=r(rNe," (BigBird model)"),rNe.forEach(t),Txr=i(ne),zC=n(ne,"LI",{});var tNe=s(zC);TMe=n(tNe,"STRONG",{});var FLt=s(TMe);Mxr=r(FLt,"blenderbot"),FLt.forEach(t),Exr=r(tNe," \u2014 "),pY=n(tNe,"A",{href:!0});var TLt=s(pY);Cxr=r(TLt,"FlaxBlenderbotModel"),TLt.forEach(t),wxr=r(tNe," (Blenderbot model)"),tNe.forEach(t),Axr=i(ne),WC=n(ne,"LI",{});var aNe=s(WC);MMe=n(aNe,"STRONG",{});var MLt=s(MMe);yxr=r(MLt,"blenderbot-small"),MLt.forEach(t),Lxr=r(aNe," \u2014 "),_Y=n(aNe,"A",{href:!0});var ELt=s(_Y);xxr=r(ELt,"FlaxBlenderbotSmallModel"),ELt.forEach(t),$xr=r(aNe," (BlenderbotSmall model)"),aNe.forEach(t),kxr=i(ne),QC=n(ne,"LI",{});var nNe=s(QC);EMe=n(nNe,"STRONG",{});var CLt=s(EMe);Sxr=r(CLt,"clip"),CLt.forEach(t),Rxr=r(nNe," \u2014 "),uY=n(nNe,"A",{href:!0});var wLt=s(uY);Pxr=r(wLt,"FlaxCLIPModel"),wLt.forEach(t),Bxr=r(nNe," (CLIP model)"),nNe.forEach(t),Ixr=i(ne),HC=n(ne,"LI",{});var sNe=s(HC);CMe=n(sNe,"STRONG",{});var ALt=s(CMe);Nxr=r(ALt,"distilbert"),ALt.forEach(t),qxr=r(sNe," \u2014 "),bY=n(sNe,"A",{href:!0});var yLt=s(bY);jxr=r(yLt,"FlaxDistilBertModel"),yLt.forEach(t),Dxr=r(sNe," (DistilBERT model)"),sNe.forEach(t),Gxr=i(ne),UC=n(ne,"LI",{});var lNe=s(UC);wMe=n(lNe,"STRONG",{});var LLt=s(wMe);Oxr=r(LLt,"electra"),LLt.forEach(t),Vxr=r(lNe," \u2014 "),vY=n(lNe,"A",{href:!0});var xLt=s(vY);Xxr=r(xLt,"FlaxElectraModel"),xLt.forEach(t),zxr=r(lNe," (ELECTRA model)"),lNe.forEach(t),Wxr=i(ne),JC=n(ne,"LI",{});var iNe=s(JC);AMe=n(iNe,"STRONG",{});var $Lt=s(AMe);Qxr=r($Lt,"gpt2"),$Lt.forEach(t),Hxr=r(iNe," \u2014 "),FY=n(iNe,"A",{href:!0});var kLt=s(FY);Uxr=r(kLt,"FlaxGPT2Model"),kLt.forEach(t),Jxr=r(iNe," (OpenAI GPT-2 model)"),iNe.forEach(t),Yxr=i(ne),YC=n(ne,"LI",{});var dNe=s(YC);yMe=n(dNe,"STRONG",{});var SLt=s(yMe);Kxr=r(SLt,"gpt_neo"),SLt.forEach(t),Zxr=r(dNe," \u2014 "),TY=n(dNe,"A",{href:!0});var RLt=s(TY);e$r=r(RLt,"FlaxGPTNeoModel"),RLt.forEach(t),o$r=r(dNe," (GPT Neo model)"),dNe.forEach(t),r$r=i(ne),KC=n(ne,"LI",{});var cNe=s(KC);LMe=n(cNe,"STRONG",{});var PLt=s(LMe);t$r=r(PLt,"gptj"),PLt.forEach(t),a$r=r(cNe," \u2014 "),MY=n(cNe,"A",{href:!0});var BLt=s(MY);n$r=r(BLt,"FlaxGPTJModel"),BLt.forEach(t),s$r=r(cNe," (GPT-J model)"),cNe.forEach(t),l$r=i(ne),ZC=n(ne,"LI",{});var fNe=s(ZC);xMe=n(fNe,"STRONG",{});var ILt=s(xMe);i$r=r(ILt,"marian"),ILt.forEach(t),d$r=r(fNe," \u2014 "),EY=n(fNe,"A",{href:!0});var NLt=s(EY);c$r=r(NLt,"FlaxMarianModel"),NLt.forEach(t),f$r=r(fNe," (Marian model)"),fNe.forEach(t),m$r=i(ne),e5=n(ne,"LI",{});var mNe=s(e5);$Me=n(mNe,"STRONG",{});var qLt=s($Me);g$r=r(qLt,"mbart"),qLt.forEach(t),h$r=r(mNe," \u2014 "),CY=n(mNe,"A",{href:!0});var jLt=s(CY);p$r=r(jLt,"FlaxMBartModel"),jLt.forEach(t),_$r=r(mNe," (mBART model)"),mNe.forEach(t),u$r=i(ne),o5=n(ne,"LI",{});var gNe=s(o5);kMe=n(gNe,"STRONG",{});var DLt=s(kMe);b$r=r(DLt,"mt5"),DLt.forEach(t),v$r=r(gNe," \u2014 "),wY=n(gNe,"A",{href:!0});var GLt=s(wY);F$r=r(GLt,"FlaxMT5Model"),GLt.forEach(t),T$r=r(gNe," (MT5 model)"),gNe.forEach(t),M$r=i(ne),r5=n(ne,"LI",{});var hNe=s(r5);SMe=n(hNe,"STRONG",{});var OLt=s(SMe);E$r=r(OLt,"opt"),OLt.forEach(t),C$r=r(hNe," \u2014 "),AY=n(hNe,"A",{href:!0});var VLt=s(AY);w$r=r(VLt,"FlaxOPTModel"),VLt.forEach(t),A$r=r(hNe," (OPT model)"),hNe.forEach(t),y$r=i(ne),t5=n(ne,"LI",{});var pNe=s(t5);RMe=n(pNe,"STRONG",{});var XLt=s(RMe);L$r=r(XLt,"pegasus"),XLt.forEach(t),x$r=r(pNe," \u2014 "),yY=n(pNe,"A",{href:!0});var zLt=s(yY);$$r=r(zLt,"FlaxPegasusModel"),zLt.forEach(t),k$r=r(pNe," (Pegasus model)"),pNe.forEach(t),S$r=i(ne),a5=n(ne,"LI",{});var _Ne=s(a5);PMe=n(_Ne,"STRONG",{});var WLt=s(PMe);R$r=r(WLt,"roberta"),WLt.forEach(t),P$r=r(_Ne," \u2014 "),LY=n(_Ne,"A",{href:!0});var QLt=s(LY);B$r=r(QLt,"FlaxRobertaModel"),QLt.forEach(t),I$r=r(_Ne," (RoBERTa model)"),_Ne.forEach(t),N$r=i(ne),n5=n(ne,"LI",{});var uNe=s(n5);BMe=n(uNe,"STRONG",{});var HLt=s(BMe);q$r=r(HLt,"roformer"),HLt.forEach(t),j$r=r(uNe," \u2014 "),xY=n(uNe,"A",{href:!0});var ULt=s(xY);D$r=r(ULt,"FlaxRoFormerModel"),ULt.forEach(t),G$r=r(uNe," (RoFormer model)"),uNe.forEach(t),O$r=i(ne),s5=n(ne,"LI",{});var bNe=s(s5);IMe=n(bNe,"STRONG",{});var JLt=s(IMe);V$r=r(JLt,"t5"),JLt.forEach(t),X$r=r(bNe," \u2014 "),$Y=n(bNe,"A",{href:!0});var YLt=s($Y);z$r=r(YLt,"FlaxT5Model"),YLt.forEach(t),W$r=r(bNe," (T5 model)"),bNe.forEach(t),Q$r=i(ne),l5=n(ne,"LI",{});var vNe=s(l5);NMe=n(vNe,"STRONG",{});var KLt=s(NMe);H$r=r(KLt,"vision-text-dual-encoder"),KLt.forEach(t),U$r=r(vNe," \u2014 "),kY=n(vNe,"A",{href:!0});var ZLt=s(kY);J$r=r(ZLt,"FlaxVisionTextDualEncoderModel"),ZLt.forEach(t),Y$r=r(vNe," (VisionTextDualEncoder model)"),vNe.forEach(t),K$r=i(ne),i5=n(ne,"LI",{});var FNe=s(i5);qMe=n(FNe,"STRONG",{});var e8t=s(qMe);Z$r=r(e8t,"vit"),e8t.forEach(t),ekr=r(FNe," \u2014 "),SY=n(FNe,"A",{href:!0});var o8t=s(SY);okr=r(o8t,"FlaxViTModel"),o8t.forEach(t),rkr=r(FNe," (ViT model)"),FNe.forEach(t),tkr=i(ne),d5=n(ne,"LI",{});var TNe=s(d5);jMe=n(TNe,"STRONG",{});var r8t=s(jMe);akr=r(r8t,"wav2vec2"),r8t.forEach(t),nkr=r(TNe," \u2014 "),RY=n(TNe,"A",{href:!0});var t8t=s(RY);skr=r(t8t,"FlaxWav2Vec2Model"),t8t.forEach(t),lkr=r(TNe," (Wav2Vec2 model)"),TNe.forEach(t),ikr=i(ne),c5=n(ne,"LI",{});var MNe=s(c5);DMe=n(MNe,"STRONG",{});var a8t=s(DMe);dkr=r(a8t,"xglm"),a8t.forEach(t),ckr=r(MNe," \u2014 "),PY=n(MNe,"A",{href:!0});var n8t=s(PY);fkr=r(n8t,"FlaxXGLMModel"),n8t.forEach(t),mkr=r(MNe," (XGLM model)"),MNe.forEach(t),gkr=i(ne),f5=n(ne,"LI",{});var ENe=s(f5);GMe=n(ENe,"STRONG",{});var s8t=s(GMe);hkr=r(s8t,"xlm-roberta"),s8t.forEach(t),pkr=r(ENe," \u2014 "),BY=n(ENe,"A",{href:!0});var l8t=s(BY);_kr=r(l8t,"FlaxXLMRobertaModel"),l8t.forEach(t),ukr=r(ENe," (XLM-RoBERTa model)"),ENe.forEach(t),ne.forEach(t),bkr=i(Vl),T(m5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),SDe=i(f),Rc=n(f,"H2",{class:!0});var jOe=s(Rc);g5=n(jOe,"A",{id:!0,class:!0,href:!0});var i8t=s(g5);OMe=n(i8t,"SPAN",{});var d8t=s(OMe);T(V9.$$.fragment,d8t),d8t.forEach(t),i8t.forEach(t),vkr=i(jOe),VMe=n(jOe,"SPAN",{});var c8t=s(VMe);Fkr=r(c8t,"FlaxAutoModelForCausalLM"),c8t.forEach(t),jOe.forEach(t),RDe=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(X9.$$.fragment,Xl),Tkr=i(Xl),Pc=n(Xl,"P",{});var moe=s(Pc);Mkr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IY=n(moe,"A",{href:!0});var f8t=s(IY);Ekr=r(f8t,"from_pretrained()"),f8t.forEach(t),Ckr=r(moe," class method or the "),NY=n(moe,"A",{href:!0});var m8t=s(NY);wkr=r(m8t,"from_config()"),m8t.forEach(t),Akr=r(moe,` class
method.`),moe.forEach(t),ykr=i(Xl),z9=n(Xl,"P",{});var DOe=s(z9);Lkr=r(DOe,"This class cannot be instantiated directly using "),XMe=n(DOe,"CODE",{});var g8t=s(XMe);xkr=r(g8t,"__init__()"),g8t.forEach(t),$kr=r(DOe," (throws an error)."),DOe.forEach(t),kkr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var hA=s(Ot);T(W9.$$.fragment,hA),Skr=i(hA),zMe=n(hA,"P",{});var h8t=s(zMe);Rkr=r(h8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),h8t.forEach(t),Pkr=i(hA),Bc=n(hA,"P",{});var goe=s(Bc);Bkr=r(goe,`Note:
Loading a model from its configuration file does `),WMe=n(goe,"STRONG",{});var p8t=s(WMe);Ikr=r(p8t,"not"),p8t.forEach(t),Nkr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(goe,"A",{href:!0});var _8t=s(qY);qkr=r(_8t,"from_pretrained()"),_8t.forEach(t),jkr=r(goe," to load the model weights."),goe.forEach(t),Dkr=i(hA),T(h5.$$.fragment,hA),hA.forEach(t),Gkr=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(Q9.$$.fragment,zl),Okr=i(zl),QMe=n(zl,"P",{});var u8t=s(QMe);Vkr=r(u8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),u8t.forEach(t),Xkr=i(zl),pn=n(zl,"P",{});var pA=s(pn);zkr=r(pA,"The model class to instantiate is selected based on the "),HMe=n(pA,"CODE",{});var b8t=s(HMe);Wkr=r(b8t,"model_type"),b8t.forEach(t),Qkr=r(pA,` property of the config object (either
passed as an argument or loaded from `),UMe=n(pA,"CODE",{});var v8t=s(UMe);Hkr=r(v8t,"pretrained_model_name_or_path"),v8t.forEach(t),Ukr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=n(pA,"CODE",{});var F8t=s(JMe);Jkr=r(F8t,"pretrained_model_name_or_path"),F8t.forEach(t),Ykr=r(pA,":"),pA.forEach(t),Kkr=i(zl),xe=n(zl,"UL",{});var Ne=s(xe);p5=n(Ne,"LI",{});var CNe=s(p5);YMe=n(CNe,"STRONG",{});var T8t=s(YMe);Zkr=r(T8t,"bart"),T8t.forEach(t),eSr=r(CNe," \u2014 "),jY=n(CNe,"A",{href:!0});var M8t=s(jY);oSr=r(M8t,"FlaxBartForCausalLM"),M8t.forEach(t),rSr=r(CNe," (BART model)"),CNe.forEach(t),tSr=i(Ne),_5=n(Ne,"LI",{});var wNe=s(_5);KMe=n(wNe,"STRONG",{});var E8t=s(KMe);aSr=r(E8t,"bert"),E8t.forEach(t),nSr=r(wNe," \u2014 "),DY=n(wNe,"A",{href:!0});var C8t=s(DY);sSr=r(C8t,"FlaxBertForCausalLM"),C8t.forEach(t),lSr=r(wNe," (BERT model)"),wNe.forEach(t),iSr=i(Ne),u5=n(Ne,"LI",{});var ANe=s(u5);ZMe=n(ANe,"STRONG",{});var w8t=s(ZMe);dSr=r(w8t,"big_bird"),w8t.forEach(t),cSr=r(ANe," \u2014 "),GY=n(ANe,"A",{href:!0});var A8t=s(GY);fSr=r(A8t,"FlaxBigBirdForCausalLM"),A8t.forEach(t),mSr=r(ANe," (BigBird model)"),ANe.forEach(t),gSr=i(Ne),b5=n(Ne,"LI",{});var yNe=s(b5);e4e=n(yNe,"STRONG",{});var y8t=s(e4e);hSr=r(y8t,"electra"),y8t.forEach(t),pSr=r(yNe," \u2014 "),OY=n(yNe,"A",{href:!0});var L8t=s(OY);_Sr=r(L8t,"FlaxElectraForCausalLM"),L8t.forEach(t),uSr=r(yNe," (ELECTRA model)"),yNe.forEach(t),bSr=i(Ne),v5=n(Ne,"LI",{});var LNe=s(v5);o4e=n(LNe,"STRONG",{});var x8t=s(o4e);vSr=r(x8t,"gpt2"),x8t.forEach(t),FSr=r(LNe," \u2014 "),VY=n(LNe,"A",{href:!0});var $8t=s(VY);TSr=r($8t,"FlaxGPT2LMHeadModel"),$8t.forEach(t),MSr=r(LNe," (OpenAI GPT-2 model)"),LNe.forEach(t),ESr=i(Ne),F5=n(Ne,"LI",{});var xNe=s(F5);r4e=n(xNe,"STRONG",{});var k8t=s(r4e);CSr=r(k8t,"gpt_neo"),k8t.forEach(t),wSr=r(xNe," \u2014 "),XY=n(xNe,"A",{href:!0});var S8t=s(XY);ASr=r(S8t,"FlaxGPTNeoForCausalLM"),S8t.forEach(t),ySr=r(xNe," (GPT Neo model)"),xNe.forEach(t),LSr=i(Ne),T5=n(Ne,"LI",{});var $Ne=s(T5);t4e=n($Ne,"STRONG",{});var R8t=s(t4e);xSr=r(R8t,"gptj"),R8t.forEach(t),$Sr=r($Ne," \u2014 "),zY=n($Ne,"A",{href:!0});var P8t=s(zY);kSr=r(P8t,"FlaxGPTJForCausalLM"),P8t.forEach(t),SSr=r($Ne," (GPT-J model)"),$Ne.forEach(t),RSr=i(Ne),M5=n(Ne,"LI",{});var kNe=s(M5);a4e=n(kNe,"STRONG",{});var B8t=s(a4e);PSr=r(B8t,"opt"),B8t.forEach(t),BSr=r(kNe," \u2014 "),WY=n(kNe,"A",{href:!0});var I8t=s(WY);ISr=r(I8t,"FlaxOPTForCausalLM"),I8t.forEach(t),NSr=r(kNe," (OPT model)"),kNe.forEach(t),qSr=i(Ne),E5=n(Ne,"LI",{});var SNe=s(E5);n4e=n(SNe,"STRONG",{});var N8t=s(n4e);jSr=r(N8t,"roberta"),N8t.forEach(t),DSr=r(SNe," \u2014 "),QY=n(SNe,"A",{href:!0});var q8t=s(QY);GSr=r(q8t,"FlaxRobertaForCausalLM"),q8t.forEach(t),OSr=r(SNe," (RoBERTa model)"),SNe.forEach(t),VSr=i(Ne),C5=n(Ne,"LI",{});var RNe=s(C5);s4e=n(RNe,"STRONG",{});var j8t=s(s4e);XSr=r(j8t,"xglm"),j8t.forEach(t),zSr=r(RNe," \u2014 "),HY=n(RNe,"A",{href:!0});var D8t=s(HY);WSr=r(D8t,"FlaxXGLMForCausalLM"),D8t.forEach(t),QSr=r(RNe," (XGLM model)"),RNe.forEach(t),Ne.forEach(t),HSr=i(zl),T(w5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),PDe=i(f),Ic=n(f,"H2",{class:!0});var GOe=s(Ic);A5=n(GOe,"A",{id:!0,class:!0,href:!0});var G8t=s(A5);l4e=n(G8t,"SPAN",{});var O8t=s(l4e);T(H9.$$.fragment,O8t),O8t.forEach(t),G8t.forEach(t),USr=i(GOe),i4e=n(GOe,"SPAN",{});var V8t=s(i4e);JSr=r(V8t,"FlaxAutoModelForPreTraining"),V8t.forEach(t),GOe.forEach(t),BDe=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(U9.$$.fragment,Wl),YSr=i(Wl),Nc=n(Wl,"P",{});var hoe=s(Nc);KSr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UY=n(hoe,"A",{href:!0});var X8t=s(UY);ZSr=r(X8t,"from_pretrained()"),X8t.forEach(t),eRr=r(hoe," class method or the "),JY=n(hoe,"A",{href:!0});var z8t=s(JY);oRr=r(z8t,"from_config()"),z8t.forEach(t),rRr=r(hoe,` class
method.`),hoe.forEach(t),tRr=i(Wl),J9=n(Wl,"P",{});var OOe=s(J9);aRr=r(OOe,"This class cannot be instantiated directly using "),d4e=n(OOe,"CODE",{});var W8t=s(d4e);nRr=r(W8t,"__init__()"),W8t.forEach(t),sRr=r(OOe," (throws an error)."),OOe.forEach(t),lRr=i(Wl),Vt=n(Wl,"DIV",{class:!0});var _A=s(Vt);T(Y9.$$.fragment,_A),iRr=i(_A),c4e=n(_A,"P",{});var Q8t=s(c4e);dRr=r(Q8t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q8t.forEach(t),cRr=i(_A),qc=n(_A,"P",{});var poe=s(qc);fRr=r(poe,`Note:
Loading a model from its configuration file does `),f4e=n(poe,"STRONG",{});var H8t=s(f4e);mRr=r(H8t,"not"),H8t.forEach(t),gRr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(poe,"A",{href:!0});var U8t=s(YY);hRr=r(U8t,"from_pretrained()"),U8t.forEach(t),pRr=r(poe," to load the model weights."),poe.forEach(t),_Rr=i(_A),T(y5.$$.fragment,_A),_A.forEach(t),uRr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(K9.$$.fragment,Ql),bRr=i(Ql),m4e=n(Ql,"P",{});var J8t=s(m4e);vRr=r(J8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),J8t.forEach(t),FRr=i(Ql),_n=n(Ql,"P",{});var uA=s(_n);TRr=r(uA,"The model class to instantiate is selected based on the "),g4e=n(uA,"CODE",{});var Y8t=s(g4e);MRr=r(Y8t,"model_type"),Y8t.forEach(t),ERr=r(uA,` property of the config object (either
passed as an argument or loaded from `),h4e=n(uA,"CODE",{});var K8t=s(h4e);CRr=r(K8t,"pretrained_model_name_or_path"),K8t.forEach(t),wRr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=n(uA,"CODE",{});var Z8t=s(p4e);ARr=r(Z8t,"pretrained_model_name_or_path"),Z8t.forEach(t),yRr=r(uA,":"),uA.forEach(t),LRr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);L5=n(we,"LI",{});var PNe=s(L5);_4e=n(PNe,"STRONG",{});var e9t=s(_4e);xRr=r(e9t,"albert"),e9t.forEach(t),$Rr=r(PNe," \u2014 "),KY=n(PNe,"A",{href:!0});var o9t=s(KY);kRr=r(o9t,"FlaxAlbertForPreTraining"),o9t.forEach(t),SRr=r(PNe," (ALBERT model)"),PNe.forEach(t),RRr=i(we),x5=n(we,"LI",{});var BNe=s(x5);u4e=n(BNe,"STRONG",{});var r9t=s(u4e);PRr=r(r9t,"bart"),r9t.forEach(t),BRr=r(BNe," \u2014 "),ZY=n(BNe,"A",{href:!0});var t9t=s(ZY);IRr=r(t9t,"FlaxBartForConditionalGeneration"),t9t.forEach(t),NRr=r(BNe," (BART model)"),BNe.forEach(t),qRr=i(we),$5=n(we,"LI",{});var INe=s($5);b4e=n(INe,"STRONG",{});var a9t=s(b4e);jRr=r(a9t,"bert"),a9t.forEach(t),DRr=r(INe," \u2014 "),eK=n(INe,"A",{href:!0});var n9t=s(eK);GRr=r(n9t,"FlaxBertForPreTraining"),n9t.forEach(t),ORr=r(INe," (BERT model)"),INe.forEach(t),VRr=i(we),k5=n(we,"LI",{});var NNe=s(k5);v4e=n(NNe,"STRONG",{});var s9t=s(v4e);XRr=r(s9t,"big_bird"),s9t.forEach(t),zRr=r(NNe," \u2014 "),oK=n(NNe,"A",{href:!0});var l9t=s(oK);WRr=r(l9t,"FlaxBigBirdForPreTraining"),l9t.forEach(t),QRr=r(NNe," (BigBird model)"),NNe.forEach(t),HRr=i(we),S5=n(we,"LI",{});var qNe=s(S5);F4e=n(qNe,"STRONG",{});var i9t=s(F4e);URr=r(i9t,"electra"),i9t.forEach(t),JRr=r(qNe," \u2014 "),rK=n(qNe,"A",{href:!0});var d9t=s(rK);YRr=r(d9t,"FlaxElectraForPreTraining"),d9t.forEach(t),KRr=r(qNe," (ELECTRA model)"),qNe.forEach(t),ZRr=i(we),R5=n(we,"LI",{});var jNe=s(R5);T4e=n(jNe,"STRONG",{});var c9t=s(T4e);ePr=r(c9t,"mbart"),c9t.forEach(t),oPr=r(jNe," \u2014 "),tK=n(jNe,"A",{href:!0});var f9t=s(tK);rPr=r(f9t,"FlaxMBartForConditionalGeneration"),f9t.forEach(t),tPr=r(jNe," (mBART model)"),jNe.forEach(t),aPr=i(we),P5=n(we,"LI",{});var DNe=s(P5);M4e=n(DNe,"STRONG",{});var m9t=s(M4e);nPr=r(m9t,"mt5"),m9t.forEach(t),sPr=r(DNe," \u2014 "),aK=n(DNe,"A",{href:!0});var g9t=s(aK);lPr=r(g9t,"FlaxMT5ForConditionalGeneration"),g9t.forEach(t),iPr=r(DNe," (MT5 model)"),DNe.forEach(t),dPr=i(we),B5=n(we,"LI",{});var GNe=s(B5);E4e=n(GNe,"STRONG",{});var h9t=s(E4e);cPr=r(h9t,"roberta"),h9t.forEach(t),fPr=r(GNe," \u2014 "),nK=n(GNe,"A",{href:!0});var p9t=s(nK);mPr=r(p9t,"FlaxRobertaForMaskedLM"),p9t.forEach(t),gPr=r(GNe," (RoBERTa model)"),GNe.forEach(t),hPr=i(we),I5=n(we,"LI",{});var ONe=s(I5);C4e=n(ONe,"STRONG",{});var _9t=s(C4e);pPr=r(_9t,"roformer"),_9t.forEach(t),_Pr=r(ONe," \u2014 "),sK=n(ONe,"A",{href:!0});var u9t=s(sK);uPr=r(u9t,"FlaxRoFormerForMaskedLM"),u9t.forEach(t),bPr=r(ONe," (RoFormer model)"),ONe.forEach(t),vPr=i(we),N5=n(we,"LI",{});var VNe=s(N5);w4e=n(VNe,"STRONG",{});var b9t=s(w4e);FPr=r(b9t,"t5"),b9t.forEach(t),TPr=r(VNe," \u2014 "),lK=n(VNe,"A",{href:!0});var v9t=s(lK);MPr=r(v9t,"FlaxT5ForConditionalGeneration"),v9t.forEach(t),EPr=r(VNe," (T5 model)"),VNe.forEach(t),CPr=i(we),q5=n(we,"LI",{});var XNe=s(q5);A4e=n(XNe,"STRONG",{});var F9t=s(A4e);wPr=r(F9t,"wav2vec2"),F9t.forEach(t),APr=r(XNe," \u2014 "),iK=n(XNe,"A",{href:!0});var T9t=s(iK);yPr=r(T9t,"FlaxWav2Vec2ForPreTraining"),T9t.forEach(t),LPr=r(XNe," (Wav2Vec2 model)"),XNe.forEach(t),xPr=i(we),j5=n(we,"LI",{});var zNe=s(j5);y4e=n(zNe,"STRONG",{});var M9t=s(y4e);$Pr=r(M9t,"xlm-roberta"),M9t.forEach(t),kPr=r(zNe," \u2014 "),dK=n(zNe,"A",{href:!0});var E9t=s(dK);SPr=r(E9t,"FlaxXLMRobertaForMaskedLM"),E9t.forEach(t),RPr=r(zNe," (XLM-RoBERTa model)"),zNe.forEach(t),we.forEach(t),PPr=i(Ql),T(D5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),IDe=i(f),jc=n(f,"H2",{class:!0});var VOe=s(jc);G5=n(VOe,"A",{id:!0,class:!0,href:!0});var C9t=s(G5);L4e=n(C9t,"SPAN",{});var w9t=s(L4e);T(Z9.$$.fragment,w9t),w9t.forEach(t),C9t.forEach(t),BPr=i(VOe),x4e=n(VOe,"SPAN",{});var A9t=s(x4e);IPr=r(A9t,"FlaxAutoModelForMaskedLM"),A9t.forEach(t),VOe.forEach(t),NDe=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(ex.$$.fragment,Hl),NPr=i(Hl),Dc=n(Hl,"P",{});var _oe=s(Dc);qPr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cK=n(_oe,"A",{href:!0});var y9t=s(cK);jPr=r(y9t,"from_pretrained()"),y9t.forEach(t),DPr=r(_oe," class method or the "),fK=n(_oe,"A",{href:!0});var L9t=s(fK);GPr=r(L9t,"from_config()"),L9t.forEach(t),OPr=r(_oe,` class
method.`),_oe.forEach(t),VPr=i(Hl),ox=n(Hl,"P",{});var XOe=s(ox);XPr=r(XOe,"This class cannot be instantiated directly using "),$4e=n(XOe,"CODE",{});var x9t=s($4e);zPr=r(x9t,"__init__()"),x9t.forEach(t),WPr=r(XOe," (throws an error)."),XOe.forEach(t),QPr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var bA=s(Xt);T(rx.$$.fragment,bA),HPr=i(bA),k4e=n(bA,"P",{});var $9t=s(k4e);UPr=r($9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$9t.forEach(t),JPr=i(bA),Gc=n(bA,"P",{});var uoe=s(Gc);YPr=r(uoe,`Note:
Loading a model from its configuration file does `),S4e=n(uoe,"STRONG",{});var k9t=s(S4e);KPr=r(k9t,"not"),k9t.forEach(t),ZPr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=n(uoe,"A",{href:!0});var S9t=s(mK);eBr=r(S9t,"from_pretrained()"),S9t.forEach(t),oBr=r(uoe," to load the model weights."),uoe.forEach(t),rBr=i(bA),T(O5.$$.fragment,bA),bA.forEach(t),tBr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(tx.$$.fragment,Ul),aBr=i(Ul),R4e=n(Ul,"P",{});var R9t=s(R4e);nBr=r(R9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),R9t.forEach(t),sBr=i(Ul),un=n(Ul,"P",{});var vA=s(un);lBr=r(vA,"The model class to instantiate is selected based on the "),P4e=n(vA,"CODE",{});var P9t=s(P4e);iBr=r(P9t,"model_type"),P9t.forEach(t),dBr=r(vA,` property of the config object (either
passed as an argument or loaded from `),B4e=n(vA,"CODE",{});var B9t=s(B4e);cBr=r(B9t,"pretrained_model_name_or_path"),B9t.forEach(t),fBr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=n(vA,"CODE",{});var I9t=s(I4e);mBr=r(I9t,"pretrained_model_name_or_path"),I9t.forEach(t),gBr=r(vA,":"),vA.forEach(t),hBr=i(Ul),$e=n(Ul,"UL",{});var qe=s($e);V5=n(qe,"LI",{});var WNe=s(V5);N4e=n(WNe,"STRONG",{});var N9t=s(N4e);pBr=r(N9t,"albert"),N9t.forEach(t),_Br=r(WNe," \u2014 "),gK=n(WNe,"A",{href:!0});var q9t=s(gK);uBr=r(q9t,"FlaxAlbertForMaskedLM"),q9t.forEach(t),bBr=r(WNe," (ALBERT model)"),WNe.forEach(t),vBr=i(qe),X5=n(qe,"LI",{});var QNe=s(X5);q4e=n(QNe,"STRONG",{});var j9t=s(q4e);FBr=r(j9t,"bart"),j9t.forEach(t),TBr=r(QNe," \u2014 "),hK=n(QNe,"A",{href:!0});var D9t=s(hK);MBr=r(D9t,"FlaxBartForConditionalGeneration"),D9t.forEach(t),EBr=r(QNe," (BART model)"),QNe.forEach(t),CBr=i(qe),z5=n(qe,"LI",{});var HNe=s(z5);j4e=n(HNe,"STRONG",{});var G9t=s(j4e);wBr=r(G9t,"bert"),G9t.forEach(t),ABr=r(HNe," \u2014 "),pK=n(HNe,"A",{href:!0});var O9t=s(pK);yBr=r(O9t,"FlaxBertForMaskedLM"),O9t.forEach(t),LBr=r(HNe," (BERT model)"),HNe.forEach(t),xBr=i(qe),W5=n(qe,"LI",{});var UNe=s(W5);D4e=n(UNe,"STRONG",{});var V9t=s(D4e);$Br=r(V9t,"big_bird"),V9t.forEach(t),kBr=r(UNe," \u2014 "),_K=n(UNe,"A",{href:!0});var X9t=s(_K);SBr=r(X9t,"FlaxBigBirdForMaskedLM"),X9t.forEach(t),RBr=r(UNe," (BigBird model)"),UNe.forEach(t),PBr=i(qe),Q5=n(qe,"LI",{});var JNe=s(Q5);G4e=n(JNe,"STRONG",{});var z9t=s(G4e);BBr=r(z9t,"distilbert"),z9t.forEach(t),IBr=r(JNe," \u2014 "),uK=n(JNe,"A",{href:!0});var W9t=s(uK);NBr=r(W9t,"FlaxDistilBertForMaskedLM"),W9t.forEach(t),qBr=r(JNe," (DistilBERT model)"),JNe.forEach(t),jBr=i(qe),H5=n(qe,"LI",{});var YNe=s(H5);O4e=n(YNe,"STRONG",{});var Q9t=s(O4e);DBr=r(Q9t,"electra"),Q9t.forEach(t),GBr=r(YNe," \u2014 "),bK=n(YNe,"A",{href:!0});var H9t=s(bK);OBr=r(H9t,"FlaxElectraForMaskedLM"),H9t.forEach(t),VBr=r(YNe," (ELECTRA model)"),YNe.forEach(t),XBr=i(qe),U5=n(qe,"LI",{});var KNe=s(U5);V4e=n(KNe,"STRONG",{});var U9t=s(V4e);zBr=r(U9t,"mbart"),U9t.forEach(t),WBr=r(KNe," \u2014 "),vK=n(KNe,"A",{href:!0});var J9t=s(vK);QBr=r(J9t,"FlaxMBartForConditionalGeneration"),J9t.forEach(t),HBr=r(KNe," (mBART model)"),KNe.forEach(t),UBr=i(qe),J5=n(qe,"LI",{});var ZNe=s(J5);X4e=n(ZNe,"STRONG",{});var Y9t=s(X4e);JBr=r(Y9t,"roberta"),Y9t.forEach(t),YBr=r(ZNe," \u2014 "),FK=n(ZNe,"A",{href:!0});var K9t=s(FK);KBr=r(K9t,"FlaxRobertaForMaskedLM"),K9t.forEach(t),ZBr=r(ZNe," (RoBERTa model)"),ZNe.forEach(t),eIr=i(qe),Y5=n(qe,"LI",{});var eqe=s(Y5);z4e=n(eqe,"STRONG",{});var Z9t=s(z4e);oIr=r(Z9t,"roformer"),Z9t.forEach(t),rIr=r(eqe," \u2014 "),TK=n(eqe,"A",{href:!0});var ext=s(TK);tIr=r(ext,"FlaxRoFormerForMaskedLM"),ext.forEach(t),aIr=r(eqe," (RoFormer model)"),eqe.forEach(t),nIr=i(qe),K5=n(qe,"LI",{});var oqe=s(K5);W4e=n(oqe,"STRONG",{});var oxt=s(W4e);sIr=r(oxt,"xlm-roberta"),oxt.forEach(t),lIr=r(oqe," \u2014 "),MK=n(oqe,"A",{href:!0});var rxt=s(MK);iIr=r(rxt,"FlaxXLMRobertaForMaskedLM"),rxt.forEach(t),dIr=r(oqe," (XLM-RoBERTa model)"),oqe.forEach(t),qe.forEach(t),cIr=i(Ul),T(Z5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),qDe=i(f),Oc=n(f,"H2",{class:!0});var zOe=s(Oc);e3=n(zOe,"A",{id:!0,class:!0,href:!0});var txt=s(e3);Q4e=n(txt,"SPAN",{});var axt=s(Q4e);T(ax.$$.fragment,axt),axt.forEach(t),txt.forEach(t),fIr=i(zOe),H4e=n(zOe,"SPAN",{});var nxt=s(H4e);mIr=r(nxt,"FlaxAutoModelForSeq2SeqLM"),nxt.forEach(t),zOe.forEach(t),jDe=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(nx.$$.fragment,Jl),gIr=i(Jl),Vc=n(Jl,"P",{});var boe=s(Vc);hIr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EK=n(boe,"A",{href:!0});var sxt=s(EK);pIr=r(sxt,"from_pretrained()"),sxt.forEach(t),_Ir=r(boe," class method or the "),CK=n(boe,"A",{href:!0});var lxt=s(CK);uIr=r(lxt,"from_config()"),lxt.forEach(t),bIr=r(boe,` class
method.`),boe.forEach(t),vIr=i(Jl),sx=n(Jl,"P",{});var WOe=s(sx);FIr=r(WOe,"This class cannot be instantiated directly using "),U4e=n(WOe,"CODE",{});var ixt=s(U4e);TIr=r(ixt,"__init__()"),ixt.forEach(t),MIr=r(WOe," (throws an error)."),WOe.forEach(t),EIr=i(Jl),zt=n(Jl,"DIV",{class:!0});var FA=s(zt);T(lx.$$.fragment,FA),CIr=i(FA),J4e=n(FA,"P",{});var dxt=s(J4e);wIr=r(dxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dxt.forEach(t),AIr=i(FA),Xc=n(FA,"P",{});var voe=s(Xc);yIr=r(voe,`Note:
Loading a model from its configuration file does `),Y4e=n(voe,"STRONG",{});var cxt=s(Y4e);LIr=r(cxt,"not"),cxt.forEach(t),xIr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(voe,"A",{href:!0});var fxt=s(wK);$Ir=r(fxt,"from_pretrained()"),fxt.forEach(t),kIr=r(voe," to load the model weights."),voe.forEach(t),SIr=i(FA),T(o3.$$.fragment,FA),FA.forEach(t),RIr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(ix.$$.fragment,Yl),PIr=i(Yl),K4e=n(Yl,"P",{});var mxt=s(K4e);BIr=r(mxt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mxt.forEach(t),IIr=i(Yl),bn=n(Yl,"P",{});var TA=s(bn);NIr=r(TA,"The model class to instantiate is selected based on the "),Z4e=n(TA,"CODE",{});var gxt=s(Z4e);qIr=r(gxt,"model_type"),gxt.forEach(t),jIr=r(TA,` property of the config object (either
passed as an argument or loaded from `),eEe=n(TA,"CODE",{});var hxt=s(eEe);DIr=r(hxt,"pretrained_model_name_or_path"),hxt.forEach(t),GIr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=n(TA,"CODE",{});var pxt=s(oEe);OIr=r(pxt,"pretrained_model_name_or_path"),pxt.forEach(t),VIr=r(TA,":"),TA.forEach(t),XIr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);r3=n(ze,"LI",{});var rqe=s(r3);rEe=n(rqe,"STRONG",{});var _xt=s(rEe);zIr=r(_xt,"bart"),_xt.forEach(t),WIr=r(rqe," \u2014 "),AK=n(rqe,"A",{href:!0});var uxt=s(AK);QIr=r(uxt,"FlaxBartForConditionalGeneration"),uxt.forEach(t),HIr=r(rqe," (BART model)"),rqe.forEach(t),UIr=i(ze),t3=n(ze,"LI",{});var tqe=s(t3);tEe=n(tqe,"STRONG",{});var bxt=s(tEe);JIr=r(bxt,"blenderbot"),bxt.forEach(t),YIr=r(tqe," \u2014 "),yK=n(tqe,"A",{href:!0});var vxt=s(yK);KIr=r(vxt,"FlaxBlenderbotForConditionalGeneration"),vxt.forEach(t),ZIr=r(tqe," (Blenderbot model)"),tqe.forEach(t),eNr=i(ze),a3=n(ze,"LI",{});var aqe=s(a3);aEe=n(aqe,"STRONG",{});var Fxt=s(aEe);oNr=r(Fxt,"blenderbot-small"),Fxt.forEach(t),rNr=r(aqe," \u2014 "),LK=n(aqe,"A",{href:!0});var Txt=s(LK);tNr=r(Txt,"FlaxBlenderbotSmallForConditionalGeneration"),Txt.forEach(t),aNr=r(aqe," (BlenderbotSmall model)"),aqe.forEach(t),nNr=i(ze),n3=n(ze,"LI",{});var nqe=s(n3);nEe=n(nqe,"STRONG",{});var Mxt=s(nEe);sNr=r(Mxt,"encoder-decoder"),Mxt.forEach(t),lNr=r(nqe," \u2014 "),xK=n(nqe,"A",{href:!0});var Ext=s(xK);iNr=r(Ext,"FlaxEncoderDecoderModel"),Ext.forEach(t),dNr=r(nqe," (Encoder decoder model)"),nqe.forEach(t),cNr=i(ze),s3=n(ze,"LI",{});var sqe=s(s3);sEe=n(sqe,"STRONG",{});var Cxt=s(sEe);fNr=r(Cxt,"marian"),Cxt.forEach(t),mNr=r(sqe," \u2014 "),$K=n(sqe,"A",{href:!0});var wxt=s($K);gNr=r(wxt,"FlaxMarianMTModel"),wxt.forEach(t),hNr=r(sqe," (Marian model)"),sqe.forEach(t),pNr=i(ze),l3=n(ze,"LI",{});var lqe=s(l3);lEe=n(lqe,"STRONG",{});var Axt=s(lEe);_Nr=r(Axt,"mbart"),Axt.forEach(t),uNr=r(lqe," \u2014 "),kK=n(lqe,"A",{href:!0});var yxt=s(kK);bNr=r(yxt,"FlaxMBartForConditionalGeneration"),yxt.forEach(t),vNr=r(lqe," (mBART model)"),lqe.forEach(t),FNr=i(ze),i3=n(ze,"LI",{});var iqe=s(i3);iEe=n(iqe,"STRONG",{});var Lxt=s(iEe);TNr=r(Lxt,"mt5"),Lxt.forEach(t),MNr=r(iqe," \u2014 "),SK=n(iqe,"A",{href:!0});var xxt=s(SK);ENr=r(xxt,"FlaxMT5ForConditionalGeneration"),xxt.forEach(t),CNr=r(iqe," (MT5 model)"),iqe.forEach(t),wNr=i(ze),d3=n(ze,"LI",{});var dqe=s(d3);dEe=n(dqe,"STRONG",{});var $xt=s(dEe);ANr=r($xt,"pegasus"),$xt.forEach(t),yNr=r(dqe," \u2014 "),RK=n(dqe,"A",{href:!0});var kxt=s(RK);LNr=r(kxt,"FlaxPegasusForConditionalGeneration"),kxt.forEach(t),xNr=r(dqe," (Pegasus model)"),dqe.forEach(t),$Nr=i(ze),c3=n(ze,"LI",{});var cqe=s(c3);cEe=n(cqe,"STRONG",{});var Sxt=s(cEe);kNr=r(Sxt,"t5"),Sxt.forEach(t),SNr=r(cqe," \u2014 "),PK=n(cqe,"A",{href:!0});var Rxt=s(PK);RNr=r(Rxt,"FlaxT5ForConditionalGeneration"),Rxt.forEach(t),PNr=r(cqe," (T5 model)"),cqe.forEach(t),ze.forEach(t),BNr=i(Yl),T(f3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),DDe=i(f),zc=n(f,"H2",{class:!0});var QOe=s(zc);m3=n(QOe,"A",{id:!0,class:!0,href:!0});var Pxt=s(m3);fEe=n(Pxt,"SPAN",{});var Bxt=s(fEe);T(dx.$$.fragment,Bxt),Bxt.forEach(t),Pxt.forEach(t),INr=i(QOe),mEe=n(QOe,"SPAN",{});var Ixt=s(mEe);NNr=r(Ixt,"FlaxAutoModelForSequenceClassification"),Ixt.forEach(t),QOe.forEach(t),GDe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(cx.$$.fragment,Kl),qNr=i(Kl),Wc=n(Kl,"P",{});var Foe=s(Wc);jNr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BK=n(Foe,"A",{href:!0});var Nxt=s(BK);DNr=r(Nxt,"from_pretrained()"),Nxt.forEach(t),GNr=r(Foe," class method or the "),IK=n(Foe,"A",{href:!0});var qxt=s(IK);ONr=r(qxt,"from_config()"),qxt.forEach(t),VNr=r(Foe,` class
method.`),Foe.forEach(t),XNr=i(Kl),fx=n(Kl,"P",{});var HOe=s(fx);zNr=r(HOe,"This class cannot be instantiated directly using "),gEe=n(HOe,"CODE",{});var jxt=s(gEe);WNr=r(jxt,"__init__()"),jxt.forEach(t),QNr=r(HOe," (throws an error)."),HOe.forEach(t),HNr=i(Kl),Wt=n(Kl,"DIV",{class:!0});var MA=s(Wt);T(mx.$$.fragment,MA),UNr=i(MA),hEe=n(MA,"P",{});var Dxt=s(hEe);JNr=r(Dxt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dxt.forEach(t),YNr=i(MA),Qc=n(MA,"P",{});var Toe=s(Qc);KNr=r(Toe,`Note:
Loading a model from its configuration file does `),pEe=n(Toe,"STRONG",{});var Gxt=s(pEe);ZNr=r(Gxt,"not"),Gxt.forEach(t),eqr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=n(Toe,"A",{href:!0});var Oxt=s(NK);oqr=r(Oxt,"from_pretrained()"),Oxt.forEach(t),rqr=r(Toe," to load the model weights."),Toe.forEach(t),tqr=i(MA),T(g3.$$.fragment,MA),MA.forEach(t),aqr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(gx.$$.fragment,Zl),nqr=i(Zl),_Ee=n(Zl,"P",{});var Vxt=s(_Ee);sqr=r(Vxt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vxt.forEach(t),lqr=i(Zl),vn=n(Zl,"P",{});var EA=s(vn);iqr=r(EA,"The model class to instantiate is selected based on the "),uEe=n(EA,"CODE",{});var Xxt=s(uEe);dqr=r(Xxt,"model_type"),Xxt.forEach(t),cqr=r(EA,` property of the config object (either
passed as an argument or loaded from `),bEe=n(EA,"CODE",{});var zxt=s(bEe);fqr=r(zxt,"pretrained_model_name_or_path"),zxt.forEach(t),mqr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=n(EA,"CODE",{});var Wxt=s(vEe);gqr=r(Wxt,"pretrained_model_name_or_path"),Wxt.forEach(t),hqr=r(EA,":"),EA.forEach(t),pqr=i(Zl),ke=n(Zl,"UL",{});var je=s(ke);h3=n(je,"LI",{});var fqe=s(h3);FEe=n(fqe,"STRONG",{});var Qxt=s(FEe);_qr=r(Qxt,"albert"),Qxt.forEach(t),uqr=r(fqe," \u2014 "),qK=n(fqe,"A",{href:!0});var Hxt=s(qK);bqr=r(Hxt,"FlaxAlbertForSequenceClassification"),Hxt.forEach(t),vqr=r(fqe," (ALBERT model)"),fqe.forEach(t),Fqr=i(je),p3=n(je,"LI",{});var mqe=s(p3);TEe=n(mqe,"STRONG",{});var Uxt=s(TEe);Tqr=r(Uxt,"bart"),Uxt.forEach(t),Mqr=r(mqe," \u2014 "),jK=n(mqe,"A",{href:!0});var Jxt=s(jK);Eqr=r(Jxt,"FlaxBartForSequenceClassification"),Jxt.forEach(t),Cqr=r(mqe," (BART model)"),mqe.forEach(t),wqr=i(je),_3=n(je,"LI",{});var gqe=s(_3);MEe=n(gqe,"STRONG",{});var Yxt=s(MEe);Aqr=r(Yxt,"bert"),Yxt.forEach(t),yqr=r(gqe," \u2014 "),DK=n(gqe,"A",{href:!0});var Kxt=s(DK);Lqr=r(Kxt,"FlaxBertForSequenceClassification"),Kxt.forEach(t),xqr=r(gqe," (BERT model)"),gqe.forEach(t),$qr=i(je),u3=n(je,"LI",{});var hqe=s(u3);EEe=n(hqe,"STRONG",{});var Zxt=s(EEe);kqr=r(Zxt,"big_bird"),Zxt.forEach(t),Sqr=r(hqe," \u2014 "),GK=n(hqe,"A",{href:!0});var e$t=s(GK);Rqr=r(e$t,"FlaxBigBirdForSequenceClassification"),e$t.forEach(t),Pqr=r(hqe," (BigBird model)"),hqe.forEach(t),Bqr=i(je),b3=n(je,"LI",{});var pqe=s(b3);CEe=n(pqe,"STRONG",{});var o$t=s(CEe);Iqr=r(o$t,"distilbert"),o$t.forEach(t),Nqr=r(pqe," \u2014 "),OK=n(pqe,"A",{href:!0});var r$t=s(OK);qqr=r(r$t,"FlaxDistilBertForSequenceClassification"),r$t.forEach(t),jqr=r(pqe," (DistilBERT model)"),pqe.forEach(t),Dqr=i(je),v3=n(je,"LI",{});var _qe=s(v3);wEe=n(_qe,"STRONG",{});var t$t=s(wEe);Gqr=r(t$t,"electra"),t$t.forEach(t),Oqr=r(_qe," \u2014 "),VK=n(_qe,"A",{href:!0});var a$t=s(VK);Vqr=r(a$t,"FlaxElectraForSequenceClassification"),a$t.forEach(t),Xqr=r(_qe," (ELECTRA model)"),_qe.forEach(t),zqr=i(je),F3=n(je,"LI",{});var uqe=s(F3);AEe=n(uqe,"STRONG",{});var n$t=s(AEe);Wqr=r(n$t,"mbart"),n$t.forEach(t),Qqr=r(uqe," \u2014 "),XK=n(uqe,"A",{href:!0});var s$t=s(XK);Hqr=r(s$t,"FlaxMBartForSequenceClassification"),s$t.forEach(t),Uqr=r(uqe," (mBART model)"),uqe.forEach(t),Jqr=i(je),T3=n(je,"LI",{});var bqe=s(T3);yEe=n(bqe,"STRONG",{});var l$t=s(yEe);Yqr=r(l$t,"roberta"),l$t.forEach(t),Kqr=r(bqe," \u2014 "),zK=n(bqe,"A",{href:!0});var i$t=s(zK);Zqr=r(i$t,"FlaxRobertaForSequenceClassification"),i$t.forEach(t),ejr=r(bqe," (RoBERTa model)"),bqe.forEach(t),ojr=i(je),M3=n(je,"LI",{});var vqe=s(M3);LEe=n(vqe,"STRONG",{});var d$t=s(LEe);rjr=r(d$t,"roformer"),d$t.forEach(t),tjr=r(vqe," \u2014 "),WK=n(vqe,"A",{href:!0});var c$t=s(WK);ajr=r(c$t,"FlaxRoFormerForSequenceClassification"),c$t.forEach(t),njr=r(vqe," (RoFormer model)"),vqe.forEach(t),sjr=i(je),E3=n(je,"LI",{});var Fqe=s(E3);xEe=n(Fqe,"STRONG",{});var f$t=s(xEe);ljr=r(f$t,"xlm-roberta"),f$t.forEach(t),ijr=r(Fqe," \u2014 "),QK=n(Fqe,"A",{href:!0});var m$t=s(QK);djr=r(m$t,"FlaxXLMRobertaForSequenceClassification"),m$t.forEach(t),cjr=r(Fqe," (XLM-RoBERTa model)"),Fqe.forEach(t),je.forEach(t),fjr=i(Zl),T(C3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),ODe=i(f),Hc=n(f,"H2",{class:!0});var UOe=s(Hc);w3=n(UOe,"A",{id:!0,class:!0,href:!0});var g$t=s(w3);$Ee=n(g$t,"SPAN",{});var h$t=s($Ee);T(hx.$$.fragment,h$t),h$t.forEach(t),g$t.forEach(t),mjr=i(UOe),kEe=n(UOe,"SPAN",{});var p$t=s(kEe);gjr=r(p$t,"FlaxAutoModelForQuestionAnswering"),p$t.forEach(t),UOe.forEach(t),VDe=i(f),ur=n(f,"DIV",{class:!0});var ei=s(ur);T(px.$$.fragment,ei),hjr=i(ei),Uc=n(ei,"P",{});var Moe=s(Uc);pjr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HK=n(Moe,"A",{href:!0});var _$t=s(HK);_jr=r(_$t,"from_pretrained()"),_$t.forEach(t),ujr=r(Moe," class method or the "),UK=n(Moe,"A",{href:!0});var u$t=s(UK);bjr=r(u$t,"from_config()"),u$t.forEach(t),vjr=r(Moe,` class
method.`),Moe.forEach(t),Fjr=i(ei),_x=n(ei,"P",{});var JOe=s(_x);Tjr=r(JOe,"This class cannot be instantiated directly using "),SEe=n(JOe,"CODE",{});var b$t=s(SEe);Mjr=r(b$t,"__init__()"),b$t.forEach(t),Ejr=r(JOe," (throws an error)."),JOe.forEach(t),Cjr=i(ei),Qt=n(ei,"DIV",{class:!0});var CA=s(Qt);T(ux.$$.fragment,CA),wjr=i(CA),REe=n(CA,"P",{});var v$t=s(REe);Ajr=r(v$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),v$t.forEach(t),yjr=i(CA),Jc=n(CA,"P",{});var Eoe=s(Jc);Ljr=r(Eoe,`Note:
Loading a model from its configuration file does `),PEe=n(Eoe,"STRONG",{});var F$t=s(PEe);xjr=r(F$t,"not"),F$t.forEach(t),$jr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(Eoe,"A",{href:!0});var T$t=s(JK);kjr=r(T$t,"from_pretrained()"),T$t.forEach(t),Sjr=r(Eoe," to load the model weights."),Eoe.forEach(t),Rjr=i(CA),T(A3.$$.fragment,CA),CA.forEach(t),Pjr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(bx.$$.fragment,oi),Bjr=i(oi),BEe=n(oi,"P",{});var M$t=s(BEe);Ijr=r(M$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),M$t.forEach(t),Njr=i(oi),Fn=n(oi,"P",{});var wA=s(Fn);qjr=r(wA,"The model class to instantiate is selected based on the "),IEe=n(wA,"CODE",{});var E$t=s(IEe);jjr=r(E$t,"model_type"),E$t.forEach(t),Djr=r(wA,` property of the config object (either
passed as an argument or loaded from `),NEe=n(wA,"CODE",{});var C$t=s(NEe);Gjr=r(C$t,"pretrained_model_name_or_path"),C$t.forEach(t),Ojr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=n(wA,"CODE",{});var w$t=s(qEe);Vjr=r(w$t,"pretrained_model_name_or_path"),w$t.forEach(t),Xjr=r(wA,":"),wA.forEach(t),zjr=i(oi),Se=n(oi,"UL",{});var De=s(Se);y3=n(De,"LI",{});var Tqe=s(y3);jEe=n(Tqe,"STRONG",{});var A$t=s(jEe);Wjr=r(A$t,"albert"),A$t.forEach(t),Qjr=r(Tqe," \u2014 "),YK=n(Tqe,"A",{href:!0});var y$t=s(YK);Hjr=r(y$t,"FlaxAlbertForQuestionAnswering"),y$t.forEach(t),Ujr=r(Tqe," (ALBERT model)"),Tqe.forEach(t),Jjr=i(De),L3=n(De,"LI",{});var Mqe=s(L3);DEe=n(Mqe,"STRONG",{});var L$t=s(DEe);Yjr=r(L$t,"bart"),L$t.forEach(t),Kjr=r(Mqe," \u2014 "),KK=n(Mqe,"A",{href:!0});var x$t=s(KK);Zjr=r(x$t,"FlaxBartForQuestionAnswering"),x$t.forEach(t),eDr=r(Mqe," (BART model)"),Mqe.forEach(t),oDr=i(De),x3=n(De,"LI",{});var Eqe=s(x3);GEe=n(Eqe,"STRONG",{});var $$t=s(GEe);rDr=r($$t,"bert"),$$t.forEach(t),tDr=r(Eqe," \u2014 "),ZK=n(Eqe,"A",{href:!0});var k$t=s(ZK);aDr=r(k$t,"FlaxBertForQuestionAnswering"),k$t.forEach(t),nDr=r(Eqe," (BERT model)"),Eqe.forEach(t),sDr=i(De),$3=n(De,"LI",{});var Cqe=s($3);OEe=n(Cqe,"STRONG",{});var S$t=s(OEe);lDr=r(S$t,"big_bird"),S$t.forEach(t),iDr=r(Cqe," \u2014 "),eZ=n(Cqe,"A",{href:!0});var R$t=s(eZ);dDr=r(R$t,"FlaxBigBirdForQuestionAnswering"),R$t.forEach(t),cDr=r(Cqe," (BigBird model)"),Cqe.forEach(t),fDr=i(De),k3=n(De,"LI",{});var wqe=s(k3);VEe=n(wqe,"STRONG",{});var P$t=s(VEe);mDr=r(P$t,"distilbert"),P$t.forEach(t),gDr=r(wqe," \u2014 "),oZ=n(wqe,"A",{href:!0});var B$t=s(oZ);hDr=r(B$t,"FlaxDistilBertForQuestionAnswering"),B$t.forEach(t),pDr=r(wqe," (DistilBERT model)"),wqe.forEach(t),_Dr=i(De),S3=n(De,"LI",{});var Aqe=s(S3);XEe=n(Aqe,"STRONG",{});var I$t=s(XEe);uDr=r(I$t,"electra"),I$t.forEach(t),bDr=r(Aqe," \u2014 "),rZ=n(Aqe,"A",{href:!0});var N$t=s(rZ);vDr=r(N$t,"FlaxElectraForQuestionAnswering"),N$t.forEach(t),FDr=r(Aqe," (ELECTRA model)"),Aqe.forEach(t),TDr=i(De),R3=n(De,"LI",{});var yqe=s(R3);zEe=n(yqe,"STRONG",{});var q$t=s(zEe);MDr=r(q$t,"mbart"),q$t.forEach(t),EDr=r(yqe," \u2014 "),tZ=n(yqe,"A",{href:!0});var j$t=s(tZ);CDr=r(j$t,"FlaxMBartForQuestionAnswering"),j$t.forEach(t),wDr=r(yqe," (mBART model)"),yqe.forEach(t),ADr=i(De),P3=n(De,"LI",{});var Lqe=s(P3);WEe=n(Lqe,"STRONG",{});var D$t=s(WEe);yDr=r(D$t,"roberta"),D$t.forEach(t),LDr=r(Lqe," \u2014 "),aZ=n(Lqe,"A",{href:!0});var G$t=s(aZ);xDr=r(G$t,"FlaxRobertaForQuestionAnswering"),G$t.forEach(t),$Dr=r(Lqe," (RoBERTa model)"),Lqe.forEach(t),kDr=i(De),B3=n(De,"LI",{});var xqe=s(B3);QEe=n(xqe,"STRONG",{});var O$t=s(QEe);SDr=r(O$t,"roformer"),O$t.forEach(t),RDr=r(xqe," \u2014 "),nZ=n(xqe,"A",{href:!0});var V$t=s(nZ);PDr=r(V$t,"FlaxRoFormerForQuestionAnswering"),V$t.forEach(t),BDr=r(xqe," (RoFormer model)"),xqe.forEach(t),IDr=i(De),I3=n(De,"LI",{});var $qe=s(I3);HEe=n($qe,"STRONG",{});var X$t=s(HEe);NDr=r(X$t,"xlm-roberta"),X$t.forEach(t),qDr=r($qe," \u2014 "),sZ=n($qe,"A",{href:!0});var z$t=s(sZ);jDr=r(z$t,"FlaxXLMRobertaForQuestionAnswering"),z$t.forEach(t),DDr=r($qe," (XLM-RoBERTa model)"),$qe.forEach(t),De.forEach(t),GDr=i(oi),T(N3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),XDe=i(f),Yc=n(f,"H2",{class:!0});var YOe=s(Yc);q3=n(YOe,"A",{id:!0,class:!0,href:!0});var W$t=s(q3);UEe=n(W$t,"SPAN",{});var Q$t=s(UEe);T(vx.$$.fragment,Q$t),Q$t.forEach(t),W$t.forEach(t),ODr=i(YOe),JEe=n(YOe,"SPAN",{});var H$t=s(JEe);VDr=r(H$t,"FlaxAutoModelForTokenClassification"),H$t.forEach(t),YOe.forEach(t),zDe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(Fx.$$.fragment,ri),XDr=i(ri),Kc=n(ri,"P",{});var Coe=s(Kc);zDr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lZ=n(Coe,"A",{href:!0});var U$t=s(lZ);WDr=r(U$t,"from_pretrained()"),U$t.forEach(t),QDr=r(Coe," class method or the "),iZ=n(Coe,"A",{href:!0});var J$t=s(iZ);HDr=r(J$t,"from_config()"),J$t.forEach(t),UDr=r(Coe,` class
method.`),Coe.forEach(t),JDr=i(ri),Tx=n(ri,"P",{});var KOe=s(Tx);YDr=r(KOe,"This class cannot be instantiated directly using "),YEe=n(KOe,"CODE",{});var Y$t=s(YEe);KDr=r(Y$t,"__init__()"),Y$t.forEach(t),ZDr=r(KOe," (throws an error)."),KOe.forEach(t),eGr=i(ri),Ht=n(ri,"DIV",{class:!0});var AA=s(Ht);T(Mx.$$.fragment,AA),oGr=i(AA),KEe=n(AA,"P",{});var K$t=s(KEe);rGr=r(K$t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),K$t.forEach(t),tGr=i(AA),Zc=n(AA,"P",{});var woe=s(Zc);aGr=r(woe,`Note:
Loading a model from its configuration file does `),ZEe=n(woe,"STRONG",{});var Z$t=s(ZEe);nGr=r(Z$t,"not"),Z$t.forEach(t),sGr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=n(woe,"A",{href:!0});var ekt=s(dZ);lGr=r(ekt,"from_pretrained()"),ekt.forEach(t),iGr=r(woe," to load the model weights."),woe.forEach(t),dGr=i(AA),T(j3.$$.fragment,AA),AA.forEach(t),cGr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(Ex.$$.fragment,ti),fGr=i(ti),eCe=n(ti,"P",{});var okt=s(eCe);mGr=r(okt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),okt.forEach(t),gGr=i(ti),Tn=n(ti,"P",{});var yA=s(Tn);hGr=r(yA,"The model class to instantiate is selected based on the "),oCe=n(yA,"CODE",{});var rkt=s(oCe);pGr=r(rkt,"model_type"),rkt.forEach(t),_Gr=r(yA,` property of the config object (either
passed as an argument or loaded from `),rCe=n(yA,"CODE",{});var tkt=s(rCe);uGr=r(tkt,"pretrained_model_name_or_path"),tkt.forEach(t),bGr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=n(yA,"CODE",{});var akt=s(tCe);vGr=r(akt,"pretrained_model_name_or_path"),akt.forEach(t),FGr=r(yA,":"),yA.forEach(t),TGr=i(ti),Oe=n(ti,"UL",{});var Fo=s(Oe);D3=n(Fo,"LI",{});var kqe=s(D3);aCe=n(kqe,"STRONG",{});var nkt=s(aCe);MGr=r(nkt,"albert"),nkt.forEach(t),EGr=r(kqe," \u2014 "),cZ=n(kqe,"A",{href:!0});var skt=s(cZ);CGr=r(skt,"FlaxAlbertForTokenClassification"),skt.forEach(t),wGr=r(kqe," (ALBERT model)"),kqe.forEach(t),AGr=i(Fo),G3=n(Fo,"LI",{});var Sqe=s(G3);nCe=n(Sqe,"STRONG",{});var lkt=s(nCe);yGr=r(lkt,"bert"),lkt.forEach(t),LGr=r(Sqe," \u2014 "),fZ=n(Sqe,"A",{href:!0});var ikt=s(fZ);xGr=r(ikt,"FlaxBertForTokenClassification"),ikt.forEach(t),$Gr=r(Sqe," (BERT model)"),Sqe.forEach(t),kGr=i(Fo),O3=n(Fo,"LI",{});var Rqe=s(O3);sCe=n(Rqe,"STRONG",{});var dkt=s(sCe);SGr=r(dkt,"big_bird"),dkt.forEach(t),RGr=r(Rqe," \u2014 "),mZ=n(Rqe,"A",{href:!0});var ckt=s(mZ);PGr=r(ckt,"FlaxBigBirdForTokenClassification"),ckt.forEach(t),BGr=r(Rqe," (BigBird model)"),Rqe.forEach(t),IGr=i(Fo),V3=n(Fo,"LI",{});var Pqe=s(V3);lCe=n(Pqe,"STRONG",{});var fkt=s(lCe);NGr=r(fkt,"distilbert"),fkt.forEach(t),qGr=r(Pqe," \u2014 "),gZ=n(Pqe,"A",{href:!0});var mkt=s(gZ);jGr=r(mkt,"FlaxDistilBertForTokenClassification"),mkt.forEach(t),DGr=r(Pqe," (DistilBERT model)"),Pqe.forEach(t),GGr=i(Fo),X3=n(Fo,"LI",{});var Bqe=s(X3);iCe=n(Bqe,"STRONG",{});var gkt=s(iCe);OGr=r(gkt,"electra"),gkt.forEach(t),VGr=r(Bqe," \u2014 "),hZ=n(Bqe,"A",{href:!0});var hkt=s(hZ);XGr=r(hkt,"FlaxElectraForTokenClassification"),hkt.forEach(t),zGr=r(Bqe," (ELECTRA model)"),Bqe.forEach(t),WGr=i(Fo),z3=n(Fo,"LI",{});var Iqe=s(z3);dCe=n(Iqe,"STRONG",{});var pkt=s(dCe);QGr=r(pkt,"roberta"),pkt.forEach(t),HGr=r(Iqe," \u2014 "),pZ=n(Iqe,"A",{href:!0});var _kt=s(pZ);UGr=r(_kt,"FlaxRobertaForTokenClassification"),_kt.forEach(t),JGr=r(Iqe," (RoBERTa model)"),Iqe.forEach(t),YGr=i(Fo),W3=n(Fo,"LI",{});var Nqe=s(W3);cCe=n(Nqe,"STRONG",{});var ukt=s(cCe);KGr=r(ukt,"roformer"),ukt.forEach(t),ZGr=r(Nqe," \u2014 "),_Z=n(Nqe,"A",{href:!0});var bkt=s(_Z);eOr=r(bkt,"FlaxRoFormerForTokenClassification"),bkt.forEach(t),oOr=r(Nqe," (RoFormer model)"),Nqe.forEach(t),rOr=i(Fo),Q3=n(Fo,"LI",{});var qqe=s(Q3);fCe=n(qqe,"STRONG",{});var vkt=s(fCe);tOr=r(vkt,"xlm-roberta"),vkt.forEach(t),aOr=r(qqe," \u2014 "),uZ=n(qqe,"A",{href:!0});var Fkt=s(uZ);nOr=r(Fkt,"FlaxXLMRobertaForTokenClassification"),Fkt.forEach(t),sOr=r(qqe," (XLM-RoBERTa model)"),qqe.forEach(t),Fo.forEach(t),lOr=i(ti),T(H3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),WDe=i(f),ef=n(f,"H2",{class:!0});var ZOe=s(ef);U3=n(ZOe,"A",{id:!0,class:!0,href:!0});var Tkt=s(U3);mCe=n(Tkt,"SPAN",{});var Mkt=s(mCe);T(Cx.$$.fragment,Mkt),Mkt.forEach(t),Tkt.forEach(t),iOr=i(ZOe),gCe=n(ZOe,"SPAN",{});var Ekt=s(gCe);dOr=r(Ekt,"FlaxAutoModelForMultipleChoice"),Ekt.forEach(t),ZOe.forEach(t),QDe=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(wx.$$.fragment,ai),cOr=i(ai),of=n(ai,"P",{});var Aoe=s(of);fOr=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bZ=n(Aoe,"A",{href:!0});var Ckt=s(bZ);mOr=r(Ckt,"from_pretrained()"),Ckt.forEach(t),gOr=r(Aoe," class method or the "),vZ=n(Aoe,"A",{href:!0});var wkt=s(vZ);hOr=r(wkt,"from_config()"),wkt.forEach(t),pOr=r(Aoe,` class
method.`),Aoe.forEach(t),_Or=i(ai),Ax=n(ai,"P",{});var eVe=s(Ax);uOr=r(eVe,"This class cannot be instantiated directly using "),hCe=n(eVe,"CODE",{});var Akt=s(hCe);bOr=r(Akt,"__init__()"),Akt.forEach(t),vOr=r(eVe," (throws an error)."),eVe.forEach(t),FOr=i(ai),Ut=n(ai,"DIV",{class:!0});var LA=s(Ut);T(yx.$$.fragment,LA),TOr=i(LA),pCe=n(LA,"P",{});var ykt=s(pCe);MOr=r(ykt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ykt.forEach(t),EOr=i(LA),rf=n(LA,"P",{});var yoe=s(rf);COr=r(yoe,`Note:
Loading a model from its configuration file does `),_Ce=n(yoe,"STRONG",{});var Lkt=s(_Ce);wOr=r(Lkt,"not"),Lkt.forEach(t),AOr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FZ=n(yoe,"A",{href:!0});var xkt=s(FZ);yOr=r(xkt,"from_pretrained()"),xkt.forEach(t),LOr=r(yoe," to load the model weights."),yoe.forEach(t),xOr=i(LA),T(J3.$$.fragment,LA),LA.forEach(t),$Or=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(Lx.$$.fragment,ni),kOr=i(ni),uCe=n(ni,"P",{});var $kt=s(uCe);SOr=r($kt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$kt.forEach(t),ROr=i(ni),Mn=n(ni,"P",{});var xA=s(Mn);POr=r(xA,"The model class to instantiate is selected based on the "),bCe=n(xA,"CODE",{});var kkt=s(bCe);BOr=r(kkt,"model_type"),kkt.forEach(t),IOr=r(xA,` property of the config object (either
passed as an argument or loaded from `),vCe=n(xA,"CODE",{});var Skt=s(vCe);NOr=r(Skt,"pretrained_model_name_or_path"),Skt.forEach(t),qOr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=n(xA,"CODE",{});var Rkt=s(FCe);jOr=r(Rkt,"pretrained_model_name_or_path"),Rkt.forEach(t),DOr=r(xA,":"),xA.forEach(t),GOr=i(ni),Ve=n(ni,"UL",{});var To=s(Ve);Y3=n(To,"LI",{});var jqe=s(Y3);TCe=n(jqe,"STRONG",{});var Pkt=s(TCe);OOr=r(Pkt,"albert"),Pkt.forEach(t),VOr=r(jqe," \u2014 "),TZ=n(jqe,"A",{href:!0});var Bkt=s(TZ);XOr=r(Bkt,"FlaxAlbertForMultipleChoice"),Bkt.forEach(t),zOr=r(jqe," (ALBERT model)"),jqe.forEach(t),WOr=i(To),K3=n(To,"LI",{});var Dqe=s(K3);MCe=n(Dqe,"STRONG",{});var Ikt=s(MCe);QOr=r(Ikt,"bert"),Ikt.forEach(t),HOr=r(Dqe," \u2014 "),MZ=n(Dqe,"A",{href:!0});var Nkt=s(MZ);UOr=r(Nkt,"FlaxBertForMultipleChoice"),Nkt.forEach(t),JOr=r(Dqe," (BERT model)"),Dqe.forEach(t),YOr=i(To),Z3=n(To,"LI",{});var Gqe=s(Z3);ECe=n(Gqe,"STRONG",{});var qkt=s(ECe);KOr=r(qkt,"big_bird"),qkt.forEach(t),ZOr=r(Gqe," \u2014 "),EZ=n(Gqe,"A",{href:!0});var jkt=s(EZ);eVr=r(jkt,"FlaxBigBirdForMultipleChoice"),jkt.forEach(t),oVr=r(Gqe," (BigBird model)"),Gqe.forEach(t),rVr=i(To),e0=n(To,"LI",{});var Oqe=s(e0);CCe=n(Oqe,"STRONG",{});var Dkt=s(CCe);tVr=r(Dkt,"distilbert"),Dkt.forEach(t),aVr=r(Oqe," \u2014 "),CZ=n(Oqe,"A",{href:!0});var Gkt=s(CZ);nVr=r(Gkt,"FlaxDistilBertForMultipleChoice"),Gkt.forEach(t),sVr=r(Oqe," (DistilBERT model)"),Oqe.forEach(t),lVr=i(To),o0=n(To,"LI",{});var Vqe=s(o0);wCe=n(Vqe,"STRONG",{});var Okt=s(wCe);iVr=r(Okt,"electra"),Okt.forEach(t),dVr=r(Vqe," \u2014 "),wZ=n(Vqe,"A",{href:!0});var Vkt=s(wZ);cVr=r(Vkt,"FlaxElectraForMultipleChoice"),Vkt.forEach(t),fVr=r(Vqe," (ELECTRA model)"),Vqe.forEach(t),mVr=i(To),r0=n(To,"LI",{});var Xqe=s(r0);ACe=n(Xqe,"STRONG",{});var Xkt=s(ACe);gVr=r(Xkt,"roberta"),Xkt.forEach(t),hVr=r(Xqe," \u2014 "),AZ=n(Xqe,"A",{href:!0});var zkt=s(AZ);pVr=r(zkt,"FlaxRobertaForMultipleChoice"),zkt.forEach(t),_Vr=r(Xqe," (RoBERTa model)"),Xqe.forEach(t),uVr=i(To),t0=n(To,"LI",{});var zqe=s(t0);yCe=n(zqe,"STRONG",{});var Wkt=s(yCe);bVr=r(Wkt,"roformer"),Wkt.forEach(t),vVr=r(zqe," \u2014 "),yZ=n(zqe,"A",{href:!0});var Qkt=s(yZ);FVr=r(Qkt,"FlaxRoFormerForMultipleChoice"),Qkt.forEach(t),TVr=r(zqe," (RoFormer model)"),zqe.forEach(t),MVr=i(To),a0=n(To,"LI",{});var Wqe=s(a0);LCe=n(Wqe,"STRONG",{});var Hkt=s(LCe);EVr=r(Hkt,"xlm-roberta"),Hkt.forEach(t),CVr=r(Wqe," \u2014 "),LZ=n(Wqe,"A",{href:!0});var Ukt=s(LZ);wVr=r(Ukt,"FlaxXLMRobertaForMultipleChoice"),Ukt.forEach(t),AVr=r(Wqe," (XLM-RoBERTa model)"),Wqe.forEach(t),To.forEach(t),yVr=i(ni),T(n0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),HDe=i(f),tf=n(f,"H2",{class:!0});var oVe=s(tf);s0=n(oVe,"A",{id:!0,class:!0,href:!0});var Jkt=s(s0);xCe=n(Jkt,"SPAN",{});var Ykt=s(xCe);T(xx.$$.fragment,Ykt),Ykt.forEach(t),Jkt.forEach(t),LVr=i(oVe),$Ce=n(oVe,"SPAN",{});var Kkt=s($Ce);xVr=r(Kkt,"FlaxAutoModelForNextSentencePrediction"),Kkt.forEach(t),oVe.forEach(t),UDe=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T($x.$$.fragment,si),$Vr=i(si),af=n(si,"P",{});var Loe=s(af);kVr=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xZ=n(Loe,"A",{href:!0});var Zkt=s(xZ);SVr=r(Zkt,"from_pretrained()"),Zkt.forEach(t),RVr=r(Loe," class method or the "),$Z=n(Loe,"A",{href:!0});var eSt=s($Z);PVr=r(eSt,"from_config()"),eSt.forEach(t),BVr=r(Loe,` class
method.`),Loe.forEach(t),IVr=i(si),kx=n(si,"P",{});var rVe=s(kx);NVr=r(rVe,"This class cannot be instantiated directly using "),kCe=n(rVe,"CODE",{});var oSt=s(kCe);qVr=r(oSt,"__init__()"),oSt.forEach(t),jVr=r(rVe," (throws an error)."),rVe.forEach(t),DVr=i(si),Jt=n(si,"DIV",{class:!0});var $A=s(Jt);T(Sx.$$.fragment,$A),GVr=i($A),SCe=n($A,"P",{});var rSt=s(SCe);OVr=r(rSt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rSt.forEach(t),VVr=i($A),nf=n($A,"P",{});var xoe=s(nf);XVr=r(xoe,`Note:
Loading a model from its configuration file does `),RCe=n(xoe,"STRONG",{});var tSt=s(RCe);zVr=r(tSt,"not"),tSt.forEach(t),WVr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=n(xoe,"A",{href:!0});var aSt=s(kZ);QVr=r(aSt,"from_pretrained()"),aSt.forEach(t),HVr=r(xoe," to load the model weights."),xoe.forEach(t),UVr=i($A),T(l0.$$.fragment,$A),$A.forEach(t),JVr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(Rx.$$.fragment,li),YVr=i(li),PCe=n(li,"P",{});var nSt=s(PCe);KVr=r(nSt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nSt.forEach(t),ZVr=i(li),En=n(li,"P",{});var kA=s(En);eXr=r(kA,"The model class to instantiate is selected based on the "),BCe=n(kA,"CODE",{});var sSt=s(BCe);oXr=r(sSt,"model_type"),sSt.forEach(t),rXr=r(kA,` property of the config object (either
passed as an argument or loaded from `),ICe=n(kA,"CODE",{});var lSt=s(ICe);tXr=r(lSt,"pretrained_model_name_or_path"),lSt.forEach(t),aXr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NCe=n(kA,"CODE",{});var iSt=s(NCe);nXr=r(iSt,"pretrained_model_name_or_path"),iSt.forEach(t),sXr=r(kA,":"),kA.forEach(t),lXr=i(li),qCe=n(li,"UL",{});var dSt=s(qCe);i0=n(dSt,"LI",{});var Qqe=s(i0);jCe=n(Qqe,"STRONG",{});var cSt=s(jCe);iXr=r(cSt,"bert"),cSt.forEach(t),dXr=r(Qqe," \u2014 "),SZ=n(Qqe,"A",{href:!0});var fSt=s(SZ);cXr=r(fSt,"FlaxBertForNextSentencePrediction"),fSt.forEach(t),fXr=r(Qqe," (BERT model)"),Qqe.forEach(t),dSt.forEach(t),mXr=i(li),T(d0.$$.fragment,li),li.forEach(t),si.forEach(t),JDe=i(f),sf=n(f,"H2",{class:!0});var tVe=s(sf);c0=n(tVe,"A",{id:!0,class:!0,href:!0});var mSt=s(c0);DCe=n(mSt,"SPAN",{});var gSt=s(DCe);T(Px.$$.fragment,gSt),gSt.forEach(t),mSt.forEach(t),gXr=i(tVe),GCe=n(tVe,"SPAN",{});var hSt=s(GCe);hXr=r(hSt,"FlaxAutoModelForImageClassification"),hSt.forEach(t),tVe.forEach(t),YDe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T(Bx.$$.fragment,ii),pXr=i(ii),lf=n(ii,"P",{});var $oe=s(lf);_Xr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RZ=n($oe,"A",{href:!0});var pSt=s(RZ);uXr=r(pSt,"from_pretrained()"),pSt.forEach(t),bXr=r($oe," class method or the "),PZ=n($oe,"A",{href:!0});var _St=s(PZ);vXr=r(_St,"from_config()"),_St.forEach(t),FXr=r($oe,` class
method.`),$oe.forEach(t),TXr=i(ii),Ix=n(ii,"P",{});var aVe=s(Ix);MXr=r(aVe,"This class cannot be instantiated directly using "),OCe=n(aVe,"CODE",{});var uSt=s(OCe);EXr=r(uSt,"__init__()"),uSt.forEach(t),CXr=r(aVe," (throws an error)."),aVe.forEach(t),wXr=i(ii),Yt=n(ii,"DIV",{class:!0});var SA=s(Yt);T(Nx.$$.fragment,SA),AXr=i(SA),VCe=n(SA,"P",{});var bSt=s(VCe);yXr=r(bSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bSt.forEach(t),LXr=i(SA),df=n(SA,"P",{});var koe=s(df);xXr=r(koe,`Note:
Loading a model from its configuration file does `),XCe=n(koe,"STRONG",{});var vSt=s(XCe);$Xr=r(vSt,"not"),vSt.forEach(t),kXr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=n(koe,"A",{href:!0});var FSt=s(BZ);SXr=r(FSt,"from_pretrained()"),FSt.forEach(t),RXr=r(koe," to load the model weights."),koe.forEach(t),PXr=i(SA),T(f0.$$.fragment,SA),SA.forEach(t),BXr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(qx.$$.fragment,di),IXr=i(di),zCe=n(di,"P",{});var TSt=s(zCe);NXr=r(TSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),TSt.forEach(t),qXr=i(di),Cn=n(di,"P",{});var RA=s(Cn);jXr=r(RA,"The model class to instantiate is selected based on the "),WCe=n(RA,"CODE",{});var MSt=s(WCe);DXr=r(MSt,"model_type"),MSt.forEach(t),GXr=r(RA,` property of the config object (either
passed as an argument or loaded from `),QCe=n(RA,"CODE",{});var ESt=s(QCe);OXr=r(ESt,"pretrained_model_name_or_path"),ESt.forEach(t),VXr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=n(RA,"CODE",{});var CSt=s(HCe);XXr=r(CSt,"pretrained_model_name_or_path"),CSt.forEach(t),zXr=r(RA,":"),RA.forEach(t),WXr=i(di),jx=n(di,"UL",{});var nVe=s(jx);m0=n(nVe,"LI",{});var Hqe=s(m0);UCe=n(Hqe,"STRONG",{});var wSt=s(UCe);QXr=r(wSt,"beit"),wSt.forEach(t),HXr=r(Hqe," \u2014 "),IZ=n(Hqe,"A",{href:!0});var ASt=s(IZ);UXr=r(ASt,"FlaxBeitForImageClassification"),ASt.forEach(t),JXr=r(Hqe," (BEiT model)"),Hqe.forEach(t),YXr=i(nVe),g0=n(nVe,"LI",{});var Uqe=s(g0);JCe=n(Uqe,"STRONG",{});var ySt=s(JCe);KXr=r(ySt,"vit"),ySt.forEach(t),ZXr=r(Uqe," \u2014 "),NZ=n(Uqe,"A",{href:!0});var LSt=s(NZ);ezr=r(LSt,"FlaxViTForImageClassification"),LSt.forEach(t),ozr=r(Uqe," (ViT model)"),Uqe.forEach(t),nVe.forEach(t),rzr=i(di),T(h0.$$.fragment,di),di.forEach(t),ii.forEach(t),KDe=i(f),cf=n(f,"H2",{class:!0});var sVe=s(cf);p0=n(sVe,"A",{id:!0,class:!0,href:!0});var xSt=s(p0);YCe=n(xSt,"SPAN",{});var $St=s(YCe);T(Dx.$$.fragment,$St),$St.forEach(t),xSt.forEach(t),tzr=i(sVe),KCe=n(sVe,"SPAN",{});var kSt=s(KCe);azr=r(kSt,"FlaxAutoModelForVision2Seq"),kSt.forEach(t),sVe.forEach(t),ZDe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(Gx.$$.fragment,ci),nzr=i(ci),ff=n(ci,"P",{});var Soe=s(ff);szr=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qZ=n(Soe,"A",{href:!0});var SSt=s(qZ);lzr=r(SSt,"from_pretrained()"),SSt.forEach(t),izr=r(Soe," class method or the "),jZ=n(Soe,"A",{href:!0});var RSt=s(jZ);dzr=r(RSt,"from_config()"),RSt.forEach(t),czr=r(Soe,` class
method.`),Soe.forEach(t),fzr=i(ci),Ox=n(ci,"P",{});var lVe=s(Ox);mzr=r(lVe,"This class cannot be instantiated directly using "),ZCe=n(lVe,"CODE",{});var PSt=s(ZCe);gzr=r(PSt,"__init__()"),PSt.forEach(t),hzr=r(lVe," (throws an error)."),lVe.forEach(t),pzr=i(ci),Kt=n(ci,"DIV",{class:!0});var PA=s(Kt);T(Vx.$$.fragment,PA),_zr=i(PA),e5e=n(PA,"P",{});var BSt=s(e5e);uzr=r(BSt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BSt.forEach(t),bzr=i(PA),mf=n(PA,"P",{});var Roe=s(mf);vzr=r(Roe,`Note:
Loading a model from its configuration file does `),o5e=n(Roe,"STRONG",{});var ISt=s(o5e);Fzr=r(ISt,"not"),ISt.forEach(t),Tzr=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=n(Roe,"A",{href:!0});var NSt=s(DZ);Mzr=r(NSt,"from_pretrained()"),NSt.forEach(t),Ezr=r(Roe," to load the model weights."),Roe.forEach(t),Czr=i(PA),T(_0.$$.fragment,PA),PA.forEach(t),wzr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(Xx.$$.fragment,fi),Azr=i(fi),r5e=n(fi,"P",{});var qSt=s(r5e);yzr=r(qSt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qSt.forEach(t),Lzr=i(fi),wn=n(fi,"P",{});var BA=s(wn);xzr=r(BA,"The model class to instantiate is selected based on the "),t5e=n(BA,"CODE",{});var jSt=s(t5e);$zr=r(jSt,"model_type"),jSt.forEach(t),kzr=r(BA,` property of the config object (either
passed as an argument or loaded from `),a5e=n(BA,"CODE",{});var DSt=s(a5e);Szr=r(DSt,"pretrained_model_name_or_path"),DSt.forEach(t),Rzr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=n(BA,"CODE",{});var GSt=s(n5e);Pzr=r(GSt,"pretrained_model_name_or_path"),GSt.forEach(t),Bzr=r(BA,":"),BA.forEach(t),Izr=i(fi),s5e=n(fi,"UL",{});var OSt=s(s5e);u0=n(OSt,"LI",{});var Jqe=s(u0);l5e=n(Jqe,"STRONG",{});var VSt=s(l5e);Nzr=r(VSt,"vision-encoder-decoder"),VSt.forEach(t),qzr=r(Jqe," \u2014 "),GZ=n(Jqe,"A",{href:!0});var XSt=s(GZ);jzr=r(XSt,"FlaxVisionEncoderDecoderModel"),XSt.forEach(t),Dzr=r(Jqe," (Vision Encoder decoder model)"),Jqe.forEach(t),OSt.forEach(t),Gzr=i(fi),T(b0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(HPt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(fk,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(mk,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertConfig"),c(gk,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartConfig"),c(hk,"href","/docs/transformers/pr_17622/en/model_doc/beit#transformers.BeitConfig"),c(pk,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertConfig"),c(_k,"href","/docs/transformers/pr_17622/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(uk,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdConfig"),c(bk,"href","/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(vk,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Fk,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Tk,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertConfig"),c(Mk,"href","/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineConfig"),c(Ek,"href","/docs/transformers/pr_17622/en/model_doc/clip#transformers.CLIPConfig"),c(Ck,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertConfig"),c(wk,"href","/docs/transformers/pr_17622/en/model_doc/convnext#transformers.ConvNextConfig"),c(Ak,"href","/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLConfig"),c(yk,"href","/docs/transformers/pr_17622/en/model_doc/cvt#transformers.CvtConfig"),c(Lk,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(xk,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c($k,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(kk,"href","/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaConfig"),c(Sk,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Rk,"href","/docs/transformers/pr_17622/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Pk,"href","/docs/transformers/pr_17622/en/model_doc/deit#transformers.DeiTConfig"),c(Bk,"href","/docs/transformers/pr_17622/en/model_doc/detr#transformers.DetrConfig"),c(Ik,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Nk,"href","/docs/transformers/pr_17622/en/model_doc/dpr#transformers.DPRConfig"),c(qk,"href","/docs/transformers/pr_17622/en/model_doc/dpt#transformers.DPTConfig"),c(jk,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraConfig"),c(Dk,"href","/docs/transformers/pr_17622/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Gk,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Ok,"href","/docs/transformers/pr_17622/en/model_doc/flava#transformers.FlavaConfig"),c(Vk,"href","/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetConfig"),c(Xk,"href","/docs/transformers/pr_17622/en/model_doc/fsmt#transformers.FSMTConfig"),c(zk,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelConfig"),c(Wk,"href","/docs/transformers/pr_17622/en/model_doc/glpn#transformers.GLPNConfig"),c(Qk,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Config"),c(Hk,"href","/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Uk,"href","/docs/transformers/pr_17622/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Jk,"href","/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJConfig"),c(Yk,"href","/docs/transformers/pr_17622/en/model_doc/hubert#transformers.HubertConfig"),c(Kk,"href","/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertConfig"),c(Zk,"href","/docs/transformers/pr_17622/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(eS,"href","/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(oS,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(rS,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(tS,"href","/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDConfig"),c(aS,"href","/docs/transformers/pr_17622/en/model_doc/levit#transformers.LevitConfig"),c(nS,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerConfig"),c(sS,"href","/docs/transformers/pr_17622/en/model_doc/luke#transformers.LukeConfig"),c(lS,"href","/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.LxmertConfig"),c(iS,"href","/docs/transformers/pr_17622/en/model_doc/m2m_100#transformers.M2M100Config"),c(dS,"href","/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianConfig"),c(cS,"href","/docs/transformers/pr_17622/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(fS,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartConfig"),c(mS,"href","/docs/transformers/pr_17622/en/model_doc/mctct#transformers.MCTCTConfig"),c(gS,"href","/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(hS,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(pS,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetConfig"),c(_S,"href","/docs/transformers/pr_17622/en/model_doc/mt5#transformers.MT5Config"),c(uS,"href","/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(bS,"href","/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(vS,"href","/docs/transformers/pr_17622/en/model_doc/opt#transformers.OPTConfig"),c(FS,"href","/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusConfig"),c(TS,"href","/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverConfig"),c(MS,"href","/docs/transformers/pr_17622/en/model_doc/plbart#transformers.PLBartConfig"),c(ES,"href","/docs/transformers/pr_17622/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(CS,"href","/docs/transformers/pr_17622/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(wS,"href","/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(AS,"href","/docs/transformers/pr_17622/en/model_doc/rag#transformers.RagConfig"),c(yS,"href","/docs/transformers/pr_17622/en/model_doc/realm#transformers.RealmConfig"),c(LS,"href","/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerConfig"),c(xS,"href","/docs/transformers/pr_17622/en/model_doc/regnet#transformers.RegNetConfig"),c($S,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertConfig"),c(kS,"href","/docs/transformers/pr_17622/en/model_doc/resnet#transformers.ResNetConfig"),c(SS,"href","/docs/transformers/pr_17622/en/model_doc/retribert#transformers.RetriBertConfig"),c(RS,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaConfig"),c(PS,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerConfig"),c(BS,"href","/docs/transformers/pr_17622/en/model_doc/segformer#transformers.SegformerConfig"),c(IS,"href","/docs/transformers/pr_17622/en/model_doc/sew#transformers.SEWConfig"),c(NS,"href","/docs/transformers/pr_17622/en/model_doc/sew-d#transformers.SEWDConfig"),c(qS,"href","/docs/transformers/pr_17622/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(jS,"href","/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(DS,"href","/docs/transformers/pr_17622/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(GS,"href","/docs/transformers/pr_17622/en/model_doc/splinter#transformers.SplinterConfig"),c(OS,"href","/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(VS,"href","/docs/transformers/pr_17622/en/model_doc/swin#transformers.SwinConfig"),c(XS,"href","/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5Config"),c(zS,"href","/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasConfig"),c(WS,"href","/docs/transformers/pr_17622/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(QS,"href","/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(HS,"href","/docs/transformers/pr_17622/en/model_doc/trocr#transformers.TrOCRConfig"),c(US,"href","/docs/transformers/pr_17622/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(JS,"href","/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(YS,"href","/docs/transformers/pr_17622/en/model_doc/van#transformers.VanConfig"),c(KS,"href","/docs/transformers/pr_17622/en/model_doc/vilt#transformers.ViltConfig"),c(ZS,"href","/docs/transformers/pr_17622/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(eR,"href","/docs/transformers/pr_17622/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(oR,"href","/docs/transformers/pr_17622/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(rR,"href","/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTConfig"),c(tR,"href","/docs/transformers/pr_17622/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(aR,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(nR,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(sR,"href","/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMConfig"),c(lR,"href","/docs/transformers/pr_17622/en/model_doc/xglm#transformers.XGLMConfig"),c(iR,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMConfig"),c(dR,"href","/docs/transformers/pr_17622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(cR,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(fR,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(mR,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetConfig"),c(gR,"href","/docs/transformers/pr_17622/en/model_doc/yolos#transformers.YolosConfig"),c(hR,"href","/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lg,"id","transformers.AutoTokenizer"),c(Lg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(pR,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(_R,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertTokenizer"),c(uR,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(bR,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartTokenizer"),c(vR,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartTokenizerFast"),c(FR,"href","/docs/transformers/pr_17622/en/model_doc/barthez#transformers.BarthezTokenizer"),c(TR,"href","/docs/transformers/pr_17622/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(MR,"href","/docs/transformers/pr_17622/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(ER,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertTokenizer"),c(CR,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertTokenizerFast"),c(wR,"href","/docs/transformers/pr_17622/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(AR,"href","/docs/transformers/pr_17622/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(yR,"href","/docs/transformers/pr_17622/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(LR,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(xR,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c($R,"href","/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(kR,"href","/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(SR,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(RR,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(PR,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(BR,"href","/docs/transformers/pr_17622/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(IR,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertTokenizer"),c(NR,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(qR,"href","/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineTokenizer"),c(jR,"href","/docs/transformers/pr_17622/en/model_doc/clip#transformers.CLIPTokenizer"),c(DR,"href","/docs/transformers/pr_17622/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(GR,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(OR,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(VR,"href","/docs/transformers/pr_17622/en/model_doc/cpm#transformers.CpmTokenizer"),c(XR,"href","/docs/transformers/pr_17622/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(zR,"href","/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(WR,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QR,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HR,"href","/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaTokenizer"),c(UR,"href","/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(JR,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(YR,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(KR,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(ZR,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(eP,"href","/docs/transformers/pr_17622/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(oP,"href","/docs/transformers/pr_17622/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(rP,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraTokenizer"),c(tP,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(aP,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(nP,"href","/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetTokenizer"),c(sP,"href","/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(lP,"href","/docs/transformers/pr_17622/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(iP,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelTokenizer"),c(dP,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(cP,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fP,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mP,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gP,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hP,"href","/docs/transformers/pr_17622/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(pP,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_P,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uP,"href","/docs/transformers/pr_17622/en/model_doc/herbert#transformers.HerbertTokenizer"),c(bP,"href","/docs/transformers/pr_17622/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(vP,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(FP,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TP,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MP,"href","/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(EP,"href","/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(CP,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(wP,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(AP,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(yP,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(LP,"href","/docs/transformers/pr_17622/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(xP,"href","/docs/transformers/pr_17622/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c($P,"href","/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDTokenizer"),c(kP,"href","/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDTokenizerFast"),c(SP,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerTokenizer"),c(RP,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(PP,"href","/docs/transformers/pr_17622/en/model_doc/luke#transformers.LukeTokenizer"),c(BP,"href","/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(IP,"href","/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(NP,"href","/docs/transformers/pr_17622/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(qP,"href","/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianTokenizer"),c(jP,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartTokenizer"),c(DP,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(GP,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(OP,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(VP,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertTokenizer"),c(XP,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertTokenizerFast"),c(zP,"href","/docs/transformers/pr_17622/en/model_doc/mluke#transformers.MLukeTokenizer"),c(WP,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(QP,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(HP,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(UP,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(JP,"href","/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5Tokenizer"),c(YP,"href","/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5TokenizerFast"),c(KP,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZP,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(eB,"href","/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(oB,"href","/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(rB,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tB,"href","/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(aB,"href","/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(nB,"href","/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(sB,"href","/docs/transformers/pr_17622/en/model_doc/phobert#transformers.PhobertTokenizer"),c(lB,"href","/docs/transformers/pr_17622/en/model_doc/plbart#transformers.PLBartTokenizer"),c(iB,"href","/docs/transformers/pr_17622/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(dB,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertTokenizer"),c(cB,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17622/en/model_doc/rag#transformers.RagTokenizer"),c(mB,"href","/docs/transformers/pr_17622/en/model_doc/realm#transformers.RealmTokenizer"),c(gB,"href","/docs/transformers/pr_17622/en/model_doc/realm#transformers.RealmTokenizerFast"),c(hB,"href","/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerTokenizer"),c(pB,"href","/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(_B,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertTokenizer"),c(uB,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17622/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(vB,"href","/docs/transformers/pr_17622/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TB,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MB,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(EB,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(CB,"href","/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(wB,"href","/docs/transformers/pr_17622/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(AB,"href","/docs/transformers/pr_17622/en/model_doc/splinter#transformers.SplinterTokenizer"),c(yB,"href","/docs/transformers/pr_17622/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(LB,"href","/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(xB,"href","/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c($B,"href","/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5Tokenizer"),c(kB,"href","/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5TokenizerFast"),c(SB,"href","/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasTokenizer"),c(RB,"href","/docs/transformers/pr_17622/en/model_doc/tapex#transformers.TapexTokenizer"),c(PB,"href","/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(BB,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertTokenizer"),c(IB,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertTokenizerFast"),c(NB,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qB,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(jB,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(DB,"href","/docs/transformers/pr_17622/en/model_doc/xglm#transformers.XGLMTokenizer"),c(GB,"href","/docs/transformers/pr_17622/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(OB,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMTokenizer"),c(VB,"href","/docs/transformers/pr_17622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(XB,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(zB,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(WB,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QB,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HB,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(UB,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(JB,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertTokenizer"),c(YB,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dh,"id","transformers.AutoFeatureExtractor"),c(dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dh,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(KB,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(ZB,"href","/docs/transformers/pr_17622/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17622/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17622/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17622/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(aI,"href","/docs/transformers/pr_17622/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17622/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17622/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17622/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17622/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17622/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fI,"href","/docs/transformers/pr_17622/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(gI,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(hI,"href","/docs/transformers/pr_17622/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17622/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17622/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17622/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17622/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17622/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TI,"href","/docs/transformers/pr_17622/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(MI,"href","/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(EI,"href","/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(CI,"href","/docs/transformers/pr_17622/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wI,"href","/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(AI,"href","/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yI,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(LI,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xI,"href","/docs/transformers/pr_17622/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoProcessor"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c($I,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(kI,"href","/docs/transformers/pr_17622/en/model_doc/clip#transformers.CLIPProcessor"),c(SI,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(RI,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(PI,"href","/docs/transformers/pr_17622/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(BI,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(II,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NI,"href","/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(qI,"href","/docs/transformers/pr_17622/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(jI,"href","/docs/transformers/pr_17622/en/model_doc/trocr#transformers.TrOCRProcessor"),c(DI,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GI,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OI,"href","/docs/transformers/pr_17622/en/model_doc/vilt#transformers.ViltProcessor"),c(VI,"href","/docs/transformers/pr_17622/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(XI,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zI,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WI,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fp,"id","transformers.AutoModel"),c(fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fp,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(QI,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HI,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UI,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JI,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertModel"),c(YI,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartModel"),c(KI,"href","/docs/transformers/pr_17622/en/model_doc/beit#transformers.BeitModel"),c(ZI,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertModel"),c(eN,"href","/docs/transformers/pr_17622/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(oN,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdModel"),c(rN,"href","/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(tN,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(aN,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(nN,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertModel"),c(sN,"href","/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineModel"),c(lN,"href","/docs/transformers/pr_17622/en/model_doc/clip#transformers.CLIPModel"),c(iN,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertModel"),c(dN,"href","/docs/transformers/pr_17622/en/model_doc/convnext#transformers.ConvNextModel"),c(cN,"href","/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLModel"),c(fN,"href","/docs/transformers/pr_17622/en/model_doc/cvt#transformers.CvtModel"),c(mN,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(gN,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(hN,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(pN,"href","/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaModel"),c(_N,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(uN,"href","/docs/transformers/pr_17622/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(bN,"href","/docs/transformers/pr_17622/en/model_doc/deit#transformers.DeiTModel"),c(vN,"href","/docs/transformers/pr_17622/en/model_doc/detr#transformers.DetrModel"),c(FN,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertModel"),c(TN,"href","/docs/transformers/pr_17622/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(MN,"href","/docs/transformers/pr_17622/en/model_doc/dpt#transformers.DPTModel"),c(EN,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraModel"),c(CN,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertModel"),c(wN,"href","/docs/transformers/pr_17622/en/model_doc/flava#transformers.FlavaModel"),c(AN,"href","/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetModel"),c(yN,"href","/docs/transformers/pr_17622/en/model_doc/fsmt#transformers.FSMTModel"),c(LN,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelModel"),c(xN,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelBaseModel"),c($N,"href","/docs/transformers/pr_17622/en/model_doc/glpn#transformers.GLPNModel"),c(kN,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2Model"),c(SN,"href","/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(RN,"href","/docs/transformers/pr_17622/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(PN,"href","/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJModel"),c(BN,"href","/docs/transformers/pr_17622/en/model_doc/hubert#transformers.HubertModel"),c(IN,"href","/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertModel"),c(NN,"href","/docs/transformers/pr_17622/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(qN,"href","/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(jN,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(DN,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(GN,"href","/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDModel"),c(ON,"href","/docs/transformers/pr_17622/en/model_doc/levit#transformers.LevitModel"),c(VN,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerModel"),c(XN,"href","/docs/transformers/pr_17622/en/model_doc/luke#transformers.LukeModel"),c(zN,"href","/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.LxmertModel"),c(WN,"href","/docs/transformers/pr_17622/en/model_doc/m2m_100#transformers.M2M100Model"),c(QN,"href","/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianModel"),c(HN,"href","/docs/transformers/pr_17622/en/model_doc/maskformer#transformers.MaskFormerModel"),c(UN,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartModel"),c(JN,"href","/docs/transformers/pr_17622/en/model_doc/mctct#transformers.MCTCTModel"),c(YN,"href","/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(KN,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertModel"),c(ZN,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetModel"),c(eq,"href","/docs/transformers/pr_17622/en/model_doc/mt5#transformers.MT5Model"),c(oq,"href","/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerModel"),c(rq,"href","/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(tq,"href","/docs/transformers/pr_17622/en/model_doc/opt#transformers.OPTModel"),c(aq,"href","/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusModel"),c(nq,"href","/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverModel"),c(sq,"href","/docs/transformers/pr_17622/en/model_doc/plbart#transformers.PLBartModel"),c(lq,"href","/docs/transformers/pr_17622/en/model_doc/poolformer#transformers.PoolFormerModel"),c(iq,"href","/docs/transformers/pr_17622/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(dq,"href","/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertModel"),c(cq,"href","/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerModel"),c(fq,"href","/docs/transformers/pr_17622/en/model_doc/regnet#transformers.RegNetModel"),c(mq,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertModel"),c(gq,"href","/docs/transformers/pr_17622/en/model_doc/resnet#transformers.ResNetModel"),c(hq,"href","/docs/transformers/pr_17622/en/model_doc/retribert#transformers.RetriBertModel"),c(pq,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaModel"),c(_q,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerModel"),c(uq,"href","/docs/transformers/pr_17622/en/model_doc/segformer#transformers.SegformerModel"),c(bq,"href","/docs/transformers/pr_17622/en/model_doc/sew#transformers.SEWModel"),c(vq,"href","/docs/transformers/pr_17622/en/model_doc/sew-d#transformers.SEWDModel"),c(Fq,"href","/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Tq,"href","/docs/transformers/pr_17622/en/model_doc/splinter#transformers.SplinterModel"),c(Mq,"href","/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Eq,"href","/docs/transformers/pr_17622/en/model_doc/swin#transformers.SwinModel"),c(Cq,"href","/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5Model"),c(wq,"href","/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasModel"),c(Aq,"href","/docs/transformers/pr_17622/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(yq,"href","/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Lq,"href","/docs/transformers/pr_17622/en/model_doc/unispeech#transformers.UniSpeechModel"),c(xq,"href","/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c($q,"href","/docs/transformers/pr_17622/en/model_doc/van#transformers.VanModel"),c(kq,"href","/docs/transformers/pr_17622/en/model_doc/vilt#transformers.ViltModel"),c(Sq,"href","/docs/transformers/pr_17622/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Rq,"href","/docs/transformers/pr_17622/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Pq,"href","/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTModel"),c(Bq,"href","/docs/transformers/pr_17622/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Iq,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Nq,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(qq,"href","/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMModel"),c(jq,"href","/docs/transformers/pr_17622/en/model_doc/xglm#transformers.XGLMModel"),c(Dq,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMModel"),c(Gq,"href","/docs/transformers/pr_17622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Oq,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Vq,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Xq,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetModel"),c(zq,"href","/docs/transformers/pr_17622/en/model_doc/yolos#transformers.YolosModel"),c(Wq,"href","/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cu,"id","transformers.AutoModelForPreTraining"),c(cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cu,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(Qq,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hq,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uq,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jq,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Yq,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Kq,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertForPreTraining"),c(Zq,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(ej,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(oj,"href","/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(rj,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(tj,"href","/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(aj,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(nj,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(sj,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraForPreTraining"),c(lj,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ij,"href","/docs/transformers/pr_17622/en/model_doc/flava#transformers.FlavaForPreTraining"),c(dj,"href","/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetForPreTraining"),c(cj,"href","/docs/transformers/pr_17622/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(fj,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(mj,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(gj,"href","/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(hj,"href","/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(pj,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(_j,"href","/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(uj,"href","/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(bj,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(vj,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Tj,"href","/docs/transformers/pr_17622/en/model_doc/retribert#transformers.RetriBertModel"),c(Mj,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17622/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(Cj,"href","/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(wj,"href","/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Aj,"href","/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(yj,"href","/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Lj,"href","/docs/transformers/pr_17622/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(xj,"href","/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c($j,"href","/docs/transformers/pr_17622/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(kj,"href","/docs/transformers/pr_17622/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Sj,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Rj,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Pj,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Bj,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r2,"id","transformers.AutoModelForCausalLM"),c(r2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r2,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c(qj,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jj,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dj,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gj,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartForCausalLM"),c(Oj,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertLMHeadModel"),c(Vj,"href","/docs/transformers/pr_17622/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Xj,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(zj,"href","/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Wj,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Qj,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Hj,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Uj,"href","/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Jj,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Yj,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Kj,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Zj,"href","/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(eD,"href","/docs/transformers/pr_17622/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(oD,"href","/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(rD,"href","/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianForCausalLM"),c(tD,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartForCausalLM"),c(aD,"href","/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(nD,"href","/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(sD,"href","/docs/transformers/pr_17622/en/model_doc/opt#transformers.OPTForCausalLM"),c(lD,"href","/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(iD,"href","/docs/transformers/pr_17622/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(dD,"href","/docs/transformers/pr_17622/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(cD,"href","/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(fD,"href","/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(mD,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(gD,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(hD,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(pD,"href","/docs/transformers/pr_17622/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(_D,"href","/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(uD,"href","/docs/transformers/pr_17622/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(bD,"href","/docs/transformers/pr_17622/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(vD,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(FD,"href","/docs/transformers/pr_17622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(TD,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(MD,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(ED,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V2,"id","transformers.AutoModelForMaskedLM"),c(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V2,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(CD,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wD,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AD,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yD,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(LD,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertForMaskedLM"),c($D,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(kD,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(SD,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(RD,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(PD,"href","/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(BD,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ID,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(ND,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(qD,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(jD,"href","/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(DD,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(GD,"href","/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(OD,"href","/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(VD,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(XD,"href","/docs/transformers/pr_17622/en/model_doc/luke#transformers.LukeForMaskedLM"),c(zD,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(WD,"href","/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(QD,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(HD,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(UD,"href","/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(JD,"href","/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(YD,"href","/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(KD,"href","/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(eG,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(oG,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(rG,"href","/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(tG,"href","/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(aG,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(nG,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(sG,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(lG,"href","/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x1,"id","transformers.AutoModelForSeq2SeqLM"),c(x1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(iG,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dG,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cG,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fG,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(gG,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17622/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(_G,"href","/docs/transformers/pr_17622/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_17622/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(vG,"href","/docs/transformers/pr_17622/en/model_doc/marian#transformers.MarianMTModel"),c(FG,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(TG,"href","/docs/transformers/pr_17622/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(MG,"href","/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(EG,"href","/docs/transformers/pr_17622/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(CG,"href","/docs/transformers/pr_17622/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(wG,"href","/docs/transformers/pr_17622/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(AG,"href","/docs/transformers/pr_17622/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U1,"id","transformers.AutoModelForSequenceClassification"),c(U1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U1,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(yG,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LG,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xG,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($G,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17622/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(uO,"href","/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(bO,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(vO,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(FO,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(TO,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(MO,"href","/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wb,"id","transformers.AutoModelForMultipleChoice"),c(Wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wb,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(EO,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CO,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wO,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AO,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c($O,"href","/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(HO,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(UO,"href","/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(JO,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(YO,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(KO,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(ZO,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(eV,"href","/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wv,"id","transformers.AutoModelForNextSentencePrediction"),c(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wv,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(oV,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rV,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tV,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aV,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(nV,"href","/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(sV,"href","/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(lV,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(iV,"href","/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForTokenClassification"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(dV,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cV,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fV,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mV,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(gV,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertForTokenClassification"),c(hV,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(pV,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(_V,"href","/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineForTokenClassification"),c(uV,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(bV,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(vV,"href","/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(FV,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(TV,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(MV,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(EV,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(CV,"href","/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(wV,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(AV,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(yV,"href","/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(LV,"href","/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(xV,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c($V,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(kV,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(SV,"href","/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(RV,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(PV,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(BV,"href","/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(IV,"href","/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(NV,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(qV,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(jV,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(DV,"href","/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(GV,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(OV,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(VV,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(XV,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(zV,"href","/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForQuestionAnswering"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(WV,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QV,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17622/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17622/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17622/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(dX,"href","/docs/transformers/pr_17622/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17622/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17622/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17622/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17622/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17622/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17622/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17622/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17622/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_17622/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_17622/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c($X,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(kX,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(SX,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(RX,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(PX,"href","/docs/transformers/pr_17622/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i6,"id","transformers.AutoModelForTableQuestionAnswering"),c(i6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(BX,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IX,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NX,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g6,"id","transformers.AutoModelForImageClassification"),c(g6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g6,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(jX,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DX,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GX,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OX,"href","/docs/transformers/pr_17622/en/model_doc/beit#transformers.BeitForImageClassification"),c(VX,"href","/docs/transformers/pr_17622/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(XX,"href","/docs/transformers/pr_17622/en/model_doc/cvt#transformers.CvtForImageClassification"),c(zX,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(WX,"href","/docs/transformers/pr_17622/en/model_doc/deit#transformers.DeiTForImageClassification"),c(QX,"href","/docs/transformers/pr_17622/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(HX,"href","/docs/transformers/pr_17622/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(UX,"href","/docs/transformers/pr_17622/en/model_doc/levit#transformers.LevitForImageClassification"),c(JX,"href","/docs/transformers/pr_17622/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(YX,"href","/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(KX,"href","/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(ZX,"href","/docs/transformers/pr_17622/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(ez,"href","/docs/transformers/pr_17622/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(oz,"href","/docs/transformers/pr_17622/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(rz,"href","/docs/transformers/pr_17622/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(tz,"href","/docs/transformers/pr_17622/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(az,"href","/docs/transformers/pr_17622/en/model_doc/swin#transformers.SwinForImageClassification"),c(nz,"href","/docs/transformers/pr_17622/en/model_doc/van#transformers.VanForImageClassification"),c(sz,"href","/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x6,"id","transformers.AutoModelForVision2Seq"),c(x6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x6,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(lz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cz,"href","/docs/transformers/pr_17622/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P6,"id","transformers.AutoModelForAudioClassification"),c(P6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P6,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(fz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hz,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(pz,"href","/docs/transformers/pr_17622/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(_z,"href","/docs/transformers/pr_17622/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(uz,"href","/docs/transformers/pr_17622/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(bz,"href","/docs/transformers/pr_17622/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(vz,"href","/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(Fz,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(Tz,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(Mz,"href","/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q6,"id","transformers.AutoModelForAudioFrameClassification"),c(Q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q6,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(Ez,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(yz,"href","/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Lz,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(xz,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c($z,"href","/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rT,"id","transformers.AutoModelForCTC"),c(rT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rT,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(kz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Bz,"href","/docs/transformers/pr_17622/en/model_doc/hubert#transformers.HubertForCTC"),c(Iz,"href","/docs/transformers/pr_17622/en/model_doc/mctct#transformers.MCTCTForCTC"),c(Nz,"href","/docs/transformers/pr_17622/en/model_doc/sew#transformers.SEWForCTC"),c(qz,"href","/docs/transformers/pr_17622/en/model_doc/sew-d#transformers.SEWDForCTC"),c(jz,"href","/docs/transformers/pr_17622/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Dz,"href","/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Gz,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Oz,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Vz,"href","/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForSpeechSeq2Seq"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(Xz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qz,"href","/docs/transformers/pr_17622/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Hz,"href","/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForAudioXVector"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(Uz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yz,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Zz,"href","/docs/transformers/pr_17622/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(eW,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(oW,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(rW,"href","/docs/transformers/pr_17622/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kT,"id","transformers.AutoModelForMaskedImageModeling"),c(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(tW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sW,"href","/docs/transformers/pr_17622/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(lW,"href","/docs/transformers/pr_17622/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(iW,"href","/docs/transformers/pr_17622/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.AutoModelForObjectDetection"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(dW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_17622/en/model_doc/detr#transformers.DetrForObjectDetection"),c(gW,"href","/docs/transformers/pr_17622/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForImageSegmentation"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(hW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_17622/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.AutoModelForSemanticSegmentation"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(bW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TW,"href","/docs/transformers/pr_17622/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(MW,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(EW,"href","/docs/transformers/pr_17622/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(CW,"href","/docs/transformers/pr_17622/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t7,"id","transformers.AutoModelForInstanceSegmentation"),c(t7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t7,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(wW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_17622/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i7,"id","transformers.TFAutoModel"),c(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i7,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(xW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($W,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kW,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SW,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.TFAlbertModel"),c(RW,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.TFBartModel"),c(PW,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertModel"),c(BW,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(IW,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(NW,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertModel"),c(qW,"href","/docs/transformers/pr_17622/en/model_doc/clip#transformers.TFCLIPModel"),c(jW,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.TFConvBertModel"),c(DW,"href","/docs/transformers/pr_17622/en/model_doc/convnext#transformers.TFConvNextModel"),c(GW,"href","/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.TFCTRLModel"),c(OW,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(VW,"href","/docs/transformers/pr_17622/en/model_doc/deberta#transformers.TFDebertaModel"),c(XW,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(zW,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(WW,"href","/docs/transformers/pr_17622/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(QW,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.TFElectraModel"),c(HW,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(UW,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelModel"),c(JW,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(YW,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.TFGPT2Model"),c(KW,"href","/docs/transformers/pr_17622/en/model_doc/gptj#transformers.TFGPTJModel"),c(ZW,"href","/docs/transformers/pr_17622/en/model_doc/hubert#transformers.TFHubertModel"),c(eQ,"href","/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(oQ,"href","/docs/transformers/pr_17622/en/model_doc/led#transformers.TFLEDModel"),c(rQ,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.TFLongformerModel"),c(tQ,"href","/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.TFLxmertModel"),c(aQ,"href","/docs/transformers/pr_17622/en/model_doc/marian#transformers.TFMarianModel"),c(nQ,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.TFMBartModel"),c(sQ,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(lQ,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.TFMPNetModel"),c(iQ,"href","/docs/transformers/pr_17622/en/model_doc/mt5#transformers.TFMT5Model"),c(dQ,"href","/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(cQ,"href","/docs/transformers/pr_17622/en/model_doc/opt#transformers.TFOPTModel"),c(fQ,"href","/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.TFPegasusModel"),c(mQ,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.TFRemBertModel"),c(gQ,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaModel"),c(hQ,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.TFRoFormerModel"),c(pQ,"href","/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(_Q,"href","/docs/transformers/pr_17622/en/model_doc/swin#transformers.TFSwinModel"),c(uQ,"href","/docs/transformers/pr_17622/en/model_doc/t5#transformers.TFT5Model"),c(bQ,"href","/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TFTapasModel"),c(vQ,"href","/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(FQ,"href","/docs/transformers/pr_17622/en/model_doc/vit#transformers.TFViTModel"),c(TQ,"href","/docs/transformers/pr_17622/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(MQ,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(EQ,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMModel"),c(CQ,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(wQ,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.TFAutoModelForPreTraining"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(AQ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yQ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LQ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c($Q,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(kQ,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertForPreTraining"),c(SQ,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(PQ,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(IQ,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(NQ,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(qQ,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(jQ,"href","/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17622/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(GQ,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(OQ,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(XQ,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17622/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(WQ,"href","/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(HQ,"href","/docs/transformers/pr_17622/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(UQ,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(JQ,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.TFAutoModelForCausalLM"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(KQ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(rH,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(tH,"href","/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(aH,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(nH,"href","/docs/transformers/pr_17622/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(sH,"href","/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(lH,"href","/docs/transformers/pr_17622/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(iH,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(dH,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(cH,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(fH,"href","/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(mH,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(gH,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForImageClassification"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(hH,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pH,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_H,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uH,"href","/docs/transformers/pr_17622/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(bH,"href","/docs/transformers/pr_17622/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(vH,"href","/docs/transformers/pr_17622/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(FH,"href","/docs/transformers/pr_17622/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.TFAutoModelForMaskedLM"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(TH,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(wH,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(AH,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(yH,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(LH,"href","/docs/transformers/pr_17622/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(xH,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c($H,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(kH,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(SH,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RH,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(PH,"href","/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BH,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(IH,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(NH,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(qH,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(jH,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DH,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(GH,"href","/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OH,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VH,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(XH,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QH,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(HH,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(UH,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(JH,"href","/docs/transformers/pr_17622/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(YH,"href","/docs/transformers/pr_17622/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(KH,"href","/docs/transformers/pr_17622/en/model_doc/marian#transformers.TFMarianMTModel"),c(ZH,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(eU,"href","/docs/transformers/pr_17622/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(oU,"href","/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(rU,"href","/docs/transformers/pr_17622/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.TFAutoModelForSequenceClassification"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(tU,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17622/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17622/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(_U,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(uU,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(bU,"href","/docs/transformers/pr_17622/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(vU,"href","/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(FU,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(MU,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(EU,"href","/docs/transformers/pr_17622/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(CU,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(wU,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(AU,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(yU,"href","/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(LU,"href","/docs/transformers/pr_17622/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(xU,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c($U,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(kU,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dE,"id","transformers.TFAutoModelForMultipleChoice"),c(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dE,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(SU,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PU,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BU,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(IU,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(NU,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(qU,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(jU,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(DU,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(GU,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(OU,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(VU,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(XU,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(zU,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(WU,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(QU,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(HU,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(UU,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(JU,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(YU,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(KU,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZU,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eJ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oJ,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(rJ,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(tJ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_17622/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.TFAutoModelForTokenClassification"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(lJ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iJ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dJ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cJ,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(fJ,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(mJ,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(hJ,"href","/docs/transformers/pr_17622/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(pJ,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(_J,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(uJ,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(bJ,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(vJ,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(FJ,"href","/docs/transformers/pr_17622/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(TJ,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(MJ,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(EJ,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(CJ,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(wJ,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(AJ,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(yJ,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(LJ,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(xJ,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.TFAutoModelForQuestionAnswering"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c($J,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kJ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SJ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RJ,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_17622/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17622/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_17622/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_17622/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(GJ,"href","/docs/transformers/pr_17622/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(OJ,"href","/docs/transformers/pr_17622/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(VJ,"href","/docs/transformers/pr_17622/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(XJ,"href","/docs/transformers/pr_17622/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(zJ,"href","/docs/transformers/pr_17622/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(WJ,"href","/docs/transformers/pr_17622/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(QJ,"href","/docs/transformers/pr_17622/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(UJ,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(JJ,"href","/docs/transformers/pr_17622/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(YJ,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(KJ,"href","/docs/transformers/pr_17622/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($C,"id","transformers.TFAutoModelForVision2Seq"),c($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($C,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_17622/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(tY,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_17622/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.FlaxAutoModel"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(lY,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.FlaxAlbertModel"),c(fY,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.FlaxBartModel"),c(mY,"href","/docs/transformers/pr_17622/en/model_doc/beit#transformers.FlaxBeitModel"),c(gY,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertModel"),c(hY,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(pY,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(_Y,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(uY,"href","/docs/transformers/pr_17622/en/model_doc/clip#transformers.FlaxCLIPModel"),c(bY,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(vY,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraModel"),c(FY,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(TY,"href","/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(MY,"href","/docs/transformers/pr_17622/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(EY,"href","/docs/transformers/pr_17622/en/model_doc/marian#transformers.FlaxMarianModel"),c(CY,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.FlaxMBartModel"),c(wY,"href","/docs/transformers/pr_17622/en/model_doc/mt5#transformers.FlaxMT5Model"),c(AY,"href","/docs/transformers/pr_17622/en/model_doc/opt#transformers.FlaxOPTModel"),c(yY,"href","/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(LY,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(xY,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c($Y,"href","/docs/transformers/pr_17622/en/model_doc/t5#transformers.FlaxT5Model"),c(kY,"href","/docs/transformers/pr_17622/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(SY,"href","/docs/transformers/pr_17622/en/model_doc/vit#transformers.FlaxViTModel"),c(RY,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(PY,"href","/docs/transformers/pr_17622/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(BY,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.FlaxAutoModelForCausalLM"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(IY,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(DY,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(GY,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(OY,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(VY,"href","/docs/transformers/pr_17622/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(XY,"href","/docs/transformers/pr_17622/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(zY,"href","/docs/transformers/pr_17622/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(WY,"href","/docs/transformers/pr_17622/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(QY,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(HY,"href","/docs/transformers/pr_17622/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.FlaxAutoModelForPreTraining"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(UY,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JY,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YY,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KY,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(ZY,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eK,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(oK,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(rK,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(tK,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aK,"href","/docs/transformers/pr_17622/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nK,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(sK,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(lK,"href","/docs/transformers/pr_17622/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(iK,"href","/docs/transformers/pr_17622/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(dK,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.FlaxAutoModelForMaskedLM"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(cK,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mK,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(hK,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pK,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(_K,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(uK,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(bK,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(vK,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(FK,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(TK,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(MK,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(EK,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yK,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(LK,"href","/docs/transformers/pr_17622/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(xK,"href","/docs/transformers/pr_17622/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c($K,"href","/docs/transformers/pr_17622/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(kK,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SK,"href","/docs/transformers/pr_17622/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(RK,"href","/docs/transformers/pr_17622/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(PK,"href","/docs/transformers/pr_17622/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(BK,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NK,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qK,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(jK,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(DK,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(GK,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(OK,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(VK,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(XK,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(zK,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(WK,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(QK,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(HK,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(KK,"href","/docs/transformers/pr_17622/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(ZK,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(eZ,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(oZ,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(rZ,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(tZ,"href","/docs/transformers/pr_17622/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(aZ,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(nZ,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(sZ,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q3,"id","transformers.FlaxAutoModelForTokenClassification"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(lZ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iZ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dZ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cZ,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(fZ,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(mZ,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(gZ,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(hZ,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(pZ,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(_Z,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(uZ,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(bZ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vZ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FZ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TZ,"href","/docs/transformers/pr_17622/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(MZ,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(EZ,"href","/docs/transformers/pr_17622/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(CZ,"href","/docs/transformers/pr_17622/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(wZ,"href","/docs/transformers/pr_17622/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(AZ,"href","/docs/transformers/pr_17622/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(yZ,"href","/docs/transformers/pr_17622/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(LZ,"href","/docs/transformers/pr_17622/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(xZ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Z,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kZ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SZ,"href","/docs/transformers/pr_17622/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c0,"id","transformers.FlaxAutoModelForImageClassification"),c(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c0,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(RZ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PZ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BZ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IZ,"href","/docs/transformers/pr_17622/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(NZ,"href","/docs/transformers/pr_17622/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p0,"id","transformers.FlaxAutoModelForVision2Seq"),c(p0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c(qZ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jZ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DZ,"href","/docs/transformers/pr_17622/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GZ,"href","/docs/transformers/pr_17622/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,_f,u),b(f,rt,u),e(rt,gi),e(rt,hi),e(hi,IA),e(rt,uf),b(f,Ge,u),b(f,We,u),e(We,pi),e(We,yn),e(yn,NA),e(We,Ln),e(We,xn),e(xn,qA),e(We,_i),e(We,$n),e($n,jA),e(We,ui),b(f,bf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,nk),e(Ae,bi),e(bi,sk),e(Ae,lk),b(f,Eo,u),b(f,wa,u),e(wa,ik),e(wa,vf),e(vf,dk),e(wa,iVe),b(f,Yqe,u),b(f,vi,u),e(vi,Ff),e(Ff,Poe),M(DA,Poe,null),e(vi,dVe),e(vi,Boe),e(Boe,cVe),b(f,Kqe,u),b(f,kn,u),e(kn,fVe),e(kn,Ioe),e(Ioe,mVe),e(kn,gVe),e(kn,Noe),e(Noe,hVe),e(kn,pVe),b(f,Zqe,u),M(GA,f,u),b(f,eje,u),b(f,ck,u),e(ck,_Ve),b(f,oje,u),M(Tf,f,u),b(f,rje,u),b(f,Fi,u),e(Fi,Mf),e(Mf,qoe),M(OA,qoe,null),e(Fi,uVe),e(Fi,joe),e(joe,bVe),b(f,tje,u),b(f,Co,u),M(VA,Co,null),e(Co,vVe),e(Co,XA),e(XA,FVe),e(XA,fk),e(fk,TVe),e(XA,MVe),e(Co,EVe),e(Co,zA),e(zA,CVe),e(zA,Doe),e(Doe,wVe),e(zA,AVe),e(Co,yVe),e(Co,Er),M(WA,Er,null),e(Er,LVe),e(Er,Goe),e(Goe,xVe),e(Er,$Ve),e(Er,Ti),e(Ti,kVe),e(Ti,Ooe),e(Ooe,SVe),e(Ti,RVe),e(Ti,Voe),e(Voe,PVe),e(Ti,BVe),e(Er,IVe),e(Er,A),e(A,Ef),e(Ef,Xoe),e(Xoe,NVe),e(Ef,qVe),e(Ef,mk),e(mk,jVe),e(Ef,DVe),e(A,GVe),e(A,Cf),e(Cf,zoe),e(zoe,OVe),e(Cf,VVe),e(Cf,gk),e(gk,XVe),e(Cf,zVe),e(A,WVe),e(A,wf),e(wf,Woe),e(Woe,QVe),e(wf,HVe),e(wf,hk),e(hk,UVe),e(wf,JVe),e(A,YVe),e(A,Af),e(Af,Qoe),e(Qoe,KVe),e(Af,ZVe),e(Af,pk),e(pk,eXe),e(Af,oXe),e(A,rXe),e(A,yf),e(yf,Hoe),e(Hoe,tXe),e(yf,aXe),e(yf,_k),e(_k,nXe),e(yf,sXe),e(A,lXe),e(A,Lf),e(Lf,Uoe),e(Uoe,iXe),e(Lf,dXe),e(Lf,uk),e(uk,cXe),e(Lf,fXe),e(A,mXe),e(A,xf),e(xf,Joe),e(Joe,gXe),e(xf,hXe),e(xf,bk),e(bk,pXe),e(xf,_Xe),e(A,uXe),e(A,$f),e($f,Yoe),e(Yoe,bXe),e($f,vXe),e($f,vk),e(vk,FXe),e($f,TXe),e(A,MXe),e(A,kf),e(kf,Koe),e(Koe,EXe),e(kf,CXe),e(kf,Fk),e(Fk,wXe),e(kf,AXe),e(A,yXe),e(A,Sf),e(Sf,Zoe),e(Zoe,LXe),e(Sf,xXe),e(Sf,Tk),e(Tk,$Xe),e(Sf,kXe),e(A,SXe),e(A,Rf),e(Rf,ere),e(ere,RXe),e(Rf,PXe),e(Rf,Mk),e(Mk,BXe),e(Rf,IXe),e(A,NXe),e(A,Pf),e(Pf,ore),e(ore,qXe),e(Pf,jXe),e(Pf,Ek),e(Ek,DXe),e(Pf,GXe),e(A,OXe),e(A,Bf),e(Bf,rre),e(rre,VXe),e(Bf,XXe),e(Bf,Ck),e(Ck,zXe),e(Bf,WXe),e(A,QXe),e(A,If),e(If,tre),e(tre,HXe),e(If,UXe),e(If,wk),e(wk,JXe),e(If,YXe),e(A,KXe),e(A,Nf),e(Nf,are),e(are,ZXe),e(Nf,eze),e(Nf,Ak),e(Ak,oze),e(Nf,rze),e(A,tze),e(A,qf),e(qf,nre),e(nre,aze),e(qf,nze),e(qf,yk),e(yk,sze),e(qf,lze),e(A,ize),e(A,jf),e(jf,sre),e(sre,dze),e(jf,cze),e(jf,Lk),e(Lk,fze),e(jf,mze),e(A,gze),e(A,Df),e(Df,lre),e(lre,hze),e(Df,pze),e(Df,xk),e(xk,_ze),e(Df,uze),e(A,bze),e(A,Gf),e(Gf,ire),e(ire,vze),e(Gf,Fze),e(Gf,$k),e($k,Tze),e(Gf,Mze),e(A,Eze),e(A,Of),e(Of,dre),e(dre,Cze),e(Of,wze),e(Of,kk),e(kk,Aze),e(Of,yze),e(A,Lze),e(A,Vf),e(Vf,cre),e(cre,xze),e(Vf,$ze),e(Vf,Sk),e(Sk,kze),e(Vf,Sze),e(A,Rze),e(A,Xf),e(Xf,fre),e(fre,Pze),e(Xf,Bze),e(Xf,Rk),e(Rk,Ize),e(Xf,Nze),e(A,qze),e(A,zf),e(zf,mre),e(mre,jze),e(zf,Dze),e(zf,Pk),e(Pk,Gze),e(zf,Oze),e(A,Vze),e(A,Wf),e(Wf,gre),e(gre,Xze),e(Wf,zze),e(Wf,Bk),e(Bk,Wze),e(Wf,Qze),e(A,Hze),e(A,Qf),e(Qf,hre),e(hre,Uze),e(Qf,Jze),e(Qf,Ik),e(Ik,Yze),e(Qf,Kze),e(A,Zze),e(A,Hf),e(Hf,pre),e(pre,eWe),e(Hf,oWe),e(Hf,Nk),e(Nk,rWe),e(Hf,tWe),e(A,aWe),e(A,Uf),e(Uf,_re),e(_re,nWe),e(Uf,sWe),e(Uf,qk),e(qk,lWe),e(Uf,iWe),e(A,dWe),e(A,Jf),e(Jf,ure),e(ure,cWe),e(Jf,fWe),e(Jf,jk),e(jk,mWe),e(Jf,gWe),e(A,hWe),e(A,Yf),e(Yf,bre),e(bre,pWe),e(Yf,_We),e(Yf,Dk),e(Dk,uWe),e(Yf,bWe),e(A,vWe),e(A,Kf),e(Kf,vre),e(vre,FWe),e(Kf,TWe),e(Kf,Gk),e(Gk,MWe),e(Kf,EWe),e(A,CWe),e(A,Zf),e(Zf,Fre),e(Fre,wWe),e(Zf,AWe),e(Zf,Ok),e(Ok,yWe),e(Zf,LWe),e(A,xWe),e(A,em),e(em,Tre),e(Tre,$We),e(em,kWe),e(em,Vk),e(Vk,SWe),e(em,RWe),e(A,PWe),e(A,om),e(om,Mre),e(Mre,BWe),e(om,IWe),e(om,Xk),e(Xk,NWe),e(om,qWe),e(A,jWe),e(A,rm),e(rm,Ere),e(Ere,DWe),e(rm,GWe),e(rm,zk),e(zk,OWe),e(rm,VWe),e(A,XWe),e(A,tm),e(tm,Cre),e(Cre,zWe),e(tm,WWe),e(tm,Wk),e(Wk,QWe),e(tm,HWe),e(A,UWe),e(A,am),e(am,wre),e(wre,JWe),e(am,YWe),e(am,Qk),e(Qk,KWe),e(am,ZWe),e(A,eQe),e(A,nm),e(nm,Are),e(Are,oQe),e(nm,rQe),e(nm,Hk),e(Hk,tQe),e(nm,aQe),e(A,nQe),e(A,sm),e(sm,yre),e(yre,sQe),e(sm,lQe),e(sm,Uk),e(Uk,iQe),e(sm,dQe),e(A,cQe),e(A,lm),e(lm,Lre),e(Lre,fQe),e(lm,mQe),e(lm,Jk),e(Jk,gQe),e(lm,hQe),e(A,pQe),e(A,im),e(im,xre),e(xre,_Qe),e(im,uQe),e(im,Yk),e(Yk,bQe),e(im,vQe),e(A,FQe),e(A,dm),e(dm,$re),e($re,TQe),e(dm,MQe),e(dm,Kk),e(Kk,EQe),e(dm,CQe),e(A,wQe),e(A,cm),e(cm,kre),e(kre,AQe),e(cm,yQe),e(cm,Zk),e(Zk,LQe),e(cm,xQe),e(A,$Qe),e(A,fm),e(fm,Sre),e(Sre,kQe),e(fm,SQe),e(fm,eS),e(eS,RQe),e(fm,PQe),e(A,BQe),e(A,mm),e(mm,Rre),e(Rre,IQe),e(mm,NQe),e(mm,oS),e(oS,qQe),e(mm,jQe),e(A,DQe),e(A,gm),e(gm,Pre),e(Pre,GQe),e(gm,OQe),e(gm,rS),e(rS,VQe),e(gm,XQe),e(A,zQe),e(A,hm),e(hm,Bre),e(Bre,WQe),e(hm,QQe),e(hm,tS),e(tS,HQe),e(hm,UQe),e(A,JQe),e(A,pm),e(pm,Ire),e(Ire,YQe),e(pm,KQe),e(pm,aS),e(aS,ZQe),e(pm,eHe),e(A,oHe),e(A,_m),e(_m,Nre),e(Nre,rHe),e(_m,tHe),e(_m,nS),e(nS,aHe),e(_m,nHe),e(A,sHe),e(A,um),e(um,qre),e(qre,lHe),e(um,iHe),e(um,sS),e(sS,dHe),e(um,cHe),e(A,fHe),e(A,bm),e(bm,jre),e(jre,mHe),e(bm,gHe),e(bm,lS),e(lS,hHe),e(bm,pHe),e(A,_He),e(A,vm),e(vm,Dre),e(Dre,uHe),e(vm,bHe),e(vm,iS),e(iS,vHe),e(vm,FHe),e(A,THe),e(A,Fm),e(Fm,Gre),e(Gre,MHe),e(Fm,EHe),e(Fm,dS),e(dS,CHe),e(Fm,wHe),e(A,AHe),e(A,Tm),e(Tm,Ore),e(Ore,yHe),e(Tm,LHe),e(Tm,cS),e(cS,xHe),e(Tm,$He),e(A,kHe),e(A,Mm),e(Mm,Vre),e(Vre,SHe),e(Mm,RHe),e(Mm,fS),e(fS,PHe),e(Mm,BHe),e(A,IHe),e(A,Em),e(Em,Xre),e(Xre,NHe),e(Em,qHe),e(Em,mS),e(mS,jHe),e(Em,DHe),e(A,GHe),e(A,Cm),e(Cm,zre),e(zre,OHe),e(Cm,VHe),e(Cm,gS),e(gS,XHe),e(Cm,zHe),e(A,WHe),e(A,wm),e(wm,Wre),e(Wre,QHe),e(wm,HHe),e(wm,hS),e(hS,UHe),e(wm,JHe),e(A,YHe),e(A,Am),e(Am,Qre),e(Qre,KHe),e(Am,ZHe),e(Am,pS),e(pS,eUe),e(Am,oUe),e(A,rUe),e(A,ym),e(ym,Hre),e(Hre,tUe),e(ym,aUe),e(ym,_S),e(_S,nUe),e(ym,sUe),e(A,lUe),e(A,Lm),e(Lm,Ure),e(Ure,iUe),e(Lm,dUe),e(Lm,uS),e(uS,cUe),e(Lm,fUe),e(A,mUe),e(A,xm),e(xm,Jre),e(Jre,gUe),e(xm,hUe),e(xm,bS),e(bS,pUe),e(xm,_Ue),e(A,uUe),e(A,$m),e($m,Yre),e(Yre,bUe),e($m,vUe),e($m,vS),e(vS,FUe),e($m,TUe),e(A,MUe),e(A,km),e(km,Kre),e(Kre,EUe),e(km,CUe),e(km,FS),e(FS,wUe),e(km,AUe),e(A,yUe),e(A,Sm),e(Sm,Zre),e(Zre,LUe),e(Sm,xUe),e(Sm,TS),e(TS,$Ue),e(Sm,kUe),e(A,SUe),e(A,Rm),e(Rm,ete),e(ete,RUe),e(Rm,PUe),e(Rm,MS),e(MS,BUe),e(Rm,IUe),e(A,NUe),e(A,Pm),e(Pm,ote),e(ote,qUe),e(Pm,jUe),e(Pm,ES),e(ES,DUe),e(Pm,GUe),e(A,OUe),e(A,Bm),e(Bm,rte),e(rte,VUe),e(Bm,XUe),e(Bm,CS),e(CS,zUe),e(Bm,WUe),e(A,QUe),e(A,Im),e(Im,tte),e(tte,HUe),e(Im,UUe),e(Im,wS),e(wS,JUe),e(Im,YUe),e(A,KUe),e(A,Nm),e(Nm,ate),e(ate,ZUe),e(Nm,eJe),e(Nm,AS),e(AS,oJe),e(Nm,rJe),e(A,tJe),e(A,qm),e(qm,nte),e(nte,aJe),e(qm,nJe),e(qm,yS),e(yS,sJe),e(qm,lJe),e(A,iJe),e(A,jm),e(jm,ste),e(ste,dJe),e(jm,cJe),e(jm,LS),e(LS,fJe),e(jm,mJe),e(A,gJe),e(A,Dm),e(Dm,lte),e(lte,hJe),e(Dm,pJe),e(Dm,xS),e(xS,_Je),e(Dm,uJe),e(A,bJe),e(A,Gm),e(Gm,ite),e(ite,vJe),e(Gm,FJe),e(Gm,$S),e($S,TJe),e(Gm,MJe),e(A,EJe),e(A,Om),e(Om,dte),e(dte,CJe),e(Om,wJe),e(Om,kS),e(kS,AJe),e(Om,yJe),e(A,LJe),e(A,Vm),e(Vm,cte),e(cte,xJe),e(Vm,$Je),e(Vm,SS),e(SS,kJe),e(Vm,SJe),e(A,RJe),e(A,Xm),e(Xm,fte),e(fte,PJe),e(Xm,BJe),e(Xm,RS),e(RS,IJe),e(Xm,NJe),e(A,qJe),e(A,zm),e(zm,mte),e(mte,jJe),e(zm,DJe),e(zm,PS),e(PS,GJe),e(zm,OJe),e(A,VJe),e(A,Wm),e(Wm,gte),e(gte,XJe),e(Wm,zJe),e(Wm,BS),e(BS,WJe),e(Wm,QJe),e(A,HJe),e(A,Qm),e(Qm,hte),e(hte,UJe),e(Qm,JJe),e(Qm,IS),e(IS,YJe),e(Qm,KJe),e(A,ZJe),e(A,Hm),e(Hm,pte),e(pte,eYe),e(Hm,oYe),e(Hm,NS),e(NS,rYe),e(Hm,tYe),e(A,aYe),e(A,Um),e(Um,_te),e(_te,nYe),e(Um,sYe),e(Um,qS),e(qS,lYe),e(Um,iYe),e(A,dYe),e(A,Jm),e(Jm,ute),e(ute,cYe),e(Jm,fYe),e(Jm,jS),e(jS,mYe),e(Jm,gYe),e(A,hYe),e(A,Ym),e(Ym,bte),e(bte,pYe),e(Ym,_Ye),e(Ym,DS),e(DS,uYe),e(Ym,bYe),e(A,vYe),e(A,Km),e(Km,vte),e(vte,FYe),e(Km,TYe),e(Km,GS),e(GS,MYe),e(Km,EYe),e(A,CYe),e(A,Zm),e(Zm,Fte),e(Fte,wYe),e(Zm,AYe),e(Zm,OS),e(OS,yYe),e(Zm,LYe),e(A,xYe),e(A,eg),e(eg,Tte),e(Tte,$Ye),e(eg,kYe),e(eg,VS),e(VS,SYe),e(eg,RYe),e(A,PYe),e(A,og),e(og,Mte),e(Mte,BYe),e(og,IYe),e(og,XS),e(XS,NYe),e(og,qYe),e(A,jYe),e(A,rg),e(rg,Ete),e(Ete,DYe),e(rg,GYe),e(rg,zS),e(zS,OYe),e(rg,VYe),e(A,XYe),e(A,tg),e(tg,Cte),e(Cte,zYe),e(tg,WYe),e(tg,WS),e(WS,QYe),e(tg,HYe),e(A,UYe),e(A,ag),e(ag,wte),e(wte,JYe),e(ag,YYe),e(ag,QS),e(QS,KYe),e(ag,ZYe),e(A,eKe),e(A,ng),e(ng,Ate),e(Ate,oKe),e(ng,rKe),e(ng,HS),e(HS,tKe),e(ng,aKe),e(A,nKe),e(A,sg),e(sg,yte),e(yte,sKe),e(sg,lKe),e(sg,US),e(US,iKe),e(sg,dKe),e(A,cKe),e(A,lg),e(lg,Lte),e(Lte,fKe),e(lg,mKe),e(lg,JS),e(JS,gKe),e(lg,hKe),e(A,pKe),e(A,ig),e(ig,xte),e(xte,_Ke),e(ig,uKe),e(ig,YS),e(YS,bKe),e(ig,vKe),e(A,FKe),e(A,dg),e(dg,$te),e($te,TKe),e(dg,MKe),e(dg,KS),e(KS,EKe),e(dg,CKe),e(A,wKe),e(A,cg),e(cg,kte),e(kte,AKe),e(cg,yKe),e(cg,ZS),e(ZS,LKe),e(cg,xKe),e(A,$Ke),e(A,fg),e(fg,Ste),e(Ste,kKe),e(fg,SKe),e(fg,eR),e(eR,RKe),e(fg,PKe),e(A,BKe),e(A,mg),e(mg,Rte),e(Rte,IKe),e(mg,NKe),e(mg,oR),e(oR,qKe),e(mg,jKe),e(A,DKe),e(A,gg),e(gg,Pte),e(Pte,GKe),e(gg,OKe),e(gg,rR),e(rR,VKe),e(gg,XKe),e(A,zKe),e(A,hg),e(hg,Bte),e(Bte,WKe),e(hg,QKe),e(hg,tR),e(tR,HKe),e(hg,UKe),e(A,JKe),e(A,pg),e(pg,Ite),e(Ite,YKe),e(pg,KKe),e(pg,aR),e(aR,ZKe),e(pg,eZe),e(A,oZe),e(A,_g),e(_g,Nte),e(Nte,rZe),e(_g,tZe),e(_g,nR),e(nR,aZe),e(_g,nZe),e(A,sZe),e(A,ug),e(ug,qte),e(qte,lZe),e(ug,iZe),e(ug,sR),e(sR,dZe),e(ug,cZe),e(A,fZe),e(A,bg),e(bg,jte),e(jte,mZe),e(bg,gZe),e(bg,lR),e(lR,hZe),e(bg,pZe),e(A,_Ze),e(A,vg),e(vg,Dte),e(Dte,uZe),e(vg,bZe),e(vg,iR),e(iR,vZe),e(vg,FZe),e(A,TZe),e(A,Fg),e(Fg,Gte),e(Gte,MZe),e(Fg,EZe),e(Fg,dR),e(dR,CZe),e(Fg,wZe),e(A,AZe),e(A,Tg),e(Tg,Ote),e(Ote,yZe),e(Tg,LZe),e(Tg,cR),e(cR,xZe),e(Tg,$Ze),e(A,kZe),e(A,Mg),e(Mg,Vte),e(Vte,SZe),e(Mg,RZe),e(Mg,fR),e(fR,PZe),e(Mg,BZe),e(A,IZe),e(A,Eg),e(Eg,Xte),e(Xte,NZe),e(Eg,qZe),e(Eg,mR),e(mR,jZe),e(Eg,DZe),e(A,GZe),e(A,Cg),e(Cg,zte),e(zte,OZe),e(Cg,VZe),e(Cg,gR),e(gR,XZe),e(Cg,zZe),e(A,WZe),e(A,wg),e(wg,Wte),e(Wte,QZe),e(wg,HZe),e(wg,hR),e(hR,UZe),e(wg,JZe),e(Er,YZe),M(Ag,Er,null),e(Co,KZe),e(Co,yg),M(QA,yg,null),e(yg,ZZe),e(yg,Qte),e(Qte,eeo),b(f,aje,u),b(f,Mi,u),e(Mi,Lg),e(Lg,Hte),M(HA,Hte,null),e(Mi,oeo),e(Mi,Ute),e(Ute,reo),b(f,nje,u),b(f,wo,u),M(UA,wo,null),e(wo,teo),e(wo,JA),e(JA,aeo),e(JA,pR),e(pR,neo),e(JA,seo),e(wo,leo),e(wo,YA),e(YA,ieo),e(YA,Jte),e(Jte,deo),e(YA,ceo),e(wo,feo),e(wo,Cr),M(KA,Cr,null),e(Cr,meo),e(Cr,Yte),e(Yte,geo),e(Cr,heo),e(Cr,Aa),e(Aa,peo),e(Aa,Kte),e(Kte,_eo),e(Aa,ueo),e(Aa,Zte),e(Zte,beo),e(Aa,veo),e(Aa,eae),e(eae,Feo),e(Aa,Teo),e(Cr,Meo),e(Cr,k),e(k,Sn),e(Sn,oae),e(oae,Eeo),e(Sn,Ceo),e(Sn,_R),e(_R,weo),e(Sn,Aeo),e(Sn,uR),e(uR,yeo),e(Sn,Leo),e(k,xeo),e(k,Rn),e(Rn,rae),e(rae,$eo),e(Rn,keo),e(Rn,bR),e(bR,Seo),e(Rn,Reo),e(Rn,vR),e(vR,Peo),e(Rn,Beo),e(k,Ieo),e(k,Pn),e(Pn,tae),e(tae,Neo),e(Pn,qeo),e(Pn,FR),e(FR,jeo),e(Pn,Deo),e(Pn,TR),e(TR,Geo),e(Pn,Oeo),e(k,Veo),e(k,xg),e(xg,aae),e(aae,Xeo),e(xg,zeo),e(xg,MR),e(MR,Weo),e(xg,Qeo),e(k,Heo),e(k,Bn),e(Bn,nae),e(nae,Ueo),e(Bn,Jeo),e(Bn,ER),e(ER,Yeo),e(Bn,Keo),e(Bn,CR),e(CR,Zeo),e(Bn,eoo),e(k,ooo),e(k,$g),e($g,sae),e(sae,roo),e($g,too),e($g,wR),e(wR,aoo),e($g,noo),e(k,soo),e(k,kg),e(kg,lae),e(lae,loo),e(kg,ioo),e(kg,AR),e(AR,doo),e(kg,coo),e(k,foo),e(k,Sg),e(Sg,iae),e(iae,moo),e(Sg,goo),e(Sg,yR),e(yR,hoo),e(Sg,poo),e(k,_oo),e(k,In),e(In,dae),e(dae,uoo),e(In,boo),e(In,LR),e(LR,voo),e(In,Foo),e(In,xR),e(xR,Too),e(In,Moo),e(k,Eoo),e(k,Nn),e(Nn,cae),e(cae,Coo),e(Nn,woo),e(Nn,$R),e($R,Aoo),e(Nn,yoo),e(Nn,kR),e(kR,Loo),e(Nn,xoo),e(k,$oo),e(k,qn),e(qn,fae),e(fae,koo),e(qn,Soo),e(qn,SR),e(SR,Roo),e(qn,Poo),e(qn,RR),e(RR,Boo),e(qn,Ioo),e(k,Noo),e(k,Rg),e(Rg,mae),e(mae,qoo),e(Rg,joo),e(Rg,PR),e(PR,Doo),e(Rg,Goo),e(k,Ooo),e(k,Pg),e(Pg,gae),e(gae,Voo),e(Pg,Xoo),e(Pg,BR),e(BR,zoo),e(Pg,Woo),e(k,Qoo),e(k,jn),e(jn,hae),e(hae,Hoo),e(jn,Uoo),e(jn,IR),e(IR,Joo),e(jn,Yoo),e(jn,NR),e(NR,Koo),e(jn,Zoo),e(k,ero),e(k,Bg),e(Bg,pae),e(pae,oro),e(Bg,rro),e(Bg,qR),e(qR,tro),e(Bg,aro),e(k,nro),e(k,Dn),e(Dn,_ae),e(_ae,sro),e(Dn,lro),e(Dn,jR),e(jR,iro),e(Dn,dro),e(Dn,DR),e(DR,cro),e(Dn,fro),e(k,mro),e(k,Gn),e(Gn,uae),e(uae,gro),e(Gn,hro),e(Gn,GR),e(GR,pro),e(Gn,_ro),e(Gn,OR),e(OR,uro),e(Gn,bro),e(k,vro),e(k,On),e(On,bae),e(bae,Fro),e(On,Tro),e(On,VR),e(VR,Mro),e(On,Ero),e(On,XR),e(XR,Cro),e(On,wro),e(k,Aro),e(k,Ig),e(Ig,vae),e(vae,yro),e(Ig,Lro),e(Ig,zR),e(zR,xro),e(Ig,$ro),e(k,kro),e(k,Vn),e(Vn,Fae),e(Fae,Sro),e(Vn,Rro),e(Vn,WR),e(WR,Pro),e(Vn,Bro),e(Vn,QR),e(QR,Iro),e(Vn,Nro),e(k,qro),e(k,Xn),e(Xn,Tae),e(Tae,jro),e(Xn,Dro),e(Xn,HR),e(HR,Gro),e(Xn,Oro),e(Xn,UR),e(UR,Vro),e(Xn,Xro),e(k,zro),e(k,zn),e(zn,Mae),e(Mae,Wro),e(zn,Qro),e(zn,JR),e(JR,Hro),e(zn,Uro),e(zn,YR),e(YR,Jro),e(zn,Yro),e(k,Kro),e(k,Wn),e(Wn,Eae),e(Eae,Zro),e(Wn,eto),e(Wn,KR),e(KR,oto),e(Wn,rto),e(Wn,ZR),e(ZR,tto),e(Wn,ato),e(k,nto),e(k,Qn),e(Qn,Cae),e(Cae,sto),e(Qn,lto),e(Qn,eP),e(eP,ito),e(Qn,dto),e(Qn,oP),e(oP,cto),e(Qn,fto),e(k,mto),e(k,Hn),e(Hn,wae),e(wae,gto),e(Hn,hto),e(Hn,rP),e(rP,pto),e(Hn,_to),e(Hn,tP),e(tP,uto),e(Hn,bto),e(k,vto),e(k,Ng),e(Ng,Aae),e(Aae,Fto),e(Ng,Tto),e(Ng,aP),e(aP,Mto),e(Ng,Eto),e(k,Cto),e(k,Un),e(Un,yae),e(yae,wto),e(Un,Ato),e(Un,nP),e(nP,yto),e(Un,Lto),e(Un,sP),e(sP,xto),e(Un,$to),e(k,kto),e(k,qg),e(qg,Lae),e(Lae,Sto),e(qg,Rto),e(qg,lP),e(lP,Pto),e(qg,Bto),e(k,Ito),e(k,Jn),e(Jn,xae),e(xae,Nto),e(Jn,qto),e(Jn,iP),e(iP,jto),e(Jn,Dto),e(Jn,dP),e(dP,Gto),e(Jn,Oto),e(k,Vto),e(k,Yn),e(Yn,$ae),e($ae,Xto),e(Yn,zto),e(Yn,cP),e(cP,Wto),e(Yn,Qto),e(Yn,fP),e(fP,Hto),e(Yn,Uto),e(k,Jto),e(k,Kn),e(Kn,kae),e(kae,Yto),e(Kn,Kto),e(Kn,mP),e(mP,Zto),e(Kn,eao),e(Kn,gP),e(gP,oao),e(Kn,rao),e(k,tao),e(k,jg),e(jg,Sae),e(Sae,aao),e(jg,nao),e(jg,hP),e(hP,sao),e(jg,lao),e(k,iao),e(k,Zn),e(Zn,Rae),e(Rae,dao),e(Zn,cao),e(Zn,pP),e(pP,fao),e(Zn,mao),e(Zn,_P),e(_P,gao),e(Zn,hao),e(k,pao),e(k,es),e(es,Pae),e(Pae,_ao),e(es,uao),e(es,uP),e(uP,bao),e(es,vao),e(es,bP),e(bP,Fao),e(es,Tao),e(k,Mao),e(k,Dg),e(Dg,Bae),e(Bae,Eao),e(Dg,Cao),e(Dg,vP),e(vP,wao),e(Dg,Aao),e(k,yao),e(k,os),e(os,Iae),e(Iae,Lao),e(os,xao),e(os,FP),e(FP,$ao),e(os,kao),e(os,TP),e(TP,Sao),e(os,Rao),e(k,Pao),e(k,rs),e(rs,Nae),e(Nae,Bao),e(rs,Iao),e(rs,MP),e(MP,Nao),e(rs,qao),e(rs,EP),e(EP,jao),e(rs,Dao),e(k,Gao),e(k,ts),e(ts,qae),e(qae,Oao),e(ts,Vao),e(ts,CP),e(CP,Xao),e(ts,zao),e(ts,wP),e(wP,Wao),e(ts,Qao),e(k,Hao),e(k,as),e(as,jae),e(jae,Uao),e(as,Jao),e(as,AP),e(AP,Yao),e(as,Kao),e(as,yP),e(yP,Zao),e(as,eno),e(k,ono),e(k,ns),e(ns,Dae),e(Dae,rno),e(ns,tno),e(ns,LP),e(LP,ano),e(ns,nno),e(ns,xP),e(xP,sno),e(ns,lno),e(k,ino),e(k,ss),e(ss,Gae),e(Gae,dno),e(ss,cno),e(ss,$P),e($P,fno),e(ss,mno),e(ss,kP),e(kP,gno),e(ss,hno),e(k,pno),e(k,ls),e(ls,Oae),e(Oae,_no),e(ls,uno),e(ls,SP),e(SP,bno),e(ls,vno),e(ls,RP),e(RP,Fno),e(ls,Tno),e(k,Mno),e(k,Gg),e(Gg,Vae),e(Vae,Eno),e(Gg,Cno),e(Gg,PP),e(PP,wno),e(Gg,Ano),e(k,yno),e(k,is),e(is,Xae),e(Xae,Lno),e(is,xno),e(is,BP),e(BP,$no),e(is,kno),e(is,IP),e(IP,Sno),e(is,Rno),e(k,Pno),e(k,Og),e(Og,zae),e(zae,Bno),e(Og,Ino),e(Og,NP),e(NP,Nno),e(Og,qno),e(k,jno),e(k,Vg),e(Vg,Wae),e(Wae,Dno),e(Vg,Gno),e(Vg,qP),e(qP,Ono),e(Vg,Vno),e(k,Xno),e(k,ds),e(ds,Qae),e(Qae,zno),e(ds,Wno),e(ds,jP),e(jP,Qno),e(ds,Hno),e(ds,DP),e(DP,Uno),e(ds,Jno),e(k,Yno),e(k,cs),e(cs,Hae),e(Hae,Kno),e(cs,Zno),e(cs,GP),e(GP,eso),e(cs,oso),e(cs,OP),e(OP,rso),e(cs,tso),e(k,aso),e(k,fs),e(fs,Uae),e(Uae,nso),e(fs,sso),e(fs,VP),e(VP,lso),e(fs,iso),e(fs,XP),e(XP,dso),e(fs,cso),e(k,fso),e(k,Xg),e(Xg,Jae),e(Jae,mso),e(Xg,gso),e(Xg,zP),e(zP,hso),e(Xg,pso),e(k,_so),e(k,ms),e(ms,Yae),e(Yae,uso),e(ms,bso),e(ms,WP),e(WP,vso),e(ms,Fso),e(ms,QP),e(QP,Tso),e(ms,Mso),e(k,Eso),e(k,gs),e(gs,Kae),e(Kae,Cso),e(gs,wso),e(gs,HP),e(HP,Aso),e(gs,yso),e(gs,UP),e(UP,Lso),e(gs,xso),e(k,$so),e(k,hs),e(hs,Zae),e(Zae,kso),e(hs,Sso),e(hs,JP),e(JP,Rso),e(hs,Pso),e(hs,YP),e(YP,Bso),e(hs,Iso),e(k,Nso),e(k,ps),e(ps,ene),e(ene,qso),e(ps,jso),e(ps,KP),e(KP,Dso),e(ps,Gso),e(ps,ZP),e(ZP,Oso),e(ps,Vso),e(k,Xso),e(k,_s),e(_s,one),e(one,zso),e(_s,Wso),e(_s,eB),e(eB,Qso),e(_s,Hso),e(_s,oB),e(oB,Uso),e(_s,Jso),e(k,Yso),e(k,zg),e(zg,rne),e(rne,Kso),e(zg,Zso),e(zg,rB),e(rB,elo),e(zg,olo),e(k,rlo),e(k,us),e(us,tne),e(tne,tlo),e(us,alo),e(us,tB),e(tB,nlo),e(us,slo),e(us,aB),e(aB,llo),e(us,ilo),e(k,dlo),e(k,Wg),e(Wg,ane),e(ane,clo),e(Wg,flo),e(Wg,nB),e(nB,mlo),e(Wg,glo),e(k,hlo),e(k,Qg),e(Qg,nne),e(nne,plo),e(Qg,_lo),e(Qg,sB),e(sB,ulo),e(Qg,blo),e(k,vlo),e(k,Hg),e(Hg,sne),e(sne,Flo),e(Hg,Tlo),e(Hg,lB),e(lB,Mlo),e(Hg,Elo),e(k,Clo),e(k,Ug),e(Ug,lne),e(lne,wlo),e(Ug,Alo),e(Ug,iB),e(iB,ylo),e(Ug,Llo),e(k,xlo),e(k,bs),e(bs,ine),e(ine,$lo),e(bs,klo),e(bs,dB),e(dB,Slo),e(bs,Rlo),e(bs,cB),e(cB,Plo),e(bs,Blo),e(k,Ilo),e(k,Jg),e(Jg,dne),e(dne,Nlo),e(Jg,qlo),e(Jg,fB),e(fB,jlo),e(Jg,Dlo),e(k,Glo),e(k,vs),e(vs,cne),e(cne,Olo),e(vs,Vlo),e(vs,mB),e(mB,Xlo),e(vs,zlo),e(vs,gB),e(gB,Wlo),e(vs,Qlo),e(k,Hlo),e(k,Fs),e(Fs,fne),e(fne,Ulo),e(Fs,Jlo),e(Fs,hB),e(hB,Ylo),e(Fs,Klo),e(Fs,pB),e(pB,Zlo),e(Fs,eio),e(k,oio),e(k,Ts),e(Ts,mne),e(mne,rio),e(Ts,tio),e(Ts,_B),e(_B,aio),e(Ts,nio),e(Ts,uB),e(uB,sio),e(Ts,lio),e(k,iio),e(k,Ms),e(Ms,gne),e(gne,dio),e(Ms,cio),e(Ms,bB),e(bB,fio),e(Ms,mio),e(Ms,vB),e(vB,gio),e(Ms,hio),e(k,pio),e(k,Es),e(Es,hne),e(hne,_io),e(Es,uio),e(Es,FB),e(FB,bio),e(Es,vio),e(Es,TB),e(TB,Fio),e(Es,Tio),e(k,Mio),e(k,Cs),e(Cs,pne),e(pne,Eio),e(Cs,Cio),e(Cs,MB),e(MB,wio),e(Cs,Aio),e(Cs,EB),e(EB,yio),e(Cs,Lio),e(k,xio),e(k,Yg),e(Yg,_ne),e(_ne,$io),e(Yg,kio),e(Yg,CB),e(CB,Sio),e(Yg,Rio),e(k,Pio),e(k,Kg),e(Kg,une),e(une,Bio),e(Kg,Iio),e(Kg,wB),e(wB,Nio),e(Kg,qio),e(k,jio),e(k,ws),e(ws,bne),e(bne,Dio),e(ws,Gio),e(ws,AB),e(AB,Oio),e(ws,Vio),e(ws,yB),e(yB,Xio),e(ws,zio),e(k,Wio),e(k,As),e(As,vne),e(vne,Qio),e(As,Hio),e(As,LB),e(LB,Uio),e(As,Jio),e(As,xB),e(xB,Yio),e(As,Kio),e(k,Zio),e(k,ys),e(ys,Fne),e(Fne,edo),e(ys,odo),e(ys,$B),e($B,rdo),e(ys,tdo),e(ys,kB),e(kB,ado),e(ys,ndo),e(k,sdo),e(k,Zg),e(Zg,Tne),e(Tne,ldo),e(Zg,ido),e(Zg,SB),e(SB,ddo),e(Zg,cdo),e(k,fdo),e(k,eh),e(eh,Mne),e(Mne,mdo),e(eh,gdo),e(eh,RB),e(RB,hdo),e(eh,pdo),e(k,_do),e(k,oh),e(oh,Ene),e(Ene,udo),e(oh,bdo),e(oh,PB),e(PB,vdo),e(oh,Fdo),e(k,Tdo),e(k,Ls),e(Ls,Cne),e(Cne,Mdo),e(Ls,Edo),e(Ls,BB),e(BB,Cdo),e(Ls,wdo),e(Ls,IB),e(IB,Ado),e(Ls,ydo),e(k,Ldo),e(k,rh),e(rh,wne),e(wne,xdo),e(rh,$do),e(rh,NB),e(NB,kdo),e(rh,Sdo),e(k,Rdo),e(k,th),e(th,Ane),e(Ane,Pdo),e(th,Bdo),e(th,qB),e(qB,Ido),e(th,Ndo),e(k,qdo),e(k,ah),e(ah,yne),e(yne,jdo),e(ah,Ddo),e(ah,jB),e(jB,Gdo),e(ah,Odo),e(k,Vdo),e(k,xs),e(xs,Lne),e(Lne,Xdo),e(xs,zdo),e(xs,DB),e(DB,Wdo),e(xs,Qdo),e(xs,GB),e(GB,Hdo),e(xs,Udo),e(k,Jdo),e(k,nh),e(nh,xne),e(xne,Ydo),e(nh,Kdo),e(nh,OB),e(OB,Zdo),e(nh,eco),e(k,oco),e(k,sh),e(sh,$ne),e($ne,rco),e(sh,tco),e(sh,VB),e(VB,aco),e(sh,nco),e(k,sco),e(k,$s),e($s,kne),e(kne,lco),e($s,ico),e($s,XB),e(XB,dco),e($s,cco),e($s,zB),e(zB,fco),e($s,mco),e(k,gco),e(k,ks),e(ks,Sne),e(Sne,hco),e(ks,pco),e(ks,WB),e(WB,_co),e(ks,uco),e(ks,QB),e(QB,bco),e(ks,vco),e(k,Fco),e(k,Ss),e(Ss,Rne),e(Rne,Tco),e(Ss,Mco),e(Ss,HB),e(HB,Eco),e(Ss,Cco),e(Ss,UB),e(UB,wco),e(Ss,Aco),e(k,yco),e(k,Rs),e(Rs,Pne),e(Pne,Lco),e(Rs,xco),e(Rs,JB),e(JB,$co),e(Rs,kco),e(Rs,YB),e(YB,Sco),e(Rs,Rco),e(Cr,Pco),M(lh,Cr,null),e(wo,Bco),e(wo,ih),M(ZA,ih,null),e(ih,Ico),e(ih,Bne),e(Bne,Nco),b(f,sje,u),b(f,Ei,u),e(Ei,dh),e(dh,Ine),M(ey,Ine,null),e(Ei,qco),e(Ei,Nne),e(Nne,jco),b(f,lje,u),b(f,Ao,u),M(oy,Ao,null),e(Ao,Dco),e(Ao,ry),e(ry,Gco),e(ry,KB),e(KB,Oco),e(ry,Vco),e(Ao,Xco),e(Ao,ty),e(ty,zco),e(ty,qne),e(qne,Wco),e(ty,Qco),e(Ao,Hco),e(Ao,He),M(ay,He,null),e(He,Uco),e(He,jne),e(jne,Jco),e(He,Yco),e(He,ya),e(ya,Kco),e(ya,Dne),e(Dne,Zco),e(ya,efo),e(ya,Gne),e(Gne,ofo),e(ya,rfo),e(ya,One),e(One,tfo),e(ya,afo),e(He,nfo),e(He,Y),e(Y,ch),e(ch,Vne),e(Vne,sfo),e(ch,lfo),e(ch,ZB),e(ZB,ifo),e(ch,dfo),e(Y,cfo),e(Y,fh),e(fh,Xne),e(Xne,ffo),e(fh,mfo),e(fh,eI),e(eI,gfo),e(fh,hfo),e(Y,pfo),e(Y,mh),e(mh,zne),e(zne,_fo),e(mh,ufo),e(mh,oI),e(oI,bfo),e(mh,vfo),e(Y,Ffo),e(Y,gh),e(gh,Wne),e(Wne,Tfo),e(gh,Mfo),e(gh,rI),e(rI,Efo),e(gh,Cfo),e(Y,wfo),e(Y,hh),e(hh,Qne),e(Qne,Afo),e(hh,yfo),e(hh,tI),e(tI,Lfo),e(hh,xfo),e(Y,$fo),e(Y,ph),e(ph,Hne),e(Hne,kfo),e(ph,Sfo),e(ph,aI),e(aI,Rfo),e(ph,Pfo),e(Y,Bfo),e(Y,_h),e(_h,Une),e(Une,Ifo),e(_h,Nfo),e(_h,nI),e(nI,qfo),e(_h,jfo),e(Y,Dfo),e(Y,uh),e(uh,Jne),e(Jne,Gfo),e(uh,Ofo),e(uh,sI),e(sI,Vfo),e(uh,Xfo),e(Y,zfo),e(Y,bh),e(bh,Yne),e(Yne,Wfo),e(bh,Qfo),e(bh,lI),e(lI,Hfo),e(bh,Ufo),e(Y,Jfo),e(Y,vh),e(vh,Kne),e(Kne,Yfo),e(vh,Kfo),e(vh,iI),e(iI,Zfo),e(vh,emo),e(Y,omo),e(Y,Fh),e(Fh,Zne),e(Zne,rmo),e(Fh,tmo),e(Fh,dI),e(dI,amo),e(Fh,nmo),e(Y,smo),e(Y,Th),e(Th,ese),e(ese,lmo),e(Th,imo),e(Th,cI),e(cI,dmo),e(Th,cmo),e(Y,fmo),e(Y,Mh),e(Mh,ose),e(ose,mmo),e(Mh,gmo),e(Mh,fI),e(fI,hmo),e(Mh,pmo),e(Y,_mo),e(Y,Eh),e(Eh,rse),e(rse,umo),e(Eh,bmo),e(Eh,mI),e(mI,vmo),e(Eh,Fmo),e(Y,Tmo),e(Y,Ch),e(Ch,tse),e(tse,Mmo),e(Ch,Emo),e(Ch,gI),e(gI,Cmo),e(Ch,wmo),e(Y,Amo),e(Y,wh),e(wh,ase),e(ase,ymo),e(wh,Lmo),e(wh,hI),e(hI,xmo),e(wh,$mo),e(Y,kmo),e(Y,Ah),e(Ah,nse),e(nse,Smo),e(Ah,Rmo),e(Ah,pI),e(pI,Pmo),e(Ah,Bmo),e(Y,Imo),e(Y,yh),e(yh,sse),e(sse,Nmo),e(yh,qmo),e(yh,_I),e(_I,jmo),e(yh,Dmo),e(Y,Gmo),e(Y,Lh),e(Lh,lse),e(lse,Omo),e(Lh,Vmo),e(Lh,uI),e(uI,Xmo),e(Lh,zmo),e(Y,Wmo),e(Y,xh),e(xh,ise),e(ise,Qmo),e(xh,Hmo),e(xh,bI),e(bI,Umo),e(xh,Jmo),e(Y,Ymo),e(Y,$h),e($h,dse),e(dse,Kmo),e($h,Zmo),e($h,vI),e(vI,ego),e($h,ogo),e(Y,rgo),e(Y,kh),e(kh,cse),e(cse,tgo),e(kh,ago),e(kh,FI),e(FI,ngo),e(kh,sgo),e(Y,lgo),e(Y,Sh),e(Sh,fse),e(fse,igo),e(Sh,dgo),e(Sh,TI),e(TI,cgo),e(Sh,fgo),e(Y,mgo),e(Y,Rh),e(Rh,mse),e(mse,ggo),e(Rh,hgo),e(Rh,MI),e(MI,pgo),e(Rh,_go),e(Y,ugo),e(Y,Ph),e(Ph,gse),e(gse,bgo),e(Ph,vgo),e(Ph,EI),e(EI,Fgo),e(Ph,Tgo),e(Y,Mgo),e(Y,Bh),e(Bh,hse),e(hse,Ego),e(Bh,Cgo),e(Bh,CI),e(CI,wgo),e(Bh,Ago),e(Y,ygo),e(Y,Ih),e(Ih,pse),e(pse,Lgo),e(Ih,xgo),e(Ih,wI),e(wI,$go),e(Ih,kgo),e(Y,Sgo),e(Y,Nh),e(Nh,_se),e(_se,Rgo),e(Nh,Pgo),e(Nh,AI),e(AI,Bgo),e(Nh,Igo),e(Y,Ngo),e(Y,qh),e(qh,use),e(use,qgo),e(qh,jgo),e(qh,yI),e(yI,Dgo),e(qh,Ggo),e(Y,Ogo),e(Y,jh),e(jh,bse),e(bse,Vgo),e(jh,Xgo),e(jh,LI),e(LI,zgo),e(jh,Wgo),e(Y,Qgo),e(Y,Dh),e(Dh,vse),e(vse,Hgo),e(Dh,Ugo),e(Dh,xI),e(xI,Jgo),e(Dh,Ygo),e(He,Kgo),M(Gh,He,null),e(He,Zgo),M(Oh,He,null),e(Ao,eho),e(Ao,Vh),M(ny,Vh,null),e(Vh,oho),e(Vh,Fse),e(Fse,rho),b(f,ije,u),b(f,Ci,u),e(Ci,Xh),e(Xh,Tse),M(sy,Tse,null),e(Ci,tho),e(Ci,Mse),e(Mse,aho),b(f,dje,u),b(f,yo,u),M(ly,yo,null),e(yo,nho),e(yo,iy),e(iy,sho),e(iy,$I),e($I,lho),e(iy,iho),e(yo,dho),e(yo,dy),e(dy,cho),e(dy,Ese),e(Ese,fho),e(dy,mho),e(yo,gho),e(yo,Ue),M(cy,Ue,null),e(Ue,hho),e(Ue,Cse),e(Cse,pho),e(Ue,_ho),e(Ue,wi),e(wi,uho),e(wi,wse),e(wse,bho),e(wi,vho),e(wi,Ase),e(Ase,Fho),e(wi,Tho),e(Ue,Mho),e(Ue,he),e(he,zh),e(zh,yse),e(yse,Eho),e(zh,Cho),e(zh,kI),e(kI,who),e(zh,Aho),e(he,yho),e(he,Wh),e(Wh,Lse),e(Lse,Lho),e(Wh,xho),e(Wh,xse),e(xse,$ho),e(Wh,kho),e(he,Sho),e(he,Qh),e(Qh,$se),e($se,Rho),e(Qh,Pho),e(Qh,SI),e(SI,Bho),e(Qh,Iho),e(he,Nho),e(he,Hh),e(Hh,kse),e(kse,qho),e(Hh,jho),e(Hh,RI),e(RI,Dho),e(Hh,Gho),e(he,Oho),e(he,Uh),e(Uh,Sse),e(Sse,Vho),e(Uh,Xho),e(Uh,PI),e(PI,zho),e(Uh,Who),e(he,Qho),e(he,Jh),e(Jh,Rse),e(Rse,Hho),e(Jh,Uho),e(Jh,BI),e(BI,Jho),e(Jh,Yho),e(he,Kho),e(he,Yh),e(Yh,Pse),e(Pse,Zho),e(Yh,epo),e(Yh,II),e(II,opo),e(Yh,rpo),e(he,tpo),e(he,Kh),e(Kh,Bse),e(Bse,apo),e(Kh,npo),e(Kh,NI),e(NI,spo),e(Kh,lpo),e(he,ipo),e(he,Zh),e(Zh,Ise),e(Ise,dpo),e(Zh,cpo),e(Zh,qI),e(qI,fpo),e(Zh,mpo),e(he,gpo),e(he,ep),e(ep,Nse),e(Nse,hpo),e(ep,ppo),e(ep,jI),e(jI,_po),e(ep,upo),e(he,bpo),e(he,op),e(op,qse),e(qse,vpo),e(op,Fpo),e(op,DI),e(DI,Tpo),e(op,Mpo),e(he,Epo),e(he,rp),e(rp,jse),e(jse,Cpo),e(rp,wpo),e(rp,GI),e(GI,Apo),e(rp,ypo),e(he,Lpo),e(he,tp),e(tp,Dse),e(Dse,xpo),e(tp,$po),e(tp,OI),e(OI,kpo),e(tp,Spo),e(he,Rpo),e(he,ap),e(ap,Gse),e(Gse,Ppo),e(ap,Bpo),e(ap,VI),e(VI,Ipo),e(ap,Npo),e(he,qpo),e(he,np),e(np,Ose),e(Ose,jpo),e(np,Dpo),e(np,XI),e(XI,Gpo),e(np,Opo),e(he,Vpo),e(he,sp),e(sp,Vse),e(Vse,Xpo),e(sp,zpo),e(sp,zI),e(zI,Wpo),e(sp,Qpo),e(he,Hpo),e(he,lp),e(lp,Xse),e(Xse,Upo),e(lp,Jpo),e(lp,WI),e(WI,Ypo),e(lp,Kpo),e(Ue,Zpo),M(ip,Ue,null),e(Ue,e_o),M(dp,Ue,null),e(yo,o_o),e(yo,cp),M(fy,cp,null),e(cp,r_o),e(cp,zse),e(zse,t_o),b(f,cje,u),b(f,Ai,u),e(Ai,fp),e(fp,Wse),M(my,Wse,null),e(Ai,a_o),e(Ai,Qse),e(Qse,n_o),b(f,fje,u),b(f,Lo,u),M(gy,Lo,null),e(Lo,s_o),e(Lo,yi),e(yi,l_o),e(yi,QI),e(QI,i_o),e(yi,d_o),e(yi,HI),e(HI,c_o),e(yi,f_o),e(Lo,m_o),e(Lo,hy),e(hy,g_o),e(hy,Hse),e(Hse,h_o),e(hy,p_o),e(Lo,__o),e(Lo,tt),M(py,tt,null),e(tt,u_o),e(tt,Use),e(Use,b_o),e(tt,v_o),e(tt,Li),e(Li,F_o),e(Li,Jse),e(Jse,T_o),e(Li,M_o),e(Li,UI),e(UI,E_o),e(Li,C_o),e(tt,w_o),M(mp,tt,null),e(Lo,A_o),e(Lo,Je),M(_y,Je,null),e(Je,y_o),e(Je,Yse),e(Yse,L_o),e(Je,x_o),e(Je,La),e(La,$_o),e(La,Kse),e(Kse,k_o),e(La,S_o),e(La,Zse),e(Zse,R_o),e(La,P_o),e(La,ele),e(ele,B_o),e(La,I_o),e(Je,N_o),e(Je,x),e(x,gp),e(gp,ole),e(ole,q_o),e(gp,j_o),e(gp,JI),e(JI,D_o),e(gp,G_o),e(x,O_o),e(x,hp),e(hp,rle),e(rle,V_o),e(hp,X_o),e(hp,YI),e(YI,z_o),e(hp,W_o),e(x,Q_o),e(x,pp),e(pp,tle),e(tle,H_o),e(pp,U_o),e(pp,KI),e(KI,J_o),e(pp,Y_o),e(x,K_o),e(x,_p),e(_p,ale),e(ale,Z_o),e(_p,euo),e(_p,ZI),e(ZI,ouo),e(_p,ruo),e(x,tuo),e(x,up),e(up,nle),e(nle,auo),e(up,nuo),e(up,eN),e(eN,suo),e(up,luo),e(x,iuo),e(x,bp),e(bp,sle),e(sle,duo),e(bp,cuo),e(bp,oN),e(oN,fuo),e(bp,muo),e(x,guo),e(x,vp),e(vp,lle),e(lle,huo),e(vp,puo),e(vp,rN),e(rN,_uo),e(vp,uuo),e(x,buo),e(x,Fp),e(Fp,ile),e(ile,vuo),e(Fp,Fuo),e(Fp,tN),e(tN,Tuo),e(Fp,Muo),e(x,Euo),e(x,Tp),e(Tp,dle),e(dle,Cuo),e(Tp,wuo),e(Tp,aN),e(aN,Auo),e(Tp,yuo),e(x,Luo),e(x,Mp),e(Mp,cle),e(cle,xuo),e(Mp,$uo),e(Mp,nN),e(nN,kuo),e(Mp,Suo),e(x,Ruo),e(x,Ep),e(Ep,fle),e(fle,Puo),e(Ep,Buo),e(Ep,sN),e(sN,Iuo),e(Ep,Nuo),e(x,quo),e(x,Cp),e(Cp,mle),e(mle,juo),e(Cp,Duo),e(Cp,lN),e(lN,Guo),e(Cp,Ouo),e(x,Vuo),e(x,wp),e(wp,gle),e(gle,Xuo),e(wp,zuo),e(wp,iN),e(iN,Wuo),e(wp,Quo),e(x,Huo),e(x,Ap),e(Ap,hle),e(hle,Uuo),e(Ap,Juo),e(Ap,dN),e(dN,Yuo),e(Ap,Kuo),e(x,Zuo),e(x,yp),e(yp,ple),e(ple,e2o),e(yp,o2o),e(yp,cN),e(cN,r2o),e(yp,t2o),e(x,a2o),e(x,Lp),e(Lp,_le),e(_le,n2o),e(Lp,s2o),e(Lp,fN),e(fN,l2o),e(Lp,i2o),e(x,d2o),e(x,xp),e(xp,ule),e(ule,c2o),e(xp,f2o),e(xp,mN),e(mN,m2o),e(xp,g2o),e(x,h2o),e(x,$p),e($p,ble),e(ble,p2o),e($p,_2o),e($p,gN),e(gN,u2o),e($p,b2o),e(x,v2o),e(x,kp),e(kp,vle),e(vle,F2o),e(kp,T2o),e(kp,hN),e(hN,M2o),e(kp,E2o),e(x,C2o),e(x,Sp),e(Sp,Fle),e(Fle,w2o),e(Sp,A2o),e(Sp,pN),e(pN,y2o),e(Sp,L2o),e(x,x2o),e(x,Rp),e(Rp,Tle),e(Tle,$2o),e(Rp,k2o),e(Rp,_N),e(_N,S2o),e(Rp,R2o),e(x,P2o),e(x,Pp),e(Pp,Mle),e(Mle,B2o),e(Pp,I2o),e(Pp,uN),e(uN,N2o),e(Pp,q2o),e(x,j2o),e(x,Bp),e(Bp,Ele),e(Ele,D2o),e(Bp,G2o),e(Bp,bN),e(bN,O2o),e(Bp,V2o),e(x,X2o),e(x,Ip),e(Ip,Cle),e(Cle,z2o),e(Ip,W2o),e(Ip,vN),e(vN,Q2o),e(Ip,H2o),e(x,U2o),e(x,Np),e(Np,wle),e(wle,J2o),e(Np,Y2o),e(Np,FN),e(FN,K2o),e(Np,Z2o),e(x,e1o),e(x,qp),e(qp,Ale),e(Ale,o1o),e(qp,r1o),e(qp,TN),e(TN,t1o),e(qp,a1o),e(x,n1o),e(x,jp),e(jp,yle),e(yle,s1o),e(jp,l1o),e(jp,MN),e(MN,i1o),e(jp,d1o),e(x,c1o),e(x,Dp),e(Dp,Lle),e(Lle,f1o),e(Dp,m1o),e(Dp,EN),e(EN,g1o),e(Dp,h1o),e(x,p1o),e(x,Gp),e(Gp,xle),e(xle,_1o),e(Gp,u1o),e(Gp,CN),e(CN,b1o),e(Gp,v1o),e(x,F1o),e(x,Op),e(Op,$le),e($le,T1o),e(Op,M1o),e(Op,wN),e(wN,E1o),e(Op,C1o),e(x,w1o),e(x,Vp),e(Vp,kle),e(kle,A1o),e(Vp,y1o),e(Vp,AN),e(AN,L1o),e(Vp,x1o),e(x,$1o),e(x,Xp),e(Xp,Sle),e(Sle,k1o),e(Xp,S1o),e(Xp,yN),e(yN,R1o),e(Xp,P1o),e(x,B1o),e(x,Ps),e(Ps,Rle),e(Rle,I1o),e(Ps,N1o),e(Ps,LN),e(LN,q1o),e(Ps,j1o),e(Ps,xN),e(xN,D1o),e(Ps,G1o),e(x,O1o),e(x,zp),e(zp,Ple),e(Ple,V1o),e(zp,X1o),e(zp,$N),e($N,z1o),e(zp,W1o),e(x,Q1o),e(x,Wp),e(Wp,Ble),e(Ble,H1o),e(Wp,U1o),e(Wp,kN),e(kN,J1o),e(Wp,Y1o),e(x,K1o),e(x,Qp),e(Qp,Ile),e(Ile,Z1o),e(Qp,ebo),e(Qp,SN),e(SN,obo),e(Qp,rbo),e(x,tbo),e(x,Hp),e(Hp,Nle),e(Nle,abo),e(Hp,nbo),e(Hp,RN),e(RN,sbo),e(Hp,lbo),e(x,ibo),e(x,Up),e(Up,qle),e(qle,dbo),e(Up,cbo),e(Up,PN),e(PN,fbo),e(Up,mbo),e(x,gbo),e(x,Jp),e(Jp,jle),e(jle,hbo),e(Jp,pbo),e(Jp,BN),e(BN,_bo),e(Jp,ubo),e(x,bbo),e(x,Yp),e(Yp,Dle),e(Dle,vbo),e(Yp,Fbo),e(Yp,IN),e(IN,Tbo),e(Yp,Mbo),e(x,Ebo),e(x,Kp),e(Kp,Gle),e(Gle,Cbo),e(Kp,wbo),e(Kp,NN),e(NN,Abo),e(Kp,ybo),e(x,Lbo),e(x,Zp),e(Zp,Ole),e(Ole,xbo),e(Zp,$bo),e(Zp,qN),e(qN,kbo),e(Zp,Sbo),e(x,Rbo),e(x,e_),e(e_,Vle),e(Vle,Pbo),e(e_,Bbo),e(e_,jN),e(jN,Ibo),e(e_,Nbo),e(x,qbo),e(x,o_),e(o_,Xle),e(Xle,jbo),e(o_,Dbo),e(o_,DN),e(DN,Gbo),e(o_,Obo),e(x,Vbo),e(x,r_),e(r_,zle),e(zle,Xbo),e(r_,zbo),e(r_,GN),e(GN,Wbo),e(r_,Qbo),e(x,Hbo),e(x,t_),e(t_,Wle),e(Wle,Ubo),e(t_,Jbo),e(t_,ON),e(ON,Ybo),e(t_,Kbo),e(x,Zbo),e(x,a_),e(a_,Qle),e(Qle,evo),e(a_,ovo),e(a_,VN),e(VN,rvo),e(a_,tvo),e(x,avo),e(x,n_),e(n_,Hle),e(Hle,nvo),e(n_,svo),e(n_,XN),e(XN,lvo),e(n_,ivo),e(x,dvo),e(x,s_),e(s_,Ule),e(Ule,cvo),e(s_,fvo),e(s_,zN),e(zN,mvo),e(s_,gvo),e(x,hvo),e(x,l_),e(l_,Jle),e(Jle,pvo),e(l_,_vo),e(l_,WN),e(WN,uvo),e(l_,bvo),e(x,vvo),e(x,i_),e(i_,Yle),e(Yle,Fvo),e(i_,Tvo),e(i_,QN),e(QN,Mvo),e(i_,Evo),e(x,Cvo),e(x,d_),e(d_,Kle),e(Kle,wvo),e(d_,Avo),e(d_,HN),e(HN,yvo),e(d_,Lvo),e(x,xvo),e(x,c_),e(c_,Zle),e(Zle,$vo),e(c_,kvo),e(c_,UN),e(UN,Svo),e(c_,Rvo),e(x,Pvo),e(x,f_),e(f_,eie),e(eie,Bvo),e(f_,Ivo),e(f_,JN),e(JN,Nvo),e(f_,qvo),e(x,jvo),e(x,m_),e(m_,oie),e(oie,Dvo),e(m_,Gvo),e(m_,YN),e(YN,Ovo),e(m_,Vvo),e(x,Xvo),e(x,g_),e(g_,rie),e(rie,zvo),e(g_,Wvo),e(g_,KN),e(KN,Qvo),e(g_,Hvo),e(x,Uvo),e(x,h_),e(h_,tie),e(tie,Jvo),e(h_,Yvo),e(h_,ZN),e(ZN,Kvo),e(h_,Zvo),e(x,eFo),e(x,p_),e(p_,aie),e(aie,oFo),e(p_,rFo),e(p_,eq),e(eq,tFo),e(p_,aFo),e(x,nFo),e(x,__),e(__,nie),e(nie,sFo),e(__,lFo),e(__,oq),e(oq,iFo),e(__,dFo),e(x,cFo),e(x,u_),e(u_,sie),e(sie,fFo),e(u_,mFo),e(u_,rq),e(rq,gFo),e(u_,hFo),e(x,pFo),e(x,b_),e(b_,lie),e(lie,_Fo),e(b_,uFo),e(b_,tq),e(tq,bFo),e(b_,vFo),e(x,FFo),e(x,v_),e(v_,iie),e(iie,TFo),e(v_,MFo),e(v_,aq),e(aq,EFo),e(v_,CFo),e(x,wFo),e(x,F_),e(F_,die),e(die,AFo),e(F_,yFo),e(F_,nq),e(nq,LFo),e(F_,xFo),e(x,$Fo),e(x,T_),e(T_,cie),e(cie,kFo),e(T_,SFo),e(T_,sq),e(sq,RFo),e(T_,PFo),e(x,BFo),e(x,M_),e(M_,fie),e(fie,IFo),e(M_,NFo),e(M_,lq),e(lq,qFo),e(M_,jFo),e(x,DFo),e(x,E_),e(E_,mie),e(mie,GFo),e(E_,OFo),e(E_,iq),e(iq,VFo),e(E_,XFo),e(x,zFo),e(x,C_),e(C_,gie),e(gie,WFo),e(C_,QFo),e(C_,dq),e(dq,HFo),e(C_,UFo),e(x,JFo),e(x,w_),e(w_,hie),e(hie,YFo),e(w_,KFo),e(w_,cq),e(cq,ZFo),e(w_,e6o),e(x,o6o),e(x,A_),e(A_,pie),e(pie,r6o),e(A_,t6o),e(A_,fq),e(fq,a6o),e(A_,n6o),e(x,s6o),e(x,y_),e(y_,_ie),e(_ie,l6o),e(y_,i6o),e(y_,mq),e(mq,d6o),e(y_,c6o),e(x,f6o),e(x,L_),e(L_,uie),e(uie,m6o),e(L_,g6o),e(L_,gq),e(gq,h6o),e(L_,p6o),e(x,_6o),e(x,x_),e(x_,bie),e(bie,u6o),e(x_,b6o),e(x_,hq),e(hq,v6o),e(x_,F6o),e(x,T6o),e(x,$_),e($_,vie),e(vie,M6o),e($_,E6o),e($_,pq),e(pq,C6o),e($_,w6o),e(x,A6o),e(x,k_),e(k_,Fie),e(Fie,y6o),e(k_,L6o),e(k_,_q),e(_q,x6o),e(k_,$6o),e(x,k6o),e(x,S_),e(S_,Tie),e(Tie,S6o),e(S_,R6o),e(S_,uq),e(uq,P6o),e(S_,B6o),e(x,I6o),e(x,R_),e(R_,Mie),e(Mie,N6o),e(R_,q6o),e(R_,bq),e(bq,j6o),e(R_,D6o),e(x,G6o),e(x,P_),e(P_,Eie),e(Eie,O6o),e(P_,V6o),e(P_,vq),e(vq,X6o),e(P_,z6o),e(x,W6o),e(x,B_),e(B_,Cie),e(Cie,Q6o),e(B_,H6o),e(B_,Fq),e(Fq,U6o),e(B_,J6o),e(x,Y6o),e(x,I_),e(I_,wie),e(wie,K6o),e(I_,Z6o),e(I_,Tq),e(Tq,eTo),e(I_,oTo),e(x,rTo),e(x,N_),e(N_,Aie),e(Aie,tTo),e(N_,aTo),e(N_,Mq),e(Mq,nTo),e(N_,sTo),e(x,lTo),e(x,q_),e(q_,yie),e(yie,iTo),e(q_,dTo),e(q_,Eq),e(Eq,cTo),e(q_,fTo),e(x,mTo),e(x,j_),e(j_,Lie),e(Lie,gTo),e(j_,hTo),e(j_,Cq),e(Cq,pTo),e(j_,_To),e(x,uTo),e(x,D_),e(D_,xie),e(xie,bTo),e(D_,vTo),e(D_,wq),e(wq,FTo),e(D_,TTo),e(x,MTo),e(x,G_),e(G_,$ie),e($ie,ETo),e(G_,CTo),e(G_,Aq),e(Aq,wTo),e(G_,ATo),e(x,yTo),e(x,O_),e(O_,kie),e(kie,LTo),e(O_,xTo),e(O_,yq),e(yq,$To),e(O_,kTo),e(x,STo),e(x,V_),e(V_,Sie),e(Sie,RTo),e(V_,PTo),e(V_,Lq),e(Lq,BTo),e(V_,ITo),e(x,NTo),e(x,X_),e(X_,Rie),e(Rie,qTo),e(X_,jTo),e(X_,xq),e(xq,DTo),e(X_,GTo),e(x,OTo),e(x,z_),e(z_,Pie),e(Pie,VTo),e(z_,XTo),e(z_,$q),e($q,zTo),e(z_,WTo),e(x,QTo),e(x,W_),e(W_,Bie),e(Bie,HTo),e(W_,UTo),e(W_,kq),e(kq,JTo),e(W_,YTo),e(x,KTo),e(x,Q_),e(Q_,Iie),e(Iie,ZTo),e(Q_,e7o),e(Q_,Sq),e(Sq,o7o),e(Q_,r7o),e(x,t7o),e(x,H_),e(H_,Nie),e(Nie,a7o),e(H_,n7o),e(H_,Rq),e(Rq,s7o),e(H_,l7o),e(x,i7o),e(x,U_),e(U_,qie),e(qie,d7o),e(U_,c7o),e(U_,Pq),e(Pq,f7o),e(U_,m7o),e(x,g7o),e(x,J_),e(J_,jie),e(jie,h7o),e(J_,p7o),e(J_,Bq),e(Bq,_7o),e(J_,u7o),e(x,b7o),e(x,Y_),e(Y_,Die),e(Die,v7o),e(Y_,F7o),e(Y_,Iq),e(Iq,T7o),e(Y_,M7o),e(x,E7o),e(x,K_),e(K_,Gie),e(Gie,C7o),e(K_,w7o),e(K_,Nq),e(Nq,A7o),e(K_,y7o),e(x,L7o),e(x,Z_),e(Z_,Oie),e(Oie,x7o),e(Z_,$7o),e(Z_,qq),e(qq,k7o),e(Z_,S7o),e(x,R7o),e(x,eu),e(eu,Vie),e(Vie,P7o),e(eu,B7o),e(eu,jq),e(jq,I7o),e(eu,N7o),e(x,q7o),e(x,ou),e(ou,Xie),e(Xie,j7o),e(ou,D7o),e(ou,Dq),e(Dq,G7o),e(ou,O7o),e(x,V7o),e(x,ru),e(ru,zie),e(zie,X7o),e(ru,z7o),e(ru,Gq),e(Gq,W7o),e(ru,Q7o),e(x,H7o),e(x,tu),e(tu,Wie),e(Wie,U7o),e(tu,J7o),e(tu,Oq),e(Oq,Y7o),e(tu,K7o),e(x,Z7o),e(x,au),e(au,Qie),e(Qie,eMo),e(au,oMo),e(au,Vq),e(Vq,rMo),e(au,tMo),e(x,aMo),e(x,nu),e(nu,Hie),e(Hie,nMo),e(nu,sMo),e(nu,Xq),e(Xq,lMo),e(nu,iMo),e(x,dMo),e(x,su),e(su,Uie),e(Uie,cMo),e(su,fMo),e(su,zq),e(zq,mMo),e(su,gMo),e(x,hMo),e(x,lu),e(lu,Jie),e(Jie,pMo),e(lu,_Mo),e(lu,Wq),e(Wq,uMo),e(lu,bMo),e(Je,vMo),e(Je,iu),e(iu,FMo),e(iu,Yie),e(Yie,TMo),e(iu,MMo),e(iu,Kie),e(Kie,EMo),e(Je,CMo),M(du,Je,null),b(f,mje,u),b(f,xi,u),e(xi,cu),e(cu,Zie),M(uy,Zie,null),e(xi,wMo),e(xi,ede),e(ede,AMo),b(f,gje,u),b(f,xo,u),M(by,xo,null),e(xo,yMo),e(xo,$i),e($i,LMo),e($i,Qq),e(Qq,xMo),e($i,$Mo),e($i,Hq),e(Hq,kMo),e($i,SMo),e(xo,RMo),e(xo,vy),e(vy,PMo),e(vy,ode),e(ode,BMo),e(vy,IMo),e(xo,NMo),e(xo,at),M(Fy,at,null),e(at,qMo),e(at,rde),e(rde,jMo),e(at,DMo),e(at,ki),e(ki,GMo),e(ki,tde),e(tde,OMo),e(ki,VMo),e(ki,Uq),e(Uq,XMo),e(ki,zMo),e(at,WMo),M(fu,at,null),e(xo,QMo),e(xo,Ye),M(Ty,Ye,null),e(Ye,HMo),e(Ye,ade),e(ade,UMo),e(Ye,JMo),e(Ye,xa),e(xa,YMo),e(xa,nde),e(nde,KMo),e(xa,ZMo),e(xa,sde),e(sde,e4o),e(xa,o4o),e(xa,lde),e(lde,r4o),e(xa,t4o),e(Ye,a4o),e(Ye,G),e(G,mu),e(mu,ide),e(ide,n4o),e(mu,s4o),e(mu,Jq),e(Jq,l4o),e(mu,i4o),e(G,d4o),e(G,gu),e(gu,dde),e(dde,c4o),e(gu,f4o),e(gu,Yq),e(Yq,m4o),e(gu,g4o),e(G,h4o),e(G,hu),e(hu,cde),e(cde,p4o),e(hu,_4o),e(hu,Kq),e(Kq,u4o),e(hu,b4o),e(G,v4o),e(G,pu),e(pu,fde),e(fde,F4o),e(pu,T4o),e(pu,Zq),e(Zq,M4o),e(pu,E4o),e(G,C4o),e(G,_u),e(_u,mde),e(mde,w4o),e(_u,A4o),e(_u,ej),e(ej,y4o),e(_u,L4o),e(G,x4o),e(G,uu),e(uu,gde),e(gde,$4o),e(uu,k4o),e(uu,oj),e(oj,S4o),e(uu,R4o),e(G,P4o),e(G,bu),e(bu,hde),e(hde,B4o),e(bu,I4o),e(bu,rj),e(rj,N4o),e(bu,q4o),e(G,j4o),e(G,vu),e(vu,pde),e(pde,D4o),e(vu,G4o),e(vu,tj),e(tj,O4o),e(vu,V4o),e(G,X4o),e(G,Fu),e(Fu,_de),e(_de,z4o),e(Fu,W4o),e(Fu,aj),e(aj,Q4o),e(Fu,H4o),e(G,U4o),e(G,Tu),e(Tu,ude),e(ude,J4o),e(Tu,Y4o),e(Tu,nj),e(nj,K4o),e(Tu,Z4o),e(G,eEo),e(G,Mu),e(Mu,bde),e(bde,oEo),e(Mu,rEo),e(Mu,sj),e(sj,tEo),e(Mu,aEo),e(G,nEo),e(G,Eu),e(Eu,vde),e(vde,sEo),e(Eu,lEo),e(Eu,lj),e(lj,iEo),e(Eu,dEo),e(G,cEo),e(G,Cu),e(Cu,Fde),e(Fde,fEo),e(Cu,mEo),e(Cu,ij),e(ij,gEo),e(Cu,hEo),e(G,pEo),e(G,wu),e(wu,Tde),e(Tde,_Eo),e(wu,uEo),e(wu,dj),e(dj,bEo),e(wu,vEo),e(G,FEo),e(G,Au),e(Au,Mde),e(Mde,TEo),e(Au,MEo),e(Au,cj),e(cj,EEo),e(Au,CEo),e(G,wEo),e(G,yu),e(yu,Ede),e(Ede,AEo),e(yu,yEo),e(yu,fj),e(fj,LEo),e(yu,xEo),e(G,$Eo),e(G,Lu),e(Lu,Cde),e(Cde,kEo),e(Lu,SEo),e(Lu,mj),e(mj,REo),e(Lu,PEo),e(G,BEo),e(G,xu),e(xu,wde),e(wde,IEo),e(xu,NEo),e(xu,gj),e(gj,qEo),e(xu,jEo),e(G,DEo),e(G,$u),e($u,Ade),e(Ade,GEo),e($u,OEo),e($u,hj),e(hj,VEo),e($u,XEo),e(G,zEo),e(G,ku),e(ku,yde),e(yde,WEo),e(ku,QEo),e(ku,pj),e(pj,HEo),e(ku,UEo),e(G,JEo),e(G,Su),e(Su,Lde),e(Lde,YEo),e(Su,KEo),e(Su,_j),e(_j,ZEo),e(Su,eCo),e(G,oCo),e(G,Ru),e(Ru,xde),e(xde,rCo),e(Ru,tCo),e(Ru,uj),e(uj,aCo),e(Ru,nCo),e(G,sCo),e(G,Pu),e(Pu,$de),e($de,lCo),e(Pu,iCo),e(Pu,bj),e(bj,dCo),e(Pu,cCo),e(G,fCo),e(G,Bu),e(Bu,kde),e(kde,mCo),e(Bu,gCo),e(Bu,vj),e(vj,hCo),e(Bu,pCo),e(G,_Co),e(G,Iu),e(Iu,Sde),e(Sde,uCo),e(Iu,bCo),e(Iu,Fj),e(Fj,vCo),e(Iu,FCo),e(G,TCo),e(G,Nu),e(Nu,Rde),e(Rde,MCo),e(Nu,ECo),e(Nu,Tj),e(Tj,CCo),e(Nu,wCo),e(G,ACo),e(G,qu),e(qu,Pde),e(Pde,yCo),e(qu,LCo),e(qu,Mj),e(Mj,xCo),e(qu,$Co),e(G,kCo),e(G,ju),e(ju,Bde),e(Bde,SCo),e(ju,RCo),e(ju,Ej),e(Ej,PCo),e(ju,BCo),e(G,ICo),e(G,Du),e(Du,Ide),e(Ide,NCo),e(Du,qCo),e(Du,Cj),e(Cj,jCo),e(Du,DCo),e(G,GCo),e(G,Gu),e(Gu,Nde),e(Nde,OCo),e(Gu,VCo),e(Gu,wj),e(wj,XCo),e(Gu,zCo),e(G,WCo),e(G,Ou),e(Ou,qde),e(qde,QCo),e(Ou,HCo),e(Ou,Aj),e(Aj,UCo),e(Ou,JCo),e(G,YCo),e(G,Vu),e(Vu,jde),e(jde,KCo),e(Vu,ZCo),e(Vu,yj),e(yj,e5o),e(Vu,o5o),e(G,r5o),e(G,Xu),e(Xu,Dde),e(Dde,t5o),e(Xu,a5o),e(Xu,Lj),e(Lj,n5o),e(Xu,s5o),e(G,l5o),e(G,zu),e(zu,Gde),e(Gde,i5o),e(zu,d5o),e(zu,xj),e(xj,c5o),e(zu,f5o),e(G,m5o),e(G,Wu),e(Wu,Ode),e(Ode,g5o),e(Wu,h5o),e(Wu,$j),e($j,p5o),e(Wu,_5o),e(G,u5o),e(G,Qu),e(Qu,Vde),e(Vde,b5o),e(Qu,v5o),e(Qu,kj),e(kj,F5o),e(Qu,T5o),e(G,M5o),e(G,Hu),e(Hu,Xde),e(Xde,E5o),e(Hu,C5o),e(Hu,Sj),e(Sj,w5o),e(Hu,A5o),e(G,y5o),e(G,Uu),e(Uu,zde),e(zde,L5o),e(Uu,x5o),e(Uu,Rj),e(Rj,$5o),e(Uu,k5o),e(G,S5o),e(G,Ju),e(Ju,Wde),e(Wde,R5o),e(Ju,P5o),e(Ju,Pj),e(Pj,B5o),e(Ju,I5o),e(G,N5o),e(G,Yu),e(Yu,Qde),e(Qde,q5o),e(Yu,j5o),e(Yu,Bj),e(Bj,D5o),e(Yu,G5o),e(G,O5o),e(G,Ku),e(Ku,Hde),e(Hde,V5o),e(Ku,X5o),e(Ku,Ij),e(Ij,z5o),e(Ku,W5o),e(G,Q5o),e(G,Zu),e(Zu,Ude),e(Ude,H5o),e(Zu,U5o),e(Zu,Nj),e(Nj,J5o),e(Zu,Y5o),e(Ye,K5o),e(Ye,e2),e(e2,Z5o),e(e2,Jde),e(Jde,e3o),e(e2,o3o),e(e2,Yde),e(Yde,r3o),e(Ye,t3o),M(o2,Ye,null),b(f,hje,u),b(f,Si,u),e(Si,r2),e(r2,Kde),M(My,Kde,null),e(Si,a3o),e(Si,Zde),e(Zde,n3o),b(f,pje,u),b(f,$o,u),M(Ey,$o,null),e($o,s3o),e($o,Ri),e(Ri,l3o),e(Ri,qj),e(qj,i3o),e(Ri,d3o),e(Ri,jj),e(jj,c3o),e(Ri,f3o),e($o,m3o),e($o,Cy),e(Cy,g3o),e(Cy,ece),e(ece,h3o),e(Cy,p3o),e($o,_3o),e($o,nt),M(wy,nt,null),e(nt,u3o),e(nt,oce),e(oce,b3o),e(nt,v3o),e(nt,Pi),e(Pi,F3o),e(Pi,rce),e(rce,T3o),e(Pi,M3o),e(Pi,Dj),e(Dj,E3o),e(Pi,C3o),e(nt,w3o),M(t2,nt,null),e($o,A3o),e($o,Ke),M(Ay,Ke,null),e(Ke,y3o),e(Ke,tce),e(tce,L3o),e(Ke,x3o),e(Ke,$a),e($a,$3o),e($a,ace),e(ace,k3o),e($a,S3o),e($a,nce),e(nce,R3o),e($a,P3o),e($a,sce),e(sce,B3o),e($a,I3o),e(Ke,N3o),e(Ke,z),e(z,a2),e(a2,lce),e(lce,q3o),e(a2,j3o),e(a2,Gj),e(Gj,D3o),e(a2,G3o),e(z,O3o),e(z,n2),e(n2,ice),e(ice,V3o),e(n2,X3o),e(n2,Oj),e(Oj,z3o),e(n2,W3o),e(z,Q3o),e(z,s2),e(s2,dce),e(dce,H3o),e(s2,U3o),e(s2,Vj),e(Vj,J3o),e(s2,Y3o),e(z,K3o),e(z,l2),e(l2,cce),e(cce,Z3o),e(l2,e0o),e(l2,Xj),e(Xj,o0o),e(l2,r0o),e(z,t0o),e(z,i2),e(i2,fce),e(fce,a0o),e(i2,n0o),e(i2,zj),e(zj,s0o),e(i2,l0o),e(z,i0o),e(z,d2),e(d2,mce),e(mce,d0o),e(d2,c0o),e(d2,Wj),e(Wj,f0o),e(d2,m0o),e(z,g0o),e(z,c2),e(c2,gce),e(gce,h0o),e(c2,p0o),e(c2,Qj),e(Qj,_0o),e(c2,u0o),e(z,b0o),e(z,f2),e(f2,hce),e(hce,v0o),e(f2,F0o),e(f2,Hj),e(Hj,T0o),e(f2,M0o),e(z,E0o),e(z,m2),e(m2,pce),e(pce,C0o),e(m2,w0o),e(m2,Uj),e(Uj,A0o),e(m2,y0o),e(z,L0o),e(z,g2),e(g2,_ce),e(_ce,x0o),e(g2,$0o),e(g2,Jj),e(Jj,k0o),e(g2,S0o),e(z,R0o),e(z,h2),e(h2,uce),e(uce,P0o),e(h2,B0o),e(h2,Yj),e(Yj,I0o),e(h2,N0o),e(z,q0o),e(z,p2),e(p2,bce),e(bce,j0o),e(p2,D0o),e(p2,Kj),e(Kj,G0o),e(p2,O0o),e(z,V0o),e(z,_2),e(_2,vce),e(vce,X0o),e(_2,z0o),e(_2,Zj),e(Zj,W0o),e(_2,Q0o),e(z,H0o),e(z,u2),e(u2,Fce),e(Fce,U0o),e(u2,J0o),e(u2,eD),e(eD,Y0o),e(u2,K0o),e(z,Z0o),e(z,b2),e(b2,Tce),e(Tce,ewo),e(b2,owo),e(b2,oD),e(oD,rwo),e(b2,two),e(z,awo),e(z,v2),e(v2,Mce),e(Mce,nwo),e(v2,swo),e(v2,rD),e(rD,lwo),e(v2,iwo),e(z,dwo),e(z,F2),e(F2,Ece),e(Ece,cwo),e(F2,fwo),e(F2,tD),e(tD,mwo),e(F2,gwo),e(z,hwo),e(z,T2),e(T2,Cce),e(Cce,pwo),e(T2,_wo),e(T2,aD),e(aD,uwo),e(T2,bwo),e(z,vwo),e(z,M2),e(M2,wce),e(wce,Fwo),e(M2,Two),e(M2,nD),e(nD,Mwo),e(M2,Ewo),e(z,Cwo),e(z,E2),e(E2,Ace),e(Ace,wwo),e(E2,Awo),e(E2,sD),e(sD,ywo),e(E2,Lwo),e(z,xwo),e(z,C2),e(C2,yce),e(yce,$wo),e(C2,kwo),e(C2,lD),e(lD,Swo),e(C2,Rwo),e(z,Pwo),e(z,w2),e(w2,Lce),e(Lce,Bwo),e(w2,Iwo),e(w2,iD),e(iD,Nwo),e(w2,qwo),e(z,jwo),e(z,A2),e(A2,xce),e(xce,Dwo),e(A2,Gwo),e(A2,dD),e(dD,Owo),e(A2,Vwo),e(z,Xwo),e(z,y2),e(y2,$ce),e($ce,zwo),e(y2,Wwo),e(y2,cD),e(cD,Qwo),e(y2,Hwo),e(z,Uwo),e(z,L2),e(L2,kce),e(kce,Jwo),e(L2,Ywo),e(L2,fD),e(fD,Kwo),e(L2,Zwo),e(z,eAo),e(z,x2),e(x2,Sce),e(Sce,oAo),e(x2,rAo),e(x2,mD),e(mD,tAo),e(x2,aAo),e(z,nAo),e(z,$2),e($2,Rce),e(Rce,sAo),e($2,lAo),e($2,gD),e(gD,iAo),e($2,dAo),e(z,cAo),e(z,k2),e(k2,Pce),e(Pce,fAo),e(k2,mAo),e(k2,hD),e(hD,gAo),e(k2,hAo),e(z,pAo),e(z,S2),e(S2,Bce),e(Bce,_Ao),e(S2,uAo),e(S2,pD),e(pD,bAo),e(S2,vAo),e(z,FAo),e(z,R2),e(R2,Ice),e(Ice,TAo),e(R2,MAo),e(R2,_D),e(_D,EAo),e(R2,CAo),e(z,wAo),e(z,P2),e(P2,Nce),e(Nce,AAo),e(P2,yAo),e(P2,uD),e(uD,LAo),e(P2,xAo),e(z,$Ao),e(z,B2),e(B2,qce),e(qce,kAo),e(B2,SAo),e(B2,bD),e(bD,RAo),e(B2,PAo),e(z,BAo),e(z,I2),e(I2,jce),e(jce,IAo),e(I2,NAo),e(I2,vD),e(vD,qAo),e(I2,jAo),e(z,DAo),e(z,N2),e(N2,Dce),e(Dce,GAo),e(N2,OAo),e(N2,FD),e(FD,VAo),e(N2,XAo),e(z,zAo),e(z,q2),e(q2,Gce),e(Gce,WAo),e(q2,QAo),e(q2,TD),e(TD,HAo),e(q2,UAo),e(z,JAo),e(z,j2),e(j2,Oce),e(Oce,YAo),e(j2,KAo),e(j2,MD),e(MD,ZAo),e(j2,eyo),e(z,oyo),e(z,D2),e(D2,Vce),e(Vce,ryo),e(D2,tyo),e(D2,ED),e(ED,ayo),e(D2,nyo),e(Ke,syo),e(Ke,G2),e(G2,lyo),e(G2,Xce),e(Xce,iyo),e(G2,dyo),e(G2,zce),e(zce,cyo),e(Ke,fyo),M(O2,Ke,null),b(f,_je,u),b(f,Bi,u),e(Bi,V2),e(V2,Wce),M(yy,Wce,null),e(Bi,myo),e(Bi,Qce),e(Qce,gyo),b(f,uje,u),b(f,ko,u),M(Ly,ko,null),e(ko,hyo),e(ko,Ii),e(Ii,pyo),e(Ii,CD),e(CD,_yo),e(Ii,uyo),e(Ii,wD),e(wD,byo),e(Ii,vyo),e(ko,Fyo),e(ko,xy),e(xy,Tyo),e(xy,Hce),e(Hce,Myo),e(xy,Eyo),e(ko,Cyo),e(ko,st),M($y,st,null),e(st,wyo),e(st,Uce),e(Uce,Ayo),e(st,yyo),e(st,Ni),e(Ni,Lyo),e(Ni,Jce),e(Jce,xyo),e(Ni,$yo),e(Ni,AD),e(AD,kyo),e(Ni,Syo),e(st,Ryo),M(X2,st,null),e(ko,Pyo),e(ko,Ze),M(ky,Ze,null),e(Ze,Byo),e(Ze,Yce),e(Yce,Iyo),e(Ze,Nyo),e(Ze,ka),e(ka,qyo),e(ka,Kce),e(Kce,jyo),e(ka,Dyo),e(ka,Zce),e(Zce,Gyo),e(ka,Oyo),e(ka,efe),e(efe,Vyo),e(ka,Xyo),e(Ze,zyo),e(Ze,W),e(W,z2),e(z2,ofe),e(ofe,Wyo),e(z2,Qyo),e(z2,yD),e(yD,Hyo),e(z2,Uyo),e(W,Jyo),e(W,W2),e(W2,rfe),e(rfe,Yyo),e(W2,Kyo),e(W2,LD),e(LD,Zyo),e(W2,eLo),e(W,oLo),e(W,Q2),e(Q2,tfe),e(tfe,rLo),e(Q2,tLo),e(Q2,xD),e(xD,aLo),e(Q2,nLo),e(W,sLo),e(W,H2),e(H2,afe),e(afe,lLo),e(H2,iLo),e(H2,$D),e($D,dLo),e(H2,cLo),e(W,fLo),e(W,U2),e(U2,nfe),e(nfe,mLo),e(U2,gLo),e(U2,kD),e(kD,hLo),e(U2,pLo),e(W,_Lo),e(W,J2),e(J2,sfe),e(sfe,uLo),e(J2,bLo),e(J2,SD),e(SD,vLo),e(J2,FLo),e(W,TLo),e(W,Y2),e(Y2,lfe),e(lfe,MLo),e(Y2,ELo),e(Y2,RD),e(RD,CLo),e(Y2,wLo),e(W,ALo),e(W,K2),e(K2,ife),e(ife,yLo),e(K2,LLo),e(K2,PD),e(PD,xLo),e(K2,$Lo),e(W,kLo),e(W,Z2),e(Z2,dfe),e(dfe,SLo),e(Z2,RLo),e(Z2,BD),e(BD,PLo),e(Z2,BLo),e(W,ILo),e(W,e1),e(e1,cfe),e(cfe,NLo),e(e1,qLo),e(e1,ID),e(ID,jLo),e(e1,DLo),e(W,GLo),e(W,o1),e(o1,ffe),e(ffe,OLo),e(o1,VLo),e(o1,ND),e(ND,XLo),e(o1,zLo),e(W,WLo),e(W,r1),e(r1,mfe),e(mfe,QLo),e(r1,HLo),e(r1,qD),e(qD,ULo),e(r1,JLo),e(W,YLo),e(W,t1),e(t1,gfe),e(gfe,KLo),e(t1,ZLo),e(t1,jD),e(jD,e8o),e(t1,o8o),e(W,r8o),e(W,a1),e(a1,hfe),e(hfe,t8o),e(a1,a8o),e(a1,DD),e(DD,n8o),e(a1,s8o),e(W,l8o),e(W,n1),e(n1,pfe),e(pfe,i8o),e(n1,d8o),e(n1,GD),e(GD,c8o),e(n1,f8o),e(W,m8o),e(W,s1),e(s1,_fe),e(_fe,g8o),e(s1,h8o),e(s1,OD),e(OD,p8o),e(s1,_8o),e(W,u8o),e(W,l1),e(l1,ufe),e(ufe,b8o),e(l1,v8o),e(l1,VD),e(VD,F8o),e(l1,T8o),e(W,M8o),e(W,i1),e(i1,bfe),e(bfe,E8o),e(i1,C8o),e(i1,XD),e(XD,w8o),e(i1,A8o),e(W,y8o),e(W,d1),e(d1,vfe),e(vfe,L8o),e(d1,x8o),e(d1,zD),e(zD,$8o),e(d1,k8o),e(W,S8o),e(W,c1),e(c1,Ffe),e(Ffe,R8o),e(c1,P8o),e(c1,WD),e(WD,B8o),e(c1,I8o),e(W,N8o),e(W,f1),e(f1,Tfe),e(Tfe,q8o),e(f1,j8o),e(f1,QD),e(QD,D8o),e(f1,G8o),e(W,O8o),e(W,m1),e(m1,Mfe),e(Mfe,V8o),e(m1,X8o),e(m1,HD),e(HD,z8o),e(m1,W8o),e(W,Q8o),e(W,g1),e(g1,Efe),e(Efe,H8o),e(g1,U8o),e(g1,UD),e(UD,J8o),e(g1,Y8o),e(W,K8o),e(W,h1),e(h1,Cfe),e(Cfe,Z8o),e(h1,e9o),e(h1,JD),e(JD,o9o),e(h1,r9o),e(W,t9o),e(W,p1),e(p1,wfe),e(wfe,a9o),e(p1,n9o),e(p1,YD),e(YD,s9o),e(p1,l9o),e(W,i9o),e(W,_1),e(_1,Afe),e(Afe,d9o),e(_1,c9o),e(_1,KD),e(KD,f9o),e(_1,m9o),e(W,g9o),e(W,u1),e(u1,yfe),e(yfe,h9o),e(u1,p9o),e(u1,ZD),e(ZD,_9o),e(u1,u9o),e(W,b9o),e(W,b1),e(b1,Lfe),e(Lfe,v9o),e(b1,F9o),e(b1,eG),e(eG,T9o),e(b1,M9o),e(W,E9o),e(W,v1),e(v1,xfe),e(xfe,C9o),e(v1,w9o),e(v1,oG),e(oG,A9o),e(v1,y9o),e(W,L9o),e(W,F1),e(F1,$fe),e($fe,x9o),e(F1,$9o),e(F1,rG),e(rG,k9o),e(F1,S9o),e(W,R9o),e(W,T1),e(T1,kfe),e(kfe,P9o),e(T1,B9o),e(T1,tG),e(tG,I9o),e(T1,N9o),e(W,q9o),e(W,M1),e(M1,Sfe),e(Sfe,j9o),e(M1,D9o),e(M1,Rfe),e(Rfe,G9o),e(M1,O9o),e(W,V9o),e(W,E1),e(E1,Pfe),e(Pfe,X9o),e(E1,z9o),e(E1,aG),e(aG,W9o),e(E1,Q9o),e(W,H9o),e(W,C1),e(C1,Bfe),e(Bfe,U9o),e(C1,J9o),e(C1,nG),e(nG,Y9o),e(C1,K9o),e(W,Z9o),e(W,w1),e(w1,Ife),e(Ife,exo),e(w1,oxo),e(w1,sG),e(sG,rxo),e(w1,txo),e(W,axo),e(W,A1),e(A1,Nfe),e(Nfe,nxo),e(A1,sxo),e(A1,lG),e(lG,lxo),e(A1,ixo),e(Ze,dxo),e(Ze,y1),e(y1,cxo),e(y1,qfe),e(qfe,fxo),e(y1,mxo),e(y1,jfe),e(jfe,gxo),e(Ze,hxo),M(L1,Ze,null),b(f,bje,u),b(f,qi,u),e(qi,x1),e(x1,Dfe),M(Sy,Dfe,null),e(qi,pxo),e(qi,Gfe),e(Gfe,_xo),b(f,vje,u),b(f,So,u),M(Ry,So,null),e(So,uxo),e(So,ji),e(ji,bxo),e(ji,iG),e(iG,vxo),e(ji,Fxo),e(ji,dG),e(dG,Txo),e(ji,Mxo),e(So,Exo),e(So,Py),e(Py,Cxo),e(Py,Ofe),e(Ofe,wxo),e(Py,Axo),e(So,yxo),e(So,lt),M(By,lt,null),e(lt,Lxo),e(lt,Vfe),e(Vfe,xxo),e(lt,$xo),e(lt,Di),e(Di,kxo),e(Di,Xfe),e(Xfe,Sxo),e(Di,Rxo),e(Di,cG),e(cG,Pxo),e(Di,Bxo),e(lt,Ixo),M($1,lt,null),e(So,Nxo),e(So,eo),M(Iy,eo,null),e(eo,qxo),e(eo,zfe),e(zfe,jxo),e(eo,Dxo),e(eo,Sa),e(Sa,Gxo),e(Sa,Wfe),e(Wfe,Oxo),e(Sa,Vxo),e(Sa,Qfe),e(Qfe,Xxo),e(Sa,zxo),e(Sa,Hfe),e(Hfe,Wxo),e(Sa,Qxo),e(eo,Hxo),e(eo,_e),e(_e,k1),e(k1,Ufe),e(Ufe,Uxo),e(k1,Jxo),e(k1,fG),e(fG,Yxo),e(k1,Kxo),e(_e,Zxo),e(_e,S1),e(S1,Jfe),e(Jfe,e$o),e(S1,o$o),e(S1,mG),e(mG,r$o),e(S1,t$o),e(_e,a$o),e(_e,R1),e(R1,Yfe),e(Yfe,n$o),e(R1,s$o),e(R1,gG),e(gG,l$o),e(R1,i$o),e(_e,d$o),e(_e,P1),e(P1,Kfe),e(Kfe,c$o),e(P1,f$o),e(P1,hG),e(hG,m$o),e(P1,g$o),e(_e,h$o),e(_e,B1),e(B1,Zfe),e(Zfe,p$o),e(B1,_$o),e(B1,pG),e(pG,u$o),e(B1,b$o),e(_e,v$o),e(_e,I1),e(I1,eme),e(eme,F$o),e(I1,T$o),e(I1,_G),e(_G,M$o),e(I1,E$o),e(_e,C$o),e(_e,N1),e(N1,ome),e(ome,w$o),e(N1,A$o),e(N1,uG),e(uG,y$o),e(N1,L$o),e(_e,x$o),e(_e,q1),e(q1,rme),e(rme,$$o),e(q1,k$o),e(q1,bG),e(bG,S$o),e(q1,R$o),e(_e,P$o),e(_e,j1),e(j1,tme),e(tme,B$o),e(j1,I$o),e(j1,vG),e(vG,N$o),e(j1,q$o),e(_e,j$o),e(_e,D1),e(D1,ame),e(ame,D$o),e(D1,G$o),e(D1,FG),e(FG,O$o),e(D1,V$o),e(_e,X$o),e(_e,G1),e(G1,nme),e(nme,z$o),e(G1,W$o),e(G1,TG),e(TG,Q$o),e(G1,H$o),e(_e,U$o),e(_e,O1),e(O1,sme),e(sme,J$o),e(O1,Y$o),e(O1,MG),e(MG,K$o),e(O1,Z$o),e(_e,eko),e(_e,V1),e(V1,lme),e(lme,oko),e(V1,rko),e(V1,EG),e(EG,tko),e(V1,ako),e(_e,nko),e(_e,X1),e(X1,ime),e(ime,sko),e(X1,lko),e(X1,CG),e(CG,iko),e(X1,dko),e(_e,cko),e(_e,z1),e(z1,dme),e(dme,fko),e(z1,mko),e(z1,wG),e(wG,gko),e(z1,hko),e(_e,pko),e(_e,W1),e(W1,cme),e(cme,_ko),e(W1,uko),e(W1,AG),e(AG,bko),e(W1,vko),e(eo,Fko),e(eo,Q1),e(Q1,Tko),e(Q1,fme),e(fme,Mko),e(Q1,Eko),e(Q1,mme),e(mme,Cko),e(eo,wko),M(H1,eo,null),b(f,Fje,u),b(f,Gi,u),e(Gi,U1),e(U1,gme),M(Ny,gme,null),e(Gi,Ako),e(Gi,hme),e(hme,yko),b(f,Tje,u),b(f,Ro,u),M(qy,Ro,null),e(Ro,Lko),e(Ro,Oi),e(Oi,xko),e(Oi,yG),e(yG,$ko),e(Oi,kko),e(Oi,LG),e(LG,Sko),e(Oi,Rko),e(Ro,Pko),e(Ro,jy),e(jy,Bko),e(jy,pme),e(pme,Iko),e(jy,Nko),e(Ro,qko),e(Ro,it),M(Dy,it,null),e(it,jko),e(it,_me),e(_me,Dko),e(it,Gko),e(it,Vi),e(Vi,Oko),e(Vi,ume),e(ume,Vko),e(Vi,Xko),e(Vi,xG),e(xG,zko),e(Vi,Wko),e(it,Qko),M(J1,it,null),e(Ro,Hko),e(Ro,oo),M(Gy,oo,null),e(oo,Uko),e(oo,bme),e(bme,Jko),e(oo,Yko),e(oo,Ra),e(Ra,Kko),e(Ra,vme),e(vme,Zko),e(Ra,eSo),e(Ra,Fme),e(Fme,oSo),e(Ra,rSo),e(Ra,Tme),e(Tme,tSo),e(Ra,aSo),e(oo,nSo),e(oo,N),e(N,Y1),e(Y1,Mme),e(Mme,sSo),e(Y1,lSo),e(Y1,$G),e($G,iSo),e(Y1,dSo),e(N,cSo),e(N,K1),e(K1,Eme),e(Eme,fSo),e(K1,mSo),e(K1,kG),e(kG,gSo),e(K1,hSo),e(N,pSo),e(N,Z1),e(Z1,Cme),e(Cme,_So),e(Z1,uSo),e(Z1,SG),e(SG,bSo),e(Z1,vSo),e(N,FSo),e(N,eb),e(eb,wme),e(wme,TSo),e(eb,MSo),e(eb,RG),e(RG,ESo),e(eb,CSo),e(N,wSo),e(N,ob),e(ob,Ame),e(Ame,ASo),e(ob,ySo),e(ob,PG),e(PG,LSo),e(ob,xSo),e(N,$So),e(N,rb),e(rb,yme),e(yme,kSo),e(rb,SSo),e(rb,BG),e(BG,RSo),e(rb,PSo),e(N,BSo),e(N,tb),e(tb,Lme),e(Lme,ISo),e(tb,NSo),e(tb,IG),e(IG,qSo),e(tb,jSo),e(N,DSo),e(N,ab),e(ab,xme),e(xme,GSo),e(ab,OSo),e(ab,NG),e(NG,VSo),e(ab,XSo),e(N,zSo),e(N,nb),e(nb,$me),e($me,WSo),e(nb,QSo),e(nb,qG),e(qG,HSo),e(nb,USo),e(N,JSo),e(N,sb),e(sb,kme),e(kme,YSo),e(sb,KSo),e(sb,jG),e(jG,ZSo),e(sb,eRo),e(N,oRo),e(N,lb),e(lb,Sme),e(Sme,rRo),e(lb,tRo),e(lb,DG),e(DG,aRo),e(lb,nRo),e(N,sRo),e(N,ib),e(ib,Rme),e(Rme,lRo),e(ib,iRo),e(ib,GG),e(GG,dRo),e(ib,cRo),e(N,fRo),e(N,db),e(db,Pme),e(Pme,mRo),e(db,gRo),e(db,OG),e(OG,hRo),e(db,pRo),e(N,_Ro),e(N,cb),e(cb,Bme),e(Bme,uRo),e(cb,bRo),e(cb,VG),e(VG,vRo),e(cb,FRo),e(N,TRo),e(N,fb),e(fb,Ime),e(Ime,MRo),e(fb,ERo),e(fb,XG),e(XG,CRo),e(fb,wRo),e(N,ARo),e(N,mb),e(mb,Nme),e(Nme,yRo),e(mb,LRo),e(mb,zG),e(zG,xRo),e(mb,$Ro),e(N,kRo),e(N,gb),e(gb,qme),e(qme,SRo),e(gb,RRo),e(gb,WG),e(WG,PRo),e(gb,BRo),e(N,IRo),e(N,hb),e(hb,jme),e(jme,NRo),e(hb,qRo),e(hb,QG),e(QG,jRo),e(hb,DRo),e(N,GRo),e(N,pb),e(pb,Dme),e(Dme,ORo),e(pb,VRo),e(pb,HG),e(HG,XRo),e(pb,zRo),e(N,WRo),e(N,_b),e(_b,Gme),e(Gme,QRo),e(_b,HRo),e(_b,UG),e(UG,URo),e(_b,JRo),e(N,YRo),e(N,ub),e(ub,Ome),e(Ome,KRo),e(ub,ZRo),e(ub,JG),e(JG,ePo),e(ub,oPo),e(N,rPo),e(N,bb),e(bb,Vme),e(Vme,tPo),e(bb,aPo),e(bb,YG),e(YG,nPo),e(bb,sPo),e(N,lPo),e(N,vb),e(vb,Xme),e(Xme,iPo),e(vb,dPo),e(vb,KG),e(KG,cPo),e(vb,fPo),e(N,mPo),e(N,Fb),e(Fb,zme),e(zme,gPo),e(Fb,hPo),e(Fb,ZG),e(ZG,pPo),e(Fb,_Po),e(N,uPo),e(N,Tb),e(Tb,Wme),e(Wme,bPo),e(Tb,vPo),e(Tb,eO),e(eO,FPo),e(Tb,TPo),e(N,MPo),e(N,Mb),e(Mb,Qme),e(Qme,EPo),e(Mb,CPo),e(Mb,oO),e(oO,wPo),e(Mb,APo),e(N,yPo),e(N,Eb),e(Eb,Hme),e(Hme,LPo),e(Eb,xPo),e(Eb,rO),e(rO,$Po),e(Eb,kPo),e(N,SPo),e(N,Cb),e(Cb,Ume),e(Ume,RPo),e(Cb,PPo),e(Cb,tO),e(tO,BPo),e(Cb,IPo),e(N,NPo),e(N,wb),e(wb,Jme),e(Jme,qPo),e(wb,jPo),e(wb,aO),e(aO,DPo),e(wb,GPo),e(N,OPo),e(N,Ab),e(Ab,Yme),e(Yme,VPo),e(Ab,XPo),e(Ab,nO),e(nO,zPo),e(Ab,WPo),e(N,QPo),e(N,yb),e(yb,Kme),e(Kme,HPo),e(yb,UPo),e(yb,sO),e(sO,JPo),e(yb,YPo),e(N,KPo),e(N,Lb),e(Lb,Zme),e(Zme,ZPo),e(Lb,eBo),e(Lb,lO),e(lO,oBo),e(Lb,rBo),e(N,tBo),e(N,xb),e(xb,ege),e(ege,aBo),e(xb,nBo),e(xb,iO),e(iO,sBo),e(xb,lBo),e(N,iBo),e(N,$b),e($b,oge),e(oge,dBo),e($b,cBo),e($b,dO),e(dO,fBo),e($b,mBo),e(N,gBo),e(N,kb),e(kb,rge),e(rge,hBo),e(kb,pBo),e(kb,cO),e(cO,_Bo),e(kb,uBo),e(N,bBo),e(N,Sb),e(Sb,tge),e(tge,vBo),e(Sb,FBo),e(Sb,fO),e(fO,TBo),e(Sb,MBo),e(N,EBo),e(N,Rb),e(Rb,age),e(age,CBo),e(Rb,wBo),e(Rb,mO),e(mO,ABo),e(Rb,yBo),e(N,LBo),e(N,Pb),e(Pb,nge),e(nge,xBo),e(Pb,$Bo),e(Pb,gO),e(gO,kBo),e(Pb,SBo),e(N,RBo),e(N,Bb),e(Bb,sge),e(sge,PBo),e(Bb,BBo),e(Bb,hO),e(hO,IBo),e(Bb,NBo),e(N,qBo),e(N,Ib),e(Ib,lge),e(lge,jBo),e(Ib,DBo),e(Ib,pO),e(pO,GBo),e(Ib,OBo),e(N,VBo),e(N,Nb),e(Nb,ige),e(ige,XBo),e(Nb,zBo),e(Nb,_O),e(_O,WBo),e(Nb,QBo),e(N,HBo),e(N,qb),e(qb,dge),e(dge,UBo),e(qb,JBo),e(qb,uO),e(uO,YBo),e(qb,KBo),e(N,ZBo),e(N,jb),e(jb,cge),e(cge,eIo),e(jb,oIo),e(jb,bO),e(bO,rIo),e(jb,tIo),e(N,aIo),e(N,Db),e(Db,fge),e(fge,nIo),e(Db,sIo),e(Db,vO),e(vO,lIo),e(Db,iIo),e(N,dIo),e(N,Gb),e(Gb,mge),e(mge,cIo),e(Gb,fIo),e(Gb,FO),e(FO,mIo),e(Gb,gIo),e(N,hIo),e(N,Ob),e(Ob,gge),e(gge,pIo),e(Ob,_Io),e(Ob,TO),e(TO,uIo),e(Ob,bIo),e(N,vIo),e(N,Vb),e(Vb,hge),e(hge,FIo),e(Vb,TIo),e(Vb,MO),e(MO,MIo),e(Vb,EIo),e(oo,CIo),e(oo,Xb),e(Xb,wIo),e(Xb,pge),e(pge,AIo),e(Xb,yIo),e(Xb,_ge),e(_ge,LIo),e(oo,xIo),M(zb,oo,null),b(f,Mje,u),b(f,Xi,u),e(Xi,Wb),e(Wb,uge),M(Oy,uge,null),e(Xi,$Io),e(Xi,bge),e(bge,kIo),b(f,Eje,u),b(f,Po,u),M(Vy,Po,null),e(Po,SIo),e(Po,zi),e(zi,RIo),e(zi,EO),e(EO,PIo),e(zi,BIo),e(zi,CO),e(CO,IIo),e(zi,NIo),e(Po,qIo),e(Po,Xy),e(Xy,jIo),e(Xy,vge),e(vge,DIo),e(Xy,GIo),e(Po,OIo),e(Po,dt),M(zy,dt,null),e(dt,VIo),e(dt,Fge),e(Fge,XIo),e(dt,zIo),e(dt,Wi),e(Wi,WIo),e(Wi,Tge),e(Tge,QIo),e(Wi,HIo),e(Wi,wO),e(wO,UIo),e(Wi,JIo),e(dt,YIo),M(Qb,dt,null),e(Po,KIo),e(Po,ro),M(Wy,ro,null),e(ro,ZIo),e(ro,Mge),e(Mge,eNo),e(ro,oNo),e(ro,Pa),e(Pa,rNo),e(Pa,Ege),e(Ege,tNo),e(Pa,aNo),e(Pa,Cge),e(Cge,nNo),e(Pa,sNo),e(Pa,wge),e(wge,lNo),e(Pa,iNo),e(ro,dNo),e(ro,Z),e(Z,Hb),e(Hb,Age),e(Age,cNo),e(Hb,fNo),e(Hb,AO),e(AO,mNo),e(Hb,gNo),e(Z,hNo),e(Z,Ub),e(Ub,yge),e(yge,pNo),e(Ub,_No),e(Ub,yO),e(yO,uNo),e(Ub,bNo),e(Z,vNo),e(Z,Jb),e(Jb,Lge),e(Lge,FNo),e(Jb,TNo),e(Jb,LO),e(LO,MNo),e(Jb,ENo),e(Z,CNo),e(Z,Yb),e(Yb,xge),e(xge,wNo),e(Yb,ANo),e(Yb,xO),e(xO,yNo),e(Yb,LNo),e(Z,xNo),e(Z,Kb),e(Kb,$ge),e($ge,$No),e(Kb,kNo),e(Kb,$O),e($O,SNo),e(Kb,RNo),e(Z,PNo),e(Z,Zb),e(Zb,kge),e(kge,BNo),e(Zb,INo),e(Zb,kO),e(kO,NNo),e(Zb,qNo),e(Z,jNo),e(Z,ev),e(ev,Sge),e(Sge,DNo),e(ev,GNo),e(ev,SO),e(SO,ONo),e(ev,VNo),e(Z,XNo),e(Z,ov),e(ov,Rge),e(Rge,zNo),e(ov,WNo),e(ov,RO),e(RO,QNo),e(ov,HNo),e(Z,UNo),e(Z,rv),e(rv,Pge),e(Pge,JNo),e(rv,YNo),e(rv,PO),e(PO,KNo),e(rv,ZNo),e(Z,eqo),e(Z,tv),e(tv,Bge),e(Bge,oqo),e(tv,rqo),e(tv,BO),e(BO,tqo),e(tv,aqo),e(Z,nqo),e(Z,av),e(av,Ige),e(Ige,sqo),e(av,lqo),e(av,IO),e(IO,iqo),e(av,dqo),e(Z,cqo),e(Z,nv),e(nv,Nge),e(Nge,fqo),e(nv,mqo),e(nv,NO),e(NO,gqo),e(nv,hqo),e(Z,pqo),e(Z,sv),e(sv,qge),e(qge,_qo),e(sv,uqo),e(sv,qO),e(qO,bqo),e(sv,vqo),e(Z,Fqo),e(Z,lv),e(lv,jge),e(jge,Tqo),e(lv,Mqo),e(lv,jO),e(jO,Eqo),e(lv,Cqo),e(Z,wqo),e(Z,iv),e(iv,Dge),e(Dge,Aqo),e(iv,yqo),e(iv,DO),e(DO,Lqo),e(iv,xqo),e(Z,$qo),e(Z,dv),e(dv,Gge),e(Gge,kqo),e(dv,Sqo),e(dv,GO),e(GO,Rqo),e(dv,Pqo),e(Z,Bqo),e(Z,cv),e(cv,Oge),e(Oge,Iqo),e(cv,Nqo),e(cv,OO),e(OO,qqo),e(cv,jqo),e(Z,Dqo),e(Z,fv),e(fv,Vge),e(Vge,Gqo),e(fv,Oqo),e(fv,VO),e(VO,Vqo),e(fv,Xqo),e(Z,zqo),e(Z,mv),e(mv,Xge),e(Xge,Wqo),e(mv,Qqo),e(mv,XO),e(XO,Hqo),e(mv,Uqo),e(Z,Jqo),e(Z,gv),e(gv,zge),e(zge,Yqo),e(gv,Kqo),e(gv,zO),e(zO,Zqo),e(gv,ejo),e(Z,ojo),e(Z,hv),e(hv,Wge),e(Wge,rjo),e(hv,tjo),e(hv,WO),e(WO,ajo),e(hv,njo),e(Z,sjo),e(Z,pv),e(pv,Qge),e(Qge,ljo),e(pv,ijo),e(pv,QO),e(QO,djo),e(pv,cjo),e(Z,fjo),e(Z,_v),e(_v,Hge),e(Hge,mjo),e(_v,gjo),e(_v,HO),e(HO,hjo),e(_v,pjo),e(Z,_jo),e(Z,uv),e(uv,Uge),e(Uge,ujo),e(uv,bjo),e(uv,UO),e(UO,vjo),e(uv,Fjo),e(Z,Tjo),e(Z,bv),e(bv,Jge),e(Jge,Mjo),e(bv,Ejo),e(bv,JO),e(JO,Cjo),e(bv,wjo),e(Z,Ajo),e(Z,vv),e(vv,Yge),e(Yge,yjo),e(vv,Ljo),e(vv,YO),e(YO,xjo),e(vv,$jo),e(Z,kjo),e(Z,Fv),e(Fv,Kge),e(Kge,Sjo),e(Fv,Rjo),e(Fv,KO),e(KO,Pjo),e(Fv,Bjo),e(Z,Ijo),e(Z,Tv),e(Tv,Zge),e(Zge,Njo),e(Tv,qjo),e(Tv,ZO),e(ZO,jjo),e(Tv,Djo),e(Z,Gjo),e(Z,Mv),e(Mv,ehe),e(ehe,Ojo),e(Mv,Vjo),e(Mv,eV),e(eV,Xjo),e(Mv,zjo),e(ro,Wjo),e(ro,Ev),e(Ev,Qjo),e(Ev,ohe),e(ohe,Hjo),e(Ev,Ujo),e(Ev,rhe),e(rhe,Jjo),e(ro,Yjo),M(Cv,ro,null),b(f,Cje,u),b(f,Qi,u),e(Qi,wv),e(wv,the),M(Qy,the,null),e(Qi,Kjo),e(Qi,ahe),e(ahe,Zjo),b(f,wje,u),b(f,Bo,u),M(Hy,Bo,null),e(Bo,eDo),e(Bo,Hi),e(Hi,oDo),e(Hi,oV),e(oV,rDo),e(Hi,tDo),e(Hi,rV),e(rV,aDo),e(Hi,nDo),e(Bo,sDo),e(Bo,Uy),e(Uy,lDo),e(Uy,nhe),e(nhe,iDo),e(Uy,dDo),e(Bo,cDo),e(Bo,ct),M(Jy,ct,null),e(ct,fDo),e(ct,she),e(she,mDo),e(ct,gDo),e(ct,Ui),e(Ui,hDo),e(Ui,lhe),e(lhe,pDo),e(Ui,_Do),e(Ui,tV),e(tV,uDo),e(Ui,bDo),e(ct,vDo),M(Av,ct,null),e(Bo,FDo),e(Bo,to),M(Yy,to,null),e(to,TDo),e(to,ihe),e(ihe,MDo),e(to,EDo),e(to,Ba),e(Ba,CDo),e(Ba,dhe),e(dhe,wDo),e(Ba,ADo),e(Ba,che),e(che,yDo),e(Ba,LDo),e(Ba,fhe),e(fhe,xDo),e(Ba,$Do),e(to,kDo),e(to,Yr),e(Yr,yv),e(yv,mhe),e(mhe,SDo),e(yv,RDo),e(yv,aV),e(aV,PDo),e(yv,BDo),e(Yr,IDo),e(Yr,Lv),e(Lv,ghe),e(ghe,NDo),e(Lv,qDo),e(Lv,nV),e(nV,jDo),e(Lv,DDo),e(Yr,GDo),e(Yr,xv),e(xv,hhe),e(hhe,ODo),e(xv,VDo),e(xv,sV),e(sV,XDo),e(xv,zDo),e(Yr,WDo),e(Yr,$v),e($v,phe),e(phe,QDo),e($v,HDo),e($v,lV),e(lV,UDo),e($v,JDo),e(Yr,YDo),e(Yr,kv),e(kv,_he),e(_he,KDo),e(kv,ZDo),e(kv,iV),e(iV,eGo),e(kv,oGo),e(to,rGo),e(to,Sv),e(Sv,tGo),e(Sv,uhe),e(uhe,aGo),e(Sv,nGo),e(Sv,bhe),e(bhe,sGo),e(to,lGo),M(Rv,to,null),b(f,Aje,u),b(f,Ji,u),e(Ji,Pv),e(Pv,vhe),M(Ky,vhe,null),e(Ji,iGo),e(Ji,Fhe),e(Fhe,dGo),b(f,yje,u),b(f,Io,u),M(Zy,Io,null),e(Io,cGo),e(Io,Yi),e(Yi,fGo),e(Yi,dV),e(dV,mGo),e(Yi,gGo),e(Yi,cV),e(cV,hGo),e(Yi,pGo),e(Io,_Go),e(Io,eL),e(eL,uGo),e(eL,The),e(The,bGo),e(eL,vGo),e(Io,FGo),e(Io,ft),M(oL,ft,null),e(ft,TGo),e(ft,Mhe),e(Mhe,MGo),e(ft,EGo),e(ft,Ki),e(Ki,CGo),e(Ki,Ehe),e(Ehe,wGo),e(Ki,AGo),e(Ki,fV),e(fV,yGo),e(Ki,LGo),e(ft,xGo),M(Bv,ft,null),e(Io,$Go),e(Io,ao),M(rL,ao,null),e(ao,kGo),e(ao,Che),e(Che,SGo),e(ao,RGo),e(ao,Ia),e(Ia,PGo),e(Ia,whe),e(whe,BGo),e(Ia,IGo),e(Ia,Ahe),e(Ahe,NGo),e(Ia,qGo),e(Ia,yhe),e(yhe,jGo),e(Ia,DGo),e(ao,GGo),e(ao,U),e(U,Iv),e(Iv,Lhe),e(Lhe,OGo),e(Iv,VGo),e(Iv,mV),e(mV,XGo),e(Iv,zGo),e(U,WGo),e(U,Nv),e(Nv,xhe),e(xhe,QGo),e(Nv,HGo),e(Nv,gV),e(gV,UGo),e(Nv,JGo),e(U,YGo),e(U,qv),e(qv,$he),e($he,KGo),e(qv,ZGo),e(qv,hV),e(hV,eOo),e(qv,oOo),e(U,rOo),e(U,jv),e(jv,khe),e(khe,tOo),e(jv,aOo),e(jv,pV),e(pV,nOo),e(jv,sOo),e(U,lOo),e(U,Dv),e(Dv,She),e(She,iOo),e(Dv,dOo),e(Dv,_V),e(_V,cOo),e(Dv,fOo),e(U,mOo),e(U,Gv),e(Gv,Rhe),e(Rhe,gOo),e(Gv,hOo),e(Gv,uV),e(uV,pOo),e(Gv,_Oo),e(U,uOo),e(U,Ov),e(Ov,Phe),e(Phe,bOo),e(Ov,vOo),e(Ov,bV),e(bV,FOo),e(Ov,TOo),e(U,MOo),e(U,Vv),e(Vv,Bhe),e(Bhe,EOo),e(Vv,COo),e(Vv,vV),e(vV,wOo),e(Vv,AOo),e(U,yOo),e(U,Xv),e(Xv,Ihe),e(Ihe,LOo),e(Xv,xOo),e(Xv,FV),e(FV,$Oo),e(Xv,kOo),e(U,SOo),e(U,zv),e(zv,Nhe),e(Nhe,ROo),e(zv,POo),e(zv,TV),e(TV,BOo),e(zv,IOo),e(U,NOo),e(U,Wv),e(Wv,qhe),e(qhe,qOo),e(Wv,jOo),e(Wv,MV),e(MV,DOo),e(Wv,GOo),e(U,OOo),e(U,Qv),e(Qv,jhe),e(jhe,VOo),e(Qv,XOo),e(Qv,EV),e(EV,zOo),e(Qv,WOo),e(U,QOo),e(U,Hv),e(Hv,Dhe),e(Dhe,HOo),e(Hv,UOo),e(Hv,CV),e(CV,JOo),e(Hv,YOo),e(U,KOo),e(U,Uv),e(Uv,Ghe),e(Ghe,ZOo),e(Uv,eVo),e(Uv,wV),e(wV,oVo),e(Uv,rVo),e(U,tVo),e(U,Jv),e(Jv,Ohe),e(Ohe,aVo),e(Jv,nVo),e(Jv,AV),e(AV,sVo),e(Jv,lVo),e(U,iVo),e(U,Yv),e(Yv,Vhe),e(Vhe,dVo),e(Yv,cVo),e(Yv,yV),e(yV,fVo),e(Yv,mVo),e(U,gVo),e(U,Kv),e(Kv,Xhe),e(Xhe,hVo),e(Kv,pVo),e(Kv,LV),e(LV,_Vo),e(Kv,uVo),e(U,bVo),e(U,Zv),e(Zv,zhe),e(zhe,vVo),e(Zv,FVo),e(Zv,xV),e(xV,TVo),e(Zv,MVo),e(U,EVo),e(U,eF),e(eF,Whe),e(Whe,CVo),e(eF,wVo),e(eF,$V),e($V,AVo),e(eF,yVo),e(U,LVo),e(U,oF),e(oF,Qhe),e(Qhe,xVo),e(oF,$Vo),e(oF,kV),e(kV,kVo),e(oF,SVo),e(U,RVo),e(U,rF),e(rF,Hhe),e(Hhe,PVo),e(rF,BVo),e(rF,SV),e(SV,IVo),e(rF,NVo),e(U,qVo),e(U,tF),e(tF,Uhe),e(Uhe,jVo),e(tF,DVo),e(tF,RV),e(RV,GVo),e(tF,OVo),e(U,VVo),e(U,aF),e(aF,Jhe),e(Jhe,XVo),e(aF,zVo),e(aF,PV),e(PV,WVo),e(aF,QVo),e(U,HVo),e(U,nF),e(nF,Yhe),e(Yhe,UVo),e(nF,JVo),e(nF,BV),e(BV,YVo),e(nF,KVo),e(U,ZVo),e(U,sF),e(sF,Khe),e(Khe,eXo),e(sF,oXo),e(sF,IV),e(IV,rXo),e(sF,tXo),e(U,aXo),e(U,lF),e(lF,Zhe),e(Zhe,nXo),e(lF,sXo),e(lF,NV),e(NV,lXo),e(lF,iXo),e(U,dXo),e(U,iF),e(iF,epe),e(epe,cXo),e(iF,fXo),e(iF,qV),e(qV,mXo),e(iF,gXo),e(U,hXo),e(U,dF),e(dF,ope),e(ope,pXo),e(dF,_Xo),e(dF,jV),e(jV,uXo),e(dF,bXo),e(U,vXo),e(U,cF),e(cF,rpe),e(rpe,FXo),e(cF,TXo),e(cF,DV),e(DV,MXo),e(cF,EXo),e(U,CXo),e(U,fF),e(fF,tpe),e(tpe,wXo),e(fF,AXo),e(fF,GV),e(GV,yXo),e(fF,LXo),e(U,xXo),e(U,mF),e(mF,ape),e(ape,$Xo),e(mF,kXo),e(mF,OV),e(OV,SXo),e(mF,RXo),e(U,PXo),e(U,gF),e(gF,npe),e(npe,BXo),e(gF,IXo),e(gF,VV),e(VV,NXo),e(gF,qXo),e(U,jXo),e(U,hF),e(hF,spe),e(spe,DXo),e(hF,GXo),e(hF,XV),e(XV,OXo),e(hF,VXo),e(U,XXo),e(U,pF),e(pF,lpe),e(lpe,zXo),e(pF,WXo),e(pF,zV),e(zV,QXo),e(pF,HXo),e(ao,UXo),e(ao,_F),e(_F,JXo),e(_F,ipe),e(ipe,YXo),e(_F,KXo),e(_F,dpe),e(dpe,ZXo),e(ao,ezo),M(uF,ao,null),b(f,Lje,u),b(f,Zi,u),e(Zi,bF),e(bF,cpe),M(tL,cpe,null),e(Zi,ozo),e(Zi,fpe),e(fpe,rzo),b(f,xje,u),b(f,No,u),M(aL,No,null),e(No,tzo),e(No,ed),e(ed,azo),e(ed,WV),e(WV,nzo),e(ed,szo),e(ed,QV),e(QV,lzo),e(ed,izo),e(No,dzo),e(No,nL),e(nL,czo),e(nL,mpe),e(mpe,fzo),e(nL,mzo),e(No,gzo),e(No,mt),M(sL,mt,null),e(mt,hzo),e(mt,gpe),e(gpe,pzo),e(mt,_zo),e(mt,od),e(od,uzo),e(od,hpe),e(hpe,bzo),e(od,vzo),e(od,HV),e(HV,Fzo),e(od,Tzo),e(mt,Mzo),M(vF,mt,null),e(No,Ezo),e(No,no),M(lL,no,null),e(no,Czo),e(no,ppe),e(ppe,wzo),e(no,Azo),e(no,Na),e(Na,yzo),e(Na,_pe),e(_pe,Lzo),e(Na,xzo),e(Na,upe),e(upe,$zo),e(Na,kzo),e(Na,bpe),e(bpe,Szo),e(Na,Rzo),e(no,Pzo),e(no,V),e(V,FF),e(FF,vpe),e(vpe,Bzo),e(FF,Izo),e(FF,UV),e(UV,Nzo),e(FF,qzo),e(V,jzo),e(V,TF),e(TF,Fpe),e(Fpe,Dzo),e(TF,Gzo),e(TF,JV),e(JV,Ozo),e(TF,Vzo),e(V,Xzo),e(V,MF),e(MF,Tpe),e(Tpe,zzo),e(MF,Wzo),e(MF,YV),e(YV,Qzo),e(MF,Hzo),e(V,Uzo),e(V,EF),e(EF,Mpe),e(Mpe,Jzo),e(EF,Yzo),e(EF,KV),e(KV,Kzo),e(EF,Zzo),e(V,eWo),e(V,CF),e(CF,Epe),e(Epe,oWo),e(CF,rWo),e(CF,ZV),e(ZV,tWo),e(CF,aWo),e(V,nWo),e(V,wF),e(wF,Cpe),e(Cpe,sWo),e(wF,lWo),e(wF,eX),e(eX,iWo),e(wF,dWo),e(V,cWo),e(V,AF),e(AF,wpe),e(wpe,fWo),e(AF,mWo),e(AF,oX),e(oX,gWo),e(AF,hWo),e(V,pWo),e(V,yF),e(yF,Ape),e(Ape,_Wo),e(yF,uWo),e(yF,rX),e(rX,bWo),e(yF,vWo),e(V,FWo),e(V,LF),e(LF,ype),e(ype,TWo),e(LF,MWo),e(LF,tX),e(tX,EWo),e(LF,CWo),e(V,wWo),e(V,xF),e(xF,Lpe),e(Lpe,AWo),e(xF,yWo),e(xF,aX),e(aX,LWo),e(xF,xWo),e(V,$Wo),e(V,$F),e($F,xpe),e(xpe,kWo),e($F,SWo),e($F,nX),e(nX,RWo),e($F,PWo),e(V,BWo),e(V,kF),e(kF,$pe),e($pe,IWo),e(kF,NWo),e(kF,sX),e(sX,qWo),e(kF,jWo),e(V,DWo),e(V,SF),e(SF,kpe),e(kpe,GWo),e(SF,OWo),e(SF,lX),e(lX,VWo),e(SF,XWo),e(V,zWo),e(V,RF),e(RF,Spe),e(Spe,WWo),e(RF,QWo),e(RF,iX),e(iX,HWo),e(RF,UWo),e(V,JWo),e(V,PF),e(PF,Rpe),e(Rpe,YWo),e(PF,KWo),e(PF,dX),e(dX,ZWo),e(PF,eQo),e(V,oQo),e(V,BF),e(BF,Ppe),e(Ppe,rQo),e(BF,tQo),e(BF,cX),e(cX,aQo),e(BF,nQo),e(V,sQo),e(V,IF),e(IF,Bpe),e(Bpe,lQo),e(IF,iQo),e(IF,fX),e(fX,dQo),e(IF,cQo),e(V,fQo),e(V,NF),e(NF,Ipe),e(Ipe,mQo),e(NF,gQo),e(NF,mX),e(mX,hQo),e(NF,pQo),e(V,_Qo),e(V,qF),e(qF,Npe),e(Npe,uQo),e(qF,bQo),e(qF,gX),e(gX,vQo),e(qF,FQo),e(V,TQo),e(V,jF),e(jF,qpe),e(qpe,MQo),e(jF,EQo),e(jF,hX),e(hX,CQo),e(jF,wQo),e(V,AQo),e(V,DF),e(DF,jpe),e(jpe,yQo),e(DF,LQo),e(DF,pX),e(pX,xQo),e(DF,$Qo),e(V,kQo),e(V,GF),e(GF,Dpe),e(Dpe,SQo),e(GF,RQo),e(GF,_X),e(_X,PQo),e(GF,BQo),e(V,IQo),e(V,OF),e(OF,Gpe),e(Gpe,NQo),e(OF,qQo),e(OF,uX),e(uX,jQo),e(OF,DQo),e(V,GQo),e(V,VF),e(VF,Ope),e(Ope,OQo),e(VF,VQo),e(VF,bX),e(bX,XQo),e(VF,zQo),e(V,WQo),e(V,XF),e(XF,Vpe),e(Vpe,QQo),e(XF,HQo),e(XF,vX),e(vX,UQo),e(XF,JQo),e(V,YQo),e(V,zF),e(zF,Xpe),e(Xpe,KQo),e(zF,ZQo),e(zF,FX),e(FX,eHo),e(zF,oHo),e(V,rHo),e(V,WF),e(WF,zpe),e(zpe,tHo),e(WF,aHo),e(WF,TX),e(TX,nHo),e(WF,sHo),e(V,lHo),e(V,QF),e(QF,Wpe),e(Wpe,iHo),e(QF,dHo),e(QF,MX),e(MX,cHo),e(QF,fHo),e(V,mHo),e(V,HF),e(HF,Qpe),e(Qpe,gHo),e(HF,hHo),e(HF,EX),e(EX,pHo),e(HF,_Ho),e(V,uHo),e(V,UF),e(UF,Hpe),e(Hpe,bHo),e(UF,vHo),e(UF,CX),e(CX,FHo),e(UF,THo),e(V,MHo),e(V,JF),e(JF,Upe),e(Upe,EHo),e(JF,CHo),e(JF,wX),e(wX,wHo),e(JF,AHo),e(V,yHo),e(V,YF),e(YF,Jpe),e(Jpe,LHo),e(YF,xHo),e(YF,AX),e(AX,$Ho),e(YF,kHo),e(V,SHo),e(V,KF),e(KF,Ype),e(Ype,RHo),e(KF,PHo),e(KF,yX),e(yX,BHo),e(KF,IHo),e(V,NHo),e(V,ZF),e(ZF,Kpe),e(Kpe,qHo),e(ZF,jHo),e(ZF,LX),e(LX,DHo),e(ZF,GHo),e(V,OHo),e(V,e6),e(e6,Zpe),e(Zpe,VHo),e(e6,XHo),e(e6,xX),e(xX,zHo),e(e6,WHo),e(V,QHo),e(V,o6),e(o6,e_e),e(e_e,HHo),e(o6,UHo),e(o6,$X),e($X,JHo),e(o6,YHo),e(V,KHo),e(V,r6),e(r6,o_e),e(o_e,ZHo),e(r6,eUo),e(r6,kX),e(kX,oUo),e(r6,rUo),e(V,tUo),e(V,t6),e(t6,r_e),e(r_e,aUo),e(t6,nUo),e(t6,SX),e(SX,sUo),e(t6,lUo),e(V,iUo),e(V,a6),e(a6,t_e),e(t_e,dUo),e(a6,cUo),e(a6,RX),e(RX,fUo),e(a6,mUo),e(V,gUo),e(V,n6),e(n6,a_e),e(a_e,hUo),e(n6,pUo),e(n6,PX),e(PX,_Uo),e(n6,uUo),e(no,bUo),e(no,s6),e(s6,vUo),e(s6,n_e),e(n_e,FUo),e(s6,TUo),e(s6,s_e),e(s_e,MUo),e(no,EUo),M(l6,no,null),b(f,$je,u),b(f,rd,u),e(rd,i6),e(i6,l_e),M(iL,l_e,null),e(rd,CUo),e(rd,i_e),e(i_e,wUo),b(f,kje,u),b(f,qo,u),M(dL,qo,null),e(qo,AUo),e(qo,td),e(td,yUo),e(td,BX),e(BX,LUo),e(td,xUo),e(td,IX),e(IX,$Uo),e(td,kUo),e(qo,SUo),e(qo,cL),e(cL,RUo),e(cL,d_e),e(d_e,PUo),e(cL,BUo),e(qo,IUo),e(qo,gt),M(fL,gt,null),e(gt,NUo),e(gt,c_e),e(c_e,qUo),e(gt,jUo),e(gt,ad),e(ad,DUo),e(ad,f_e),e(f_e,GUo),e(ad,OUo),e(ad,NX),e(NX,VUo),e(ad,XUo),e(gt,zUo),M(d6,gt,null),e(qo,WUo),e(qo,so),M(mL,so,null),e(so,QUo),e(so,m_e),e(m_e,HUo),e(so,UUo),e(so,qa),e(qa,JUo),e(qa,g_e),e(g_e,YUo),e(qa,KUo),e(qa,h_e),e(h_e,ZUo),e(qa,eJo),e(qa,p_e),e(p_e,oJo),e(qa,rJo),e(so,tJo),e(so,__e),e(__e,c6),e(c6,u_e),e(u_e,aJo),e(c6,nJo),e(c6,qX),e(qX,sJo),e(c6,lJo),e(so,iJo),e(so,f6),e(f6,dJo),e(f6,b_e),e(b_e,cJo),e(f6,fJo),e(f6,v_e),e(v_e,mJo),e(so,gJo),M(m6,so,null),b(f,Sje,u),b(f,nd,u),e(nd,g6),e(g6,F_e),M(gL,F_e,null),e(nd,hJo),e(nd,T_e),e(T_e,pJo),b(f,Rje,u),b(f,jo,u),M(hL,jo,null),e(jo,_Jo),e(jo,sd),e(sd,uJo),e(sd,jX),e(jX,bJo),e(sd,vJo),e(sd,DX),e(DX,FJo),e(sd,TJo),e(jo,MJo),e(jo,pL),e(pL,EJo),e(pL,M_e),e(M_e,CJo),e(pL,wJo),e(jo,AJo),e(jo,ht),M(_L,ht,null),e(ht,yJo),e(ht,E_e),e(E_e,LJo),e(ht,xJo),e(ht,ld),e(ld,$Jo),e(ld,C_e),e(C_e,kJo),e(ld,SJo),e(ld,GX),e(GX,RJo),e(ld,PJo),e(ht,BJo),M(h6,ht,null),e(jo,IJo),e(jo,lo),M(uL,lo,null),e(lo,NJo),e(lo,w_e),e(w_e,qJo),e(lo,jJo),e(lo,ja),e(ja,DJo),e(ja,A_e),e(A_e,GJo),e(ja,OJo),e(ja,y_e),e(y_e,VJo),e(ja,XJo),e(ja,L_e),e(L_e,zJo),e(ja,WJo),e(lo,QJo),e(lo,ve),e(ve,p6),e(p6,x_e),e(x_e,HJo),e(p6,UJo),e(p6,OX),e(OX,JJo),e(p6,YJo),e(ve,KJo),e(ve,_6),e(_6,$_e),e($_e,ZJo),e(_6,eYo),e(_6,VX),e(VX,oYo),e(_6,rYo),e(ve,tYo),e(ve,u6),e(u6,k_e),e(k_e,aYo),e(u6,nYo),e(u6,XX),e(XX,sYo),e(u6,lYo),e(ve,iYo),e(ve,b6),e(b6,S_e),e(S_e,dYo),e(b6,cYo),e(b6,zX),e(zX,fYo),e(b6,mYo),e(ve,gYo),e(ve,Bs),e(Bs,R_e),e(R_e,hYo),e(Bs,pYo),e(Bs,WX),e(WX,_Yo),e(Bs,uYo),e(Bs,QX),e(QX,bYo),e(Bs,vYo),e(ve,FYo),e(ve,v6),e(v6,P_e),e(P_e,TYo),e(v6,MYo),e(v6,HX),e(HX,EYo),e(v6,CYo),e(ve,wYo),e(ve,Is),e(Is,B_e),e(B_e,AYo),e(Is,yYo),e(Is,UX),e(UX,LYo),e(Is,xYo),e(Is,JX),e(JX,$Yo),e(Is,kYo),e(ve,SYo),e(ve,pt),e(pt,I_e),e(I_e,RYo),e(pt,PYo),e(pt,YX),e(YX,BYo),e(pt,IYo),e(pt,KX),e(KX,NYo),e(pt,qYo),e(pt,ZX),e(ZX,jYo),e(pt,DYo),e(ve,GYo),e(ve,F6),e(F6,N_e),e(N_e,OYo),e(F6,VYo),e(F6,ez),e(ez,XYo),e(F6,zYo),e(ve,WYo),e(ve,T6),e(T6,q_e),e(q_e,QYo),e(T6,HYo),e(T6,oz),e(oz,UYo),e(T6,JYo),e(ve,YYo),e(ve,M6),e(M6,j_e),e(j_e,KYo),e(M6,ZYo),e(M6,rz),e(rz,eKo),e(M6,oKo),e(ve,rKo),e(ve,E6),e(E6,D_e),e(D_e,tKo),e(E6,aKo),e(E6,tz),e(tz,nKo),e(E6,sKo),e(ve,lKo),e(ve,C6),e(C6,G_e),e(G_e,iKo),e(C6,dKo),e(C6,az),e(az,cKo),e(C6,fKo),e(ve,mKo),e(ve,w6),e(w6,O_e),e(O_e,gKo),e(w6,hKo),e(w6,nz),e(nz,pKo),e(w6,_Ko),e(ve,uKo),e(ve,A6),e(A6,V_e),e(V_e,bKo),e(A6,vKo),e(A6,sz),e(sz,FKo),e(A6,TKo),e(lo,MKo),e(lo,y6),e(y6,EKo),e(y6,X_e),e(X_e,CKo),e(y6,wKo),e(y6,z_e),e(z_e,AKo),e(lo,yKo),M(L6,lo,null),b(f,Pje,u),b(f,id,u),e(id,x6),e(x6,W_e),M(bL,W_e,null),e(id,LKo),e(id,Q_e),e(Q_e,xKo),b(f,Bje,u),b(f,Do,u),M(vL,Do,null),e(Do,$Ko),e(Do,dd),e(dd,kKo),e(dd,lz),e(lz,SKo),e(dd,RKo),e(dd,iz),e(iz,PKo),e(dd,BKo),e(Do,IKo),e(Do,FL),e(FL,NKo),e(FL,H_e),e(H_e,qKo),e(FL,jKo),e(Do,DKo),e(Do,_t),M(TL,_t,null),e(_t,GKo),e(_t,U_e),e(U_e,OKo),e(_t,VKo),e(_t,cd),e(cd,XKo),e(cd,J_e),e(J_e,zKo),e(cd,WKo),e(cd,dz),e(dz,QKo),e(cd,HKo),e(_t,UKo),M($6,_t,null),e(Do,JKo),e(Do,io),M(ML,io,null),e(io,YKo),e(io,Y_e),e(Y_e,KKo),e(io,ZKo),e(io,Da),e(Da,eZo),e(Da,K_e),e(K_e,oZo),e(Da,rZo),e(Da,Z_e),e(Z_e,tZo),e(Da,aZo),e(Da,eue),e(eue,nZo),e(Da,sZo),e(io,lZo),e(io,oue),e(oue,k6),e(k6,rue),e(rue,iZo),e(k6,dZo),e(k6,cz),e(cz,cZo),e(k6,fZo),e(io,mZo),e(io,S6),e(S6,gZo),e(S6,tue),e(tue,hZo),e(S6,pZo),e(S6,aue),e(aue,_Zo),e(io,uZo),M(R6,io,null),b(f,Ije,u),b(f,fd,u),e(fd,P6),e(P6,nue),M(EL,nue,null),e(fd,bZo),e(fd,sue),e(sue,vZo),b(f,Nje,u),b(f,Go,u),M(CL,Go,null),e(Go,FZo),e(Go,md),e(md,TZo),e(md,fz),e(fz,MZo),e(md,EZo),e(md,mz),e(mz,CZo),e(md,wZo),e(Go,AZo),e(Go,wL),e(wL,yZo),e(wL,lue),e(lue,LZo),e(wL,xZo),e(Go,$Zo),e(Go,ut),M(AL,ut,null),e(ut,kZo),e(ut,iue),e(iue,SZo),e(ut,RZo),e(ut,gd),e(gd,PZo),e(gd,due),e(due,BZo),e(gd,IZo),e(gd,gz),e(gz,NZo),e(gd,qZo),e(ut,jZo),M(B6,ut,null),e(Go,DZo),e(Go,co),M(yL,co,null),e(co,GZo),e(co,cue),e(cue,OZo),e(co,VZo),e(co,Ga),e(Ga,XZo),e(Ga,fue),e(fue,zZo),e(Ga,WZo),e(Ga,mue),e(mue,QZo),e(Ga,HZo),e(Ga,gue),e(gue,UZo),e(Ga,JZo),e(co,YZo),e(co,Re),e(Re,I6),e(I6,hue),e(hue,KZo),e(I6,ZZo),e(I6,hz),e(hz,eer),e(I6,oer),e(Re,rer),e(Re,N6),e(N6,pue),e(pue,ter),e(N6,aer),e(N6,pz),e(pz,ner),e(N6,ser),e(Re,ler),e(Re,q6),e(q6,_ue),e(_ue,ier),e(q6,der),e(q6,_z),e(_z,cer),e(q6,fer),e(Re,mer),e(Re,j6),e(j6,uue),e(uue,ger),e(j6,her),e(j6,uz),e(uz,per),e(j6,_er),e(Re,uer),e(Re,D6),e(D6,bue),e(bue,ber),e(D6,ver),e(D6,bz),e(bz,Fer),e(D6,Ter),e(Re,Mer),e(Re,G6),e(G6,vue),e(vue,Eer),e(G6,Cer),e(G6,vz),e(vz,wer),e(G6,Aer),e(Re,yer),e(Re,O6),e(O6,Fue),e(Fue,Ler),e(O6,xer),e(O6,Fz),e(Fz,$er),e(O6,ker),e(Re,Ser),e(Re,V6),e(V6,Tue),e(Tue,Rer),e(V6,Per),e(V6,Tz),e(Tz,Ber),e(V6,Ier),e(Re,Ner),e(Re,X6),e(X6,Mue),e(Mue,qer),e(X6,jer),e(X6,Mz),e(Mz,Der),e(X6,Ger),e(co,Oer),e(co,z6),e(z6,Ver),e(z6,Eue),e(Eue,Xer),e(z6,zer),e(z6,Cue),e(Cue,Wer),e(co,Qer),M(W6,co,null),b(f,qje,u),b(f,hd,u),e(hd,Q6),e(Q6,wue),M(LL,wue,null),e(hd,Her),e(hd,Aue),e(Aue,Uer),b(f,jje,u),b(f,Oo,u),M(xL,Oo,null),e(Oo,Jer),e(Oo,pd),e(pd,Yer),e(pd,Ez),e(Ez,Ker),e(pd,Zer),e(pd,Cz),e(Cz,eor),e(pd,oor),e(Oo,ror),e(Oo,$L),e($L,tor),e($L,yue),e(yue,aor),e($L,nor),e(Oo,sor),e(Oo,bt),M(kL,bt,null),e(bt,lor),e(bt,Lue),e(Lue,ior),e(bt,dor),e(bt,_d),e(_d,cor),e(_d,xue),e(xue,mor),e(_d,gor),e(_d,wz),e(wz,hor),e(_d,por),e(bt,_or),M(H6,bt,null),e(Oo,uor),e(Oo,fo),M(SL,fo,null),e(fo,bor),e(fo,$ue),e($ue,vor),e(fo,For),e(fo,Oa),e(Oa,Tor),e(Oa,kue),e(kue,Mor),e(Oa,Eor),e(Oa,Sue),e(Sue,Cor),e(Oa,wor),e(Oa,Rue),e(Rue,Aor),e(Oa,yor),e(fo,Lor),e(fo,Kr),e(Kr,U6),e(U6,Pue),e(Pue,xor),e(U6,$or),e(U6,Az),e(Az,kor),e(U6,Sor),e(Kr,Ror),e(Kr,J6),e(J6,Bue),e(Bue,Por),e(J6,Bor),e(J6,yz),e(yz,Ior),e(J6,Nor),e(Kr,qor),e(Kr,Y6),e(Y6,Iue),e(Iue,jor),e(Y6,Dor),e(Y6,Lz),e(Lz,Gor),e(Y6,Oor),e(Kr,Vor),e(Kr,K6),e(K6,Nue),e(Nue,Xor),e(K6,zor),e(K6,xz),e(xz,Wor),e(K6,Qor),e(Kr,Hor),e(Kr,Z6),e(Z6,que),e(que,Uor),e(Z6,Jor),e(Z6,$z),e($z,Yor),e(Z6,Kor),e(fo,Zor),e(fo,eT),e(eT,err),e(eT,jue),e(jue,orr),e(eT,rrr),e(eT,Due),e(Due,trr),e(fo,arr),M(oT,fo,null),b(f,Dje,u),b(f,ud,u),e(ud,rT),e(rT,Gue),M(RL,Gue,null),e(ud,nrr),e(ud,Oue),e(Oue,srr),b(f,Gje,u),b(f,Vo,u),M(PL,Vo,null),e(Vo,lrr),e(Vo,bd),e(bd,irr),e(bd,kz),e(kz,drr),e(bd,crr),e(bd,Sz),e(Sz,frr),e(bd,mrr),e(Vo,grr),e(Vo,BL),e(BL,hrr),e(BL,Vue),e(Vue,prr),e(BL,_rr),e(Vo,urr),e(Vo,vt),M(IL,vt,null),e(vt,brr),e(vt,Xue),e(Xue,vrr),e(vt,Frr),e(vt,vd),e(vd,Trr),e(vd,zue),e(zue,Mrr),e(vd,Err),e(vd,Rz),e(Rz,Crr),e(vd,wrr),e(vt,Arr),M(tT,vt,null),e(Vo,yrr),e(Vo,mo),M(NL,mo,null),e(mo,Lrr),e(mo,Wue),e(Wue,xrr),e(mo,$rr),e(mo,Va),e(Va,krr),e(Va,Que),e(Que,Srr),e(Va,Rrr),e(Va,Hue),e(Hue,Prr),e(Va,Brr),e(Va,Uue),e(Uue,Irr),e(Va,Nrr),e(mo,qrr),e(mo,ye),e(ye,aT),e(aT,Jue),e(Jue,jrr),e(aT,Drr),e(aT,Pz),e(Pz,Grr),e(aT,Orr),e(ye,Vrr),e(ye,nT),e(nT,Yue),e(Yue,Xrr),e(nT,zrr),e(nT,Bz),e(Bz,Wrr),e(nT,Qrr),e(ye,Hrr),e(ye,sT),e(sT,Kue),e(Kue,Urr),e(sT,Jrr),e(sT,Iz),e(Iz,Yrr),e(sT,Krr),e(ye,Zrr),e(ye,lT),e(lT,Zue),e(Zue,etr),e(lT,otr),e(lT,Nz),e(Nz,rtr),e(lT,ttr),e(ye,atr),e(ye,iT),e(iT,e2e),e(e2e,ntr),e(iT,str),e(iT,qz),e(qz,ltr),e(iT,itr),e(ye,dtr),e(ye,dT),e(dT,o2e),e(o2e,ctr),e(dT,ftr),e(dT,jz),e(jz,mtr),e(dT,gtr),e(ye,htr),e(ye,cT),e(cT,r2e),e(r2e,ptr),e(cT,_tr),e(cT,Dz),e(Dz,utr),e(cT,btr),e(ye,vtr),e(ye,fT),e(fT,t2e),e(t2e,Ftr),e(fT,Ttr),e(fT,Gz),e(Gz,Mtr),e(fT,Etr),e(ye,Ctr),e(ye,mT),e(mT,a2e),e(a2e,wtr),e(mT,Atr),e(mT,Oz),e(Oz,ytr),e(mT,Ltr),e(ye,xtr),e(ye,gT),e(gT,n2e),e(n2e,$tr),e(gT,ktr),e(gT,Vz),e(Vz,Str),e(gT,Rtr),e(mo,Ptr),e(mo,hT),e(hT,Btr),e(hT,s2e),e(s2e,Itr),e(hT,Ntr),e(hT,l2e),e(l2e,qtr),e(mo,jtr),M(pT,mo,null),b(f,Oje,u),b(f,Fd,u),e(Fd,_T),e(_T,i2e),M(qL,i2e,null),e(Fd,Dtr),e(Fd,d2e),e(d2e,Gtr),b(f,Vje,u),b(f,Xo,u),M(jL,Xo,null),e(Xo,Otr),e(Xo,Td),e(Td,Vtr),e(Td,Xz),e(Xz,Xtr),e(Td,ztr),e(Td,zz),e(zz,Wtr),e(Td,Qtr),e(Xo,Htr),e(Xo,DL),e(DL,Utr),e(DL,c2e),e(c2e,Jtr),e(DL,Ytr),e(Xo,Ktr),e(Xo,Ft),M(GL,Ft,null),e(Ft,Ztr),e(Ft,f2e),e(f2e,ear),e(Ft,oar),e(Ft,Md),e(Md,rar),e(Md,m2e),e(m2e,tar),e(Md,aar),e(Md,Wz),e(Wz,nar),e(Md,sar),e(Ft,lar),M(uT,Ft,null),e(Xo,iar),e(Xo,go),M(OL,go,null),e(go,dar),e(go,g2e),e(g2e,car),e(go,far),e(go,Xa),e(Xa,mar),e(Xa,h2e),e(h2e,gar),e(Xa,har),e(Xa,p2e),e(p2e,par),e(Xa,_ar),e(Xa,_2e),e(_2e,uar),e(Xa,bar),e(go,Far),e(go,VL),e(VL,bT),e(bT,u2e),e(u2e,Tar),e(bT,Mar),e(bT,Qz),e(Qz,Ear),e(bT,Car),e(VL,war),e(VL,vT),e(vT,b2e),e(b2e,Aar),e(vT,yar),e(vT,Hz),e(Hz,Lar),e(vT,xar),e(go,$ar),e(go,FT),e(FT,kar),e(FT,v2e),e(v2e,Sar),e(FT,Rar),e(FT,F2e),e(F2e,Par),e(go,Bar),M(TT,go,null),b(f,Xje,u),b(f,Ed,u),e(Ed,MT),e(MT,T2e),M(XL,T2e,null),e(Ed,Iar),e(Ed,M2e),e(M2e,Nar),b(f,zje,u),b(f,zo,u),M(zL,zo,null),e(zo,qar),e(zo,Cd),e(Cd,jar),e(Cd,Uz),e(Uz,Dar),e(Cd,Gar),e(Cd,Jz),e(Jz,Oar),e(Cd,Var),e(zo,Xar),e(zo,WL),e(WL,zar),e(WL,E2e),e(E2e,War),e(WL,Qar),e(zo,Har),e(zo,Tt),M(QL,Tt,null),e(Tt,Uar),e(Tt,C2e),e(C2e,Jar),e(Tt,Yar),e(Tt,wd),e(wd,Kar),e(wd,w2e),e(w2e,Zar),e(wd,enr),e(wd,Yz),e(Yz,onr),e(wd,rnr),e(Tt,tnr),M(ET,Tt,null),e(zo,anr),e(zo,ho),M(HL,ho,null),e(ho,nnr),e(ho,A2e),e(A2e,snr),e(ho,lnr),e(ho,za),e(za,inr),e(za,y2e),e(y2e,dnr),e(za,cnr),e(za,L2e),e(L2e,fnr),e(za,mnr),e(za,x2e),e(x2e,gnr),e(za,hnr),e(ho,pnr),e(ho,Zr),e(Zr,CT),e(CT,$2e),e($2e,_nr),e(CT,unr),e(CT,Kz),e(Kz,bnr),e(CT,vnr),e(Zr,Fnr),e(Zr,wT),e(wT,k2e),e(k2e,Tnr),e(wT,Mnr),e(wT,Zz),e(Zz,Enr),e(wT,Cnr),e(Zr,wnr),e(Zr,AT),e(AT,S2e),e(S2e,Anr),e(AT,ynr),e(AT,eW),e(eW,Lnr),e(AT,xnr),e(Zr,$nr),e(Zr,yT),e(yT,R2e),e(R2e,knr),e(yT,Snr),e(yT,oW),e(oW,Rnr),e(yT,Pnr),e(Zr,Bnr),e(Zr,LT),e(LT,P2e),e(P2e,Inr),e(LT,Nnr),e(LT,rW),e(rW,qnr),e(LT,jnr),e(ho,Dnr),e(ho,xT),e(xT,Gnr),e(xT,B2e),e(B2e,Onr),e(xT,Vnr),e(xT,I2e),e(I2e,Xnr),e(ho,znr),M($T,ho,null),b(f,Wje,u),b(f,Ad,u),e(Ad,kT),e(kT,N2e),M(UL,N2e,null),e(Ad,Wnr),e(Ad,q2e),e(q2e,Qnr),b(f,Qje,u),b(f,Wo,u),M(JL,Wo,null),e(Wo,Hnr),e(Wo,yd),e(yd,Unr),e(yd,tW),e(tW,Jnr),e(yd,Ynr),e(yd,aW),e(aW,Knr),e(yd,Znr),e(Wo,esr),e(Wo,YL),e(YL,osr),e(YL,j2e),e(j2e,rsr),e(YL,tsr),e(Wo,asr),e(Wo,Mt),M(KL,Mt,null),e(Mt,nsr),e(Mt,D2e),e(D2e,ssr),e(Mt,lsr),e(Mt,Ld),e(Ld,isr),e(Ld,G2e),e(G2e,dsr),e(Ld,csr),e(Ld,nW),e(nW,fsr),e(Ld,msr),e(Mt,gsr),M(ST,Mt,null),e(Wo,hsr),e(Wo,po),M(ZL,po,null),e(po,psr),e(po,O2e),e(O2e,_sr),e(po,usr),e(po,Wa),e(Wa,bsr),e(Wa,V2e),e(V2e,vsr),e(Wa,Fsr),e(Wa,X2e),e(X2e,Tsr),e(Wa,Msr),e(Wa,z2e),e(z2e,Esr),e(Wa,Csr),e(po,wsr),e(po,xd),e(xd,RT),e(RT,W2e),e(W2e,Asr),e(RT,ysr),e(RT,sW),e(sW,Lsr),e(RT,xsr),e(xd,$sr),e(xd,PT),e(PT,Q2e),e(Q2e,ksr),e(PT,Ssr),e(PT,lW),e(lW,Rsr),e(PT,Psr),e(xd,Bsr),e(xd,BT),e(BT,H2e),e(H2e,Isr),e(BT,Nsr),e(BT,iW),e(iW,qsr),e(BT,jsr),e(po,Dsr),e(po,IT),e(IT,Gsr),e(IT,U2e),e(U2e,Osr),e(IT,Vsr),e(IT,J2e),e(J2e,Xsr),e(po,zsr),M(NT,po,null),b(f,Hje,u),b(f,$d,u),e($d,qT),e(qT,Y2e),M(e8,Y2e,null),e($d,Wsr),e($d,K2e),e(K2e,Qsr),b(f,Uje,u),b(f,Qo,u),M(o8,Qo,null),e(Qo,Hsr),e(Qo,kd),e(kd,Usr),e(kd,dW),e(dW,Jsr),e(kd,Ysr),e(kd,cW),e(cW,Ksr),e(kd,Zsr),e(Qo,elr),e(Qo,r8),e(r8,olr),e(r8,Z2e),e(Z2e,rlr),e(r8,tlr),e(Qo,alr),e(Qo,Et),M(t8,Et,null),e(Et,nlr),e(Et,e1e),e(e1e,slr),e(Et,llr),e(Et,Sd),e(Sd,ilr),e(Sd,o1e),e(o1e,dlr),e(Sd,clr),e(Sd,fW),e(fW,flr),e(Sd,mlr),e(Et,glr),M(jT,Et,null),e(Qo,hlr),e(Qo,_o),M(a8,_o,null),e(_o,plr),e(_o,r1e),e(r1e,_lr),e(_o,ulr),e(_o,Qa),e(Qa,blr),e(Qa,t1e),e(t1e,vlr),e(Qa,Flr),e(Qa,a1e),e(a1e,Tlr),e(Qa,Mlr),e(Qa,n1e),e(n1e,Elr),e(Qa,Clr),e(_o,wlr),e(_o,n8),e(n8,DT),e(DT,s1e),e(s1e,Alr),e(DT,ylr),e(DT,mW),e(mW,Llr),e(DT,xlr),e(n8,$lr),e(n8,GT),e(GT,l1e),e(l1e,klr),e(GT,Slr),e(GT,gW),e(gW,Rlr),e(GT,Plr),e(_o,Blr),e(_o,OT),e(OT,Ilr),e(OT,i1e),e(i1e,Nlr),e(OT,qlr),e(OT,d1e),e(d1e,jlr),e(_o,Dlr),M(VT,_o,null),b(f,Jje,u),b(f,Rd,u),e(Rd,XT),e(XT,c1e),M(s8,c1e,null),e(Rd,Glr),e(Rd,f1e),e(f1e,Olr),b(f,Yje,u),b(f,Ho,u),M(l8,Ho,null),e(Ho,Vlr),e(Ho,Pd),e(Pd,Xlr),e(Pd,hW),e(hW,zlr),e(Pd,Wlr),e(Pd,pW),e(pW,Qlr),e(Pd,Hlr),e(Ho,Ulr),e(Ho,i8),e(i8,Jlr),e(i8,m1e),e(m1e,Ylr),e(i8,Klr),e(Ho,Zlr),e(Ho,Ct),M(d8,Ct,null),e(Ct,eir),e(Ct,g1e),e(g1e,oir),e(Ct,rir),e(Ct,Bd),e(Bd,tir),e(Bd,h1e),e(h1e,air),e(Bd,nir),e(Bd,_W),e(_W,sir),e(Bd,lir),e(Ct,iir),M(zT,Ct,null),e(Ho,dir),e(Ho,uo),M(c8,uo,null),e(uo,cir),e(uo,p1e),e(p1e,fir),e(uo,mir),e(uo,Ha),e(Ha,gir),e(Ha,_1e),e(_1e,hir),e(Ha,pir),e(Ha,u1e),e(u1e,_ir),e(Ha,uir),e(Ha,b1e),e(b1e,bir),e(Ha,vir),e(uo,Fir),e(uo,v1e),e(v1e,WT),e(WT,F1e),e(F1e,Tir),e(WT,Mir),e(WT,uW),e(uW,Eir),e(WT,Cir),e(uo,wir),e(uo,QT),e(QT,Air),e(QT,T1e),e(T1e,yir),e(QT,Lir),e(QT,M1e),e(M1e,xir),e(uo,$ir),M(HT,uo,null),b(f,Kje,u),b(f,Id,u),e(Id,UT),e(UT,E1e),M(f8,E1e,null),e(Id,kir),e(Id,C1e),e(C1e,Sir),b(f,Zje,u),b(f,Uo,u),M(m8,Uo,null),e(Uo,Rir),e(Uo,Nd),e(Nd,Pir),e(Nd,bW),e(bW,Bir),e(Nd,Iir),e(Nd,vW),e(vW,Nir),e(Nd,qir),e(Uo,jir),e(Uo,g8),e(g8,Dir),e(g8,w1e),e(w1e,Gir),e(g8,Oir),e(Uo,Vir),e(Uo,wt),M(h8,wt,null),e(wt,Xir),e(wt,A1e),e(A1e,zir),e(wt,Wir),e(wt,qd),e(qd,Qir),e(qd,y1e),e(y1e,Hir),e(qd,Uir),e(qd,FW),e(FW,Jir),e(qd,Yir),e(wt,Kir),M(JT,wt,null),e(Uo,Zir),e(Uo,bo),M(p8,bo,null),e(bo,edr),e(bo,L1e),e(L1e,odr),e(bo,rdr),e(bo,Ua),e(Ua,tdr),e(Ua,x1e),e(x1e,adr),e(Ua,ndr),e(Ua,$1e),e($1e,sdr),e(Ua,ldr),e(Ua,k1e),e(k1e,idr),e(Ua,ddr),e(bo,cdr),e(bo,Ja),e(Ja,YT),e(YT,S1e),e(S1e,fdr),e(YT,mdr),e(YT,TW),e(TW,gdr),e(YT,hdr),e(Ja,pdr),e(Ja,KT),e(KT,R1e),e(R1e,_dr),e(KT,udr),e(KT,MW),e(MW,bdr),e(KT,vdr),e(Ja,Fdr),e(Ja,ZT),e(ZT,P1e),e(P1e,Tdr),e(ZT,Mdr),e(ZT,EW),e(EW,Edr),e(ZT,Cdr),e(Ja,wdr),e(Ja,e7),e(e7,B1e),e(B1e,Adr),e(e7,ydr),e(e7,CW),e(CW,Ldr),e(e7,xdr),e(bo,$dr),e(bo,o7),e(o7,kdr),e(o7,I1e),e(I1e,Sdr),e(o7,Rdr),e(o7,N1e),e(N1e,Pdr),e(bo,Bdr),M(r7,bo,null),b(f,eDe,u),b(f,jd,u),e(jd,t7),e(t7,q1e),M(_8,q1e,null),e(jd,Idr),e(jd,j1e),e(j1e,Ndr),b(f,oDe,u),b(f,Jo,u),M(u8,Jo,null),e(Jo,qdr),e(Jo,Dd),e(Dd,jdr),e(Dd,wW),e(wW,Ddr),e(Dd,Gdr),e(Dd,AW),e(AW,Odr),e(Dd,Vdr),e(Jo,Xdr),e(Jo,b8),e(b8,zdr),e(b8,D1e),e(D1e,Wdr),e(b8,Qdr),e(Jo,Hdr),e(Jo,At),M(v8,At,null),e(At,Udr),e(At,G1e),e(G1e,Jdr),e(At,Ydr),e(At,Gd),e(Gd,Kdr),e(Gd,O1e),e(O1e,Zdr),e(Gd,ecr),e(Gd,yW),e(yW,ocr),e(Gd,rcr),e(At,tcr),M(a7,At,null),e(Jo,acr),e(Jo,vo),M(F8,vo,null),e(vo,ncr),e(vo,V1e),e(V1e,scr),e(vo,lcr),e(vo,Ya),e(Ya,icr),e(Ya,X1e),e(X1e,dcr),e(Ya,ccr),e(Ya,z1e),e(z1e,fcr),e(Ya,mcr),e(Ya,W1e),e(W1e,gcr),e(Ya,hcr),e(vo,pcr),e(vo,Q1e),e(Q1e,n7),e(n7,H1e),e(H1e,_cr),e(n7,ucr),e(n7,LW),e(LW,bcr),e(n7,vcr),e(vo,Fcr),e(vo,s7),e(s7,Tcr),e(s7,U1e),e(U1e,Mcr),e(s7,Ecr),e(s7,J1e),e(J1e,Ccr),e(vo,wcr),M(l7,vo,null),b(f,rDe,u),b(f,Od,u),e(Od,i7),e(i7,Y1e),M(T8,Y1e,null),e(Od,Acr),e(Od,K1e),e(K1e,ycr),b(f,tDe,u),b(f,Yo,u),M(M8,Yo,null),e(Yo,Lcr),e(Yo,Vd),e(Vd,xcr),e(Vd,xW),e(xW,$cr),e(Vd,kcr),e(Vd,$W),e($W,Scr),e(Vd,Rcr),e(Yo,Pcr),e(Yo,E8),e(E8,Bcr),e(E8,Z1e),e(Z1e,Icr),e(E8,Ncr),e(Yo,qcr),e(Yo,yt),M(C8,yt,null),e(yt,jcr),e(yt,ebe),e(ebe,Dcr),e(yt,Gcr),e(yt,Xd),e(Xd,Ocr),e(Xd,obe),e(obe,Vcr),e(Xd,Xcr),e(Xd,kW),e(kW,zcr),e(Xd,Wcr),e(yt,Qcr),M(d7,yt,null),e(Yo,Hcr),e(Yo,wr),M(w8,wr,null),e(wr,Ucr),e(wr,rbe),e(rbe,Jcr),e(wr,Ycr),e(wr,Ka),e(Ka,Kcr),e(Ka,tbe),e(tbe,Zcr),e(Ka,efr),e(Ka,abe),e(abe,ofr),e(Ka,rfr),e(Ka,nbe),e(nbe,tfr),e(Ka,afr),e(wr,nfr),e(wr,q),e(q,c7),e(c7,sbe),e(sbe,sfr),e(c7,lfr),e(c7,SW),e(SW,ifr),e(c7,dfr),e(q,cfr),e(q,f7),e(f7,lbe),e(lbe,ffr),e(f7,mfr),e(f7,RW),e(RW,gfr),e(f7,hfr),e(q,pfr),e(q,m7),e(m7,ibe),e(ibe,_fr),e(m7,ufr),e(m7,PW),e(PW,bfr),e(m7,vfr),e(q,Ffr),e(q,g7),e(g7,dbe),e(dbe,Tfr),e(g7,Mfr),e(g7,BW),e(BW,Efr),e(g7,Cfr),e(q,wfr),e(q,h7),e(h7,cbe),e(cbe,Afr),e(h7,yfr),e(h7,IW),e(IW,Lfr),e(h7,xfr),e(q,$fr),e(q,p7),e(p7,fbe),e(fbe,kfr),e(p7,Sfr),e(p7,NW),e(NW,Rfr),e(p7,Pfr),e(q,Bfr),e(q,_7),e(_7,mbe),e(mbe,Ifr),e(_7,Nfr),e(_7,qW),e(qW,qfr),e(_7,jfr),e(q,Dfr),e(q,u7),e(u7,gbe),e(gbe,Gfr),e(u7,Ofr),e(u7,jW),e(jW,Vfr),e(u7,Xfr),e(q,zfr),e(q,b7),e(b7,hbe),e(hbe,Wfr),e(b7,Qfr),e(b7,DW),e(DW,Hfr),e(b7,Ufr),e(q,Jfr),e(q,v7),e(v7,pbe),e(pbe,Yfr),e(v7,Kfr),e(v7,GW),e(GW,Zfr),e(v7,emr),e(q,omr),e(q,F7),e(F7,_be),e(_be,rmr),e(F7,tmr),e(F7,OW),e(OW,amr),e(F7,nmr),e(q,smr),e(q,T7),e(T7,ube),e(ube,lmr),e(T7,imr),e(T7,VW),e(VW,dmr),e(T7,cmr),e(q,fmr),e(q,M7),e(M7,bbe),e(bbe,mmr),e(M7,gmr),e(M7,XW),e(XW,hmr),e(M7,pmr),e(q,_mr),e(q,E7),e(E7,vbe),e(vbe,umr),e(E7,bmr),e(E7,zW),e(zW,vmr),e(E7,Fmr),e(q,Tmr),e(q,C7),e(C7,Fbe),e(Fbe,Mmr),e(C7,Emr),e(C7,WW),e(WW,Cmr),e(C7,wmr),e(q,Amr),e(q,w7),e(w7,Tbe),e(Tbe,ymr),e(w7,Lmr),e(w7,QW),e(QW,xmr),e(w7,$mr),e(q,kmr),e(q,A7),e(A7,Mbe),e(Mbe,Smr),e(A7,Rmr),e(A7,HW),e(HW,Pmr),e(A7,Bmr),e(q,Imr),e(q,Ns),e(Ns,Ebe),e(Ebe,Nmr),e(Ns,qmr),e(Ns,UW),e(UW,jmr),e(Ns,Dmr),e(Ns,JW),e(JW,Gmr),e(Ns,Omr),e(q,Vmr),e(q,y7),e(y7,Cbe),e(Cbe,Xmr),e(y7,zmr),e(y7,YW),e(YW,Wmr),e(y7,Qmr),e(q,Hmr),e(q,L7),e(L7,wbe),e(wbe,Umr),e(L7,Jmr),e(L7,KW),e(KW,Ymr),e(L7,Kmr),e(q,Zmr),e(q,x7),e(x7,Abe),e(Abe,egr),e(x7,ogr),e(x7,ZW),e(ZW,rgr),e(x7,tgr),e(q,agr),e(q,$7),e($7,ybe),e(ybe,ngr),e($7,sgr),e($7,eQ),e(eQ,lgr),e($7,igr),e(q,dgr),e(q,k7),e(k7,Lbe),e(Lbe,cgr),e(k7,fgr),e(k7,oQ),e(oQ,mgr),e(k7,ggr),e(q,hgr),e(q,S7),e(S7,xbe),e(xbe,pgr),e(S7,_gr),e(S7,rQ),e(rQ,ugr),e(S7,bgr),e(q,vgr),e(q,R7),e(R7,$be),e($be,Fgr),e(R7,Tgr),e(R7,tQ),e(tQ,Mgr),e(R7,Egr),e(q,Cgr),e(q,P7),e(P7,kbe),e(kbe,wgr),e(P7,Agr),e(P7,aQ),e(aQ,ygr),e(P7,Lgr),e(q,xgr),e(q,B7),e(B7,Sbe),e(Sbe,$gr),e(B7,kgr),e(B7,nQ),e(nQ,Sgr),e(B7,Rgr),e(q,Pgr),e(q,I7),e(I7,Rbe),e(Rbe,Bgr),e(I7,Igr),e(I7,sQ),e(sQ,Ngr),e(I7,qgr),e(q,jgr),e(q,N7),e(N7,Pbe),e(Pbe,Dgr),e(N7,Ggr),e(N7,lQ),e(lQ,Ogr),e(N7,Vgr),e(q,Xgr),e(q,q7),e(q7,Bbe),e(Bbe,zgr),e(q7,Wgr),e(q7,iQ),e(iQ,Qgr),e(q7,Hgr),e(q,Ugr),e(q,j7),e(j7,Ibe),e(Ibe,Jgr),e(j7,Ygr),e(j7,dQ),e(dQ,Kgr),e(j7,Zgr),e(q,ehr),e(q,D7),e(D7,Nbe),e(Nbe,ohr),e(D7,rhr),e(D7,cQ),e(cQ,thr),e(D7,ahr),e(q,nhr),e(q,G7),e(G7,qbe),e(qbe,shr),e(G7,lhr),e(G7,fQ),e(fQ,ihr),e(G7,dhr),e(q,chr),e(q,O7),e(O7,jbe),e(jbe,fhr),e(O7,mhr),e(O7,mQ),e(mQ,ghr),e(O7,hhr),e(q,phr),e(q,V7),e(V7,Dbe),e(Dbe,_hr),e(V7,uhr),e(V7,gQ),e(gQ,bhr),e(V7,vhr),e(q,Fhr),e(q,X7),e(X7,Gbe),e(Gbe,Thr),e(X7,Mhr),e(X7,hQ),e(hQ,Ehr),e(X7,Chr),e(q,whr),e(q,z7),e(z7,Obe),e(Obe,Ahr),e(z7,yhr),e(z7,pQ),e(pQ,Lhr),e(z7,xhr),e(q,$hr),e(q,W7),e(W7,Vbe),e(Vbe,khr),e(W7,Shr),e(W7,_Q),e(_Q,Rhr),e(W7,Phr),e(q,Bhr),e(q,Q7),e(Q7,Xbe),e(Xbe,Ihr),e(Q7,Nhr),e(Q7,uQ),e(uQ,qhr),e(Q7,jhr),e(q,Dhr),e(q,H7),e(H7,zbe),e(zbe,Ghr),e(H7,Ohr),e(H7,bQ),e(bQ,Vhr),e(H7,Xhr),e(q,zhr),e(q,U7),e(U7,Wbe),e(Wbe,Whr),e(U7,Qhr),e(U7,vQ),e(vQ,Hhr),e(U7,Uhr),e(q,Jhr),e(q,J7),e(J7,Qbe),e(Qbe,Yhr),e(J7,Khr),e(J7,FQ),e(FQ,Zhr),e(J7,epr),e(q,opr),e(q,Y7),e(Y7,Hbe),e(Hbe,rpr),e(Y7,tpr),e(Y7,TQ),e(TQ,apr),e(Y7,npr),e(q,spr),e(q,K7),e(K7,Ube),e(Ube,lpr),e(K7,ipr),e(K7,MQ),e(MQ,dpr),e(K7,cpr),e(q,fpr),e(q,Z7),e(Z7,Jbe),e(Jbe,mpr),e(Z7,gpr),e(Z7,EQ),e(EQ,hpr),e(Z7,ppr),e(q,_pr),e(q,eM),e(eM,Ybe),e(Ybe,upr),e(eM,bpr),e(eM,CQ),e(CQ,vpr),e(eM,Fpr),e(q,Tpr),e(q,oM),e(oM,Kbe),e(Kbe,Mpr),e(oM,Epr),e(oM,wQ),e(wQ,Cpr),e(oM,wpr),e(wr,Apr),M(rM,wr,null),b(f,aDe,u),b(f,zd,u),e(zd,tM),e(tM,Zbe),M(A8,Zbe,null),e(zd,ypr),e(zd,eve),e(eve,Lpr),b(f,nDe,u),b(f,Ko,u),M(y8,Ko,null),e(Ko,xpr),e(Ko,Wd),e(Wd,$pr),e(Wd,AQ),e(AQ,kpr),e(Wd,Spr),e(Wd,yQ),e(yQ,Rpr),e(Wd,Ppr),e(Ko,Bpr),e(Ko,L8),e(L8,Ipr),e(L8,ove),e(ove,Npr),e(L8,qpr),e(Ko,jpr),e(Ko,Lt),M(x8,Lt,null),e(Lt,Dpr),e(Lt,rve),e(rve,Gpr),e(Lt,Opr),e(Lt,Qd),e(Qd,Vpr),e(Qd,tve),e(tve,Xpr),e(Qd,zpr),e(Qd,LQ),e(LQ,Wpr),e(Qd,Qpr),e(Lt,Hpr),M(aM,Lt,null),e(Ko,Upr),e(Ko,Ar),M($8,Ar,null),e(Ar,Jpr),e(Ar,ave),e(ave,Ypr),e(Ar,Kpr),e(Ar,Za),e(Za,Zpr),e(Za,nve),e(nve,e_r),e(Za,o_r),e(Za,sve),e(sve,r_r),e(Za,t_r),e(Za,lve),e(lve,a_r),e(Za,n_r),e(Ar,s_r),e(Ar,se),e(se,nM),e(nM,ive),e(ive,l_r),e(nM,i_r),e(nM,xQ),e(xQ,d_r),e(nM,c_r),e(se,f_r),e(se,sM),e(sM,dve),e(dve,m_r),e(sM,g_r),e(sM,$Q),e($Q,h_r),e(sM,p_r),e(se,__r),e(se,lM),e(lM,cve),e(cve,u_r),e(lM,b_r),e(lM,kQ),e(kQ,v_r),e(lM,F_r),e(se,T_r),e(se,iM),e(iM,fve),e(fve,M_r),e(iM,E_r),e(iM,SQ),e(SQ,C_r),e(iM,w_r),e(se,A_r),e(se,dM),e(dM,mve),e(mve,y_r),e(dM,L_r),e(dM,RQ),e(RQ,x_r),e(dM,$_r),e(se,k_r),e(se,cM),e(cM,gve),e(gve,S_r),e(cM,R_r),e(cM,PQ),e(PQ,P_r),e(cM,B_r),e(se,I_r),e(se,fM),e(fM,hve),e(hve,N_r),e(fM,q_r),e(fM,BQ),e(BQ,j_r),e(fM,D_r),e(se,G_r),e(se,mM),e(mM,pve),e(pve,O_r),e(mM,V_r),e(mM,IQ),e(IQ,X_r),e(mM,z_r),e(se,W_r),e(se,gM),e(gM,_ve),e(_ve,Q_r),e(gM,H_r),e(gM,NQ),e(NQ,U_r),e(gM,J_r),e(se,Y_r),e(se,hM),e(hM,uve),e(uve,K_r),e(hM,Z_r),e(hM,qQ),e(qQ,eur),e(hM,our),e(se,rur),e(se,pM),e(pM,bve),e(bve,tur),e(pM,aur),e(pM,jQ),e(jQ,nur),e(pM,sur),e(se,lur),e(se,_M),e(_M,vve),e(vve,iur),e(_M,dur),e(_M,DQ),e(DQ,cur),e(_M,fur),e(se,mur),e(se,uM),e(uM,Fve),e(Fve,gur),e(uM,hur),e(uM,GQ),e(GQ,pur),e(uM,_ur),e(se,uur),e(se,bM),e(bM,Tve),e(Tve,bur),e(bM,vur),e(bM,OQ),e(OQ,Fur),e(bM,Tur),e(se,Mur),e(se,vM),e(vM,Mve),e(Mve,Eur),e(vM,Cur),e(vM,VQ),e(VQ,wur),e(vM,Aur),e(se,yur),e(se,FM),e(FM,Eve),e(Eve,Lur),e(FM,xur),e(FM,XQ),e(XQ,$ur),e(FM,kur),e(se,Sur),e(se,TM),e(TM,Cve),e(Cve,Rur),e(TM,Pur),e(TM,zQ),e(zQ,Bur),e(TM,Iur),e(se,Nur),e(se,MM),e(MM,wve),e(wve,qur),e(MM,jur),e(MM,WQ),e(WQ,Dur),e(MM,Gur),e(se,Our),e(se,EM),e(EM,Ave),e(Ave,Vur),e(EM,Xur),e(EM,QQ),e(QQ,zur),e(EM,Wur),e(se,Qur),e(se,CM),e(CM,yve),e(yve,Hur),e(CM,Uur),e(CM,HQ),e(HQ,Jur),e(CM,Yur),e(se,Kur),e(se,wM),e(wM,Lve),e(Lve,Zur),e(wM,e2r),e(wM,UQ),e(UQ,o2r),e(wM,r2r),e(se,t2r),e(se,AM),e(AM,xve),e(xve,a2r),e(AM,n2r),e(AM,JQ),e(JQ,s2r),e(AM,l2r),e(se,i2r),e(se,yM),e(yM,$ve),e($ve,d2r),e(yM,c2r),e(yM,YQ),e(YQ,f2r),e(yM,m2r),e(Ar,g2r),M(LM,Ar,null),b(f,sDe,u),b(f,Hd,u),e(Hd,xM),e(xM,kve),M(k8,kve,null),e(Hd,h2r),e(Hd,Sve),e(Sve,p2r),b(f,lDe,u),b(f,Zo,u),M(S8,Zo,null),e(Zo,_2r),e(Zo,Ud),e(Ud,u2r),e(Ud,KQ),e(KQ,b2r),e(Ud,v2r),e(Ud,ZQ),e(ZQ,F2r),e(Ud,T2r),e(Zo,M2r),e(Zo,R8),e(R8,E2r),e(R8,Rve),e(Rve,C2r),e(R8,w2r),e(Zo,A2r),e(Zo,xt),M(P8,xt,null),e(xt,y2r),e(xt,Pve),e(Pve,L2r),e(xt,x2r),e(xt,Jd),e(Jd,$2r),e(Jd,Bve),e(Bve,k2r),e(Jd,S2r),e(Jd,eH),e(eH,R2r),e(Jd,P2r),e(xt,B2r),M($M,xt,null),e(Zo,I2r),e(Zo,yr),M(B8,yr,null),e(yr,N2r),e(yr,Ive),e(Ive,q2r),e(yr,j2r),e(yr,en),e(en,D2r),e(en,Nve),e(Nve,G2r),e(en,O2r),e(en,qve),e(qve,V2r),e(en,X2r),e(en,jve),e(jve,z2r),e(en,W2r),e(yr,Q2r),e(yr,Me),e(Me,kM),e(kM,Dve),e(Dve,H2r),e(kM,U2r),e(kM,oH),e(oH,J2r),e(kM,Y2r),e(Me,K2r),e(Me,SM),e(SM,Gve),e(Gve,Z2r),e(SM,e1r),e(SM,rH),e(rH,o1r),e(SM,r1r),e(Me,t1r),e(Me,RM),e(RM,Ove),e(Ove,a1r),e(RM,n1r),e(RM,tH),e(tH,s1r),e(RM,l1r),e(Me,i1r),e(Me,PM),e(PM,Vve),e(Vve,d1r),e(PM,c1r),e(PM,aH),e(aH,f1r),e(PM,m1r),e(Me,g1r),e(Me,BM),e(BM,Xve),e(Xve,h1r),e(BM,p1r),e(BM,nH),e(nH,_1r),e(BM,u1r),e(Me,b1r),e(Me,IM),e(IM,zve),e(zve,v1r),e(IM,F1r),e(IM,sH),e(sH,T1r),e(IM,M1r),e(Me,E1r),e(Me,NM),e(NM,Wve),e(Wve,C1r),e(NM,w1r),e(NM,lH),e(lH,A1r),e(NM,y1r),e(Me,L1r),e(Me,qM),e(qM,Qve),e(Qve,x1r),e(qM,$1r),e(qM,iH),e(iH,k1r),e(qM,S1r),e(Me,R1r),e(Me,jM),e(jM,Hve),e(Hve,P1r),e(jM,B1r),e(jM,dH),e(dH,I1r),e(jM,N1r),e(Me,q1r),e(Me,DM),e(DM,Uve),e(Uve,j1r),e(DM,D1r),e(DM,cH),e(cH,G1r),e(DM,O1r),e(Me,V1r),e(Me,GM),e(GM,Jve),e(Jve,X1r),e(GM,z1r),e(GM,fH),e(fH,W1r),e(GM,Q1r),e(Me,H1r),e(Me,OM),e(OM,Yve),e(Yve,U1r),e(OM,J1r),e(OM,mH),e(mH,Y1r),e(OM,K1r),e(Me,Z1r),e(Me,VM),e(VM,Kve),e(Kve,ebr),e(VM,obr),e(VM,gH),e(gH,rbr),e(VM,tbr),e(yr,abr),M(XM,yr,null),b(f,iDe,u),b(f,Yd,u),e(Yd,zM),e(zM,Zve),M(I8,Zve,null),e(Yd,nbr),e(Yd,eFe),e(eFe,sbr),b(f,dDe,u),b(f,er,u),M(N8,er,null),e(er,lbr),e(er,Kd),e(Kd,ibr),e(Kd,hH),e(hH,dbr),e(Kd,cbr),e(Kd,pH),e(pH,fbr),e(Kd,mbr),e(er,gbr),e(er,q8),e(q8,hbr),e(q8,oFe),e(oFe,pbr),e(q8,_br),e(er,ubr),e(er,$t),M(j8,$t,null),e($t,bbr),e($t,rFe),e(rFe,vbr),e($t,Fbr),e($t,Zd),e(Zd,Tbr),e(Zd,tFe),e(tFe,Mbr),e(Zd,Ebr),e(Zd,_H),e(_H,Cbr),e(Zd,wbr),e($t,Abr),M(WM,$t,null),e(er,ybr),e(er,Lr),M(D8,Lr,null),e(Lr,Lbr),e(Lr,aFe),e(aFe,xbr),e(Lr,$br),e(Lr,on),e(on,kbr),e(on,nFe),e(nFe,Sbr),e(on,Rbr),e(on,sFe),e(sFe,Pbr),e(on,Bbr),e(on,lFe),e(lFe,Ibr),e(on,Nbr),e(Lr,qbr),e(Lr,rn),e(rn,QM),e(QM,iFe),e(iFe,jbr),e(QM,Dbr),e(QM,uH),e(uH,Gbr),e(QM,Obr),e(rn,Vbr),e(rn,HM),e(HM,dFe),e(dFe,Xbr),e(HM,zbr),e(HM,bH),e(bH,Wbr),e(HM,Qbr),e(rn,Hbr),e(rn,UM),e(UM,cFe),e(cFe,Ubr),e(UM,Jbr),e(UM,vH),e(vH,Ybr),e(UM,Kbr),e(rn,Zbr),e(rn,JM),e(JM,fFe),e(fFe,evr),e(JM,ovr),e(JM,FH),e(FH,rvr),e(JM,tvr),e(Lr,avr),M(YM,Lr,null),b(f,cDe,u),b(f,ec,u),e(ec,KM),e(KM,mFe),M(G8,mFe,null),e(ec,nvr),e(ec,gFe),e(gFe,svr),b(f,fDe,u),b(f,or,u),M(O8,or,null),e(or,lvr),e(or,oc),e(oc,ivr),e(oc,TH),e(TH,dvr),e(oc,cvr),e(oc,MH),e(MH,fvr),e(oc,mvr),e(or,gvr),e(or,V8),e(V8,hvr),e(V8,hFe),e(hFe,pvr),e(V8,_vr),e(or,uvr),e(or,kt),M(X8,kt,null),e(kt,bvr),e(kt,pFe),e(pFe,vvr),e(kt,Fvr),e(kt,rc),e(rc,Tvr),e(rc,_Fe),e(_Fe,Mvr),e(rc,Evr),e(rc,EH),e(EH,Cvr),e(rc,wvr),e(kt,Avr),M(ZM,kt,null),e(or,yvr),e(or,xr),M(z8,xr,null),e(xr,Lvr),e(xr,uFe),e(uFe,xvr),e(xr,$vr),e(xr,tn),e(tn,kvr),e(tn,bFe),e(bFe,Svr),e(tn,Rvr),e(tn,vFe),e(vFe,Pvr),e(tn,Bvr),e(tn,FFe),e(FFe,Ivr),e(tn,Nvr),e(xr,qvr),e(xr,ie),e(ie,e4),e(e4,TFe),e(TFe,jvr),e(e4,Dvr),e(e4,CH),e(CH,Gvr),e(e4,Ovr),e(ie,Vvr),e(ie,o4),e(o4,MFe),e(MFe,Xvr),e(o4,zvr),e(o4,wH),e(wH,Wvr),e(o4,Qvr),e(ie,Hvr),e(ie,r4),e(r4,EFe),e(EFe,Uvr),e(r4,Jvr),e(r4,AH),e(AH,Yvr),e(r4,Kvr),e(ie,Zvr),e(ie,t4),e(t4,CFe),e(CFe,eFr),e(t4,oFr),e(t4,yH),e(yH,rFr),e(t4,tFr),e(ie,aFr),e(ie,a4),e(a4,wFe),e(wFe,nFr),e(a4,sFr),e(a4,LH),e(LH,lFr),e(a4,iFr),e(ie,dFr),e(ie,n4),e(n4,AFe),e(AFe,cFr),e(n4,fFr),e(n4,xH),e(xH,mFr),e(n4,gFr),e(ie,hFr),e(ie,s4),e(s4,yFe),e(yFe,pFr),e(s4,_Fr),e(s4,$H),e($H,uFr),e(s4,bFr),e(ie,vFr),e(ie,l4),e(l4,LFe),e(LFe,FFr),e(l4,TFr),e(l4,kH),e(kH,MFr),e(l4,EFr),e(ie,CFr),e(ie,i4),e(i4,xFe),e(xFe,wFr),e(i4,AFr),e(i4,SH),e(SH,yFr),e(i4,LFr),e(ie,xFr),e(ie,d4),e(d4,$Fe),e($Fe,$Fr),e(d4,kFr),e(d4,RH),e(RH,SFr),e(d4,RFr),e(ie,PFr),e(ie,c4),e(c4,kFe),e(kFe,BFr),e(c4,IFr),e(c4,PH),e(PH,NFr),e(c4,qFr),e(ie,jFr),e(ie,f4),e(f4,SFe),e(SFe,DFr),e(f4,GFr),e(f4,BH),e(BH,OFr),e(f4,VFr),e(ie,XFr),e(ie,m4),e(m4,RFe),e(RFe,zFr),e(m4,WFr),e(m4,IH),e(IH,QFr),e(m4,HFr),e(ie,UFr),e(ie,g4),e(g4,PFe),e(PFe,JFr),e(g4,YFr),e(g4,NH),e(NH,KFr),e(g4,ZFr),e(ie,e6r),e(ie,h4),e(h4,BFe),e(BFe,o6r),e(h4,r6r),e(h4,qH),e(qH,t6r),e(h4,a6r),e(ie,n6r),e(ie,p4),e(p4,IFe),e(IFe,s6r),e(p4,l6r),e(p4,jH),e(jH,i6r),e(p4,d6r),e(ie,c6r),e(ie,_4),e(_4,NFe),e(NFe,f6r),e(_4,m6r),e(_4,DH),e(DH,g6r),e(_4,h6r),e(ie,p6r),e(ie,u4),e(u4,qFe),e(qFe,_6r),e(u4,u6r),e(u4,GH),e(GH,b6r),e(u4,v6r),e(ie,F6r),e(ie,b4),e(b4,jFe),e(jFe,T6r),e(b4,M6r),e(b4,OH),e(OH,E6r),e(b4,C6r),e(ie,w6r),e(ie,v4),e(v4,DFe),e(DFe,A6r),e(v4,y6r),e(v4,VH),e(VH,L6r),e(v4,x6r),e(xr,$6r),M(F4,xr,null),b(f,mDe,u),b(f,tc,u),e(tc,T4),e(T4,GFe),M(W8,GFe,null),e(tc,k6r),e(tc,OFe),e(OFe,S6r),b(f,gDe,u),b(f,rr,u),M(Q8,rr,null),e(rr,R6r),e(rr,ac),e(ac,P6r),e(ac,XH),e(XH,B6r),e(ac,I6r),e(ac,zH),e(zH,N6r),e(ac,q6r),e(rr,j6r),e(rr,H8),e(H8,D6r),e(H8,VFe),e(VFe,G6r),e(H8,O6r),e(rr,V6r),e(rr,St),M(U8,St,null),e(St,X6r),e(St,XFe),e(XFe,z6r),e(St,W6r),e(St,nc),e(nc,Q6r),e(nc,zFe),e(zFe,H6r),e(nc,U6r),e(nc,WH),e(WH,J6r),e(nc,Y6r),e(St,K6r),M(M4,St,null),e(rr,Z6r),e(rr,$r),M(J8,$r,null),e($r,eTr),e($r,WFe),e(WFe,oTr),e($r,rTr),e($r,an),e(an,tTr),e(an,QFe),e(QFe,aTr),e(an,nTr),e(an,HFe),e(HFe,sTr),e(an,lTr),e(an,UFe),e(UFe,iTr),e(an,dTr),e($r,cTr),e($r,Le),e(Le,E4),e(E4,JFe),e(JFe,fTr),e(E4,mTr),e(E4,QH),e(QH,gTr),e(E4,hTr),e(Le,pTr),e(Le,C4),e(C4,YFe),e(YFe,_Tr),e(C4,uTr),e(C4,HH),e(HH,bTr),e(C4,vTr),e(Le,FTr),e(Le,w4),e(w4,KFe),e(KFe,TTr),e(w4,MTr),e(w4,UH),e(UH,ETr),e(w4,CTr),e(Le,wTr),e(Le,A4),e(A4,ZFe),e(ZFe,ATr),e(A4,yTr),e(A4,JH),e(JH,LTr),e(A4,xTr),e(Le,$Tr),e(Le,y4),e(y4,e6e),e(e6e,kTr),e(y4,STr),e(y4,YH),e(YH,RTr),e(y4,PTr),e(Le,BTr),e(Le,L4),e(L4,o6e),e(o6e,ITr),e(L4,NTr),e(L4,KH),e(KH,qTr),e(L4,jTr),e(Le,DTr),e(Le,x4),e(x4,r6e),e(r6e,GTr),e(x4,OTr),e(x4,ZH),e(ZH,VTr),e(x4,XTr),e(Le,zTr),e(Le,$4),e($4,t6e),e(t6e,WTr),e($4,QTr),e($4,eU),e(eU,HTr),e($4,UTr),e(Le,JTr),e(Le,k4),e(k4,a6e),e(a6e,YTr),e(k4,KTr),e(k4,oU),e(oU,ZTr),e(k4,e7r),e(Le,o7r),e(Le,S4),e(S4,n6e),e(n6e,r7r),e(S4,t7r),e(S4,rU),e(rU,a7r),e(S4,n7r),e($r,s7r),M(R4,$r,null),b(f,hDe,u),b(f,sc,u),e(sc,P4),e(P4,s6e),M(Y8,s6e,null),e(sc,l7r),e(sc,l6e),e(l6e,i7r),b(f,pDe,u),b(f,tr,u),M(K8,tr,null),e(tr,d7r),e(tr,lc),e(lc,c7r),e(lc,tU),e(tU,f7r),e(lc,m7r),e(lc,aU),e(aU,g7r),e(lc,h7r),e(tr,p7r),e(tr,Z8),e(Z8,_7r),e(Z8,i6e),e(i6e,u7r),e(Z8,b7r),e(tr,v7r),e(tr,Rt),M(e9,Rt,null),e(Rt,F7r),e(Rt,d6e),e(d6e,T7r),e(Rt,M7r),e(Rt,ic),e(ic,E7r),e(ic,c6e),e(c6e,C7r),e(ic,w7r),e(ic,nU),e(nU,A7r),e(ic,y7r),e(Rt,L7r),M(B4,Rt,null),e(tr,x7r),e(tr,kr),M(o9,kr,null),e(kr,$7r),e(kr,f6e),e(f6e,k7r),e(kr,S7r),e(kr,nn),e(nn,R7r),e(nn,m6e),e(m6e,P7r),e(nn,B7r),e(nn,g6e),e(g6e,I7r),e(nn,N7r),e(nn,h6e),e(h6e,q7r),e(nn,j7r),e(kr,D7r),e(kr,oe),e(oe,I4),e(I4,p6e),e(p6e,G7r),e(I4,O7r),e(I4,sU),e(sU,V7r),e(I4,X7r),e(oe,z7r),e(oe,N4),e(N4,_6e),e(_6e,W7r),e(N4,Q7r),e(N4,lU),e(lU,H7r),e(N4,U7r),e(oe,J7r),e(oe,q4),e(q4,u6e),e(u6e,Y7r),e(q4,K7r),e(q4,iU),e(iU,Z7r),e(q4,eMr),e(oe,oMr),e(oe,j4),e(j4,b6e),e(b6e,rMr),e(j4,tMr),e(j4,dU),e(dU,aMr),e(j4,nMr),e(oe,sMr),e(oe,D4),e(D4,v6e),e(v6e,lMr),e(D4,iMr),e(D4,cU),e(cU,dMr),e(D4,cMr),e(oe,fMr),e(oe,G4),e(G4,F6e),e(F6e,mMr),e(G4,gMr),e(G4,fU),e(fU,hMr),e(G4,pMr),e(oe,_Mr),e(oe,O4),e(O4,T6e),e(T6e,uMr),e(O4,bMr),e(O4,mU),e(mU,vMr),e(O4,FMr),e(oe,TMr),e(oe,V4),e(V4,M6e),e(M6e,MMr),e(V4,EMr),e(V4,gU),e(gU,CMr),e(V4,wMr),e(oe,AMr),e(oe,X4),e(X4,E6e),e(E6e,yMr),e(X4,LMr),e(X4,hU),e(hU,xMr),e(X4,$Mr),e(oe,kMr),e(oe,z4),e(z4,C6e),e(C6e,SMr),e(z4,RMr),e(z4,pU),e(pU,PMr),e(z4,BMr),e(oe,IMr),e(oe,W4),e(W4,w6e),e(w6e,NMr),e(W4,qMr),e(W4,_U),e(_U,jMr),e(W4,DMr),e(oe,GMr),e(oe,Q4),e(Q4,A6e),e(A6e,OMr),e(Q4,VMr),e(Q4,uU),e(uU,XMr),e(Q4,zMr),e(oe,WMr),e(oe,H4),e(H4,y6e),e(y6e,QMr),e(H4,HMr),e(H4,bU),e(bU,UMr),e(H4,JMr),e(oe,YMr),e(oe,U4),e(U4,L6e),e(L6e,KMr),e(U4,ZMr),e(U4,vU),e(vU,e4r),e(U4,o4r),e(oe,r4r),e(oe,J4),e(J4,x6e),e(x6e,t4r),e(J4,a4r),e(J4,FU),e(FU,n4r),e(J4,s4r),e(oe,l4r),e(oe,Y4),e(Y4,$6e),e($6e,i4r),e(Y4,d4r),e(Y4,TU),e(TU,c4r),e(Y4,f4r),e(oe,m4r),e(oe,K4),e(K4,k6e),e(k6e,g4r),e(K4,h4r),e(K4,MU),e(MU,p4r),e(K4,_4r),e(oe,u4r),e(oe,Z4),e(Z4,S6e),e(S6e,b4r),e(Z4,v4r),e(Z4,EU),e(EU,F4r),e(Z4,T4r),e(oe,M4r),e(oe,eE),e(eE,R6e),e(R6e,E4r),e(eE,C4r),e(eE,CU),e(CU,w4r),e(eE,A4r),e(oe,y4r),e(oe,oE),e(oE,P6e),e(P6e,L4r),e(oE,x4r),e(oE,wU),e(wU,$4r),e(oE,k4r),e(oe,S4r),e(oe,rE),e(rE,B6e),e(B6e,R4r),e(rE,P4r),e(rE,AU),e(AU,B4r),e(rE,I4r),e(oe,N4r),e(oe,tE),e(tE,I6e),e(I6e,q4r),e(tE,j4r),e(tE,yU),e(yU,D4r),e(tE,G4r),e(oe,O4r),e(oe,aE),e(aE,N6e),e(N6e,V4r),e(aE,X4r),e(aE,LU),e(LU,z4r),e(aE,W4r),e(oe,Q4r),e(oe,nE),e(nE,q6e),e(q6e,H4r),e(nE,U4r),e(nE,xU),e(xU,J4r),e(nE,Y4r),e(oe,K4r),e(oe,sE),e(sE,j6e),e(j6e,Z4r),e(sE,eEr),e(sE,$U),e($U,oEr),e(sE,rEr),e(oe,tEr),e(oe,lE),e(lE,D6e),e(D6e,aEr),e(lE,nEr),e(lE,kU),e(kU,sEr),e(lE,lEr),e(kr,iEr),M(iE,kr,null),b(f,_De,u),b(f,dc,u),e(dc,dE),e(dE,G6e),M(r9,G6e,null),e(dc,dEr),e(dc,O6e),e(O6e,cEr),b(f,uDe,u),b(f,ar,u),M(t9,ar,null),e(ar,fEr),e(ar,cc),e(cc,mEr),e(cc,SU),e(SU,gEr),e(cc,hEr),e(cc,RU),e(RU,pEr),e(cc,_Er),e(ar,uEr),e(ar,a9),e(a9,bEr),e(a9,V6e),e(V6e,vEr),e(a9,FEr),e(ar,TEr),e(ar,Pt),M(n9,Pt,null),e(Pt,MEr),e(Pt,X6e),e(X6e,EEr),e(Pt,CEr),e(Pt,fc),e(fc,wEr),e(fc,z6e),e(z6e,AEr),e(fc,yEr),e(fc,PU),e(PU,LEr),e(fc,xEr),e(Pt,$Er),M(cE,Pt,null),e(ar,kEr),e(ar,Sr),M(s9,Sr,null),e(Sr,SEr),e(Sr,W6e),e(W6e,REr),e(Sr,PEr),e(Sr,sn),e(sn,BEr),e(sn,Q6e),e(Q6e,IEr),e(sn,NEr),e(sn,H6e),e(H6e,qEr),e(sn,jEr),e(sn,U6e),e(U6e,DEr),e(sn,GEr),e(Sr,OEr),e(Sr,pe),e(pe,fE),e(fE,J6e),e(J6e,VEr),e(fE,XEr),e(fE,BU),e(BU,zEr),e(fE,WEr),e(pe,QEr),e(pe,mE),e(mE,Y6e),e(Y6e,HEr),e(mE,UEr),e(mE,IU),e(IU,JEr),e(mE,YEr),e(pe,KEr),e(pe,gE),e(gE,K6e),e(K6e,ZEr),e(gE,eCr),e(gE,NU),e(NU,oCr),e(gE,rCr),e(pe,tCr),e(pe,hE),e(hE,Z6e),e(Z6e,aCr),e(hE,nCr),e(hE,qU),e(qU,sCr),e(hE,lCr),e(pe,iCr),e(pe,pE),e(pE,eTe),e(eTe,dCr),e(pE,cCr),e(pE,jU),e(jU,fCr),e(pE,mCr),e(pe,gCr),e(pe,_E),e(_E,oTe),e(oTe,hCr),e(_E,pCr),e(_E,DU),e(DU,_Cr),e(_E,uCr),e(pe,bCr),e(pe,uE),e(uE,rTe),e(rTe,vCr),e(uE,FCr),e(uE,GU),e(GU,TCr),e(uE,MCr),e(pe,ECr),e(pe,bE),e(bE,tTe),e(tTe,CCr),e(bE,wCr),e(bE,OU),e(OU,ACr),e(bE,yCr),e(pe,LCr),e(pe,vE),e(vE,aTe),e(aTe,xCr),e(vE,$Cr),e(vE,VU),e(VU,kCr),e(vE,SCr),e(pe,RCr),e(pe,FE),e(FE,nTe),e(nTe,PCr),e(FE,BCr),e(FE,XU),e(XU,ICr),e(FE,NCr),e(pe,qCr),e(pe,TE),e(TE,sTe),e(sTe,jCr),e(TE,DCr),e(TE,zU),e(zU,GCr),e(TE,OCr),e(pe,VCr),e(pe,ME),e(ME,lTe),e(lTe,XCr),e(ME,zCr),e(ME,WU),e(WU,WCr),e(ME,QCr),e(pe,HCr),e(pe,EE),e(EE,iTe),e(iTe,UCr),e(EE,JCr),e(EE,QU),e(QU,YCr),e(EE,KCr),e(pe,ZCr),e(pe,CE),e(CE,dTe),e(dTe,e5r),e(CE,o5r),e(CE,HU),e(HU,r5r),e(CE,t5r),e(pe,a5r),e(pe,wE),e(wE,cTe),e(cTe,n5r),e(wE,s5r),e(wE,UU),e(UU,l5r),e(wE,i5r),e(pe,d5r),e(pe,AE),e(AE,fTe),e(fTe,c5r),e(AE,f5r),e(AE,JU),e(JU,m5r),e(AE,g5r),e(pe,h5r),e(pe,yE),e(yE,mTe),e(mTe,p5r),e(yE,_5r),e(yE,YU),e(YU,u5r),e(yE,b5r),e(Sr,v5r),M(LE,Sr,null),b(f,bDe,u),b(f,mc,u),e(mc,xE),e(xE,gTe),M(l9,gTe,null),e(mc,F5r),e(mc,hTe),e(hTe,T5r),b(f,vDe,u),b(f,nr,u),M(i9,nr,null),e(nr,M5r),e(nr,gc),e(gc,E5r),e(gc,KU),e(KU,C5r),e(gc,w5r),e(gc,ZU),e(ZU,A5r),e(gc,y5r),e(nr,L5r),e(nr,d9),e(d9,x5r),e(d9,pTe),e(pTe,$5r),e(d9,k5r),e(nr,S5r),e(nr,Bt),M(c9,Bt,null),e(Bt,R5r),e(Bt,_Te),e(_Te,P5r),e(Bt,B5r),e(Bt,hc),e(hc,I5r),e(hc,uTe),e(uTe,N5r),e(hc,q5r),e(hc,eJ),e(eJ,j5r),e(hc,D5r),e(Bt,G5r),M($E,Bt,null),e(nr,O5r),e(nr,Rr),M(f9,Rr,null),e(Rr,V5r),e(Rr,bTe),e(bTe,X5r),e(Rr,z5r),e(Rr,ln),e(ln,W5r),e(ln,vTe),e(vTe,Q5r),e(ln,H5r),e(ln,FTe),e(FTe,U5r),e(ln,J5r),e(ln,TTe),e(TTe,Y5r),e(ln,K5r),e(Rr,Z5r),e(Rr,m9),e(m9,kE),e(kE,MTe),e(MTe,e3r),e(kE,o3r),e(kE,oJ),e(oJ,r3r),e(kE,t3r),e(m9,a3r),e(m9,SE),e(SE,ETe),e(ETe,n3r),e(SE,s3r),e(SE,rJ),e(rJ,l3r),e(SE,i3r),e(Rr,d3r),M(RE,Rr,null),b(f,FDe,u),b(f,pc,u),e(pc,PE),e(PE,CTe),M(g9,CTe,null),e(pc,c3r),e(pc,wTe),e(wTe,f3r),b(f,TDe,u),b(f,sr,u),M(h9,sr,null),e(sr,m3r),e(sr,_c),e(_c,g3r),e(_c,tJ),e(tJ,h3r),e(_c,p3r),e(_c,aJ),e(aJ,_3r),e(_c,u3r),e(sr,b3r),e(sr,p9),e(p9,v3r),e(p9,ATe),e(ATe,F3r),e(p9,T3r),e(sr,M3r),e(sr,It),M(_9,It,null),e(It,E3r),e(It,yTe),e(yTe,C3r),e(It,w3r),e(It,uc),e(uc,A3r),e(uc,LTe),e(LTe,y3r),e(uc,L3r),e(uc,nJ),e(nJ,x3r),e(uc,$3r),e(It,k3r),M(BE,It,null),e(sr,S3r),e(sr,Pr),M(u9,Pr,null),e(Pr,R3r),e(Pr,xTe),e(xTe,P3r),e(Pr,B3r),e(Pr,dn),e(dn,I3r),e(dn,$Te),e($Te,N3r),e(dn,q3r),e(dn,kTe),e(kTe,j3r),e(dn,D3r),e(dn,STe),e(STe,G3r),e(dn,O3r),e(Pr,V3r),e(Pr,RTe),e(RTe,IE),e(IE,PTe),e(PTe,X3r),e(IE,z3r),e(IE,sJ),e(sJ,W3r),e(IE,Q3r),e(Pr,H3r),M(NE,Pr,null),b(f,MDe,u),b(f,bc,u),e(bc,qE),e(qE,BTe),M(b9,BTe,null),e(bc,U3r),e(bc,ITe),e(ITe,J3r),b(f,EDe,u),b(f,lr,u),M(v9,lr,null),e(lr,Y3r),e(lr,vc),e(vc,K3r),e(vc,lJ),e(lJ,Z3r),e(vc,e0r),e(vc,iJ),e(iJ,o0r),e(vc,r0r),e(lr,t0r),e(lr,F9),e(F9,a0r),e(F9,NTe),e(NTe,n0r),e(F9,s0r),e(lr,l0r),e(lr,Nt),M(T9,Nt,null),e(Nt,i0r),e(Nt,qTe),e(qTe,d0r),e(Nt,c0r),e(Nt,Fc),e(Fc,f0r),e(Fc,jTe),e(jTe,m0r),e(Fc,g0r),e(Fc,dJ),e(dJ,h0r),e(Fc,p0r),e(Nt,_0r),M(jE,Nt,null),e(lr,u0r),e(lr,Br),M(M9,Br,null),e(Br,b0r),e(Br,DTe),e(DTe,v0r),e(Br,F0r),e(Br,cn),e(cn,T0r),e(cn,GTe),e(GTe,M0r),e(cn,E0r),e(cn,OTe),e(OTe,C0r),e(cn,w0r),e(cn,VTe),e(VTe,A0r),e(cn,y0r),e(Br,L0r),e(Br,de),e(de,DE),e(DE,XTe),e(XTe,x0r),e(DE,$0r),e(DE,cJ),e(cJ,k0r),e(DE,S0r),e(de,R0r),e(de,GE),e(GE,zTe),e(zTe,P0r),e(GE,B0r),e(GE,fJ),e(fJ,I0r),e(GE,N0r),e(de,q0r),e(de,OE),e(OE,WTe),e(WTe,j0r),e(OE,D0r),e(OE,mJ),e(mJ,G0r),e(OE,O0r),e(de,V0r),e(de,VE),e(VE,QTe),e(QTe,X0r),e(VE,z0r),e(VE,gJ),e(gJ,W0r),e(VE,Q0r),e(de,H0r),e(de,XE),e(XE,HTe),e(HTe,U0r),e(XE,J0r),e(XE,hJ),e(hJ,Y0r),e(XE,K0r),e(de,Z0r),e(de,zE),e(zE,UTe),e(UTe,ewr),e(zE,owr),e(zE,pJ),e(pJ,rwr),e(zE,twr),e(de,awr),e(de,WE),e(WE,JTe),e(JTe,nwr),e(WE,swr),e(WE,_J),e(_J,lwr),e(WE,iwr),e(de,dwr),e(de,QE),e(QE,YTe),e(YTe,cwr),e(QE,fwr),e(QE,uJ),e(uJ,mwr),e(QE,gwr),e(de,hwr),e(de,HE),e(HE,KTe),e(KTe,pwr),e(HE,_wr),e(HE,bJ),e(bJ,uwr),e(HE,bwr),e(de,vwr),e(de,UE),e(UE,ZTe),e(ZTe,Fwr),e(UE,Twr),e(UE,vJ),e(vJ,Mwr),e(UE,Ewr),e(de,Cwr),e(de,JE),e(JE,e7e),e(e7e,wwr),e(JE,Awr),e(JE,FJ),e(FJ,ywr),e(JE,Lwr),e(de,xwr),e(de,YE),e(YE,o7e),e(o7e,$wr),e(YE,kwr),e(YE,TJ),e(TJ,Swr),e(YE,Rwr),e(de,Pwr),e(de,KE),e(KE,r7e),e(r7e,Bwr),e(KE,Iwr),e(KE,MJ),e(MJ,Nwr),e(KE,qwr),e(de,jwr),e(de,ZE),e(ZE,t7e),e(t7e,Dwr),e(ZE,Gwr),e(ZE,EJ),e(EJ,Owr),e(ZE,Vwr),e(de,Xwr),e(de,eC),e(eC,a7e),e(a7e,zwr),e(eC,Wwr),e(eC,CJ),e(CJ,Qwr),e(eC,Hwr),e(de,Uwr),e(de,oC),e(oC,n7e),e(n7e,Jwr),e(oC,Ywr),e(oC,wJ),e(wJ,Kwr),e(oC,Zwr),e(de,eAr),e(de,rC),e(rC,s7e),e(s7e,oAr),e(rC,rAr),e(rC,AJ),e(AJ,tAr),e(rC,aAr),e(de,nAr),e(de,tC),e(tC,l7e),e(l7e,sAr),e(tC,lAr),e(tC,yJ),e(yJ,iAr),e(tC,dAr),e(de,cAr),e(de,aC),e(aC,i7e),e(i7e,fAr),e(aC,mAr),e(aC,LJ),e(LJ,gAr),e(aC,hAr),e(de,pAr),e(de,nC),e(nC,d7e),e(d7e,_Ar),e(nC,uAr),e(nC,xJ),e(xJ,bAr),e(nC,vAr),e(Br,FAr),M(sC,Br,null),b(f,CDe,u),b(f,Tc,u),e(Tc,lC),e(lC,c7e),M(E9,c7e,null),e(Tc,TAr),e(Tc,f7e),e(f7e,MAr),b(f,wDe,u),b(f,ir,u),M(C9,ir,null),e(ir,EAr),e(ir,Mc),e(Mc,CAr),e(Mc,$J),e($J,wAr),e(Mc,AAr),e(Mc,kJ),e(kJ,yAr),e(Mc,LAr),e(ir,xAr),e(ir,w9),e(w9,$Ar),e(w9,m7e),e(m7e,kAr),e(w9,SAr),e(ir,RAr),e(ir,qt),M(A9,qt,null),e(qt,PAr),e(qt,g7e),e(g7e,BAr),e(qt,IAr),e(qt,Ec),e(Ec,NAr),e(Ec,h7e),e(h7e,qAr),e(Ec,jAr),e(Ec,SJ),e(SJ,DAr),e(Ec,GAr),e(qt,OAr),M(iC,qt,null),e(ir,VAr),e(ir,Ir),M(y9,Ir,null),e(Ir,XAr),e(Ir,p7e),e(p7e,zAr),e(Ir,WAr),e(Ir,fn),e(fn,QAr),e(fn,_7e),e(_7e,HAr),e(fn,UAr),e(fn,u7e),e(u7e,JAr),e(fn,YAr),e(fn,b7e),e(b7e,KAr),e(fn,ZAr),e(Ir,eyr),e(Ir,ce),e(ce,dC),e(dC,v7e),e(v7e,oyr),e(dC,ryr),e(dC,RJ),e(RJ,tyr),e(dC,ayr),e(ce,nyr),e(ce,cC),e(cC,F7e),e(F7e,syr),e(cC,lyr),e(cC,PJ),e(PJ,iyr),e(cC,dyr),e(ce,cyr),e(ce,fC),e(fC,T7e),e(T7e,fyr),e(fC,myr),e(fC,BJ),e(BJ,gyr),e(fC,hyr),e(ce,pyr),e(ce,mC),e(mC,M7e),e(M7e,_yr),e(mC,uyr),e(mC,IJ),e(IJ,byr),e(mC,vyr),e(ce,Fyr),e(ce,gC),e(gC,E7e),e(E7e,Tyr),e(gC,Myr),e(gC,NJ),e(NJ,Eyr),e(gC,Cyr),e(ce,wyr),e(ce,hC),e(hC,C7e),e(C7e,Ayr),e(hC,yyr),e(hC,qJ),e(qJ,Lyr),e(hC,xyr),e(ce,$yr),e(ce,pC),e(pC,w7e),e(w7e,kyr),e(pC,Syr),e(pC,jJ),e(jJ,Ryr),e(pC,Pyr),e(ce,Byr),e(ce,_C),e(_C,A7e),e(A7e,Iyr),e(_C,Nyr),e(_C,DJ),e(DJ,qyr),e(_C,jyr),e(ce,Dyr),e(ce,uC),e(uC,y7e),e(y7e,Gyr),e(uC,Oyr),e(uC,GJ),e(GJ,Vyr),e(uC,Xyr),e(ce,zyr),e(ce,bC),e(bC,L7e),e(L7e,Wyr),e(bC,Qyr),e(bC,OJ),e(OJ,Hyr),e(bC,Uyr),e(ce,Jyr),e(ce,vC),e(vC,x7e),e(x7e,Yyr),e(vC,Kyr),e(vC,VJ),e(VJ,Zyr),e(vC,eLr),e(ce,oLr),e(ce,FC),e(FC,$7e),e($7e,rLr),e(FC,tLr),e(FC,XJ),e(XJ,aLr),e(FC,nLr),e(ce,sLr),e(ce,TC),e(TC,k7e),e(k7e,lLr),e(TC,iLr),e(TC,zJ),e(zJ,dLr),e(TC,cLr),e(ce,fLr),e(ce,MC),e(MC,S7e),e(S7e,mLr),e(MC,gLr),e(MC,WJ),e(WJ,hLr),e(MC,pLr),e(ce,_Lr),e(ce,EC),e(EC,R7e),e(R7e,uLr),e(EC,bLr),e(EC,QJ),e(QJ,vLr),e(EC,FLr),e(ce,TLr),e(ce,CC),e(CC,P7e),e(P7e,MLr),e(CC,ELr),e(CC,HJ),e(HJ,CLr),e(CC,wLr),e(ce,ALr),e(ce,wC),e(wC,B7e),e(B7e,yLr),e(wC,LLr),e(wC,UJ),e(UJ,xLr),e(wC,$Lr),e(ce,kLr),e(ce,AC),e(AC,I7e),e(I7e,SLr),e(AC,RLr),e(AC,JJ),e(JJ,PLr),e(AC,BLr),e(ce,ILr),e(ce,yC),e(yC,N7e),e(N7e,NLr),e(yC,qLr),e(yC,YJ),e(YJ,jLr),e(yC,DLr),e(ce,GLr),e(ce,LC),e(LC,q7e),e(q7e,OLr),e(LC,VLr),e(LC,KJ),e(KJ,XLr),e(LC,zLr),e(Ir,WLr),M(xC,Ir,null),b(f,ADe,u),b(f,Cc,u),e(Cc,$C),e($C,j7e),M(L9,j7e,null),e(Cc,QLr),e(Cc,D7e),e(D7e,HLr),b(f,yDe,u),b(f,dr,u),M(x9,dr,null),e(dr,ULr),e(dr,wc),e(wc,JLr),e(wc,ZJ),e(ZJ,YLr),e(wc,KLr),e(wc,eY),e(eY,ZLr),e(wc,e8r),e(dr,o8r),e(dr,$9),e($9,r8r),e($9,G7e),e(G7e,t8r),e($9,a8r),e(dr,n8r),e(dr,jt),M(k9,jt,null),e(jt,s8r),e(jt,O7e),e(O7e,l8r),e(jt,i8r),e(jt,Ac),e(Ac,d8r),e(Ac,V7e),e(V7e,c8r),e(Ac,f8r),e(Ac,oY),e(oY,m8r),e(Ac,g8r),e(jt,h8r),M(kC,jt,null),e(dr,p8r),e(dr,Nr),M(S9,Nr,null),e(Nr,_8r),e(Nr,X7e),e(X7e,u8r),e(Nr,b8r),e(Nr,mn),e(mn,v8r),e(mn,z7e),e(z7e,F8r),e(mn,T8r),e(mn,W7e),e(W7e,M8r),e(mn,E8r),e(mn,Q7e),e(Q7e,C8r),e(mn,w8r),e(Nr,A8r),e(Nr,H7e),e(H7e,SC),e(SC,U7e),e(U7e,y8r),e(SC,L8r),e(SC,rY),e(rY,x8r),e(SC,$8r),e(Nr,k8r),M(RC,Nr,null),b(f,LDe,u),b(f,yc,u),e(yc,PC),e(PC,J7e),M(R9,J7e,null),e(yc,S8r),e(yc,Y7e),e(Y7e,R8r),b(f,xDe,u),b(f,cr,u),M(P9,cr,null),e(cr,P8r),e(cr,Lc),e(Lc,B8r),e(Lc,tY),e(tY,I8r),e(Lc,N8r),e(Lc,aY),e(aY,q8r),e(Lc,j8r),e(cr,D8r),e(cr,B9),e(B9,G8r),e(B9,K7e),e(K7e,O8r),e(B9,V8r),e(cr,X8r),e(cr,Dt),M(I9,Dt,null),e(Dt,z8r),e(Dt,Z7e),e(Z7e,W8r),e(Dt,Q8r),e(Dt,xc),e(xc,H8r),e(xc,eMe),e(eMe,U8r),e(xc,J8r),e(xc,nY),e(nY,Y8r),e(xc,K8r),e(Dt,Z8r),M(BC,Dt,null),e(cr,e9r),e(cr,qr),M(N9,qr,null),e(qr,o9r),e(qr,oMe),e(oMe,r9r),e(qr,t9r),e(qr,gn),e(gn,a9r),e(gn,rMe),e(rMe,n9r),e(gn,s9r),e(gn,tMe),e(tMe,l9r),e(gn,i9r),e(gn,aMe),e(aMe,d9r),e(gn,c9r),e(qr,f9r),e(qr,nMe),e(nMe,IC),e(IC,sMe),e(sMe,m9r),e(IC,g9r),e(IC,sY),e(sY,h9r),e(IC,p9r),e(qr,_9r),M(NC,qr,null),b(f,$De,u),b(f,$c,u),e($c,qC),e(qC,lMe),M(q9,lMe,null),e($c,u9r),e($c,iMe),e(iMe,b9r),b(f,kDe,u),b(f,fr,u),M(j9,fr,null),e(fr,v9r),e(fr,kc),e(kc,F9r),e(kc,lY),e(lY,T9r),e(kc,M9r),e(kc,iY),e(iY,E9r),e(kc,C9r),e(fr,w9r),e(fr,D9),e(D9,A9r),e(D9,dMe),e(dMe,y9r),e(D9,L9r),e(fr,x9r),e(fr,Gt),M(G9,Gt,null),e(Gt,$9r),e(Gt,cMe),e(cMe,k9r),e(Gt,S9r),e(Gt,Sc),e(Sc,R9r),e(Sc,fMe),e(fMe,P9r),e(Sc,B9r),e(Sc,dY),e(dY,I9r),e(Sc,N9r),e(Gt,q9r),M(jC,Gt,null),e(fr,j9r),e(fr,jr),M(O9,jr,null),e(jr,D9r),e(jr,mMe),e(mMe,G9r),e(jr,O9r),e(jr,hn),e(hn,V9r),e(hn,gMe),e(gMe,X9r),e(hn,z9r),e(hn,hMe),e(hMe,W9r),e(hn,Q9r),e(hn,pMe),e(pMe,H9r),e(hn,U9r),e(jr,J9r),e(jr,re),e(re,DC),e(DC,_Me),e(_Me,Y9r),e(DC,K9r),e(DC,cY),e(cY,Z9r),e(DC,exr),e(re,oxr),e(re,GC),e(GC,uMe),e(uMe,rxr),e(GC,txr),e(GC,fY),e(fY,axr),e(GC,nxr),e(re,sxr),e(re,OC),e(OC,bMe),e(bMe,lxr),e(OC,ixr),e(OC,mY),e(mY,dxr),e(OC,cxr),e(re,fxr),e(re,VC),e(VC,vMe),e(vMe,mxr),e(VC,gxr),e(VC,gY),e(gY,hxr),e(VC,pxr),e(re,_xr),e(re,XC),e(XC,FMe),e(FMe,uxr),e(XC,bxr),e(XC,hY),e(hY,vxr),e(XC,Fxr),e(re,Txr),e(re,zC),e(zC,TMe),e(TMe,Mxr),e(zC,Exr),e(zC,pY),e(pY,Cxr),e(zC,wxr),e(re,Axr),e(re,WC),e(WC,MMe),e(MMe,yxr),e(WC,Lxr),e(WC,_Y),e(_Y,xxr),e(WC,$xr),e(re,kxr),e(re,QC),e(QC,EMe),e(EMe,Sxr),e(QC,Rxr),e(QC,uY),e(uY,Pxr),e(QC,Bxr),e(re,Ixr),e(re,HC),e(HC,CMe),e(CMe,Nxr),e(HC,qxr),e(HC,bY),e(bY,jxr),e(HC,Dxr),e(re,Gxr),e(re,UC),e(UC,wMe),e(wMe,Oxr),e(UC,Vxr),e(UC,vY),e(vY,Xxr),e(UC,zxr),e(re,Wxr),e(re,JC),e(JC,AMe),e(AMe,Qxr),e(JC,Hxr),e(JC,FY),e(FY,Uxr),e(JC,Jxr),e(re,Yxr),e(re,YC),e(YC,yMe),e(yMe,Kxr),e(YC,Zxr),e(YC,TY),e(TY,e$r),e(YC,o$r),e(re,r$r),e(re,KC),e(KC,LMe),e(LMe,t$r),e(KC,a$r),e(KC,MY),e(MY,n$r),e(KC,s$r),e(re,l$r),e(re,ZC),e(ZC,xMe),e(xMe,i$r),e(ZC,d$r),e(ZC,EY),e(EY,c$r),e(ZC,f$r),e(re,m$r),e(re,e5),e(e5,$Me),e($Me,g$r),e(e5,h$r),e(e5,CY),e(CY,p$r),e(e5,_$r),e(re,u$r),e(re,o5),e(o5,kMe),e(kMe,b$r),e(o5,v$r),e(o5,wY),e(wY,F$r),e(o5,T$r),e(re,M$r),e(re,r5),e(r5,SMe),e(SMe,E$r),e(r5,C$r),e(r5,AY),e(AY,w$r),e(r5,A$r),e(re,y$r),e(re,t5),e(t5,RMe),e(RMe,L$r),e(t5,x$r),e(t5,yY),e(yY,$$r),e(t5,k$r),e(re,S$r),e(re,a5),e(a5,PMe),e(PMe,R$r),e(a5,P$r),e(a5,LY),e(LY,B$r),e(a5,I$r),e(re,N$r),e(re,n5),e(n5,BMe),e(BMe,q$r),e(n5,j$r),e(n5,xY),e(xY,D$r),e(n5,G$r),e(re,O$r),e(re,s5),e(s5,IMe),e(IMe,V$r),e(s5,X$r),e(s5,$Y),e($Y,z$r),e(s5,W$r),e(re,Q$r),e(re,l5),e(l5,NMe),e(NMe,H$r),e(l5,U$r),e(l5,kY),e(kY,J$r),e(l5,Y$r),e(re,K$r),e(re,i5),e(i5,qMe),e(qMe,Z$r),e(i5,ekr),e(i5,SY),e(SY,okr),e(i5,rkr),e(re,tkr),e(re,d5),e(d5,jMe),e(jMe,akr),e(d5,nkr),e(d5,RY),e(RY,skr),e(d5,lkr),e(re,ikr),e(re,c5),e(c5,DMe),e(DMe,dkr),e(c5,ckr),e(c5,PY),e(PY,fkr),e(c5,mkr),e(re,gkr),e(re,f5),e(f5,GMe),e(GMe,hkr),e(f5,pkr),e(f5,BY),e(BY,_kr),e(f5,ukr),e(jr,bkr),M(m5,jr,null),b(f,SDe,u),b(f,Rc,u),e(Rc,g5),e(g5,OMe),M(V9,OMe,null),e(Rc,vkr),e(Rc,VMe),e(VMe,Fkr),b(f,RDe,u),b(f,mr,u),M(X9,mr,null),e(mr,Tkr),e(mr,Pc),e(Pc,Mkr),e(Pc,IY),e(IY,Ekr),e(Pc,Ckr),e(Pc,NY),e(NY,wkr),e(Pc,Akr),e(mr,ykr),e(mr,z9),e(z9,Lkr),e(z9,XMe),e(XMe,xkr),e(z9,$kr),e(mr,kkr),e(mr,Ot),M(W9,Ot,null),e(Ot,Skr),e(Ot,zMe),e(zMe,Rkr),e(Ot,Pkr),e(Ot,Bc),e(Bc,Bkr),e(Bc,WMe),e(WMe,Ikr),e(Bc,Nkr),e(Bc,qY),e(qY,qkr),e(Bc,jkr),e(Ot,Dkr),M(h5,Ot,null),e(mr,Gkr),e(mr,Dr),M(Q9,Dr,null),e(Dr,Okr),e(Dr,QMe),e(QMe,Vkr),e(Dr,Xkr),e(Dr,pn),e(pn,zkr),e(pn,HMe),e(HMe,Wkr),e(pn,Qkr),e(pn,UMe),e(UMe,Hkr),e(pn,Ukr),e(pn,JMe),e(JMe,Jkr),e(pn,Ykr),e(Dr,Kkr),e(Dr,xe),e(xe,p5),e(p5,YMe),e(YMe,Zkr),e(p5,eSr),e(p5,jY),e(jY,oSr),e(p5,rSr),e(xe,tSr),e(xe,_5),e(_5,KMe),e(KMe,aSr),e(_5,nSr),e(_5,DY),e(DY,sSr),e(_5,lSr),e(xe,iSr),e(xe,u5),e(u5,ZMe),e(ZMe,dSr),e(u5,cSr),e(u5,GY),e(GY,fSr),e(u5,mSr),e(xe,gSr),e(xe,b5),e(b5,e4e),e(e4e,hSr),e(b5,pSr),e(b5,OY),e(OY,_Sr),e(b5,uSr),e(xe,bSr),e(xe,v5),e(v5,o4e),e(o4e,vSr),e(v5,FSr),e(v5,VY),e(VY,TSr),e(v5,MSr),e(xe,ESr),e(xe,F5),e(F5,r4e),e(r4e,CSr),e(F5,wSr),e(F5,XY),e(XY,ASr),e(F5,ySr),e(xe,LSr),e(xe,T5),e(T5,t4e),e(t4e,xSr),e(T5,$Sr),e(T5,zY),e(zY,kSr),e(T5,SSr),e(xe,RSr),e(xe,M5),e(M5,a4e),e(a4e,PSr),e(M5,BSr),e(M5,WY),e(WY,ISr),e(M5,NSr),e(xe,qSr),e(xe,E5),e(E5,n4e),e(n4e,jSr),e(E5,DSr),e(E5,QY),e(QY,GSr),e(E5,OSr),e(xe,VSr),e(xe,C5),e(C5,s4e),e(s4e,XSr),e(C5,zSr),e(C5,HY),e(HY,WSr),e(C5,QSr),e(Dr,HSr),M(w5,Dr,null),b(f,PDe,u),b(f,Ic,u),e(Ic,A5),e(A5,l4e),M(H9,l4e,null),e(Ic,USr),e(Ic,i4e),e(i4e,JSr),b(f,BDe,u),b(f,gr,u),M(U9,gr,null),e(gr,YSr),e(gr,Nc),e(Nc,KSr),e(Nc,UY),e(UY,ZSr),e(Nc,eRr),e(Nc,JY),e(JY,oRr),e(Nc,rRr),e(gr,tRr),e(gr,J9),e(J9,aRr),e(J9,d4e),e(d4e,nRr),e(J9,sRr),e(gr,lRr),e(gr,Vt),M(Y9,Vt,null),e(Vt,iRr),e(Vt,c4e),e(c4e,dRr),e(Vt,cRr),e(Vt,qc),e(qc,fRr),e(qc,f4e),e(f4e,mRr),e(qc,gRr),e(qc,YY),e(YY,hRr),e(qc,pRr),e(Vt,_Rr),M(y5,Vt,null),e(gr,uRr),e(gr,Gr),M(K9,Gr,null),e(Gr,bRr),e(Gr,m4e),e(m4e,vRr),e(Gr,FRr),e(Gr,_n),e(_n,TRr),e(_n,g4e),e(g4e,MRr),e(_n,ERr),e(_n,h4e),e(h4e,CRr),e(_n,wRr),e(_n,p4e),e(p4e,ARr),e(_n,yRr),e(Gr,LRr),e(Gr,Ee),e(Ee,L5),e(L5,_4e),e(_4e,xRr),e(L5,$Rr),e(L5,KY),e(KY,kRr),e(L5,SRr),e(Ee,RRr),e(Ee,x5),e(x5,u4e),e(u4e,PRr),e(x5,BRr),e(x5,ZY),e(ZY,IRr),e(x5,NRr),e(Ee,qRr),e(Ee,$5),e($5,b4e),e(b4e,jRr),e($5,DRr),e($5,eK),e(eK,GRr),e($5,ORr),e(Ee,VRr),e(Ee,k5),e(k5,v4e),e(v4e,XRr),e(k5,zRr),e(k5,oK),e(oK,WRr),e(k5,QRr),e(Ee,HRr),e(Ee,S5),e(S5,F4e),e(F4e,URr),e(S5,JRr),e(S5,rK),e(rK,YRr),e(S5,KRr),e(Ee,ZRr),e(Ee,R5),e(R5,T4e),e(T4e,ePr),e(R5,oPr),e(R5,tK),e(tK,rPr),e(R5,tPr),e(Ee,aPr),e(Ee,P5),e(P5,M4e),e(M4e,nPr),e(P5,sPr),e(P5,aK),e(aK,lPr),e(P5,iPr),e(Ee,dPr),e(Ee,B5),e(B5,E4e),e(E4e,cPr),e(B5,fPr),e(B5,nK),e(nK,mPr),e(B5,gPr),e(Ee,hPr),e(Ee,I5),e(I5,C4e),e(C4e,pPr),e(I5,_Pr),e(I5,sK),e(sK,uPr),e(I5,bPr),e(Ee,vPr),e(Ee,N5),e(N5,w4e),e(w4e,FPr),e(N5,TPr),e(N5,lK),e(lK,MPr),e(N5,EPr),e(Ee,CPr),e(Ee,q5),e(q5,A4e),e(A4e,wPr),e(q5,APr),e(q5,iK),e(iK,yPr),e(q5,LPr),e(Ee,xPr),e(Ee,j5),e(j5,y4e),e(y4e,$Pr),e(j5,kPr),e(j5,dK),e(dK,SPr),e(j5,RPr),e(Gr,PPr),M(D5,Gr,null),b(f,IDe,u),b(f,jc,u),e(jc,G5),e(G5,L4e),M(Z9,L4e,null),e(jc,BPr),e(jc,x4e),e(x4e,IPr),b(f,NDe,u),b(f,hr,u),M(ex,hr,null),e(hr,NPr),e(hr,Dc),e(Dc,qPr),e(Dc,cK),e(cK,jPr),e(Dc,DPr),e(Dc,fK),e(fK,GPr),e(Dc,OPr),e(hr,VPr),e(hr,ox),e(ox,XPr),e(ox,$4e),e($4e,zPr),e(ox,WPr),e(hr,QPr),e(hr,Xt),M(rx,Xt,null),e(Xt,HPr),e(Xt,k4e),e(k4e,UPr),e(Xt,JPr),e(Xt,Gc),e(Gc,YPr),e(Gc,S4e),e(S4e,KPr),e(Gc,ZPr),e(Gc,mK),e(mK,eBr),e(Gc,oBr),e(Xt,rBr),M(O5,Xt,null),e(hr,tBr),e(hr,Or),M(tx,Or,null),e(Or,aBr),e(Or,R4e),e(R4e,nBr),e(Or,sBr),e(Or,un),e(un,lBr),e(un,P4e),e(P4e,iBr),e(un,dBr),e(un,B4e),e(B4e,cBr),e(un,fBr),e(un,I4e),e(I4e,mBr),e(un,gBr),e(Or,hBr),e(Or,$e),e($e,V5),e(V5,N4e),e(N4e,pBr),e(V5,_Br),e(V5,gK),e(gK,uBr),e(V5,bBr),e($e,vBr),e($e,X5),e(X5,q4e),e(q4e,FBr),e(X5,TBr),e(X5,hK),e(hK,MBr),e(X5,EBr),e($e,CBr),e($e,z5),e(z5,j4e),e(j4e,wBr),e(z5,ABr),e(z5,pK),e(pK,yBr),e(z5,LBr),e($e,xBr),e($e,W5),e(W5,D4e),e(D4e,$Br),e(W5,kBr),e(W5,_K),e(_K,SBr),e(W5,RBr),e($e,PBr),e($e,Q5),e(Q5,G4e),e(G4e,BBr),e(Q5,IBr),e(Q5,uK),e(uK,NBr),e(Q5,qBr),e($e,jBr),e($e,H5),e(H5,O4e),e(O4e,DBr),e(H5,GBr),e(H5,bK),e(bK,OBr),e(H5,VBr),e($e,XBr),e($e,U5),e(U5,V4e),e(V4e,zBr),e(U5,WBr),e(U5,vK),e(vK,QBr),e(U5,HBr),e($e,UBr),e($e,J5),e(J5,X4e),e(X4e,JBr),e(J5,YBr),e(J5,FK),e(FK,KBr),e(J5,ZBr),e($e,eIr),e($e,Y5),e(Y5,z4e),e(z4e,oIr),e(Y5,rIr),e(Y5,TK),e(TK,tIr),e(Y5,aIr),e($e,nIr),e($e,K5),e(K5,W4e),e(W4e,sIr),e(K5,lIr),e(K5,MK),e(MK,iIr),e(K5,dIr),e(Or,cIr),M(Z5,Or,null),b(f,qDe,u),b(f,Oc,u),e(Oc,e3),e(e3,Q4e),M(ax,Q4e,null),e(Oc,fIr),e(Oc,H4e),e(H4e,mIr),b(f,jDe,u),b(f,pr,u),M(nx,pr,null),e(pr,gIr),e(pr,Vc),e(Vc,hIr),e(Vc,EK),e(EK,pIr),e(Vc,_Ir),e(Vc,CK),e(CK,uIr),e(Vc,bIr),e(pr,vIr),e(pr,sx),e(sx,FIr),e(sx,U4e),e(U4e,TIr),e(sx,MIr),e(pr,EIr),e(pr,zt),M(lx,zt,null),e(zt,CIr),e(zt,J4e),e(J4e,wIr),e(zt,AIr),e(zt,Xc),e(Xc,yIr),e(Xc,Y4e),e(Y4e,LIr),e(Xc,xIr),e(Xc,wK),e(wK,$Ir),e(Xc,kIr),e(zt,SIr),M(o3,zt,null),e(pr,RIr),e(pr,Vr),M(ix,Vr,null),e(Vr,PIr),e(Vr,K4e),e(K4e,BIr),e(Vr,IIr),e(Vr,bn),e(bn,NIr),e(bn,Z4e),e(Z4e,qIr),e(bn,jIr),e(bn,eEe),e(eEe,DIr),e(bn,GIr),e(bn,oEe),e(oEe,OIr),e(bn,VIr),e(Vr,XIr),e(Vr,Pe),e(Pe,r3),e(r3,rEe),e(rEe,zIr),e(r3,WIr),e(r3,AK),e(AK,QIr),e(r3,HIr),e(Pe,UIr),e(Pe,t3),e(t3,tEe),e(tEe,JIr),e(t3,YIr),e(t3,yK),e(yK,KIr),e(t3,ZIr),e(Pe,eNr),e(Pe,a3),e(a3,aEe),e(aEe,oNr),e(a3,rNr),e(a3,LK),e(LK,tNr),e(a3,aNr),e(Pe,nNr),e(Pe,n3),e(n3,nEe),e(nEe,sNr),e(n3,lNr),e(n3,xK),e(xK,iNr),e(n3,dNr),e(Pe,cNr),e(Pe,s3),e(s3,sEe),e(sEe,fNr),e(s3,mNr),e(s3,$K),e($K,gNr),e(s3,hNr),e(Pe,pNr),e(Pe,l3),e(l3,lEe),e(lEe,_Nr),e(l3,uNr),e(l3,kK),e(kK,bNr),e(l3,vNr),e(Pe,FNr),e(Pe,i3),e(i3,iEe),e(iEe,TNr),e(i3,MNr),e(i3,SK),e(SK,ENr),e(i3,CNr),e(Pe,wNr),e(Pe,d3),e(d3,dEe),e(dEe,ANr),e(d3,yNr),e(d3,RK),e(RK,LNr),e(d3,xNr),e(Pe,$Nr),e(Pe,c3),e(c3,cEe),e(cEe,kNr),e(c3,SNr),e(c3,PK),e(PK,RNr),e(c3,PNr),e(Vr,BNr),M(f3,Vr,null),b(f,DDe,u),b(f,zc,u),e(zc,m3),e(m3,fEe),M(dx,fEe,null),e(zc,INr),e(zc,mEe),e(mEe,NNr),b(f,GDe,u),b(f,_r,u),M(cx,_r,null),e(_r,qNr),e(_r,Wc),e(Wc,jNr),e(Wc,BK),e(BK,DNr),e(Wc,GNr),e(Wc,IK),e(IK,ONr),e(Wc,VNr),e(_r,XNr),e(_r,fx),e(fx,zNr),e(fx,gEe),e(gEe,WNr),e(fx,QNr),e(_r,HNr),e(_r,Wt),M(mx,Wt,null),e(Wt,UNr),e(Wt,hEe),e(hEe,JNr),e(Wt,YNr),e(Wt,Qc),e(Qc,KNr),e(Qc,pEe),e(pEe,ZNr),e(Qc,eqr),e(Qc,NK),e(NK,oqr),e(Qc,rqr),e(Wt,tqr),M(g3,Wt,null),e(_r,aqr),e(_r,Xr),M(gx,Xr,null),e(Xr,nqr),e(Xr,_Ee),e(_Ee,sqr),e(Xr,lqr),e(Xr,vn),e(vn,iqr),e(vn,uEe),e(uEe,dqr),e(vn,cqr),e(vn,bEe),e(bEe,fqr),e(vn,mqr),e(vn,vEe),e(vEe,gqr),e(vn,hqr),e(Xr,pqr),e(Xr,ke),e(ke,h3),e(h3,FEe),e(FEe,_qr),e(h3,uqr),e(h3,qK),e(qK,bqr),e(h3,vqr),e(ke,Fqr),e(ke,p3),e(p3,TEe),e(TEe,Tqr),e(p3,Mqr),e(p3,jK),e(jK,Eqr),e(p3,Cqr),e(ke,wqr),e(ke,_3),e(_3,MEe),e(MEe,Aqr),e(_3,yqr),e(_3,DK),e(DK,Lqr),e(_3,xqr),e(ke,$qr),e(ke,u3),e(u3,EEe),e(EEe,kqr),e(u3,Sqr),e(u3,GK),e(GK,Rqr),e(u3,Pqr),e(ke,Bqr),e(ke,b3),e(b3,CEe),e(CEe,Iqr),e(b3,Nqr),e(b3,OK),e(OK,qqr),e(b3,jqr),e(ke,Dqr),e(ke,v3),e(v3,wEe),e(wEe,Gqr),e(v3,Oqr),e(v3,VK),e(VK,Vqr),e(v3,Xqr),e(ke,zqr),e(ke,F3),e(F3,AEe),e(AEe,Wqr),e(F3,Qqr),e(F3,XK),e(XK,Hqr),e(F3,Uqr),e(ke,Jqr),e(ke,T3),e(T3,yEe),e(yEe,Yqr),e(T3,Kqr),e(T3,zK),e(zK,Zqr),e(T3,ejr),e(ke,ojr),e(ke,M3),e(M3,LEe),e(LEe,rjr),e(M3,tjr),e(M3,WK),e(WK,ajr),e(M3,njr),e(ke,sjr),e(ke,E3),e(E3,xEe),e(xEe,ljr),e(E3,ijr),e(E3,QK),e(QK,djr),e(E3,cjr),e(Xr,fjr),M(C3,Xr,null),b(f,ODe,u),b(f,Hc,u),e(Hc,w3),e(w3,$Ee),M(hx,$Ee,null),e(Hc,mjr),e(Hc,kEe),e(kEe,gjr),b(f,VDe,u),b(f,ur,u),M(px,ur,null),e(ur,hjr),e(ur,Uc),e(Uc,pjr),e(Uc,HK),e(HK,_jr),e(Uc,ujr),e(Uc,UK),e(UK,bjr),e(Uc,vjr),e(ur,Fjr),e(ur,_x),e(_x,Tjr),e(_x,SEe),e(SEe,Mjr),e(_x,Ejr),e(ur,Cjr),e(ur,Qt),M(ux,Qt,null),e(Qt,wjr),e(Qt,REe),e(REe,Ajr),e(Qt,yjr),e(Qt,Jc),e(Jc,Ljr),e(Jc,PEe),e(PEe,xjr),e(Jc,$jr),e(Jc,JK),e(JK,kjr),e(Jc,Sjr),e(Qt,Rjr),M(A3,Qt,null),e(ur,Pjr),e(ur,zr),M(bx,zr,null),e(zr,Bjr),e(zr,BEe),e(BEe,Ijr),e(zr,Njr),e(zr,Fn),e(Fn,qjr),e(Fn,IEe),e(IEe,jjr),e(Fn,Djr),e(Fn,NEe),e(NEe,Gjr),e(Fn,Ojr),e(Fn,qEe),e(qEe,Vjr),e(Fn,Xjr),e(zr,zjr),e(zr,Se),e(Se,y3),e(y3,jEe),e(jEe,Wjr),e(y3,Qjr),e(y3,YK),e(YK,Hjr),e(y3,Ujr),e(Se,Jjr),e(Se,L3),e(L3,DEe),e(DEe,Yjr),e(L3,Kjr),e(L3,KK),e(KK,Zjr),e(L3,eDr),e(Se,oDr),e(Se,x3),e(x3,GEe),e(GEe,rDr),e(x3,tDr),e(x3,ZK),e(ZK,aDr),e(x3,nDr),e(Se,sDr),e(Se,$3),e($3,OEe),e(OEe,lDr),e($3,iDr),e($3,eZ),e(eZ,dDr),e($3,cDr),e(Se,fDr),e(Se,k3),e(k3,VEe),e(VEe,mDr),e(k3,gDr),e(k3,oZ),e(oZ,hDr),e(k3,pDr),e(Se,_Dr),e(Se,S3),e(S3,XEe),e(XEe,uDr),e(S3,bDr),e(S3,rZ),e(rZ,vDr),e(S3,FDr),e(Se,TDr),e(Se,R3),e(R3,zEe),e(zEe,MDr),e(R3,EDr),e(R3,tZ),e(tZ,CDr),e(R3,wDr),e(Se,ADr),e(Se,P3),e(P3,WEe),e(WEe,yDr),e(P3,LDr),e(P3,aZ),e(aZ,xDr),e(P3,$Dr),e(Se,kDr),e(Se,B3),e(B3,QEe),e(QEe,SDr),e(B3,RDr),e(B3,nZ),e(nZ,PDr),e(B3,BDr),e(Se,IDr),e(Se,I3),e(I3,HEe),e(HEe,NDr),e(I3,qDr),e(I3,sZ),e(sZ,jDr),e(I3,DDr),e(zr,GDr),M(N3,zr,null),b(f,XDe,u),b(f,Yc,u),e(Yc,q3),e(q3,UEe),M(vx,UEe,null),e(Yc,ODr),e(Yc,JEe),e(JEe,VDr),b(f,zDe,u),b(f,br,u),M(Fx,br,null),e(br,XDr),e(br,Kc),e(Kc,zDr),e(Kc,lZ),e(lZ,WDr),e(Kc,QDr),e(Kc,iZ),e(iZ,HDr),e(Kc,UDr),e(br,JDr),e(br,Tx),e(Tx,YDr),e(Tx,YEe),e(YEe,KDr),e(Tx,ZDr),e(br,eGr),e(br,Ht),M(Mx,Ht,null),e(Ht,oGr),e(Ht,KEe),e(KEe,rGr),e(Ht,tGr),e(Ht,Zc),e(Zc,aGr),e(Zc,ZEe),e(ZEe,nGr),e(Zc,sGr),e(Zc,dZ),e(dZ,lGr),e(Zc,iGr),e(Ht,dGr),M(j3,Ht,null),e(br,cGr),e(br,Wr),M(Ex,Wr,null),e(Wr,fGr),e(Wr,eCe),e(eCe,mGr),e(Wr,gGr),e(Wr,Tn),e(Tn,hGr),e(Tn,oCe),e(oCe,pGr),e(Tn,_Gr),e(Tn,rCe),e(rCe,uGr),e(Tn,bGr),e(Tn,tCe),e(tCe,vGr),e(Tn,FGr),e(Wr,TGr),e(Wr,Oe),e(Oe,D3),e(D3,aCe),e(aCe,MGr),e(D3,EGr),e(D3,cZ),e(cZ,CGr),e(D3,wGr),e(Oe,AGr),e(Oe,G3),e(G3,nCe),e(nCe,yGr),e(G3,LGr),e(G3,fZ),e(fZ,xGr),e(G3,$Gr),e(Oe,kGr),e(Oe,O3),e(O3,sCe),e(sCe,SGr),e(O3,RGr),e(O3,mZ),e(mZ,PGr),e(O3,BGr),e(Oe,IGr),e(Oe,V3),e(V3,lCe),e(lCe,NGr),e(V3,qGr),e(V3,gZ),e(gZ,jGr),e(V3,DGr),e(Oe,GGr),e(Oe,X3),e(X3,iCe),e(iCe,OGr),e(X3,VGr),e(X3,hZ),e(hZ,XGr),e(X3,zGr),e(Oe,WGr),e(Oe,z3),e(z3,dCe),e(dCe,QGr),e(z3,HGr),e(z3,pZ),e(pZ,UGr),e(z3,JGr),e(Oe,YGr),e(Oe,W3),e(W3,cCe),e(cCe,KGr),e(W3,ZGr),e(W3,_Z),e(_Z,eOr),e(W3,oOr),e(Oe,rOr),e(Oe,Q3),e(Q3,fCe),e(fCe,tOr),e(Q3,aOr),e(Q3,uZ),e(uZ,nOr),e(Q3,sOr),e(Wr,lOr),M(H3,Wr,null),b(f,WDe,u),b(f,ef,u),e(ef,U3),e(U3,mCe),M(Cx,mCe,null),e(ef,iOr),e(ef,gCe),e(gCe,dOr),b(f,QDe,u),b(f,vr,u),M(wx,vr,null),e(vr,cOr),e(vr,of),e(of,fOr),e(of,bZ),e(bZ,mOr),e(of,gOr),e(of,vZ),e(vZ,hOr),e(of,pOr),e(vr,_Or),e(vr,Ax),e(Ax,uOr),e(Ax,hCe),e(hCe,bOr),e(Ax,vOr),e(vr,FOr),e(vr,Ut),M(yx,Ut,null),e(Ut,TOr),e(Ut,pCe),e(pCe,MOr),e(Ut,EOr),e(Ut,rf),e(rf,COr),e(rf,_Ce),e(_Ce,wOr),e(rf,AOr),e(rf,FZ),e(FZ,yOr),e(rf,LOr),e(Ut,xOr),M(J3,Ut,null),e(vr,$Or),e(vr,Qr),M(Lx,Qr,null),e(Qr,kOr),e(Qr,uCe),e(uCe,SOr),e(Qr,ROr),e(Qr,Mn),e(Mn,POr),e(Mn,bCe),e(bCe,BOr),e(Mn,IOr),e(Mn,vCe),e(vCe,NOr),e(Mn,qOr),e(Mn,FCe),e(FCe,jOr),e(Mn,DOr),e(Qr,GOr),e(Qr,Ve),e(Ve,Y3),e(Y3,TCe),e(TCe,OOr),e(Y3,VOr),e(Y3,TZ),e(TZ,XOr),e(Y3,zOr),e(Ve,WOr),e(Ve,K3),e(K3,MCe),e(MCe,QOr),e(K3,HOr),e(K3,MZ),e(MZ,UOr),e(K3,JOr),e(Ve,YOr),e(Ve,Z3),e(Z3,ECe),e(ECe,KOr),e(Z3,ZOr),e(Z3,EZ),e(EZ,eVr),e(Z3,oVr),e(Ve,rVr),e(Ve,e0),e(e0,CCe),e(CCe,tVr),e(e0,aVr),e(e0,CZ),e(CZ,nVr),e(e0,sVr),e(Ve,lVr),e(Ve,o0),e(o0,wCe),e(wCe,iVr),e(o0,dVr),e(o0,wZ),e(wZ,cVr),e(o0,fVr),e(Ve,mVr),e(Ve,r0),e(r0,ACe),e(ACe,gVr),e(r0,hVr),e(r0,AZ),e(AZ,pVr),e(r0,_Vr),e(Ve,uVr),e(Ve,t0),e(t0,yCe),e(yCe,bVr),e(t0,vVr),e(t0,yZ),e(yZ,FVr),e(t0,TVr),e(Ve,MVr),e(Ve,a0),e(a0,LCe),e(LCe,EVr),e(a0,CVr),e(a0,LZ),e(LZ,wVr),e(a0,AVr),e(Qr,yVr),M(n0,Qr,null),b(f,HDe,u),b(f,tf,u),e(tf,s0),e(s0,xCe),M(xx,xCe,null),e(tf,LVr),e(tf,$Ce),e($Ce,xVr),b(f,UDe,u),b(f,Fr,u),M($x,Fr,null),e(Fr,$Vr),e(Fr,af),e(af,kVr),e(af,xZ),e(xZ,SVr),e(af,RVr),e(af,$Z),e($Z,PVr),e(af,BVr),e(Fr,IVr),e(Fr,kx),e(kx,NVr),e(kx,kCe),e(kCe,qVr),e(kx,jVr),e(Fr,DVr),e(Fr,Jt),M(Sx,Jt,null),e(Jt,GVr),e(Jt,SCe),e(SCe,OVr),e(Jt,VVr),e(Jt,nf),e(nf,XVr),e(nf,RCe),e(RCe,zVr),e(nf,WVr),e(nf,kZ),e(kZ,QVr),e(nf,HVr),e(Jt,UVr),M(l0,Jt,null),e(Fr,JVr),e(Fr,Hr),M(Rx,Hr,null),e(Hr,YVr),e(Hr,PCe),e(PCe,KVr),e(Hr,ZVr),e(Hr,En),e(En,eXr),e(En,BCe),e(BCe,oXr),e(En,rXr),e(En,ICe),e(ICe,tXr),e(En,aXr),e(En,NCe),e(NCe,nXr),e(En,sXr),e(Hr,lXr),e(Hr,qCe),e(qCe,i0),e(i0,jCe),e(jCe,iXr),e(i0,dXr),e(i0,SZ),e(SZ,cXr),e(i0,fXr),e(Hr,mXr),M(d0,Hr,null),b(f,JDe,u),b(f,sf,u),e(sf,c0),e(c0,DCe),M(Px,DCe,null),e(sf,gXr),e(sf,GCe),e(GCe,hXr),b(f,YDe,u),b(f,Tr,u),M(Bx,Tr,null),e(Tr,pXr),e(Tr,lf),e(lf,_Xr),e(lf,RZ),e(RZ,uXr),e(lf,bXr),e(lf,PZ),e(PZ,vXr),e(lf,FXr),e(Tr,TXr),e(Tr,Ix),e(Ix,MXr),e(Ix,OCe),e(OCe,EXr),e(Ix,CXr),e(Tr,wXr),e(Tr,Yt),M(Nx,Yt,null),e(Yt,AXr),e(Yt,VCe),e(VCe,yXr),e(Yt,LXr),e(Yt,df),e(df,xXr),e(df,XCe),e(XCe,$Xr),e(df,kXr),e(df,BZ),e(BZ,SXr),e(df,RXr),e(Yt,PXr),M(f0,Yt,null),e(Tr,BXr),e(Tr,Ur),M(qx,Ur,null),e(Ur,IXr),e(Ur,zCe),e(zCe,NXr),e(Ur,qXr),e(Ur,Cn),e(Cn,jXr),e(Cn,WCe),e(WCe,DXr),e(Cn,GXr),e(Cn,QCe),e(QCe,OXr),e(Cn,VXr),e(Cn,HCe),e(HCe,XXr),e(Cn,zXr),e(Ur,WXr),e(Ur,jx),e(jx,m0),e(m0,UCe),e(UCe,QXr),e(m0,HXr),e(m0,IZ),e(IZ,UXr),e(m0,JXr),e(jx,YXr),e(jx,g0),e(g0,JCe),e(JCe,KXr),e(g0,ZXr),e(g0,NZ),e(NZ,ezr),e(g0,ozr),e(Ur,rzr),M(h0,Ur,null),b(f,KDe,u),b(f,cf,u),e(cf,p0),e(p0,YCe),M(Dx,YCe,null),e(cf,tzr),e(cf,KCe),e(KCe,azr),b(f,ZDe,u),b(f,Mr,u),M(Gx,Mr,null),e(Mr,nzr),e(Mr,ff),e(ff,szr),e(ff,qZ),e(qZ,lzr),e(ff,izr),e(ff,jZ),e(jZ,dzr),e(ff,czr),e(Mr,fzr),e(Mr,Ox),e(Ox,mzr),e(Ox,ZCe),e(ZCe,gzr),e(Ox,hzr),e(Mr,pzr),e(Mr,Kt),M(Vx,Kt,null),e(Kt,_zr),e(Kt,e5e),e(e5e,uzr),e(Kt,bzr),e(Kt,mf),e(mf,vzr),e(mf,o5e),e(o5e,Fzr),e(mf,Tzr),e(mf,DZ),e(DZ,Mzr),e(mf,Ezr),e(Kt,Czr),M(_0,Kt,null),e(Mr,wzr),e(Mr,Jr),M(Xx,Jr,null),e(Jr,Azr),e(Jr,r5e),e(r5e,yzr),e(Jr,Lzr),e(Jr,wn),e(wn,xzr),e(wn,t5e),e(t5e,$zr),e(wn,kzr),e(wn,a5e),e(a5e,Szr),e(wn,Rzr),e(wn,n5e),e(n5e,Pzr),e(wn,Bzr),e(Jr,Izr),e(Jr,s5e),e(s5e,u0),e(u0,l5e),e(l5e,Nzr),e(u0,qzr),e(u0,GZ),e(GZ,jzr),e(u0,Dzr),e(Jr,Gzr),M(b0,Jr,null),eGe=!0},p(f,[u]){const zx={};u&2&&(zx.$$scope={dirty:u,ctx:f}),Tf.$set(zx);const i5e={};u&2&&(i5e.$$scope={dirty:u,ctx:f}),Ag.$set(i5e);const d5e={};u&2&&(d5e.$$scope={dirty:u,ctx:f}),lh.$set(d5e);const c5e={};u&2&&(c5e.$$scope={dirty:u,ctx:f}),Gh.$set(c5e);const Wx={};u&2&&(Wx.$$scope={dirty:u,ctx:f}),Oh.$set(Wx);const f5e={};u&2&&(f5e.$$scope={dirty:u,ctx:f}),ip.$set(f5e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),dp.$set(An);const m5e={};u&2&&(m5e.$$scope={dirty:u,ctx:f}),mp.$set(m5e);const g5e={};u&2&&(g5e.$$scope={dirty:u,ctx:f}),du.$set(g5e);const h5e={};u&2&&(h5e.$$scope={dirty:u,ctx:f}),fu.$set(h5e);const Qx={};u&2&&(Qx.$$scope={dirty:u,ctx:f}),o2.$set(Qx);const p5e={};u&2&&(p5e.$$scope={dirty:u,ctx:f}),t2.$set(p5e);const Hx={};u&2&&(Hx.$$scope={dirty:u,ctx:f}),O2.$set(Hx);const _5e={};u&2&&(_5e.$$scope={dirty:u,ctx:f}),X2.$set(_5e);const Ux={};u&2&&(Ux.$$scope={dirty:u,ctx:f}),L1.$set(Ux);const u5e={};u&2&&(u5e.$$scope={dirty:u,ctx:f}),$1.$set(u5e);const b5e={};u&2&&(b5e.$$scope={dirty:u,ctx:f}),H1.$set(b5e);const v5e={};u&2&&(v5e.$$scope={dirty:u,ctx:f}),J1.$set(v5e);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),zb.$set(gf);const F5e={};u&2&&(F5e.$$scope={dirty:u,ctx:f}),Qb.$set(F5e);const T5e={};u&2&&(T5e.$$scope={dirty:u,ctx:f}),Cv.$set(T5e);const M5e={};u&2&&(M5e.$$scope={dirty:u,ctx:f}),Av.$set(M5e);const Jx={};u&2&&(Jx.$$scope={dirty:u,ctx:f}),Rv.$set(Jx);const E5e={};u&2&&(E5e.$$scope={dirty:u,ctx:f}),Bv.$set(E5e);const C5e={};u&2&&(C5e.$$scope={dirty:u,ctx:f}),uF.$set(C5e);const w5e={};u&2&&(w5e.$$scope={dirty:u,ctx:f}),vF.$set(w5e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),l6.$set(et);const Yx={};u&2&&(Yx.$$scope={dirty:u,ctx:f}),d6.$set(Yx);const A5e={};u&2&&(A5e.$$scope={dirty:u,ctx:f}),m6.$set(A5e);const Kx={};u&2&&(Kx.$$scope={dirty:u,ctx:f}),h6.$set(Kx);const y5e={};u&2&&(y5e.$$scope={dirty:u,ctx:f}),L6.$set(y5e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),$6.$set(ot);const L5e={};u&2&&(L5e.$$scope={dirty:u,ctx:f}),R6.$set(L5e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),B6.$set(hf);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:f}),W6.$set(x5e);const $5e={};u&2&&($5e.$$scope={dirty:u,ctx:f}),H6.$set($5e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),oT.$set(y);const v0={};u&2&&(v0.$$scope={dirty:u,ctx:f}),tT.$set(v0);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:f}),pT.$set(k5e);const S5e={};u&2&&(S5e.$$scope={dirty:u,ctx:f}),uT.$set(S5e);const F0={};u&2&&(F0.$$scope={dirty:u,ctx:f}),TT.$set(F0);const R5e={};u&2&&(R5e.$$scope={dirty:u,ctx:f}),ET.$set(R5e);const P5e={};u&2&&(P5e.$$scope={dirty:u,ctx:f}),$T.$set(P5e);const T0={};u&2&&(T0.$$scope={dirty:u,ctx:f}),ST.$set(T0);const B5e={};u&2&&(B5e.$$scope={dirty:u,ctx:f}),NT.$set(B5e);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),jT.$set(I5e);const M0={};u&2&&(M0.$$scope={dirty:u,ctx:f}),VT.$set(M0);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),zT.$set(N5e);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),HT.$set(q5e);const E0={};u&2&&(E0.$$scope={dirty:u,ctx:f}),JT.$set(E0);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),r7.$set(j5e);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),a7.$set(D5e);const C0={};u&2&&(C0.$$scope={dirty:u,ctx:f}),l7.$set(C0);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),d7.$set(G5e);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),rM.$set(O5e);const w0={};u&2&&(w0.$$scope={dirty:u,ctx:f}),aM.$set(w0);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),LM.$set(V5e);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),$M.$set(X5e);const A0={};u&2&&(A0.$$scope={dirty:u,ctx:f}),XM.$set(A0);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),WM.$set(z5e);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),YM.$set(W5e);const y0={};u&2&&(y0.$$scope={dirty:u,ctx:f}),ZM.$set(y0);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),F4.$set(Q5e);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),M4.$set(H5e);const L0={};u&2&&(L0.$$scope={dirty:u,ctx:f}),R4.$set(L0);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),B4.$set(U5e);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),iE.$set(J5e);const x0={};u&2&&(x0.$$scope={dirty:u,ctx:f}),cE.$set(x0);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),LE.$set(Y5e);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),$E.$set(K5e);const $0={};u&2&&($0.$$scope={dirty:u,ctx:f}),RE.$set($0);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),BE.$set(Z5e);const e3e={};u&2&&(e3e.$$scope={dirty:u,ctx:f}),NE.$set(e3e);const k0={};u&2&&(k0.$$scope={dirty:u,ctx:f}),jE.$set(k0);const o3e={};u&2&&(o3e.$$scope={dirty:u,ctx:f}),sC.$set(o3e);const r3e={};u&2&&(r3e.$$scope={dirty:u,ctx:f}),iC.$set(r3e);const S0={};u&2&&(S0.$$scope={dirty:u,ctx:f}),xC.$set(S0);const t3e={};u&2&&(t3e.$$scope={dirty:u,ctx:f}),kC.$set(t3e);const a3e={};u&2&&(a3e.$$scope={dirty:u,ctx:f}),RC.$set(a3e);const R0={};u&2&&(R0.$$scope={dirty:u,ctx:f}),BC.$set(R0);const n3e={};u&2&&(n3e.$$scope={dirty:u,ctx:f}),NC.$set(n3e);const s3e={};u&2&&(s3e.$$scope={dirty:u,ctx:f}),jC.$set(s3e);const P0={};u&2&&(P0.$$scope={dirty:u,ctx:f}),m5.$set(P0);const l3e={};u&2&&(l3e.$$scope={dirty:u,ctx:f}),h5.$set(l3e);const i3e={};u&2&&(i3e.$$scope={dirty:u,ctx:f}),w5.$set(i3e);const B0={};u&2&&(B0.$$scope={dirty:u,ctx:f}),y5.$set(B0);const d3e={};u&2&&(d3e.$$scope={dirty:u,ctx:f}),D5.$set(d3e);const c3e={};u&2&&(c3e.$$scope={dirty:u,ctx:f}),O5.$set(c3e);const I0={};u&2&&(I0.$$scope={dirty:u,ctx:f}),Z5.$set(I0);const f3e={};u&2&&(f3e.$$scope={dirty:u,ctx:f}),o3.$set(f3e);const m3e={};u&2&&(m3e.$$scope={dirty:u,ctx:f}),f3.$set(m3e);const N0={};u&2&&(N0.$$scope={dirty:u,ctx:f}),g3.$set(N0);const g3e={};u&2&&(g3e.$$scope={dirty:u,ctx:f}),C3.$set(g3e);const h3e={};u&2&&(h3e.$$scope={dirty:u,ctx:f}),A3.$set(h3e);const q0={};u&2&&(q0.$$scope={dirty:u,ctx:f}),N3.$set(q0);const p3e={};u&2&&(p3e.$$scope={dirty:u,ctx:f}),j3.$set(p3e);const _3e={};u&2&&(_3e.$$scope={dirty:u,ctx:f}),H3.$set(_3e);const j0={};u&2&&(j0.$$scope={dirty:u,ctx:f}),J3.$set(j0);const u3e={};u&2&&(u3e.$$scope={dirty:u,ctx:f}),n0.$set(u3e);const b3e={};u&2&&(b3e.$$scope={dirty:u,ctx:f}),l0.$set(b3e);const D0={};u&2&&(D0.$$scope={dirty:u,ctx:f}),d0.$set(D0);const v3e={};u&2&&(v3e.$$scope={dirty:u,ctx:f}),f0.$set(v3e);const F3e={};u&2&&(F3e.$$scope={dirty:u,ctx:f}),h0.$set(F3e);const G0={};u&2&&(G0.$$scope={dirty:u,ctx:f}),_0.$set(G0);const T3e={};u&2&&(T3e.$$scope={dirty:u,ctx:f}),b0.$set(T3e)},i(f){eGe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(Tf.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(WA.$$.fragment,f),E(Ag.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(KA.$$.fragment,f),E(lh.$$.fragment,f),E(ZA.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ay.$$.fragment,f),E(Gh.$$.fragment,f),E(Oh.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(cy.$$.fragment,f),E(ip.$$.fragment,f),E(dp.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(mp.$$.fragment,f),E(_y.$$.fragment,f),E(du.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(fu.$$.fragment,f),E(Ty.$$.fragment,f),E(o2.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(t2.$$.fragment,f),E(Ay.$$.fragment,f),E(O2.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(X2.$$.fragment,f),E(ky.$$.fragment,f),E(L1.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E($1.$$.fragment,f),E(Iy.$$.fragment,f),E(H1.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(J1.$$.fragment,f),E(Gy.$$.fragment,f),E(zb.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(Qb.$$.fragment,f),E(Wy.$$.fragment,f),E(Cv.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(Av.$$.fragment,f),E(Yy.$$.fragment,f),E(Rv.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(Bv.$$.fragment,f),E(rL.$$.fragment,f),E(uF.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(vF.$$.fragment,f),E(lL.$$.fragment,f),E(l6.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(d6.$$.fragment,f),E(mL.$$.fragment,f),E(m6.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(_L.$$.fragment,f),E(h6.$$.fragment,f),E(uL.$$.fragment,f),E(L6.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E($6.$$.fragment,f),E(ML.$$.fragment,f),E(R6.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(B6.$$.fragment,f),E(yL.$$.fragment,f),E(W6.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(H6.$$.fragment,f),E(SL.$$.fragment,f),E(oT.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(tT.$$.fragment,f),E(NL.$$.fragment,f),E(pT.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(uT.$$.fragment,f),E(OL.$$.fragment,f),E(TT.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(ET.$$.fragment,f),E(HL.$$.fragment,f),E($T.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(ST.$$.fragment,f),E(ZL.$$.fragment,f),E(NT.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(jT.$$.fragment,f),E(a8.$$.fragment,f),E(VT.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(zT.$$.fragment,f),E(c8.$$.fragment,f),E(HT.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(JT.$$.fragment,f),E(p8.$$.fragment,f),E(r7.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E(a7.$$.fragment,f),E(F8.$$.fragment,f),E(l7.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(d7.$$.fragment,f),E(w8.$$.fragment,f),E(rM.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(aM.$$.fragment,f),E($8.$$.fragment,f),E(LM.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E($M.$$.fragment,f),E(B8.$$.fragment,f),E(XM.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(WM.$$.fragment,f),E(D8.$$.fragment,f),E(YM.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(ZM.$$.fragment,f),E(z8.$$.fragment,f),E(F4.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(M4.$$.fragment,f),E(J8.$$.fragment,f),E(R4.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(B4.$$.fragment,f),E(o9.$$.fragment,f),E(iE.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(cE.$$.fragment,f),E(s9.$$.fragment,f),E(LE.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E($E.$$.fragment,f),E(f9.$$.fragment,f),E(RE.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(_9.$$.fragment,f),E(BE.$$.fragment,f),E(u9.$$.fragment,f),E(NE.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(jE.$$.fragment,f),E(M9.$$.fragment,f),E(sC.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(iC.$$.fragment,f),E(y9.$$.fragment,f),E(xC.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(kC.$$.fragment,f),E(S9.$$.fragment,f),E(RC.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E(BC.$$.fragment,f),E(N9.$$.fragment,f),E(NC.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(jC.$$.fragment,f),E(O9.$$.fragment,f),E(m5.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(W9.$$.fragment,f),E(h5.$$.fragment,f),E(Q9.$$.fragment,f),E(w5.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(y5.$$.fragment,f),E(K9.$$.fragment,f),E(D5.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(O5.$$.fragment,f),E(tx.$$.fragment,f),E(Z5.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(o3.$$.fragment,f),E(ix.$$.fragment,f),E(f3.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(g3.$$.fragment,f),E(gx.$$.fragment,f),E(C3.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(A3.$$.fragment,f),E(bx.$$.fragment,f),E(N3.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(j3.$$.fragment,f),E(Ex.$$.fragment,f),E(H3.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(yx.$$.fragment,f),E(J3.$$.fragment,f),E(Lx.$$.fragment,f),E(n0.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(l0.$$.fragment,f),E(Rx.$$.fragment,f),E(d0.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(f0.$$.fragment,f),E(qx.$$.fragment,f),E(h0.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(_0.$$.fragment,f),E(Xx.$$.fragment,f),E(b0.$$.fragment,f),eGe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(Tf.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(WA.$$.fragment,f),C(Ag.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(KA.$$.fragment,f),C(lh.$$.fragment,f),C(ZA.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ay.$$.fragment,f),C(Gh.$$.fragment,f),C(Oh.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(cy.$$.fragment,f),C(ip.$$.fragment,f),C(dp.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(mp.$$.fragment,f),C(_y.$$.fragment,f),C(du.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(fu.$$.fragment,f),C(Ty.$$.fragment,f),C(o2.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(t2.$$.fragment,f),C(Ay.$$.fragment,f),C(O2.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(X2.$$.fragment,f),C(ky.$$.fragment,f),C(L1.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C($1.$$.fragment,f),C(Iy.$$.fragment,f),C(H1.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(J1.$$.fragment,f),C(Gy.$$.fragment,f),C(zb.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(Qb.$$.fragment,f),C(Wy.$$.fragment,f),C(Cv.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(Av.$$.fragment,f),C(Yy.$$.fragment,f),C(Rv.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(Bv.$$.fragment,f),C(rL.$$.fragment,f),C(uF.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(vF.$$.fragment,f),C(lL.$$.fragment,f),C(l6.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(d6.$$.fragment,f),C(mL.$$.fragment,f),C(m6.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(_L.$$.fragment,f),C(h6.$$.fragment,f),C(uL.$$.fragment,f),C(L6.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C($6.$$.fragment,f),C(ML.$$.fragment,f),C(R6.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(B6.$$.fragment,f),C(yL.$$.fragment,f),C(W6.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(H6.$$.fragment,f),C(SL.$$.fragment,f),C(oT.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(tT.$$.fragment,f),C(NL.$$.fragment,f),C(pT.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(uT.$$.fragment,f),C(OL.$$.fragment,f),C(TT.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(ET.$$.fragment,f),C(HL.$$.fragment,f),C($T.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(ST.$$.fragment,f),C(ZL.$$.fragment,f),C(NT.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(jT.$$.fragment,f),C(a8.$$.fragment,f),C(VT.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(zT.$$.fragment,f),C(c8.$$.fragment,f),C(HT.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(JT.$$.fragment,f),C(p8.$$.fragment,f),C(r7.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C(a7.$$.fragment,f),C(F8.$$.fragment,f),C(l7.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(d7.$$.fragment,f),C(w8.$$.fragment,f),C(rM.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(aM.$$.fragment,f),C($8.$$.fragment,f),C(LM.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C($M.$$.fragment,f),C(B8.$$.fragment,f),C(XM.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(WM.$$.fragment,f),C(D8.$$.fragment,f),C(YM.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(ZM.$$.fragment,f),C(z8.$$.fragment,f),C(F4.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(M4.$$.fragment,f),C(J8.$$.fragment,f),C(R4.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(B4.$$.fragment,f),C(o9.$$.fragment,f),C(iE.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(cE.$$.fragment,f),C(s9.$$.fragment,f),C(LE.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C($E.$$.fragment,f),C(f9.$$.fragment,f),C(RE.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(_9.$$.fragment,f),C(BE.$$.fragment,f),C(u9.$$.fragment,f),C(NE.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(jE.$$.fragment,f),C(M9.$$.fragment,f),C(sC.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(iC.$$.fragment,f),C(y9.$$.fragment,f),C(xC.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(kC.$$.fragment,f),C(S9.$$.fragment,f),C(RC.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C(BC.$$.fragment,f),C(N9.$$.fragment,f),C(NC.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(jC.$$.fragment,f),C(O9.$$.fragment,f),C(m5.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(W9.$$.fragment,f),C(h5.$$.fragment,f),C(Q9.$$.fragment,f),C(w5.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(y5.$$.fragment,f),C(K9.$$.fragment,f),C(D5.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(O5.$$.fragment,f),C(tx.$$.fragment,f),C(Z5.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(o3.$$.fragment,f),C(ix.$$.fragment,f),C(f3.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(g3.$$.fragment,f),C(gx.$$.fragment,f),C(C3.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(A3.$$.fragment,f),C(bx.$$.fragment,f),C(N3.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(j3.$$.fragment,f),C(Ex.$$.fragment,f),C(H3.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(yx.$$.fragment,f),C(J3.$$.fragment,f),C(Lx.$$.fragment,f),C(n0.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(l0.$$.fragment,f),C(Rx.$$.fragment,f),C(d0.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(f0.$$.fragment,f),C(qx.$$.fragment,f),C(h0.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(_0.$$.fragment,f),C(Xx.$$.fragment,f),C(b0.$$.fragment,f),eGe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(_f),f&&t(rt),f&&t(Ge),f&&t(We),f&&t(bf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Yqe),f&&t(vi),w(DA),f&&t(Kqe),f&&t(kn),f&&t(Zqe),w(GA,f),f&&t(eje),f&&t(ck),f&&t(oje),w(Tf,f),f&&t(rje),f&&t(Fi),w(OA),f&&t(tje),f&&t(Co),w(VA),w(WA),w(Ag),w(QA),f&&t(aje),f&&t(Mi),w(HA),f&&t(nje),f&&t(wo),w(UA),w(KA),w(lh),w(ZA),f&&t(sje),f&&t(Ei),w(ey),f&&t(lje),f&&t(Ao),w(oy),w(ay),w(Gh),w(Oh),w(ny),f&&t(ije),f&&t(Ci),w(sy),f&&t(dje),f&&t(yo),w(ly),w(cy),w(ip),w(dp),w(fy),f&&t(cje),f&&t(Ai),w(my),f&&t(fje),f&&t(Lo),w(gy),w(py),w(mp),w(_y),w(du),f&&t(mje),f&&t(xi),w(uy),f&&t(gje),f&&t(xo),w(by),w(Fy),w(fu),w(Ty),w(o2),f&&t(hje),f&&t(Si),w(My),f&&t(pje),f&&t($o),w(Ey),w(wy),w(t2),w(Ay),w(O2),f&&t(_je),f&&t(Bi),w(yy),f&&t(uje),f&&t(ko),w(Ly),w($y),w(X2),w(ky),w(L1),f&&t(bje),f&&t(qi),w(Sy),f&&t(vje),f&&t(So),w(Ry),w(By),w($1),w(Iy),w(H1),f&&t(Fje),f&&t(Gi),w(Ny),f&&t(Tje),f&&t(Ro),w(qy),w(Dy),w(J1),w(Gy),w(zb),f&&t(Mje),f&&t(Xi),w(Oy),f&&t(Eje),f&&t(Po),w(Vy),w(zy),w(Qb),w(Wy),w(Cv),f&&t(Cje),f&&t(Qi),w(Qy),f&&t(wje),f&&t(Bo),w(Hy),w(Jy),w(Av),w(Yy),w(Rv),f&&t(Aje),f&&t(Ji),w(Ky),f&&t(yje),f&&t(Io),w(Zy),w(oL),w(Bv),w(rL),w(uF),f&&t(Lje),f&&t(Zi),w(tL),f&&t(xje),f&&t(No),w(aL),w(sL),w(vF),w(lL),w(l6),f&&t($je),f&&t(rd),w(iL),f&&t(kje),f&&t(qo),w(dL),w(fL),w(d6),w(mL),w(m6),f&&t(Sje),f&&t(nd),w(gL),f&&t(Rje),f&&t(jo),w(hL),w(_L),w(h6),w(uL),w(L6),f&&t(Pje),f&&t(id),w(bL),f&&t(Bje),f&&t(Do),w(vL),w(TL),w($6),w(ML),w(R6),f&&t(Ije),f&&t(fd),w(EL),f&&t(Nje),f&&t(Go),w(CL),w(AL),w(B6),w(yL),w(W6),f&&t(qje),f&&t(hd),w(LL),f&&t(jje),f&&t(Oo),w(xL),w(kL),w(H6),w(SL),w(oT),f&&t(Dje),f&&t(ud),w(RL),f&&t(Gje),f&&t(Vo),w(PL),w(IL),w(tT),w(NL),w(pT),f&&t(Oje),f&&t(Fd),w(qL),f&&t(Vje),f&&t(Xo),w(jL),w(GL),w(uT),w(OL),w(TT),f&&t(Xje),f&&t(Ed),w(XL),f&&t(zje),f&&t(zo),w(zL),w(QL),w(ET),w(HL),w($T),f&&t(Wje),f&&t(Ad),w(UL),f&&t(Qje),f&&t(Wo),w(JL),w(KL),w(ST),w(ZL),w(NT),f&&t(Hje),f&&t($d),w(e8),f&&t(Uje),f&&t(Qo),w(o8),w(t8),w(jT),w(a8),w(VT),f&&t(Jje),f&&t(Rd),w(s8),f&&t(Yje),f&&t(Ho),w(l8),w(d8),w(zT),w(c8),w(HT),f&&t(Kje),f&&t(Id),w(f8),f&&t(Zje),f&&t(Uo),w(m8),w(h8),w(JT),w(p8),w(r7),f&&t(eDe),f&&t(jd),w(_8),f&&t(oDe),f&&t(Jo),w(u8),w(v8),w(a7),w(F8),w(l7),f&&t(rDe),f&&t(Od),w(T8),f&&t(tDe),f&&t(Yo),w(M8),w(C8),w(d7),w(w8),w(rM),f&&t(aDe),f&&t(zd),w(A8),f&&t(nDe),f&&t(Ko),w(y8),w(x8),w(aM),w($8),w(LM),f&&t(sDe),f&&t(Hd),w(k8),f&&t(lDe),f&&t(Zo),w(S8),w(P8),w($M),w(B8),w(XM),f&&t(iDe),f&&t(Yd),w(I8),f&&t(dDe),f&&t(er),w(N8),w(j8),w(WM),w(D8),w(YM),f&&t(cDe),f&&t(ec),w(G8),f&&t(fDe),f&&t(or),w(O8),w(X8),w(ZM),w(z8),w(F4),f&&t(mDe),f&&t(tc),w(W8),f&&t(gDe),f&&t(rr),w(Q8),w(U8),w(M4),w(J8),w(R4),f&&t(hDe),f&&t(sc),w(Y8),f&&t(pDe),f&&t(tr),w(K8),w(e9),w(B4),w(o9),w(iE),f&&t(_De),f&&t(dc),w(r9),f&&t(uDe),f&&t(ar),w(t9),w(n9),w(cE),w(s9),w(LE),f&&t(bDe),f&&t(mc),w(l9),f&&t(vDe),f&&t(nr),w(i9),w(c9),w($E),w(f9),w(RE),f&&t(FDe),f&&t(pc),w(g9),f&&t(TDe),f&&t(sr),w(h9),w(_9),w(BE),w(u9),w(NE),f&&t(MDe),f&&t(bc),w(b9),f&&t(EDe),f&&t(lr),w(v9),w(T9),w(jE),w(M9),w(sC),f&&t(CDe),f&&t(Tc),w(E9),f&&t(wDe),f&&t(ir),w(C9),w(A9),w(iC),w(y9),w(xC),f&&t(ADe),f&&t(Cc),w(L9),f&&t(yDe),f&&t(dr),w(x9),w(k9),w(kC),w(S9),w(RC),f&&t(LDe),f&&t(yc),w(R9),f&&t(xDe),f&&t(cr),w(P9),w(I9),w(BC),w(N9),w(NC),f&&t($De),f&&t($c),w(q9),f&&t(kDe),f&&t(fr),w(j9),w(G9),w(jC),w(O9),w(m5),f&&t(SDe),f&&t(Rc),w(V9),f&&t(RDe),f&&t(mr),w(X9),w(W9),w(h5),w(Q9),w(w5),f&&t(PDe),f&&t(Ic),w(H9),f&&t(BDe),f&&t(gr),w(U9),w(Y9),w(y5),w(K9),w(D5),f&&t(IDe),f&&t(jc),w(Z9),f&&t(NDe),f&&t(hr),w(ex),w(rx),w(O5),w(tx),w(Z5),f&&t(qDe),f&&t(Oc),w(ax),f&&t(jDe),f&&t(pr),w(nx),w(lx),w(o3),w(ix),w(f3),f&&t(DDe),f&&t(zc),w(dx),f&&t(GDe),f&&t(_r),w(cx),w(mx),w(g3),w(gx),w(C3),f&&t(ODe),f&&t(Hc),w(hx),f&&t(VDe),f&&t(ur),w(px),w(ux),w(A3),w(bx),w(N3),f&&t(XDe),f&&t(Yc),w(vx),f&&t(zDe),f&&t(br),w(Fx),w(Mx),w(j3),w(Ex),w(H3),f&&t(WDe),f&&t(ef),w(Cx),f&&t(QDe),f&&t(vr),w(wx),w(yx),w(J3),w(Lx),w(n0),f&&t(HDe),f&&t(tf),w(xx),f&&t(UDe),f&&t(Fr),w($x),w(Sx),w(l0),w(Rx),w(d0),f&&t(JDe),f&&t(sf),w(Px),f&&t(YDe),f&&t(Tr),w(Bx),w(Nx),w(f0),w(qx),w(h0),f&&t(KDe),f&&t(cf),w(Dx),f&&t(ZDe),f&&t(Mr),w(Gx),w(Vx),w(_0),w(Xx),w(b0)}}}const HPt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function UPt(L){return USt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class rBt extends zSt{constructor(g){super();WSt(this,g,UPt,QPt,QSt,{})}}export{rBt as default,HPt as metadata};
