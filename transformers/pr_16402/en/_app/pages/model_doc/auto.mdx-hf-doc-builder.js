import{S as J$t,i as Y$t,s as K$t,e as a,k as l,w as F,t as o,M as Z$t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as ekt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as mXr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function okt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,yy,_f,De,We,hi,yn,Ly,Ln,xn,xy,pi,$n,$y,_i,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),yy=o(")."),_f=l(),De=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),Ly=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),xy=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),$y=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var U$=s(p);m=r(U$,"NewModelConfig"),U$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var J$=s(fi);pf=r(J$,"model_type"),J$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var Y$=s(mi);gi=r(Y$,'"new-model"'),Y$.forEach(t),yy=r(Ae,")."),Ae.forEach(t),_f=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),Ly=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var K$=s(Ln);xn=r(K$,"PreTrainedModel"),K$.forEach(t),xy=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),$y=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var Z$=s(_i);uf=r(Z$,"NewModelConfig"),Z$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,yy),b(Qe,_f,Ae),b(Qe,De,Ae),e(De,We),e(De,hi),e(hi,yn),e(De,Ly),e(De,Ln),e(Ln,xn),e(De,xy),e(De,pi),e(pi,$n),e(De,$y),e(De,_i),e(_i,uf),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(De)}}}function rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ckt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,yy,_f,De,We,hi,yn,Ly,Ln,xn,xy,pi,$n,$y,_i,uf,Ca,Qe,Ae,U$,ui,J$,Y$,Eo,wa,K$,bf,Z$,wOe,hqe,bi,vf,hoe,ky,AOe,poe,yOe,pqe,kn,LOe,_oe,xOe,$Oe,uoe,kOe,SOe,_qe,Sy,uqe,ek,ROe,bqe,Ff,vqe,vi,Tf,boe,Ry,POe,voe,BOe,Fqe,Co,Py,IOe,By,NOe,ok,qOe,jOe,DOe,Iy,GOe,Foe,OOe,VOe,XOe,Er,Ny,zOe,Toe,WOe,QOe,Fi,HOe,Moe,UOe,JOe,Eoe,YOe,KOe,ZOe,A,Mf,Coe,eVe,oVe,rk,rVe,tVe,aVe,Ef,woe,nVe,sVe,tk,lVe,iVe,dVe,Cf,Aoe,cVe,fVe,ak,mVe,gVe,hVe,wf,yoe,pVe,_Ve,nk,uVe,bVe,vVe,Af,Loe,FVe,TVe,sk,MVe,EVe,CVe,yf,xoe,wVe,AVe,lk,yVe,LVe,xVe,Lf,$oe,$Ve,kVe,ik,SVe,RVe,PVe,xf,koe,BVe,IVe,dk,NVe,qVe,jVe,$f,Soe,DVe,GVe,ck,OVe,VVe,XVe,kf,Roe,zVe,WVe,fk,QVe,HVe,UVe,Sf,Poe,JVe,YVe,mk,KVe,ZVe,eXe,Rf,Boe,oXe,rXe,gk,tXe,aXe,nXe,Pf,Ioe,sXe,lXe,hk,iXe,dXe,cXe,Bf,Noe,fXe,mXe,pk,gXe,hXe,pXe,If,qoe,_Xe,uXe,_k,bXe,vXe,FXe,Nf,joe,TXe,MXe,uk,EXe,CXe,wXe,qf,Doe,AXe,yXe,bk,LXe,xXe,$Xe,jf,Goe,kXe,SXe,vk,RXe,PXe,BXe,Df,Ooe,IXe,NXe,Fk,qXe,jXe,DXe,Gf,Voe,GXe,OXe,Tk,VXe,XXe,zXe,Of,Xoe,WXe,QXe,Mk,HXe,UXe,JXe,Vf,zoe,YXe,KXe,Ek,ZXe,eze,oze,Xf,Woe,rze,tze,Ck,aze,nze,sze,zf,Qoe,lze,ize,wk,dze,cze,fze,Wf,Hoe,mze,gze,Ak,hze,pze,_ze,Qf,Uoe,uze,bze,yk,vze,Fze,Tze,Hf,Joe,Mze,Eze,Lk,Cze,wze,Aze,Uf,Yoe,yze,Lze,xk,xze,$ze,kze,Jf,Koe,Sze,Rze,$k,Pze,Bze,Ize,Yf,Zoe,Nze,qze,kk,jze,Dze,Gze,Kf,ere,Oze,Vze,Sk,Xze,zze,Wze,Zf,ore,Qze,Hze,Rk,Uze,Jze,Yze,em,rre,Kze,Zze,Pk,eWe,oWe,rWe,om,tre,tWe,aWe,Bk,nWe,sWe,lWe,rm,are,iWe,dWe,Ik,cWe,fWe,mWe,tm,nre,gWe,hWe,Nk,pWe,_We,uWe,am,sre,bWe,vWe,qk,FWe,TWe,MWe,nm,lre,EWe,CWe,jk,wWe,AWe,yWe,sm,ire,LWe,xWe,Dk,$We,kWe,SWe,lm,dre,RWe,PWe,Gk,BWe,IWe,NWe,im,cre,qWe,jWe,Ok,DWe,GWe,OWe,dm,fre,VWe,XWe,Vk,zWe,WWe,QWe,cm,mre,HWe,UWe,Xk,JWe,YWe,KWe,fm,gre,ZWe,eQe,zk,oQe,rQe,tQe,mm,hre,aQe,nQe,Wk,sQe,lQe,iQe,gm,pre,dQe,cQe,Qk,fQe,mQe,gQe,hm,_re,hQe,pQe,Hk,_Qe,uQe,bQe,pm,ure,vQe,FQe,Uk,TQe,MQe,EQe,_m,bre,CQe,wQe,Jk,AQe,yQe,LQe,um,vre,xQe,$Qe,Yk,kQe,SQe,RQe,bm,Fre,PQe,BQe,Kk,IQe,NQe,qQe,vm,Tre,jQe,DQe,Zk,GQe,OQe,VQe,Fm,Mre,XQe,zQe,eS,WQe,QQe,HQe,Tm,Ere,UQe,JQe,oS,YQe,KQe,ZQe,Mm,Cre,eHe,oHe,rS,rHe,tHe,aHe,Em,wre,nHe,sHe,tS,lHe,iHe,dHe,Cm,Are,cHe,fHe,aS,mHe,gHe,hHe,wm,yre,pHe,_He,nS,uHe,bHe,vHe,Am,Lre,FHe,THe,sS,MHe,EHe,CHe,ym,xre,wHe,AHe,lS,yHe,LHe,xHe,Lm,$re,$He,kHe,iS,SHe,RHe,PHe,xm,kre,BHe,IHe,dS,NHe,qHe,jHe,$m,Sre,DHe,GHe,cS,OHe,VHe,XHe,km,Rre,zHe,WHe,fS,QHe,HHe,UHe,Sm,Pre,JHe,YHe,mS,KHe,ZHe,eUe,Rm,Bre,oUe,rUe,gS,tUe,aUe,nUe,Pm,Ire,sUe,lUe,hS,iUe,dUe,cUe,Bm,Nre,fUe,mUe,pS,gUe,hUe,pUe,Im,qre,_Ue,uUe,_S,bUe,vUe,FUe,Nm,jre,TUe,MUe,uS,EUe,CUe,wUe,qm,Dre,AUe,yUe,bS,LUe,xUe,$Ue,jm,Gre,kUe,SUe,vS,RUe,PUe,BUe,Dm,Ore,IUe,NUe,FS,qUe,jUe,DUe,Gm,Vre,GUe,OUe,TS,VUe,XUe,zUe,Om,Xre,WUe,QUe,MS,HUe,UUe,JUe,Vm,zre,YUe,KUe,ES,ZUe,eJe,oJe,Xm,Wre,rJe,tJe,CS,aJe,nJe,sJe,zm,Qre,lJe,iJe,wS,dJe,cJe,fJe,Wm,Hre,mJe,gJe,AS,hJe,pJe,_Je,Qm,Ure,uJe,bJe,yS,vJe,FJe,TJe,Hm,Jre,MJe,EJe,LS,CJe,wJe,AJe,Um,Yre,yJe,LJe,xS,xJe,$Je,kJe,Jm,Kre,SJe,RJe,$S,PJe,BJe,IJe,Ym,Zre,NJe,qJe,kS,jJe,DJe,GJe,Km,ete,OJe,VJe,SS,XJe,zJe,WJe,Zm,ote,QJe,HJe,RS,UJe,JJe,YJe,eg,rte,KJe,ZJe,PS,eYe,oYe,rYe,og,tte,tYe,aYe,BS,nYe,sYe,lYe,rg,ate,iYe,dYe,IS,cYe,fYe,mYe,tg,nte,gYe,hYe,NS,pYe,_Ye,uYe,ag,ste,bYe,vYe,qS,FYe,TYe,MYe,ng,lte,EYe,CYe,jS,wYe,AYe,yYe,sg,ite,LYe,xYe,DS,$Ye,kYe,SYe,lg,dte,RYe,PYe,GS,BYe,IYe,NYe,ig,cte,qYe,jYe,OS,DYe,GYe,OYe,dg,fte,VYe,XYe,VS,zYe,WYe,QYe,cg,mte,HYe,UYe,XS,JYe,YYe,KYe,fg,gte,ZYe,eKe,zS,oKe,rKe,tKe,mg,hte,aKe,nKe,WS,sKe,lKe,iKe,gg,pte,dKe,cKe,QS,fKe,mKe,gKe,hg,_te,hKe,pKe,HS,_Ke,uKe,bKe,pg,ute,vKe,FKe,US,TKe,MKe,EKe,_g,bte,CKe,wKe,JS,AKe,yKe,LKe,ug,vte,xKe,$Ke,YS,kKe,SKe,RKe,bg,Fte,PKe,BKe,KS,IKe,NKe,qKe,vg,Tte,jKe,DKe,ZS,GKe,OKe,VKe,Fg,Mte,XKe,zKe,eR,WKe,QKe,HKe,Tg,Ete,UKe,JKe,oR,YKe,KKe,ZKe,Mg,Cte,eZe,oZe,rR,rZe,tZe,aZe,Eg,wte,nZe,sZe,tR,lZe,iZe,dZe,Cg,cZe,wg,qy,fZe,Ate,mZe,Tqe,Ti,Ag,yte,jy,gZe,Lte,hZe,Mqe,wo,Dy,pZe,Gy,_Ze,aR,uZe,bZe,vZe,Oy,FZe,xte,TZe,MZe,EZe,Cr,Vy,CZe,$te,wZe,AZe,Aa,yZe,kte,LZe,xZe,Ste,$Ze,kZe,Rte,SZe,RZe,PZe,k,Sn,Pte,BZe,IZe,nR,NZe,qZe,sR,jZe,DZe,GZe,Rn,Bte,OZe,VZe,lR,XZe,zZe,iR,WZe,QZe,HZe,Pn,Ite,UZe,JZe,dR,YZe,KZe,cR,ZZe,eeo,oeo,yg,Nte,reo,teo,fR,aeo,neo,seo,Bn,qte,leo,ieo,mR,deo,ceo,gR,feo,meo,geo,Lg,jte,heo,peo,hR,_eo,ueo,beo,xg,Dte,veo,Feo,pR,Teo,Meo,Eeo,$g,Gte,Ceo,weo,_R,Aeo,yeo,Leo,In,Ote,xeo,$eo,uR,keo,Seo,bR,Reo,Peo,Beo,Nn,Vte,Ieo,Neo,vR,qeo,jeo,FR,Deo,Geo,Oeo,qn,Xte,Veo,Xeo,TR,zeo,Weo,MR,Qeo,Heo,Ueo,kg,zte,Jeo,Yeo,ER,Keo,Zeo,eoo,Sg,Wte,ooo,roo,CR,too,aoo,noo,jn,Qte,soo,loo,wR,ioo,doo,AR,coo,foo,moo,Rg,Hte,goo,hoo,yR,poo,_oo,uoo,Dn,Ute,boo,voo,LR,Foo,Too,xR,Moo,Eoo,Coo,Gn,Jte,woo,Aoo,$R,yoo,Loo,kR,xoo,$oo,koo,On,Yte,Soo,Roo,SR,Poo,Boo,RR,Ioo,Noo,qoo,Pg,Kte,joo,Doo,PR,Goo,Ooo,Voo,Vn,Zte,Xoo,zoo,BR,Woo,Qoo,IR,Hoo,Uoo,Joo,Xn,eae,Yoo,Koo,NR,Zoo,ero,qR,oro,rro,tro,zn,oae,aro,nro,jR,sro,lro,DR,iro,dro,cro,Wn,rae,fro,mro,GR,gro,hro,OR,pro,_ro,uro,Qn,tae,bro,vro,VR,Fro,Tro,XR,Mro,Ero,Cro,Hn,aae,wro,Aro,zR,yro,Lro,WR,xro,$ro,kro,Bg,nae,Sro,Rro,QR,Pro,Bro,Iro,Un,sae,Nro,qro,HR,jro,Dro,UR,Gro,Oro,Vro,Ig,lae,Xro,zro,JR,Wro,Qro,Hro,Jn,iae,Uro,Jro,YR,Yro,Kro,KR,Zro,eto,oto,Yn,dae,rto,tto,ZR,ato,nto,eP,sto,lto,ito,Kn,cae,dto,cto,oP,fto,mto,rP,gto,hto,pto,Ng,fae,_to,uto,tP,bto,vto,Fto,Zn,mae,Tto,Mto,aP,Eto,Cto,nP,wto,Ato,yto,es,gae,Lto,xto,sP,$to,kto,lP,Sto,Rto,Pto,qg,hae,Bto,Ito,iP,Nto,qto,jto,os,pae,Dto,Gto,dP,Oto,Vto,cP,Xto,zto,Wto,rs,_ae,Qto,Hto,fP,Uto,Jto,mP,Yto,Kto,Zto,ts,uae,eao,oao,gP,rao,tao,hP,aao,nao,sao,as,bae,lao,iao,pP,dao,cao,_P,fao,mao,gao,ns,vae,hao,pao,uP,_ao,uao,bP,bao,vao,Fao,ss,Fae,Tao,Mao,vP,Eao,Cao,FP,wao,Aao,yao,ls,Tae,Lao,xao,TP,$ao,kao,MP,Sao,Rao,Pao,jg,Mae,Bao,Iao,EP,Nao,qao,jao,is,Eae,Dao,Gao,CP,Oao,Vao,wP,Xao,zao,Wao,Dg,Cae,Qao,Hao,AP,Uao,Jao,Yao,Gg,wae,Kao,Zao,yP,eno,ono,rno,ds,Aae,tno,ano,LP,nno,sno,xP,lno,ino,dno,cs,yae,cno,fno,$P,mno,gno,kP,hno,pno,_no,fs,Lae,uno,bno,SP,vno,Fno,RP,Tno,Mno,Eno,Og,xae,Cno,wno,PP,Ano,yno,Lno,ms,$ae,xno,$no,BP,kno,Sno,IP,Rno,Pno,Bno,gs,kae,Ino,Nno,NP,qno,jno,qP,Dno,Gno,Ono,hs,Sae,Vno,Xno,jP,zno,Wno,DP,Qno,Hno,Uno,ps,Rae,Jno,Yno,GP,Kno,Zno,OP,eso,oso,rso,_s,Pae,tso,aso,VP,nso,sso,XP,lso,iso,dso,Vg,Bae,cso,fso,zP,mso,gso,hso,us,Iae,pso,_so,WP,uso,bso,QP,vso,Fso,Tso,Xg,Nae,Mso,Eso,HP,Cso,wso,Aso,zg,qae,yso,Lso,UP,xso,$so,kso,Wg,jae,Sso,Rso,JP,Pso,Bso,Iso,Qg,Dae,Nso,qso,YP,jso,Dso,Gso,bs,Gae,Oso,Vso,KP,Xso,zso,ZP,Wso,Qso,Hso,Hg,Oae,Uso,Jso,eB,Yso,Kso,Zso,vs,Vae,elo,olo,oB,rlo,tlo,rB,alo,nlo,slo,Fs,Xae,llo,ilo,tB,dlo,clo,aB,flo,mlo,glo,Ts,zae,hlo,plo,nB,_lo,ulo,sB,blo,vlo,Flo,Ms,Wae,Tlo,Mlo,lB,Elo,Clo,iB,wlo,Alo,ylo,Es,Qae,Llo,xlo,dB,$lo,klo,cB,Slo,Rlo,Plo,Cs,Hae,Blo,Ilo,fB,Nlo,qlo,mB,jlo,Dlo,Glo,Ug,Uae,Olo,Vlo,gB,Xlo,zlo,Wlo,Jg,Jae,Qlo,Hlo,hB,Ulo,Jlo,Ylo,ws,Yae,Klo,Zlo,pB,eio,oio,_B,rio,tio,aio,As,Kae,nio,sio,uB,lio,iio,bB,dio,cio,fio,ys,Zae,mio,gio,vB,hio,pio,FB,_io,uio,bio,Yg,ene,vio,Fio,TB,Tio,Mio,Eio,Kg,one,Cio,wio,MB,Aio,yio,Lio,Zg,rne,xio,$io,EB,kio,Sio,Rio,Ls,tne,Pio,Bio,CB,Iio,Nio,wB,qio,jio,Dio,eh,ane,Gio,Oio,AB,Vio,Xio,zio,oh,nne,Wio,Qio,yB,Hio,Uio,Jio,rh,sne,Yio,Kio,LB,Zio,edo,odo,xs,lne,rdo,tdo,xB,ado,ndo,$B,sdo,ldo,ido,th,ine,ddo,cdo,kB,fdo,mdo,gdo,ah,dne,hdo,pdo,SB,_do,udo,bdo,$s,cne,vdo,Fdo,RB,Tdo,Mdo,PB,Edo,Cdo,wdo,ks,fne,Ado,ydo,BB,Ldo,xdo,IB,$do,kdo,Sdo,Ss,mne,Rdo,Pdo,NB,Bdo,Ido,qB,Ndo,qdo,jdo,Rs,gne,Ddo,Gdo,jB,Odo,Vdo,DB,Xdo,zdo,Wdo,nh,Qdo,sh,Xy,Hdo,hne,Udo,Eqe,Mi,lh,pne,zy,Jdo,_ne,Ydo,Cqe,Ao,Wy,Kdo,Qy,Zdo,GB,eco,oco,rco,Hy,tco,une,aco,nco,sco,He,Uy,lco,bne,ico,dco,ya,cco,vne,fco,mco,Fne,gco,hco,Tne,pco,_co,uco,Y,ih,Mne,bco,vco,OB,Fco,Tco,Mco,dh,Ene,Eco,Cco,VB,wco,Aco,yco,ch,Cne,Lco,xco,XB,$co,kco,Sco,fh,wne,Rco,Pco,zB,Bco,Ico,Nco,mh,Ane,qco,jco,WB,Dco,Gco,Oco,gh,yne,Vco,Xco,QB,zco,Wco,Qco,hh,Lne,Hco,Uco,HB,Jco,Yco,Kco,ph,xne,Zco,efo,UB,ofo,rfo,tfo,_h,$ne,afo,nfo,JB,sfo,lfo,ifo,uh,kne,dfo,cfo,YB,ffo,mfo,gfo,bh,Sne,hfo,pfo,KB,_fo,ufo,bfo,vh,Rne,vfo,Ffo,ZB,Tfo,Mfo,Efo,Fh,Pne,Cfo,wfo,eI,Afo,yfo,Lfo,Th,Bne,xfo,$fo,oI,kfo,Sfo,Rfo,Mh,Ine,Pfo,Bfo,rI,Ifo,Nfo,qfo,Eh,Nne,jfo,Dfo,tI,Gfo,Ofo,Vfo,Ch,qne,Xfo,zfo,aI,Wfo,Qfo,Hfo,wh,jne,Ufo,Jfo,nI,Yfo,Kfo,Zfo,Ah,Dne,emo,omo,sI,rmo,tmo,amo,yh,Gne,nmo,smo,lI,lmo,imo,dmo,Lh,One,cmo,fmo,iI,mmo,gmo,hmo,xh,Vne,pmo,_mo,dI,umo,bmo,vmo,$h,Xne,Fmo,Tmo,cI,Mmo,Emo,Cmo,kh,zne,wmo,Amo,fI,ymo,Lmo,xmo,Sh,Wne,$mo,kmo,mI,Smo,Rmo,Pmo,Rh,Qne,Bmo,Imo,gI,Nmo,qmo,jmo,Ph,Hne,Dmo,Gmo,hI,Omo,Vmo,Xmo,Bh,Une,zmo,Wmo,pI,Qmo,Hmo,Umo,Ih,Jne,Jmo,Ymo,_I,Kmo,Zmo,ego,Nh,Yne,ogo,rgo,uI,tgo,ago,ngo,qh,sgo,jh,lgo,Dh,Jy,igo,Kne,dgo,wqe,Ei,Gh,Zne,Yy,cgo,ese,fgo,Aqe,yo,Ky,mgo,Zy,ggo,bI,hgo,pgo,_go,eL,ugo,ose,bgo,vgo,Fgo,Ue,oL,Tgo,rse,Mgo,Ego,Ci,Cgo,tse,wgo,Ago,ase,ygo,Lgo,xgo,he,Oh,nse,$go,kgo,vI,Sgo,Rgo,Pgo,Vh,sse,Bgo,Igo,lse,Ngo,qgo,jgo,Xh,ise,Dgo,Ggo,FI,Ogo,Vgo,Xgo,zh,dse,zgo,Wgo,TI,Qgo,Hgo,Ugo,Wh,cse,Jgo,Ygo,MI,Kgo,Zgo,eho,Qh,fse,oho,rho,EI,tho,aho,nho,Hh,mse,sho,lho,CI,iho,dho,cho,Uh,gse,fho,mho,wI,gho,hho,pho,Jh,hse,_ho,uho,AI,bho,vho,Fho,Yh,pse,Tho,Mho,yI,Eho,Cho,who,Kh,_se,Aho,yho,LI,Lho,xho,$ho,Zh,use,kho,Sho,xI,Rho,Pho,Bho,ep,bse,Iho,Nho,$I,qho,jho,Dho,op,vse,Gho,Oho,kI,Vho,Xho,zho,rp,Fse,Who,Qho,SI,Hho,Uho,Jho,tp,Tse,Yho,Kho,RI,Zho,epo,opo,ap,Mse,rpo,tpo,PI,apo,npo,spo,np,lpo,sp,ipo,lp,rL,dpo,Ese,cpo,yqe,wi,ip,Cse,tL,fpo,wse,mpo,Lqe,Lo,aL,gpo,Ai,hpo,BI,ppo,_po,II,upo,bpo,vpo,nL,Fpo,Ase,Tpo,Mpo,Epo,tt,sL,Cpo,yse,wpo,Apo,yi,ypo,Lse,Lpo,xpo,NI,$po,kpo,Spo,dp,Rpo,Je,lL,Ppo,xse,Bpo,Ipo,La,Npo,$se,qpo,jpo,kse,Dpo,Gpo,Sse,Opo,Vpo,Xpo,x,cp,Rse,zpo,Wpo,qI,Qpo,Hpo,Upo,fp,Pse,Jpo,Ypo,jI,Kpo,Zpo,e_o,mp,Bse,o_o,r_o,DI,t_o,a_o,n_o,gp,Ise,s_o,l_o,GI,i_o,d_o,c_o,hp,Nse,f_o,m_o,OI,g_o,h_o,p_o,pp,qse,__o,u_o,VI,b_o,v_o,F_o,_p,jse,T_o,M_o,XI,E_o,C_o,w_o,up,Dse,A_o,y_o,zI,L_o,x_o,$_o,bp,Gse,k_o,S_o,WI,R_o,P_o,B_o,vp,Ose,I_o,N_o,QI,q_o,j_o,D_o,Fp,Vse,G_o,O_o,HI,V_o,X_o,z_o,Tp,Xse,W_o,Q_o,UI,H_o,U_o,J_o,Mp,zse,Y_o,K_o,JI,Z_o,euo,ouo,Ep,Wse,ruo,tuo,YI,auo,nuo,suo,Cp,Qse,luo,iuo,KI,duo,cuo,fuo,wp,Hse,muo,guo,ZI,huo,puo,_uo,Ap,Use,uuo,buo,eN,vuo,Fuo,Tuo,yp,Jse,Muo,Euo,oN,Cuo,wuo,Auo,Lp,Yse,yuo,Luo,rN,xuo,$uo,kuo,xp,Kse,Suo,Ruo,tN,Puo,Buo,Iuo,$p,Zse,Nuo,quo,aN,juo,Duo,Guo,kp,ele,Ouo,Vuo,nN,Xuo,zuo,Wuo,Sp,ole,Quo,Huo,sN,Uuo,Juo,Yuo,Rp,rle,Kuo,Zuo,lN,e2o,o2o,r2o,Pp,tle,t2o,a2o,iN,n2o,s2o,l2o,Bp,ale,i2o,d2o,dN,c2o,f2o,m2o,Ip,nle,g2o,h2o,cN,p2o,_2o,u2o,Np,sle,b2o,v2o,fN,F2o,T2o,M2o,qp,lle,E2o,C2o,mN,w2o,A2o,y2o,jp,ile,L2o,x2o,gN,$2o,k2o,S2o,Dp,dle,R2o,P2o,hN,B2o,I2o,N2o,Gp,cle,q2o,j2o,pN,D2o,G2o,O2o,Ps,fle,V2o,X2o,_N,z2o,W2o,uN,Q2o,H2o,U2o,Op,mle,J2o,Y2o,bN,K2o,Z2o,e1o,Vp,gle,o1o,r1o,vN,t1o,a1o,n1o,Xp,hle,s1o,l1o,FN,i1o,d1o,c1o,zp,ple,f1o,m1o,TN,g1o,h1o,p1o,Wp,_le,_1o,u1o,MN,b1o,v1o,F1o,Qp,ule,T1o,M1o,EN,E1o,C1o,w1o,Hp,ble,A1o,y1o,CN,L1o,x1o,$1o,Up,vle,k1o,S1o,wN,R1o,P1o,B1o,Jp,Fle,I1o,N1o,AN,q1o,j1o,D1o,Yp,Tle,G1o,O1o,yN,V1o,X1o,z1o,Kp,Mle,W1o,Q1o,LN,H1o,U1o,J1o,Zp,Ele,Y1o,K1o,xN,Z1o,ebo,obo,e_,Cle,rbo,tbo,$N,abo,nbo,sbo,o_,wle,lbo,ibo,kN,dbo,cbo,fbo,r_,Ale,mbo,gbo,SN,hbo,pbo,_bo,t_,yle,ubo,bbo,RN,vbo,Fbo,Tbo,a_,Lle,Mbo,Ebo,PN,Cbo,wbo,Abo,n_,xle,ybo,Lbo,BN,xbo,$bo,kbo,s_,$le,Sbo,Rbo,IN,Pbo,Bbo,Ibo,l_,kle,Nbo,qbo,NN,jbo,Dbo,Gbo,i_,Sle,Obo,Vbo,qN,Xbo,zbo,Wbo,d_,Rle,Qbo,Hbo,jN,Ubo,Jbo,Ybo,c_,Ple,Kbo,Zbo,DN,e4o,o4o,r4o,f_,Ble,t4o,a4o,GN,n4o,s4o,l4o,m_,Ile,i4o,d4o,ON,c4o,f4o,m4o,g_,Nle,g4o,h4o,VN,p4o,_4o,u4o,h_,qle,b4o,v4o,XN,F4o,T4o,M4o,p_,jle,E4o,C4o,zN,w4o,A4o,y4o,__,Dle,L4o,x4o,WN,$4o,k4o,S4o,u_,Gle,R4o,P4o,QN,B4o,I4o,N4o,b_,Ole,q4o,j4o,HN,D4o,G4o,O4o,v_,Vle,V4o,X4o,UN,z4o,W4o,Q4o,F_,Xle,H4o,U4o,JN,J4o,Y4o,K4o,T_,zle,Z4o,evo,YN,ovo,rvo,tvo,M_,Wle,avo,nvo,KN,svo,lvo,ivo,E_,Qle,dvo,cvo,ZN,fvo,mvo,gvo,C_,Hle,hvo,pvo,eq,_vo,uvo,bvo,w_,Ule,vvo,Fvo,oq,Tvo,Mvo,Evo,A_,Jle,Cvo,wvo,rq,Avo,yvo,Lvo,y_,Yle,xvo,$vo,tq,kvo,Svo,Rvo,L_,Kle,Pvo,Bvo,aq,Ivo,Nvo,qvo,x_,Zle,jvo,Dvo,nq,Gvo,Ovo,Vvo,$_,eie,Xvo,zvo,sq,Wvo,Qvo,Hvo,k_,oie,Uvo,Jvo,lq,Yvo,Kvo,Zvo,S_,rie,e0o,o0o,iq,r0o,t0o,a0o,R_,tie,n0o,s0o,dq,l0o,i0o,d0o,P_,aie,c0o,f0o,cq,m0o,g0o,h0o,B_,nie,p0o,_0o,fq,u0o,b0o,v0o,I_,sie,F0o,T0o,mq,M0o,E0o,C0o,N_,lie,w0o,A0o,gq,y0o,L0o,x0o,q_,iie,$0o,k0o,hq,S0o,R0o,P0o,j_,die,B0o,I0o,pq,N0o,q0o,j0o,D_,cie,D0o,G0o,_q,O0o,V0o,X0o,G_,fie,z0o,W0o,uq,Q0o,H0o,U0o,O_,mie,J0o,Y0o,bq,K0o,Z0o,eFo,V_,gie,oFo,rFo,vq,tFo,aFo,nFo,X_,hie,sFo,lFo,Fq,iFo,dFo,cFo,z_,pie,fFo,mFo,Tq,gFo,hFo,pFo,W_,_ie,_Fo,uFo,Mq,bFo,vFo,FFo,Q_,uie,TFo,MFo,Eq,EFo,CFo,wFo,H_,bie,AFo,yFo,Cq,LFo,xFo,$Fo,U_,vie,kFo,SFo,wq,RFo,PFo,BFo,J_,Fie,IFo,NFo,Aq,qFo,jFo,DFo,Y_,Tie,GFo,OFo,yq,VFo,XFo,zFo,K_,Mie,WFo,QFo,Lq,HFo,UFo,JFo,Z_,Eie,YFo,KFo,xq,ZFo,e6o,o6o,eu,Cie,r6o,t6o,$q,a6o,n6o,s6o,ou,wie,l6o,i6o,kq,d6o,c6o,f6o,ru,Aie,m6o,g6o,Sq,h6o,p6o,_6o,tu,yie,u6o,b6o,Rq,v6o,F6o,T6o,au,M6o,Lie,E6o,C6o,xie,w6o,A6o,nu,xqe,Li,su,$ie,iL,y6o,kie,L6o,$qe,xo,dL,x6o,xi,$6o,Pq,k6o,S6o,Bq,R6o,P6o,B6o,cL,I6o,Sie,N6o,q6o,j6o,at,fL,D6o,Rie,G6o,O6o,$i,V6o,Pie,X6o,z6o,Iq,W6o,Q6o,H6o,lu,U6o,Ye,mL,J6o,Bie,Y6o,K6o,xa,Z6o,Iie,eTo,oTo,Nie,rTo,tTo,qie,aTo,nTo,sTo,G,iu,jie,lTo,iTo,Nq,dTo,cTo,fTo,du,Die,mTo,gTo,qq,hTo,pTo,_To,cu,Gie,uTo,bTo,jq,vTo,FTo,TTo,fu,Oie,MTo,ETo,Dq,CTo,wTo,ATo,mu,Vie,yTo,LTo,Gq,xTo,$To,kTo,gu,Xie,STo,RTo,Oq,PTo,BTo,ITo,hu,zie,NTo,qTo,Vq,jTo,DTo,GTo,pu,Wie,OTo,VTo,Xq,XTo,zTo,WTo,_u,Qie,QTo,HTo,zq,UTo,JTo,YTo,uu,Hie,KTo,ZTo,Wq,eMo,oMo,rMo,bu,Uie,tMo,aMo,Qq,nMo,sMo,lMo,vu,Jie,iMo,dMo,Hq,cMo,fMo,mMo,Fu,Yie,gMo,hMo,Uq,pMo,_Mo,uMo,Tu,Kie,bMo,vMo,Jq,FMo,TMo,MMo,Mu,Zie,EMo,CMo,Yq,wMo,AMo,yMo,Eu,ede,LMo,xMo,Kq,$Mo,kMo,SMo,Cu,ode,RMo,PMo,Zq,BMo,IMo,NMo,wu,rde,qMo,jMo,ej,DMo,GMo,OMo,Au,tde,VMo,XMo,oj,zMo,WMo,QMo,yu,ade,HMo,UMo,rj,JMo,YMo,KMo,Lu,nde,ZMo,eEo,tj,oEo,rEo,tEo,xu,sde,aEo,nEo,aj,sEo,lEo,iEo,$u,lde,dEo,cEo,nj,fEo,mEo,gEo,ku,ide,hEo,pEo,sj,_Eo,uEo,bEo,Su,dde,vEo,FEo,lj,TEo,MEo,EEo,Ru,cde,CEo,wEo,ij,AEo,yEo,LEo,Pu,fde,xEo,$Eo,dj,kEo,SEo,REo,Bu,mde,PEo,BEo,cj,IEo,NEo,qEo,Iu,gde,jEo,DEo,fj,GEo,OEo,VEo,Nu,hde,XEo,zEo,mj,WEo,QEo,HEo,qu,pde,UEo,JEo,gj,YEo,KEo,ZEo,ju,_de,eCo,oCo,hj,rCo,tCo,aCo,Du,ude,nCo,sCo,pj,lCo,iCo,dCo,Gu,bde,cCo,fCo,_j,mCo,gCo,hCo,Ou,vde,pCo,_Co,uj,uCo,bCo,vCo,Vu,Fde,FCo,TCo,bj,MCo,ECo,CCo,Xu,Tde,wCo,ACo,vj,yCo,LCo,xCo,zu,Mde,$Co,kCo,Fj,SCo,RCo,PCo,Wu,Ede,BCo,ICo,Tj,NCo,qCo,jCo,Qu,Cde,DCo,GCo,Mj,OCo,VCo,XCo,Hu,wde,zCo,WCo,Ej,QCo,HCo,UCo,Uu,Ade,JCo,YCo,Cj,KCo,ZCo,e5o,Ju,o5o,yde,r5o,t5o,Lde,a5o,n5o,Yu,kqe,ki,Ku,xde,gL,s5o,$de,l5o,Sqe,$o,hL,i5o,Si,d5o,wj,c5o,f5o,Aj,m5o,g5o,h5o,pL,p5o,kde,_5o,u5o,b5o,nt,_L,v5o,Sde,F5o,T5o,Ri,M5o,Rde,E5o,C5o,yj,w5o,A5o,y5o,Zu,L5o,Ke,uL,x5o,Pde,$5o,k5o,$a,S5o,Bde,R5o,P5o,Ide,B5o,I5o,Nde,N5o,q5o,j5o,z,e2,qde,D5o,G5o,Lj,O5o,V5o,X5o,o2,jde,z5o,W5o,xj,Q5o,H5o,U5o,r2,Dde,J5o,Y5o,$j,K5o,Z5o,e3o,t2,Gde,o3o,r3o,kj,t3o,a3o,n3o,a2,Ode,s3o,l3o,Sj,i3o,d3o,c3o,n2,Vde,f3o,m3o,Rj,g3o,h3o,p3o,s2,Xde,_3o,u3o,Pj,b3o,v3o,F3o,l2,zde,T3o,M3o,Bj,E3o,C3o,w3o,i2,Wde,A3o,y3o,Ij,L3o,x3o,$3o,d2,Qde,k3o,S3o,Nj,R3o,P3o,B3o,c2,Hde,I3o,N3o,qj,q3o,j3o,D3o,f2,Ude,G3o,O3o,jj,V3o,X3o,z3o,m2,Jde,W3o,Q3o,Dj,H3o,U3o,J3o,g2,Yde,Y3o,K3o,Gj,Z3o,ewo,owo,h2,Kde,rwo,two,Oj,awo,nwo,swo,p2,Zde,lwo,iwo,Vj,dwo,cwo,fwo,_2,ece,mwo,gwo,Xj,hwo,pwo,_wo,u2,oce,uwo,bwo,zj,vwo,Fwo,Two,b2,rce,Mwo,Ewo,Wj,Cwo,wwo,Awo,v2,tce,ywo,Lwo,Qj,xwo,$wo,kwo,F2,ace,Swo,Rwo,Hj,Pwo,Bwo,Iwo,T2,nce,Nwo,qwo,Uj,jwo,Dwo,Gwo,M2,sce,Owo,Vwo,Jj,Xwo,zwo,Wwo,E2,lce,Qwo,Hwo,Yj,Uwo,Jwo,Ywo,C2,ice,Kwo,Zwo,Kj,eAo,oAo,rAo,w2,dce,tAo,aAo,Zj,nAo,sAo,lAo,A2,cce,iAo,dAo,eD,cAo,fAo,mAo,y2,fce,gAo,hAo,oD,pAo,_Ao,uAo,L2,mce,bAo,vAo,rD,FAo,TAo,MAo,x2,gce,EAo,CAo,tD,wAo,AAo,yAo,$2,hce,LAo,xAo,aD,$Ao,kAo,SAo,k2,pce,RAo,PAo,nD,BAo,IAo,NAo,S2,_ce,qAo,jAo,sD,DAo,GAo,OAo,R2,uce,VAo,XAo,lD,zAo,WAo,QAo,P2,bce,HAo,UAo,iD,JAo,YAo,KAo,B2,vce,ZAo,eyo,dD,oyo,ryo,tyo,I2,Fce,ayo,nyo,cD,syo,lyo,iyo,N2,dyo,Tce,cyo,fyo,Mce,myo,gyo,q2,Rqe,Pi,j2,Ece,bL,hyo,Cce,pyo,Pqe,ko,vL,_yo,Bi,uyo,fD,byo,vyo,mD,Fyo,Tyo,Myo,FL,Eyo,wce,Cyo,wyo,Ayo,st,TL,yyo,Ace,Lyo,xyo,Ii,$yo,yce,kyo,Syo,gD,Ryo,Pyo,Byo,D2,Iyo,Ze,ML,Nyo,Lce,qyo,jyo,ka,Dyo,xce,Gyo,Oyo,$ce,Vyo,Xyo,kce,zyo,Wyo,Qyo,Q,G2,Sce,Hyo,Uyo,hD,Jyo,Yyo,Kyo,O2,Rce,Zyo,eLo,pD,oLo,rLo,tLo,V2,Pce,aLo,nLo,_D,sLo,lLo,iLo,X2,Bce,dLo,cLo,uD,fLo,mLo,gLo,z2,Ice,hLo,pLo,bD,_Lo,uLo,bLo,W2,Nce,vLo,FLo,vD,TLo,MLo,ELo,Q2,qce,CLo,wLo,FD,ALo,yLo,LLo,H2,jce,xLo,$Lo,TD,kLo,SLo,RLo,U2,Dce,PLo,BLo,MD,ILo,NLo,qLo,J2,Gce,jLo,DLo,ED,GLo,OLo,VLo,Y2,Oce,XLo,zLo,CD,WLo,QLo,HLo,K2,Vce,ULo,JLo,wD,YLo,KLo,ZLo,Z2,Xce,e8o,o8o,AD,r8o,t8o,a8o,e1,zce,n8o,s8o,yD,l8o,i8o,d8o,o1,Wce,c8o,f8o,LD,m8o,g8o,h8o,r1,Qce,p8o,_8o,xD,u8o,b8o,v8o,t1,Hce,F8o,T8o,$D,M8o,E8o,C8o,a1,Uce,w8o,A8o,kD,y8o,L8o,x8o,n1,Jce,$8o,k8o,SD,S8o,R8o,P8o,s1,Yce,B8o,I8o,RD,N8o,q8o,j8o,l1,Kce,D8o,G8o,PD,O8o,V8o,X8o,i1,Zce,z8o,W8o,BD,Q8o,H8o,U8o,d1,efe,J8o,Y8o,ID,K8o,Z8o,e7o,c1,ofe,o7o,r7o,ND,t7o,a7o,n7o,f1,rfe,s7o,l7o,qD,i7o,d7o,c7o,m1,tfe,f7o,m7o,jD,g7o,h7o,p7o,g1,afe,_7o,u7o,DD,b7o,v7o,F7o,h1,nfe,T7o,M7o,GD,E7o,C7o,w7o,p1,sfe,A7o,y7o,OD,L7o,x7o,$7o,_1,lfe,k7o,S7o,VD,R7o,P7o,B7o,u1,ife,I7o,N7o,dfe,q7o,j7o,D7o,b1,cfe,G7o,O7o,XD,V7o,X7o,z7o,v1,ffe,W7o,Q7o,zD,H7o,U7o,J7o,F1,mfe,Y7o,K7o,WD,Z7o,e9o,o9o,T1,gfe,r9o,t9o,QD,a9o,n9o,s9o,M1,l9o,hfe,i9o,d9o,pfe,c9o,f9o,E1,Bqe,Ni,C1,_fe,EL,m9o,ufe,g9o,Iqe,So,CL,h9o,qi,p9o,HD,_9o,u9o,UD,b9o,v9o,F9o,wL,T9o,bfe,M9o,E9o,C9o,lt,AL,w9o,vfe,A9o,y9o,ji,L9o,Ffe,x9o,$9o,JD,k9o,S9o,R9o,w1,P9o,eo,yL,B9o,Tfe,I9o,N9o,Sa,q9o,Mfe,j9o,D9o,Efe,G9o,O9o,Cfe,V9o,X9o,z9o,_e,A1,wfe,W9o,Q9o,YD,H9o,U9o,J9o,y1,Afe,Y9o,K9o,KD,Z9o,exo,oxo,L1,yfe,rxo,txo,ZD,axo,nxo,sxo,x1,Lfe,lxo,ixo,eG,dxo,cxo,fxo,$1,xfe,mxo,gxo,oG,hxo,pxo,_xo,k1,$fe,uxo,bxo,rG,vxo,Fxo,Txo,S1,kfe,Mxo,Exo,tG,Cxo,wxo,Axo,R1,Sfe,yxo,Lxo,aG,xxo,$xo,kxo,P1,Rfe,Sxo,Rxo,nG,Pxo,Bxo,Ixo,B1,Pfe,Nxo,qxo,sG,jxo,Dxo,Gxo,I1,Bfe,Oxo,Vxo,lG,Xxo,zxo,Wxo,N1,Ife,Qxo,Hxo,iG,Uxo,Jxo,Yxo,q1,Nfe,Kxo,Zxo,dG,e$o,o$o,r$o,j1,qfe,t$o,a$o,cG,n$o,s$o,l$o,D1,jfe,i$o,d$o,fG,c$o,f$o,m$o,G1,Dfe,g$o,h$o,mG,p$o,_$o,u$o,O1,b$o,Gfe,v$o,F$o,Ofe,T$o,M$o,V1,Nqe,Di,X1,Vfe,LL,E$o,Xfe,C$o,qqe,Ro,xL,w$o,Gi,A$o,gG,y$o,L$o,hG,x$o,$$o,k$o,$L,S$o,zfe,R$o,P$o,B$o,it,kL,I$o,Wfe,N$o,q$o,Oi,j$o,Qfe,D$o,G$o,pG,O$o,V$o,X$o,z1,z$o,oo,SL,W$o,Hfe,Q$o,H$o,Ra,U$o,Ufe,J$o,Y$o,Jfe,K$o,Z$o,Yfe,eko,oko,rko,N,W1,Kfe,tko,ako,_G,nko,sko,lko,Q1,Zfe,iko,dko,uG,cko,fko,mko,H1,eme,gko,hko,bG,pko,_ko,uko,U1,ome,bko,vko,vG,Fko,Tko,Mko,J1,rme,Eko,Cko,FG,wko,Ako,yko,Y1,tme,Lko,xko,TG,$ko,kko,Sko,K1,ame,Rko,Pko,MG,Bko,Iko,Nko,Z1,nme,qko,jko,EG,Dko,Gko,Oko,eb,sme,Vko,Xko,CG,zko,Wko,Qko,ob,lme,Hko,Uko,wG,Jko,Yko,Kko,rb,ime,Zko,eSo,AG,oSo,rSo,tSo,tb,dme,aSo,nSo,yG,sSo,lSo,iSo,ab,cme,dSo,cSo,LG,fSo,mSo,gSo,nb,fme,hSo,pSo,xG,_So,uSo,bSo,sb,mme,vSo,FSo,$G,TSo,MSo,ESo,lb,gme,CSo,wSo,kG,ASo,ySo,LSo,ib,hme,xSo,$So,SG,kSo,SSo,RSo,db,pme,PSo,BSo,RG,ISo,NSo,qSo,cb,_me,jSo,DSo,PG,GSo,OSo,VSo,fb,ume,XSo,zSo,BG,WSo,QSo,HSo,mb,bme,USo,JSo,IG,YSo,KSo,ZSo,gb,vme,eRo,oRo,NG,rRo,tRo,aRo,hb,Fme,nRo,sRo,qG,lRo,iRo,dRo,pb,Tme,cRo,fRo,jG,mRo,gRo,hRo,_b,Mme,pRo,_Ro,DG,uRo,bRo,vRo,ub,Eme,FRo,TRo,GG,MRo,ERo,CRo,bb,Cme,wRo,ARo,OG,yRo,LRo,xRo,vb,wme,$Ro,kRo,VG,SRo,RRo,PRo,Fb,Ame,BRo,IRo,XG,NRo,qRo,jRo,Tb,yme,DRo,GRo,zG,ORo,VRo,XRo,Mb,Lme,zRo,WRo,WG,QRo,HRo,URo,Eb,xme,JRo,YRo,QG,KRo,ZRo,ePo,Cb,$me,oPo,rPo,HG,tPo,aPo,nPo,wb,kme,sPo,lPo,UG,iPo,dPo,cPo,Ab,Sme,fPo,mPo,JG,gPo,hPo,pPo,yb,Rme,_Po,uPo,YG,bPo,vPo,FPo,Lb,Pme,TPo,MPo,KG,EPo,CPo,wPo,xb,Bme,APo,yPo,ZG,LPo,xPo,$Po,$b,Ime,kPo,SPo,eO,RPo,PPo,BPo,kb,Nme,IPo,NPo,oO,qPo,jPo,DPo,Sb,qme,GPo,OPo,rO,VPo,XPo,zPo,Rb,jme,WPo,QPo,tO,HPo,UPo,JPo,Pb,Dme,YPo,KPo,aO,ZPo,eBo,oBo,Bb,Gme,rBo,tBo,nO,aBo,nBo,sBo,Ib,Ome,lBo,iBo,sO,dBo,cBo,fBo,Nb,Vme,mBo,gBo,lO,hBo,pBo,_Bo,qb,Xme,uBo,bBo,iO,vBo,FBo,TBo,jb,MBo,zme,EBo,CBo,Wme,wBo,ABo,Db,jqe,Vi,Gb,Qme,RL,yBo,Hme,LBo,Dqe,Po,PL,xBo,Xi,$Bo,dO,kBo,SBo,cO,RBo,PBo,BBo,BL,IBo,Ume,NBo,qBo,jBo,dt,IL,DBo,Jme,GBo,OBo,zi,VBo,Yme,XBo,zBo,fO,WBo,QBo,HBo,Ob,UBo,ro,NL,JBo,Kme,YBo,KBo,Pa,ZBo,Zme,eIo,oIo,ege,rIo,tIo,oge,aIo,nIo,sIo,K,Vb,rge,lIo,iIo,mO,dIo,cIo,fIo,Xb,tge,mIo,gIo,gO,hIo,pIo,_Io,zb,age,uIo,bIo,hO,vIo,FIo,TIo,Wb,nge,MIo,EIo,pO,CIo,wIo,AIo,Qb,sge,yIo,LIo,_O,xIo,$Io,kIo,Hb,lge,SIo,RIo,uO,PIo,BIo,IIo,Ub,ige,NIo,qIo,bO,jIo,DIo,GIo,Jb,dge,OIo,VIo,vO,XIo,zIo,WIo,Yb,cge,QIo,HIo,FO,UIo,JIo,YIo,Kb,fge,KIo,ZIo,TO,eNo,oNo,rNo,Zb,mge,tNo,aNo,MO,nNo,sNo,lNo,e4,gge,iNo,dNo,EO,cNo,fNo,mNo,o4,hge,gNo,hNo,CO,pNo,_No,uNo,r4,pge,bNo,vNo,wO,FNo,TNo,MNo,t4,_ge,ENo,CNo,AO,wNo,ANo,yNo,a4,uge,LNo,xNo,yO,$No,kNo,SNo,n4,bge,RNo,PNo,LO,BNo,INo,NNo,s4,vge,qNo,jNo,xO,DNo,GNo,ONo,l4,Fge,VNo,XNo,$O,zNo,WNo,QNo,i4,Tge,HNo,UNo,kO,JNo,YNo,KNo,d4,Mge,ZNo,eqo,SO,oqo,rqo,tqo,c4,Ege,aqo,nqo,RO,sqo,lqo,iqo,f4,Cge,dqo,cqo,PO,fqo,mqo,gqo,m4,wge,hqo,pqo,BO,_qo,uqo,bqo,g4,Age,vqo,Fqo,IO,Tqo,Mqo,Eqo,h4,yge,Cqo,wqo,NO,Aqo,yqo,Lqo,p4,Lge,xqo,$qo,qO,kqo,Sqo,Rqo,_4,xge,Pqo,Bqo,jO,Iqo,Nqo,qqo,u4,$ge,jqo,Dqo,DO,Gqo,Oqo,Vqo,b4,Xqo,kge,zqo,Wqo,Sge,Qqo,Hqo,v4,Gqe,Wi,F4,Rge,qL,Uqo,Pge,Jqo,Oqe,Bo,jL,Yqo,Qi,Kqo,GO,Zqo,ejo,OO,ojo,rjo,tjo,DL,ajo,Bge,njo,sjo,ljo,ct,GL,ijo,Ige,djo,cjo,Hi,fjo,Nge,mjo,gjo,VO,hjo,pjo,_jo,T4,ujo,to,OL,bjo,qge,vjo,Fjo,Ba,Tjo,jge,Mjo,Ejo,Dge,Cjo,wjo,Gge,Ajo,yjo,Ljo,Yr,M4,Oge,xjo,$jo,XO,kjo,Sjo,Rjo,E4,Vge,Pjo,Bjo,zO,Ijo,Njo,qjo,C4,Xge,jjo,Djo,WO,Gjo,Ojo,Vjo,w4,zge,Xjo,zjo,QO,Wjo,Qjo,Hjo,A4,Wge,Ujo,Jjo,HO,Yjo,Kjo,Zjo,y4,eDo,Qge,oDo,rDo,Hge,tDo,aDo,L4,Vqe,Ui,x4,Uge,VL,nDo,Jge,sDo,Xqe,Io,XL,lDo,Ji,iDo,UO,dDo,cDo,JO,fDo,mDo,gDo,zL,hDo,Yge,pDo,_Do,uDo,ft,WL,bDo,Kge,vDo,FDo,Yi,TDo,Zge,MDo,EDo,YO,CDo,wDo,ADo,$4,yDo,ao,QL,LDo,ehe,xDo,$Do,Ia,kDo,ohe,SDo,RDo,rhe,PDo,BDo,the,IDo,NDo,qDo,H,k4,ahe,jDo,DDo,KO,GDo,ODo,VDo,S4,nhe,XDo,zDo,ZO,WDo,QDo,HDo,R4,she,UDo,JDo,eV,YDo,KDo,ZDo,P4,lhe,eGo,oGo,oV,rGo,tGo,aGo,B4,ihe,nGo,sGo,rV,lGo,iGo,dGo,I4,dhe,cGo,fGo,tV,mGo,gGo,hGo,N4,che,pGo,_Go,aV,uGo,bGo,vGo,q4,fhe,FGo,TGo,nV,MGo,EGo,CGo,j4,mhe,wGo,AGo,sV,yGo,LGo,xGo,D4,ghe,$Go,kGo,lV,SGo,RGo,PGo,G4,hhe,BGo,IGo,iV,NGo,qGo,jGo,O4,phe,DGo,GGo,dV,OGo,VGo,XGo,V4,_he,zGo,WGo,cV,QGo,HGo,UGo,X4,uhe,JGo,YGo,fV,KGo,ZGo,eOo,z4,bhe,oOo,rOo,mV,tOo,aOo,nOo,W4,vhe,sOo,lOo,gV,iOo,dOo,cOo,Q4,Fhe,fOo,mOo,hV,gOo,hOo,pOo,H4,The,_Oo,uOo,pV,bOo,vOo,FOo,U4,Mhe,TOo,MOo,_V,EOo,COo,wOo,J4,Ehe,AOo,yOo,uV,LOo,xOo,$Oo,Y4,Che,kOo,SOo,bV,ROo,POo,BOo,K4,whe,IOo,NOo,vV,qOo,jOo,DOo,Z4,Ahe,GOo,OOo,FV,VOo,XOo,zOo,ev,yhe,WOo,QOo,TV,HOo,UOo,JOo,ov,Lhe,YOo,KOo,MV,ZOo,eVo,oVo,rv,xhe,rVo,tVo,EV,aVo,nVo,sVo,tv,$he,lVo,iVo,CV,dVo,cVo,fVo,av,khe,mVo,gVo,wV,hVo,pVo,_Vo,nv,She,uVo,bVo,AV,vVo,FVo,TVo,sv,Rhe,MVo,EVo,yV,CVo,wVo,AVo,lv,Phe,yVo,LVo,LV,xVo,$Vo,kVo,iv,Bhe,SVo,RVo,xV,PVo,BVo,IVo,dv,Ihe,NVo,qVo,$V,jVo,DVo,GVo,cv,Nhe,OVo,VVo,kV,XVo,zVo,WVo,fv,QVo,qhe,HVo,UVo,jhe,JVo,YVo,mv,zqe,Ki,gv,Dhe,HL,KVo,Ghe,ZVo,Wqe,No,UL,eXo,Zi,oXo,SV,rXo,tXo,RV,aXo,nXo,sXo,JL,lXo,Ohe,iXo,dXo,cXo,mt,YL,fXo,Vhe,mXo,gXo,ed,hXo,Xhe,pXo,_Xo,PV,uXo,bXo,vXo,hv,FXo,no,KL,TXo,zhe,MXo,EXo,Na,CXo,Whe,wXo,AXo,Qhe,yXo,LXo,Hhe,xXo,$Xo,kXo,V,pv,Uhe,SXo,RXo,BV,PXo,BXo,IXo,_v,Jhe,NXo,qXo,IV,jXo,DXo,GXo,uv,Yhe,OXo,VXo,NV,XXo,zXo,WXo,bv,Khe,QXo,HXo,qV,UXo,JXo,YXo,vv,Zhe,KXo,ZXo,jV,ezo,ozo,rzo,Fv,epe,tzo,azo,DV,nzo,szo,lzo,Tv,ope,izo,dzo,GV,czo,fzo,mzo,Mv,rpe,gzo,hzo,OV,pzo,_zo,uzo,Ev,tpe,bzo,vzo,VV,Fzo,Tzo,Mzo,Cv,ape,Ezo,Czo,XV,wzo,Azo,yzo,wv,npe,Lzo,xzo,zV,$zo,kzo,Szo,Av,spe,Rzo,Pzo,WV,Bzo,Izo,Nzo,yv,lpe,qzo,jzo,QV,Dzo,Gzo,Ozo,Lv,ipe,Vzo,Xzo,HV,zzo,Wzo,Qzo,xv,dpe,Hzo,Uzo,UV,Jzo,Yzo,Kzo,$v,cpe,Zzo,eWo,JV,oWo,rWo,tWo,kv,fpe,aWo,nWo,YV,sWo,lWo,iWo,Sv,mpe,dWo,cWo,KV,fWo,mWo,gWo,Rv,gpe,hWo,pWo,ZV,_Wo,uWo,bWo,Pv,hpe,vWo,FWo,eX,TWo,MWo,EWo,Bv,ppe,CWo,wWo,oX,AWo,yWo,LWo,Iv,_pe,xWo,$Wo,rX,kWo,SWo,RWo,Nv,upe,PWo,BWo,tX,IWo,NWo,qWo,qv,bpe,jWo,DWo,aX,GWo,OWo,VWo,jv,vpe,XWo,zWo,nX,WWo,QWo,HWo,Dv,Fpe,UWo,JWo,sX,YWo,KWo,ZWo,Gv,Tpe,eQo,oQo,lX,rQo,tQo,aQo,Ov,Mpe,nQo,sQo,iX,lQo,iQo,dQo,Vv,Epe,cQo,fQo,dX,mQo,gQo,hQo,Xv,Cpe,pQo,_Qo,cX,uQo,bQo,vQo,zv,wpe,FQo,TQo,fX,MQo,EQo,CQo,Wv,Ape,wQo,AQo,mX,yQo,LQo,xQo,Qv,ype,$Qo,kQo,gX,SQo,RQo,PQo,Hv,Lpe,BQo,IQo,hX,NQo,qQo,jQo,Uv,xpe,DQo,GQo,pX,OQo,VQo,XQo,Jv,$pe,zQo,WQo,_X,QQo,HQo,UQo,Yv,kpe,JQo,YQo,uX,KQo,ZQo,eHo,Kv,Spe,oHo,rHo,bX,tHo,aHo,nHo,Zv,Rpe,sHo,lHo,vX,iHo,dHo,cHo,e0,Ppe,fHo,mHo,FX,gHo,hHo,pHo,o0,_Ho,Bpe,uHo,bHo,Ipe,vHo,FHo,r0,Qqe,od,t0,Npe,ZL,THo,qpe,MHo,Hqe,qo,e8,EHo,rd,CHo,TX,wHo,AHo,MX,yHo,LHo,xHo,o8,$Ho,jpe,kHo,SHo,RHo,gt,r8,PHo,Dpe,BHo,IHo,td,NHo,Gpe,qHo,jHo,EX,DHo,GHo,OHo,a0,VHo,so,t8,XHo,Ope,zHo,WHo,qa,QHo,Vpe,HHo,UHo,Xpe,JHo,YHo,zpe,KHo,ZHo,eUo,Wpe,n0,Qpe,oUo,rUo,CX,tUo,aUo,nUo,s0,sUo,Hpe,lUo,iUo,Upe,dUo,cUo,l0,Uqe,ad,i0,Jpe,a8,fUo,Ype,mUo,Jqe,jo,n8,gUo,nd,hUo,wX,pUo,_Uo,AX,uUo,bUo,vUo,s8,FUo,Kpe,TUo,MUo,EUo,ht,l8,CUo,Zpe,wUo,AUo,sd,yUo,e_e,LUo,xUo,yX,$Uo,kUo,SUo,d0,RUo,lo,i8,PUo,o_e,BUo,IUo,ja,NUo,r_e,qUo,jUo,t_e,DUo,GUo,a_e,OUo,VUo,XUo,Fe,c0,n_e,zUo,WUo,LX,QUo,HUo,UUo,f0,s_e,JUo,YUo,xX,KUo,ZUo,eJo,m0,l_e,oJo,rJo,$X,tJo,aJo,nJo,g0,i_e,sJo,lJo,kX,iJo,dJo,cJo,Bs,d_e,fJo,mJo,SX,gJo,hJo,RX,pJo,_Jo,uJo,h0,c_e,bJo,vJo,PX,FJo,TJo,MJo,pt,f_e,EJo,CJo,BX,wJo,AJo,IX,yJo,LJo,NX,xJo,$Jo,kJo,p0,m_e,SJo,RJo,qX,PJo,BJo,IJo,_0,g_e,NJo,qJo,jX,jJo,DJo,GJo,u0,h_e,OJo,VJo,DX,XJo,zJo,WJo,b0,p_e,QJo,HJo,GX,UJo,JJo,YJo,v0,__e,KJo,ZJo,OX,eYo,oYo,rYo,F0,u_e,tYo,aYo,VX,nYo,sYo,lYo,T0,b_e,iYo,dYo,XX,cYo,fYo,mYo,M0,gYo,v_e,hYo,pYo,F_e,_Yo,uYo,E0,Yqe,ld,C0,T_e,d8,bYo,M_e,vYo,Kqe,Do,c8,FYo,id,TYo,zX,MYo,EYo,WX,CYo,wYo,AYo,f8,yYo,E_e,LYo,xYo,$Yo,_t,m8,kYo,C_e,SYo,RYo,dd,PYo,w_e,BYo,IYo,QX,NYo,qYo,jYo,w0,DYo,io,g8,GYo,A_e,OYo,VYo,Da,XYo,y_e,zYo,WYo,L_e,QYo,HYo,x_e,UYo,JYo,YYo,$_e,A0,k_e,KYo,ZYo,HX,eKo,oKo,rKo,y0,tKo,S_e,aKo,nKo,R_e,sKo,lKo,L0,Zqe,cd,x0,P_e,h8,iKo,B_e,dKo,eje,Go,p8,cKo,fd,fKo,UX,mKo,gKo,JX,hKo,pKo,_Ko,_8,uKo,I_e,bKo,vKo,FKo,ut,u8,TKo,N_e,MKo,EKo,md,CKo,q_e,wKo,AKo,YX,yKo,LKo,xKo,$0,$Ko,co,b8,kKo,j_e,SKo,RKo,Ga,PKo,D_e,BKo,IKo,G_e,NKo,qKo,O_e,jKo,DKo,GKo,Se,k0,V_e,OKo,VKo,KX,XKo,zKo,WKo,S0,X_e,QKo,HKo,ZX,UKo,JKo,YKo,R0,z_e,KKo,ZKo,ez,eZo,oZo,rZo,P0,W_e,tZo,aZo,oz,nZo,sZo,lZo,B0,Q_e,iZo,dZo,rz,cZo,fZo,mZo,I0,H_e,gZo,hZo,tz,pZo,_Zo,uZo,N0,U_e,bZo,vZo,az,FZo,TZo,MZo,q0,J_e,EZo,CZo,nz,wZo,AZo,yZo,j0,Y_e,LZo,xZo,sz,$Zo,kZo,SZo,D0,RZo,K_e,PZo,BZo,Z_e,IZo,NZo,G0,oje,gd,O0,eue,v8,qZo,oue,jZo,rje,Oo,F8,DZo,hd,GZo,lz,OZo,VZo,iz,XZo,zZo,WZo,T8,QZo,rue,HZo,UZo,JZo,bt,M8,YZo,tue,KZo,ZZo,pd,eer,aue,oer,rer,dz,ter,aer,ner,V0,ser,fo,E8,ler,nue,ier,der,Oa,cer,sue,fer,mer,lue,ger,her,iue,per,_er,uer,Kr,X0,due,ber,ver,cz,Fer,Ter,Mer,z0,cue,Eer,Cer,fz,wer,Aer,yer,W0,fue,Ler,xer,mz,$er,ker,Ser,Q0,mue,Rer,Per,gz,Ber,Ier,Ner,H0,gue,qer,jer,hz,Der,Ger,Oer,U0,Ver,hue,Xer,zer,pue,Wer,Qer,J0,tje,_d,Y0,_ue,C8,Her,uue,Uer,aje,Vo,w8,Jer,ud,Yer,pz,Ker,Zer,_z,eor,oor,ror,A8,tor,bue,aor,nor,sor,vt,y8,lor,vue,ior,dor,bd,cor,Fue,mor,gor,uz,hor,por,_or,K0,uor,mo,L8,bor,Tue,vor,For,Va,Tor,Mue,Mor,Eor,Eue,Cor,wor,Cue,Aor,yor,Lor,ye,Z0,wue,xor,$or,bz,kor,Sor,Ror,eF,Aue,Por,Bor,vz,Ior,Nor,qor,oF,yue,jor,Dor,Fz,Gor,Oor,Vor,rF,Lue,Xor,zor,Tz,Wor,Qor,Hor,tF,xue,Uor,Jor,Mz,Yor,Kor,Zor,aF,$ue,err,orr,Ez,rrr,trr,arr,nF,kue,nrr,srr,Cz,lrr,irr,drr,sF,Sue,crr,frr,wz,mrr,grr,hrr,lF,Rue,prr,_rr,Az,urr,brr,vrr,iF,Pue,Frr,Trr,yz,Mrr,Err,Crr,dF,wrr,Bue,Arr,yrr,Iue,Lrr,xrr,cF,nje,vd,fF,Nue,x8,$rr,que,krr,sje,Xo,$8,Srr,Fd,Rrr,Lz,Prr,Brr,xz,Irr,Nrr,qrr,k8,jrr,jue,Drr,Grr,Orr,Ft,S8,Vrr,Due,Xrr,zrr,Td,Wrr,Gue,Qrr,Hrr,$z,Urr,Jrr,Yrr,mF,Krr,go,R8,Zrr,Oue,etr,otr,Xa,rtr,Vue,ttr,atr,Xue,ntr,str,zue,ltr,itr,dtr,P8,gF,Wue,ctr,ftr,kz,mtr,gtr,htr,hF,Que,ptr,_tr,Sz,utr,btr,vtr,pF,Ftr,Hue,Ttr,Mtr,Uue,Etr,Ctr,_F,lje,Md,uF,Jue,B8,wtr,Yue,Atr,ije,zo,I8,ytr,Ed,Ltr,Rz,xtr,$tr,Pz,ktr,Str,Rtr,N8,Ptr,Kue,Btr,Itr,Ntr,Tt,q8,qtr,Zue,jtr,Dtr,Cd,Gtr,e2e,Otr,Vtr,Bz,Xtr,ztr,Wtr,bF,Qtr,ho,j8,Htr,o2e,Utr,Jtr,za,Ytr,r2e,Ktr,Ztr,t2e,ear,oar,a2e,rar,tar,aar,Zr,vF,n2e,nar,sar,Iz,lar,iar,dar,FF,s2e,car,far,Nz,mar,gar,har,TF,l2e,par,_ar,qz,uar,bar,Far,MF,i2e,Tar,Mar,jz,Ear,Car,war,EF,d2e,Aar,yar,Dz,Lar,xar,$ar,CF,kar,c2e,Sar,Rar,f2e,Par,Bar,wF,dje,wd,AF,m2e,D8,Iar,g2e,Nar,cje,Wo,G8,qar,Ad,jar,Gz,Dar,Gar,Oz,Oar,Var,Xar,O8,zar,h2e,War,Qar,Har,Mt,V8,Uar,p2e,Jar,Yar,yd,Kar,_2e,Zar,enr,Vz,onr,rnr,tnr,yF,anr,po,X8,nnr,u2e,snr,lnr,Wa,inr,b2e,dnr,cnr,v2e,fnr,mnr,F2e,gnr,hnr,pnr,Ld,LF,T2e,_nr,unr,Xz,bnr,vnr,Fnr,xF,M2e,Tnr,Mnr,zz,Enr,Cnr,wnr,$F,E2e,Anr,ynr,Wz,Lnr,xnr,$nr,kF,knr,C2e,Snr,Rnr,w2e,Pnr,Bnr,SF,fje,xd,RF,A2e,z8,Inr,y2e,Nnr,mje,Qo,W8,qnr,$d,jnr,Qz,Dnr,Gnr,Hz,Onr,Vnr,Xnr,Q8,znr,L2e,Wnr,Qnr,Hnr,Et,H8,Unr,x2e,Jnr,Ynr,kd,Knr,$2e,Znr,esr,Uz,osr,rsr,tsr,PF,asr,_o,U8,nsr,k2e,ssr,lsr,Qa,isr,S2e,dsr,csr,R2e,fsr,msr,P2e,gsr,hsr,psr,J8,BF,B2e,_sr,usr,Jz,bsr,vsr,Fsr,IF,I2e,Tsr,Msr,Yz,Esr,Csr,wsr,NF,Asr,N2e,ysr,Lsr,q2e,xsr,$sr,qF,gje,Sd,jF,j2e,Y8,ksr,D2e,Ssr,hje,Ho,K8,Rsr,Rd,Psr,Kz,Bsr,Isr,Zz,Nsr,qsr,jsr,Z8,Dsr,G2e,Gsr,Osr,Vsr,Ct,e7,Xsr,O2e,zsr,Wsr,Pd,Qsr,V2e,Hsr,Usr,eW,Jsr,Ysr,Ksr,DF,Zsr,uo,o7,elr,X2e,olr,rlr,Ha,tlr,z2e,alr,nlr,W2e,slr,llr,Q2e,ilr,dlr,clr,H2e,GF,U2e,flr,mlr,oW,glr,hlr,plr,OF,_lr,J2e,ulr,blr,Y2e,vlr,Flr,VF,pje,Bd,XF,K2e,r7,Tlr,Z2e,Mlr,_je,Uo,t7,Elr,Id,Clr,rW,wlr,Alr,tW,ylr,Llr,xlr,a7,$lr,e1e,klr,Slr,Rlr,wt,n7,Plr,o1e,Blr,Ilr,Nd,Nlr,r1e,qlr,jlr,aW,Dlr,Glr,Olr,zF,Vlr,bo,s7,Xlr,t1e,zlr,Wlr,Ua,Qlr,a1e,Hlr,Ulr,n1e,Jlr,Ylr,s1e,Klr,Zlr,eir,Ja,WF,l1e,oir,rir,nW,tir,air,nir,QF,i1e,sir,lir,sW,iir,dir,cir,HF,d1e,fir,mir,lW,gir,hir,pir,UF,c1e,_ir,uir,iW,bir,vir,Fir,JF,Tir,f1e,Mir,Eir,m1e,Cir,wir,YF,uje,qd,KF,g1e,l7,Air,h1e,yir,bje,Jo,i7,Lir,jd,xir,dW,$ir,kir,cW,Sir,Rir,Pir,d7,Bir,p1e,Iir,Nir,qir,At,c7,jir,_1e,Dir,Gir,Dd,Oir,u1e,Vir,Xir,fW,zir,Wir,Qir,ZF,Hir,vo,f7,Uir,b1e,Jir,Yir,Ya,Kir,v1e,Zir,edr,F1e,odr,rdr,T1e,tdr,adr,ndr,M1e,e6,E1e,sdr,ldr,mW,idr,ddr,cdr,o6,fdr,C1e,mdr,gdr,w1e,hdr,pdr,r6,vje,Gd,t6,A1e,m7,_dr,y1e,udr,Fje,Yo,g7,bdr,Od,vdr,gW,Fdr,Tdr,hW,Mdr,Edr,Cdr,h7,wdr,L1e,Adr,ydr,Ldr,yt,p7,xdr,x1e,$dr,kdr,Vd,Sdr,$1e,Rdr,Pdr,pW,Bdr,Idr,Ndr,a6,qdr,wr,_7,jdr,k1e,Ddr,Gdr,Ka,Odr,S1e,Vdr,Xdr,R1e,zdr,Wdr,P1e,Qdr,Hdr,Udr,q,n6,B1e,Jdr,Ydr,_W,Kdr,Zdr,ecr,s6,I1e,ocr,rcr,uW,tcr,acr,ncr,l6,N1e,scr,lcr,bW,icr,dcr,ccr,i6,q1e,fcr,mcr,vW,gcr,hcr,pcr,d6,j1e,_cr,ucr,FW,bcr,vcr,Fcr,c6,D1e,Tcr,Mcr,TW,Ecr,Ccr,wcr,f6,G1e,Acr,ycr,MW,Lcr,xcr,$cr,m6,O1e,kcr,Scr,EW,Rcr,Pcr,Bcr,g6,V1e,Icr,Ncr,CW,qcr,jcr,Dcr,h6,X1e,Gcr,Ocr,wW,Vcr,Xcr,zcr,p6,z1e,Wcr,Qcr,AW,Hcr,Ucr,Jcr,_6,W1e,Ycr,Kcr,yW,Zcr,efr,ofr,u6,Q1e,rfr,tfr,LW,afr,nfr,sfr,b6,H1e,lfr,ifr,xW,dfr,cfr,ffr,v6,U1e,mfr,gfr,$W,hfr,pfr,_fr,F6,J1e,ufr,bfr,kW,vfr,Ffr,Tfr,T6,Y1e,Mfr,Efr,SW,Cfr,wfr,Afr,Is,K1e,yfr,Lfr,RW,xfr,$fr,PW,kfr,Sfr,Rfr,M6,Z1e,Pfr,Bfr,BW,Ifr,Nfr,qfr,E6,ebe,jfr,Dfr,IW,Gfr,Ofr,Vfr,C6,obe,Xfr,zfr,NW,Wfr,Qfr,Hfr,w6,rbe,Ufr,Jfr,qW,Yfr,Kfr,Zfr,A6,tbe,emr,omr,jW,rmr,tmr,amr,y6,abe,nmr,smr,DW,lmr,imr,dmr,L6,nbe,cmr,fmr,GW,mmr,gmr,hmr,x6,sbe,pmr,_mr,OW,umr,bmr,vmr,$6,lbe,Fmr,Tmr,VW,Mmr,Emr,Cmr,k6,ibe,wmr,Amr,XW,ymr,Lmr,xmr,S6,dbe,$mr,kmr,zW,Smr,Rmr,Pmr,R6,cbe,Bmr,Imr,WW,Nmr,qmr,jmr,P6,fbe,Dmr,Gmr,QW,Omr,Vmr,Xmr,B6,mbe,zmr,Wmr,HW,Qmr,Hmr,Umr,I6,gbe,Jmr,Ymr,UW,Kmr,Zmr,egr,N6,hbe,ogr,rgr,JW,tgr,agr,ngr,q6,pbe,sgr,lgr,YW,igr,dgr,cgr,j6,_be,fgr,mgr,KW,ggr,hgr,pgr,D6,ube,_gr,ugr,ZW,bgr,vgr,Fgr,G6,bbe,Tgr,Mgr,eQ,Egr,Cgr,wgr,O6,vbe,Agr,ygr,oQ,Lgr,xgr,$gr,V6,Fbe,kgr,Sgr,rQ,Rgr,Pgr,Bgr,X6,Tbe,Igr,Ngr,tQ,qgr,jgr,Dgr,z6,Mbe,Ggr,Ogr,aQ,Vgr,Xgr,zgr,W6,Ebe,Wgr,Qgr,nQ,Hgr,Ugr,Jgr,Q6,Cbe,Ygr,Kgr,sQ,Zgr,ehr,ohr,H6,wbe,rhr,thr,lQ,ahr,nhr,shr,U6,Abe,lhr,ihr,iQ,dhr,chr,fhr,J6,Tje,Xd,Y6,ybe,u7,mhr,Lbe,ghr,Mje,Ko,b7,hhr,zd,phr,dQ,_hr,uhr,cQ,bhr,vhr,Fhr,v7,Thr,xbe,Mhr,Ehr,Chr,Lt,F7,whr,$be,Ahr,yhr,Wd,Lhr,kbe,xhr,$hr,fQ,khr,Shr,Rhr,K6,Phr,Ar,T7,Bhr,Sbe,Ihr,Nhr,Za,qhr,Rbe,jhr,Dhr,Pbe,Ghr,Ohr,Bbe,Vhr,Xhr,zhr,se,Z6,Ibe,Whr,Qhr,mQ,Hhr,Uhr,Jhr,eT,Nbe,Yhr,Khr,gQ,Zhr,epr,opr,oT,qbe,rpr,tpr,hQ,apr,npr,spr,rT,jbe,lpr,ipr,pQ,dpr,cpr,fpr,tT,Dbe,mpr,gpr,_Q,hpr,ppr,_pr,aT,Gbe,upr,bpr,uQ,vpr,Fpr,Tpr,nT,Obe,Mpr,Epr,bQ,Cpr,wpr,Apr,sT,Vbe,ypr,Lpr,vQ,xpr,$pr,kpr,lT,Xbe,Spr,Rpr,FQ,Ppr,Bpr,Ipr,iT,zbe,Npr,qpr,TQ,jpr,Dpr,Gpr,dT,Wbe,Opr,Vpr,MQ,Xpr,zpr,Wpr,cT,Qbe,Qpr,Hpr,EQ,Upr,Jpr,Ypr,fT,Hbe,Kpr,Zpr,CQ,e_r,o_r,r_r,mT,Ube,t_r,a_r,wQ,n_r,s_r,l_r,gT,Jbe,i_r,d_r,AQ,c_r,f_r,m_r,hT,Ybe,g_r,h_r,yQ,p_r,__r,u_r,pT,Kbe,b_r,v_r,LQ,F_r,T_r,M_r,_T,Zbe,E_r,C_r,xQ,w_r,A_r,y_r,uT,e4e,L_r,x_r,$Q,$_r,k_r,S_r,bT,o4e,R_r,P_r,kQ,B_r,I_r,N_r,vT,r4e,q_r,j_r,SQ,D_r,G_r,O_r,FT,t4e,V_r,X_r,RQ,z_r,W_r,Q_r,TT,a4e,H_r,U_r,PQ,J_r,Y_r,K_r,MT,Eje,Qd,ET,n4e,M7,Z_r,s4e,eur,Cje,Zo,E7,our,Hd,rur,BQ,tur,aur,IQ,nur,sur,lur,C7,iur,l4e,dur,cur,fur,xt,w7,mur,i4e,gur,hur,Ud,pur,d4e,_ur,uur,NQ,bur,vur,Fur,CT,Tur,yr,A7,Mur,c4e,Eur,Cur,en,wur,f4e,Aur,yur,m4e,Lur,xur,g4e,$ur,kur,Sur,Me,wT,h4e,Rur,Pur,qQ,Bur,Iur,Nur,AT,p4e,qur,jur,jQ,Dur,Gur,Our,yT,_4e,Vur,Xur,DQ,zur,Wur,Qur,LT,u4e,Hur,Uur,GQ,Jur,Yur,Kur,xT,b4e,Zur,e2r,OQ,o2r,r2r,t2r,$T,v4e,a2r,n2r,VQ,s2r,l2r,i2r,kT,F4e,d2r,c2r,XQ,f2r,m2r,g2r,ST,T4e,h2r,p2r,zQ,_2r,u2r,b2r,RT,M4e,v2r,F2r,WQ,T2r,M2r,E2r,PT,E4e,C2r,w2r,QQ,A2r,y2r,L2r,BT,C4e,x2r,$2r,HQ,k2r,S2r,R2r,IT,w4e,P2r,B2r,UQ,I2r,N2r,q2r,NT,wje,Jd,qT,A4e,y7,j2r,y4e,D2r,Aje,er,L7,G2r,Yd,O2r,JQ,V2r,X2r,YQ,z2r,W2r,Q2r,x7,H2r,L4e,U2r,J2r,Y2r,$t,$7,K2r,x4e,Z2r,e1r,Kd,o1r,$4e,r1r,t1r,KQ,a1r,n1r,s1r,jT,l1r,Lr,k7,i1r,k4e,d1r,c1r,on,f1r,S4e,m1r,g1r,R4e,h1r,p1r,P4e,_1r,u1r,b1r,rn,DT,B4e,v1r,F1r,ZQ,T1r,M1r,E1r,GT,I4e,C1r,w1r,eH,A1r,y1r,L1r,OT,N4e,x1r,$1r,oH,k1r,S1r,R1r,VT,q4e,P1r,B1r,rH,I1r,N1r,q1r,XT,yje,Zd,zT,j4e,S7,j1r,D4e,D1r,Lje,or,R7,G1r,ec,O1r,tH,V1r,X1r,aH,z1r,W1r,Q1r,P7,H1r,G4e,U1r,J1r,Y1r,kt,B7,K1r,O4e,Z1r,ebr,oc,obr,V4e,rbr,tbr,nH,abr,nbr,sbr,WT,lbr,xr,I7,ibr,X4e,dbr,cbr,tn,fbr,z4e,mbr,gbr,W4e,hbr,pbr,Q4e,_br,ubr,bbr,ie,QT,H4e,vbr,Fbr,sH,Tbr,Mbr,Ebr,HT,U4e,Cbr,wbr,lH,Abr,ybr,Lbr,UT,J4e,xbr,$br,iH,kbr,Sbr,Rbr,JT,Y4e,Pbr,Bbr,dH,Ibr,Nbr,qbr,YT,K4e,jbr,Dbr,cH,Gbr,Obr,Vbr,KT,Z4e,Xbr,zbr,fH,Wbr,Qbr,Hbr,ZT,eve,Ubr,Jbr,mH,Ybr,Kbr,Zbr,eM,ove,e4r,o4r,gH,r4r,t4r,a4r,oM,rve,n4r,s4r,hH,l4r,i4r,d4r,rM,tve,c4r,f4r,pH,m4r,g4r,h4r,tM,ave,p4r,_4r,_H,u4r,b4r,v4r,aM,nve,F4r,T4r,uH,M4r,E4r,C4r,nM,sve,w4r,A4r,bH,y4r,L4r,x4r,sM,lve,$4r,k4r,vH,S4r,R4r,P4r,lM,ive,B4r,I4r,FH,N4r,q4r,j4r,iM,dve,D4r,G4r,TH,O4r,V4r,X4r,dM,cve,z4r,W4r,MH,Q4r,H4r,U4r,cM,fve,J4r,Y4r,EH,K4r,Z4r,evr,fM,mve,ovr,rvr,CH,tvr,avr,nvr,mM,gve,svr,lvr,wH,ivr,dvr,cvr,gM,xje,rc,hM,hve,N7,fvr,pve,mvr,$je,rr,q7,gvr,tc,hvr,AH,pvr,_vr,yH,uvr,bvr,vvr,j7,Fvr,_ve,Tvr,Mvr,Evr,St,D7,Cvr,uve,wvr,Avr,ac,yvr,bve,Lvr,xvr,LH,$vr,kvr,Svr,pM,Rvr,$r,G7,Pvr,vve,Bvr,Ivr,an,Nvr,Fve,qvr,jvr,Tve,Dvr,Gvr,Mve,Ovr,Vvr,Xvr,Le,_M,Eve,zvr,Wvr,xH,Qvr,Hvr,Uvr,uM,Cve,Jvr,Yvr,$H,Kvr,Zvr,e0r,bM,wve,o0r,r0r,kH,t0r,a0r,n0r,vM,Ave,s0r,l0r,SH,i0r,d0r,c0r,FM,yve,f0r,m0r,RH,g0r,h0r,p0r,TM,Lve,_0r,u0r,PH,b0r,v0r,F0r,MM,xve,T0r,M0r,BH,E0r,C0r,w0r,EM,$ve,A0r,y0r,IH,L0r,x0r,$0r,CM,kve,k0r,S0r,NH,R0r,P0r,B0r,wM,Sve,I0r,N0r,qH,q0r,j0r,D0r,AM,kje,nc,yM,Rve,O7,G0r,Pve,O0r,Sje,tr,V7,V0r,sc,X0r,jH,z0r,W0r,DH,Q0r,H0r,U0r,X7,J0r,Bve,Y0r,K0r,Z0r,Rt,z7,eFr,Ive,oFr,rFr,lc,tFr,Nve,aFr,nFr,GH,sFr,lFr,iFr,LM,dFr,kr,W7,cFr,qve,fFr,mFr,nn,gFr,jve,hFr,pFr,Dve,_Fr,uFr,Gve,bFr,vFr,FFr,oe,xM,Ove,TFr,MFr,OH,EFr,CFr,wFr,$M,Vve,AFr,yFr,VH,LFr,xFr,$Fr,kM,Xve,kFr,SFr,XH,RFr,PFr,BFr,SM,zve,IFr,NFr,zH,qFr,jFr,DFr,RM,Wve,GFr,OFr,WH,VFr,XFr,zFr,PM,Qve,WFr,QFr,QH,HFr,UFr,JFr,BM,Hve,YFr,KFr,HH,ZFr,e6r,o6r,IM,Uve,r6r,t6r,UH,a6r,n6r,s6r,NM,Jve,l6r,i6r,JH,d6r,c6r,f6r,qM,Yve,m6r,g6r,YH,h6r,p6r,_6r,jM,Kve,u6r,b6r,KH,v6r,F6r,T6r,DM,Zve,M6r,E6r,ZH,C6r,w6r,A6r,GM,e0e,y6r,L6r,eU,x6r,$6r,k6r,OM,o0e,S6r,R6r,oU,P6r,B6r,I6r,VM,r0e,N6r,q6r,rU,j6r,D6r,G6r,XM,t0e,O6r,V6r,tU,X6r,z6r,W6r,zM,a0e,Q6r,H6r,aU,U6r,J6r,Y6r,WM,n0e,K6r,Z6r,nU,eTr,oTr,rTr,QM,s0e,tTr,aTr,sU,nTr,sTr,lTr,HM,l0e,iTr,dTr,lU,cTr,fTr,mTr,UM,i0e,gTr,hTr,iU,pTr,_Tr,uTr,JM,d0e,bTr,vTr,dU,FTr,TTr,MTr,YM,c0e,ETr,CTr,cU,wTr,ATr,yTr,KM,f0e,LTr,xTr,fU,$Tr,kTr,STr,ZM,m0e,RTr,PTr,mU,BTr,ITr,NTr,eE,g0e,qTr,jTr,gU,DTr,GTr,OTr,oE,Rje,ic,rE,h0e,Q7,VTr,p0e,XTr,Pje,ar,H7,zTr,dc,WTr,hU,QTr,HTr,pU,UTr,JTr,YTr,U7,KTr,_0e,ZTr,eMr,oMr,Pt,J7,rMr,u0e,tMr,aMr,cc,nMr,b0e,sMr,lMr,_U,iMr,dMr,cMr,tE,fMr,Sr,Y7,mMr,v0e,gMr,hMr,sn,pMr,F0e,_Mr,uMr,T0e,bMr,vMr,M0e,FMr,TMr,MMr,pe,aE,E0e,EMr,CMr,uU,wMr,AMr,yMr,nE,C0e,LMr,xMr,bU,$Mr,kMr,SMr,sE,w0e,RMr,PMr,vU,BMr,IMr,NMr,lE,A0e,qMr,jMr,FU,DMr,GMr,OMr,iE,y0e,VMr,XMr,TU,zMr,WMr,QMr,dE,L0e,HMr,UMr,MU,JMr,YMr,KMr,cE,x0e,ZMr,eEr,EU,oEr,rEr,tEr,fE,$0e,aEr,nEr,CU,sEr,lEr,iEr,mE,k0e,dEr,cEr,wU,fEr,mEr,gEr,gE,S0e,hEr,pEr,AU,_Er,uEr,bEr,hE,R0e,vEr,FEr,yU,TEr,MEr,EEr,pE,P0e,CEr,wEr,LU,AEr,yEr,LEr,_E,B0e,xEr,$Er,xU,kEr,SEr,REr,uE,I0e,PEr,BEr,$U,IEr,NEr,qEr,bE,N0e,jEr,DEr,kU,GEr,OEr,VEr,vE,q0e,XEr,zEr,SU,WEr,QEr,HEr,FE,j0e,UEr,JEr,RU,YEr,KEr,ZEr,TE,Bje,fc,ME,D0e,K7,eCr,G0e,oCr,Ije,nr,Z7,rCr,mc,tCr,PU,aCr,nCr,BU,sCr,lCr,iCr,e9,dCr,O0e,cCr,fCr,mCr,Bt,o9,gCr,V0e,hCr,pCr,gc,_Cr,X0e,uCr,bCr,IU,vCr,FCr,TCr,EE,MCr,Rr,r9,ECr,z0e,CCr,wCr,ln,ACr,W0e,yCr,LCr,Q0e,xCr,$Cr,H0e,kCr,SCr,RCr,t9,CE,U0e,PCr,BCr,NU,ICr,NCr,qCr,wE,J0e,jCr,DCr,qU,GCr,OCr,VCr,AE,Nje,hc,yE,Y0e,a9,XCr,K0e,zCr,qje,sr,n9,WCr,pc,QCr,jU,HCr,UCr,DU,JCr,YCr,KCr,s9,ZCr,Z0e,e5r,o5r,r5r,It,l9,t5r,eFe,a5r,n5r,_c,s5r,oFe,l5r,i5r,GU,d5r,c5r,f5r,LE,m5r,Pr,i9,g5r,rFe,h5r,p5r,dn,_5r,tFe,u5r,b5r,aFe,v5r,F5r,nFe,T5r,M5r,E5r,sFe,xE,lFe,C5r,w5r,OU,A5r,y5r,L5r,$E,jje,uc,kE,iFe,d9,x5r,dFe,$5r,Dje,lr,c9,k5r,bc,S5r,VU,R5r,P5r,XU,B5r,I5r,N5r,f9,q5r,cFe,j5r,D5r,G5r,Nt,m9,O5r,fFe,V5r,X5r,vc,z5r,mFe,W5r,Q5r,zU,H5r,U5r,J5r,SE,Y5r,Br,g9,K5r,gFe,Z5r,e3r,cn,o3r,hFe,r3r,t3r,pFe,a3r,n3r,_Fe,s3r,l3r,i3r,de,RE,uFe,d3r,c3r,WU,f3r,m3r,g3r,PE,bFe,h3r,p3r,QU,_3r,u3r,b3r,BE,vFe,v3r,F3r,HU,T3r,M3r,E3r,IE,FFe,C3r,w3r,UU,A3r,y3r,L3r,NE,TFe,x3r,$3r,JU,k3r,S3r,R3r,qE,MFe,P3r,B3r,YU,I3r,N3r,q3r,jE,EFe,j3r,D3r,KU,G3r,O3r,V3r,DE,CFe,X3r,z3r,ZU,W3r,Q3r,H3r,GE,wFe,U3r,J3r,eJ,Y3r,K3r,Z3r,OE,AFe,ewr,owr,oJ,rwr,twr,awr,VE,yFe,nwr,swr,rJ,lwr,iwr,dwr,XE,LFe,cwr,fwr,tJ,mwr,gwr,hwr,zE,xFe,pwr,_wr,aJ,uwr,bwr,vwr,WE,$Fe,Fwr,Twr,nJ,Mwr,Ewr,Cwr,QE,kFe,wwr,Awr,sJ,ywr,Lwr,xwr,HE,SFe,$wr,kwr,lJ,Swr,Rwr,Pwr,UE,RFe,Bwr,Iwr,iJ,Nwr,qwr,jwr,JE,PFe,Dwr,Gwr,dJ,Owr,Vwr,Xwr,YE,BFe,zwr,Wwr,cJ,Qwr,Hwr,Uwr,KE,IFe,Jwr,Ywr,fJ,Kwr,Zwr,eAr,ZE,Gje,Fc,eC,NFe,h9,oAr,qFe,rAr,Oje,ir,p9,tAr,Tc,aAr,mJ,nAr,sAr,gJ,lAr,iAr,dAr,_9,cAr,jFe,fAr,mAr,gAr,qt,u9,hAr,DFe,pAr,_Ar,Mc,uAr,GFe,bAr,vAr,hJ,FAr,TAr,MAr,oC,EAr,Ir,b9,CAr,OFe,wAr,AAr,fn,yAr,VFe,LAr,xAr,XFe,$Ar,kAr,zFe,SAr,RAr,PAr,ce,rC,WFe,BAr,IAr,pJ,NAr,qAr,jAr,tC,QFe,DAr,GAr,_J,OAr,VAr,XAr,aC,HFe,zAr,WAr,uJ,QAr,HAr,UAr,nC,UFe,JAr,YAr,bJ,KAr,ZAr,eyr,sC,JFe,oyr,ryr,vJ,tyr,ayr,nyr,lC,YFe,syr,lyr,FJ,iyr,dyr,cyr,iC,KFe,fyr,myr,TJ,gyr,hyr,pyr,dC,ZFe,_yr,uyr,MJ,byr,vyr,Fyr,cC,e6e,Tyr,Myr,EJ,Eyr,Cyr,wyr,fC,o6e,Ayr,yyr,CJ,Lyr,xyr,$yr,mC,r6e,kyr,Syr,wJ,Ryr,Pyr,Byr,gC,t6e,Iyr,Nyr,AJ,qyr,jyr,Dyr,hC,a6e,Gyr,Oyr,yJ,Vyr,Xyr,zyr,pC,n6e,Wyr,Qyr,LJ,Hyr,Uyr,Jyr,_C,s6e,Yyr,Kyr,xJ,Zyr,eLr,oLr,uC,l6e,rLr,tLr,$J,aLr,nLr,sLr,bC,i6e,lLr,iLr,kJ,dLr,cLr,fLr,vC,d6e,mLr,gLr,SJ,hLr,pLr,_Lr,FC,c6e,uLr,bLr,RJ,vLr,FLr,TLr,TC,f6e,MLr,ELr,PJ,CLr,wLr,ALr,MC,Vje,Ec,EC,m6e,v9,yLr,g6e,LLr,Xje,dr,F9,xLr,Cc,$Lr,BJ,kLr,SLr,IJ,RLr,PLr,BLr,T9,ILr,h6e,NLr,qLr,jLr,jt,M9,DLr,p6e,GLr,OLr,wc,VLr,_6e,XLr,zLr,NJ,WLr,QLr,HLr,CC,ULr,Nr,E9,JLr,u6e,YLr,KLr,mn,ZLr,b6e,e8r,o8r,v6e,r8r,t8r,F6e,a8r,n8r,s8r,T6e,wC,M6e,l8r,i8r,qJ,d8r,c8r,f8r,AC,zje,Ac,yC,E6e,C9,m8r,C6e,g8r,Wje,cr,w9,h8r,yc,p8r,jJ,_8r,u8r,DJ,b8r,v8r,F8r,A9,T8r,w6e,M8r,E8r,C8r,Dt,y9,w8r,A6e,A8r,y8r,Lc,L8r,y6e,x8r,$8r,GJ,k8r,S8r,R8r,LC,P8r,qr,L9,B8r,L6e,I8r,N8r,gn,q8r,x6e,j8r,D8r,$6e,G8r,O8r,k6e,V8r,X8r,z8r,S6e,xC,R6e,W8r,Q8r,OJ,H8r,U8r,J8r,$C,Qje,xc,kC,P6e,x9,Y8r,B6e,K8r,Hje,fr,$9,Z8r,$c,e7r,VJ,o7r,r7r,XJ,t7r,a7r,n7r,k9,s7r,I6e,l7r,i7r,d7r,Gt,S9,c7r,N6e,f7r,m7r,kc,g7r,q6e,h7r,p7r,zJ,_7r,u7r,b7r,SC,v7r,jr,R9,F7r,j6e,T7r,M7r,hn,E7r,D6e,C7r,w7r,G6e,A7r,y7r,O6e,L7r,x7r,$7r,te,RC,V6e,k7r,S7r,WJ,R7r,P7r,B7r,PC,X6e,I7r,N7r,QJ,q7r,j7r,D7r,BC,z6e,G7r,O7r,HJ,V7r,X7r,z7r,IC,W6e,W7r,Q7r,UJ,H7r,U7r,J7r,NC,Q6e,Y7r,K7r,JJ,Z7r,e9r,o9r,qC,H6e,r9r,t9r,YJ,a9r,n9r,s9r,jC,U6e,l9r,i9r,KJ,d9r,c9r,f9r,DC,J6e,m9r,g9r,ZJ,h9r,p9r,_9r,GC,Y6e,u9r,b9r,eY,v9r,F9r,T9r,OC,K6e,M9r,E9r,oY,C9r,w9r,A9r,VC,Z6e,y9r,L9r,rY,x9r,$9r,k9r,XC,eTe,S9r,R9r,tY,P9r,B9r,I9r,zC,oTe,N9r,q9r,aY,j9r,D9r,G9r,WC,rTe,O9r,V9r,nY,X9r,z9r,W9r,QC,tTe,Q9r,H9r,sY,U9r,J9r,Y9r,HC,aTe,K9r,Z9r,lY,exr,oxr,rxr,UC,nTe,txr,axr,iY,nxr,sxr,lxr,JC,sTe,ixr,dxr,dY,cxr,fxr,mxr,YC,lTe,gxr,hxr,cY,pxr,_xr,uxr,KC,iTe,bxr,vxr,fY,Fxr,Txr,Mxr,ZC,dTe,Exr,Cxr,mY,wxr,Axr,yxr,e5,cTe,Lxr,xxr,gY,$xr,kxr,Sxr,o5,fTe,Rxr,Pxr,hY,Bxr,Ixr,Nxr,r5,mTe,qxr,jxr,pY,Dxr,Gxr,Oxr,t5,gTe,Vxr,Xxr,_Y,zxr,Wxr,Qxr,a5,Uje,Sc,n5,hTe,P9,Hxr,pTe,Uxr,Jje,mr,B9,Jxr,Rc,Yxr,uY,Kxr,Zxr,bY,e$r,o$r,r$r,I9,t$r,_Te,a$r,n$r,s$r,Ot,N9,l$r,uTe,i$r,d$r,Pc,c$r,bTe,f$r,m$r,vY,g$r,h$r,p$r,s5,_$r,Dr,q9,u$r,vTe,b$r,v$r,pn,F$r,FTe,T$r,M$r,TTe,E$r,C$r,MTe,w$r,A$r,y$r,Re,l5,ETe,L$r,x$r,FY,$$r,k$r,S$r,i5,CTe,R$r,P$r,TY,B$r,I$r,N$r,d5,wTe,q$r,j$r,MY,D$r,G$r,O$r,c5,ATe,V$r,X$r,EY,z$r,W$r,Q$r,f5,yTe,H$r,U$r,CY,J$r,Y$r,K$r,m5,LTe,Z$r,ekr,wY,okr,rkr,tkr,g5,xTe,akr,nkr,AY,skr,lkr,ikr,h5,$Te,dkr,ckr,yY,fkr,mkr,gkr,p5,kTe,hkr,pkr,LY,_kr,ukr,bkr,_5,Yje,Bc,u5,STe,j9,vkr,RTe,Fkr,Kje,gr,D9,Tkr,Ic,Mkr,xY,Ekr,Ckr,$Y,wkr,Akr,ykr,G9,Lkr,PTe,xkr,$kr,kkr,Vt,O9,Skr,BTe,Rkr,Pkr,Nc,Bkr,ITe,Ikr,Nkr,kY,qkr,jkr,Dkr,b5,Gkr,Gr,V9,Okr,NTe,Vkr,Xkr,_n,zkr,qTe,Wkr,Qkr,jTe,Hkr,Ukr,DTe,Jkr,Ykr,Kkr,Ee,v5,GTe,Zkr,eSr,SY,oSr,rSr,tSr,F5,OTe,aSr,nSr,RY,sSr,lSr,iSr,T5,VTe,dSr,cSr,PY,fSr,mSr,gSr,M5,XTe,hSr,pSr,BY,_Sr,uSr,bSr,E5,zTe,vSr,FSr,IY,TSr,MSr,ESr,C5,WTe,CSr,wSr,NY,ASr,ySr,LSr,w5,QTe,xSr,$Sr,qY,kSr,SSr,RSr,A5,HTe,PSr,BSr,jY,ISr,NSr,qSr,y5,UTe,jSr,DSr,DY,GSr,OSr,VSr,L5,JTe,XSr,zSr,GY,WSr,QSr,HSr,x5,YTe,USr,JSr,OY,YSr,KSr,ZSr,$5,KTe,eRr,oRr,VY,rRr,tRr,aRr,k5,Zje,qc,S5,ZTe,X9,nRr,eMe,sRr,eDe,hr,z9,lRr,jc,iRr,XY,dRr,cRr,zY,fRr,mRr,gRr,W9,hRr,oMe,pRr,_Rr,uRr,Xt,Q9,bRr,rMe,vRr,FRr,Dc,TRr,tMe,MRr,ERr,WY,CRr,wRr,ARr,R5,yRr,Or,H9,LRr,aMe,xRr,$Rr,un,kRr,nMe,SRr,RRr,sMe,PRr,BRr,lMe,IRr,NRr,qRr,xe,P5,iMe,jRr,DRr,QY,GRr,ORr,VRr,B5,dMe,XRr,zRr,HY,WRr,QRr,HRr,I5,cMe,URr,JRr,UY,YRr,KRr,ZRr,N5,fMe,ePr,oPr,JY,rPr,tPr,aPr,q5,mMe,nPr,sPr,YY,lPr,iPr,dPr,j5,gMe,cPr,fPr,KY,mPr,gPr,hPr,D5,hMe,pPr,_Pr,ZY,uPr,bPr,vPr,G5,pMe,FPr,TPr,eK,MPr,EPr,CPr,O5,_Me,wPr,APr,oK,yPr,LPr,xPr,V5,uMe,$Pr,kPr,rK,SPr,RPr,PPr,X5,oDe,Gc,z5,bMe,U9,BPr,vMe,IPr,rDe,pr,J9,NPr,Oc,qPr,tK,jPr,DPr,aK,GPr,OPr,VPr,Y9,XPr,FMe,zPr,WPr,QPr,zt,K9,HPr,TMe,UPr,JPr,Vc,YPr,MMe,KPr,ZPr,nK,eBr,oBr,rBr,W5,tBr,Vr,Z9,aBr,EMe,nBr,sBr,bn,lBr,CMe,iBr,dBr,wMe,cBr,fBr,AMe,mBr,gBr,hBr,Pe,Q5,yMe,pBr,_Br,sK,uBr,bBr,vBr,H5,LMe,FBr,TBr,lK,MBr,EBr,CBr,U5,xMe,wBr,ABr,iK,yBr,LBr,xBr,J5,$Me,$Br,kBr,dK,SBr,RBr,PBr,Y5,kMe,BBr,IBr,cK,NBr,qBr,jBr,K5,SMe,DBr,GBr,fK,OBr,VBr,XBr,Z5,RMe,zBr,WBr,mK,QBr,HBr,UBr,e3,PMe,JBr,YBr,gK,KBr,ZBr,eIr,o3,BMe,oIr,rIr,hK,tIr,aIr,nIr,r3,tDe,Xc,t3,IMe,ex,sIr,NMe,lIr,aDe,_r,ox,iIr,zc,dIr,pK,cIr,fIr,_K,mIr,gIr,hIr,rx,pIr,qMe,_Ir,uIr,bIr,Wt,tx,vIr,jMe,FIr,TIr,Wc,MIr,DMe,EIr,CIr,uK,wIr,AIr,yIr,a3,LIr,Xr,ax,xIr,GMe,$Ir,kIr,vn,SIr,OMe,RIr,PIr,VMe,BIr,IIr,XMe,NIr,qIr,jIr,$e,n3,zMe,DIr,GIr,bK,OIr,VIr,XIr,s3,WMe,zIr,WIr,vK,QIr,HIr,UIr,l3,QMe,JIr,YIr,FK,KIr,ZIr,eNr,i3,HMe,oNr,rNr,TK,tNr,aNr,nNr,d3,UMe,sNr,lNr,MK,iNr,dNr,cNr,c3,JMe,fNr,mNr,EK,gNr,hNr,pNr,f3,YMe,_Nr,uNr,CK,bNr,vNr,FNr,m3,KMe,TNr,MNr,wK,ENr,CNr,wNr,g3,ZMe,ANr,yNr,AK,LNr,xNr,$Nr,h3,eEe,kNr,SNr,yK,RNr,PNr,BNr,p3,nDe,Qc,_3,oEe,nx,INr,rEe,NNr,sDe,ur,sx,qNr,Hc,jNr,LK,DNr,GNr,xK,ONr,VNr,XNr,lx,zNr,tEe,WNr,QNr,HNr,Qt,ix,UNr,aEe,JNr,YNr,Uc,KNr,nEe,ZNr,eqr,$K,oqr,rqr,tqr,u3,aqr,zr,dx,nqr,sEe,sqr,lqr,Fn,iqr,lEe,dqr,cqr,iEe,fqr,mqr,dEe,gqr,hqr,pqr,ke,b3,cEe,_qr,uqr,kK,bqr,vqr,Fqr,v3,fEe,Tqr,Mqr,SK,Eqr,Cqr,wqr,F3,mEe,Aqr,yqr,RK,Lqr,xqr,$qr,T3,gEe,kqr,Sqr,PK,Rqr,Pqr,Bqr,M3,hEe,Iqr,Nqr,BK,qqr,jqr,Dqr,E3,pEe,Gqr,Oqr,IK,Vqr,Xqr,zqr,C3,_Ee,Wqr,Qqr,NK,Hqr,Uqr,Jqr,w3,uEe,Yqr,Kqr,qK,Zqr,ejr,ojr,A3,bEe,rjr,tjr,jK,ajr,njr,sjr,y3,vEe,ljr,ijr,DK,djr,cjr,fjr,L3,lDe,Jc,x3,FEe,cx,mjr,TEe,gjr,iDe,br,fx,hjr,Yc,pjr,GK,_jr,ujr,OK,bjr,vjr,Fjr,mx,Tjr,MEe,Mjr,Ejr,Cjr,Ht,gx,wjr,EEe,Ajr,yjr,Kc,Ljr,CEe,xjr,$jr,VK,kjr,Sjr,Rjr,$3,Pjr,Wr,hx,Bjr,wEe,Ijr,Njr,Tn,qjr,AEe,jjr,Djr,yEe,Gjr,Ojr,LEe,Vjr,Xjr,zjr,Ge,k3,xEe,Wjr,Qjr,XK,Hjr,Ujr,Jjr,S3,$Ee,Yjr,Kjr,zK,Zjr,eDr,oDr,R3,kEe,rDr,tDr,WK,aDr,nDr,sDr,P3,SEe,lDr,iDr,QK,dDr,cDr,fDr,B3,REe,mDr,gDr,HK,hDr,pDr,_Dr,I3,PEe,uDr,bDr,UK,vDr,FDr,TDr,N3,BEe,MDr,EDr,JK,CDr,wDr,ADr,q3,IEe,yDr,LDr,YK,xDr,$Dr,kDr,j3,dDe,Zc,D3,NEe,px,SDr,qEe,RDr,cDe,vr,_x,PDr,ef,BDr,KK,IDr,NDr,ZK,qDr,jDr,DDr,ux,GDr,jEe,ODr,VDr,XDr,Ut,bx,zDr,DEe,WDr,QDr,of,HDr,GEe,UDr,JDr,eZ,YDr,KDr,ZDr,G3,eGr,Qr,vx,oGr,OEe,rGr,tGr,Mn,aGr,VEe,nGr,sGr,XEe,lGr,iGr,zEe,dGr,cGr,fGr,Oe,O3,WEe,mGr,gGr,oZ,hGr,pGr,_Gr,V3,QEe,uGr,bGr,rZ,vGr,FGr,TGr,X3,HEe,MGr,EGr,tZ,CGr,wGr,AGr,z3,UEe,yGr,LGr,aZ,xGr,$Gr,kGr,W3,JEe,SGr,RGr,nZ,PGr,BGr,IGr,Q3,YEe,NGr,qGr,sZ,jGr,DGr,GGr,H3,KEe,OGr,VGr,lZ,XGr,zGr,WGr,U3,ZEe,QGr,HGr,iZ,UGr,JGr,YGr,J3,fDe,rf,Y3,eCe,Fx,KGr,oCe,ZGr,mDe,Fr,Tx,eOr,tf,oOr,dZ,rOr,tOr,cZ,aOr,nOr,sOr,Mx,lOr,rCe,iOr,dOr,cOr,Jt,Ex,fOr,tCe,mOr,gOr,af,hOr,aCe,pOr,_Or,fZ,uOr,bOr,vOr,K3,FOr,Hr,Cx,TOr,nCe,MOr,EOr,En,COr,sCe,wOr,AOr,lCe,yOr,LOr,iCe,xOr,$Or,kOr,dCe,Z3,cCe,SOr,ROr,mZ,POr,BOr,IOr,ew,gDe,nf,ow,fCe,wx,NOr,mCe,qOr,hDe,Tr,Ax,jOr,sf,DOr,gZ,GOr,OOr,hZ,VOr,XOr,zOr,yx,WOr,gCe,QOr,HOr,UOr,Yt,Lx,JOr,hCe,YOr,KOr,lf,ZOr,pCe,eVr,oVr,pZ,rVr,tVr,aVr,rw,nVr,Ur,xx,sVr,_Ce,lVr,iVr,Cn,dVr,uCe,cVr,fVr,bCe,mVr,gVr,vCe,hVr,pVr,_Vr,$x,tw,FCe,uVr,bVr,_Z,vVr,FVr,TVr,aw,TCe,MVr,EVr,uZ,CVr,wVr,AVr,nw,pDe,df,sw,MCe,kx,yVr,ECe,LVr,_De,Mr,Sx,xVr,cf,$Vr,bZ,kVr,SVr,vZ,RVr,PVr,BVr,Rx,IVr,CCe,NVr,qVr,jVr,Kt,Px,DVr,wCe,GVr,OVr,ff,VVr,ACe,XVr,zVr,FZ,WVr,QVr,HVr,lw,UVr,Jr,Bx,JVr,yCe,YVr,KVr,wn,ZVr,LCe,eXr,oXr,xCe,rXr,tXr,$Ce,aXr,nXr,sXr,kCe,iw,SCe,lXr,iXr,TZ,dXr,cXr,fXr,dw,uDe;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),ky=new re({}),Sy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new mXr({props:{warning:!0,$$slots:{default:[okt]},$$scope:{ctx:L}}}),Ry=new re({}),Py=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/configuration_auto.py#L587"}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/configuration_auto.py#L610"}}),Cg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/configuration_auto.py#L733"}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/tokenization_auto.py#L390"}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16402/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/tokenization_auto.py#L404"}}),nh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/tokenization_auto.py#L600"}}),zy=new re({}),Wy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16402/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/feature_extraction_auto.py#L205"}}),qh=new mXr({props:{$$slots:{default:[akt]},$$scope:{ctx:L}}}),jh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/feature_extraction_auto.py#L332"}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/processing_auto.py#L88"}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/processing_auto.py#L102"}}),np=new mXr({props:{$$slots:{default:[skt]},$$scope:{ctx:L}}}),sp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),rL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/processing_auto.py#L255"}}),tL=new re({}),aL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L738"}}),sL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (MCTCT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),dp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),nu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),iL=new re({}),dL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L745"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),lu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Yu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),gL=new re({}),hL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L760"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Zu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),q2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),bL=new re({}),vL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L767"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),D2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),E1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),EL=new re({}),CL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L774"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),w1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),V1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),LL=new re({}),xL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L783"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),z1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Db=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),RL=new re({}),PL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L817"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Ob=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),v4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),qL=new re({}),jL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L824"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),T4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),VL=new re({}),XL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L810"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),$4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),HL=new re({}),UL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L792"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),hv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),ZL=new re({}),e8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L799"}}),r8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),a8=new re({}),n8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L833"}}),l8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),d8=new re({}),c8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L872"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),L0=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),h8=new re({}),p8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L879"}}),u8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),$0=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),v8=new re({}),F8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L902"}}),M8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),C8=new re({}),w8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L886"}}),y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (MCTCT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),cF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),x8=new re({}),$8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L893"}}),S8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),mF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),B8=new re({}),I8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L911"}}),q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),D8=new re({}),G8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L918"}}),V8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),SF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),z8=new re({}),W8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L865"}}),H8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),PF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),Y8=new re({}),K8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L840"}}),e7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),o7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),r7=new re({}),t7=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L847"}}),n7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),s7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),YF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),l7=new re({}),i7=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L856"}}),c7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),ZF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),f7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),r6=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),m7=new re({}),g7=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),p7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),a6=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),_7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),J6=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),u7=new re({}),b7=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),F7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),K6=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),T7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),M7=new re({}),E7=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),w7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),A7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),y7=new re({}),L7=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),$7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),k7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),S7=new re({}),R7=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),B7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),I7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),N7=new re({}),q7=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),D7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),pM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),G7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),O7=new re({}),V7=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),z7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),LM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),W7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),Q7=new re({}),H7=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),J7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),Y7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),K7=new re({}),Z7=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),o9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),a9=new re({}),n9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),l9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),d9=new re({}),c9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),m9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),h9=new re({}),p9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),u9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),v9=new re({}),F9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),M9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),C9=new re({}),w9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),$C=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),x9=new re({}),$9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),S9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),SC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),P9=new re({}),B9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),N9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),j9=new re({}),D9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),O9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),X9=new re({}),z9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),U9=new re({}),J9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),K9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),ex=new re({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),nx=new re({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),L3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),cx=new re({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),px=new re({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),Fx=new re({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),wx=new re({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),yy=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),Ly=o("AutoConfig"),Ln=o(", "),xn=a("a"),xy=o("AutoModel"),pi=o(`, and
`),$n=a("a"),$y=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),U$=o("will create a model that is an instance of "),ui=a("a"),J$=o("BertModel"),Y$=o("."),Eo=l(),wa=a("p"),K$=o("There is one class of "),bf=a("code"),Z$=o("AutoModel"),wOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),hqe=l(),bi=a("h2"),vf=a("a"),hoe=a("span"),F(ky.$$.fragment),AOe=l(),poe=a("span"),yOe=o("Extending the Auto Classes"),pqe=l(),kn=a("p"),LOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),_oe=a("code"),xOe=o("NewModel"),$Oe=o(", make sure you have a "),uoe=a("code"),kOe=o("NewModelConfig"),SOe=o(` then you can add those to the auto
classes like this:`),_qe=l(),F(Sy.$$.fragment),uqe=l(),ek=a("p"),ROe=o("You will then be able to use the auto classes like you would usually do!"),bqe=l(),F(Ff.$$.fragment),vqe=l(),vi=a("h2"),Tf=a("a"),boe=a("span"),F(Ry.$$.fragment),POe=l(),voe=a("span"),BOe=o("AutoConfig"),Fqe=l(),Co=a("div"),F(Py.$$.fragment),IOe=l(),By=a("p"),NOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ok=a("a"),qOe=o("from_pretrained()"),jOe=o(" class method."),DOe=l(),Iy=a("p"),GOe=o("This class cannot be instantiated directly using "),Foe=a("code"),OOe=o("__init__()"),VOe=o(" (throws an error)."),XOe=l(),Er=a("div"),F(Ny.$$.fragment),zOe=l(),Toe=a("p"),WOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),QOe=l(),Fi=a("p"),HOe=o("The configuration class to instantiate is selected based on the "),Moe=a("code"),UOe=o("model_type"),JOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Eoe=a("code"),YOe=o("pretrained_model_name_or_path"),KOe=o(":"),ZOe=l(),A=a("ul"),Mf=a("li"),Coe=a("strong"),eVe=o("albert"),oVe=o(" \u2014 "),rk=a("a"),rVe=o("AlbertConfig"),tVe=o(" (ALBERT model)"),aVe=l(),Ef=a("li"),woe=a("strong"),nVe=o("bart"),sVe=o(" \u2014 "),tk=a("a"),lVe=o("BartConfig"),iVe=o(" (BART model)"),dVe=l(),Cf=a("li"),Aoe=a("strong"),cVe=o("beit"),fVe=o(" \u2014 "),ak=a("a"),mVe=o("BeitConfig"),gVe=o(" (BEiT model)"),hVe=l(),wf=a("li"),yoe=a("strong"),pVe=o("bert"),_Ve=o(" \u2014 "),nk=a("a"),uVe=o("BertConfig"),bVe=o(" (BERT model)"),vVe=l(),Af=a("li"),Loe=a("strong"),FVe=o("bert-generation"),TVe=o(" \u2014 "),sk=a("a"),MVe=o("BertGenerationConfig"),EVe=o(" (Bert Generation model)"),CVe=l(),yf=a("li"),xoe=a("strong"),wVe=o("big_bird"),AVe=o(" \u2014 "),lk=a("a"),yVe=o("BigBirdConfig"),LVe=o(" (BigBird model)"),xVe=l(),Lf=a("li"),$oe=a("strong"),$Ve=o("bigbird_pegasus"),kVe=o(" \u2014 "),ik=a("a"),SVe=o("BigBirdPegasusConfig"),RVe=o(" (BigBirdPegasus model)"),PVe=l(),xf=a("li"),koe=a("strong"),BVe=o("blenderbot"),IVe=o(" \u2014 "),dk=a("a"),NVe=o("BlenderbotConfig"),qVe=o(" (Blenderbot model)"),jVe=l(),$f=a("li"),Soe=a("strong"),DVe=o("blenderbot-small"),GVe=o(" \u2014 "),ck=a("a"),OVe=o("BlenderbotSmallConfig"),VVe=o(" (BlenderbotSmall model)"),XVe=l(),kf=a("li"),Roe=a("strong"),zVe=o("camembert"),WVe=o(" \u2014 "),fk=a("a"),QVe=o("CamembertConfig"),HVe=o(" (CamemBERT model)"),UVe=l(),Sf=a("li"),Poe=a("strong"),JVe=o("canine"),YVe=o(" \u2014 "),mk=a("a"),KVe=o("CanineConfig"),ZVe=o(" (Canine model)"),eXe=l(),Rf=a("li"),Boe=a("strong"),oXe=o("clip"),rXe=o(" \u2014 "),gk=a("a"),tXe=o("CLIPConfig"),aXe=o(" (CLIP model)"),nXe=l(),Pf=a("li"),Ioe=a("strong"),sXe=o("convbert"),lXe=o(" \u2014 "),hk=a("a"),iXe=o("ConvBertConfig"),dXe=o(" (ConvBERT model)"),cXe=l(),Bf=a("li"),Noe=a("strong"),fXe=o("convnext"),mXe=o(" \u2014 "),pk=a("a"),gXe=o("ConvNextConfig"),hXe=o(" (ConvNext model)"),pXe=l(),If=a("li"),qoe=a("strong"),_Xe=o("ctrl"),uXe=o(" \u2014 "),_k=a("a"),bXe=o("CTRLConfig"),vXe=o(" (CTRL model)"),FXe=l(),Nf=a("li"),joe=a("strong"),TXe=o("cvt"),MXe=o(" \u2014 "),uk=a("a"),EXe=o("CvtConfig"),CXe=o(" (CvT model)"),wXe=l(),qf=a("li"),Doe=a("strong"),AXe=o("data2vec-audio"),yXe=o(" \u2014 "),bk=a("a"),LXe=o("Data2VecAudioConfig"),xXe=o(" (Data2VecAudio model)"),$Xe=l(),jf=a("li"),Goe=a("strong"),kXe=o("data2vec-text"),SXe=o(" \u2014 "),vk=a("a"),RXe=o("Data2VecTextConfig"),PXe=o(" (Data2VecText model)"),BXe=l(),Df=a("li"),Ooe=a("strong"),IXe=o("data2vec-vision"),NXe=o(" \u2014 "),Fk=a("a"),qXe=o("Data2VecVisionConfig"),jXe=o(" (Data2VecVision model)"),DXe=l(),Gf=a("li"),Voe=a("strong"),GXe=o("deberta"),OXe=o(" \u2014 "),Tk=a("a"),VXe=o("DebertaConfig"),XXe=o(" (DeBERTa model)"),zXe=l(),Of=a("li"),Xoe=a("strong"),WXe=o("deberta-v2"),QXe=o(" \u2014 "),Mk=a("a"),HXe=o("DebertaV2Config"),UXe=o(" (DeBERTa-v2 model)"),JXe=l(),Vf=a("li"),zoe=a("strong"),YXe=o("decision_transformer"),KXe=o(" \u2014 "),Ek=a("a"),ZXe=o("DecisionTransformerConfig"),eze=o(" (Decision Transformer model)"),oze=l(),Xf=a("li"),Woe=a("strong"),rze=o("deit"),tze=o(" \u2014 "),Ck=a("a"),aze=o("DeiTConfig"),nze=o(" (DeiT model)"),sze=l(),zf=a("li"),Qoe=a("strong"),lze=o("detr"),ize=o(" \u2014 "),wk=a("a"),dze=o("DetrConfig"),cze=o(" (DETR model)"),fze=l(),Wf=a("li"),Hoe=a("strong"),mze=o("distilbert"),gze=o(" \u2014 "),Ak=a("a"),hze=o("DistilBertConfig"),pze=o(" (DistilBERT model)"),_ze=l(),Qf=a("li"),Uoe=a("strong"),uze=o("dpr"),bze=o(" \u2014 "),yk=a("a"),vze=o("DPRConfig"),Fze=o(" (DPR model)"),Tze=l(),Hf=a("li"),Joe=a("strong"),Mze=o("dpt"),Eze=o(" \u2014 "),Lk=a("a"),Cze=o("DPTConfig"),wze=o(" (DPT model)"),Aze=l(),Uf=a("li"),Yoe=a("strong"),yze=o("electra"),Lze=o(" \u2014 "),xk=a("a"),xze=o("ElectraConfig"),$ze=o(" (ELECTRA model)"),kze=l(),Jf=a("li"),Koe=a("strong"),Sze=o("encoder-decoder"),Rze=o(" \u2014 "),$k=a("a"),Pze=o("EncoderDecoderConfig"),Bze=o(" (Encoder decoder model)"),Ize=l(),Yf=a("li"),Zoe=a("strong"),Nze=o("flaubert"),qze=o(" \u2014 "),kk=a("a"),jze=o("FlaubertConfig"),Dze=o(" (FlauBERT model)"),Gze=l(),Kf=a("li"),ere=a("strong"),Oze=o("flava"),Vze=o(" \u2014 "),Sk=a("a"),Xze=o("FlavaConfig"),zze=o(" (Flava model)"),Wze=l(),Zf=a("li"),ore=a("strong"),Qze=o("fnet"),Hze=o(" \u2014 "),Rk=a("a"),Uze=o("FNetConfig"),Jze=o(" (FNet model)"),Yze=l(),em=a("li"),rre=a("strong"),Kze=o("fsmt"),Zze=o(" \u2014 "),Pk=a("a"),eWe=o("FSMTConfig"),oWe=o(" (FairSeq Machine-Translation model)"),rWe=l(),om=a("li"),tre=a("strong"),tWe=o("funnel"),aWe=o(" \u2014 "),Bk=a("a"),nWe=o("FunnelConfig"),sWe=o(" (Funnel Transformer model)"),lWe=l(),rm=a("li"),are=a("strong"),iWe=o("glpn"),dWe=o(" \u2014 "),Ik=a("a"),cWe=o("GLPNConfig"),fWe=o(" (GLPN model)"),mWe=l(),tm=a("li"),nre=a("strong"),gWe=o("gpt2"),hWe=o(" \u2014 "),Nk=a("a"),pWe=o("GPT2Config"),_We=o(" (OpenAI GPT-2 model)"),uWe=l(),am=a("li"),sre=a("strong"),bWe=o("gpt_neo"),vWe=o(" \u2014 "),qk=a("a"),FWe=o("GPTNeoConfig"),TWe=o(" (GPT Neo model)"),MWe=l(),nm=a("li"),lre=a("strong"),EWe=o("gpt_neox"),CWe=o(" \u2014 "),jk=a("a"),wWe=o("GPTNeoXConfig"),AWe=o(" (GPT NeoX model)"),yWe=l(),sm=a("li"),ire=a("strong"),LWe=o("gptj"),xWe=o(" \u2014 "),Dk=a("a"),$We=o("GPTJConfig"),kWe=o(" (GPT-J model)"),SWe=l(),lm=a("li"),dre=a("strong"),RWe=o("hubert"),PWe=o(" \u2014 "),Gk=a("a"),BWe=o("HubertConfig"),IWe=o(" (Hubert model)"),NWe=l(),im=a("li"),cre=a("strong"),qWe=o("ibert"),jWe=o(" \u2014 "),Ok=a("a"),DWe=o("IBertConfig"),GWe=o(" (I-BERT model)"),OWe=l(),dm=a("li"),fre=a("strong"),VWe=o("imagegpt"),XWe=o(" \u2014 "),Vk=a("a"),zWe=o("ImageGPTConfig"),WWe=o(" (ImageGPT model)"),QWe=l(),cm=a("li"),mre=a("strong"),HWe=o("layoutlm"),UWe=o(" \u2014 "),Xk=a("a"),JWe=o("LayoutLMConfig"),YWe=o(" (LayoutLM model)"),KWe=l(),fm=a("li"),gre=a("strong"),ZWe=o("layoutlmv2"),eQe=o(" \u2014 "),zk=a("a"),oQe=o("LayoutLMv2Config"),rQe=o(" (LayoutLMv2 model)"),tQe=l(),mm=a("li"),hre=a("strong"),aQe=o("layoutlmv3"),nQe=o(" \u2014 "),Wk=a("a"),sQe=o("LayoutLMv3Config"),lQe=o(" (LayoutLMv3 model)"),iQe=l(),gm=a("li"),pre=a("strong"),dQe=o("led"),cQe=o(" \u2014 "),Qk=a("a"),fQe=o("LEDConfig"),mQe=o(" (LED model)"),gQe=l(),hm=a("li"),_re=a("strong"),hQe=o("longformer"),pQe=o(" \u2014 "),Hk=a("a"),_Qe=o("LongformerConfig"),uQe=o(" (Longformer model)"),bQe=l(),pm=a("li"),ure=a("strong"),vQe=o("luke"),FQe=o(" \u2014 "),Uk=a("a"),TQe=o("LukeConfig"),MQe=o(" (LUKE model)"),EQe=l(),_m=a("li"),bre=a("strong"),CQe=o("lxmert"),wQe=o(" \u2014 "),Jk=a("a"),AQe=o("LxmertConfig"),yQe=o(" (LXMERT model)"),LQe=l(),um=a("li"),vre=a("strong"),xQe=o("m2m_100"),$Qe=o(" \u2014 "),Yk=a("a"),kQe=o("M2M100Config"),SQe=o(" (M2M100 model)"),RQe=l(),bm=a("li"),Fre=a("strong"),PQe=o("marian"),BQe=o(" \u2014 "),Kk=a("a"),IQe=o("MarianConfig"),NQe=o(" (Marian model)"),qQe=l(),vm=a("li"),Tre=a("strong"),jQe=o("maskformer"),DQe=o(" \u2014 "),Zk=a("a"),GQe=o("MaskFormerConfig"),OQe=o(" (MaskFormer model)"),VQe=l(),Fm=a("li"),Mre=a("strong"),XQe=o("mbart"),zQe=o(" \u2014 "),eS=a("a"),WQe=o("MBartConfig"),QQe=o(" (mBART model)"),HQe=l(),Tm=a("li"),Ere=a("strong"),UQe=o("mctct"),JQe=o(" \u2014 "),oS=a("a"),YQe=o("MCTCTConfig"),KQe=o(" (MCTCT model)"),ZQe=l(),Mm=a("li"),Cre=a("strong"),eHe=o("megatron-bert"),oHe=o(" \u2014 "),rS=a("a"),rHe=o("MegatronBertConfig"),tHe=o(" (MegatronBert model)"),aHe=l(),Em=a("li"),wre=a("strong"),nHe=o("mobilebert"),sHe=o(" \u2014 "),tS=a("a"),lHe=o("MobileBertConfig"),iHe=o(" (MobileBERT model)"),dHe=l(),Cm=a("li"),Are=a("strong"),cHe=o("mpnet"),fHe=o(" \u2014 "),aS=a("a"),mHe=o("MPNetConfig"),gHe=o(" (MPNet model)"),hHe=l(),wm=a("li"),yre=a("strong"),pHe=o("mt5"),_He=o(" \u2014 "),nS=a("a"),uHe=o("MT5Config"),bHe=o(" (mT5 model)"),vHe=l(),Am=a("li"),Lre=a("strong"),FHe=o("nystromformer"),THe=o(" \u2014 "),sS=a("a"),MHe=o("NystromformerConfig"),EHe=o(" (Nystromformer model)"),CHe=l(),ym=a("li"),xre=a("strong"),wHe=o("openai-gpt"),AHe=o(" \u2014 "),lS=a("a"),yHe=o("OpenAIGPTConfig"),LHe=o(" (OpenAI GPT model)"),xHe=l(),Lm=a("li"),$re=a("strong"),$He=o("opt"),kHe=o(" \u2014 "),iS=a("a"),SHe=o("OPTConfig"),RHe=o(" (OPT model)"),PHe=l(),xm=a("li"),kre=a("strong"),BHe=o("pegasus"),IHe=o(" \u2014 "),dS=a("a"),NHe=o("PegasusConfig"),qHe=o(" (Pegasus model)"),jHe=l(),$m=a("li"),Sre=a("strong"),DHe=o("perceiver"),GHe=o(" \u2014 "),cS=a("a"),OHe=o("PerceiverConfig"),VHe=o(" (Perceiver model)"),XHe=l(),km=a("li"),Rre=a("strong"),zHe=o("plbart"),WHe=o(" \u2014 "),fS=a("a"),QHe=o("PLBartConfig"),HHe=o(" (PLBart model)"),UHe=l(),Sm=a("li"),Pre=a("strong"),JHe=o("poolformer"),YHe=o(" \u2014 "),mS=a("a"),KHe=o("PoolFormerConfig"),ZHe=o(" (PoolFormer model)"),eUe=l(),Rm=a("li"),Bre=a("strong"),oUe=o("prophetnet"),rUe=o(" \u2014 "),gS=a("a"),tUe=o("ProphetNetConfig"),aUe=o(" (ProphetNet model)"),nUe=l(),Pm=a("li"),Ire=a("strong"),sUe=o("qdqbert"),lUe=o(" \u2014 "),hS=a("a"),iUe=o("QDQBertConfig"),dUe=o(" (QDQBert model)"),cUe=l(),Bm=a("li"),Nre=a("strong"),fUe=o("rag"),mUe=o(" \u2014 "),pS=a("a"),gUe=o("RagConfig"),hUe=o(" (RAG model)"),pUe=l(),Im=a("li"),qre=a("strong"),_Ue=o("realm"),uUe=o(" \u2014 "),_S=a("a"),bUe=o("RealmConfig"),vUe=o(" (Realm model)"),FUe=l(),Nm=a("li"),jre=a("strong"),TUe=o("reformer"),MUe=o(" \u2014 "),uS=a("a"),EUe=o("ReformerConfig"),CUe=o(" (Reformer model)"),wUe=l(),qm=a("li"),Dre=a("strong"),AUe=o("regnet"),yUe=o(" \u2014 "),bS=a("a"),LUe=o("RegNetConfig"),xUe=o(" (RegNet model)"),$Ue=l(),jm=a("li"),Gre=a("strong"),kUe=o("rembert"),SUe=o(" \u2014 "),vS=a("a"),RUe=o("RemBertConfig"),PUe=o(" (RemBERT model)"),BUe=l(),Dm=a("li"),Ore=a("strong"),IUe=o("resnet"),NUe=o(" \u2014 "),FS=a("a"),qUe=o("ResNetConfig"),jUe=o(" (ResNet model)"),DUe=l(),Gm=a("li"),Vre=a("strong"),GUe=o("retribert"),OUe=o(" \u2014 "),TS=a("a"),VUe=o("RetriBertConfig"),XUe=o(" (RetriBERT model)"),zUe=l(),Om=a("li"),Xre=a("strong"),WUe=o("roberta"),QUe=o(" \u2014 "),MS=a("a"),HUe=o("RobertaConfig"),UUe=o(" (RoBERTa model)"),JUe=l(),Vm=a("li"),zre=a("strong"),YUe=o("roformer"),KUe=o(" \u2014 "),ES=a("a"),ZUe=o("RoFormerConfig"),eJe=o(" (RoFormer model)"),oJe=l(),Xm=a("li"),Wre=a("strong"),rJe=o("segformer"),tJe=o(" \u2014 "),CS=a("a"),aJe=o("SegformerConfig"),nJe=o(" (SegFormer model)"),sJe=l(),zm=a("li"),Qre=a("strong"),lJe=o("sew"),iJe=o(" \u2014 "),wS=a("a"),dJe=o("SEWConfig"),cJe=o(" (SEW model)"),fJe=l(),Wm=a("li"),Hre=a("strong"),mJe=o("sew-d"),gJe=o(" \u2014 "),AS=a("a"),hJe=o("SEWDConfig"),pJe=o(" (SEW-D model)"),_Je=l(),Qm=a("li"),Ure=a("strong"),uJe=o("speech-encoder-decoder"),bJe=o(" \u2014 "),yS=a("a"),vJe=o("SpeechEncoderDecoderConfig"),FJe=o(" (Speech Encoder decoder model)"),TJe=l(),Hm=a("li"),Jre=a("strong"),MJe=o("speech_to_text"),EJe=o(" \u2014 "),LS=a("a"),CJe=o("Speech2TextConfig"),wJe=o(" (Speech2Text model)"),AJe=l(),Um=a("li"),Yre=a("strong"),yJe=o("speech_to_text_2"),LJe=o(" \u2014 "),xS=a("a"),xJe=o("Speech2Text2Config"),$Je=o(" (Speech2Text2 model)"),kJe=l(),Jm=a("li"),Kre=a("strong"),SJe=o("splinter"),RJe=o(" \u2014 "),$S=a("a"),PJe=o("SplinterConfig"),BJe=o(" (Splinter model)"),IJe=l(),Ym=a("li"),Zre=a("strong"),NJe=o("squeezebert"),qJe=o(" \u2014 "),kS=a("a"),jJe=o("SqueezeBertConfig"),DJe=o(" (SqueezeBERT model)"),GJe=l(),Km=a("li"),ete=a("strong"),OJe=o("swin"),VJe=o(" \u2014 "),SS=a("a"),XJe=o("SwinConfig"),zJe=o(" (Swin model)"),WJe=l(),Zm=a("li"),ote=a("strong"),QJe=o("t5"),HJe=o(" \u2014 "),RS=a("a"),UJe=o("T5Config"),JJe=o(" (T5 model)"),YJe=l(),eg=a("li"),rte=a("strong"),KJe=o("tapas"),ZJe=o(" \u2014 "),PS=a("a"),eYe=o("TapasConfig"),oYe=o(" (TAPAS model)"),rYe=l(),og=a("li"),tte=a("strong"),tYe=o("trajectory_transformer"),aYe=o(" \u2014 "),BS=a("a"),nYe=o("TrajectoryTransformerConfig"),sYe=o(" (Trajectory Transformer model)"),lYe=l(),rg=a("li"),ate=a("strong"),iYe=o("transfo-xl"),dYe=o(" \u2014 "),IS=a("a"),cYe=o("TransfoXLConfig"),fYe=o(" (Transformer-XL model)"),mYe=l(),tg=a("li"),nte=a("strong"),gYe=o("trocr"),hYe=o(" \u2014 "),NS=a("a"),pYe=o("TrOCRConfig"),_Ye=o(" (TrOCR model)"),uYe=l(),ag=a("li"),ste=a("strong"),bYe=o("unispeech"),vYe=o(" \u2014 "),qS=a("a"),FYe=o("UniSpeechConfig"),TYe=o(" (UniSpeech model)"),MYe=l(),ng=a("li"),lte=a("strong"),EYe=o("unispeech-sat"),CYe=o(" \u2014 "),jS=a("a"),wYe=o("UniSpeechSatConfig"),AYe=o(" (UniSpeechSat model)"),yYe=l(),sg=a("li"),ite=a("strong"),LYe=o("van"),xYe=o(" \u2014 "),DS=a("a"),$Ye=o("VanConfig"),kYe=o(" (VAN model)"),SYe=l(),lg=a("li"),dte=a("strong"),RYe=o("vilt"),PYe=o(" \u2014 "),GS=a("a"),BYe=o("ViltConfig"),IYe=o(" (ViLT model)"),NYe=l(),ig=a("li"),cte=a("strong"),qYe=o("vision-encoder-decoder"),jYe=o(" \u2014 "),OS=a("a"),DYe=o("VisionEncoderDecoderConfig"),GYe=o(" (Vision Encoder decoder model)"),OYe=l(),dg=a("li"),fte=a("strong"),VYe=o("vision-text-dual-encoder"),XYe=o(" \u2014 "),VS=a("a"),zYe=o("VisionTextDualEncoderConfig"),WYe=o(" (VisionTextDualEncoder model)"),QYe=l(),cg=a("li"),mte=a("strong"),HYe=o("visual_bert"),UYe=o(" \u2014 "),XS=a("a"),JYe=o("VisualBertConfig"),YYe=o(" (VisualBert model)"),KYe=l(),fg=a("li"),gte=a("strong"),ZYe=o("vit"),eKe=o(" \u2014 "),zS=a("a"),oKe=o("ViTConfig"),rKe=o(" (ViT model)"),tKe=l(),mg=a("li"),hte=a("strong"),aKe=o("vit_mae"),nKe=o(" \u2014 "),WS=a("a"),sKe=o("ViTMAEConfig"),lKe=o(" (ViTMAE model)"),iKe=l(),gg=a("li"),pte=a("strong"),dKe=o("wav2vec2"),cKe=o(" \u2014 "),QS=a("a"),fKe=o("Wav2Vec2Config"),mKe=o(" (Wav2Vec2 model)"),gKe=l(),hg=a("li"),_te=a("strong"),hKe=o("wav2vec2-conformer"),pKe=o(" \u2014 "),HS=a("a"),_Ke=o("Wav2Vec2ConformerConfig"),uKe=o(" (Wav2Vec2-Conformer model)"),bKe=l(),pg=a("li"),ute=a("strong"),vKe=o("wavlm"),FKe=o(" \u2014 "),US=a("a"),TKe=o("WavLMConfig"),MKe=o(" (WavLM model)"),EKe=l(),_g=a("li"),bte=a("strong"),CKe=o("xglm"),wKe=o(" \u2014 "),JS=a("a"),AKe=o("XGLMConfig"),yKe=o(" (XGLM model)"),LKe=l(),ug=a("li"),vte=a("strong"),xKe=o("xlm"),$Ke=o(" \u2014 "),YS=a("a"),kKe=o("XLMConfig"),SKe=o(" (XLM model)"),RKe=l(),bg=a("li"),Fte=a("strong"),PKe=o("xlm-prophetnet"),BKe=o(" \u2014 "),KS=a("a"),IKe=o("XLMProphetNetConfig"),NKe=o(" (XLMProphetNet model)"),qKe=l(),vg=a("li"),Tte=a("strong"),jKe=o("xlm-roberta"),DKe=o(" \u2014 "),ZS=a("a"),GKe=o("XLMRobertaConfig"),OKe=o(" (XLM-RoBERTa model)"),VKe=l(),Fg=a("li"),Mte=a("strong"),XKe=o("xlm-roberta-xl"),zKe=o(" \u2014 "),eR=a("a"),WKe=o("XLMRobertaXLConfig"),QKe=o(" (XLM-RoBERTa-XL model)"),HKe=l(),Tg=a("li"),Ete=a("strong"),UKe=o("xlnet"),JKe=o(" \u2014 "),oR=a("a"),YKe=o("XLNetConfig"),KKe=o(" (XLNet model)"),ZKe=l(),Mg=a("li"),Cte=a("strong"),eZe=o("yolos"),oZe=o(" \u2014 "),rR=a("a"),rZe=o("YolosConfig"),tZe=o(" (YOLOS model)"),aZe=l(),Eg=a("li"),wte=a("strong"),nZe=o("yoso"),sZe=o(" \u2014 "),tR=a("a"),lZe=o("YosoConfig"),iZe=o(" (YOSO model)"),dZe=l(),F(Cg.$$.fragment),cZe=l(),wg=a("div"),F(qy.$$.fragment),fZe=l(),Ate=a("p"),mZe=o("Register a new configuration for this class."),Tqe=l(),Ti=a("h2"),Ag=a("a"),yte=a("span"),F(jy.$$.fragment),gZe=l(),Lte=a("span"),hZe=o("AutoTokenizer"),Mqe=l(),wo=a("div"),F(Dy.$$.fragment),pZe=l(),Gy=a("p"),_Ze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aR=a("a"),uZe=o("AutoTokenizer.from_pretrained()"),bZe=o(" class method."),vZe=l(),Oy=a("p"),FZe=o("This class cannot be instantiated directly using "),xte=a("code"),TZe=o("__init__()"),MZe=o(" (throws an error)."),EZe=l(),Cr=a("div"),F(Vy.$$.fragment),CZe=l(),$te=a("p"),wZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),AZe=l(),Aa=a("p"),yZe=o("The tokenizer class to instantiate is selected based on the "),kte=a("code"),LZe=o("model_type"),xZe=o(` property of the config object (either
passed as an argument or loaded from `),Ste=a("code"),$Ze=o("pretrained_model_name_or_path"),kZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rte=a("code"),SZe=o("pretrained_model_name_or_path"),RZe=o(":"),PZe=l(),k=a("ul"),Sn=a("li"),Pte=a("strong"),BZe=o("albert"),IZe=o(" \u2014 "),nR=a("a"),NZe=o("AlbertTokenizer"),qZe=o(" or "),sR=a("a"),jZe=o("AlbertTokenizerFast"),DZe=o(" (ALBERT model)"),GZe=l(),Rn=a("li"),Bte=a("strong"),OZe=o("bart"),VZe=o(" \u2014 "),lR=a("a"),XZe=o("BartTokenizer"),zZe=o(" or "),iR=a("a"),WZe=o("BartTokenizerFast"),QZe=o(" (BART model)"),HZe=l(),Pn=a("li"),Ite=a("strong"),UZe=o("barthez"),JZe=o(" \u2014 "),dR=a("a"),YZe=o("BarthezTokenizer"),KZe=o(" or "),cR=a("a"),ZZe=o("BarthezTokenizerFast"),eeo=o(" (BARThez model)"),oeo=l(),yg=a("li"),Nte=a("strong"),reo=o("bartpho"),teo=o(" \u2014 "),fR=a("a"),aeo=o("BartphoTokenizer"),neo=o(" (BARTpho model)"),seo=l(),Bn=a("li"),qte=a("strong"),leo=o("bert"),ieo=o(" \u2014 "),mR=a("a"),deo=o("BertTokenizer"),ceo=o(" or "),gR=a("a"),feo=o("BertTokenizerFast"),meo=o(" (BERT model)"),geo=l(),Lg=a("li"),jte=a("strong"),heo=o("bert-generation"),peo=o(" \u2014 "),hR=a("a"),_eo=o("BertGenerationTokenizer"),ueo=o(" (Bert Generation model)"),beo=l(),xg=a("li"),Dte=a("strong"),veo=o("bert-japanese"),Feo=o(" \u2014 "),pR=a("a"),Teo=o("BertJapaneseTokenizer"),Meo=o(" (BertJapanese model)"),Eeo=l(),$g=a("li"),Gte=a("strong"),Ceo=o("bertweet"),weo=o(" \u2014 "),_R=a("a"),Aeo=o("BertweetTokenizer"),yeo=o(" (Bertweet model)"),Leo=l(),In=a("li"),Ote=a("strong"),xeo=o("big_bird"),$eo=o(" \u2014 "),uR=a("a"),keo=o("BigBirdTokenizer"),Seo=o(" or "),bR=a("a"),Reo=o("BigBirdTokenizerFast"),Peo=o(" (BigBird model)"),Beo=l(),Nn=a("li"),Vte=a("strong"),Ieo=o("bigbird_pegasus"),Neo=o(" \u2014 "),vR=a("a"),qeo=o("PegasusTokenizer"),jeo=o(" or "),FR=a("a"),Deo=o("PegasusTokenizerFast"),Geo=o(" (BigBirdPegasus model)"),Oeo=l(),qn=a("li"),Xte=a("strong"),Veo=o("blenderbot"),Xeo=o(" \u2014 "),TR=a("a"),zeo=o("BlenderbotTokenizer"),Weo=o(" or "),MR=a("a"),Qeo=o("BlenderbotTokenizerFast"),Heo=o(" (Blenderbot model)"),Ueo=l(),kg=a("li"),zte=a("strong"),Jeo=o("blenderbot-small"),Yeo=o(" \u2014 "),ER=a("a"),Keo=o("BlenderbotSmallTokenizer"),Zeo=o(" (BlenderbotSmall model)"),eoo=l(),Sg=a("li"),Wte=a("strong"),ooo=o("byt5"),roo=o(" \u2014 "),CR=a("a"),too=o("ByT5Tokenizer"),aoo=o(" (ByT5 model)"),noo=l(),jn=a("li"),Qte=a("strong"),soo=o("camembert"),loo=o(" \u2014 "),wR=a("a"),ioo=o("CamembertTokenizer"),doo=o(" or "),AR=a("a"),coo=o("CamembertTokenizerFast"),foo=o(" (CamemBERT model)"),moo=l(),Rg=a("li"),Hte=a("strong"),goo=o("canine"),hoo=o(" \u2014 "),yR=a("a"),poo=o("CanineTokenizer"),_oo=o(" (Canine model)"),uoo=l(),Dn=a("li"),Ute=a("strong"),boo=o("clip"),voo=o(" \u2014 "),LR=a("a"),Foo=o("CLIPTokenizer"),Too=o(" or "),xR=a("a"),Moo=o("CLIPTokenizerFast"),Eoo=o(" (CLIP model)"),Coo=l(),Gn=a("li"),Jte=a("strong"),woo=o("convbert"),Aoo=o(" \u2014 "),$R=a("a"),yoo=o("ConvBertTokenizer"),Loo=o(" or "),kR=a("a"),xoo=o("ConvBertTokenizerFast"),$oo=o(" (ConvBERT model)"),koo=l(),On=a("li"),Yte=a("strong"),Soo=o("cpm"),Roo=o(" \u2014 "),SR=a("a"),Poo=o("CpmTokenizer"),Boo=o(" or "),RR=a("a"),Ioo=o("CpmTokenizerFast"),Noo=o(" (CPM model)"),qoo=l(),Pg=a("li"),Kte=a("strong"),joo=o("ctrl"),Doo=o(" \u2014 "),PR=a("a"),Goo=o("CTRLTokenizer"),Ooo=o(" (CTRL model)"),Voo=l(),Vn=a("li"),Zte=a("strong"),Xoo=o("data2vec-text"),zoo=o(" \u2014 "),BR=a("a"),Woo=o("RobertaTokenizer"),Qoo=o(" or "),IR=a("a"),Hoo=o("RobertaTokenizerFast"),Uoo=o(" (Data2VecText model)"),Joo=l(),Xn=a("li"),eae=a("strong"),Yoo=o("deberta"),Koo=o(" \u2014 "),NR=a("a"),Zoo=o("DebertaTokenizer"),ero=o(" or "),qR=a("a"),oro=o("DebertaTokenizerFast"),rro=o(" (DeBERTa model)"),tro=l(),zn=a("li"),oae=a("strong"),aro=o("deberta-v2"),nro=o(" \u2014 "),jR=a("a"),sro=o("DebertaV2Tokenizer"),lro=o(" or "),DR=a("a"),iro=o("DebertaV2TokenizerFast"),dro=o(" (DeBERTa-v2 model)"),cro=l(),Wn=a("li"),rae=a("strong"),fro=o("distilbert"),mro=o(" \u2014 "),GR=a("a"),gro=o("DistilBertTokenizer"),hro=o(" or "),OR=a("a"),pro=o("DistilBertTokenizerFast"),_ro=o(" (DistilBERT model)"),uro=l(),Qn=a("li"),tae=a("strong"),bro=o("dpr"),vro=o(" \u2014 "),VR=a("a"),Fro=o("DPRQuestionEncoderTokenizer"),Tro=o(" or "),XR=a("a"),Mro=o("DPRQuestionEncoderTokenizerFast"),Ero=o(" (DPR model)"),Cro=l(),Hn=a("li"),aae=a("strong"),wro=o("electra"),Aro=o(" \u2014 "),zR=a("a"),yro=o("ElectraTokenizer"),Lro=o(" or "),WR=a("a"),xro=o("ElectraTokenizerFast"),$ro=o(" (ELECTRA model)"),kro=l(),Bg=a("li"),nae=a("strong"),Sro=o("flaubert"),Rro=o(" \u2014 "),QR=a("a"),Pro=o("FlaubertTokenizer"),Bro=o(" (FlauBERT model)"),Iro=l(),Un=a("li"),sae=a("strong"),Nro=o("fnet"),qro=o(" \u2014 "),HR=a("a"),jro=o("FNetTokenizer"),Dro=o(" or "),UR=a("a"),Gro=o("FNetTokenizerFast"),Oro=o(" (FNet model)"),Vro=l(),Ig=a("li"),lae=a("strong"),Xro=o("fsmt"),zro=o(" \u2014 "),JR=a("a"),Wro=o("FSMTTokenizer"),Qro=o(" (FairSeq Machine-Translation model)"),Hro=l(),Jn=a("li"),iae=a("strong"),Uro=o("funnel"),Jro=o(" \u2014 "),YR=a("a"),Yro=o("FunnelTokenizer"),Kro=o(" or "),KR=a("a"),Zro=o("FunnelTokenizerFast"),eto=o(" (Funnel Transformer model)"),oto=l(),Yn=a("li"),dae=a("strong"),rto=o("gpt2"),tto=o(" \u2014 "),ZR=a("a"),ato=o("GPT2Tokenizer"),nto=o(" or "),eP=a("a"),sto=o("GPT2TokenizerFast"),lto=o(" (OpenAI GPT-2 model)"),ito=l(),Kn=a("li"),cae=a("strong"),dto=o("gpt_neo"),cto=o(" \u2014 "),oP=a("a"),fto=o("GPT2Tokenizer"),mto=o(" or "),rP=a("a"),gto=o("GPT2TokenizerFast"),hto=o(" (GPT Neo model)"),pto=l(),Ng=a("li"),fae=a("strong"),_to=o("gpt_neox"),uto=o(" \u2014 "),tP=a("a"),bto=o("GPTNeoXTokenizerFast"),vto=o(" (GPT NeoX model)"),Fto=l(),Zn=a("li"),mae=a("strong"),Tto=o("gptj"),Mto=o(" \u2014 "),aP=a("a"),Eto=o("GPT2Tokenizer"),Cto=o(" or "),nP=a("a"),wto=o("GPT2TokenizerFast"),Ato=o(" (GPT-J model)"),yto=l(),es=a("li"),gae=a("strong"),Lto=o("herbert"),xto=o(" \u2014 "),sP=a("a"),$to=o("HerbertTokenizer"),kto=o(" or "),lP=a("a"),Sto=o("HerbertTokenizerFast"),Rto=o(" (HerBERT model)"),Pto=l(),qg=a("li"),hae=a("strong"),Bto=o("hubert"),Ito=o(" \u2014 "),iP=a("a"),Nto=o("Wav2Vec2CTCTokenizer"),qto=o(" (Hubert model)"),jto=l(),os=a("li"),pae=a("strong"),Dto=o("ibert"),Gto=o(" \u2014 "),dP=a("a"),Oto=o("RobertaTokenizer"),Vto=o(" or "),cP=a("a"),Xto=o("RobertaTokenizerFast"),zto=o(" (I-BERT model)"),Wto=l(),rs=a("li"),_ae=a("strong"),Qto=o("layoutlm"),Hto=o(" \u2014 "),fP=a("a"),Uto=o("LayoutLMTokenizer"),Jto=o(" or "),mP=a("a"),Yto=o("LayoutLMTokenizerFast"),Kto=o(" (LayoutLM model)"),Zto=l(),ts=a("li"),uae=a("strong"),eao=o("layoutlmv2"),oao=o(" \u2014 "),gP=a("a"),rao=o("LayoutLMv2Tokenizer"),tao=o(" or "),hP=a("a"),aao=o("LayoutLMv2TokenizerFast"),nao=o(" (LayoutLMv2 model)"),sao=l(),as=a("li"),bae=a("strong"),lao=o("layoutlmv3"),iao=o(" \u2014 "),pP=a("a"),dao=o("LayoutLMv3Tokenizer"),cao=o(" or "),_P=a("a"),fao=o("LayoutLMv3TokenizerFast"),mao=o(" (LayoutLMv3 model)"),gao=l(),ns=a("li"),vae=a("strong"),hao=o("layoutxlm"),pao=o(" \u2014 "),uP=a("a"),_ao=o("LayoutXLMTokenizer"),uao=o(" or "),bP=a("a"),bao=o("LayoutXLMTokenizerFast"),vao=o(" (LayoutXLM model)"),Fao=l(),ss=a("li"),Fae=a("strong"),Tao=o("led"),Mao=o(" \u2014 "),vP=a("a"),Eao=o("LEDTokenizer"),Cao=o(" or "),FP=a("a"),wao=o("LEDTokenizerFast"),Aao=o(" (LED model)"),yao=l(),ls=a("li"),Tae=a("strong"),Lao=o("longformer"),xao=o(" \u2014 "),TP=a("a"),$ao=o("LongformerTokenizer"),kao=o(" or "),MP=a("a"),Sao=o("LongformerTokenizerFast"),Rao=o(" (Longformer model)"),Pao=l(),jg=a("li"),Mae=a("strong"),Bao=o("luke"),Iao=o(" \u2014 "),EP=a("a"),Nao=o("LukeTokenizer"),qao=o(" (LUKE model)"),jao=l(),is=a("li"),Eae=a("strong"),Dao=o("lxmert"),Gao=o(" \u2014 "),CP=a("a"),Oao=o("LxmertTokenizer"),Vao=o(" or "),wP=a("a"),Xao=o("LxmertTokenizerFast"),zao=o(" (LXMERT model)"),Wao=l(),Dg=a("li"),Cae=a("strong"),Qao=o("m2m_100"),Hao=o(" \u2014 "),AP=a("a"),Uao=o("M2M100Tokenizer"),Jao=o(" (M2M100 model)"),Yao=l(),Gg=a("li"),wae=a("strong"),Kao=o("marian"),Zao=o(" \u2014 "),yP=a("a"),eno=o("MarianTokenizer"),ono=o(" (Marian model)"),rno=l(),ds=a("li"),Aae=a("strong"),tno=o("mbart"),ano=o(" \u2014 "),LP=a("a"),nno=o("MBartTokenizer"),sno=o(" or "),xP=a("a"),lno=o("MBartTokenizerFast"),ino=o(" (mBART model)"),dno=l(),cs=a("li"),yae=a("strong"),cno=o("mbart50"),fno=o(" \u2014 "),$P=a("a"),mno=o("MBart50Tokenizer"),gno=o(" or "),kP=a("a"),hno=o("MBart50TokenizerFast"),pno=o(" (mBART-50 model)"),_no=l(),fs=a("li"),Lae=a("strong"),uno=o("megatron-bert"),bno=o(" \u2014 "),SP=a("a"),vno=o("BertTokenizer"),Fno=o(" or "),RP=a("a"),Tno=o("BertTokenizerFast"),Mno=o(" (MegatronBert model)"),Eno=l(),Og=a("li"),xae=a("strong"),Cno=o("mluke"),wno=o(" \u2014 "),PP=a("a"),Ano=o("MLukeTokenizer"),yno=o(" (mLUKE model)"),Lno=l(),ms=a("li"),$ae=a("strong"),xno=o("mobilebert"),$no=o(" \u2014 "),BP=a("a"),kno=o("MobileBertTokenizer"),Sno=o(" or "),IP=a("a"),Rno=o("MobileBertTokenizerFast"),Pno=o(" (MobileBERT model)"),Bno=l(),gs=a("li"),kae=a("strong"),Ino=o("mpnet"),Nno=o(" \u2014 "),NP=a("a"),qno=o("MPNetTokenizer"),jno=o(" or "),qP=a("a"),Dno=o("MPNetTokenizerFast"),Gno=o(" (MPNet model)"),Ono=l(),hs=a("li"),Sae=a("strong"),Vno=o("mt5"),Xno=o(" \u2014 "),jP=a("a"),zno=o("MT5Tokenizer"),Wno=o(" or "),DP=a("a"),Qno=o("MT5TokenizerFast"),Hno=o(" (mT5 model)"),Uno=l(),ps=a("li"),Rae=a("strong"),Jno=o("nystromformer"),Yno=o(" \u2014 "),GP=a("a"),Kno=o("AlbertTokenizer"),Zno=o(" or "),OP=a("a"),eso=o("AlbertTokenizerFast"),oso=o(" (Nystromformer model)"),rso=l(),_s=a("li"),Pae=a("strong"),tso=o("openai-gpt"),aso=o(" \u2014 "),VP=a("a"),nso=o("OpenAIGPTTokenizer"),sso=o(" or "),XP=a("a"),lso=o("OpenAIGPTTokenizerFast"),iso=o(" (OpenAI GPT model)"),dso=l(),Vg=a("li"),Bae=a("strong"),cso=o("opt"),fso=o(" \u2014 "),zP=a("a"),mso=o("GPT2Tokenizer"),gso=o(" (OPT model)"),hso=l(),us=a("li"),Iae=a("strong"),pso=o("pegasus"),_so=o(" \u2014 "),WP=a("a"),uso=o("PegasusTokenizer"),bso=o(" or "),QP=a("a"),vso=o("PegasusTokenizerFast"),Fso=o(" (Pegasus model)"),Tso=l(),Xg=a("li"),Nae=a("strong"),Mso=o("perceiver"),Eso=o(" \u2014 "),HP=a("a"),Cso=o("PerceiverTokenizer"),wso=o(" (Perceiver model)"),Aso=l(),zg=a("li"),qae=a("strong"),yso=o("phobert"),Lso=o(" \u2014 "),UP=a("a"),xso=o("PhobertTokenizer"),$so=o(" (PhoBERT model)"),kso=l(),Wg=a("li"),jae=a("strong"),Sso=o("plbart"),Rso=o(" \u2014 "),JP=a("a"),Pso=o("PLBartTokenizer"),Bso=o(" (PLBart model)"),Iso=l(),Qg=a("li"),Dae=a("strong"),Nso=o("prophetnet"),qso=o(" \u2014 "),YP=a("a"),jso=o("ProphetNetTokenizer"),Dso=o(" (ProphetNet model)"),Gso=l(),bs=a("li"),Gae=a("strong"),Oso=o("qdqbert"),Vso=o(" \u2014 "),KP=a("a"),Xso=o("BertTokenizer"),zso=o(" or "),ZP=a("a"),Wso=o("BertTokenizerFast"),Qso=o(" (QDQBert model)"),Hso=l(),Hg=a("li"),Oae=a("strong"),Uso=o("rag"),Jso=o(" \u2014 "),eB=a("a"),Yso=o("RagTokenizer"),Kso=o(" (RAG model)"),Zso=l(),vs=a("li"),Vae=a("strong"),elo=o("realm"),olo=o(" \u2014 "),oB=a("a"),rlo=o("RealmTokenizer"),tlo=o(" or "),rB=a("a"),alo=o("RealmTokenizerFast"),nlo=o(" (Realm model)"),slo=l(),Fs=a("li"),Xae=a("strong"),llo=o("reformer"),ilo=o(" \u2014 "),tB=a("a"),dlo=o("ReformerTokenizer"),clo=o(" or "),aB=a("a"),flo=o("ReformerTokenizerFast"),mlo=o(" (Reformer model)"),glo=l(),Ts=a("li"),zae=a("strong"),hlo=o("rembert"),plo=o(" \u2014 "),nB=a("a"),_lo=o("RemBertTokenizer"),ulo=o(" or "),sB=a("a"),blo=o("RemBertTokenizerFast"),vlo=o(" (RemBERT model)"),Flo=l(),Ms=a("li"),Wae=a("strong"),Tlo=o("retribert"),Mlo=o(" \u2014 "),lB=a("a"),Elo=o("RetriBertTokenizer"),Clo=o(" or "),iB=a("a"),wlo=o("RetriBertTokenizerFast"),Alo=o(" (RetriBERT model)"),ylo=l(),Es=a("li"),Qae=a("strong"),Llo=o("roberta"),xlo=o(" \u2014 "),dB=a("a"),$lo=o("RobertaTokenizer"),klo=o(" or "),cB=a("a"),Slo=o("RobertaTokenizerFast"),Rlo=o(" (RoBERTa model)"),Plo=l(),Cs=a("li"),Hae=a("strong"),Blo=o("roformer"),Ilo=o(" \u2014 "),fB=a("a"),Nlo=o("RoFormerTokenizer"),qlo=o(" or "),mB=a("a"),jlo=o("RoFormerTokenizerFast"),Dlo=o(" (RoFormer model)"),Glo=l(),Ug=a("li"),Uae=a("strong"),Olo=o("speech_to_text"),Vlo=o(" \u2014 "),gB=a("a"),Xlo=o("Speech2TextTokenizer"),zlo=o(" (Speech2Text model)"),Wlo=l(),Jg=a("li"),Jae=a("strong"),Qlo=o("speech_to_text_2"),Hlo=o(" \u2014 "),hB=a("a"),Ulo=o("Speech2Text2Tokenizer"),Jlo=o(" (Speech2Text2 model)"),Ylo=l(),ws=a("li"),Yae=a("strong"),Klo=o("splinter"),Zlo=o(" \u2014 "),pB=a("a"),eio=o("SplinterTokenizer"),oio=o(" or "),_B=a("a"),rio=o("SplinterTokenizerFast"),tio=o(" (Splinter model)"),aio=l(),As=a("li"),Kae=a("strong"),nio=o("squeezebert"),sio=o(" \u2014 "),uB=a("a"),lio=o("SqueezeBertTokenizer"),iio=o(" or "),bB=a("a"),dio=o("SqueezeBertTokenizerFast"),cio=o(" (SqueezeBERT model)"),fio=l(),ys=a("li"),Zae=a("strong"),mio=o("t5"),gio=o(" \u2014 "),vB=a("a"),hio=o("T5Tokenizer"),pio=o(" or "),FB=a("a"),_io=o("T5TokenizerFast"),uio=o(" (T5 model)"),bio=l(),Yg=a("li"),ene=a("strong"),vio=o("tapas"),Fio=o(" \u2014 "),TB=a("a"),Tio=o("TapasTokenizer"),Mio=o(" (TAPAS model)"),Eio=l(),Kg=a("li"),one=a("strong"),Cio=o("tapex"),wio=o(" \u2014 "),MB=a("a"),Aio=o("TapexTokenizer"),yio=o(" (TAPEX model)"),Lio=l(),Zg=a("li"),rne=a("strong"),xio=o("transfo-xl"),$io=o(" \u2014 "),EB=a("a"),kio=o("TransfoXLTokenizer"),Sio=o(" (Transformer-XL model)"),Rio=l(),Ls=a("li"),tne=a("strong"),Pio=o("visual_bert"),Bio=o(" \u2014 "),CB=a("a"),Iio=o("BertTokenizer"),Nio=o(" or "),wB=a("a"),qio=o("BertTokenizerFast"),jio=o(" (VisualBert model)"),Dio=l(),eh=a("li"),ane=a("strong"),Gio=o("wav2vec2"),Oio=o(" \u2014 "),AB=a("a"),Vio=o("Wav2Vec2CTCTokenizer"),Xio=o(" (Wav2Vec2 model)"),zio=l(),oh=a("li"),nne=a("strong"),Wio=o("wav2vec2-conformer"),Qio=o(" \u2014 "),yB=a("a"),Hio=o("Wav2Vec2CTCTokenizer"),Uio=o(" (Wav2Vec2-Conformer model)"),Jio=l(),rh=a("li"),sne=a("strong"),Yio=o("wav2vec2_phoneme"),Kio=o(" \u2014 "),LB=a("a"),Zio=o("Wav2Vec2PhonemeCTCTokenizer"),edo=o(" (Wav2Vec2Phoneme model)"),odo=l(),xs=a("li"),lne=a("strong"),rdo=o("xglm"),tdo=o(" \u2014 "),xB=a("a"),ado=o("XGLMTokenizer"),ndo=o(" or "),$B=a("a"),sdo=o("XGLMTokenizerFast"),ldo=o(" (XGLM model)"),ido=l(),th=a("li"),ine=a("strong"),ddo=o("xlm"),cdo=o(" \u2014 "),kB=a("a"),fdo=o("XLMTokenizer"),mdo=o(" (XLM model)"),gdo=l(),ah=a("li"),dne=a("strong"),hdo=o("xlm-prophetnet"),pdo=o(" \u2014 "),SB=a("a"),_do=o("XLMProphetNetTokenizer"),udo=o(" (XLMProphetNet model)"),bdo=l(),$s=a("li"),cne=a("strong"),vdo=o("xlm-roberta"),Fdo=o(" \u2014 "),RB=a("a"),Tdo=o("XLMRobertaTokenizer"),Mdo=o(" or "),PB=a("a"),Edo=o("XLMRobertaTokenizerFast"),Cdo=o(" (XLM-RoBERTa model)"),wdo=l(),ks=a("li"),fne=a("strong"),Ado=o("xlm-roberta-xl"),ydo=o(" \u2014 "),BB=a("a"),Ldo=o("RobertaTokenizer"),xdo=o(" or "),IB=a("a"),$do=o("RobertaTokenizerFast"),kdo=o(" (XLM-RoBERTa-XL model)"),Sdo=l(),Ss=a("li"),mne=a("strong"),Rdo=o("xlnet"),Pdo=o(" \u2014 "),NB=a("a"),Bdo=o("XLNetTokenizer"),Ido=o(" or "),qB=a("a"),Ndo=o("XLNetTokenizerFast"),qdo=o(" (XLNet model)"),jdo=l(),Rs=a("li"),gne=a("strong"),Ddo=o("yoso"),Gdo=o(" \u2014 "),jB=a("a"),Odo=o("AlbertTokenizer"),Vdo=o(" or "),DB=a("a"),Xdo=o("AlbertTokenizerFast"),zdo=o(" (YOSO model)"),Wdo=l(),F(nh.$$.fragment),Qdo=l(),sh=a("div"),F(Xy.$$.fragment),Hdo=l(),hne=a("p"),Udo=o("Register a new tokenizer in this mapping."),Eqe=l(),Mi=a("h2"),lh=a("a"),pne=a("span"),F(zy.$$.fragment),Jdo=l(),_ne=a("span"),Ydo=o("AutoFeatureExtractor"),Cqe=l(),Ao=a("div"),F(Wy.$$.fragment),Kdo=l(),Qy=a("p"),Zdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),GB=a("a"),eco=o("AutoFeatureExtractor.from_pretrained()"),oco=o(" class method."),rco=l(),Hy=a("p"),tco=o("This class cannot be instantiated directly using "),une=a("code"),aco=o("__init__()"),nco=o(" (throws an error)."),sco=l(),He=a("div"),F(Uy.$$.fragment),lco=l(),bne=a("p"),ico=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),dco=l(),ya=a("p"),cco=o("The feature extractor class to instantiate is selected based on the "),vne=a("code"),fco=o("model_type"),mco=o(` property of the config object
(either passed as an argument or loaded from `),Fne=a("code"),gco=o("pretrained_model_name_or_path"),hco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Tne=a("code"),pco=o("pretrained_model_name_or_path"),_co=o(":"),uco=l(),Y=a("ul"),ih=a("li"),Mne=a("strong"),bco=o("beit"),vco=o(" \u2014 "),OB=a("a"),Fco=o("BeitFeatureExtractor"),Tco=o(" (BEiT model)"),Mco=l(),dh=a("li"),Ene=a("strong"),Eco=o("clip"),Cco=o(" \u2014 "),VB=a("a"),wco=o("CLIPFeatureExtractor"),Aco=o(" (CLIP model)"),yco=l(),ch=a("li"),Cne=a("strong"),Lco=o("convnext"),xco=o(" \u2014 "),XB=a("a"),$co=o("ConvNextFeatureExtractor"),kco=o(" (ConvNext model)"),Sco=l(),fh=a("li"),wne=a("strong"),Rco=o("cvt"),Pco=o(" \u2014 "),zB=a("a"),Bco=o("ConvNextFeatureExtractor"),Ico=o(" (CvT model)"),Nco=l(),mh=a("li"),Ane=a("strong"),qco=o("data2vec-audio"),jco=o(" \u2014 "),WB=a("a"),Dco=o("Wav2Vec2FeatureExtractor"),Gco=o(" (Data2VecAudio model)"),Oco=l(),gh=a("li"),yne=a("strong"),Vco=o("data2vec-vision"),Xco=o(" \u2014 "),QB=a("a"),zco=o("BeitFeatureExtractor"),Wco=o(" (Data2VecVision model)"),Qco=l(),hh=a("li"),Lne=a("strong"),Hco=o("deit"),Uco=o(" \u2014 "),HB=a("a"),Jco=o("DeiTFeatureExtractor"),Yco=o(" (DeiT model)"),Kco=l(),ph=a("li"),xne=a("strong"),Zco=o("detr"),efo=o(" \u2014 "),UB=a("a"),ofo=o("DetrFeatureExtractor"),rfo=o(" (DETR model)"),tfo=l(),_h=a("li"),$ne=a("strong"),afo=o("dpt"),nfo=o(" \u2014 "),JB=a("a"),sfo=o("DPTFeatureExtractor"),lfo=o(" (DPT model)"),ifo=l(),uh=a("li"),kne=a("strong"),dfo=o("flava"),cfo=o(" \u2014 "),YB=a("a"),ffo=o("FlavaFeatureExtractor"),mfo=o(" (Flava model)"),gfo=l(),bh=a("li"),Sne=a("strong"),hfo=o("glpn"),pfo=o(" \u2014 "),KB=a("a"),_fo=o("GLPNFeatureExtractor"),ufo=o(" (GLPN model)"),bfo=l(),vh=a("li"),Rne=a("strong"),vfo=o("hubert"),Ffo=o(" \u2014 "),ZB=a("a"),Tfo=o("Wav2Vec2FeatureExtractor"),Mfo=o(" (Hubert model)"),Efo=l(),Fh=a("li"),Pne=a("strong"),Cfo=o("imagegpt"),wfo=o(" \u2014 "),eI=a("a"),Afo=o("ImageGPTFeatureExtractor"),yfo=o(" (ImageGPT model)"),Lfo=l(),Th=a("li"),Bne=a("strong"),xfo=o("layoutlmv2"),$fo=o(" \u2014 "),oI=a("a"),kfo=o("LayoutLMv2FeatureExtractor"),Sfo=o(" (LayoutLMv2 model)"),Rfo=l(),Mh=a("li"),Ine=a("strong"),Pfo=o("layoutlmv3"),Bfo=o(" \u2014 "),rI=a("a"),Ifo=o("LayoutLMv3FeatureExtractor"),Nfo=o(" (LayoutLMv3 model)"),qfo=l(),Eh=a("li"),Nne=a("strong"),jfo=o("maskformer"),Dfo=o(" \u2014 "),tI=a("a"),Gfo=o("MaskFormerFeatureExtractor"),Ofo=o(" (MaskFormer model)"),Vfo=l(),Ch=a("li"),qne=a("strong"),Xfo=o("mctct"),zfo=o(" \u2014 "),aI=a("a"),Wfo=o("MCTCTFeatureExtractor"),Qfo=o(" (MCTCT model)"),Hfo=l(),wh=a("li"),jne=a("strong"),Ufo=o("perceiver"),Jfo=o(" \u2014 "),nI=a("a"),Yfo=o("PerceiverFeatureExtractor"),Kfo=o(" (Perceiver model)"),Zfo=l(),Ah=a("li"),Dne=a("strong"),emo=o("poolformer"),omo=o(" \u2014 "),sI=a("a"),rmo=o("PoolFormerFeatureExtractor"),tmo=o(" (PoolFormer model)"),amo=l(),yh=a("li"),Gne=a("strong"),nmo=o("regnet"),smo=o(" \u2014 "),lI=a("a"),lmo=o("ConvNextFeatureExtractor"),imo=o(" (RegNet model)"),dmo=l(),Lh=a("li"),One=a("strong"),cmo=o("resnet"),fmo=o(" \u2014 "),iI=a("a"),mmo=o("ConvNextFeatureExtractor"),gmo=o(" (ResNet model)"),hmo=l(),xh=a("li"),Vne=a("strong"),pmo=o("segformer"),_mo=o(" \u2014 "),dI=a("a"),umo=o("SegformerFeatureExtractor"),bmo=o(" (SegFormer model)"),vmo=l(),$h=a("li"),Xne=a("strong"),Fmo=o("speech_to_text"),Tmo=o(" \u2014 "),cI=a("a"),Mmo=o("Speech2TextFeatureExtractor"),Emo=o(" (Speech2Text model)"),Cmo=l(),kh=a("li"),zne=a("strong"),wmo=o("swin"),Amo=o(" \u2014 "),fI=a("a"),ymo=o("ViTFeatureExtractor"),Lmo=o(" (Swin model)"),xmo=l(),Sh=a("li"),Wne=a("strong"),$mo=o("van"),kmo=o(" \u2014 "),mI=a("a"),Smo=o("ConvNextFeatureExtractor"),Rmo=o(" (VAN model)"),Pmo=l(),Rh=a("li"),Qne=a("strong"),Bmo=o("vit"),Imo=o(" \u2014 "),gI=a("a"),Nmo=o("ViTFeatureExtractor"),qmo=o(" (ViT model)"),jmo=l(),Ph=a("li"),Hne=a("strong"),Dmo=o("vit_mae"),Gmo=o(" \u2014 "),hI=a("a"),Omo=o("ViTFeatureExtractor"),Vmo=o(" (ViTMAE model)"),Xmo=l(),Bh=a("li"),Une=a("strong"),zmo=o("wav2vec2"),Wmo=o(" \u2014 "),pI=a("a"),Qmo=o("Wav2Vec2FeatureExtractor"),Hmo=o(" (Wav2Vec2 model)"),Umo=l(),Ih=a("li"),Jne=a("strong"),Jmo=o("wav2vec2-conformer"),Ymo=o(" \u2014 "),_I=a("a"),Kmo=o("Wav2Vec2FeatureExtractor"),Zmo=o(" (Wav2Vec2-Conformer model)"),ego=l(),Nh=a("li"),Yne=a("strong"),ogo=o("yolos"),rgo=o(" \u2014 "),uI=a("a"),tgo=o("YolosFeatureExtractor"),ago=o(" (YOLOS model)"),ngo=l(),F(qh.$$.fragment),sgo=l(),F(jh.$$.fragment),lgo=l(),Dh=a("div"),F(Jy.$$.fragment),igo=l(),Kne=a("p"),dgo=o("Register a new feature extractor for this class."),wqe=l(),Ei=a("h2"),Gh=a("a"),Zne=a("span"),F(Yy.$$.fragment),cgo=l(),ese=a("span"),fgo=o("AutoProcessor"),Aqe=l(),yo=a("div"),F(Ky.$$.fragment),mgo=l(),Zy=a("p"),ggo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),bI=a("a"),hgo=o("AutoProcessor.from_pretrained()"),pgo=o(" class method."),_go=l(),eL=a("p"),ugo=o("This class cannot be instantiated directly using "),ose=a("code"),bgo=o("__init__()"),vgo=o(" (throws an error)."),Fgo=l(),Ue=a("div"),F(oL.$$.fragment),Tgo=l(),rse=a("p"),Mgo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ego=l(),Ci=a("p"),Cgo=o("The processor class to instantiate is selected based on the "),tse=a("code"),wgo=o("model_type"),Ago=o(` property of the config object (either
passed as an argument or loaded from `),ase=a("code"),ygo=o("pretrained_model_name_or_path"),Lgo=o(" if possible):"),xgo=l(),he=a("ul"),Oh=a("li"),nse=a("strong"),$go=o("clip"),kgo=o(" \u2014 "),vI=a("a"),Sgo=o("CLIPProcessor"),Rgo=o(" (CLIP model)"),Pgo=l(),Vh=a("li"),sse=a("strong"),Bgo=o("flava"),Igo=o(" \u2014 "),lse=a("code"),Ngo=o("FLAVAProcessor"),qgo=o(" (Flava model)"),jgo=l(),Xh=a("li"),ise=a("strong"),Dgo=o("layoutlmv2"),Ggo=o(" \u2014 "),FI=a("a"),Ogo=o("LayoutLMv2Processor"),Vgo=o(" (LayoutLMv2 model)"),Xgo=l(),zh=a("li"),dse=a("strong"),zgo=o("layoutlmv3"),Wgo=o(" \u2014 "),TI=a("a"),Qgo=o("LayoutLMv3Processor"),Hgo=o(" (LayoutLMv3 model)"),Ugo=l(),Wh=a("li"),cse=a("strong"),Jgo=o("layoutxlm"),Ygo=o(" \u2014 "),MI=a("a"),Kgo=o("LayoutXLMProcessor"),Zgo=o(" (LayoutXLM model)"),eho=l(),Qh=a("li"),fse=a("strong"),oho=o("sew"),rho=o(" \u2014 "),EI=a("a"),tho=o("Wav2Vec2Processor"),aho=o(" (SEW model)"),nho=l(),Hh=a("li"),mse=a("strong"),sho=o("sew-d"),lho=o(" \u2014 "),CI=a("a"),iho=o("Wav2Vec2Processor"),dho=o(" (SEW-D model)"),cho=l(),Uh=a("li"),gse=a("strong"),fho=o("speech_to_text"),mho=o(" \u2014 "),wI=a("a"),gho=o("Speech2TextProcessor"),hho=o(" (Speech2Text model)"),pho=l(),Jh=a("li"),hse=a("strong"),_ho=o("speech_to_text_2"),uho=o(" \u2014 "),AI=a("a"),bho=o("Speech2Text2Processor"),vho=o(" (Speech2Text2 model)"),Fho=l(),Yh=a("li"),pse=a("strong"),Tho=o("trocr"),Mho=o(" \u2014 "),yI=a("a"),Eho=o("TrOCRProcessor"),Cho=o(" (TrOCR model)"),who=l(),Kh=a("li"),_se=a("strong"),Aho=o("unispeech"),yho=o(" \u2014 "),LI=a("a"),Lho=o("Wav2Vec2Processor"),xho=o(" (UniSpeech model)"),$ho=l(),Zh=a("li"),use=a("strong"),kho=o("unispeech-sat"),Sho=o(" \u2014 "),xI=a("a"),Rho=o("Wav2Vec2Processor"),Pho=o(" (UniSpeechSat model)"),Bho=l(),ep=a("li"),bse=a("strong"),Iho=o("vilt"),Nho=o(" \u2014 "),$I=a("a"),qho=o("ViltProcessor"),jho=o(" (ViLT model)"),Dho=l(),op=a("li"),vse=a("strong"),Gho=o("vision-text-dual-encoder"),Oho=o(" \u2014 "),kI=a("a"),Vho=o("VisionTextDualEncoderProcessor"),Xho=o(" (VisionTextDualEncoder model)"),zho=l(),rp=a("li"),Fse=a("strong"),Who=o("wav2vec2"),Qho=o(" \u2014 "),SI=a("a"),Hho=o("Wav2Vec2Processor"),Uho=o(" (Wav2Vec2 model)"),Jho=l(),tp=a("li"),Tse=a("strong"),Yho=o("wav2vec2-conformer"),Kho=o(" \u2014 "),RI=a("a"),Zho=o("Wav2Vec2Processor"),epo=o(" (Wav2Vec2-Conformer model)"),opo=l(),ap=a("li"),Mse=a("strong"),rpo=o("wavlm"),tpo=o(" \u2014 "),PI=a("a"),apo=o("Wav2Vec2Processor"),npo=o(" (WavLM model)"),spo=l(),F(np.$$.fragment),lpo=l(),F(sp.$$.fragment),ipo=l(),lp=a("div"),F(rL.$$.fragment),dpo=l(),Ese=a("p"),cpo=o("Register a new processor for this class."),yqe=l(),wi=a("h2"),ip=a("a"),Cse=a("span"),F(tL.$$.fragment),fpo=l(),wse=a("span"),mpo=o("AutoModel"),Lqe=l(),Lo=a("div"),F(aL.$$.fragment),gpo=l(),Ai=a("p"),hpo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BI=a("a"),ppo=o("from_pretrained()"),_po=o(" class method or the "),II=a("a"),upo=o("from_config()"),bpo=o(` class
method.`),vpo=l(),nL=a("p"),Fpo=o("This class cannot be instantiated directly using "),Ase=a("code"),Tpo=o("__init__()"),Mpo=o(" (throws an error)."),Epo=l(),tt=a("div"),F(sL.$$.fragment),Cpo=l(),yse=a("p"),wpo=o("Instantiates one of the base model classes of the library from a configuration."),Apo=l(),yi=a("p"),ypo=o(`Note:
Loading a model from its configuration file does `),Lse=a("strong"),Lpo=o("not"),xpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NI=a("a"),$po=o("from_pretrained()"),kpo=o(" to load the model weights."),Spo=l(),F(dp.$$.fragment),Rpo=l(),Je=a("div"),F(lL.$$.fragment),Ppo=l(),xse=a("p"),Bpo=o("Instantiate one of the base model classes of the library from a pretrained model."),Ipo=l(),La=a("p"),Npo=o("The model class to instantiate is selected based on the "),$se=a("code"),qpo=o("model_type"),jpo=o(` property of the config object (either
passed as an argument or loaded from `),kse=a("code"),Dpo=o("pretrained_model_name_or_path"),Gpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=a("code"),Opo=o("pretrained_model_name_or_path"),Vpo=o(":"),Xpo=l(),x=a("ul"),cp=a("li"),Rse=a("strong"),zpo=o("albert"),Wpo=o(" \u2014 "),qI=a("a"),Qpo=o("AlbertModel"),Hpo=o(" (ALBERT model)"),Upo=l(),fp=a("li"),Pse=a("strong"),Jpo=o("bart"),Ypo=o(" \u2014 "),jI=a("a"),Kpo=o("BartModel"),Zpo=o(" (BART model)"),e_o=l(),mp=a("li"),Bse=a("strong"),o_o=o("beit"),r_o=o(" \u2014 "),DI=a("a"),t_o=o("BeitModel"),a_o=o(" (BEiT model)"),n_o=l(),gp=a("li"),Ise=a("strong"),s_o=o("bert"),l_o=o(" \u2014 "),GI=a("a"),i_o=o("BertModel"),d_o=o(" (BERT model)"),c_o=l(),hp=a("li"),Nse=a("strong"),f_o=o("bert-generation"),m_o=o(" \u2014 "),OI=a("a"),g_o=o("BertGenerationEncoder"),h_o=o(" (Bert Generation model)"),p_o=l(),pp=a("li"),qse=a("strong"),__o=o("big_bird"),u_o=o(" \u2014 "),VI=a("a"),b_o=o("BigBirdModel"),v_o=o(" (BigBird model)"),F_o=l(),_p=a("li"),jse=a("strong"),T_o=o("bigbird_pegasus"),M_o=o(" \u2014 "),XI=a("a"),E_o=o("BigBirdPegasusModel"),C_o=o(" (BigBirdPegasus model)"),w_o=l(),up=a("li"),Dse=a("strong"),A_o=o("blenderbot"),y_o=o(" \u2014 "),zI=a("a"),L_o=o("BlenderbotModel"),x_o=o(" (Blenderbot model)"),$_o=l(),bp=a("li"),Gse=a("strong"),k_o=o("blenderbot-small"),S_o=o(" \u2014 "),WI=a("a"),R_o=o("BlenderbotSmallModel"),P_o=o(" (BlenderbotSmall model)"),B_o=l(),vp=a("li"),Ose=a("strong"),I_o=o("camembert"),N_o=o(" \u2014 "),QI=a("a"),q_o=o("CamembertModel"),j_o=o(" (CamemBERT model)"),D_o=l(),Fp=a("li"),Vse=a("strong"),G_o=o("canine"),O_o=o(" \u2014 "),HI=a("a"),V_o=o("CanineModel"),X_o=o(" (Canine model)"),z_o=l(),Tp=a("li"),Xse=a("strong"),W_o=o("clip"),Q_o=o(" \u2014 "),UI=a("a"),H_o=o("CLIPModel"),U_o=o(" (CLIP model)"),J_o=l(),Mp=a("li"),zse=a("strong"),Y_o=o("convbert"),K_o=o(" \u2014 "),JI=a("a"),Z_o=o("ConvBertModel"),euo=o(" (ConvBERT model)"),ouo=l(),Ep=a("li"),Wse=a("strong"),ruo=o("convnext"),tuo=o(" \u2014 "),YI=a("a"),auo=o("ConvNextModel"),nuo=o(" (ConvNext model)"),suo=l(),Cp=a("li"),Qse=a("strong"),luo=o("ctrl"),iuo=o(" \u2014 "),KI=a("a"),duo=o("CTRLModel"),cuo=o(" (CTRL model)"),fuo=l(),wp=a("li"),Hse=a("strong"),muo=o("cvt"),guo=o(" \u2014 "),ZI=a("a"),huo=o("CvtModel"),puo=o(" (CvT model)"),_uo=l(),Ap=a("li"),Use=a("strong"),uuo=o("data2vec-audio"),buo=o(" \u2014 "),eN=a("a"),vuo=o("Data2VecAudioModel"),Fuo=o(" (Data2VecAudio model)"),Tuo=l(),yp=a("li"),Jse=a("strong"),Muo=o("data2vec-text"),Euo=o(" \u2014 "),oN=a("a"),Cuo=o("Data2VecTextModel"),wuo=o(" (Data2VecText model)"),Auo=l(),Lp=a("li"),Yse=a("strong"),yuo=o("data2vec-vision"),Luo=o(" \u2014 "),rN=a("a"),xuo=o("Data2VecVisionModel"),$uo=o(" (Data2VecVision model)"),kuo=l(),xp=a("li"),Kse=a("strong"),Suo=o("deberta"),Ruo=o(" \u2014 "),tN=a("a"),Puo=o("DebertaModel"),Buo=o(" (DeBERTa model)"),Iuo=l(),$p=a("li"),Zse=a("strong"),Nuo=o("deberta-v2"),quo=o(" \u2014 "),aN=a("a"),juo=o("DebertaV2Model"),Duo=o(" (DeBERTa-v2 model)"),Guo=l(),kp=a("li"),ele=a("strong"),Ouo=o("decision_transformer"),Vuo=o(" \u2014 "),nN=a("a"),Xuo=o("DecisionTransformerModel"),zuo=o(" (Decision Transformer model)"),Wuo=l(),Sp=a("li"),ole=a("strong"),Quo=o("deit"),Huo=o(" \u2014 "),sN=a("a"),Uuo=o("DeiTModel"),Juo=o(" (DeiT model)"),Yuo=l(),Rp=a("li"),rle=a("strong"),Kuo=o("detr"),Zuo=o(" \u2014 "),lN=a("a"),e2o=o("DetrModel"),o2o=o(" (DETR model)"),r2o=l(),Pp=a("li"),tle=a("strong"),t2o=o("distilbert"),a2o=o(" \u2014 "),iN=a("a"),n2o=o("DistilBertModel"),s2o=o(" (DistilBERT model)"),l2o=l(),Bp=a("li"),ale=a("strong"),i2o=o("dpr"),d2o=o(" \u2014 "),dN=a("a"),c2o=o("DPRQuestionEncoder"),f2o=o(" (DPR model)"),m2o=l(),Ip=a("li"),nle=a("strong"),g2o=o("dpt"),h2o=o(" \u2014 "),cN=a("a"),p2o=o("DPTModel"),_2o=o(" (DPT model)"),u2o=l(),Np=a("li"),sle=a("strong"),b2o=o("electra"),v2o=o(" \u2014 "),fN=a("a"),F2o=o("ElectraModel"),T2o=o(" (ELECTRA model)"),M2o=l(),qp=a("li"),lle=a("strong"),E2o=o("flaubert"),C2o=o(" \u2014 "),mN=a("a"),w2o=o("FlaubertModel"),A2o=o(" (FlauBERT model)"),y2o=l(),jp=a("li"),ile=a("strong"),L2o=o("flava"),x2o=o(" \u2014 "),gN=a("a"),$2o=o("FlavaModel"),k2o=o(" (Flava model)"),S2o=l(),Dp=a("li"),dle=a("strong"),R2o=o("fnet"),P2o=o(" \u2014 "),hN=a("a"),B2o=o("FNetModel"),I2o=o(" (FNet model)"),N2o=l(),Gp=a("li"),cle=a("strong"),q2o=o("fsmt"),j2o=o(" \u2014 "),pN=a("a"),D2o=o("FSMTModel"),G2o=o(" (FairSeq Machine-Translation model)"),O2o=l(),Ps=a("li"),fle=a("strong"),V2o=o("funnel"),X2o=o(" \u2014 "),_N=a("a"),z2o=o("FunnelModel"),W2o=o(" or "),uN=a("a"),Q2o=o("FunnelBaseModel"),H2o=o(" (Funnel Transformer model)"),U2o=l(),Op=a("li"),mle=a("strong"),J2o=o("glpn"),Y2o=o(" \u2014 "),bN=a("a"),K2o=o("GLPNModel"),Z2o=o(" (GLPN model)"),e1o=l(),Vp=a("li"),gle=a("strong"),o1o=o("gpt2"),r1o=o(" \u2014 "),vN=a("a"),t1o=o("GPT2Model"),a1o=o(" (OpenAI GPT-2 model)"),n1o=l(),Xp=a("li"),hle=a("strong"),s1o=o("gpt_neo"),l1o=o(" \u2014 "),FN=a("a"),i1o=o("GPTNeoModel"),d1o=o(" (GPT Neo model)"),c1o=l(),zp=a("li"),ple=a("strong"),f1o=o("gpt_neox"),m1o=o(" \u2014 "),TN=a("a"),g1o=o("GPTNeoXModel"),h1o=o(" (GPT NeoX model)"),p1o=l(),Wp=a("li"),_le=a("strong"),_1o=o("gptj"),u1o=o(" \u2014 "),MN=a("a"),b1o=o("GPTJModel"),v1o=o(" (GPT-J model)"),F1o=l(),Qp=a("li"),ule=a("strong"),T1o=o("hubert"),M1o=o(" \u2014 "),EN=a("a"),E1o=o("HubertModel"),C1o=o(" (Hubert model)"),w1o=l(),Hp=a("li"),ble=a("strong"),A1o=o("ibert"),y1o=o(" \u2014 "),CN=a("a"),L1o=o("IBertModel"),x1o=o(" (I-BERT model)"),$1o=l(),Up=a("li"),vle=a("strong"),k1o=o("imagegpt"),S1o=o(" \u2014 "),wN=a("a"),R1o=o("ImageGPTModel"),P1o=o(" (ImageGPT model)"),B1o=l(),Jp=a("li"),Fle=a("strong"),I1o=o("layoutlm"),N1o=o(" \u2014 "),AN=a("a"),q1o=o("LayoutLMModel"),j1o=o(" (LayoutLM model)"),D1o=l(),Yp=a("li"),Tle=a("strong"),G1o=o("layoutlmv2"),O1o=o(" \u2014 "),yN=a("a"),V1o=o("LayoutLMv2Model"),X1o=o(" (LayoutLMv2 model)"),z1o=l(),Kp=a("li"),Mle=a("strong"),W1o=o("layoutlmv3"),Q1o=o(" \u2014 "),LN=a("a"),H1o=o("LayoutLMv3Model"),U1o=o(" (LayoutLMv3 model)"),J1o=l(),Zp=a("li"),Ele=a("strong"),Y1o=o("led"),K1o=o(" \u2014 "),xN=a("a"),Z1o=o("LEDModel"),ebo=o(" (LED model)"),obo=l(),e_=a("li"),Cle=a("strong"),rbo=o("longformer"),tbo=o(" \u2014 "),$N=a("a"),abo=o("LongformerModel"),nbo=o(" (Longformer model)"),sbo=l(),o_=a("li"),wle=a("strong"),lbo=o("luke"),ibo=o(" \u2014 "),kN=a("a"),dbo=o("LukeModel"),cbo=o(" (LUKE model)"),fbo=l(),r_=a("li"),Ale=a("strong"),mbo=o("lxmert"),gbo=o(" \u2014 "),SN=a("a"),hbo=o("LxmertModel"),pbo=o(" (LXMERT model)"),_bo=l(),t_=a("li"),yle=a("strong"),ubo=o("m2m_100"),bbo=o(" \u2014 "),RN=a("a"),vbo=o("M2M100Model"),Fbo=o(" (M2M100 model)"),Tbo=l(),a_=a("li"),Lle=a("strong"),Mbo=o("marian"),Ebo=o(" \u2014 "),PN=a("a"),Cbo=o("MarianModel"),wbo=o(" (Marian model)"),Abo=l(),n_=a("li"),xle=a("strong"),ybo=o("maskformer"),Lbo=o(" \u2014 "),BN=a("a"),xbo=o("MaskFormerModel"),$bo=o(" (MaskFormer model)"),kbo=l(),s_=a("li"),$le=a("strong"),Sbo=o("mbart"),Rbo=o(" \u2014 "),IN=a("a"),Pbo=o("MBartModel"),Bbo=o(" (mBART model)"),Ibo=l(),l_=a("li"),kle=a("strong"),Nbo=o("mctct"),qbo=o(" \u2014 "),NN=a("a"),jbo=o("MCTCTModel"),Dbo=o(" (MCTCT model)"),Gbo=l(),i_=a("li"),Sle=a("strong"),Obo=o("megatron-bert"),Vbo=o(" \u2014 "),qN=a("a"),Xbo=o("MegatronBertModel"),zbo=o(" (MegatronBert model)"),Wbo=l(),d_=a("li"),Rle=a("strong"),Qbo=o("mobilebert"),Hbo=o(" \u2014 "),jN=a("a"),Ubo=o("MobileBertModel"),Jbo=o(" (MobileBERT model)"),Ybo=l(),c_=a("li"),Ple=a("strong"),Kbo=o("mpnet"),Zbo=o(" \u2014 "),DN=a("a"),e4o=o("MPNetModel"),o4o=o(" (MPNet model)"),r4o=l(),f_=a("li"),Ble=a("strong"),t4o=o("mt5"),a4o=o(" \u2014 "),GN=a("a"),n4o=o("MT5Model"),s4o=o(" (mT5 model)"),l4o=l(),m_=a("li"),Ile=a("strong"),i4o=o("nystromformer"),d4o=o(" \u2014 "),ON=a("a"),c4o=o("NystromformerModel"),f4o=o(" (Nystromformer model)"),m4o=l(),g_=a("li"),Nle=a("strong"),g4o=o("openai-gpt"),h4o=o(" \u2014 "),VN=a("a"),p4o=o("OpenAIGPTModel"),_4o=o(" (OpenAI GPT model)"),u4o=l(),h_=a("li"),qle=a("strong"),b4o=o("opt"),v4o=o(" \u2014 "),XN=a("a"),F4o=o("OPTModel"),T4o=o(" (OPT model)"),M4o=l(),p_=a("li"),jle=a("strong"),E4o=o("pegasus"),C4o=o(" \u2014 "),zN=a("a"),w4o=o("PegasusModel"),A4o=o(" (Pegasus model)"),y4o=l(),__=a("li"),Dle=a("strong"),L4o=o("perceiver"),x4o=o(" \u2014 "),WN=a("a"),$4o=o("PerceiverModel"),k4o=o(" (Perceiver model)"),S4o=l(),u_=a("li"),Gle=a("strong"),R4o=o("plbart"),P4o=o(" \u2014 "),QN=a("a"),B4o=o("PLBartModel"),I4o=o(" (PLBart model)"),N4o=l(),b_=a("li"),Ole=a("strong"),q4o=o("poolformer"),j4o=o(" \u2014 "),HN=a("a"),D4o=o("PoolFormerModel"),G4o=o(" (PoolFormer model)"),O4o=l(),v_=a("li"),Vle=a("strong"),V4o=o("prophetnet"),X4o=o(" \u2014 "),UN=a("a"),z4o=o("ProphetNetModel"),W4o=o(" (ProphetNet model)"),Q4o=l(),F_=a("li"),Xle=a("strong"),H4o=o("qdqbert"),U4o=o(" \u2014 "),JN=a("a"),J4o=o("QDQBertModel"),Y4o=o(" (QDQBert model)"),K4o=l(),T_=a("li"),zle=a("strong"),Z4o=o("reformer"),evo=o(" \u2014 "),YN=a("a"),ovo=o("ReformerModel"),rvo=o(" (Reformer model)"),tvo=l(),M_=a("li"),Wle=a("strong"),avo=o("regnet"),nvo=o(" \u2014 "),KN=a("a"),svo=o("RegNetModel"),lvo=o(" (RegNet model)"),ivo=l(),E_=a("li"),Qle=a("strong"),dvo=o("rembert"),cvo=o(" \u2014 "),ZN=a("a"),fvo=o("RemBertModel"),mvo=o(" (RemBERT model)"),gvo=l(),C_=a("li"),Hle=a("strong"),hvo=o("resnet"),pvo=o(" \u2014 "),eq=a("a"),_vo=o("ResNetModel"),uvo=o(" (ResNet model)"),bvo=l(),w_=a("li"),Ule=a("strong"),vvo=o("retribert"),Fvo=o(" \u2014 "),oq=a("a"),Tvo=o("RetriBertModel"),Mvo=o(" (RetriBERT model)"),Evo=l(),A_=a("li"),Jle=a("strong"),Cvo=o("roberta"),wvo=o(" \u2014 "),rq=a("a"),Avo=o("RobertaModel"),yvo=o(" (RoBERTa model)"),Lvo=l(),y_=a("li"),Yle=a("strong"),xvo=o("roformer"),$vo=o(" \u2014 "),tq=a("a"),kvo=o("RoFormerModel"),Svo=o(" (RoFormer model)"),Rvo=l(),L_=a("li"),Kle=a("strong"),Pvo=o("segformer"),Bvo=o(" \u2014 "),aq=a("a"),Ivo=o("SegformerModel"),Nvo=o(" (SegFormer model)"),qvo=l(),x_=a("li"),Zle=a("strong"),jvo=o("sew"),Dvo=o(" \u2014 "),nq=a("a"),Gvo=o("SEWModel"),Ovo=o(" (SEW model)"),Vvo=l(),$_=a("li"),eie=a("strong"),Xvo=o("sew-d"),zvo=o(" \u2014 "),sq=a("a"),Wvo=o("SEWDModel"),Qvo=o(" (SEW-D model)"),Hvo=l(),k_=a("li"),oie=a("strong"),Uvo=o("speech_to_text"),Jvo=o(" \u2014 "),lq=a("a"),Yvo=o("Speech2TextModel"),Kvo=o(" (Speech2Text model)"),Zvo=l(),S_=a("li"),rie=a("strong"),e0o=o("splinter"),o0o=o(" \u2014 "),iq=a("a"),r0o=o("SplinterModel"),t0o=o(" (Splinter model)"),a0o=l(),R_=a("li"),tie=a("strong"),n0o=o("squeezebert"),s0o=o(" \u2014 "),dq=a("a"),l0o=o("SqueezeBertModel"),i0o=o(" (SqueezeBERT model)"),d0o=l(),P_=a("li"),aie=a("strong"),c0o=o("swin"),f0o=o(" \u2014 "),cq=a("a"),m0o=o("SwinModel"),g0o=o(" (Swin model)"),h0o=l(),B_=a("li"),nie=a("strong"),p0o=o("t5"),_0o=o(" \u2014 "),fq=a("a"),u0o=o("T5Model"),b0o=o(" (T5 model)"),v0o=l(),I_=a("li"),sie=a("strong"),F0o=o("tapas"),T0o=o(" \u2014 "),mq=a("a"),M0o=o("TapasModel"),E0o=o(" (TAPAS model)"),C0o=l(),N_=a("li"),lie=a("strong"),w0o=o("trajectory_transformer"),A0o=o(" \u2014 "),gq=a("a"),y0o=o("TrajectoryTransformerModel"),L0o=o(" (Trajectory Transformer model)"),x0o=l(),q_=a("li"),iie=a("strong"),$0o=o("transfo-xl"),k0o=o(" \u2014 "),hq=a("a"),S0o=o("TransfoXLModel"),R0o=o(" (Transformer-XL model)"),P0o=l(),j_=a("li"),die=a("strong"),B0o=o("unispeech"),I0o=o(" \u2014 "),pq=a("a"),N0o=o("UniSpeechModel"),q0o=o(" (UniSpeech model)"),j0o=l(),D_=a("li"),cie=a("strong"),D0o=o("unispeech-sat"),G0o=o(" \u2014 "),_q=a("a"),O0o=o("UniSpeechSatModel"),V0o=o(" (UniSpeechSat model)"),X0o=l(),G_=a("li"),fie=a("strong"),z0o=o("van"),W0o=o(" \u2014 "),uq=a("a"),Q0o=o("VanModel"),H0o=o(" (VAN model)"),U0o=l(),O_=a("li"),mie=a("strong"),J0o=o("vilt"),Y0o=o(" \u2014 "),bq=a("a"),K0o=o("ViltModel"),Z0o=o(" (ViLT model)"),eFo=l(),V_=a("li"),gie=a("strong"),oFo=o("vision-text-dual-encoder"),rFo=o(" \u2014 "),vq=a("a"),tFo=o("VisionTextDualEncoderModel"),aFo=o(" (VisionTextDualEncoder model)"),nFo=l(),X_=a("li"),hie=a("strong"),sFo=o("visual_bert"),lFo=o(" \u2014 "),Fq=a("a"),iFo=o("VisualBertModel"),dFo=o(" (VisualBert model)"),cFo=l(),z_=a("li"),pie=a("strong"),fFo=o("vit"),mFo=o(" \u2014 "),Tq=a("a"),gFo=o("ViTModel"),hFo=o(" (ViT model)"),pFo=l(),W_=a("li"),_ie=a("strong"),_Fo=o("vit_mae"),uFo=o(" \u2014 "),Mq=a("a"),bFo=o("ViTMAEModel"),vFo=o(" (ViTMAE model)"),FFo=l(),Q_=a("li"),uie=a("strong"),TFo=o("wav2vec2"),MFo=o(" \u2014 "),Eq=a("a"),EFo=o("Wav2Vec2Model"),CFo=o(" (Wav2Vec2 model)"),wFo=l(),H_=a("li"),bie=a("strong"),AFo=o("wav2vec2-conformer"),yFo=o(" \u2014 "),Cq=a("a"),LFo=o("Wav2Vec2ConformerModel"),xFo=o(" (Wav2Vec2-Conformer model)"),$Fo=l(),U_=a("li"),vie=a("strong"),kFo=o("wavlm"),SFo=o(" \u2014 "),wq=a("a"),RFo=o("WavLMModel"),PFo=o(" (WavLM model)"),BFo=l(),J_=a("li"),Fie=a("strong"),IFo=o("xglm"),NFo=o(" \u2014 "),Aq=a("a"),qFo=o("XGLMModel"),jFo=o(" (XGLM model)"),DFo=l(),Y_=a("li"),Tie=a("strong"),GFo=o("xlm"),OFo=o(" \u2014 "),yq=a("a"),VFo=o("XLMModel"),XFo=o(" (XLM model)"),zFo=l(),K_=a("li"),Mie=a("strong"),WFo=o("xlm-prophetnet"),QFo=o(" \u2014 "),Lq=a("a"),HFo=o("XLMProphetNetModel"),UFo=o(" (XLMProphetNet model)"),JFo=l(),Z_=a("li"),Eie=a("strong"),YFo=o("xlm-roberta"),KFo=o(" \u2014 "),xq=a("a"),ZFo=o("XLMRobertaModel"),e6o=o(" (XLM-RoBERTa model)"),o6o=l(),eu=a("li"),Cie=a("strong"),r6o=o("xlm-roberta-xl"),t6o=o(" \u2014 "),$q=a("a"),a6o=o("XLMRobertaXLModel"),n6o=o(" (XLM-RoBERTa-XL model)"),s6o=l(),ou=a("li"),wie=a("strong"),l6o=o("xlnet"),i6o=o(" \u2014 "),kq=a("a"),d6o=o("XLNetModel"),c6o=o(" (XLNet model)"),f6o=l(),ru=a("li"),Aie=a("strong"),m6o=o("yolos"),g6o=o(" \u2014 "),Sq=a("a"),h6o=o("YolosModel"),p6o=o(" (YOLOS model)"),_6o=l(),tu=a("li"),yie=a("strong"),u6o=o("yoso"),b6o=o(" \u2014 "),Rq=a("a"),v6o=o("YosoModel"),F6o=o(" (YOSO model)"),T6o=l(),au=a("p"),M6o=o("The model is set in evaluation mode by default using "),Lie=a("code"),E6o=o("model.eval()"),C6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xie=a("code"),w6o=o("model.train()"),A6o=l(),F(nu.$$.fragment),xqe=l(),Li=a("h2"),su=a("a"),$ie=a("span"),F(iL.$$.fragment),y6o=l(),kie=a("span"),L6o=o("AutoModelForPreTraining"),$qe=l(),xo=a("div"),F(dL.$$.fragment),x6o=l(),xi=a("p"),$6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Pq=a("a"),k6o=o("from_pretrained()"),S6o=o(" class method or the "),Bq=a("a"),R6o=o("from_config()"),P6o=o(` class
method.`),B6o=l(),cL=a("p"),I6o=o("This class cannot be instantiated directly using "),Sie=a("code"),N6o=o("__init__()"),q6o=o(" (throws an error)."),j6o=l(),at=a("div"),F(fL.$$.fragment),D6o=l(),Rie=a("p"),G6o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),O6o=l(),$i=a("p"),V6o=o(`Note:
Loading a model from its configuration file does `),Pie=a("strong"),X6o=o("not"),z6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iq=a("a"),W6o=o("from_pretrained()"),Q6o=o(" to load the model weights."),H6o=l(),F(lu.$$.fragment),U6o=l(),Ye=a("div"),F(mL.$$.fragment),J6o=l(),Bie=a("p"),Y6o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),K6o=l(),xa=a("p"),Z6o=o("The model class to instantiate is selected based on the "),Iie=a("code"),eTo=o("model_type"),oTo=o(` property of the config object (either
passed as an argument or loaded from `),Nie=a("code"),rTo=o("pretrained_model_name_or_path"),tTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=a("code"),aTo=o("pretrained_model_name_or_path"),nTo=o(":"),sTo=l(),G=a("ul"),iu=a("li"),jie=a("strong"),lTo=o("albert"),iTo=o(" \u2014 "),Nq=a("a"),dTo=o("AlbertForPreTraining"),cTo=o(" (ALBERT model)"),fTo=l(),du=a("li"),Die=a("strong"),mTo=o("bart"),gTo=o(" \u2014 "),qq=a("a"),hTo=o("BartForConditionalGeneration"),pTo=o(" (BART model)"),_To=l(),cu=a("li"),Gie=a("strong"),uTo=o("bert"),bTo=o(" \u2014 "),jq=a("a"),vTo=o("BertForPreTraining"),FTo=o(" (BERT model)"),TTo=l(),fu=a("li"),Oie=a("strong"),MTo=o("big_bird"),ETo=o(" \u2014 "),Dq=a("a"),CTo=o("BigBirdForPreTraining"),wTo=o(" (BigBird model)"),ATo=l(),mu=a("li"),Vie=a("strong"),yTo=o("camembert"),LTo=o(" \u2014 "),Gq=a("a"),xTo=o("CamembertForMaskedLM"),$To=o(" (CamemBERT model)"),kTo=l(),gu=a("li"),Xie=a("strong"),STo=o("ctrl"),RTo=o(" \u2014 "),Oq=a("a"),PTo=o("CTRLLMHeadModel"),BTo=o(" (CTRL model)"),ITo=l(),hu=a("li"),zie=a("strong"),NTo=o("data2vec-text"),qTo=o(" \u2014 "),Vq=a("a"),jTo=o("Data2VecTextForMaskedLM"),DTo=o(" (Data2VecText model)"),GTo=l(),pu=a("li"),Wie=a("strong"),OTo=o("deberta"),VTo=o(" \u2014 "),Xq=a("a"),XTo=o("DebertaForMaskedLM"),zTo=o(" (DeBERTa model)"),WTo=l(),_u=a("li"),Qie=a("strong"),QTo=o("deberta-v2"),HTo=o(" \u2014 "),zq=a("a"),UTo=o("DebertaV2ForMaskedLM"),JTo=o(" (DeBERTa-v2 model)"),YTo=l(),uu=a("li"),Hie=a("strong"),KTo=o("distilbert"),ZTo=o(" \u2014 "),Wq=a("a"),eMo=o("DistilBertForMaskedLM"),oMo=o(" (DistilBERT model)"),rMo=l(),bu=a("li"),Uie=a("strong"),tMo=o("electra"),aMo=o(" \u2014 "),Qq=a("a"),nMo=o("ElectraForPreTraining"),sMo=o(" (ELECTRA model)"),lMo=l(),vu=a("li"),Jie=a("strong"),iMo=o("flaubert"),dMo=o(" \u2014 "),Hq=a("a"),cMo=o("FlaubertWithLMHeadModel"),fMo=o(" (FlauBERT model)"),mMo=l(),Fu=a("li"),Yie=a("strong"),gMo=o("flava"),hMo=o(" \u2014 "),Uq=a("a"),pMo=o("FlavaForPreTraining"),_Mo=o(" (Flava model)"),uMo=l(),Tu=a("li"),Kie=a("strong"),bMo=o("fnet"),vMo=o(" \u2014 "),Jq=a("a"),FMo=o("FNetForPreTraining"),TMo=o(" (FNet model)"),MMo=l(),Mu=a("li"),Zie=a("strong"),EMo=o("fsmt"),CMo=o(" \u2014 "),Yq=a("a"),wMo=o("FSMTForConditionalGeneration"),AMo=o(" (FairSeq Machine-Translation model)"),yMo=l(),Eu=a("li"),ede=a("strong"),LMo=o("funnel"),xMo=o(" \u2014 "),Kq=a("a"),$Mo=o("FunnelForPreTraining"),kMo=o(" (Funnel Transformer model)"),SMo=l(),Cu=a("li"),ode=a("strong"),RMo=o("gpt2"),PMo=o(" \u2014 "),Zq=a("a"),BMo=o("GPT2LMHeadModel"),IMo=o(" (OpenAI GPT-2 model)"),NMo=l(),wu=a("li"),rde=a("strong"),qMo=o("ibert"),jMo=o(" \u2014 "),ej=a("a"),DMo=o("IBertForMaskedLM"),GMo=o(" (I-BERT model)"),OMo=l(),Au=a("li"),tde=a("strong"),VMo=o("layoutlm"),XMo=o(" \u2014 "),oj=a("a"),zMo=o("LayoutLMForMaskedLM"),WMo=o(" (LayoutLM model)"),QMo=l(),yu=a("li"),ade=a("strong"),HMo=o("longformer"),UMo=o(" \u2014 "),rj=a("a"),JMo=o("LongformerForMaskedLM"),YMo=o(" (Longformer model)"),KMo=l(),Lu=a("li"),nde=a("strong"),ZMo=o("lxmert"),eEo=o(" \u2014 "),tj=a("a"),oEo=o("LxmertForPreTraining"),rEo=o(" (LXMERT model)"),tEo=l(),xu=a("li"),sde=a("strong"),aEo=o("megatron-bert"),nEo=o(" \u2014 "),aj=a("a"),sEo=o("MegatronBertForPreTraining"),lEo=o(" (MegatronBert model)"),iEo=l(),$u=a("li"),lde=a("strong"),dEo=o("mobilebert"),cEo=o(" \u2014 "),nj=a("a"),fEo=o("MobileBertForPreTraining"),mEo=o(" (MobileBERT model)"),gEo=l(),ku=a("li"),ide=a("strong"),hEo=o("mpnet"),pEo=o(" \u2014 "),sj=a("a"),_Eo=o("MPNetForMaskedLM"),uEo=o(" (MPNet model)"),bEo=l(),Su=a("li"),dde=a("strong"),vEo=o("openai-gpt"),FEo=o(" \u2014 "),lj=a("a"),TEo=o("OpenAIGPTLMHeadModel"),MEo=o(" (OpenAI GPT model)"),EEo=l(),Ru=a("li"),cde=a("strong"),CEo=o("retribert"),wEo=o(" \u2014 "),ij=a("a"),AEo=o("RetriBertModel"),yEo=o(" (RetriBERT model)"),LEo=l(),Pu=a("li"),fde=a("strong"),xEo=o("roberta"),$Eo=o(" \u2014 "),dj=a("a"),kEo=o("RobertaForMaskedLM"),SEo=o(" (RoBERTa model)"),REo=l(),Bu=a("li"),mde=a("strong"),PEo=o("splinter"),BEo=o(" \u2014 "),cj=a("a"),IEo=o("SplinterForPreTraining"),NEo=o(" (Splinter model)"),qEo=l(),Iu=a("li"),gde=a("strong"),jEo=o("squeezebert"),DEo=o(" \u2014 "),fj=a("a"),GEo=o("SqueezeBertForMaskedLM"),OEo=o(" (SqueezeBERT model)"),VEo=l(),Nu=a("li"),hde=a("strong"),XEo=o("t5"),zEo=o(" \u2014 "),mj=a("a"),WEo=o("T5ForConditionalGeneration"),QEo=o(" (T5 model)"),HEo=l(),qu=a("li"),pde=a("strong"),UEo=o("tapas"),JEo=o(" \u2014 "),gj=a("a"),YEo=o("TapasForMaskedLM"),KEo=o(" (TAPAS model)"),ZEo=l(),ju=a("li"),_de=a("strong"),eCo=o("transfo-xl"),oCo=o(" \u2014 "),hj=a("a"),rCo=o("TransfoXLLMHeadModel"),tCo=o(" (Transformer-XL model)"),aCo=l(),Du=a("li"),ude=a("strong"),nCo=o("unispeech"),sCo=o(" \u2014 "),pj=a("a"),lCo=o("UniSpeechForPreTraining"),iCo=o(" (UniSpeech model)"),dCo=l(),Gu=a("li"),bde=a("strong"),cCo=o("unispeech-sat"),fCo=o(" \u2014 "),_j=a("a"),mCo=o("UniSpeechSatForPreTraining"),gCo=o(" (UniSpeechSat model)"),hCo=l(),Ou=a("li"),vde=a("strong"),pCo=o("visual_bert"),_Co=o(" \u2014 "),uj=a("a"),uCo=o("VisualBertForPreTraining"),bCo=o(" (VisualBert model)"),vCo=l(),Vu=a("li"),Fde=a("strong"),FCo=o("vit_mae"),TCo=o(" \u2014 "),bj=a("a"),MCo=o("ViTMAEForPreTraining"),ECo=o(" (ViTMAE model)"),CCo=l(),Xu=a("li"),Tde=a("strong"),wCo=o("wav2vec2"),ACo=o(" \u2014 "),vj=a("a"),yCo=o("Wav2Vec2ForPreTraining"),LCo=o(" (Wav2Vec2 model)"),xCo=l(),zu=a("li"),Mde=a("strong"),$Co=o("wav2vec2-conformer"),kCo=o(" \u2014 "),Fj=a("a"),SCo=o("Wav2Vec2ConformerForPreTraining"),RCo=o(" (Wav2Vec2-Conformer model)"),PCo=l(),Wu=a("li"),Ede=a("strong"),BCo=o("xlm"),ICo=o(" \u2014 "),Tj=a("a"),NCo=o("XLMWithLMHeadModel"),qCo=o(" (XLM model)"),jCo=l(),Qu=a("li"),Cde=a("strong"),DCo=o("xlm-roberta"),GCo=o(" \u2014 "),Mj=a("a"),OCo=o("XLMRobertaForMaskedLM"),VCo=o(" (XLM-RoBERTa model)"),XCo=l(),Hu=a("li"),wde=a("strong"),zCo=o("xlm-roberta-xl"),WCo=o(" \u2014 "),Ej=a("a"),QCo=o("XLMRobertaXLForMaskedLM"),HCo=o(" (XLM-RoBERTa-XL model)"),UCo=l(),Uu=a("li"),Ade=a("strong"),JCo=o("xlnet"),YCo=o(" \u2014 "),Cj=a("a"),KCo=o("XLNetLMHeadModel"),ZCo=o(" (XLNet model)"),e5o=l(),Ju=a("p"),o5o=o("The model is set in evaluation mode by default using "),yde=a("code"),r5o=o("model.eval()"),t5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lde=a("code"),a5o=o("model.train()"),n5o=l(),F(Yu.$$.fragment),kqe=l(),ki=a("h2"),Ku=a("a"),xde=a("span"),F(gL.$$.fragment),s5o=l(),$de=a("span"),l5o=o("AutoModelForCausalLM"),Sqe=l(),$o=a("div"),F(hL.$$.fragment),i5o=l(),Si=a("p"),d5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wj=a("a"),c5o=o("from_pretrained()"),f5o=o(" class method or the "),Aj=a("a"),m5o=o("from_config()"),g5o=o(` class
method.`),h5o=l(),pL=a("p"),p5o=o("This class cannot be instantiated directly using "),kde=a("code"),_5o=o("__init__()"),u5o=o(" (throws an error)."),b5o=l(),nt=a("div"),F(_L.$$.fragment),v5o=l(),Sde=a("p"),F5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),T5o=l(),Ri=a("p"),M5o=o(`Note:
Loading a model from its configuration file does `),Rde=a("strong"),E5o=o("not"),C5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yj=a("a"),w5o=o("from_pretrained()"),A5o=o(" to load the model weights."),y5o=l(),F(Zu.$$.fragment),L5o=l(),Ke=a("div"),F(uL.$$.fragment),x5o=l(),Pde=a("p"),$5o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),k5o=l(),$a=a("p"),S5o=o("The model class to instantiate is selected based on the "),Bde=a("code"),R5o=o("model_type"),P5o=o(` property of the config object (either
passed as an argument or loaded from `),Ide=a("code"),B5o=o("pretrained_model_name_or_path"),I5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nde=a("code"),N5o=o("pretrained_model_name_or_path"),q5o=o(":"),j5o=l(),z=a("ul"),e2=a("li"),qde=a("strong"),D5o=o("bart"),G5o=o(" \u2014 "),Lj=a("a"),O5o=o("BartForCausalLM"),V5o=o(" (BART model)"),X5o=l(),o2=a("li"),jde=a("strong"),z5o=o("bert"),W5o=o(" \u2014 "),xj=a("a"),Q5o=o("BertLMHeadModel"),H5o=o(" (BERT model)"),U5o=l(),r2=a("li"),Dde=a("strong"),J5o=o("bert-generation"),Y5o=o(" \u2014 "),$j=a("a"),K5o=o("BertGenerationDecoder"),Z5o=o(" (Bert Generation model)"),e3o=l(),t2=a("li"),Gde=a("strong"),o3o=o("big_bird"),r3o=o(" \u2014 "),kj=a("a"),t3o=o("BigBirdForCausalLM"),a3o=o(" (BigBird model)"),n3o=l(),a2=a("li"),Ode=a("strong"),s3o=o("bigbird_pegasus"),l3o=o(" \u2014 "),Sj=a("a"),i3o=o("BigBirdPegasusForCausalLM"),d3o=o(" (BigBirdPegasus model)"),c3o=l(),n2=a("li"),Vde=a("strong"),f3o=o("blenderbot"),m3o=o(" \u2014 "),Rj=a("a"),g3o=o("BlenderbotForCausalLM"),h3o=o(" (Blenderbot model)"),p3o=l(),s2=a("li"),Xde=a("strong"),_3o=o("blenderbot-small"),u3o=o(" \u2014 "),Pj=a("a"),b3o=o("BlenderbotSmallForCausalLM"),v3o=o(" (BlenderbotSmall model)"),F3o=l(),l2=a("li"),zde=a("strong"),T3o=o("camembert"),M3o=o(" \u2014 "),Bj=a("a"),E3o=o("CamembertForCausalLM"),C3o=o(" (CamemBERT model)"),w3o=l(),i2=a("li"),Wde=a("strong"),A3o=o("ctrl"),y3o=o(" \u2014 "),Ij=a("a"),L3o=o("CTRLLMHeadModel"),x3o=o(" (CTRL model)"),$3o=l(),d2=a("li"),Qde=a("strong"),k3o=o("data2vec-text"),S3o=o(" \u2014 "),Nj=a("a"),R3o=o("Data2VecTextForCausalLM"),P3o=o(" (Data2VecText model)"),B3o=l(),c2=a("li"),Hde=a("strong"),I3o=o("electra"),N3o=o(" \u2014 "),qj=a("a"),q3o=o("ElectraForCausalLM"),j3o=o(" (ELECTRA model)"),D3o=l(),f2=a("li"),Ude=a("strong"),G3o=o("gpt2"),O3o=o(" \u2014 "),jj=a("a"),V3o=o("GPT2LMHeadModel"),X3o=o(" (OpenAI GPT-2 model)"),z3o=l(),m2=a("li"),Jde=a("strong"),W3o=o("gpt_neo"),Q3o=o(" \u2014 "),Dj=a("a"),H3o=o("GPTNeoForCausalLM"),U3o=o(" (GPT Neo model)"),J3o=l(),g2=a("li"),Yde=a("strong"),Y3o=o("gpt_neox"),K3o=o(" \u2014 "),Gj=a("a"),Z3o=o("GPTNeoXForCausalLM"),ewo=o(" (GPT NeoX model)"),owo=l(),h2=a("li"),Kde=a("strong"),rwo=o("gptj"),two=o(" \u2014 "),Oj=a("a"),awo=o("GPTJForCausalLM"),nwo=o(" (GPT-J model)"),swo=l(),p2=a("li"),Zde=a("strong"),lwo=o("marian"),iwo=o(" \u2014 "),Vj=a("a"),dwo=o("MarianForCausalLM"),cwo=o(" (Marian model)"),fwo=l(),_2=a("li"),ece=a("strong"),mwo=o("mbart"),gwo=o(" \u2014 "),Xj=a("a"),hwo=o("MBartForCausalLM"),pwo=o(" (mBART model)"),_wo=l(),u2=a("li"),oce=a("strong"),uwo=o("megatron-bert"),bwo=o(" \u2014 "),zj=a("a"),vwo=o("MegatronBertForCausalLM"),Fwo=o(" (MegatronBert model)"),Two=l(),b2=a("li"),rce=a("strong"),Mwo=o("openai-gpt"),Ewo=o(" \u2014 "),Wj=a("a"),Cwo=o("OpenAIGPTLMHeadModel"),wwo=o(" (OpenAI GPT model)"),Awo=l(),v2=a("li"),tce=a("strong"),ywo=o("opt"),Lwo=o(" \u2014 "),Qj=a("a"),xwo=o("OPTForCausalLM"),$wo=o(" (OPT model)"),kwo=l(),F2=a("li"),ace=a("strong"),Swo=o("pegasus"),Rwo=o(" \u2014 "),Hj=a("a"),Pwo=o("PegasusForCausalLM"),Bwo=o(" (Pegasus model)"),Iwo=l(),T2=a("li"),nce=a("strong"),Nwo=o("plbart"),qwo=o(" \u2014 "),Uj=a("a"),jwo=o("PLBartForCausalLM"),Dwo=o(" (PLBart model)"),Gwo=l(),M2=a("li"),sce=a("strong"),Owo=o("prophetnet"),Vwo=o(" \u2014 "),Jj=a("a"),Xwo=o("ProphetNetForCausalLM"),zwo=o(" (ProphetNet model)"),Wwo=l(),E2=a("li"),lce=a("strong"),Qwo=o("qdqbert"),Hwo=o(" \u2014 "),Yj=a("a"),Uwo=o("QDQBertLMHeadModel"),Jwo=o(" (QDQBert model)"),Ywo=l(),C2=a("li"),ice=a("strong"),Kwo=o("reformer"),Zwo=o(" \u2014 "),Kj=a("a"),eAo=o("ReformerModelWithLMHead"),oAo=o(" (Reformer model)"),rAo=l(),w2=a("li"),dce=a("strong"),tAo=o("rembert"),aAo=o(" \u2014 "),Zj=a("a"),nAo=o("RemBertForCausalLM"),sAo=o(" (RemBERT model)"),lAo=l(),A2=a("li"),cce=a("strong"),iAo=o("roberta"),dAo=o(" \u2014 "),eD=a("a"),cAo=o("RobertaForCausalLM"),fAo=o(" (RoBERTa model)"),mAo=l(),y2=a("li"),fce=a("strong"),gAo=o("roformer"),hAo=o(" \u2014 "),oD=a("a"),pAo=o("RoFormerForCausalLM"),_Ao=o(" (RoFormer model)"),uAo=l(),L2=a("li"),mce=a("strong"),bAo=o("speech_to_text_2"),vAo=o(" \u2014 "),rD=a("a"),FAo=o("Speech2Text2ForCausalLM"),TAo=o(" (Speech2Text2 model)"),MAo=l(),x2=a("li"),gce=a("strong"),EAo=o("transfo-xl"),CAo=o(" \u2014 "),tD=a("a"),wAo=o("TransfoXLLMHeadModel"),AAo=o(" (Transformer-XL model)"),yAo=l(),$2=a("li"),hce=a("strong"),LAo=o("trocr"),xAo=o(" \u2014 "),aD=a("a"),$Ao=o("TrOCRForCausalLM"),kAo=o(" (TrOCR model)"),SAo=l(),k2=a("li"),pce=a("strong"),RAo=o("xglm"),PAo=o(" \u2014 "),nD=a("a"),BAo=o("XGLMForCausalLM"),IAo=o(" (XGLM model)"),NAo=l(),S2=a("li"),_ce=a("strong"),qAo=o("xlm"),jAo=o(" \u2014 "),sD=a("a"),DAo=o("XLMWithLMHeadModel"),GAo=o(" (XLM model)"),OAo=l(),R2=a("li"),uce=a("strong"),VAo=o("xlm-prophetnet"),XAo=o(" \u2014 "),lD=a("a"),zAo=o("XLMProphetNetForCausalLM"),WAo=o(" (XLMProphetNet model)"),QAo=l(),P2=a("li"),bce=a("strong"),HAo=o("xlm-roberta"),UAo=o(" \u2014 "),iD=a("a"),JAo=o("XLMRobertaForCausalLM"),YAo=o(" (XLM-RoBERTa model)"),KAo=l(),B2=a("li"),vce=a("strong"),ZAo=o("xlm-roberta-xl"),eyo=o(" \u2014 "),dD=a("a"),oyo=o("XLMRobertaXLForCausalLM"),ryo=o(" (XLM-RoBERTa-XL model)"),tyo=l(),I2=a("li"),Fce=a("strong"),ayo=o("xlnet"),nyo=o(" \u2014 "),cD=a("a"),syo=o("XLNetLMHeadModel"),lyo=o(" (XLNet model)"),iyo=l(),N2=a("p"),dyo=o("The model is set in evaluation mode by default using "),Tce=a("code"),cyo=o("model.eval()"),fyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=a("code"),myo=o("model.train()"),gyo=l(),F(q2.$$.fragment),Rqe=l(),Pi=a("h2"),j2=a("a"),Ece=a("span"),F(bL.$$.fragment),hyo=l(),Cce=a("span"),pyo=o("AutoModelForMaskedLM"),Pqe=l(),ko=a("div"),F(vL.$$.fragment),_yo=l(),Bi=a("p"),uyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fD=a("a"),byo=o("from_pretrained()"),vyo=o(" class method or the "),mD=a("a"),Fyo=o("from_config()"),Tyo=o(` class
method.`),Myo=l(),FL=a("p"),Eyo=o("This class cannot be instantiated directly using "),wce=a("code"),Cyo=o("__init__()"),wyo=o(" (throws an error)."),Ayo=l(),st=a("div"),F(TL.$$.fragment),yyo=l(),Ace=a("p"),Lyo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xyo=l(),Ii=a("p"),$yo=o(`Note:
Loading a model from its configuration file does `),yce=a("strong"),kyo=o("not"),Syo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gD=a("a"),Ryo=o("from_pretrained()"),Pyo=o(" to load the model weights."),Byo=l(),F(D2.$$.fragment),Iyo=l(),Ze=a("div"),F(ML.$$.fragment),Nyo=l(),Lce=a("p"),qyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jyo=l(),ka=a("p"),Dyo=o("The model class to instantiate is selected based on the "),xce=a("code"),Gyo=o("model_type"),Oyo=o(` property of the config object (either
passed as an argument or loaded from `),$ce=a("code"),Vyo=o("pretrained_model_name_or_path"),Xyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=a("code"),zyo=o("pretrained_model_name_or_path"),Wyo=o(":"),Qyo=l(),Q=a("ul"),G2=a("li"),Sce=a("strong"),Hyo=o("albert"),Uyo=o(" \u2014 "),hD=a("a"),Jyo=o("AlbertForMaskedLM"),Yyo=o(" (ALBERT model)"),Kyo=l(),O2=a("li"),Rce=a("strong"),Zyo=o("bart"),eLo=o(" \u2014 "),pD=a("a"),oLo=o("BartForConditionalGeneration"),rLo=o(" (BART model)"),tLo=l(),V2=a("li"),Pce=a("strong"),aLo=o("bert"),nLo=o(" \u2014 "),_D=a("a"),sLo=o("BertForMaskedLM"),lLo=o(" (BERT model)"),iLo=l(),X2=a("li"),Bce=a("strong"),dLo=o("big_bird"),cLo=o(" \u2014 "),uD=a("a"),fLo=o("BigBirdForMaskedLM"),mLo=o(" (BigBird model)"),gLo=l(),z2=a("li"),Ice=a("strong"),hLo=o("camembert"),pLo=o(" \u2014 "),bD=a("a"),_Lo=o("CamembertForMaskedLM"),uLo=o(" (CamemBERT model)"),bLo=l(),W2=a("li"),Nce=a("strong"),vLo=o("convbert"),FLo=o(" \u2014 "),vD=a("a"),TLo=o("ConvBertForMaskedLM"),MLo=o(" (ConvBERT model)"),ELo=l(),Q2=a("li"),qce=a("strong"),CLo=o("data2vec-text"),wLo=o(" \u2014 "),FD=a("a"),ALo=o("Data2VecTextForMaskedLM"),yLo=o(" (Data2VecText model)"),LLo=l(),H2=a("li"),jce=a("strong"),xLo=o("deberta"),$Lo=o(" \u2014 "),TD=a("a"),kLo=o("DebertaForMaskedLM"),SLo=o(" (DeBERTa model)"),RLo=l(),U2=a("li"),Dce=a("strong"),PLo=o("deberta-v2"),BLo=o(" \u2014 "),MD=a("a"),ILo=o("DebertaV2ForMaskedLM"),NLo=o(" (DeBERTa-v2 model)"),qLo=l(),J2=a("li"),Gce=a("strong"),jLo=o("distilbert"),DLo=o(" \u2014 "),ED=a("a"),GLo=o("DistilBertForMaskedLM"),OLo=o(" (DistilBERT model)"),VLo=l(),Y2=a("li"),Oce=a("strong"),XLo=o("electra"),zLo=o(" \u2014 "),CD=a("a"),WLo=o("ElectraForMaskedLM"),QLo=o(" (ELECTRA model)"),HLo=l(),K2=a("li"),Vce=a("strong"),ULo=o("flaubert"),JLo=o(" \u2014 "),wD=a("a"),YLo=o("FlaubertWithLMHeadModel"),KLo=o(" (FlauBERT model)"),ZLo=l(),Z2=a("li"),Xce=a("strong"),e8o=o("fnet"),o8o=o(" \u2014 "),AD=a("a"),r8o=o("FNetForMaskedLM"),t8o=o(" (FNet model)"),a8o=l(),e1=a("li"),zce=a("strong"),n8o=o("funnel"),s8o=o(" \u2014 "),yD=a("a"),l8o=o("FunnelForMaskedLM"),i8o=o(" (Funnel Transformer model)"),d8o=l(),o1=a("li"),Wce=a("strong"),c8o=o("ibert"),f8o=o(" \u2014 "),LD=a("a"),m8o=o("IBertForMaskedLM"),g8o=o(" (I-BERT model)"),h8o=l(),r1=a("li"),Qce=a("strong"),p8o=o("layoutlm"),_8o=o(" \u2014 "),xD=a("a"),u8o=o("LayoutLMForMaskedLM"),b8o=o(" (LayoutLM model)"),v8o=l(),t1=a("li"),Hce=a("strong"),F8o=o("longformer"),T8o=o(" \u2014 "),$D=a("a"),M8o=o("LongformerForMaskedLM"),E8o=o(" (Longformer model)"),C8o=l(),a1=a("li"),Uce=a("strong"),w8o=o("mbart"),A8o=o(" \u2014 "),kD=a("a"),y8o=o("MBartForConditionalGeneration"),L8o=o(" (mBART model)"),x8o=l(),n1=a("li"),Jce=a("strong"),$8o=o("megatron-bert"),k8o=o(" \u2014 "),SD=a("a"),S8o=o("MegatronBertForMaskedLM"),R8o=o(" (MegatronBert model)"),P8o=l(),s1=a("li"),Yce=a("strong"),B8o=o("mobilebert"),I8o=o(" \u2014 "),RD=a("a"),N8o=o("MobileBertForMaskedLM"),q8o=o(" (MobileBERT model)"),j8o=l(),l1=a("li"),Kce=a("strong"),D8o=o("mpnet"),G8o=o(" \u2014 "),PD=a("a"),O8o=o("MPNetForMaskedLM"),V8o=o(" (MPNet model)"),X8o=l(),i1=a("li"),Zce=a("strong"),z8o=o("nystromformer"),W8o=o(" \u2014 "),BD=a("a"),Q8o=o("NystromformerForMaskedLM"),H8o=o(" (Nystromformer model)"),U8o=l(),d1=a("li"),efe=a("strong"),J8o=o("perceiver"),Y8o=o(" \u2014 "),ID=a("a"),K8o=o("PerceiverForMaskedLM"),Z8o=o(" (Perceiver model)"),e7o=l(),c1=a("li"),ofe=a("strong"),o7o=o("qdqbert"),r7o=o(" \u2014 "),ND=a("a"),t7o=o("QDQBertForMaskedLM"),a7o=o(" (QDQBert model)"),n7o=l(),f1=a("li"),rfe=a("strong"),s7o=o("reformer"),l7o=o(" \u2014 "),qD=a("a"),i7o=o("ReformerForMaskedLM"),d7o=o(" (Reformer model)"),c7o=l(),m1=a("li"),tfe=a("strong"),f7o=o("rembert"),m7o=o(" \u2014 "),jD=a("a"),g7o=o("RemBertForMaskedLM"),h7o=o(" (RemBERT model)"),p7o=l(),g1=a("li"),afe=a("strong"),_7o=o("roberta"),u7o=o(" \u2014 "),DD=a("a"),b7o=o("RobertaForMaskedLM"),v7o=o(" (RoBERTa model)"),F7o=l(),h1=a("li"),nfe=a("strong"),T7o=o("roformer"),M7o=o(" \u2014 "),GD=a("a"),E7o=o("RoFormerForMaskedLM"),C7o=o(" (RoFormer model)"),w7o=l(),p1=a("li"),sfe=a("strong"),A7o=o("squeezebert"),y7o=o(" \u2014 "),OD=a("a"),L7o=o("SqueezeBertForMaskedLM"),x7o=o(" (SqueezeBERT model)"),$7o=l(),_1=a("li"),lfe=a("strong"),k7o=o("tapas"),S7o=o(" \u2014 "),VD=a("a"),R7o=o("TapasForMaskedLM"),P7o=o(" (TAPAS model)"),B7o=l(),u1=a("li"),ife=a("strong"),I7o=o("wav2vec2"),N7o=o(" \u2014 "),dfe=a("code"),q7o=o("Wav2Vec2ForMaskedLM"),j7o=o(" (Wav2Vec2 model)"),D7o=l(),b1=a("li"),cfe=a("strong"),G7o=o("xlm"),O7o=o(" \u2014 "),XD=a("a"),V7o=o("XLMWithLMHeadModel"),X7o=o(" (XLM model)"),z7o=l(),v1=a("li"),ffe=a("strong"),W7o=o("xlm-roberta"),Q7o=o(" \u2014 "),zD=a("a"),H7o=o("XLMRobertaForMaskedLM"),U7o=o(" (XLM-RoBERTa model)"),J7o=l(),F1=a("li"),mfe=a("strong"),Y7o=o("xlm-roberta-xl"),K7o=o(" \u2014 "),WD=a("a"),Z7o=o("XLMRobertaXLForMaskedLM"),e9o=o(" (XLM-RoBERTa-XL model)"),o9o=l(),T1=a("li"),gfe=a("strong"),r9o=o("yoso"),t9o=o(" \u2014 "),QD=a("a"),a9o=o("YosoForMaskedLM"),n9o=o(" (YOSO model)"),s9o=l(),M1=a("p"),l9o=o("The model is set in evaluation mode by default using "),hfe=a("code"),i9o=o("model.eval()"),d9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pfe=a("code"),c9o=o("model.train()"),f9o=l(),F(E1.$$.fragment),Bqe=l(),Ni=a("h2"),C1=a("a"),_fe=a("span"),F(EL.$$.fragment),m9o=l(),ufe=a("span"),g9o=o("AutoModelForSeq2SeqLM"),Iqe=l(),So=a("div"),F(CL.$$.fragment),h9o=l(),qi=a("p"),p9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HD=a("a"),_9o=o("from_pretrained()"),u9o=o(" class method or the "),UD=a("a"),b9o=o("from_config()"),v9o=o(` class
method.`),F9o=l(),wL=a("p"),T9o=o("This class cannot be instantiated directly using "),bfe=a("code"),M9o=o("__init__()"),E9o=o(" (throws an error)."),C9o=l(),lt=a("div"),F(AL.$$.fragment),w9o=l(),vfe=a("p"),A9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),y9o=l(),ji=a("p"),L9o=o(`Note:
Loading a model from its configuration file does `),Ffe=a("strong"),x9o=o("not"),$9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=a("a"),k9o=o("from_pretrained()"),S9o=o(" to load the model weights."),R9o=l(),F(w1.$$.fragment),P9o=l(),eo=a("div"),F(yL.$$.fragment),B9o=l(),Tfe=a("p"),I9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),N9o=l(),Sa=a("p"),q9o=o("The model class to instantiate is selected based on the "),Mfe=a("code"),j9o=o("model_type"),D9o=o(` property of the config object (either
passed as an argument or loaded from `),Efe=a("code"),G9o=o("pretrained_model_name_or_path"),O9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cfe=a("code"),V9o=o("pretrained_model_name_or_path"),X9o=o(":"),z9o=l(),_e=a("ul"),A1=a("li"),wfe=a("strong"),W9o=o("bart"),Q9o=o(" \u2014 "),YD=a("a"),H9o=o("BartForConditionalGeneration"),U9o=o(" (BART model)"),J9o=l(),y1=a("li"),Afe=a("strong"),Y9o=o("bigbird_pegasus"),K9o=o(" \u2014 "),KD=a("a"),Z9o=o("BigBirdPegasusForConditionalGeneration"),exo=o(" (BigBirdPegasus model)"),oxo=l(),L1=a("li"),yfe=a("strong"),rxo=o("blenderbot"),txo=o(" \u2014 "),ZD=a("a"),axo=o("BlenderbotForConditionalGeneration"),nxo=o(" (Blenderbot model)"),sxo=l(),x1=a("li"),Lfe=a("strong"),lxo=o("blenderbot-small"),ixo=o(" \u2014 "),eG=a("a"),dxo=o("BlenderbotSmallForConditionalGeneration"),cxo=o(" (BlenderbotSmall model)"),fxo=l(),$1=a("li"),xfe=a("strong"),mxo=o("encoder-decoder"),gxo=o(" \u2014 "),oG=a("a"),hxo=o("EncoderDecoderModel"),pxo=o(" (Encoder decoder model)"),_xo=l(),k1=a("li"),$fe=a("strong"),uxo=o("fsmt"),bxo=o(" \u2014 "),rG=a("a"),vxo=o("FSMTForConditionalGeneration"),Fxo=o(" (FairSeq Machine-Translation model)"),Txo=l(),S1=a("li"),kfe=a("strong"),Mxo=o("led"),Exo=o(" \u2014 "),tG=a("a"),Cxo=o("LEDForConditionalGeneration"),wxo=o(" (LED model)"),Axo=l(),R1=a("li"),Sfe=a("strong"),yxo=o("m2m_100"),Lxo=o(" \u2014 "),aG=a("a"),xxo=o("M2M100ForConditionalGeneration"),$xo=o(" (M2M100 model)"),kxo=l(),P1=a("li"),Rfe=a("strong"),Sxo=o("marian"),Rxo=o(" \u2014 "),nG=a("a"),Pxo=o("MarianMTModel"),Bxo=o(" (Marian model)"),Ixo=l(),B1=a("li"),Pfe=a("strong"),Nxo=o("mbart"),qxo=o(" \u2014 "),sG=a("a"),jxo=o("MBartForConditionalGeneration"),Dxo=o(" (mBART model)"),Gxo=l(),I1=a("li"),Bfe=a("strong"),Oxo=o("mt5"),Vxo=o(" \u2014 "),lG=a("a"),Xxo=o("MT5ForConditionalGeneration"),zxo=o(" (mT5 model)"),Wxo=l(),N1=a("li"),Ife=a("strong"),Qxo=o("pegasus"),Hxo=o(" \u2014 "),iG=a("a"),Uxo=o("PegasusForConditionalGeneration"),Jxo=o(" (Pegasus model)"),Yxo=l(),q1=a("li"),Nfe=a("strong"),Kxo=o("plbart"),Zxo=o(" \u2014 "),dG=a("a"),e$o=o("PLBartForConditionalGeneration"),o$o=o(" (PLBart model)"),r$o=l(),j1=a("li"),qfe=a("strong"),t$o=o("prophetnet"),a$o=o(" \u2014 "),cG=a("a"),n$o=o("ProphetNetForConditionalGeneration"),s$o=o(" (ProphetNet model)"),l$o=l(),D1=a("li"),jfe=a("strong"),i$o=o("t5"),d$o=o(" \u2014 "),fG=a("a"),c$o=o("T5ForConditionalGeneration"),f$o=o(" (T5 model)"),m$o=l(),G1=a("li"),Dfe=a("strong"),g$o=o("xlm-prophetnet"),h$o=o(" \u2014 "),mG=a("a"),p$o=o("XLMProphetNetForConditionalGeneration"),_$o=o(" (XLMProphetNet model)"),u$o=l(),O1=a("p"),b$o=o("The model is set in evaluation mode by default using "),Gfe=a("code"),v$o=o("model.eval()"),F$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ofe=a("code"),T$o=o("model.train()"),M$o=l(),F(V1.$$.fragment),Nqe=l(),Di=a("h2"),X1=a("a"),Vfe=a("span"),F(LL.$$.fragment),E$o=l(),Xfe=a("span"),C$o=o("AutoModelForSequenceClassification"),qqe=l(),Ro=a("div"),F(xL.$$.fragment),w$o=l(),Gi=a("p"),A$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gG=a("a"),y$o=o("from_pretrained()"),L$o=o(" class method or the "),hG=a("a"),x$o=o("from_config()"),$$o=o(` class
method.`),k$o=l(),$L=a("p"),S$o=o("This class cannot be instantiated directly using "),zfe=a("code"),R$o=o("__init__()"),P$o=o(" (throws an error)."),B$o=l(),it=a("div"),F(kL.$$.fragment),I$o=l(),Wfe=a("p"),N$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),q$o=l(),Oi=a("p"),j$o=o(`Note:
Loading a model from its configuration file does `),Qfe=a("strong"),D$o=o("not"),G$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=a("a"),O$o=o("from_pretrained()"),V$o=o(" to load the model weights."),X$o=l(),F(z1.$$.fragment),z$o=l(),oo=a("div"),F(SL.$$.fragment),W$o=l(),Hfe=a("p"),Q$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),H$o=l(),Ra=a("p"),U$o=o("The model class to instantiate is selected based on the "),Ufe=a("code"),J$o=o("model_type"),Y$o=o(` property of the config object (either
passed as an argument or loaded from `),Jfe=a("code"),K$o=o("pretrained_model_name_or_path"),Z$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=a("code"),eko=o("pretrained_model_name_or_path"),oko=o(":"),rko=l(),N=a("ul"),W1=a("li"),Kfe=a("strong"),tko=o("albert"),ako=o(" \u2014 "),_G=a("a"),nko=o("AlbertForSequenceClassification"),sko=o(" (ALBERT model)"),lko=l(),Q1=a("li"),Zfe=a("strong"),iko=o("bart"),dko=o(" \u2014 "),uG=a("a"),cko=o("BartForSequenceClassification"),fko=o(" (BART model)"),mko=l(),H1=a("li"),eme=a("strong"),gko=o("bert"),hko=o(" \u2014 "),bG=a("a"),pko=o("BertForSequenceClassification"),_ko=o(" (BERT model)"),uko=l(),U1=a("li"),ome=a("strong"),bko=o("big_bird"),vko=o(" \u2014 "),vG=a("a"),Fko=o("BigBirdForSequenceClassification"),Tko=o(" (BigBird model)"),Mko=l(),J1=a("li"),rme=a("strong"),Eko=o("bigbird_pegasus"),Cko=o(" \u2014 "),FG=a("a"),wko=o("BigBirdPegasusForSequenceClassification"),Ako=o(" (BigBirdPegasus model)"),yko=l(),Y1=a("li"),tme=a("strong"),Lko=o("camembert"),xko=o(" \u2014 "),TG=a("a"),$ko=o("CamembertForSequenceClassification"),kko=o(" (CamemBERT model)"),Sko=l(),K1=a("li"),ame=a("strong"),Rko=o("canine"),Pko=o(" \u2014 "),MG=a("a"),Bko=o("CanineForSequenceClassification"),Iko=o(" (Canine model)"),Nko=l(),Z1=a("li"),nme=a("strong"),qko=o("convbert"),jko=o(" \u2014 "),EG=a("a"),Dko=o("ConvBertForSequenceClassification"),Gko=o(" (ConvBERT model)"),Oko=l(),eb=a("li"),sme=a("strong"),Vko=o("ctrl"),Xko=o(" \u2014 "),CG=a("a"),zko=o("CTRLForSequenceClassification"),Wko=o(" (CTRL model)"),Qko=l(),ob=a("li"),lme=a("strong"),Hko=o("data2vec-text"),Uko=o(" \u2014 "),wG=a("a"),Jko=o("Data2VecTextForSequenceClassification"),Yko=o(" (Data2VecText model)"),Kko=l(),rb=a("li"),ime=a("strong"),Zko=o("deberta"),eSo=o(" \u2014 "),AG=a("a"),oSo=o("DebertaForSequenceClassification"),rSo=o(" (DeBERTa model)"),tSo=l(),tb=a("li"),dme=a("strong"),aSo=o("deberta-v2"),nSo=o(" \u2014 "),yG=a("a"),sSo=o("DebertaV2ForSequenceClassification"),lSo=o(" (DeBERTa-v2 model)"),iSo=l(),ab=a("li"),cme=a("strong"),dSo=o("distilbert"),cSo=o(" \u2014 "),LG=a("a"),fSo=o("DistilBertForSequenceClassification"),mSo=o(" (DistilBERT model)"),gSo=l(),nb=a("li"),fme=a("strong"),hSo=o("electra"),pSo=o(" \u2014 "),xG=a("a"),_So=o("ElectraForSequenceClassification"),uSo=o(" (ELECTRA model)"),bSo=l(),sb=a("li"),mme=a("strong"),vSo=o("flaubert"),FSo=o(" \u2014 "),$G=a("a"),TSo=o("FlaubertForSequenceClassification"),MSo=o(" (FlauBERT model)"),ESo=l(),lb=a("li"),gme=a("strong"),CSo=o("fnet"),wSo=o(" \u2014 "),kG=a("a"),ASo=o("FNetForSequenceClassification"),ySo=o(" (FNet model)"),LSo=l(),ib=a("li"),hme=a("strong"),xSo=o("funnel"),$So=o(" \u2014 "),SG=a("a"),kSo=o("FunnelForSequenceClassification"),SSo=o(" (Funnel Transformer model)"),RSo=l(),db=a("li"),pme=a("strong"),PSo=o("gpt2"),BSo=o(" \u2014 "),RG=a("a"),ISo=o("GPT2ForSequenceClassification"),NSo=o(" (OpenAI GPT-2 model)"),qSo=l(),cb=a("li"),_me=a("strong"),jSo=o("gpt_neo"),DSo=o(" \u2014 "),PG=a("a"),GSo=o("GPTNeoForSequenceClassification"),OSo=o(" (GPT Neo model)"),VSo=l(),fb=a("li"),ume=a("strong"),XSo=o("gptj"),zSo=o(" \u2014 "),BG=a("a"),WSo=o("GPTJForSequenceClassification"),QSo=o(" (GPT-J model)"),HSo=l(),mb=a("li"),bme=a("strong"),USo=o("ibert"),JSo=o(" \u2014 "),IG=a("a"),YSo=o("IBertForSequenceClassification"),KSo=o(" (I-BERT model)"),ZSo=l(),gb=a("li"),vme=a("strong"),eRo=o("layoutlm"),oRo=o(" \u2014 "),NG=a("a"),rRo=o("LayoutLMForSequenceClassification"),tRo=o(" (LayoutLM model)"),aRo=l(),hb=a("li"),Fme=a("strong"),nRo=o("layoutlmv2"),sRo=o(" \u2014 "),qG=a("a"),lRo=o("LayoutLMv2ForSequenceClassification"),iRo=o(" (LayoutLMv2 model)"),dRo=l(),pb=a("li"),Tme=a("strong"),cRo=o("layoutlmv3"),fRo=o(" \u2014 "),jG=a("a"),mRo=o("LayoutLMv3ForSequenceClassification"),gRo=o(" (LayoutLMv3 model)"),hRo=l(),_b=a("li"),Mme=a("strong"),pRo=o("led"),_Ro=o(" \u2014 "),DG=a("a"),uRo=o("LEDForSequenceClassification"),bRo=o(" (LED model)"),vRo=l(),ub=a("li"),Eme=a("strong"),FRo=o("longformer"),TRo=o(" \u2014 "),GG=a("a"),MRo=o("LongformerForSequenceClassification"),ERo=o(" (Longformer model)"),CRo=l(),bb=a("li"),Cme=a("strong"),wRo=o("mbart"),ARo=o(" \u2014 "),OG=a("a"),yRo=o("MBartForSequenceClassification"),LRo=o(" (mBART model)"),xRo=l(),vb=a("li"),wme=a("strong"),$Ro=o("megatron-bert"),kRo=o(" \u2014 "),VG=a("a"),SRo=o("MegatronBertForSequenceClassification"),RRo=o(" (MegatronBert model)"),PRo=l(),Fb=a("li"),Ame=a("strong"),BRo=o("mobilebert"),IRo=o(" \u2014 "),XG=a("a"),NRo=o("MobileBertForSequenceClassification"),qRo=o(" (MobileBERT model)"),jRo=l(),Tb=a("li"),yme=a("strong"),DRo=o("mpnet"),GRo=o(" \u2014 "),zG=a("a"),ORo=o("MPNetForSequenceClassification"),VRo=o(" (MPNet model)"),XRo=l(),Mb=a("li"),Lme=a("strong"),zRo=o("nystromformer"),WRo=o(" \u2014 "),WG=a("a"),QRo=o("NystromformerForSequenceClassification"),HRo=o(" (Nystromformer model)"),URo=l(),Eb=a("li"),xme=a("strong"),JRo=o("openai-gpt"),YRo=o(" \u2014 "),QG=a("a"),KRo=o("OpenAIGPTForSequenceClassification"),ZRo=o(" (OpenAI GPT model)"),ePo=l(),Cb=a("li"),$me=a("strong"),oPo=o("perceiver"),rPo=o(" \u2014 "),HG=a("a"),tPo=o("PerceiverForSequenceClassification"),aPo=o(" (Perceiver model)"),nPo=l(),wb=a("li"),kme=a("strong"),sPo=o("plbart"),lPo=o(" \u2014 "),UG=a("a"),iPo=o("PLBartForSequenceClassification"),dPo=o(" (PLBart model)"),cPo=l(),Ab=a("li"),Sme=a("strong"),fPo=o("qdqbert"),mPo=o(" \u2014 "),JG=a("a"),gPo=o("QDQBertForSequenceClassification"),hPo=o(" (QDQBert model)"),pPo=l(),yb=a("li"),Rme=a("strong"),_Po=o("reformer"),uPo=o(" \u2014 "),YG=a("a"),bPo=o("ReformerForSequenceClassification"),vPo=o(" (Reformer model)"),FPo=l(),Lb=a("li"),Pme=a("strong"),TPo=o("rembert"),MPo=o(" \u2014 "),KG=a("a"),EPo=o("RemBertForSequenceClassification"),CPo=o(" (RemBERT model)"),wPo=l(),xb=a("li"),Bme=a("strong"),APo=o("roberta"),yPo=o(" \u2014 "),ZG=a("a"),LPo=o("RobertaForSequenceClassification"),xPo=o(" (RoBERTa model)"),$Po=l(),$b=a("li"),Ime=a("strong"),kPo=o("roformer"),SPo=o(" \u2014 "),eO=a("a"),RPo=o("RoFormerForSequenceClassification"),PPo=o(" (RoFormer model)"),BPo=l(),kb=a("li"),Nme=a("strong"),IPo=o("squeezebert"),NPo=o(" \u2014 "),oO=a("a"),qPo=o("SqueezeBertForSequenceClassification"),jPo=o(" (SqueezeBERT model)"),DPo=l(),Sb=a("li"),qme=a("strong"),GPo=o("tapas"),OPo=o(" \u2014 "),rO=a("a"),VPo=o("TapasForSequenceClassification"),XPo=o(" (TAPAS model)"),zPo=l(),Rb=a("li"),jme=a("strong"),WPo=o("transfo-xl"),QPo=o(" \u2014 "),tO=a("a"),HPo=o("TransfoXLForSequenceClassification"),UPo=o(" (Transformer-XL model)"),JPo=l(),Pb=a("li"),Dme=a("strong"),YPo=o("xlm"),KPo=o(" \u2014 "),aO=a("a"),ZPo=o("XLMForSequenceClassification"),eBo=o(" (XLM model)"),oBo=l(),Bb=a("li"),Gme=a("strong"),rBo=o("xlm-roberta"),tBo=o(" \u2014 "),nO=a("a"),aBo=o("XLMRobertaForSequenceClassification"),nBo=o(" (XLM-RoBERTa model)"),sBo=l(),Ib=a("li"),Ome=a("strong"),lBo=o("xlm-roberta-xl"),iBo=o(" \u2014 "),sO=a("a"),dBo=o("XLMRobertaXLForSequenceClassification"),cBo=o(" (XLM-RoBERTa-XL model)"),fBo=l(),Nb=a("li"),Vme=a("strong"),mBo=o("xlnet"),gBo=o(" \u2014 "),lO=a("a"),hBo=o("XLNetForSequenceClassification"),pBo=o(" (XLNet model)"),_Bo=l(),qb=a("li"),Xme=a("strong"),uBo=o("yoso"),bBo=o(" \u2014 "),iO=a("a"),vBo=o("YosoForSequenceClassification"),FBo=o(" (YOSO model)"),TBo=l(),jb=a("p"),MBo=o("The model is set in evaluation mode by default using "),zme=a("code"),EBo=o("model.eval()"),CBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wme=a("code"),wBo=o("model.train()"),ABo=l(),F(Db.$$.fragment),jqe=l(),Vi=a("h2"),Gb=a("a"),Qme=a("span"),F(RL.$$.fragment),yBo=l(),Hme=a("span"),LBo=o("AutoModelForMultipleChoice"),Dqe=l(),Po=a("div"),F(PL.$$.fragment),xBo=l(),Xi=a("p"),$Bo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dO=a("a"),kBo=o("from_pretrained()"),SBo=o(" class method or the "),cO=a("a"),RBo=o("from_config()"),PBo=o(` class
method.`),BBo=l(),BL=a("p"),IBo=o("This class cannot be instantiated directly using "),Ume=a("code"),NBo=o("__init__()"),qBo=o(" (throws an error)."),jBo=l(),dt=a("div"),F(IL.$$.fragment),DBo=l(),Jme=a("p"),GBo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),OBo=l(),zi=a("p"),VBo=o(`Note:
Loading a model from its configuration file does `),Yme=a("strong"),XBo=o("not"),zBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fO=a("a"),WBo=o("from_pretrained()"),QBo=o(" to load the model weights."),HBo=l(),F(Ob.$$.fragment),UBo=l(),ro=a("div"),F(NL.$$.fragment),JBo=l(),Kme=a("p"),YBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KBo=l(),Pa=a("p"),ZBo=o("The model class to instantiate is selected based on the "),Zme=a("code"),eIo=o("model_type"),oIo=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),rIo=o("pretrained_model_name_or_path"),tIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),aIo=o("pretrained_model_name_or_path"),nIo=o(":"),sIo=l(),K=a("ul"),Vb=a("li"),rge=a("strong"),lIo=o("albert"),iIo=o(" \u2014 "),mO=a("a"),dIo=o("AlbertForMultipleChoice"),cIo=o(" (ALBERT model)"),fIo=l(),Xb=a("li"),tge=a("strong"),mIo=o("bert"),gIo=o(" \u2014 "),gO=a("a"),hIo=o("BertForMultipleChoice"),pIo=o(" (BERT model)"),_Io=l(),zb=a("li"),age=a("strong"),uIo=o("big_bird"),bIo=o(" \u2014 "),hO=a("a"),vIo=o("BigBirdForMultipleChoice"),FIo=o(" (BigBird model)"),TIo=l(),Wb=a("li"),nge=a("strong"),MIo=o("camembert"),EIo=o(" \u2014 "),pO=a("a"),CIo=o("CamembertForMultipleChoice"),wIo=o(" (CamemBERT model)"),AIo=l(),Qb=a("li"),sge=a("strong"),yIo=o("canine"),LIo=o(" \u2014 "),_O=a("a"),xIo=o("CanineForMultipleChoice"),$Io=o(" (Canine model)"),kIo=l(),Hb=a("li"),lge=a("strong"),SIo=o("convbert"),RIo=o(" \u2014 "),uO=a("a"),PIo=o("ConvBertForMultipleChoice"),BIo=o(" (ConvBERT model)"),IIo=l(),Ub=a("li"),ige=a("strong"),NIo=o("data2vec-text"),qIo=o(" \u2014 "),bO=a("a"),jIo=o("Data2VecTextForMultipleChoice"),DIo=o(" (Data2VecText model)"),GIo=l(),Jb=a("li"),dge=a("strong"),OIo=o("deberta-v2"),VIo=o(" \u2014 "),vO=a("a"),XIo=o("DebertaV2ForMultipleChoice"),zIo=o(" (DeBERTa-v2 model)"),WIo=l(),Yb=a("li"),cge=a("strong"),QIo=o("distilbert"),HIo=o(" \u2014 "),FO=a("a"),UIo=o("DistilBertForMultipleChoice"),JIo=o(" (DistilBERT model)"),YIo=l(),Kb=a("li"),fge=a("strong"),KIo=o("electra"),ZIo=o(" \u2014 "),TO=a("a"),eNo=o("ElectraForMultipleChoice"),oNo=o(" (ELECTRA model)"),rNo=l(),Zb=a("li"),mge=a("strong"),tNo=o("flaubert"),aNo=o(" \u2014 "),MO=a("a"),nNo=o("FlaubertForMultipleChoice"),sNo=o(" (FlauBERT model)"),lNo=l(),e4=a("li"),gge=a("strong"),iNo=o("fnet"),dNo=o(" \u2014 "),EO=a("a"),cNo=o("FNetForMultipleChoice"),fNo=o(" (FNet model)"),mNo=l(),o4=a("li"),hge=a("strong"),gNo=o("funnel"),hNo=o(" \u2014 "),CO=a("a"),pNo=o("FunnelForMultipleChoice"),_No=o(" (Funnel Transformer model)"),uNo=l(),r4=a("li"),pge=a("strong"),bNo=o("ibert"),vNo=o(" \u2014 "),wO=a("a"),FNo=o("IBertForMultipleChoice"),TNo=o(" (I-BERT model)"),MNo=l(),t4=a("li"),_ge=a("strong"),ENo=o("longformer"),CNo=o(" \u2014 "),AO=a("a"),wNo=o("LongformerForMultipleChoice"),ANo=o(" (Longformer model)"),yNo=l(),a4=a("li"),uge=a("strong"),LNo=o("megatron-bert"),xNo=o(" \u2014 "),yO=a("a"),$No=o("MegatronBertForMultipleChoice"),kNo=o(" (MegatronBert model)"),SNo=l(),n4=a("li"),bge=a("strong"),RNo=o("mobilebert"),PNo=o(" \u2014 "),LO=a("a"),BNo=o("MobileBertForMultipleChoice"),INo=o(" (MobileBERT model)"),NNo=l(),s4=a("li"),vge=a("strong"),qNo=o("mpnet"),jNo=o(" \u2014 "),xO=a("a"),DNo=o("MPNetForMultipleChoice"),GNo=o(" (MPNet model)"),ONo=l(),l4=a("li"),Fge=a("strong"),VNo=o("nystromformer"),XNo=o(" \u2014 "),$O=a("a"),zNo=o("NystromformerForMultipleChoice"),WNo=o(" (Nystromformer model)"),QNo=l(),i4=a("li"),Tge=a("strong"),HNo=o("qdqbert"),UNo=o(" \u2014 "),kO=a("a"),JNo=o("QDQBertForMultipleChoice"),YNo=o(" (QDQBert model)"),KNo=l(),d4=a("li"),Mge=a("strong"),ZNo=o("rembert"),eqo=o(" \u2014 "),SO=a("a"),oqo=o("RemBertForMultipleChoice"),rqo=o(" (RemBERT model)"),tqo=l(),c4=a("li"),Ege=a("strong"),aqo=o("roberta"),nqo=o(" \u2014 "),RO=a("a"),sqo=o("RobertaForMultipleChoice"),lqo=o(" (RoBERTa model)"),iqo=l(),f4=a("li"),Cge=a("strong"),dqo=o("roformer"),cqo=o(" \u2014 "),PO=a("a"),fqo=o("RoFormerForMultipleChoice"),mqo=o(" (RoFormer model)"),gqo=l(),m4=a("li"),wge=a("strong"),hqo=o("squeezebert"),pqo=o(" \u2014 "),BO=a("a"),_qo=o("SqueezeBertForMultipleChoice"),uqo=o(" (SqueezeBERT model)"),bqo=l(),g4=a("li"),Age=a("strong"),vqo=o("xlm"),Fqo=o(" \u2014 "),IO=a("a"),Tqo=o("XLMForMultipleChoice"),Mqo=o(" (XLM model)"),Eqo=l(),h4=a("li"),yge=a("strong"),Cqo=o("xlm-roberta"),wqo=o(" \u2014 "),NO=a("a"),Aqo=o("XLMRobertaForMultipleChoice"),yqo=o(" (XLM-RoBERTa model)"),Lqo=l(),p4=a("li"),Lge=a("strong"),xqo=o("xlm-roberta-xl"),$qo=o(" \u2014 "),qO=a("a"),kqo=o("XLMRobertaXLForMultipleChoice"),Sqo=o(" (XLM-RoBERTa-XL model)"),Rqo=l(),_4=a("li"),xge=a("strong"),Pqo=o("xlnet"),Bqo=o(" \u2014 "),jO=a("a"),Iqo=o("XLNetForMultipleChoice"),Nqo=o(" (XLNet model)"),qqo=l(),u4=a("li"),$ge=a("strong"),jqo=o("yoso"),Dqo=o(" \u2014 "),DO=a("a"),Gqo=o("YosoForMultipleChoice"),Oqo=o(" (YOSO model)"),Vqo=l(),b4=a("p"),Xqo=o("The model is set in evaluation mode by default using "),kge=a("code"),zqo=o("model.eval()"),Wqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=a("code"),Qqo=o("model.train()"),Hqo=l(),F(v4.$$.fragment),Gqe=l(),Wi=a("h2"),F4=a("a"),Rge=a("span"),F(qL.$$.fragment),Uqo=l(),Pge=a("span"),Jqo=o("AutoModelForNextSentencePrediction"),Oqe=l(),Bo=a("div"),F(jL.$$.fragment),Yqo=l(),Qi=a("p"),Kqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GO=a("a"),Zqo=o("from_pretrained()"),ejo=o(" class method or the "),OO=a("a"),ojo=o("from_config()"),rjo=o(` class
method.`),tjo=l(),DL=a("p"),ajo=o("This class cannot be instantiated directly using "),Bge=a("code"),njo=o("__init__()"),sjo=o(" (throws an error)."),ljo=l(),ct=a("div"),F(GL.$$.fragment),ijo=l(),Ige=a("p"),djo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cjo=l(),Hi=a("p"),fjo=o(`Note:
Loading a model from its configuration file does `),Nge=a("strong"),mjo=o("not"),gjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),hjo=o("from_pretrained()"),pjo=o(" to load the model weights."),_jo=l(),F(T4.$$.fragment),ujo=l(),to=a("div"),F(OL.$$.fragment),bjo=l(),qge=a("p"),vjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Fjo=l(),Ba=a("p"),Tjo=o("The model class to instantiate is selected based on the "),jge=a("code"),Mjo=o("model_type"),Ejo=o(` property of the config object (either
passed as an argument or loaded from `),Dge=a("code"),Cjo=o("pretrained_model_name_or_path"),wjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=a("code"),Ajo=o("pretrained_model_name_or_path"),yjo=o(":"),Ljo=l(),Yr=a("ul"),M4=a("li"),Oge=a("strong"),xjo=o("bert"),$jo=o(" \u2014 "),XO=a("a"),kjo=o("BertForNextSentencePrediction"),Sjo=o(" (BERT model)"),Rjo=l(),E4=a("li"),Vge=a("strong"),Pjo=o("fnet"),Bjo=o(" \u2014 "),zO=a("a"),Ijo=o("FNetForNextSentencePrediction"),Njo=o(" (FNet model)"),qjo=l(),C4=a("li"),Xge=a("strong"),jjo=o("megatron-bert"),Djo=o(" \u2014 "),WO=a("a"),Gjo=o("MegatronBertForNextSentencePrediction"),Ojo=o(" (MegatronBert model)"),Vjo=l(),w4=a("li"),zge=a("strong"),Xjo=o("mobilebert"),zjo=o(" \u2014 "),QO=a("a"),Wjo=o("MobileBertForNextSentencePrediction"),Qjo=o(" (MobileBERT model)"),Hjo=l(),A4=a("li"),Wge=a("strong"),Ujo=o("qdqbert"),Jjo=o(" \u2014 "),HO=a("a"),Yjo=o("QDQBertForNextSentencePrediction"),Kjo=o(" (QDQBert model)"),Zjo=l(),y4=a("p"),eDo=o("The model is set in evaluation mode by default using "),Qge=a("code"),oDo=o("model.eval()"),rDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=a("code"),tDo=o("model.train()"),aDo=l(),F(L4.$$.fragment),Vqe=l(),Ui=a("h2"),x4=a("a"),Uge=a("span"),F(VL.$$.fragment),nDo=l(),Jge=a("span"),sDo=o("AutoModelForTokenClassification"),Xqe=l(),Io=a("div"),F(XL.$$.fragment),lDo=l(),Ji=a("p"),iDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UO=a("a"),dDo=o("from_pretrained()"),cDo=o(" class method or the "),JO=a("a"),fDo=o("from_config()"),mDo=o(` class
method.`),gDo=l(),zL=a("p"),hDo=o("This class cannot be instantiated directly using "),Yge=a("code"),pDo=o("__init__()"),_Do=o(" (throws an error)."),uDo=l(),ft=a("div"),F(WL.$$.fragment),bDo=l(),Kge=a("p"),vDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FDo=l(),Yi=a("p"),TDo=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),MDo=o("not"),EDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=a("a"),CDo=o("from_pretrained()"),wDo=o(" to load the model weights."),ADo=l(),F($4.$$.fragment),yDo=l(),ao=a("div"),F(QL.$$.fragment),LDo=l(),ehe=a("p"),xDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$Do=l(),Ia=a("p"),kDo=o("The model class to instantiate is selected based on the "),ohe=a("code"),SDo=o("model_type"),RDo=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),PDo=o("pretrained_model_name_or_path"),BDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),IDo=o("pretrained_model_name_or_path"),NDo=o(":"),qDo=l(),H=a("ul"),k4=a("li"),ahe=a("strong"),jDo=o("albert"),DDo=o(" \u2014 "),KO=a("a"),GDo=o("AlbertForTokenClassification"),ODo=o(" (ALBERT model)"),VDo=l(),S4=a("li"),nhe=a("strong"),XDo=o("bert"),zDo=o(" \u2014 "),ZO=a("a"),WDo=o("BertForTokenClassification"),QDo=o(" (BERT model)"),HDo=l(),R4=a("li"),she=a("strong"),UDo=o("big_bird"),JDo=o(" \u2014 "),eV=a("a"),YDo=o("BigBirdForTokenClassification"),KDo=o(" (BigBird model)"),ZDo=l(),P4=a("li"),lhe=a("strong"),eGo=o("camembert"),oGo=o(" \u2014 "),oV=a("a"),rGo=o("CamembertForTokenClassification"),tGo=o(" (CamemBERT model)"),aGo=l(),B4=a("li"),ihe=a("strong"),nGo=o("canine"),sGo=o(" \u2014 "),rV=a("a"),lGo=o("CanineForTokenClassification"),iGo=o(" (Canine model)"),dGo=l(),I4=a("li"),dhe=a("strong"),cGo=o("convbert"),fGo=o(" \u2014 "),tV=a("a"),mGo=o("ConvBertForTokenClassification"),gGo=o(" (ConvBERT model)"),hGo=l(),N4=a("li"),che=a("strong"),pGo=o("data2vec-text"),_Go=o(" \u2014 "),aV=a("a"),uGo=o("Data2VecTextForTokenClassification"),bGo=o(" (Data2VecText model)"),vGo=l(),q4=a("li"),fhe=a("strong"),FGo=o("deberta"),TGo=o(" \u2014 "),nV=a("a"),MGo=o("DebertaForTokenClassification"),EGo=o(" (DeBERTa model)"),CGo=l(),j4=a("li"),mhe=a("strong"),wGo=o("deberta-v2"),AGo=o(" \u2014 "),sV=a("a"),yGo=o("DebertaV2ForTokenClassification"),LGo=o(" (DeBERTa-v2 model)"),xGo=l(),D4=a("li"),ghe=a("strong"),$Go=o("distilbert"),kGo=o(" \u2014 "),lV=a("a"),SGo=o("DistilBertForTokenClassification"),RGo=o(" (DistilBERT model)"),PGo=l(),G4=a("li"),hhe=a("strong"),BGo=o("electra"),IGo=o(" \u2014 "),iV=a("a"),NGo=o("ElectraForTokenClassification"),qGo=o(" (ELECTRA model)"),jGo=l(),O4=a("li"),phe=a("strong"),DGo=o("flaubert"),GGo=o(" \u2014 "),dV=a("a"),OGo=o("FlaubertForTokenClassification"),VGo=o(" (FlauBERT model)"),XGo=l(),V4=a("li"),_he=a("strong"),zGo=o("fnet"),WGo=o(" \u2014 "),cV=a("a"),QGo=o("FNetForTokenClassification"),HGo=o(" (FNet model)"),UGo=l(),X4=a("li"),uhe=a("strong"),JGo=o("funnel"),YGo=o(" \u2014 "),fV=a("a"),KGo=o("FunnelForTokenClassification"),ZGo=o(" (Funnel Transformer model)"),eOo=l(),z4=a("li"),bhe=a("strong"),oOo=o("gpt2"),rOo=o(" \u2014 "),mV=a("a"),tOo=o("GPT2ForTokenClassification"),aOo=o(" (OpenAI GPT-2 model)"),nOo=l(),W4=a("li"),vhe=a("strong"),sOo=o("ibert"),lOo=o(" \u2014 "),gV=a("a"),iOo=o("IBertForTokenClassification"),dOo=o(" (I-BERT model)"),cOo=l(),Q4=a("li"),Fhe=a("strong"),fOo=o("layoutlm"),mOo=o(" \u2014 "),hV=a("a"),gOo=o("LayoutLMForTokenClassification"),hOo=o(" (LayoutLM model)"),pOo=l(),H4=a("li"),The=a("strong"),_Oo=o("layoutlmv2"),uOo=o(" \u2014 "),pV=a("a"),bOo=o("LayoutLMv2ForTokenClassification"),vOo=o(" (LayoutLMv2 model)"),FOo=l(),U4=a("li"),Mhe=a("strong"),TOo=o("layoutlmv3"),MOo=o(" \u2014 "),_V=a("a"),EOo=o("LayoutLMv3ForTokenClassification"),COo=o(" (LayoutLMv3 model)"),wOo=l(),J4=a("li"),Ehe=a("strong"),AOo=o("longformer"),yOo=o(" \u2014 "),uV=a("a"),LOo=o("LongformerForTokenClassification"),xOo=o(" (Longformer model)"),$Oo=l(),Y4=a("li"),Che=a("strong"),kOo=o("megatron-bert"),SOo=o(" \u2014 "),bV=a("a"),ROo=o("MegatronBertForTokenClassification"),POo=o(" (MegatronBert model)"),BOo=l(),K4=a("li"),whe=a("strong"),IOo=o("mobilebert"),NOo=o(" \u2014 "),vV=a("a"),qOo=o("MobileBertForTokenClassification"),jOo=o(" (MobileBERT model)"),DOo=l(),Z4=a("li"),Ahe=a("strong"),GOo=o("mpnet"),OOo=o(" \u2014 "),FV=a("a"),VOo=o("MPNetForTokenClassification"),XOo=o(" (MPNet model)"),zOo=l(),ev=a("li"),yhe=a("strong"),WOo=o("nystromformer"),QOo=o(" \u2014 "),TV=a("a"),HOo=o("NystromformerForTokenClassification"),UOo=o(" (Nystromformer model)"),JOo=l(),ov=a("li"),Lhe=a("strong"),YOo=o("qdqbert"),KOo=o(" \u2014 "),MV=a("a"),ZOo=o("QDQBertForTokenClassification"),eVo=o(" (QDQBert model)"),oVo=l(),rv=a("li"),xhe=a("strong"),rVo=o("rembert"),tVo=o(" \u2014 "),EV=a("a"),aVo=o("RemBertForTokenClassification"),nVo=o(" (RemBERT model)"),sVo=l(),tv=a("li"),$he=a("strong"),lVo=o("roberta"),iVo=o(" \u2014 "),CV=a("a"),dVo=o("RobertaForTokenClassification"),cVo=o(" (RoBERTa model)"),fVo=l(),av=a("li"),khe=a("strong"),mVo=o("roformer"),gVo=o(" \u2014 "),wV=a("a"),hVo=o("RoFormerForTokenClassification"),pVo=o(" (RoFormer model)"),_Vo=l(),nv=a("li"),She=a("strong"),uVo=o("squeezebert"),bVo=o(" \u2014 "),AV=a("a"),vVo=o("SqueezeBertForTokenClassification"),FVo=o(" (SqueezeBERT model)"),TVo=l(),sv=a("li"),Rhe=a("strong"),MVo=o("xlm"),EVo=o(" \u2014 "),yV=a("a"),CVo=o("XLMForTokenClassification"),wVo=o(" (XLM model)"),AVo=l(),lv=a("li"),Phe=a("strong"),yVo=o("xlm-roberta"),LVo=o(" \u2014 "),LV=a("a"),xVo=o("XLMRobertaForTokenClassification"),$Vo=o(" (XLM-RoBERTa model)"),kVo=l(),iv=a("li"),Bhe=a("strong"),SVo=o("xlm-roberta-xl"),RVo=o(" \u2014 "),xV=a("a"),PVo=o("XLMRobertaXLForTokenClassification"),BVo=o(" (XLM-RoBERTa-XL model)"),IVo=l(),dv=a("li"),Ihe=a("strong"),NVo=o("xlnet"),qVo=o(" \u2014 "),$V=a("a"),jVo=o("XLNetForTokenClassification"),DVo=o(" (XLNet model)"),GVo=l(),cv=a("li"),Nhe=a("strong"),OVo=o("yoso"),VVo=o(" \u2014 "),kV=a("a"),XVo=o("YosoForTokenClassification"),zVo=o(" (YOSO model)"),WVo=l(),fv=a("p"),QVo=o("The model is set in evaluation mode by default using "),qhe=a("code"),HVo=o("model.eval()"),UVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=a("code"),JVo=o("model.train()"),YVo=l(),F(mv.$$.fragment),zqe=l(),Ki=a("h2"),gv=a("a"),Dhe=a("span"),F(HL.$$.fragment),KVo=l(),Ghe=a("span"),ZVo=o("AutoModelForQuestionAnswering"),Wqe=l(),No=a("div"),F(UL.$$.fragment),eXo=l(),Zi=a("p"),oXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SV=a("a"),rXo=o("from_pretrained()"),tXo=o(" class method or the "),RV=a("a"),aXo=o("from_config()"),nXo=o(` class
method.`),sXo=l(),JL=a("p"),lXo=o("This class cannot be instantiated directly using "),Ohe=a("code"),iXo=o("__init__()"),dXo=o(" (throws an error)."),cXo=l(),mt=a("div"),F(YL.$$.fragment),fXo=l(),Vhe=a("p"),mXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gXo=l(),ed=a("p"),hXo=o(`Note:
Loading a model from its configuration file does `),Xhe=a("strong"),pXo=o("not"),_Xo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),uXo=o("from_pretrained()"),bXo=o(" to load the model weights."),vXo=l(),F(hv.$$.fragment),FXo=l(),no=a("div"),F(KL.$$.fragment),TXo=l(),zhe=a("p"),MXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),EXo=l(),Na=a("p"),CXo=o("The model class to instantiate is selected based on the "),Whe=a("code"),wXo=o("model_type"),AXo=o(` property of the config object (either
passed as an argument or loaded from `),Qhe=a("code"),yXo=o("pretrained_model_name_or_path"),LXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),xXo=o("pretrained_model_name_or_path"),$Xo=o(":"),kXo=l(),V=a("ul"),pv=a("li"),Uhe=a("strong"),SXo=o("albert"),RXo=o(" \u2014 "),BV=a("a"),PXo=o("AlbertForQuestionAnswering"),BXo=o(" (ALBERT model)"),IXo=l(),_v=a("li"),Jhe=a("strong"),NXo=o("bart"),qXo=o(" \u2014 "),IV=a("a"),jXo=o("BartForQuestionAnswering"),DXo=o(" (BART model)"),GXo=l(),uv=a("li"),Yhe=a("strong"),OXo=o("bert"),VXo=o(" \u2014 "),NV=a("a"),XXo=o("BertForQuestionAnswering"),zXo=o(" (BERT model)"),WXo=l(),bv=a("li"),Khe=a("strong"),QXo=o("big_bird"),HXo=o(" \u2014 "),qV=a("a"),UXo=o("BigBirdForQuestionAnswering"),JXo=o(" (BigBird model)"),YXo=l(),vv=a("li"),Zhe=a("strong"),KXo=o("bigbird_pegasus"),ZXo=o(" \u2014 "),jV=a("a"),ezo=o("BigBirdPegasusForQuestionAnswering"),ozo=o(" (BigBirdPegasus model)"),rzo=l(),Fv=a("li"),epe=a("strong"),tzo=o("camembert"),azo=o(" \u2014 "),DV=a("a"),nzo=o("CamembertForQuestionAnswering"),szo=o(" (CamemBERT model)"),lzo=l(),Tv=a("li"),ope=a("strong"),izo=o("canine"),dzo=o(" \u2014 "),GV=a("a"),czo=o("CanineForQuestionAnswering"),fzo=o(" (Canine model)"),mzo=l(),Mv=a("li"),rpe=a("strong"),gzo=o("convbert"),hzo=o(" \u2014 "),OV=a("a"),pzo=o("ConvBertForQuestionAnswering"),_zo=o(" (ConvBERT model)"),uzo=l(),Ev=a("li"),tpe=a("strong"),bzo=o("data2vec-text"),vzo=o(" \u2014 "),VV=a("a"),Fzo=o("Data2VecTextForQuestionAnswering"),Tzo=o(" (Data2VecText model)"),Mzo=l(),Cv=a("li"),ape=a("strong"),Ezo=o("deberta"),Czo=o(" \u2014 "),XV=a("a"),wzo=o("DebertaForQuestionAnswering"),Azo=o(" (DeBERTa model)"),yzo=l(),wv=a("li"),npe=a("strong"),Lzo=o("deberta-v2"),xzo=o(" \u2014 "),zV=a("a"),$zo=o("DebertaV2ForQuestionAnswering"),kzo=o(" (DeBERTa-v2 model)"),Szo=l(),Av=a("li"),spe=a("strong"),Rzo=o("distilbert"),Pzo=o(" \u2014 "),WV=a("a"),Bzo=o("DistilBertForQuestionAnswering"),Izo=o(" (DistilBERT model)"),Nzo=l(),yv=a("li"),lpe=a("strong"),qzo=o("electra"),jzo=o(" \u2014 "),QV=a("a"),Dzo=o("ElectraForQuestionAnswering"),Gzo=o(" (ELECTRA model)"),Ozo=l(),Lv=a("li"),ipe=a("strong"),Vzo=o("flaubert"),Xzo=o(" \u2014 "),HV=a("a"),zzo=o("FlaubertForQuestionAnsweringSimple"),Wzo=o(" (FlauBERT model)"),Qzo=l(),xv=a("li"),dpe=a("strong"),Hzo=o("fnet"),Uzo=o(" \u2014 "),UV=a("a"),Jzo=o("FNetForQuestionAnswering"),Yzo=o(" (FNet model)"),Kzo=l(),$v=a("li"),cpe=a("strong"),Zzo=o("funnel"),eWo=o(" \u2014 "),JV=a("a"),oWo=o("FunnelForQuestionAnswering"),rWo=o(" (Funnel Transformer model)"),tWo=l(),kv=a("li"),fpe=a("strong"),aWo=o("gptj"),nWo=o(" \u2014 "),YV=a("a"),sWo=o("GPTJForQuestionAnswering"),lWo=o(" (GPT-J model)"),iWo=l(),Sv=a("li"),mpe=a("strong"),dWo=o("ibert"),cWo=o(" \u2014 "),KV=a("a"),fWo=o("IBertForQuestionAnswering"),mWo=o(" (I-BERT model)"),gWo=l(),Rv=a("li"),gpe=a("strong"),hWo=o("layoutlmv2"),pWo=o(" \u2014 "),ZV=a("a"),_Wo=o("LayoutLMv2ForQuestionAnswering"),uWo=o(" (LayoutLMv2 model)"),bWo=l(),Pv=a("li"),hpe=a("strong"),vWo=o("layoutlmv3"),FWo=o(" \u2014 "),eX=a("a"),TWo=o("LayoutLMv3ForQuestionAnswering"),MWo=o(" (LayoutLMv3 model)"),EWo=l(),Bv=a("li"),ppe=a("strong"),CWo=o("led"),wWo=o(" \u2014 "),oX=a("a"),AWo=o("LEDForQuestionAnswering"),yWo=o(" (LED model)"),LWo=l(),Iv=a("li"),_pe=a("strong"),xWo=o("longformer"),$Wo=o(" \u2014 "),rX=a("a"),kWo=o("LongformerForQuestionAnswering"),SWo=o(" (Longformer model)"),RWo=l(),Nv=a("li"),upe=a("strong"),PWo=o("lxmert"),BWo=o(" \u2014 "),tX=a("a"),IWo=o("LxmertForQuestionAnswering"),NWo=o(" (LXMERT model)"),qWo=l(),qv=a("li"),bpe=a("strong"),jWo=o("mbart"),DWo=o(" \u2014 "),aX=a("a"),GWo=o("MBartForQuestionAnswering"),OWo=o(" (mBART model)"),VWo=l(),jv=a("li"),vpe=a("strong"),XWo=o("megatron-bert"),zWo=o(" \u2014 "),nX=a("a"),WWo=o("MegatronBertForQuestionAnswering"),QWo=o(" (MegatronBert model)"),HWo=l(),Dv=a("li"),Fpe=a("strong"),UWo=o("mobilebert"),JWo=o(" \u2014 "),sX=a("a"),YWo=o("MobileBertForQuestionAnswering"),KWo=o(" (MobileBERT model)"),ZWo=l(),Gv=a("li"),Tpe=a("strong"),eQo=o("mpnet"),oQo=o(" \u2014 "),lX=a("a"),rQo=o("MPNetForQuestionAnswering"),tQo=o(" (MPNet model)"),aQo=l(),Ov=a("li"),Mpe=a("strong"),nQo=o("nystromformer"),sQo=o(" \u2014 "),iX=a("a"),lQo=o("NystromformerForQuestionAnswering"),iQo=o(" (Nystromformer model)"),dQo=l(),Vv=a("li"),Epe=a("strong"),cQo=o("qdqbert"),fQo=o(" \u2014 "),dX=a("a"),mQo=o("QDQBertForQuestionAnswering"),gQo=o(" (QDQBert model)"),hQo=l(),Xv=a("li"),Cpe=a("strong"),pQo=o("reformer"),_Qo=o(" \u2014 "),cX=a("a"),uQo=o("ReformerForQuestionAnswering"),bQo=o(" (Reformer model)"),vQo=l(),zv=a("li"),wpe=a("strong"),FQo=o("rembert"),TQo=o(" \u2014 "),fX=a("a"),MQo=o("RemBertForQuestionAnswering"),EQo=o(" (RemBERT model)"),CQo=l(),Wv=a("li"),Ape=a("strong"),wQo=o("roberta"),AQo=o(" \u2014 "),mX=a("a"),yQo=o("RobertaForQuestionAnswering"),LQo=o(" (RoBERTa model)"),xQo=l(),Qv=a("li"),ype=a("strong"),$Qo=o("roformer"),kQo=o(" \u2014 "),gX=a("a"),SQo=o("RoFormerForQuestionAnswering"),RQo=o(" (RoFormer model)"),PQo=l(),Hv=a("li"),Lpe=a("strong"),BQo=o("splinter"),IQo=o(" \u2014 "),hX=a("a"),NQo=o("SplinterForQuestionAnswering"),qQo=o(" (Splinter model)"),jQo=l(),Uv=a("li"),xpe=a("strong"),DQo=o("squeezebert"),GQo=o(" \u2014 "),pX=a("a"),OQo=o("SqueezeBertForQuestionAnswering"),VQo=o(" (SqueezeBERT model)"),XQo=l(),Jv=a("li"),$pe=a("strong"),zQo=o("xlm"),WQo=o(" \u2014 "),_X=a("a"),QQo=o("XLMForQuestionAnsweringSimple"),HQo=o(" (XLM model)"),UQo=l(),Yv=a("li"),kpe=a("strong"),JQo=o("xlm-roberta"),YQo=o(" \u2014 "),uX=a("a"),KQo=o("XLMRobertaForQuestionAnswering"),ZQo=o(" (XLM-RoBERTa model)"),eHo=l(),Kv=a("li"),Spe=a("strong"),oHo=o("xlm-roberta-xl"),rHo=o(" \u2014 "),bX=a("a"),tHo=o("XLMRobertaXLForQuestionAnswering"),aHo=o(" (XLM-RoBERTa-XL model)"),nHo=l(),Zv=a("li"),Rpe=a("strong"),sHo=o("xlnet"),lHo=o(" \u2014 "),vX=a("a"),iHo=o("XLNetForQuestionAnsweringSimple"),dHo=o(" (XLNet model)"),cHo=l(),e0=a("li"),Ppe=a("strong"),fHo=o("yoso"),mHo=o(" \u2014 "),FX=a("a"),gHo=o("YosoForQuestionAnswering"),hHo=o(" (YOSO model)"),pHo=l(),o0=a("p"),_Ho=o("The model is set in evaluation mode by default using "),Bpe=a("code"),uHo=o("model.eval()"),bHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=a("code"),vHo=o("model.train()"),FHo=l(),F(r0.$$.fragment),Qqe=l(),od=a("h2"),t0=a("a"),Npe=a("span"),F(ZL.$$.fragment),THo=l(),qpe=a("span"),MHo=o("AutoModelForTableQuestionAnswering"),Hqe=l(),qo=a("div"),F(e8.$$.fragment),EHo=l(),rd=a("p"),CHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TX=a("a"),wHo=o("from_pretrained()"),AHo=o(" class method or the "),MX=a("a"),yHo=o("from_config()"),LHo=o(` class
method.`),xHo=l(),o8=a("p"),$Ho=o("This class cannot be instantiated directly using "),jpe=a("code"),kHo=o("__init__()"),SHo=o(" (throws an error)."),RHo=l(),gt=a("div"),F(r8.$$.fragment),PHo=l(),Dpe=a("p"),BHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),IHo=l(),td=a("p"),NHo=o(`Note:
Loading a model from its configuration file does `),Gpe=a("strong"),qHo=o("not"),jHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=a("a"),DHo=o("from_pretrained()"),GHo=o(" to load the model weights."),OHo=l(),F(a0.$$.fragment),VHo=l(),so=a("div"),F(t8.$$.fragment),XHo=l(),Ope=a("p"),zHo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),WHo=l(),qa=a("p"),QHo=o("The model class to instantiate is selected based on the "),Vpe=a("code"),HHo=o("model_type"),UHo=o(` property of the config object (either
passed as an argument or loaded from `),Xpe=a("code"),JHo=o("pretrained_model_name_or_path"),YHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=a("code"),KHo=o("pretrained_model_name_or_path"),ZHo=o(":"),eUo=l(),Wpe=a("ul"),n0=a("li"),Qpe=a("strong"),oUo=o("tapas"),rUo=o(" \u2014 "),CX=a("a"),tUo=o("TapasForQuestionAnswering"),aUo=o(" (TAPAS model)"),nUo=l(),s0=a("p"),sUo=o("The model is set in evaluation mode by default using "),Hpe=a("code"),lUo=o("model.eval()"),iUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=a("code"),dUo=o("model.train()"),cUo=l(),F(l0.$$.fragment),Uqe=l(),ad=a("h2"),i0=a("a"),Jpe=a("span"),F(a8.$$.fragment),fUo=l(),Ype=a("span"),mUo=o("AutoModelForImageClassification"),Jqe=l(),jo=a("div"),F(n8.$$.fragment),gUo=l(),nd=a("p"),hUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wX=a("a"),pUo=o("from_pretrained()"),_Uo=o(" class method or the "),AX=a("a"),uUo=o("from_config()"),bUo=o(` class
method.`),vUo=l(),s8=a("p"),FUo=o("This class cannot be instantiated directly using "),Kpe=a("code"),TUo=o("__init__()"),MUo=o(" (throws an error)."),EUo=l(),ht=a("div"),F(l8.$$.fragment),CUo=l(),Zpe=a("p"),wUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),AUo=l(),sd=a("p"),yUo=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),LUo=o("not"),xUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=a("a"),$Uo=o("from_pretrained()"),kUo=o(" to load the model weights."),SUo=l(),F(d0.$$.fragment),RUo=l(),lo=a("div"),F(i8.$$.fragment),PUo=l(),o_e=a("p"),BUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),IUo=l(),ja=a("p"),NUo=o("The model class to instantiate is selected based on the "),r_e=a("code"),qUo=o("model_type"),jUo=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),DUo=o("pretrained_model_name_or_path"),GUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),OUo=o("pretrained_model_name_or_path"),VUo=o(":"),XUo=l(),Fe=a("ul"),c0=a("li"),n_e=a("strong"),zUo=o("beit"),WUo=o(" \u2014 "),LX=a("a"),QUo=o("BeitForImageClassification"),HUo=o(" (BEiT model)"),UUo=l(),f0=a("li"),s_e=a("strong"),JUo=o("convnext"),YUo=o(" \u2014 "),xX=a("a"),KUo=o("ConvNextForImageClassification"),ZUo=o(" (ConvNext model)"),eJo=l(),m0=a("li"),l_e=a("strong"),oJo=o("cvt"),rJo=o(" \u2014 "),$X=a("a"),tJo=o("CvtForImageClassification"),aJo=o(" (CvT model)"),nJo=l(),g0=a("li"),i_e=a("strong"),sJo=o("data2vec-vision"),lJo=o(" \u2014 "),kX=a("a"),iJo=o("Data2VecVisionForImageClassification"),dJo=o(" (Data2VecVision model)"),cJo=l(),Bs=a("li"),d_e=a("strong"),fJo=o("deit"),mJo=o(" \u2014 "),SX=a("a"),gJo=o("DeiTForImageClassification"),hJo=o(" or "),RX=a("a"),pJo=o("DeiTForImageClassificationWithTeacher"),_Jo=o(" (DeiT model)"),uJo=l(),h0=a("li"),c_e=a("strong"),bJo=o("imagegpt"),vJo=o(" \u2014 "),PX=a("a"),FJo=o("ImageGPTForImageClassification"),TJo=o(" (ImageGPT model)"),MJo=l(),pt=a("li"),f_e=a("strong"),EJo=o("perceiver"),CJo=o(" \u2014 "),BX=a("a"),wJo=o("PerceiverForImageClassificationLearned"),AJo=o(" or "),IX=a("a"),yJo=o("PerceiverForImageClassificationFourier"),LJo=o(" or "),NX=a("a"),xJo=o("PerceiverForImageClassificationConvProcessing"),$Jo=o(" (Perceiver model)"),kJo=l(),p0=a("li"),m_e=a("strong"),SJo=o("poolformer"),RJo=o(" \u2014 "),qX=a("a"),PJo=o("PoolFormerForImageClassification"),BJo=o(" (PoolFormer model)"),IJo=l(),_0=a("li"),g_e=a("strong"),NJo=o("regnet"),qJo=o(" \u2014 "),jX=a("a"),jJo=o("RegNetForImageClassification"),DJo=o(" (RegNet model)"),GJo=l(),u0=a("li"),h_e=a("strong"),OJo=o("resnet"),VJo=o(" \u2014 "),DX=a("a"),XJo=o("ResNetForImageClassification"),zJo=o(" (ResNet model)"),WJo=l(),b0=a("li"),p_e=a("strong"),QJo=o("segformer"),HJo=o(" \u2014 "),GX=a("a"),UJo=o("SegformerForImageClassification"),JJo=o(" (SegFormer model)"),YJo=l(),v0=a("li"),__e=a("strong"),KJo=o("swin"),ZJo=o(" \u2014 "),OX=a("a"),eYo=o("SwinForImageClassification"),oYo=o(" (Swin model)"),rYo=l(),F0=a("li"),u_e=a("strong"),tYo=o("van"),aYo=o(" \u2014 "),VX=a("a"),nYo=o("VanForImageClassification"),sYo=o(" (VAN model)"),lYo=l(),T0=a("li"),b_e=a("strong"),iYo=o("vit"),dYo=o(" \u2014 "),XX=a("a"),cYo=o("ViTForImageClassification"),fYo=o(" (ViT model)"),mYo=l(),M0=a("p"),gYo=o("The model is set in evaluation mode by default using "),v_e=a("code"),hYo=o("model.eval()"),pYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=a("code"),_Yo=o("model.train()"),uYo=l(),F(E0.$$.fragment),Yqe=l(),ld=a("h2"),C0=a("a"),T_e=a("span"),F(d8.$$.fragment),bYo=l(),M_e=a("span"),vYo=o("AutoModelForVision2Seq"),Kqe=l(),Do=a("div"),F(c8.$$.fragment),FYo=l(),id=a("p"),TYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zX=a("a"),MYo=o("from_pretrained()"),EYo=o(" class method or the "),WX=a("a"),CYo=o("from_config()"),wYo=o(` class
method.`),AYo=l(),f8=a("p"),yYo=o("This class cannot be instantiated directly using "),E_e=a("code"),LYo=o("__init__()"),xYo=o(" (throws an error)."),$Yo=l(),_t=a("div"),F(m8.$$.fragment),kYo=l(),C_e=a("p"),SYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RYo=l(),dd=a("p"),PYo=o(`Note:
Loading a model from its configuration file does `),w_e=a("strong"),BYo=o("not"),IYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),NYo=o("from_pretrained()"),qYo=o(" to load the model weights."),jYo=l(),F(w0.$$.fragment),DYo=l(),io=a("div"),F(g8.$$.fragment),GYo=l(),A_e=a("p"),OYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VYo=l(),Da=a("p"),XYo=o("The model class to instantiate is selected based on the "),y_e=a("code"),zYo=o("model_type"),WYo=o(` property of the config object (either
passed as an argument or loaded from `),L_e=a("code"),QYo=o("pretrained_model_name_or_path"),HYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=a("code"),UYo=o("pretrained_model_name_or_path"),JYo=o(":"),YYo=l(),$_e=a("ul"),A0=a("li"),k_e=a("strong"),KYo=o("vision-encoder-decoder"),ZYo=o(" \u2014 "),HX=a("a"),eKo=o("VisionEncoderDecoderModel"),oKo=o(" (Vision Encoder decoder model)"),rKo=l(),y0=a("p"),tKo=o("The model is set in evaluation mode by default using "),S_e=a("code"),aKo=o("model.eval()"),nKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=a("code"),sKo=o("model.train()"),lKo=l(),F(L0.$$.fragment),Zqe=l(),cd=a("h2"),x0=a("a"),P_e=a("span"),F(h8.$$.fragment),iKo=l(),B_e=a("span"),dKo=o("AutoModelForAudioClassification"),eje=l(),Go=a("div"),F(p8.$$.fragment),cKo=l(),fd=a("p"),fKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),UX=a("a"),mKo=o("from_pretrained()"),gKo=o(" class method or the "),JX=a("a"),hKo=o("from_config()"),pKo=o(` class
method.`),_Ko=l(),_8=a("p"),uKo=o("This class cannot be instantiated directly using "),I_e=a("code"),bKo=o("__init__()"),vKo=o(" (throws an error)."),FKo=l(),ut=a("div"),F(u8.$$.fragment),TKo=l(),N_e=a("p"),MKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),EKo=l(),md=a("p"),CKo=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),wKo=o("not"),AKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),yKo=o("from_pretrained()"),LKo=o(" to load the model weights."),xKo=l(),F($0.$$.fragment),$Ko=l(),co=a("div"),F(b8.$$.fragment),kKo=l(),j_e=a("p"),SKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),RKo=l(),Ga=a("p"),PKo=o("The model class to instantiate is selected based on the "),D_e=a("code"),BKo=o("model_type"),IKo=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),NKo=o("pretrained_model_name_or_path"),qKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),jKo=o("pretrained_model_name_or_path"),DKo=o(":"),GKo=l(),Se=a("ul"),k0=a("li"),V_e=a("strong"),OKo=o("data2vec-audio"),VKo=o(" \u2014 "),KX=a("a"),XKo=o("Data2VecAudioForSequenceClassification"),zKo=o(" (Data2VecAudio model)"),WKo=l(),S0=a("li"),X_e=a("strong"),QKo=o("hubert"),HKo=o(" \u2014 "),ZX=a("a"),UKo=o("HubertForSequenceClassification"),JKo=o(" (Hubert model)"),YKo=l(),R0=a("li"),z_e=a("strong"),KKo=o("sew"),ZKo=o(" \u2014 "),ez=a("a"),eZo=o("SEWForSequenceClassification"),oZo=o(" (SEW model)"),rZo=l(),P0=a("li"),W_e=a("strong"),tZo=o("sew-d"),aZo=o(" \u2014 "),oz=a("a"),nZo=o("SEWDForSequenceClassification"),sZo=o(" (SEW-D model)"),lZo=l(),B0=a("li"),Q_e=a("strong"),iZo=o("unispeech"),dZo=o(" \u2014 "),rz=a("a"),cZo=o("UniSpeechForSequenceClassification"),fZo=o(" (UniSpeech model)"),mZo=l(),I0=a("li"),H_e=a("strong"),gZo=o("unispeech-sat"),hZo=o(" \u2014 "),tz=a("a"),pZo=o("UniSpeechSatForSequenceClassification"),_Zo=o(" (UniSpeechSat model)"),uZo=l(),N0=a("li"),U_e=a("strong"),bZo=o("wav2vec2"),vZo=o(" \u2014 "),az=a("a"),FZo=o("Wav2Vec2ForSequenceClassification"),TZo=o(" (Wav2Vec2 model)"),MZo=l(),q0=a("li"),J_e=a("strong"),EZo=o("wav2vec2-conformer"),CZo=o(" \u2014 "),nz=a("a"),wZo=o("Wav2Vec2ConformerForSequenceClassification"),AZo=o(" (Wav2Vec2-Conformer model)"),yZo=l(),j0=a("li"),Y_e=a("strong"),LZo=o("wavlm"),xZo=o(" \u2014 "),sz=a("a"),$Zo=o("WavLMForSequenceClassification"),kZo=o(" (WavLM model)"),SZo=l(),D0=a("p"),RZo=o("The model is set in evaluation mode by default using "),K_e=a("code"),PZo=o("model.eval()"),BZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=a("code"),IZo=o("model.train()"),NZo=l(),F(G0.$$.fragment),oje=l(),gd=a("h2"),O0=a("a"),eue=a("span"),F(v8.$$.fragment),qZo=l(),oue=a("span"),jZo=o("AutoModelForAudioFrameClassification"),rje=l(),Oo=a("div"),F(F8.$$.fragment),DZo=l(),hd=a("p"),GZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),lz=a("a"),OZo=o("from_pretrained()"),VZo=o(" class method or the "),iz=a("a"),XZo=o("from_config()"),zZo=o(` class
method.`),WZo=l(),T8=a("p"),QZo=o("This class cannot be instantiated directly using "),rue=a("code"),HZo=o("__init__()"),UZo=o(" (throws an error)."),JZo=l(),bt=a("div"),F(M8.$$.fragment),YZo=l(),tue=a("p"),KZo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ZZo=l(),pd=a("p"),eer=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),oer=o("not"),rer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=a("a"),ter=o("from_pretrained()"),aer=o(" to load the model weights."),ner=l(),F(V0.$$.fragment),ser=l(),fo=a("div"),F(E8.$$.fragment),ler=l(),nue=a("p"),ier=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),der=l(),Oa=a("p"),cer=o("The model class to instantiate is selected based on the "),sue=a("code"),fer=o("model_type"),mer=o(` property of the config object (either
passed as an argument or loaded from `),lue=a("code"),ger=o("pretrained_model_name_or_path"),her=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=a("code"),per=o("pretrained_model_name_or_path"),_er=o(":"),uer=l(),Kr=a("ul"),X0=a("li"),due=a("strong"),ber=o("data2vec-audio"),ver=o(" \u2014 "),cz=a("a"),Fer=o("Data2VecAudioForAudioFrameClassification"),Ter=o(" (Data2VecAudio model)"),Mer=l(),z0=a("li"),cue=a("strong"),Eer=o("unispeech-sat"),Cer=o(" \u2014 "),fz=a("a"),wer=o("UniSpeechSatForAudioFrameClassification"),Aer=o(" (UniSpeechSat model)"),yer=l(),W0=a("li"),fue=a("strong"),Ler=o("wav2vec2"),xer=o(" \u2014 "),mz=a("a"),$er=o("Wav2Vec2ForAudioFrameClassification"),ker=o(" (Wav2Vec2 model)"),Ser=l(),Q0=a("li"),mue=a("strong"),Rer=o("wav2vec2-conformer"),Per=o(" \u2014 "),gz=a("a"),Ber=o("Wav2Vec2ConformerForAudioFrameClassification"),Ier=o(" (Wav2Vec2-Conformer model)"),Ner=l(),H0=a("li"),gue=a("strong"),qer=o("wavlm"),jer=o(" \u2014 "),hz=a("a"),Der=o("WavLMForAudioFrameClassification"),Ger=o(" (WavLM model)"),Oer=l(),U0=a("p"),Ver=o("The model is set in evaluation mode by default using "),hue=a("code"),Xer=o("model.eval()"),zer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),Wer=o("model.train()"),Qer=l(),F(J0.$$.fragment),tje=l(),_d=a("h2"),Y0=a("a"),_ue=a("span"),F(C8.$$.fragment),Her=l(),uue=a("span"),Uer=o("AutoModelForCTC"),aje=l(),Vo=a("div"),F(w8.$$.fragment),Jer=l(),ud=a("p"),Yer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pz=a("a"),Ker=o("from_pretrained()"),Zer=o(" class method or the "),_z=a("a"),eor=o("from_config()"),oor=o(` class
method.`),ror=l(),A8=a("p"),tor=o("This class cannot be instantiated directly using "),bue=a("code"),aor=o("__init__()"),nor=o(" (throws an error)."),sor=l(),vt=a("div"),F(y8.$$.fragment),lor=l(),vue=a("p"),ior=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dor=l(),bd=a("p"),cor=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),mor=o("not"),gor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),hor=o("from_pretrained()"),por=o(" to load the model weights."),_or=l(),F(K0.$$.fragment),uor=l(),mo=a("div"),F(L8.$$.fragment),bor=l(),Tue=a("p"),vor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),For=l(),Va=a("p"),Tor=o("The model class to instantiate is selected based on the "),Mue=a("code"),Mor=o("model_type"),Eor=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),Cor=o("pretrained_model_name_or_path"),wor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),Aor=o("pretrained_model_name_or_path"),yor=o(":"),Lor=l(),ye=a("ul"),Z0=a("li"),wue=a("strong"),xor=o("data2vec-audio"),$or=o(" \u2014 "),bz=a("a"),kor=o("Data2VecAudioForCTC"),Sor=o(" (Data2VecAudio model)"),Ror=l(),eF=a("li"),Aue=a("strong"),Por=o("hubert"),Bor=o(" \u2014 "),vz=a("a"),Ior=o("HubertForCTC"),Nor=o(" (Hubert model)"),qor=l(),oF=a("li"),yue=a("strong"),jor=o("mctct"),Dor=o(" \u2014 "),Fz=a("a"),Gor=o("MCTCTForCTC"),Oor=o(" (MCTCT model)"),Vor=l(),rF=a("li"),Lue=a("strong"),Xor=o("sew"),zor=o(" \u2014 "),Tz=a("a"),Wor=o("SEWForCTC"),Qor=o(" (SEW model)"),Hor=l(),tF=a("li"),xue=a("strong"),Uor=o("sew-d"),Jor=o(" \u2014 "),Mz=a("a"),Yor=o("SEWDForCTC"),Kor=o(" (SEW-D model)"),Zor=l(),aF=a("li"),$ue=a("strong"),err=o("unispeech"),orr=o(" \u2014 "),Ez=a("a"),rrr=o("UniSpeechForCTC"),trr=o(" (UniSpeech model)"),arr=l(),nF=a("li"),kue=a("strong"),nrr=o("unispeech-sat"),srr=o(" \u2014 "),Cz=a("a"),lrr=o("UniSpeechSatForCTC"),irr=o(" (UniSpeechSat model)"),drr=l(),sF=a("li"),Sue=a("strong"),crr=o("wav2vec2"),frr=o(" \u2014 "),wz=a("a"),mrr=o("Wav2Vec2ForCTC"),grr=o(" (Wav2Vec2 model)"),hrr=l(),lF=a("li"),Rue=a("strong"),prr=o("wav2vec2-conformer"),_rr=o(" \u2014 "),Az=a("a"),urr=o("Wav2Vec2ConformerForCTC"),brr=o(" (Wav2Vec2-Conformer model)"),vrr=l(),iF=a("li"),Pue=a("strong"),Frr=o("wavlm"),Trr=o(" \u2014 "),yz=a("a"),Mrr=o("WavLMForCTC"),Err=o(" (WavLM model)"),Crr=l(),dF=a("p"),wrr=o("The model is set in evaluation mode by default using "),Bue=a("code"),Arr=o("model.eval()"),yrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iue=a("code"),Lrr=o("model.train()"),xrr=l(),F(cF.$$.fragment),nje=l(),vd=a("h2"),fF=a("a"),Nue=a("span"),F(x8.$$.fragment),$rr=l(),que=a("span"),krr=o("AutoModelForSpeechSeq2Seq"),sje=l(),Xo=a("div"),F($8.$$.fragment),Srr=l(),Fd=a("p"),Rrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Lz=a("a"),Prr=o("from_pretrained()"),Brr=o(" class method or the "),xz=a("a"),Irr=o("from_config()"),Nrr=o(` class
method.`),qrr=l(),k8=a("p"),jrr=o("This class cannot be instantiated directly using "),jue=a("code"),Drr=o("__init__()"),Grr=o(" (throws an error)."),Orr=l(),Ft=a("div"),F(S8.$$.fragment),Vrr=l(),Due=a("p"),Xrr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zrr=l(),Td=a("p"),Wrr=o(`Note:
Loading a model from its configuration file does `),Gue=a("strong"),Qrr=o("not"),Hrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),Urr=o("from_pretrained()"),Jrr=o(" to load the model weights."),Yrr=l(),F(mF.$$.fragment),Krr=l(),go=a("div"),F(R8.$$.fragment),Zrr=l(),Oue=a("p"),etr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),otr=l(),Xa=a("p"),rtr=o("The model class to instantiate is selected based on the "),Vue=a("code"),ttr=o("model_type"),atr=o(` property of the config object (either
passed as an argument or loaded from `),Xue=a("code"),ntr=o("pretrained_model_name_or_path"),str=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=a("code"),ltr=o("pretrained_model_name_or_path"),itr=o(":"),dtr=l(),P8=a("ul"),gF=a("li"),Wue=a("strong"),ctr=o("speech-encoder-decoder"),ftr=o(" \u2014 "),kz=a("a"),mtr=o("SpeechEncoderDecoderModel"),gtr=o(" (Speech Encoder decoder model)"),htr=l(),hF=a("li"),Que=a("strong"),ptr=o("speech_to_text"),_tr=o(" \u2014 "),Sz=a("a"),utr=o("Speech2TextForConditionalGeneration"),btr=o(" (Speech2Text model)"),vtr=l(),pF=a("p"),Ftr=o("The model is set in evaluation mode by default using "),Hue=a("code"),Ttr=o("model.eval()"),Mtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),Etr=o("model.train()"),Ctr=l(),F(_F.$$.fragment),lje=l(),Md=a("h2"),uF=a("a"),Jue=a("span"),F(B8.$$.fragment),wtr=l(),Yue=a("span"),Atr=o("AutoModelForAudioXVector"),ije=l(),zo=a("div"),F(I8.$$.fragment),ytr=l(),Ed=a("p"),Ltr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Rz=a("a"),xtr=o("from_pretrained()"),$tr=o(" class method or the "),Pz=a("a"),ktr=o("from_config()"),Str=o(` class
method.`),Rtr=l(),N8=a("p"),Ptr=o("This class cannot be instantiated directly using "),Kue=a("code"),Btr=o("__init__()"),Itr=o(" (throws an error)."),Ntr=l(),Tt=a("div"),F(q8.$$.fragment),qtr=l(),Zue=a("p"),jtr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Dtr=l(),Cd=a("p"),Gtr=o(`Note:
Loading a model from its configuration file does `),e2e=a("strong"),Otr=o("not"),Vtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),Xtr=o("from_pretrained()"),ztr=o(" to load the model weights."),Wtr=l(),F(bF.$$.fragment),Qtr=l(),ho=a("div"),F(j8.$$.fragment),Htr=l(),o2e=a("p"),Utr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Jtr=l(),za=a("p"),Ytr=o("The model class to instantiate is selected based on the "),r2e=a("code"),Ktr=o("model_type"),Ztr=o(` property of the config object (either
passed as an argument or loaded from `),t2e=a("code"),ear=o("pretrained_model_name_or_path"),oar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=a("code"),rar=o("pretrained_model_name_or_path"),tar=o(":"),aar=l(),Zr=a("ul"),vF=a("li"),n2e=a("strong"),nar=o("data2vec-audio"),sar=o(" \u2014 "),Iz=a("a"),lar=o("Data2VecAudioForXVector"),iar=o(" (Data2VecAudio model)"),dar=l(),FF=a("li"),s2e=a("strong"),car=o("unispeech-sat"),far=o(" \u2014 "),Nz=a("a"),mar=o("UniSpeechSatForXVector"),gar=o(" (UniSpeechSat model)"),har=l(),TF=a("li"),l2e=a("strong"),par=o("wav2vec2"),_ar=o(" \u2014 "),qz=a("a"),uar=o("Wav2Vec2ForXVector"),bar=o(" (Wav2Vec2 model)"),Far=l(),MF=a("li"),i2e=a("strong"),Tar=o("wav2vec2-conformer"),Mar=o(" \u2014 "),jz=a("a"),Ear=o("Wav2Vec2ConformerForXVector"),Car=o(" (Wav2Vec2-Conformer model)"),war=l(),EF=a("li"),d2e=a("strong"),Aar=o("wavlm"),yar=o(" \u2014 "),Dz=a("a"),Lar=o("WavLMForXVector"),xar=o(" (WavLM model)"),$ar=l(),CF=a("p"),kar=o("The model is set in evaluation mode by default using "),c2e=a("code"),Sar=o("model.eval()"),Rar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f2e=a("code"),Par=o("model.train()"),Bar=l(),F(wF.$$.fragment),dje=l(),wd=a("h2"),AF=a("a"),m2e=a("span"),F(D8.$$.fragment),Iar=l(),g2e=a("span"),Nar=o("AutoModelForMaskedImageModeling"),cje=l(),Wo=a("div"),F(G8.$$.fragment),qar=l(),Ad=a("p"),jar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Gz=a("a"),Dar=o("from_pretrained()"),Gar=o(" class method or the "),Oz=a("a"),Oar=o("from_config()"),Var=o(` class
method.`),Xar=l(),O8=a("p"),zar=o("This class cannot be instantiated directly using "),h2e=a("code"),War=o("__init__()"),Qar=o(" (throws an error)."),Har=l(),Mt=a("div"),F(V8.$$.fragment),Uar=l(),p2e=a("p"),Jar=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Yar=l(),yd=a("p"),Kar=o(`Note:
Loading a model from its configuration file does `),_2e=a("strong"),Zar=o("not"),enr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),onr=o("from_pretrained()"),rnr=o(" to load the model weights."),tnr=l(),F(yF.$$.fragment),anr=l(),po=a("div"),F(X8.$$.fragment),nnr=l(),u2e=a("p"),snr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),lnr=l(),Wa=a("p"),inr=o("The model class to instantiate is selected based on the "),b2e=a("code"),dnr=o("model_type"),cnr=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),fnr=o("pretrained_model_name_or_path"),mnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=a("code"),gnr=o("pretrained_model_name_or_path"),hnr=o(":"),pnr=l(),Ld=a("ul"),LF=a("li"),T2e=a("strong"),_nr=o("deit"),unr=o(" \u2014 "),Xz=a("a"),bnr=o("DeiTForMaskedImageModeling"),vnr=o(" (DeiT model)"),Fnr=l(),xF=a("li"),M2e=a("strong"),Tnr=o("swin"),Mnr=o(" \u2014 "),zz=a("a"),Enr=o("SwinForMaskedImageModeling"),Cnr=o(" (Swin model)"),wnr=l(),$F=a("li"),E2e=a("strong"),Anr=o("vit"),ynr=o(" \u2014 "),Wz=a("a"),Lnr=o("ViTForMaskedImageModeling"),xnr=o(" (ViT model)"),$nr=l(),kF=a("p"),knr=o("The model is set in evaluation mode by default using "),C2e=a("code"),Snr=o("model.eval()"),Rnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w2e=a("code"),Pnr=o("model.train()"),Bnr=l(),F(SF.$$.fragment),fje=l(),xd=a("h2"),RF=a("a"),A2e=a("span"),F(z8.$$.fragment),Inr=l(),y2e=a("span"),Nnr=o("AutoModelForObjectDetection"),mje=l(),Qo=a("div"),F(W8.$$.fragment),qnr=l(),$d=a("p"),jnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Qz=a("a"),Dnr=o("from_pretrained()"),Gnr=o(" class method or the "),Hz=a("a"),Onr=o("from_config()"),Vnr=o(` class
method.`),Xnr=l(),Q8=a("p"),znr=o("This class cannot be instantiated directly using "),L2e=a("code"),Wnr=o("__init__()"),Qnr=o(" (throws an error)."),Hnr=l(),Et=a("div"),F(H8.$$.fragment),Unr=l(),x2e=a("p"),Jnr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ynr=l(),kd=a("p"),Knr=o(`Note:
Loading a model from its configuration file does `),$2e=a("strong"),Znr=o("not"),esr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),osr=o("from_pretrained()"),rsr=o(" to load the model weights."),tsr=l(),F(PF.$$.fragment),asr=l(),_o=a("div"),F(U8.$$.fragment),nsr=l(),k2e=a("p"),ssr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lsr=l(),Qa=a("p"),isr=o("The model class to instantiate is selected based on the "),S2e=a("code"),dsr=o("model_type"),csr=o(` property of the config object (either
passed as an argument or loaded from `),R2e=a("code"),fsr=o("pretrained_model_name_or_path"),msr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=a("code"),gsr=o("pretrained_model_name_or_path"),hsr=o(":"),psr=l(),J8=a("ul"),BF=a("li"),B2e=a("strong"),_sr=o("detr"),usr=o(" \u2014 "),Jz=a("a"),bsr=o("DetrForObjectDetection"),vsr=o(" (DETR model)"),Fsr=l(),IF=a("li"),I2e=a("strong"),Tsr=o("yolos"),Msr=o(" \u2014 "),Yz=a("a"),Esr=o("YolosForObjectDetection"),Csr=o(" (YOLOS model)"),wsr=l(),NF=a("p"),Asr=o("The model is set in evaluation mode by default using "),N2e=a("code"),ysr=o("model.eval()"),Lsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=a("code"),xsr=o("model.train()"),$sr=l(),F(qF.$$.fragment),gje=l(),Sd=a("h2"),jF=a("a"),j2e=a("span"),F(Y8.$$.fragment),ksr=l(),D2e=a("span"),Ssr=o("AutoModelForImageSegmentation"),hje=l(),Ho=a("div"),F(K8.$$.fragment),Rsr=l(),Rd=a("p"),Psr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Kz=a("a"),Bsr=o("from_pretrained()"),Isr=o(" class method or the "),Zz=a("a"),Nsr=o("from_config()"),qsr=o(` class
method.`),jsr=l(),Z8=a("p"),Dsr=o("This class cannot be instantiated directly using "),G2e=a("code"),Gsr=o("__init__()"),Osr=o(" (throws an error)."),Vsr=l(),Ct=a("div"),F(e7.$$.fragment),Xsr=l(),O2e=a("p"),zsr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Wsr=l(),Pd=a("p"),Qsr=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),Hsr=o("not"),Usr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),Jsr=o("from_pretrained()"),Ysr=o(" to load the model weights."),Ksr=l(),F(DF.$$.fragment),Zsr=l(),uo=a("div"),F(o7.$$.fragment),elr=l(),X2e=a("p"),olr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),rlr=l(),Ha=a("p"),tlr=o("The model class to instantiate is selected based on the "),z2e=a("code"),alr=o("model_type"),nlr=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),slr=o("pretrained_model_name_or_path"),llr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),ilr=o("pretrained_model_name_or_path"),dlr=o(":"),clr=l(),H2e=a("ul"),GF=a("li"),U2e=a("strong"),flr=o("detr"),mlr=o(" \u2014 "),oW=a("a"),glr=o("DetrForSegmentation"),hlr=o(" (DETR model)"),plr=l(),OF=a("p"),_lr=o("The model is set in evaluation mode by default using "),J2e=a("code"),ulr=o("model.eval()"),blr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y2e=a("code"),vlr=o("model.train()"),Flr=l(),F(VF.$$.fragment),pje=l(),Bd=a("h2"),XF=a("a"),K2e=a("span"),F(r7.$$.fragment),Tlr=l(),Z2e=a("span"),Mlr=o("AutoModelForSemanticSegmentation"),_je=l(),Uo=a("div"),F(t7.$$.fragment),Elr=l(),Id=a("p"),Clr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),rW=a("a"),wlr=o("from_pretrained()"),Alr=o(" class method or the "),tW=a("a"),ylr=o("from_config()"),Llr=o(` class
method.`),xlr=l(),a7=a("p"),$lr=o("This class cannot be instantiated directly using "),e1e=a("code"),klr=o("__init__()"),Slr=o(" (throws an error)."),Rlr=l(),wt=a("div"),F(n7.$$.fragment),Plr=l(),o1e=a("p"),Blr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ilr=l(),Nd=a("p"),Nlr=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),qlr=o("not"),jlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),Dlr=o("from_pretrained()"),Glr=o(" to load the model weights."),Olr=l(),F(zF.$$.fragment),Vlr=l(),bo=a("div"),F(s7.$$.fragment),Xlr=l(),t1e=a("p"),zlr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Wlr=l(),Ua=a("p"),Qlr=o("The model class to instantiate is selected based on the "),a1e=a("code"),Hlr=o("model_type"),Ulr=o(` property of the config object (either
passed as an argument or loaded from `),n1e=a("code"),Jlr=o("pretrained_model_name_or_path"),Ylr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=a("code"),Klr=o("pretrained_model_name_or_path"),Zlr=o(":"),eir=l(),Ja=a("ul"),WF=a("li"),l1e=a("strong"),oir=o("beit"),rir=o(" \u2014 "),nW=a("a"),tir=o("BeitForSemanticSegmentation"),air=o(" (BEiT model)"),nir=l(),QF=a("li"),i1e=a("strong"),sir=o("data2vec-vision"),lir=o(" \u2014 "),sW=a("a"),iir=o("Data2VecVisionForSemanticSegmentation"),dir=o(" (Data2VecVision model)"),cir=l(),HF=a("li"),d1e=a("strong"),fir=o("dpt"),mir=o(" \u2014 "),lW=a("a"),gir=o("DPTForSemanticSegmentation"),hir=o(" (DPT model)"),pir=l(),UF=a("li"),c1e=a("strong"),_ir=o("segformer"),uir=o(" \u2014 "),iW=a("a"),bir=o("SegformerForSemanticSegmentation"),vir=o(" (SegFormer model)"),Fir=l(),JF=a("p"),Tir=o("The model is set in evaluation mode by default using "),f1e=a("code"),Mir=o("model.eval()"),Eir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m1e=a("code"),Cir=o("model.train()"),wir=l(),F(YF.$$.fragment),uje=l(),qd=a("h2"),KF=a("a"),g1e=a("span"),F(l7.$$.fragment),Air=l(),h1e=a("span"),yir=o("AutoModelForInstanceSegmentation"),bje=l(),Jo=a("div"),F(i7.$$.fragment),Lir=l(),jd=a("p"),xir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),dW=a("a"),$ir=o("from_pretrained()"),kir=o(" class method or the "),cW=a("a"),Sir=o("from_config()"),Rir=o(` class
method.`),Pir=l(),d7=a("p"),Bir=o("This class cannot be instantiated directly using "),p1e=a("code"),Iir=o("__init__()"),Nir=o(" (throws an error)."),qir=l(),At=a("div"),F(c7.$$.fragment),jir=l(),_1e=a("p"),Dir=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Gir=l(),Dd=a("p"),Oir=o(`Note:
Loading a model from its configuration file does `),u1e=a("strong"),Vir=o("not"),Xir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),zir=o("from_pretrained()"),Wir=o(" to load the model weights."),Qir=l(),F(ZF.$$.fragment),Hir=l(),vo=a("div"),F(f7.$$.fragment),Uir=l(),b1e=a("p"),Jir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Yir=l(),Ya=a("p"),Kir=o("The model class to instantiate is selected based on the "),v1e=a("code"),Zir=o("model_type"),edr=o(` property of the config object (either
passed as an argument or loaded from `),F1e=a("code"),odr=o("pretrained_model_name_or_path"),rdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=a("code"),tdr=o("pretrained_model_name_or_path"),adr=o(":"),ndr=l(),M1e=a("ul"),e6=a("li"),E1e=a("strong"),sdr=o("maskformer"),ldr=o(" \u2014 "),mW=a("a"),idr=o("MaskFormerForInstanceSegmentation"),ddr=o(" (MaskFormer model)"),cdr=l(),o6=a("p"),fdr=o("The model is set in evaluation mode by default using "),C1e=a("code"),mdr=o("model.eval()"),gdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w1e=a("code"),hdr=o("model.train()"),pdr=l(),F(r6.$$.fragment),vje=l(),Gd=a("h2"),t6=a("a"),A1e=a("span"),F(m7.$$.fragment),_dr=l(),y1e=a("span"),udr=o("TFAutoModel"),Fje=l(),Yo=a("div"),F(g7.$$.fragment),bdr=l(),Od=a("p"),vdr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gW=a("a"),Fdr=o("from_pretrained()"),Tdr=o(" class method or the "),hW=a("a"),Mdr=o("from_config()"),Edr=o(` class
method.`),Cdr=l(),h7=a("p"),wdr=o("This class cannot be instantiated directly using "),L1e=a("code"),Adr=o("__init__()"),ydr=o(" (throws an error)."),Ldr=l(),yt=a("div"),F(p7.$$.fragment),xdr=l(),x1e=a("p"),$dr=o("Instantiates one of the base model classes of the library from a configuration."),kdr=l(),Vd=a("p"),Sdr=o(`Note:
Loading a model from its configuration file does `),$1e=a("strong"),Rdr=o("not"),Pdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),Bdr=o("from_pretrained()"),Idr=o(" to load the model weights."),Ndr=l(),F(a6.$$.fragment),qdr=l(),wr=a("div"),F(_7.$$.fragment),jdr=l(),k1e=a("p"),Ddr=o("Instantiate one of the base model classes of the library from a pretrained model."),Gdr=l(),Ka=a("p"),Odr=o("The model class to instantiate is selected based on the "),S1e=a("code"),Vdr=o("model_type"),Xdr=o(` property of the config object (either
passed as an argument or loaded from `),R1e=a("code"),zdr=o("pretrained_model_name_or_path"),Wdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=a("code"),Qdr=o("pretrained_model_name_or_path"),Hdr=o(":"),Udr=l(),q=a("ul"),n6=a("li"),B1e=a("strong"),Jdr=o("albert"),Ydr=o(" \u2014 "),_W=a("a"),Kdr=o("TFAlbertModel"),Zdr=o(" (ALBERT model)"),ecr=l(),s6=a("li"),I1e=a("strong"),ocr=o("bart"),rcr=o(" \u2014 "),uW=a("a"),tcr=o("TFBartModel"),acr=o(" (BART model)"),ncr=l(),l6=a("li"),N1e=a("strong"),scr=o("bert"),lcr=o(" \u2014 "),bW=a("a"),icr=o("TFBertModel"),dcr=o(" (BERT model)"),ccr=l(),i6=a("li"),q1e=a("strong"),fcr=o("blenderbot"),mcr=o(" \u2014 "),vW=a("a"),gcr=o("TFBlenderbotModel"),hcr=o(" (Blenderbot model)"),pcr=l(),d6=a("li"),j1e=a("strong"),_cr=o("blenderbot-small"),ucr=o(" \u2014 "),FW=a("a"),bcr=o("TFBlenderbotSmallModel"),vcr=o(" (BlenderbotSmall model)"),Fcr=l(),c6=a("li"),D1e=a("strong"),Tcr=o("camembert"),Mcr=o(" \u2014 "),TW=a("a"),Ecr=o("TFCamembertModel"),Ccr=o(" (CamemBERT model)"),wcr=l(),f6=a("li"),G1e=a("strong"),Acr=o("clip"),ycr=o(" \u2014 "),MW=a("a"),Lcr=o("TFCLIPModel"),xcr=o(" (CLIP model)"),$cr=l(),m6=a("li"),O1e=a("strong"),kcr=o("convbert"),Scr=o(" \u2014 "),EW=a("a"),Rcr=o("TFConvBertModel"),Pcr=o(" (ConvBERT model)"),Bcr=l(),g6=a("li"),V1e=a("strong"),Icr=o("convnext"),Ncr=o(" \u2014 "),CW=a("a"),qcr=o("TFConvNextModel"),jcr=o(" (ConvNext model)"),Dcr=l(),h6=a("li"),X1e=a("strong"),Gcr=o("ctrl"),Ocr=o(" \u2014 "),wW=a("a"),Vcr=o("TFCTRLModel"),Xcr=o(" (CTRL model)"),zcr=l(),p6=a("li"),z1e=a("strong"),Wcr=o("data2vec-vision"),Qcr=o(" \u2014 "),AW=a("a"),Hcr=o("TFData2VecVisionModel"),Ucr=o(" (Data2VecVision model)"),Jcr=l(),_6=a("li"),W1e=a("strong"),Ycr=o("deberta"),Kcr=o(" \u2014 "),yW=a("a"),Zcr=o("TFDebertaModel"),efr=o(" (DeBERTa model)"),ofr=l(),u6=a("li"),Q1e=a("strong"),rfr=o("deberta-v2"),tfr=o(" \u2014 "),LW=a("a"),afr=o("TFDebertaV2Model"),nfr=o(" (DeBERTa-v2 model)"),sfr=l(),b6=a("li"),H1e=a("strong"),lfr=o("distilbert"),ifr=o(" \u2014 "),xW=a("a"),dfr=o("TFDistilBertModel"),cfr=o(" (DistilBERT model)"),ffr=l(),v6=a("li"),U1e=a("strong"),mfr=o("dpr"),gfr=o(" \u2014 "),$W=a("a"),hfr=o("TFDPRQuestionEncoder"),pfr=o(" (DPR model)"),_fr=l(),F6=a("li"),J1e=a("strong"),ufr=o("electra"),bfr=o(" \u2014 "),kW=a("a"),vfr=o("TFElectraModel"),Ffr=o(" (ELECTRA model)"),Tfr=l(),T6=a("li"),Y1e=a("strong"),Mfr=o("flaubert"),Efr=o(" \u2014 "),SW=a("a"),Cfr=o("TFFlaubertModel"),wfr=o(" (FlauBERT model)"),Afr=l(),Is=a("li"),K1e=a("strong"),yfr=o("funnel"),Lfr=o(" \u2014 "),RW=a("a"),xfr=o("TFFunnelModel"),$fr=o(" or "),PW=a("a"),kfr=o("TFFunnelBaseModel"),Sfr=o(" (Funnel Transformer model)"),Rfr=l(),M6=a("li"),Z1e=a("strong"),Pfr=o("gpt2"),Bfr=o(" \u2014 "),BW=a("a"),Ifr=o("TFGPT2Model"),Nfr=o(" (OpenAI GPT-2 model)"),qfr=l(),E6=a("li"),ebe=a("strong"),jfr=o("gptj"),Dfr=o(" \u2014 "),IW=a("a"),Gfr=o("TFGPTJModel"),Ofr=o(" (GPT-J model)"),Vfr=l(),C6=a("li"),obe=a("strong"),Xfr=o("hubert"),zfr=o(" \u2014 "),NW=a("a"),Wfr=o("TFHubertModel"),Qfr=o(" (Hubert model)"),Hfr=l(),w6=a("li"),rbe=a("strong"),Ufr=o("layoutlm"),Jfr=o(" \u2014 "),qW=a("a"),Yfr=o("TFLayoutLMModel"),Kfr=o(" (LayoutLM model)"),Zfr=l(),A6=a("li"),tbe=a("strong"),emr=o("led"),omr=o(" \u2014 "),jW=a("a"),rmr=o("TFLEDModel"),tmr=o(" (LED model)"),amr=l(),y6=a("li"),abe=a("strong"),nmr=o("longformer"),smr=o(" \u2014 "),DW=a("a"),lmr=o("TFLongformerModel"),imr=o(" (Longformer model)"),dmr=l(),L6=a("li"),nbe=a("strong"),cmr=o("lxmert"),fmr=o(" \u2014 "),GW=a("a"),mmr=o("TFLxmertModel"),gmr=o(" (LXMERT model)"),hmr=l(),x6=a("li"),sbe=a("strong"),pmr=o("marian"),_mr=o(" \u2014 "),OW=a("a"),umr=o("TFMarianModel"),bmr=o(" (Marian model)"),vmr=l(),$6=a("li"),lbe=a("strong"),Fmr=o("mbart"),Tmr=o(" \u2014 "),VW=a("a"),Mmr=o("TFMBartModel"),Emr=o(" (mBART model)"),Cmr=l(),k6=a("li"),ibe=a("strong"),wmr=o("mobilebert"),Amr=o(" \u2014 "),XW=a("a"),ymr=o("TFMobileBertModel"),Lmr=o(" (MobileBERT model)"),xmr=l(),S6=a("li"),dbe=a("strong"),$mr=o("mpnet"),kmr=o(" \u2014 "),zW=a("a"),Smr=o("TFMPNetModel"),Rmr=o(" (MPNet model)"),Pmr=l(),R6=a("li"),cbe=a("strong"),Bmr=o("mt5"),Imr=o(" \u2014 "),WW=a("a"),Nmr=o("TFMT5Model"),qmr=o(" (mT5 model)"),jmr=l(),P6=a("li"),fbe=a("strong"),Dmr=o("openai-gpt"),Gmr=o(" \u2014 "),QW=a("a"),Omr=o("TFOpenAIGPTModel"),Vmr=o(" (OpenAI GPT model)"),Xmr=l(),B6=a("li"),mbe=a("strong"),zmr=o("pegasus"),Wmr=o(" \u2014 "),HW=a("a"),Qmr=o("TFPegasusModel"),Hmr=o(" (Pegasus model)"),Umr=l(),I6=a("li"),gbe=a("strong"),Jmr=o("rembert"),Ymr=o(" \u2014 "),UW=a("a"),Kmr=o("TFRemBertModel"),Zmr=o(" (RemBERT model)"),egr=l(),N6=a("li"),hbe=a("strong"),ogr=o("roberta"),rgr=o(" \u2014 "),JW=a("a"),tgr=o("TFRobertaModel"),agr=o(" (RoBERTa model)"),ngr=l(),q6=a("li"),pbe=a("strong"),sgr=o("roformer"),lgr=o(" \u2014 "),YW=a("a"),igr=o("TFRoFormerModel"),dgr=o(" (RoFormer model)"),cgr=l(),j6=a("li"),_be=a("strong"),fgr=o("speech_to_text"),mgr=o(" \u2014 "),KW=a("a"),ggr=o("TFSpeech2TextModel"),hgr=o(" (Speech2Text model)"),pgr=l(),D6=a("li"),ube=a("strong"),_gr=o("swin"),ugr=o(" \u2014 "),ZW=a("a"),bgr=o("TFSwinModel"),vgr=o(" (Swin model)"),Fgr=l(),G6=a("li"),bbe=a("strong"),Tgr=o("t5"),Mgr=o(" \u2014 "),eQ=a("a"),Egr=o("TFT5Model"),Cgr=o(" (T5 model)"),wgr=l(),O6=a("li"),vbe=a("strong"),Agr=o("tapas"),ygr=o(" \u2014 "),oQ=a("a"),Lgr=o("TFTapasModel"),xgr=o(" (TAPAS model)"),$gr=l(),V6=a("li"),Fbe=a("strong"),kgr=o("transfo-xl"),Sgr=o(" \u2014 "),rQ=a("a"),Rgr=o("TFTransfoXLModel"),Pgr=o(" (Transformer-XL model)"),Bgr=l(),X6=a("li"),Tbe=a("strong"),Igr=o("vit"),Ngr=o(" \u2014 "),tQ=a("a"),qgr=o("TFViTModel"),jgr=o(" (ViT model)"),Dgr=l(),z6=a("li"),Mbe=a("strong"),Ggr=o("vit_mae"),Ogr=o(" \u2014 "),aQ=a("a"),Vgr=o("TFViTMAEModel"),Xgr=o(" (ViTMAE model)"),zgr=l(),W6=a("li"),Ebe=a("strong"),Wgr=o("wav2vec2"),Qgr=o(" \u2014 "),nQ=a("a"),Hgr=o("TFWav2Vec2Model"),Ugr=o(" (Wav2Vec2 model)"),Jgr=l(),Q6=a("li"),Cbe=a("strong"),Ygr=o("xlm"),Kgr=o(" \u2014 "),sQ=a("a"),Zgr=o("TFXLMModel"),ehr=o(" (XLM model)"),ohr=l(),H6=a("li"),wbe=a("strong"),rhr=o("xlm-roberta"),thr=o(" \u2014 "),lQ=a("a"),ahr=o("TFXLMRobertaModel"),nhr=o(" (XLM-RoBERTa model)"),shr=l(),U6=a("li"),Abe=a("strong"),lhr=o("xlnet"),ihr=o(" \u2014 "),iQ=a("a"),dhr=o("TFXLNetModel"),chr=o(" (XLNet model)"),fhr=l(),F(J6.$$.fragment),Tje=l(),Xd=a("h2"),Y6=a("a"),ybe=a("span"),F(u7.$$.fragment),mhr=l(),Lbe=a("span"),ghr=o("TFAutoModelForPreTraining"),Mje=l(),Ko=a("div"),F(b7.$$.fragment),hhr=l(),zd=a("p"),phr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dQ=a("a"),_hr=o("from_pretrained()"),uhr=o(" class method or the "),cQ=a("a"),bhr=o("from_config()"),vhr=o(` class
method.`),Fhr=l(),v7=a("p"),Thr=o("This class cannot be instantiated directly using "),xbe=a("code"),Mhr=o("__init__()"),Ehr=o(" (throws an error)."),Chr=l(),Lt=a("div"),F(F7.$$.fragment),whr=l(),$be=a("p"),Ahr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yhr=l(),Wd=a("p"),Lhr=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),xhr=o("not"),$hr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),khr=o("from_pretrained()"),Shr=o(" to load the model weights."),Rhr=l(),F(K6.$$.fragment),Phr=l(),Ar=a("div"),F(T7.$$.fragment),Bhr=l(),Sbe=a("p"),Ihr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Nhr=l(),Za=a("p"),qhr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),jhr=o("model_type"),Dhr=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),Ghr=o("pretrained_model_name_or_path"),Ohr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),Vhr=o("pretrained_model_name_or_path"),Xhr=o(":"),zhr=l(),se=a("ul"),Z6=a("li"),Ibe=a("strong"),Whr=o("albert"),Qhr=o(" \u2014 "),mQ=a("a"),Hhr=o("TFAlbertForPreTraining"),Uhr=o(" (ALBERT model)"),Jhr=l(),eT=a("li"),Nbe=a("strong"),Yhr=o("bart"),Khr=o(" \u2014 "),gQ=a("a"),Zhr=o("TFBartForConditionalGeneration"),epr=o(" (BART model)"),opr=l(),oT=a("li"),qbe=a("strong"),rpr=o("bert"),tpr=o(" \u2014 "),hQ=a("a"),apr=o("TFBertForPreTraining"),npr=o(" (BERT model)"),spr=l(),rT=a("li"),jbe=a("strong"),lpr=o("camembert"),ipr=o(" \u2014 "),pQ=a("a"),dpr=o("TFCamembertForMaskedLM"),cpr=o(" (CamemBERT model)"),fpr=l(),tT=a("li"),Dbe=a("strong"),mpr=o("ctrl"),gpr=o(" \u2014 "),_Q=a("a"),hpr=o("TFCTRLLMHeadModel"),ppr=o(" (CTRL model)"),_pr=l(),aT=a("li"),Gbe=a("strong"),upr=o("distilbert"),bpr=o(" \u2014 "),uQ=a("a"),vpr=o("TFDistilBertForMaskedLM"),Fpr=o(" (DistilBERT model)"),Tpr=l(),nT=a("li"),Obe=a("strong"),Mpr=o("electra"),Epr=o(" \u2014 "),bQ=a("a"),Cpr=o("TFElectraForPreTraining"),wpr=o(" (ELECTRA model)"),Apr=l(),sT=a("li"),Vbe=a("strong"),ypr=o("flaubert"),Lpr=o(" \u2014 "),vQ=a("a"),xpr=o("TFFlaubertWithLMHeadModel"),$pr=o(" (FlauBERT model)"),kpr=l(),lT=a("li"),Xbe=a("strong"),Spr=o("funnel"),Rpr=o(" \u2014 "),FQ=a("a"),Ppr=o("TFFunnelForPreTraining"),Bpr=o(" (Funnel Transformer model)"),Ipr=l(),iT=a("li"),zbe=a("strong"),Npr=o("gpt2"),qpr=o(" \u2014 "),TQ=a("a"),jpr=o("TFGPT2LMHeadModel"),Dpr=o(" (OpenAI GPT-2 model)"),Gpr=l(),dT=a("li"),Wbe=a("strong"),Opr=o("layoutlm"),Vpr=o(" \u2014 "),MQ=a("a"),Xpr=o("TFLayoutLMForMaskedLM"),zpr=o(" (LayoutLM model)"),Wpr=l(),cT=a("li"),Qbe=a("strong"),Qpr=o("lxmert"),Hpr=o(" \u2014 "),EQ=a("a"),Upr=o("TFLxmertForPreTraining"),Jpr=o(" (LXMERT model)"),Ypr=l(),fT=a("li"),Hbe=a("strong"),Kpr=o("mobilebert"),Zpr=o(" \u2014 "),CQ=a("a"),e_r=o("TFMobileBertForPreTraining"),o_r=o(" (MobileBERT model)"),r_r=l(),mT=a("li"),Ube=a("strong"),t_r=o("mpnet"),a_r=o(" \u2014 "),wQ=a("a"),n_r=o("TFMPNetForMaskedLM"),s_r=o(" (MPNet model)"),l_r=l(),gT=a("li"),Jbe=a("strong"),i_r=o("openai-gpt"),d_r=o(" \u2014 "),AQ=a("a"),c_r=o("TFOpenAIGPTLMHeadModel"),f_r=o(" (OpenAI GPT model)"),m_r=l(),hT=a("li"),Ybe=a("strong"),g_r=o("roberta"),h_r=o(" \u2014 "),yQ=a("a"),p_r=o("TFRobertaForMaskedLM"),__r=o(" (RoBERTa model)"),u_r=l(),pT=a("li"),Kbe=a("strong"),b_r=o("t5"),v_r=o(" \u2014 "),LQ=a("a"),F_r=o("TFT5ForConditionalGeneration"),T_r=o(" (T5 model)"),M_r=l(),_T=a("li"),Zbe=a("strong"),E_r=o("tapas"),C_r=o(" \u2014 "),xQ=a("a"),w_r=o("TFTapasForMaskedLM"),A_r=o(" (TAPAS model)"),y_r=l(),uT=a("li"),e4e=a("strong"),L_r=o("transfo-xl"),x_r=o(" \u2014 "),$Q=a("a"),$_r=o("TFTransfoXLLMHeadModel"),k_r=o(" (Transformer-XL model)"),S_r=l(),bT=a("li"),o4e=a("strong"),R_r=o("vit_mae"),P_r=o(" \u2014 "),kQ=a("a"),B_r=o("TFViTMAEForPreTraining"),I_r=o(" (ViTMAE model)"),N_r=l(),vT=a("li"),r4e=a("strong"),q_r=o("xlm"),j_r=o(" \u2014 "),SQ=a("a"),D_r=o("TFXLMWithLMHeadModel"),G_r=o(" (XLM model)"),O_r=l(),FT=a("li"),t4e=a("strong"),V_r=o("xlm-roberta"),X_r=o(" \u2014 "),RQ=a("a"),z_r=o("TFXLMRobertaForMaskedLM"),W_r=o(" (XLM-RoBERTa model)"),Q_r=l(),TT=a("li"),a4e=a("strong"),H_r=o("xlnet"),U_r=o(" \u2014 "),PQ=a("a"),J_r=o("TFXLNetLMHeadModel"),Y_r=o(" (XLNet model)"),K_r=l(),F(MT.$$.fragment),Eje=l(),Qd=a("h2"),ET=a("a"),n4e=a("span"),F(M7.$$.fragment),Z_r=l(),s4e=a("span"),eur=o("TFAutoModelForCausalLM"),Cje=l(),Zo=a("div"),F(E7.$$.fragment),our=l(),Hd=a("p"),rur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BQ=a("a"),tur=o("from_pretrained()"),aur=o(" class method or the "),IQ=a("a"),nur=o("from_config()"),sur=o(` class
method.`),lur=l(),C7=a("p"),iur=o("This class cannot be instantiated directly using "),l4e=a("code"),dur=o("__init__()"),cur=o(" (throws an error)."),fur=l(),xt=a("div"),F(w7.$$.fragment),mur=l(),i4e=a("p"),gur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hur=l(),Ud=a("p"),pur=o(`Note:
Loading a model from its configuration file does `),d4e=a("strong"),_ur=o("not"),uur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),bur=o("from_pretrained()"),vur=o(" to load the model weights."),Fur=l(),F(CT.$$.fragment),Tur=l(),yr=a("div"),F(A7.$$.fragment),Mur=l(),c4e=a("p"),Eur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Cur=l(),en=a("p"),wur=o("The model class to instantiate is selected based on the "),f4e=a("code"),Aur=o("model_type"),yur=o(` property of the config object (either
passed as an argument or loaded from `),m4e=a("code"),Lur=o("pretrained_model_name_or_path"),xur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=a("code"),$ur=o("pretrained_model_name_or_path"),kur=o(":"),Sur=l(),Me=a("ul"),wT=a("li"),h4e=a("strong"),Rur=o("bert"),Pur=o(" \u2014 "),qQ=a("a"),Bur=o("TFBertLMHeadModel"),Iur=o(" (BERT model)"),Nur=l(),AT=a("li"),p4e=a("strong"),qur=o("camembert"),jur=o(" \u2014 "),jQ=a("a"),Dur=o("TFCamembertForCausalLM"),Gur=o(" (CamemBERT model)"),Our=l(),yT=a("li"),_4e=a("strong"),Vur=o("ctrl"),Xur=o(" \u2014 "),DQ=a("a"),zur=o("TFCTRLLMHeadModel"),Wur=o(" (CTRL model)"),Qur=l(),LT=a("li"),u4e=a("strong"),Hur=o("gpt2"),Uur=o(" \u2014 "),GQ=a("a"),Jur=o("TFGPT2LMHeadModel"),Yur=o(" (OpenAI GPT-2 model)"),Kur=l(),xT=a("li"),b4e=a("strong"),Zur=o("gptj"),e2r=o(" \u2014 "),OQ=a("a"),o2r=o("TFGPTJForCausalLM"),r2r=o(" (GPT-J model)"),t2r=l(),$T=a("li"),v4e=a("strong"),a2r=o("openai-gpt"),n2r=o(" \u2014 "),VQ=a("a"),s2r=o("TFOpenAIGPTLMHeadModel"),l2r=o(" (OpenAI GPT model)"),i2r=l(),kT=a("li"),F4e=a("strong"),d2r=o("rembert"),c2r=o(" \u2014 "),XQ=a("a"),f2r=o("TFRemBertForCausalLM"),m2r=o(" (RemBERT model)"),g2r=l(),ST=a("li"),T4e=a("strong"),h2r=o("roberta"),p2r=o(" \u2014 "),zQ=a("a"),_2r=o("TFRobertaForCausalLM"),u2r=o(" (RoBERTa model)"),b2r=l(),RT=a("li"),M4e=a("strong"),v2r=o("roformer"),F2r=o(" \u2014 "),WQ=a("a"),T2r=o("TFRoFormerForCausalLM"),M2r=o(" (RoFormer model)"),E2r=l(),PT=a("li"),E4e=a("strong"),C2r=o("transfo-xl"),w2r=o(" \u2014 "),QQ=a("a"),A2r=o("TFTransfoXLLMHeadModel"),y2r=o(" (Transformer-XL model)"),L2r=l(),BT=a("li"),C4e=a("strong"),x2r=o("xlm"),$2r=o(" \u2014 "),HQ=a("a"),k2r=o("TFXLMWithLMHeadModel"),S2r=o(" (XLM model)"),R2r=l(),IT=a("li"),w4e=a("strong"),P2r=o("xlnet"),B2r=o(" \u2014 "),UQ=a("a"),I2r=o("TFXLNetLMHeadModel"),N2r=o(" (XLNet model)"),q2r=l(),F(NT.$$.fragment),wje=l(),Jd=a("h2"),qT=a("a"),A4e=a("span"),F(y7.$$.fragment),j2r=l(),y4e=a("span"),D2r=o("TFAutoModelForImageClassification"),Aje=l(),er=a("div"),F(L7.$$.fragment),G2r=l(),Yd=a("p"),O2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JQ=a("a"),V2r=o("from_pretrained()"),X2r=o(" class method or the "),YQ=a("a"),z2r=o("from_config()"),W2r=o(` class
method.`),Q2r=l(),x7=a("p"),H2r=o("This class cannot be instantiated directly using "),L4e=a("code"),U2r=o("__init__()"),J2r=o(" (throws an error)."),Y2r=l(),$t=a("div"),F($7.$$.fragment),K2r=l(),x4e=a("p"),Z2r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),e1r=l(),Kd=a("p"),o1r=o(`Note:
Loading a model from its configuration file does `),$4e=a("strong"),r1r=o("not"),t1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),a1r=o("from_pretrained()"),n1r=o(" to load the model weights."),s1r=l(),F(jT.$$.fragment),l1r=l(),Lr=a("div"),F(k7.$$.fragment),i1r=l(),k4e=a("p"),d1r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),c1r=l(),on=a("p"),f1r=o("The model class to instantiate is selected based on the "),S4e=a("code"),m1r=o("model_type"),g1r=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),h1r=o("pretrained_model_name_or_path"),p1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=a("code"),_1r=o("pretrained_model_name_or_path"),u1r=o(":"),b1r=l(),rn=a("ul"),DT=a("li"),B4e=a("strong"),v1r=o("convnext"),F1r=o(" \u2014 "),ZQ=a("a"),T1r=o("TFConvNextForImageClassification"),M1r=o(" (ConvNext model)"),E1r=l(),GT=a("li"),I4e=a("strong"),C1r=o("data2vec-vision"),w1r=o(" \u2014 "),eH=a("a"),A1r=o("TFData2VecVisionForImageClassification"),y1r=o(" (Data2VecVision model)"),L1r=l(),OT=a("li"),N4e=a("strong"),x1r=o("swin"),$1r=o(" \u2014 "),oH=a("a"),k1r=o("TFSwinForImageClassification"),S1r=o(" (Swin model)"),R1r=l(),VT=a("li"),q4e=a("strong"),P1r=o("vit"),B1r=o(" \u2014 "),rH=a("a"),I1r=o("TFViTForImageClassification"),N1r=o(" (ViT model)"),q1r=l(),F(XT.$$.fragment),yje=l(),Zd=a("h2"),zT=a("a"),j4e=a("span"),F(S7.$$.fragment),j1r=l(),D4e=a("span"),D1r=o("TFAutoModelForMaskedLM"),Lje=l(),or=a("div"),F(R7.$$.fragment),G1r=l(),ec=a("p"),O1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tH=a("a"),V1r=o("from_pretrained()"),X1r=o(" class method or the "),aH=a("a"),z1r=o("from_config()"),W1r=o(` class
method.`),Q1r=l(),P7=a("p"),H1r=o("This class cannot be instantiated directly using "),G4e=a("code"),U1r=o("__init__()"),J1r=o(" (throws an error)."),Y1r=l(),kt=a("div"),F(B7.$$.fragment),K1r=l(),O4e=a("p"),Z1r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ebr=l(),oc=a("p"),obr=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),rbr=o("not"),tbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),abr=o("from_pretrained()"),nbr=o(" to load the model weights."),sbr=l(),F(WT.$$.fragment),lbr=l(),xr=a("div"),F(I7.$$.fragment),ibr=l(),X4e=a("p"),dbr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cbr=l(),tn=a("p"),fbr=o("The model class to instantiate is selected based on the "),z4e=a("code"),mbr=o("model_type"),gbr=o(` property of the config object (either
passed as an argument or loaded from `),W4e=a("code"),hbr=o("pretrained_model_name_or_path"),pbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),_br=o("pretrained_model_name_or_path"),ubr=o(":"),bbr=l(),ie=a("ul"),QT=a("li"),H4e=a("strong"),vbr=o("albert"),Fbr=o(" \u2014 "),sH=a("a"),Tbr=o("TFAlbertForMaskedLM"),Mbr=o(" (ALBERT model)"),Ebr=l(),HT=a("li"),U4e=a("strong"),Cbr=o("bert"),wbr=o(" \u2014 "),lH=a("a"),Abr=o("TFBertForMaskedLM"),ybr=o(" (BERT model)"),Lbr=l(),UT=a("li"),J4e=a("strong"),xbr=o("camembert"),$br=o(" \u2014 "),iH=a("a"),kbr=o("TFCamembertForMaskedLM"),Sbr=o(" (CamemBERT model)"),Rbr=l(),JT=a("li"),Y4e=a("strong"),Pbr=o("convbert"),Bbr=o(" \u2014 "),dH=a("a"),Ibr=o("TFConvBertForMaskedLM"),Nbr=o(" (ConvBERT model)"),qbr=l(),YT=a("li"),K4e=a("strong"),jbr=o("deberta"),Dbr=o(" \u2014 "),cH=a("a"),Gbr=o("TFDebertaForMaskedLM"),Obr=o(" (DeBERTa model)"),Vbr=l(),KT=a("li"),Z4e=a("strong"),Xbr=o("deberta-v2"),zbr=o(" \u2014 "),fH=a("a"),Wbr=o("TFDebertaV2ForMaskedLM"),Qbr=o(" (DeBERTa-v2 model)"),Hbr=l(),ZT=a("li"),eve=a("strong"),Ubr=o("distilbert"),Jbr=o(" \u2014 "),mH=a("a"),Ybr=o("TFDistilBertForMaskedLM"),Kbr=o(" (DistilBERT model)"),Zbr=l(),eM=a("li"),ove=a("strong"),e4r=o("electra"),o4r=o(" \u2014 "),gH=a("a"),r4r=o("TFElectraForMaskedLM"),t4r=o(" (ELECTRA model)"),a4r=l(),oM=a("li"),rve=a("strong"),n4r=o("flaubert"),s4r=o(" \u2014 "),hH=a("a"),l4r=o("TFFlaubertWithLMHeadModel"),i4r=o(" (FlauBERT model)"),d4r=l(),rM=a("li"),tve=a("strong"),c4r=o("funnel"),f4r=o(" \u2014 "),pH=a("a"),m4r=o("TFFunnelForMaskedLM"),g4r=o(" (Funnel Transformer model)"),h4r=l(),tM=a("li"),ave=a("strong"),p4r=o("layoutlm"),_4r=o(" \u2014 "),_H=a("a"),u4r=o("TFLayoutLMForMaskedLM"),b4r=o(" (LayoutLM model)"),v4r=l(),aM=a("li"),nve=a("strong"),F4r=o("longformer"),T4r=o(" \u2014 "),uH=a("a"),M4r=o("TFLongformerForMaskedLM"),E4r=o(" (Longformer model)"),C4r=l(),nM=a("li"),sve=a("strong"),w4r=o("mobilebert"),A4r=o(" \u2014 "),bH=a("a"),y4r=o("TFMobileBertForMaskedLM"),L4r=o(" (MobileBERT model)"),x4r=l(),sM=a("li"),lve=a("strong"),$4r=o("mpnet"),k4r=o(" \u2014 "),vH=a("a"),S4r=o("TFMPNetForMaskedLM"),R4r=o(" (MPNet model)"),P4r=l(),lM=a("li"),ive=a("strong"),B4r=o("rembert"),I4r=o(" \u2014 "),FH=a("a"),N4r=o("TFRemBertForMaskedLM"),q4r=o(" (RemBERT model)"),j4r=l(),iM=a("li"),dve=a("strong"),D4r=o("roberta"),G4r=o(" \u2014 "),TH=a("a"),O4r=o("TFRobertaForMaskedLM"),V4r=o(" (RoBERTa model)"),X4r=l(),dM=a("li"),cve=a("strong"),z4r=o("roformer"),W4r=o(" \u2014 "),MH=a("a"),Q4r=o("TFRoFormerForMaskedLM"),H4r=o(" (RoFormer model)"),U4r=l(),cM=a("li"),fve=a("strong"),J4r=o("tapas"),Y4r=o(" \u2014 "),EH=a("a"),K4r=o("TFTapasForMaskedLM"),Z4r=o(" (TAPAS model)"),evr=l(),fM=a("li"),mve=a("strong"),ovr=o("xlm"),rvr=o(" \u2014 "),CH=a("a"),tvr=o("TFXLMWithLMHeadModel"),avr=o(" (XLM model)"),nvr=l(),mM=a("li"),gve=a("strong"),svr=o("xlm-roberta"),lvr=o(" \u2014 "),wH=a("a"),ivr=o("TFXLMRobertaForMaskedLM"),dvr=o(" (XLM-RoBERTa model)"),cvr=l(),F(gM.$$.fragment),xje=l(),rc=a("h2"),hM=a("a"),hve=a("span"),F(N7.$$.fragment),fvr=l(),pve=a("span"),mvr=o("TFAutoModelForSeq2SeqLM"),$je=l(),rr=a("div"),F(q7.$$.fragment),gvr=l(),tc=a("p"),hvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AH=a("a"),pvr=o("from_pretrained()"),_vr=o(" class method or the "),yH=a("a"),uvr=o("from_config()"),bvr=o(` class
method.`),vvr=l(),j7=a("p"),Fvr=o("This class cannot be instantiated directly using "),_ve=a("code"),Tvr=o("__init__()"),Mvr=o(" (throws an error)."),Evr=l(),St=a("div"),F(D7.$$.fragment),Cvr=l(),uve=a("p"),wvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Avr=l(),ac=a("p"),yvr=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),Lvr=o("not"),xvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),$vr=o("from_pretrained()"),kvr=o(" to load the model weights."),Svr=l(),F(pM.$$.fragment),Rvr=l(),$r=a("div"),F(G7.$$.fragment),Pvr=l(),vve=a("p"),Bvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ivr=l(),an=a("p"),Nvr=o("The model class to instantiate is selected based on the "),Fve=a("code"),qvr=o("model_type"),jvr=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),Dvr=o("pretrained_model_name_or_path"),Gvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),Ovr=o("pretrained_model_name_or_path"),Vvr=o(":"),Xvr=l(),Le=a("ul"),_M=a("li"),Eve=a("strong"),zvr=o("bart"),Wvr=o(" \u2014 "),xH=a("a"),Qvr=o("TFBartForConditionalGeneration"),Hvr=o(" (BART model)"),Uvr=l(),uM=a("li"),Cve=a("strong"),Jvr=o("blenderbot"),Yvr=o(" \u2014 "),$H=a("a"),Kvr=o("TFBlenderbotForConditionalGeneration"),Zvr=o(" (Blenderbot model)"),e0r=l(),bM=a("li"),wve=a("strong"),o0r=o("blenderbot-small"),r0r=o(" \u2014 "),kH=a("a"),t0r=o("TFBlenderbotSmallForConditionalGeneration"),a0r=o(" (BlenderbotSmall model)"),n0r=l(),vM=a("li"),Ave=a("strong"),s0r=o("encoder-decoder"),l0r=o(" \u2014 "),SH=a("a"),i0r=o("TFEncoderDecoderModel"),d0r=o(" (Encoder decoder model)"),c0r=l(),FM=a("li"),yve=a("strong"),f0r=o("led"),m0r=o(" \u2014 "),RH=a("a"),g0r=o("TFLEDForConditionalGeneration"),h0r=o(" (LED model)"),p0r=l(),TM=a("li"),Lve=a("strong"),_0r=o("marian"),u0r=o(" \u2014 "),PH=a("a"),b0r=o("TFMarianMTModel"),v0r=o(" (Marian model)"),F0r=l(),MM=a("li"),xve=a("strong"),T0r=o("mbart"),M0r=o(" \u2014 "),BH=a("a"),E0r=o("TFMBartForConditionalGeneration"),C0r=o(" (mBART model)"),w0r=l(),EM=a("li"),$ve=a("strong"),A0r=o("mt5"),y0r=o(" \u2014 "),IH=a("a"),L0r=o("TFMT5ForConditionalGeneration"),x0r=o(" (mT5 model)"),$0r=l(),CM=a("li"),kve=a("strong"),k0r=o("pegasus"),S0r=o(" \u2014 "),NH=a("a"),R0r=o("TFPegasusForConditionalGeneration"),P0r=o(" (Pegasus model)"),B0r=l(),wM=a("li"),Sve=a("strong"),I0r=o("t5"),N0r=o(" \u2014 "),qH=a("a"),q0r=o("TFT5ForConditionalGeneration"),j0r=o(" (T5 model)"),D0r=l(),F(AM.$$.fragment),kje=l(),nc=a("h2"),yM=a("a"),Rve=a("span"),F(O7.$$.fragment),G0r=l(),Pve=a("span"),O0r=o("TFAutoModelForSequenceClassification"),Sje=l(),tr=a("div"),F(V7.$$.fragment),V0r=l(),sc=a("p"),X0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jH=a("a"),z0r=o("from_pretrained()"),W0r=o(" class method or the "),DH=a("a"),Q0r=o("from_config()"),H0r=o(` class
method.`),U0r=l(),X7=a("p"),J0r=o("This class cannot be instantiated directly using "),Bve=a("code"),Y0r=o("__init__()"),K0r=o(" (throws an error)."),Z0r=l(),Rt=a("div"),F(z7.$$.fragment),eFr=l(),Ive=a("p"),oFr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rFr=l(),lc=a("p"),tFr=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),aFr=o("not"),nFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),sFr=o("from_pretrained()"),lFr=o(" to load the model weights."),iFr=l(),F(LM.$$.fragment),dFr=l(),kr=a("div"),F(W7.$$.fragment),cFr=l(),qve=a("p"),fFr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mFr=l(),nn=a("p"),gFr=o("The model class to instantiate is selected based on the "),jve=a("code"),hFr=o("model_type"),pFr=o(` property of the config object (either
passed as an argument or loaded from `),Dve=a("code"),_Fr=o("pretrained_model_name_or_path"),uFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),bFr=o("pretrained_model_name_or_path"),vFr=o(":"),FFr=l(),oe=a("ul"),xM=a("li"),Ove=a("strong"),TFr=o("albert"),MFr=o(" \u2014 "),OH=a("a"),EFr=o("TFAlbertForSequenceClassification"),CFr=o(" (ALBERT model)"),wFr=l(),$M=a("li"),Vve=a("strong"),AFr=o("bert"),yFr=o(" \u2014 "),VH=a("a"),LFr=o("TFBertForSequenceClassification"),xFr=o(" (BERT model)"),$Fr=l(),kM=a("li"),Xve=a("strong"),kFr=o("camembert"),SFr=o(" \u2014 "),XH=a("a"),RFr=o("TFCamembertForSequenceClassification"),PFr=o(" (CamemBERT model)"),BFr=l(),SM=a("li"),zve=a("strong"),IFr=o("convbert"),NFr=o(" \u2014 "),zH=a("a"),qFr=o("TFConvBertForSequenceClassification"),jFr=o(" (ConvBERT model)"),DFr=l(),RM=a("li"),Wve=a("strong"),GFr=o("ctrl"),OFr=o(" \u2014 "),WH=a("a"),VFr=o("TFCTRLForSequenceClassification"),XFr=o(" (CTRL model)"),zFr=l(),PM=a("li"),Qve=a("strong"),WFr=o("deberta"),QFr=o(" \u2014 "),QH=a("a"),HFr=o("TFDebertaForSequenceClassification"),UFr=o(" (DeBERTa model)"),JFr=l(),BM=a("li"),Hve=a("strong"),YFr=o("deberta-v2"),KFr=o(" \u2014 "),HH=a("a"),ZFr=o("TFDebertaV2ForSequenceClassification"),e6r=o(" (DeBERTa-v2 model)"),o6r=l(),IM=a("li"),Uve=a("strong"),r6r=o("distilbert"),t6r=o(" \u2014 "),UH=a("a"),a6r=o("TFDistilBertForSequenceClassification"),n6r=o(" (DistilBERT model)"),s6r=l(),NM=a("li"),Jve=a("strong"),l6r=o("electra"),i6r=o(" \u2014 "),JH=a("a"),d6r=o("TFElectraForSequenceClassification"),c6r=o(" (ELECTRA model)"),f6r=l(),qM=a("li"),Yve=a("strong"),m6r=o("flaubert"),g6r=o(" \u2014 "),YH=a("a"),h6r=o("TFFlaubertForSequenceClassification"),p6r=o(" (FlauBERT model)"),_6r=l(),jM=a("li"),Kve=a("strong"),u6r=o("funnel"),b6r=o(" \u2014 "),KH=a("a"),v6r=o("TFFunnelForSequenceClassification"),F6r=o(" (Funnel Transformer model)"),T6r=l(),DM=a("li"),Zve=a("strong"),M6r=o("gpt2"),E6r=o(" \u2014 "),ZH=a("a"),C6r=o("TFGPT2ForSequenceClassification"),w6r=o(" (OpenAI GPT-2 model)"),A6r=l(),GM=a("li"),e0e=a("strong"),y6r=o("gptj"),L6r=o(" \u2014 "),eU=a("a"),x6r=o("TFGPTJForSequenceClassification"),$6r=o(" (GPT-J model)"),k6r=l(),OM=a("li"),o0e=a("strong"),S6r=o("layoutlm"),R6r=o(" \u2014 "),oU=a("a"),P6r=o("TFLayoutLMForSequenceClassification"),B6r=o(" (LayoutLM model)"),I6r=l(),VM=a("li"),r0e=a("strong"),N6r=o("longformer"),q6r=o(" \u2014 "),rU=a("a"),j6r=o("TFLongformerForSequenceClassification"),D6r=o(" (Longformer model)"),G6r=l(),XM=a("li"),t0e=a("strong"),O6r=o("mobilebert"),V6r=o(" \u2014 "),tU=a("a"),X6r=o("TFMobileBertForSequenceClassification"),z6r=o(" (MobileBERT model)"),W6r=l(),zM=a("li"),a0e=a("strong"),Q6r=o("mpnet"),H6r=o(" \u2014 "),aU=a("a"),U6r=o("TFMPNetForSequenceClassification"),J6r=o(" (MPNet model)"),Y6r=l(),WM=a("li"),n0e=a("strong"),K6r=o("openai-gpt"),Z6r=o(" \u2014 "),nU=a("a"),eTr=o("TFOpenAIGPTForSequenceClassification"),oTr=o(" (OpenAI GPT model)"),rTr=l(),QM=a("li"),s0e=a("strong"),tTr=o("rembert"),aTr=o(" \u2014 "),sU=a("a"),nTr=o("TFRemBertForSequenceClassification"),sTr=o(" (RemBERT model)"),lTr=l(),HM=a("li"),l0e=a("strong"),iTr=o("roberta"),dTr=o(" \u2014 "),lU=a("a"),cTr=o("TFRobertaForSequenceClassification"),fTr=o(" (RoBERTa model)"),mTr=l(),UM=a("li"),i0e=a("strong"),gTr=o("roformer"),hTr=o(" \u2014 "),iU=a("a"),pTr=o("TFRoFormerForSequenceClassification"),_Tr=o(" (RoFormer model)"),uTr=l(),JM=a("li"),d0e=a("strong"),bTr=o("tapas"),vTr=o(" \u2014 "),dU=a("a"),FTr=o("TFTapasForSequenceClassification"),TTr=o(" (TAPAS model)"),MTr=l(),YM=a("li"),c0e=a("strong"),ETr=o("transfo-xl"),CTr=o(" \u2014 "),cU=a("a"),wTr=o("TFTransfoXLForSequenceClassification"),ATr=o(" (Transformer-XL model)"),yTr=l(),KM=a("li"),f0e=a("strong"),LTr=o("xlm"),xTr=o(" \u2014 "),fU=a("a"),$Tr=o("TFXLMForSequenceClassification"),kTr=o(" (XLM model)"),STr=l(),ZM=a("li"),m0e=a("strong"),RTr=o("xlm-roberta"),PTr=o(" \u2014 "),mU=a("a"),BTr=o("TFXLMRobertaForSequenceClassification"),ITr=o(" (XLM-RoBERTa model)"),NTr=l(),eE=a("li"),g0e=a("strong"),qTr=o("xlnet"),jTr=o(" \u2014 "),gU=a("a"),DTr=o("TFXLNetForSequenceClassification"),GTr=o(" (XLNet model)"),OTr=l(),F(oE.$$.fragment),Rje=l(),ic=a("h2"),rE=a("a"),h0e=a("span"),F(Q7.$$.fragment),VTr=l(),p0e=a("span"),XTr=o("TFAutoModelForMultipleChoice"),Pje=l(),ar=a("div"),F(H7.$$.fragment),zTr=l(),dc=a("p"),WTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hU=a("a"),QTr=o("from_pretrained()"),HTr=o(" class method or the "),pU=a("a"),UTr=o("from_config()"),JTr=o(` class
method.`),YTr=l(),U7=a("p"),KTr=o("This class cannot be instantiated directly using "),_0e=a("code"),ZTr=o("__init__()"),eMr=o(" (throws an error)."),oMr=l(),Pt=a("div"),F(J7.$$.fragment),rMr=l(),u0e=a("p"),tMr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),aMr=l(),cc=a("p"),nMr=o(`Note:
Loading a model from its configuration file does `),b0e=a("strong"),sMr=o("not"),lMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),iMr=o("from_pretrained()"),dMr=o(" to load the model weights."),cMr=l(),F(tE.$$.fragment),fMr=l(),Sr=a("div"),F(Y7.$$.fragment),mMr=l(),v0e=a("p"),gMr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hMr=l(),sn=a("p"),pMr=o("The model class to instantiate is selected based on the "),F0e=a("code"),_Mr=o("model_type"),uMr=o(` property of the config object (either
passed as an argument or loaded from `),T0e=a("code"),bMr=o("pretrained_model_name_or_path"),vMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=a("code"),FMr=o("pretrained_model_name_or_path"),TMr=o(":"),MMr=l(),pe=a("ul"),aE=a("li"),E0e=a("strong"),EMr=o("albert"),CMr=o(" \u2014 "),uU=a("a"),wMr=o("TFAlbertForMultipleChoice"),AMr=o(" (ALBERT model)"),yMr=l(),nE=a("li"),C0e=a("strong"),LMr=o("bert"),xMr=o(" \u2014 "),bU=a("a"),$Mr=o("TFBertForMultipleChoice"),kMr=o(" (BERT model)"),SMr=l(),sE=a("li"),w0e=a("strong"),RMr=o("camembert"),PMr=o(" \u2014 "),vU=a("a"),BMr=o("TFCamembertForMultipleChoice"),IMr=o(" (CamemBERT model)"),NMr=l(),lE=a("li"),A0e=a("strong"),qMr=o("convbert"),jMr=o(" \u2014 "),FU=a("a"),DMr=o("TFConvBertForMultipleChoice"),GMr=o(" (ConvBERT model)"),OMr=l(),iE=a("li"),y0e=a("strong"),VMr=o("distilbert"),XMr=o(" \u2014 "),TU=a("a"),zMr=o("TFDistilBertForMultipleChoice"),WMr=o(" (DistilBERT model)"),QMr=l(),dE=a("li"),L0e=a("strong"),HMr=o("electra"),UMr=o(" \u2014 "),MU=a("a"),JMr=o("TFElectraForMultipleChoice"),YMr=o(" (ELECTRA model)"),KMr=l(),cE=a("li"),x0e=a("strong"),ZMr=o("flaubert"),eEr=o(" \u2014 "),EU=a("a"),oEr=o("TFFlaubertForMultipleChoice"),rEr=o(" (FlauBERT model)"),tEr=l(),fE=a("li"),$0e=a("strong"),aEr=o("funnel"),nEr=o(" \u2014 "),CU=a("a"),sEr=o("TFFunnelForMultipleChoice"),lEr=o(" (Funnel Transformer model)"),iEr=l(),mE=a("li"),k0e=a("strong"),dEr=o("longformer"),cEr=o(" \u2014 "),wU=a("a"),fEr=o("TFLongformerForMultipleChoice"),mEr=o(" (Longformer model)"),gEr=l(),gE=a("li"),S0e=a("strong"),hEr=o("mobilebert"),pEr=o(" \u2014 "),AU=a("a"),_Er=o("TFMobileBertForMultipleChoice"),uEr=o(" (MobileBERT model)"),bEr=l(),hE=a("li"),R0e=a("strong"),vEr=o("mpnet"),FEr=o(" \u2014 "),yU=a("a"),TEr=o("TFMPNetForMultipleChoice"),MEr=o(" (MPNet model)"),EEr=l(),pE=a("li"),P0e=a("strong"),CEr=o("rembert"),wEr=o(" \u2014 "),LU=a("a"),AEr=o("TFRemBertForMultipleChoice"),yEr=o(" (RemBERT model)"),LEr=l(),_E=a("li"),B0e=a("strong"),xEr=o("roberta"),$Er=o(" \u2014 "),xU=a("a"),kEr=o("TFRobertaForMultipleChoice"),SEr=o(" (RoBERTa model)"),REr=l(),uE=a("li"),I0e=a("strong"),PEr=o("roformer"),BEr=o(" \u2014 "),$U=a("a"),IEr=o("TFRoFormerForMultipleChoice"),NEr=o(" (RoFormer model)"),qEr=l(),bE=a("li"),N0e=a("strong"),jEr=o("xlm"),DEr=o(" \u2014 "),kU=a("a"),GEr=o("TFXLMForMultipleChoice"),OEr=o(" (XLM model)"),VEr=l(),vE=a("li"),q0e=a("strong"),XEr=o("xlm-roberta"),zEr=o(" \u2014 "),SU=a("a"),WEr=o("TFXLMRobertaForMultipleChoice"),QEr=o(" (XLM-RoBERTa model)"),HEr=l(),FE=a("li"),j0e=a("strong"),UEr=o("xlnet"),JEr=o(" \u2014 "),RU=a("a"),YEr=o("TFXLNetForMultipleChoice"),KEr=o(" (XLNet model)"),ZEr=l(),F(TE.$$.fragment),Bje=l(),fc=a("h2"),ME=a("a"),D0e=a("span"),F(K7.$$.fragment),eCr=l(),G0e=a("span"),oCr=o("TFAutoModelForNextSentencePrediction"),Ije=l(),nr=a("div"),F(Z7.$$.fragment),rCr=l(),mc=a("p"),tCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PU=a("a"),aCr=o("from_pretrained()"),nCr=o(" class method or the "),BU=a("a"),sCr=o("from_config()"),lCr=o(` class
method.`),iCr=l(),e9=a("p"),dCr=o("This class cannot be instantiated directly using "),O0e=a("code"),cCr=o("__init__()"),fCr=o(" (throws an error)."),mCr=l(),Bt=a("div"),F(o9.$$.fragment),gCr=l(),V0e=a("p"),hCr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pCr=l(),gc=a("p"),_Cr=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),uCr=o("not"),bCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),vCr=o("from_pretrained()"),FCr=o(" to load the model weights."),TCr=l(),F(EE.$$.fragment),MCr=l(),Rr=a("div"),F(r9.$$.fragment),ECr=l(),z0e=a("p"),CCr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wCr=l(),ln=a("p"),ACr=o("The model class to instantiate is selected based on the "),W0e=a("code"),yCr=o("model_type"),LCr=o(` property of the config object (either
passed as an argument or loaded from `),Q0e=a("code"),xCr=o("pretrained_model_name_or_path"),$Cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),kCr=o("pretrained_model_name_or_path"),SCr=o(":"),RCr=l(),t9=a("ul"),CE=a("li"),U0e=a("strong"),PCr=o("bert"),BCr=o(" \u2014 "),NU=a("a"),ICr=o("TFBertForNextSentencePrediction"),NCr=o(" (BERT model)"),qCr=l(),wE=a("li"),J0e=a("strong"),jCr=o("mobilebert"),DCr=o(" \u2014 "),qU=a("a"),GCr=o("TFMobileBertForNextSentencePrediction"),OCr=o(" (MobileBERT model)"),VCr=l(),F(AE.$$.fragment),Nje=l(),hc=a("h2"),yE=a("a"),Y0e=a("span"),F(a9.$$.fragment),XCr=l(),K0e=a("span"),zCr=o("TFAutoModelForTableQuestionAnswering"),qje=l(),sr=a("div"),F(n9.$$.fragment),WCr=l(),pc=a("p"),QCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jU=a("a"),HCr=o("from_pretrained()"),UCr=o(" class method or the "),DU=a("a"),JCr=o("from_config()"),YCr=o(` class
method.`),KCr=l(),s9=a("p"),ZCr=o("This class cannot be instantiated directly using "),Z0e=a("code"),e5r=o("__init__()"),o5r=o(" (throws an error)."),r5r=l(),It=a("div"),F(l9.$$.fragment),t5r=l(),eFe=a("p"),a5r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),n5r=l(),_c=a("p"),s5r=o(`Note:
Loading a model from its configuration file does `),oFe=a("strong"),l5r=o("not"),i5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),d5r=o("from_pretrained()"),c5r=o(" to load the model weights."),f5r=l(),F(LE.$$.fragment),m5r=l(),Pr=a("div"),F(i9.$$.fragment),g5r=l(),rFe=a("p"),h5r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),p5r=l(),dn=a("p"),_5r=o("The model class to instantiate is selected based on the "),tFe=a("code"),u5r=o("model_type"),b5r=o(` property of the config object (either
passed as an argument or loaded from `),aFe=a("code"),v5r=o("pretrained_model_name_or_path"),F5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=a("code"),T5r=o("pretrained_model_name_or_path"),M5r=o(":"),E5r=l(),sFe=a("ul"),xE=a("li"),lFe=a("strong"),C5r=o("tapas"),w5r=o(" \u2014 "),OU=a("a"),A5r=o("TFTapasForQuestionAnswering"),y5r=o(" (TAPAS model)"),L5r=l(),F($E.$$.fragment),jje=l(),uc=a("h2"),kE=a("a"),iFe=a("span"),F(d9.$$.fragment),x5r=l(),dFe=a("span"),$5r=o("TFAutoModelForTokenClassification"),Dje=l(),lr=a("div"),F(c9.$$.fragment),k5r=l(),bc=a("p"),S5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VU=a("a"),R5r=o("from_pretrained()"),P5r=o(" class method or the "),XU=a("a"),B5r=o("from_config()"),I5r=o(` class
method.`),N5r=l(),f9=a("p"),q5r=o("This class cannot be instantiated directly using "),cFe=a("code"),j5r=o("__init__()"),D5r=o(" (throws an error)."),G5r=l(),Nt=a("div"),F(m9.$$.fragment),O5r=l(),fFe=a("p"),V5r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),X5r=l(),vc=a("p"),z5r=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),W5r=o("not"),Q5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),H5r=o("from_pretrained()"),U5r=o(" to load the model weights."),J5r=l(),F(SE.$$.fragment),Y5r=l(),Br=a("div"),F(g9.$$.fragment),K5r=l(),gFe=a("p"),Z5r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),e3r=l(),cn=a("p"),o3r=o("The model class to instantiate is selected based on the "),hFe=a("code"),r3r=o("model_type"),t3r=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),a3r=o("pretrained_model_name_or_path"),n3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),s3r=o("pretrained_model_name_or_path"),l3r=o(":"),i3r=l(),de=a("ul"),RE=a("li"),uFe=a("strong"),d3r=o("albert"),c3r=o(" \u2014 "),WU=a("a"),f3r=o("TFAlbertForTokenClassification"),m3r=o(" (ALBERT model)"),g3r=l(),PE=a("li"),bFe=a("strong"),h3r=o("bert"),p3r=o(" \u2014 "),QU=a("a"),_3r=o("TFBertForTokenClassification"),u3r=o(" (BERT model)"),b3r=l(),BE=a("li"),vFe=a("strong"),v3r=o("camembert"),F3r=o(" \u2014 "),HU=a("a"),T3r=o("TFCamembertForTokenClassification"),M3r=o(" (CamemBERT model)"),E3r=l(),IE=a("li"),FFe=a("strong"),C3r=o("convbert"),w3r=o(" \u2014 "),UU=a("a"),A3r=o("TFConvBertForTokenClassification"),y3r=o(" (ConvBERT model)"),L3r=l(),NE=a("li"),TFe=a("strong"),x3r=o("deberta"),$3r=o(" \u2014 "),JU=a("a"),k3r=o("TFDebertaForTokenClassification"),S3r=o(" (DeBERTa model)"),R3r=l(),qE=a("li"),MFe=a("strong"),P3r=o("deberta-v2"),B3r=o(" \u2014 "),YU=a("a"),I3r=o("TFDebertaV2ForTokenClassification"),N3r=o(" (DeBERTa-v2 model)"),q3r=l(),jE=a("li"),EFe=a("strong"),j3r=o("distilbert"),D3r=o(" \u2014 "),KU=a("a"),G3r=o("TFDistilBertForTokenClassification"),O3r=o(" (DistilBERT model)"),V3r=l(),DE=a("li"),CFe=a("strong"),X3r=o("electra"),z3r=o(" \u2014 "),ZU=a("a"),W3r=o("TFElectraForTokenClassification"),Q3r=o(" (ELECTRA model)"),H3r=l(),GE=a("li"),wFe=a("strong"),U3r=o("flaubert"),J3r=o(" \u2014 "),eJ=a("a"),Y3r=o("TFFlaubertForTokenClassification"),K3r=o(" (FlauBERT model)"),Z3r=l(),OE=a("li"),AFe=a("strong"),ewr=o("funnel"),owr=o(" \u2014 "),oJ=a("a"),rwr=o("TFFunnelForTokenClassification"),twr=o(" (Funnel Transformer model)"),awr=l(),VE=a("li"),yFe=a("strong"),nwr=o("layoutlm"),swr=o(" \u2014 "),rJ=a("a"),lwr=o("TFLayoutLMForTokenClassification"),iwr=o(" (LayoutLM model)"),dwr=l(),XE=a("li"),LFe=a("strong"),cwr=o("longformer"),fwr=o(" \u2014 "),tJ=a("a"),mwr=o("TFLongformerForTokenClassification"),gwr=o(" (Longformer model)"),hwr=l(),zE=a("li"),xFe=a("strong"),pwr=o("mobilebert"),_wr=o(" \u2014 "),aJ=a("a"),uwr=o("TFMobileBertForTokenClassification"),bwr=o(" (MobileBERT model)"),vwr=l(),WE=a("li"),$Fe=a("strong"),Fwr=o("mpnet"),Twr=o(" \u2014 "),nJ=a("a"),Mwr=o("TFMPNetForTokenClassification"),Ewr=o(" (MPNet model)"),Cwr=l(),QE=a("li"),kFe=a("strong"),wwr=o("rembert"),Awr=o(" \u2014 "),sJ=a("a"),ywr=o("TFRemBertForTokenClassification"),Lwr=o(" (RemBERT model)"),xwr=l(),HE=a("li"),SFe=a("strong"),$wr=o("roberta"),kwr=o(" \u2014 "),lJ=a("a"),Swr=o("TFRobertaForTokenClassification"),Rwr=o(" (RoBERTa model)"),Pwr=l(),UE=a("li"),RFe=a("strong"),Bwr=o("roformer"),Iwr=o(" \u2014 "),iJ=a("a"),Nwr=o("TFRoFormerForTokenClassification"),qwr=o(" (RoFormer model)"),jwr=l(),JE=a("li"),PFe=a("strong"),Dwr=o("xlm"),Gwr=o(" \u2014 "),dJ=a("a"),Owr=o("TFXLMForTokenClassification"),Vwr=o(" (XLM model)"),Xwr=l(),YE=a("li"),BFe=a("strong"),zwr=o("xlm-roberta"),Wwr=o(" \u2014 "),cJ=a("a"),Qwr=o("TFXLMRobertaForTokenClassification"),Hwr=o(" (XLM-RoBERTa model)"),Uwr=l(),KE=a("li"),IFe=a("strong"),Jwr=o("xlnet"),Ywr=o(" \u2014 "),fJ=a("a"),Kwr=o("TFXLNetForTokenClassification"),Zwr=o(" (XLNet model)"),eAr=l(),F(ZE.$$.fragment),Gje=l(),Fc=a("h2"),eC=a("a"),NFe=a("span"),F(h9.$$.fragment),oAr=l(),qFe=a("span"),rAr=o("TFAutoModelForQuestionAnswering"),Oje=l(),ir=a("div"),F(p9.$$.fragment),tAr=l(),Tc=a("p"),aAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mJ=a("a"),nAr=o("from_pretrained()"),sAr=o(" class method or the "),gJ=a("a"),lAr=o("from_config()"),iAr=o(` class
method.`),dAr=l(),_9=a("p"),cAr=o("This class cannot be instantiated directly using "),jFe=a("code"),fAr=o("__init__()"),mAr=o(" (throws an error)."),gAr=l(),qt=a("div"),F(u9.$$.fragment),hAr=l(),DFe=a("p"),pAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Ar=l(),Mc=a("p"),uAr=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),bAr=o("not"),vAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),FAr=o("from_pretrained()"),TAr=o(" to load the model weights."),MAr=l(),F(oC.$$.fragment),EAr=l(),Ir=a("div"),F(b9.$$.fragment),CAr=l(),OFe=a("p"),wAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),AAr=l(),fn=a("p"),yAr=o("The model class to instantiate is selected based on the "),VFe=a("code"),LAr=o("model_type"),xAr=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),$Ar=o("pretrained_model_name_or_path"),kAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),SAr=o("pretrained_model_name_or_path"),RAr=o(":"),PAr=l(),ce=a("ul"),rC=a("li"),WFe=a("strong"),BAr=o("albert"),IAr=o(" \u2014 "),pJ=a("a"),NAr=o("TFAlbertForQuestionAnswering"),qAr=o(" (ALBERT model)"),jAr=l(),tC=a("li"),QFe=a("strong"),DAr=o("bert"),GAr=o(" \u2014 "),_J=a("a"),OAr=o("TFBertForQuestionAnswering"),VAr=o(" (BERT model)"),XAr=l(),aC=a("li"),HFe=a("strong"),zAr=o("camembert"),WAr=o(" \u2014 "),uJ=a("a"),QAr=o("TFCamembertForQuestionAnswering"),HAr=o(" (CamemBERT model)"),UAr=l(),nC=a("li"),UFe=a("strong"),JAr=o("convbert"),YAr=o(" \u2014 "),bJ=a("a"),KAr=o("TFConvBertForQuestionAnswering"),ZAr=o(" (ConvBERT model)"),eyr=l(),sC=a("li"),JFe=a("strong"),oyr=o("deberta"),ryr=o(" \u2014 "),vJ=a("a"),tyr=o("TFDebertaForQuestionAnswering"),ayr=o(" (DeBERTa model)"),nyr=l(),lC=a("li"),YFe=a("strong"),syr=o("deberta-v2"),lyr=o(" \u2014 "),FJ=a("a"),iyr=o("TFDebertaV2ForQuestionAnswering"),dyr=o(" (DeBERTa-v2 model)"),cyr=l(),iC=a("li"),KFe=a("strong"),fyr=o("distilbert"),myr=o(" \u2014 "),TJ=a("a"),gyr=o("TFDistilBertForQuestionAnswering"),hyr=o(" (DistilBERT model)"),pyr=l(),dC=a("li"),ZFe=a("strong"),_yr=o("electra"),uyr=o(" \u2014 "),MJ=a("a"),byr=o("TFElectraForQuestionAnswering"),vyr=o(" (ELECTRA model)"),Fyr=l(),cC=a("li"),e6e=a("strong"),Tyr=o("flaubert"),Myr=o(" \u2014 "),EJ=a("a"),Eyr=o("TFFlaubertForQuestionAnsweringSimple"),Cyr=o(" (FlauBERT model)"),wyr=l(),fC=a("li"),o6e=a("strong"),Ayr=o("funnel"),yyr=o(" \u2014 "),CJ=a("a"),Lyr=o("TFFunnelForQuestionAnswering"),xyr=o(" (Funnel Transformer model)"),$yr=l(),mC=a("li"),r6e=a("strong"),kyr=o("gptj"),Syr=o(" \u2014 "),wJ=a("a"),Ryr=o("TFGPTJForQuestionAnswering"),Pyr=o(" (GPT-J model)"),Byr=l(),gC=a("li"),t6e=a("strong"),Iyr=o("longformer"),Nyr=o(" \u2014 "),AJ=a("a"),qyr=o("TFLongformerForQuestionAnswering"),jyr=o(" (Longformer model)"),Dyr=l(),hC=a("li"),a6e=a("strong"),Gyr=o("mobilebert"),Oyr=o(" \u2014 "),yJ=a("a"),Vyr=o("TFMobileBertForQuestionAnswering"),Xyr=o(" (MobileBERT model)"),zyr=l(),pC=a("li"),n6e=a("strong"),Wyr=o("mpnet"),Qyr=o(" \u2014 "),LJ=a("a"),Hyr=o("TFMPNetForQuestionAnswering"),Uyr=o(" (MPNet model)"),Jyr=l(),_C=a("li"),s6e=a("strong"),Yyr=o("rembert"),Kyr=o(" \u2014 "),xJ=a("a"),Zyr=o("TFRemBertForQuestionAnswering"),eLr=o(" (RemBERT model)"),oLr=l(),uC=a("li"),l6e=a("strong"),rLr=o("roberta"),tLr=o(" \u2014 "),$J=a("a"),aLr=o("TFRobertaForQuestionAnswering"),nLr=o(" (RoBERTa model)"),sLr=l(),bC=a("li"),i6e=a("strong"),lLr=o("roformer"),iLr=o(" \u2014 "),kJ=a("a"),dLr=o("TFRoFormerForQuestionAnswering"),cLr=o(" (RoFormer model)"),fLr=l(),vC=a("li"),d6e=a("strong"),mLr=o("xlm"),gLr=o(" \u2014 "),SJ=a("a"),hLr=o("TFXLMForQuestionAnsweringSimple"),pLr=o(" (XLM model)"),_Lr=l(),FC=a("li"),c6e=a("strong"),uLr=o("xlm-roberta"),bLr=o(" \u2014 "),RJ=a("a"),vLr=o("TFXLMRobertaForQuestionAnswering"),FLr=o(" (XLM-RoBERTa model)"),TLr=l(),TC=a("li"),f6e=a("strong"),MLr=o("xlnet"),ELr=o(" \u2014 "),PJ=a("a"),CLr=o("TFXLNetForQuestionAnsweringSimple"),wLr=o(" (XLNet model)"),ALr=l(),F(MC.$$.fragment),Vje=l(),Ec=a("h2"),EC=a("a"),m6e=a("span"),F(v9.$$.fragment),yLr=l(),g6e=a("span"),LLr=o("TFAutoModelForVision2Seq"),Xje=l(),dr=a("div"),F(F9.$$.fragment),xLr=l(),Cc=a("p"),$Lr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BJ=a("a"),kLr=o("from_pretrained()"),SLr=o(" class method or the "),IJ=a("a"),RLr=o("from_config()"),PLr=o(` class
method.`),BLr=l(),T9=a("p"),ILr=o("This class cannot be instantiated directly using "),h6e=a("code"),NLr=o("__init__()"),qLr=o(" (throws an error)."),jLr=l(),jt=a("div"),F(M9.$$.fragment),DLr=l(),p6e=a("p"),GLr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OLr=l(),wc=a("p"),VLr=o(`Note:
Loading a model from its configuration file does `),_6e=a("strong"),XLr=o("not"),zLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),WLr=o("from_pretrained()"),QLr=o(" to load the model weights."),HLr=l(),F(CC.$$.fragment),ULr=l(),Nr=a("div"),F(E9.$$.fragment),JLr=l(),u6e=a("p"),YLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KLr=l(),mn=a("p"),ZLr=o("The model class to instantiate is selected based on the "),b6e=a("code"),e8r=o("model_type"),o8r=o(` property of the config object (either
passed as an argument or loaded from `),v6e=a("code"),r8r=o("pretrained_model_name_or_path"),t8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=a("code"),a8r=o("pretrained_model_name_or_path"),n8r=o(":"),s8r=l(),T6e=a("ul"),wC=a("li"),M6e=a("strong"),l8r=o("vision-encoder-decoder"),i8r=o(" \u2014 "),qJ=a("a"),d8r=o("TFVisionEncoderDecoderModel"),c8r=o(" (Vision Encoder decoder model)"),f8r=l(),F(AC.$$.fragment),zje=l(),Ac=a("h2"),yC=a("a"),E6e=a("span"),F(C9.$$.fragment),m8r=l(),C6e=a("span"),g8r=o("TFAutoModelForSpeechSeq2Seq"),Wje=l(),cr=a("div"),F(w9.$$.fragment),h8r=l(),yc=a("p"),p8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jJ=a("a"),_8r=o("from_pretrained()"),u8r=o(" class method or the "),DJ=a("a"),b8r=o("from_config()"),v8r=o(` class
method.`),F8r=l(),A9=a("p"),T8r=o("This class cannot be instantiated directly using "),w6e=a("code"),M8r=o("__init__()"),E8r=o(" (throws an error)."),C8r=l(),Dt=a("div"),F(y9.$$.fragment),w8r=l(),A6e=a("p"),A8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),y8r=l(),Lc=a("p"),L8r=o(`Note:
Loading a model from its configuration file does `),y6e=a("strong"),x8r=o("not"),$8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),k8r=o("from_pretrained()"),S8r=o(" to load the model weights."),R8r=l(),F(LC.$$.fragment),P8r=l(),qr=a("div"),F(L9.$$.fragment),B8r=l(),L6e=a("p"),I8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),N8r=l(),gn=a("p"),q8r=o("The model class to instantiate is selected based on the "),x6e=a("code"),j8r=o("model_type"),D8r=o(` property of the config object (either
passed as an argument or loaded from `),$6e=a("code"),G8r=o("pretrained_model_name_or_path"),O8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=a("code"),V8r=o("pretrained_model_name_or_path"),X8r=o(":"),z8r=l(),S6e=a("ul"),xC=a("li"),R6e=a("strong"),W8r=o("speech_to_text"),Q8r=o(" \u2014 "),OJ=a("a"),H8r=o("TFSpeech2TextForConditionalGeneration"),U8r=o(" (Speech2Text model)"),J8r=l(),F($C.$$.fragment),Qje=l(),xc=a("h2"),kC=a("a"),P6e=a("span"),F(x9.$$.fragment),Y8r=l(),B6e=a("span"),K8r=o("FlaxAutoModel"),Hje=l(),fr=a("div"),F($9.$$.fragment),Z8r=l(),$c=a("p"),e7r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VJ=a("a"),o7r=o("from_pretrained()"),r7r=o(" class method or the "),XJ=a("a"),t7r=o("from_config()"),a7r=o(` class
method.`),n7r=l(),k9=a("p"),s7r=o("This class cannot be instantiated directly using "),I6e=a("code"),l7r=o("__init__()"),i7r=o(" (throws an error)."),d7r=l(),Gt=a("div"),F(S9.$$.fragment),c7r=l(),N6e=a("p"),f7r=o("Instantiates one of the base model classes of the library from a configuration."),m7r=l(),kc=a("p"),g7r=o(`Note:
Loading a model from its configuration file does `),q6e=a("strong"),h7r=o("not"),p7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),_7r=o("from_pretrained()"),u7r=o(" to load the model weights."),b7r=l(),F(SC.$$.fragment),v7r=l(),jr=a("div"),F(R9.$$.fragment),F7r=l(),j6e=a("p"),T7r=o("Instantiate one of the base model classes of the library from a pretrained model."),M7r=l(),hn=a("p"),E7r=o("The model class to instantiate is selected based on the "),D6e=a("code"),C7r=o("model_type"),w7r=o(` property of the config object (either
passed as an argument or loaded from `),G6e=a("code"),A7r=o("pretrained_model_name_or_path"),y7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O6e=a("code"),L7r=o("pretrained_model_name_or_path"),x7r=o(":"),$7r=l(),te=a("ul"),RC=a("li"),V6e=a("strong"),k7r=o("albert"),S7r=o(" \u2014 "),WJ=a("a"),R7r=o("FlaxAlbertModel"),P7r=o(" (ALBERT model)"),B7r=l(),PC=a("li"),X6e=a("strong"),I7r=o("bart"),N7r=o(" \u2014 "),QJ=a("a"),q7r=o("FlaxBartModel"),j7r=o(" (BART model)"),D7r=l(),BC=a("li"),z6e=a("strong"),G7r=o("beit"),O7r=o(" \u2014 "),HJ=a("a"),V7r=o("FlaxBeitModel"),X7r=o(" (BEiT model)"),z7r=l(),IC=a("li"),W6e=a("strong"),W7r=o("bert"),Q7r=o(" \u2014 "),UJ=a("a"),H7r=o("FlaxBertModel"),U7r=o(" (BERT model)"),J7r=l(),NC=a("li"),Q6e=a("strong"),Y7r=o("big_bird"),K7r=o(" \u2014 "),JJ=a("a"),Z7r=o("FlaxBigBirdModel"),e9r=o(" (BigBird model)"),o9r=l(),qC=a("li"),H6e=a("strong"),r9r=o("blenderbot"),t9r=o(" \u2014 "),YJ=a("a"),a9r=o("FlaxBlenderbotModel"),n9r=o(" (Blenderbot model)"),s9r=l(),jC=a("li"),U6e=a("strong"),l9r=o("blenderbot-small"),i9r=o(" \u2014 "),KJ=a("a"),d9r=o("FlaxBlenderbotSmallModel"),c9r=o(" (BlenderbotSmall model)"),f9r=l(),DC=a("li"),J6e=a("strong"),m9r=o("clip"),g9r=o(" \u2014 "),ZJ=a("a"),h9r=o("FlaxCLIPModel"),p9r=o(" (CLIP model)"),_9r=l(),GC=a("li"),Y6e=a("strong"),u9r=o("distilbert"),b9r=o(" \u2014 "),eY=a("a"),v9r=o("FlaxDistilBertModel"),F9r=o(" (DistilBERT model)"),T9r=l(),OC=a("li"),K6e=a("strong"),M9r=o("electra"),E9r=o(" \u2014 "),oY=a("a"),C9r=o("FlaxElectraModel"),w9r=o(" (ELECTRA model)"),A9r=l(),VC=a("li"),Z6e=a("strong"),y9r=o("gpt2"),L9r=o(" \u2014 "),rY=a("a"),x9r=o("FlaxGPT2Model"),$9r=o(" (OpenAI GPT-2 model)"),k9r=l(),XC=a("li"),eTe=a("strong"),S9r=o("gpt_neo"),R9r=o(" \u2014 "),tY=a("a"),P9r=o("FlaxGPTNeoModel"),B9r=o(" (GPT Neo model)"),I9r=l(),zC=a("li"),oTe=a("strong"),N9r=o("gptj"),q9r=o(" \u2014 "),aY=a("a"),j9r=o("FlaxGPTJModel"),D9r=o(" (GPT-J model)"),G9r=l(),WC=a("li"),rTe=a("strong"),O9r=o("marian"),V9r=o(" \u2014 "),nY=a("a"),X9r=o("FlaxMarianModel"),z9r=o(" (Marian model)"),W9r=l(),QC=a("li"),tTe=a("strong"),Q9r=o("mbart"),H9r=o(" \u2014 "),sY=a("a"),U9r=o("FlaxMBartModel"),J9r=o(" (mBART model)"),Y9r=l(),HC=a("li"),aTe=a("strong"),K9r=o("mt5"),Z9r=o(" \u2014 "),lY=a("a"),exr=o("FlaxMT5Model"),oxr=o(" (mT5 model)"),rxr=l(),UC=a("li"),nTe=a("strong"),txr=o("pegasus"),axr=o(" \u2014 "),iY=a("a"),nxr=o("FlaxPegasusModel"),sxr=o(" (Pegasus model)"),lxr=l(),JC=a("li"),sTe=a("strong"),ixr=o("roberta"),dxr=o(" \u2014 "),dY=a("a"),cxr=o("FlaxRobertaModel"),fxr=o(" (RoBERTa model)"),mxr=l(),YC=a("li"),lTe=a("strong"),gxr=o("roformer"),hxr=o(" \u2014 "),cY=a("a"),pxr=o("FlaxRoFormerModel"),_xr=o(" (RoFormer model)"),uxr=l(),KC=a("li"),iTe=a("strong"),bxr=o("t5"),vxr=o(" \u2014 "),fY=a("a"),Fxr=o("FlaxT5Model"),Txr=o(" (T5 model)"),Mxr=l(),ZC=a("li"),dTe=a("strong"),Exr=o("vision-text-dual-encoder"),Cxr=o(" \u2014 "),mY=a("a"),wxr=o("FlaxVisionTextDualEncoderModel"),Axr=o(" (VisionTextDualEncoder model)"),yxr=l(),e5=a("li"),cTe=a("strong"),Lxr=o("vit"),xxr=o(" \u2014 "),gY=a("a"),$xr=o("FlaxViTModel"),kxr=o(" (ViT model)"),Sxr=l(),o5=a("li"),fTe=a("strong"),Rxr=o("wav2vec2"),Pxr=o(" \u2014 "),hY=a("a"),Bxr=o("FlaxWav2Vec2Model"),Ixr=o(" (Wav2Vec2 model)"),Nxr=l(),r5=a("li"),mTe=a("strong"),qxr=o("xglm"),jxr=o(" \u2014 "),pY=a("a"),Dxr=o("FlaxXGLMModel"),Gxr=o(" (XGLM model)"),Oxr=l(),t5=a("li"),gTe=a("strong"),Vxr=o("xlm-roberta"),Xxr=o(" \u2014 "),_Y=a("a"),zxr=o("FlaxXLMRobertaModel"),Wxr=o(" (XLM-RoBERTa model)"),Qxr=l(),F(a5.$$.fragment),Uje=l(),Sc=a("h2"),n5=a("a"),hTe=a("span"),F(P9.$$.fragment),Hxr=l(),pTe=a("span"),Uxr=o("FlaxAutoModelForCausalLM"),Jje=l(),mr=a("div"),F(B9.$$.fragment),Jxr=l(),Rc=a("p"),Yxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uY=a("a"),Kxr=o("from_pretrained()"),Zxr=o(" class method or the "),bY=a("a"),e$r=o("from_config()"),o$r=o(` class
method.`),r$r=l(),I9=a("p"),t$r=o("This class cannot be instantiated directly using "),_Te=a("code"),a$r=o("__init__()"),n$r=o(" (throws an error)."),s$r=l(),Ot=a("div"),F(N9.$$.fragment),l$r=l(),uTe=a("p"),i$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),d$r=l(),Pc=a("p"),c$r=o(`Note:
Loading a model from its configuration file does `),bTe=a("strong"),f$r=o("not"),m$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),g$r=o("from_pretrained()"),h$r=o(" to load the model weights."),p$r=l(),F(s5.$$.fragment),_$r=l(),Dr=a("div"),F(q9.$$.fragment),u$r=l(),vTe=a("p"),b$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),v$r=l(),pn=a("p"),F$r=o("The model class to instantiate is selected based on the "),FTe=a("code"),T$r=o("model_type"),M$r=o(` property of the config object (either
passed as an argument or loaded from `),TTe=a("code"),E$r=o("pretrained_model_name_or_path"),C$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=a("code"),w$r=o("pretrained_model_name_or_path"),A$r=o(":"),y$r=l(),Re=a("ul"),l5=a("li"),ETe=a("strong"),L$r=o("bart"),x$r=o(" \u2014 "),FY=a("a"),$$r=o("FlaxBartForCausalLM"),k$r=o(" (BART model)"),S$r=l(),i5=a("li"),CTe=a("strong"),R$r=o("bert"),P$r=o(" \u2014 "),TY=a("a"),B$r=o("FlaxBertForCausalLM"),I$r=o(" (BERT model)"),N$r=l(),d5=a("li"),wTe=a("strong"),q$r=o("big_bird"),j$r=o(" \u2014 "),MY=a("a"),D$r=o("FlaxBigBirdForCausalLM"),G$r=o(" (BigBird model)"),O$r=l(),c5=a("li"),ATe=a("strong"),V$r=o("electra"),X$r=o(" \u2014 "),EY=a("a"),z$r=o("FlaxElectraForCausalLM"),W$r=o(" (ELECTRA model)"),Q$r=l(),f5=a("li"),yTe=a("strong"),H$r=o("gpt2"),U$r=o(" \u2014 "),CY=a("a"),J$r=o("FlaxGPT2LMHeadModel"),Y$r=o(" (OpenAI GPT-2 model)"),K$r=l(),m5=a("li"),LTe=a("strong"),Z$r=o("gpt_neo"),ekr=o(" \u2014 "),wY=a("a"),okr=o("FlaxGPTNeoForCausalLM"),rkr=o(" (GPT Neo model)"),tkr=l(),g5=a("li"),xTe=a("strong"),akr=o("gptj"),nkr=o(" \u2014 "),AY=a("a"),skr=o("FlaxGPTJForCausalLM"),lkr=o(" (GPT-J model)"),ikr=l(),h5=a("li"),$Te=a("strong"),dkr=o("roberta"),ckr=o(" \u2014 "),yY=a("a"),fkr=o("FlaxRobertaForCausalLM"),mkr=o(" (RoBERTa model)"),gkr=l(),p5=a("li"),kTe=a("strong"),hkr=o("xglm"),pkr=o(" \u2014 "),LY=a("a"),_kr=o("FlaxXGLMForCausalLM"),ukr=o(" (XGLM model)"),bkr=l(),F(_5.$$.fragment),Yje=l(),Bc=a("h2"),u5=a("a"),STe=a("span"),F(j9.$$.fragment),vkr=l(),RTe=a("span"),Fkr=o("FlaxAutoModelForPreTraining"),Kje=l(),gr=a("div"),F(D9.$$.fragment),Tkr=l(),Ic=a("p"),Mkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xY=a("a"),Ekr=o("from_pretrained()"),Ckr=o(" class method or the "),$Y=a("a"),wkr=o("from_config()"),Akr=o(` class
method.`),ykr=l(),G9=a("p"),Lkr=o("This class cannot be instantiated directly using "),PTe=a("code"),xkr=o("__init__()"),$kr=o(" (throws an error)."),kkr=l(),Vt=a("div"),F(O9.$$.fragment),Skr=l(),BTe=a("p"),Rkr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pkr=l(),Nc=a("p"),Bkr=o(`Note:
Loading a model from its configuration file does `),ITe=a("strong"),Ikr=o("not"),Nkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),qkr=o("from_pretrained()"),jkr=o(" to load the model weights."),Dkr=l(),F(b5.$$.fragment),Gkr=l(),Gr=a("div"),F(V9.$$.fragment),Okr=l(),NTe=a("p"),Vkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xkr=l(),_n=a("p"),zkr=o("The model class to instantiate is selected based on the "),qTe=a("code"),Wkr=o("model_type"),Qkr=o(` property of the config object (either
passed as an argument or loaded from `),jTe=a("code"),Hkr=o("pretrained_model_name_or_path"),Ukr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),Jkr=o("pretrained_model_name_or_path"),Ykr=o(":"),Kkr=l(),Ee=a("ul"),v5=a("li"),GTe=a("strong"),Zkr=o("albert"),eSr=o(" \u2014 "),SY=a("a"),oSr=o("FlaxAlbertForPreTraining"),rSr=o(" (ALBERT model)"),tSr=l(),F5=a("li"),OTe=a("strong"),aSr=o("bart"),nSr=o(" \u2014 "),RY=a("a"),sSr=o("FlaxBartForConditionalGeneration"),lSr=o(" (BART model)"),iSr=l(),T5=a("li"),VTe=a("strong"),dSr=o("bert"),cSr=o(" \u2014 "),PY=a("a"),fSr=o("FlaxBertForPreTraining"),mSr=o(" (BERT model)"),gSr=l(),M5=a("li"),XTe=a("strong"),hSr=o("big_bird"),pSr=o(" \u2014 "),BY=a("a"),_Sr=o("FlaxBigBirdForPreTraining"),uSr=o(" (BigBird model)"),bSr=l(),E5=a("li"),zTe=a("strong"),vSr=o("electra"),FSr=o(" \u2014 "),IY=a("a"),TSr=o("FlaxElectraForPreTraining"),MSr=o(" (ELECTRA model)"),ESr=l(),C5=a("li"),WTe=a("strong"),CSr=o("mbart"),wSr=o(" \u2014 "),NY=a("a"),ASr=o("FlaxMBartForConditionalGeneration"),ySr=o(" (mBART model)"),LSr=l(),w5=a("li"),QTe=a("strong"),xSr=o("mt5"),$Sr=o(" \u2014 "),qY=a("a"),kSr=o("FlaxMT5ForConditionalGeneration"),SSr=o(" (mT5 model)"),RSr=l(),A5=a("li"),HTe=a("strong"),PSr=o("roberta"),BSr=o(" \u2014 "),jY=a("a"),ISr=o("FlaxRobertaForMaskedLM"),NSr=o(" (RoBERTa model)"),qSr=l(),y5=a("li"),UTe=a("strong"),jSr=o("roformer"),DSr=o(" \u2014 "),DY=a("a"),GSr=o("FlaxRoFormerForMaskedLM"),OSr=o(" (RoFormer model)"),VSr=l(),L5=a("li"),JTe=a("strong"),XSr=o("t5"),zSr=o(" \u2014 "),GY=a("a"),WSr=o("FlaxT5ForConditionalGeneration"),QSr=o(" (T5 model)"),HSr=l(),x5=a("li"),YTe=a("strong"),USr=o("wav2vec2"),JSr=o(" \u2014 "),OY=a("a"),YSr=o("FlaxWav2Vec2ForPreTraining"),KSr=o(" (Wav2Vec2 model)"),ZSr=l(),$5=a("li"),KTe=a("strong"),eRr=o("xlm-roberta"),oRr=o(" \u2014 "),VY=a("a"),rRr=o("FlaxXLMRobertaForMaskedLM"),tRr=o(" (XLM-RoBERTa model)"),aRr=l(),F(k5.$$.fragment),Zje=l(),qc=a("h2"),S5=a("a"),ZTe=a("span"),F(X9.$$.fragment),nRr=l(),eMe=a("span"),sRr=o("FlaxAutoModelForMaskedLM"),eDe=l(),hr=a("div"),F(z9.$$.fragment),lRr=l(),jc=a("p"),iRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XY=a("a"),dRr=o("from_pretrained()"),cRr=o(" class method or the "),zY=a("a"),fRr=o("from_config()"),mRr=o(` class
method.`),gRr=l(),W9=a("p"),hRr=o("This class cannot be instantiated directly using "),oMe=a("code"),pRr=o("__init__()"),_Rr=o(" (throws an error)."),uRr=l(),Xt=a("div"),F(Q9.$$.fragment),bRr=l(),rMe=a("p"),vRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),FRr=l(),Dc=a("p"),TRr=o(`Note:
Loading a model from its configuration file does `),tMe=a("strong"),MRr=o("not"),ERr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=a("a"),CRr=o("from_pretrained()"),wRr=o(" to load the model weights."),ARr=l(),F(R5.$$.fragment),yRr=l(),Or=a("div"),F(H9.$$.fragment),LRr=l(),aMe=a("p"),xRr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Rr=l(),un=a("p"),kRr=o("The model class to instantiate is selected based on the "),nMe=a("code"),SRr=o("model_type"),RRr=o(` property of the config object (either
passed as an argument or loaded from `),sMe=a("code"),PRr=o("pretrained_model_name_or_path"),BRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=a("code"),IRr=o("pretrained_model_name_or_path"),NRr=o(":"),qRr=l(),xe=a("ul"),P5=a("li"),iMe=a("strong"),jRr=o("albert"),DRr=o(" \u2014 "),QY=a("a"),GRr=o("FlaxAlbertForMaskedLM"),ORr=o(" (ALBERT model)"),VRr=l(),B5=a("li"),dMe=a("strong"),XRr=o("bart"),zRr=o(" \u2014 "),HY=a("a"),WRr=o("FlaxBartForConditionalGeneration"),QRr=o(" (BART model)"),HRr=l(),I5=a("li"),cMe=a("strong"),URr=o("bert"),JRr=o(" \u2014 "),UY=a("a"),YRr=o("FlaxBertForMaskedLM"),KRr=o(" (BERT model)"),ZRr=l(),N5=a("li"),fMe=a("strong"),ePr=o("big_bird"),oPr=o(" \u2014 "),JY=a("a"),rPr=o("FlaxBigBirdForMaskedLM"),tPr=o(" (BigBird model)"),aPr=l(),q5=a("li"),mMe=a("strong"),nPr=o("distilbert"),sPr=o(" \u2014 "),YY=a("a"),lPr=o("FlaxDistilBertForMaskedLM"),iPr=o(" (DistilBERT model)"),dPr=l(),j5=a("li"),gMe=a("strong"),cPr=o("electra"),fPr=o(" \u2014 "),KY=a("a"),mPr=o("FlaxElectraForMaskedLM"),gPr=o(" (ELECTRA model)"),hPr=l(),D5=a("li"),hMe=a("strong"),pPr=o("mbart"),_Pr=o(" \u2014 "),ZY=a("a"),uPr=o("FlaxMBartForConditionalGeneration"),bPr=o(" (mBART model)"),vPr=l(),G5=a("li"),pMe=a("strong"),FPr=o("roberta"),TPr=o(" \u2014 "),eK=a("a"),MPr=o("FlaxRobertaForMaskedLM"),EPr=o(" (RoBERTa model)"),CPr=l(),O5=a("li"),_Me=a("strong"),wPr=o("roformer"),APr=o(" \u2014 "),oK=a("a"),yPr=o("FlaxRoFormerForMaskedLM"),LPr=o(" (RoFormer model)"),xPr=l(),V5=a("li"),uMe=a("strong"),$Pr=o("xlm-roberta"),kPr=o(" \u2014 "),rK=a("a"),SPr=o("FlaxXLMRobertaForMaskedLM"),RPr=o(" (XLM-RoBERTa model)"),PPr=l(),F(X5.$$.fragment),oDe=l(),Gc=a("h2"),z5=a("a"),bMe=a("span"),F(U9.$$.fragment),BPr=l(),vMe=a("span"),IPr=o("FlaxAutoModelForSeq2SeqLM"),rDe=l(),pr=a("div"),F(J9.$$.fragment),NPr=l(),Oc=a("p"),qPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tK=a("a"),jPr=o("from_pretrained()"),DPr=o(" class method or the "),aK=a("a"),GPr=o("from_config()"),OPr=o(` class
method.`),VPr=l(),Y9=a("p"),XPr=o("This class cannot be instantiated directly using "),FMe=a("code"),zPr=o("__init__()"),WPr=o(" (throws an error)."),QPr=l(),zt=a("div"),F(K9.$$.fragment),HPr=l(),TMe=a("p"),UPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JPr=l(),Vc=a("p"),YPr=o(`Note:
Loading a model from its configuration file does `),MMe=a("strong"),KPr=o("not"),ZPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=a("a"),eBr=o("from_pretrained()"),oBr=o(" to load the model weights."),rBr=l(),F(W5.$$.fragment),tBr=l(),Vr=a("div"),F(Z9.$$.fragment),aBr=l(),EMe=a("p"),nBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sBr=l(),bn=a("p"),lBr=o("The model class to instantiate is selected based on the "),CMe=a("code"),iBr=o("model_type"),dBr=o(` property of the config object (either
passed as an argument or loaded from `),wMe=a("code"),cBr=o("pretrained_model_name_or_path"),fBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=a("code"),mBr=o("pretrained_model_name_or_path"),gBr=o(":"),hBr=l(),Pe=a("ul"),Q5=a("li"),yMe=a("strong"),pBr=o("bart"),_Br=o(" \u2014 "),sK=a("a"),uBr=o("FlaxBartForConditionalGeneration"),bBr=o(" (BART model)"),vBr=l(),H5=a("li"),LMe=a("strong"),FBr=o("blenderbot"),TBr=o(" \u2014 "),lK=a("a"),MBr=o("FlaxBlenderbotForConditionalGeneration"),EBr=o(" (Blenderbot model)"),CBr=l(),U5=a("li"),xMe=a("strong"),wBr=o("blenderbot-small"),ABr=o(" \u2014 "),iK=a("a"),yBr=o("FlaxBlenderbotSmallForConditionalGeneration"),LBr=o(" (BlenderbotSmall model)"),xBr=l(),J5=a("li"),$Me=a("strong"),$Br=o("encoder-decoder"),kBr=o(" \u2014 "),dK=a("a"),SBr=o("FlaxEncoderDecoderModel"),RBr=o(" (Encoder decoder model)"),PBr=l(),Y5=a("li"),kMe=a("strong"),BBr=o("marian"),IBr=o(" \u2014 "),cK=a("a"),NBr=o("FlaxMarianMTModel"),qBr=o(" (Marian model)"),jBr=l(),K5=a("li"),SMe=a("strong"),DBr=o("mbart"),GBr=o(" \u2014 "),fK=a("a"),OBr=o("FlaxMBartForConditionalGeneration"),VBr=o(" (mBART model)"),XBr=l(),Z5=a("li"),RMe=a("strong"),zBr=o("mt5"),WBr=o(" \u2014 "),mK=a("a"),QBr=o("FlaxMT5ForConditionalGeneration"),HBr=o(" (mT5 model)"),UBr=l(),e3=a("li"),PMe=a("strong"),JBr=o("pegasus"),YBr=o(" \u2014 "),gK=a("a"),KBr=o("FlaxPegasusForConditionalGeneration"),ZBr=o(" (Pegasus model)"),eIr=l(),o3=a("li"),BMe=a("strong"),oIr=o("t5"),rIr=o(" \u2014 "),hK=a("a"),tIr=o("FlaxT5ForConditionalGeneration"),aIr=o(" (T5 model)"),nIr=l(),F(r3.$$.fragment),tDe=l(),Xc=a("h2"),t3=a("a"),IMe=a("span"),F(ex.$$.fragment),sIr=l(),NMe=a("span"),lIr=o("FlaxAutoModelForSequenceClassification"),aDe=l(),_r=a("div"),F(ox.$$.fragment),iIr=l(),zc=a("p"),dIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pK=a("a"),cIr=o("from_pretrained()"),fIr=o(" class method or the "),_K=a("a"),mIr=o("from_config()"),gIr=o(` class
method.`),hIr=l(),rx=a("p"),pIr=o("This class cannot be instantiated directly using "),qMe=a("code"),_Ir=o("__init__()"),uIr=o(" (throws an error)."),bIr=l(),Wt=a("div"),F(tx.$$.fragment),vIr=l(),jMe=a("p"),FIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TIr=l(),Wc=a("p"),MIr=o(`Note:
Loading a model from its configuration file does `),DMe=a("strong"),EIr=o("not"),CIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),wIr=o("from_pretrained()"),AIr=o(" to load the model weights."),yIr=l(),F(a3.$$.fragment),LIr=l(),Xr=a("div"),F(ax.$$.fragment),xIr=l(),GMe=a("p"),$Ir=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kIr=l(),vn=a("p"),SIr=o("The model class to instantiate is selected based on the "),OMe=a("code"),RIr=o("model_type"),PIr=o(` property of the config object (either
passed as an argument or loaded from `),VMe=a("code"),BIr=o("pretrained_model_name_or_path"),IIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=a("code"),NIr=o("pretrained_model_name_or_path"),qIr=o(":"),jIr=l(),$e=a("ul"),n3=a("li"),zMe=a("strong"),DIr=o("albert"),GIr=o(" \u2014 "),bK=a("a"),OIr=o("FlaxAlbertForSequenceClassification"),VIr=o(" (ALBERT model)"),XIr=l(),s3=a("li"),WMe=a("strong"),zIr=o("bart"),WIr=o(" \u2014 "),vK=a("a"),QIr=o("FlaxBartForSequenceClassification"),HIr=o(" (BART model)"),UIr=l(),l3=a("li"),QMe=a("strong"),JIr=o("bert"),YIr=o(" \u2014 "),FK=a("a"),KIr=o("FlaxBertForSequenceClassification"),ZIr=o(" (BERT model)"),eNr=l(),i3=a("li"),HMe=a("strong"),oNr=o("big_bird"),rNr=o(" \u2014 "),TK=a("a"),tNr=o("FlaxBigBirdForSequenceClassification"),aNr=o(" (BigBird model)"),nNr=l(),d3=a("li"),UMe=a("strong"),sNr=o("distilbert"),lNr=o(" \u2014 "),MK=a("a"),iNr=o("FlaxDistilBertForSequenceClassification"),dNr=o(" (DistilBERT model)"),cNr=l(),c3=a("li"),JMe=a("strong"),fNr=o("electra"),mNr=o(" \u2014 "),EK=a("a"),gNr=o("FlaxElectraForSequenceClassification"),hNr=o(" (ELECTRA model)"),pNr=l(),f3=a("li"),YMe=a("strong"),_Nr=o("mbart"),uNr=o(" \u2014 "),CK=a("a"),bNr=o("FlaxMBartForSequenceClassification"),vNr=o(" (mBART model)"),FNr=l(),m3=a("li"),KMe=a("strong"),TNr=o("roberta"),MNr=o(" \u2014 "),wK=a("a"),ENr=o("FlaxRobertaForSequenceClassification"),CNr=o(" (RoBERTa model)"),wNr=l(),g3=a("li"),ZMe=a("strong"),ANr=o("roformer"),yNr=o(" \u2014 "),AK=a("a"),LNr=o("FlaxRoFormerForSequenceClassification"),xNr=o(" (RoFormer model)"),$Nr=l(),h3=a("li"),eEe=a("strong"),kNr=o("xlm-roberta"),SNr=o(" \u2014 "),yK=a("a"),RNr=o("FlaxXLMRobertaForSequenceClassification"),PNr=o(" (XLM-RoBERTa model)"),BNr=l(),F(p3.$$.fragment),nDe=l(),Qc=a("h2"),_3=a("a"),oEe=a("span"),F(nx.$$.fragment),INr=l(),rEe=a("span"),NNr=o("FlaxAutoModelForQuestionAnswering"),sDe=l(),ur=a("div"),F(sx.$$.fragment),qNr=l(),Hc=a("p"),jNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LK=a("a"),DNr=o("from_pretrained()"),GNr=o(" class method or the "),xK=a("a"),ONr=o("from_config()"),VNr=o(` class
method.`),XNr=l(),lx=a("p"),zNr=o("This class cannot be instantiated directly using "),tEe=a("code"),WNr=o("__init__()"),QNr=o(" (throws an error)."),HNr=l(),Qt=a("div"),F(ix.$$.fragment),UNr=l(),aEe=a("p"),JNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),YNr=l(),Uc=a("p"),KNr=o(`Note:
Loading a model from its configuration file does `),nEe=a("strong"),ZNr=o("not"),eqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=a("a"),oqr=o("from_pretrained()"),rqr=o(" to load the model weights."),tqr=l(),F(u3.$$.fragment),aqr=l(),zr=a("div"),F(dx.$$.fragment),nqr=l(),sEe=a("p"),sqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lqr=l(),Fn=a("p"),iqr=o("The model class to instantiate is selected based on the "),lEe=a("code"),dqr=o("model_type"),cqr=o(` property of the config object (either
passed as an argument or loaded from `),iEe=a("code"),fqr=o("pretrained_model_name_or_path"),mqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=a("code"),gqr=o("pretrained_model_name_or_path"),hqr=o(":"),pqr=l(),ke=a("ul"),b3=a("li"),cEe=a("strong"),_qr=o("albert"),uqr=o(" \u2014 "),kK=a("a"),bqr=o("FlaxAlbertForQuestionAnswering"),vqr=o(" (ALBERT model)"),Fqr=l(),v3=a("li"),fEe=a("strong"),Tqr=o("bart"),Mqr=o(" \u2014 "),SK=a("a"),Eqr=o("FlaxBartForQuestionAnswering"),Cqr=o(" (BART model)"),wqr=l(),F3=a("li"),mEe=a("strong"),Aqr=o("bert"),yqr=o(" \u2014 "),RK=a("a"),Lqr=o("FlaxBertForQuestionAnswering"),xqr=o(" (BERT model)"),$qr=l(),T3=a("li"),gEe=a("strong"),kqr=o("big_bird"),Sqr=o(" \u2014 "),PK=a("a"),Rqr=o("FlaxBigBirdForQuestionAnswering"),Pqr=o(" (BigBird model)"),Bqr=l(),M3=a("li"),hEe=a("strong"),Iqr=o("distilbert"),Nqr=o(" \u2014 "),BK=a("a"),qqr=o("FlaxDistilBertForQuestionAnswering"),jqr=o(" (DistilBERT model)"),Dqr=l(),E3=a("li"),pEe=a("strong"),Gqr=o("electra"),Oqr=o(" \u2014 "),IK=a("a"),Vqr=o("FlaxElectraForQuestionAnswering"),Xqr=o(" (ELECTRA model)"),zqr=l(),C3=a("li"),_Ee=a("strong"),Wqr=o("mbart"),Qqr=o(" \u2014 "),NK=a("a"),Hqr=o("FlaxMBartForQuestionAnswering"),Uqr=o(" (mBART model)"),Jqr=l(),w3=a("li"),uEe=a("strong"),Yqr=o("roberta"),Kqr=o(" \u2014 "),qK=a("a"),Zqr=o("FlaxRobertaForQuestionAnswering"),ejr=o(" (RoBERTa model)"),ojr=l(),A3=a("li"),bEe=a("strong"),rjr=o("roformer"),tjr=o(" \u2014 "),jK=a("a"),ajr=o("FlaxRoFormerForQuestionAnswering"),njr=o(" (RoFormer model)"),sjr=l(),y3=a("li"),vEe=a("strong"),ljr=o("xlm-roberta"),ijr=o(" \u2014 "),DK=a("a"),djr=o("FlaxXLMRobertaForQuestionAnswering"),cjr=o(" (XLM-RoBERTa model)"),fjr=l(),F(L3.$$.fragment),lDe=l(),Jc=a("h2"),x3=a("a"),FEe=a("span"),F(cx.$$.fragment),mjr=l(),TEe=a("span"),gjr=o("FlaxAutoModelForTokenClassification"),iDe=l(),br=a("div"),F(fx.$$.fragment),hjr=l(),Yc=a("p"),pjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GK=a("a"),_jr=o("from_pretrained()"),ujr=o(" class method or the "),OK=a("a"),bjr=o("from_config()"),vjr=o(` class
method.`),Fjr=l(),mx=a("p"),Tjr=o("This class cannot be instantiated directly using "),MEe=a("code"),Mjr=o("__init__()"),Ejr=o(" (throws an error)."),Cjr=l(),Ht=a("div"),F(gx.$$.fragment),wjr=l(),EEe=a("p"),Ajr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yjr=l(),Kc=a("p"),Ljr=o(`Note:
Loading a model from its configuration file does `),CEe=a("strong"),xjr=o("not"),$jr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),kjr=o("from_pretrained()"),Sjr=o(" to load the model weights."),Rjr=l(),F($3.$$.fragment),Pjr=l(),Wr=a("div"),F(hx.$$.fragment),Bjr=l(),wEe=a("p"),Ijr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Njr=l(),Tn=a("p"),qjr=o("The model class to instantiate is selected based on the "),AEe=a("code"),jjr=o("model_type"),Djr=o(` property of the config object (either
passed as an argument or loaded from `),yEe=a("code"),Gjr=o("pretrained_model_name_or_path"),Ojr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=a("code"),Vjr=o("pretrained_model_name_or_path"),Xjr=o(":"),zjr=l(),Ge=a("ul"),k3=a("li"),xEe=a("strong"),Wjr=o("albert"),Qjr=o(" \u2014 "),XK=a("a"),Hjr=o("FlaxAlbertForTokenClassification"),Ujr=o(" (ALBERT model)"),Jjr=l(),S3=a("li"),$Ee=a("strong"),Yjr=o("bert"),Kjr=o(" \u2014 "),zK=a("a"),Zjr=o("FlaxBertForTokenClassification"),eDr=o(" (BERT model)"),oDr=l(),R3=a("li"),kEe=a("strong"),rDr=o("big_bird"),tDr=o(" \u2014 "),WK=a("a"),aDr=o("FlaxBigBirdForTokenClassification"),nDr=o(" (BigBird model)"),sDr=l(),P3=a("li"),SEe=a("strong"),lDr=o("distilbert"),iDr=o(" \u2014 "),QK=a("a"),dDr=o("FlaxDistilBertForTokenClassification"),cDr=o(" (DistilBERT model)"),fDr=l(),B3=a("li"),REe=a("strong"),mDr=o("electra"),gDr=o(" \u2014 "),HK=a("a"),hDr=o("FlaxElectraForTokenClassification"),pDr=o(" (ELECTRA model)"),_Dr=l(),I3=a("li"),PEe=a("strong"),uDr=o("roberta"),bDr=o(" \u2014 "),UK=a("a"),vDr=o("FlaxRobertaForTokenClassification"),FDr=o(" (RoBERTa model)"),TDr=l(),N3=a("li"),BEe=a("strong"),MDr=o("roformer"),EDr=o(" \u2014 "),JK=a("a"),CDr=o("FlaxRoFormerForTokenClassification"),wDr=o(" (RoFormer model)"),ADr=l(),q3=a("li"),IEe=a("strong"),yDr=o("xlm-roberta"),LDr=o(" \u2014 "),YK=a("a"),xDr=o("FlaxXLMRobertaForTokenClassification"),$Dr=o(" (XLM-RoBERTa model)"),kDr=l(),F(j3.$$.fragment),dDe=l(),Zc=a("h2"),D3=a("a"),NEe=a("span"),F(px.$$.fragment),SDr=l(),qEe=a("span"),RDr=o("FlaxAutoModelForMultipleChoice"),cDe=l(),vr=a("div"),F(_x.$$.fragment),PDr=l(),ef=a("p"),BDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KK=a("a"),IDr=o("from_pretrained()"),NDr=o(" class method or the "),ZK=a("a"),qDr=o("from_config()"),jDr=o(` class
method.`),DDr=l(),ux=a("p"),GDr=o("This class cannot be instantiated directly using "),jEe=a("code"),ODr=o("__init__()"),VDr=o(" (throws an error)."),XDr=l(),Ut=a("div"),F(bx.$$.fragment),zDr=l(),DEe=a("p"),WDr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QDr=l(),of=a("p"),HDr=o(`Note:
Loading a model from its configuration file does `),GEe=a("strong"),UDr=o("not"),JDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),YDr=o("from_pretrained()"),KDr=o(" to load the model weights."),ZDr=l(),F(G3.$$.fragment),eGr=l(),Qr=a("div"),F(vx.$$.fragment),oGr=l(),OEe=a("p"),rGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tGr=l(),Mn=a("p"),aGr=o("The model class to instantiate is selected based on the "),VEe=a("code"),nGr=o("model_type"),sGr=o(` property of the config object (either
passed as an argument or loaded from `),XEe=a("code"),lGr=o("pretrained_model_name_or_path"),iGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zEe=a("code"),dGr=o("pretrained_model_name_or_path"),cGr=o(":"),fGr=l(),Oe=a("ul"),O3=a("li"),WEe=a("strong"),mGr=o("albert"),gGr=o(" \u2014 "),oZ=a("a"),hGr=o("FlaxAlbertForMultipleChoice"),pGr=o(" (ALBERT model)"),_Gr=l(),V3=a("li"),QEe=a("strong"),uGr=o("bert"),bGr=o(" \u2014 "),rZ=a("a"),vGr=o("FlaxBertForMultipleChoice"),FGr=o(" (BERT model)"),TGr=l(),X3=a("li"),HEe=a("strong"),MGr=o("big_bird"),EGr=o(" \u2014 "),tZ=a("a"),CGr=o("FlaxBigBirdForMultipleChoice"),wGr=o(" (BigBird model)"),AGr=l(),z3=a("li"),UEe=a("strong"),yGr=o("distilbert"),LGr=o(" \u2014 "),aZ=a("a"),xGr=o("FlaxDistilBertForMultipleChoice"),$Gr=o(" (DistilBERT model)"),kGr=l(),W3=a("li"),JEe=a("strong"),SGr=o("electra"),RGr=o(" \u2014 "),nZ=a("a"),PGr=o("FlaxElectraForMultipleChoice"),BGr=o(" (ELECTRA model)"),IGr=l(),Q3=a("li"),YEe=a("strong"),NGr=o("roberta"),qGr=o(" \u2014 "),sZ=a("a"),jGr=o("FlaxRobertaForMultipleChoice"),DGr=o(" (RoBERTa model)"),GGr=l(),H3=a("li"),KEe=a("strong"),OGr=o("roformer"),VGr=o(" \u2014 "),lZ=a("a"),XGr=o("FlaxRoFormerForMultipleChoice"),zGr=o(" (RoFormer model)"),WGr=l(),U3=a("li"),ZEe=a("strong"),QGr=o("xlm-roberta"),HGr=o(" \u2014 "),iZ=a("a"),UGr=o("FlaxXLMRobertaForMultipleChoice"),JGr=o(" (XLM-RoBERTa model)"),YGr=l(),F(J3.$$.fragment),fDe=l(),rf=a("h2"),Y3=a("a"),eCe=a("span"),F(Fx.$$.fragment),KGr=l(),oCe=a("span"),ZGr=o("FlaxAutoModelForNextSentencePrediction"),mDe=l(),Fr=a("div"),F(Tx.$$.fragment),eOr=l(),tf=a("p"),oOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dZ=a("a"),rOr=o("from_pretrained()"),tOr=o(" class method or the "),cZ=a("a"),aOr=o("from_config()"),nOr=o(` class
method.`),sOr=l(),Mx=a("p"),lOr=o("This class cannot be instantiated directly using "),rCe=a("code"),iOr=o("__init__()"),dOr=o(" (throws an error)."),cOr=l(),Jt=a("div"),F(Ex.$$.fragment),fOr=l(),tCe=a("p"),mOr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gOr=l(),af=a("p"),hOr=o(`Note:
Loading a model from its configuration file does `),aCe=a("strong"),pOr=o("not"),_Or=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),uOr=o("from_pretrained()"),bOr=o(" to load the model weights."),vOr=l(),F(K3.$$.fragment),FOr=l(),Hr=a("div"),F(Cx.$$.fragment),TOr=l(),nCe=a("p"),MOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),EOr=l(),En=a("p"),COr=o("The model class to instantiate is selected based on the "),sCe=a("code"),wOr=o("model_type"),AOr=o(` property of the config object (either
passed as an argument or loaded from `),lCe=a("code"),yOr=o("pretrained_model_name_or_path"),LOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iCe=a("code"),xOr=o("pretrained_model_name_or_path"),$Or=o(":"),kOr=l(),dCe=a("ul"),Z3=a("li"),cCe=a("strong"),SOr=o("bert"),ROr=o(" \u2014 "),mZ=a("a"),POr=o("FlaxBertForNextSentencePrediction"),BOr=o(" (BERT model)"),IOr=l(),F(ew.$$.fragment),gDe=l(),nf=a("h2"),ow=a("a"),fCe=a("span"),F(wx.$$.fragment),NOr=l(),mCe=a("span"),qOr=o("FlaxAutoModelForImageClassification"),hDe=l(),Tr=a("div"),F(Ax.$$.fragment),jOr=l(),sf=a("p"),DOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gZ=a("a"),GOr=o("from_pretrained()"),OOr=o(" class method or the "),hZ=a("a"),VOr=o("from_config()"),XOr=o(` class
method.`),zOr=l(),yx=a("p"),WOr=o("This class cannot be instantiated directly using "),gCe=a("code"),QOr=o("__init__()"),HOr=o(" (throws an error)."),UOr=l(),Yt=a("div"),F(Lx.$$.fragment),JOr=l(),hCe=a("p"),YOr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KOr=l(),lf=a("p"),ZOr=o(`Note:
Loading a model from its configuration file does `),pCe=a("strong"),eVr=o("not"),oVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=a("a"),rVr=o("from_pretrained()"),tVr=o(" to load the model weights."),aVr=l(),F(rw.$$.fragment),nVr=l(),Ur=a("div"),F(xx.$$.fragment),sVr=l(),_Ce=a("p"),lVr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iVr=l(),Cn=a("p"),dVr=o("The model class to instantiate is selected based on the "),uCe=a("code"),cVr=o("model_type"),fVr=o(` property of the config object (either
passed as an argument or loaded from `),bCe=a("code"),mVr=o("pretrained_model_name_or_path"),gVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vCe=a("code"),hVr=o("pretrained_model_name_or_path"),pVr=o(":"),_Vr=l(),$x=a("ul"),tw=a("li"),FCe=a("strong"),uVr=o("beit"),bVr=o(" \u2014 "),_Z=a("a"),vVr=o("FlaxBeitForImageClassification"),FVr=o(" (BEiT model)"),TVr=l(),aw=a("li"),TCe=a("strong"),MVr=o("vit"),EVr=o(" \u2014 "),uZ=a("a"),CVr=o("FlaxViTForImageClassification"),wVr=o(" (ViT model)"),AVr=l(),F(nw.$$.fragment),pDe=l(),df=a("h2"),sw=a("a"),MCe=a("span"),F(kx.$$.fragment),yVr=l(),ECe=a("span"),LVr=o("FlaxAutoModelForVision2Seq"),_De=l(),Mr=a("div"),F(Sx.$$.fragment),xVr=l(),cf=a("p"),$Vr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bZ=a("a"),kVr=o("from_pretrained()"),SVr=o(" class method or the "),vZ=a("a"),RVr=o("from_config()"),PVr=o(` class
method.`),BVr=l(),Rx=a("p"),IVr=o("This class cannot be instantiated directly using "),CCe=a("code"),NVr=o("__init__()"),qVr=o(" (throws an error)."),jVr=l(),Kt=a("div"),F(Px.$$.fragment),DVr=l(),wCe=a("p"),GVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OVr=l(),ff=a("p"),VVr=o(`Note:
Loading a model from its configuration file does `),ACe=a("strong"),XVr=o("not"),zVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FZ=a("a"),WVr=o("from_pretrained()"),QVr=o(" to load the model weights."),HVr=l(),F(lw.$$.fragment),UVr=l(),Jr=a("div"),F(Bx.$$.fragment),JVr=l(),yCe=a("p"),YVr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KVr=l(),wn=a("p"),ZVr=o("The model class to instantiate is selected based on the "),LCe=a("code"),eXr=o("model_type"),oXr=o(` property of the config object (either
passed as an argument or loaded from `),xCe=a("code"),rXr=o("pretrained_model_name_or_path"),tXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ce=a("code"),aXr=o("pretrained_model_name_or_path"),nXr=o(":"),sXr=l(),kCe=a("ul"),iw=a("li"),SCe=a("strong"),lXr=o("vision-encoder-decoder"),iXr=o(" \u2014 "),TZ=a("a"),dXr=o("FlaxVisionEncoderDecoderModel"),cXr=o(" (Vision Encoder decoder model)"),fXr=l(),F(dw.$$.fragment),this.h()},l(f){const u=Z$t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Ix=s(p);m=n(Ix,"A",{id:!0,class:!0,href:!0});var RCe=s(m);_=n(RCe,"SPAN",{});var PCe=s(_);T(d.$$.fragment,PCe),PCe.forEach(t),RCe.forEach(t),h=i(Ix),Mo=n(Ix,"SPAN",{});var BCe=s(Mo);fi=r(BCe,"Auto Classes"),BCe.forEach(t),Ix.forEach(t),pf=i(f),rt=n(f,"P",{});var Nx=s(rt);mi=r(Nx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Nx,"CODE",{});var ICe=s(gi);yy=r(ICe,"from_pretrained()"),ICe.forEach(t),_f=r(Nx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Nx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var NCe=s(yn);Ly=r(NCe,"AutoConfig"),NCe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var qCe=s(xn);xy=r(qCe,"AutoModel"),qCe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var jCe=s($n);$y=r(jCe,"AutoTokenizer"),jCe.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var qx=s(Ae);U$=r(qx,"will create a model that is an instance of "),ui=n(qx,"A",{href:!0});var DCe=s(ui);J$=r(DCe,"BertModel"),DCe.forEach(t),Y$=r(qx,"."),qx.forEach(t),Eo=i(f),wa=n(f,"P",{});var jx=s(wa);K$=r(jx,"There is one class of "),bf=n(jx,"CODE",{});var GCe=s(bf);Z$=r(GCe,"AutoModel"),GCe.forEach(t),wOe=r(jx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),jx.forEach(t),hqe=i(f),bi=n(f,"H2",{class:!0});var Dx=s(bi);vf=n(Dx,"A",{id:!0,class:!0,href:!0});var OCe=s(vf);hoe=n(OCe,"SPAN",{});var VCe=s(hoe);T(ky.$$.fragment,VCe),VCe.forEach(t),OCe.forEach(t),AOe=i(Dx),poe=n(Dx,"SPAN",{});var XCe=s(poe);yOe=r(XCe,"Extending the Auto Classes"),XCe.forEach(t),Dx.forEach(t),pqe=i(f),kn=n(f,"P",{});var mf=s(kn);LOe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),_oe=n(mf,"CODE",{});var zCe=s(_oe);xOe=r(zCe,"NewModel"),zCe.forEach(t),$Oe=r(mf,", make sure you have a "),uoe=n(mf,"CODE",{});var WCe=s(uoe);kOe=r(WCe,"NewModelConfig"),WCe.forEach(t),SOe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),_qe=i(f),T(Sy.$$.fragment,f),uqe=i(f),ek=n(f,"P",{});var QCe=s(ek);ROe=r(QCe,"You will then be able to use the auto classes like you would usually do!"),QCe.forEach(t),bqe=i(f),T(Ff.$$.fragment,f),vqe=i(f),vi=n(f,"H2",{class:!0});var Gx=s(vi);Tf=n(Gx,"A",{id:!0,class:!0,href:!0});var HCe=s(Tf);boe=n(HCe,"SPAN",{});var UCe=s(boe);T(Ry.$$.fragment,UCe),UCe.forEach(t),HCe.forEach(t),POe=i(Gx),voe=n(Gx,"SPAN",{});var JCe=s(voe);BOe=r(JCe,"AutoConfig"),JCe.forEach(t),Gx.forEach(t),Fqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(Py.$$.fragment,et),IOe=i(et),By=n(et,"P",{});var Ox=s(By);NOe=r(Ox,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ok=n(Ox,"A",{href:!0});var YCe=s(ok);qOe=r(YCe,"from_pretrained()"),YCe.forEach(t),jOe=r(Ox," class method."),Ox.forEach(t),DOe=i(et),Iy=n(et,"P",{});var Vx=s(Iy);GOe=r(Vx,"This class cannot be instantiated directly using "),Foe=n(Vx,"CODE",{});var KCe=s(Foe);OOe=r(KCe,"__init__()"),KCe.forEach(t),VOe=r(Vx," (throws an error)."),Vx.forEach(t),XOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(Ny.$$.fragment,ot),zOe=i(ot),Toe=n(ot,"P",{});var ZCe=s(Toe);WOe=r(ZCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ZCe.forEach(t),QOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);HOe=r(gf,"The configuration class to instantiate is selected based on the "),Moe=n(gf,"CODE",{});var e5e=s(Moe);UOe=r(e5e,"model_type"),e5e.forEach(t),JOe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Eoe=n(gf,"CODE",{});var o5e=s(Eoe);YOe=r(o5e,"pretrained_model_name_or_path"),o5e.forEach(t),KOe=r(gf,":"),gf.forEach(t),ZOe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var cw=s(Mf);Coe=n(cw,"STRONG",{});var r5e=s(Coe);eVe=r(r5e,"albert"),r5e.forEach(t),oVe=r(cw," \u2014 "),rk=n(cw,"A",{href:!0});var t5e=s(rk);rVe=r(t5e,"AlbertConfig"),t5e.forEach(t),tVe=r(cw," (ALBERT model)"),cw.forEach(t),aVe=i(y),Ef=n(y,"LI",{});var fw=s(Ef);woe=n(fw,"STRONG",{});var a5e=s(woe);nVe=r(a5e,"bart"),a5e.forEach(t),sVe=r(fw," \u2014 "),tk=n(fw,"A",{href:!0});var n5e=s(tk);lVe=r(n5e,"BartConfig"),n5e.forEach(t),iVe=r(fw," (BART model)"),fw.forEach(t),dVe=i(y),Cf=n(y,"LI",{});var mw=s(Cf);Aoe=n(mw,"STRONG",{});var s5e=s(Aoe);cVe=r(s5e,"beit"),s5e.forEach(t),fVe=r(mw," \u2014 "),ak=n(mw,"A",{href:!0});var l5e=s(ak);mVe=r(l5e,"BeitConfig"),l5e.forEach(t),gVe=r(mw," (BEiT model)"),mw.forEach(t),hVe=i(y),wf=n(y,"LI",{});var gw=s(wf);yoe=n(gw,"STRONG",{});var i5e=s(yoe);pVe=r(i5e,"bert"),i5e.forEach(t),_Ve=r(gw," \u2014 "),nk=n(gw,"A",{href:!0});var d5e=s(nk);uVe=r(d5e,"BertConfig"),d5e.forEach(t),bVe=r(gw," (BERT model)"),gw.forEach(t),vVe=i(y),Af=n(y,"LI",{});var hw=s(Af);Loe=n(hw,"STRONG",{});var c5e=s(Loe);FVe=r(c5e,"bert-generation"),c5e.forEach(t),TVe=r(hw," \u2014 "),sk=n(hw,"A",{href:!0});var f5e=s(sk);MVe=r(f5e,"BertGenerationConfig"),f5e.forEach(t),EVe=r(hw," (Bert Generation model)"),hw.forEach(t),CVe=i(y),yf=n(y,"LI",{});var pw=s(yf);xoe=n(pw,"STRONG",{});var m5e=s(xoe);wVe=r(m5e,"big_bird"),m5e.forEach(t),AVe=r(pw," \u2014 "),lk=n(pw,"A",{href:!0});var g5e=s(lk);yVe=r(g5e,"BigBirdConfig"),g5e.forEach(t),LVe=r(pw," (BigBird model)"),pw.forEach(t),xVe=i(y),Lf=n(y,"LI",{});var _w=s(Lf);$oe=n(_w,"STRONG",{});var h5e=s($oe);$Ve=r(h5e,"bigbird_pegasus"),h5e.forEach(t),kVe=r(_w," \u2014 "),ik=n(_w,"A",{href:!0});var p5e=s(ik);SVe=r(p5e,"BigBirdPegasusConfig"),p5e.forEach(t),RVe=r(_w," (BigBirdPegasus model)"),_w.forEach(t),PVe=i(y),xf=n(y,"LI",{});var uw=s(xf);koe=n(uw,"STRONG",{});var _5e=s(koe);BVe=r(_5e,"blenderbot"),_5e.forEach(t),IVe=r(uw," \u2014 "),dk=n(uw,"A",{href:!0});var u5e=s(dk);NVe=r(u5e,"BlenderbotConfig"),u5e.forEach(t),qVe=r(uw," (Blenderbot model)"),uw.forEach(t),jVe=i(y),$f=n(y,"LI",{});var bw=s($f);Soe=n(bw,"STRONG",{});var b5e=s(Soe);DVe=r(b5e,"blenderbot-small"),b5e.forEach(t),GVe=r(bw," \u2014 "),ck=n(bw,"A",{href:!0});var v5e=s(ck);OVe=r(v5e,"BlenderbotSmallConfig"),v5e.forEach(t),VVe=r(bw," (BlenderbotSmall model)"),bw.forEach(t),XVe=i(y),kf=n(y,"LI",{});var vw=s(kf);Roe=n(vw,"STRONG",{});var F5e=s(Roe);zVe=r(F5e,"camembert"),F5e.forEach(t),WVe=r(vw," \u2014 "),fk=n(vw,"A",{href:!0});var T5e=s(fk);QVe=r(T5e,"CamembertConfig"),T5e.forEach(t),HVe=r(vw," (CamemBERT model)"),vw.forEach(t),UVe=i(y),Sf=n(y,"LI",{});var Fw=s(Sf);Poe=n(Fw,"STRONG",{});var M5e=s(Poe);JVe=r(M5e,"canine"),M5e.forEach(t),YVe=r(Fw," \u2014 "),mk=n(Fw,"A",{href:!0});var E5e=s(mk);KVe=r(E5e,"CanineConfig"),E5e.forEach(t),ZVe=r(Fw," (Canine model)"),Fw.forEach(t),eXe=i(y),Rf=n(y,"LI",{});var Tw=s(Rf);Boe=n(Tw,"STRONG",{});var C5e=s(Boe);oXe=r(C5e,"clip"),C5e.forEach(t),rXe=r(Tw," \u2014 "),gk=n(Tw,"A",{href:!0});var w5e=s(gk);tXe=r(w5e,"CLIPConfig"),w5e.forEach(t),aXe=r(Tw," (CLIP model)"),Tw.forEach(t),nXe=i(y),Pf=n(y,"LI",{});var Mw=s(Pf);Ioe=n(Mw,"STRONG",{});var A5e=s(Ioe);sXe=r(A5e,"convbert"),A5e.forEach(t),lXe=r(Mw," \u2014 "),hk=n(Mw,"A",{href:!0});var y5e=s(hk);iXe=r(y5e,"ConvBertConfig"),y5e.forEach(t),dXe=r(Mw," (ConvBERT model)"),Mw.forEach(t),cXe=i(y),Bf=n(y,"LI",{});var Ew=s(Bf);Noe=n(Ew,"STRONG",{});var L5e=s(Noe);fXe=r(L5e,"convnext"),L5e.forEach(t),mXe=r(Ew," \u2014 "),pk=n(Ew,"A",{href:!0});var x5e=s(pk);gXe=r(x5e,"ConvNextConfig"),x5e.forEach(t),hXe=r(Ew," (ConvNext model)"),Ew.forEach(t),pXe=i(y),If=n(y,"LI",{});var Cw=s(If);qoe=n(Cw,"STRONG",{});var $5e=s(qoe);_Xe=r($5e,"ctrl"),$5e.forEach(t),uXe=r(Cw," \u2014 "),_k=n(Cw,"A",{href:!0});var k5e=s(_k);bXe=r(k5e,"CTRLConfig"),k5e.forEach(t),vXe=r(Cw," (CTRL model)"),Cw.forEach(t),FXe=i(y),Nf=n(y,"LI",{});var ww=s(Nf);joe=n(ww,"STRONG",{});var S5e=s(joe);TXe=r(S5e,"cvt"),S5e.forEach(t),MXe=r(ww," \u2014 "),uk=n(ww,"A",{href:!0});var R5e=s(uk);EXe=r(R5e,"CvtConfig"),R5e.forEach(t),CXe=r(ww," (CvT model)"),ww.forEach(t),wXe=i(y),qf=n(y,"LI",{});var Aw=s(qf);Doe=n(Aw,"STRONG",{});var P5e=s(Doe);AXe=r(P5e,"data2vec-audio"),P5e.forEach(t),yXe=r(Aw," \u2014 "),bk=n(Aw,"A",{href:!0});var B5e=s(bk);LXe=r(B5e,"Data2VecAudioConfig"),B5e.forEach(t),xXe=r(Aw," (Data2VecAudio model)"),Aw.forEach(t),$Xe=i(y),jf=n(y,"LI",{});var yw=s(jf);Goe=n(yw,"STRONG",{});var I5e=s(Goe);kXe=r(I5e,"data2vec-text"),I5e.forEach(t),SXe=r(yw," \u2014 "),vk=n(yw,"A",{href:!0});var N5e=s(vk);RXe=r(N5e,"Data2VecTextConfig"),N5e.forEach(t),PXe=r(yw," (Data2VecText model)"),yw.forEach(t),BXe=i(y),Df=n(y,"LI",{});var Lw=s(Df);Ooe=n(Lw,"STRONG",{});var q5e=s(Ooe);IXe=r(q5e,"data2vec-vision"),q5e.forEach(t),NXe=r(Lw," \u2014 "),Fk=n(Lw,"A",{href:!0});var j5e=s(Fk);qXe=r(j5e,"Data2VecVisionConfig"),j5e.forEach(t),jXe=r(Lw," (Data2VecVision model)"),Lw.forEach(t),DXe=i(y),Gf=n(y,"LI",{});var xw=s(Gf);Voe=n(xw,"STRONG",{});var D5e=s(Voe);GXe=r(D5e,"deberta"),D5e.forEach(t),OXe=r(xw," \u2014 "),Tk=n(xw,"A",{href:!0});var G5e=s(Tk);VXe=r(G5e,"DebertaConfig"),G5e.forEach(t),XXe=r(xw," (DeBERTa model)"),xw.forEach(t),zXe=i(y),Of=n(y,"LI",{});var $w=s(Of);Xoe=n($w,"STRONG",{});var O5e=s(Xoe);WXe=r(O5e,"deberta-v2"),O5e.forEach(t),QXe=r($w," \u2014 "),Mk=n($w,"A",{href:!0});var V5e=s(Mk);HXe=r(V5e,"DebertaV2Config"),V5e.forEach(t),UXe=r($w," (DeBERTa-v2 model)"),$w.forEach(t),JXe=i(y),Vf=n(y,"LI",{});var kw=s(Vf);zoe=n(kw,"STRONG",{});var X5e=s(zoe);YXe=r(X5e,"decision_transformer"),X5e.forEach(t),KXe=r(kw," \u2014 "),Ek=n(kw,"A",{href:!0});var z5e=s(Ek);ZXe=r(z5e,"DecisionTransformerConfig"),z5e.forEach(t),eze=r(kw," (Decision Transformer model)"),kw.forEach(t),oze=i(y),Xf=n(y,"LI",{});var Sw=s(Xf);Woe=n(Sw,"STRONG",{});var W5e=s(Woe);rze=r(W5e,"deit"),W5e.forEach(t),tze=r(Sw," \u2014 "),Ck=n(Sw,"A",{href:!0});var gXr=s(Ck);aze=r(gXr,"DeiTConfig"),gXr.forEach(t),nze=r(Sw," (DeiT model)"),Sw.forEach(t),sze=i(y),zf=n(y,"LI",{});var Q5e=s(zf);Qoe=n(Q5e,"STRONG",{});var hXr=s(Qoe);lze=r(hXr,"detr"),hXr.forEach(t),ize=r(Q5e," \u2014 "),wk=n(Q5e,"A",{href:!0});var pXr=s(wk);dze=r(pXr,"DetrConfig"),pXr.forEach(t),cze=r(Q5e," (DETR model)"),Q5e.forEach(t),fze=i(y),Wf=n(y,"LI",{});var H5e=s(Wf);Hoe=n(H5e,"STRONG",{});var _Xr=s(Hoe);mze=r(_Xr,"distilbert"),_Xr.forEach(t),gze=r(H5e," \u2014 "),Ak=n(H5e,"A",{href:!0});var uXr=s(Ak);hze=r(uXr,"DistilBertConfig"),uXr.forEach(t),pze=r(H5e," (DistilBERT model)"),H5e.forEach(t),_ze=i(y),Qf=n(y,"LI",{});var U5e=s(Qf);Uoe=n(U5e,"STRONG",{});var bXr=s(Uoe);uze=r(bXr,"dpr"),bXr.forEach(t),bze=r(U5e," \u2014 "),yk=n(U5e,"A",{href:!0});var vXr=s(yk);vze=r(vXr,"DPRConfig"),vXr.forEach(t),Fze=r(U5e," (DPR model)"),U5e.forEach(t),Tze=i(y),Hf=n(y,"LI",{});var J5e=s(Hf);Joe=n(J5e,"STRONG",{});var FXr=s(Joe);Mze=r(FXr,"dpt"),FXr.forEach(t),Eze=r(J5e," \u2014 "),Lk=n(J5e,"A",{href:!0});var TXr=s(Lk);Cze=r(TXr,"DPTConfig"),TXr.forEach(t),wze=r(J5e," (DPT model)"),J5e.forEach(t),Aze=i(y),Uf=n(y,"LI",{});var Y5e=s(Uf);Yoe=n(Y5e,"STRONG",{});var MXr=s(Yoe);yze=r(MXr,"electra"),MXr.forEach(t),Lze=r(Y5e," \u2014 "),xk=n(Y5e,"A",{href:!0});var EXr=s(xk);xze=r(EXr,"ElectraConfig"),EXr.forEach(t),$ze=r(Y5e," (ELECTRA model)"),Y5e.forEach(t),kze=i(y),Jf=n(y,"LI",{});var K5e=s(Jf);Koe=n(K5e,"STRONG",{});var CXr=s(Koe);Sze=r(CXr,"encoder-decoder"),CXr.forEach(t),Rze=r(K5e," \u2014 "),$k=n(K5e,"A",{href:!0});var wXr=s($k);Pze=r(wXr,"EncoderDecoderConfig"),wXr.forEach(t),Bze=r(K5e," (Encoder decoder model)"),K5e.forEach(t),Ize=i(y),Yf=n(y,"LI",{});var Z5e=s(Yf);Zoe=n(Z5e,"STRONG",{});var AXr=s(Zoe);Nze=r(AXr,"flaubert"),AXr.forEach(t),qze=r(Z5e," \u2014 "),kk=n(Z5e,"A",{href:!0});var yXr=s(kk);jze=r(yXr,"FlaubertConfig"),yXr.forEach(t),Dze=r(Z5e," (FlauBERT model)"),Z5e.forEach(t),Gze=i(y),Kf=n(y,"LI",{});var e3e=s(Kf);ere=n(e3e,"STRONG",{});var LXr=s(ere);Oze=r(LXr,"flava"),LXr.forEach(t),Vze=r(e3e," \u2014 "),Sk=n(e3e,"A",{href:!0});var xXr=s(Sk);Xze=r(xXr,"FlavaConfig"),xXr.forEach(t),zze=r(e3e," (Flava model)"),e3e.forEach(t),Wze=i(y),Zf=n(y,"LI",{});var o3e=s(Zf);ore=n(o3e,"STRONG",{});var $Xr=s(ore);Qze=r($Xr,"fnet"),$Xr.forEach(t),Hze=r(o3e," \u2014 "),Rk=n(o3e,"A",{href:!0});var kXr=s(Rk);Uze=r(kXr,"FNetConfig"),kXr.forEach(t),Jze=r(o3e," (FNet model)"),o3e.forEach(t),Yze=i(y),em=n(y,"LI",{});var r3e=s(em);rre=n(r3e,"STRONG",{});var SXr=s(rre);Kze=r(SXr,"fsmt"),SXr.forEach(t),Zze=r(r3e," \u2014 "),Pk=n(r3e,"A",{href:!0});var RXr=s(Pk);eWe=r(RXr,"FSMTConfig"),RXr.forEach(t),oWe=r(r3e," (FairSeq Machine-Translation model)"),r3e.forEach(t),rWe=i(y),om=n(y,"LI",{});var t3e=s(om);tre=n(t3e,"STRONG",{});var PXr=s(tre);tWe=r(PXr,"funnel"),PXr.forEach(t),aWe=r(t3e," \u2014 "),Bk=n(t3e,"A",{href:!0});var BXr=s(Bk);nWe=r(BXr,"FunnelConfig"),BXr.forEach(t),sWe=r(t3e," (Funnel Transformer model)"),t3e.forEach(t),lWe=i(y),rm=n(y,"LI",{});var a3e=s(rm);are=n(a3e,"STRONG",{});var IXr=s(are);iWe=r(IXr,"glpn"),IXr.forEach(t),dWe=r(a3e," \u2014 "),Ik=n(a3e,"A",{href:!0});var NXr=s(Ik);cWe=r(NXr,"GLPNConfig"),NXr.forEach(t),fWe=r(a3e," (GLPN model)"),a3e.forEach(t),mWe=i(y),tm=n(y,"LI",{});var n3e=s(tm);nre=n(n3e,"STRONG",{});var qXr=s(nre);gWe=r(qXr,"gpt2"),qXr.forEach(t),hWe=r(n3e," \u2014 "),Nk=n(n3e,"A",{href:!0});var jXr=s(Nk);pWe=r(jXr,"GPT2Config"),jXr.forEach(t),_We=r(n3e," (OpenAI GPT-2 model)"),n3e.forEach(t),uWe=i(y),am=n(y,"LI",{});var s3e=s(am);sre=n(s3e,"STRONG",{});var DXr=s(sre);bWe=r(DXr,"gpt_neo"),DXr.forEach(t),vWe=r(s3e," \u2014 "),qk=n(s3e,"A",{href:!0});var GXr=s(qk);FWe=r(GXr,"GPTNeoConfig"),GXr.forEach(t),TWe=r(s3e," (GPT Neo model)"),s3e.forEach(t),MWe=i(y),nm=n(y,"LI",{});var l3e=s(nm);lre=n(l3e,"STRONG",{});var OXr=s(lre);EWe=r(OXr,"gpt_neox"),OXr.forEach(t),CWe=r(l3e," \u2014 "),jk=n(l3e,"A",{href:!0});var VXr=s(jk);wWe=r(VXr,"GPTNeoXConfig"),VXr.forEach(t),AWe=r(l3e," (GPT NeoX model)"),l3e.forEach(t),yWe=i(y),sm=n(y,"LI",{});var i3e=s(sm);ire=n(i3e,"STRONG",{});var XXr=s(ire);LWe=r(XXr,"gptj"),XXr.forEach(t),xWe=r(i3e," \u2014 "),Dk=n(i3e,"A",{href:!0});var zXr=s(Dk);$We=r(zXr,"GPTJConfig"),zXr.forEach(t),kWe=r(i3e," (GPT-J model)"),i3e.forEach(t),SWe=i(y),lm=n(y,"LI",{});var d3e=s(lm);dre=n(d3e,"STRONG",{});var WXr=s(dre);RWe=r(WXr,"hubert"),WXr.forEach(t),PWe=r(d3e," \u2014 "),Gk=n(d3e,"A",{href:!0});var QXr=s(Gk);BWe=r(QXr,"HubertConfig"),QXr.forEach(t),IWe=r(d3e," (Hubert model)"),d3e.forEach(t),NWe=i(y),im=n(y,"LI",{});var c3e=s(im);cre=n(c3e,"STRONG",{});var HXr=s(cre);qWe=r(HXr,"ibert"),HXr.forEach(t),jWe=r(c3e," \u2014 "),Ok=n(c3e,"A",{href:!0});var UXr=s(Ok);DWe=r(UXr,"IBertConfig"),UXr.forEach(t),GWe=r(c3e," (I-BERT model)"),c3e.forEach(t),OWe=i(y),dm=n(y,"LI",{});var f3e=s(dm);fre=n(f3e,"STRONG",{});var JXr=s(fre);VWe=r(JXr,"imagegpt"),JXr.forEach(t),XWe=r(f3e," \u2014 "),Vk=n(f3e,"A",{href:!0});var YXr=s(Vk);zWe=r(YXr,"ImageGPTConfig"),YXr.forEach(t),WWe=r(f3e," (ImageGPT model)"),f3e.forEach(t),QWe=i(y),cm=n(y,"LI",{});var m3e=s(cm);mre=n(m3e,"STRONG",{});var KXr=s(mre);HWe=r(KXr,"layoutlm"),KXr.forEach(t),UWe=r(m3e," \u2014 "),Xk=n(m3e,"A",{href:!0});var ZXr=s(Xk);JWe=r(ZXr,"LayoutLMConfig"),ZXr.forEach(t),YWe=r(m3e," (LayoutLM model)"),m3e.forEach(t),KWe=i(y),fm=n(y,"LI",{});var g3e=s(fm);gre=n(g3e,"STRONG",{});var ezr=s(gre);ZWe=r(ezr,"layoutlmv2"),ezr.forEach(t),eQe=r(g3e," \u2014 "),zk=n(g3e,"A",{href:!0});var ozr=s(zk);oQe=r(ozr,"LayoutLMv2Config"),ozr.forEach(t),rQe=r(g3e," (LayoutLMv2 model)"),g3e.forEach(t),tQe=i(y),mm=n(y,"LI",{});var h3e=s(mm);hre=n(h3e,"STRONG",{});var rzr=s(hre);aQe=r(rzr,"layoutlmv3"),rzr.forEach(t),nQe=r(h3e," \u2014 "),Wk=n(h3e,"A",{href:!0});var tzr=s(Wk);sQe=r(tzr,"LayoutLMv3Config"),tzr.forEach(t),lQe=r(h3e," (LayoutLMv3 model)"),h3e.forEach(t),iQe=i(y),gm=n(y,"LI",{});var p3e=s(gm);pre=n(p3e,"STRONG",{});var azr=s(pre);dQe=r(azr,"led"),azr.forEach(t),cQe=r(p3e," \u2014 "),Qk=n(p3e,"A",{href:!0});var nzr=s(Qk);fQe=r(nzr,"LEDConfig"),nzr.forEach(t),mQe=r(p3e," (LED model)"),p3e.forEach(t),gQe=i(y),hm=n(y,"LI",{});var _3e=s(hm);_re=n(_3e,"STRONG",{});var szr=s(_re);hQe=r(szr,"longformer"),szr.forEach(t),pQe=r(_3e," \u2014 "),Hk=n(_3e,"A",{href:!0});var lzr=s(Hk);_Qe=r(lzr,"LongformerConfig"),lzr.forEach(t),uQe=r(_3e," (Longformer model)"),_3e.forEach(t),bQe=i(y),pm=n(y,"LI",{});var u3e=s(pm);ure=n(u3e,"STRONG",{});var izr=s(ure);vQe=r(izr,"luke"),izr.forEach(t),FQe=r(u3e," \u2014 "),Uk=n(u3e,"A",{href:!0});var dzr=s(Uk);TQe=r(dzr,"LukeConfig"),dzr.forEach(t),MQe=r(u3e," (LUKE model)"),u3e.forEach(t),EQe=i(y),_m=n(y,"LI",{});var b3e=s(_m);bre=n(b3e,"STRONG",{});var czr=s(bre);CQe=r(czr,"lxmert"),czr.forEach(t),wQe=r(b3e," \u2014 "),Jk=n(b3e,"A",{href:!0});var fzr=s(Jk);AQe=r(fzr,"LxmertConfig"),fzr.forEach(t),yQe=r(b3e," (LXMERT model)"),b3e.forEach(t),LQe=i(y),um=n(y,"LI",{});var v3e=s(um);vre=n(v3e,"STRONG",{});var mzr=s(vre);xQe=r(mzr,"m2m_100"),mzr.forEach(t),$Qe=r(v3e," \u2014 "),Yk=n(v3e,"A",{href:!0});var gzr=s(Yk);kQe=r(gzr,"M2M100Config"),gzr.forEach(t),SQe=r(v3e," (M2M100 model)"),v3e.forEach(t),RQe=i(y),bm=n(y,"LI",{});var F3e=s(bm);Fre=n(F3e,"STRONG",{});var hzr=s(Fre);PQe=r(hzr,"marian"),hzr.forEach(t),BQe=r(F3e," \u2014 "),Kk=n(F3e,"A",{href:!0});var pzr=s(Kk);IQe=r(pzr,"MarianConfig"),pzr.forEach(t),NQe=r(F3e," (Marian model)"),F3e.forEach(t),qQe=i(y),vm=n(y,"LI",{});var T3e=s(vm);Tre=n(T3e,"STRONG",{});var _zr=s(Tre);jQe=r(_zr,"maskformer"),_zr.forEach(t),DQe=r(T3e," \u2014 "),Zk=n(T3e,"A",{href:!0});var uzr=s(Zk);GQe=r(uzr,"MaskFormerConfig"),uzr.forEach(t),OQe=r(T3e," (MaskFormer model)"),T3e.forEach(t),VQe=i(y),Fm=n(y,"LI",{});var M3e=s(Fm);Mre=n(M3e,"STRONG",{});var bzr=s(Mre);XQe=r(bzr,"mbart"),bzr.forEach(t),zQe=r(M3e," \u2014 "),eS=n(M3e,"A",{href:!0});var vzr=s(eS);WQe=r(vzr,"MBartConfig"),vzr.forEach(t),QQe=r(M3e," (mBART model)"),M3e.forEach(t),HQe=i(y),Tm=n(y,"LI",{});var E3e=s(Tm);Ere=n(E3e,"STRONG",{});var Fzr=s(Ere);UQe=r(Fzr,"mctct"),Fzr.forEach(t),JQe=r(E3e," \u2014 "),oS=n(E3e,"A",{href:!0});var Tzr=s(oS);YQe=r(Tzr,"MCTCTConfig"),Tzr.forEach(t),KQe=r(E3e," (MCTCT model)"),E3e.forEach(t),ZQe=i(y),Mm=n(y,"LI",{});var C3e=s(Mm);Cre=n(C3e,"STRONG",{});var Mzr=s(Cre);eHe=r(Mzr,"megatron-bert"),Mzr.forEach(t),oHe=r(C3e," \u2014 "),rS=n(C3e,"A",{href:!0});var Ezr=s(rS);rHe=r(Ezr,"MegatronBertConfig"),Ezr.forEach(t),tHe=r(C3e," (MegatronBert model)"),C3e.forEach(t),aHe=i(y),Em=n(y,"LI",{});var w3e=s(Em);wre=n(w3e,"STRONG",{});var Czr=s(wre);nHe=r(Czr,"mobilebert"),Czr.forEach(t),sHe=r(w3e," \u2014 "),tS=n(w3e,"A",{href:!0});var wzr=s(tS);lHe=r(wzr,"MobileBertConfig"),wzr.forEach(t),iHe=r(w3e," (MobileBERT model)"),w3e.forEach(t),dHe=i(y),Cm=n(y,"LI",{});var A3e=s(Cm);Are=n(A3e,"STRONG",{});var Azr=s(Are);cHe=r(Azr,"mpnet"),Azr.forEach(t),fHe=r(A3e," \u2014 "),aS=n(A3e,"A",{href:!0});var yzr=s(aS);mHe=r(yzr,"MPNetConfig"),yzr.forEach(t),gHe=r(A3e," (MPNet model)"),A3e.forEach(t),hHe=i(y),wm=n(y,"LI",{});var y3e=s(wm);yre=n(y3e,"STRONG",{});var Lzr=s(yre);pHe=r(Lzr,"mt5"),Lzr.forEach(t),_He=r(y3e," \u2014 "),nS=n(y3e,"A",{href:!0});var xzr=s(nS);uHe=r(xzr,"MT5Config"),xzr.forEach(t),bHe=r(y3e," (mT5 model)"),y3e.forEach(t),vHe=i(y),Am=n(y,"LI",{});var L3e=s(Am);Lre=n(L3e,"STRONG",{});var $zr=s(Lre);FHe=r($zr,"nystromformer"),$zr.forEach(t),THe=r(L3e," \u2014 "),sS=n(L3e,"A",{href:!0});var kzr=s(sS);MHe=r(kzr,"NystromformerConfig"),kzr.forEach(t),EHe=r(L3e," (Nystromformer model)"),L3e.forEach(t),CHe=i(y),ym=n(y,"LI",{});var x3e=s(ym);xre=n(x3e,"STRONG",{});var Szr=s(xre);wHe=r(Szr,"openai-gpt"),Szr.forEach(t),AHe=r(x3e," \u2014 "),lS=n(x3e,"A",{href:!0});var Rzr=s(lS);yHe=r(Rzr,"OpenAIGPTConfig"),Rzr.forEach(t),LHe=r(x3e," (OpenAI GPT model)"),x3e.forEach(t),xHe=i(y),Lm=n(y,"LI",{});var $3e=s(Lm);$re=n($3e,"STRONG",{});var Pzr=s($re);$He=r(Pzr,"opt"),Pzr.forEach(t),kHe=r($3e," \u2014 "),iS=n($3e,"A",{href:!0});var Bzr=s(iS);SHe=r(Bzr,"OPTConfig"),Bzr.forEach(t),RHe=r($3e," (OPT model)"),$3e.forEach(t),PHe=i(y),xm=n(y,"LI",{});var k3e=s(xm);kre=n(k3e,"STRONG",{});var Izr=s(kre);BHe=r(Izr,"pegasus"),Izr.forEach(t),IHe=r(k3e," \u2014 "),dS=n(k3e,"A",{href:!0});var Nzr=s(dS);NHe=r(Nzr,"PegasusConfig"),Nzr.forEach(t),qHe=r(k3e," (Pegasus model)"),k3e.forEach(t),jHe=i(y),$m=n(y,"LI",{});var S3e=s($m);Sre=n(S3e,"STRONG",{});var qzr=s(Sre);DHe=r(qzr,"perceiver"),qzr.forEach(t),GHe=r(S3e," \u2014 "),cS=n(S3e,"A",{href:!0});var jzr=s(cS);OHe=r(jzr,"PerceiverConfig"),jzr.forEach(t),VHe=r(S3e," (Perceiver model)"),S3e.forEach(t),XHe=i(y),km=n(y,"LI",{});var R3e=s(km);Rre=n(R3e,"STRONG",{});var Dzr=s(Rre);zHe=r(Dzr,"plbart"),Dzr.forEach(t),WHe=r(R3e," \u2014 "),fS=n(R3e,"A",{href:!0});var Gzr=s(fS);QHe=r(Gzr,"PLBartConfig"),Gzr.forEach(t),HHe=r(R3e," (PLBart model)"),R3e.forEach(t),UHe=i(y),Sm=n(y,"LI",{});var P3e=s(Sm);Pre=n(P3e,"STRONG",{});var Ozr=s(Pre);JHe=r(Ozr,"poolformer"),Ozr.forEach(t),YHe=r(P3e," \u2014 "),mS=n(P3e,"A",{href:!0});var Vzr=s(mS);KHe=r(Vzr,"PoolFormerConfig"),Vzr.forEach(t),ZHe=r(P3e," (PoolFormer model)"),P3e.forEach(t),eUe=i(y),Rm=n(y,"LI",{});var B3e=s(Rm);Bre=n(B3e,"STRONG",{});var Xzr=s(Bre);oUe=r(Xzr,"prophetnet"),Xzr.forEach(t),rUe=r(B3e," \u2014 "),gS=n(B3e,"A",{href:!0});var zzr=s(gS);tUe=r(zzr,"ProphetNetConfig"),zzr.forEach(t),aUe=r(B3e," (ProphetNet model)"),B3e.forEach(t),nUe=i(y),Pm=n(y,"LI",{});var I3e=s(Pm);Ire=n(I3e,"STRONG",{});var Wzr=s(Ire);sUe=r(Wzr,"qdqbert"),Wzr.forEach(t),lUe=r(I3e," \u2014 "),hS=n(I3e,"A",{href:!0});var Qzr=s(hS);iUe=r(Qzr,"QDQBertConfig"),Qzr.forEach(t),dUe=r(I3e," (QDQBert model)"),I3e.forEach(t),cUe=i(y),Bm=n(y,"LI",{});var N3e=s(Bm);Nre=n(N3e,"STRONG",{});var Hzr=s(Nre);fUe=r(Hzr,"rag"),Hzr.forEach(t),mUe=r(N3e," \u2014 "),pS=n(N3e,"A",{href:!0});var Uzr=s(pS);gUe=r(Uzr,"RagConfig"),Uzr.forEach(t),hUe=r(N3e," (RAG model)"),N3e.forEach(t),pUe=i(y),Im=n(y,"LI",{});var q3e=s(Im);qre=n(q3e,"STRONG",{});var Jzr=s(qre);_Ue=r(Jzr,"realm"),Jzr.forEach(t),uUe=r(q3e," \u2014 "),_S=n(q3e,"A",{href:!0});var Yzr=s(_S);bUe=r(Yzr,"RealmConfig"),Yzr.forEach(t),vUe=r(q3e," (Realm model)"),q3e.forEach(t),FUe=i(y),Nm=n(y,"LI",{});var j3e=s(Nm);jre=n(j3e,"STRONG",{});var Kzr=s(jre);TUe=r(Kzr,"reformer"),Kzr.forEach(t),MUe=r(j3e," \u2014 "),uS=n(j3e,"A",{href:!0});var Zzr=s(uS);EUe=r(Zzr,"ReformerConfig"),Zzr.forEach(t),CUe=r(j3e," (Reformer model)"),j3e.forEach(t),wUe=i(y),qm=n(y,"LI",{});var D3e=s(qm);Dre=n(D3e,"STRONG",{});var eWr=s(Dre);AUe=r(eWr,"regnet"),eWr.forEach(t),yUe=r(D3e," \u2014 "),bS=n(D3e,"A",{href:!0});var oWr=s(bS);LUe=r(oWr,"RegNetConfig"),oWr.forEach(t),xUe=r(D3e," (RegNet model)"),D3e.forEach(t),$Ue=i(y),jm=n(y,"LI",{});var G3e=s(jm);Gre=n(G3e,"STRONG",{});var rWr=s(Gre);kUe=r(rWr,"rembert"),rWr.forEach(t),SUe=r(G3e," \u2014 "),vS=n(G3e,"A",{href:!0});var tWr=s(vS);RUe=r(tWr,"RemBertConfig"),tWr.forEach(t),PUe=r(G3e," (RemBERT model)"),G3e.forEach(t),BUe=i(y),Dm=n(y,"LI",{});var O3e=s(Dm);Ore=n(O3e,"STRONG",{});var aWr=s(Ore);IUe=r(aWr,"resnet"),aWr.forEach(t),NUe=r(O3e," \u2014 "),FS=n(O3e,"A",{href:!0});var nWr=s(FS);qUe=r(nWr,"ResNetConfig"),nWr.forEach(t),jUe=r(O3e," (ResNet model)"),O3e.forEach(t),DUe=i(y),Gm=n(y,"LI",{});var V3e=s(Gm);Vre=n(V3e,"STRONG",{});var sWr=s(Vre);GUe=r(sWr,"retribert"),sWr.forEach(t),OUe=r(V3e," \u2014 "),TS=n(V3e,"A",{href:!0});var lWr=s(TS);VUe=r(lWr,"RetriBertConfig"),lWr.forEach(t),XUe=r(V3e," (RetriBERT model)"),V3e.forEach(t),zUe=i(y),Om=n(y,"LI",{});var X3e=s(Om);Xre=n(X3e,"STRONG",{});var iWr=s(Xre);WUe=r(iWr,"roberta"),iWr.forEach(t),QUe=r(X3e," \u2014 "),MS=n(X3e,"A",{href:!0});var dWr=s(MS);HUe=r(dWr,"RobertaConfig"),dWr.forEach(t),UUe=r(X3e," (RoBERTa model)"),X3e.forEach(t),JUe=i(y),Vm=n(y,"LI",{});var z3e=s(Vm);zre=n(z3e,"STRONG",{});var cWr=s(zre);YUe=r(cWr,"roformer"),cWr.forEach(t),KUe=r(z3e," \u2014 "),ES=n(z3e,"A",{href:!0});var fWr=s(ES);ZUe=r(fWr,"RoFormerConfig"),fWr.forEach(t),eJe=r(z3e," (RoFormer model)"),z3e.forEach(t),oJe=i(y),Xm=n(y,"LI",{});var W3e=s(Xm);Wre=n(W3e,"STRONG",{});var mWr=s(Wre);rJe=r(mWr,"segformer"),mWr.forEach(t),tJe=r(W3e," \u2014 "),CS=n(W3e,"A",{href:!0});var gWr=s(CS);aJe=r(gWr,"SegformerConfig"),gWr.forEach(t),nJe=r(W3e," (SegFormer model)"),W3e.forEach(t),sJe=i(y),zm=n(y,"LI",{});var Q3e=s(zm);Qre=n(Q3e,"STRONG",{});var hWr=s(Qre);lJe=r(hWr,"sew"),hWr.forEach(t),iJe=r(Q3e," \u2014 "),wS=n(Q3e,"A",{href:!0});var pWr=s(wS);dJe=r(pWr,"SEWConfig"),pWr.forEach(t),cJe=r(Q3e," (SEW model)"),Q3e.forEach(t),fJe=i(y),Wm=n(y,"LI",{});var H3e=s(Wm);Hre=n(H3e,"STRONG",{});var _Wr=s(Hre);mJe=r(_Wr,"sew-d"),_Wr.forEach(t),gJe=r(H3e," \u2014 "),AS=n(H3e,"A",{href:!0});var uWr=s(AS);hJe=r(uWr,"SEWDConfig"),uWr.forEach(t),pJe=r(H3e," (SEW-D model)"),H3e.forEach(t),_Je=i(y),Qm=n(y,"LI",{});var U3e=s(Qm);Ure=n(U3e,"STRONG",{});var bWr=s(Ure);uJe=r(bWr,"speech-encoder-decoder"),bWr.forEach(t),bJe=r(U3e," \u2014 "),yS=n(U3e,"A",{href:!0});var vWr=s(yS);vJe=r(vWr,"SpeechEncoderDecoderConfig"),vWr.forEach(t),FJe=r(U3e," (Speech Encoder decoder model)"),U3e.forEach(t),TJe=i(y),Hm=n(y,"LI",{});var J3e=s(Hm);Jre=n(J3e,"STRONG",{});var FWr=s(Jre);MJe=r(FWr,"speech_to_text"),FWr.forEach(t),EJe=r(J3e," \u2014 "),LS=n(J3e,"A",{href:!0});var TWr=s(LS);CJe=r(TWr,"Speech2TextConfig"),TWr.forEach(t),wJe=r(J3e," (Speech2Text model)"),J3e.forEach(t),AJe=i(y),Um=n(y,"LI",{});var Y3e=s(Um);Yre=n(Y3e,"STRONG",{});var MWr=s(Yre);yJe=r(MWr,"speech_to_text_2"),MWr.forEach(t),LJe=r(Y3e," \u2014 "),xS=n(Y3e,"A",{href:!0});var EWr=s(xS);xJe=r(EWr,"Speech2Text2Config"),EWr.forEach(t),$Je=r(Y3e," (Speech2Text2 model)"),Y3e.forEach(t),kJe=i(y),Jm=n(y,"LI",{});var K3e=s(Jm);Kre=n(K3e,"STRONG",{});var CWr=s(Kre);SJe=r(CWr,"splinter"),CWr.forEach(t),RJe=r(K3e," \u2014 "),$S=n(K3e,"A",{href:!0});var wWr=s($S);PJe=r(wWr,"SplinterConfig"),wWr.forEach(t),BJe=r(K3e," (Splinter model)"),K3e.forEach(t),IJe=i(y),Ym=n(y,"LI",{});var Z3e=s(Ym);Zre=n(Z3e,"STRONG",{});var AWr=s(Zre);NJe=r(AWr,"squeezebert"),AWr.forEach(t),qJe=r(Z3e," \u2014 "),kS=n(Z3e,"A",{href:!0});var yWr=s(kS);jJe=r(yWr,"SqueezeBertConfig"),yWr.forEach(t),DJe=r(Z3e," (SqueezeBERT model)"),Z3e.forEach(t),GJe=i(y),Km=n(y,"LI",{});var ewe=s(Km);ete=n(ewe,"STRONG",{});var LWr=s(ete);OJe=r(LWr,"swin"),LWr.forEach(t),VJe=r(ewe," \u2014 "),SS=n(ewe,"A",{href:!0});var xWr=s(SS);XJe=r(xWr,"SwinConfig"),xWr.forEach(t),zJe=r(ewe," (Swin model)"),ewe.forEach(t),WJe=i(y),Zm=n(y,"LI",{});var owe=s(Zm);ote=n(owe,"STRONG",{});var $Wr=s(ote);QJe=r($Wr,"t5"),$Wr.forEach(t),HJe=r(owe," \u2014 "),RS=n(owe,"A",{href:!0});var kWr=s(RS);UJe=r(kWr,"T5Config"),kWr.forEach(t),JJe=r(owe," (T5 model)"),owe.forEach(t),YJe=i(y),eg=n(y,"LI",{});var rwe=s(eg);rte=n(rwe,"STRONG",{});var SWr=s(rte);KJe=r(SWr,"tapas"),SWr.forEach(t),ZJe=r(rwe," \u2014 "),PS=n(rwe,"A",{href:!0});var RWr=s(PS);eYe=r(RWr,"TapasConfig"),RWr.forEach(t),oYe=r(rwe," (TAPAS model)"),rwe.forEach(t),rYe=i(y),og=n(y,"LI",{});var twe=s(og);tte=n(twe,"STRONG",{});var PWr=s(tte);tYe=r(PWr,"trajectory_transformer"),PWr.forEach(t),aYe=r(twe," \u2014 "),BS=n(twe,"A",{href:!0});var BWr=s(BS);nYe=r(BWr,"TrajectoryTransformerConfig"),BWr.forEach(t),sYe=r(twe," (Trajectory Transformer model)"),twe.forEach(t),lYe=i(y),rg=n(y,"LI",{});var awe=s(rg);ate=n(awe,"STRONG",{});var IWr=s(ate);iYe=r(IWr,"transfo-xl"),IWr.forEach(t),dYe=r(awe," \u2014 "),IS=n(awe,"A",{href:!0});var NWr=s(IS);cYe=r(NWr,"TransfoXLConfig"),NWr.forEach(t),fYe=r(awe," (Transformer-XL model)"),awe.forEach(t),mYe=i(y),tg=n(y,"LI",{});var nwe=s(tg);nte=n(nwe,"STRONG",{});var qWr=s(nte);gYe=r(qWr,"trocr"),qWr.forEach(t),hYe=r(nwe," \u2014 "),NS=n(nwe,"A",{href:!0});var jWr=s(NS);pYe=r(jWr,"TrOCRConfig"),jWr.forEach(t),_Ye=r(nwe," (TrOCR model)"),nwe.forEach(t),uYe=i(y),ag=n(y,"LI",{});var swe=s(ag);ste=n(swe,"STRONG",{});var DWr=s(ste);bYe=r(DWr,"unispeech"),DWr.forEach(t),vYe=r(swe," \u2014 "),qS=n(swe,"A",{href:!0});var GWr=s(qS);FYe=r(GWr,"UniSpeechConfig"),GWr.forEach(t),TYe=r(swe," (UniSpeech model)"),swe.forEach(t),MYe=i(y),ng=n(y,"LI",{});var lwe=s(ng);lte=n(lwe,"STRONG",{});var OWr=s(lte);EYe=r(OWr,"unispeech-sat"),OWr.forEach(t),CYe=r(lwe," \u2014 "),jS=n(lwe,"A",{href:!0});var VWr=s(jS);wYe=r(VWr,"UniSpeechSatConfig"),VWr.forEach(t),AYe=r(lwe," (UniSpeechSat model)"),lwe.forEach(t),yYe=i(y),sg=n(y,"LI",{});var iwe=s(sg);ite=n(iwe,"STRONG",{});var XWr=s(ite);LYe=r(XWr,"van"),XWr.forEach(t),xYe=r(iwe," \u2014 "),DS=n(iwe,"A",{href:!0});var zWr=s(DS);$Ye=r(zWr,"VanConfig"),zWr.forEach(t),kYe=r(iwe," (VAN model)"),iwe.forEach(t),SYe=i(y),lg=n(y,"LI",{});var dwe=s(lg);dte=n(dwe,"STRONG",{});var WWr=s(dte);RYe=r(WWr,"vilt"),WWr.forEach(t),PYe=r(dwe," \u2014 "),GS=n(dwe,"A",{href:!0});var QWr=s(GS);BYe=r(QWr,"ViltConfig"),QWr.forEach(t),IYe=r(dwe," (ViLT model)"),dwe.forEach(t),NYe=i(y),ig=n(y,"LI",{});var cwe=s(ig);cte=n(cwe,"STRONG",{});var HWr=s(cte);qYe=r(HWr,"vision-encoder-decoder"),HWr.forEach(t),jYe=r(cwe," \u2014 "),OS=n(cwe,"A",{href:!0});var UWr=s(OS);DYe=r(UWr,"VisionEncoderDecoderConfig"),UWr.forEach(t),GYe=r(cwe," (Vision Encoder decoder model)"),cwe.forEach(t),OYe=i(y),dg=n(y,"LI",{});var fwe=s(dg);fte=n(fwe,"STRONG",{});var JWr=s(fte);VYe=r(JWr,"vision-text-dual-encoder"),JWr.forEach(t),XYe=r(fwe," \u2014 "),VS=n(fwe,"A",{href:!0});var YWr=s(VS);zYe=r(YWr,"VisionTextDualEncoderConfig"),YWr.forEach(t),WYe=r(fwe," (VisionTextDualEncoder model)"),fwe.forEach(t),QYe=i(y),cg=n(y,"LI",{});var mwe=s(cg);mte=n(mwe,"STRONG",{});var KWr=s(mte);HYe=r(KWr,"visual_bert"),KWr.forEach(t),UYe=r(mwe," \u2014 "),XS=n(mwe,"A",{href:!0});var ZWr=s(XS);JYe=r(ZWr,"VisualBertConfig"),ZWr.forEach(t),YYe=r(mwe," (VisualBert model)"),mwe.forEach(t),KYe=i(y),fg=n(y,"LI",{});var gwe=s(fg);gte=n(gwe,"STRONG",{});var eQr=s(gte);ZYe=r(eQr,"vit"),eQr.forEach(t),eKe=r(gwe," \u2014 "),zS=n(gwe,"A",{href:!0});var oQr=s(zS);oKe=r(oQr,"ViTConfig"),oQr.forEach(t),rKe=r(gwe," (ViT model)"),gwe.forEach(t),tKe=i(y),mg=n(y,"LI",{});var hwe=s(mg);hte=n(hwe,"STRONG",{});var rQr=s(hte);aKe=r(rQr,"vit_mae"),rQr.forEach(t),nKe=r(hwe," \u2014 "),WS=n(hwe,"A",{href:!0});var tQr=s(WS);sKe=r(tQr,"ViTMAEConfig"),tQr.forEach(t),lKe=r(hwe," (ViTMAE model)"),hwe.forEach(t),iKe=i(y),gg=n(y,"LI",{});var pwe=s(gg);pte=n(pwe,"STRONG",{});var aQr=s(pte);dKe=r(aQr,"wav2vec2"),aQr.forEach(t),cKe=r(pwe," \u2014 "),QS=n(pwe,"A",{href:!0});var nQr=s(QS);fKe=r(nQr,"Wav2Vec2Config"),nQr.forEach(t),mKe=r(pwe," (Wav2Vec2 model)"),pwe.forEach(t),gKe=i(y),hg=n(y,"LI",{});var _we=s(hg);_te=n(_we,"STRONG",{});var sQr=s(_te);hKe=r(sQr,"wav2vec2-conformer"),sQr.forEach(t),pKe=r(_we," \u2014 "),HS=n(_we,"A",{href:!0});var lQr=s(HS);_Ke=r(lQr,"Wav2Vec2ConformerConfig"),lQr.forEach(t),uKe=r(_we," (Wav2Vec2-Conformer model)"),_we.forEach(t),bKe=i(y),pg=n(y,"LI",{});var uwe=s(pg);ute=n(uwe,"STRONG",{});var iQr=s(ute);vKe=r(iQr,"wavlm"),iQr.forEach(t),FKe=r(uwe," \u2014 "),US=n(uwe,"A",{href:!0});var dQr=s(US);TKe=r(dQr,"WavLMConfig"),dQr.forEach(t),MKe=r(uwe," (WavLM model)"),uwe.forEach(t),EKe=i(y),_g=n(y,"LI",{});var bwe=s(_g);bte=n(bwe,"STRONG",{});var cQr=s(bte);CKe=r(cQr,"xglm"),cQr.forEach(t),wKe=r(bwe," \u2014 "),JS=n(bwe,"A",{href:!0});var fQr=s(JS);AKe=r(fQr,"XGLMConfig"),fQr.forEach(t),yKe=r(bwe," (XGLM model)"),bwe.forEach(t),LKe=i(y),ug=n(y,"LI",{});var vwe=s(ug);vte=n(vwe,"STRONG",{});var mQr=s(vte);xKe=r(mQr,"xlm"),mQr.forEach(t),$Ke=r(vwe," \u2014 "),YS=n(vwe,"A",{href:!0});var gQr=s(YS);kKe=r(gQr,"XLMConfig"),gQr.forEach(t),SKe=r(vwe," (XLM model)"),vwe.forEach(t),RKe=i(y),bg=n(y,"LI",{});var Fwe=s(bg);Fte=n(Fwe,"STRONG",{});var hQr=s(Fte);PKe=r(hQr,"xlm-prophetnet"),hQr.forEach(t),BKe=r(Fwe," \u2014 "),KS=n(Fwe,"A",{href:!0});var pQr=s(KS);IKe=r(pQr,"XLMProphetNetConfig"),pQr.forEach(t),NKe=r(Fwe," (XLMProphetNet model)"),Fwe.forEach(t),qKe=i(y),vg=n(y,"LI",{});var Twe=s(vg);Tte=n(Twe,"STRONG",{});var _Qr=s(Tte);jKe=r(_Qr,"xlm-roberta"),_Qr.forEach(t),DKe=r(Twe," \u2014 "),ZS=n(Twe,"A",{href:!0});var uQr=s(ZS);GKe=r(uQr,"XLMRobertaConfig"),uQr.forEach(t),OKe=r(Twe," (XLM-RoBERTa model)"),Twe.forEach(t),VKe=i(y),Fg=n(y,"LI",{});var Mwe=s(Fg);Mte=n(Mwe,"STRONG",{});var bQr=s(Mte);XKe=r(bQr,"xlm-roberta-xl"),bQr.forEach(t),zKe=r(Mwe," \u2014 "),eR=n(Mwe,"A",{href:!0});var vQr=s(eR);WKe=r(vQr,"XLMRobertaXLConfig"),vQr.forEach(t),QKe=r(Mwe," (XLM-RoBERTa-XL model)"),Mwe.forEach(t),HKe=i(y),Tg=n(y,"LI",{});var Ewe=s(Tg);Ete=n(Ewe,"STRONG",{});var FQr=s(Ete);UKe=r(FQr,"xlnet"),FQr.forEach(t),JKe=r(Ewe," \u2014 "),oR=n(Ewe,"A",{href:!0});var TQr=s(oR);YKe=r(TQr,"XLNetConfig"),TQr.forEach(t),KKe=r(Ewe," (XLNet model)"),Ewe.forEach(t),ZKe=i(y),Mg=n(y,"LI",{});var Cwe=s(Mg);Cte=n(Cwe,"STRONG",{});var MQr=s(Cte);eZe=r(MQr,"yolos"),MQr.forEach(t),oZe=r(Cwe," \u2014 "),rR=n(Cwe,"A",{href:!0});var EQr=s(rR);rZe=r(EQr,"YolosConfig"),EQr.forEach(t),tZe=r(Cwe," (YOLOS model)"),Cwe.forEach(t),aZe=i(y),Eg=n(y,"LI",{});var wwe=s(Eg);wte=n(wwe,"STRONG",{});var CQr=s(wte);nZe=r(CQr,"yoso"),CQr.forEach(t),sZe=r(wwe," \u2014 "),tR=n(wwe,"A",{href:!0});var wQr=s(tR);lZe=r(wQr,"YosoConfig"),wQr.forEach(t),iZe=r(wwe," (YOSO model)"),wwe.forEach(t),y.forEach(t),dZe=i(ot),T(Cg.$$.fragment,ot),ot.forEach(t),cZe=i(et),wg=n(et,"DIV",{class:!0});var bDe=s(wg);T(qy.$$.fragment,bDe),fZe=i(bDe),Ate=n(bDe,"P",{});var AQr=s(Ate);mZe=r(AQr,"Register a new configuration for this class."),AQr.forEach(t),bDe.forEach(t),et.forEach(t),Tqe=i(f),Ti=n(f,"H2",{class:!0});var vDe=s(Ti);Ag=n(vDe,"A",{id:!0,class:!0,href:!0});var yQr=s(Ag);yte=n(yQr,"SPAN",{});var LQr=s(yte);T(jy.$$.fragment,LQr),LQr.forEach(t),yQr.forEach(t),gZe=i(vDe),Lte=n(vDe,"SPAN",{});var xQr=s(Lte);hZe=r(xQr,"AutoTokenizer"),xQr.forEach(t),vDe.forEach(t),Mqe=i(f),wo=n(f,"DIV",{class:!0});var Ns=s(wo);T(Dy.$$.fragment,Ns),pZe=i(Ns),Gy=n(Ns,"P",{});var FDe=s(Gy);_Ze=r(FDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aR=n(FDe,"A",{href:!0});var $Qr=s(aR);uZe=r($Qr,"AutoTokenizer.from_pretrained()"),$Qr.forEach(t),bZe=r(FDe," class method."),FDe.forEach(t),vZe=i(Ns),Oy=n(Ns,"P",{});var TDe=s(Oy);FZe=r(TDe,"This class cannot be instantiated directly using "),xte=n(TDe,"CODE",{});var kQr=s(xte);TZe=r(kQr,"__init__()"),kQr.forEach(t),MZe=r(TDe," (throws an error)."),TDe.forEach(t),EZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(Vy.$$.fragment,qs),CZe=i(qs),$te=n(qs,"P",{});var SQr=s($te);wZe=r(SQr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),SQr.forEach(t),AZe=i(qs),Aa=n(qs,"P",{});var Rw=s(Aa);yZe=r(Rw,"The tokenizer class to instantiate is selected based on the "),kte=n(Rw,"CODE",{});var RQr=s(kte);LZe=r(RQr,"model_type"),RQr.forEach(t),xZe=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Ste=n(Rw,"CODE",{});var PQr=s(Ste);$Ze=r(PQr,"pretrained_model_name_or_path"),PQr.forEach(t),kZe=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rte=n(Rw,"CODE",{});var BQr=s(Rte);SZe=r(BQr,"pretrained_model_name_or_path"),BQr.forEach(t),RZe=r(Rw,":"),Rw.forEach(t),PZe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Xx=s(Sn);Pte=n(Xx,"STRONG",{});var IQr=s(Pte);BZe=r(IQr,"albert"),IQr.forEach(t),IZe=r(Xx," \u2014 "),nR=n(Xx,"A",{href:!0});var NQr=s(nR);NZe=r(NQr,"AlbertTokenizer"),NQr.forEach(t),qZe=r(Xx," or "),sR=n(Xx,"A",{href:!0});var qQr=s(sR);jZe=r(qQr,"AlbertTokenizerFast"),qQr.forEach(t),DZe=r(Xx," (ALBERT model)"),Xx.forEach(t),GZe=i(S),Rn=n(S,"LI",{});var zx=s(Rn);Bte=n(zx,"STRONG",{});var jQr=s(Bte);OZe=r(jQr,"bart"),jQr.forEach(t),VZe=r(zx," \u2014 "),lR=n(zx,"A",{href:!0});var DQr=s(lR);XZe=r(DQr,"BartTokenizer"),DQr.forEach(t),zZe=r(zx," or "),iR=n(zx,"A",{href:!0});var GQr=s(iR);WZe=r(GQr,"BartTokenizerFast"),GQr.forEach(t),QZe=r(zx," (BART model)"),zx.forEach(t),HZe=i(S),Pn=n(S,"LI",{});var Wx=s(Pn);Ite=n(Wx,"STRONG",{});var OQr=s(Ite);UZe=r(OQr,"barthez"),OQr.forEach(t),JZe=r(Wx," \u2014 "),dR=n(Wx,"A",{href:!0});var VQr=s(dR);YZe=r(VQr,"BarthezTokenizer"),VQr.forEach(t),KZe=r(Wx," or "),cR=n(Wx,"A",{href:!0});var XQr=s(cR);ZZe=r(XQr,"BarthezTokenizerFast"),XQr.forEach(t),eeo=r(Wx," (BARThez model)"),Wx.forEach(t),oeo=i(S),yg=n(S,"LI",{});var Awe=s(yg);Nte=n(Awe,"STRONG",{});var zQr=s(Nte);reo=r(zQr,"bartpho"),zQr.forEach(t),teo=r(Awe," \u2014 "),fR=n(Awe,"A",{href:!0});var WQr=s(fR);aeo=r(WQr,"BartphoTokenizer"),WQr.forEach(t),neo=r(Awe," (BARTpho model)"),Awe.forEach(t),seo=i(S),Bn=n(S,"LI",{});var Qx=s(Bn);qte=n(Qx,"STRONG",{});var QQr=s(qte);leo=r(QQr,"bert"),QQr.forEach(t),ieo=r(Qx," \u2014 "),mR=n(Qx,"A",{href:!0});var HQr=s(mR);deo=r(HQr,"BertTokenizer"),HQr.forEach(t),ceo=r(Qx," or "),gR=n(Qx,"A",{href:!0});var UQr=s(gR);feo=r(UQr,"BertTokenizerFast"),UQr.forEach(t),meo=r(Qx," (BERT model)"),Qx.forEach(t),geo=i(S),Lg=n(S,"LI",{});var ywe=s(Lg);jte=n(ywe,"STRONG",{});var JQr=s(jte);heo=r(JQr,"bert-generation"),JQr.forEach(t),peo=r(ywe," \u2014 "),hR=n(ywe,"A",{href:!0});var YQr=s(hR);_eo=r(YQr,"BertGenerationTokenizer"),YQr.forEach(t),ueo=r(ywe," (Bert Generation model)"),ywe.forEach(t),beo=i(S),xg=n(S,"LI",{});var Lwe=s(xg);Dte=n(Lwe,"STRONG",{});var KQr=s(Dte);veo=r(KQr,"bert-japanese"),KQr.forEach(t),Feo=r(Lwe," \u2014 "),pR=n(Lwe,"A",{href:!0});var ZQr=s(pR);Teo=r(ZQr,"BertJapaneseTokenizer"),ZQr.forEach(t),Meo=r(Lwe," (BertJapanese model)"),Lwe.forEach(t),Eeo=i(S),$g=n(S,"LI",{});var xwe=s($g);Gte=n(xwe,"STRONG",{});var eHr=s(Gte);Ceo=r(eHr,"bertweet"),eHr.forEach(t),weo=r(xwe," \u2014 "),_R=n(xwe,"A",{href:!0});var oHr=s(_R);Aeo=r(oHr,"BertweetTokenizer"),oHr.forEach(t),yeo=r(xwe," (Bertweet model)"),xwe.forEach(t),Leo=i(S),In=n(S,"LI",{});var Hx=s(In);Ote=n(Hx,"STRONG",{});var rHr=s(Ote);xeo=r(rHr,"big_bird"),rHr.forEach(t),$eo=r(Hx," \u2014 "),uR=n(Hx,"A",{href:!0});var tHr=s(uR);keo=r(tHr,"BigBirdTokenizer"),tHr.forEach(t),Seo=r(Hx," or "),bR=n(Hx,"A",{href:!0});var aHr=s(bR);Reo=r(aHr,"BigBirdTokenizerFast"),aHr.forEach(t),Peo=r(Hx," (BigBird model)"),Hx.forEach(t),Beo=i(S),Nn=n(S,"LI",{});var Ux=s(Nn);Vte=n(Ux,"STRONG",{});var nHr=s(Vte);Ieo=r(nHr,"bigbird_pegasus"),nHr.forEach(t),Neo=r(Ux," \u2014 "),vR=n(Ux,"A",{href:!0});var sHr=s(vR);qeo=r(sHr,"PegasusTokenizer"),sHr.forEach(t),jeo=r(Ux," or "),FR=n(Ux,"A",{href:!0});var lHr=s(FR);Deo=r(lHr,"PegasusTokenizerFast"),lHr.forEach(t),Geo=r(Ux," (BigBirdPegasus model)"),Ux.forEach(t),Oeo=i(S),qn=n(S,"LI",{});var Jx=s(qn);Xte=n(Jx,"STRONG",{});var iHr=s(Xte);Veo=r(iHr,"blenderbot"),iHr.forEach(t),Xeo=r(Jx," \u2014 "),TR=n(Jx,"A",{href:!0});var dHr=s(TR);zeo=r(dHr,"BlenderbotTokenizer"),dHr.forEach(t),Weo=r(Jx," or "),MR=n(Jx,"A",{href:!0});var cHr=s(MR);Qeo=r(cHr,"BlenderbotTokenizerFast"),cHr.forEach(t),Heo=r(Jx," (Blenderbot model)"),Jx.forEach(t),Ueo=i(S),kg=n(S,"LI",{});var $we=s(kg);zte=n($we,"STRONG",{});var fHr=s(zte);Jeo=r(fHr,"blenderbot-small"),fHr.forEach(t),Yeo=r($we," \u2014 "),ER=n($we,"A",{href:!0});var mHr=s(ER);Keo=r(mHr,"BlenderbotSmallTokenizer"),mHr.forEach(t),Zeo=r($we," (BlenderbotSmall model)"),$we.forEach(t),eoo=i(S),Sg=n(S,"LI",{});var kwe=s(Sg);Wte=n(kwe,"STRONG",{});var gHr=s(Wte);ooo=r(gHr,"byt5"),gHr.forEach(t),roo=r(kwe," \u2014 "),CR=n(kwe,"A",{href:!0});var hHr=s(CR);too=r(hHr,"ByT5Tokenizer"),hHr.forEach(t),aoo=r(kwe," (ByT5 model)"),kwe.forEach(t),noo=i(S),jn=n(S,"LI",{});var Yx=s(jn);Qte=n(Yx,"STRONG",{});var pHr=s(Qte);soo=r(pHr,"camembert"),pHr.forEach(t),loo=r(Yx," \u2014 "),wR=n(Yx,"A",{href:!0});var _Hr=s(wR);ioo=r(_Hr,"CamembertTokenizer"),_Hr.forEach(t),doo=r(Yx," or "),AR=n(Yx,"A",{href:!0});var uHr=s(AR);coo=r(uHr,"CamembertTokenizerFast"),uHr.forEach(t),foo=r(Yx," (CamemBERT model)"),Yx.forEach(t),moo=i(S),Rg=n(S,"LI",{});var Swe=s(Rg);Hte=n(Swe,"STRONG",{});var bHr=s(Hte);goo=r(bHr,"canine"),bHr.forEach(t),hoo=r(Swe," \u2014 "),yR=n(Swe,"A",{href:!0});var vHr=s(yR);poo=r(vHr,"CanineTokenizer"),vHr.forEach(t),_oo=r(Swe," (Canine model)"),Swe.forEach(t),uoo=i(S),Dn=n(S,"LI",{});var Kx=s(Dn);Ute=n(Kx,"STRONG",{});var FHr=s(Ute);boo=r(FHr,"clip"),FHr.forEach(t),voo=r(Kx," \u2014 "),LR=n(Kx,"A",{href:!0});var THr=s(LR);Foo=r(THr,"CLIPTokenizer"),THr.forEach(t),Too=r(Kx," or "),xR=n(Kx,"A",{href:!0});var MHr=s(xR);Moo=r(MHr,"CLIPTokenizerFast"),MHr.forEach(t),Eoo=r(Kx," (CLIP model)"),Kx.forEach(t),Coo=i(S),Gn=n(S,"LI",{});var Zx=s(Gn);Jte=n(Zx,"STRONG",{});var EHr=s(Jte);woo=r(EHr,"convbert"),EHr.forEach(t),Aoo=r(Zx," \u2014 "),$R=n(Zx,"A",{href:!0});var CHr=s($R);yoo=r(CHr,"ConvBertTokenizer"),CHr.forEach(t),Loo=r(Zx," or "),kR=n(Zx,"A",{href:!0});var wHr=s(kR);xoo=r(wHr,"ConvBertTokenizerFast"),wHr.forEach(t),$oo=r(Zx," (ConvBERT model)"),Zx.forEach(t),koo=i(S),On=n(S,"LI",{});var e$=s(On);Yte=n(e$,"STRONG",{});var AHr=s(Yte);Soo=r(AHr,"cpm"),AHr.forEach(t),Roo=r(e$," \u2014 "),SR=n(e$,"A",{href:!0});var yHr=s(SR);Poo=r(yHr,"CpmTokenizer"),yHr.forEach(t),Boo=r(e$," or "),RR=n(e$,"A",{href:!0});var LHr=s(RR);Ioo=r(LHr,"CpmTokenizerFast"),LHr.forEach(t),Noo=r(e$," (CPM model)"),e$.forEach(t),qoo=i(S),Pg=n(S,"LI",{});var Rwe=s(Pg);Kte=n(Rwe,"STRONG",{});var xHr=s(Kte);joo=r(xHr,"ctrl"),xHr.forEach(t),Doo=r(Rwe," \u2014 "),PR=n(Rwe,"A",{href:!0});var $Hr=s(PR);Goo=r($Hr,"CTRLTokenizer"),$Hr.forEach(t),Ooo=r(Rwe," (CTRL model)"),Rwe.forEach(t),Voo=i(S),Vn=n(S,"LI",{});var o$=s(Vn);Zte=n(o$,"STRONG",{});var kHr=s(Zte);Xoo=r(kHr,"data2vec-text"),kHr.forEach(t),zoo=r(o$," \u2014 "),BR=n(o$,"A",{href:!0});var SHr=s(BR);Woo=r(SHr,"RobertaTokenizer"),SHr.forEach(t),Qoo=r(o$," or "),IR=n(o$,"A",{href:!0});var RHr=s(IR);Hoo=r(RHr,"RobertaTokenizerFast"),RHr.forEach(t),Uoo=r(o$," (Data2VecText model)"),o$.forEach(t),Joo=i(S),Xn=n(S,"LI",{});var r$=s(Xn);eae=n(r$,"STRONG",{});var PHr=s(eae);Yoo=r(PHr,"deberta"),PHr.forEach(t),Koo=r(r$," \u2014 "),NR=n(r$,"A",{href:!0});var BHr=s(NR);Zoo=r(BHr,"DebertaTokenizer"),BHr.forEach(t),ero=r(r$," or "),qR=n(r$,"A",{href:!0});var IHr=s(qR);oro=r(IHr,"DebertaTokenizerFast"),IHr.forEach(t),rro=r(r$," (DeBERTa model)"),r$.forEach(t),tro=i(S),zn=n(S,"LI",{});var t$=s(zn);oae=n(t$,"STRONG",{});var NHr=s(oae);aro=r(NHr,"deberta-v2"),NHr.forEach(t),nro=r(t$," \u2014 "),jR=n(t$,"A",{href:!0});var qHr=s(jR);sro=r(qHr,"DebertaV2Tokenizer"),qHr.forEach(t),lro=r(t$," or "),DR=n(t$,"A",{href:!0});var jHr=s(DR);iro=r(jHr,"DebertaV2TokenizerFast"),jHr.forEach(t),dro=r(t$," (DeBERTa-v2 model)"),t$.forEach(t),cro=i(S),Wn=n(S,"LI",{});var a$=s(Wn);rae=n(a$,"STRONG",{});var DHr=s(rae);fro=r(DHr,"distilbert"),DHr.forEach(t),mro=r(a$," \u2014 "),GR=n(a$,"A",{href:!0});var GHr=s(GR);gro=r(GHr,"DistilBertTokenizer"),GHr.forEach(t),hro=r(a$," or "),OR=n(a$,"A",{href:!0});var OHr=s(OR);pro=r(OHr,"DistilBertTokenizerFast"),OHr.forEach(t),_ro=r(a$," (DistilBERT model)"),a$.forEach(t),uro=i(S),Qn=n(S,"LI",{});var n$=s(Qn);tae=n(n$,"STRONG",{});var VHr=s(tae);bro=r(VHr,"dpr"),VHr.forEach(t),vro=r(n$," \u2014 "),VR=n(n$,"A",{href:!0});var XHr=s(VR);Fro=r(XHr,"DPRQuestionEncoderTokenizer"),XHr.forEach(t),Tro=r(n$," or "),XR=n(n$,"A",{href:!0});var zHr=s(XR);Mro=r(zHr,"DPRQuestionEncoderTokenizerFast"),zHr.forEach(t),Ero=r(n$," (DPR model)"),n$.forEach(t),Cro=i(S),Hn=n(S,"LI",{});var s$=s(Hn);aae=n(s$,"STRONG",{});var WHr=s(aae);wro=r(WHr,"electra"),WHr.forEach(t),Aro=r(s$," \u2014 "),zR=n(s$,"A",{href:!0});var QHr=s(zR);yro=r(QHr,"ElectraTokenizer"),QHr.forEach(t),Lro=r(s$," or "),WR=n(s$,"A",{href:!0});var HHr=s(WR);xro=r(HHr,"ElectraTokenizerFast"),HHr.forEach(t),$ro=r(s$," (ELECTRA model)"),s$.forEach(t),kro=i(S),Bg=n(S,"LI",{});var Pwe=s(Bg);nae=n(Pwe,"STRONG",{});var UHr=s(nae);Sro=r(UHr,"flaubert"),UHr.forEach(t),Rro=r(Pwe," \u2014 "),QR=n(Pwe,"A",{href:!0});var JHr=s(QR);Pro=r(JHr,"FlaubertTokenizer"),JHr.forEach(t),Bro=r(Pwe," (FlauBERT model)"),Pwe.forEach(t),Iro=i(S),Un=n(S,"LI",{});var l$=s(Un);sae=n(l$,"STRONG",{});var YHr=s(sae);Nro=r(YHr,"fnet"),YHr.forEach(t),qro=r(l$," \u2014 "),HR=n(l$,"A",{href:!0});var KHr=s(HR);jro=r(KHr,"FNetTokenizer"),KHr.forEach(t),Dro=r(l$," or "),UR=n(l$,"A",{href:!0});var ZHr=s(UR);Gro=r(ZHr,"FNetTokenizerFast"),ZHr.forEach(t),Oro=r(l$," (FNet model)"),l$.forEach(t),Vro=i(S),Ig=n(S,"LI",{});var Bwe=s(Ig);lae=n(Bwe,"STRONG",{});var eUr=s(lae);Xro=r(eUr,"fsmt"),eUr.forEach(t),zro=r(Bwe," \u2014 "),JR=n(Bwe,"A",{href:!0});var oUr=s(JR);Wro=r(oUr,"FSMTTokenizer"),oUr.forEach(t),Qro=r(Bwe," (FairSeq Machine-Translation model)"),Bwe.forEach(t),Hro=i(S),Jn=n(S,"LI",{});var i$=s(Jn);iae=n(i$,"STRONG",{});var rUr=s(iae);Uro=r(rUr,"funnel"),rUr.forEach(t),Jro=r(i$," \u2014 "),YR=n(i$,"A",{href:!0});var tUr=s(YR);Yro=r(tUr,"FunnelTokenizer"),tUr.forEach(t),Kro=r(i$," or "),KR=n(i$,"A",{href:!0});var aUr=s(KR);Zro=r(aUr,"FunnelTokenizerFast"),aUr.forEach(t),eto=r(i$," (Funnel Transformer model)"),i$.forEach(t),oto=i(S),Yn=n(S,"LI",{});var d$=s(Yn);dae=n(d$,"STRONG",{});var nUr=s(dae);rto=r(nUr,"gpt2"),nUr.forEach(t),tto=r(d$," \u2014 "),ZR=n(d$,"A",{href:!0});var sUr=s(ZR);ato=r(sUr,"GPT2Tokenizer"),sUr.forEach(t),nto=r(d$," or "),eP=n(d$,"A",{href:!0});var lUr=s(eP);sto=r(lUr,"GPT2TokenizerFast"),lUr.forEach(t),lto=r(d$," (OpenAI GPT-2 model)"),d$.forEach(t),ito=i(S),Kn=n(S,"LI",{});var c$=s(Kn);cae=n(c$,"STRONG",{});var iUr=s(cae);dto=r(iUr,"gpt_neo"),iUr.forEach(t),cto=r(c$," \u2014 "),oP=n(c$,"A",{href:!0});var dUr=s(oP);fto=r(dUr,"GPT2Tokenizer"),dUr.forEach(t),mto=r(c$," or "),rP=n(c$,"A",{href:!0});var cUr=s(rP);gto=r(cUr,"GPT2TokenizerFast"),cUr.forEach(t),hto=r(c$," (GPT Neo model)"),c$.forEach(t),pto=i(S),Ng=n(S,"LI",{});var Iwe=s(Ng);fae=n(Iwe,"STRONG",{});var fUr=s(fae);_to=r(fUr,"gpt_neox"),fUr.forEach(t),uto=r(Iwe," \u2014 "),tP=n(Iwe,"A",{href:!0});var mUr=s(tP);bto=r(mUr,"GPTNeoXTokenizerFast"),mUr.forEach(t),vto=r(Iwe," (GPT NeoX model)"),Iwe.forEach(t),Fto=i(S),Zn=n(S,"LI",{});var f$=s(Zn);mae=n(f$,"STRONG",{});var gUr=s(mae);Tto=r(gUr,"gptj"),gUr.forEach(t),Mto=r(f$," \u2014 "),aP=n(f$,"A",{href:!0});var hUr=s(aP);Eto=r(hUr,"GPT2Tokenizer"),hUr.forEach(t),Cto=r(f$," or "),nP=n(f$,"A",{href:!0});var pUr=s(nP);wto=r(pUr,"GPT2TokenizerFast"),pUr.forEach(t),Ato=r(f$," (GPT-J model)"),f$.forEach(t),yto=i(S),es=n(S,"LI",{});var m$=s(es);gae=n(m$,"STRONG",{});var _Ur=s(gae);Lto=r(_Ur,"herbert"),_Ur.forEach(t),xto=r(m$," \u2014 "),sP=n(m$,"A",{href:!0});var uUr=s(sP);$to=r(uUr,"HerbertTokenizer"),uUr.forEach(t),kto=r(m$," or "),lP=n(m$,"A",{href:!0});var bUr=s(lP);Sto=r(bUr,"HerbertTokenizerFast"),bUr.forEach(t),Rto=r(m$," (HerBERT model)"),m$.forEach(t),Pto=i(S),qg=n(S,"LI",{});var Nwe=s(qg);hae=n(Nwe,"STRONG",{});var vUr=s(hae);Bto=r(vUr,"hubert"),vUr.forEach(t),Ito=r(Nwe," \u2014 "),iP=n(Nwe,"A",{href:!0});var FUr=s(iP);Nto=r(FUr,"Wav2Vec2CTCTokenizer"),FUr.forEach(t),qto=r(Nwe," (Hubert model)"),Nwe.forEach(t),jto=i(S),os=n(S,"LI",{});var g$=s(os);pae=n(g$,"STRONG",{});var TUr=s(pae);Dto=r(TUr,"ibert"),TUr.forEach(t),Gto=r(g$," \u2014 "),dP=n(g$,"A",{href:!0});var MUr=s(dP);Oto=r(MUr,"RobertaTokenizer"),MUr.forEach(t),Vto=r(g$," or "),cP=n(g$,"A",{href:!0});var EUr=s(cP);Xto=r(EUr,"RobertaTokenizerFast"),EUr.forEach(t),zto=r(g$," (I-BERT model)"),g$.forEach(t),Wto=i(S),rs=n(S,"LI",{});var h$=s(rs);_ae=n(h$,"STRONG",{});var CUr=s(_ae);Qto=r(CUr,"layoutlm"),CUr.forEach(t),Hto=r(h$," \u2014 "),fP=n(h$,"A",{href:!0});var wUr=s(fP);Uto=r(wUr,"LayoutLMTokenizer"),wUr.forEach(t),Jto=r(h$," or "),mP=n(h$,"A",{href:!0});var AUr=s(mP);Yto=r(AUr,"LayoutLMTokenizerFast"),AUr.forEach(t),Kto=r(h$," (LayoutLM model)"),h$.forEach(t),Zto=i(S),ts=n(S,"LI",{});var p$=s(ts);uae=n(p$,"STRONG",{});var yUr=s(uae);eao=r(yUr,"layoutlmv2"),yUr.forEach(t),oao=r(p$," \u2014 "),gP=n(p$,"A",{href:!0});var LUr=s(gP);rao=r(LUr,"LayoutLMv2Tokenizer"),LUr.forEach(t),tao=r(p$," or "),hP=n(p$,"A",{href:!0});var xUr=s(hP);aao=r(xUr,"LayoutLMv2TokenizerFast"),xUr.forEach(t),nao=r(p$," (LayoutLMv2 model)"),p$.forEach(t),sao=i(S),as=n(S,"LI",{});var _$=s(as);bae=n(_$,"STRONG",{});var $Ur=s(bae);lao=r($Ur,"layoutlmv3"),$Ur.forEach(t),iao=r(_$," \u2014 "),pP=n(_$,"A",{href:!0});var kUr=s(pP);dao=r(kUr,"LayoutLMv3Tokenizer"),kUr.forEach(t),cao=r(_$," or "),_P=n(_$,"A",{href:!0});var SUr=s(_P);fao=r(SUr,"LayoutLMv3TokenizerFast"),SUr.forEach(t),mao=r(_$," (LayoutLMv3 model)"),_$.forEach(t),gao=i(S),ns=n(S,"LI",{});var u$=s(ns);vae=n(u$,"STRONG",{});var RUr=s(vae);hao=r(RUr,"layoutxlm"),RUr.forEach(t),pao=r(u$," \u2014 "),uP=n(u$,"A",{href:!0});var PUr=s(uP);_ao=r(PUr,"LayoutXLMTokenizer"),PUr.forEach(t),uao=r(u$," or "),bP=n(u$,"A",{href:!0});var BUr=s(bP);bao=r(BUr,"LayoutXLMTokenizerFast"),BUr.forEach(t),vao=r(u$," (LayoutXLM model)"),u$.forEach(t),Fao=i(S),ss=n(S,"LI",{});var b$=s(ss);Fae=n(b$,"STRONG",{});var IUr=s(Fae);Tao=r(IUr,"led"),IUr.forEach(t),Mao=r(b$," \u2014 "),vP=n(b$,"A",{href:!0});var NUr=s(vP);Eao=r(NUr,"LEDTokenizer"),NUr.forEach(t),Cao=r(b$," or "),FP=n(b$,"A",{href:!0});var qUr=s(FP);wao=r(qUr,"LEDTokenizerFast"),qUr.forEach(t),Aao=r(b$," (LED model)"),b$.forEach(t),yao=i(S),ls=n(S,"LI",{});var v$=s(ls);Tae=n(v$,"STRONG",{});var jUr=s(Tae);Lao=r(jUr,"longformer"),jUr.forEach(t),xao=r(v$," \u2014 "),TP=n(v$,"A",{href:!0});var DUr=s(TP);$ao=r(DUr,"LongformerTokenizer"),DUr.forEach(t),kao=r(v$," or "),MP=n(v$,"A",{href:!0});var GUr=s(MP);Sao=r(GUr,"LongformerTokenizerFast"),GUr.forEach(t),Rao=r(v$," (Longformer model)"),v$.forEach(t),Pao=i(S),jg=n(S,"LI",{});var qwe=s(jg);Mae=n(qwe,"STRONG",{});var OUr=s(Mae);Bao=r(OUr,"luke"),OUr.forEach(t),Iao=r(qwe," \u2014 "),EP=n(qwe,"A",{href:!0});var VUr=s(EP);Nao=r(VUr,"LukeTokenizer"),VUr.forEach(t),qao=r(qwe," (LUKE model)"),qwe.forEach(t),jao=i(S),is=n(S,"LI",{});var F$=s(is);Eae=n(F$,"STRONG",{});var XUr=s(Eae);Dao=r(XUr,"lxmert"),XUr.forEach(t),Gao=r(F$," \u2014 "),CP=n(F$,"A",{href:!0});var zUr=s(CP);Oao=r(zUr,"LxmertTokenizer"),zUr.forEach(t),Vao=r(F$," or "),wP=n(F$,"A",{href:!0});var WUr=s(wP);Xao=r(WUr,"LxmertTokenizerFast"),WUr.forEach(t),zao=r(F$," (LXMERT model)"),F$.forEach(t),Wao=i(S),Dg=n(S,"LI",{});var jwe=s(Dg);Cae=n(jwe,"STRONG",{});var QUr=s(Cae);Qao=r(QUr,"m2m_100"),QUr.forEach(t),Hao=r(jwe," \u2014 "),AP=n(jwe,"A",{href:!0});var HUr=s(AP);Uao=r(HUr,"M2M100Tokenizer"),HUr.forEach(t),Jao=r(jwe," (M2M100 model)"),jwe.forEach(t),Yao=i(S),Gg=n(S,"LI",{});var Dwe=s(Gg);wae=n(Dwe,"STRONG",{});var UUr=s(wae);Kao=r(UUr,"marian"),UUr.forEach(t),Zao=r(Dwe," \u2014 "),yP=n(Dwe,"A",{href:!0});var JUr=s(yP);eno=r(JUr,"MarianTokenizer"),JUr.forEach(t),ono=r(Dwe," (Marian model)"),Dwe.forEach(t),rno=i(S),ds=n(S,"LI",{});var T$=s(ds);Aae=n(T$,"STRONG",{});var YUr=s(Aae);tno=r(YUr,"mbart"),YUr.forEach(t),ano=r(T$," \u2014 "),LP=n(T$,"A",{href:!0});var KUr=s(LP);nno=r(KUr,"MBartTokenizer"),KUr.forEach(t),sno=r(T$," or "),xP=n(T$,"A",{href:!0});var ZUr=s(xP);lno=r(ZUr,"MBartTokenizerFast"),ZUr.forEach(t),ino=r(T$," (mBART model)"),T$.forEach(t),dno=i(S),cs=n(S,"LI",{});var M$=s(cs);yae=n(M$,"STRONG",{});var eJr=s(yae);cno=r(eJr,"mbart50"),eJr.forEach(t),fno=r(M$," \u2014 "),$P=n(M$,"A",{href:!0});var oJr=s($P);mno=r(oJr,"MBart50Tokenizer"),oJr.forEach(t),gno=r(M$," or "),kP=n(M$,"A",{href:!0});var rJr=s(kP);hno=r(rJr,"MBart50TokenizerFast"),rJr.forEach(t),pno=r(M$," (mBART-50 model)"),M$.forEach(t),_no=i(S),fs=n(S,"LI",{});var E$=s(fs);Lae=n(E$,"STRONG",{});var tJr=s(Lae);uno=r(tJr,"megatron-bert"),tJr.forEach(t),bno=r(E$," \u2014 "),SP=n(E$,"A",{href:!0});var aJr=s(SP);vno=r(aJr,"BertTokenizer"),aJr.forEach(t),Fno=r(E$," or "),RP=n(E$,"A",{href:!0});var nJr=s(RP);Tno=r(nJr,"BertTokenizerFast"),nJr.forEach(t),Mno=r(E$," (MegatronBert model)"),E$.forEach(t),Eno=i(S),Og=n(S,"LI",{});var Gwe=s(Og);xae=n(Gwe,"STRONG",{});var sJr=s(xae);Cno=r(sJr,"mluke"),sJr.forEach(t),wno=r(Gwe," \u2014 "),PP=n(Gwe,"A",{href:!0});var lJr=s(PP);Ano=r(lJr,"MLukeTokenizer"),lJr.forEach(t),yno=r(Gwe," (mLUKE model)"),Gwe.forEach(t),Lno=i(S),ms=n(S,"LI",{});var C$=s(ms);$ae=n(C$,"STRONG",{});var iJr=s($ae);xno=r(iJr,"mobilebert"),iJr.forEach(t),$no=r(C$," \u2014 "),BP=n(C$,"A",{href:!0});var dJr=s(BP);kno=r(dJr,"MobileBertTokenizer"),dJr.forEach(t),Sno=r(C$," or "),IP=n(C$,"A",{href:!0});var cJr=s(IP);Rno=r(cJr,"MobileBertTokenizerFast"),cJr.forEach(t),Pno=r(C$," (MobileBERT model)"),C$.forEach(t),Bno=i(S),gs=n(S,"LI",{});var w$=s(gs);kae=n(w$,"STRONG",{});var fJr=s(kae);Ino=r(fJr,"mpnet"),fJr.forEach(t),Nno=r(w$," \u2014 "),NP=n(w$,"A",{href:!0});var mJr=s(NP);qno=r(mJr,"MPNetTokenizer"),mJr.forEach(t),jno=r(w$," or "),qP=n(w$,"A",{href:!0});var gJr=s(qP);Dno=r(gJr,"MPNetTokenizerFast"),gJr.forEach(t),Gno=r(w$," (MPNet model)"),w$.forEach(t),Ono=i(S),hs=n(S,"LI",{});var A$=s(hs);Sae=n(A$,"STRONG",{});var hJr=s(Sae);Vno=r(hJr,"mt5"),hJr.forEach(t),Xno=r(A$," \u2014 "),jP=n(A$,"A",{href:!0});var pJr=s(jP);zno=r(pJr,"MT5Tokenizer"),pJr.forEach(t),Wno=r(A$," or "),DP=n(A$,"A",{href:!0});var _Jr=s(DP);Qno=r(_Jr,"MT5TokenizerFast"),_Jr.forEach(t),Hno=r(A$," (mT5 model)"),A$.forEach(t),Uno=i(S),ps=n(S,"LI",{});var y$=s(ps);Rae=n(y$,"STRONG",{});var uJr=s(Rae);Jno=r(uJr,"nystromformer"),uJr.forEach(t),Yno=r(y$," \u2014 "),GP=n(y$,"A",{href:!0});var bJr=s(GP);Kno=r(bJr,"AlbertTokenizer"),bJr.forEach(t),Zno=r(y$," or "),OP=n(y$,"A",{href:!0});var vJr=s(OP);eso=r(vJr,"AlbertTokenizerFast"),vJr.forEach(t),oso=r(y$," (Nystromformer model)"),y$.forEach(t),rso=i(S),_s=n(S,"LI",{});var L$=s(_s);Pae=n(L$,"STRONG",{});var FJr=s(Pae);tso=r(FJr,"openai-gpt"),FJr.forEach(t),aso=r(L$," \u2014 "),VP=n(L$,"A",{href:!0});var TJr=s(VP);nso=r(TJr,"OpenAIGPTTokenizer"),TJr.forEach(t),sso=r(L$," or "),XP=n(L$,"A",{href:!0});var MJr=s(XP);lso=r(MJr,"OpenAIGPTTokenizerFast"),MJr.forEach(t),iso=r(L$," (OpenAI GPT model)"),L$.forEach(t),dso=i(S),Vg=n(S,"LI",{});var Owe=s(Vg);Bae=n(Owe,"STRONG",{});var EJr=s(Bae);cso=r(EJr,"opt"),EJr.forEach(t),fso=r(Owe," \u2014 "),zP=n(Owe,"A",{href:!0});var CJr=s(zP);mso=r(CJr,"GPT2Tokenizer"),CJr.forEach(t),gso=r(Owe," (OPT model)"),Owe.forEach(t),hso=i(S),us=n(S,"LI",{});var x$=s(us);Iae=n(x$,"STRONG",{});var wJr=s(Iae);pso=r(wJr,"pegasus"),wJr.forEach(t),_so=r(x$," \u2014 "),WP=n(x$,"A",{href:!0});var AJr=s(WP);uso=r(AJr,"PegasusTokenizer"),AJr.forEach(t),bso=r(x$," or "),QP=n(x$,"A",{href:!0});var yJr=s(QP);vso=r(yJr,"PegasusTokenizerFast"),yJr.forEach(t),Fso=r(x$," (Pegasus model)"),x$.forEach(t),Tso=i(S),Xg=n(S,"LI",{});var Vwe=s(Xg);Nae=n(Vwe,"STRONG",{});var LJr=s(Nae);Mso=r(LJr,"perceiver"),LJr.forEach(t),Eso=r(Vwe," \u2014 "),HP=n(Vwe,"A",{href:!0});var xJr=s(HP);Cso=r(xJr,"PerceiverTokenizer"),xJr.forEach(t),wso=r(Vwe," (Perceiver model)"),Vwe.forEach(t),Aso=i(S),zg=n(S,"LI",{});var Xwe=s(zg);qae=n(Xwe,"STRONG",{});var $Jr=s(qae);yso=r($Jr,"phobert"),$Jr.forEach(t),Lso=r(Xwe," \u2014 "),UP=n(Xwe,"A",{href:!0});var kJr=s(UP);xso=r(kJr,"PhobertTokenizer"),kJr.forEach(t),$so=r(Xwe," (PhoBERT model)"),Xwe.forEach(t),kso=i(S),Wg=n(S,"LI",{});var zwe=s(Wg);jae=n(zwe,"STRONG",{});var SJr=s(jae);Sso=r(SJr,"plbart"),SJr.forEach(t),Rso=r(zwe," \u2014 "),JP=n(zwe,"A",{href:!0});var RJr=s(JP);Pso=r(RJr,"PLBartTokenizer"),RJr.forEach(t),Bso=r(zwe," (PLBart model)"),zwe.forEach(t),Iso=i(S),Qg=n(S,"LI",{});var Wwe=s(Qg);Dae=n(Wwe,"STRONG",{});var PJr=s(Dae);Nso=r(PJr,"prophetnet"),PJr.forEach(t),qso=r(Wwe," \u2014 "),YP=n(Wwe,"A",{href:!0});var BJr=s(YP);jso=r(BJr,"ProphetNetTokenizer"),BJr.forEach(t),Dso=r(Wwe," (ProphetNet model)"),Wwe.forEach(t),Gso=i(S),bs=n(S,"LI",{});var $$=s(bs);Gae=n($$,"STRONG",{});var IJr=s(Gae);Oso=r(IJr,"qdqbert"),IJr.forEach(t),Vso=r($$," \u2014 "),KP=n($$,"A",{href:!0});var NJr=s(KP);Xso=r(NJr,"BertTokenizer"),NJr.forEach(t),zso=r($$," or "),ZP=n($$,"A",{href:!0});var qJr=s(ZP);Wso=r(qJr,"BertTokenizerFast"),qJr.forEach(t),Qso=r($$," (QDQBert model)"),$$.forEach(t),Hso=i(S),Hg=n(S,"LI",{});var Qwe=s(Hg);Oae=n(Qwe,"STRONG",{});var jJr=s(Oae);Uso=r(jJr,"rag"),jJr.forEach(t),Jso=r(Qwe," \u2014 "),eB=n(Qwe,"A",{href:!0});var DJr=s(eB);Yso=r(DJr,"RagTokenizer"),DJr.forEach(t),Kso=r(Qwe," (RAG model)"),Qwe.forEach(t),Zso=i(S),vs=n(S,"LI",{});var k$=s(vs);Vae=n(k$,"STRONG",{});var GJr=s(Vae);elo=r(GJr,"realm"),GJr.forEach(t),olo=r(k$," \u2014 "),oB=n(k$,"A",{href:!0});var OJr=s(oB);rlo=r(OJr,"RealmTokenizer"),OJr.forEach(t),tlo=r(k$," or "),rB=n(k$,"A",{href:!0});var VJr=s(rB);alo=r(VJr,"RealmTokenizerFast"),VJr.forEach(t),nlo=r(k$," (Realm model)"),k$.forEach(t),slo=i(S),Fs=n(S,"LI",{});var S$=s(Fs);Xae=n(S$,"STRONG",{});var XJr=s(Xae);llo=r(XJr,"reformer"),XJr.forEach(t),ilo=r(S$," \u2014 "),tB=n(S$,"A",{href:!0});var zJr=s(tB);dlo=r(zJr,"ReformerTokenizer"),zJr.forEach(t),clo=r(S$," or "),aB=n(S$,"A",{href:!0});var WJr=s(aB);flo=r(WJr,"ReformerTokenizerFast"),WJr.forEach(t),mlo=r(S$," (Reformer model)"),S$.forEach(t),glo=i(S),Ts=n(S,"LI",{});var R$=s(Ts);zae=n(R$,"STRONG",{});var QJr=s(zae);hlo=r(QJr,"rembert"),QJr.forEach(t),plo=r(R$," \u2014 "),nB=n(R$,"A",{href:!0});var HJr=s(nB);_lo=r(HJr,"RemBertTokenizer"),HJr.forEach(t),ulo=r(R$," or "),sB=n(R$,"A",{href:!0});var UJr=s(sB);blo=r(UJr,"RemBertTokenizerFast"),UJr.forEach(t),vlo=r(R$," (RemBERT model)"),R$.forEach(t),Flo=i(S),Ms=n(S,"LI",{});var P$=s(Ms);Wae=n(P$,"STRONG",{});var JJr=s(Wae);Tlo=r(JJr,"retribert"),JJr.forEach(t),Mlo=r(P$," \u2014 "),lB=n(P$,"A",{href:!0});var YJr=s(lB);Elo=r(YJr,"RetriBertTokenizer"),YJr.forEach(t),Clo=r(P$," or "),iB=n(P$,"A",{href:!0});var KJr=s(iB);wlo=r(KJr,"RetriBertTokenizerFast"),KJr.forEach(t),Alo=r(P$," (RetriBERT model)"),P$.forEach(t),ylo=i(S),Es=n(S,"LI",{});var B$=s(Es);Qae=n(B$,"STRONG",{});var ZJr=s(Qae);Llo=r(ZJr,"roberta"),ZJr.forEach(t),xlo=r(B$," \u2014 "),dB=n(B$,"A",{href:!0});var eYr=s(dB);$lo=r(eYr,"RobertaTokenizer"),eYr.forEach(t),klo=r(B$," or "),cB=n(B$,"A",{href:!0});var oYr=s(cB);Slo=r(oYr,"RobertaTokenizerFast"),oYr.forEach(t),Rlo=r(B$," (RoBERTa model)"),B$.forEach(t),Plo=i(S),Cs=n(S,"LI",{});var I$=s(Cs);Hae=n(I$,"STRONG",{});var rYr=s(Hae);Blo=r(rYr,"roformer"),rYr.forEach(t),Ilo=r(I$," \u2014 "),fB=n(I$,"A",{href:!0});var tYr=s(fB);Nlo=r(tYr,"RoFormerTokenizer"),tYr.forEach(t),qlo=r(I$," or "),mB=n(I$,"A",{href:!0});var aYr=s(mB);jlo=r(aYr,"RoFormerTokenizerFast"),aYr.forEach(t),Dlo=r(I$," (RoFormer model)"),I$.forEach(t),Glo=i(S),Ug=n(S,"LI",{});var Hwe=s(Ug);Uae=n(Hwe,"STRONG",{});var nYr=s(Uae);Olo=r(nYr,"speech_to_text"),nYr.forEach(t),Vlo=r(Hwe," \u2014 "),gB=n(Hwe,"A",{href:!0});var sYr=s(gB);Xlo=r(sYr,"Speech2TextTokenizer"),sYr.forEach(t),zlo=r(Hwe," (Speech2Text model)"),Hwe.forEach(t),Wlo=i(S),Jg=n(S,"LI",{});var Uwe=s(Jg);Jae=n(Uwe,"STRONG",{});var lYr=s(Jae);Qlo=r(lYr,"speech_to_text_2"),lYr.forEach(t),Hlo=r(Uwe," \u2014 "),hB=n(Uwe,"A",{href:!0});var iYr=s(hB);Ulo=r(iYr,"Speech2Text2Tokenizer"),iYr.forEach(t),Jlo=r(Uwe," (Speech2Text2 model)"),Uwe.forEach(t),Ylo=i(S),ws=n(S,"LI",{});var N$=s(ws);Yae=n(N$,"STRONG",{});var dYr=s(Yae);Klo=r(dYr,"splinter"),dYr.forEach(t),Zlo=r(N$," \u2014 "),pB=n(N$,"A",{href:!0});var cYr=s(pB);eio=r(cYr,"SplinterTokenizer"),cYr.forEach(t),oio=r(N$," or "),_B=n(N$,"A",{href:!0});var fYr=s(_B);rio=r(fYr,"SplinterTokenizerFast"),fYr.forEach(t),tio=r(N$," (Splinter model)"),N$.forEach(t),aio=i(S),As=n(S,"LI",{});var q$=s(As);Kae=n(q$,"STRONG",{});var mYr=s(Kae);nio=r(mYr,"squeezebert"),mYr.forEach(t),sio=r(q$," \u2014 "),uB=n(q$,"A",{href:!0});var gYr=s(uB);lio=r(gYr,"SqueezeBertTokenizer"),gYr.forEach(t),iio=r(q$," or "),bB=n(q$,"A",{href:!0});var hYr=s(bB);dio=r(hYr,"SqueezeBertTokenizerFast"),hYr.forEach(t),cio=r(q$," (SqueezeBERT model)"),q$.forEach(t),fio=i(S),ys=n(S,"LI",{});var j$=s(ys);Zae=n(j$,"STRONG",{});var pYr=s(Zae);mio=r(pYr,"t5"),pYr.forEach(t),gio=r(j$," \u2014 "),vB=n(j$,"A",{href:!0});var _Yr=s(vB);hio=r(_Yr,"T5Tokenizer"),_Yr.forEach(t),pio=r(j$," or "),FB=n(j$,"A",{href:!0});var uYr=s(FB);_io=r(uYr,"T5TokenizerFast"),uYr.forEach(t),uio=r(j$," (T5 model)"),j$.forEach(t),bio=i(S),Yg=n(S,"LI",{});var Jwe=s(Yg);ene=n(Jwe,"STRONG",{});var bYr=s(ene);vio=r(bYr,"tapas"),bYr.forEach(t),Fio=r(Jwe," \u2014 "),TB=n(Jwe,"A",{href:!0});var vYr=s(TB);Tio=r(vYr,"TapasTokenizer"),vYr.forEach(t),Mio=r(Jwe," (TAPAS model)"),Jwe.forEach(t),Eio=i(S),Kg=n(S,"LI",{});var Ywe=s(Kg);one=n(Ywe,"STRONG",{});var FYr=s(one);Cio=r(FYr,"tapex"),FYr.forEach(t),wio=r(Ywe," \u2014 "),MB=n(Ywe,"A",{href:!0});var TYr=s(MB);Aio=r(TYr,"TapexTokenizer"),TYr.forEach(t),yio=r(Ywe," (TAPEX model)"),Ywe.forEach(t),Lio=i(S),Zg=n(S,"LI",{});var Kwe=s(Zg);rne=n(Kwe,"STRONG",{});var MYr=s(rne);xio=r(MYr,"transfo-xl"),MYr.forEach(t),$io=r(Kwe," \u2014 "),EB=n(Kwe,"A",{href:!0});var EYr=s(EB);kio=r(EYr,"TransfoXLTokenizer"),EYr.forEach(t),Sio=r(Kwe," (Transformer-XL model)"),Kwe.forEach(t),Rio=i(S),Ls=n(S,"LI",{});var D$=s(Ls);tne=n(D$,"STRONG",{});var CYr=s(tne);Pio=r(CYr,"visual_bert"),CYr.forEach(t),Bio=r(D$," \u2014 "),CB=n(D$,"A",{href:!0});var wYr=s(CB);Iio=r(wYr,"BertTokenizer"),wYr.forEach(t),Nio=r(D$," or "),wB=n(D$,"A",{href:!0});var AYr=s(wB);qio=r(AYr,"BertTokenizerFast"),AYr.forEach(t),jio=r(D$," (VisualBert model)"),D$.forEach(t),Dio=i(S),eh=n(S,"LI",{});var Zwe=s(eh);ane=n(Zwe,"STRONG",{});var yYr=s(ane);Gio=r(yYr,"wav2vec2"),yYr.forEach(t),Oio=r(Zwe," \u2014 "),AB=n(Zwe,"A",{href:!0});var LYr=s(AB);Vio=r(LYr,"Wav2Vec2CTCTokenizer"),LYr.forEach(t),Xio=r(Zwe," (Wav2Vec2 model)"),Zwe.forEach(t),zio=i(S),oh=n(S,"LI",{});var eAe=s(oh);nne=n(eAe,"STRONG",{});var xYr=s(nne);Wio=r(xYr,"wav2vec2-conformer"),xYr.forEach(t),Qio=r(eAe," \u2014 "),yB=n(eAe,"A",{href:!0});var $Yr=s(yB);Hio=r($Yr,"Wav2Vec2CTCTokenizer"),$Yr.forEach(t),Uio=r(eAe," (Wav2Vec2-Conformer model)"),eAe.forEach(t),Jio=i(S),rh=n(S,"LI",{});var oAe=s(rh);sne=n(oAe,"STRONG",{});var kYr=s(sne);Yio=r(kYr,"wav2vec2_phoneme"),kYr.forEach(t),Kio=r(oAe," \u2014 "),LB=n(oAe,"A",{href:!0});var SYr=s(LB);Zio=r(SYr,"Wav2Vec2PhonemeCTCTokenizer"),SYr.forEach(t),edo=r(oAe," (Wav2Vec2Phoneme model)"),oAe.forEach(t),odo=i(S),xs=n(S,"LI",{});var G$=s(xs);lne=n(G$,"STRONG",{});var RYr=s(lne);rdo=r(RYr,"xglm"),RYr.forEach(t),tdo=r(G$," \u2014 "),xB=n(G$,"A",{href:!0});var PYr=s(xB);ado=r(PYr,"XGLMTokenizer"),PYr.forEach(t),ndo=r(G$," or "),$B=n(G$,"A",{href:!0});var BYr=s($B);sdo=r(BYr,"XGLMTokenizerFast"),BYr.forEach(t),ldo=r(G$," (XGLM model)"),G$.forEach(t),ido=i(S),th=n(S,"LI",{});var rAe=s(th);ine=n(rAe,"STRONG",{});var IYr=s(ine);ddo=r(IYr,"xlm"),IYr.forEach(t),cdo=r(rAe," \u2014 "),kB=n(rAe,"A",{href:!0});var NYr=s(kB);fdo=r(NYr,"XLMTokenizer"),NYr.forEach(t),mdo=r(rAe," (XLM model)"),rAe.forEach(t),gdo=i(S),ah=n(S,"LI",{});var tAe=s(ah);dne=n(tAe,"STRONG",{});var qYr=s(dne);hdo=r(qYr,"xlm-prophetnet"),qYr.forEach(t),pdo=r(tAe," \u2014 "),SB=n(tAe,"A",{href:!0});var jYr=s(SB);_do=r(jYr,"XLMProphetNetTokenizer"),jYr.forEach(t),udo=r(tAe," (XLMProphetNet model)"),tAe.forEach(t),bdo=i(S),$s=n(S,"LI",{});var O$=s($s);cne=n(O$,"STRONG",{});var DYr=s(cne);vdo=r(DYr,"xlm-roberta"),DYr.forEach(t),Fdo=r(O$," \u2014 "),RB=n(O$,"A",{href:!0});var GYr=s(RB);Tdo=r(GYr,"XLMRobertaTokenizer"),GYr.forEach(t),Mdo=r(O$," or "),PB=n(O$,"A",{href:!0});var OYr=s(PB);Edo=r(OYr,"XLMRobertaTokenizerFast"),OYr.forEach(t),Cdo=r(O$," (XLM-RoBERTa model)"),O$.forEach(t),wdo=i(S),ks=n(S,"LI",{});var V$=s(ks);fne=n(V$,"STRONG",{});var VYr=s(fne);Ado=r(VYr,"xlm-roberta-xl"),VYr.forEach(t),ydo=r(V$," \u2014 "),BB=n(V$,"A",{href:!0});var XYr=s(BB);Ldo=r(XYr,"RobertaTokenizer"),XYr.forEach(t),xdo=r(V$," or "),IB=n(V$,"A",{href:!0});var zYr=s(IB);$do=r(zYr,"RobertaTokenizerFast"),zYr.forEach(t),kdo=r(V$," (XLM-RoBERTa-XL model)"),V$.forEach(t),Sdo=i(S),Ss=n(S,"LI",{});var X$=s(Ss);mne=n(X$,"STRONG",{});var WYr=s(mne);Rdo=r(WYr,"xlnet"),WYr.forEach(t),Pdo=r(X$," \u2014 "),NB=n(X$,"A",{href:!0});var QYr=s(NB);Bdo=r(QYr,"XLNetTokenizer"),QYr.forEach(t),Ido=r(X$," or "),qB=n(X$,"A",{href:!0});var HYr=s(qB);Ndo=r(HYr,"XLNetTokenizerFast"),HYr.forEach(t),qdo=r(X$," (XLNet model)"),X$.forEach(t),jdo=i(S),Rs=n(S,"LI",{});var z$=s(Rs);gne=n(z$,"STRONG",{});var UYr=s(gne);Ddo=r(UYr,"yoso"),UYr.forEach(t),Gdo=r(z$," \u2014 "),jB=n(z$,"A",{href:!0});var JYr=s(jB);Odo=r(JYr,"AlbertTokenizer"),JYr.forEach(t),Vdo=r(z$," or "),DB=n(z$,"A",{href:!0});var YYr=s(DB);Xdo=r(YYr,"AlbertTokenizerFast"),YYr.forEach(t),zdo=r(z$," (YOSO model)"),z$.forEach(t),S.forEach(t),Wdo=i(qs),T(nh.$$.fragment,qs),qs.forEach(t),Qdo=i(Ns),sh=n(Ns,"DIV",{class:!0});var MDe=s(sh);T(Xy.$$.fragment,MDe),Hdo=i(MDe),hne=n(MDe,"P",{});var KYr=s(hne);Udo=r(KYr,"Register a new tokenizer in this mapping."),KYr.forEach(t),MDe.forEach(t),Ns.forEach(t),Eqe=i(f),Mi=n(f,"H2",{class:!0});var EDe=s(Mi);lh=n(EDe,"A",{id:!0,class:!0,href:!0});var ZYr=s(lh);pne=n(ZYr,"SPAN",{});var eKr=s(pne);T(zy.$$.fragment,eKr),eKr.forEach(t),ZYr.forEach(t),Jdo=i(EDe),_ne=n(EDe,"SPAN",{});var oKr=s(_ne);Ydo=r(oKr,"AutoFeatureExtractor"),oKr.forEach(t),EDe.forEach(t),Cqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(Wy.$$.fragment,js),Kdo=i(js),Qy=n(js,"P",{});var CDe=s(Qy);Zdo=r(CDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),GB=n(CDe,"A",{href:!0});var rKr=s(GB);eco=r(rKr,"AutoFeatureExtractor.from_pretrained()"),rKr.forEach(t),oco=r(CDe," class method."),CDe.forEach(t),rco=i(js),Hy=n(js,"P",{});var wDe=s(Hy);tco=r(wDe,"This class cannot be instantiated directly using "),une=n(wDe,"CODE",{});var tKr=s(une);aco=r(tKr,"__init__()"),tKr.forEach(t),nco=r(wDe," (throws an error)."),wDe.forEach(t),sco=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(Uy.$$.fragment,Zt),lco=i(Zt),bne=n(Zt,"P",{});var aKr=s(bne);ico=r(aKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),aKr.forEach(t),dco=i(Zt),ya=n(Zt,"P",{});var Pw=s(ya);cco=r(Pw,"The feature extractor class to instantiate is selected based on the "),vne=n(Pw,"CODE",{});var nKr=s(vne);fco=r(nKr,"model_type"),nKr.forEach(t),mco=r(Pw,` property of the config object
(either passed as an argument or loaded from `),Fne=n(Pw,"CODE",{});var sKr=s(Fne);gco=r(sKr,"pretrained_model_name_or_path"),sKr.forEach(t),hco=r(Pw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Tne=n(Pw,"CODE",{});var lKr=s(Tne);pco=r(lKr,"pretrained_model_name_or_path"),lKr.forEach(t),_co=r(Pw,":"),Pw.forEach(t),uco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);ih=n(Z,"LI",{});var aAe=s(ih);Mne=n(aAe,"STRONG",{});var iKr=s(Mne);bco=r(iKr,"beit"),iKr.forEach(t),vco=r(aAe," \u2014 "),OB=n(aAe,"A",{href:!0});var dKr=s(OB);Fco=r(dKr,"BeitFeatureExtractor"),dKr.forEach(t),Tco=r(aAe," (BEiT model)"),aAe.forEach(t),Mco=i(Z),dh=n(Z,"LI",{});var nAe=s(dh);Ene=n(nAe,"STRONG",{});var cKr=s(Ene);Eco=r(cKr,"clip"),cKr.forEach(t),Cco=r(nAe," \u2014 "),VB=n(nAe,"A",{href:!0});var fKr=s(VB);wco=r(fKr,"CLIPFeatureExtractor"),fKr.forEach(t),Aco=r(nAe," (CLIP model)"),nAe.forEach(t),yco=i(Z),ch=n(Z,"LI",{});var sAe=s(ch);Cne=n(sAe,"STRONG",{});var mKr=s(Cne);Lco=r(mKr,"convnext"),mKr.forEach(t),xco=r(sAe," \u2014 "),XB=n(sAe,"A",{href:!0});var gKr=s(XB);$co=r(gKr,"ConvNextFeatureExtractor"),gKr.forEach(t),kco=r(sAe," (ConvNext model)"),sAe.forEach(t),Sco=i(Z),fh=n(Z,"LI",{});var lAe=s(fh);wne=n(lAe,"STRONG",{});var hKr=s(wne);Rco=r(hKr,"cvt"),hKr.forEach(t),Pco=r(lAe," \u2014 "),zB=n(lAe,"A",{href:!0});var pKr=s(zB);Bco=r(pKr,"ConvNextFeatureExtractor"),pKr.forEach(t),Ico=r(lAe," (CvT model)"),lAe.forEach(t),Nco=i(Z),mh=n(Z,"LI",{});var iAe=s(mh);Ane=n(iAe,"STRONG",{});var _Kr=s(Ane);qco=r(_Kr,"data2vec-audio"),_Kr.forEach(t),jco=r(iAe," \u2014 "),WB=n(iAe,"A",{href:!0});var uKr=s(WB);Dco=r(uKr,"Wav2Vec2FeatureExtractor"),uKr.forEach(t),Gco=r(iAe," (Data2VecAudio model)"),iAe.forEach(t),Oco=i(Z),gh=n(Z,"LI",{});var dAe=s(gh);yne=n(dAe,"STRONG",{});var bKr=s(yne);Vco=r(bKr,"data2vec-vision"),bKr.forEach(t),Xco=r(dAe," \u2014 "),QB=n(dAe,"A",{href:!0});var vKr=s(QB);zco=r(vKr,"BeitFeatureExtractor"),vKr.forEach(t),Wco=r(dAe," (Data2VecVision model)"),dAe.forEach(t),Qco=i(Z),hh=n(Z,"LI",{});var cAe=s(hh);Lne=n(cAe,"STRONG",{});var FKr=s(Lne);Hco=r(FKr,"deit"),FKr.forEach(t),Uco=r(cAe," \u2014 "),HB=n(cAe,"A",{href:!0});var TKr=s(HB);Jco=r(TKr,"DeiTFeatureExtractor"),TKr.forEach(t),Yco=r(cAe," (DeiT model)"),cAe.forEach(t),Kco=i(Z),ph=n(Z,"LI",{});var fAe=s(ph);xne=n(fAe,"STRONG",{});var MKr=s(xne);Zco=r(MKr,"detr"),MKr.forEach(t),efo=r(fAe," \u2014 "),UB=n(fAe,"A",{href:!0});var EKr=s(UB);ofo=r(EKr,"DetrFeatureExtractor"),EKr.forEach(t),rfo=r(fAe," (DETR model)"),fAe.forEach(t),tfo=i(Z),_h=n(Z,"LI",{});var mAe=s(_h);$ne=n(mAe,"STRONG",{});var CKr=s($ne);afo=r(CKr,"dpt"),CKr.forEach(t),nfo=r(mAe," \u2014 "),JB=n(mAe,"A",{href:!0});var wKr=s(JB);sfo=r(wKr,"DPTFeatureExtractor"),wKr.forEach(t),lfo=r(mAe," (DPT model)"),mAe.forEach(t),ifo=i(Z),uh=n(Z,"LI",{});var gAe=s(uh);kne=n(gAe,"STRONG",{});var AKr=s(kne);dfo=r(AKr,"flava"),AKr.forEach(t),cfo=r(gAe," \u2014 "),YB=n(gAe,"A",{href:!0});var yKr=s(YB);ffo=r(yKr,"FlavaFeatureExtractor"),yKr.forEach(t),mfo=r(gAe," (Flava model)"),gAe.forEach(t),gfo=i(Z),bh=n(Z,"LI",{});var hAe=s(bh);Sne=n(hAe,"STRONG",{});var LKr=s(Sne);hfo=r(LKr,"glpn"),LKr.forEach(t),pfo=r(hAe," \u2014 "),KB=n(hAe,"A",{href:!0});var xKr=s(KB);_fo=r(xKr,"GLPNFeatureExtractor"),xKr.forEach(t),ufo=r(hAe," (GLPN model)"),hAe.forEach(t),bfo=i(Z),vh=n(Z,"LI",{});var pAe=s(vh);Rne=n(pAe,"STRONG",{});var $Kr=s(Rne);vfo=r($Kr,"hubert"),$Kr.forEach(t),Ffo=r(pAe," \u2014 "),ZB=n(pAe,"A",{href:!0});var kKr=s(ZB);Tfo=r(kKr,"Wav2Vec2FeatureExtractor"),kKr.forEach(t),Mfo=r(pAe," (Hubert model)"),pAe.forEach(t),Efo=i(Z),Fh=n(Z,"LI",{});var _Ae=s(Fh);Pne=n(_Ae,"STRONG",{});var SKr=s(Pne);Cfo=r(SKr,"imagegpt"),SKr.forEach(t),wfo=r(_Ae," \u2014 "),eI=n(_Ae,"A",{href:!0});var RKr=s(eI);Afo=r(RKr,"ImageGPTFeatureExtractor"),RKr.forEach(t),yfo=r(_Ae," (ImageGPT model)"),_Ae.forEach(t),Lfo=i(Z),Th=n(Z,"LI",{});var uAe=s(Th);Bne=n(uAe,"STRONG",{});var PKr=s(Bne);xfo=r(PKr,"layoutlmv2"),PKr.forEach(t),$fo=r(uAe," \u2014 "),oI=n(uAe,"A",{href:!0});var BKr=s(oI);kfo=r(BKr,"LayoutLMv2FeatureExtractor"),BKr.forEach(t),Sfo=r(uAe," (LayoutLMv2 model)"),uAe.forEach(t),Rfo=i(Z),Mh=n(Z,"LI",{});var bAe=s(Mh);Ine=n(bAe,"STRONG",{});var IKr=s(Ine);Pfo=r(IKr,"layoutlmv3"),IKr.forEach(t),Bfo=r(bAe," \u2014 "),rI=n(bAe,"A",{href:!0});var NKr=s(rI);Ifo=r(NKr,"LayoutLMv3FeatureExtractor"),NKr.forEach(t),Nfo=r(bAe," (LayoutLMv3 model)"),bAe.forEach(t),qfo=i(Z),Eh=n(Z,"LI",{});var vAe=s(Eh);Nne=n(vAe,"STRONG",{});var qKr=s(Nne);jfo=r(qKr,"maskformer"),qKr.forEach(t),Dfo=r(vAe," \u2014 "),tI=n(vAe,"A",{href:!0});var jKr=s(tI);Gfo=r(jKr,"MaskFormerFeatureExtractor"),jKr.forEach(t),Ofo=r(vAe," (MaskFormer model)"),vAe.forEach(t),Vfo=i(Z),Ch=n(Z,"LI",{});var FAe=s(Ch);qne=n(FAe,"STRONG",{});var DKr=s(qne);Xfo=r(DKr,"mctct"),DKr.forEach(t),zfo=r(FAe," \u2014 "),aI=n(FAe,"A",{href:!0});var GKr=s(aI);Wfo=r(GKr,"MCTCTFeatureExtractor"),GKr.forEach(t),Qfo=r(FAe," (MCTCT model)"),FAe.forEach(t),Hfo=i(Z),wh=n(Z,"LI",{});var TAe=s(wh);jne=n(TAe,"STRONG",{});var OKr=s(jne);Ufo=r(OKr,"perceiver"),OKr.forEach(t),Jfo=r(TAe," \u2014 "),nI=n(TAe,"A",{href:!0});var VKr=s(nI);Yfo=r(VKr,"PerceiverFeatureExtractor"),VKr.forEach(t),Kfo=r(TAe," (Perceiver model)"),TAe.forEach(t),Zfo=i(Z),Ah=n(Z,"LI",{});var MAe=s(Ah);Dne=n(MAe,"STRONG",{});var XKr=s(Dne);emo=r(XKr,"poolformer"),XKr.forEach(t),omo=r(MAe," \u2014 "),sI=n(MAe,"A",{href:!0});var zKr=s(sI);rmo=r(zKr,"PoolFormerFeatureExtractor"),zKr.forEach(t),tmo=r(MAe," (PoolFormer model)"),MAe.forEach(t),amo=i(Z),yh=n(Z,"LI",{});var EAe=s(yh);Gne=n(EAe,"STRONG",{});var WKr=s(Gne);nmo=r(WKr,"regnet"),WKr.forEach(t),smo=r(EAe," \u2014 "),lI=n(EAe,"A",{href:!0});var QKr=s(lI);lmo=r(QKr,"ConvNextFeatureExtractor"),QKr.forEach(t),imo=r(EAe," (RegNet model)"),EAe.forEach(t),dmo=i(Z),Lh=n(Z,"LI",{});var CAe=s(Lh);One=n(CAe,"STRONG",{});var HKr=s(One);cmo=r(HKr,"resnet"),HKr.forEach(t),fmo=r(CAe," \u2014 "),iI=n(CAe,"A",{href:!0});var UKr=s(iI);mmo=r(UKr,"ConvNextFeatureExtractor"),UKr.forEach(t),gmo=r(CAe," (ResNet model)"),CAe.forEach(t),hmo=i(Z),xh=n(Z,"LI",{});var wAe=s(xh);Vne=n(wAe,"STRONG",{});var JKr=s(Vne);pmo=r(JKr,"segformer"),JKr.forEach(t),_mo=r(wAe," \u2014 "),dI=n(wAe,"A",{href:!0});var YKr=s(dI);umo=r(YKr,"SegformerFeatureExtractor"),YKr.forEach(t),bmo=r(wAe," (SegFormer model)"),wAe.forEach(t),vmo=i(Z),$h=n(Z,"LI",{});var AAe=s($h);Xne=n(AAe,"STRONG",{});var KKr=s(Xne);Fmo=r(KKr,"speech_to_text"),KKr.forEach(t),Tmo=r(AAe," \u2014 "),cI=n(AAe,"A",{href:!0});var ZKr=s(cI);Mmo=r(ZKr,"Speech2TextFeatureExtractor"),ZKr.forEach(t),Emo=r(AAe," (Speech2Text model)"),AAe.forEach(t),Cmo=i(Z),kh=n(Z,"LI",{});var yAe=s(kh);zne=n(yAe,"STRONG",{});var eZr=s(zne);wmo=r(eZr,"swin"),eZr.forEach(t),Amo=r(yAe," \u2014 "),fI=n(yAe,"A",{href:!0});var oZr=s(fI);ymo=r(oZr,"ViTFeatureExtractor"),oZr.forEach(t),Lmo=r(yAe," (Swin model)"),yAe.forEach(t),xmo=i(Z),Sh=n(Z,"LI",{});var LAe=s(Sh);Wne=n(LAe,"STRONG",{});var rZr=s(Wne);$mo=r(rZr,"van"),rZr.forEach(t),kmo=r(LAe," \u2014 "),mI=n(LAe,"A",{href:!0});var tZr=s(mI);Smo=r(tZr,"ConvNextFeatureExtractor"),tZr.forEach(t),Rmo=r(LAe," (VAN model)"),LAe.forEach(t),Pmo=i(Z),Rh=n(Z,"LI",{});var xAe=s(Rh);Qne=n(xAe,"STRONG",{});var aZr=s(Qne);Bmo=r(aZr,"vit"),aZr.forEach(t),Imo=r(xAe," \u2014 "),gI=n(xAe,"A",{href:!0});var nZr=s(gI);Nmo=r(nZr,"ViTFeatureExtractor"),nZr.forEach(t),qmo=r(xAe," (ViT model)"),xAe.forEach(t),jmo=i(Z),Ph=n(Z,"LI",{});var $Ae=s(Ph);Hne=n($Ae,"STRONG",{});var sZr=s(Hne);Dmo=r(sZr,"vit_mae"),sZr.forEach(t),Gmo=r($Ae," \u2014 "),hI=n($Ae,"A",{href:!0});var lZr=s(hI);Omo=r(lZr,"ViTFeatureExtractor"),lZr.forEach(t),Vmo=r($Ae," (ViTMAE model)"),$Ae.forEach(t),Xmo=i(Z),Bh=n(Z,"LI",{});var kAe=s(Bh);Une=n(kAe,"STRONG",{});var iZr=s(Une);zmo=r(iZr,"wav2vec2"),iZr.forEach(t),Wmo=r(kAe," \u2014 "),pI=n(kAe,"A",{href:!0});var dZr=s(pI);Qmo=r(dZr,"Wav2Vec2FeatureExtractor"),dZr.forEach(t),Hmo=r(kAe," (Wav2Vec2 model)"),kAe.forEach(t),Umo=i(Z),Ih=n(Z,"LI",{});var SAe=s(Ih);Jne=n(SAe,"STRONG",{});var cZr=s(Jne);Jmo=r(cZr,"wav2vec2-conformer"),cZr.forEach(t),Ymo=r(SAe," \u2014 "),_I=n(SAe,"A",{href:!0});var fZr=s(_I);Kmo=r(fZr,"Wav2Vec2FeatureExtractor"),fZr.forEach(t),Zmo=r(SAe," (Wav2Vec2-Conformer model)"),SAe.forEach(t),ego=i(Z),Nh=n(Z,"LI",{});var RAe=s(Nh);Yne=n(RAe,"STRONG",{});var mZr=s(Yne);ogo=r(mZr,"yolos"),mZr.forEach(t),rgo=r(RAe," \u2014 "),uI=n(RAe,"A",{href:!0});var gZr=s(uI);tgo=r(gZr,"YolosFeatureExtractor"),gZr.forEach(t),ago=r(RAe," (YOLOS model)"),RAe.forEach(t),Z.forEach(t),ngo=i(Zt),T(qh.$$.fragment,Zt),sgo=i(Zt),T(jh.$$.fragment,Zt),Zt.forEach(t),lgo=i(js),Dh=n(js,"DIV",{class:!0});var ADe=s(Dh);T(Jy.$$.fragment,ADe),igo=i(ADe),Kne=n(ADe,"P",{});var hZr=s(Kne);dgo=r(hZr,"Register a new feature extractor for this class."),hZr.forEach(t),ADe.forEach(t),js.forEach(t),wqe=i(f),Ei=n(f,"H2",{class:!0});var yDe=s(Ei);Gh=n(yDe,"A",{id:!0,class:!0,href:!0});var pZr=s(Gh);Zne=n(pZr,"SPAN",{});var _Zr=s(Zne);T(Yy.$$.fragment,_Zr),_Zr.forEach(t),pZr.forEach(t),cgo=i(yDe),ese=n(yDe,"SPAN",{});var uZr=s(ese);fgo=r(uZr,"AutoProcessor"),uZr.forEach(t),yDe.forEach(t),Aqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(Ky.$$.fragment,Ds),mgo=i(Ds),Zy=n(Ds,"P",{});var LDe=s(Zy);ggo=r(LDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),bI=n(LDe,"A",{href:!0});var bZr=s(bI);hgo=r(bZr,"AutoProcessor.from_pretrained()"),bZr.forEach(t),pgo=r(LDe," class method."),LDe.forEach(t),_go=i(Ds),eL=n(Ds,"P",{});var xDe=s(eL);ugo=r(xDe,"This class cannot be instantiated directly using "),ose=n(xDe,"CODE",{});var vZr=s(ose);bgo=r(vZr,"__init__()"),vZr.forEach(t),vgo=r(xDe," (throws an error)."),xDe.forEach(t),Fgo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(oL.$$.fragment,ea),Tgo=i(ea),rse=n(ea,"P",{});var FZr=s(rse);Mgo=r(FZr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),FZr.forEach(t),Ego=i(ea),Ci=n(ea,"P",{});var MZ=s(Ci);Cgo=r(MZ,"The processor class to instantiate is selected based on the "),tse=n(MZ,"CODE",{});var TZr=s(tse);wgo=r(TZr,"model_type"),TZr.forEach(t),Ago=r(MZ,` property of the config object (either
passed as an argument or loaded from `),ase=n(MZ,"CODE",{});var MZr=s(ase);ygo=r(MZr,"pretrained_model_name_or_path"),MZr.forEach(t),Lgo=r(MZ," if possible):"),MZ.forEach(t),xgo=i(ea),he=n(ea,"UL",{});var ue=s(he);Oh=n(ue,"LI",{});var PAe=s(Oh);nse=n(PAe,"STRONG",{});var EZr=s(nse);$go=r(EZr,"clip"),EZr.forEach(t),kgo=r(PAe," \u2014 "),vI=n(PAe,"A",{href:!0});var CZr=s(vI);Sgo=r(CZr,"CLIPProcessor"),CZr.forEach(t),Rgo=r(PAe," (CLIP model)"),PAe.forEach(t),Pgo=i(ue),Vh=n(ue,"LI",{});var BAe=s(Vh);sse=n(BAe,"STRONG",{});var wZr=s(sse);Bgo=r(wZr,"flava"),wZr.forEach(t),Igo=r(BAe," \u2014 "),lse=n(BAe,"CODE",{});var AZr=s(lse);Ngo=r(AZr,"FLAVAProcessor"),AZr.forEach(t),qgo=r(BAe," (Flava model)"),BAe.forEach(t),jgo=i(ue),Xh=n(ue,"LI",{});var IAe=s(Xh);ise=n(IAe,"STRONG",{});var yZr=s(ise);Dgo=r(yZr,"layoutlmv2"),yZr.forEach(t),Ggo=r(IAe," \u2014 "),FI=n(IAe,"A",{href:!0});var LZr=s(FI);Ogo=r(LZr,"LayoutLMv2Processor"),LZr.forEach(t),Vgo=r(IAe," (LayoutLMv2 model)"),IAe.forEach(t),Xgo=i(ue),zh=n(ue,"LI",{});var NAe=s(zh);dse=n(NAe,"STRONG",{});var xZr=s(dse);zgo=r(xZr,"layoutlmv3"),xZr.forEach(t),Wgo=r(NAe," \u2014 "),TI=n(NAe,"A",{href:!0});var $Zr=s(TI);Qgo=r($Zr,"LayoutLMv3Processor"),$Zr.forEach(t),Hgo=r(NAe," (LayoutLMv3 model)"),NAe.forEach(t),Ugo=i(ue),Wh=n(ue,"LI",{});var qAe=s(Wh);cse=n(qAe,"STRONG",{});var kZr=s(cse);Jgo=r(kZr,"layoutxlm"),kZr.forEach(t),Ygo=r(qAe," \u2014 "),MI=n(qAe,"A",{href:!0});var SZr=s(MI);Kgo=r(SZr,"LayoutXLMProcessor"),SZr.forEach(t),Zgo=r(qAe," (LayoutXLM model)"),qAe.forEach(t),eho=i(ue),Qh=n(ue,"LI",{});var jAe=s(Qh);fse=n(jAe,"STRONG",{});var RZr=s(fse);oho=r(RZr,"sew"),RZr.forEach(t),rho=r(jAe," \u2014 "),EI=n(jAe,"A",{href:!0});var PZr=s(EI);tho=r(PZr,"Wav2Vec2Processor"),PZr.forEach(t),aho=r(jAe," (SEW model)"),jAe.forEach(t),nho=i(ue),Hh=n(ue,"LI",{});var DAe=s(Hh);mse=n(DAe,"STRONG",{});var BZr=s(mse);sho=r(BZr,"sew-d"),BZr.forEach(t),lho=r(DAe," \u2014 "),CI=n(DAe,"A",{href:!0});var IZr=s(CI);iho=r(IZr,"Wav2Vec2Processor"),IZr.forEach(t),dho=r(DAe," (SEW-D model)"),DAe.forEach(t),cho=i(ue),Uh=n(ue,"LI",{});var GAe=s(Uh);gse=n(GAe,"STRONG",{});var NZr=s(gse);fho=r(NZr,"speech_to_text"),NZr.forEach(t),mho=r(GAe," \u2014 "),wI=n(GAe,"A",{href:!0});var qZr=s(wI);gho=r(qZr,"Speech2TextProcessor"),qZr.forEach(t),hho=r(GAe," (Speech2Text model)"),GAe.forEach(t),pho=i(ue),Jh=n(ue,"LI",{});var OAe=s(Jh);hse=n(OAe,"STRONG",{});var jZr=s(hse);_ho=r(jZr,"speech_to_text_2"),jZr.forEach(t),uho=r(OAe," \u2014 "),AI=n(OAe,"A",{href:!0});var DZr=s(AI);bho=r(DZr,"Speech2Text2Processor"),DZr.forEach(t),vho=r(OAe," (Speech2Text2 model)"),OAe.forEach(t),Fho=i(ue),Yh=n(ue,"LI",{});var VAe=s(Yh);pse=n(VAe,"STRONG",{});var GZr=s(pse);Tho=r(GZr,"trocr"),GZr.forEach(t),Mho=r(VAe," \u2014 "),yI=n(VAe,"A",{href:!0});var OZr=s(yI);Eho=r(OZr,"TrOCRProcessor"),OZr.forEach(t),Cho=r(VAe," (TrOCR model)"),VAe.forEach(t),who=i(ue),Kh=n(ue,"LI",{});var XAe=s(Kh);_se=n(XAe,"STRONG",{});var VZr=s(_se);Aho=r(VZr,"unispeech"),VZr.forEach(t),yho=r(XAe," \u2014 "),LI=n(XAe,"A",{href:!0});var XZr=s(LI);Lho=r(XZr,"Wav2Vec2Processor"),XZr.forEach(t),xho=r(XAe," (UniSpeech model)"),XAe.forEach(t),$ho=i(ue),Zh=n(ue,"LI",{});var zAe=s(Zh);use=n(zAe,"STRONG",{});var zZr=s(use);kho=r(zZr,"unispeech-sat"),zZr.forEach(t),Sho=r(zAe," \u2014 "),xI=n(zAe,"A",{href:!0});var WZr=s(xI);Rho=r(WZr,"Wav2Vec2Processor"),WZr.forEach(t),Pho=r(zAe," (UniSpeechSat model)"),zAe.forEach(t),Bho=i(ue),ep=n(ue,"LI",{});var WAe=s(ep);bse=n(WAe,"STRONG",{});var QZr=s(bse);Iho=r(QZr,"vilt"),QZr.forEach(t),Nho=r(WAe," \u2014 "),$I=n(WAe,"A",{href:!0});var HZr=s($I);qho=r(HZr,"ViltProcessor"),HZr.forEach(t),jho=r(WAe," (ViLT model)"),WAe.forEach(t),Dho=i(ue),op=n(ue,"LI",{});var QAe=s(op);vse=n(QAe,"STRONG",{});var UZr=s(vse);Gho=r(UZr,"vision-text-dual-encoder"),UZr.forEach(t),Oho=r(QAe," \u2014 "),kI=n(QAe,"A",{href:!0});var JZr=s(kI);Vho=r(JZr,"VisionTextDualEncoderProcessor"),JZr.forEach(t),Xho=r(QAe," (VisionTextDualEncoder model)"),QAe.forEach(t),zho=i(ue),rp=n(ue,"LI",{});var HAe=s(rp);Fse=n(HAe,"STRONG",{});var YZr=s(Fse);Who=r(YZr,"wav2vec2"),YZr.forEach(t),Qho=r(HAe," \u2014 "),SI=n(HAe,"A",{href:!0});var KZr=s(SI);Hho=r(KZr,"Wav2Vec2Processor"),KZr.forEach(t),Uho=r(HAe," (Wav2Vec2 model)"),HAe.forEach(t),Jho=i(ue),tp=n(ue,"LI",{});var UAe=s(tp);Tse=n(UAe,"STRONG",{});var ZZr=s(Tse);Yho=r(ZZr,"wav2vec2-conformer"),ZZr.forEach(t),Kho=r(UAe," \u2014 "),RI=n(UAe,"A",{href:!0});var eet=s(RI);Zho=r(eet,"Wav2Vec2Processor"),eet.forEach(t),epo=r(UAe," (Wav2Vec2-Conformer model)"),UAe.forEach(t),opo=i(ue),ap=n(ue,"LI",{});var JAe=s(ap);Mse=n(JAe,"STRONG",{});var oet=s(Mse);rpo=r(oet,"wavlm"),oet.forEach(t),tpo=r(JAe," \u2014 "),PI=n(JAe,"A",{href:!0});var ret=s(PI);apo=r(ret,"Wav2Vec2Processor"),ret.forEach(t),npo=r(JAe," (WavLM model)"),JAe.forEach(t),ue.forEach(t),spo=i(ea),T(np.$$.fragment,ea),lpo=i(ea),T(sp.$$.fragment,ea),ea.forEach(t),ipo=i(Ds),lp=n(Ds,"DIV",{class:!0});var $De=s(lp);T(rL.$$.fragment,$De),dpo=i($De),Ese=n($De,"P",{});var tet=s(Ese);cpo=r(tet,"Register a new processor for this class."),tet.forEach(t),$De.forEach(t),Ds.forEach(t),yqe=i(f),wi=n(f,"H2",{class:!0});var kDe=s(wi);ip=n(kDe,"A",{id:!0,class:!0,href:!0});var aet=s(ip);Cse=n(aet,"SPAN",{});var net=s(Cse);T(tL.$$.fragment,net),net.forEach(t),aet.forEach(t),fpo=i(kDe),wse=n(kDe,"SPAN",{});var set=s(wse);mpo=r(set,"AutoModel"),set.forEach(t),kDe.forEach(t),Lqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(aL.$$.fragment,Gs),gpo=i(Gs),Ai=n(Gs,"P",{});var EZ=s(Ai);hpo=r(EZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BI=n(EZ,"A",{href:!0});var iet=s(BI);ppo=r(iet,"from_pretrained()"),iet.forEach(t),_po=r(EZ," class method or the "),II=n(EZ,"A",{href:!0});var det=s(II);upo=r(det,"from_config()"),det.forEach(t),bpo=r(EZ,` class
method.`),EZ.forEach(t),vpo=i(Gs),nL=n(Gs,"P",{});var SDe=s(nL);Fpo=r(SDe,"This class cannot be instantiated directly using "),Ase=n(SDe,"CODE",{});var cet=s(Ase);Tpo=r(cet,"__init__()"),cet.forEach(t),Mpo=r(SDe," (throws an error)."),SDe.forEach(t),Epo=i(Gs),tt=n(Gs,"DIV",{class:!0});var Bw=s(tt);T(sL.$$.fragment,Bw),Cpo=i(Bw),yse=n(Bw,"P",{});var fet=s(yse);wpo=r(fet,"Instantiates one of the base model classes of the library from a configuration."),fet.forEach(t),Apo=i(Bw),yi=n(Bw,"P",{});var CZ=s(yi);ypo=r(CZ,`Note:
Loading a model from its configuration file does `),Lse=n(CZ,"STRONG",{});var met=s(Lse);Lpo=r(met,"not"),met.forEach(t),xpo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NI=n(CZ,"A",{href:!0});var get=s(NI);$po=r(get,"from_pretrained()"),get.forEach(t),kpo=r(CZ," to load the model weights."),CZ.forEach(t),Spo=i(Bw),T(dp.$$.fragment,Bw),Bw.forEach(t),Rpo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(lL.$$.fragment,oa),Ppo=i(oa),xse=n(oa,"P",{});var het=s(xse);Bpo=r(het,"Instantiate one of the base model classes of the library from a pretrained model."),het.forEach(t),Ipo=i(oa),La=n(oa,"P",{});var Iw=s(La);Npo=r(Iw,"The model class to instantiate is selected based on the "),$se=n(Iw,"CODE",{});var pet=s($se);qpo=r(pet,"model_type"),pet.forEach(t),jpo=r(Iw,` property of the config object (either
passed as an argument or loaded from `),kse=n(Iw,"CODE",{});var _et=s(kse);Dpo=r(_et,"pretrained_model_name_or_path"),_et.forEach(t),Gpo=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=n(Iw,"CODE",{});var uet=s(Sse);Opo=r(uet,"pretrained_model_name_or_path"),uet.forEach(t),Vpo=r(Iw,":"),Iw.forEach(t),Xpo=i(oa),x=n(oa,"UL",{});var $=s(x);cp=n($,"LI",{});var YAe=s(cp);Rse=n(YAe,"STRONG",{});var bet=s(Rse);zpo=r(bet,"albert"),bet.forEach(t),Wpo=r(YAe," \u2014 "),qI=n(YAe,"A",{href:!0});var vet=s(qI);Qpo=r(vet,"AlbertModel"),vet.forEach(t),Hpo=r(YAe," (ALBERT model)"),YAe.forEach(t),Upo=i($),fp=n($,"LI",{});var KAe=s(fp);Pse=n(KAe,"STRONG",{});var Fet=s(Pse);Jpo=r(Fet,"bart"),Fet.forEach(t),Ypo=r(KAe," \u2014 "),jI=n(KAe,"A",{href:!0});var Tet=s(jI);Kpo=r(Tet,"BartModel"),Tet.forEach(t),Zpo=r(KAe," (BART model)"),KAe.forEach(t),e_o=i($),mp=n($,"LI",{});var ZAe=s(mp);Bse=n(ZAe,"STRONG",{});var Met=s(Bse);o_o=r(Met,"beit"),Met.forEach(t),r_o=r(ZAe," \u2014 "),DI=n(ZAe,"A",{href:!0});var Eet=s(DI);t_o=r(Eet,"BeitModel"),Eet.forEach(t),a_o=r(ZAe," (BEiT model)"),ZAe.forEach(t),n_o=i($),gp=n($,"LI",{});var eye=s(gp);Ise=n(eye,"STRONG",{});var Cet=s(Ise);s_o=r(Cet,"bert"),Cet.forEach(t),l_o=r(eye," \u2014 "),GI=n(eye,"A",{href:!0});var wet=s(GI);i_o=r(wet,"BertModel"),wet.forEach(t),d_o=r(eye," (BERT model)"),eye.forEach(t),c_o=i($),hp=n($,"LI",{});var oye=s(hp);Nse=n(oye,"STRONG",{});var Aet=s(Nse);f_o=r(Aet,"bert-generation"),Aet.forEach(t),m_o=r(oye," \u2014 "),OI=n(oye,"A",{href:!0});var yet=s(OI);g_o=r(yet,"BertGenerationEncoder"),yet.forEach(t),h_o=r(oye," (Bert Generation model)"),oye.forEach(t),p_o=i($),pp=n($,"LI",{});var rye=s(pp);qse=n(rye,"STRONG",{});var Let=s(qse);__o=r(Let,"big_bird"),Let.forEach(t),u_o=r(rye," \u2014 "),VI=n(rye,"A",{href:!0});var xet=s(VI);b_o=r(xet,"BigBirdModel"),xet.forEach(t),v_o=r(rye," (BigBird model)"),rye.forEach(t),F_o=i($),_p=n($,"LI",{});var tye=s(_p);jse=n(tye,"STRONG",{});var $et=s(jse);T_o=r($et,"bigbird_pegasus"),$et.forEach(t),M_o=r(tye," \u2014 "),XI=n(tye,"A",{href:!0});var ket=s(XI);E_o=r(ket,"BigBirdPegasusModel"),ket.forEach(t),C_o=r(tye," (BigBirdPegasus model)"),tye.forEach(t),w_o=i($),up=n($,"LI",{});var aye=s(up);Dse=n(aye,"STRONG",{});var Set=s(Dse);A_o=r(Set,"blenderbot"),Set.forEach(t),y_o=r(aye," \u2014 "),zI=n(aye,"A",{href:!0});var Ret=s(zI);L_o=r(Ret,"BlenderbotModel"),Ret.forEach(t),x_o=r(aye," (Blenderbot model)"),aye.forEach(t),$_o=i($),bp=n($,"LI",{});var nye=s(bp);Gse=n(nye,"STRONG",{});var Pet=s(Gse);k_o=r(Pet,"blenderbot-small"),Pet.forEach(t),S_o=r(nye," \u2014 "),WI=n(nye,"A",{href:!0});var Bet=s(WI);R_o=r(Bet,"BlenderbotSmallModel"),Bet.forEach(t),P_o=r(nye," (BlenderbotSmall model)"),nye.forEach(t),B_o=i($),vp=n($,"LI",{});var sye=s(vp);Ose=n(sye,"STRONG",{});var Iet=s(Ose);I_o=r(Iet,"camembert"),Iet.forEach(t),N_o=r(sye," \u2014 "),QI=n(sye,"A",{href:!0});var Net=s(QI);q_o=r(Net,"CamembertModel"),Net.forEach(t),j_o=r(sye," (CamemBERT model)"),sye.forEach(t),D_o=i($),Fp=n($,"LI",{});var lye=s(Fp);Vse=n(lye,"STRONG",{});var qet=s(Vse);G_o=r(qet,"canine"),qet.forEach(t),O_o=r(lye," \u2014 "),HI=n(lye,"A",{href:!0});var jet=s(HI);V_o=r(jet,"CanineModel"),jet.forEach(t),X_o=r(lye," (Canine model)"),lye.forEach(t),z_o=i($),Tp=n($,"LI",{});var iye=s(Tp);Xse=n(iye,"STRONG",{});var Det=s(Xse);W_o=r(Det,"clip"),Det.forEach(t),Q_o=r(iye," \u2014 "),UI=n(iye,"A",{href:!0});var Get=s(UI);H_o=r(Get,"CLIPModel"),Get.forEach(t),U_o=r(iye," (CLIP model)"),iye.forEach(t),J_o=i($),Mp=n($,"LI",{});var dye=s(Mp);zse=n(dye,"STRONG",{});var Oet=s(zse);Y_o=r(Oet,"convbert"),Oet.forEach(t),K_o=r(dye," \u2014 "),JI=n(dye,"A",{href:!0});var Vet=s(JI);Z_o=r(Vet,"ConvBertModel"),Vet.forEach(t),euo=r(dye," (ConvBERT model)"),dye.forEach(t),ouo=i($),Ep=n($,"LI",{});var cye=s(Ep);Wse=n(cye,"STRONG",{});var Xet=s(Wse);ruo=r(Xet,"convnext"),Xet.forEach(t),tuo=r(cye," \u2014 "),YI=n(cye,"A",{href:!0});var zet=s(YI);auo=r(zet,"ConvNextModel"),zet.forEach(t),nuo=r(cye," (ConvNext model)"),cye.forEach(t),suo=i($),Cp=n($,"LI",{});var fye=s(Cp);Qse=n(fye,"STRONG",{});var Wet=s(Qse);luo=r(Wet,"ctrl"),Wet.forEach(t),iuo=r(fye," \u2014 "),KI=n(fye,"A",{href:!0});var Qet=s(KI);duo=r(Qet,"CTRLModel"),Qet.forEach(t),cuo=r(fye," (CTRL model)"),fye.forEach(t),fuo=i($),wp=n($,"LI",{});var mye=s(wp);Hse=n(mye,"STRONG",{});var Het=s(Hse);muo=r(Het,"cvt"),Het.forEach(t),guo=r(mye," \u2014 "),ZI=n(mye,"A",{href:!0});var Uet=s(ZI);huo=r(Uet,"CvtModel"),Uet.forEach(t),puo=r(mye," (CvT model)"),mye.forEach(t),_uo=i($),Ap=n($,"LI",{});var gye=s(Ap);Use=n(gye,"STRONG",{});var Jet=s(Use);uuo=r(Jet,"data2vec-audio"),Jet.forEach(t),buo=r(gye," \u2014 "),eN=n(gye,"A",{href:!0});var Yet=s(eN);vuo=r(Yet,"Data2VecAudioModel"),Yet.forEach(t),Fuo=r(gye," (Data2VecAudio model)"),gye.forEach(t),Tuo=i($),yp=n($,"LI",{});var hye=s(yp);Jse=n(hye,"STRONG",{});var Ket=s(Jse);Muo=r(Ket,"data2vec-text"),Ket.forEach(t),Euo=r(hye," \u2014 "),oN=n(hye,"A",{href:!0});var Zet=s(oN);Cuo=r(Zet,"Data2VecTextModel"),Zet.forEach(t),wuo=r(hye," (Data2VecText model)"),hye.forEach(t),Auo=i($),Lp=n($,"LI",{});var pye=s(Lp);Yse=n(pye,"STRONG",{});var eot=s(Yse);yuo=r(eot,"data2vec-vision"),eot.forEach(t),Luo=r(pye," \u2014 "),rN=n(pye,"A",{href:!0});var oot=s(rN);xuo=r(oot,"Data2VecVisionModel"),oot.forEach(t),$uo=r(pye," (Data2VecVision model)"),pye.forEach(t),kuo=i($),xp=n($,"LI",{});var _ye=s(xp);Kse=n(_ye,"STRONG",{});var rot=s(Kse);Suo=r(rot,"deberta"),rot.forEach(t),Ruo=r(_ye," \u2014 "),tN=n(_ye,"A",{href:!0});var tot=s(tN);Puo=r(tot,"DebertaModel"),tot.forEach(t),Buo=r(_ye," (DeBERTa model)"),_ye.forEach(t),Iuo=i($),$p=n($,"LI",{});var uye=s($p);Zse=n(uye,"STRONG",{});var aot=s(Zse);Nuo=r(aot,"deberta-v2"),aot.forEach(t),quo=r(uye," \u2014 "),aN=n(uye,"A",{href:!0});var not=s(aN);juo=r(not,"DebertaV2Model"),not.forEach(t),Duo=r(uye," (DeBERTa-v2 model)"),uye.forEach(t),Guo=i($),kp=n($,"LI",{});var bye=s(kp);ele=n(bye,"STRONG",{});var sot=s(ele);Ouo=r(sot,"decision_transformer"),sot.forEach(t),Vuo=r(bye," \u2014 "),nN=n(bye,"A",{href:!0});var lot=s(nN);Xuo=r(lot,"DecisionTransformerModel"),lot.forEach(t),zuo=r(bye," (Decision Transformer model)"),bye.forEach(t),Wuo=i($),Sp=n($,"LI",{});var vye=s(Sp);ole=n(vye,"STRONG",{});var iot=s(ole);Quo=r(iot,"deit"),iot.forEach(t),Huo=r(vye," \u2014 "),sN=n(vye,"A",{href:!0});var dot=s(sN);Uuo=r(dot,"DeiTModel"),dot.forEach(t),Juo=r(vye," (DeiT model)"),vye.forEach(t),Yuo=i($),Rp=n($,"LI",{});var Fye=s(Rp);rle=n(Fye,"STRONG",{});var cot=s(rle);Kuo=r(cot,"detr"),cot.forEach(t),Zuo=r(Fye," \u2014 "),lN=n(Fye,"A",{href:!0});var fot=s(lN);e2o=r(fot,"DetrModel"),fot.forEach(t),o2o=r(Fye," (DETR model)"),Fye.forEach(t),r2o=i($),Pp=n($,"LI",{});var Tye=s(Pp);tle=n(Tye,"STRONG",{});var mot=s(tle);t2o=r(mot,"distilbert"),mot.forEach(t),a2o=r(Tye," \u2014 "),iN=n(Tye,"A",{href:!0});var got=s(iN);n2o=r(got,"DistilBertModel"),got.forEach(t),s2o=r(Tye," (DistilBERT model)"),Tye.forEach(t),l2o=i($),Bp=n($,"LI",{});var Mye=s(Bp);ale=n(Mye,"STRONG",{});var hot=s(ale);i2o=r(hot,"dpr"),hot.forEach(t),d2o=r(Mye," \u2014 "),dN=n(Mye,"A",{href:!0});var pot=s(dN);c2o=r(pot,"DPRQuestionEncoder"),pot.forEach(t),f2o=r(Mye," (DPR model)"),Mye.forEach(t),m2o=i($),Ip=n($,"LI",{});var Eye=s(Ip);nle=n(Eye,"STRONG",{});var _ot=s(nle);g2o=r(_ot,"dpt"),_ot.forEach(t),h2o=r(Eye," \u2014 "),cN=n(Eye,"A",{href:!0});var uot=s(cN);p2o=r(uot,"DPTModel"),uot.forEach(t),_2o=r(Eye," (DPT model)"),Eye.forEach(t),u2o=i($),Np=n($,"LI",{});var Cye=s(Np);sle=n(Cye,"STRONG",{});var bot=s(sle);b2o=r(bot,"electra"),bot.forEach(t),v2o=r(Cye," \u2014 "),fN=n(Cye,"A",{href:!0});var vot=s(fN);F2o=r(vot,"ElectraModel"),vot.forEach(t),T2o=r(Cye," (ELECTRA model)"),Cye.forEach(t),M2o=i($),qp=n($,"LI",{});var wye=s(qp);lle=n(wye,"STRONG",{});var Fot=s(lle);E2o=r(Fot,"flaubert"),Fot.forEach(t),C2o=r(wye," \u2014 "),mN=n(wye,"A",{href:!0});var Tot=s(mN);w2o=r(Tot,"FlaubertModel"),Tot.forEach(t),A2o=r(wye," (FlauBERT model)"),wye.forEach(t),y2o=i($),jp=n($,"LI",{});var Aye=s(jp);ile=n(Aye,"STRONG",{});var Mot=s(ile);L2o=r(Mot,"flava"),Mot.forEach(t),x2o=r(Aye," \u2014 "),gN=n(Aye,"A",{href:!0});var Eot=s(gN);$2o=r(Eot,"FlavaModel"),Eot.forEach(t),k2o=r(Aye," (Flava model)"),Aye.forEach(t),S2o=i($),Dp=n($,"LI",{});var yye=s(Dp);dle=n(yye,"STRONG",{});var Cot=s(dle);R2o=r(Cot,"fnet"),Cot.forEach(t),P2o=r(yye," \u2014 "),hN=n(yye,"A",{href:!0});var wot=s(hN);B2o=r(wot,"FNetModel"),wot.forEach(t),I2o=r(yye," (FNet model)"),yye.forEach(t),N2o=i($),Gp=n($,"LI",{});var Lye=s(Gp);cle=n(Lye,"STRONG",{});var Aot=s(cle);q2o=r(Aot,"fsmt"),Aot.forEach(t),j2o=r(Lye," \u2014 "),pN=n(Lye,"A",{href:!0});var yot=s(pN);D2o=r(yot,"FSMTModel"),yot.forEach(t),G2o=r(Lye," (FairSeq Machine-Translation model)"),Lye.forEach(t),O2o=i($),Ps=n($,"LI",{});var W$=s(Ps);fle=n(W$,"STRONG",{});var Lot=s(fle);V2o=r(Lot,"funnel"),Lot.forEach(t),X2o=r(W$," \u2014 "),_N=n(W$,"A",{href:!0});var xot=s(_N);z2o=r(xot,"FunnelModel"),xot.forEach(t),W2o=r(W$," or "),uN=n(W$,"A",{href:!0});var $ot=s(uN);Q2o=r($ot,"FunnelBaseModel"),$ot.forEach(t),H2o=r(W$," (Funnel Transformer model)"),W$.forEach(t),U2o=i($),Op=n($,"LI",{});var xye=s(Op);mle=n(xye,"STRONG",{});var kot=s(mle);J2o=r(kot,"glpn"),kot.forEach(t),Y2o=r(xye," \u2014 "),bN=n(xye,"A",{href:!0});var Sot=s(bN);K2o=r(Sot,"GLPNModel"),Sot.forEach(t),Z2o=r(xye," (GLPN model)"),xye.forEach(t),e1o=i($),Vp=n($,"LI",{});var $ye=s(Vp);gle=n($ye,"STRONG",{});var Rot=s(gle);o1o=r(Rot,"gpt2"),Rot.forEach(t),r1o=r($ye," \u2014 "),vN=n($ye,"A",{href:!0});var Pot=s(vN);t1o=r(Pot,"GPT2Model"),Pot.forEach(t),a1o=r($ye," (OpenAI GPT-2 model)"),$ye.forEach(t),n1o=i($),Xp=n($,"LI",{});var kye=s(Xp);hle=n(kye,"STRONG",{});var Bot=s(hle);s1o=r(Bot,"gpt_neo"),Bot.forEach(t),l1o=r(kye," \u2014 "),FN=n(kye,"A",{href:!0});var Iot=s(FN);i1o=r(Iot,"GPTNeoModel"),Iot.forEach(t),d1o=r(kye," (GPT Neo model)"),kye.forEach(t),c1o=i($),zp=n($,"LI",{});var Sye=s(zp);ple=n(Sye,"STRONG",{});var Not=s(ple);f1o=r(Not,"gpt_neox"),Not.forEach(t),m1o=r(Sye," \u2014 "),TN=n(Sye,"A",{href:!0});var qot=s(TN);g1o=r(qot,"GPTNeoXModel"),qot.forEach(t),h1o=r(Sye," (GPT NeoX model)"),Sye.forEach(t),p1o=i($),Wp=n($,"LI",{});var Rye=s(Wp);_le=n(Rye,"STRONG",{});var jot=s(_le);_1o=r(jot,"gptj"),jot.forEach(t),u1o=r(Rye," \u2014 "),MN=n(Rye,"A",{href:!0});var Dot=s(MN);b1o=r(Dot,"GPTJModel"),Dot.forEach(t),v1o=r(Rye," (GPT-J model)"),Rye.forEach(t),F1o=i($),Qp=n($,"LI",{});var Pye=s(Qp);ule=n(Pye,"STRONG",{});var Got=s(ule);T1o=r(Got,"hubert"),Got.forEach(t),M1o=r(Pye," \u2014 "),EN=n(Pye,"A",{href:!0});var Oot=s(EN);E1o=r(Oot,"HubertModel"),Oot.forEach(t),C1o=r(Pye," (Hubert model)"),Pye.forEach(t),w1o=i($),Hp=n($,"LI",{});var Bye=s(Hp);ble=n(Bye,"STRONG",{});var Vot=s(ble);A1o=r(Vot,"ibert"),Vot.forEach(t),y1o=r(Bye," \u2014 "),CN=n(Bye,"A",{href:!0});var Xot=s(CN);L1o=r(Xot,"IBertModel"),Xot.forEach(t),x1o=r(Bye," (I-BERT model)"),Bye.forEach(t),$1o=i($),Up=n($,"LI",{});var Iye=s(Up);vle=n(Iye,"STRONG",{});var zot=s(vle);k1o=r(zot,"imagegpt"),zot.forEach(t),S1o=r(Iye," \u2014 "),wN=n(Iye,"A",{href:!0});var Wot=s(wN);R1o=r(Wot,"ImageGPTModel"),Wot.forEach(t),P1o=r(Iye," (ImageGPT model)"),Iye.forEach(t),B1o=i($),Jp=n($,"LI",{});var Nye=s(Jp);Fle=n(Nye,"STRONG",{});var Qot=s(Fle);I1o=r(Qot,"layoutlm"),Qot.forEach(t),N1o=r(Nye," \u2014 "),AN=n(Nye,"A",{href:!0});var Hot=s(AN);q1o=r(Hot,"LayoutLMModel"),Hot.forEach(t),j1o=r(Nye," (LayoutLM model)"),Nye.forEach(t),D1o=i($),Yp=n($,"LI",{});var qye=s(Yp);Tle=n(qye,"STRONG",{});var Uot=s(Tle);G1o=r(Uot,"layoutlmv2"),Uot.forEach(t),O1o=r(qye," \u2014 "),yN=n(qye,"A",{href:!0});var Jot=s(yN);V1o=r(Jot,"LayoutLMv2Model"),Jot.forEach(t),X1o=r(qye," (LayoutLMv2 model)"),qye.forEach(t),z1o=i($),Kp=n($,"LI",{});var jye=s(Kp);Mle=n(jye,"STRONG",{});var Yot=s(Mle);W1o=r(Yot,"layoutlmv3"),Yot.forEach(t),Q1o=r(jye," \u2014 "),LN=n(jye,"A",{href:!0});var Kot=s(LN);H1o=r(Kot,"LayoutLMv3Model"),Kot.forEach(t),U1o=r(jye," (LayoutLMv3 model)"),jye.forEach(t),J1o=i($),Zp=n($,"LI",{});var Dye=s(Zp);Ele=n(Dye,"STRONG",{});var Zot=s(Ele);Y1o=r(Zot,"led"),Zot.forEach(t),K1o=r(Dye," \u2014 "),xN=n(Dye,"A",{href:!0});var ert=s(xN);Z1o=r(ert,"LEDModel"),ert.forEach(t),ebo=r(Dye," (LED model)"),Dye.forEach(t),obo=i($),e_=n($,"LI",{});var Gye=s(e_);Cle=n(Gye,"STRONG",{});var ort=s(Cle);rbo=r(ort,"longformer"),ort.forEach(t),tbo=r(Gye," \u2014 "),$N=n(Gye,"A",{href:!0});var rrt=s($N);abo=r(rrt,"LongformerModel"),rrt.forEach(t),nbo=r(Gye," (Longformer model)"),Gye.forEach(t),sbo=i($),o_=n($,"LI",{});var Oye=s(o_);wle=n(Oye,"STRONG",{});var trt=s(wle);lbo=r(trt,"luke"),trt.forEach(t),ibo=r(Oye," \u2014 "),kN=n(Oye,"A",{href:!0});var art=s(kN);dbo=r(art,"LukeModel"),art.forEach(t),cbo=r(Oye," (LUKE model)"),Oye.forEach(t),fbo=i($),r_=n($,"LI",{});var Vye=s(r_);Ale=n(Vye,"STRONG",{});var nrt=s(Ale);mbo=r(nrt,"lxmert"),nrt.forEach(t),gbo=r(Vye," \u2014 "),SN=n(Vye,"A",{href:!0});var srt=s(SN);hbo=r(srt,"LxmertModel"),srt.forEach(t),pbo=r(Vye," (LXMERT model)"),Vye.forEach(t),_bo=i($),t_=n($,"LI",{});var Xye=s(t_);yle=n(Xye,"STRONG",{});var lrt=s(yle);ubo=r(lrt,"m2m_100"),lrt.forEach(t),bbo=r(Xye," \u2014 "),RN=n(Xye,"A",{href:!0});var irt=s(RN);vbo=r(irt,"M2M100Model"),irt.forEach(t),Fbo=r(Xye," (M2M100 model)"),Xye.forEach(t),Tbo=i($),a_=n($,"LI",{});var zye=s(a_);Lle=n(zye,"STRONG",{});var drt=s(Lle);Mbo=r(drt,"marian"),drt.forEach(t),Ebo=r(zye," \u2014 "),PN=n(zye,"A",{href:!0});var crt=s(PN);Cbo=r(crt,"MarianModel"),crt.forEach(t),wbo=r(zye," (Marian model)"),zye.forEach(t),Abo=i($),n_=n($,"LI",{});var Wye=s(n_);xle=n(Wye,"STRONG",{});var frt=s(xle);ybo=r(frt,"maskformer"),frt.forEach(t),Lbo=r(Wye," \u2014 "),BN=n(Wye,"A",{href:!0});var mrt=s(BN);xbo=r(mrt,"MaskFormerModel"),mrt.forEach(t),$bo=r(Wye," (MaskFormer model)"),Wye.forEach(t),kbo=i($),s_=n($,"LI",{});var Qye=s(s_);$le=n(Qye,"STRONG",{});var grt=s($le);Sbo=r(grt,"mbart"),grt.forEach(t),Rbo=r(Qye," \u2014 "),IN=n(Qye,"A",{href:!0});var hrt=s(IN);Pbo=r(hrt,"MBartModel"),hrt.forEach(t),Bbo=r(Qye," (mBART model)"),Qye.forEach(t),Ibo=i($),l_=n($,"LI",{});var Hye=s(l_);kle=n(Hye,"STRONG",{});var prt=s(kle);Nbo=r(prt,"mctct"),prt.forEach(t),qbo=r(Hye," \u2014 "),NN=n(Hye,"A",{href:!0});var _rt=s(NN);jbo=r(_rt,"MCTCTModel"),_rt.forEach(t),Dbo=r(Hye," (MCTCT model)"),Hye.forEach(t),Gbo=i($),i_=n($,"LI",{});var Uye=s(i_);Sle=n(Uye,"STRONG",{});var urt=s(Sle);Obo=r(urt,"megatron-bert"),urt.forEach(t),Vbo=r(Uye," \u2014 "),qN=n(Uye,"A",{href:!0});var brt=s(qN);Xbo=r(brt,"MegatronBertModel"),brt.forEach(t),zbo=r(Uye," (MegatronBert model)"),Uye.forEach(t),Wbo=i($),d_=n($,"LI",{});var Jye=s(d_);Rle=n(Jye,"STRONG",{});var vrt=s(Rle);Qbo=r(vrt,"mobilebert"),vrt.forEach(t),Hbo=r(Jye," \u2014 "),jN=n(Jye,"A",{href:!0});var Frt=s(jN);Ubo=r(Frt,"MobileBertModel"),Frt.forEach(t),Jbo=r(Jye," (MobileBERT model)"),Jye.forEach(t),Ybo=i($),c_=n($,"LI",{});var Yye=s(c_);Ple=n(Yye,"STRONG",{});var Trt=s(Ple);Kbo=r(Trt,"mpnet"),Trt.forEach(t),Zbo=r(Yye," \u2014 "),DN=n(Yye,"A",{href:!0});var Mrt=s(DN);e4o=r(Mrt,"MPNetModel"),Mrt.forEach(t),o4o=r(Yye," (MPNet model)"),Yye.forEach(t),r4o=i($),f_=n($,"LI",{});var Kye=s(f_);Ble=n(Kye,"STRONG",{});var Ert=s(Ble);t4o=r(Ert,"mt5"),Ert.forEach(t),a4o=r(Kye," \u2014 "),GN=n(Kye,"A",{href:!0});var Crt=s(GN);n4o=r(Crt,"MT5Model"),Crt.forEach(t),s4o=r(Kye," (mT5 model)"),Kye.forEach(t),l4o=i($),m_=n($,"LI",{});var Zye=s(m_);Ile=n(Zye,"STRONG",{});var wrt=s(Ile);i4o=r(wrt,"nystromformer"),wrt.forEach(t),d4o=r(Zye," \u2014 "),ON=n(Zye,"A",{href:!0});var Art=s(ON);c4o=r(Art,"NystromformerModel"),Art.forEach(t),f4o=r(Zye," (Nystromformer model)"),Zye.forEach(t),m4o=i($),g_=n($,"LI",{});var eLe=s(g_);Nle=n(eLe,"STRONG",{});var yrt=s(Nle);g4o=r(yrt,"openai-gpt"),yrt.forEach(t),h4o=r(eLe," \u2014 "),VN=n(eLe,"A",{href:!0});var Lrt=s(VN);p4o=r(Lrt,"OpenAIGPTModel"),Lrt.forEach(t),_4o=r(eLe," (OpenAI GPT model)"),eLe.forEach(t),u4o=i($),h_=n($,"LI",{});var oLe=s(h_);qle=n(oLe,"STRONG",{});var xrt=s(qle);b4o=r(xrt,"opt"),xrt.forEach(t),v4o=r(oLe," \u2014 "),XN=n(oLe,"A",{href:!0});var $rt=s(XN);F4o=r($rt,"OPTModel"),$rt.forEach(t),T4o=r(oLe," (OPT model)"),oLe.forEach(t),M4o=i($),p_=n($,"LI",{});var rLe=s(p_);jle=n(rLe,"STRONG",{});var krt=s(jle);E4o=r(krt,"pegasus"),krt.forEach(t),C4o=r(rLe," \u2014 "),zN=n(rLe,"A",{href:!0});var Srt=s(zN);w4o=r(Srt,"PegasusModel"),Srt.forEach(t),A4o=r(rLe," (Pegasus model)"),rLe.forEach(t),y4o=i($),__=n($,"LI",{});var tLe=s(__);Dle=n(tLe,"STRONG",{});var Rrt=s(Dle);L4o=r(Rrt,"perceiver"),Rrt.forEach(t),x4o=r(tLe," \u2014 "),WN=n(tLe,"A",{href:!0});var Prt=s(WN);$4o=r(Prt,"PerceiverModel"),Prt.forEach(t),k4o=r(tLe," (Perceiver model)"),tLe.forEach(t),S4o=i($),u_=n($,"LI",{});var aLe=s(u_);Gle=n(aLe,"STRONG",{});var Brt=s(Gle);R4o=r(Brt,"plbart"),Brt.forEach(t),P4o=r(aLe," \u2014 "),QN=n(aLe,"A",{href:!0});var Irt=s(QN);B4o=r(Irt,"PLBartModel"),Irt.forEach(t),I4o=r(aLe," (PLBart model)"),aLe.forEach(t),N4o=i($),b_=n($,"LI",{});var nLe=s(b_);Ole=n(nLe,"STRONG",{});var Nrt=s(Ole);q4o=r(Nrt,"poolformer"),Nrt.forEach(t),j4o=r(nLe," \u2014 "),HN=n(nLe,"A",{href:!0});var qrt=s(HN);D4o=r(qrt,"PoolFormerModel"),qrt.forEach(t),G4o=r(nLe," (PoolFormer model)"),nLe.forEach(t),O4o=i($),v_=n($,"LI",{});var sLe=s(v_);Vle=n(sLe,"STRONG",{});var jrt=s(Vle);V4o=r(jrt,"prophetnet"),jrt.forEach(t),X4o=r(sLe," \u2014 "),UN=n(sLe,"A",{href:!0});var Drt=s(UN);z4o=r(Drt,"ProphetNetModel"),Drt.forEach(t),W4o=r(sLe," (ProphetNet model)"),sLe.forEach(t),Q4o=i($),F_=n($,"LI",{});var lLe=s(F_);Xle=n(lLe,"STRONG",{});var Grt=s(Xle);H4o=r(Grt,"qdqbert"),Grt.forEach(t),U4o=r(lLe," \u2014 "),JN=n(lLe,"A",{href:!0});var Ort=s(JN);J4o=r(Ort,"QDQBertModel"),Ort.forEach(t),Y4o=r(lLe," (QDQBert model)"),lLe.forEach(t),K4o=i($),T_=n($,"LI",{});var iLe=s(T_);zle=n(iLe,"STRONG",{});var Vrt=s(zle);Z4o=r(Vrt,"reformer"),Vrt.forEach(t),evo=r(iLe," \u2014 "),YN=n(iLe,"A",{href:!0});var Xrt=s(YN);ovo=r(Xrt,"ReformerModel"),Xrt.forEach(t),rvo=r(iLe," (Reformer model)"),iLe.forEach(t),tvo=i($),M_=n($,"LI",{});var dLe=s(M_);Wle=n(dLe,"STRONG",{});var zrt=s(Wle);avo=r(zrt,"regnet"),zrt.forEach(t),nvo=r(dLe," \u2014 "),KN=n(dLe,"A",{href:!0});var Wrt=s(KN);svo=r(Wrt,"RegNetModel"),Wrt.forEach(t),lvo=r(dLe," (RegNet model)"),dLe.forEach(t),ivo=i($),E_=n($,"LI",{});var cLe=s(E_);Qle=n(cLe,"STRONG",{});var Qrt=s(Qle);dvo=r(Qrt,"rembert"),Qrt.forEach(t),cvo=r(cLe," \u2014 "),ZN=n(cLe,"A",{href:!0});var Hrt=s(ZN);fvo=r(Hrt,"RemBertModel"),Hrt.forEach(t),mvo=r(cLe," (RemBERT model)"),cLe.forEach(t),gvo=i($),C_=n($,"LI",{});var fLe=s(C_);Hle=n(fLe,"STRONG",{});var Urt=s(Hle);hvo=r(Urt,"resnet"),Urt.forEach(t),pvo=r(fLe," \u2014 "),eq=n(fLe,"A",{href:!0});var Jrt=s(eq);_vo=r(Jrt,"ResNetModel"),Jrt.forEach(t),uvo=r(fLe," (ResNet model)"),fLe.forEach(t),bvo=i($),w_=n($,"LI",{});var mLe=s(w_);Ule=n(mLe,"STRONG",{});var Yrt=s(Ule);vvo=r(Yrt,"retribert"),Yrt.forEach(t),Fvo=r(mLe," \u2014 "),oq=n(mLe,"A",{href:!0});var Krt=s(oq);Tvo=r(Krt,"RetriBertModel"),Krt.forEach(t),Mvo=r(mLe," (RetriBERT model)"),mLe.forEach(t),Evo=i($),A_=n($,"LI",{});var gLe=s(A_);Jle=n(gLe,"STRONG",{});var Zrt=s(Jle);Cvo=r(Zrt,"roberta"),Zrt.forEach(t),wvo=r(gLe," \u2014 "),rq=n(gLe,"A",{href:!0});var ett=s(rq);Avo=r(ett,"RobertaModel"),ett.forEach(t),yvo=r(gLe," (RoBERTa model)"),gLe.forEach(t),Lvo=i($),y_=n($,"LI",{});var hLe=s(y_);Yle=n(hLe,"STRONG",{});var ott=s(Yle);xvo=r(ott,"roformer"),ott.forEach(t),$vo=r(hLe," \u2014 "),tq=n(hLe,"A",{href:!0});var rtt=s(tq);kvo=r(rtt,"RoFormerModel"),rtt.forEach(t),Svo=r(hLe," (RoFormer model)"),hLe.forEach(t),Rvo=i($),L_=n($,"LI",{});var pLe=s(L_);Kle=n(pLe,"STRONG",{});var ttt=s(Kle);Pvo=r(ttt,"segformer"),ttt.forEach(t),Bvo=r(pLe," \u2014 "),aq=n(pLe,"A",{href:!0});var att=s(aq);Ivo=r(att,"SegformerModel"),att.forEach(t),Nvo=r(pLe," (SegFormer model)"),pLe.forEach(t),qvo=i($),x_=n($,"LI",{});var _Le=s(x_);Zle=n(_Le,"STRONG",{});var ntt=s(Zle);jvo=r(ntt,"sew"),ntt.forEach(t),Dvo=r(_Le," \u2014 "),nq=n(_Le,"A",{href:!0});var stt=s(nq);Gvo=r(stt,"SEWModel"),stt.forEach(t),Ovo=r(_Le," (SEW model)"),_Le.forEach(t),Vvo=i($),$_=n($,"LI",{});var uLe=s($_);eie=n(uLe,"STRONG",{});var ltt=s(eie);Xvo=r(ltt,"sew-d"),ltt.forEach(t),zvo=r(uLe," \u2014 "),sq=n(uLe,"A",{href:!0});var itt=s(sq);Wvo=r(itt,"SEWDModel"),itt.forEach(t),Qvo=r(uLe," (SEW-D model)"),uLe.forEach(t),Hvo=i($),k_=n($,"LI",{});var bLe=s(k_);oie=n(bLe,"STRONG",{});var dtt=s(oie);Uvo=r(dtt,"speech_to_text"),dtt.forEach(t),Jvo=r(bLe," \u2014 "),lq=n(bLe,"A",{href:!0});var ctt=s(lq);Yvo=r(ctt,"Speech2TextModel"),ctt.forEach(t),Kvo=r(bLe," (Speech2Text model)"),bLe.forEach(t),Zvo=i($),S_=n($,"LI",{});var vLe=s(S_);rie=n(vLe,"STRONG",{});var ftt=s(rie);e0o=r(ftt,"splinter"),ftt.forEach(t),o0o=r(vLe," \u2014 "),iq=n(vLe,"A",{href:!0});var mtt=s(iq);r0o=r(mtt,"SplinterModel"),mtt.forEach(t),t0o=r(vLe," (Splinter model)"),vLe.forEach(t),a0o=i($),R_=n($,"LI",{});var FLe=s(R_);tie=n(FLe,"STRONG",{});var gtt=s(tie);n0o=r(gtt,"squeezebert"),gtt.forEach(t),s0o=r(FLe," \u2014 "),dq=n(FLe,"A",{href:!0});var htt=s(dq);l0o=r(htt,"SqueezeBertModel"),htt.forEach(t),i0o=r(FLe," (SqueezeBERT model)"),FLe.forEach(t),d0o=i($),P_=n($,"LI",{});var TLe=s(P_);aie=n(TLe,"STRONG",{});var ptt=s(aie);c0o=r(ptt,"swin"),ptt.forEach(t),f0o=r(TLe," \u2014 "),cq=n(TLe,"A",{href:!0});var _tt=s(cq);m0o=r(_tt,"SwinModel"),_tt.forEach(t),g0o=r(TLe," (Swin model)"),TLe.forEach(t),h0o=i($),B_=n($,"LI",{});var MLe=s(B_);nie=n(MLe,"STRONG",{});var utt=s(nie);p0o=r(utt,"t5"),utt.forEach(t),_0o=r(MLe," \u2014 "),fq=n(MLe,"A",{href:!0});var btt=s(fq);u0o=r(btt,"T5Model"),btt.forEach(t),b0o=r(MLe," (T5 model)"),MLe.forEach(t),v0o=i($),I_=n($,"LI",{});var ELe=s(I_);sie=n(ELe,"STRONG",{});var vtt=s(sie);F0o=r(vtt,"tapas"),vtt.forEach(t),T0o=r(ELe," \u2014 "),mq=n(ELe,"A",{href:!0});var Ftt=s(mq);M0o=r(Ftt,"TapasModel"),Ftt.forEach(t),E0o=r(ELe," (TAPAS model)"),ELe.forEach(t),C0o=i($),N_=n($,"LI",{});var CLe=s(N_);lie=n(CLe,"STRONG",{});var Ttt=s(lie);w0o=r(Ttt,"trajectory_transformer"),Ttt.forEach(t),A0o=r(CLe," \u2014 "),gq=n(CLe,"A",{href:!0});var Mtt=s(gq);y0o=r(Mtt,"TrajectoryTransformerModel"),Mtt.forEach(t),L0o=r(CLe," (Trajectory Transformer model)"),CLe.forEach(t),x0o=i($),q_=n($,"LI",{});var wLe=s(q_);iie=n(wLe,"STRONG",{});var Ett=s(iie);$0o=r(Ett,"transfo-xl"),Ett.forEach(t),k0o=r(wLe," \u2014 "),hq=n(wLe,"A",{href:!0});var Ctt=s(hq);S0o=r(Ctt,"TransfoXLModel"),Ctt.forEach(t),R0o=r(wLe," (Transformer-XL model)"),wLe.forEach(t),P0o=i($),j_=n($,"LI",{});var ALe=s(j_);die=n(ALe,"STRONG",{});var wtt=s(die);B0o=r(wtt,"unispeech"),wtt.forEach(t),I0o=r(ALe," \u2014 "),pq=n(ALe,"A",{href:!0});var Att=s(pq);N0o=r(Att,"UniSpeechModel"),Att.forEach(t),q0o=r(ALe," (UniSpeech model)"),ALe.forEach(t),j0o=i($),D_=n($,"LI",{});var yLe=s(D_);cie=n(yLe,"STRONG",{});var ytt=s(cie);D0o=r(ytt,"unispeech-sat"),ytt.forEach(t),G0o=r(yLe," \u2014 "),_q=n(yLe,"A",{href:!0});var Ltt=s(_q);O0o=r(Ltt,"UniSpeechSatModel"),Ltt.forEach(t),V0o=r(yLe," (UniSpeechSat model)"),yLe.forEach(t),X0o=i($),G_=n($,"LI",{});var LLe=s(G_);fie=n(LLe,"STRONG",{});var xtt=s(fie);z0o=r(xtt,"van"),xtt.forEach(t),W0o=r(LLe," \u2014 "),uq=n(LLe,"A",{href:!0});var $tt=s(uq);Q0o=r($tt,"VanModel"),$tt.forEach(t),H0o=r(LLe," (VAN model)"),LLe.forEach(t),U0o=i($),O_=n($,"LI",{});var xLe=s(O_);mie=n(xLe,"STRONG",{});var ktt=s(mie);J0o=r(ktt,"vilt"),ktt.forEach(t),Y0o=r(xLe," \u2014 "),bq=n(xLe,"A",{href:!0});var Stt=s(bq);K0o=r(Stt,"ViltModel"),Stt.forEach(t),Z0o=r(xLe," (ViLT model)"),xLe.forEach(t),eFo=i($),V_=n($,"LI",{});var $Le=s(V_);gie=n($Le,"STRONG",{});var Rtt=s(gie);oFo=r(Rtt,"vision-text-dual-encoder"),Rtt.forEach(t),rFo=r($Le," \u2014 "),vq=n($Le,"A",{href:!0});var Ptt=s(vq);tFo=r(Ptt,"VisionTextDualEncoderModel"),Ptt.forEach(t),aFo=r($Le," (VisionTextDualEncoder model)"),$Le.forEach(t),nFo=i($),X_=n($,"LI",{});var kLe=s(X_);hie=n(kLe,"STRONG",{});var Btt=s(hie);sFo=r(Btt,"visual_bert"),Btt.forEach(t),lFo=r(kLe," \u2014 "),Fq=n(kLe,"A",{href:!0});var Itt=s(Fq);iFo=r(Itt,"VisualBertModel"),Itt.forEach(t),dFo=r(kLe," (VisualBert model)"),kLe.forEach(t),cFo=i($),z_=n($,"LI",{});var SLe=s(z_);pie=n(SLe,"STRONG",{});var Ntt=s(pie);fFo=r(Ntt,"vit"),Ntt.forEach(t),mFo=r(SLe," \u2014 "),Tq=n(SLe,"A",{href:!0});var qtt=s(Tq);gFo=r(qtt,"ViTModel"),qtt.forEach(t),hFo=r(SLe," (ViT model)"),SLe.forEach(t),pFo=i($),W_=n($,"LI",{});var RLe=s(W_);_ie=n(RLe,"STRONG",{});var jtt=s(_ie);_Fo=r(jtt,"vit_mae"),jtt.forEach(t),uFo=r(RLe," \u2014 "),Mq=n(RLe,"A",{href:!0});var Dtt=s(Mq);bFo=r(Dtt,"ViTMAEModel"),Dtt.forEach(t),vFo=r(RLe," (ViTMAE model)"),RLe.forEach(t),FFo=i($),Q_=n($,"LI",{});var PLe=s(Q_);uie=n(PLe,"STRONG",{});var Gtt=s(uie);TFo=r(Gtt,"wav2vec2"),Gtt.forEach(t),MFo=r(PLe," \u2014 "),Eq=n(PLe,"A",{href:!0});var Ott=s(Eq);EFo=r(Ott,"Wav2Vec2Model"),Ott.forEach(t),CFo=r(PLe," (Wav2Vec2 model)"),PLe.forEach(t),wFo=i($),H_=n($,"LI",{});var BLe=s(H_);bie=n(BLe,"STRONG",{});var Vtt=s(bie);AFo=r(Vtt,"wav2vec2-conformer"),Vtt.forEach(t),yFo=r(BLe," \u2014 "),Cq=n(BLe,"A",{href:!0});var Xtt=s(Cq);LFo=r(Xtt,"Wav2Vec2ConformerModel"),Xtt.forEach(t),xFo=r(BLe," (Wav2Vec2-Conformer model)"),BLe.forEach(t),$Fo=i($),U_=n($,"LI",{});var ILe=s(U_);vie=n(ILe,"STRONG",{});var ztt=s(vie);kFo=r(ztt,"wavlm"),ztt.forEach(t),SFo=r(ILe," \u2014 "),wq=n(ILe,"A",{href:!0});var Wtt=s(wq);RFo=r(Wtt,"WavLMModel"),Wtt.forEach(t),PFo=r(ILe," (WavLM model)"),ILe.forEach(t),BFo=i($),J_=n($,"LI",{});var NLe=s(J_);Fie=n(NLe,"STRONG",{});var Qtt=s(Fie);IFo=r(Qtt,"xglm"),Qtt.forEach(t),NFo=r(NLe," \u2014 "),Aq=n(NLe,"A",{href:!0});var Htt=s(Aq);qFo=r(Htt,"XGLMModel"),Htt.forEach(t),jFo=r(NLe," (XGLM model)"),NLe.forEach(t),DFo=i($),Y_=n($,"LI",{});var qLe=s(Y_);Tie=n(qLe,"STRONG",{});var Utt=s(Tie);GFo=r(Utt,"xlm"),Utt.forEach(t),OFo=r(qLe," \u2014 "),yq=n(qLe,"A",{href:!0});var Jtt=s(yq);VFo=r(Jtt,"XLMModel"),Jtt.forEach(t),XFo=r(qLe," (XLM model)"),qLe.forEach(t),zFo=i($),K_=n($,"LI",{});var jLe=s(K_);Mie=n(jLe,"STRONG",{});var Ytt=s(Mie);WFo=r(Ytt,"xlm-prophetnet"),Ytt.forEach(t),QFo=r(jLe," \u2014 "),Lq=n(jLe,"A",{href:!0});var Ktt=s(Lq);HFo=r(Ktt,"XLMProphetNetModel"),Ktt.forEach(t),UFo=r(jLe," (XLMProphetNet model)"),jLe.forEach(t),JFo=i($),Z_=n($,"LI",{});var DLe=s(Z_);Eie=n(DLe,"STRONG",{});var Ztt=s(Eie);YFo=r(Ztt,"xlm-roberta"),Ztt.forEach(t),KFo=r(DLe," \u2014 "),xq=n(DLe,"A",{href:!0});var eat=s(xq);ZFo=r(eat,"XLMRobertaModel"),eat.forEach(t),e6o=r(DLe," (XLM-RoBERTa model)"),DLe.forEach(t),o6o=i($),eu=n($,"LI",{});var GLe=s(eu);Cie=n(GLe,"STRONG",{});var oat=s(Cie);r6o=r(oat,"xlm-roberta-xl"),oat.forEach(t),t6o=r(GLe," \u2014 "),$q=n(GLe,"A",{href:!0});var rat=s($q);a6o=r(rat,"XLMRobertaXLModel"),rat.forEach(t),n6o=r(GLe," (XLM-RoBERTa-XL model)"),GLe.forEach(t),s6o=i($),ou=n($,"LI",{});var OLe=s(ou);wie=n(OLe,"STRONG",{});var tat=s(wie);l6o=r(tat,"xlnet"),tat.forEach(t),i6o=r(OLe," \u2014 "),kq=n(OLe,"A",{href:!0});var aat=s(kq);d6o=r(aat,"XLNetModel"),aat.forEach(t),c6o=r(OLe," (XLNet model)"),OLe.forEach(t),f6o=i($),ru=n($,"LI",{});var VLe=s(ru);Aie=n(VLe,"STRONG",{});var nat=s(Aie);m6o=r(nat,"yolos"),nat.forEach(t),g6o=r(VLe," \u2014 "),Sq=n(VLe,"A",{href:!0});var sat=s(Sq);h6o=r(sat,"YolosModel"),sat.forEach(t),p6o=r(VLe," (YOLOS model)"),VLe.forEach(t),_6o=i($),tu=n($,"LI",{});var XLe=s(tu);yie=n(XLe,"STRONG",{});var lat=s(yie);u6o=r(lat,"yoso"),lat.forEach(t),b6o=r(XLe," \u2014 "),Rq=n(XLe,"A",{href:!0});var iat=s(Rq);v6o=r(iat,"YosoModel"),iat.forEach(t),F6o=r(XLe," (YOSO model)"),XLe.forEach(t),$.forEach(t),T6o=i(oa),au=n(oa,"P",{});var zLe=s(au);M6o=r(zLe,"The model is set in evaluation mode by default using "),Lie=n(zLe,"CODE",{});var dat=s(Lie);E6o=r(dat,"model.eval()"),dat.forEach(t),C6o=r(zLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xie=n(zLe,"CODE",{});var cat=s(xie);w6o=r(cat,"model.train()"),cat.forEach(t),zLe.forEach(t),A6o=i(oa),T(nu.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),xqe=i(f),Li=n(f,"H2",{class:!0});var RDe=s(Li);su=n(RDe,"A",{id:!0,class:!0,href:!0});var fat=s(su);$ie=n(fat,"SPAN",{});var mat=s($ie);T(iL.$$.fragment,mat),mat.forEach(t),fat.forEach(t),y6o=i(RDe),kie=n(RDe,"SPAN",{});var gat=s(kie);L6o=r(gat,"AutoModelForPreTraining"),gat.forEach(t),RDe.forEach(t),$qe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(dL.$$.fragment,Os),x6o=i(Os),xi=n(Os,"P",{});var wZ=s(xi);$6o=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Pq=n(wZ,"A",{href:!0});var hat=s(Pq);k6o=r(hat,"from_pretrained()"),hat.forEach(t),S6o=r(wZ," class method or the "),Bq=n(wZ,"A",{href:!0});var pat=s(Bq);R6o=r(pat,"from_config()"),pat.forEach(t),P6o=r(wZ,` class
method.`),wZ.forEach(t),B6o=i(Os),cL=n(Os,"P",{});var PDe=s(cL);I6o=r(PDe,"This class cannot be instantiated directly using "),Sie=n(PDe,"CODE",{});var _at=s(Sie);N6o=r(_at,"__init__()"),_at.forEach(t),q6o=r(PDe," (throws an error)."),PDe.forEach(t),j6o=i(Os),at=n(Os,"DIV",{class:!0});var Nw=s(at);T(fL.$$.fragment,Nw),D6o=i(Nw),Rie=n(Nw,"P",{});var uat=s(Rie);G6o=r(uat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uat.forEach(t),O6o=i(Nw),$i=n(Nw,"P",{});var AZ=s($i);V6o=r(AZ,`Note:
Loading a model from its configuration file does `),Pie=n(AZ,"STRONG",{});var bat=s(Pie);X6o=r(bat,"not"),bat.forEach(t),z6o=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iq=n(AZ,"A",{href:!0});var vat=s(Iq);W6o=r(vat,"from_pretrained()"),vat.forEach(t),Q6o=r(AZ," to load the model weights."),AZ.forEach(t),H6o=i(Nw),T(lu.$$.fragment,Nw),Nw.forEach(t),U6o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(mL.$$.fragment,ra),J6o=i(ra),Bie=n(ra,"P",{});var Fat=s(Bie);Y6o=r(Fat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Fat.forEach(t),K6o=i(ra),xa=n(ra,"P",{});var qw=s(xa);Z6o=r(qw,"The model class to instantiate is selected based on the "),Iie=n(qw,"CODE",{});var Tat=s(Iie);eTo=r(Tat,"model_type"),Tat.forEach(t),oTo=r(qw,` property of the config object (either
passed as an argument or loaded from `),Nie=n(qw,"CODE",{});var Mat=s(Nie);rTo=r(Mat,"pretrained_model_name_or_path"),Mat.forEach(t),tTo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=n(qw,"CODE",{});var Eat=s(qie);aTo=r(Eat,"pretrained_model_name_or_path"),Eat.forEach(t),nTo=r(qw,":"),qw.forEach(t),sTo=i(ra),G=n(ra,"UL",{});var O=s(G);iu=n(O,"LI",{});var WLe=s(iu);jie=n(WLe,"STRONG",{});var Cat=s(jie);lTo=r(Cat,"albert"),Cat.forEach(t),iTo=r(WLe," \u2014 "),Nq=n(WLe,"A",{href:!0});var wat=s(Nq);dTo=r(wat,"AlbertForPreTraining"),wat.forEach(t),cTo=r(WLe," (ALBERT model)"),WLe.forEach(t),fTo=i(O),du=n(O,"LI",{});var QLe=s(du);Die=n(QLe,"STRONG",{});var Aat=s(Die);mTo=r(Aat,"bart"),Aat.forEach(t),gTo=r(QLe," \u2014 "),qq=n(QLe,"A",{href:!0});var yat=s(qq);hTo=r(yat,"BartForConditionalGeneration"),yat.forEach(t),pTo=r(QLe," (BART model)"),QLe.forEach(t),_To=i(O),cu=n(O,"LI",{});var HLe=s(cu);Gie=n(HLe,"STRONG",{});var Lat=s(Gie);uTo=r(Lat,"bert"),Lat.forEach(t),bTo=r(HLe," \u2014 "),jq=n(HLe,"A",{href:!0});var xat=s(jq);vTo=r(xat,"BertForPreTraining"),xat.forEach(t),FTo=r(HLe," (BERT model)"),HLe.forEach(t),TTo=i(O),fu=n(O,"LI",{});var ULe=s(fu);Oie=n(ULe,"STRONG",{});var $at=s(Oie);MTo=r($at,"big_bird"),$at.forEach(t),ETo=r(ULe," \u2014 "),Dq=n(ULe,"A",{href:!0});var kat=s(Dq);CTo=r(kat,"BigBirdForPreTraining"),kat.forEach(t),wTo=r(ULe," (BigBird model)"),ULe.forEach(t),ATo=i(O),mu=n(O,"LI",{});var JLe=s(mu);Vie=n(JLe,"STRONG",{});var Sat=s(Vie);yTo=r(Sat,"camembert"),Sat.forEach(t),LTo=r(JLe," \u2014 "),Gq=n(JLe,"A",{href:!0});var Rat=s(Gq);xTo=r(Rat,"CamembertForMaskedLM"),Rat.forEach(t),$To=r(JLe," (CamemBERT model)"),JLe.forEach(t),kTo=i(O),gu=n(O,"LI",{});var YLe=s(gu);Xie=n(YLe,"STRONG",{});var Pat=s(Xie);STo=r(Pat,"ctrl"),Pat.forEach(t),RTo=r(YLe," \u2014 "),Oq=n(YLe,"A",{href:!0});var Bat=s(Oq);PTo=r(Bat,"CTRLLMHeadModel"),Bat.forEach(t),BTo=r(YLe," (CTRL model)"),YLe.forEach(t),ITo=i(O),hu=n(O,"LI",{});var KLe=s(hu);zie=n(KLe,"STRONG",{});var Iat=s(zie);NTo=r(Iat,"data2vec-text"),Iat.forEach(t),qTo=r(KLe," \u2014 "),Vq=n(KLe,"A",{href:!0});var Nat=s(Vq);jTo=r(Nat,"Data2VecTextForMaskedLM"),Nat.forEach(t),DTo=r(KLe," (Data2VecText model)"),KLe.forEach(t),GTo=i(O),pu=n(O,"LI",{});var ZLe=s(pu);Wie=n(ZLe,"STRONG",{});var qat=s(Wie);OTo=r(qat,"deberta"),qat.forEach(t),VTo=r(ZLe," \u2014 "),Xq=n(ZLe,"A",{href:!0});var jat=s(Xq);XTo=r(jat,"DebertaForMaskedLM"),jat.forEach(t),zTo=r(ZLe," (DeBERTa model)"),ZLe.forEach(t),WTo=i(O),_u=n(O,"LI",{});var e8e=s(_u);Qie=n(e8e,"STRONG",{});var Dat=s(Qie);QTo=r(Dat,"deberta-v2"),Dat.forEach(t),HTo=r(e8e," \u2014 "),zq=n(e8e,"A",{href:!0});var Gat=s(zq);UTo=r(Gat,"DebertaV2ForMaskedLM"),Gat.forEach(t),JTo=r(e8e," (DeBERTa-v2 model)"),e8e.forEach(t),YTo=i(O),uu=n(O,"LI",{});var o8e=s(uu);Hie=n(o8e,"STRONG",{});var Oat=s(Hie);KTo=r(Oat,"distilbert"),Oat.forEach(t),ZTo=r(o8e," \u2014 "),Wq=n(o8e,"A",{href:!0});var Vat=s(Wq);eMo=r(Vat,"DistilBertForMaskedLM"),Vat.forEach(t),oMo=r(o8e," (DistilBERT model)"),o8e.forEach(t),rMo=i(O),bu=n(O,"LI",{});var r8e=s(bu);Uie=n(r8e,"STRONG",{});var Xat=s(Uie);tMo=r(Xat,"electra"),Xat.forEach(t),aMo=r(r8e," \u2014 "),Qq=n(r8e,"A",{href:!0});var zat=s(Qq);nMo=r(zat,"ElectraForPreTraining"),zat.forEach(t),sMo=r(r8e," (ELECTRA model)"),r8e.forEach(t),lMo=i(O),vu=n(O,"LI",{});var t8e=s(vu);Jie=n(t8e,"STRONG",{});var Wat=s(Jie);iMo=r(Wat,"flaubert"),Wat.forEach(t),dMo=r(t8e," \u2014 "),Hq=n(t8e,"A",{href:!0});var Qat=s(Hq);cMo=r(Qat,"FlaubertWithLMHeadModel"),Qat.forEach(t),fMo=r(t8e," (FlauBERT model)"),t8e.forEach(t),mMo=i(O),Fu=n(O,"LI",{});var a8e=s(Fu);Yie=n(a8e,"STRONG",{});var Hat=s(Yie);gMo=r(Hat,"flava"),Hat.forEach(t),hMo=r(a8e," \u2014 "),Uq=n(a8e,"A",{href:!0});var Uat=s(Uq);pMo=r(Uat,"FlavaForPreTraining"),Uat.forEach(t),_Mo=r(a8e," (Flava model)"),a8e.forEach(t),uMo=i(O),Tu=n(O,"LI",{});var n8e=s(Tu);Kie=n(n8e,"STRONG",{});var Jat=s(Kie);bMo=r(Jat,"fnet"),Jat.forEach(t),vMo=r(n8e," \u2014 "),Jq=n(n8e,"A",{href:!0});var Yat=s(Jq);FMo=r(Yat,"FNetForPreTraining"),Yat.forEach(t),TMo=r(n8e," (FNet model)"),n8e.forEach(t),MMo=i(O),Mu=n(O,"LI",{});var s8e=s(Mu);Zie=n(s8e,"STRONG",{});var Kat=s(Zie);EMo=r(Kat,"fsmt"),Kat.forEach(t),CMo=r(s8e," \u2014 "),Yq=n(s8e,"A",{href:!0});var Zat=s(Yq);wMo=r(Zat,"FSMTForConditionalGeneration"),Zat.forEach(t),AMo=r(s8e," (FairSeq Machine-Translation model)"),s8e.forEach(t),yMo=i(O),Eu=n(O,"LI",{});var l8e=s(Eu);ede=n(l8e,"STRONG",{});var ent=s(ede);LMo=r(ent,"funnel"),ent.forEach(t),xMo=r(l8e," \u2014 "),Kq=n(l8e,"A",{href:!0});var ont=s(Kq);$Mo=r(ont,"FunnelForPreTraining"),ont.forEach(t),kMo=r(l8e," (Funnel Transformer model)"),l8e.forEach(t),SMo=i(O),Cu=n(O,"LI",{});var i8e=s(Cu);ode=n(i8e,"STRONG",{});var rnt=s(ode);RMo=r(rnt,"gpt2"),rnt.forEach(t),PMo=r(i8e," \u2014 "),Zq=n(i8e,"A",{href:!0});var tnt=s(Zq);BMo=r(tnt,"GPT2LMHeadModel"),tnt.forEach(t),IMo=r(i8e," (OpenAI GPT-2 model)"),i8e.forEach(t),NMo=i(O),wu=n(O,"LI",{});var d8e=s(wu);rde=n(d8e,"STRONG",{});var ant=s(rde);qMo=r(ant,"ibert"),ant.forEach(t),jMo=r(d8e," \u2014 "),ej=n(d8e,"A",{href:!0});var nnt=s(ej);DMo=r(nnt,"IBertForMaskedLM"),nnt.forEach(t),GMo=r(d8e," (I-BERT model)"),d8e.forEach(t),OMo=i(O),Au=n(O,"LI",{});var c8e=s(Au);tde=n(c8e,"STRONG",{});var snt=s(tde);VMo=r(snt,"layoutlm"),snt.forEach(t),XMo=r(c8e," \u2014 "),oj=n(c8e,"A",{href:!0});var lnt=s(oj);zMo=r(lnt,"LayoutLMForMaskedLM"),lnt.forEach(t),WMo=r(c8e," (LayoutLM model)"),c8e.forEach(t),QMo=i(O),yu=n(O,"LI",{});var f8e=s(yu);ade=n(f8e,"STRONG",{});var int=s(ade);HMo=r(int,"longformer"),int.forEach(t),UMo=r(f8e," \u2014 "),rj=n(f8e,"A",{href:!0});var dnt=s(rj);JMo=r(dnt,"LongformerForMaskedLM"),dnt.forEach(t),YMo=r(f8e," (Longformer model)"),f8e.forEach(t),KMo=i(O),Lu=n(O,"LI",{});var m8e=s(Lu);nde=n(m8e,"STRONG",{});var cnt=s(nde);ZMo=r(cnt,"lxmert"),cnt.forEach(t),eEo=r(m8e," \u2014 "),tj=n(m8e,"A",{href:!0});var fnt=s(tj);oEo=r(fnt,"LxmertForPreTraining"),fnt.forEach(t),rEo=r(m8e," (LXMERT model)"),m8e.forEach(t),tEo=i(O),xu=n(O,"LI",{});var g8e=s(xu);sde=n(g8e,"STRONG",{});var mnt=s(sde);aEo=r(mnt,"megatron-bert"),mnt.forEach(t),nEo=r(g8e," \u2014 "),aj=n(g8e,"A",{href:!0});var gnt=s(aj);sEo=r(gnt,"MegatronBertForPreTraining"),gnt.forEach(t),lEo=r(g8e," (MegatronBert model)"),g8e.forEach(t),iEo=i(O),$u=n(O,"LI",{});var h8e=s($u);lde=n(h8e,"STRONG",{});var hnt=s(lde);dEo=r(hnt,"mobilebert"),hnt.forEach(t),cEo=r(h8e," \u2014 "),nj=n(h8e,"A",{href:!0});var pnt=s(nj);fEo=r(pnt,"MobileBertForPreTraining"),pnt.forEach(t),mEo=r(h8e," (MobileBERT model)"),h8e.forEach(t),gEo=i(O),ku=n(O,"LI",{});var p8e=s(ku);ide=n(p8e,"STRONG",{});var _nt=s(ide);hEo=r(_nt,"mpnet"),_nt.forEach(t),pEo=r(p8e," \u2014 "),sj=n(p8e,"A",{href:!0});var unt=s(sj);_Eo=r(unt,"MPNetForMaskedLM"),unt.forEach(t),uEo=r(p8e," (MPNet model)"),p8e.forEach(t),bEo=i(O),Su=n(O,"LI",{});var _8e=s(Su);dde=n(_8e,"STRONG",{});var bnt=s(dde);vEo=r(bnt,"openai-gpt"),bnt.forEach(t),FEo=r(_8e," \u2014 "),lj=n(_8e,"A",{href:!0});var vnt=s(lj);TEo=r(vnt,"OpenAIGPTLMHeadModel"),vnt.forEach(t),MEo=r(_8e," (OpenAI GPT model)"),_8e.forEach(t),EEo=i(O),Ru=n(O,"LI",{});var u8e=s(Ru);cde=n(u8e,"STRONG",{});var Fnt=s(cde);CEo=r(Fnt,"retribert"),Fnt.forEach(t),wEo=r(u8e," \u2014 "),ij=n(u8e,"A",{href:!0});var Tnt=s(ij);AEo=r(Tnt,"RetriBertModel"),Tnt.forEach(t),yEo=r(u8e," (RetriBERT model)"),u8e.forEach(t),LEo=i(O),Pu=n(O,"LI",{});var b8e=s(Pu);fde=n(b8e,"STRONG",{});var Mnt=s(fde);xEo=r(Mnt,"roberta"),Mnt.forEach(t),$Eo=r(b8e," \u2014 "),dj=n(b8e,"A",{href:!0});var Ent=s(dj);kEo=r(Ent,"RobertaForMaskedLM"),Ent.forEach(t),SEo=r(b8e," (RoBERTa model)"),b8e.forEach(t),REo=i(O),Bu=n(O,"LI",{});var v8e=s(Bu);mde=n(v8e,"STRONG",{});var Cnt=s(mde);PEo=r(Cnt,"splinter"),Cnt.forEach(t),BEo=r(v8e," \u2014 "),cj=n(v8e,"A",{href:!0});var wnt=s(cj);IEo=r(wnt,"SplinterForPreTraining"),wnt.forEach(t),NEo=r(v8e," (Splinter model)"),v8e.forEach(t),qEo=i(O),Iu=n(O,"LI",{});var F8e=s(Iu);gde=n(F8e,"STRONG",{});var Ant=s(gde);jEo=r(Ant,"squeezebert"),Ant.forEach(t),DEo=r(F8e," \u2014 "),fj=n(F8e,"A",{href:!0});var ynt=s(fj);GEo=r(ynt,"SqueezeBertForMaskedLM"),ynt.forEach(t),OEo=r(F8e," (SqueezeBERT model)"),F8e.forEach(t),VEo=i(O),Nu=n(O,"LI",{});var T8e=s(Nu);hde=n(T8e,"STRONG",{});var Lnt=s(hde);XEo=r(Lnt,"t5"),Lnt.forEach(t),zEo=r(T8e," \u2014 "),mj=n(T8e,"A",{href:!0});var xnt=s(mj);WEo=r(xnt,"T5ForConditionalGeneration"),xnt.forEach(t),QEo=r(T8e," (T5 model)"),T8e.forEach(t),HEo=i(O),qu=n(O,"LI",{});var M8e=s(qu);pde=n(M8e,"STRONG",{});var $nt=s(pde);UEo=r($nt,"tapas"),$nt.forEach(t),JEo=r(M8e," \u2014 "),gj=n(M8e,"A",{href:!0});var knt=s(gj);YEo=r(knt,"TapasForMaskedLM"),knt.forEach(t),KEo=r(M8e," (TAPAS model)"),M8e.forEach(t),ZEo=i(O),ju=n(O,"LI",{});var E8e=s(ju);_de=n(E8e,"STRONG",{});var Snt=s(_de);eCo=r(Snt,"transfo-xl"),Snt.forEach(t),oCo=r(E8e," \u2014 "),hj=n(E8e,"A",{href:!0});var Rnt=s(hj);rCo=r(Rnt,"TransfoXLLMHeadModel"),Rnt.forEach(t),tCo=r(E8e," (Transformer-XL model)"),E8e.forEach(t),aCo=i(O),Du=n(O,"LI",{});var C8e=s(Du);ude=n(C8e,"STRONG",{});var Pnt=s(ude);nCo=r(Pnt,"unispeech"),Pnt.forEach(t),sCo=r(C8e," \u2014 "),pj=n(C8e,"A",{href:!0});var Bnt=s(pj);lCo=r(Bnt,"UniSpeechForPreTraining"),Bnt.forEach(t),iCo=r(C8e," (UniSpeech model)"),C8e.forEach(t),dCo=i(O),Gu=n(O,"LI",{});var w8e=s(Gu);bde=n(w8e,"STRONG",{});var Int=s(bde);cCo=r(Int,"unispeech-sat"),Int.forEach(t),fCo=r(w8e," \u2014 "),_j=n(w8e,"A",{href:!0});var Nnt=s(_j);mCo=r(Nnt,"UniSpeechSatForPreTraining"),Nnt.forEach(t),gCo=r(w8e," (UniSpeechSat model)"),w8e.forEach(t),hCo=i(O),Ou=n(O,"LI",{});var A8e=s(Ou);vde=n(A8e,"STRONG",{});var qnt=s(vde);pCo=r(qnt,"visual_bert"),qnt.forEach(t),_Co=r(A8e," \u2014 "),uj=n(A8e,"A",{href:!0});var jnt=s(uj);uCo=r(jnt,"VisualBertForPreTraining"),jnt.forEach(t),bCo=r(A8e," (VisualBert model)"),A8e.forEach(t),vCo=i(O),Vu=n(O,"LI",{});var y8e=s(Vu);Fde=n(y8e,"STRONG",{});var Dnt=s(Fde);FCo=r(Dnt,"vit_mae"),Dnt.forEach(t),TCo=r(y8e," \u2014 "),bj=n(y8e,"A",{href:!0});var Gnt=s(bj);MCo=r(Gnt,"ViTMAEForPreTraining"),Gnt.forEach(t),ECo=r(y8e," (ViTMAE model)"),y8e.forEach(t),CCo=i(O),Xu=n(O,"LI",{});var L8e=s(Xu);Tde=n(L8e,"STRONG",{});var Ont=s(Tde);wCo=r(Ont,"wav2vec2"),Ont.forEach(t),ACo=r(L8e," \u2014 "),vj=n(L8e,"A",{href:!0});var Vnt=s(vj);yCo=r(Vnt,"Wav2Vec2ForPreTraining"),Vnt.forEach(t),LCo=r(L8e," (Wav2Vec2 model)"),L8e.forEach(t),xCo=i(O),zu=n(O,"LI",{});var x8e=s(zu);Mde=n(x8e,"STRONG",{});var Xnt=s(Mde);$Co=r(Xnt,"wav2vec2-conformer"),Xnt.forEach(t),kCo=r(x8e," \u2014 "),Fj=n(x8e,"A",{href:!0});var znt=s(Fj);SCo=r(znt,"Wav2Vec2ConformerForPreTraining"),znt.forEach(t),RCo=r(x8e," (Wav2Vec2-Conformer model)"),x8e.forEach(t),PCo=i(O),Wu=n(O,"LI",{});var $8e=s(Wu);Ede=n($8e,"STRONG",{});var Wnt=s(Ede);BCo=r(Wnt,"xlm"),Wnt.forEach(t),ICo=r($8e," \u2014 "),Tj=n($8e,"A",{href:!0});var Qnt=s(Tj);NCo=r(Qnt,"XLMWithLMHeadModel"),Qnt.forEach(t),qCo=r($8e," (XLM model)"),$8e.forEach(t),jCo=i(O),Qu=n(O,"LI",{});var k8e=s(Qu);Cde=n(k8e,"STRONG",{});var Hnt=s(Cde);DCo=r(Hnt,"xlm-roberta"),Hnt.forEach(t),GCo=r(k8e," \u2014 "),Mj=n(k8e,"A",{href:!0});var Unt=s(Mj);OCo=r(Unt,"XLMRobertaForMaskedLM"),Unt.forEach(t),VCo=r(k8e," (XLM-RoBERTa model)"),k8e.forEach(t),XCo=i(O),Hu=n(O,"LI",{});var S8e=s(Hu);wde=n(S8e,"STRONG",{});var Jnt=s(wde);zCo=r(Jnt,"xlm-roberta-xl"),Jnt.forEach(t),WCo=r(S8e," \u2014 "),Ej=n(S8e,"A",{href:!0});var Ynt=s(Ej);QCo=r(Ynt,"XLMRobertaXLForMaskedLM"),Ynt.forEach(t),HCo=r(S8e," (XLM-RoBERTa-XL model)"),S8e.forEach(t),UCo=i(O),Uu=n(O,"LI",{});var R8e=s(Uu);Ade=n(R8e,"STRONG",{});var Knt=s(Ade);JCo=r(Knt,"xlnet"),Knt.forEach(t),YCo=r(R8e," \u2014 "),Cj=n(R8e,"A",{href:!0});var Znt=s(Cj);KCo=r(Znt,"XLNetLMHeadModel"),Znt.forEach(t),ZCo=r(R8e," (XLNet model)"),R8e.forEach(t),O.forEach(t),e5o=i(ra),Ju=n(ra,"P",{});var P8e=s(Ju);o5o=r(P8e,"The model is set in evaluation mode by default using "),yde=n(P8e,"CODE",{});var est=s(yde);r5o=r(est,"model.eval()"),est.forEach(t),t5o=r(P8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lde=n(P8e,"CODE",{});var ost=s(Lde);a5o=r(ost,"model.train()"),ost.forEach(t),P8e.forEach(t),n5o=i(ra),T(Yu.$$.fragment,ra),ra.forEach(t),Os.forEach(t),kqe=i(f),ki=n(f,"H2",{class:!0});var BDe=s(ki);Ku=n(BDe,"A",{id:!0,class:!0,href:!0});var rst=s(Ku);xde=n(rst,"SPAN",{});var tst=s(xde);T(gL.$$.fragment,tst),tst.forEach(t),rst.forEach(t),s5o=i(BDe),$de=n(BDe,"SPAN",{});var ast=s($de);l5o=r(ast,"AutoModelForCausalLM"),ast.forEach(t),BDe.forEach(t),Sqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(hL.$$.fragment,Vs),i5o=i(Vs),Si=n(Vs,"P",{});var yZ=s(Si);d5o=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wj=n(yZ,"A",{href:!0});var nst=s(wj);c5o=r(nst,"from_pretrained()"),nst.forEach(t),f5o=r(yZ," class method or the "),Aj=n(yZ,"A",{href:!0});var sst=s(Aj);m5o=r(sst,"from_config()"),sst.forEach(t),g5o=r(yZ,` class
method.`),yZ.forEach(t),h5o=i(Vs),pL=n(Vs,"P",{});var IDe=s(pL);p5o=r(IDe,"This class cannot be instantiated directly using "),kde=n(IDe,"CODE",{});var lst=s(kde);_5o=r(lst,"__init__()"),lst.forEach(t),u5o=r(IDe," (throws an error)."),IDe.forEach(t),b5o=i(Vs),nt=n(Vs,"DIV",{class:!0});var jw=s(nt);T(_L.$$.fragment,jw),v5o=i(jw),Sde=n(jw,"P",{});var ist=s(Sde);F5o=r(ist,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ist.forEach(t),T5o=i(jw),Ri=n(jw,"P",{});var LZ=s(Ri);M5o=r(LZ,`Note:
Loading a model from its configuration file does `),Rde=n(LZ,"STRONG",{});var dst=s(Rde);E5o=r(dst,"not"),dst.forEach(t),C5o=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yj=n(LZ,"A",{href:!0});var cst=s(yj);w5o=r(cst,"from_pretrained()"),cst.forEach(t),A5o=r(LZ," to load the model weights."),LZ.forEach(t),y5o=i(jw),T(Zu.$$.fragment,jw),jw.forEach(t),L5o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(uL.$$.fragment,ta),x5o=i(ta),Pde=n(ta,"P",{});var fst=s(Pde);$5o=r(fst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fst.forEach(t),k5o=i(ta),$a=n(ta,"P",{});var Dw=s($a);S5o=r(Dw,"The model class to instantiate is selected based on the "),Bde=n(Dw,"CODE",{});var mst=s(Bde);R5o=r(mst,"model_type"),mst.forEach(t),P5o=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Ide=n(Dw,"CODE",{});var gst=s(Ide);B5o=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),I5o=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nde=n(Dw,"CODE",{});var hst=s(Nde);N5o=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),q5o=r(Dw,":"),Dw.forEach(t),j5o=i(ta),z=n(ta,"UL",{});var W=s(z);e2=n(W,"LI",{});var B8e=s(e2);qde=n(B8e,"STRONG",{});var pst=s(qde);D5o=r(pst,"bart"),pst.forEach(t),G5o=r(B8e," \u2014 "),Lj=n(B8e,"A",{href:!0});var _st=s(Lj);O5o=r(_st,"BartForCausalLM"),_st.forEach(t),V5o=r(B8e," (BART model)"),B8e.forEach(t),X5o=i(W),o2=n(W,"LI",{});var I8e=s(o2);jde=n(I8e,"STRONG",{});var ust=s(jde);z5o=r(ust,"bert"),ust.forEach(t),W5o=r(I8e," \u2014 "),xj=n(I8e,"A",{href:!0});var bst=s(xj);Q5o=r(bst,"BertLMHeadModel"),bst.forEach(t),H5o=r(I8e," (BERT model)"),I8e.forEach(t),U5o=i(W),r2=n(W,"LI",{});var N8e=s(r2);Dde=n(N8e,"STRONG",{});var vst=s(Dde);J5o=r(vst,"bert-generation"),vst.forEach(t),Y5o=r(N8e," \u2014 "),$j=n(N8e,"A",{href:!0});var Fst=s($j);K5o=r(Fst,"BertGenerationDecoder"),Fst.forEach(t),Z5o=r(N8e," (Bert Generation model)"),N8e.forEach(t),e3o=i(W),t2=n(W,"LI",{});var q8e=s(t2);Gde=n(q8e,"STRONG",{});var Tst=s(Gde);o3o=r(Tst,"big_bird"),Tst.forEach(t),r3o=r(q8e," \u2014 "),kj=n(q8e,"A",{href:!0});var Mst=s(kj);t3o=r(Mst,"BigBirdForCausalLM"),Mst.forEach(t),a3o=r(q8e," (BigBird model)"),q8e.forEach(t),n3o=i(W),a2=n(W,"LI",{});var j8e=s(a2);Ode=n(j8e,"STRONG",{});var Est=s(Ode);s3o=r(Est,"bigbird_pegasus"),Est.forEach(t),l3o=r(j8e," \u2014 "),Sj=n(j8e,"A",{href:!0});var Cst=s(Sj);i3o=r(Cst,"BigBirdPegasusForCausalLM"),Cst.forEach(t),d3o=r(j8e," (BigBirdPegasus model)"),j8e.forEach(t),c3o=i(W),n2=n(W,"LI",{});var D8e=s(n2);Vde=n(D8e,"STRONG",{});var wst=s(Vde);f3o=r(wst,"blenderbot"),wst.forEach(t),m3o=r(D8e," \u2014 "),Rj=n(D8e,"A",{href:!0});var Ast=s(Rj);g3o=r(Ast,"BlenderbotForCausalLM"),Ast.forEach(t),h3o=r(D8e," (Blenderbot model)"),D8e.forEach(t),p3o=i(W),s2=n(W,"LI",{});var G8e=s(s2);Xde=n(G8e,"STRONG",{});var yst=s(Xde);_3o=r(yst,"blenderbot-small"),yst.forEach(t),u3o=r(G8e," \u2014 "),Pj=n(G8e,"A",{href:!0});var Lst=s(Pj);b3o=r(Lst,"BlenderbotSmallForCausalLM"),Lst.forEach(t),v3o=r(G8e," (BlenderbotSmall model)"),G8e.forEach(t),F3o=i(W),l2=n(W,"LI",{});var O8e=s(l2);zde=n(O8e,"STRONG",{});var xst=s(zde);T3o=r(xst,"camembert"),xst.forEach(t),M3o=r(O8e," \u2014 "),Bj=n(O8e,"A",{href:!0});var $st=s(Bj);E3o=r($st,"CamembertForCausalLM"),$st.forEach(t),C3o=r(O8e," (CamemBERT model)"),O8e.forEach(t),w3o=i(W),i2=n(W,"LI",{});var V8e=s(i2);Wde=n(V8e,"STRONG",{});var kst=s(Wde);A3o=r(kst,"ctrl"),kst.forEach(t),y3o=r(V8e," \u2014 "),Ij=n(V8e,"A",{href:!0});var Sst=s(Ij);L3o=r(Sst,"CTRLLMHeadModel"),Sst.forEach(t),x3o=r(V8e," (CTRL model)"),V8e.forEach(t),$3o=i(W),d2=n(W,"LI",{});var X8e=s(d2);Qde=n(X8e,"STRONG",{});var Rst=s(Qde);k3o=r(Rst,"data2vec-text"),Rst.forEach(t),S3o=r(X8e," \u2014 "),Nj=n(X8e,"A",{href:!0});var Pst=s(Nj);R3o=r(Pst,"Data2VecTextForCausalLM"),Pst.forEach(t),P3o=r(X8e," (Data2VecText model)"),X8e.forEach(t),B3o=i(W),c2=n(W,"LI",{});var z8e=s(c2);Hde=n(z8e,"STRONG",{});var Bst=s(Hde);I3o=r(Bst,"electra"),Bst.forEach(t),N3o=r(z8e," \u2014 "),qj=n(z8e,"A",{href:!0});var Ist=s(qj);q3o=r(Ist,"ElectraForCausalLM"),Ist.forEach(t),j3o=r(z8e," (ELECTRA model)"),z8e.forEach(t),D3o=i(W),f2=n(W,"LI",{});var W8e=s(f2);Ude=n(W8e,"STRONG",{});var Nst=s(Ude);G3o=r(Nst,"gpt2"),Nst.forEach(t),O3o=r(W8e," \u2014 "),jj=n(W8e,"A",{href:!0});var qst=s(jj);V3o=r(qst,"GPT2LMHeadModel"),qst.forEach(t),X3o=r(W8e," (OpenAI GPT-2 model)"),W8e.forEach(t),z3o=i(W),m2=n(W,"LI",{});var Q8e=s(m2);Jde=n(Q8e,"STRONG",{});var jst=s(Jde);W3o=r(jst,"gpt_neo"),jst.forEach(t),Q3o=r(Q8e," \u2014 "),Dj=n(Q8e,"A",{href:!0});var Dst=s(Dj);H3o=r(Dst,"GPTNeoForCausalLM"),Dst.forEach(t),U3o=r(Q8e," (GPT Neo model)"),Q8e.forEach(t),J3o=i(W),g2=n(W,"LI",{});var H8e=s(g2);Yde=n(H8e,"STRONG",{});var Gst=s(Yde);Y3o=r(Gst,"gpt_neox"),Gst.forEach(t),K3o=r(H8e," \u2014 "),Gj=n(H8e,"A",{href:!0});var Ost=s(Gj);Z3o=r(Ost,"GPTNeoXForCausalLM"),Ost.forEach(t),ewo=r(H8e," (GPT NeoX model)"),H8e.forEach(t),owo=i(W),h2=n(W,"LI",{});var U8e=s(h2);Kde=n(U8e,"STRONG",{});var Vst=s(Kde);rwo=r(Vst,"gptj"),Vst.forEach(t),two=r(U8e," \u2014 "),Oj=n(U8e,"A",{href:!0});var Xst=s(Oj);awo=r(Xst,"GPTJForCausalLM"),Xst.forEach(t),nwo=r(U8e," (GPT-J model)"),U8e.forEach(t),swo=i(W),p2=n(W,"LI",{});var J8e=s(p2);Zde=n(J8e,"STRONG",{});var zst=s(Zde);lwo=r(zst,"marian"),zst.forEach(t),iwo=r(J8e," \u2014 "),Vj=n(J8e,"A",{href:!0});var Wst=s(Vj);dwo=r(Wst,"MarianForCausalLM"),Wst.forEach(t),cwo=r(J8e," (Marian model)"),J8e.forEach(t),fwo=i(W),_2=n(W,"LI",{});var Y8e=s(_2);ece=n(Y8e,"STRONG",{});var Qst=s(ece);mwo=r(Qst,"mbart"),Qst.forEach(t),gwo=r(Y8e," \u2014 "),Xj=n(Y8e,"A",{href:!0});var Hst=s(Xj);hwo=r(Hst,"MBartForCausalLM"),Hst.forEach(t),pwo=r(Y8e," (mBART model)"),Y8e.forEach(t),_wo=i(W),u2=n(W,"LI",{});var K8e=s(u2);oce=n(K8e,"STRONG",{});var Ust=s(oce);uwo=r(Ust,"megatron-bert"),Ust.forEach(t),bwo=r(K8e," \u2014 "),zj=n(K8e,"A",{href:!0});var Jst=s(zj);vwo=r(Jst,"MegatronBertForCausalLM"),Jst.forEach(t),Fwo=r(K8e," (MegatronBert model)"),K8e.forEach(t),Two=i(W),b2=n(W,"LI",{});var Z8e=s(b2);rce=n(Z8e,"STRONG",{});var Yst=s(rce);Mwo=r(Yst,"openai-gpt"),Yst.forEach(t),Ewo=r(Z8e," \u2014 "),Wj=n(Z8e,"A",{href:!0});var Kst=s(Wj);Cwo=r(Kst,"OpenAIGPTLMHeadModel"),Kst.forEach(t),wwo=r(Z8e," (OpenAI GPT model)"),Z8e.forEach(t),Awo=i(W),v2=n(W,"LI",{});var e7e=s(v2);tce=n(e7e,"STRONG",{});var Zst=s(tce);ywo=r(Zst,"opt"),Zst.forEach(t),Lwo=r(e7e," \u2014 "),Qj=n(e7e,"A",{href:!0});var elt=s(Qj);xwo=r(elt,"OPTForCausalLM"),elt.forEach(t),$wo=r(e7e," (OPT model)"),e7e.forEach(t),kwo=i(W),F2=n(W,"LI",{});var o7e=s(F2);ace=n(o7e,"STRONG",{});var olt=s(ace);Swo=r(olt,"pegasus"),olt.forEach(t),Rwo=r(o7e," \u2014 "),Hj=n(o7e,"A",{href:!0});var rlt=s(Hj);Pwo=r(rlt,"PegasusForCausalLM"),rlt.forEach(t),Bwo=r(o7e," (Pegasus model)"),o7e.forEach(t),Iwo=i(W),T2=n(W,"LI",{});var r7e=s(T2);nce=n(r7e,"STRONG",{});var tlt=s(nce);Nwo=r(tlt,"plbart"),tlt.forEach(t),qwo=r(r7e," \u2014 "),Uj=n(r7e,"A",{href:!0});var alt=s(Uj);jwo=r(alt,"PLBartForCausalLM"),alt.forEach(t),Dwo=r(r7e," (PLBart model)"),r7e.forEach(t),Gwo=i(W),M2=n(W,"LI",{});var t7e=s(M2);sce=n(t7e,"STRONG",{});var nlt=s(sce);Owo=r(nlt,"prophetnet"),nlt.forEach(t),Vwo=r(t7e," \u2014 "),Jj=n(t7e,"A",{href:!0});var slt=s(Jj);Xwo=r(slt,"ProphetNetForCausalLM"),slt.forEach(t),zwo=r(t7e," (ProphetNet model)"),t7e.forEach(t),Wwo=i(W),E2=n(W,"LI",{});var a7e=s(E2);lce=n(a7e,"STRONG",{});var llt=s(lce);Qwo=r(llt,"qdqbert"),llt.forEach(t),Hwo=r(a7e," \u2014 "),Yj=n(a7e,"A",{href:!0});var ilt=s(Yj);Uwo=r(ilt,"QDQBertLMHeadModel"),ilt.forEach(t),Jwo=r(a7e," (QDQBert model)"),a7e.forEach(t),Ywo=i(W),C2=n(W,"LI",{});var n7e=s(C2);ice=n(n7e,"STRONG",{});var dlt=s(ice);Kwo=r(dlt,"reformer"),dlt.forEach(t),Zwo=r(n7e," \u2014 "),Kj=n(n7e,"A",{href:!0});var clt=s(Kj);eAo=r(clt,"ReformerModelWithLMHead"),clt.forEach(t),oAo=r(n7e," (Reformer model)"),n7e.forEach(t),rAo=i(W),w2=n(W,"LI",{});var s7e=s(w2);dce=n(s7e,"STRONG",{});var flt=s(dce);tAo=r(flt,"rembert"),flt.forEach(t),aAo=r(s7e," \u2014 "),Zj=n(s7e,"A",{href:!0});var mlt=s(Zj);nAo=r(mlt,"RemBertForCausalLM"),mlt.forEach(t),sAo=r(s7e," (RemBERT model)"),s7e.forEach(t),lAo=i(W),A2=n(W,"LI",{});var l7e=s(A2);cce=n(l7e,"STRONG",{});var glt=s(cce);iAo=r(glt,"roberta"),glt.forEach(t),dAo=r(l7e," \u2014 "),eD=n(l7e,"A",{href:!0});var hlt=s(eD);cAo=r(hlt,"RobertaForCausalLM"),hlt.forEach(t),fAo=r(l7e," (RoBERTa model)"),l7e.forEach(t),mAo=i(W),y2=n(W,"LI",{});var i7e=s(y2);fce=n(i7e,"STRONG",{});var plt=s(fce);gAo=r(plt,"roformer"),plt.forEach(t),hAo=r(i7e," \u2014 "),oD=n(i7e,"A",{href:!0});var _lt=s(oD);pAo=r(_lt,"RoFormerForCausalLM"),_lt.forEach(t),_Ao=r(i7e," (RoFormer model)"),i7e.forEach(t),uAo=i(W),L2=n(W,"LI",{});var d7e=s(L2);mce=n(d7e,"STRONG",{});var ult=s(mce);bAo=r(ult,"speech_to_text_2"),ult.forEach(t),vAo=r(d7e," \u2014 "),rD=n(d7e,"A",{href:!0});var blt=s(rD);FAo=r(blt,"Speech2Text2ForCausalLM"),blt.forEach(t),TAo=r(d7e," (Speech2Text2 model)"),d7e.forEach(t),MAo=i(W),x2=n(W,"LI",{});var c7e=s(x2);gce=n(c7e,"STRONG",{});var vlt=s(gce);EAo=r(vlt,"transfo-xl"),vlt.forEach(t),CAo=r(c7e," \u2014 "),tD=n(c7e,"A",{href:!0});var Flt=s(tD);wAo=r(Flt,"TransfoXLLMHeadModel"),Flt.forEach(t),AAo=r(c7e," (Transformer-XL model)"),c7e.forEach(t),yAo=i(W),$2=n(W,"LI",{});var f7e=s($2);hce=n(f7e,"STRONG",{});var Tlt=s(hce);LAo=r(Tlt,"trocr"),Tlt.forEach(t),xAo=r(f7e," \u2014 "),aD=n(f7e,"A",{href:!0});var Mlt=s(aD);$Ao=r(Mlt,"TrOCRForCausalLM"),Mlt.forEach(t),kAo=r(f7e," (TrOCR model)"),f7e.forEach(t),SAo=i(W),k2=n(W,"LI",{});var m7e=s(k2);pce=n(m7e,"STRONG",{});var Elt=s(pce);RAo=r(Elt,"xglm"),Elt.forEach(t),PAo=r(m7e," \u2014 "),nD=n(m7e,"A",{href:!0});var Clt=s(nD);BAo=r(Clt,"XGLMForCausalLM"),Clt.forEach(t),IAo=r(m7e," (XGLM model)"),m7e.forEach(t),NAo=i(W),S2=n(W,"LI",{});var g7e=s(S2);_ce=n(g7e,"STRONG",{});var wlt=s(_ce);qAo=r(wlt,"xlm"),wlt.forEach(t),jAo=r(g7e," \u2014 "),sD=n(g7e,"A",{href:!0});var Alt=s(sD);DAo=r(Alt,"XLMWithLMHeadModel"),Alt.forEach(t),GAo=r(g7e," (XLM model)"),g7e.forEach(t),OAo=i(W),R2=n(W,"LI",{});var h7e=s(R2);uce=n(h7e,"STRONG",{});var ylt=s(uce);VAo=r(ylt,"xlm-prophetnet"),ylt.forEach(t),XAo=r(h7e," \u2014 "),lD=n(h7e,"A",{href:!0});var Llt=s(lD);zAo=r(Llt,"XLMProphetNetForCausalLM"),Llt.forEach(t),WAo=r(h7e," (XLMProphetNet model)"),h7e.forEach(t),QAo=i(W),P2=n(W,"LI",{});var p7e=s(P2);bce=n(p7e,"STRONG",{});var xlt=s(bce);HAo=r(xlt,"xlm-roberta"),xlt.forEach(t),UAo=r(p7e," \u2014 "),iD=n(p7e,"A",{href:!0});var $lt=s(iD);JAo=r($lt,"XLMRobertaForCausalLM"),$lt.forEach(t),YAo=r(p7e," (XLM-RoBERTa model)"),p7e.forEach(t),KAo=i(W),B2=n(W,"LI",{});var _7e=s(B2);vce=n(_7e,"STRONG",{});var klt=s(vce);ZAo=r(klt,"xlm-roberta-xl"),klt.forEach(t),eyo=r(_7e," \u2014 "),dD=n(_7e,"A",{href:!0});var Slt=s(dD);oyo=r(Slt,"XLMRobertaXLForCausalLM"),Slt.forEach(t),ryo=r(_7e," (XLM-RoBERTa-XL model)"),_7e.forEach(t),tyo=i(W),I2=n(W,"LI",{});var u7e=s(I2);Fce=n(u7e,"STRONG",{});var Rlt=s(Fce);ayo=r(Rlt,"xlnet"),Rlt.forEach(t),nyo=r(u7e," \u2014 "),cD=n(u7e,"A",{href:!0});var Plt=s(cD);syo=r(Plt,"XLNetLMHeadModel"),Plt.forEach(t),lyo=r(u7e," (XLNet model)"),u7e.forEach(t),W.forEach(t),iyo=i(ta),N2=n(ta,"P",{});var b7e=s(N2);dyo=r(b7e,"The model is set in evaluation mode by default using "),Tce=n(b7e,"CODE",{});var Blt=s(Tce);cyo=r(Blt,"model.eval()"),Blt.forEach(t),fyo=r(b7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=n(b7e,"CODE",{});var Ilt=s(Mce);myo=r(Ilt,"model.train()"),Ilt.forEach(t),b7e.forEach(t),gyo=i(ta),T(q2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Rqe=i(f),Pi=n(f,"H2",{class:!0});var NDe=s(Pi);j2=n(NDe,"A",{id:!0,class:!0,href:!0});var Nlt=s(j2);Ece=n(Nlt,"SPAN",{});var qlt=s(Ece);T(bL.$$.fragment,qlt),qlt.forEach(t),Nlt.forEach(t),hyo=i(NDe),Cce=n(NDe,"SPAN",{});var jlt=s(Cce);pyo=r(jlt,"AutoModelForMaskedLM"),jlt.forEach(t),NDe.forEach(t),Pqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(vL.$$.fragment,Xs),_yo=i(Xs),Bi=n(Xs,"P",{});var xZ=s(Bi);uyo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fD=n(xZ,"A",{href:!0});var Dlt=s(fD);byo=r(Dlt,"from_pretrained()"),Dlt.forEach(t),vyo=r(xZ," class method or the "),mD=n(xZ,"A",{href:!0});var Glt=s(mD);Fyo=r(Glt,"from_config()"),Glt.forEach(t),Tyo=r(xZ,` class
method.`),xZ.forEach(t),Myo=i(Xs),FL=n(Xs,"P",{});var qDe=s(FL);Eyo=r(qDe,"This class cannot be instantiated directly using "),wce=n(qDe,"CODE",{});var Olt=s(wce);Cyo=r(Olt,"__init__()"),Olt.forEach(t),wyo=r(qDe," (throws an error)."),qDe.forEach(t),Ayo=i(Xs),st=n(Xs,"DIV",{class:!0});var Gw=s(st);T(TL.$$.fragment,Gw),yyo=i(Gw),Ace=n(Gw,"P",{});var Vlt=s(Ace);Lyo=r(Vlt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vlt.forEach(t),xyo=i(Gw),Ii=n(Gw,"P",{});var $Z=s(Ii);$yo=r($Z,`Note:
Loading a model from its configuration file does `),yce=n($Z,"STRONG",{});var Xlt=s(yce);kyo=r(Xlt,"not"),Xlt.forEach(t),Syo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),gD=n($Z,"A",{href:!0});var zlt=s(gD);Ryo=r(zlt,"from_pretrained()"),zlt.forEach(t),Pyo=r($Z," to load the model weights."),$Z.forEach(t),Byo=i(Gw),T(D2.$$.fragment,Gw),Gw.forEach(t),Iyo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(ML.$$.fragment,aa),Nyo=i(aa),Lce=n(aa,"P",{});var Wlt=s(Lce);qyo=r(Wlt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Wlt.forEach(t),jyo=i(aa),ka=n(aa,"P",{});var Ow=s(ka);Dyo=r(Ow,"The model class to instantiate is selected based on the "),xce=n(Ow,"CODE",{});var Qlt=s(xce);Gyo=r(Qlt,"model_type"),Qlt.forEach(t),Oyo=r(Ow,` property of the config object (either
passed as an argument or loaded from `),$ce=n(Ow,"CODE",{});var Hlt=s($ce);Vyo=r(Hlt,"pretrained_model_name_or_path"),Hlt.forEach(t),Xyo=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=n(Ow,"CODE",{});var Ult=s(kce);zyo=r(Ult,"pretrained_model_name_or_path"),Ult.forEach(t),Wyo=r(Ow,":"),Ow.forEach(t),Qyo=i(aa),Q=n(aa,"UL",{});var U=s(Q);G2=n(U,"LI",{});var v7e=s(G2);Sce=n(v7e,"STRONG",{});var Jlt=s(Sce);Hyo=r(Jlt,"albert"),Jlt.forEach(t),Uyo=r(v7e," \u2014 "),hD=n(v7e,"A",{href:!0});var Ylt=s(hD);Jyo=r(Ylt,"AlbertForMaskedLM"),Ylt.forEach(t),Yyo=r(v7e," (ALBERT model)"),v7e.forEach(t),Kyo=i(U),O2=n(U,"LI",{});var F7e=s(O2);Rce=n(F7e,"STRONG",{});var Klt=s(Rce);Zyo=r(Klt,"bart"),Klt.forEach(t),eLo=r(F7e," \u2014 "),pD=n(F7e,"A",{href:!0});var Zlt=s(pD);oLo=r(Zlt,"BartForConditionalGeneration"),Zlt.forEach(t),rLo=r(F7e," (BART model)"),F7e.forEach(t),tLo=i(U),V2=n(U,"LI",{});var T7e=s(V2);Pce=n(T7e,"STRONG",{});var eit=s(Pce);aLo=r(eit,"bert"),eit.forEach(t),nLo=r(T7e," \u2014 "),_D=n(T7e,"A",{href:!0});var oit=s(_D);sLo=r(oit,"BertForMaskedLM"),oit.forEach(t),lLo=r(T7e," (BERT model)"),T7e.forEach(t),iLo=i(U),X2=n(U,"LI",{});var M7e=s(X2);Bce=n(M7e,"STRONG",{});var rit=s(Bce);dLo=r(rit,"big_bird"),rit.forEach(t),cLo=r(M7e," \u2014 "),uD=n(M7e,"A",{href:!0});var tit=s(uD);fLo=r(tit,"BigBirdForMaskedLM"),tit.forEach(t),mLo=r(M7e," (BigBird model)"),M7e.forEach(t),gLo=i(U),z2=n(U,"LI",{});var E7e=s(z2);Ice=n(E7e,"STRONG",{});var ait=s(Ice);hLo=r(ait,"camembert"),ait.forEach(t),pLo=r(E7e," \u2014 "),bD=n(E7e,"A",{href:!0});var nit=s(bD);_Lo=r(nit,"CamembertForMaskedLM"),nit.forEach(t),uLo=r(E7e," (CamemBERT model)"),E7e.forEach(t),bLo=i(U),W2=n(U,"LI",{});var C7e=s(W2);Nce=n(C7e,"STRONG",{});var sit=s(Nce);vLo=r(sit,"convbert"),sit.forEach(t),FLo=r(C7e," \u2014 "),vD=n(C7e,"A",{href:!0});var lit=s(vD);TLo=r(lit,"ConvBertForMaskedLM"),lit.forEach(t),MLo=r(C7e," (ConvBERT model)"),C7e.forEach(t),ELo=i(U),Q2=n(U,"LI",{});var w7e=s(Q2);qce=n(w7e,"STRONG",{});var iit=s(qce);CLo=r(iit,"data2vec-text"),iit.forEach(t),wLo=r(w7e," \u2014 "),FD=n(w7e,"A",{href:!0});var dit=s(FD);ALo=r(dit,"Data2VecTextForMaskedLM"),dit.forEach(t),yLo=r(w7e," (Data2VecText model)"),w7e.forEach(t),LLo=i(U),H2=n(U,"LI",{});var A7e=s(H2);jce=n(A7e,"STRONG",{});var cit=s(jce);xLo=r(cit,"deberta"),cit.forEach(t),$Lo=r(A7e," \u2014 "),TD=n(A7e,"A",{href:!0});var fit=s(TD);kLo=r(fit,"DebertaForMaskedLM"),fit.forEach(t),SLo=r(A7e," (DeBERTa model)"),A7e.forEach(t),RLo=i(U),U2=n(U,"LI",{});var y7e=s(U2);Dce=n(y7e,"STRONG",{});var mit=s(Dce);PLo=r(mit,"deberta-v2"),mit.forEach(t),BLo=r(y7e," \u2014 "),MD=n(y7e,"A",{href:!0});var git=s(MD);ILo=r(git,"DebertaV2ForMaskedLM"),git.forEach(t),NLo=r(y7e," (DeBERTa-v2 model)"),y7e.forEach(t),qLo=i(U),J2=n(U,"LI",{});var L7e=s(J2);Gce=n(L7e,"STRONG",{});var hit=s(Gce);jLo=r(hit,"distilbert"),hit.forEach(t),DLo=r(L7e," \u2014 "),ED=n(L7e,"A",{href:!0});var pit=s(ED);GLo=r(pit,"DistilBertForMaskedLM"),pit.forEach(t),OLo=r(L7e," (DistilBERT model)"),L7e.forEach(t),VLo=i(U),Y2=n(U,"LI",{});var x7e=s(Y2);Oce=n(x7e,"STRONG",{});var _it=s(Oce);XLo=r(_it,"electra"),_it.forEach(t),zLo=r(x7e," \u2014 "),CD=n(x7e,"A",{href:!0});var uit=s(CD);WLo=r(uit,"ElectraForMaskedLM"),uit.forEach(t),QLo=r(x7e," (ELECTRA model)"),x7e.forEach(t),HLo=i(U),K2=n(U,"LI",{});var $7e=s(K2);Vce=n($7e,"STRONG",{});var bit=s(Vce);ULo=r(bit,"flaubert"),bit.forEach(t),JLo=r($7e," \u2014 "),wD=n($7e,"A",{href:!0});var vit=s(wD);YLo=r(vit,"FlaubertWithLMHeadModel"),vit.forEach(t),KLo=r($7e," (FlauBERT model)"),$7e.forEach(t),ZLo=i(U),Z2=n(U,"LI",{});var k7e=s(Z2);Xce=n(k7e,"STRONG",{});var Fit=s(Xce);e8o=r(Fit,"fnet"),Fit.forEach(t),o8o=r(k7e," \u2014 "),AD=n(k7e,"A",{href:!0});var Tit=s(AD);r8o=r(Tit,"FNetForMaskedLM"),Tit.forEach(t),t8o=r(k7e," (FNet model)"),k7e.forEach(t),a8o=i(U),e1=n(U,"LI",{});var S7e=s(e1);zce=n(S7e,"STRONG",{});var Mit=s(zce);n8o=r(Mit,"funnel"),Mit.forEach(t),s8o=r(S7e," \u2014 "),yD=n(S7e,"A",{href:!0});var Eit=s(yD);l8o=r(Eit,"FunnelForMaskedLM"),Eit.forEach(t),i8o=r(S7e," (Funnel Transformer model)"),S7e.forEach(t),d8o=i(U),o1=n(U,"LI",{});var R7e=s(o1);Wce=n(R7e,"STRONG",{});var Cit=s(Wce);c8o=r(Cit,"ibert"),Cit.forEach(t),f8o=r(R7e," \u2014 "),LD=n(R7e,"A",{href:!0});var wit=s(LD);m8o=r(wit,"IBertForMaskedLM"),wit.forEach(t),g8o=r(R7e," (I-BERT model)"),R7e.forEach(t),h8o=i(U),r1=n(U,"LI",{});var P7e=s(r1);Qce=n(P7e,"STRONG",{});var Ait=s(Qce);p8o=r(Ait,"layoutlm"),Ait.forEach(t),_8o=r(P7e," \u2014 "),xD=n(P7e,"A",{href:!0});var yit=s(xD);u8o=r(yit,"LayoutLMForMaskedLM"),yit.forEach(t),b8o=r(P7e," (LayoutLM model)"),P7e.forEach(t),v8o=i(U),t1=n(U,"LI",{});var B7e=s(t1);Hce=n(B7e,"STRONG",{});var Lit=s(Hce);F8o=r(Lit,"longformer"),Lit.forEach(t),T8o=r(B7e," \u2014 "),$D=n(B7e,"A",{href:!0});var xit=s($D);M8o=r(xit,"LongformerForMaskedLM"),xit.forEach(t),E8o=r(B7e," (Longformer model)"),B7e.forEach(t),C8o=i(U),a1=n(U,"LI",{});var I7e=s(a1);Uce=n(I7e,"STRONG",{});var $it=s(Uce);w8o=r($it,"mbart"),$it.forEach(t),A8o=r(I7e," \u2014 "),kD=n(I7e,"A",{href:!0});var kit=s(kD);y8o=r(kit,"MBartForConditionalGeneration"),kit.forEach(t),L8o=r(I7e," (mBART model)"),I7e.forEach(t),x8o=i(U),n1=n(U,"LI",{});var N7e=s(n1);Jce=n(N7e,"STRONG",{});var Sit=s(Jce);$8o=r(Sit,"megatron-bert"),Sit.forEach(t),k8o=r(N7e," \u2014 "),SD=n(N7e,"A",{href:!0});var Rit=s(SD);S8o=r(Rit,"MegatronBertForMaskedLM"),Rit.forEach(t),R8o=r(N7e," (MegatronBert model)"),N7e.forEach(t),P8o=i(U),s1=n(U,"LI",{});var q7e=s(s1);Yce=n(q7e,"STRONG",{});var Pit=s(Yce);B8o=r(Pit,"mobilebert"),Pit.forEach(t),I8o=r(q7e," \u2014 "),RD=n(q7e,"A",{href:!0});var Bit=s(RD);N8o=r(Bit,"MobileBertForMaskedLM"),Bit.forEach(t),q8o=r(q7e," (MobileBERT model)"),q7e.forEach(t),j8o=i(U),l1=n(U,"LI",{});var j7e=s(l1);Kce=n(j7e,"STRONG",{});var Iit=s(Kce);D8o=r(Iit,"mpnet"),Iit.forEach(t),G8o=r(j7e," \u2014 "),PD=n(j7e,"A",{href:!0});var Nit=s(PD);O8o=r(Nit,"MPNetForMaskedLM"),Nit.forEach(t),V8o=r(j7e," (MPNet model)"),j7e.forEach(t),X8o=i(U),i1=n(U,"LI",{});var D7e=s(i1);Zce=n(D7e,"STRONG",{});var qit=s(Zce);z8o=r(qit,"nystromformer"),qit.forEach(t),W8o=r(D7e," \u2014 "),BD=n(D7e,"A",{href:!0});var jit=s(BD);Q8o=r(jit,"NystromformerForMaskedLM"),jit.forEach(t),H8o=r(D7e," (Nystromformer model)"),D7e.forEach(t),U8o=i(U),d1=n(U,"LI",{});var G7e=s(d1);efe=n(G7e,"STRONG",{});var Dit=s(efe);J8o=r(Dit,"perceiver"),Dit.forEach(t),Y8o=r(G7e," \u2014 "),ID=n(G7e,"A",{href:!0});var Git=s(ID);K8o=r(Git,"PerceiverForMaskedLM"),Git.forEach(t),Z8o=r(G7e," (Perceiver model)"),G7e.forEach(t),e7o=i(U),c1=n(U,"LI",{});var O7e=s(c1);ofe=n(O7e,"STRONG",{});var Oit=s(ofe);o7o=r(Oit,"qdqbert"),Oit.forEach(t),r7o=r(O7e," \u2014 "),ND=n(O7e,"A",{href:!0});var Vit=s(ND);t7o=r(Vit,"QDQBertForMaskedLM"),Vit.forEach(t),a7o=r(O7e," (QDQBert model)"),O7e.forEach(t),n7o=i(U),f1=n(U,"LI",{});var V7e=s(f1);rfe=n(V7e,"STRONG",{});var Xit=s(rfe);s7o=r(Xit,"reformer"),Xit.forEach(t),l7o=r(V7e," \u2014 "),qD=n(V7e,"A",{href:!0});var zit=s(qD);i7o=r(zit,"ReformerForMaskedLM"),zit.forEach(t),d7o=r(V7e," (Reformer model)"),V7e.forEach(t),c7o=i(U),m1=n(U,"LI",{});var X7e=s(m1);tfe=n(X7e,"STRONG",{});var Wit=s(tfe);f7o=r(Wit,"rembert"),Wit.forEach(t),m7o=r(X7e," \u2014 "),jD=n(X7e,"A",{href:!0});var Qit=s(jD);g7o=r(Qit,"RemBertForMaskedLM"),Qit.forEach(t),h7o=r(X7e," (RemBERT model)"),X7e.forEach(t),p7o=i(U),g1=n(U,"LI",{});var z7e=s(g1);afe=n(z7e,"STRONG",{});var Hit=s(afe);_7o=r(Hit,"roberta"),Hit.forEach(t),u7o=r(z7e," \u2014 "),DD=n(z7e,"A",{href:!0});var Uit=s(DD);b7o=r(Uit,"RobertaForMaskedLM"),Uit.forEach(t),v7o=r(z7e," (RoBERTa model)"),z7e.forEach(t),F7o=i(U),h1=n(U,"LI",{});var W7e=s(h1);nfe=n(W7e,"STRONG",{});var Jit=s(nfe);T7o=r(Jit,"roformer"),Jit.forEach(t),M7o=r(W7e," \u2014 "),GD=n(W7e,"A",{href:!0});var Yit=s(GD);E7o=r(Yit,"RoFormerForMaskedLM"),Yit.forEach(t),C7o=r(W7e," (RoFormer model)"),W7e.forEach(t),w7o=i(U),p1=n(U,"LI",{});var Q7e=s(p1);sfe=n(Q7e,"STRONG",{});var Kit=s(sfe);A7o=r(Kit,"squeezebert"),Kit.forEach(t),y7o=r(Q7e," \u2014 "),OD=n(Q7e,"A",{href:!0});var Zit=s(OD);L7o=r(Zit,"SqueezeBertForMaskedLM"),Zit.forEach(t),x7o=r(Q7e," (SqueezeBERT model)"),Q7e.forEach(t),$7o=i(U),_1=n(U,"LI",{});var H7e=s(_1);lfe=n(H7e,"STRONG",{});var edt=s(lfe);k7o=r(edt,"tapas"),edt.forEach(t),S7o=r(H7e," \u2014 "),VD=n(H7e,"A",{href:!0});var odt=s(VD);R7o=r(odt,"TapasForMaskedLM"),odt.forEach(t),P7o=r(H7e," (TAPAS model)"),H7e.forEach(t),B7o=i(U),u1=n(U,"LI",{});var U7e=s(u1);ife=n(U7e,"STRONG",{});var rdt=s(ife);I7o=r(rdt,"wav2vec2"),rdt.forEach(t),N7o=r(U7e," \u2014 "),dfe=n(U7e,"CODE",{});var tdt=s(dfe);q7o=r(tdt,"Wav2Vec2ForMaskedLM"),tdt.forEach(t),j7o=r(U7e," (Wav2Vec2 model)"),U7e.forEach(t),D7o=i(U),b1=n(U,"LI",{});var J7e=s(b1);cfe=n(J7e,"STRONG",{});var adt=s(cfe);G7o=r(adt,"xlm"),adt.forEach(t),O7o=r(J7e," \u2014 "),XD=n(J7e,"A",{href:!0});var ndt=s(XD);V7o=r(ndt,"XLMWithLMHeadModel"),ndt.forEach(t),X7o=r(J7e," (XLM model)"),J7e.forEach(t),z7o=i(U),v1=n(U,"LI",{});var Y7e=s(v1);ffe=n(Y7e,"STRONG",{});var sdt=s(ffe);W7o=r(sdt,"xlm-roberta"),sdt.forEach(t),Q7o=r(Y7e," \u2014 "),zD=n(Y7e,"A",{href:!0});var ldt=s(zD);H7o=r(ldt,"XLMRobertaForMaskedLM"),ldt.forEach(t),U7o=r(Y7e," (XLM-RoBERTa model)"),Y7e.forEach(t),J7o=i(U),F1=n(U,"LI",{});var K7e=s(F1);mfe=n(K7e,"STRONG",{});var idt=s(mfe);Y7o=r(idt,"xlm-roberta-xl"),idt.forEach(t),K7o=r(K7e," \u2014 "),WD=n(K7e,"A",{href:!0});var ddt=s(WD);Z7o=r(ddt,"XLMRobertaXLForMaskedLM"),ddt.forEach(t),e9o=r(K7e," (XLM-RoBERTa-XL model)"),K7e.forEach(t),o9o=i(U),T1=n(U,"LI",{});var Z7e=s(T1);gfe=n(Z7e,"STRONG",{});var cdt=s(gfe);r9o=r(cdt,"yoso"),cdt.forEach(t),t9o=r(Z7e," \u2014 "),QD=n(Z7e,"A",{href:!0});var fdt=s(QD);a9o=r(fdt,"YosoForMaskedLM"),fdt.forEach(t),n9o=r(Z7e," (YOSO model)"),Z7e.forEach(t),U.forEach(t),s9o=i(aa),M1=n(aa,"P",{});var e9e=s(M1);l9o=r(e9e,"The model is set in evaluation mode by default using "),hfe=n(e9e,"CODE",{});var mdt=s(hfe);i9o=r(mdt,"model.eval()"),mdt.forEach(t),d9o=r(e9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pfe=n(e9e,"CODE",{});var gdt=s(pfe);c9o=r(gdt,"model.train()"),gdt.forEach(t),e9e.forEach(t),f9o=i(aa),T(E1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),Bqe=i(f),Ni=n(f,"H2",{class:!0});var jDe=s(Ni);C1=n(jDe,"A",{id:!0,class:!0,href:!0});var hdt=s(C1);_fe=n(hdt,"SPAN",{});var pdt=s(_fe);T(EL.$$.fragment,pdt),pdt.forEach(t),hdt.forEach(t),m9o=i(jDe),ufe=n(jDe,"SPAN",{});var _dt=s(ufe);g9o=r(_dt,"AutoModelForSeq2SeqLM"),_dt.forEach(t),jDe.forEach(t),Iqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(CL.$$.fragment,zs),h9o=i(zs),qi=n(zs,"P",{});var kZ=s(qi);p9o=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HD=n(kZ,"A",{href:!0});var udt=s(HD);_9o=r(udt,"from_pretrained()"),udt.forEach(t),u9o=r(kZ," class method or the "),UD=n(kZ,"A",{href:!0});var bdt=s(UD);b9o=r(bdt,"from_config()"),bdt.forEach(t),v9o=r(kZ,` class
method.`),kZ.forEach(t),F9o=i(zs),wL=n(zs,"P",{});var DDe=s(wL);T9o=r(DDe,"This class cannot be instantiated directly using "),bfe=n(DDe,"CODE",{});var vdt=s(bfe);M9o=r(vdt,"__init__()"),vdt.forEach(t),E9o=r(DDe," (throws an error)."),DDe.forEach(t),C9o=i(zs),lt=n(zs,"DIV",{class:!0});var Vw=s(lt);T(AL.$$.fragment,Vw),w9o=i(Vw),vfe=n(Vw,"P",{});var Fdt=s(vfe);A9o=r(Fdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Fdt.forEach(t),y9o=i(Vw),ji=n(Vw,"P",{});var SZ=s(ji);L9o=r(SZ,`Note:
Loading a model from its configuration file does `),Ffe=n(SZ,"STRONG",{});var Tdt=s(Ffe);x9o=r(Tdt,"not"),Tdt.forEach(t),$9o=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=n(SZ,"A",{href:!0});var Mdt=s(JD);k9o=r(Mdt,"from_pretrained()"),Mdt.forEach(t),S9o=r(SZ," to load the model weights."),SZ.forEach(t),R9o=i(Vw),T(w1.$$.fragment,Vw),Vw.forEach(t),P9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(yL.$$.fragment,na),B9o=i(na),Tfe=n(na,"P",{});var Edt=s(Tfe);I9o=r(Edt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Edt.forEach(t),N9o=i(na),Sa=n(na,"P",{});var Xw=s(Sa);q9o=r(Xw,"The model class to instantiate is selected based on the "),Mfe=n(Xw,"CODE",{});var Cdt=s(Mfe);j9o=r(Cdt,"model_type"),Cdt.forEach(t),D9o=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Efe=n(Xw,"CODE",{});var wdt=s(Efe);G9o=r(wdt,"pretrained_model_name_or_path"),wdt.forEach(t),O9o=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cfe=n(Xw,"CODE",{});var Adt=s(Cfe);V9o=r(Adt,"pretrained_model_name_or_path"),Adt.forEach(t),X9o=r(Xw,":"),Xw.forEach(t),z9o=i(na),_e=n(na,"UL",{});var ve=s(_e);A1=n(ve,"LI",{});var o9e=s(A1);wfe=n(o9e,"STRONG",{});var ydt=s(wfe);W9o=r(ydt,"bart"),ydt.forEach(t),Q9o=r(o9e," \u2014 "),YD=n(o9e,"A",{href:!0});var Ldt=s(YD);H9o=r(Ldt,"BartForConditionalGeneration"),Ldt.forEach(t),U9o=r(o9e," (BART model)"),o9e.forEach(t),J9o=i(ve),y1=n(ve,"LI",{});var r9e=s(y1);Afe=n(r9e,"STRONG",{});var xdt=s(Afe);Y9o=r(xdt,"bigbird_pegasus"),xdt.forEach(t),K9o=r(r9e," \u2014 "),KD=n(r9e,"A",{href:!0});var $dt=s(KD);Z9o=r($dt,"BigBirdPegasusForConditionalGeneration"),$dt.forEach(t),exo=r(r9e," (BigBirdPegasus model)"),r9e.forEach(t),oxo=i(ve),L1=n(ve,"LI",{});var t9e=s(L1);yfe=n(t9e,"STRONG",{});var kdt=s(yfe);rxo=r(kdt,"blenderbot"),kdt.forEach(t),txo=r(t9e," \u2014 "),ZD=n(t9e,"A",{href:!0});var Sdt=s(ZD);axo=r(Sdt,"BlenderbotForConditionalGeneration"),Sdt.forEach(t),nxo=r(t9e," (Blenderbot model)"),t9e.forEach(t),sxo=i(ve),x1=n(ve,"LI",{});var a9e=s(x1);Lfe=n(a9e,"STRONG",{});var Rdt=s(Lfe);lxo=r(Rdt,"blenderbot-small"),Rdt.forEach(t),ixo=r(a9e," \u2014 "),eG=n(a9e,"A",{href:!0});var Pdt=s(eG);dxo=r(Pdt,"BlenderbotSmallForConditionalGeneration"),Pdt.forEach(t),cxo=r(a9e," (BlenderbotSmall model)"),a9e.forEach(t),fxo=i(ve),$1=n(ve,"LI",{});var n9e=s($1);xfe=n(n9e,"STRONG",{});var Bdt=s(xfe);mxo=r(Bdt,"encoder-decoder"),Bdt.forEach(t),gxo=r(n9e," \u2014 "),oG=n(n9e,"A",{href:!0});var Idt=s(oG);hxo=r(Idt,"EncoderDecoderModel"),Idt.forEach(t),pxo=r(n9e," (Encoder decoder model)"),n9e.forEach(t),_xo=i(ve),k1=n(ve,"LI",{});var s9e=s(k1);$fe=n(s9e,"STRONG",{});var Ndt=s($fe);uxo=r(Ndt,"fsmt"),Ndt.forEach(t),bxo=r(s9e," \u2014 "),rG=n(s9e,"A",{href:!0});var qdt=s(rG);vxo=r(qdt,"FSMTForConditionalGeneration"),qdt.forEach(t),Fxo=r(s9e," (FairSeq Machine-Translation model)"),s9e.forEach(t),Txo=i(ve),S1=n(ve,"LI",{});var l9e=s(S1);kfe=n(l9e,"STRONG",{});var jdt=s(kfe);Mxo=r(jdt,"led"),jdt.forEach(t),Exo=r(l9e," \u2014 "),tG=n(l9e,"A",{href:!0});var Ddt=s(tG);Cxo=r(Ddt,"LEDForConditionalGeneration"),Ddt.forEach(t),wxo=r(l9e," (LED model)"),l9e.forEach(t),Axo=i(ve),R1=n(ve,"LI",{});var i9e=s(R1);Sfe=n(i9e,"STRONG",{});var Gdt=s(Sfe);yxo=r(Gdt,"m2m_100"),Gdt.forEach(t),Lxo=r(i9e," \u2014 "),aG=n(i9e,"A",{href:!0});var Odt=s(aG);xxo=r(Odt,"M2M100ForConditionalGeneration"),Odt.forEach(t),$xo=r(i9e," (M2M100 model)"),i9e.forEach(t),kxo=i(ve),P1=n(ve,"LI",{});var d9e=s(P1);Rfe=n(d9e,"STRONG",{});var Vdt=s(Rfe);Sxo=r(Vdt,"marian"),Vdt.forEach(t),Rxo=r(d9e," \u2014 "),nG=n(d9e,"A",{href:!0});var Xdt=s(nG);Pxo=r(Xdt,"MarianMTModel"),Xdt.forEach(t),Bxo=r(d9e," (Marian model)"),d9e.forEach(t),Ixo=i(ve),B1=n(ve,"LI",{});var c9e=s(B1);Pfe=n(c9e,"STRONG",{});var zdt=s(Pfe);Nxo=r(zdt,"mbart"),zdt.forEach(t),qxo=r(c9e," \u2014 "),sG=n(c9e,"A",{href:!0});var Wdt=s(sG);jxo=r(Wdt,"MBartForConditionalGeneration"),Wdt.forEach(t),Dxo=r(c9e," (mBART model)"),c9e.forEach(t),Gxo=i(ve),I1=n(ve,"LI",{});var f9e=s(I1);Bfe=n(f9e,"STRONG",{});var Qdt=s(Bfe);Oxo=r(Qdt,"mt5"),Qdt.forEach(t),Vxo=r(f9e," \u2014 "),lG=n(f9e,"A",{href:!0});var Hdt=s(lG);Xxo=r(Hdt,"MT5ForConditionalGeneration"),Hdt.forEach(t),zxo=r(f9e," (mT5 model)"),f9e.forEach(t),Wxo=i(ve),N1=n(ve,"LI",{});var m9e=s(N1);Ife=n(m9e,"STRONG",{});var Udt=s(Ife);Qxo=r(Udt,"pegasus"),Udt.forEach(t),Hxo=r(m9e," \u2014 "),iG=n(m9e,"A",{href:!0});var Jdt=s(iG);Uxo=r(Jdt,"PegasusForConditionalGeneration"),Jdt.forEach(t),Jxo=r(m9e," (Pegasus model)"),m9e.forEach(t),Yxo=i(ve),q1=n(ve,"LI",{});var g9e=s(q1);Nfe=n(g9e,"STRONG",{});var Ydt=s(Nfe);Kxo=r(Ydt,"plbart"),Ydt.forEach(t),Zxo=r(g9e," \u2014 "),dG=n(g9e,"A",{href:!0});var Kdt=s(dG);e$o=r(Kdt,"PLBartForConditionalGeneration"),Kdt.forEach(t),o$o=r(g9e," (PLBart model)"),g9e.forEach(t),r$o=i(ve),j1=n(ve,"LI",{});var h9e=s(j1);qfe=n(h9e,"STRONG",{});var Zdt=s(qfe);t$o=r(Zdt,"prophetnet"),Zdt.forEach(t),a$o=r(h9e," \u2014 "),cG=n(h9e,"A",{href:!0});var ect=s(cG);n$o=r(ect,"ProphetNetForConditionalGeneration"),ect.forEach(t),s$o=r(h9e," (ProphetNet model)"),h9e.forEach(t),l$o=i(ve),D1=n(ve,"LI",{});var p9e=s(D1);jfe=n(p9e,"STRONG",{});var oct=s(jfe);i$o=r(oct,"t5"),oct.forEach(t),d$o=r(p9e," \u2014 "),fG=n(p9e,"A",{href:!0});var rct=s(fG);c$o=r(rct,"T5ForConditionalGeneration"),rct.forEach(t),f$o=r(p9e," (T5 model)"),p9e.forEach(t),m$o=i(ve),G1=n(ve,"LI",{});var _9e=s(G1);Dfe=n(_9e,"STRONG",{});var tct=s(Dfe);g$o=r(tct,"xlm-prophetnet"),tct.forEach(t),h$o=r(_9e," \u2014 "),mG=n(_9e,"A",{href:!0});var act=s(mG);p$o=r(act,"XLMProphetNetForConditionalGeneration"),act.forEach(t),_$o=r(_9e," (XLMProphetNet model)"),_9e.forEach(t),ve.forEach(t),u$o=i(na),O1=n(na,"P",{});var u9e=s(O1);b$o=r(u9e,"The model is set in evaluation mode by default using "),Gfe=n(u9e,"CODE",{});var nct=s(Gfe);v$o=r(nct,"model.eval()"),nct.forEach(t),F$o=r(u9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ofe=n(u9e,"CODE",{});var sct=s(Ofe);T$o=r(sct,"model.train()"),sct.forEach(t),u9e.forEach(t),M$o=i(na),T(V1.$$.fragment,na),na.forEach(t),zs.forEach(t),Nqe=i(f),Di=n(f,"H2",{class:!0});var GDe=s(Di);X1=n(GDe,"A",{id:!0,class:!0,href:!0});var lct=s(X1);Vfe=n(lct,"SPAN",{});var ict=s(Vfe);T(LL.$$.fragment,ict),ict.forEach(t),lct.forEach(t),E$o=i(GDe),Xfe=n(GDe,"SPAN",{});var dct=s(Xfe);C$o=r(dct,"AutoModelForSequenceClassification"),dct.forEach(t),GDe.forEach(t),qqe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(xL.$$.fragment,Ws),w$o=i(Ws),Gi=n(Ws,"P",{});var RZ=s(Gi);A$o=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gG=n(RZ,"A",{href:!0});var cct=s(gG);y$o=r(cct,"from_pretrained()"),cct.forEach(t),L$o=r(RZ," class method or the "),hG=n(RZ,"A",{href:!0});var fct=s(hG);x$o=r(fct,"from_config()"),fct.forEach(t),$$o=r(RZ,` class
method.`),RZ.forEach(t),k$o=i(Ws),$L=n(Ws,"P",{});var ODe=s($L);S$o=r(ODe,"This class cannot be instantiated directly using "),zfe=n(ODe,"CODE",{});var mct=s(zfe);R$o=r(mct,"__init__()"),mct.forEach(t),P$o=r(ODe," (throws an error)."),ODe.forEach(t),B$o=i(Ws),it=n(Ws,"DIV",{class:!0});var zw=s(it);T(kL.$$.fragment,zw),I$o=i(zw),Wfe=n(zw,"P",{});var gct=s(Wfe);N$o=r(gct,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gct.forEach(t),q$o=i(zw),Oi=n(zw,"P",{});var PZ=s(Oi);j$o=r(PZ,`Note:
Loading a model from its configuration file does `),Qfe=n(PZ,"STRONG",{});var hct=s(Qfe);D$o=r(hct,"not"),hct.forEach(t),G$o=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=n(PZ,"A",{href:!0});var pct=s(pG);O$o=r(pct,"from_pretrained()"),pct.forEach(t),V$o=r(PZ," to load the model weights."),PZ.forEach(t),X$o=i(zw),T(z1.$$.fragment,zw),zw.forEach(t),z$o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(SL.$$.fragment,sa),W$o=i(sa),Hfe=n(sa,"P",{});var _ct=s(Hfe);Q$o=r(_ct,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_ct.forEach(t),H$o=i(sa),Ra=n(sa,"P",{});var Ww=s(Ra);U$o=r(Ww,"The model class to instantiate is selected based on the "),Ufe=n(Ww,"CODE",{});var uct=s(Ufe);J$o=r(uct,"model_type"),uct.forEach(t),Y$o=r(Ww,` property of the config object (either
passed as an argument or loaded from `),Jfe=n(Ww,"CODE",{});var bct=s(Jfe);K$o=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),Z$o=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=n(Ww,"CODE",{});var vct=s(Yfe);eko=r(vct,"pretrained_model_name_or_path"),vct.forEach(t),oko=r(Ww,":"),Ww.forEach(t),rko=i(sa),N=n(sa,"UL",{});var j=s(N);W1=n(j,"LI",{});var b9e=s(W1);Kfe=n(b9e,"STRONG",{});var Fct=s(Kfe);tko=r(Fct,"albert"),Fct.forEach(t),ako=r(b9e," \u2014 "),_G=n(b9e,"A",{href:!0});var Tct=s(_G);nko=r(Tct,"AlbertForSequenceClassification"),Tct.forEach(t),sko=r(b9e," (ALBERT model)"),b9e.forEach(t),lko=i(j),Q1=n(j,"LI",{});var v9e=s(Q1);Zfe=n(v9e,"STRONG",{});var Mct=s(Zfe);iko=r(Mct,"bart"),Mct.forEach(t),dko=r(v9e," \u2014 "),uG=n(v9e,"A",{href:!0});var Ect=s(uG);cko=r(Ect,"BartForSequenceClassification"),Ect.forEach(t),fko=r(v9e," (BART model)"),v9e.forEach(t),mko=i(j),H1=n(j,"LI",{});var F9e=s(H1);eme=n(F9e,"STRONG",{});var Cct=s(eme);gko=r(Cct,"bert"),Cct.forEach(t),hko=r(F9e," \u2014 "),bG=n(F9e,"A",{href:!0});var wct=s(bG);pko=r(wct,"BertForSequenceClassification"),wct.forEach(t),_ko=r(F9e," (BERT model)"),F9e.forEach(t),uko=i(j),U1=n(j,"LI",{});var T9e=s(U1);ome=n(T9e,"STRONG",{});var Act=s(ome);bko=r(Act,"big_bird"),Act.forEach(t),vko=r(T9e," \u2014 "),vG=n(T9e,"A",{href:!0});var yct=s(vG);Fko=r(yct,"BigBirdForSequenceClassification"),yct.forEach(t),Tko=r(T9e," (BigBird model)"),T9e.forEach(t),Mko=i(j),J1=n(j,"LI",{});var M9e=s(J1);rme=n(M9e,"STRONG",{});var Lct=s(rme);Eko=r(Lct,"bigbird_pegasus"),Lct.forEach(t),Cko=r(M9e," \u2014 "),FG=n(M9e,"A",{href:!0});var xct=s(FG);wko=r(xct,"BigBirdPegasusForSequenceClassification"),xct.forEach(t),Ako=r(M9e," (BigBirdPegasus model)"),M9e.forEach(t),yko=i(j),Y1=n(j,"LI",{});var E9e=s(Y1);tme=n(E9e,"STRONG",{});var $ct=s(tme);Lko=r($ct,"camembert"),$ct.forEach(t),xko=r(E9e," \u2014 "),TG=n(E9e,"A",{href:!0});var kct=s(TG);$ko=r(kct,"CamembertForSequenceClassification"),kct.forEach(t),kko=r(E9e," (CamemBERT model)"),E9e.forEach(t),Sko=i(j),K1=n(j,"LI",{});var C9e=s(K1);ame=n(C9e,"STRONG",{});var Sct=s(ame);Rko=r(Sct,"canine"),Sct.forEach(t),Pko=r(C9e," \u2014 "),MG=n(C9e,"A",{href:!0});var Rct=s(MG);Bko=r(Rct,"CanineForSequenceClassification"),Rct.forEach(t),Iko=r(C9e," (Canine model)"),C9e.forEach(t),Nko=i(j),Z1=n(j,"LI",{});var w9e=s(Z1);nme=n(w9e,"STRONG",{});var Pct=s(nme);qko=r(Pct,"convbert"),Pct.forEach(t),jko=r(w9e," \u2014 "),EG=n(w9e,"A",{href:!0});var Bct=s(EG);Dko=r(Bct,"ConvBertForSequenceClassification"),Bct.forEach(t),Gko=r(w9e," (ConvBERT model)"),w9e.forEach(t),Oko=i(j),eb=n(j,"LI",{});var A9e=s(eb);sme=n(A9e,"STRONG",{});var Ict=s(sme);Vko=r(Ict,"ctrl"),Ict.forEach(t),Xko=r(A9e," \u2014 "),CG=n(A9e,"A",{href:!0});var Nct=s(CG);zko=r(Nct,"CTRLForSequenceClassification"),Nct.forEach(t),Wko=r(A9e," (CTRL model)"),A9e.forEach(t),Qko=i(j),ob=n(j,"LI",{});var y9e=s(ob);lme=n(y9e,"STRONG",{});var qct=s(lme);Hko=r(qct,"data2vec-text"),qct.forEach(t),Uko=r(y9e," \u2014 "),wG=n(y9e,"A",{href:!0});var jct=s(wG);Jko=r(jct,"Data2VecTextForSequenceClassification"),jct.forEach(t),Yko=r(y9e," (Data2VecText model)"),y9e.forEach(t),Kko=i(j),rb=n(j,"LI",{});var L9e=s(rb);ime=n(L9e,"STRONG",{});var Dct=s(ime);Zko=r(Dct,"deberta"),Dct.forEach(t),eSo=r(L9e," \u2014 "),AG=n(L9e,"A",{href:!0});var Gct=s(AG);oSo=r(Gct,"DebertaForSequenceClassification"),Gct.forEach(t),rSo=r(L9e," (DeBERTa model)"),L9e.forEach(t),tSo=i(j),tb=n(j,"LI",{});var x9e=s(tb);dme=n(x9e,"STRONG",{});var Oct=s(dme);aSo=r(Oct,"deberta-v2"),Oct.forEach(t),nSo=r(x9e," \u2014 "),yG=n(x9e,"A",{href:!0});var Vct=s(yG);sSo=r(Vct,"DebertaV2ForSequenceClassification"),Vct.forEach(t),lSo=r(x9e," (DeBERTa-v2 model)"),x9e.forEach(t),iSo=i(j),ab=n(j,"LI",{});var $9e=s(ab);cme=n($9e,"STRONG",{});var Xct=s(cme);dSo=r(Xct,"distilbert"),Xct.forEach(t),cSo=r($9e," \u2014 "),LG=n($9e,"A",{href:!0});var zct=s(LG);fSo=r(zct,"DistilBertForSequenceClassification"),zct.forEach(t),mSo=r($9e," (DistilBERT model)"),$9e.forEach(t),gSo=i(j),nb=n(j,"LI",{});var k9e=s(nb);fme=n(k9e,"STRONG",{});var Wct=s(fme);hSo=r(Wct,"electra"),Wct.forEach(t),pSo=r(k9e," \u2014 "),xG=n(k9e,"A",{href:!0});var Qct=s(xG);_So=r(Qct,"ElectraForSequenceClassification"),Qct.forEach(t),uSo=r(k9e," (ELECTRA model)"),k9e.forEach(t),bSo=i(j),sb=n(j,"LI",{});var S9e=s(sb);mme=n(S9e,"STRONG",{});var Hct=s(mme);vSo=r(Hct,"flaubert"),Hct.forEach(t),FSo=r(S9e," \u2014 "),$G=n(S9e,"A",{href:!0});var Uct=s($G);TSo=r(Uct,"FlaubertForSequenceClassification"),Uct.forEach(t),MSo=r(S9e," (FlauBERT model)"),S9e.forEach(t),ESo=i(j),lb=n(j,"LI",{});var R9e=s(lb);gme=n(R9e,"STRONG",{});var Jct=s(gme);CSo=r(Jct,"fnet"),Jct.forEach(t),wSo=r(R9e," \u2014 "),kG=n(R9e,"A",{href:!0});var Yct=s(kG);ASo=r(Yct,"FNetForSequenceClassification"),Yct.forEach(t),ySo=r(R9e," (FNet model)"),R9e.forEach(t),LSo=i(j),ib=n(j,"LI",{});var P9e=s(ib);hme=n(P9e,"STRONG",{});var Kct=s(hme);xSo=r(Kct,"funnel"),Kct.forEach(t),$So=r(P9e," \u2014 "),SG=n(P9e,"A",{href:!0});var Zct=s(SG);kSo=r(Zct,"FunnelForSequenceClassification"),Zct.forEach(t),SSo=r(P9e," (Funnel Transformer model)"),P9e.forEach(t),RSo=i(j),db=n(j,"LI",{});var B9e=s(db);pme=n(B9e,"STRONG",{});var eft=s(pme);PSo=r(eft,"gpt2"),eft.forEach(t),BSo=r(B9e," \u2014 "),RG=n(B9e,"A",{href:!0});var oft=s(RG);ISo=r(oft,"GPT2ForSequenceClassification"),oft.forEach(t),NSo=r(B9e," (OpenAI GPT-2 model)"),B9e.forEach(t),qSo=i(j),cb=n(j,"LI",{});var I9e=s(cb);_me=n(I9e,"STRONG",{});var rft=s(_me);jSo=r(rft,"gpt_neo"),rft.forEach(t),DSo=r(I9e," \u2014 "),PG=n(I9e,"A",{href:!0});var tft=s(PG);GSo=r(tft,"GPTNeoForSequenceClassification"),tft.forEach(t),OSo=r(I9e," (GPT Neo model)"),I9e.forEach(t),VSo=i(j),fb=n(j,"LI",{});var N9e=s(fb);ume=n(N9e,"STRONG",{});var aft=s(ume);XSo=r(aft,"gptj"),aft.forEach(t),zSo=r(N9e," \u2014 "),BG=n(N9e,"A",{href:!0});var nft=s(BG);WSo=r(nft,"GPTJForSequenceClassification"),nft.forEach(t),QSo=r(N9e," (GPT-J model)"),N9e.forEach(t),HSo=i(j),mb=n(j,"LI",{});var q9e=s(mb);bme=n(q9e,"STRONG",{});var sft=s(bme);USo=r(sft,"ibert"),sft.forEach(t),JSo=r(q9e," \u2014 "),IG=n(q9e,"A",{href:!0});var lft=s(IG);YSo=r(lft,"IBertForSequenceClassification"),lft.forEach(t),KSo=r(q9e," (I-BERT model)"),q9e.forEach(t),ZSo=i(j),gb=n(j,"LI",{});var j9e=s(gb);vme=n(j9e,"STRONG",{});var ift=s(vme);eRo=r(ift,"layoutlm"),ift.forEach(t),oRo=r(j9e," \u2014 "),NG=n(j9e,"A",{href:!0});var dft=s(NG);rRo=r(dft,"LayoutLMForSequenceClassification"),dft.forEach(t),tRo=r(j9e," (LayoutLM model)"),j9e.forEach(t),aRo=i(j),hb=n(j,"LI",{});var D9e=s(hb);Fme=n(D9e,"STRONG",{});var cft=s(Fme);nRo=r(cft,"layoutlmv2"),cft.forEach(t),sRo=r(D9e," \u2014 "),qG=n(D9e,"A",{href:!0});var fft=s(qG);lRo=r(fft,"LayoutLMv2ForSequenceClassification"),fft.forEach(t),iRo=r(D9e," (LayoutLMv2 model)"),D9e.forEach(t),dRo=i(j),pb=n(j,"LI",{});var G9e=s(pb);Tme=n(G9e,"STRONG",{});var mft=s(Tme);cRo=r(mft,"layoutlmv3"),mft.forEach(t),fRo=r(G9e," \u2014 "),jG=n(G9e,"A",{href:!0});var gft=s(jG);mRo=r(gft,"LayoutLMv3ForSequenceClassification"),gft.forEach(t),gRo=r(G9e," (LayoutLMv3 model)"),G9e.forEach(t),hRo=i(j),_b=n(j,"LI",{});var O9e=s(_b);Mme=n(O9e,"STRONG",{});var hft=s(Mme);pRo=r(hft,"led"),hft.forEach(t),_Ro=r(O9e," \u2014 "),DG=n(O9e,"A",{href:!0});var pft=s(DG);uRo=r(pft,"LEDForSequenceClassification"),pft.forEach(t),bRo=r(O9e," (LED model)"),O9e.forEach(t),vRo=i(j),ub=n(j,"LI",{});var V9e=s(ub);Eme=n(V9e,"STRONG",{});var _ft=s(Eme);FRo=r(_ft,"longformer"),_ft.forEach(t),TRo=r(V9e," \u2014 "),GG=n(V9e,"A",{href:!0});var uft=s(GG);MRo=r(uft,"LongformerForSequenceClassification"),uft.forEach(t),ERo=r(V9e," (Longformer model)"),V9e.forEach(t),CRo=i(j),bb=n(j,"LI",{});var X9e=s(bb);Cme=n(X9e,"STRONG",{});var bft=s(Cme);wRo=r(bft,"mbart"),bft.forEach(t),ARo=r(X9e," \u2014 "),OG=n(X9e,"A",{href:!0});var vft=s(OG);yRo=r(vft,"MBartForSequenceClassification"),vft.forEach(t),LRo=r(X9e," (mBART model)"),X9e.forEach(t),xRo=i(j),vb=n(j,"LI",{});var z9e=s(vb);wme=n(z9e,"STRONG",{});var Fft=s(wme);$Ro=r(Fft,"megatron-bert"),Fft.forEach(t),kRo=r(z9e," \u2014 "),VG=n(z9e,"A",{href:!0});var Tft=s(VG);SRo=r(Tft,"MegatronBertForSequenceClassification"),Tft.forEach(t),RRo=r(z9e," (MegatronBert model)"),z9e.forEach(t),PRo=i(j),Fb=n(j,"LI",{});var W9e=s(Fb);Ame=n(W9e,"STRONG",{});var Mft=s(Ame);BRo=r(Mft,"mobilebert"),Mft.forEach(t),IRo=r(W9e," \u2014 "),XG=n(W9e,"A",{href:!0});var Eft=s(XG);NRo=r(Eft,"MobileBertForSequenceClassification"),Eft.forEach(t),qRo=r(W9e," (MobileBERT model)"),W9e.forEach(t),jRo=i(j),Tb=n(j,"LI",{});var Q9e=s(Tb);yme=n(Q9e,"STRONG",{});var Cft=s(yme);DRo=r(Cft,"mpnet"),Cft.forEach(t),GRo=r(Q9e," \u2014 "),zG=n(Q9e,"A",{href:!0});var wft=s(zG);ORo=r(wft,"MPNetForSequenceClassification"),wft.forEach(t),VRo=r(Q9e," (MPNet model)"),Q9e.forEach(t),XRo=i(j),Mb=n(j,"LI",{});var H9e=s(Mb);Lme=n(H9e,"STRONG",{});var Aft=s(Lme);zRo=r(Aft,"nystromformer"),Aft.forEach(t),WRo=r(H9e," \u2014 "),WG=n(H9e,"A",{href:!0});var yft=s(WG);QRo=r(yft,"NystromformerForSequenceClassification"),yft.forEach(t),HRo=r(H9e," (Nystromformer model)"),H9e.forEach(t),URo=i(j),Eb=n(j,"LI",{});var U9e=s(Eb);xme=n(U9e,"STRONG",{});var Lft=s(xme);JRo=r(Lft,"openai-gpt"),Lft.forEach(t),YRo=r(U9e," \u2014 "),QG=n(U9e,"A",{href:!0});var xft=s(QG);KRo=r(xft,"OpenAIGPTForSequenceClassification"),xft.forEach(t),ZRo=r(U9e," (OpenAI GPT model)"),U9e.forEach(t),ePo=i(j),Cb=n(j,"LI",{});var J9e=s(Cb);$me=n(J9e,"STRONG",{});var $ft=s($me);oPo=r($ft,"perceiver"),$ft.forEach(t),rPo=r(J9e," \u2014 "),HG=n(J9e,"A",{href:!0});var kft=s(HG);tPo=r(kft,"PerceiverForSequenceClassification"),kft.forEach(t),aPo=r(J9e," (Perceiver model)"),J9e.forEach(t),nPo=i(j),wb=n(j,"LI",{});var Y9e=s(wb);kme=n(Y9e,"STRONG",{});var Sft=s(kme);sPo=r(Sft,"plbart"),Sft.forEach(t),lPo=r(Y9e," \u2014 "),UG=n(Y9e,"A",{href:!0});var Rft=s(UG);iPo=r(Rft,"PLBartForSequenceClassification"),Rft.forEach(t),dPo=r(Y9e," (PLBart model)"),Y9e.forEach(t),cPo=i(j),Ab=n(j,"LI",{});var K9e=s(Ab);Sme=n(K9e,"STRONG",{});var Pft=s(Sme);fPo=r(Pft,"qdqbert"),Pft.forEach(t),mPo=r(K9e," \u2014 "),JG=n(K9e,"A",{href:!0});var Bft=s(JG);gPo=r(Bft,"QDQBertForSequenceClassification"),Bft.forEach(t),hPo=r(K9e," (QDQBert model)"),K9e.forEach(t),pPo=i(j),yb=n(j,"LI",{});var Z9e=s(yb);Rme=n(Z9e,"STRONG",{});var Ift=s(Rme);_Po=r(Ift,"reformer"),Ift.forEach(t),uPo=r(Z9e," \u2014 "),YG=n(Z9e,"A",{href:!0});var Nft=s(YG);bPo=r(Nft,"ReformerForSequenceClassification"),Nft.forEach(t),vPo=r(Z9e," (Reformer model)"),Z9e.forEach(t),FPo=i(j),Lb=n(j,"LI",{});var exe=s(Lb);Pme=n(exe,"STRONG",{});var qft=s(Pme);TPo=r(qft,"rembert"),qft.forEach(t),MPo=r(exe," \u2014 "),KG=n(exe,"A",{href:!0});var jft=s(KG);EPo=r(jft,"RemBertForSequenceClassification"),jft.forEach(t),CPo=r(exe," (RemBERT model)"),exe.forEach(t),wPo=i(j),xb=n(j,"LI",{});var oxe=s(xb);Bme=n(oxe,"STRONG",{});var Dft=s(Bme);APo=r(Dft,"roberta"),Dft.forEach(t),yPo=r(oxe," \u2014 "),ZG=n(oxe,"A",{href:!0});var Gft=s(ZG);LPo=r(Gft,"RobertaForSequenceClassification"),Gft.forEach(t),xPo=r(oxe," (RoBERTa model)"),oxe.forEach(t),$Po=i(j),$b=n(j,"LI",{});var rxe=s($b);Ime=n(rxe,"STRONG",{});var Oft=s(Ime);kPo=r(Oft,"roformer"),Oft.forEach(t),SPo=r(rxe," \u2014 "),eO=n(rxe,"A",{href:!0});var Vft=s(eO);RPo=r(Vft,"RoFormerForSequenceClassification"),Vft.forEach(t),PPo=r(rxe," (RoFormer model)"),rxe.forEach(t),BPo=i(j),kb=n(j,"LI",{});var txe=s(kb);Nme=n(txe,"STRONG",{});var Xft=s(Nme);IPo=r(Xft,"squeezebert"),Xft.forEach(t),NPo=r(txe," \u2014 "),oO=n(txe,"A",{href:!0});var zft=s(oO);qPo=r(zft,"SqueezeBertForSequenceClassification"),zft.forEach(t),jPo=r(txe," (SqueezeBERT model)"),txe.forEach(t),DPo=i(j),Sb=n(j,"LI",{});var axe=s(Sb);qme=n(axe,"STRONG",{});var Wft=s(qme);GPo=r(Wft,"tapas"),Wft.forEach(t),OPo=r(axe," \u2014 "),rO=n(axe,"A",{href:!0});var Qft=s(rO);VPo=r(Qft,"TapasForSequenceClassification"),Qft.forEach(t),XPo=r(axe," (TAPAS model)"),axe.forEach(t),zPo=i(j),Rb=n(j,"LI",{});var nxe=s(Rb);jme=n(nxe,"STRONG",{});var Hft=s(jme);WPo=r(Hft,"transfo-xl"),Hft.forEach(t),QPo=r(nxe," \u2014 "),tO=n(nxe,"A",{href:!0});var Uft=s(tO);HPo=r(Uft,"TransfoXLForSequenceClassification"),Uft.forEach(t),UPo=r(nxe," (Transformer-XL model)"),nxe.forEach(t),JPo=i(j),Pb=n(j,"LI",{});var sxe=s(Pb);Dme=n(sxe,"STRONG",{});var Jft=s(Dme);YPo=r(Jft,"xlm"),Jft.forEach(t),KPo=r(sxe," \u2014 "),aO=n(sxe,"A",{href:!0});var Yft=s(aO);ZPo=r(Yft,"XLMForSequenceClassification"),Yft.forEach(t),eBo=r(sxe," (XLM model)"),sxe.forEach(t),oBo=i(j),Bb=n(j,"LI",{});var lxe=s(Bb);Gme=n(lxe,"STRONG",{});var Kft=s(Gme);rBo=r(Kft,"xlm-roberta"),Kft.forEach(t),tBo=r(lxe," \u2014 "),nO=n(lxe,"A",{href:!0});var Zft=s(nO);aBo=r(Zft,"XLMRobertaForSequenceClassification"),Zft.forEach(t),nBo=r(lxe," (XLM-RoBERTa model)"),lxe.forEach(t),sBo=i(j),Ib=n(j,"LI",{});var ixe=s(Ib);Ome=n(ixe,"STRONG",{});var emt=s(Ome);lBo=r(emt,"xlm-roberta-xl"),emt.forEach(t),iBo=r(ixe," \u2014 "),sO=n(ixe,"A",{href:!0});var omt=s(sO);dBo=r(omt,"XLMRobertaXLForSequenceClassification"),omt.forEach(t),cBo=r(ixe," (XLM-RoBERTa-XL model)"),ixe.forEach(t),fBo=i(j),Nb=n(j,"LI",{});var dxe=s(Nb);Vme=n(dxe,"STRONG",{});var rmt=s(Vme);mBo=r(rmt,"xlnet"),rmt.forEach(t),gBo=r(dxe," \u2014 "),lO=n(dxe,"A",{href:!0});var tmt=s(lO);hBo=r(tmt,"XLNetForSequenceClassification"),tmt.forEach(t),pBo=r(dxe," (XLNet model)"),dxe.forEach(t),_Bo=i(j),qb=n(j,"LI",{});var cxe=s(qb);Xme=n(cxe,"STRONG",{});var amt=s(Xme);uBo=r(amt,"yoso"),amt.forEach(t),bBo=r(cxe," \u2014 "),iO=n(cxe,"A",{href:!0});var nmt=s(iO);vBo=r(nmt,"YosoForSequenceClassification"),nmt.forEach(t),FBo=r(cxe," (YOSO model)"),cxe.forEach(t),j.forEach(t),TBo=i(sa),jb=n(sa,"P",{});var fxe=s(jb);MBo=r(fxe,"The model is set in evaluation mode by default using "),zme=n(fxe,"CODE",{});var smt=s(zme);EBo=r(smt,"model.eval()"),smt.forEach(t),CBo=r(fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wme=n(fxe,"CODE",{});var lmt=s(Wme);wBo=r(lmt,"model.train()"),lmt.forEach(t),fxe.forEach(t),ABo=i(sa),T(Db.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),jqe=i(f),Vi=n(f,"H2",{class:!0});var VDe=s(Vi);Gb=n(VDe,"A",{id:!0,class:!0,href:!0});var imt=s(Gb);Qme=n(imt,"SPAN",{});var dmt=s(Qme);T(RL.$$.fragment,dmt),dmt.forEach(t),imt.forEach(t),yBo=i(VDe),Hme=n(VDe,"SPAN",{});var cmt=s(Hme);LBo=r(cmt,"AutoModelForMultipleChoice"),cmt.forEach(t),VDe.forEach(t),Dqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(PL.$$.fragment,Qs),xBo=i(Qs),Xi=n(Qs,"P",{});var BZ=s(Xi);$Bo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dO=n(BZ,"A",{href:!0});var fmt=s(dO);kBo=r(fmt,"from_pretrained()"),fmt.forEach(t),SBo=r(BZ," class method or the "),cO=n(BZ,"A",{href:!0});var mmt=s(cO);RBo=r(mmt,"from_config()"),mmt.forEach(t),PBo=r(BZ,` class
method.`),BZ.forEach(t),BBo=i(Qs),BL=n(Qs,"P",{});var XDe=s(BL);IBo=r(XDe,"This class cannot be instantiated directly using "),Ume=n(XDe,"CODE",{});var gmt=s(Ume);NBo=r(gmt,"__init__()"),gmt.forEach(t),qBo=r(XDe," (throws an error)."),XDe.forEach(t),jBo=i(Qs),dt=n(Qs,"DIV",{class:!0});var Qw=s(dt);T(IL.$$.fragment,Qw),DBo=i(Qw),Jme=n(Qw,"P",{});var hmt=s(Jme);GBo=r(hmt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hmt.forEach(t),OBo=i(Qw),zi=n(Qw,"P",{});var IZ=s(zi);VBo=r(IZ,`Note:
Loading a model from its configuration file does `),Yme=n(IZ,"STRONG",{});var pmt=s(Yme);XBo=r(pmt,"not"),pmt.forEach(t),zBo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fO=n(IZ,"A",{href:!0});var _mt=s(fO);WBo=r(_mt,"from_pretrained()"),_mt.forEach(t),QBo=r(IZ," to load the model weights."),IZ.forEach(t),HBo=i(Qw),T(Ob.$$.fragment,Qw),Qw.forEach(t),UBo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(NL.$$.fragment,la),JBo=i(la),Kme=n(la,"P",{});var umt=s(Kme);YBo=r(umt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),umt.forEach(t),KBo=i(la),Pa=n(la,"P",{});var Hw=s(Pa);ZBo=r(Hw,"The model class to instantiate is selected based on the "),Zme=n(Hw,"CODE",{});var bmt=s(Zme);eIo=r(bmt,"model_type"),bmt.forEach(t),oIo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),ege=n(Hw,"CODE",{});var vmt=s(ege);rIo=r(vmt,"pretrained_model_name_or_path"),vmt.forEach(t),tIo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(Hw,"CODE",{});var Fmt=s(oge);aIo=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),nIo=r(Hw,":"),Hw.forEach(t),sIo=i(la),K=n(la,"UL",{});var ee=s(K);Vb=n(ee,"LI",{});var mxe=s(Vb);rge=n(mxe,"STRONG",{});var Tmt=s(rge);lIo=r(Tmt,"albert"),Tmt.forEach(t),iIo=r(mxe," \u2014 "),mO=n(mxe,"A",{href:!0});var Mmt=s(mO);dIo=r(Mmt,"AlbertForMultipleChoice"),Mmt.forEach(t),cIo=r(mxe," (ALBERT model)"),mxe.forEach(t),fIo=i(ee),Xb=n(ee,"LI",{});var gxe=s(Xb);tge=n(gxe,"STRONG",{});var Emt=s(tge);mIo=r(Emt,"bert"),Emt.forEach(t),gIo=r(gxe," \u2014 "),gO=n(gxe,"A",{href:!0});var Cmt=s(gO);hIo=r(Cmt,"BertForMultipleChoice"),Cmt.forEach(t),pIo=r(gxe," (BERT model)"),gxe.forEach(t),_Io=i(ee),zb=n(ee,"LI",{});var hxe=s(zb);age=n(hxe,"STRONG",{});var wmt=s(age);uIo=r(wmt,"big_bird"),wmt.forEach(t),bIo=r(hxe," \u2014 "),hO=n(hxe,"A",{href:!0});var Amt=s(hO);vIo=r(Amt,"BigBirdForMultipleChoice"),Amt.forEach(t),FIo=r(hxe," (BigBird model)"),hxe.forEach(t),TIo=i(ee),Wb=n(ee,"LI",{});var pxe=s(Wb);nge=n(pxe,"STRONG",{});var ymt=s(nge);MIo=r(ymt,"camembert"),ymt.forEach(t),EIo=r(pxe," \u2014 "),pO=n(pxe,"A",{href:!0});var Lmt=s(pO);CIo=r(Lmt,"CamembertForMultipleChoice"),Lmt.forEach(t),wIo=r(pxe," (CamemBERT model)"),pxe.forEach(t),AIo=i(ee),Qb=n(ee,"LI",{});var _xe=s(Qb);sge=n(_xe,"STRONG",{});var xmt=s(sge);yIo=r(xmt,"canine"),xmt.forEach(t),LIo=r(_xe," \u2014 "),_O=n(_xe,"A",{href:!0});var $mt=s(_O);xIo=r($mt,"CanineForMultipleChoice"),$mt.forEach(t),$Io=r(_xe," (Canine model)"),_xe.forEach(t),kIo=i(ee),Hb=n(ee,"LI",{});var uxe=s(Hb);lge=n(uxe,"STRONG",{});var kmt=s(lge);SIo=r(kmt,"convbert"),kmt.forEach(t),RIo=r(uxe," \u2014 "),uO=n(uxe,"A",{href:!0});var Smt=s(uO);PIo=r(Smt,"ConvBertForMultipleChoice"),Smt.forEach(t),BIo=r(uxe," (ConvBERT model)"),uxe.forEach(t),IIo=i(ee),Ub=n(ee,"LI",{});var bxe=s(Ub);ige=n(bxe,"STRONG",{});var Rmt=s(ige);NIo=r(Rmt,"data2vec-text"),Rmt.forEach(t),qIo=r(bxe," \u2014 "),bO=n(bxe,"A",{href:!0});var Pmt=s(bO);jIo=r(Pmt,"Data2VecTextForMultipleChoice"),Pmt.forEach(t),DIo=r(bxe," (Data2VecText model)"),bxe.forEach(t),GIo=i(ee),Jb=n(ee,"LI",{});var vxe=s(Jb);dge=n(vxe,"STRONG",{});var Bmt=s(dge);OIo=r(Bmt,"deberta-v2"),Bmt.forEach(t),VIo=r(vxe," \u2014 "),vO=n(vxe,"A",{href:!0});var Imt=s(vO);XIo=r(Imt,"DebertaV2ForMultipleChoice"),Imt.forEach(t),zIo=r(vxe," (DeBERTa-v2 model)"),vxe.forEach(t),WIo=i(ee),Yb=n(ee,"LI",{});var Fxe=s(Yb);cge=n(Fxe,"STRONG",{});var Nmt=s(cge);QIo=r(Nmt,"distilbert"),Nmt.forEach(t),HIo=r(Fxe," \u2014 "),FO=n(Fxe,"A",{href:!0});var qmt=s(FO);UIo=r(qmt,"DistilBertForMultipleChoice"),qmt.forEach(t),JIo=r(Fxe," (DistilBERT model)"),Fxe.forEach(t),YIo=i(ee),Kb=n(ee,"LI",{});var Txe=s(Kb);fge=n(Txe,"STRONG",{});var jmt=s(fge);KIo=r(jmt,"electra"),jmt.forEach(t),ZIo=r(Txe," \u2014 "),TO=n(Txe,"A",{href:!0});var Dmt=s(TO);eNo=r(Dmt,"ElectraForMultipleChoice"),Dmt.forEach(t),oNo=r(Txe," (ELECTRA model)"),Txe.forEach(t),rNo=i(ee),Zb=n(ee,"LI",{});var Mxe=s(Zb);mge=n(Mxe,"STRONG",{});var Gmt=s(mge);tNo=r(Gmt,"flaubert"),Gmt.forEach(t),aNo=r(Mxe," \u2014 "),MO=n(Mxe,"A",{href:!0});var Omt=s(MO);nNo=r(Omt,"FlaubertForMultipleChoice"),Omt.forEach(t),sNo=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),lNo=i(ee),e4=n(ee,"LI",{});var Exe=s(e4);gge=n(Exe,"STRONG",{});var Vmt=s(gge);iNo=r(Vmt,"fnet"),Vmt.forEach(t),dNo=r(Exe," \u2014 "),EO=n(Exe,"A",{href:!0});var Xmt=s(EO);cNo=r(Xmt,"FNetForMultipleChoice"),Xmt.forEach(t),fNo=r(Exe," (FNet model)"),Exe.forEach(t),mNo=i(ee),o4=n(ee,"LI",{});var Cxe=s(o4);hge=n(Cxe,"STRONG",{});var zmt=s(hge);gNo=r(zmt,"funnel"),zmt.forEach(t),hNo=r(Cxe," \u2014 "),CO=n(Cxe,"A",{href:!0});var Wmt=s(CO);pNo=r(Wmt,"FunnelForMultipleChoice"),Wmt.forEach(t),_No=r(Cxe," (Funnel Transformer model)"),Cxe.forEach(t),uNo=i(ee),r4=n(ee,"LI",{});var wxe=s(r4);pge=n(wxe,"STRONG",{});var Qmt=s(pge);bNo=r(Qmt,"ibert"),Qmt.forEach(t),vNo=r(wxe," \u2014 "),wO=n(wxe,"A",{href:!0});var Hmt=s(wO);FNo=r(Hmt,"IBertForMultipleChoice"),Hmt.forEach(t),TNo=r(wxe," (I-BERT model)"),wxe.forEach(t),MNo=i(ee),t4=n(ee,"LI",{});var Axe=s(t4);_ge=n(Axe,"STRONG",{});var Umt=s(_ge);ENo=r(Umt,"longformer"),Umt.forEach(t),CNo=r(Axe," \u2014 "),AO=n(Axe,"A",{href:!0});var Jmt=s(AO);wNo=r(Jmt,"LongformerForMultipleChoice"),Jmt.forEach(t),ANo=r(Axe," (Longformer model)"),Axe.forEach(t),yNo=i(ee),a4=n(ee,"LI",{});var yxe=s(a4);uge=n(yxe,"STRONG",{});var Ymt=s(uge);LNo=r(Ymt,"megatron-bert"),Ymt.forEach(t),xNo=r(yxe," \u2014 "),yO=n(yxe,"A",{href:!0});var Kmt=s(yO);$No=r(Kmt,"MegatronBertForMultipleChoice"),Kmt.forEach(t),kNo=r(yxe," (MegatronBert model)"),yxe.forEach(t),SNo=i(ee),n4=n(ee,"LI",{});var Lxe=s(n4);bge=n(Lxe,"STRONG",{});var Zmt=s(bge);RNo=r(Zmt,"mobilebert"),Zmt.forEach(t),PNo=r(Lxe," \u2014 "),LO=n(Lxe,"A",{href:!0});var egt=s(LO);BNo=r(egt,"MobileBertForMultipleChoice"),egt.forEach(t),INo=r(Lxe," (MobileBERT model)"),Lxe.forEach(t),NNo=i(ee),s4=n(ee,"LI",{});var xxe=s(s4);vge=n(xxe,"STRONG",{});var ogt=s(vge);qNo=r(ogt,"mpnet"),ogt.forEach(t),jNo=r(xxe," \u2014 "),xO=n(xxe,"A",{href:!0});var rgt=s(xO);DNo=r(rgt,"MPNetForMultipleChoice"),rgt.forEach(t),GNo=r(xxe," (MPNet model)"),xxe.forEach(t),ONo=i(ee),l4=n(ee,"LI",{});var $xe=s(l4);Fge=n($xe,"STRONG",{});var tgt=s(Fge);VNo=r(tgt,"nystromformer"),tgt.forEach(t),XNo=r($xe," \u2014 "),$O=n($xe,"A",{href:!0});var agt=s($O);zNo=r(agt,"NystromformerForMultipleChoice"),agt.forEach(t),WNo=r($xe," (Nystromformer model)"),$xe.forEach(t),QNo=i(ee),i4=n(ee,"LI",{});var kxe=s(i4);Tge=n(kxe,"STRONG",{});var ngt=s(Tge);HNo=r(ngt,"qdqbert"),ngt.forEach(t),UNo=r(kxe," \u2014 "),kO=n(kxe,"A",{href:!0});var sgt=s(kO);JNo=r(sgt,"QDQBertForMultipleChoice"),sgt.forEach(t),YNo=r(kxe," (QDQBert model)"),kxe.forEach(t),KNo=i(ee),d4=n(ee,"LI",{});var Sxe=s(d4);Mge=n(Sxe,"STRONG",{});var lgt=s(Mge);ZNo=r(lgt,"rembert"),lgt.forEach(t),eqo=r(Sxe," \u2014 "),SO=n(Sxe,"A",{href:!0});var igt=s(SO);oqo=r(igt,"RemBertForMultipleChoice"),igt.forEach(t),rqo=r(Sxe," (RemBERT model)"),Sxe.forEach(t),tqo=i(ee),c4=n(ee,"LI",{});var Rxe=s(c4);Ege=n(Rxe,"STRONG",{});var dgt=s(Ege);aqo=r(dgt,"roberta"),dgt.forEach(t),nqo=r(Rxe," \u2014 "),RO=n(Rxe,"A",{href:!0});var cgt=s(RO);sqo=r(cgt,"RobertaForMultipleChoice"),cgt.forEach(t),lqo=r(Rxe," (RoBERTa model)"),Rxe.forEach(t),iqo=i(ee),f4=n(ee,"LI",{});var Pxe=s(f4);Cge=n(Pxe,"STRONG",{});var fgt=s(Cge);dqo=r(fgt,"roformer"),fgt.forEach(t),cqo=r(Pxe," \u2014 "),PO=n(Pxe,"A",{href:!0});var mgt=s(PO);fqo=r(mgt,"RoFormerForMultipleChoice"),mgt.forEach(t),mqo=r(Pxe," (RoFormer model)"),Pxe.forEach(t),gqo=i(ee),m4=n(ee,"LI",{});var Bxe=s(m4);wge=n(Bxe,"STRONG",{});var ggt=s(wge);hqo=r(ggt,"squeezebert"),ggt.forEach(t),pqo=r(Bxe," \u2014 "),BO=n(Bxe,"A",{href:!0});var hgt=s(BO);_qo=r(hgt,"SqueezeBertForMultipleChoice"),hgt.forEach(t),uqo=r(Bxe," (SqueezeBERT model)"),Bxe.forEach(t),bqo=i(ee),g4=n(ee,"LI",{});var Ixe=s(g4);Age=n(Ixe,"STRONG",{});var pgt=s(Age);vqo=r(pgt,"xlm"),pgt.forEach(t),Fqo=r(Ixe," \u2014 "),IO=n(Ixe,"A",{href:!0});var _gt=s(IO);Tqo=r(_gt,"XLMForMultipleChoice"),_gt.forEach(t),Mqo=r(Ixe," (XLM model)"),Ixe.forEach(t),Eqo=i(ee),h4=n(ee,"LI",{});var Nxe=s(h4);yge=n(Nxe,"STRONG",{});var ugt=s(yge);Cqo=r(ugt,"xlm-roberta"),ugt.forEach(t),wqo=r(Nxe," \u2014 "),NO=n(Nxe,"A",{href:!0});var bgt=s(NO);Aqo=r(bgt,"XLMRobertaForMultipleChoice"),bgt.forEach(t),yqo=r(Nxe," (XLM-RoBERTa model)"),Nxe.forEach(t),Lqo=i(ee),p4=n(ee,"LI",{});var qxe=s(p4);Lge=n(qxe,"STRONG",{});var vgt=s(Lge);xqo=r(vgt,"xlm-roberta-xl"),vgt.forEach(t),$qo=r(qxe," \u2014 "),qO=n(qxe,"A",{href:!0});var Fgt=s(qO);kqo=r(Fgt,"XLMRobertaXLForMultipleChoice"),Fgt.forEach(t),Sqo=r(qxe," (XLM-RoBERTa-XL model)"),qxe.forEach(t),Rqo=i(ee),_4=n(ee,"LI",{});var jxe=s(_4);xge=n(jxe,"STRONG",{});var Tgt=s(xge);Pqo=r(Tgt,"xlnet"),Tgt.forEach(t),Bqo=r(jxe," \u2014 "),jO=n(jxe,"A",{href:!0});var Mgt=s(jO);Iqo=r(Mgt,"XLNetForMultipleChoice"),Mgt.forEach(t),Nqo=r(jxe," (XLNet model)"),jxe.forEach(t),qqo=i(ee),u4=n(ee,"LI",{});var Dxe=s(u4);$ge=n(Dxe,"STRONG",{});var Egt=s($ge);jqo=r(Egt,"yoso"),Egt.forEach(t),Dqo=r(Dxe," \u2014 "),DO=n(Dxe,"A",{href:!0});var Cgt=s(DO);Gqo=r(Cgt,"YosoForMultipleChoice"),Cgt.forEach(t),Oqo=r(Dxe," (YOSO model)"),Dxe.forEach(t),ee.forEach(t),Vqo=i(la),b4=n(la,"P",{});var Gxe=s(b4);Xqo=r(Gxe,"The model is set in evaluation mode by default using "),kge=n(Gxe,"CODE",{});var wgt=s(kge);zqo=r(wgt,"model.eval()"),wgt.forEach(t),Wqo=r(Gxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=n(Gxe,"CODE",{});var Agt=s(Sge);Qqo=r(Agt,"model.train()"),Agt.forEach(t),Gxe.forEach(t),Hqo=i(la),T(v4.$$.fragment,la),la.forEach(t),Qs.forEach(t),Gqe=i(f),Wi=n(f,"H2",{class:!0});var zDe=s(Wi);F4=n(zDe,"A",{id:!0,class:!0,href:!0});var ygt=s(F4);Rge=n(ygt,"SPAN",{});var Lgt=s(Rge);T(qL.$$.fragment,Lgt),Lgt.forEach(t),ygt.forEach(t),Uqo=i(zDe),Pge=n(zDe,"SPAN",{});var xgt=s(Pge);Jqo=r(xgt,"AutoModelForNextSentencePrediction"),xgt.forEach(t),zDe.forEach(t),Oqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(jL.$$.fragment,Hs),Yqo=i(Hs),Qi=n(Hs,"P",{});var NZ=s(Qi);Kqo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GO=n(NZ,"A",{href:!0});var $gt=s(GO);Zqo=r($gt,"from_pretrained()"),$gt.forEach(t),ejo=r(NZ," class method or the "),OO=n(NZ,"A",{href:!0});var kgt=s(OO);ojo=r(kgt,"from_config()"),kgt.forEach(t),rjo=r(NZ,` class
method.`),NZ.forEach(t),tjo=i(Hs),DL=n(Hs,"P",{});var WDe=s(DL);ajo=r(WDe,"This class cannot be instantiated directly using "),Bge=n(WDe,"CODE",{});var Sgt=s(Bge);njo=r(Sgt,"__init__()"),Sgt.forEach(t),sjo=r(WDe," (throws an error)."),WDe.forEach(t),ljo=i(Hs),ct=n(Hs,"DIV",{class:!0});var Uw=s(ct);T(GL.$$.fragment,Uw),ijo=i(Uw),Ige=n(Uw,"P",{});var Rgt=s(Ige);djo=r(Rgt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Rgt.forEach(t),cjo=i(Uw),Hi=n(Uw,"P",{});var qZ=s(Hi);fjo=r(qZ,`Note:
Loading a model from its configuration file does `),Nge=n(qZ,"STRONG",{});var Pgt=s(Nge);mjo=r(Pgt,"not"),Pgt.forEach(t),gjo=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(qZ,"A",{href:!0});var Bgt=s(VO);hjo=r(Bgt,"from_pretrained()"),Bgt.forEach(t),pjo=r(qZ," to load the model weights."),qZ.forEach(t),_jo=i(Uw),T(T4.$$.fragment,Uw),Uw.forEach(t),ujo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(OL.$$.fragment,ia),bjo=i(ia),qge=n(ia,"P",{});var Igt=s(qge);vjo=r(Igt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Igt.forEach(t),Fjo=i(ia),Ba=n(ia,"P",{});var Jw=s(Ba);Tjo=r(Jw,"The model class to instantiate is selected based on the "),jge=n(Jw,"CODE",{});var Ngt=s(jge);Mjo=r(Ngt,"model_type"),Ngt.forEach(t),Ejo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),Dge=n(Jw,"CODE",{});var qgt=s(Dge);Cjo=r(qgt,"pretrained_model_name_or_path"),qgt.forEach(t),wjo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=n(Jw,"CODE",{});var jgt=s(Gge);Ajo=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),yjo=r(Jw,":"),Jw.forEach(t),Ljo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);M4=n(Us,"LI",{});var Oxe=s(M4);Oge=n(Oxe,"STRONG",{});var Dgt=s(Oge);xjo=r(Dgt,"bert"),Dgt.forEach(t),$jo=r(Oxe," \u2014 "),XO=n(Oxe,"A",{href:!0});var Ggt=s(XO);kjo=r(Ggt,"BertForNextSentencePrediction"),Ggt.forEach(t),Sjo=r(Oxe," (BERT model)"),Oxe.forEach(t),Rjo=i(Us),E4=n(Us,"LI",{});var Vxe=s(E4);Vge=n(Vxe,"STRONG",{});var Ogt=s(Vge);Pjo=r(Ogt,"fnet"),Ogt.forEach(t),Bjo=r(Vxe," \u2014 "),zO=n(Vxe,"A",{href:!0});var Vgt=s(zO);Ijo=r(Vgt,"FNetForNextSentencePrediction"),Vgt.forEach(t),Njo=r(Vxe," (FNet model)"),Vxe.forEach(t),qjo=i(Us),C4=n(Us,"LI",{});var Xxe=s(C4);Xge=n(Xxe,"STRONG",{});var Xgt=s(Xge);jjo=r(Xgt,"megatron-bert"),Xgt.forEach(t),Djo=r(Xxe," \u2014 "),WO=n(Xxe,"A",{href:!0});var zgt=s(WO);Gjo=r(zgt,"MegatronBertForNextSentencePrediction"),zgt.forEach(t),Ojo=r(Xxe," (MegatronBert model)"),Xxe.forEach(t),Vjo=i(Us),w4=n(Us,"LI",{});var zxe=s(w4);zge=n(zxe,"STRONG",{});var Wgt=s(zge);Xjo=r(Wgt,"mobilebert"),Wgt.forEach(t),zjo=r(zxe," \u2014 "),QO=n(zxe,"A",{href:!0});var Qgt=s(QO);Wjo=r(Qgt,"MobileBertForNextSentencePrediction"),Qgt.forEach(t),Qjo=r(zxe," (MobileBERT model)"),zxe.forEach(t),Hjo=i(Us),A4=n(Us,"LI",{});var Wxe=s(A4);Wge=n(Wxe,"STRONG",{});var Hgt=s(Wge);Ujo=r(Hgt,"qdqbert"),Hgt.forEach(t),Jjo=r(Wxe," \u2014 "),HO=n(Wxe,"A",{href:!0});var Ugt=s(HO);Yjo=r(Ugt,"QDQBertForNextSentencePrediction"),Ugt.forEach(t),Kjo=r(Wxe," (QDQBert model)"),Wxe.forEach(t),Us.forEach(t),Zjo=i(ia),y4=n(ia,"P",{});var Qxe=s(y4);eDo=r(Qxe,"The model is set in evaluation mode by default using "),Qge=n(Qxe,"CODE",{});var Jgt=s(Qge);oDo=r(Jgt,"model.eval()"),Jgt.forEach(t),rDo=r(Qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=n(Qxe,"CODE",{});var Ygt=s(Hge);tDo=r(Ygt,"model.train()"),Ygt.forEach(t),Qxe.forEach(t),aDo=i(ia),T(L4.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),Vqe=i(f),Ui=n(f,"H2",{class:!0});var QDe=s(Ui);x4=n(QDe,"A",{id:!0,class:!0,href:!0});var Kgt=s(x4);Uge=n(Kgt,"SPAN",{});var Zgt=s(Uge);T(VL.$$.fragment,Zgt),Zgt.forEach(t),Kgt.forEach(t),nDo=i(QDe),Jge=n(QDe,"SPAN",{});var eht=s(Jge);sDo=r(eht,"AutoModelForTokenClassification"),eht.forEach(t),QDe.forEach(t),Xqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(XL.$$.fragment,Js),lDo=i(Js),Ji=n(Js,"P",{});var jZ=s(Ji);iDo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UO=n(jZ,"A",{href:!0});var oht=s(UO);dDo=r(oht,"from_pretrained()"),oht.forEach(t),cDo=r(jZ," class method or the "),JO=n(jZ,"A",{href:!0});var rht=s(JO);fDo=r(rht,"from_config()"),rht.forEach(t),mDo=r(jZ,` class
method.`),jZ.forEach(t),gDo=i(Js),zL=n(Js,"P",{});var HDe=s(zL);hDo=r(HDe,"This class cannot be instantiated directly using "),Yge=n(HDe,"CODE",{});var tht=s(Yge);pDo=r(tht,"__init__()"),tht.forEach(t),_Do=r(HDe," (throws an error)."),HDe.forEach(t),uDo=i(Js),ft=n(Js,"DIV",{class:!0});var Yw=s(ft);T(WL.$$.fragment,Yw),bDo=i(Yw),Kge=n(Yw,"P",{});var aht=s(Kge);vDo=r(aht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aht.forEach(t),FDo=i(Yw),Yi=n(Yw,"P",{});var DZ=s(Yi);TDo=r(DZ,`Note:
Loading a model from its configuration file does `),Zge=n(DZ,"STRONG",{});var nht=s(Zge);MDo=r(nht,"not"),nht.forEach(t),EDo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=n(DZ,"A",{href:!0});var sht=s(YO);CDo=r(sht,"from_pretrained()"),sht.forEach(t),wDo=r(DZ," to load the model weights."),DZ.forEach(t),ADo=i(Yw),T($4.$$.fragment,Yw),Yw.forEach(t),yDo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(QL.$$.fragment,da),LDo=i(da),ehe=n(da,"P",{});var lht=s(ehe);xDo=r(lht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lht.forEach(t),$Do=i(da),Ia=n(da,"P",{});var Kw=s(Ia);kDo=r(Kw,"The model class to instantiate is selected based on the "),ohe=n(Kw,"CODE",{});var iht=s(ohe);SDo=r(iht,"model_type"),iht.forEach(t),RDo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),rhe=n(Kw,"CODE",{});var dht=s(rhe);PDo=r(dht,"pretrained_model_name_or_path"),dht.forEach(t),BDo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(Kw,"CODE",{});var cht=s(the);IDo=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),NDo=r(Kw,":"),Kw.forEach(t),qDo=i(da),H=n(da,"UL",{});var J=s(H);k4=n(J,"LI",{});var Hxe=s(k4);ahe=n(Hxe,"STRONG",{});var fht=s(ahe);jDo=r(fht,"albert"),fht.forEach(t),DDo=r(Hxe," \u2014 "),KO=n(Hxe,"A",{href:!0});var mht=s(KO);GDo=r(mht,"AlbertForTokenClassification"),mht.forEach(t),ODo=r(Hxe," (ALBERT model)"),Hxe.forEach(t),VDo=i(J),S4=n(J,"LI",{});var Uxe=s(S4);nhe=n(Uxe,"STRONG",{});var ght=s(nhe);XDo=r(ght,"bert"),ght.forEach(t),zDo=r(Uxe," \u2014 "),ZO=n(Uxe,"A",{href:!0});var hht=s(ZO);WDo=r(hht,"BertForTokenClassification"),hht.forEach(t),QDo=r(Uxe," (BERT model)"),Uxe.forEach(t),HDo=i(J),R4=n(J,"LI",{});var Jxe=s(R4);she=n(Jxe,"STRONG",{});var pht=s(she);UDo=r(pht,"big_bird"),pht.forEach(t),JDo=r(Jxe," \u2014 "),eV=n(Jxe,"A",{href:!0});var _ht=s(eV);YDo=r(_ht,"BigBirdForTokenClassification"),_ht.forEach(t),KDo=r(Jxe," (BigBird model)"),Jxe.forEach(t),ZDo=i(J),P4=n(J,"LI",{});var Yxe=s(P4);lhe=n(Yxe,"STRONG",{});var uht=s(lhe);eGo=r(uht,"camembert"),uht.forEach(t),oGo=r(Yxe," \u2014 "),oV=n(Yxe,"A",{href:!0});var bht=s(oV);rGo=r(bht,"CamembertForTokenClassification"),bht.forEach(t),tGo=r(Yxe," (CamemBERT model)"),Yxe.forEach(t),aGo=i(J),B4=n(J,"LI",{});var Kxe=s(B4);ihe=n(Kxe,"STRONG",{});var vht=s(ihe);nGo=r(vht,"canine"),vht.forEach(t),sGo=r(Kxe," \u2014 "),rV=n(Kxe,"A",{href:!0});var Fht=s(rV);lGo=r(Fht,"CanineForTokenClassification"),Fht.forEach(t),iGo=r(Kxe," (Canine model)"),Kxe.forEach(t),dGo=i(J),I4=n(J,"LI",{});var Zxe=s(I4);dhe=n(Zxe,"STRONG",{});var Tht=s(dhe);cGo=r(Tht,"convbert"),Tht.forEach(t),fGo=r(Zxe," \u2014 "),tV=n(Zxe,"A",{href:!0});var Mht=s(tV);mGo=r(Mht,"ConvBertForTokenClassification"),Mht.forEach(t),gGo=r(Zxe," (ConvBERT model)"),Zxe.forEach(t),hGo=i(J),N4=n(J,"LI",{});var e$e=s(N4);che=n(e$e,"STRONG",{});var Eht=s(che);pGo=r(Eht,"data2vec-text"),Eht.forEach(t),_Go=r(e$e," \u2014 "),aV=n(e$e,"A",{href:!0});var Cht=s(aV);uGo=r(Cht,"Data2VecTextForTokenClassification"),Cht.forEach(t),bGo=r(e$e," (Data2VecText model)"),e$e.forEach(t),vGo=i(J),q4=n(J,"LI",{});var o$e=s(q4);fhe=n(o$e,"STRONG",{});var wht=s(fhe);FGo=r(wht,"deberta"),wht.forEach(t),TGo=r(o$e," \u2014 "),nV=n(o$e,"A",{href:!0});var Aht=s(nV);MGo=r(Aht,"DebertaForTokenClassification"),Aht.forEach(t),EGo=r(o$e," (DeBERTa model)"),o$e.forEach(t),CGo=i(J),j4=n(J,"LI",{});var r$e=s(j4);mhe=n(r$e,"STRONG",{});var yht=s(mhe);wGo=r(yht,"deberta-v2"),yht.forEach(t),AGo=r(r$e," \u2014 "),sV=n(r$e,"A",{href:!0});var Lht=s(sV);yGo=r(Lht,"DebertaV2ForTokenClassification"),Lht.forEach(t),LGo=r(r$e," (DeBERTa-v2 model)"),r$e.forEach(t),xGo=i(J),D4=n(J,"LI",{});var t$e=s(D4);ghe=n(t$e,"STRONG",{});var xht=s(ghe);$Go=r(xht,"distilbert"),xht.forEach(t),kGo=r(t$e," \u2014 "),lV=n(t$e,"A",{href:!0});var $ht=s(lV);SGo=r($ht,"DistilBertForTokenClassification"),$ht.forEach(t),RGo=r(t$e," (DistilBERT model)"),t$e.forEach(t),PGo=i(J),G4=n(J,"LI",{});var a$e=s(G4);hhe=n(a$e,"STRONG",{});var kht=s(hhe);BGo=r(kht,"electra"),kht.forEach(t),IGo=r(a$e," \u2014 "),iV=n(a$e,"A",{href:!0});var Sht=s(iV);NGo=r(Sht,"ElectraForTokenClassification"),Sht.forEach(t),qGo=r(a$e," (ELECTRA model)"),a$e.forEach(t),jGo=i(J),O4=n(J,"LI",{});var n$e=s(O4);phe=n(n$e,"STRONG",{});var Rht=s(phe);DGo=r(Rht,"flaubert"),Rht.forEach(t),GGo=r(n$e," \u2014 "),dV=n(n$e,"A",{href:!0});var Pht=s(dV);OGo=r(Pht,"FlaubertForTokenClassification"),Pht.forEach(t),VGo=r(n$e," (FlauBERT model)"),n$e.forEach(t),XGo=i(J),V4=n(J,"LI",{});var s$e=s(V4);_he=n(s$e,"STRONG",{});var Bht=s(_he);zGo=r(Bht,"fnet"),Bht.forEach(t),WGo=r(s$e," \u2014 "),cV=n(s$e,"A",{href:!0});var Iht=s(cV);QGo=r(Iht,"FNetForTokenClassification"),Iht.forEach(t),HGo=r(s$e," (FNet model)"),s$e.forEach(t),UGo=i(J),X4=n(J,"LI",{});var l$e=s(X4);uhe=n(l$e,"STRONG",{});var Nht=s(uhe);JGo=r(Nht,"funnel"),Nht.forEach(t),YGo=r(l$e," \u2014 "),fV=n(l$e,"A",{href:!0});var qht=s(fV);KGo=r(qht,"FunnelForTokenClassification"),qht.forEach(t),ZGo=r(l$e," (Funnel Transformer model)"),l$e.forEach(t),eOo=i(J),z4=n(J,"LI",{});var i$e=s(z4);bhe=n(i$e,"STRONG",{});var jht=s(bhe);oOo=r(jht,"gpt2"),jht.forEach(t),rOo=r(i$e," \u2014 "),mV=n(i$e,"A",{href:!0});var Dht=s(mV);tOo=r(Dht,"GPT2ForTokenClassification"),Dht.forEach(t),aOo=r(i$e," (OpenAI GPT-2 model)"),i$e.forEach(t),nOo=i(J),W4=n(J,"LI",{});var d$e=s(W4);vhe=n(d$e,"STRONG",{});var Ght=s(vhe);sOo=r(Ght,"ibert"),Ght.forEach(t),lOo=r(d$e," \u2014 "),gV=n(d$e,"A",{href:!0});var Oht=s(gV);iOo=r(Oht,"IBertForTokenClassification"),Oht.forEach(t),dOo=r(d$e," (I-BERT model)"),d$e.forEach(t),cOo=i(J),Q4=n(J,"LI",{});var c$e=s(Q4);Fhe=n(c$e,"STRONG",{});var Vht=s(Fhe);fOo=r(Vht,"layoutlm"),Vht.forEach(t),mOo=r(c$e," \u2014 "),hV=n(c$e,"A",{href:!0});var Xht=s(hV);gOo=r(Xht,"LayoutLMForTokenClassification"),Xht.forEach(t),hOo=r(c$e," (LayoutLM model)"),c$e.forEach(t),pOo=i(J),H4=n(J,"LI",{});var f$e=s(H4);The=n(f$e,"STRONG",{});var zht=s(The);_Oo=r(zht,"layoutlmv2"),zht.forEach(t),uOo=r(f$e," \u2014 "),pV=n(f$e,"A",{href:!0});var Wht=s(pV);bOo=r(Wht,"LayoutLMv2ForTokenClassification"),Wht.forEach(t),vOo=r(f$e," (LayoutLMv2 model)"),f$e.forEach(t),FOo=i(J),U4=n(J,"LI",{});var m$e=s(U4);Mhe=n(m$e,"STRONG",{});var Qht=s(Mhe);TOo=r(Qht,"layoutlmv3"),Qht.forEach(t),MOo=r(m$e," \u2014 "),_V=n(m$e,"A",{href:!0});var Hht=s(_V);EOo=r(Hht,"LayoutLMv3ForTokenClassification"),Hht.forEach(t),COo=r(m$e," (LayoutLMv3 model)"),m$e.forEach(t),wOo=i(J),J4=n(J,"LI",{});var g$e=s(J4);Ehe=n(g$e,"STRONG",{});var Uht=s(Ehe);AOo=r(Uht,"longformer"),Uht.forEach(t),yOo=r(g$e," \u2014 "),uV=n(g$e,"A",{href:!0});var Jht=s(uV);LOo=r(Jht,"LongformerForTokenClassification"),Jht.forEach(t),xOo=r(g$e," (Longformer model)"),g$e.forEach(t),$Oo=i(J),Y4=n(J,"LI",{});var h$e=s(Y4);Che=n(h$e,"STRONG",{});var Yht=s(Che);kOo=r(Yht,"megatron-bert"),Yht.forEach(t),SOo=r(h$e," \u2014 "),bV=n(h$e,"A",{href:!0});var Kht=s(bV);ROo=r(Kht,"MegatronBertForTokenClassification"),Kht.forEach(t),POo=r(h$e," (MegatronBert model)"),h$e.forEach(t),BOo=i(J),K4=n(J,"LI",{});var p$e=s(K4);whe=n(p$e,"STRONG",{});var Zht=s(whe);IOo=r(Zht,"mobilebert"),Zht.forEach(t),NOo=r(p$e," \u2014 "),vV=n(p$e,"A",{href:!0});var ept=s(vV);qOo=r(ept,"MobileBertForTokenClassification"),ept.forEach(t),jOo=r(p$e," (MobileBERT model)"),p$e.forEach(t),DOo=i(J),Z4=n(J,"LI",{});var _$e=s(Z4);Ahe=n(_$e,"STRONG",{});var opt=s(Ahe);GOo=r(opt,"mpnet"),opt.forEach(t),OOo=r(_$e," \u2014 "),FV=n(_$e,"A",{href:!0});var rpt=s(FV);VOo=r(rpt,"MPNetForTokenClassification"),rpt.forEach(t),XOo=r(_$e," (MPNet model)"),_$e.forEach(t),zOo=i(J),ev=n(J,"LI",{});var u$e=s(ev);yhe=n(u$e,"STRONG",{});var tpt=s(yhe);WOo=r(tpt,"nystromformer"),tpt.forEach(t),QOo=r(u$e," \u2014 "),TV=n(u$e,"A",{href:!0});var apt=s(TV);HOo=r(apt,"NystromformerForTokenClassification"),apt.forEach(t),UOo=r(u$e," (Nystromformer model)"),u$e.forEach(t),JOo=i(J),ov=n(J,"LI",{});var b$e=s(ov);Lhe=n(b$e,"STRONG",{});var npt=s(Lhe);YOo=r(npt,"qdqbert"),npt.forEach(t),KOo=r(b$e," \u2014 "),MV=n(b$e,"A",{href:!0});var spt=s(MV);ZOo=r(spt,"QDQBertForTokenClassification"),spt.forEach(t),eVo=r(b$e," (QDQBert model)"),b$e.forEach(t),oVo=i(J),rv=n(J,"LI",{});var v$e=s(rv);xhe=n(v$e,"STRONG",{});var lpt=s(xhe);rVo=r(lpt,"rembert"),lpt.forEach(t),tVo=r(v$e," \u2014 "),EV=n(v$e,"A",{href:!0});var ipt=s(EV);aVo=r(ipt,"RemBertForTokenClassification"),ipt.forEach(t),nVo=r(v$e," (RemBERT model)"),v$e.forEach(t),sVo=i(J),tv=n(J,"LI",{});var F$e=s(tv);$he=n(F$e,"STRONG",{});var dpt=s($he);lVo=r(dpt,"roberta"),dpt.forEach(t),iVo=r(F$e," \u2014 "),CV=n(F$e,"A",{href:!0});var cpt=s(CV);dVo=r(cpt,"RobertaForTokenClassification"),cpt.forEach(t),cVo=r(F$e," (RoBERTa model)"),F$e.forEach(t),fVo=i(J),av=n(J,"LI",{});var T$e=s(av);khe=n(T$e,"STRONG",{});var fpt=s(khe);mVo=r(fpt,"roformer"),fpt.forEach(t),gVo=r(T$e," \u2014 "),wV=n(T$e,"A",{href:!0});var mpt=s(wV);hVo=r(mpt,"RoFormerForTokenClassification"),mpt.forEach(t),pVo=r(T$e," (RoFormer model)"),T$e.forEach(t),_Vo=i(J),nv=n(J,"LI",{});var M$e=s(nv);She=n(M$e,"STRONG",{});var gpt=s(She);uVo=r(gpt,"squeezebert"),gpt.forEach(t),bVo=r(M$e," \u2014 "),AV=n(M$e,"A",{href:!0});var hpt=s(AV);vVo=r(hpt,"SqueezeBertForTokenClassification"),hpt.forEach(t),FVo=r(M$e," (SqueezeBERT model)"),M$e.forEach(t),TVo=i(J),sv=n(J,"LI",{});var E$e=s(sv);Rhe=n(E$e,"STRONG",{});var ppt=s(Rhe);MVo=r(ppt,"xlm"),ppt.forEach(t),EVo=r(E$e," \u2014 "),yV=n(E$e,"A",{href:!0});var _pt=s(yV);CVo=r(_pt,"XLMForTokenClassification"),_pt.forEach(t),wVo=r(E$e," (XLM model)"),E$e.forEach(t),AVo=i(J),lv=n(J,"LI",{});var C$e=s(lv);Phe=n(C$e,"STRONG",{});var upt=s(Phe);yVo=r(upt,"xlm-roberta"),upt.forEach(t),LVo=r(C$e," \u2014 "),LV=n(C$e,"A",{href:!0});var bpt=s(LV);xVo=r(bpt,"XLMRobertaForTokenClassification"),bpt.forEach(t),$Vo=r(C$e," (XLM-RoBERTa model)"),C$e.forEach(t),kVo=i(J),iv=n(J,"LI",{});var w$e=s(iv);Bhe=n(w$e,"STRONG",{});var vpt=s(Bhe);SVo=r(vpt,"xlm-roberta-xl"),vpt.forEach(t),RVo=r(w$e," \u2014 "),xV=n(w$e,"A",{href:!0});var Fpt=s(xV);PVo=r(Fpt,"XLMRobertaXLForTokenClassification"),Fpt.forEach(t),BVo=r(w$e," (XLM-RoBERTa-XL model)"),w$e.forEach(t),IVo=i(J),dv=n(J,"LI",{});var A$e=s(dv);Ihe=n(A$e,"STRONG",{});var Tpt=s(Ihe);NVo=r(Tpt,"xlnet"),Tpt.forEach(t),qVo=r(A$e," \u2014 "),$V=n(A$e,"A",{href:!0});var Mpt=s($V);jVo=r(Mpt,"XLNetForTokenClassification"),Mpt.forEach(t),DVo=r(A$e," (XLNet model)"),A$e.forEach(t),GVo=i(J),cv=n(J,"LI",{});var y$e=s(cv);Nhe=n(y$e,"STRONG",{});var Ept=s(Nhe);OVo=r(Ept,"yoso"),Ept.forEach(t),VVo=r(y$e," \u2014 "),kV=n(y$e,"A",{href:!0});var Cpt=s(kV);XVo=r(Cpt,"YosoForTokenClassification"),Cpt.forEach(t),zVo=r(y$e," (YOSO model)"),y$e.forEach(t),J.forEach(t),WVo=i(da),fv=n(da,"P",{});var L$e=s(fv);QVo=r(L$e,"The model is set in evaluation mode by default using "),qhe=n(L$e,"CODE",{});var wpt=s(qhe);HVo=r(wpt,"model.eval()"),wpt.forEach(t),UVo=r(L$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=n(L$e,"CODE",{});var Apt=s(jhe);JVo=r(Apt,"model.train()"),Apt.forEach(t),L$e.forEach(t),YVo=i(da),T(mv.$$.fragment,da),da.forEach(t),Js.forEach(t),zqe=i(f),Ki=n(f,"H2",{class:!0});var UDe=s(Ki);gv=n(UDe,"A",{id:!0,class:!0,href:!0});var ypt=s(gv);Dhe=n(ypt,"SPAN",{});var Lpt=s(Dhe);T(HL.$$.fragment,Lpt),Lpt.forEach(t),ypt.forEach(t),KVo=i(UDe),Ghe=n(UDe,"SPAN",{});var xpt=s(Ghe);ZVo=r(xpt,"AutoModelForQuestionAnswering"),xpt.forEach(t),UDe.forEach(t),Wqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(UL.$$.fragment,Ys),eXo=i(Ys),Zi=n(Ys,"P",{});var GZ=s(Zi);oXo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SV=n(GZ,"A",{href:!0});var $pt=s(SV);rXo=r($pt,"from_pretrained()"),$pt.forEach(t),tXo=r(GZ," class method or the "),RV=n(GZ,"A",{href:!0});var kpt=s(RV);aXo=r(kpt,"from_config()"),kpt.forEach(t),nXo=r(GZ,` class
method.`),GZ.forEach(t),sXo=i(Ys),JL=n(Ys,"P",{});var JDe=s(JL);lXo=r(JDe,"This class cannot be instantiated directly using "),Ohe=n(JDe,"CODE",{});var Spt=s(Ohe);iXo=r(Spt,"__init__()"),Spt.forEach(t),dXo=r(JDe," (throws an error)."),JDe.forEach(t),cXo=i(Ys),mt=n(Ys,"DIV",{class:!0});var Zw=s(mt);T(YL.$$.fragment,Zw),fXo=i(Zw),Vhe=n(Zw,"P",{});var Rpt=s(Vhe);mXo=r(Rpt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Rpt.forEach(t),gXo=i(Zw),ed=n(Zw,"P",{});var OZ=s(ed);hXo=r(OZ,`Note:
Loading a model from its configuration file does `),Xhe=n(OZ,"STRONG",{});var Ppt=s(Xhe);pXo=r(Ppt,"not"),Ppt.forEach(t),_Xo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(OZ,"A",{href:!0});var Bpt=s(PV);uXo=r(Bpt,"from_pretrained()"),Bpt.forEach(t),bXo=r(OZ," to load the model weights."),OZ.forEach(t),vXo=i(Zw),T(hv.$$.fragment,Zw),Zw.forEach(t),FXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(KL.$$.fragment,ca),TXo=i(ca),zhe=n(ca,"P",{});var Ipt=s(zhe);MXo=r(Ipt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ipt.forEach(t),EXo=i(ca),Na=n(ca,"P",{});var eA=s(Na);CXo=r(eA,"The model class to instantiate is selected based on the "),Whe=n(eA,"CODE",{});var Npt=s(Whe);wXo=r(Npt,"model_type"),Npt.forEach(t),AXo=r(eA,` property of the config object (either
passed as an argument or loaded from `),Qhe=n(eA,"CODE",{});var qpt=s(Qhe);yXo=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),LXo=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(eA,"CODE",{});var jpt=s(Hhe);xXo=r(jpt,"pretrained_model_name_or_path"),jpt.forEach(t),$Xo=r(eA,":"),eA.forEach(t),kXo=i(ca),V=n(ca,"UL",{});var X=s(V);pv=n(X,"LI",{});var x$e=s(pv);Uhe=n(x$e,"STRONG",{});var Dpt=s(Uhe);SXo=r(Dpt,"albert"),Dpt.forEach(t),RXo=r(x$e," \u2014 "),BV=n(x$e,"A",{href:!0});var Gpt=s(BV);PXo=r(Gpt,"AlbertForQuestionAnswering"),Gpt.forEach(t),BXo=r(x$e," (ALBERT model)"),x$e.forEach(t),IXo=i(X),_v=n(X,"LI",{});var $$e=s(_v);Jhe=n($$e,"STRONG",{});var Opt=s(Jhe);NXo=r(Opt,"bart"),Opt.forEach(t),qXo=r($$e," \u2014 "),IV=n($$e,"A",{href:!0});var Vpt=s(IV);jXo=r(Vpt,"BartForQuestionAnswering"),Vpt.forEach(t),DXo=r($$e," (BART model)"),$$e.forEach(t),GXo=i(X),uv=n(X,"LI",{});var k$e=s(uv);Yhe=n(k$e,"STRONG",{});var Xpt=s(Yhe);OXo=r(Xpt,"bert"),Xpt.forEach(t),VXo=r(k$e," \u2014 "),NV=n(k$e,"A",{href:!0});var zpt=s(NV);XXo=r(zpt,"BertForQuestionAnswering"),zpt.forEach(t),zXo=r(k$e," (BERT model)"),k$e.forEach(t),WXo=i(X),bv=n(X,"LI",{});var S$e=s(bv);Khe=n(S$e,"STRONG",{});var Wpt=s(Khe);QXo=r(Wpt,"big_bird"),Wpt.forEach(t),HXo=r(S$e," \u2014 "),qV=n(S$e,"A",{href:!0});var Qpt=s(qV);UXo=r(Qpt,"BigBirdForQuestionAnswering"),Qpt.forEach(t),JXo=r(S$e," (BigBird model)"),S$e.forEach(t),YXo=i(X),vv=n(X,"LI",{});var R$e=s(vv);Zhe=n(R$e,"STRONG",{});var Hpt=s(Zhe);KXo=r(Hpt,"bigbird_pegasus"),Hpt.forEach(t),ZXo=r(R$e," \u2014 "),jV=n(R$e,"A",{href:!0});var Upt=s(jV);ezo=r(Upt,"BigBirdPegasusForQuestionAnswering"),Upt.forEach(t),ozo=r(R$e," (BigBirdPegasus model)"),R$e.forEach(t),rzo=i(X),Fv=n(X,"LI",{});var P$e=s(Fv);epe=n(P$e,"STRONG",{});var Jpt=s(epe);tzo=r(Jpt,"camembert"),Jpt.forEach(t),azo=r(P$e," \u2014 "),DV=n(P$e,"A",{href:!0});var Ypt=s(DV);nzo=r(Ypt,"CamembertForQuestionAnswering"),Ypt.forEach(t),szo=r(P$e," (CamemBERT model)"),P$e.forEach(t),lzo=i(X),Tv=n(X,"LI",{});var B$e=s(Tv);ope=n(B$e,"STRONG",{});var Kpt=s(ope);izo=r(Kpt,"canine"),Kpt.forEach(t),dzo=r(B$e," \u2014 "),GV=n(B$e,"A",{href:!0});var Zpt=s(GV);czo=r(Zpt,"CanineForQuestionAnswering"),Zpt.forEach(t),fzo=r(B$e," (Canine model)"),B$e.forEach(t),mzo=i(X),Mv=n(X,"LI",{});var I$e=s(Mv);rpe=n(I$e,"STRONG",{});var e_t=s(rpe);gzo=r(e_t,"convbert"),e_t.forEach(t),hzo=r(I$e," \u2014 "),OV=n(I$e,"A",{href:!0});var o_t=s(OV);pzo=r(o_t,"ConvBertForQuestionAnswering"),o_t.forEach(t),_zo=r(I$e," (ConvBERT model)"),I$e.forEach(t),uzo=i(X),Ev=n(X,"LI",{});var N$e=s(Ev);tpe=n(N$e,"STRONG",{});var r_t=s(tpe);bzo=r(r_t,"data2vec-text"),r_t.forEach(t),vzo=r(N$e," \u2014 "),VV=n(N$e,"A",{href:!0});var t_t=s(VV);Fzo=r(t_t,"Data2VecTextForQuestionAnswering"),t_t.forEach(t),Tzo=r(N$e," (Data2VecText model)"),N$e.forEach(t),Mzo=i(X),Cv=n(X,"LI",{});var q$e=s(Cv);ape=n(q$e,"STRONG",{});var a_t=s(ape);Ezo=r(a_t,"deberta"),a_t.forEach(t),Czo=r(q$e," \u2014 "),XV=n(q$e,"A",{href:!0});var n_t=s(XV);wzo=r(n_t,"DebertaForQuestionAnswering"),n_t.forEach(t),Azo=r(q$e," (DeBERTa model)"),q$e.forEach(t),yzo=i(X),wv=n(X,"LI",{});var j$e=s(wv);npe=n(j$e,"STRONG",{});var s_t=s(npe);Lzo=r(s_t,"deberta-v2"),s_t.forEach(t),xzo=r(j$e," \u2014 "),zV=n(j$e,"A",{href:!0});var l_t=s(zV);$zo=r(l_t,"DebertaV2ForQuestionAnswering"),l_t.forEach(t),kzo=r(j$e," (DeBERTa-v2 model)"),j$e.forEach(t),Szo=i(X),Av=n(X,"LI",{});var D$e=s(Av);spe=n(D$e,"STRONG",{});var i_t=s(spe);Rzo=r(i_t,"distilbert"),i_t.forEach(t),Pzo=r(D$e," \u2014 "),WV=n(D$e,"A",{href:!0});var d_t=s(WV);Bzo=r(d_t,"DistilBertForQuestionAnswering"),d_t.forEach(t),Izo=r(D$e," (DistilBERT model)"),D$e.forEach(t),Nzo=i(X),yv=n(X,"LI",{});var G$e=s(yv);lpe=n(G$e,"STRONG",{});var c_t=s(lpe);qzo=r(c_t,"electra"),c_t.forEach(t),jzo=r(G$e," \u2014 "),QV=n(G$e,"A",{href:!0});var f_t=s(QV);Dzo=r(f_t,"ElectraForQuestionAnswering"),f_t.forEach(t),Gzo=r(G$e," (ELECTRA model)"),G$e.forEach(t),Ozo=i(X),Lv=n(X,"LI",{});var O$e=s(Lv);ipe=n(O$e,"STRONG",{});var m_t=s(ipe);Vzo=r(m_t,"flaubert"),m_t.forEach(t),Xzo=r(O$e," \u2014 "),HV=n(O$e,"A",{href:!0});var g_t=s(HV);zzo=r(g_t,"FlaubertForQuestionAnsweringSimple"),g_t.forEach(t),Wzo=r(O$e," (FlauBERT model)"),O$e.forEach(t),Qzo=i(X),xv=n(X,"LI",{});var V$e=s(xv);dpe=n(V$e,"STRONG",{});var h_t=s(dpe);Hzo=r(h_t,"fnet"),h_t.forEach(t),Uzo=r(V$e," \u2014 "),UV=n(V$e,"A",{href:!0});var p_t=s(UV);Jzo=r(p_t,"FNetForQuestionAnswering"),p_t.forEach(t),Yzo=r(V$e," (FNet model)"),V$e.forEach(t),Kzo=i(X),$v=n(X,"LI",{});var X$e=s($v);cpe=n(X$e,"STRONG",{});var __t=s(cpe);Zzo=r(__t,"funnel"),__t.forEach(t),eWo=r(X$e," \u2014 "),JV=n(X$e,"A",{href:!0});var u_t=s(JV);oWo=r(u_t,"FunnelForQuestionAnswering"),u_t.forEach(t),rWo=r(X$e," (Funnel Transformer model)"),X$e.forEach(t),tWo=i(X),kv=n(X,"LI",{});var z$e=s(kv);fpe=n(z$e,"STRONG",{});var b_t=s(fpe);aWo=r(b_t,"gptj"),b_t.forEach(t),nWo=r(z$e," \u2014 "),YV=n(z$e,"A",{href:!0});var v_t=s(YV);sWo=r(v_t,"GPTJForQuestionAnswering"),v_t.forEach(t),lWo=r(z$e," (GPT-J model)"),z$e.forEach(t),iWo=i(X),Sv=n(X,"LI",{});var W$e=s(Sv);mpe=n(W$e,"STRONG",{});var F_t=s(mpe);dWo=r(F_t,"ibert"),F_t.forEach(t),cWo=r(W$e," \u2014 "),KV=n(W$e,"A",{href:!0});var T_t=s(KV);fWo=r(T_t,"IBertForQuestionAnswering"),T_t.forEach(t),mWo=r(W$e," (I-BERT model)"),W$e.forEach(t),gWo=i(X),Rv=n(X,"LI",{});var Q$e=s(Rv);gpe=n(Q$e,"STRONG",{});var M_t=s(gpe);hWo=r(M_t,"layoutlmv2"),M_t.forEach(t),pWo=r(Q$e," \u2014 "),ZV=n(Q$e,"A",{href:!0});var E_t=s(ZV);_Wo=r(E_t,"LayoutLMv2ForQuestionAnswering"),E_t.forEach(t),uWo=r(Q$e," (LayoutLMv2 model)"),Q$e.forEach(t),bWo=i(X),Pv=n(X,"LI",{});var H$e=s(Pv);hpe=n(H$e,"STRONG",{});var C_t=s(hpe);vWo=r(C_t,"layoutlmv3"),C_t.forEach(t),FWo=r(H$e," \u2014 "),eX=n(H$e,"A",{href:!0});var w_t=s(eX);TWo=r(w_t,"LayoutLMv3ForQuestionAnswering"),w_t.forEach(t),MWo=r(H$e," (LayoutLMv3 model)"),H$e.forEach(t),EWo=i(X),Bv=n(X,"LI",{});var U$e=s(Bv);ppe=n(U$e,"STRONG",{});var A_t=s(ppe);CWo=r(A_t,"led"),A_t.forEach(t),wWo=r(U$e," \u2014 "),oX=n(U$e,"A",{href:!0});var y_t=s(oX);AWo=r(y_t,"LEDForQuestionAnswering"),y_t.forEach(t),yWo=r(U$e," (LED model)"),U$e.forEach(t),LWo=i(X),Iv=n(X,"LI",{});var J$e=s(Iv);_pe=n(J$e,"STRONG",{});var L_t=s(_pe);xWo=r(L_t,"longformer"),L_t.forEach(t),$Wo=r(J$e," \u2014 "),rX=n(J$e,"A",{href:!0});var x_t=s(rX);kWo=r(x_t,"LongformerForQuestionAnswering"),x_t.forEach(t),SWo=r(J$e," (Longformer model)"),J$e.forEach(t),RWo=i(X),Nv=n(X,"LI",{});var Y$e=s(Nv);upe=n(Y$e,"STRONG",{});var $_t=s(upe);PWo=r($_t,"lxmert"),$_t.forEach(t),BWo=r(Y$e," \u2014 "),tX=n(Y$e,"A",{href:!0});var k_t=s(tX);IWo=r(k_t,"LxmertForQuestionAnswering"),k_t.forEach(t),NWo=r(Y$e," (LXMERT model)"),Y$e.forEach(t),qWo=i(X),qv=n(X,"LI",{});var K$e=s(qv);bpe=n(K$e,"STRONG",{});var S_t=s(bpe);jWo=r(S_t,"mbart"),S_t.forEach(t),DWo=r(K$e," \u2014 "),aX=n(K$e,"A",{href:!0});var R_t=s(aX);GWo=r(R_t,"MBartForQuestionAnswering"),R_t.forEach(t),OWo=r(K$e," (mBART model)"),K$e.forEach(t),VWo=i(X),jv=n(X,"LI",{});var Z$e=s(jv);vpe=n(Z$e,"STRONG",{});var P_t=s(vpe);XWo=r(P_t,"megatron-bert"),P_t.forEach(t),zWo=r(Z$e," \u2014 "),nX=n(Z$e,"A",{href:!0});var B_t=s(nX);WWo=r(B_t,"MegatronBertForQuestionAnswering"),B_t.forEach(t),QWo=r(Z$e," (MegatronBert model)"),Z$e.forEach(t),HWo=i(X),Dv=n(X,"LI",{});var eke=s(Dv);Fpe=n(eke,"STRONG",{});var I_t=s(Fpe);UWo=r(I_t,"mobilebert"),I_t.forEach(t),JWo=r(eke," \u2014 "),sX=n(eke,"A",{href:!0});var N_t=s(sX);YWo=r(N_t,"MobileBertForQuestionAnswering"),N_t.forEach(t),KWo=r(eke," (MobileBERT model)"),eke.forEach(t),ZWo=i(X),Gv=n(X,"LI",{});var oke=s(Gv);Tpe=n(oke,"STRONG",{});var q_t=s(Tpe);eQo=r(q_t,"mpnet"),q_t.forEach(t),oQo=r(oke," \u2014 "),lX=n(oke,"A",{href:!0});var j_t=s(lX);rQo=r(j_t,"MPNetForQuestionAnswering"),j_t.forEach(t),tQo=r(oke," (MPNet model)"),oke.forEach(t),aQo=i(X),Ov=n(X,"LI",{});var rke=s(Ov);Mpe=n(rke,"STRONG",{});var D_t=s(Mpe);nQo=r(D_t,"nystromformer"),D_t.forEach(t),sQo=r(rke," \u2014 "),iX=n(rke,"A",{href:!0});var G_t=s(iX);lQo=r(G_t,"NystromformerForQuestionAnswering"),G_t.forEach(t),iQo=r(rke," (Nystromformer model)"),rke.forEach(t),dQo=i(X),Vv=n(X,"LI",{});var tke=s(Vv);Epe=n(tke,"STRONG",{});var O_t=s(Epe);cQo=r(O_t,"qdqbert"),O_t.forEach(t),fQo=r(tke," \u2014 "),dX=n(tke,"A",{href:!0});var V_t=s(dX);mQo=r(V_t,"QDQBertForQuestionAnswering"),V_t.forEach(t),gQo=r(tke," (QDQBert model)"),tke.forEach(t),hQo=i(X),Xv=n(X,"LI",{});var ake=s(Xv);Cpe=n(ake,"STRONG",{});var X_t=s(Cpe);pQo=r(X_t,"reformer"),X_t.forEach(t),_Qo=r(ake," \u2014 "),cX=n(ake,"A",{href:!0});var z_t=s(cX);uQo=r(z_t,"ReformerForQuestionAnswering"),z_t.forEach(t),bQo=r(ake," (Reformer model)"),ake.forEach(t),vQo=i(X),zv=n(X,"LI",{});var nke=s(zv);wpe=n(nke,"STRONG",{});var W_t=s(wpe);FQo=r(W_t,"rembert"),W_t.forEach(t),TQo=r(nke," \u2014 "),fX=n(nke,"A",{href:!0});var Q_t=s(fX);MQo=r(Q_t,"RemBertForQuestionAnswering"),Q_t.forEach(t),EQo=r(nke," (RemBERT model)"),nke.forEach(t),CQo=i(X),Wv=n(X,"LI",{});var ske=s(Wv);Ape=n(ske,"STRONG",{});var H_t=s(Ape);wQo=r(H_t,"roberta"),H_t.forEach(t),AQo=r(ske," \u2014 "),mX=n(ske,"A",{href:!0});var U_t=s(mX);yQo=r(U_t,"RobertaForQuestionAnswering"),U_t.forEach(t),LQo=r(ske," (RoBERTa model)"),ske.forEach(t),xQo=i(X),Qv=n(X,"LI",{});var lke=s(Qv);ype=n(lke,"STRONG",{});var J_t=s(ype);$Qo=r(J_t,"roformer"),J_t.forEach(t),kQo=r(lke," \u2014 "),gX=n(lke,"A",{href:!0});var Y_t=s(gX);SQo=r(Y_t,"RoFormerForQuestionAnswering"),Y_t.forEach(t),RQo=r(lke," (RoFormer model)"),lke.forEach(t),PQo=i(X),Hv=n(X,"LI",{});var ike=s(Hv);Lpe=n(ike,"STRONG",{});var K_t=s(Lpe);BQo=r(K_t,"splinter"),K_t.forEach(t),IQo=r(ike," \u2014 "),hX=n(ike,"A",{href:!0});var Z_t=s(hX);NQo=r(Z_t,"SplinterForQuestionAnswering"),Z_t.forEach(t),qQo=r(ike," (Splinter model)"),ike.forEach(t),jQo=i(X),Uv=n(X,"LI",{});var dke=s(Uv);xpe=n(dke,"STRONG",{});var eut=s(xpe);DQo=r(eut,"squeezebert"),eut.forEach(t),GQo=r(dke," \u2014 "),pX=n(dke,"A",{href:!0});var out=s(pX);OQo=r(out,"SqueezeBertForQuestionAnswering"),out.forEach(t),VQo=r(dke," (SqueezeBERT model)"),dke.forEach(t),XQo=i(X),Jv=n(X,"LI",{});var cke=s(Jv);$pe=n(cke,"STRONG",{});var rut=s($pe);zQo=r(rut,"xlm"),rut.forEach(t),WQo=r(cke," \u2014 "),_X=n(cke,"A",{href:!0});var tut=s(_X);QQo=r(tut,"XLMForQuestionAnsweringSimple"),tut.forEach(t),HQo=r(cke," (XLM model)"),cke.forEach(t),UQo=i(X),Yv=n(X,"LI",{});var fke=s(Yv);kpe=n(fke,"STRONG",{});var aut=s(kpe);JQo=r(aut,"xlm-roberta"),aut.forEach(t),YQo=r(fke," \u2014 "),uX=n(fke,"A",{href:!0});var nut=s(uX);KQo=r(nut,"XLMRobertaForQuestionAnswering"),nut.forEach(t),ZQo=r(fke," (XLM-RoBERTa model)"),fke.forEach(t),eHo=i(X),Kv=n(X,"LI",{});var mke=s(Kv);Spe=n(mke,"STRONG",{});var sut=s(Spe);oHo=r(sut,"xlm-roberta-xl"),sut.forEach(t),rHo=r(mke," \u2014 "),bX=n(mke,"A",{href:!0});var lut=s(bX);tHo=r(lut,"XLMRobertaXLForQuestionAnswering"),lut.forEach(t),aHo=r(mke," (XLM-RoBERTa-XL model)"),mke.forEach(t),nHo=i(X),Zv=n(X,"LI",{});var gke=s(Zv);Rpe=n(gke,"STRONG",{});var iut=s(Rpe);sHo=r(iut,"xlnet"),iut.forEach(t),lHo=r(gke," \u2014 "),vX=n(gke,"A",{href:!0});var dut=s(vX);iHo=r(dut,"XLNetForQuestionAnsweringSimple"),dut.forEach(t),dHo=r(gke," (XLNet model)"),gke.forEach(t),cHo=i(X),e0=n(X,"LI",{});var hke=s(e0);Ppe=n(hke,"STRONG",{});var cut=s(Ppe);fHo=r(cut,"yoso"),cut.forEach(t),mHo=r(hke," \u2014 "),FX=n(hke,"A",{href:!0});var fut=s(FX);gHo=r(fut,"YosoForQuestionAnswering"),fut.forEach(t),hHo=r(hke," (YOSO model)"),hke.forEach(t),X.forEach(t),pHo=i(ca),o0=n(ca,"P",{});var pke=s(o0);_Ho=r(pke,"The model is set in evaluation mode by default using "),Bpe=n(pke,"CODE",{});var mut=s(Bpe);uHo=r(mut,"model.eval()"),mut.forEach(t),bHo=r(pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=n(pke,"CODE",{});var gut=s(Ipe);vHo=r(gut,"model.train()"),gut.forEach(t),pke.forEach(t),FHo=i(ca),T(r0.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),Qqe=i(f),od=n(f,"H2",{class:!0});var YDe=s(od);t0=n(YDe,"A",{id:!0,class:!0,href:!0});var hut=s(t0);Npe=n(hut,"SPAN",{});var put=s(Npe);T(ZL.$$.fragment,put),put.forEach(t),hut.forEach(t),THo=i(YDe),qpe=n(YDe,"SPAN",{});var _ut=s(qpe);MHo=r(_ut,"AutoModelForTableQuestionAnswering"),_ut.forEach(t),YDe.forEach(t),Hqe=i(f),qo=n(f,"DIV",{class:!0});var Ks=s(qo);T(e8.$$.fragment,Ks),EHo=i(Ks),rd=n(Ks,"P",{});var VZ=s(rd);CHo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TX=n(VZ,"A",{href:!0});var uut=s(TX);wHo=r(uut,"from_pretrained()"),uut.forEach(t),AHo=r(VZ," class method or the "),MX=n(VZ,"A",{href:!0});var but=s(MX);yHo=r(but,"from_config()"),but.forEach(t),LHo=r(VZ,` class
method.`),VZ.forEach(t),xHo=i(Ks),o8=n(Ks,"P",{});var KDe=s(o8);$Ho=r(KDe,"This class cannot be instantiated directly using "),jpe=n(KDe,"CODE",{});var vut=s(jpe);kHo=r(vut,"__init__()"),vut.forEach(t),SHo=r(KDe," (throws an error)."),KDe.forEach(t),RHo=i(Ks),gt=n(Ks,"DIV",{class:!0});var oA=s(gt);T(r8.$$.fragment,oA),PHo=i(oA),Dpe=n(oA,"P",{});var Fut=s(Dpe);BHo=r(Fut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Fut.forEach(t),IHo=i(oA),td=n(oA,"P",{});var XZ=s(td);NHo=r(XZ,`Note:
Loading a model from its configuration file does `),Gpe=n(XZ,"STRONG",{});var Tut=s(Gpe);qHo=r(Tut,"not"),Tut.forEach(t),jHo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=n(XZ,"A",{href:!0});var Mut=s(EX);DHo=r(Mut,"from_pretrained()"),Mut.forEach(t),GHo=r(XZ," to load the model weights."),XZ.forEach(t),OHo=i(oA),T(a0.$$.fragment,oA),oA.forEach(t),VHo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(t8.$$.fragment,fa),XHo=i(fa),Ope=n(fa,"P",{});var Eut=s(Ope);zHo=r(Eut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Eut.forEach(t),WHo=i(fa),qa=n(fa,"P",{});var rA=s(qa);QHo=r(rA,"The model class to instantiate is selected based on the "),Vpe=n(rA,"CODE",{});var Cut=s(Vpe);HHo=r(Cut,"model_type"),Cut.forEach(t),UHo=r(rA,` property of the config object (either
passed as an argument or loaded from `),Xpe=n(rA,"CODE",{});var wut=s(Xpe);JHo=r(wut,"pretrained_model_name_or_path"),wut.forEach(t),YHo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=n(rA,"CODE",{});var Aut=s(zpe);KHo=r(Aut,"pretrained_model_name_or_path"),Aut.forEach(t),ZHo=r(rA,":"),rA.forEach(t),eUo=i(fa),Wpe=n(fa,"UL",{});var yut=s(Wpe);n0=n(yut,"LI",{});var _ke=s(n0);Qpe=n(_ke,"STRONG",{});var Lut=s(Qpe);oUo=r(Lut,"tapas"),Lut.forEach(t),rUo=r(_ke," \u2014 "),CX=n(_ke,"A",{href:!0});var xut=s(CX);tUo=r(xut,"TapasForQuestionAnswering"),xut.forEach(t),aUo=r(_ke," (TAPAS model)"),_ke.forEach(t),yut.forEach(t),nUo=i(fa),s0=n(fa,"P",{});var uke=s(s0);sUo=r(uke,"The model is set in evaluation mode by default using "),Hpe=n(uke,"CODE",{});var $ut=s(Hpe);lUo=r($ut,"model.eval()"),$ut.forEach(t),iUo=r(uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=n(uke,"CODE",{});var kut=s(Upe);dUo=r(kut,"model.train()"),kut.forEach(t),uke.forEach(t),cUo=i(fa),T(l0.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),Uqe=i(f),ad=n(f,"H2",{class:!0});var ZDe=s(ad);i0=n(ZDe,"A",{id:!0,class:!0,href:!0});var Sut=s(i0);Jpe=n(Sut,"SPAN",{});var Rut=s(Jpe);T(a8.$$.fragment,Rut),Rut.forEach(t),Sut.forEach(t),fUo=i(ZDe),Ype=n(ZDe,"SPAN",{});var Put=s(Ype);mUo=r(Put,"AutoModelForImageClassification"),Put.forEach(t),ZDe.forEach(t),Jqe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(n8.$$.fragment,Zs),gUo=i(Zs),nd=n(Zs,"P",{});var zZ=s(nd);hUo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wX=n(zZ,"A",{href:!0});var But=s(wX);pUo=r(But,"from_pretrained()"),But.forEach(t),_Uo=r(zZ," class method or the "),AX=n(zZ,"A",{href:!0});var Iut=s(AX);uUo=r(Iut,"from_config()"),Iut.forEach(t),bUo=r(zZ,` class
method.`),zZ.forEach(t),vUo=i(Zs),s8=n(Zs,"P",{});var eGe=s(s8);FUo=r(eGe,"This class cannot be instantiated directly using "),Kpe=n(eGe,"CODE",{});var Nut=s(Kpe);TUo=r(Nut,"__init__()"),Nut.forEach(t),MUo=r(eGe," (throws an error)."),eGe.forEach(t),EUo=i(Zs),ht=n(Zs,"DIV",{class:!0});var tA=s(ht);T(l8.$$.fragment,tA),CUo=i(tA),Zpe=n(tA,"P",{});var qut=s(Zpe);wUo=r(qut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qut.forEach(t),AUo=i(tA),sd=n(tA,"P",{});var WZ=s(sd);yUo=r(WZ,`Note:
Loading a model from its configuration file does `),e_e=n(WZ,"STRONG",{});var jut=s(e_e);LUo=r(jut,"not"),jut.forEach(t),xUo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=n(WZ,"A",{href:!0});var Dut=s(yX);$Uo=r(Dut,"from_pretrained()"),Dut.forEach(t),kUo=r(WZ," to load the model weights."),WZ.forEach(t),SUo=i(tA),T(d0.$$.fragment,tA),tA.forEach(t),RUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(i8.$$.fragment,ma),PUo=i(ma),o_e=n(ma,"P",{});var Gut=s(o_e);BUo=r(Gut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Gut.forEach(t),IUo=i(ma),ja=n(ma,"P",{});var aA=s(ja);NUo=r(aA,"The model class to instantiate is selected based on the "),r_e=n(aA,"CODE",{});var Out=s(r_e);qUo=r(Out,"model_type"),Out.forEach(t),jUo=r(aA,` property of the config object (either
passed as an argument or loaded from `),t_e=n(aA,"CODE",{});var Vut=s(t_e);DUo=r(Vut,"pretrained_model_name_or_path"),Vut.forEach(t),GUo=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(aA,"CODE",{});var Xut=s(a_e);OUo=r(Xut,"pretrained_model_name_or_path"),Xut.forEach(t),VUo=r(aA,":"),aA.forEach(t),XUo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);c0=n(Te,"LI",{});var bke=s(c0);n_e=n(bke,"STRONG",{});var zut=s(n_e);zUo=r(zut,"beit"),zut.forEach(t),WUo=r(bke," \u2014 "),LX=n(bke,"A",{href:!0});var Wut=s(LX);QUo=r(Wut,"BeitForImageClassification"),Wut.forEach(t),HUo=r(bke," (BEiT model)"),bke.forEach(t),UUo=i(Te),f0=n(Te,"LI",{});var vke=s(f0);s_e=n(vke,"STRONG",{});var Qut=s(s_e);JUo=r(Qut,"convnext"),Qut.forEach(t),YUo=r(vke," \u2014 "),xX=n(vke,"A",{href:!0});var Hut=s(xX);KUo=r(Hut,"ConvNextForImageClassification"),Hut.forEach(t),ZUo=r(vke," (ConvNext model)"),vke.forEach(t),eJo=i(Te),m0=n(Te,"LI",{});var Fke=s(m0);l_e=n(Fke,"STRONG",{});var Uut=s(l_e);oJo=r(Uut,"cvt"),Uut.forEach(t),rJo=r(Fke," \u2014 "),$X=n(Fke,"A",{href:!0});var Jut=s($X);tJo=r(Jut,"CvtForImageClassification"),Jut.forEach(t),aJo=r(Fke," (CvT model)"),Fke.forEach(t),nJo=i(Te),g0=n(Te,"LI",{});var Tke=s(g0);i_e=n(Tke,"STRONG",{});var Yut=s(i_e);sJo=r(Yut,"data2vec-vision"),Yut.forEach(t),lJo=r(Tke," \u2014 "),kX=n(Tke,"A",{href:!0});var Kut=s(kX);iJo=r(Kut,"Data2VecVisionForImageClassification"),Kut.forEach(t),dJo=r(Tke," (Data2VecVision model)"),Tke.forEach(t),cJo=i(Te),Bs=n(Te,"LI",{});var Q$=s(Bs);d_e=n(Q$,"STRONG",{});var Zut=s(d_e);fJo=r(Zut,"deit"),Zut.forEach(t),mJo=r(Q$," \u2014 "),SX=n(Q$,"A",{href:!0});var e2t=s(SX);gJo=r(e2t,"DeiTForImageClassification"),e2t.forEach(t),hJo=r(Q$," or "),RX=n(Q$,"A",{href:!0});var o2t=s(RX);pJo=r(o2t,"DeiTForImageClassificationWithTeacher"),o2t.forEach(t),_Jo=r(Q$," (DeiT model)"),Q$.forEach(t),uJo=i(Te),h0=n(Te,"LI",{});var Mke=s(h0);c_e=n(Mke,"STRONG",{});var r2t=s(c_e);bJo=r(r2t,"imagegpt"),r2t.forEach(t),vJo=r(Mke," \u2014 "),PX=n(Mke,"A",{href:!0});var t2t=s(PX);FJo=r(t2t,"ImageGPTForImageClassification"),t2t.forEach(t),TJo=r(Mke," (ImageGPT model)"),Mke.forEach(t),MJo=i(Te),pt=n(Te,"LI",{});var hf=s(pt);f_e=n(hf,"STRONG",{});var a2t=s(f_e);EJo=r(a2t,"perceiver"),a2t.forEach(t),CJo=r(hf," \u2014 "),BX=n(hf,"A",{href:!0});var n2t=s(BX);wJo=r(n2t,"PerceiverForImageClassificationLearned"),n2t.forEach(t),AJo=r(hf," or "),IX=n(hf,"A",{href:!0});var s2t=s(IX);yJo=r(s2t,"PerceiverForImageClassificationFourier"),s2t.forEach(t),LJo=r(hf," or "),NX=n(hf,"A",{href:!0});var l2t=s(NX);xJo=r(l2t,"PerceiverForImageClassificationConvProcessing"),l2t.forEach(t),$Jo=r(hf," (Perceiver model)"),hf.forEach(t),kJo=i(Te),p0=n(Te,"LI",{});var Eke=s(p0);m_e=n(Eke,"STRONG",{});var i2t=s(m_e);SJo=r(i2t,"poolformer"),i2t.forEach(t),RJo=r(Eke," \u2014 "),qX=n(Eke,"A",{href:!0});var d2t=s(qX);PJo=r(d2t,"PoolFormerForImageClassification"),d2t.forEach(t),BJo=r(Eke," (PoolFormer model)"),Eke.forEach(t),IJo=i(Te),_0=n(Te,"LI",{});var Cke=s(_0);g_e=n(Cke,"STRONG",{});var c2t=s(g_e);NJo=r(c2t,"regnet"),c2t.forEach(t),qJo=r(Cke," \u2014 "),jX=n(Cke,"A",{href:!0});var f2t=s(jX);jJo=r(f2t,"RegNetForImageClassification"),f2t.forEach(t),DJo=r(Cke," (RegNet model)"),Cke.forEach(t),GJo=i(Te),u0=n(Te,"LI",{});var wke=s(u0);h_e=n(wke,"STRONG",{});var m2t=s(h_e);OJo=r(m2t,"resnet"),m2t.forEach(t),VJo=r(wke," \u2014 "),DX=n(wke,"A",{href:!0});var g2t=s(DX);XJo=r(g2t,"ResNetForImageClassification"),g2t.forEach(t),zJo=r(wke," (ResNet model)"),wke.forEach(t),WJo=i(Te),b0=n(Te,"LI",{});var Ake=s(b0);p_e=n(Ake,"STRONG",{});var h2t=s(p_e);QJo=r(h2t,"segformer"),h2t.forEach(t),HJo=r(Ake," \u2014 "),GX=n(Ake,"A",{href:!0});var p2t=s(GX);UJo=r(p2t,"SegformerForImageClassification"),p2t.forEach(t),JJo=r(Ake," (SegFormer model)"),Ake.forEach(t),YJo=i(Te),v0=n(Te,"LI",{});var yke=s(v0);__e=n(yke,"STRONG",{});var _2t=s(__e);KJo=r(_2t,"swin"),_2t.forEach(t),ZJo=r(yke," \u2014 "),OX=n(yke,"A",{href:!0});var u2t=s(OX);eYo=r(u2t,"SwinForImageClassification"),u2t.forEach(t),oYo=r(yke," (Swin model)"),yke.forEach(t),rYo=i(Te),F0=n(Te,"LI",{});var Lke=s(F0);u_e=n(Lke,"STRONG",{});var b2t=s(u_e);tYo=r(b2t,"van"),b2t.forEach(t),aYo=r(Lke," \u2014 "),VX=n(Lke,"A",{href:!0});var v2t=s(VX);nYo=r(v2t,"VanForImageClassification"),v2t.forEach(t),sYo=r(Lke," (VAN model)"),Lke.forEach(t),lYo=i(Te),T0=n(Te,"LI",{});var xke=s(T0);b_e=n(xke,"STRONG",{});var F2t=s(b_e);iYo=r(F2t,"vit"),F2t.forEach(t),dYo=r(xke," \u2014 "),XX=n(xke,"A",{href:!0});var T2t=s(XX);cYo=r(T2t,"ViTForImageClassification"),T2t.forEach(t),fYo=r(xke," (ViT model)"),xke.forEach(t),Te.forEach(t),mYo=i(ma),M0=n(ma,"P",{});var $ke=s(M0);gYo=r($ke,"The model is set in evaluation mode by default using "),v_e=n($ke,"CODE",{});var M2t=s(v_e);hYo=r(M2t,"model.eval()"),M2t.forEach(t),pYo=r($ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=n($ke,"CODE",{});var E2t=s(F_e);_Yo=r(E2t,"model.train()"),E2t.forEach(t),$ke.forEach(t),uYo=i(ma),T(E0.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),Yqe=i(f),ld=n(f,"H2",{class:!0});var oGe=s(ld);C0=n(oGe,"A",{id:!0,class:!0,href:!0});var C2t=s(C0);T_e=n(C2t,"SPAN",{});var w2t=s(T_e);T(d8.$$.fragment,w2t),w2t.forEach(t),C2t.forEach(t),bYo=i(oGe),M_e=n(oGe,"SPAN",{});var A2t=s(M_e);vYo=r(A2t,"AutoModelForVision2Seq"),A2t.forEach(t),oGe.forEach(t),Kqe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(c8.$$.fragment,el),FYo=i(el),id=n(el,"P",{});var QZ=s(id);TYo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zX=n(QZ,"A",{href:!0});var y2t=s(zX);MYo=r(y2t,"from_pretrained()"),y2t.forEach(t),EYo=r(QZ," class method or the "),WX=n(QZ,"A",{href:!0});var L2t=s(WX);CYo=r(L2t,"from_config()"),L2t.forEach(t),wYo=r(QZ,` class
method.`),QZ.forEach(t),AYo=i(el),f8=n(el,"P",{});var rGe=s(f8);yYo=r(rGe,"This class cannot be instantiated directly using "),E_e=n(rGe,"CODE",{});var x2t=s(E_e);LYo=r(x2t,"__init__()"),x2t.forEach(t),xYo=r(rGe," (throws an error)."),rGe.forEach(t),$Yo=i(el),_t=n(el,"DIV",{class:!0});var nA=s(_t);T(m8.$$.fragment,nA),kYo=i(nA),C_e=n(nA,"P",{});var $2t=s(C_e);SYo=r($2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$2t.forEach(t),RYo=i(nA),dd=n(nA,"P",{});var HZ=s(dd);PYo=r(HZ,`Note:
Loading a model from its configuration file does `),w_e=n(HZ,"STRONG",{});var k2t=s(w_e);BYo=r(k2t,"not"),k2t.forEach(t),IYo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(HZ,"A",{href:!0});var S2t=s(QX);NYo=r(S2t,"from_pretrained()"),S2t.forEach(t),qYo=r(HZ," to load the model weights."),HZ.forEach(t),jYo=i(nA),T(w0.$$.fragment,nA),nA.forEach(t),DYo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(g8.$$.fragment,ga),GYo=i(ga),A_e=n(ga,"P",{});var R2t=s(A_e);OYo=r(R2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),R2t.forEach(t),VYo=i(ga),Da=n(ga,"P",{});var sA=s(Da);XYo=r(sA,"The model class to instantiate is selected based on the "),y_e=n(sA,"CODE",{});var P2t=s(y_e);zYo=r(P2t,"model_type"),P2t.forEach(t),WYo=r(sA,` property of the config object (either
passed as an argument or loaded from `),L_e=n(sA,"CODE",{});var B2t=s(L_e);QYo=r(B2t,"pretrained_model_name_or_path"),B2t.forEach(t),HYo=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=n(sA,"CODE",{});var I2t=s(x_e);UYo=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),JYo=r(sA,":"),sA.forEach(t),YYo=i(ga),$_e=n(ga,"UL",{});var N2t=s($_e);A0=n(N2t,"LI",{});var kke=s(A0);k_e=n(kke,"STRONG",{});var q2t=s(k_e);KYo=r(q2t,"vision-encoder-decoder"),q2t.forEach(t),ZYo=r(kke," \u2014 "),HX=n(kke,"A",{href:!0});var j2t=s(HX);eKo=r(j2t,"VisionEncoderDecoderModel"),j2t.forEach(t),oKo=r(kke," (Vision Encoder decoder model)"),kke.forEach(t),N2t.forEach(t),rKo=i(ga),y0=n(ga,"P",{});var Ske=s(y0);tKo=r(Ske,"The model is set in evaluation mode by default using "),S_e=n(Ske,"CODE",{});var D2t=s(S_e);aKo=r(D2t,"model.eval()"),D2t.forEach(t),nKo=r(Ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=n(Ske,"CODE",{});var G2t=s(R_e);sKo=r(G2t,"model.train()"),G2t.forEach(t),Ske.forEach(t),lKo=i(ga),T(L0.$$.fragment,ga),ga.forEach(t),el.forEach(t),Zqe=i(f),cd=n(f,"H2",{class:!0});var tGe=s(cd);x0=n(tGe,"A",{id:!0,class:!0,href:!0});var O2t=s(x0);P_e=n(O2t,"SPAN",{});var V2t=s(P_e);T(h8.$$.fragment,V2t),V2t.forEach(t),O2t.forEach(t),iKo=i(tGe),B_e=n(tGe,"SPAN",{});var X2t=s(B_e);dKo=r(X2t,"AutoModelForAudioClassification"),X2t.forEach(t),tGe.forEach(t),eje=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(p8.$$.fragment,ol),cKo=i(ol),fd=n(ol,"P",{});var UZ=s(fd);fKo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),UX=n(UZ,"A",{href:!0});var z2t=s(UX);mKo=r(z2t,"from_pretrained()"),z2t.forEach(t),gKo=r(UZ," class method or the "),JX=n(UZ,"A",{href:!0});var W2t=s(JX);hKo=r(W2t,"from_config()"),W2t.forEach(t),pKo=r(UZ,` class
method.`),UZ.forEach(t),_Ko=i(ol),_8=n(ol,"P",{});var aGe=s(_8);uKo=r(aGe,"This class cannot be instantiated directly using "),I_e=n(aGe,"CODE",{});var Q2t=s(I_e);bKo=r(Q2t,"__init__()"),Q2t.forEach(t),vKo=r(aGe," (throws an error)."),aGe.forEach(t),FKo=i(ol),ut=n(ol,"DIV",{class:!0});var lA=s(ut);T(u8.$$.fragment,lA),TKo=i(lA),N_e=n(lA,"P",{});var H2t=s(N_e);MKo=r(H2t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),H2t.forEach(t),EKo=i(lA),md=n(lA,"P",{});var JZ=s(md);CKo=r(JZ,`Note:
Loading a model from its configuration file does `),q_e=n(JZ,"STRONG",{});var U2t=s(q_e);wKo=r(U2t,"not"),U2t.forEach(t),AKo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(JZ,"A",{href:!0});var J2t=s(YX);yKo=r(J2t,"from_pretrained()"),J2t.forEach(t),LKo=r(JZ," to load the model weights."),JZ.forEach(t),xKo=i(lA),T($0.$$.fragment,lA),lA.forEach(t),$Ko=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(b8.$$.fragment,ha),kKo=i(ha),j_e=n(ha,"P",{});var Y2t=s(j_e);SKo=r(Y2t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Y2t.forEach(t),RKo=i(ha),Ga=n(ha,"P",{});var iA=s(Ga);PKo=r(iA,"The model class to instantiate is selected based on the "),D_e=n(iA,"CODE",{});var K2t=s(D_e);BKo=r(K2t,"model_type"),K2t.forEach(t),IKo=r(iA,` property of the config object (either
passed as an argument or loaded from `),G_e=n(iA,"CODE",{});var Z2t=s(G_e);NKo=r(Z2t,"pretrained_model_name_or_path"),Z2t.forEach(t),qKo=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(iA,"CODE",{});var e1t=s(O_e);jKo=r(e1t,"pretrained_model_name_or_path"),e1t.forEach(t),DKo=r(iA,":"),iA.forEach(t),GKo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);k0=n(Ve,"LI",{});var Rke=s(k0);V_e=n(Rke,"STRONG",{});var o1t=s(V_e);OKo=r(o1t,"data2vec-audio"),o1t.forEach(t),VKo=r(Rke," \u2014 "),KX=n(Rke,"A",{href:!0});var r1t=s(KX);XKo=r(r1t,"Data2VecAudioForSequenceClassification"),r1t.forEach(t),zKo=r(Rke," (Data2VecAudio model)"),Rke.forEach(t),WKo=i(Ve),S0=n(Ve,"LI",{});var Pke=s(S0);X_e=n(Pke,"STRONG",{});var t1t=s(X_e);QKo=r(t1t,"hubert"),t1t.forEach(t),HKo=r(Pke," \u2014 "),ZX=n(Pke,"A",{href:!0});var a1t=s(ZX);UKo=r(a1t,"HubertForSequenceClassification"),a1t.forEach(t),JKo=r(Pke," (Hubert model)"),Pke.forEach(t),YKo=i(Ve),R0=n(Ve,"LI",{});var Bke=s(R0);z_e=n(Bke,"STRONG",{});var n1t=s(z_e);KKo=r(n1t,"sew"),n1t.forEach(t),ZKo=r(Bke," \u2014 "),ez=n(Bke,"A",{href:!0});var s1t=s(ez);eZo=r(s1t,"SEWForSequenceClassification"),s1t.forEach(t),oZo=r(Bke," (SEW model)"),Bke.forEach(t),rZo=i(Ve),P0=n(Ve,"LI",{});var Ike=s(P0);W_e=n(Ike,"STRONG",{});var l1t=s(W_e);tZo=r(l1t,"sew-d"),l1t.forEach(t),aZo=r(Ike," \u2014 "),oz=n(Ike,"A",{href:!0});var i1t=s(oz);nZo=r(i1t,"SEWDForSequenceClassification"),i1t.forEach(t),sZo=r(Ike," (SEW-D model)"),Ike.forEach(t),lZo=i(Ve),B0=n(Ve,"LI",{});var Nke=s(B0);Q_e=n(Nke,"STRONG",{});var d1t=s(Q_e);iZo=r(d1t,"unispeech"),d1t.forEach(t),dZo=r(Nke," \u2014 "),rz=n(Nke,"A",{href:!0});var c1t=s(rz);cZo=r(c1t,"UniSpeechForSequenceClassification"),c1t.forEach(t),fZo=r(Nke," (UniSpeech model)"),Nke.forEach(t),mZo=i(Ve),I0=n(Ve,"LI",{});var qke=s(I0);H_e=n(qke,"STRONG",{});var f1t=s(H_e);gZo=r(f1t,"unispeech-sat"),f1t.forEach(t),hZo=r(qke," \u2014 "),tz=n(qke,"A",{href:!0});var m1t=s(tz);pZo=r(m1t,"UniSpeechSatForSequenceClassification"),m1t.forEach(t),_Zo=r(qke," (UniSpeechSat model)"),qke.forEach(t),uZo=i(Ve),N0=n(Ve,"LI",{});var jke=s(N0);U_e=n(jke,"STRONG",{});var g1t=s(U_e);bZo=r(g1t,"wav2vec2"),g1t.forEach(t),vZo=r(jke," \u2014 "),az=n(jke,"A",{href:!0});var h1t=s(az);FZo=r(h1t,"Wav2Vec2ForSequenceClassification"),h1t.forEach(t),TZo=r(jke," (Wav2Vec2 model)"),jke.forEach(t),MZo=i(Ve),q0=n(Ve,"LI",{});var Dke=s(q0);J_e=n(Dke,"STRONG",{});var p1t=s(J_e);EZo=r(p1t,"wav2vec2-conformer"),p1t.forEach(t),CZo=r(Dke," \u2014 "),nz=n(Dke,"A",{href:!0});var _1t=s(nz);wZo=r(_1t,"Wav2Vec2ConformerForSequenceClassification"),_1t.forEach(t),AZo=r(Dke," (Wav2Vec2-Conformer model)"),Dke.forEach(t),yZo=i(Ve),j0=n(Ve,"LI",{});var Gke=s(j0);Y_e=n(Gke,"STRONG",{});var u1t=s(Y_e);LZo=r(u1t,"wavlm"),u1t.forEach(t),xZo=r(Gke," \u2014 "),sz=n(Gke,"A",{href:!0});var b1t=s(sz);$Zo=r(b1t,"WavLMForSequenceClassification"),b1t.forEach(t),kZo=r(Gke," (WavLM model)"),Gke.forEach(t),Ve.forEach(t),SZo=i(ha),D0=n(ha,"P",{});var Oke=s(D0);RZo=r(Oke,"The model is set in evaluation mode by default using "),K_e=n(Oke,"CODE",{});var v1t=s(K_e);PZo=r(v1t,"model.eval()"),v1t.forEach(t),BZo=r(Oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=n(Oke,"CODE",{});var F1t=s(Z_e);IZo=r(F1t,"model.train()"),F1t.forEach(t),Oke.forEach(t),NZo=i(ha),T(G0.$$.fragment,ha),ha.forEach(t),ol.forEach(t),oje=i(f),gd=n(f,"H2",{class:!0});var nGe=s(gd);O0=n(nGe,"A",{id:!0,class:!0,href:!0});var T1t=s(O0);eue=n(T1t,"SPAN",{});var M1t=s(eue);T(v8.$$.fragment,M1t),M1t.forEach(t),T1t.forEach(t),qZo=i(nGe),oue=n(nGe,"SPAN",{});var E1t=s(oue);jZo=r(E1t,"AutoModelForAudioFrameClassification"),E1t.forEach(t),nGe.forEach(t),rje=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(F8.$$.fragment,rl),DZo=i(rl),hd=n(rl,"P",{});var YZ=s(hd);GZo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),lz=n(YZ,"A",{href:!0});var C1t=s(lz);OZo=r(C1t,"from_pretrained()"),C1t.forEach(t),VZo=r(YZ," class method or the "),iz=n(YZ,"A",{href:!0});var w1t=s(iz);XZo=r(w1t,"from_config()"),w1t.forEach(t),zZo=r(YZ,` class
method.`),YZ.forEach(t),WZo=i(rl),T8=n(rl,"P",{});var sGe=s(T8);QZo=r(sGe,"This class cannot be instantiated directly using "),rue=n(sGe,"CODE",{});var A1t=s(rue);HZo=r(A1t,"__init__()"),A1t.forEach(t),UZo=r(sGe," (throws an error)."),sGe.forEach(t),JZo=i(rl),bt=n(rl,"DIV",{class:!0});var dA=s(bt);T(M8.$$.fragment,dA),YZo=i(dA),tue=n(dA,"P",{});var y1t=s(tue);KZo=r(y1t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),y1t.forEach(t),ZZo=i(dA),pd=n(dA,"P",{});var KZ=s(pd);eer=r(KZ,`Note:
Loading a model from its configuration file does `),aue=n(KZ,"STRONG",{});var L1t=s(aue);oer=r(L1t,"not"),L1t.forEach(t),rer=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=n(KZ,"A",{href:!0});var x1t=s(dz);ter=r(x1t,"from_pretrained()"),x1t.forEach(t),aer=r(KZ," to load the model weights."),KZ.forEach(t),ner=i(dA),T(V0.$$.fragment,dA),dA.forEach(t),ser=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(E8.$$.fragment,pa),ler=i(pa),nue=n(pa,"P",{});var $1t=s(nue);ier=r($1t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),$1t.forEach(t),der=i(pa),Oa=n(pa,"P",{});var cA=s(Oa);cer=r(cA,"The model class to instantiate is selected based on the "),sue=n(cA,"CODE",{});var k1t=s(sue);fer=r(k1t,"model_type"),k1t.forEach(t),mer=r(cA,` property of the config object (either
passed as an argument or loaded from `),lue=n(cA,"CODE",{});var S1t=s(lue);ger=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),her=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=n(cA,"CODE",{});var R1t=s(iue);per=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),_er=r(cA,":"),cA.forEach(t),uer=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);X0=n(tl,"LI",{});var Vke=s(X0);due=n(Vke,"STRONG",{});var P1t=s(due);ber=r(P1t,"data2vec-audio"),P1t.forEach(t),ver=r(Vke," \u2014 "),cz=n(Vke,"A",{href:!0});var B1t=s(cz);Fer=r(B1t,"Data2VecAudioForAudioFrameClassification"),B1t.forEach(t),Ter=r(Vke," (Data2VecAudio model)"),Vke.forEach(t),Mer=i(tl),z0=n(tl,"LI",{});var Xke=s(z0);cue=n(Xke,"STRONG",{});var I1t=s(cue);Eer=r(I1t,"unispeech-sat"),I1t.forEach(t),Cer=r(Xke," \u2014 "),fz=n(Xke,"A",{href:!0});var N1t=s(fz);wer=r(N1t,"UniSpeechSatForAudioFrameClassification"),N1t.forEach(t),Aer=r(Xke," (UniSpeechSat model)"),Xke.forEach(t),yer=i(tl),W0=n(tl,"LI",{});var zke=s(W0);fue=n(zke,"STRONG",{});var q1t=s(fue);Ler=r(q1t,"wav2vec2"),q1t.forEach(t),xer=r(zke," \u2014 "),mz=n(zke,"A",{href:!0});var j1t=s(mz);$er=r(j1t,"Wav2Vec2ForAudioFrameClassification"),j1t.forEach(t),ker=r(zke," (Wav2Vec2 model)"),zke.forEach(t),Ser=i(tl),Q0=n(tl,"LI",{});var Wke=s(Q0);mue=n(Wke,"STRONG",{});var D1t=s(mue);Rer=r(D1t,"wav2vec2-conformer"),D1t.forEach(t),Per=r(Wke," \u2014 "),gz=n(Wke,"A",{href:!0});var G1t=s(gz);Ber=r(G1t,"Wav2Vec2ConformerForAudioFrameClassification"),G1t.forEach(t),Ier=r(Wke," (Wav2Vec2-Conformer model)"),Wke.forEach(t),Ner=i(tl),H0=n(tl,"LI",{});var Qke=s(H0);gue=n(Qke,"STRONG",{});var O1t=s(gue);qer=r(O1t,"wavlm"),O1t.forEach(t),jer=r(Qke," \u2014 "),hz=n(Qke,"A",{href:!0});var V1t=s(hz);Der=r(V1t,"WavLMForAudioFrameClassification"),V1t.forEach(t),Ger=r(Qke," (WavLM model)"),Qke.forEach(t),tl.forEach(t),Oer=i(pa),U0=n(pa,"P",{});var Hke=s(U0);Ver=r(Hke,"The model is set in evaluation mode by default using "),hue=n(Hke,"CODE",{});var X1t=s(hue);Xer=r(X1t,"model.eval()"),X1t.forEach(t),zer=r(Hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(Hke,"CODE",{});var z1t=s(pue);Wer=r(z1t,"model.train()"),z1t.forEach(t),Hke.forEach(t),Qer=i(pa),T(J0.$$.fragment,pa),pa.forEach(t),rl.forEach(t),tje=i(f),_d=n(f,"H2",{class:!0});var lGe=s(_d);Y0=n(lGe,"A",{id:!0,class:!0,href:!0});var W1t=s(Y0);_ue=n(W1t,"SPAN",{});var Q1t=s(_ue);T(C8.$$.fragment,Q1t),Q1t.forEach(t),W1t.forEach(t),Her=i(lGe),uue=n(lGe,"SPAN",{});var H1t=s(uue);Uer=r(H1t,"AutoModelForCTC"),H1t.forEach(t),lGe.forEach(t),aje=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(w8.$$.fragment,al),Jer=i(al),ud=n(al,"P",{});var ZZ=s(ud);Yer=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pz=n(ZZ,"A",{href:!0});var U1t=s(pz);Ker=r(U1t,"from_pretrained()"),U1t.forEach(t),Zer=r(ZZ," class method or the "),_z=n(ZZ,"A",{href:!0});var J1t=s(_z);eor=r(J1t,"from_config()"),J1t.forEach(t),oor=r(ZZ,` class
method.`),ZZ.forEach(t),ror=i(al),A8=n(al,"P",{});var iGe=s(A8);tor=r(iGe,"This class cannot be instantiated directly using "),bue=n(iGe,"CODE",{});var Y1t=s(bue);aor=r(Y1t,"__init__()"),Y1t.forEach(t),nor=r(iGe," (throws an error)."),iGe.forEach(t),sor=i(al),vt=n(al,"DIV",{class:!0});var fA=s(vt);T(y8.$$.fragment,fA),lor=i(fA),vue=n(fA,"P",{});var K1t=s(vue);ior=r(K1t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),K1t.forEach(t),dor=i(fA),bd=n(fA,"P",{});var eee=s(bd);cor=r(eee,`Note:
Loading a model from its configuration file does `),Fue=n(eee,"STRONG",{});var Z1t=s(Fue);mor=r(Z1t,"not"),Z1t.forEach(t),gor=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(eee,"A",{href:!0});var ebt=s(uz);hor=r(ebt,"from_pretrained()"),ebt.forEach(t),por=r(eee," to load the model weights."),eee.forEach(t),_or=i(fA),T(K0.$$.fragment,fA),fA.forEach(t),uor=i(al),mo=n(al,"DIV",{class:!0});var _a=s(mo);T(L8.$$.fragment,_a),bor=i(_a),Tue=n(_a,"P",{});var obt=s(Tue);vor=r(obt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),obt.forEach(t),For=i(_a),Va=n(_a,"P",{});var mA=s(Va);Tor=r(mA,"The model class to instantiate is selected based on the "),Mue=n(mA,"CODE",{});var rbt=s(Mue);Mor=r(rbt,"model_type"),rbt.forEach(t),Eor=r(mA,` property of the config object (either
passed as an argument or loaded from `),Eue=n(mA,"CODE",{});var tbt=s(Eue);Cor=r(tbt,"pretrained_model_name_or_path"),tbt.forEach(t),wor=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(mA,"CODE",{});var abt=s(Cue);Aor=r(abt,"pretrained_model_name_or_path"),abt.forEach(t),yor=r(mA,":"),mA.forEach(t),Lor=i(_a),ye=n(_a,"UL",{});var Be=s(ye);Z0=n(Be,"LI",{});var Uke=s(Z0);wue=n(Uke,"STRONG",{});var nbt=s(wue);xor=r(nbt,"data2vec-audio"),nbt.forEach(t),$or=r(Uke," \u2014 "),bz=n(Uke,"A",{href:!0});var sbt=s(bz);kor=r(sbt,"Data2VecAudioForCTC"),sbt.forEach(t),Sor=r(Uke," (Data2VecAudio model)"),Uke.forEach(t),Ror=i(Be),eF=n(Be,"LI",{});var Jke=s(eF);Aue=n(Jke,"STRONG",{});var lbt=s(Aue);Por=r(lbt,"hubert"),lbt.forEach(t),Bor=r(Jke," \u2014 "),vz=n(Jke,"A",{href:!0});var ibt=s(vz);Ior=r(ibt,"HubertForCTC"),ibt.forEach(t),Nor=r(Jke," (Hubert model)"),Jke.forEach(t),qor=i(Be),oF=n(Be,"LI",{});var Yke=s(oF);yue=n(Yke,"STRONG",{});var dbt=s(yue);jor=r(dbt,"mctct"),dbt.forEach(t),Dor=r(Yke," \u2014 "),Fz=n(Yke,"A",{href:!0});var cbt=s(Fz);Gor=r(cbt,"MCTCTForCTC"),cbt.forEach(t),Oor=r(Yke," (MCTCT model)"),Yke.forEach(t),Vor=i(Be),rF=n(Be,"LI",{});var Kke=s(rF);Lue=n(Kke,"STRONG",{});var fbt=s(Lue);Xor=r(fbt,"sew"),fbt.forEach(t),zor=r(Kke," \u2014 "),Tz=n(Kke,"A",{href:!0});var mbt=s(Tz);Wor=r(mbt,"SEWForCTC"),mbt.forEach(t),Qor=r(Kke," (SEW model)"),Kke.forEach(t),Hor=i(Be),tF=n(Be,"LI",{});var Zke=s(tF);xue=n(Zke,"STRONG",{});var gbt=s(xue);Uor=r(gbt,"sew-d"),gbt.forEach(t),Jor=r(Zke," \u2014 "),Mz=n(Zke,"A",{href:!0});var hbt=s(Mz);Yor=r(hbt,"SEWDForCTC"),hbt.forEach(t),Kor=r(Zke," (SEW-D model)"),Zke.forEach(t),Zor=i(Be),aF=n(Be,"LI",{});var eSe=s(aF);$ue=n(eSe,"STRONG",{});var pbt=s($ue);err=r(pbt,"unispeech"),pbt.forEach(t),orr=r(eSe," \u2014 "),Ez=n(eSe,"A",{href:!0});var _bt=s(Ez);rrr=r(_bt,"UniSpeechForCTC"),_bt.forEach(t),trr=r(eSe," (UniSpeech model)"),eSe.forEach(t),arr=i(Be),nF=n(Be,"LI",{});var oSe=s(nF);kue=n(oSe,"STRONG",{});var ubt=s(kue);nrr=r(ubt,"unispeech-sat"),ubt.forEach(t),srr=r(oSe," \u2014 "),Cz=n(oSe,"A",{href:!0});var bbt=s(Cz);lrr=r(bbt,"UniSpeechSatForCTC"),bbt.forEach(t),irr=r(oSe," (UniSpeechSat model)"),oSe.forEach(t),drr=i(Be),sF=n(Be,"LI",{});var rSe=s(sF);Sue=n(rSe,"STRONG",{});var vbt=s(Sue);crr=r(vbt,"wav2vec2"),vbt.forEach(t),frr=r(rSe," \u2014 "),wz=n(rSe,"A",{href:!0});var Fbt=s(wz);mrr=r(Fbt,"Wav2Vec2ForCTC"),Fbt.forEach(t),grr=r(rSe," (Wav2Vec2 model)"),rSe.forEach(t),hrr=i(Be),lF=n(Be,"LI",{});var tSe=s(lF);Rue=n(tSe,"STRONG",{});var Tbt=s(Rue);prr=r(Tbt,"wav2vec2-conformer"),Tbt.forEach(t),_rr=r(tSe," \u2014 "),Az=n(tSe,"A",{href:!0});var Mbt=s(Az);urr=r(Mbt,"Wav2Vec2ConformerForCTC"),Mbt.forEach(t),brr=r(tSe," (Wav2Vec2-Conformer model)"),tSe.forEach(t),vrr=i(Be),iF=n(Be,"LI",{});var aSe=s(iF);Pue=n(aSe,"STRONG",{});var Ebt=s(Pue);Frr=r(Ebt,"wavlm"),Ebt.forEach(t),Trr=r(aSe," \u2014 "),yz=n(aSe,"A",{href:!0});var Cbt=s(yz);Mrr=r(Cbt,"WavLMForCTC"),Cbt.forEach(t),Err=r(aSe," (WavLM model)"),aSe.forEach(t),Be.forEach(t),Crr=i(_a),dF=n(_a,"P",{});var nSe=s(dF);wrr=r(nSe,"The model is set in evaluation mode by default using "),Bue=n(nSe,"CODE",{});var wbt=s(Bue);Arr=r(wbt,"model.eval()"),wbt.forEach(t),yrr=r(nSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iue=n(nSe,"CODE",{});var Abt=s(Iue);Lrr=r(Abt,"model.train()"),Abt.forEach(t),nSe.forEach(t),xrr=i(_a),T(cF.$$.fragment,_a),_a.forEach(t),al.forEach(t),nje=i(f),vd=n(f,"H2",{class:!0});var dGe=s(vd);fF=n(dGe,"A",{id:!0,class:!0,href:!0});var ybt=s(fF);Nue=n(ybt,"SPAN",{});var Lbt=s(Nue);T(x8.$$.fragment,Lbt),Lbt.forEach(t),ybt.forEach(t),$rr=i(dGe),que=n(dGe,"SPAN",{});var xbt=s(que);krr=r(xbt,"AutoModelForSpeechSeq2Seq"),xbt.forEach(t),dGe.forEach(t),sje=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T($8.$$.fragment,nl),Srr=i(nl),Fd=n(nl,"P",{});var oee=s(Fd);Rrr=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Lz=n(oee,"A",{href:!0});var $bt=s(Lz);Prr=r($bt,"from_pretrained()"),$bt.forEach(t),Brr=r(oee," class method or the "),xz=n(oee,"A",{href:!0});var kbt=s(xz);Irr=r(kbt,"from_config()"),kbt.forEach(t),Nrr=r(oee,` class
method.`),oee.forEach(t),qrr=i(nl),k8=n(nl,"P",{});var cGe=s(k8);jrr=r(cGe,"This class cannot be instantiated directly using "),jue=n(cGe,"CODE",{});var Sbt=s(jue);Drr=r(Sbt,"__init__()"),Sbt.forEach(t),Grr=r(cGe," (throws an error)."),cGe.forEach(t),Orr=i(nl),Ft=n(nl,"DIV",{class:!0});var gA=s(Ft);T(S8.$$.fragment,gA),Vrr=i(gA),Due=n(gA,"P",{});var Rbt=s(Due);Xrr=r(Rbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Rbt.forEach(t),zrr=i(gA),Td=n(gA,"P",{});var ree=s(Td);Wrr=r(ree,`Note:
Loading a model from its configuration file does `),Gue=n(ree,"STRONG",{});var Pbt=s(Gue);Qrr=r(Pbt,"not"),Pbt.forEach(t),Hrr=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(ree,"A",{href:!0});var Bbt=s($z);Urr=r(Bbt,"from_pretrained()"),Bbt.forEach(t),Jrr=r(ree," to load the model weights."),ree.forEach(t),Yrr=i(gA),T(mF.$$.fragment,gA),gA.forEach(t),Krr=i(nl),go=n(nl,"DIV",{class:!0});var ua=s(go);T(R8.$$.fragment,ua),Zrr=i(ua),Oue=n(ua,"P",{});var Ibt=s(Oue);etr=r(Ibt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ibt.forEach(t),otr=i(ua),Xa=n(ua,"P",{});var hA=s(Xa);rtr=r(hA,"The model class to instantiate is selected based on the "),Vue=n(hA,"CODE",{});var Nbt=s(Vue);ttr=r(Nbt,"model_type"),Nbt.forEach(t),atr=r(hA,` property of the config object (either
passed as an argument or loaded from `),Xue=n(hA,"CODE",{});var qbt=s(Xue);ntr=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),str=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=n(hA,"CODE",{});var jbt=s(zue);ltr=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),itr=r(hA,":"),hA.forEach(t),dtr=i(ua),P8=n(ua,"UL",{});var fGe=s(P8);gF=n(fGe,"LI",{});var sSe=s(gF);Wue=n(sSe,"STRONG",{});var Dbt=s(Wue);ctr=r(Dbt,"speech-encoder-decoder"),Dbt.forEach(t),ftr=r(sSe," \u2014 "),kz=n(sSe,"A",{href:!0});var Gbt=s(kz);mtr=r(Gbt,"SpeechEncoderDecoderModel"),Gbt.forEach(t),gtr=r(sSe," (Speech Encoder decoder model)"),sSe.forEach(t),htr=i(fGe),hF=n(fGe,"LI",{});var lSe=s(hF);Que=n(lSe,"STRONG",{});var Obt=s(Que);ptr=r(Obt,"speech_to_text"),Obt.forEach(t),_tr=r(lSe," \u2014 "),Sz=n(lSe,"A",{href:!0});var Vbt=s(Sz);utr=r(Vbt,"Speech2TextForConditionalGeneration"),Vbt.forEach(t),btr=r(lSe," (Speech2Text model)"),lSe.forEach(t),fGe.forEach(t),vtr=i(ua),pF=n(ua,"P",{});var iSe=s(pF);Ftr=r(iSe,"The model is set in evaluation mode by default using "),Hue=n(iSe,"CODE",{});var Xbt=s(Hue);Ttr=r(Xbt,"model.eval()"),Xbt.forEach(t),Mtr=r(iSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(iSe,"CODE",{});var zbt=s(Uue);Etr=r(zbt,"model.train()"),zbt.forEach(t),iSe.forEach(t),Ctr=i(ua),T(_F.$$.fragment,ua),ua.forEach(t),nl.forEach(t),lje=i(f),Md=n(f,"H2",{class:!0});var mGe=s(Md);uF=n(mGe,"A",{id:!0,class:!0,href:!0});var Wbt=s(uF);Jue=n(Wbt,"SPAN",{});var Qbt=s(Jue);T(B8.$$.fragment,Qbt),Qbt.forEach(t),Wbt.forEach(t),wtr=i(mGe),Yue=n(mGe,"SPAN",{});var Hbt=s(Yue);Atr=r(Hbt,"AutoModelForAudioXVector"),Hbt.forEach(t),mGe.forEach(t),ije=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(I8.$$.fragment,sl),ytr=i(sl),Ed=n(sl,"P",{});var tee=s(Ed);Ltr=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Rz=n(tee,"A",{href:!0});var Ubt=s(Rz);xtr=r(Ubt,"from_pretrained()"),Ubt.forEach(t),$tr=r(tee," class method or the "),Pz=n(tee,"A",{href:!0});var Jbt=s(Pz);ktr=r(Jbt,"from_config()"),Jbt.forEach(t),Str=r(tee,` class
method.`),tee.forEach(t),Rtr=i(sl),N8=n(sl,"P",{});var gGe=s(N8);Ptr=r(gGe,"This class cannot be instantiated directly using "),Kue=n(gGe,"CODE",{});var Ybt=s(Kue);Btr=r(Ybt,"__init__()"),Ybt.forEach(t),Itr=r(gGe," (throws an error)."),gGe.forEach(t),Ntr=i(sl),Tt=n(sl,"DIV",{class:!0});var pA=s(Tt);T(q8.$$.fragment,pA),qtr=i(pA),Zue=n(pA,"P",{});var Kbt=s(Zue);jtr=r(Kbt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Kbt.forEach(t),Dtr=i(pA),Cd=n(pA,"P",{});var aee=s(Cd);Gtr=r(aee,`Note:
Loading a model from its configuration file does `),e2e=n(aee,"STRONG",{});var Zbt=s(e2e);Otr=r(Zbt,"not"),Zbt.forEach(t),Vtr=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(aee,"A",{href:!0});var e4t=s(Bz);Xtr=r(e4t,"from_pretrained()"),e4t.forEach(t),ztr=r(aee," to load the model weights."),aee.forEach(t),Wtr=i(pA),T(bF.$$.fragment,pA),pA.forEach(t),Qtr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(j8.$$.fragment,ba),Htr=i(ba),o2e=n(ba,"P",{});var o4t=s(o2e);Utr=r(o4t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),o4t.forEach(t),Jtr=i(ba),za=n(ba,"P",{});var _A=s(za);Ytr=r(_A,"The model class to instantiate is selected based on the "),r2e=n(_A,"CODE",{});var r4t=s(r2e);Ktr=r(r4t,"model_type"),r4t.forEach(t),Ztr=r(_A,` property of the config object (either
passed as an argument or loaded from `),t2e=n(_A,"CODE",{});var t4t=s(t2e);ear=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),oar=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=n(_A,"CODE",{});var a4t=s(a2e);rar=r(a4t,"pretrained_model_name_or_path"),a4t.forEach(t),tar=r(_A,":"),_A.forEach(t),aar=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);vF=n(ll,"LI",{});var dSe=s(vF);n2e=n(dSe,"STRONG",{});var n4t=s(n2e);nar=r(n4t,"data2vec-audio"),n4t.forEach(t),sar=r(dSe," \u2014 "),Iz=n(dSe,"A",{href:!0});var s4t=s(Iz);lar=r(s4t,"Data2VecAudioForXVector"),s4t.forEach(t),iar=r(dSe," (Data2VecAudio model)"),dSe.forEach(t),dar=i(ll),FF=n(ll,"LI",{});var cSe=s(FF);s2e=n(cSe,"STRONG",{});var l4t=s(s2e);car=r(l4t,"unispeech-sat"),l4t.forEach(t),far=r(cSe," \u2014 "),Nz=n(cSe,"A",{href:!0});var i4t=s(Nz);mar=r(i4t,"UniSpeechSatForXVector"),i4t.forEach(t),gar=r(cSe," (UniSpeechSat model)"),cSe.forEach(t),har=i(ll),TF=n(ll,"LI",{});var fSe=s(TF);l2e=n(fSe,"STRONG",{});var d4t=s(l2e);par=r(d4t,"wav2vec2"),d4t.forEach(t),_ar=r(fSe," \u2014 "),qz=n(fSe,"A",{href:!0});var c4t=s(qz);uar=r(c4t,"Wav2Vec2ForXVector"),c4t.forEach(t),bar=r(fSe," (Wav2Vec2 model)"),fSe.forEach(t),Far=i(ll),MF=n(ll,"LI",{});var mSe=s(MF);i2e=n(mSe,"STRONG",{});var f4t=s(i2e);Tar=r(f4t,"wav2vec2-conformer"),f4t.forEach(t),Mar=r(mSe," \u2014 "),jz=n(mSe,"A",{href:!0});var m4t=s(jz);Ear=r(m4t,"Wav2Vec2ConformerForXVector"),m4t.forEach(t),Car=r(mSe," (Wav2Vec2-Conformer model)"),mSe.forEach(t),war=i(ll),EF=n(ll,"LI",{});var gSe=s(EF);d2e=n(gSe,"STRONG",{});var g4t=s(d2e);Aar=r(g4t,"wavlm"),g4t.forEach(t),yar=r(gSe," \u2014 "),Dz=n(gSe,"A",{href:!0});var h4t=s(Dz);Lar=r(h4t,"WavLMForXVector"),h4t.forEach(t),xar=r(gSe," (WavLM model)"),gSe.forEach(t),ll.forEach(t),$ar=i(ba),CF=n(ba,"P",{});var hSe=s(CF);kar=r(hSe,"The model is set in evaluation mode by default using "),c2e=n(hSe,"CODE",{});var p4t=s(c2e);Sar=r(p4t,"model.eval()"),p4t.forEach(t),Rar=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f2e=n(hSe,"CODE",{});var _4t=s(f2e);Par=r(_4t,"model.train()"),_4t.forEach(t),hSe.forEach(t),Bar=i(ba),T(wF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),dje=i(f),wd=n(f,"H2",{class:!0});var hGe=s(wd);AF=n(hGe,"A",{id:!0,class:!0,href:!0});var u4t=s(AF);m2e=n(u4t,"SPAN",{});var b4t=s(m2e);T(D8.$$.fragment,b4t),b4t.forEach(t),u4t.forEach(t),Iar=i(hGe),g2e=n(hGe,"SPAN",{});var v4t=s(g2e);Nar=r(v4t,"AutoModelForMaskedImageModeling"),v4t.forEach(t),hGe.forEach(t),cje=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(G8.$$.fragment,il),qar=i(il),Ad=n(il,"P",{});var nee=s(Ad);jar=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Gz=n(nee,"A",{href:!0});var F4t=s(Gz);Dar=r(F4t,"from_pretrained()"),F4t.forEach(t),Gar=r(nee," class method or the "),Oz=n(nee,"A",{href:!0});var T4t=s(Oz);Oar=r(T4t,"from_config()"),T4t.forEach(t),Var=r(nee,` class
method.`),nee.forEach(t),Xar=i(il),O8=n(il,"P",{});var pGe=s(O8);zar=r(pGe,"This class cannot be instantiated directly using "),h2e=n(pGe,"CODE",{});var M4t=s(h2e);War=r(M4t,"__init__()"),M4t.forEach(t),Qar=r(pGe," (throws an error)."),pGe.forEach(t),Har=i(il),Mt=n(il,"DIV",{class:!0});var uA=s(Mt);T(V8.$$.fragment,uA),Uar=i(uA),p2e=n(uA,"P",{});var E4t=s(p2e);Jar=r(E4t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),E4t.forEach(t),Yar=i(uA),yd=n(uA,"P",{});var see=s(yd);Kar=r(see,`Note:
Loading a model from its configuration file does `),_2e=n(see,"STRONG",{});var C4t=s(_2e);Zar=r(C4t,"not"),C4t.forEach(t),enr=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(see,"A",{href:!0});var w4t=s(Vz);onr=r(w4t,"from_pretrained()"),w4t.forEach(t),rnr=r(see," to load the model weights."),see.forEach(t),tnr=i(uA),T(yF.$$.fragment,uA),uA.forEach(t),anr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(X8.$$.fragment,va),nnr=i(va),u2e=n(va,"P",{});var A4t=s(u2e);snr=r(A4t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),A4t.forEach(t),lnr=i(va),Wa=n(va,"P",{});var bA=s(Wa);inr=r(bA,"The model class to instantiate is selected based on the "),b2e=n(bA,"CODE",{});var y4t=s(b2e);dnr=r(y4t,"model_type"),y4t.forEach(t),cnr=r(bA,` property of the config object (either
passed as an argument or loaded from `),v2e=n(bA,"CODE",{});var L4t=s(v2e);fnr=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),mnr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=n(bA,"CODE",{});var x4t=s(F2e);gnr=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),hnr=r(bA,":"),bA.forEach(t),pnr=i(va),Ld=n(va,"UL",{});var lee=s(Ld);LF=n(lee,"LI",{});var pSe=s(LF);T2e=n(pSe,"STRONG",{});var $4t=s(T2e);_nr=r($4t,"deit"),$4t.forEach(t),unr=r(pSe," \u2014 "),Xz=n(pSe,"A",{href:!0});var k4t=s(Xz);bnr=r(k4t,"DeiTForMaskedImageModeling"),k4t.forEach(t),vnr=r(pSe," (DeiT model)"),pSe.forEach(t),Fnr=i(lee),xF=n(lee,"LI",{});var _Se=s(xF);M2e=n(_Se,"STRONG",{});var S4t=s(M2e);Tnr=r(S4t,"swin"),S4t.forEach(t),Mnr=r(_Se," \u2014 "),zz=n(_Se,"A",{href:!0});var R4t=s(zz);Enr=r(R4t,"SwinForMaskedImageModeling"),R4t.forEach(t),Cnr=r(_Se," (Swin model)"),_Se.forEach(t),wnr=i(lee),$F=n(lee,"LI",{});var uSe=s($F);E2e=n(uSe,"STRONG",{});var P4t=s(E2e);Anr=r(P4t,"vit"),P4t.forEach(t),ynr=r(uSe," \u2014 "),Wz=n(uSe,"A",{href:!0});var B4t=s(Wz);Lnr=r(B4t,"ViTForMaskedImageModeling"),B4t.forEach(t),xnr=r(uSe," (ViT model)"),uSe.forEach(t),lee.forEach(t),$nr=i(va),kF=n(va,"P",{});var bSe=s(kF);knr=r(bSe,"The model is set in evaluation mode by default using "),C2e=n(bSe,"CODE",{});var I4t=s(C2e);Snr=r(I4t,"model.eval()"),I4t.forEach(t),Rnr=r(bSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w2e=n(bSe,"CODE",{});var N4t=s(w2e);Pnr=r(N4t,"model.train()"),N4t.forEach(t),bSe.forEach(t),Bnr=i(va),T(SF.$$.fragment,va),va.forEach(t),il.forEach(t),fje=i(f),xd=n(f,"H2",{class:!0});var _Ge=s(xd);RF=n(_Ge,"A",{id:!0,class:!0,href:!0});var q4t=s(RF);A2e=n(q4t,"SPAN",{});var j4t=s(A2e);T(z8.$$.fragment,j4t),j4t.forEach(t),q4t.forEach(t),Inr=i(_Ge),y2e=n(_Ge,"SPAN",{});var D4t=s(y2e);Nnr=r(D4t,"AutoModelForObjectDetection"),D4t.forEach(t),_Ge.forEach(t),mje=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(W8.$$.fragment,dl),qnr=i(dl),$d=n(dl,"P",{});var iee=s($d);jnr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Qz=n(iee,"A",{href:!0});var G4t=s(Qz);Dnr=r(G4t,"from_pretrained()"),G4t.forEach(t),Gnr=r(iee," class method or the "),Hz=n(iee,"A",{href:!0});var O4t=s(Hz);Onr=r(O4t,"from_config()"),O4t.forEach(t),Vnr=r(iee,` class
method.`),iee.forEach(t),Xnr=i(dl),Q8=n(dl,"P",{});var uGe=s(Q8);znr=r(uGe,"This class cannot be instantiated directly using "),L2e=n(uGe,"CODE",{});var V4t=s(L2e);Wnr=r(V4t,"__init__()"),V4t.forEach(t),Qnr=r(uGe," (throws an error)."),uGe.forEach(t),Hnr=i(dl),Et=n(dl,"DIV",{class:!0});var vA=s(Et);T(H8.$$.fragment,vA),Unr=i(vA),x2e=n(vA,"P",{});var X4t=s(x2e);Jnr=r(X4t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),X4t.forEach(t),Ynr=i(vA),kd=n(vA,"P",{});var dee=s(kd);Knr=r(dee,`Note:
Loading a model from its configuration file does `),$2e=n(dee,"STRONG",{});var z4t=s($2e);Znr=r(z4t,"not"),z4t.forEach(t),esr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(dee,"A",{href:!0});var W4t=s(Uz);osr=r(W4t,"from_pretrained()"),W4t.forEach(t),rsr=r(dee," to load the model weights."),dee.forEach(t),tsr=i(vA),T(PF.$$.fragment,vA),vA.forEach(t),asr=i(dl),_o=n(dl,"DIV",{class:!0});var Fa=s(_o);T(U8.$$.fragment,Fa),nsr=i(Fa),k2e=n(Fa,"P",{});var Q4t=s(k2e);ssr=r(Q4t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Q4t.forEach(t),lsr=i(Fa),Qa=n(Fa,"P",{});var FA=s(Qa);isr=r(FA,"The model class to instantiate is selected based on the "),S2e=n(FA,"CODE",{});var H4t=s(S2e);dsr=r(H4t,"model_type"),H4t.forEach(t),csr=r(FA,` property of the config object (either
passed as an argument or loaded from `),R2e=n(FA,"CODE",{});var U4t=s(R2e);fsr=r(U4t,"pretrained_model_name_or_path"),U4t.forEach(t),msr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=n(FA,"CODE",{});var J4t=s(P2e);gsr=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),hsr=r(FA,":"),FA.forEach(t),psr=i(Fa),J8=n(Fa,"UL",{});var bGe=s(J8);BF=n(bGe,"LI",{});var vSe=s(BF);B2e=n(vSe,"STRONG",{});var Y4t=s(B2e);_sr=r(Y4t,"detr"),Y4t.forEach(t),usr=r(vSe," \u2014 "),Jz=n(vSe,"A",{href:!0});var K4t=s(Jz);bsr=r(K4t,"DetrForObjectDetection"),K4t.forEach(t),vsr=r(vSe," (DETR model)"),vSe.forEach(t),Fsr=i(bGe),IF=n(bGe,"LI",{});var FSe=s(IF);I2e=n(FSe,"STRONG",{});var Z4t=s(I2e);Tsr=r(Z4t,"yolos"),Z4t.forEach(t),Msr=r(FSe," \u2014 "),Yz=n(FSe,"A",{href:!0});var evt=s(Yz);Esr=r(evt,"YolosForObjectDetection"),evt.forEach(t),Csr=r(FSe," (YOLOS model)"),FSe.forEach(t),bGe.forEach(t),wsr=i(Fa),NF=n(Fa,"P",{});var TSe=s(NF);Asr=r(TSe,"The model is set in evaluation mode by default using "),N2e=n(TSe,"CODE",{});var ovt=s(N2e);ysr=r(ovt,"model.eval()"),ovt.forEach(t),Lsr=r(TSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=n(TSe,"CODE",{});var rvt=s(q2e);xsr=r(rvt,"model.train()"),rvt.forEach(t),TSe.forEach(t),$sr=i(Fa),T(qF.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),gje=i(f),Sd=n(f,"H2",{class:!0});var vGe=s(Sd);jF=n(vGe,"A",{id:!0,class:!0,href:!0});var tvt=s(jF);j2e=n(tvt,"SPAN",{});var avt=s(j2e);T(Y8.$$.fragment,avt),avt.forEach(t),tvt.forEach(t),ksr=i(vGe),D2e=n(vGe,"SPAN",{});var nvt=s(D2e);Ssr=r(nvt,"AutoModelForImageSegmentation"),nvt.forEach(t),vGe.forEach(t),hje=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(K8.$$.fragment,cl),Rsr=i(cl),Rd=n(cl,"P",{});var cee=s(Rd);Psr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Kz=n(cee,"A",{href:!0});var svt=s(Kz);Bsr=r(svt,"from_pretrained()"),svt.forEach(t),Isr=r(cee," class method or the "),Zz=n(cee,"A",{href:!0});var lvt=s(Zz);Nsr=r(lvt,"from_config()"),lvt.forEach(t),qsr=r(cee,` class
method.`),cee.forEach(t),jsr=i(cl),Z8=n(cl,"P",{});var FGe=s(Z8);Dsr=r(FGe,"This class cannot be instantiated directly using "),G2e=n(FGe,"CODE",{});var ivt=s(G2e);Gsr=r(ivt,"__init__()"),ivt.forEach(t),Osr=r(FGe," (throws an error)."),FGe.forEach(t),Vsr=i(cl),Ct=n(cl,"DIV",{class:!0});var TA=s(Ct);T(e7.$$.fragment,TA),Xsr=i(TA),O2e=n(TA,"P",{});var dvt=s(O2e);zsr=r(dvt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),dvt.forEach(t),Wsr=i(TA),Pd=n(TA,"P",{});var fee=s(Pd);Qsr=r(fee,`Note:
Loading a model from its configuration file does `),V2e=n(fee,"STRONG",{});var cvt=s(V2e);Hsr=r(cvt,"not"),cvt.forEach(t),Usr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(fee,"A",{href:!0});var fvt=s(eW);Jsr=r(fvt,"from_pretrained()"),fvt.forEach(t),Ysr=r(fee," to load the model weights."),fee.forEach(t),Ksr=i(TA),T(DF.$$.fragment,TA),TA.forEach(t),Zsr=i(cl),uo=n(cl,"DIV",{class:!0});var Ta=s(uo);T(o7.$$.fragment,Ta),elr=i(Ta),X2e=n(Ta,"P",{});var mvt=s(X2e);olr=r(mvt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),mvt.forEach(t),rlr=i(Ta),Ha=n(Ta,"P",{});var MA=s(Ha);tlr=r(MA,"The model class to instantiate is selected based on the "),z2e=n(MA,"CODE",{});var gvt=s(z2e);alr=r(gvt,"model_type"),gvt.forEach(t),nlr=r(MA,` property of the config object (either
passed as an argument or loaded from `),W2e=n(MA,"CODE",{});var hvt=s(W2e);slr=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),llr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(MA,"CODE",{});var pvt=s(Q2e);ilr=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),dlr=r(MA,":"),MA.forEach(t),clr=i(Ta),H2e=n(Ta,"UL",{});var _vt=s(H2e);GF=n(_vt,"LI",{});var MSe=s(GF);U2e=n(MSe,"STRONG",{});var uvt=s(U2e);flr=r(uvt,"detr"),uvt.forEach(t),mlr=r(MSe," \u2014 "),oW=n(MSe,"A",{href:!0});var bvt=s(oW);glr=r(bvt,"DetrForSegmentation"),bvt.forEach(t),hlr=r(MSe," (DETR model)"),MSe.forEach(t),_vt.forEach(t),plr=i(Ta),OF=n(Ta,"P",{});var ESe=s(OF);_lr=r(ESe,"The model is set in evaluation mode by default using "),J2e=n(ESe,"CODE",{});var vvt=s(J2e);ulr=r(vvt,"model.eval()"),vvt.forEach(t),blr=r(ESe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y2e=n(ESe,"CODE",{});var Fvt=s(Y2e);vlr=r(Fvt,"model.train()"),Fvt.forEach(t),ESe.forEach(t),Flr=i(Ta),T(VF.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),pje=i(f),Bd=n(f,"H2",{class:!0});var TGe=s(Bd);XF=n(TGe,"A",{id:!0,class:!0,href:!0});var Tvt=s(XF);K2e=n(Tvt,"SPAN",{});var Mvt=s(K2e);T(r7.$$.fragment,Mvt),Mvt.forEach(t),Tvt.forEach(t),Tlr=i(TGe),Z2e=n(TGe,"SPAN",{});var Evt=s(Z2e);Mlr=r(Evt,"AutoModelForSemanticSegmentation"),Evt.forEach(t),TGe.forEach(t),_je=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(t7.$$.fragment,fl),Elr=i(fl),Id=n(fl,"P",{});var mee=s(Id);Clr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),rW=n(mee,"A",{href:!0});var Cvt=s(rW);wlr=r(Cvt,"from_pretrained()"),Cvt.forEach(t),Alr=r(mee," class method or the "),tW=n(mee,"A",{href:!0});var wvt=s(tW);ylr=r(wvt,"from_config()"),wvt.forEach(t),Llr=r(mee,` class
method.`),mee.forEach(t),xlr=i(fl),a7=n(fl,"P",{});var MGe=s(a7);$lr=r(MGe,"This class cannot be instantiated directly using "),e1e=n(MGe,"CODE",{});var Avt=s(e1e);klr=r(Avt,"__init__()"),Avt.forEach(t),Slr=r(MGe," (throws an error)."),MGe.forEach(t),Rlr=i(fl),wt=n(fl,"DIV",{class:!0});var EA=s(wt);T(n7.$$.fragment,EA),Plr=i(EA),o1e=n(EA,"P",{});var yvt=s(o1e);Blr=r(yvt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),yvt.forEach(t),Ilr=i(EA),Nd=n(EA,"P",{});var gee=s(Nd);Nlr=r(gee,`Note:
Loading a model from its configuration file does `),r1e=n(gee,"STRONG",{});var Lvt=s(r1e);qlr=r(Lvt,"not"),Lvt.forEach(t),jlr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(gee,"A",{href:!0});var xvt=s(aW);Dlr=r(xvt,"from_pretrained()"),xvt.forEach(t),Glr=r(gee," to load the model weights."),gee.forEach(t),Olr=i(EA),T(zF.$$.fragment,EA),EA.forEach(t),Vlr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(s7.$$.fragment,Ma),Xlr=i(Ma),t1e=n(Ma,"P",{});var $vt=s(t1e);zlr=r($vt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),$vt.forEach(t),Wlr=i(Ma),Ua=n(Ma,"P",{});var CA=s(Ua);Qlr=r(CA,"The model class to instantiate is selected based on the "),a1e=n(CA,"CODE",{});var kvt=s(a1e);Hlr=r(kvt,"model_type"),kvt.forEach(t),Ulr=r(CA,` property of the config object (either
passed as an argument or loaded from `),n1e=n(CA,"CODE",{});var Svt=s(n1e);Jlr=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),Ylr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=n(CA,"CODE",{});var Rvt=s(s1e);Klr=r(Rvt,"pretrained_model_name_or_path"),Rvt.forEach(t),Zlr=r(CA,":"),CA.forEach(t),eir=i(Ma),Ja=n(Ma,"UL",{});var wA=s(Ja);WF=n(wA,"LI",{});var CSe=s(WF);l1e=n(CSe,"STRONG",{});var Pvt=s(l1e);oir=r(Pvt,"beit"),Pvt.forEach(t),rir=r(CSe," \u2014 "),nW=n(CSe,"A",{href:!0});var Bvt=s(nW);tir=r(Bvt,"BeitForSemanticSegmentation"),Bvt.forEach(t),air=r(CSe," (BEiT model)"),CSe.forEach(t),nir=i(wA),QF=n(wA,"LI",{});var wSe=s(QF);i1e=n(wSe,"STRONG",{});var Ivt=s(i1e);sir=r(Ivt,"data2vec-vision"),Ivt.forEach(t),lir=r(wSe," \u2014 "),sW=n(wSe,"A",{href:!0});var Nvt=s(sW);iir=r(Nvt,"Data2VecVisionForSemanticSegmentation"),Nvt.forEach(t),dir=r(wSe," (Data2VecVision model)"),wSe.forEach(t),cir=i(wA),HF=n(wA,"LI",{});var ASe=s(HF);d1e=n(ASe,"STRONG",{});var qvt=s(d1e);fir=r(qvt,"dpt"),qvt.forEach(t),mir=r(ASe," \u2014 "),lW=n(ASe,"A",{href:!0});var jvt=s(lW);gir=r(jvt,"DPTForSemanticSegmentation"),jvt.forEach(t),hir=r(ASe," (DPT model)"),ASe.forEach(t),pir=i(wA),UF=n(wA,"LI",{});var ySe=s(UF);c1e=n(ySe,"STRONG",{});var Dvt=s(c1e);_ir=r(Dvt,"segformer"),Dvt.forEach(t),uir=r(ySe," \u2014 "),iW=n(ySe,"A",{href:!0});var Gvt=s(iW);bir=r(Gvt,"SegformerForSemanticSegmentation"),Gvt.forEach(t),vir=r(ySe," (SegFormer model)"),ySe.forEach(t),wA.forEach(t),Fir=i(Ma),JF=n(Ma,"P",{});var LSe=s(JF);Tir=r(LSe,"The model is set in evaluation mode by default using "),f1e=n(LSe,"CODE",{});var Ovt=s(f1e);Mir=r(Ovt,"model.eval()"),Ovt.forEach(t),Eir=r(LSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m1e=n(LSe,"CODE",{});var Vvt=s(m1e);Cir=r(Vvt,"model.train()"),Vvt.forEach(t),LSe.forEach(t),wir=i(Ma),T(YF.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),uje=i(f),qd=n(f,"H2",{class:!0});var EGe=s(qd);KF=n(EGe,"A",{id:!0,class:!0,href:!0});var Xvt=s(KF);g1e=n(Xvt,"SPAN",{});var zvt=s(g1e);T(l7.$$.fragment,zvt),zvt.forEach(t),Xvt.forEach(t),Air=i(EGe),h1e=n(EGe,"SPAN",{});var Wvt=s(h1e);yir=r(Wvt,"AutoModelForInstanceSegmentation"),Wvt.forEach(t),EGe.forEach(t),bje=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(i7.$$.fragment,ml),Lir=i(ml),jd=n(ml,"P",{});var hee=s(jd);xir=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),dW=n(hee,"A",{href:!0});var Qvt=s(dW);$ir=r(Qvt,"from_pretrained()"),Qvt.forEach(t),kir=r(hee," class method or the "),cW=n(hee,"A",{href:!0});var Hvt=s(cW);Sir=r(Hvt,"from_config()"),Hvt.forEach(t),Rir=r(hee,` class
method.`),hee.forEach(t),Pir=i(ml),d7=n(ml,"P",{});var CGe=s(d7);Bir=r(CGe,"This class cannot be instantiated directly using "),p1e=n(CGe,"CODE",{});var Uvt=s(p1e);Iir=r(Uvt,"__init__()"),Uvt.forEach(t),Nir=r(CGe," (throws an error)."),CGe.forEach(t),qir=i(ml),At=n(ml,"DIV",{class:!0});var AA=s(At);T(c7.$$.fragment,AA),jir=i(AA),_1e=n(AA,"P",{});var Jvt=s(_1e);Dir=r(Jvt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Jvt.forEach(t),Gir=i(AA),Dd=n(AA,"P",{});var pee=s(Dd);Oir=r(pee,`Note:
Loading a model from its configuration file does `),u1e=n(pee,"STRONG",{});var Yvt=s(u1e);Vir=r(Yvt,"not"),Yvt.forEach(t),Xir=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(pee,"A",{href:!0});var Kvt=s(fW);zir=r(Kvt,"from_pretrained()"),Kvt.forEach(t),Wir=r(pee," to load the model weights."),pee.forEach(t),Qir=i(AA),T(ZF.$$.fragment,AA),AA.forEach(t),Hir=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(f7.$$.fragment,Ea),Uir=i(Ea),b1e=n(Ea,"P",{});var Zvt=s(b1e);Jir=r(Zvt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Zvt.forEach(t),Yir=i(Ea),Ya=n(Ea,"P",{});var yA=s(Ya);Kir=r(yA,"The model class to instantiate is selected based on the "),v1e=n(yA,"CODE",{});var e0t=s(v1e);Zir=r(e0t,"model_type"),e0t.forEach(t),edr=r(yA,` property of the config object (either
passed as an argument or loaded from `),F1e=n(yA,"CODE",{});var o0t=s(F1e);odr=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),rdr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=n(yA,"CODE",{});var r0t=s(T1e);tdr=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),adr=r(yA,":"),yA.forEach(t),ndr=i(Ea),M1e=n(Ea,"UL",{});var t0t=s(M1e);e6=n(t0t,"LI",{});var xSe=s(e6);E1e=n(xSe,"STRONG",{});var a0t=s(E1e);sdr=r(a0t,"maskformer"),a0t.forEach(t),ldr=r(xSe," \u2014 "),mW=n(xSe,"A",{href:!0});var n0t=s(mW);idr=r(n0t,"MaskFormerForInstanceSegmentation"),n0t.forEach(t),ddr=r(xSe," (MaskFormer model)"),xSe.forEach(t),t0t.forEach(t),cdr=i(Ea),o6=n(Ea,"P",{});var $Se=s(o6);fdr=r($Se,"The model is set in evaluation mode by default using "),C1e=n($Se,"CODE",{});var s0t=s(C1e);mdr=r(s0t,"model.eval()"),s0t.forEach(t),gdr=r($Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w1e=n($Se,"CODE",{});var l0t=s(w1e);hdr=r(l0t,"model.train()"),l0t.forEach(t),$Se.forEach(t),pdr=i(Ea),T(r6.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),vje=i(f),Gd=n(f,"H2",{class:!0});var wGe=s(Gd);t6=n(wGe,"A",{id:!0,class:!0,href:!0});var i0t=s(t6);A1e=n(i0t,"SPAN",{});var d0t=s(A1e);T(m7.$$.fragment,d0t),d0t.forEach(t),i0t.forEach(t),_dr=i(wGe),y1e=n(wGe,"SPAN",{});var c0t=s(y1e);udr=r(c0t,"TFAutoModel"),c0t.forEach(t),wGe.forEach(t),Fje=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(g7.$$.fragment,gl),bdr=i(gl),Od=n(gl,"P",{});var _ee=s(Od);vdr=r(_ee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gW=n(_ee,"A",{href:!0});var f0t=s(gW);Fdr=r(f0t,"from_pretrained()"),f0t.forEach(t),Tdr=r(_ee," class method or the "),hW=n(_ee,"A",{href:!0});var m0t=s(hW);Mdr=r(m0t,"from_config()"),m0t.forEach(t),Edr=r(_ee,` class
method.`),_ee.forEach(t),Cdr=i(gl),h7=n(gl,"P",{});var AGe=s(h7);wdr=r(AGe,"This class cannot be instantiated directly using "),L1e=n(AGe,"CODE",{});var g0t=s(L1e);Adr=r(g0t,"__init__()"),g0t.forEach(t),ydr=r(AGe," (throws an error)."),AGe.forEach(t),Ldr=i(gl),yt=n(gl,"DIV",{class:!0});var LA=s(yt);T(p7.$$.fragment,LA),xdr=i(LA),x1e=n(LA,"P",{});var h0t=s(x1e);$dr=r(h0t,"Instantiates one of the base model classes of the library from a configuration."),h0t.forEach(t),kdr=i(LA),Vd=n(LA,"P",{});var uee=s(Vd);Sdr=r(uee,`Note:
Loading a model from its configuration file does `),$1e=n(uee,"STRONG",{});var p0t=s($1e);Rdr=r(p0t,"not"),p0t.forEach(t),Pdr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(uee,"A",{href:!0});var _0t=s(pW);Bdr=r(_0t,"from_pretrained()"),_0t.forEach(t),Idr=r(uee," to load the model weights."),uee.forEach(t),Ndr=i(LA),T(a6.$$.fragment,LA),LA.forEach(t),qdr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(_7.$$.fragment,hl),jdr=i(hl),k1e=n(hl,"P",{});var u0t=s(k1e);Ddr=r(u0t,"Instantiate one of the base model classes of the library from a pretrained model."),u0t.forEach(t),Gdr=i(hl),Ka=n(hl,"P",{});var xA=s(Ka);Odr=r(xA,"The model class to instantiate is selected based on the "),S1e=n(xA,"CODE",{});var b0t=s(S1e);Vdr=r(b0t,"model_type"),b0t.forEach(t),Xdr=r(xA,` property of the config object (either
passed as an argument or loaded from `),R1e=n(xA,"CODE",{});var v0t=s(R1e);zdr=r(v0t,"pretrained_model_name_or_path"),v0t.forEach(t),Wdr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=n(xA,"CODE",{});var F0t=s(P1e);Qdr=r(F0t,"pretrained_model_name_or_path"),F0t.forEach(t),Hdr=r(xA,":"),xA.forEach(t),Udr=i(hl),q=n(hl,"UL",{});var D=s(q);n6=n(D,"LI",{});var kSe=s(n6);B1e=n(kSe,"STRONG",{});var T0t=s(B1e);Jdr=r(T0t,"albert"),T0t.forEach(t),Ydr=r(kSe," \u2014 "),_W=n(kSe,"A",{href:!0});var M0t=s(_W);Kdr=r(M0t,"TFAlbertModel"),M0t.forEach(t),Zdr=r(kSe," (ALBERT model)"),kSe.forEach(t),ecr=i(D),s6=n(D,"LI",{});var SSe=s(s6);I1e=n(SSe,"STRONG",{});var E0t=s(I1e);ocr=r(E0t,"bart"),E0t.forEach(t),rcr=r(SSe," \u2014 "),uW=n(SSe,"A",{href:!0});var C0t=s(uW);tcr=r(C0t,"TFBartModel"),C0t.forEach(t),acr=r(SSe," (BART model)"),SSe.forEach(t),ncr=i(D),l6=n(D,"LI",{});var RSe=s(l6);N1e=n(RSe,"STRONG",{});var w0t=s(N1e);scr=r(w0t,"bert"),w0t.forEach(t),lcr=r(RSe," \u2014 "),bW=n(RSe,"A",{href:!0});var A0t=s(bW);icr=r(A0t,"TFBertModel"),A0t.forEach(t),dcr=r(RSe," (BERT model)"),RSe.forEach(t),ccr=i(D),i6=n(D,"LI",{});var PSe=s(i6);q1e=n(PSe,"STRONG",{});var y0t=s(q1e);fcr=r(y0t,"blenderbot"),y0t.forEach(t),mcr=r(PSe," \u2014 "),vW=n(PSe,"A",{href:!0});var L0t=s(vW);gcr=r(L0t,"TFBlenderbotModel"),L0t.forEach(t),hcr=r(PSe," (Blenderbot model)"),PSe.forEach(t),pcr=i(D),d6=n(D,"LI",{});var BSe=s(d6);j1e=n(BSe,"STRONG",{});var x0t=s(j1e);_cr=r(x0t,"blenderbot-small"),x0t.forEach(t),ucr=r(BSe," \u2014 "),FW=n(BSe,"A",{href:!0});var $0t=s(FW);bcr=r($0t,"TFBlenderbotSmallModel"),$0t.forEach(t),vcr=r(BSe," (BlenderbotSmall model)"),BSe.forEach(t),Fcr=i(D),c6=n(D,"LI",{});var ISe=s(c6);D1e=n(ISe,"STRONG",{});var k0t=s(D1e);Tcr=r(k0t,"camembert"),k0t.forEach(t),Mcr=r(ISe," \u2014 "),TW=n(ISe,"A",{href:!0});var S0t=s(TW);Ecr=r(S0t,"TFCamembertModel"),S0t.forEach(t),Ccr=r(ISe," (CamemBERT model)"),ISe.forEach(t),wcr=i(D),f6=n(D,"LI",{});var NSe=s(f6);G1e=n(NSe,"STRONG",{});var R0t=s(G1e);Acr=r(R0t,"clip"),R0t.forEach(t),ycr=r(NSe," \u2014 "),MW=n(NSe,"A",{href:!0});var P0t=s(MW);Lcr=r(P0t,"TFCLIPModel"),P0t.forEach(t),xcr=r(NSe," (CLIP model)"),NSe.forEach(t),$cr=i(D),m6=n(D,"LI",{});var qSe=s(m6);O1e=n(qSe,"STRONG",{});var B0t=s(O1e);kcr=r(B0t,"convbert"),B0t.forEach(t),Scr=r(qSe," \u2014 "),EW=n(qSe,"A",{href:!0});var I0t=s(EW);Rcr=r(I0t,"TFConvBertModel"),I0t.forEach(t),Pcr=r(qSe," (ConvBERT model)"),qSe.forEach(t),Bcr=i(D),g6=n(D,"LI",{});var jSe=s(g6);V1e=n(jSe,"STRONG",{});var N0t=s(V1e);Icr=r(N0t,"convnext"),N0t.forEach(t),Ncr=r(jSe," \u2014 "),CW=n(jSe,"A",{href:!0});var q0t=s(CW);qcr=r(q0t,"TFConvNextModel"),q0t.forEach(t),jcr=r(jSe," (ConvNext model)"),jSe.forEach(t),Dcr=i(D),h6=n(D,"LI",{});var DSe=s(h6);X1e=n(DSe,"STRONG",{});var j0t=s(X1e);Gcr=r(j0t,"ctrl"),j0t.forEach(t),Ocr=r(DSe," \u2014 "),wW=n(DSe,"A",{href:!0});var D0t=s(wW);Vcr=r(D0t,"TFCTRLModel"),D0t.forEach(t),Xcr=r(DSe," (CTRL model)"),DSe.forEach(t),zcr=i(D),p6=n(D,"LI",{});var GSe=s(p6);z1e=n(GSe,"STRONG",{});var G0t=s(z1e);Wcr=r(G0t,"data2vec-vision"),G0t.forEach(t),Qcr=r(GSe," \u2014 "),AW=n(GSe,"A",{href:!0});var O0t=s(AW);Hcr=r(O0t,"TFData2VecVisionModel"),O0t.forEach(t),Ucr=r(GSe," (Data2VecVision model)"),GSe.forEach(t),Jcr=i(D),_6=n(D,"LI",{});var OSe=s(_6);W1e=n(OSe,"STRONG",{});var V0t=s(W1e);Ycr=r(V0t,"deberta"),V0t.forEach(t),Kcr=r(OSe," \u2014 "),yW=n(OSe,"A",{href:!0});var X0t=s(yW);Zcr=r(X0t,"TFDebertaModel"),X0t.forEach(t),efr=r(OSe," (DeBERTa model)"),OSe.forEach(t),ofr=i(D),u6=n(D,"LI",{});var VSe=s(u6);Q1e=n(VSe,"STRONG",{});var z0t=s(Q1e);rfr=r(z0t,"deberta-v2"),z0t.forEach(t),tfr=r(VSe," \u2014 "),LW=n(VSe,"A",{href:!0});var W0t=s(LW);afr=r(W0t,"TFDebertaV2Model"),W0t.forEach(t),nfr=r(VSe," (DeBERTa-v2 model)"),VSe.forEach(t),sfr=i(D),b6=n(D,"LI",{});var XSe=s(b6);H1e=n(XSe,"STRONG",{});var Q0t=s(H1e);lfr=r(Q0t,"distilbert"),Q0t.forEach(t),ifr=r(XSe," \u2014 "),xW=n(XSe,"A",{href:!0});var H0t=s(xW);dfr=r(H0t,"TFDistilBertModel"),H0t.forEach(t),cfr=r(XSe," (DistilBERT model)"),XSe.forEach(t),ffr=i(D),v6=n(D,"LI",{});var zSe=s(v6);U1e=n(zSe,"STRONG",{});var U0t=s(U1e);mfr=r(U0t,"dpr"),U0t.forEach(t),gfr=r(zSe," \u2014 "),$W=n(zSe,"A",{href:!0});var J0t=s($W);hfr=r(J0t,"TFDPRQuestionEncoder"),J0t.forEach(t),pfr=r(zSe," (DPR model)"),zSe.forEach(t),_fr=i(D),F6=n(D,"LI",{});var WSe=s(F6);J1e=n(WSe,"STRONG",{});var Y0t=s(J1e);ufr=r(Y0t,"electra"),Y0t.forEach(t),bfr=r(WSe," \u2014 "),kW=n(WSe,"A",{href:!0});var K0t=s(kW);vfr=r(K0t,"TFElectraModel"),K0t.forEach(t),Ffr=r(WSe," (ELECTRA model)"),WSe.forEach(t),Tfr=i(D),T6=n(D,"LI",{});var QSe=s(T6);Y1e=n(QSe,"STRONG",{});var Z0t=s(Y1e);Mfr=r(Z0t,"flaubert"),Z0t.forEach(t),Efr=r(QSe," \u2014 "),SW=n(QSe,"A",{href:!0});var eFt=s(SW);Cfr=r(eFt,"TFFlaubertModel"),eFt.forEach(t),wfr=r(QSe," (FlauBERT model)"),QSe.forEach(t),Afr=i(D),Is=n(D,"LI",{});var H$=s(Is);K1e=n(H$,"STRONG",{});var oFt=s(K1e);yfr=r(oFt,"funnel"),oFt.forEach(t),Lfr=r(H$," \u2014 "),RW=n(H$,"A",{href:!0});var rFt=s(RW);xfr=r(rFt,"TFFunnelModel"),rFt.forEach(t),$fr=r(H$," or "),PW=n(H$,"A",{href:!0});var tFt=s(PW);kfr=r(tFt,"TFFunnelBaseModel"),tFt.forEach(t),Sfr=r(H$," (Funnel Transformer model)"),H$.forEach(t),Rfr=i(D),M6=n(D,"LI",{});var HSe=s(M6);Z1e=n(HSe,"STRONG",{});var aFt=s(Z1e);Pfr=r(aFt,"gpt2"),aFt.forEach(t),Bfr=r(HSe," \u2014 "),BW=n(HSe,"A",{href:!0});var nFt=s(BW);Ifr=r(nFt,"TFGPT2Model"),nFt.forEach(t),Nfr=r(HSe," (OpenAI GPT-2 model)"),HSe.forEach(t),qfr=i(D),E6=n(D,"LI",{});var USe=s(E6);ebe=n(USe,"STRONG",{});var sFt=s(ebe);jfr=r(sFt,"gptj"),sFt.forEach(t),Dfr=r(USe," \u2014 "),IW=n(USe,"A",{href:!0});var lFt=s(IW);Gfr=r(lFt,"TFGPTJModel"),lFt.forEach(t),Ofr=r(USe," (GPT-J model)"),USe.forEach(t),Vfr=i(D),C6=n(D,"LI",{});var JSe=s(C6);obe=n(JSe,"STRONG",{});var iFt=s(obe);Xfr=r(iFt,"hubert"),iFt.forEach(t),zfr=r(JSe," \u2014 "),NW=n(JSe,"A",{href:!0});var dFt=s(NW);Wfr=r(dFt,"TFHubertModel"),dFt.forEach(t),Qfr=r(JSe," (Hubert model)"),JSe.forEach(t),Hfr=i(D),w6=n(D,"LI",{});var YSe=s(w6);rbe=n(YSe,"STRONG",{});var cFt=s(rbe);Ufr=r(cFt,"layoutlm"),cFt.forEach(t),Jfr=r(YSe," \u2014 "),qW=n(YSe,"A",{href:!0});var fFt=s(qW);Yfr=r(fFt,"TFLayoutLMModel"),fFt.forEach(t),Kfr=r(YSe," (LayoutLM model)"),YSe.forEach(t),Zfr=i(D),A6=n(D,"LI",{});var KSe=s(A6);tbe=n(KSe,"STRONG",{});var mFt=s(tbe);emr=r(mFt,"led"),mFt.forEach(t),omr=r(KSe," \u2014 "),jW=n(KSe,"A",{href:!0});var gFt=s(jW);rmr=r(gFt,"TFLEDModel"),gFt.forEach(t),tmr=r(KSe," (LED model)"),KSe.forEach(t),amr=i(D),y6=n(D,"LI",{});var ZSe=s(y6);abe=n(ZSe,"STRONG",{});var hFt=s(abe);nmr=r(hFt,"longformer"),hFt.forEach(t),smr=r(ZSe," \u2014 "),DW=n(ZSe,"A",{href:!0});var pFt=s(DW);lmr=r(pFt,"TFLongformerModel"),pFt.forEach(t),imr=r(ZSe," (Longformer model)"),ZSe.forEach(t),dmr=i(D),L6=n(D,"LI",{});var eRe=s(L6);nbe=n(eRe,"STRONG",{});var _Ft=s(nbe);cmr=r(_Ft,"lxmert"),_Ft.forEach(t),fmr=r(eRe," \u2014 "),GW=n(eRe,"A",{href:!0});var uFt=s(GW);mmr=r(uFt,"TFLxmertModel"),uFt.forEach(t),gmr=r(eRe," (LXMERT model)"),eRe.forEach(t),hmr=i(D),x6=n(D,"LI",{});var oRe=s(x6);sbe=n(oRe,"STRONG",{});var bFt=s(sbe);pmr=r(bFt,"marian"),bFt.forEach(t),_mr=r(oRe," \u2014 "),OW=n(oRe,"A",{href:!0});var vFt=s(OW);umr=r(vFt,"TFMarianModel"),vFt.forEach(t),bmr=r(oRe," (Marian model)"),oRe.forEach(t),vmr=i(D),$6=n(D,"LI",{});var rRe=s($6);lbe=n(rRe,"STRONG",{});var FFt=s(lbe);Fmr=r(FFt,"mbart"),FFt.forEach(t),Tmr=r(rRe," \u2014 "),VW=n(rRe,"A",{href:!0});var TFt=s(VW);Mmr=r(TFt,"TFMBartModel"),TFt.forEach(t),Emr=r(rRe," (mBART model)"),rRe.forEach(t),Cmr=i(D),k6=n(D,"LI",{});var tRe=s(k6);ibe=n(tRe,"STRONG",{});var MFt=s(ibe);wmr=r(MFt,"mobilebert"),MFt.forEach(t),Amr=r(tRe," \u2014 "),XW=n(tRe,"A",{href:!0});var EFt=s(XW);ymr=r(EFt,"TFMobileBertModel"),EFt.forEach(t),Lmr=r(tRe," (MobileBERT model)"),tRe.forEach(t),xmr=i(D),S6=n(D,"LI",{});var aRe=s(S6);dbe=n(aRe,"STRONG",{});var CFt=s(dbe);$mr=r(CFt,"mpnet"),CFt.forEach(t),kmr=r(aRe," \u2014 "),zW=n(aRe,"A",{href:!0});var wFt=s(zW);Smr=r(wFt,"TFMPNetModel"),wFt.forEach(t),Rmr=r(aRe," (MPNet model)"),aRe.forEach(t),Pmr=i(D),R6=n(D,"LI",{});var nRe=s(R6);cbe=n(nRe,"STRONG",{});var AFt=s(cbe);Bmr=r(AFt,"mt5"),AFt.forEach(t),Imr=r(nRe," \u2014 "),WW=n(nRe,"A",{href:!0});var yFt=s(WW);Nmr=r(yFt,"TFMT5Model"),yFt.forEach(t),qmr=r(nRe," (mT5 model)"),nRe.forEach(t),jmr=i(D),P6=n(D,"LI",{});var sRe=s(P6);fbe=n(sRe,"STRONG",{});var LFt=s(fbe);Dmr=r(LFt,"openai-gpt"),LFt.forEach(t),Gmr=r(sRe," \u2014 "),QW=n(sRe,"A",{href:!0});var xFt=s(QW);Omr=r(xFt,"TFOpenAIGPTModel"),xFt.forEach(t),Vmr=r(sRe," (OpenAI GPT model)"),sRe.forEach(t),Xmr=i(D),B6=n(D,"LI",{});var lRe=s(B6);mbe=n(lRe,"STRONG",{});var $Ft=s(mbe);zmr=r($Ft,"pegasus"),$Ft.forEach(t),Wmr=r(lRe," \u2014 "),HW=n(lRe,"A",{href:!0});var kFt=s(HW);Qmr=r(kFt,"TFPegasusModel"),kFt.forEach(t),Hmr=r(lRe," (Pegasus model)"),lRe.forEach(t),Umr=i(D),I6=n(D,"LI",{});var iRe=s(I6);gbe=n(iRe,"STRONG",{});var SFt=s(gbe);Jmr=r(SFt,"rembert"),SFt.forEach(t),Ymr=r(iRe," \u2014 "),UW=n(iRe,"A",{href:!0});var RFt=s(UW);Kmr=r(RFt,"TFRemBertModel"),RFt.forEach(t),Zmr=r(iRe," (RemBERT model)"),iRe.forEach(t),egr=i(D),N6=n(D,"LI",{});var dRe=s(N6);hbe=n(dRe,"STRONG",{});var PFt=s(hbe);ogr=r(PFt,"roberta"),PFt.forEach(t),rgr=r(dRe," \u2014 "),JW=n(dRe,"A",{href:!0});var BFt=s(JW);tgr=r(BFt,"TFRobertaModel"),BFt.forEach(t),agr=r(dRe," (RoBERTa model)"),dRe.forEach(t),ngr=i(D),q6=n(D,"LI",{});var cRe=s(q6);pbe=n(cRe,"STRONG",{});var IFt=s(pbe);sgr=r(IFt,"roformer"),IFt.forEach(t),lgr=r(cRe," \u2014 "),YW=n(cRe,"A",{href:!0});var NFt=s(YW);igr=r(NFt,"TFRoFormerModel"),NFt.forEach(t),dgr=r(cRe," (RoFormer model)"),cRe.forEach(t),cgr=i(D),j6=n(D,"LI",{});var fRe=s(j6);_be=n(fRe,"STRONG",{});var qFt=s(_be);fgr=r(qFt,"speech_to_text"),qFt.forEach(t),mgr=r(fRe," \u2014 "),KW=n(fRe,"A",{href:!0});var jFt=s(KW);ggr=r(jFt,"TFSpeech2TextModel"),jFt.forEach(t),hgr=r(fRe," (Speech2Text model)"),fRe.forEach(t),pgr=i(D),D6=n(D,"LI",{});var mRe=s(D6);ube=n(mRe,"STRONG",{});var DFt=s(ube);_gr=r(DFt,"swin"),DFt.forEach(t),ugr=r(mRe," \u2014 "),ZW=n(mRe,"A",{href:!0});var GFt=s(ZW);bgr=r(GFt,"TFSwinModel"),GFt.forEach(t),vgr=r(mRe," (Swin model)"),mRe.forEach(t),Fgr=i(D),G6=n(D,"LI",{});var gRe=s(G6);bbe=n(gRe,"STRONG",{});var OFt=s(bbe);Tgr=r(OFt,"t5"),OFt.forEach(t),Mgr=r(gRe," \u2014 "),eQ=n(gRe,"A",{href:!0});var VFt=s(eQ);Egr=r(VFt,"TFT5Model"),VFt.forEach(t),Cgr=r(gRe," (T5 model)"),gRe.forEach(t),wgr=i(D),O6=n(D,"LI",{});var hRe=s(O6);vbe=n(hRe,"STRONG",{});var XFt=s(vbe);Agr=r(XFt,"tapas"),XFt.forEach(t),ygr=r(hRe," \u2014 "),oQ=n(hRe,"A",{href:!0});var zFt=s(oQ);Lgr=r(zFt,"TFTapasModel"),zFt.forEach(t),xgr=r(hRe," (TAPAS model)"),hRe.forEach(t),$gr=i(D),V6=n(D,"LI",{});var pRe=s(V6);Fbe=n(pRe,"STRONG",{});var WFt=s(Fbe);kgr=r(WFt,"transfo-xl"),WFt.forEach(t),Sgr=r(pRe," \u2014 "),rQ=n(pRe,"A",{href:!0});var QFt=s(rQ);Rgr=r(QFt,"TFTransfoXLModel"),QFt.forEach(t),Pgr=r(pRe," (Transformer-XL model)"),pRe.forEach(t),Bgr=i(D),X6=n(D,"LI",{});var _Re=s(X6);Tbe=n(_Re,"STRONG",{});var HFt=s(Tbe);Igr=r(HFt,"vit"),HFt.forEach(t),Ngr=r(_Re," \u2014 "),tQ=n(_Re,"A",{href:!0});var UFt=s(tQ);qgr=r(UFt,"TFViTModel"),UFt.forEach(t),jgr=r(_Re," (ViT model)"),_Re.forEach(t),Dgr=i(D),z6=n(D,"LI",{});var uRe=s(z6);Mbe=n(uRe,"STRONG",{});var JFt=s(Mbe);Ggr=r(JFt,"vit_mae"),JFt.forEach(t),Ogr=r(uRe," \u2014 "),aQ=n(uRe,"A",{href:!0});var YFt=s(aQ);Vgr=r(YFt,"TFViTMAEModel"),YFt.forEach(t),Xgr=r(uRe," (ViTMAE model)"),uRe.forEach(t),zgr=i(D),W6=n(D,"LI",{});var bRe=s(W6);Ebe=n(bRe,"STRONG",{});var KFt=s(Ebe);Wgr=r(KFt,"wav2vec2"),KFt.forEach(t),Qgr=r(bRe," \u2014 "),nQ=n(bRe,"A",{href:!0});var ZFt=s(nQ);Hgr=r(ZFt,"TFWav2Vec2Model"),ZFt.forEach(t),Ugr=r(bRe," (Wav2Vec2 model)"),bRe.forEach(t),Jgr=i(D),Q6=n(D,"LI",{});var vRe=s(Q6);Cbe=n(vRe,"STRONG",{});var e6t=s(Cbe);Ygr=r(e6t,"xlm"),e6t.forEach(t),Kgr=r(vRe," \u2014 "),sQ=n(vRe,"A",{href:!0});var o6t=s(sQ);Zgr=r(o6t,"TFXLMModel"),o6t.forEach(t),ehr=r(vRe," (XLM model)"),vRe.forEach(t),ohr=i(D),H6=n(D,"LI",{});var FRe=s(H6);wbe=n(FRe,"STRONG",{});var r6t=s(wbe);rhr=r(r6t,"xlm-roberta"),r6t.forEach(t),thr=r(FRe," \u2014 "),lQ=n(FRe,"A",{href:!0});var t6t=s(lQ);ahr=r(t6t,"TFXLMRobertaModel"),t6t.forEach(t),nhr=r(FRe," (XLM-RoBERTa model)"),FRe.forEach(t),shr=i(D),U6=n(D,"LI",{});var TRe=s(U6);Abe=n(TRe,"STRONG",{});var a6t=s(Abe);lhr=r(a6t,"xlnet"),a6t.forEach(t),ihr=r(TRe," \u2014 "),iQ=n(TRe,"A",{href:!0});var n6t=s(iQ);dhr=r(n6t,"TFXLNetModel"),n6t.forEach(t),chr=r(TRe," (XLNet model)"),TRe.forEach(t),D.forEach(t),fhr=i(hl),T(J6.$$.fragment,hl),hl.forEach(t),gl.forEach(t),Tje=i(f),Xd=n(f,"H2",{class:!0});var yGe=s(Xd);Y6=n(yGe,"A",{id:!0,class:!0,href:!0});var s6t=s(Y6);ybe=n(s6t,"SPAN",{});var l6t=s(ybe);T(u7.$$.fragment,l6t),l6t.forEach(t),s6t.forEach(t),mhr=i(yGe),Lbe=n(yGe,"SPAN",{});var i6t=s(Lbe);ghr=r(i6t,"TFAutoModelForPreTraining"),i6t.forEach(t),yGe.forEach(t),Mje=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(b7.$$.fragment,pl),hhr=i(pl),zd=n(pl,"P",{});var bee=s(zd);phr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dQ=n(bee,"A",{href:!0});var d6t=s(dQ);_hr=r(d6t,"from_pretrained()"),d6t.forEach(t),uhr=r(bee," class method or the "),cQ=n(bee,"A",{href:!0});var c6t=s(cQ);bhr=r(c6t,"from_config()"),c6t.forEach(t),vhr=r(bee,` class
method.`),bee.forEach(t),Fhr=i(pl),v7=n(pl,"P",{});var LGe=s(v7);Thr=r(LGe,"This class cannot be instantiated directly using "),xbe=n(LGe,"CODE",{});var f6t=s(xbe);Mhr=r(f6t,"__init__()"),f6t.forEach(t),Ehr=r(LGe," (throws an error)."),LGe.forEach(t),Chr=i(pl),Lt=n(pl,"DIV",{class:!0});var $A=s(Lt);T(F7.$$.fragment,$A),whr=i($A),$be=n($A,"P",{});var m6t=s($be);Ahr=r(m6t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),m6t.forEach(t),yhr=i($A),Wd=n($A,"P",{});var vee=s(Wd);Lhr=r(vee,`Note:
Loading a model from its configuration file does `),kbe=n(vee,"STRONG",{});var g6t=s(kbe);xhr=r(g6t,"not"),g6t.forEach(t),$hr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(vee,"A",{href:!0});var h6t=s(fQ);khr=r(h6t,"from_pretrained()"),h6t.forEach(t),Shr=r(vee," to load the model weights."),vee.forEach(t),Rhr=i($A),T(K6.$$.fragment,$A),$A.forEach(t),Phr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(T7.$$.fragment,_l),Bhr=i(_l),Sbe=n(_l,"P",{});var p6t=s(Sbe);Ihr=r(p6t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),p6t.forEach(t),Nhr=i(_l),Za=n(_l,"P",{});var kA=s(Za);qhr=r(kA,"The model class to instantiate is selected based on the "),Rbe=n(kA,"CODE",{});var _6t=s(Rbe);jhr=r(_6t,"model_type"),_6t.forEach(t),Dhr=r(kA,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(kA,"CODE",{});var u6t=s(Pbe);Ghr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),Ohr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(kA,"CODE",{});var b6t=s(Bbe);Vhr=r(b6t,"pretrained_model_name_or_path"),b6t.forEach(t),Xhr=r(kA,":"),kA.forEach(t),zhr=i(_l),se=n(_l,"UL",{});var le=s(se);Z6=n(le,"LI",{});var MRe=s(Z6);Ibe=n(MRe,"STRONG",{});var v6t=s(Ibe);Whr=r(v6t,"albert"),v6t.forEach(t),Qhr=r(MRe," \u2014 "),mQ=n(MRe,"A",{href:!0});var F6t=s(mQ);Hhr=r(F6t,"TFAlbertForPreTraining"),F6t.forEach(t),Uhr=r(MRe," (ALBERT model)"),MRe.forEach(t),Jhr=i(le),eT=n(le,"LI",{});var ERe=s(eT);Nbe=n(ERe,"STRONG",{});var T6t=s(Nbe);Yhr=r(T6t,"bart"),T6t.forEach(t),Khr=r(ERe," \u2014 "),gQ=n(ERe,"A",{href:!0});var M6t=s(gQ);Zhr=r(M6t,"TFBartForConditionalGeneration"),M6t.forEach(t),epr=r(ERe," (BART model)"),ERe.forEach(t),opr=i(le),oT=n(le,"LI",{});var CRe=s(oT);qbe=n(CRe,"STRONG",{});var E6t=s(qbe);rpr=r(E6t,"bert"),E6t.forEach(t),tpr=r(CRe," \u2014 "),hQ=n(CRe,"A",{href:!0});var C6t=s(hQ);apr=r(C6t,"TFBertForPreTraining"),C6t.forEach(t),npr=r(CRe," (BERT model)"),CRe.forEach(t),spr=i(le),rT=n(le,"LI",{});var wRe=s(rT);jbe=n(wRe,"STRONG",{});var w6t=s(jbe);lpr=r(w6t,"camembert"),w6t.forEach(t),ipr=r(wRe," \u2014 "),pQ=n(wRe,"A",{href:!0});var A6t=s(pQ);dpr=r(A6t,"TFCamembertForMaskedLM"),A6t.forEach(t),cpr=r(wRe," (CamemBERT model)"),wRe.forEach(t),fpr=i(le),tT=n(le,"LI",{});var ARe=s(tT);Dbe=n(ARe,"STRONG",{});var y6t=s(Dbe);mpr=r(y6t,"ctrl"),y6t.forEach(t),gpr=r(ARe," \u2014 "),_Q=n(ARe,"A",{href:!0});var L6t=s(_Q);hpr=r(L6t,"TFCTRLLMHeadModel"),L6t.forEach(t),ppr=r(ARe," (CTRL model)"),ARe.forEach(t),_pr=i(le),aT=n(le,"LI",{});var yRe=s(aT);Gbe=n(yRe,"STRONG",{});var x6t=s(Gbe);upr=r(x6t,"distilbert"),x6t.forEach(t),bpr=r(yRe," \u2014 "),uQ=n(yRe,"A",{href:!0});var $6t=s(uQ);vpr=r($6t,"TFDistilBertForMaskedLM"),$6t.forEach(t),Fpr=r(yRe," (DistilBERT model)"),yRe.forEach(t),Tpr=i(le),nT=n(le,"LI",{});var LRe=s(nT);Obe=n(LRe,"STRONG",{});var k6t=s(Obe);Mpr=r(k6t,"electra"),k6t.forEach(t),Epr=r(LRe," \u2014 "),bQ=n(LRe,"A",{href:!0});var S6t=s(bQ);Cpr=r(S6t,"TFElectraForPreTraining"),S6t.forEach(t),wpr=r(LRe," (ELECTRA model)"),LRe.forEach(t),Apr=i(le),sT=n(le,"LI",{});var xRe=s(sT);Vbe=n(xRe,"STRONG",{});var R6t=s(Vbe);ypr=r(R6t,"flaubert"),R6t.forEach(t),Lpr=r(xRe," \u2014 "),vQ=n(xRe,"A",{href:!0});var P6t=s(vQ);xpr=r(P6t,"TFFlaubertWithLMHeadModel"),P6t.forEach(t),$pr=r(xRe," (FlauBERT model)"),xRe.forEach(t),kpr=i(le),lT=n(le,"LI",{});var $Re=s(lT);Xbe=n($Re,"STRONG",{});var B6t=s(Xbe);Spr=r(B6t,"funnel"),B6t.forEach(t),Rpr=r($Re," \u2014 "),FQ=n($Re,"A",{href:!0});var I6t=s(FQ);Ppr=r(I6t,"TFFunnelForPreTraining"),I6t.forEach(t),Bpr=r($Re," (Funnel Transformer model)"),$Re.forEach(t),Ipr=i(le),iT=n(le,"LI",{});var kRe=s(iT);zbe=n(kRe,"STRONG",{});var N6t=s(zbe);Npr=r(N6t,"gpt2"),N6t.forEach(t),qpr=r(kRe," \u2014 "),TQ=n(kRe,"A",{href:!0});var q6t=s(TQ);jpr=r(q6t,"TFGPT2LMHeadModel"),q6t.forEach(t),Dpr=r(kRe," (OpenAI GPT-2 model)"),kRe.forEach(t),Gpr=i(le),dT=n(le,"LI",{});var SRe=s(dT);Wbe=n(SRe,"STRONG",{});var j6t=s(Wbe);Opr=r(j6t,"layoutlm"),j6t.forEach(t),Vpr=r(SRe," \u2014 "),MQ=n(SRe,"A",{href:!0});var D6t=s(MQ);Xpr=r(D6t,"TFLayoutLMForMaskedLM"),D6t.forEach(t),zpr=r(SRe," (LayoutLM model)"),SRe.forEach(t),Wpr=i(le),cT=n(le,"LI",{});var RRe=s(cT);Qbe=n(RRe,"STRONG",{});var G6t=s(Qbe);Qpr=r(G6t,"lxmert"),G6t.forEach(t),Hpr=r(RRe," \u2014 "),EQ=n(RRe,"A",{href:!0});var O6t=s(EQ);Upr=r(O6t,"TFLxmertForPreTraining"),O6t.forEach(t),Jpr=r(RRe," (LXMERT model)"),RRe.forEach(t),Ypr=i(le),fT=n(le,"LI",{});var PRe=s(fT);Hbe=n(PRe,"STRONG",{});var V6t=s(Hbe);Kpr=r(V6t,"mobilebert"),V6t.forEach(t),Zpr=r(PRe," \u2014 "),CQ=n(PRe,"A",{href:!0});var X6t=s(CQ);e_r=r(X6t,"TFMobileBertForPreTraining"),X6t.forEach(t),o_r=r(PRe," (MobileBERT model)"),PRe.forEach(t),r_r=i(le),mT=n(le,"LI",{});var BRe=s(mT);Ube=n(BRe,"STRONG",{});var z6t=s(Ube);t_r=r(z6t,"mpnet"),z6t.forEach(t),a_r=r(BRe," \u2014 "),wQ=n(BRe,"A",{href:!0});var W6t=s(wQ);n_r=r(W6t,"TFMPNetForMaskedLM"),W6t.forEach(t),s_r=r(BRe," (MPNet model)"),BRe.forEach(t),l_r=i(le),gT=n(le,"LI",{});var IRe=s(gT);Jbe=n(IRe,"STRONG",{});var Q6t=s(Jbe);i_r=r(Q6t,"openai-gpt"),Q6t.forEach(t),d_r=r(IRe," \u2014 "),AQ=n(IRe,"A",{href:!0});var H6t=s(AQ);c_r=r(H6t,"TFOpenAIGPTLMHeadModel"),H6t.forEach(t),f_r=r(IRe," (OpenAI GPT model)"),IRe.forEach(t),m_r=i(le),hT=n(le,"LI",{});var NRe=s(hT);Ybe=n(NRe,"STRONG",{});var U6t=s(Ybe);g_r=r(U6t,"roberta"),U6t.forEach(t),h_r=r(NRe," \u2014 "),yQ=n(NRe,"A",{href:!0});var J6t=s(yQ);p_r=r(J6t,"TFRobertaForMaskedLM"),J6t.forEach(t),__r=r(NRe," (RoBERTa model)"),NRe.forEach(t),u_r=i(le),pT=n(le,"LI",{});var qRe=s(pT);Kbe=n(qRe,"STRONG",{});var Y6t=s(Kbe);b_r=r(Y6t,"t5"),Y6t.forEach(t),v_r=r(qRe," \u2014 "),LQ=n(qRe,"A",{href:!0});var K6t=s(LQ);F_r=r(K6t,"TFT5ForConditionalGeneration"),K6t.forEach(t),T_r=r(qRe," (T5 model)"),qRe.forEach(t),M_r=i(le),_T=n(le,"LI",{});var jRe=s(_T);Zbe=n(jRe,"STRONG",{});var Z6t=s(Zbe);E_r=r(Z6t,"tapas"),Z6t.forEach(t),C_r=r(jRe," \u2014 "),xQ=n(jRe,"A",{href:!0});var eTt=s(xQ);w_r=r(eTt,"TFTapasForMaskedLM"),eTt.forEach(t),A_r=r(jRe," (TAPAS model)"),jRe.forEach(t),y_r=i(le),uT=n(le,"LI",{});var DRe=s(uT);e4e=n(DRe,"STRONG",{});var oTt=s(e4e);L_r=r(oTt,"transfo-xl"),oTt.forEach(t),x_r=r(DRe," \u2014 "),$Q=n(DRe,"A",{href:!0});var rTt=s($Q);$_r=r(rTt,"TFTransfoXLLMHeadModel"),rTt.forEach(t),k_r=r(DRe," (Transformer-XL model)"),DRe.forEach(t),S_r=i(le),bT=n(le,"LI",{});var GRe=s(bT);o4e=n(GRe,"STRONG",{});var tTt=s(o4e);R_r=r(tTt,"vit_mae"),tTt.forEach(t),P_r=r(GRe," \u2014 "),kQ=n(GRe,"A",{href:!0});var aTt=s(kQ);B_r=r(aTt,"TFViTMAEForPreTraining"),aTt.forEach(t),I_r=r(GRe," (ViTMAE model)"),GRe.forEach(t),N_r=i(le),vT=n(le,"LI",{});var ORe=s(vT);r4e=n(ORe,"STRONG",{});var nTt=s(r4e);q_r=r(nTt,"xlm"),nTt.forEach(t),j_r=r(ORe," \u2014 "),SQ=n(ORe,"A",{href:!0});var sTt=s(SQ);D_r=r(sTt,"TFXLMWithLMHeadModel"),sTt.forEach(t),G_r=r(ORe," (XLM model)"),ORe.forEach(t),O_r=i(le),FT=n(le,"LI",{});var VRe=s(FT);t4e=n(VRe,"STRONG",{});var lTt=s(t4e);V_r=r(lTt,"xlm-roberta"),lTt.forEach(t),X_r=r(VRe," \u2014 "),RQ=n(VRe,"A",{href:!0});var iTt=s(RQ);z_r=r(iTt,"TFXLMRobertaForMaskedLM"),iTt.forEach(t),W_r=r(VRe," (XLM-RoBERTa model)"),VRe.forEach(t),Q_r=i(le),TT=n(le,"LI",{});var XRe=s(TT);a4e=n(XRe,"STRONG",{});var dTt=s(a4e);H_r=r(dTt,"xlnet"),dTt.forEach(t),U_r=r(XRe," \u2014 "),PQ=n(XRe,"A",{href:!0});var cTt=s(PQ);J_r=r(cTt,"TFXLNetLMHeadModel"),cTt.forEach(t),Y_r=r(XRe," (XLNet model)"),XRe.forEach(t),le.forEach(t),K_r=i(_l),T(MT.$$.fragment,_l),_l.forEach(t),pl.forEach(t),Eje=i(f),Qd=n(f,"H2",{class:!0});var xGe=s(Qd);ET=n(xGe,"A",{id:!0,class:!0,href:!0});var fTt=s(ET);n4e=n(fTt,"SPAN",{});var mTt=s(n4e);T(M7.$$.fragment,mTt),mTt.forEach(t),fTt.forEach(t),Z_r=i(xGe),s4e=n(xGe,"SPAN",{});var gTt=s(s4e);eur=r(gTt,"TFAutoModelForCausalLM"),gTt.forEach(t),xGe.forEach(t),Cje=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(E7.$$.fragment,ul),our=i(ul),Hd=n(ul,"P",{});var Fee=s(Hd);rur=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BQ=n(Fee,"A",{href:!0});var hTt=s(BQ);tur=r(hTt,"from_pretrained()"),hTt.forEach(t),aur=r(Fee," class method or the "),IQ=n(Fee,"A",{href:!0});var pTt=s(IQ);nur=r(pTt,"from_config()"),pTt.forEach(t),sur=r(Fee,` class
method.`),Fee.forEach(t),lur=i(ul),C7=n(ul,"P",{});var $Ge=s(C7);iur=r($Ge,"This class cannot be instantiated directly using "),l4e=n($Ge,"CODE",{});var _Tt=s(l4e);dur=r(_Tt,"__init__()"),_Tt.forEach(t),cur=r($Ge," (throws an error)."),$Ge.forEach(t),fur=i(ul),xt=n(ul,"DIV",{class:!0});var SA=s(xt);T(w7.$$.fragment,SA),mur=i(SA),i4e=n(SA,"P",{});var uTt=s(i4e);gur=r(uTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uTt.forEach(t),hur=i(SA),Ud=n(SA,"P",{});var Tee=s(Ud);pur=r(Tee,`Note:
Loading a model from its configuration file does `),d4e=n(Tee,"STRONG",{});var bTt=s(d4e);_ur=r(bTt,"not"),bTt.forEach(t),uur=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(Tee,"A",{href:!0});var vTt=s(NQ);bur=r(vTt,"from_pretrained()"),vTt.forEach(t),vur=r(Tee," to load the model weights."),Tee.forEach(t),Fur=i(SA),T(CT.$$.fragment,SA),SA.forEach(t),Tur=i(ul),yr=n(ul,"DIV",{class:!0});var bl=s(yr);T(A7.$$.fragment,bl),Mur=i(bl),c4e=n(bl,"P",{});var FTt=s(c4e);Eur=r(FTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FTt.forEach(t),Cur=i(bl),en=n(bl,"P",{});var RA=s(en);wur=r(RA,"The model class to instantiate is selected based on the "),f4e=n(RA,"CODE",{});var TTt=s(f4e);Aur=r(TTt,"model_type"),TTt.forEach(t),yur=r(RA,` property of the config object (either
passed as an argument or loaded from `),m4e=n(RA,"CODE",{});var MTt=s(m4e);Lur=r(MTt,"pretrained_model_name_or_path"),MTt.forEach(t),xur=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=n(RA,"CODE",{});var ETt=s(g4e);$ur=r(ETt,"pretrained_model_name_or_path"),ETt.forEach(t),kur=r(RA,":"),RA.forEach(t),Sur=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);wT=n(Ce,"LI",{});var zRe=s(wT);h4e=n(zRe,"STRONG",{});var CTt=s(h4e);Rur=r(CTt,"bert"),CTt.forEach(t),Pur=r(zRe," \u2014 "),qQ=n(zRe,"A",{href:!0});var wTt=s(qQ);Bur=r(wTt,"TFBertLMHeadModel"),wTt.forEach(t),Iur=r(zRe," (BERT model)"),zRe.forEach(t),Nur=i(Ce),AT=n(Ce,"LI",{});var WRe=s(AT);p4e=n(WRe,"STRONG",{});var ATt=s(p4e);qur=r(ATt,"camembert"),ATt.forEach(t),jur=r(WRe," \u2014 "),jQ=n(WRe,"A",{href:!0});var yTt=s(jQ);Dur=r(yTt,"TFCamembertForCausalLM"),yTt.forEach(t),Gur=r(WRe," (CamemBERT model)"),WRe.forEach(t),Our=i(Ce),yT=n(Ce,"LI",{});var QRe=s(yT);_4e=n(QRe,"STRONG",{});var LTt=s(_4e);Vur=r(LTt,"ctrl"),LTt.forEach(t),Xur=r(QRe," \u2014 "),DQ=n(QRe,"A",{href:!0});var xTt=s(DQ);zur=r(xTt,"TFCTRLLMHeadModel"),xTt.forEach(t),Wur=r(QRe," (CTRL model)"),QRe.forEach(t),Qur=i(Ce),LT=n(Ce,"LI",{});var HRe=s(LT);u4e=n(HRe,"STRONG",{});var $Tt=s(u4e);Hur=r($Tt,"gpt2"),$Tt.forEach(t),Uur=r(HRe," \u2014 "),GQ=n(HRe,"A",{href:!0});var kTt=s(GQ);Jur=r(kTt,"TFGPT2LMHeadModel"),kTt.forEach(t),Yur=r(HRe," (OpenAI GPT-2 model)"),HRe.forEach(t),Kur=i(Ce),xT=n(Ce,"LI",{});var URe=s(xT);b4e=n(URe,"STRONG",{});var STt=s(b4e);Zur=r(STt,"gptj"),STt.forEach(t),e2r=r(URe," \u2014 "),OQ=n(URe,"A",{href:!0});var RTt=s(OQ);o2r=r(RTt,"TFGPTJForCausalLM"),RTt.forEach(t),r2r=r(URe," (GPT-J model)"),URe.forEach(t),t2r=i(Ce),$T=n(Ce,"LI",{});var JRe=s($T);v4e=n(JRe,"STRONG",{});var PTt=s(v4e);a2r=r(PTt,"openai-gpt"),PTt.forEach(t),n2r=r(JRe," \u2014 "),VQ=n(JRe,"A",{href:!0});var BTt=s(VQ);s2r=r(BTt,"TFOpenAIGPTLMHeadModel"),BTt.forEach(t),l2r=r(JRe," (OpenAI GPT model)"),JRe.forEach(t),i2r=i(Ce),kT=n(Ce,"LI",{});var YRe=s(kT);F4e=n(YRe,"STRONG",{});var ITt=s(F4e);d2r=r(ITt,"rembert"),ITt.forEach(t),c2r=r(YRe," \u2014 "),XQ=n(YRe,"A",{href:!0});var NTt=s(XQ);f2r=r(NTt,"TFRemBertForCausalLM"),NTt.forEach(t),m2r=r(YRe," (RemBERT model)"),YRe.forEach(t),g2r=i(Ce),ST=n(Ce,"LI",{});var KRe=s(ST);T4e=n(KRe,"STRONG",{});var qTt=s(T4e);h2r=r(qTt,"roberta"),qTt.forEach(t),p2r=r(KRe," \u2014 "),zQ=n(KRe,"A",{href:!0});var jTt=s(zQ);_2r=r(jTt,"TFRobertaForCausalLM"),jTt.forEach(t),u2r=r(KRe," (RoBERTa model)"),KRe.forEach(t),b2r=i(Ce),RT=n(Ce,"LI",{});var ZRe=s(RT);M4e=n(ZRe,"STRONG",{});var DTt=s(M4e);v2r=r(DTt,"roformer"),DTt.forEach(t),F2r=r(ZRe," \u2014 "),WQ=n(ZRe,"A",{href:!0});var GTt=s(WQ);T2r=r(GTt,"TFRoFormerForCausalLM"),GTt.forEach(t),M2r=r(ZRe," (RoFormer model)"),ZRe.forEach(t),E2r=i(Ce),PT=n(Ce,"LI",{});var ePe=s(PT);E4e=n(ePe,"STRONG",{});var OTt=s(E4e);C2r=r(OTt,"transfo-xl"),OTt.forEach(t),w2r=r(ePe," \u2014 "),QQ=n(ePe,"A",{href:!0});var VTt=s(QQ);A2r=r(VTt,"TFTransfoXLLMHeadModel"),VTt.forEach(t),y2r=r(ePe," (Transformer-XL model)"),ePe.forEach(t),L2r=i(Ce),BT=n(Ce,"LI",{});var oPe=s(BT);C4e=n(oPe,"STRONG",{});var XTt=s(C4e);x2r=r(XTt,"xlm"),XTt.forEach(t),$2r=r(oPe," \u2014 "),HQ=n(oPe,"A",{href:!0});var zTt=s(HQ);k2r=r(zTt,"TFXLMWithLMHeadModel"),zTt.forEach(t),S2r=r(oPe," (XLM model)"),oPe.forEach(t),R2r=i(Ce),IT=n(Ce,"LI",{});var rPe=s(IT);w4e=n(rPe,"STRONG",{});var WTt=s(w4e);P2r=r(WTt,"xlnet"),WTt.forEach(t),B2r=r(rPe," \u2014 "),UQ=n(rPe,"A",{href:!0});var QTt=s(UQ);I2r=r(QTt,"TFXLNetLMHeadModel"),QTt.forEach(t),N2r=r(rPe," (XLNet model)"),rPe.forEach(t),Ce.forEach(t),q2r=i(bl),T(NT.$$.fragment,bl),bl.forEach(t),ul.forEach(t),wje=i(f),Jd=n(f,"H2",{class:!0});var kGe=s(Jd);qT=n(kGe,"A",{id:!0,class:!0,href:!0});var HTt=s(qT);A4e=n(HTt,"SPAN",{});var UTt=s(A4e);T(y7.$$.fragment,UTt),UTt.forEach(t),HTt.forEach(t),j2r=i(kGe),y4e=n(kGe,"SPAN",{});var JTt=s(y4e);D2r=r(JTt,"TFAutoModelForImageClassification"),JTt.forEach(t),kGe.forEach(t),Aje=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(L7.$$.fragment,vl),G2r=i(vl),Yd=n(vl,"P",{});var Mee=s(Yd);O2r=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JQ=n(Mee,"A",{href:!0});var YTt=s(JQ);V2r=r(YTt,"from_pretrained()"),YTt.forEach(t),X2r=r(Mee," class method or the "),YQ=n(Mee,"A",{href:!0});var KTt=s(YQ);z2r=r(KTt,"from_config()"),KTt.forEach(t),W2r=r(Mee,` class
method.`),Mee.forEach(t),Q2r=i(vl),x7=n(vl,"P",{});var SGe=s(x7);H2r=r(SGe,"This class cannot be instantiated directly using "),L4e=n(SGe,"CODE",{});var ZTt=s(L4e);U2r=r(ZTt,"__init__()"),ZTt.forEach(t),J2r=r(SGe," (throws an error)."),SGe.forEach(t),Y2r=i(vl),$t=n(vl,"DIV",{class:!0});var PA=s($t);T($7.$$.fragment,PA),K2r=i(PA),x4e=n(PA,"P",{});var eMt=s(x4e);Z2r=r(eMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eMt.forEach(t),e1r=i(PA),Kd=n(PA,"P",{});var Eee=s(Kd);o1r=r(Eee,`Note:
Loading a model from its configuration file does `),$4e=n(Eee,"STRONG",{});var oMt=s($4e);r1r=r(oMt,"not"),oMt.forEach(t),t1r=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(Eee,"A",{href:!0});var rMt=s(KQ);a1r=r(rMt,"from_pretrained()"),rMt.forEach(t),n1r=r(Eee," to load the model weights."),Eee.forEach(t),s1r=i(PA),T(jT.$$.fragment,PA),PA.forEach(t),l1r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(k7.$$.fragment,Fl),i1r=i(Fl),k4e=n(Fl,"P",{});var tMt=s(k4e);d1r=r(tMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tMt.forEach(t),c1r=i(Fl),on=n(Fl,"P",{});var BA=s(on);f1r=r(BA,"The model class to instantiate is selected based on the "),S4e=n(BA,"CODE",{});var aMt=s(S4e);m1r=r(aMt,"model_type"),aMt.forEach(t),g1r=r(BA,` property of the config object (either
passed as an argument or loaded from `),R4e=n(BA,"CODE",{});var nMt=s(R4e);h1r=r(nMt,"pretrained_model_name_or_path"),nMt.forEach(t),p1r=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=n(BA,"CODE",{});var sMt=s(P4e);_1r=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),u1r=r(BA,":"),BA.forEach(t),b1r=i(Fl),rn=n(Fl,"UL",{});var IA=s(rn);DT=n(IA,"LI",{});var tPe=s(DT);B4e=n(tPe,"STRONG",{});var lMt=s(B4e);v1r=r(lMt,"convnext"),lMt.forEach(t),F1r=r(tPe," \u2014 "),ZQ=n(tPe,"A",{href:!0});var iMt=s(ZQ);T1r=r(iMt,"TFConvNextForImageClassification"),iMt.forEach(t),M1r=r(tPe," (ConvNext model)"),tPe.forEach(t),E1r=i(IA),GT=n(IA,"LI",{});var aPe=s(GT);I4e=n(aPe,"STRONG",{});var dMt=s(I4e);C1r=r(dMt,"data2vec-vision"),dMt.forEach(t),w1r=r(aPe," \u2014 "),eH=n(aPe,"A",{href:!0});var cMt=s(eH);A1r=r(cMt,"TFData2VecVisionForImageClassification"),cMt.forEach(t),y1r=r(aPe," (Data2VecVision model)"),aPe.forEach(t),L1r=i(IA),OT=n(IA,"LI",{});var nPe=s(OT);N4e=n(nPe,"STRONG",{});var fMt=s(N4e);x1r=r(fMt,"swin"),fMt.forEach(t),$1r=r(nPe," \u2014 "),oH=n(nPe,"A",{href:!0});var mMt=s(oH);k1r=r(mMt,"TFSwinForImageClassification"),mMt.forEach(t),S1r=r(nPe," (Swin model)"),nPe.forEach(t),R1r=i(IA),VT=n(IA,"LI",{});var sPe=s(VT);q4e=n(sPe,"STRONG",{});var gMt=s(q4e);P1r=r(gMt,"vit"),gMt.forEach(t),B1r=r(sPe," \u2014 "),rH=n(sPe,"A",{href:!0});var hMt=s(rH);I1r=r(hMt,"TFViTForImageClassification"),hMt.forEach(t),N1r=r(sPe," (ViT model)"),sPe.forEach(t),IA.forEach(t),q1r=i(Fl),T(XT.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),yje=i(f),Zd=n(f,"H2",{class:!0});var RGe=s(Zd);zT=n(RGe,"A",{id:!0,class:!0,href:!0});var pMt=s(zT);j4e=n(pMt,"SPAN",{});var _Mt=s(j4e);T(S7.$$.fragment,_Mt),_Mt.forEach(t),pMt.forEach(t),j1r=i(RGe),D4e=n(RGe,"SPAN",{});var uMt=s(D4e);D1r=r(uMt,"TFAutoModelForMaskedLM"),uMt.forEach(t),RGe.forEach(t),Lje=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(R7.$$.fragment,Tl),G1r=i(Tl),ec=n(Tl,"P",{});var Cee=s(ec);O1r=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tH=n(Cee,"A",{href:!0});var bMt=s(tH);V1r=r(bMt,"from_pretrained()"),bMt.forEach(t),X1r=r(Cee," class method or the "),aH=n(Cee,"A",{href:!0});var vMt=s(aH);z1r=r(vMt,"from_config()"),vMt.forEach(t),W1r=r(Cee,` class
method.`),Cee.forEach(t),Q1r=i(Tl),P7=n(Tl,"P",{});var PGe=s(P7);H1r=r(PGe,"This class cannot be instantiated directly using "),G4e=n(PGe,"CODE",{});var FMt=s(G4e);U1r=r(FMt,"__init__()"),FMt.forEach(t),J1r=r(PGe," (throws an error)."),PGe.forEach(t),Y1r=i(Tl),kt=n(Tl,"DIV",{class:!0});var NA=s(kt);T(B7.$$.fragment,NA),K1r=i(NA),O4e=n(NA,"P",{});var TMt=s(O4e);Z1r=r(TMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),TMt.forEach(t),ebr=i(NA),oc=n(NA,"P",{});var wee=s(oc);obr=r(wee,`Note:
Loading a model from its configuration file does `),V4e=n(wee,"STRONG",{});var MMt=s(V4e);rbr=r(MMt,"not"),MMt.forEach(t),tbr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(wee,"A",{href:!0});var EMt=s(nH);abr=r(EMt,"from_pretrained()"),EMt.forEach(t),nbr=r(wee," to load the model weights."),wee.forEach(t),sbr=i(NA),T(WT.$$.fragment,NA),NA.forEach(t),lbr=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(I7.$$.fragment,Ml),ibr=i(Ml),X4e=n(Ml,"P",{});var CMt=s(X4e);dbr=r(CMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),CMt.forEach(t),cbr=i(Ml),tn=n(Ml,"P",{});var qA=s(tn);fbr=r(qA,"The model class to instantiate is selected based on the "),z4e=n(qA,"CODE",{});var wMt=s(z4e);mbr=r(wMt,"model_type"),wMt.forEach(t),gbr=r(qA,` property of the config object (either
passed as an argument or loaded from `),W4e=n(qA,"CODE",{});var AMt=s(W4e);hbr=r(AMt,"pretrained_model_name_or_path"),AMt.forEach(t),pbr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(qA,"CODE",{});var yMt=s(Q4e);_br=r(yMt,"pretrained_model_name_or_path"),yMt.forEach(t),ubr=r(qA,":"),qA.forEach(t),bbr=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);QT=n(fe,"LI",{});var lPe=s(QT);H4e=n(lPe,"STRONG",{});var LMt=s(H4e);vbr=r(LMt,"albert"),LMt.forEach(t),Fbr=r(lPe," \u2014 "),sH=n(lPe,"A",{href:!0});var xMt=s(sH);Tbr=r(xMt,"TFAlbertForMaskedLM"),xMt.forEach(t),Mbr=r(lPe," (ALBERT model)"),lPe.forEach(t),Ebr=i(fe),HT=n(fe,"LI",{});var iPe=s(HT);U4e=n(iPe,"STRONG",{});var $Mt=s(U4e);Cbr=r($Mt,"bert"),$Mt.forEach(t),wbr=r(iPe," \u2014 "),lH=n(iPe,"A",{href:!0});var kMt=s(lH);Abr=r(kMt,"TFBertForMaskedLM"),kMt.forEach(t),ybr=r(iPe," (BERT model)"),iPe.forEach(t),Lbr=i(fe),UT=n(fe,"LI",{});var dPe=s(UT);J4e=n(dPe,"STRONG",{});var SMt=s(J4e);xbr=r(SMt,"camembert"),SMt.forEach(t),$br=r(dPe," \u2014 "),iH=n(dPe,"A",{href:!0});var RMt=s(iH);kbr=r(RMt,"TFCamembertForMaskedLM"),RMt.forEach(t),Sbr=r(dPe," (CamemBERT model)"),dPe.forEach(t),Rbr=i(fe),JT=n(fe,"LI",{});var cPe=s(JT);Y4e=n(cPe,"STRONG",{});var PMt=s(Y4e);Pbr=r(PMt,"convbert"),PMt.forEach(t),Bbr=r(cPe," \u2014 "),dH=n(cPe,"A",{href:!0});var BMt=s(dH);Ibr=r(BMt,"TFConvBertForMaskedLM"),BMt.forEach(t),Nbr=r(cPe," (ConvBERT model)"),cPe.forEach(t),qbr=i(fe),YT=n(fe,"LI",{});var fPe=s(YT);K4e=n(fPe,"STRONG",{});var IMt=s(K4e);jbr=r(IMt,"deberta"),IMt.forEach(t),Dbr=r(fPe," \u2014 "),cH=n(fPe,"A",{href:!0});var NMt=s(cH);Gbr=r(NMt,"TFDebertaForMaskedLM"),NMt.forEach(t),Obr=r(fPe," (DeBERTa model)"),fPe.forEach(t),Vbr=i(fe),KT=n(fe,"LI",{});var mPe=s(KT);Z4e=n(mPe,"STRONG",{});var qMt=s(Z4e);Xbr=r(qMt,"deberta-v2"),qMt.forEach(t),zbr=r(mPe," \u2014 "),fH=n(mPe,"A",{href:!0});var jMt=s(fH);Wbr=r(jMt,"TFDebertaV2ForMaskedLM"),jMt.forEach(t),Qbr=r(mPe," (DeBERTa-v2 model)"),mPe.forEach(t),Hbr=i(fe),ZT=n(fe,"LI",{});var gPe=s(ZT);eve=n(gPe,"STRONG",{});var DMt=s(eve);Ubr=r(DMt,"distilbert"),DMt.forEach(t),Jbr=r(gPe," \u2014 "),mH=n(gPe,"A",{href:!0});var GMt=s(mH);Ybr=r(GMt,"TFDistilBertForMaskedLM"),GMt.forEach(t),Kbr=r(gPe," (DistilBERT model)"),gPe.forEach(t),Zbr=i(fe),eM=n(fe,"LI",{});var hPe=s(eM);ove=n(hPe,"STRONG",{});var OMt=s(ove);e4r=r(OMt,"electra"),OMt.forEach(t),o4r=r(hPe," \u2014 "),gH=n(hPe,"A",{href:!0});var VMt=s(gH);r4r=r(VMt,"TFElectraForMaskedLM"),VMt.forEach(t),t4r=r(hPe," (ELECTRA model)"),hPe.forEach(t),a4r=i(fe),oM=n(fe,"LI",{});var pPe=s(oM);rve=n(pPe,"STRONG",{});var XMt=s(rve);n4r=r(XMt,"flaubert"),XMt.forEach(t),s4r=r(pPe," \u2014 "),hH=n(pPe,"A",{href:!0});var zMt=s(hH);l4r=r(zMt,"TFFlaubertWithLMHeadModel"),zMt.forEach(t),i4r=r(pPe," (FlauBERT model)"),pPe.forEach(t),d4r=i(fe),rM=n(fe,"LI",{});var _Pe=s(rM);tve=n(_Pe,"STRONG",{});var WMt=s(tve);c4r=r(WMt,"funnel"),WMt.forEach(t),f4r=r(_Pe," \u2014 "),pH=n(_Pe,"A",{href:!0});var QMt=s(pH);m4r=r(QMt,"TFFunnelForMaskedLM"),QMt.forEach(t),g4r=r(_Pe," (Funnel Transformer model)"),_Pe.forEach(t),h4r=i(fe),tM=n(fe,"LI",{});var uPe=s(tM);ave=n(uPe,"STRONG",{});var HMt=s(ave);p4r=r(HMt,"layoutlm"),HMt.forEach(t),_4r=r(uPe," \u2014 "),_H=n(uPe,"A",{href:!0});var UMt=s(_H);u4r=r(UMt,"TFLayoutLMForMaskedLM"),UMt.forEach(t),b4r=r(uPe," (LayoutLM model)"),uPe.forEach(t),v4r=i(fe),aM=n(fe,"LI",{});var bPe=s(aM);nve=n(bPe,"STRONG",{});var JMt=s(nve);F4r=r(JMt,"longformer"),JMt.forEach(t),T4r=r(bPe," \u2014 "),uH=n(bPe,"A",{href:!0});var YMt=s(uH);M4r=r(YMt,"TFLongformerForMaskedLM"),YMt.forEach(t),E4r=r(bPe," (Longformer model)"),bPe.forEach(t),C4r=i(fe),nM=n(fe,"LI",{});var vPe=s(nM);sve=n(vPe,"STRONG",{});var KMt=s(sve);w4r=r(KMt,"mobilebert"),KMt.forEach(t),A4r=r(vPe," \u2014 "),bH=n(vPe,"A",{href:!0});var ZMt=s(bH);y4r=r(ZMt,"TFMobileBertForMaskedLM"),ZMt.forEach(t),L4r=r(vPe," (MobileBERT model)"),vPe.forEach(t),x4r=i(fe),sM=n(fe,"LI",{});var FPe=s(sM);lve=n(FPe,"STRONG",{});var eEt=s(lve);$4r=r(eEt,"mpnet"),eEt.forEach(t),k4r=r(FPe," \u2014 "),vH=n(FPe,"A",{href:!0});var oEt=s(vH);S4r=r(oEt,"TFMPNetForMaskedLM"),oEt.forEach(t),R4r=r(FPe," (MPNet model)"),FPe.forEach(t),P4r=i(fe),lM=n(fe,"LI",{});var TPe=s(lM);ive=n(TPe,"STRONG",{});var rEt=s(ive);B4r=r(rEt,"rembert"),rEt.forEach(t),I4r=r(TPe," \u2014 "),FH=n(TPe,"A",{href:!0});var tEt=s(FH);N4r=r(tEt,"TFRemBertForMaskedLM"),tEt.forEach(t),q4r=r(TPe," (RemBERT model)"),TPe.forEach(t),j4r=i(fe),iM=n(fe,"LI",{});var MPe=s(iM);dve=n(MPe,"STRONG",{});var aEt=s(dve);D4r=r(aEt,"roberta"),aEt.forEach(t),G4r=r(MPe," \u2014 "),TH=n(MPe,"A",{href:!0});var nEt=s(TH);O4r=r(nEt,"TFRobertaForMaskedLM"),nEt.forEach(t),V4r=r(MPe," (RoBERTa model)"),MPe.forEach(t),X4r=i(fe),dM=n(fe,"LI",{});var EPe=s(dM);cve=n(EPe,"STRONG",{});var sEt=s(cve);z4r=r(sEt,"roformer"),sEt.forEach(t),W4r=r(EPe," \u2014 "),MH=n(EPe,"A",{href:!0});var lEt=s(MH);Q4r=r(lEt,"TFRoFormerForMaskedLM"),lEt.forEach(t),H4r=r(EPe," (RoFormer model)"),EPe.forEach(t),U4r=i(fe),cM=n(fe,"LI",{});var CPe=s(cM);fve=n(CPe,"STRONG",{});var iEt=s(fve);J4r=r(iEt,"tapas"),iEt.forEach(t),Y4r=r(CPe," \u2014 "),EH=n(CPe,"A",{href:!0});var dEt=s(EH);K4r=r(dEt,"TFTapasForMaskedLM"),dEt.forEach(t),Z4r=r(CPe," (TAPAS model)"),CPe.forEach(t),evr=i(fe),fM=n(fe,"LI",{});var wPe=s(fM);mve=n(wPe,"STRONG",{});var cEt=s(mve);ovr=r(cEt,"xlm"),cEt.forEach(t),rvr=r(wPe," \u2014 "),CH=n(wPe,"A",{href:!0});var fEt=s(CH);tvr=r(fEt,"TFXLMWithLMHeadModel"),fEt.forEach(t),avr=r(wPe," (XLM model)"),wPe.forEach(t),nvr=i(fe),mM=n(fe,"LI",{});var APe=s(mM);gve=n(APe,"STRONG",{});var mEt=s(gve);svr=r(mEt,"xlm-roberta"),mEt.forEach(t),lvr=r(APe," \u2014 "),wH=n(APe,"A",{href:!0});var gEt=s(wH);ivr=r(gEt,"TFXLMRobertaForMaskedLM"),gEt.forEach(t),dvr=r(APe," (XLM-RoBERTa model)"),APe.forEach(t),fe.forEach(t),cvr=i(Ml),T(gM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),xje=i(f),rc=n(f,"H2",{class:!0});var BGe=s(rc);hM=n(BGe,"A",{id:!0,class:!0,href:!0});var hEt=s(hM);hve=n(hEt,"SPAN",{});var pEt=s(hve);T(N7.$$.fragment,pEt),pEt.forEach(t),hEt.forEach(t),fvr=i(BGe),pve=n(BGe,"SPAN",{});var _Et=s(pve);mvr=r(_Et,"TFAutoModelForSeq2SeqLM"),_Et.forEach(t),BGe.forEach(t),$je=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(q7.$$.fragment,El),gvr=i(El),tc=n(El,"P",{});var Aee=s(tc);hvr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AH=n(Aee,"A",{href:!0});var uEt=s(AH);pvr=r(uEt,"from_pretrained()"),uEt.forEach(t),_vr=r(Aee," class method or the "),yH=n(Aee,"A",{href:!0});var bEt=s(yH);uvr=r(bEt,"from_config()"),bEt.forEach(t),bvr=r(Aee,` class
method.`),Aee.forEach(t),vvr=i(El),j7=n(El,"P",{});var IGe=s(j7);Fvr=r(IGe,"This class cannot be instantiated directly using "),_ve=n(IGe,"CODE",{});var vEt=s(_ve);Tvr=r(vEt,"__init__()"),vEt.forEach(t),Mvr=r(IGe," (throws an error)."),IGe.forEach(t),Evr=i(El),St=n(El,"DIV",{class:!0});var jA=s(St);T(D7.$$.fragment,jA),Cvr=i(jA),uve=n(jA,"P",{});var FEt=s(uve);wvr=r(FEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FEt.forEach(t),Avr=i(jA),ac=n(jA,"P",{});var yee=s(ac);yvr=r(yee,`Note:
Loading a model from its configuration file does `),bve=n(yee,"STRONG",{});var TEt=s(bve);Lvr=r(TEt,"not"),TEt.forEach(t),xvr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(yee,"A",{href:!0});var MEt=s(LH);$vr=r(MEt,"from_pretrained()"),MEt.forEach(t),kvr=r(yee," to load the model weights."),yee.forEach(t),Svr=i(jA),T(pM.$$.fragment,jA),jA.forEach(t),Rvr=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(G7.$$.fragment,Cl),Pvr=i(Cl),vve=n(Cl,"P",{});var EEt=s(vve);Bvr=r(EEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EEt.forEach(t),Ivr=i(Cl),an=n(Cl,"P",{});var DA=s(an);Nvr=r(DA,"The model class to instantiate is selected based on the "),Fve=n(DA,"CODE",{});var CEt=s(Fve);qvr=r(CEt,"model_type"),CEt.forEach(t),jvr=r(DA,` property of the config object (either
passed as an argument or loaded from `),Tve=n(DA,"CODE",{});var wEt=s(Tve);Dvr=r(wEt,"pretrained_model_name_or_path"),wEt.forEach(t),Gvr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(DA,"CODE",{});var AEt=s(Mve);Ovr=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),Vvr=r(DA,":"),DA.forEach(t),Xvr=i(Cl),Le=n(Cl,"UL",{});var Ie=s(Le);_M=n(Ie,"LI",{});var yPe=s(_M);Eve=n(yPe,"STRONG",{});var yEt=s(Eve);zvr=r(yEt,"bart"),yEt.forEach(t),Wvr=r(yPe," \u2014 "),xH=n(yPe,"A",{href:!0});var LEt=s(xH);Qvr=r(LEt,"TFBartForConditionalGeneration"),LEt.forEach(t),Hvr=r(yPe," (BART model)"),yPe.forEach(t),Uvr=i(Ie),uM=n(Ie,"LI",{});var LPe=s(uM);Cve=n(LPe,"STRONG",{});var xEt=s(Cve);Jvr=r(xEt,"blenderbot"),xEt.forEach(t),Yvr=r(LPe," \u2014 "),$H=n(LPe,"A",{href:!0});var $Et=s($H);Kvr=r($Et,"TFBlenderbotForConditionalGeneration"),$Et.forEach(t),Zvr=r(LPe," (Blenderbot model)"),LPe.forEach(t),e0r=i(Ie),bM=n(Ie,"LI",{});var xPe=s(bM);wve=n(xPe,"STRONG",{});var kEt=s(wve);o0r=r(kEt,"blenderbot-small"),kEt.forEach(t),r0r=r(xPe," \u2014 "),kH=n(xPe,"A",{href:!0});var SEt=s(kH);t0r=r(SEt,"TFBlenderbotSmallForConditionalGeneration"),SEt.forEach(t),a0r=r(xPe," (BlenderbotSmall model)"),xPe.forEach(t),n0r=i(Ie),vM=n(Ie,"LI",{});var $Pe=s(vM);Ave=n($Pe,"STRONG",{});var REt=s(Ave);s0r=r(REt,"encoder-decoder"),REt.forEach(t),l0r=r($Pe," \u2014 "),SH=n($Pe,"A",{href:!0});var PEt=s(SH);i0r=r(PEt,"TFEncoderDecoderModel"),PEt.forEach(t),d0r=r($Pe," (Encoder decoder model)"),$Pe.forEach(t),c0r=i(Ie),FM=n(Ie,"LI",{});var kPe=s(FM);yve=n(kPe,"STRONG",{});var BEt=s(yve);f0r=r(BEt,"led"),BEt.forEach(t),m0r=r(kPe," \u2014 "),RH=n(kPe,"A",{href:!0});var IEt=s(RH);g0r=r(IEt,"TFLEDForConditionalGeneration"),IEt.forEach(t),h0r=r(kPe," (LED model)"),kPe.forEach(t),p0r=i(Ie),TM=n(Ie,"LI",{});var SPe=s(TM);Lve=n(SPe,"STRONG",{});var NEt=s(Lve);_0r=r(NEt,"marian"),NEt.forEach(t),u0r=r(SPe," \u2014 "),PH=n(SPe,"A",{href:!0});var qEt=s(PH);b0r=r(qEt,"TFMarianMTModel"),qEt.forEach(t),v0r=r(SPe," (Marian model)"),SPe.forEach(t),F0r=i(Ie),MM=n(Ie,"LI",{});var RPe=s(MM);xve=n(RPe,"STRONG",{});var jEt=s(xve);T0r=r(jEt,"mbart"),jEt.forEach(t),M0r=r(RPe," \u2014 "),BH=n(RPe,"A",{href:!0});var DEt=s(BH);E0r=r(DEt,"TFMBartForConditionalGeneration"),DEt.forEach(t),C0r=r(RPe," (mBART model)"),RPe.forEach(t),w0r=i(Ie),EM=n(Ie,"LI",{});var PPe=s(EM);$ve=n(PPe,"STRONG",{});var GEt=s($ve);A0r=r(GEt,"mt5"),GEt.forEach(t),y0r=r(PPe," \u2014 "),IH=n(PPe,"A",{href:!0});var OEt=s(IH);L0r=r(OEt,"TFMT5ForConditionalGeneration"),OEt.forEach(t),x0r=r(PPe," (mT5 model)"),PPe.forEach(t),$0r=i(Ie),CM=n(Ie,"LI",{});var BPe=s(CM);kve=n(BPe,"STRONG",{});var VEt=s(kve);k0r=r(VEt,"pegasus"),VEt.forEach(t),S0r=r(BPe," \u2014 "),NH=n(BPe,"A",{href:!0});var XEt=s(NH);R0r=r(XEt,"TFPegasusForConditionalGeneration"),XEt.forEach(t),P0r=r(BPe," (Pegasus model)"),BPe.forEach(t),B0r=i(Ie),wM=n(Ie,"LI",{});var IPe=s(wM);Sve=n(IPe,"STRONG",{});var zEt=s(Sve);I0r=r(zEt,"t5"),zEt.forEach(t),N0r=r(IPe," \u2014 "),qH=n(IPe,"A",{href:!0});var WEt=s(qH);q0r=r(WEt,"TFT5ForConditionalGeneration"),WEt.forEach(t),j0r=r(IPe," (T5 model)"),IPe.forEach(t),Ie.forEach(t),D0r=i(Cl),T(AM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),kje=i(f),nc=n(f,"H2",{class:!0});var NGe=s(nc);yM=n(NGe,"A",{id:!0,class:!0,href:!0});var QEt=s(yM);Rve=n(QEt,"SPAN",{});var HEt=s(Rve);T(O7.$$.fragment,HEt),HEt.forEach(t),QEt.forEach(t),G0r=i(NGe),Pve=n(NGe,"SPAN",{});var UEt=s(Pve);O0r=r(UEt,"TFAutoModelForSequenceClassification"),UEt.forEach(t),NGe.forEach(t),Sje=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(V7.$$.fragment,wl),V0r=i(wl),sc=n(wl,"P",{});var Lee=s(sc);X0r=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jH=n(Lee,"A",{href:!0});var JEt=s(jH);z0r=r(JEt,"from_pretrained()"),JEt.forEach(t),W0r=r(Lee," class method or the "),DH=n(Lee,"A",{href:!0});var YEt=s(DH);Q0r=r(YEt,"from_config()"),YEt.forEach(t),H0r=r(Lee,` class
method.`),Lee.forEach(t),U0r=i(wl),X7=n(wl,"P",{});var qGe=s(X7);J0r=r(qGe,"This class cannot be instantiated directly using "),Bve=n(qGe,"CODE",{});var KEt=s(Bve);Y0r=r(KEt,"__init__()"),KEt.forEach(t),K0r=r(qGe," (throws an error)."),qGe.forEach(t),Z0r=i(wl),Rt=n(wl,"DIV",{class:!0});var GA=s(Rt);T(z7.$$.fragment,GA),eFr=i(GA),Ive=n(GA,"P",{});var ZEt=s(Ive);oFr=r(ZEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ZEt.forEach(t),rFr=i(GA),lc=n(GA,"P",{});var xee=s(lc);tFr=r(xee,`Note:
Loading a model from its configuration file does `),Nve=n(xee,"STRONG",{});var eCt=s(Nve);aFr=r(eCt,"not"),eCt.forEach(t),nFr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(xee,"A",{href:!0});var oCt=s(GH);sFr=r(oCt,"from_pretrained()"),oCt.forEach(t),lFr=r(xee," to load the model weights."),xee.forEach(t),iFr=i(GA),T(LM.$$.fragment,GA),GA.forEach(t),dFr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(W7.$$.fragment,Al),cFr=i(Al),qve=n(Al,"P",{});var rCt=s(qve);fFr=r(rCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rCt.forEach(t),mFr=i(Al),nn=n(Al,"P",{});var OA=s(nn);gFr=r(OA,"The model class to instantiate is selected based on the "),jve=n(OA,"CODE",{});var tCt=s(jve);hFr=r(tCt,"model_type"),tCt.forEach(t),pFr=r(OA,` property of the config object (either
passed as an argument or loaded from `),Dve=n(OA,"CODE",{});var aCt=s(Dve);_Fr=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),uFr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(OA,"CODE",{});var nCt=s(Gve);bFr=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),vFr=r(OA,":"),OA.forEach(t),FFr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);xM=n(ae,"LI",{});var NPe=s(xM);Ove=n(NPe,"STRONG",{});var sCt=s(Ove);TFr=r(sCt,"albert"),sCt.forEach(t),MFr=r(NPe," \u2014 "),OH=n(NPe,"A",{href:!0});var lCt=s(OH);EFr=r(lCt,"TFAlbertForSequenceClassification"),lCt.forEach(t),CFr=r(NPe," (ALBERT model)"),NPe.forEach(t),wFr=i(ae),$M=n(ae,"LI",{});var qPe=s($M);Vve=n(qPe,"STRONG",{});var iCt=s(Vve);AFr=r(iCt,"bert"),iCt.forEach(t),yFr=r(qPe," \u2014 "),VH=n(qPe,"A",{href:!0});var dCt=s(VH);LFr=r(dCt,"TFBertForSequenceClassification"),dCt.forEach(t),xFr=r(qPe," (BERT model)"),qPe.forEach(t),$Fr=i(ae),kM=n(ae,"LI",{});var jPe=s(kM);Xve=n(jPe,"STRONG",{});var cCt=s(Xve);kFr=r(cCt,"camembert"),cCt.forEach(t),SFr=r(jPe," \u2014 "),XH=n(jPe,"A",{href:!0});var fCt=s(XH);RFr=r(fCt,"TFCamembertForSequenceClassification"),fCt.forEach(t),PFr=r(jPe," (CamemBERT model)"),jPe.forEach(t),BFr=i(ae),SM=n(ae,"LI",{});var DPe=s(SM);zve=n(DPe,"STRONG",{});var mCt=s(zve);IFr=r(mCt,"convbert"),mCt.forEach(t),NFr=r(DPe," \u2014 "),zH=n(DPe,"A",{href:!0});var gCt=s(zH);qFr=r(gCt,"TFConvBertForSequenceClassification"),gCt.forEach(t),jFr=r(DPe," (ConvBERT model)"),DPe.forEach(t),DFr=i(ae),RM=n(ae,"LI",{});var GPe=s(RM);Wve=n(GPe,"STRONG",{});var hCt=s(Wve);GFr=r(hCt,"ctrl"),hCt.forEach(t),OFr=r(GPe," \u2014 "),WH=n(GPe,"A",{href:!0});var pCt=s(WH);VFr=r(pCt,"TFCTRLForSequenceClassification"),pCt.forEach(t),XFr=r(GPe," (CTRL model)"),GPe.forEach(t),zFr=i(ae),PM=n(ae,"LI",{});var OPe=s(PM);Qve=n(OPe,"STRONG",{});var _Ct=s(Qve);WFr=r(_Ct,"deberta"),_Ct.forEach(t),QFr=r(OPe," \u2014 "),QH=n(OPe,"A",{href:!0});var uCt=s(QH);HFr=r(uCt,"TFDebertaForSequenceClassification"),uCt.forEach(t),UFr=r(OPe," (DeBERTa model)"),OPe.forEach(t),JFr=i(ae),BM=n(ae,"LI",{});var VPe=s(BM);Hve=n(VPe,"STRONG",{});var bCt=s(Hve);YFr=r(bCt,"deberta-v2"),bCt.forEach(t),KFr=r(VPe," \u2014 "),HH=n(VPe,"A",{href:!0});var vCt=s(HH);ZFr=r(vCt,"TFDebertaV2ForSequenceClassification"),vCt.forEach(t),e6r=r(VPe," (DeBERTa-v2 model)"),VPe.forEach(t),o6r=i(ae),IM=n(ae,"LI",{});var XPe=s(IM);Uve=n(XPe,"STRONG",{});var FCt=s(Uve);r6r=r(FCt,"distilbert"),FCt.forEach(t),t6r=r(XPe," \u2014 "),UH=n(XPe,"A",{href:!0});var TCt=s(UH);a6r=r(TCt,"TFDistilBertForSequenceClassification"),TCt.forEach(t),n6r=r(XPe," (DistilBERT model)"),XPe.forEach(t),s6r=i(ae),NM=n(ae,"LI",{});var zPe=s(NM);Jve=n(zPe,"STRONG",{});var MCt=s(Jve);l6r=r(MCt,"electra"),MCt.forEach(t),i6r=r(zPe," \u2014 "),JH=n(zPe,"A",{href:!0});var ECt=s(JH);d6r=r(ECt,"TFElectraForSequenceClassification"),ECt.forEach(t),c6r=r(zPe," (ELECTRA model)"),zPe.forEach(t),f6r=i(ae),qM=n(ae,"LI",{});var WPe=s(qM);Yve=n(WPe,"STRONG",{});var CCt=s(Yve);m6r=r(CCt,"flaubert"),CCt.forEach(t),g6r=r(WPe," \u2014 "),YH=n(WPe,"A",{href:!0});var wCt=s(YH);h6r=r(wCt,"TFFlaubertForSequenceClassification"),wCt.forEach(t),p6r=r(WPe," (FlauBERT model)"),WPe.forEach(t),_6r=i(ae),jM=n(ae,"LI",{});var QPe=s(jM);Kve=n(QPe,"STRONG",{});var ACt=s(Kve);u6r=r(ACt,"funnel"),ACt.forEach(t),b6r=r(QPe," \u2014 "),KH=n(QPe,"A",{href:!0});var yCt=s(KH);v6r=r(yCt,"TFFunnelForSequenceClassification"),yCt.forEach(t),F6r=r(QPe," (Funnel Transformer model)"),QPe.forEach(t),T6r=i(ae),DM=n(ae,"LI",{});var HPe=s(DM);Zve=n(HPe,"STRONG",{});var LCt=s(Zve);M6r=r(LCt,"gpt2"),LCt.forEach(t),E6r=r(HPe," \u2014 "),ZH=n(HPe,"A",{href:!0});var xCt=s(ZH);C6r=r(xCt,"TFGPT2ForSequenceClassification"),xCt.forEach(t),w6r=r(HPe," (OpenAI GPT-2 model)"),HPe.forEach(t),A6r=i(ae),GM=n(ae,"LI",{});var UPe=s(GM);e0e=n(UPe,"STRONG",{});var $Ct=s(e0e);y6r=r($Ct,"gptj"),$Ct.forEach(t),L6r=r(UPe," \u2014 "),eU=n(UPe,"A",{href:!0});var kCt=s(eU);x6r=r(kCt,"TFGPTJForSequenceClassification"),kCt.forEach(t),$6r=r(UPe," (GPT-J model)"),UPe.forEach(t),k6r=i(ae),OM=n(ae,"LI",{});var JPe=s(OM);o0e=n(JPe,"STRONG",{});var SCt=s(o0e);S6r=r(SCt,"layoutlm"),SCt.forEach(t),R6r=r(JPe," \u2014 "),oU=n(JPe,"A",{href:!0});var RCt=s(oU);P6r=r(RCt,"TFLayoutLMForSequenceClassification"),RCt.forEach(t),B6r=r(JPe," (LayoutLM model)"),JPe.forEach(t),I6r=i(ae),VM=n(ae,"LI",{});var YPe=s(VM);r0e=n(YPe,"STRONG",{});var PCt=s(r0e);N6r=r(PCt,"longformer"),PCt.forEach(t),q6r=r(YPe," \u2014 "),rU=n(YPe,"A",{href:!0});var BCt=s(rU);j6r=r(BCt,"TFLongformerForSequenceClassification"),BCt.forEach(t),D6r=r(YPe," (Longformer model)"),YPe.forEach(t),G6r=i(ae),XM=n(ae,"LI",{});var KPe=s(XM);t0e=n(KPe,"STRONG",{});var ICt=s(t0e);O6r=r(ICt,"mobilebert"),ICt.forEach(t),V6r=r(KPe," \u2014 "),tU=n(KPe,"A",{href:!0});var NCt=s(tU);X6r=r(NCt,"TFMobileBertForSequenceClassification"),NCt.forEach(t),z6r=r(KPe," (MobileBERT model)"),KPe.forEach(t),W6r=i(ae),zM=n(ae,"LI",{});var ZPe=s(zM);a0e=n(ZPe,"STRONG",{});var qCt=s(a0e);Q6r=r(qCt,"mpnet"),qCt.forEach(t),H6r=r(ZPe," \u2014 "),aU=n(ZPe,"A",{href:!0});var jCt=s(aU);U6r=r(jCt,"TFMPNetForSequenceClassification"),jCt.forEach(t),J6r=r(ZPe," (MPNet model)"),ZPe.forEach(t),Y6r=i(ae),WM=n(ae,"LI",{});var eBe=s(WM);n0e=n(eBe,"STRONG",{});var DCt=s(n0e);K6r=r(DCt,"openai-gpt"),DCt.forEach(t),Z6r=r(eBe," \u2014 "),nU=n(eBe,"A",{href:!0});var GCt=s(nU);eTr=r(GCt,"TFOpenAIGPTForSequenceClassification"),GCt.forEach(t),oTr=r(eBe," (OpenAI GPT model)"),eBe.forEach(t),rTr=i(ae),QM=n(ae,"LI",{});var oBe=s(QM);s0e=n(oBe,"STRONG",{});var OCt=s(s0e);tTr=r(OCt,"rembert"),OCt.forEach(t),aTr=r(oBe," \u2014 "),sU=n(oBe,"A",{href:!0});var VCt=s(sU);nTr=r(VCt,"TFRemBertForSequenceClassification"),VCt.forEach(t),sTr=r(oBe," (RemBERT model)"),oBe.forEach(t),lTr=i(ae),HM=n(ae,"LI",{});var rBe=s(HM);l0e=n(rBe,"STRONG",{});var XCt=s(l0e);iTr=r(XCt,"roberta"),XCt.forEach(t),dTr=r(rBe," \u2014 "),lU=n(rBe,"A",{href:!0});var zCt=s(lU);cTr=r(zCt,"TFRobertaForSequenceClassification"),zCt.forEach(t),fTr=r(rBe," (RoBERTa model)"),rBe.forEach(t),mTr=i(ae),UM=n(ae,"LI",{});var tBe=s(UM);i0e=n(tBe,"STRONG",{});var WCt=s(i0e);gTr=r(WCt,"roformer"),WCt.forEach(t),hTr=r(tBe," \u2014 "),iU=n(tBe,"A",{href:!0});var QCt=s(iU);pTr=r(QCt,"TFRoFormerForSequenceClassification"),QCt.forEach(t),_Tr=r(tBe," (RoFormer model)"),tBe.forEach(t),uTr=i(ae),JM=n(ae,"LI",{});var aBe=s(JM);d0e=n(aBe,"STRONG",{});var HCt=s(d0e);bTr=r(HCt,"tapas"),HCt.forEach(t),vTr=r(aBe," \u2014 "),dU=n(aBe,"A",{href:!0});var UCt=s(dU);FTr=r(UCt,"TFTapasForSequenceClassification"),UCt.forEach(t),TTr=r(aBe," (TAPAS model)"),aBe.forEach(t),MTr=i(ae),YM=n(ae,"LI",{});var nBe=s(YM);c0e=n(nBe,"STRONG",{});var JCt=s(c0e);ETr=r(JCt,"transfo-xl"),JCt.forEach(t),CTr=r(nBe," \u2014 "),cU=n(nBe,"A",{href:!0});var YCt=s(cU);wTr=r(YCt,"TFTransfoXLForSequenceClassification"),YCt.forEach(t),ATr=r(nBe," (Transformer-XL model)"),nBe.forEach(t),yTr=i(ae),KM=n(ae,"LI",{});var sBe=s(KM);f0e=n(sBe,"STRONG",{});var KCt=s(f0e);LTr=r(KCt,"xlm"),KCt.forEach(t),xTr=r(sBe," \u2014 "),fU=n(sBe,"A",{href:!0});var ZCt=s(fU);$Tr=r(ZCt,"TFXLMForSequenceClassification"),ZCt.forEach(t),kTr=r(sBe," (XLM model)"),sBe.forEach(t),STr=i(ae),ZM=n(ae,"LI",{});var lBe=s(ZM);m0e=n(lBe,"STRONG",{});var e5t=s(m0e);RTr=r(e5t,"xlm-roberta"),e5t.forEach(t),PTr=r(lBe," \u2014 "),mU=n(lBe,"A",{href:!0});var o5t=s(mU);BTr=r(o5t,"TFXLMRobertaForSequenceClassification"),o5t.forEach(t),ITr=r(lBe," (XLM-RoBERTa model)"),lBe.forEach(t),NTr=i(ae),eE=n(ae,"LI",{});var iBe=s(eE);g0e=n(iBe,"STRONG",{});var r5t=s(g0e);qTr=r(r5t,"xlnet"),r5t.forEach(t),jTr=r(iBe," \u2014 "),gU=n(iBe,"A",{href:!0});var t5t=s(gU);DTr=r(t5t,"TFXLNetForSequenceClassification"),t5t.forEach(t),GTr=r(iBe," (XLNet model)"),iBe.forEach(t),ae.forEach(t),OTr=i(Al),T(oE.$$.fragment,Al),Al.forEach(t),wl.forEach(t),Rje=i(f),ic=n(f,"H2",{class:!0});var jGe=s(ic);rE=n(jGe,"A",{id:!0,class:!0,href:!0});var a5t=s(rE);h0e=n(a5t,"SPAN",{});var n5t=s(h0e);T(Q7.$$.fragment,n5t),n5t.forEach(t),a5t.forEach(t),VTr=i(jGe),p0e=n(jGe,"SPAN",{});var s5t=s(p0e);XTr=r(s5t,"TFAutoModelForMultipleChoice"),s5t.forEach(t),jGe.forEach(t),Pje=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(H7.$$.fragment,yl),zTr=i(yl),dc=n(yl,"P",{});var $ee=s(dc);WTr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hU=n($ee,"A",{href:!0});var l5t=s(hU);QTr=r(l5t,"from_pretrained()"),l5t.forEach(t),HTr=r($ee," class method or the "),pU=n($ee,"A",{href:!0});var i5t=s(pU);UTr=r(i5t,"from_config()"),i5t.forEach(t),JTr=r($ee,` class
method.`),$ee.forEach(t),YTr=i(yl),U7=n(yl,"P",{});var DGe=s(U7);KTr=r(DGe,"This class cannot be instantiated directly using "),_0e=n(DGe,"CODE",{});var d5t=s(_0e);ZTr=r(d5t,"__init__()"),d5t.forEach(t),eMr=r(DGe," (throws an error)."),DGe.forEach(t),oMr=i(yl),Pt=n(yl,"DIV",{class:!0});var VA=s(Pt);T(J7.$$.fragment,VA),rMr=i(VA),u0e=n(VA,"P",{});var c5t=s(u0e);tMr=r(c5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),c5t.forEach(t),aMr=i(VA),cc=n(VA,"P",{});var kee=s(cc);nMr=r(kee,`Note:
Loading a model from its configuration file does `),b0e=n(kee,"STRONG",{});var f5t=s(b0e);sMr=r(f5t,"not"),f5t.forEach(t),lMr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(kee,"A",{href:!0});var m5t=s(_U);iMr=r(m5t,"from_pretrained()"),m5t.forEach(t),dMr=r(kee," to load the model weights."),kee.forEach(t),cMr=i(VA),T(tE.$$.fragment,VA),VA.forEach(t),fMr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(Y7.$$.fragment,Ll),mMr=i(Ll),v0e=n(Ll,"P",{});var g5t=s(v0e);gMr=r(g5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),g5t.forEach(t),hMr=i(Ll),sn=n(Ll,"P",{});var XA=s(sn);pMr=r(XA,"The model class to instantiate is selected based on the "),F0e=n(XA,"CODE",{});var h5t=s(F0e);_Mr=r(h5t,"model_type"),h5t.forEach(t),uMr=r(XA,` property of the config object (either
passed as an argument or loaded from `),T0e=n(XA,"CODE",{});var p5t=s(T0e);bMr=r(p5t,"pretrained_model_name_or_path"),p5t.forEach(t),vMr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=n(XA,"CODE",{});var _5t=s(M0e);FMr=r(_5t,"pretrained_model_name_or_path"),_5t.forEach(t),TMr=r(XA,":"),XA.forEach(t),MMr=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);aE=n(be,"LI",{});var dBe=s(aE);E0e=n(dBe,"STRONG",{});var u5t=s(E0e);EMr=r(u5t,"albert"),u5t.forEach(t),CMr=r(dBe," \u2014 "),uU=n(dBe,"A",{href:!0});var b5t=s(uU);wMr=r(b5t,"TFAlbertForMultipleChoice"),b5t.forEach(t),AMr=r(dBe," (ALBERT model)"),dBe.forEach(t),yMr=i(be),nE=n(be,"LI",{});var cBe=s(nE);C0e=n(cBe,"STRONG",{});var v5t=s(C0e);LMr=r(v5t,"bert"),v5t.forEach(t),xMr=r(cBe," \u2014 "),bU=n(cBe,"A",{href:!0});var F5t=s(bU);$Mr=r(F5t,"TFBertForMultipleChoice"),F5t.forEach(t),kMr=r(cBe," (BERT model)"),cBe.forEach(t),SMr=i(be),sE=n(be,"LI",{});var fBe=s(sE);w0e=n(fBe,"STRONG",{});var T5t=s(w0e);RMr=r(T5t,"camembert"),T5t.forEach(t),PMr=r(fBe," \u2014 "),vU=n(fBe,"A",{href:!0});var M5t=s(vU);BMr=r(M5t,"TFCamembertForMultipleChoice"),M5t.forEach(t),IMr=r(fBe," (CamemBERT model)"),fBe.forEach(t),NMr=i(be),lE=n(be,"LI",{});var mBe=s(lE);A0e=n(mBe,"STRONG",{});var E5t=s(A0e);qMr=r(E5t,"convbert"),E5t.forEach(t),jMr=r(mBe," \u2014 "),FU=n(mBe,"A",{href:!0});var C5t=s(FU);DMr=r(C5t,"TFConvBertForMultipleChoice"),C5t.forEach(t),GMr=r(mBe," (ConvBERT model)"),mBe.forEach(t),OMr=i(be),iE=n(be,"LI",{});var gBe=s(iE);y0e=n(gBe,"STRONG",{});var w5t=s(y0e);VMr=r(w5t,"distilbert"),w5t.forEach(t),XMr=r(gBe," \u2014 "),TU=n(gBe,"A",{href:!0});var A5t=s(TU);zMr=r(A5t,"TFDistilBertForMultipleChoice"),A5t.forEach(t),WMr=r(gBe," (DistilBERT model)"),gBe.forEach(t),QMr=i(be),dE=n(be,"LI",{});var hBe=s(dE);L0e=n(hBe,"STRONG",{});var y5t=s(L0e);HMr=r(y5t,"electra"),y5t.forEach(t),UMr=r(hBe," \u2014 "),MU=n(hBe,"A",{href:!0});var L5t=s(MU);JMr=r(L5t,"TFElectraForMultipleChoice"),L5t.forEach(t),YMr=r(hBe," (ELECTRA model)"),hBe.forEach(t),KMr=i(be),cE=n(be,"LI",{});var pBe=s(cE);x0e=n(pBe,"STRONG",{});var x5t=s(x0e);ZMr=r(x5t,"flaubert"),x5t.forEach(t),eEr=r(pBe," \u2014 "),EU=n(pBe,"A",{href:!0});var $5t=s(EU);oEr=r($5t,"TFFlaubertForMultipleChoice"),$5t.forEach(t),rEr=r(pBe," (FlauBERT model)"),pBe.forEach(t),tEr=i(be),fE=n(be,"LI",{});var _Be=s(fE);$0e=n(_Be,"STRONG",{});var k5t=s($0e);aEr=r(k5t,"funnel"),k5t.forEach(t),nEr=r(_Be," \u2014 "),CU=n(_Be,"A",{href:!0});var S5t=s(CU);sEr=r(S5t,"TFFunnelForMultipleChoice"),S5t.forEach(t),lEr=r(_Be," (Funnel Transformer model)"),_Be.forEach(t),iEr=i(be),mE=n(be,"LI",{});var uBe=s(mE);k0e=n(uBe,"STRONG",{});var R5t=s(k0e);dEr=r(R5t,"longformer"),R5t.forEach(t),cEr=r(uBe," \u2014 "),wU=n(uBe,"A",{href:!0});var P5t=s(wU);fEr=r(P5t,"TFLongformerForMultipleChoice"),P5t.forEach(t),mEr=r(uBe," (Longformer model)"),uBe.forEach(t),gEr=i(be),gE=n(be,"LI",{});var bBe=s(gE);S0e=n(bBe,"STRONG",{});var B5t=s(S0e);hEr=r(B5t,"mobilebert"),B5t.forEach(t),pEr=r(bBe," \u2014 "),AU=n(bBe,"A",{href:!0});var I5t=s(AU);_Er=r(I5t,"TFMobileBertForMultipleChoice"),I5t.forEach(t),uEr=r(bBe," (MobileBERT model)"),bBe.forEach(t),bEr=i(be),hE=n(be,"LI",{});var vBe=s(hE);R0e=n(vBe,"STRONG",{});var N5t=s(R0e);vEr=r(N5t,"mpnet"),N5t.forEach(t),FEr=r(vBe," \u2014 "),yU=n(vBe,"A",{href:!0});var q5t=s(yU);TEr=r(q5t,"TFMPNetForMultipleChoice"),q5t.forEach(t),MEr=r(vBe," (MPNet model)"),vBe.forEach(t),EEr=i(be),pE=n(be,"LI",{});var FBe=s(pE);P0e=n(FBe,"STRONG",{});var j5t=s(P0e);CEr=r(j5t,"rembert"),j5t.forEach(t),wEr=r(FBe," \u2014 "),LU=n(FBe,"A",{href:!0});var D5t=s(LU);AEr=r(D5t,"TFRemBertForMultipleChoice"),D5t.forEach(t),yEr=r(FBe," (RemBERT model)"),FBe.forEach(t),LEr=i(be),_E=n(be,"LI",{});var TBe=s(_E);B0e=n(TBe,"STRONG",{});var G5t=s(B0e);xEr=r(G5t,"roberta"),G5t.forEach(t),$Er=r(TBe," \u2014 "),xU=n(TBe,"A",{href:!0});var O5t=s(xU);kEr=r(O5t,"TFRobertaForMultipleChoice"),O5t.forEach(t),SEr=r(TBe," (RoBERTa model)"),TBe.forEach(t),REr=i(be),uE=n(be,"LI",{});var MBe=s(uE);I0e=n(MBe,"STRONG",{});var V5t=s(I0e);PEr=r(V5t,"roformer"),V5t.forEach(t),BEr=r(MBe," \u2014 "),$U=n(MBe,"A",{href:!0});var X5t=s($U);IEr=r(X5t,"TFRoFormerForMultipleChoice"),X5t.forEach(t),NEr=r(MBe," (RoFormer model)"),MBe.forEach(t),qEr=i(be),bE=n(be,"LI",{});var EBe=s(bE);N0e=n(EBe,"STRONG",{});var z5t=s(N0e);jEr=r(z5t,"xlm"),z5t.forEach(t),DEr=r(EBe," \u2014 "),kU=n(EBe,"A",{href:!0});var W5t=s(kU);GEr=r(W5t,"TFXLMForMultipleChoice"),W5t.forEach(t),OEr=r(EBe," (XLM model)"),EBe.forEach(t),VEr=i(be),vE=n(be,"LI",{});var CBe=s(vE);q0e=n(CBe,"STRONG",{});var Q5t=s(q0e);XEr=r(Q5t,"xlm-roberta"),Q5t.forEach(t),zEr=r(CBe," \u2014 "),SU=n(CBe,"A",{href:!0});var H5t=s(SU);WEr=r(H5t,"TFXLMRobertaForMultipleChoice"),H5t.forEach(t),QEr=r(CBe," (XLM-RoBERTa model)"),CBe.forEach(t),HEr=i(be),FE=n(be,"LI",{});var wBe=s(FE);j0e=n(wBe,"STRONG",{});var U5t=s(j0e);UEr=r(U5t,"xlnet"),U5t.forEach(t),JEr=r(wBe," \u2014 "),RU=n(wBe,"A",{href:!0});var J5t=s(RU);YEr=r(J5t,"TFXLNetForMultipleChoice"),J5t.forEach(t),KEr=r(wBe," (XLNet model)"),wBe.forEach(t),be.forEach(t),ZEr=i(Ll),T(TE.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),Bje=i(f),fc=n(f,"H2",{class:!0});var GGe=s(fc);ME=n(GGe,"A",{id:!0,class:!0,href:!0});var Y5t=s(ME);D0e=n(Y5t,"SPAN",{});var K5t=s(D0e);T(K7.$$.fragment,K5t),K5t.forEach(t),Y5t.forEach(t),eCr=i(GGe),G0e=n(GGe,"SPAN",{});var Z5t=s(G0e);oCr=r(Z5t,"TFAutoModelForNextSentencePrediction"),Z5t.forEach(t),GGe.forEach(t),Ije=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(Z7.$$.fragment,xl),rCr=i(xl),mc=n(xl,"P",{});var See=s(mc);tCr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PU=n(See,"A",{href:!0});var e3t=s(PU);aCr=r(e3t,"from_pretrained()"),e3t.forEach(t),nCr=r(See," class method or the "),BU=n(See,"A",{href:!0});var o3t=s(BU);sCr=r(o3t,"from_config()"),o3t.forEach(t),lCr=r(See,` class
method.`),See.forEach(t),iCr=i(xl),e9=n(xl,"P",{});var OGe=s(e9);dCr=r(OGe,"This class cannot be instantiated directly using "),O0e=n(OGe,"CODE",{});var r3t=s(O0e);cCr=r(r3t,"__init__()"),r3t.forEach(t),fCr=r(OGe," (throws an error)."),OGe.forEach(t),mCr=i(xl),Bt=n(xl,"DIV",{class:!0});var zA=s(Bt);T(o9.$$.fragment,zA),gCr=i(zA),V0e=n(zA,"P",{});var t3t=s(V0e);hCr=r(t3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),t3t.forEach(t),pCr=i(zA),gc=n(zA,"P",{});var Ree=s(gc);_Cr=r(Ree,`Note:
Loading a model from its configuration file does `),X0e=n(Ree,"STRONG",{});var a3t=s(X0e);uCr=r(a3t,"not"),a3t.forEach(t),bCr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(Ree,"A",{href:!0});var n3t=s(IU);vCr=r(n3t,"from_pretrained()"),n3t.forEach(t),FCr=r(Ree," to load the model weights."),Ree.forEach(t),TCr=i(zA),T(EE.$$.fragment,zA),zA.forEach(t),MCr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(r9.$$.fragment,$l),ECr=i($l),z0e=n($l,"P",{});var s3t=s(z0e);CCr=r(s3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),s3t.forEach(t),wCr=i($l),ln=n($l,"P",{});var WA=s(ln);ACr=r(WA,"The model class to instantiate is selected based on the "),W0e=n(WA,"CODE",{});var l3t=s(W0e);yCr=r(l3t,"model_type"),l3t.forEach(t),LCr=r(WA,` property of the config object (either
passed as an argument or loaded from `),Q0e=n(WA,"CODE",{});var i3t=s(Q0e);xCr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),$Cr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n(WA,"CODE",{});var d3t=s(H0e);kCr=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),SCr=r(WA,":"),WA.forEach(t),RCr=i($l),t9=n($l,"UL",{});var VGe=s(t9);CE=n(VGe,"LI",{});var ABe=s(CE);U0e=n(ABe,"STRONG",{});var c3t=s(U0e);PCr=r(c3t,"bert"),c3t.forEach(t),BCr=r(ABe," \u2014 "),NU=n(ABe,"A",{href:!0});var f3t=s(NU);ICr=r(f3t,"TFBertForNextSentencePrediction"),f3t.forEach(t),NCr=r(ABe," (BERT model)"),ABe.forEach(t),qCr=i(VGe),wE=n(VGe,"LI",{});var yBe=s(wE);J0e=n(yBe,"STRONG",{});var m3t=s(J0e);jCr=r(m3t,"mobilebert"),m3t.forEach(t),DCr=r(yBe," \u2014 "),qU=n(yBe,"A",{href:!0});var g3t=s(qU);GCr=r(g3t,"TFMobileBertForNextSentencePrediction"),g3t.forEach(t),OCr=r(yBe," (MobileBERT model)"),yBe.forEach(t),VGe.forEach(t),VCr=i($l),T(AE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Nje=i(f),hc=n(f,"H2",{class:!0});var XGe=s(hc);yE=n(XGe,"A",{id:!0,class:!0,href:!0});var h3t=s(yE);Y0e=n(h3t,"SPAN",{});var p3t=s(Y0e);T(a9.$$.fragment,p3t),p3t.forEach(t),h3t.forEach(t),XCr=i(XGe),K0e=n(XGe,"SPAN",{});var _3t=s(K0e);zCr=r(_3t,"TFAutoModelForTableQuestionAnswering"),_3t.forEach(t),XGe.forEach(t),qje=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(n9.$$.fragment,kl),WCr=i(kl),pc=n(kl,"P",{});var Pee=s(pc);QCr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jU=n(Pee,"A",{href:!0});var u3t=s(jU);HCr=r(u3t,"from_pretrained()"),u3t.forEach(t),UCr=r(Pee," class method or the "),DU=n(Pee,"A",{href:!0});var b3t=s(DU);JCr=r(b3t,"from_config()"),b3t.forEach(t),YCr=r(Pee,` class
method.`),Pee.forEach(t),KCr=i(kl),s9=n(kl,"P",{});var zGe=s(s9);ZCr=r(zGe,"This class cannot be instantiated directly using "),Z0e=n(zGe,"CODE",{});var v3t=s(Z0e);e5r=r(v3t,"__init__()"),v3t.forEach(t),o5r=r(zGe," (throws an error)."),zGe.forEach(t),r5r=i(kl),It=n(kl,"DIV",{class:!0});var QA=s(It);T(l9.$$.fragment,QA),t5r=i(QA),eFe=n(QA,"P",{});var F3t=s(eFe);a5r=r(F3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),F3t.forEach(t),n5r=i(QA),_c=n(QA,"P",{});var Bee=s(_c);s5r=r(Bee,`Note:
Loading a model from its configuration file does `),oFe=n(Bee,"STRONG",{});var T3t=s(oFe);l5r=r(T3t,"not"),T3t.forEach(t),i5r=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(Bee,"A",{href:!0});var M3t=s(GU);d5r=r(M3t,"from_pretrained()"),M3t.forEach(t),c5r=r(Bee," to load the model weights."),Bee.forEach(t),f5r=i(QA),T(LE.$$.fragment,QA),QA.forEach(t),m5r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(i9.$$.fragment,Sl),g5r=i(Sl),rFe=n(Sl,"P",{});var E3t=s(rFe);h5r=r(E3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),E3t.forEach(t),p5r=i(Sl),dn=n(Sl,"P",{});var HA=s(dn);_5r=r(HA,"The model class to instantiate is selected based on the "),tFe=n(HA,"CODE",{});var C3t=s(tFe);u5r=r(C3t,"model_type"),C3t.forEach(t),b5r=r(HA,` property of the config object (either
passed as an argument or loaded from `),aFe=n(HA,"CODE",{});var w3t=s(aFe);v5r=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),F5r=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=n(HA,"CODE",{});var A3t=s(nFe);T5r=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),M5r=r(HA,":"),HA.forEach(t),E5r=i(Sl),sFe=n(Sl,"UL",{});var y3t=s(sFe);xE=n(y3t,"LI",{});var LBe=s(xE);lFe=n(LBe,"STRONG",{});var L3t=s(lFe);C5r=r(L3t,"tapas"),L3t.forEach(t),w5r=r(LBe," \u2014 "),OU=n(LBe,"A",{href:!0});var x3t=s(OU);A5r=r(x3t,"TFTapasForQuestionAnswering"),x3t.forEach(t),y5r=r(LBe," (TAPAS model)"),LBe.forEach(t),y3t.forEach(t),L5r=i(Sl),T($E.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),jje=i(f),uc=n(f,"H2",{class:!0});var WGe=s(uc);kE=n(WGe,"A",{id:!0,class:!0,href:!0});var $3t=s(kE);iFe=n($3t,"SPAN",{});var k3t=s(iFe);T(d9.$$.fragment,k3t),k3t.forEach(t),$3t.forEach(t),x5r=i(WGe),dFe=n(WGe,"SPAN",{});var S3t=s(dFe);$5r=r(S3t,"TFAutoModelForTokenClassification"),S3t.forEach(t),WGe.forEach(t),Dje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(c9.$$.fragment,Rl),k5r=i(Rl),bc=n(Rl,"P",{});var Iee=s(bc);S5r=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VU=n(Iee,"A",{href:!0});var R3t=s(VU);R5r=r(R3t,"from_pretrained()"),R3t.forEach(t),P5r=r(Iee," class method or the "),XU=n(Iee,"A",{href:!0});var P3t=s(XU);B5r=r(P3t,"from_config()"),P3t.forEach(t),I5r=r(Iee,` class
method.`),Iee.forEach(t),N5r=i(Rl),f9=n(Rl,"P",{});var QGe=s(f9);q5r=r(QGe,"This class cannot be instantiated directly using "),cFe=n(QGe,"CODE",{});var B3t=s(cFe);j5r=r(B3t,"__init__()"),B3t.forEach(t),D5r=r(QGe," (throws an error)."),QGe.forEach(t),G5r=i(Rl),Nt=n(Rl,"DIV",{class:!0});var UA=s(Nt);T(m9.$$.fragment,UA),O5r=i(UA),fFe=n(UA,"P",{});var I3t=s(fFe);V5r=r(I3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),I3t.forEach(t),X5r=i(UA),vc=n(UA,"P",{});var Nee=s(vc);z5r=r(Nee,`Note:
Loading a model from its configuration file does `),mFe=n(Nee,"STRONG",{});var N3t=s(mFe);W5r=r(N3t,"not"),N3t.forEach(t),Q5r=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(Nee,"A",{href:!0});var q3t=s(zU);H5r=r(q3t,"from_pretrained()"),q3t.forEach(t),U5r=r(Nee," to load the model weights."),Nee.forEach(t),J5r=i(UA),T(SE.$$.fragment,UA),UA.forEach(t),Y5r=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(g9.$$.fragment,Pl),K5r=i(Pl),gFe=n(Pl,"P",{});var j3t=s(gFe);Z5r=r(j3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),j3t.forEach(t),e3r=i(Pl),cn=n(Pl,"P",{});var JA=s(cn);o3r=r(JA,"The model class to instantiate is selected based on the "),hFe=n(JA,"CODE",{});var D3t=s(hFe);r3r=r(D3t,"model_type"),D3t.forEach(t),t3r=r(JA,` property of the config object (either
passed as an argument or loaded from `),pFe=n(JA,"CODE",{});var G3t=s(pFe);a3r=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),n3r=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(JA,"CODE",{});var O3t=s(_Fe);s3r=r(O3t,"pretrained_model_name_or_path"),O3t.forEach(t),l3r=r(JA,":"),JA.forEach(t),i3r=i(Pl),de=n(Pl,"UL",{});var me=s(de);RE=n(me,"LI",{});var xBe=s(RE);uFe=n(xBe,"STRONG",{});var V3t=s(uFe);d3r=r(V3t,"albert"),V3t.forEach(t),c3r=r(xBe," \u2014 "),WU=n(xBe,"A",{href:!0});var X3t=s(WU);f3r=r(X3t,"TFAlbertForTokenClassification"),X3t.forEach(t),m3r=r(xBe," (ALBERT model)"),xBe.forEach(t),g3r=i(me),PE=n(me,"LI",{});var $Be=s(PE);bFe=n($Be,"STRONG",{});var z3t=s(bFe);h3r=r(z3t,"bert"),z3t.forEach(t),p3r=r($Be," \u2014 "),QU=n($Be,"A",{href:!0});var W3t=s(QU);_3r=r(W3t,"TFBertForTokenClassification"),W3t.forEach(t),u3r=r($Be," (BERT model)"),$Be.forEach(t),b3r=i(me),BE=n(me,"LI",{});var kBe=s(BE);vFe=n(kBe,"STRONG",{});var Q3t=s(vFe);v3r=r(Q3t,"camembert"),Q3t.forEach(t),F3r=r(kBe," \u2014 "),HU=n(kBe,"A",{href:!0});var H3t=s(HU);T3r=r(H3t,"TFCamembertForTokenClassification"),H3t.forEach(t),M3r=r(kBe," (CamemBERT model)"),kBe.forEach(t),E3r=i(me),IE=n(me,"LI",{});var SBe=s(IE);FFe=n(SBe,"STRONG",{});var U3t=s(FFe);C3r=r(U3t,"convbert"),U3t.forEach(t),w3r=r(SBe," \u2014 "),UU=n(SBe,"A",{href:!0});var J3t=s(UU);A3r=r(J3t,"TFConvBertForTokenClassification"),J3t.forEach(t),y3r=r(SBe," (ConvBERT model)"),SBe.forEach(t),L3r=i(me),NE=n(me,"LI",{});var RBe=s(NE);TFe=n(RBe,"STRONG",{});var Y3t=s(TFe);x3r=r(Y3t,"deberta"),Y3t.forEach(t),$3r=r(RBe," \u2014 "),JU=n(RBe,"A",{href:!0});var K3t=s(JU);k3r=r(K3t,"TFDebertaForTokenClassification"),K3t.forEach(t),S3r=r(RBe," (DeBERTa model)"),RBe.forEach(t),R3r=i(me),qE=n(me,"LI",{});var PBe=s(qE);MFe=n(PBe,"STRONG",{});var Z3t=s(MFe);P3r=r(Z3t,"deberta-v2"),Z3t.forEach(t),B3r=r(PBe," \u2014 "),YU=n(PBe,"A",{href:!0});var ewt=s(YU);I3r=r(ewt,"TFDebertaV2ForTokenClassification"),ewt.forEach(t),N3r=r(PBe," (DeBERTa-v2 model)"),PBe.forEach(t),q3r=i(me),jE=n(me,"LI",{});var BBe=s(jE);EFe=n(BBe,"STRONG",{});var owt=s(EFe);j3r=r(owt,"distilbert"),owt.forEach(t),D3r=r(BBe," \u2014 "),KU=n(BBe,"A",{href:!0});var rwt=s(KU);G3r=r(rwt,"TFDistilBertForTokenClassification"),rwt.forEach(t),O3r=r(BBe," (DistilBERT model)"),BBe.forEach(t),V3r=i(me),DE=n(me,"LI",{});var IBe=s(DE);CFe=n(IBe,"STRONG",{});var twt=s(CFe);X3r=r(twt,"electra"),twt.forEach(t),z3r=r(IBe," \u2014 "),ZU=n(IBe,"A",{href:!0});var awt=s(ZU);W3r=r(awt,"TFElectraForTokenClassification"),awt.forEach(t),Q3r=r(IBe," (ELECTRA model)"),IBe.forEach(t),H3r=i(me),GE=n(me,"LI",{});var NBe=s(GE);wFe=n(NBe,"STRONG",{});var nwt=s(wFe);U3r=r(nwt,"flaubert"),nwt.forEach(t),J3r=r(NBe," \u2014 "),eJ=n(NBe,"A",{href:!0});var swt=s(eJ);Y3r=r(swt,"TFFlaubertForTokenClassification"),swt.forEach(t),K3r=r(NBe," (FlauBERT model)"),NBe.forEach(t),Z3r=i(me),OE=n(me,"LI",{});var qBe=s(OE);AFe=n(qBe,"STRONG",{});var lwt=s(AFe);ewr=r(lwt,"funnel"),lwt.forEach(t),owr=r(qBe," \u2014 "),oJ=n(qBe,"A",{href:!0});var iwt=s(oJ);rwr=r(iwt,"TFFunnelForTokenClassification"),iwt.forEach(t),twr=r(qBe," (Funnel Transformer model)"),qBe.forEach(t),awr=i(me),VE=n(me,"LI",{});var jBe=s(VE);yFe=n(jBe,"STRONG",{});var dwt=s(yFe);nwr=r(dwt,"layoutlm"),dwt.forEach(t),swr=r(jBe," \u2014 "),rJ=n(jBe,"A",{href:!0});var cwt=s(rJ);lwr=r(cwt,"TFLayoutLMForTokenClassification"),cwt.forEach(t),iwr=r(jBe," (LayoutLM model)"),jBe.forEach(t),dwr=i(me),XE=n(me,"LI",{});var DBe=s(XE);LFe=n(DBe,"STRONG",{});var fwt=s(LFe);cwr=r(fwt,"longformer"),fwt.forEach(t),fwr=r(DBe," \u2014 "),tJ=n(DBe,"A",{href:!0});var mwt=s(tJ);mwr=r(mwt,"TFLongformerForTokenClassification"),mwt.forEach(t),gwr=r(DBe," (Longformer model)"),DBe.forEach(t),hwr=i(me),zE=n(me,"LI",{});var GBe=s(zE);xFe=n(GBe,"STRONG",{});var gwt=s(xFe);pwr=r(gwt,"mobilebert"),gwt.forEach(t),_wr=r(GBe," \u2014 "),aJ=n(GBe,"A",{href:!0});var hwt=s(aJ);uwr=r(hwt,"TFMobileBertForTokenClassification"),hwt.forEach(t),bwr=r(GBe," (MobileBERT model)"),GBe.forEach(t),vwr=i(me),WE=n(me,"LI",{});var OBe=s(WE);$Fe=n(OBe,"STRONG",{});var pwt=s($Fe);Fwr=r(pwt,"mpnet"),pwt.forEach(t),Twr=r(OBe," \u2014 "),nJ=n(OBe,"A",{href:!0});var _wt=s(nJ);Mwr=r(_wt,"TFMPNetForTokenClassification"),_wt.forEach(t),Ewr=r(OBe," (MPNet model)"),OBe.forEach(t),Cwr=i(me),QE=n(me,"LI",{});var VBe=s(QE);kFe=n(VBe,"STRONG",{});var uwt=s(kFe);wwr=r(uwt,"rembert"),uwt.forEach(t),Awr=r(VBe," \u2014 "),sJ=n(VBe,"A",{href:!0});var bwt=s(sJ);ywr=r(bwt,"TFRemBertForTokenClassification"),bwt.forEach(t),Lwr=r(VBe," (RemBERT model)"),VBe.forEach(t),xwr=i(me),HE=n(me,"LI",{});var XBe=s(HE);SFe=n(XBe,"STRONG",{});var vwt=s(SFe);$wr=r(vwt,"roberta"),vwt.forEach(t),kwr=r(XBe," \u2014 "),lJ=n(XBe,"A",{href:!0});var Fwt=s(lJ);Swr=r(Fwt,"TFRobertaForTokenClassification"),Fwt.forEach(t),Rwr=r(XBe," (RoBERTa model)"),XBe.forEach(t),Pwr=i(me),UE=n(me,"LI",{});var zBe=s(UE);RFe=n(zBe,"STRONG",{});var Twt=s(RFe);Bwr=r(Twt,"roformer"),Twt.forEach(t),Iwr=r(zBe," \u2014 "),iJ=n(zBe,"A",{href:!0});var Mwt=s(iJ);Nwr=r(Mwt,"TFRoFormerForTokenClassification"),Mwt.forEach(t),qwr=r(zBe," (RoFormer model)"),zBe.forEach(t),jwr=i(me),JE=n(me,"LI",{});var WBe=s(JE);PFe=n(WBe,"STRONG",{});var Ewt=s(PFe);Dwr=r(Ewt,"xlm"),Ewt.forEach(t),Gwr=r(WBe," \u2014 "),dJ=n(WBe,"A",{href:!0});var Cwt=s(dJ);Owr=r(Cwt,"TFXLMForTokenClassification"),Cwt.forEach(t),Vwr=r(WBe," (XLM model)"),WBe.forEach(t),Xwr=i(me),YE=n(me,"LI",{});var QBe=s(YE);BFe=n(QBe,"STRONG",{});var wwt=s(BFe);zwr=r(wwt,"xlm-roberta"),wwt.forEach(t),Wwr=r(QBe," \u2014 "),cJ=n(QBe,"A",{href:!0});var Awt=s(cJ);Qwr=r(Awt,"TFXLMRobertaForTokenClassification"),Awt.forEach(t),Hwr=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),Uwr=i(me),KE=n(me,"LI",{});var HBe=s(KE);IFe=n(HBe,"STRONG",{});var ywt=s(IFe);Jwr=r(ywt,"xlnet"),ywt.forEach(t),Ywr=r(HBe," \u2014 "),fJ=n(HBe,"A",{href:!0});var Lwt=s(fJ);Kwr=r(Lwt,"TFXLNetForTokenClassification"),Lwt.forEach(t),Zwr=r(HBe," (XLNet model)"),HBe.forEach(t),me.forEach(t),eAr=i(Pl),T(ZE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),Gje=i(f),Fc=n(f,"H2",{class:!0});var HGe=s(Fc);eC=n(HGe,"A",{id:!0,class:!0,href:!0});var xwt=s(eC);NFe=n(xwt,"SPAN",{});var $wt=s(NFe);T(h9.$$.fragment,$wt),$wt.forEach(t),xwt.forEach(t),oAr=i(HGe),qFe=n(HGe,"SPAN",{});var kwt=s(qFe);rAr=r(kwt,"TFAutoModelForQuestionAnswering"),kwt.forEach(t),HGe.forEach(t),Oje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(p9.$$.fragment,Bl),tAr=i(Bl),Tc=n(Bl,"P",{});var qee=s(Tc);aAr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mJ=n(qee,"A",{href:!0});var Swt=s(mJ);nAr=r(Swt,"from_pretrained()"),Swt.forEach(t),sAr=r(qee," class method or the "),gJ=n(qee,"A",{href:!0});var Rwt=s(gJ);lAr=r(Rwt,"from_config()"),Rwt.forEach(t),iAr=r(qee,` class
method.`),qee.forEach(t),dAr=i(Bl),_9=n(Bl,"P",{});var UGe=s(_9);cAr=r(UGe,"This class cannot be instantiated directly using "),jFe=n(UGe,"CODE",{});var Pwt=s(jFe);fAr=r(Pwt,"__init__()"),Pwt.forEach(t),mAr=r(UGe," (throws an error)."),UGe.forEach(t),gAr=i(Bl),qt=n(Bl,"DIV",{class:!0});var YA=s(qt);T(u9.$$.fragment,YA),hAr=i(YA),DFe=n(YA,"P",{});var Bwt=s(DFe);pAr=r(Bwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Bwt.forEach(t),_Ar=i(YA),Mc=n(YA,"P",{});var jee=s(Mc);uAr=r(jee,`Note:
Loading a model from its configuration file does `),GFe=n(jee,"STRONG",{});var Iwt=s(GFe);bAr=r(Iwt,"not"),Iwt.forEach(t),vAr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(jee,"A",{href:!0});var Nwt=s(hJ);FAr=r(Nwt,"from_pretrained()"),Nwt.forEach(t),TAr=r(jee," to load the model weights."),jee.forEach(t),MAr=i(YA),T(oC.$$.fragment,YA),YA.forEach(t),EAr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(b9.$$.fragment,Il),CAr=i(Il),OFe=n(Il,"P",{});var qwt=s(OFe);wAr=r(qwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qwt.forEach(t),AAr=i(Il),fn=n(Il,"P",{});var KA=s(fn);yAr=r(KA,"The model class to instantiate is selected based on the "),VFe=n(KA,"CODE",{});var jwt=s(VFe);LAr=r(jwt,"model_type"),jwt.forEach(t),xAr=r(KA,` property of the config object (either
passed as an argument or loaded from `),XFe=n(KA,"CODE",{});var Dwt=s(XFe);$Ar=r(Dwt,"pretrained_model_name_or_path"),Dwt.forEach(t),kAr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(KA,"CODE",{});var Gwt=s(zFe);SAr=r(Gwt,"pretrained_model_name_or_path"),Gwt.forEach(t),RAr=r(KA,":"),KA.forEach(t),PAr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);rC=n(ge,"LI",{});var UBe=s(rC);WFe=n(UBe,"STRONG",{});var Owt=s(WFe);BAr=r(Owt,"albert"),Owt.forEach(t),IAr=r(UBe," \u2014 "),pJ=n(UBe,"A",{href:!0});var Vwt=s(pJ);NAr=r(Vwt,"TFAlbertForQuestionAnswering"),Vwt.forEach(t),qAr=r(UBe," (ALBERT model)"),UBe.forEach(t),jAr=i(ge),tC=n(ge,"LI",{});var JBe=s(tC);QFe=n(JBe,"STRONG",{});var Xwt=s(QFe);DAr=r(Xwt,"bert"),Xwt.forEach(t),GAr=r(JBe," \u2014 "),_J=n(JBe,"A",{href:!0});var zwt=s(_J);OAr=r(zwt,"TFBertForQuestionAnswering"),zwt.forEach(t),VAr=r(JBe," (BERT model)"),JBe.forEach(t),XAr=i(ge),aC=n(ge,"LI",{});var YBe=s(aC);HFe=n(YBe,"STRONG",{});var Wwt=s(HFe);zAr=r(Wwt,"camembert"),Wwt.forEach(t),WAr=r(YBe," \u2014 "),uJ=n(YBe,"A",{href:!0});var Qwt=s(uJ);QAr=r(Qwt,"TFCamembertForQuestionAnswering"),Qwt.forEach(t),HAr=r(YBe," (CamemBERT model)"),YBe.forEach(t),UAr=i(ge),nC=n(ge,"LI",{});var KBe=s(nC);UFe=n(KBe,"STRONG",{});var Hwt=s(UFe);JAr=r(Hwt,"convbert"),Hwt.forEach(t),YAr=r(KBe," \u2014 "),bJ=n(KBe,"A",{href:!0});var Uwt=s(bJ);KAr=r(Uwt,"TFConvBertForQuestionAnswering"),Uwt.forEach(t),ZAr=r(KBe," (ConvBERT model)"),KBe.forEach(t),eyr=i(ge),sC=n(ge,"LI",{});var ZBe=s(sC);JFe=n(ZBe,"STRONG",{});var Jwt=s(JFe);oyr=r(Jwt,"deberta"),Jwt.forEach(t),ryr=r(ZBe," \u2014 "),vJ=n(ZBe,"A",{href:!0});var Ywt=s(vJ);tyr=r(Ywt,"TFDebertaForQuestionAnswering"),Ywt.forEach(t),ayr=r(ZBe," (DeBERTa model)"),ZBe.forEach(t),nyr=i(ge),lC=n(ge,"LI",{});var eIe=s(lC);YFe=n(eIe,"STRONG",{});var Kwt=s(YFe);syr=r(Kwt,"deberta-v2"),Kwt.forEach(t),lyr=r(eIe," \u2014 "),FJ=n(eIe,"A",{href:!0});var Zwt=s(FJ);iyr=r(Zwt,"TFDebertaV2ForQuestionAnswering"),Zwt.forEach(t),dyr=r(eIe," (DeBERTa-v2 model)"),eIe.forEach(t),cyr=i(ge),iC=n(ge,"LI",{});var oIe=s(iC);KFe=n(oIe,"STRONG",{});var eAt=s(KFe);fyr=r(eAt,"distilbert"),eAt.forEach(t),myr=r(oIe," \u2014 "),TJ=n(oIe,"A",{href:!0});var oAt=s(TJ);gyr=r(oAt,"TFDistilBertForQuestionAnswering"),oAt.forEach(t),hyr=r(oIe," (DistilBERT model)"),oIe.forEach(t),pyr=i(ge),dC=n(ge,"LI",{});var rIe=s(dC);ZFe=n(rIe,"STRONG",{});var rAt=s(ZFe);_yr=r(rAt,"electra"),rAt.forEach(t),uyr=r(rIe," \u2014 "),MJ=n(rIe,"A",{href:!0});var tAt=s(MJ);byr=r(tAt,"TFElectraForQuestionAnswering"),tAt.forEach(t),vyr=r(rIe," (ELECTRA model)"),rIe.forEach(t),Fyr=i(ge),cC=n(ge,"LI",{});var tIe=s(cC);e6e=n(tIe,"STRONG",{});var aAt=s(e6e);Tyr=r(aAt,"flaubert"),aAt.forEach(t),Myr=r(tIe," \u2014 "),EJ=n(tIe,"A",{href:!0});var nAt=s(EJ);Eyr=r(nAt,"TFFlaubertForQuestionAnsweringSimple"),nAt.forEach(t),Cyr=r(tIe," (FlauBERT model)"),tIe.forEach(t),wyr=i(ge),fC=n(ge,"LI",{});var aIe=s(fC);o6e=n(aIe,"STRONG",{});var sAt=s(o6e);Ayr=r(sAt,"funnel"),sAt.forEach(t),yyr=r(aIe," \u2014 "),CJ=n(aIe,"A",{href:!0});var lAt=s(CJ);Lyr=r(lAt,"TFFunnelForQuestionAnswering"),lAt.forEach(t),xyr=r(aIe," (Funnel Transformer model)"),aIe.forEach(t),$yr=i(ge),mC=n(ge,"LI",{});var nIe=s(mC);r6e=n(nIe,"STRONG",{});var iAt=s(r6e);kyr=r(iAt,"gptj"),iAt.forEach(t),Syr=r(nIe," \u2014 "),wJ=n(nIe,"A",{href:!0});var dAt=s(wJ);Ryr=r(dAt,"TFGPTJForQuestionAnswering"),dAt.forEach(t),Pyr=r(nIe," (GPT-J model)"),nIe.forEach(t),Byr=i(ge),gC=n(ge,"LI",{});var sIe=s(gC);t6e=n(sIe,"STRONG",{});var cAt=s(t6e);Iyr=r(cAt,"longformer"),cAt.forEach(t),Nyr=r(sIe," \u2014 "),AJ=n(sIe,"A",{href:!0});var fAt=s(AJ);qyr=r(fAt,"TFLongformerForQuestionAnswering"),fAt.forEach(t),jyr=r(sIe," (Longformer model)"),sIe.forEach(t),Dyr=i(ge),hC=n(ge,"LI",{});var lIe=s(hC);a6e=n(lIe,"STRONG",{});var mAt=s(a6e);Gyr=r(mAt,"mobilebert"),mAt.forEach(t),Oyr=r(lIe," \u2014 "),yJ=n(lIe,"A",{href:!0});var gAt=s(yJ);Vyr=r(gAt,"TFMobileBertForQuestionAnswering"),gAt.forEach(t),Xyr=r(lIe," (MobileBERT model)"),lIe.forEach(t),zyr=i(ge),pC=n(ge,"LI",{});var iIe=s(pC);n6e=n(iIe,"STRONG",{});var hAt=s(n6e);Wyr=r(hAt,"mpnet"),hAt.forEach(t),Qyr=r(iIe," \u2014 "),LJ=n(iIe,"A",{href:!0});var pAt=s(LJ);Hyr=r(pAt,"TFMPNetForQuestionAnswering"),pAt.forEach(t),Uyr=r(iIe," (MPNet model)"),iIe.forEach(t),Jyr=i(ge),_C=n(ge,"LI",{});var dIe=s(_C);s6e=n(dIe,"STRONG",{});var _At=s(s6e);Yyr=r(_At,"rembert"),_At.forEach(t),Kyr=r(dIe," \u2014 "),xJ=n(dIe,"A",{href:!0});var uAt=s(xJ);Zyr=r(uAt,"TFRemBertForQuestionAnswering"),uAt.forEach(t),eLr=r(dIe," (RemBERT model)"),dIe.forEach(t),oLr=i(ge),uC=n(ge,"LI",{});var cIe=s(uC);l6e=n(cIe,"STRONG",{});var bAt=s(l6e);rLr=r(bAt,"roberta"),bAt.forEach(t),tLr=r(cIe," \u2014 "),$J=n(cIe,"A",{href:!0});var vAt=s($J);aLr=r(vAt,"TFRobertaForQuestionAnswering"),vAt.forEach(t),nLr=r(cIe," (RoBERTa model)"),cIe.forEach(t),sLr=i(ge),bC=n(ge,"LI",{});var fIe=s(bC);i6e=n(fIe,"STRONG",{});var FAt=s(i6e);lLr=r(FAt,"roformer"),FAt.forEach(t),iLr=r(fIe," \u2014 "),kJ=n(fIe,"A",{href:!0});var TAt=s(kJ);dLr=r(TAt,"TFRoFormerForQuestionAnswering"),TAt.forEach(t),cLr=r(fIe," (RoFormer model)"),fIe.forEach(t),fLr=i(ge),vC=n(ge,"LI",{});var mIe=s(vC);d6e=n(mIe,"STRONG",{});var MAt=s(d6e);mLr=r(MAt,"xlm"),MAt.forEach(t),gLr=r(mIe," \u2014 "),SJ=n(mIe,"A",{href:!0});var EAt=s(SJ);hLr=r(EAt,"TFXLMForQuestionAnsweringSimple"),EAt.forEach(t),pLr=r(mIe," (XLM model)"),mIe.forEach(t),_Lr=i(ge),FC=n(ge,"LI",{});var gIe=s(FC);c6e=n(gIe,"STRONG",{});var CAt=s(c6e);uLr=r(CAt,"xlm-roberta"),CAt.forEach(t),bLr=r(gIe," \u2014 "),RJ=n(gIe,"A",{href:!0});var wAt=s(RJ);vLr=r(wAt,"TFXLMRobertaForQuestionAnswering"),wAt.forEach(t),FLr=r(gIe," (XLM-RoBERTa model)"),gIe.forEach(t),TLr=i(ge),TC=n(ge,"LI",{});var hIe=s(TC);f6e=n(hIe,"STRONG",{});var AAt=s(f6e);MLr=r(AAt,"xlnet"),AAt.forEach(t),ELr=r(hIe," \u2014 "),PJ=n(hIe,"A",{href:!0});var yAt=s(PJ);CLr=r(yAt,"TFXLNetForQuestionAnsweringSimple"),yAt.forEach(t),wLr=r(hIe," (XLNet model)"),hIe.forEach(t),ge.forEach(t),ALr=i(Il),T(MC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Vje=i(f),Ec=n(f,"H2",{class:!0});var JGe=s(Ec);EC=n(JGe,"A",{id:!0,class:!0,href:!0});var LAt=s(EC);m6e=n(LAt,"SPAN",{});var xAt=s(m6e);T(v9.$$.fragment,xAt),xAt.forEach(t),LAt.forEach(t),yLr=i(JGe),g6e=n(JGe,"SPAN",{});var $At=s(g6e);LLr=r($At,"TFAutoModelForVision2Seq"),$At.forEach(t),JGe.forEach(t),Xje=i(f),dr=n(f,"DIV",{class:!0});var Nl=s(dr);T(F9.$$.fragment,Nl),xLr=i(Nl),Cc=n(Nl,"P",{});var Dee=s(Cc);$Lr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BJ=n(Dee,"A",{href:!0});var kAt=s(BJ);kLr=r(kAt,"from_pretrained()"),kAt.forEach(t),SLr=r(Dee," class method or the "),IJ=n(Dee,"A",{href:!0});var SAt=s(IJ);RLr=r(SAt,"from_config()"),SAt.forEach(t),PLr=r(Dee,` class
method.`),Dee.forEach(t),BLr=i(Nl),T9=n(Nl,"P",{});var YGe=s(T9);ILr=r(YGe,"This class cannot be instantiated directly using "),h6e=n(YGe,"CODE",{});var RAt=s(h6e);NLr=r(RAt,"__init__()"),RAt.forEach(t),qLr=r(YGe," (throws an error)."),YGe.forEach(t),jLr=i(Nl),jt=n(Nl,"DIV",{class:!0});var ZA=s(jt);T(M9.$$.fragment,ZA),DLr=i(ZA),p6e=n(ZA,"P",{});var PAt=s(p6e);GLr=r(PAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PAt.forEach(t),OLr=i(ZA),wc=n(ZA,"P",{});var Gee=s(wc);VLr=r(Gee,`Note:
Loading a model from its configuration file does `),_6e=n(Gee,"STRONG",{});var BAt=s(_6e);XLr=r(BAt,"not"),BAt.forEach(t),zLr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(Gee,"A",{href:!0});var IAt=s(NJ);WLr=r(IAt,"from_pretrained()"),IAt.forEach(t),QLr=r(Gee," to load the model weights."),Gee.forEach(t),HLr=i(ZA),T(CC.$$.fragment,ZA),ZA.forEach(t),ULr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var ql=s(Nr);T(E9.$$.fragment,ql),JLr=i(ql),u6e=n(ql,"P",{});var NAt=s(u6e);YLr=r(NAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NAt.forEach(t),KLr=i(ql),mn=n(ql,"P",{});var ey=s(mn);ZLr=r(ey,"The model class to instantiate is selected based on the "),b6e=n(ey,"CODE",{});var qAt=s(b6e);e8r=r(qAt,"model_type"),qAt.forEach(t),o8r=r(ey,` property of the config object (either
passed as an argument or loaded from `),v6e=n(ey,"CODE",{});var jAt=s(v6e);r8r=r(jAt,"pretrained_model_name_or_path"),jAt.forEach(t),t8r=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=n(ey,"CODE",{});var DAt=s(F6e);a8r=r(DAt,"pretrained_model_name_or_path"),DAt.forEach(t),n8r=r(ey,":"),ey.forEach(t),s8r=i(ql),T6e=n(ql,"UL",{});var GAt=s(T6e);wC=n(GAt,"LI",{});var pIe=s(wC);M6e=n(pIe,"STRONG",{});var OAt=s(M6e);l8r=r(OAt,"vision-encoder-decoder"),OAt.forEach(t),i8r=r(pIe," \u2014 "),qJ=n(pIe,"A",{href:!0});var VAt=s(qJ);d8r=r(VAt,"TFVisionEncoderDecoderModel"),VAt.forEach(t),c8r=r(pIe," (Vision Encoder decoder model)"),pIe.forEach(t),GAt.forEach(t),f8r=i(ql),T(AC.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),zje=i(f),Ac=n(f,"H2",{class:!0});var KGe=s(Ac);yC=n(KGe,"A",{id:!0,class:!0,href:!0});var XAt=s(yC);E6e=n(XAt,"SPAN",{});var zAt=s(E6e);T(C9.$$.fragment,zAt),zAt.forEach(t),XAt.forEach(t),m8r=i(KGe),C6e=n(KGe,"SPAN",{});var WAt=s(C6e);g8r=r(WAt,"TFAutoModelForSpeechSeq2Seq"),WAt.forEach(t),KGe.forEach(t),Wje=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(w9.$$.fragment,jl),h8r=i(jl),yc=n(jl,"P",{});var Oee=s(yc);p8r=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jJ=n(Oee,"A",{href:!0});var QAt=s(jJ);_8r=r(QAt,"from_pretrained()"),QAt.forEach(t),u8r=r(Oee," class method or the "),DJ=n(Oee,"A",{href:!0});var HAt=s(DJ);b8r=r(HAt,"from_config()"),HAt.forEach(t),v8r=r(Oee,` class
method.`),Oee.forEach(t),F8r=i(jl),A9=n(jl,"P",{});var ZGe=s(A9);T8r=r(ZGe,"This class cannot be instantiated directly using "),w6e=n(ZGe,"CODE",{});var UAt=s(w6e);M8r=r(UAt,"__init__()"),UAt.forEach(t),E8r=r(ZGe," (throws an error)."),ZGe.forEach(t),C8r=i(jl),Dt=n(jl,"DIV",{class:!0});var oy=s(Dt);T(y9.$$.fragment,oy),w8r=i(oy),A6e=n(oy,"P",{});var JAt=s(A6e);A8r=r(JAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JAt.forEach(t),y8r=i(oy),Lc=n(oy,"P",{});var Vee=s(Lc);L8r=r(Vee,`Note:
Loading a model from its configuration file does `),y6e=n(Vee,"STRONG",{});var YAt=s(y6e);x8r=r(YAt,"not"),YAt.forEach(t),$8r=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(Vee,"A",{href:!0});var KAt=s(GJ);k8r=r(KAt,"from_pretrained()"),KAt.forEach(t),S8r=r(Vee," to load the model weights."),Vee.forEach(t),R8r=i(oy),T(LC.$$.fragment,oy),oy.forEach(t),P8r=i(jl),qr=n(jl,"DIV",{class:!0});var Dl=s(qr);T(L9.$$.fragment,Dl),B8r=i(Dl),L6e=n(Dl,"P",{});var ZAt=s(L6e);I8r=r(ZAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ZAt.forEach(t),N8r=i(Dl),gn=n(Dl,"P",{});var ry=s(gn);q8r=r(ry,"The model class to instantiate is selected based on the "),x6e=n(ry,"CODE",{});var eyt=s(x6e);j8r=r(eyt,"model_type"),eyt.forEach(t),D8r=r(ry,` property of the config object (either
passed as an argument or loaded from `),$6e=n(ry,"CODE",{});var oyt=s($6e);G8r=r(oyt,"pretrained_model_name_or_path"),oyt.forEach(t),O8r=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=n(ry,"CODE",{});var ryt=s(k6e);V8r=r(ryt,"pretrained_model_name_or_path"),ryt.forEach(t),X8r=r(ry,":"),ry.forEach(t),z8r=i(Dl),S6e=n(Dl,"UL",{});var tyt=s(S6e);xC=n(tyt,"LI",{});var _Ie=s(xC);R6e=n(_Ie,"STRONG",{});var ayt=s(R6e);W8r=r(ayt,"speech_to_text"),ayt.forEach(t),Q8r=r(_Ie," \u2014 "),OJ=n(_Ie,"A",{href:!0});var nyt=s(OJ);H8r=r(nyt,"TFSpeech2TextForConditionalGeneration"),nyt.forEach(t),U8r=r(_Ie," (Speech2Text model)"),_Ie.forEach(t),tyt.forEach(t),J8r=i(Dl),T($C.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Qje=i(f),xc=n(f,"H2",{class:!0});var eOe=s(xc);kC=n(eOe,"A",{id:!0,class:!0,href:!0});var syt=s(kC);P6e=n(syt,"SPAN",{});var lyt=s(P6e);T(x9.$$.fragment,lyt),lyt.forEach(t),syt.forEach(t),Y8r=i(eOe),B6e=n(eOe,"SPAN",{});var iyt=s(B6e);K8r=r(iyt,"FlaxAutoModel"),iyt.forEach(t),eOe.forEach(t),Hje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T($9.$$.fragment,Gl),Z8r=i(Gl),$c=n(Gl,"P",{});var Xee=s($c);e7r=r(Xee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VJ=n(Xee,"A",{href:!0});var dyt=s(VJ);o7r=r(dyt,"from_pretrained()"),dyt.forEach(t),r7r=r(Xee," class method or the "),XJ=n(Xee,"A",{href:!0});var cyt=s(XJ);t7r=r(cyt,"from_config()"),cyt.forEach(t),a7r=r(Xee,` class
method.`),Xee.forEach(t),n7r=i(Gl),k9=n(Gl,"P",{});var oOe=s(k9);s7r=r(oOe,"This class cannot be instantiated directly using "),I6e=n(oOe,"CODE",{});var fyt=s(I6e);l7r=r(fyt,"__init__()"),fyt.forEach(t),i7r=r(oOe," (throws an error)."),oOe.forEach(t),d7r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var ty=s(Gt);T(S9.$$.fragment,ty),c7r=i(ty),N6e=n(ty,"P",{});var myt=s(N6e);f7r=r(myt,"Instantiates one of the base model classes of the library from a configuration."),myt.forEach(t),m7r=i(ty),kc=n(ty,"P",{});var zee=s(kc);g7r=r(zee,`Note:
Loading a model from its configuration file does `),q6e=n(zee,"STRONG",{});var gyt=s(q6e);h7r=r(gyt,"not"),gyt.forEach(t),p7r=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(zee,"A",{href:!0});var hyt=s(zJ);_7r=r(hyt,"from_pretrained()"),hyt.forEach(t),u7r=r(zee," to load the model weights."),zee.forEach(t),b7r=i(ty),T(SC.$$.fragment,ty),ty.forEach(t),v7r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(R9.$$.fragment,Ol),F7r=i(Ol),j6e=n(Ol,"P",{});var pyt=s(j6e);T7r=r(pyt,"Instantiate one of the base model classes of the library from a pretrained model."),pyt.forEach(t),M7r=i(Ol),hn=n(Ol,"P",{});var ay=s(hn);E7r=r(ay,"The model class to instantiate is selected based on the "),D6e=n(ay,"CODE",{});var _yt=s(D6e);C7r=r(_yt,"model_type"),_yt.forEach(t),w7r=r(ay,` property of the config object (either
passed as an argument or loaded from `),G6e=n(ay,"CODE",{});var uyt=s(G6e);A7r=r(uyt,"pretrained_model_name_or_path"),uyt.forEach(t),y7r=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O6e=n(ay,"CODE",{});var byt=s(O6e);L7r=r(byt,"pretrained_model_name_or_path"),byt.forEach(t),x7r=r(ay,":"),ay.forEach(t),$7r=i(Ol),te=n(Ol,"UL",{});var ne=s(te);RC=n(ne,"LI",{});var uIe=s(RC);V6e=n(uIe,"STRONG",{});var vyt=s(V6e);k7r=r(vyt,"albert"),vyt.forEach(t),S7r=r(uIe," \u2014 "),WJ=n(uIe,"A",{href:!0});var Fyt=s(WJ);R7r=r(Fyt,"FlaxAlbertModel"),Fyt.forEach(t),P7r=r(uIe," (ALBERT model)"),uIe.forEach(t),B7r=i(ne),PC=n(ne,"LI",{});var bIe=s(PC);X6e=n(bIe,"STRONG",{});var Tyt=s(X6e);I7r=r(Tyt,"bart"),Tyt.forEach(t),N7r=r(bIe," \u2014 "),QJ=n(bIe,"A",{href:!0});var Myt=s(QJ);q7r=r(Myt,"FlaxBartModel"),Myt.forEach(t),j7r=r(bIe," (BART model)"),bIe.forEach(t),D7r=i(ne),BC=n(ne,"LI",{});var vIe=s(BC);z6e=n(vIe,"STRONG",{});var Eyt=s(z6e);G7r=r(Eyt,"beit"),Eyt.forEach(t),O7r=r(vIe," \u2014 "),HJ=n(vIe,"A",{href:!0});var Cyt=s(HJ);V7r=r(Cyt,"FlaxBeitModel"),Cyt.forEach(t),X7r=r(vIe," (BEiT model)"),vIe.forEach(t),z7r=i(ne),IC=n(ne,"LI",{});var FIe=s(IC);W6e=n(FIe,"STRONG",{});var wyt=s(W6e);W7r=r(wyt,"bert"),wyt.forEach(t),Q7r=r(FIe," \u2014 "),UJ=n(FIe,"A",{href:!0});var Ayt=s(UJ);H7r=r(Ayt,"FlaxBertModel"),Ayt.forEach(t),U7r=r(FIe," (BERT model)"),FIe.forEach(t),J7r=i(ne),NC=n(ne,"LI",{});var TIe=s(NC);Q6e=n(TIe,"STRONG",{});var yyt=s(Q6e);Y7r=r(yyt,"big_bird"),yyt.forEach(t),K7r=r(TIe," \u2014 "),JJ=n(TIe,"A",{href:!0});var Lyt=s(JJ);Z7r=r(Lyt,"FlaxBigBirdModel"),Lyt.forEach(t),e9r=r(TIe," (BigBird model)"),TIe.forEach(t),o9r=i(ne),qC=n(ne,"LI",{});var MIe=s(qC);H6e=n(MIe,"STRONG",{});var xyt=s(H6e);r9r=r(xyt,"blenderbot"),xyt.forEach(t),t9r=r(MIe," \u2014 "),YJ=n(MIe,"A",{href:!0});var $yt=s(YJ);a9r=r($yt,"FlaxBlenderbotModel"),$yt.forEach(t),n9r=r(MIe," (Blenderbot model)"),MIe.forEach(t),s9r=i(ne),jC=n(ne,"LI",{});var EIe=s(jC);U6e=n(EIe,"STRONG",{});var kyt=s(U6e);l9r=r(kyt,"blenderbot-small"),kyt.forEach(t),i9r=r(EIe," \u2014 "),KJ=n(EIe,"A",{href:!0});var Syt=s(KJ);d9r=r(Syt,"FlaxBlenderbotSmallModel"),Syt.forEach(t),c9r=r(EIe," (BlenderbotSmall model)"),EIe.forEach(t),f9r=i(ne),DC=n(ne,"LI",{});var CIe=s(DC);J6e=n(CIe,"STRONG",{});var Ryt=s(J6e);m9r=r(Ryt,"clip"),Ryt.forEach(t),g9r=r(CIe," \u2014 "),ZJ=n(CIe,"A",{href:!0});var Pyt=s(ZJ);h9r=r(Pyt,"FlaxCLIPModel"),Pyt.forEach(t),p9r=r(CIe," (CLIP model)"),CIe.forEach(t),_9r=i(ne),GC=n(ne,"LI",{});var wIe=s(GC);Y6e=n(wIe,"STRONG",{});var Byt=s(Y6e);u9r=r(Byt,"distilbert"),Byt.forEach(t),b9r=r(wIe," \u2014 "),eY=n(wIe,"A",{href:!0});var Iyt=s(eY);v9r=r(Iyt,"FlaxDistilBertModel"),Iyt.forEach(t),F9r=r(wIe," (DistilBERT model)"),wIe.forEach(t),T9r=i(ne),OC=n(ne,"LI",{});var AIe=s(OC);K6e=n(AIe,"STRONG",{});var Nyt=s(K6e);M9r=r(Nyt,"electra"),Nyt.forEach(t),E9r=r(AIe," \u2014 "),oY=n(AIe,"A",{href:!0});var qyt=s(oY);C9r=r(qyt,"FlaxElectraModel"),qyt.forEach(t),w9r=r(AIe," (ELECTRA model)"),AIe.forEach(t),A9r=i(ne),VC=n(ne,"LI",{});var yIe=s(VC);Z6e=n(yIe,"STRONG",{});var jyt=s(Z6e);y9r=r(jyt,"gpt2"),jyt.forEach(t),L9r=r(yIe," \u2014 "),rY=n(yIe,"A",{href:!0});var Dyt=s(rY);x9r=r(Dyt,"FlaxGPT2Model"),Dyt.forEach(t),$9r=r(yIe," (OpenAI GPT-2 model)"),yIe.forEach(t),k9r=i(ne),XC=n(ne,"LI",{});var LIe=s(XC);eTe=n(LIe,"STRONG",{});var Gyt=s(eTe);S9r=r(Gyt,"gpt_neo"),Gyt.forEach(t),R9r=r(LIe," \u2014 "),tY=n(LIe,"A",{href:!0});var Oyt=s(tY);P9r=r(Oyt,"FlaxGPTNeoModel"),Oyt.forEach(t),B9r=r(LIe," (GPT Neo model)"),LIe.forEach(t),I9r=i(ne),zC=n(ne,"LI",{});var xIe=s(zC);oTe=n(xIe,"STRONG",{});var Vyt=s(oTe);N9r=r(Vyt,"gptj"),Vyt.forEach(t),q9r=r(xIe," \u2014 "),aY=n(xIe,"A",{href:!0});var Xyt=s(aY);j9r=r(Xyt,"FlaxGPTJModel"),Xyt.forEach(t),D9r=r(xIe," (GPT-J model)"),xIe.forEach(t),G9r=i(ne),WC=n(ne,"LI",{});var $Ie=s(WC);rTe=n($Ie,"STRONG",{});var zyt=s(rTe);O9r=r(zyt,"marian"),zyt.forEach(t),V9r=r($Ie," \u2014 "),nY=n($Ie,"A",{href:!0});var Wyt=s(nY);X9r=r(Wyt,"FlaxMarianModel"),Wyt.forEach(t),z9r=r($Ie," (Marian model)"),$Ie.forEach(t),W9r=i(ne),QC=n(ne,"LI",{});var kIe=s(QC);tTe=n(kIe,"STRONG",{});var Qyt=s(tTe);Q9r=r(Qyt,"mbart"),Qyt.forEach(t),H9r=r(kIe," \u2014 "),sY=n(kIe,"A",{href:!0});var Hyt=s(sY);U9r=r(Hyt,"FlaxMBartModel"),Hyt.forEach(t),J9r=r(kIe," (mBART model)"),kIe.forEach(t),Y9r=i(ne),HC=n(ne,"LI",{});var SIe=s(HC);aTe=n(SIe,"STRONG",{});var Uyt=s(aTe);K9r=r(Uyt,"mt5"),Uyt.forEach(t),Z9r=r(SIe," \u2014 "),lY=n(SIe,"A",{href:!0});var Jyt=s(lY);exr=r(Jyt,"FlaxMT5Model"),Jyt.forEach(t),oxr=r(SIe," (mT5 model)"),SIe.forEach(t),rxr=i(ne),UC=n(ne,"LI",{});var RIe=s(UC);nTe=n(RIe,"STRONG",{});var Yyt=s(nTe);txr=r(Yyt,"pegasus"),Yyt.forEach(t),axr=r(RIe," \u2014 "),iY=n(RIe,"A",{href:!0});var Kyt=s(iY);nxr=r(Kyt,"FlaxPegasusModel"),Kyt.forEach(t),sxr=r(RIe," (Pegasus model)"),RIe.forEach(t),lxr=i(ne),JC=n(ne,"LI",{});var PIe=s(JC);sTe=n(PIe,"STRONG",{});var Zyt=s(sTe);ixr=r(Zyt,"roberta"),Zyt.forEach(t),dxr=r(PIe," \u2014 "),dY=n(PIe,"A",{href:!0});var eLt=s(dY);cxr=r(eLt,"FlaxRobertaModel"),eLt.forEach(t),fxr=r(PIe," (RoBERTa model)"),PIe.forEach(t),mxr=i(ne),YC=n(ne,"LI",{});var BIe=s(YC);lTe=n(BIe,"STRONG",{});var oLt=s(lTe);gxr=r(oLt,"roformer"),oLt.forEach(t),hxr=r(BIe," \u2014 "),cY=n(BIe,"A",{href:!0});var rLt=s(cY);pxr=r(rLt,"FlaxRoFormerModel"),rLt.forEach(t),_xr=r(BIe," (RoFormer model)"),BIe.forEach(t),uxr=i(ne),KC=n(ne,"LI",{});var IIe=s(KC);iTe=n(IIe,"STRONG",{});var tLt=s(iTe);bxr=r(tLt,"t5"),tLt.forEach(t),vxr=r(IIe," \u2014 "),fY=n(IIe,"A",{href:!0});var aLt=s(fY);Fxr=r(aLt,"FlaxT5Model"),aLt.forEach(t),Txr=r(IIe," (T5 model)"),IIe.forEach(t),Mxr=i(ne),ZC=n(ne,"LI",{});var NIe=s(ZC);dTe=n(NIe,"STRONG",{});var nLt=s(dTe);Exr=r(nLt,"vision-text-dual-encoder"),nLt.forEach(t),Cxr=r(NIe," \u2014 "),mY=n(NIe,"A",{href:!0});var sLt=s(mY);wxr=r(sLt,"FlaxVisionTextDualEncoderModel"),sLt.forEach(t),Axr=r(NIe," (VisionTextDualEncoder model)"),NIe.forEach(t),yxr=i(ne),e5=n(ne,"LI",{});var qIe=s(e5);cTe=n(qIe,"STRONG",{});var lLt=s(cTe);Lxr=r(lLt,"vit"),lLt.forEach(t),xxr=r(qIe," \u2014 "),gY=n(qIe,"A",{href:!0});var iLt=s(gY);$xr=r(iLt,"FlaxViTModel"),iLt.forEach(t),kxr=r(qIe," (ViT model)"),qIe.forEach(t),Sxr=i(ne),o5=n(ne,"LI",{});var jIe=s(o5);fTe=n(jIe,"STRONG",{});var dLt=s(fTe);Rxr=r(dLt,"wav2vec2"),dLt.forEach(t),Pxr=r(jIe," \u2014 "),hY=n(jIe,"A",{href:!0});var cLt=s(hY);Bxr=r(cLt,"FlaxWav2Vec2Model"),cLt.forEach(t),Ixr=r(jIe," (Wav2Vec2 model)"),jIe.forEach(t),Nxr=i(ne),r5=n(ne,"LI",{});var DIe=s(r5);mTe=n(DIe,"STRONG",{});var fLt=s(mTe);qxr=r(fLt,"xglm"),fLt.forEach(t),jxr=r(DIe," \u2014 "),pY=n(DIe,"A",{href:!0});var mLt=s(pY);Dxr=r(mLt,"FlaxXGLMModel"),mLt.forEach(t),Gxr=r(DIe," (XGLM model)"),DIe.forEach(t),Oxr=i(ne),t5=n(ne,"LI",{});var GIe=s(t5);gTe=n(GIe,"STRONG",{});var gLt=s(gTe);Vxr=r(gLt,"xlm-roberta"),gLt.forEach(t),Xxr=r(GIe," \u2014 "),_Y=n(GIe,"A",{href:!0});var hLt=s(_Y);zxr=r(hLt,"FlaxXLMRobertaModel"),hLt.forEach(t),Wxr=r(GIe," (XLM-RoBERTa model)"),GIe.forEach(t),ne.forEach(t),Qxr=i(Ol),T(a5.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Uje=i(f),Sc=n(f,"H2",{class:!0});var rOe=s(Sc);n5=n(rOe,"A",{id:!0,class:!0,href:!0});var pLt=s(n5);hTe=n(pLt,"SPAN",{});var _Lt=s(hTe);T(P9.$$.fragment,_Lt),_Lt.forEach(t),pLt.forEach(t),Hxr=i(rOe),pTe=n(rOe,"SPAN",{});var uLt=s(pTe);Uxr=r(uLt,"FlaxAutoModelForCausalLM"),uLt.forEach(t),rOe.forEach(t),Jje=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(B9.$$.fragment,Vl),Jxr=i(Vl),Rc=n(Vl,"P",{});var Wee=s(Rc);Yxr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uY=n(Wee,"A",{href:!0});var bLt=s(uY);Kxr=r(bLt,"from_pretrained()"),bLt.forEach(t),Zxr=r(Wee," class method or the "),bY=n(Wee,"A",{href:!0});var vLt=s(bY);e$r=r(vLt,"from_config()"),vLt.forEach(t),o$r=r(Wee,` class
method.`),Wee.forEach(t),r$r=i(Vl),I9=n(Vl,"P",{});var tOe=s(I9);t$r=r(tOe,"This class cannot be instantiated directly using "),_Te=n(tOe,"CODE",{});var FLt=s(_Te);a$r=r(FLt,"__init__()"),FLt.forEach(t),n$r=r(tOe," (throws an error)."),tOe.forEach(t),s$r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var ny=s(Ot);T(N9.$$.fragment,ny),l$r=i(ny),uTe=n(ny,"P",{});var TLt=s(uTe);i$r=r(TLt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),TLt.forEach(t),d$r=i(ny),Pc=n(ny,"P",{});var Qee=s(Pc);c$r=r(Qee,`Note:
Loading a model from its configuration file does `),bTe=n(Qee,"STRONG",{});var MLt=s(bTe);f$r=r(MLt,"not"),MLt.forEach(t),m$r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(Qee,"A",{href:!0});var ELt=s(vY);g$r=r(ELt,"from_pretrained()"),ELt.forEach(t),h$r=r(Qee," to load the model weights."),Qee.forEach(t),p$r=i(ny),T(s5.$$.fragment,ny),ny.forEach(t),_$r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(q9.$$.fragment,Xl),u$r=i(Xl),vTe=n(Xl,"P",{});var CLt=s(vTe);b$r=r(CLt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),CLt.forEach(t),v$r=i(Xl),pn=n(Xl,"P",{});var sy=s(pn);F$r=r(sy,"The model class to instantiate is selected based on the "),FTe=n(sy,"CODE",{});var wLt=s(FTe);T$r=r(wLt,"model_type"),wLt.forEach(t),M$r=r(sy,` property of the config object (either
passed as an argument or loaded from `),TTe=n(sy,"CODE",{});var ALt=s(TTe);E$r=r(ALt,"pretrained_model_name_or_path"),ALt.forEach(t),C$r=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=n(sy,"CODE",{});var yLt=s(MTe);w$r=r(yLt,"pretrained_model_name_or_path"),yLt.forEach(t),A$r=r(sy,":"),sy.forEach(t),y$r=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);l5=n(Xe,"LI",{});var OIe=s(l5);ETe=n(OIe,"STRONG",{});var LLt=s(ETe);L$r=r(LLt,"bart"),LLt.forEach(t),x$r=r(OIe," \u2014 "),FY=n(OIe,"A",{href:!0});var xLt=s(FY);$$r=r(xLt,"FlaxBartForCausalLM"),xLt.forEach(t),k$r=r(OIe," (BART model)"),OIe.forEach(t),S$r=i(Xe),i5=n(Xe,"LI",{});var VIe=s(i5);CTe=n(VIe,"STRONG",{});var $Lt=s(CTe);R$r=r($Lt,"bert"),$Lt.forEach(t),P$r=r(VIe," \u2014 "),TY=n(VIe,"A",{href:!0});var kLt=s(TY);B$r=r(kLt,"FlaxBertForCausalLM"),kLt.forEach(t),I$r=r(VIe," (BERT model)"),VIe.forEach(t),N$r=i(Xe),d5=n(Xe,"LI",{});var XIe=s(d5);wTe=n(XIe,"STRONG",{});var SLt=s(wTe);q$r=r(SLt,"big_bird"),SLt.forEach(t),j$r=r(XIe," \u2014 "),MY=n(XIe,"A",{href:!0});var RLt=s(MY);D$r=r(RLt,"FlaxBigBirdForCausalLM"),RLt.forEach(t),G$r=r(XIe," (BigBird model)"),XIe.forEach(t),O$r=i(Xe),c5=n(Xe,"LI",{});var zIe=s(c5);ATe=n(zIe,"STRONG",{});var PLt=s(ATe);V$r=r(PLt,"electra"),PLt.forEach(t),X$r=r(zIe," \u2014 "),EY=n(zIe,"A",{href:!0});var BLt=s(EY);z$r=r(BLt,"FlaxElectraForCausalLM"),BLt.forEach(t),W$r=r(zIe," (ELECTRA model)"),zIe.forEach(t),Q$r=i(Xe),f5=n(Xe,"LI",{});var WIe=s(f5);yTe=n(WIe,"STRONG",{});var ILt=s(yTe);H$r=r(ILt,"gpt2"),ILt.forEach(t),U$r=r(WIe," \u2014 "),CY=n(WIe,"A",{href:!0});var NLt=s(CY);J$r=r(NLt,"FlaxGPT2LMHeadModel"),NLt.forEach(t),Y$r=r(WIe," (OpenAI GPT-2 model)"),WIe.forEach(t),K$r=i(Xe),m5=n(Xe,"LI",{});var QIe=s(m5);LTe=n(QIe,"STRONG",{});var qLt=s(LTe);Z$r=r(qLt,"gpt_neo"),qLt.forEach(t),ekr=r(QIe," \u2014 "),wY=n(QIe,"A",{href:!0});var jLt=s(wY);okr=r(jLt,"FlaxGPTNeoForCausalLM"),jLt.forEach(t),rkr=r(QIe," (GPT Neo model)"),QIe.forEach(t),tkr=i(Xe),g5=n(Xe,"LI",{});var HIe=s(g5);xTe=n(HIe,"STRONG",{});var DLt=s(xTe);akr=r(DLt,"gptj"),DLt.forEach(t),nkr=r(HIe," \u2014 "),AY=n(HIe,"A",{href:!0});var GLt=s(AY);skr=r(GLt,"FlaxGPTJForCausalLM"),GLt.forEach(t),lkr=r(HIe," (GPT-J model)"),HIe.forEach(t),ikr=i(Xe),h5=n(Xe,"LI",{});var UIe=s(h5);$Te=n(UIe,"STRONG",{});var OLt=s($Te);dkr=r(OLt,"roberta"),OLt.forEach(t),ckr=r(UIe," \u2014 "),yY=n(UIe,"A",{href:!0});var VLt=s(yY);fkr=r(VLt,"FlaxRobertaForCausalLM"),VLt.forEach(t),mkr=r(UIe," (RoBERTa model)"),UIe.forEach(t),gkr=i(Xe),p5=n(Xe,"LI",{});var JIe=s(p5);kTe=n(JIe,"STRONG",{});var XLt=s(kTe);hkr=r(XLt,"xglm"),XLt.forEach(t),pkr=r(JIe," \u2014 "),LY=n(JIe,"A",{href:!0});var zLt=s(LY);_kr=r(zLt,"FlaxXGLMForCausalLM"),zLt.forEach(t),ukr=r(JIe," (XGLM model)"),JIe.forEach(t),Xe.forEach(t),bkr=i(Xl),T(_5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Yje=i(f),Bc=n(f,"H2",{class:!0});var aOe=s(Bc);u5=n(aOe,"A",{id:!0,class:!0,href:!0});var WLt=s(u5);STe=n(WLt,"SPAN",{});var QLt=s(STe);T(j9.$$.fragment,QLt),QLt.forEach(t),WLt.forEach(t),vkr=i(aOe),RTe=n(aOe,"SPAN",{});var HLt=s(RTe);Fkr=r(HLt,"FlaxAutoModelForPreTraining"),HLt.forEach(t),aOe.forEach(t),Kje=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(D9.$$.fragment,zl),Tkr=i(zl),Ic=n(zl,"P",{});var Hee=s(Ic);Mkr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xY=n(Hee,"A",{href:!0});var ULt=s(xY);Ekr=r(ULt,"from_pretrained()"),ULt.forEach(t),Ckr=r(Hee," class method or the "),$Y=n(Hee,"A",{href:!0});var JLt=s($Y);wkr=r(JLt,"from_config()"),JLt.forEach(t),Akr=r(Hee,` class
method.`),Hee.forEach(t),ykr=i(zl),G9=n(zl,"P",{});var nOe=s(G9);Lkr=r(nOe,"This class cannot be instantiated directly using "),PTe=n(nOe,"CODE",{});var YLt=s(PTe);xkr=r(YLt,"__init__()"),YLt.forEach(t),$kr=r(nOe," (throws an error)."),nOe.forEach(t),kkr=i(zl),Vt=n(zl,"DIV",{class:!0});var ly=s(Vt);T(O9.$$.fragment,ly),Skr=i(ly),BTe=n(ly,"P",{});var KLt=s(BTe);Rkr=r(KLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KLt.forEach(t),Pkr=i(ly),Nc=n(ly,"P",{});var Uee=s(Nc);Bkr=r(Uee,`Note:
Loading a model from its configuration file does `),ITe=n(Uee,"STRONG",{});var ZLt=s(ITe);Ikr=r(ZLt,"not"),ZLt.forEach(t),Nkr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n(Uee,"A",{href:!0});var e8t=s(kY);qkr=r(e8t,"from_pretrained()"),e8t.forEach(t),jkr=r(Uee," to load the model weights."),Uee.forEach(t),Dkr=i(ly),T(b5.$$.fragment,ly),ly.forEach(t),Gkr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(V9.$$.fragment,Wl),Okr=i(Wl),NTe=n(Wl,"P",{});var o8t=s(NTe);Vkr=r(o8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),o8t.forEach(t),Xkr=i(Wl),_n=n(Wl,"P",{});var iy=s(_n);zkr=r(iy,"The model class to instantiate is selected based on the "),qTe=n(iy,"CODE",{});var r8t=s(qTe);Wkr=r(r8t,"model_type"),r8t.forEach(t),Qkr=r(iy,` property of the config object (either
passed as an argument or loaded from `),jTe=n(iy,"CODE",{});var t8t=s(jTe);Hkr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),Ukr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(iy,"CODE",{});var a8t=s(DTe);Jkr=r(a8t,"pretrained_model_name_or_path"),a8t.forEach(t),Ykr=r(iy,":"),iy.forEach(t),Kkr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);v5=n(we,"LI",{});var YIe=s(v5);GTe=n(YIe,"STRONG",{});var n8t=s(GTe);Zkr=r(n8t,"albert"),n8t.forEach(t),eSr=r(YIe," \u2014 "),SY=n(YIe,"A",{href:!0});var s8t=s(SY);oSr=r(s8t,"FlaxAlbertForPreTraining"),s8t.forEach(t),rSr=r(YIe," (ALBERT model)"),YIe.forEach(t),tSr=i(we),F5=n(we,"LI",{});var KIe=s(F5);OTe=n(KIe,"STRONG",{});var l8t=s(OTe);aSr=r(l8t,"bart"),l8t.forEach(t),nSr=r(KIe," \u2014 "),RY=n(KIe,"A",{href:!0});var i8t=s(RY);sSr=r(i8t,"FlaxBartForConditionalGeneration"),i8t.forEach(t),lSr=r(KIe," (BART model)"),KIe.forEach(t),iSr=i(we),T5=n(we,"LI",{});var ZIe=s(T5);VTe=n(ZIe,"STRONG",{});var d8t=s(VTe);dSr=r(d8t,"bert"),d8t.forEach(t),cSr=r(ZIe," \u2014 "),PY=n(ZIe,"A",{href:!0});var c8t=s(PY);fSr=r(c8t,"FlaxBertForPreTraining"),c8t.forEach(t),mSr=r(ZIe," (BERT model)"),ZIe.forEach(t),gSr=i(we),M5=n(we,"LI",{});var eNe=s(M5);XTe=n(eNe,"STRONG",{});var f8t=s(XTe);hSr=r(f8t,"big_bird"),f8t.forEach(t),pSr=r(eNe," \u2014 "),BY=n(eNe,"A",{href:!0});var m8t=s(BY);_Sr=r(m8t,"FlaxBigBirdForPreTraining"),m8t.forEach(t),uSr=r(eNe," (BigBird model)"),eNe.forEach(t),bSr=i(we),E5=n(we,"LI",{});var oNe=s(E5);zTe=n(oNe,"STRONG",{});var g8t=s(zTe);vSr=r(g8t,"electra"),g8t.forEach(t),FSr=r(oNe," \u2014 "),IY=n(oNe,"A",{href:!0});var h8t=s(IY);TSr=r(h8t,"FlaxElectraForPreTraining"),h8t.forEach(t),MSr=r(oNe," (ELECTRA model)"),oNe.forEach(t),ESr=i(we),C5=n(we,"LI",{});var rNe=s(C5);WTe=n(rNe,"STRONG",{});var p8t=s(WTe);CSr=r(p8t,"mbart"),p8t.forEach(t),wSr=r(rNe," \u2014 "),NY=n(rNe,"A",{href:!0});var _8t=s(NY);ASr=r(_8t,"FlaxMBartForConditionalGeneration"),_8t.forEach(t),ySr=r(rNe," (mBART model)"),rNe.forEach(t),LSr=i(we),w5=n(we,"LI",{});var tNe=s(w5);QTe=n(tNe,"STRONG",{});var u8t=s(QTe);xSr=r(u8t,"mt5"),u8t.forEach(t),$Sr=r(tNe," \u2014 "),qY=n(tNe,"A",{href:!0});var b8t=s(qY);kSr=r(b8t,"FlaxMT5ForConditionalGeneration"),b8t.forEach(t),SSr=r(tNe," (mT5 model)"),tNe.forEach(t),RSr=i(we),A5=n(we,"LI",{});var aNe=s(A5);HTe=n(aNe,"STRONG",{});var v8t=s(HTe);PSr=r(v8t,"roberta"),v8t.forEach(t),BSr=r(aNe," \u2014 "),jY=n(aNe,"A",{href:!0});var F8t=s(jY);ISr=r(F8t,"FlaxRobertaForMaskedLM"),F8t.forEach(t),NSr=r(aNe," (RoBERTa model)"),aNe.forEach(t),qSr=i(we),y5=n(we,"LI",{});var nNe=s(y5);UTe=n(nNe,"STRONG",{});var T8t=s(UTe);jSr=r(T8t,"roformer"),T8t.forEach(t),DSr=r(nNe," \u2014 "),DY=n(nNe,"A",{href:!0});var M8t=s(DY);GSr=r(M8t,"FlaxRoFormerForMaskedLM"),M8t.forEach(t),OSr=r(nNe," (RoFormer model)"),nNe.forEach(t),VSr=i(we),L5=n(we,"LI",{});var sNe=s(L5);JTe=n(sNe,"STRONG",{});var E8t=s(JTe);XSr=r(E8t,"t5"),E8t.forEach(t),zSr=r(sNe," \u2014 "),GY=n(sNe,"A",{href:!0});var C8t=s(GY);WSr=r(C8t,"FlaxT5ForConditionalGeneration"),C8t.forEach(t),QSr=r(sNe," (T5 model)"),sNe.forEach(t),HSr=i(we),x5=n(we,"LI",{});var lNe=s(x5);YTe=n(lNe,"STRONG",{});var w8t=s(YTe);USr=r(w8t,"wav2vec2"),w8t.forEach(t),JSr=r(lNe," \u2014 "),OY=n(lNe,"A",{href:!0});var A8t=s(OY);YSr=r(A8t,"FlaxWav2Vec2ForPreTraining"),A8t.forEach(t),KSr=r(lNe," (Wav2Vec2 model)"),lNe.forEach(t),ZSr=i(we),$5=n(we,"LI",{});var iNe=s($5);KTe=n(iNe,"STRONG",{});var y8t=s(KTe);eRr=r(y8t,"xlm-roberta"),y8t.forEach(t),oRr=r(iNe," \u2014 "),VY=n(iNe,"A",{href:!0});var L8t=s(VY);rRr=r(L8t,"FlaxXLMRobertaForMaskedLM"),L8t.forEach(t),tRr=r(iNe," (XLM-RoBERTa model)"),iNe.forEach(t),we.forEach(t),aRr=i(Wl),T(k5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),Zje=i(f),qc=n(f,"H2",{class:!0});var sOe=s(qc);S5=n(sOe,"A",{id:!0,class:!0,href:!0});var x8t=s(S5);ZTe=n(x8t,"SPAN",{});var $8t=s(ZTe);T(X9.$$.fragment,$8t),$8t.forEach(t),x8t.forEach(t),nRr=i(sOe),eMe=n(sOe,"SPAN",{});var k8t=s(eMe);sRr=r(k8t,"FlaxAutoModelForMaskedLM"),k8t.forEach(t),sOe.forEach(t),eDe=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(z9.$$.fragment,Ql),lRr=i(Ql),jc=n(Ql,"P",{});var Jee=s(jc);iRr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XY=n(Jee,"A",{href:!0});var S8t=s(XY);dRr=r(S8t,"from_pretrained()"),S8t.forEach(t),cRr=r(Jee," class method or the "),zY=n(Jee,"A",{href:!0});var R8t=s(zY);fRr=r(R8t,"from_config()"),R8t.forEach(t),mRr=r(Jee,` class
method.`),Jee.forEach(t),gRr=i(Ql),W9=n(Ql,"P",{});var lOe=s(W9);hRr=r(lOe,"This class cannot be instantiated directly using "),oMe=n(lOe,"CODE",{});var P8t=s(oMe);pRr=r(P8t,"__init__()"),P8t.forEach(t),_Rr=r(lOe," (throws an error)."),lOe.forEach(t),uRr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var dy=s(Xt);T(Q9.$$.fragment,dy),bRr=i(dy),rMe=n(dy,"P",{});var B8t=s(rMe);vRr=r(B8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),B8t.forEach(t),FRr=i(dy),Dc=n(dy,"P",{});var Yee=s(Dc);TRr=r(Yee,`Note:
Loading a model from its configuration file does `),tMe=n(Yee,"STRONG",{});var I8t=s(tMe);MRr=r(I8t,"not"),I8t.forEach(t),ERr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=n(Yee,"A",{href:!0});var N8t=s(WY);CRr=r(N8t,"from_pretrained()"),N8t.forEach(t),wRr=r(Yee," to load the model weights."),Yee.forEach(t),ARr=i(dy),T(R5.$$.fragment,dy),dy.forEach(t),yRr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(H9.$$.fragment,Hl),LRr=i(Hl),aMe=n(Hl,"P",{});var q8t=s(aMe);xRr=r(q8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q8t.forEach(t),$Rr=i(Hl),un=n(Hl,"P",{});var cy=s(un);kRr=r(cy,"The model class to instantiate is selected based on the "),nMe=n(cy,"CODE",{});var j8t=s(nMe);SRr=r(j8t,"model_type"),j8t.forEach(t),RRr=r(cy,` property of the config object (either
passed as an argument or loaded from `),sMe=n(cy,"CODE",{});var D8t=s(sMe);PRr=r(D8t,"pretrained_model_name_or_path"),D8t.forEach(t),BRr=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=n(cy,"CODE",{});var G8t=s(lMe);IRr=r(G8t,"pretrained_model_name_or_path"),G8t.forEach(t),NRr=r(cy,":"),cy.forEach(t),qRr=i(Hl),xe=n(Hl,"UL",{});var Ne=s(xe);P5=n(Ne,"LI",{});var dNe=s(P5);iMe=n(dNe,"STRONG",{});var O8t=s(iMe);jRr=r(O8t,"albert"),O8t.forEach(t),DRr=r(dNe," \u2014 "),QY=n(dNe,"A",{href:!0});var V8t=s(QY);GRr=r(V8t,"FlaxAlbertForMaskedLM"),V8t.forEach(t),ORr=r(dNe," (ALBERT model)"),dNe.forEach(t),VRr=i(Ne),B5=n(Ne,"LI",{});var cNe=s(B5);dMe=n(cNe,"STRONG",{});var X8t=s(dMe);XRr=r(X8t,"bart"),X8t.forEach(t),zRr=r(cNe," \u2014 "),HY=n(cNe,"A",{href:!0});var z8t=s(HY);WRr=r(z8t,"FlaxBartForConditionalGeneration"),z8t.forEach(t),QRr=r(cNe," (BART model)"),cNe.forEach(t),HRr=i(Ne),I5=n(Ne,"LI",{});var fNe=s(I5);cMe=n(fNe,"STRONG",{});var W8t=s(cMe);URr=r(W8t,"bert"),W8t.forEach(t),JRr=r(fNe," \u2014 "),UY=n(fNe,"A",{href:!0});var Q8t=s(UY);YRr=r(Q8t,"FlaxBertForMaskedLM"),Q8t.forEach(t),KRr=r(fNe," (BERT model)"),fNe.forEach(t),ZRr=i(Ne),N5=n(Ne,"LI",{});var mNe=s(N5);fMe=n(mNe,"STRONG",{});var H8t=s(fMe);ePr=r(H8t,"big_bird"),H8t.forEach(t),oPr=r(mNe," \u2014 "),JY=n(mNe,"A",{href:!0});var U8t=s(JY);rPr=r(U8t,"FlaxBigBirdForMaskedLM"),U8t.forEach(t),tPr=r(mNe," (BigBird model)"),mNe.forEach(t),aPr=i(Ne),q5=n(Ne,"LI",{});var gNe=s(q5);mMe=n(gNe,"STRONG",{});var J8t=s(mMe);nPr=r(J8t,"distilbert"),J8t.forEach(t),sPr=r(gNe," \u2014 "),YY=n(gNe,"A",{href:!0});var Y8t=s(YY);lPr=r(Y8t,"FlaxDistilBertForMaskedLM"),Y8t.forEach(t),iPr=r(gNe," (DistilBERT model)"),gNe.forEach(t),dPr=i(Ne),j5=n(Ne,"LI",{});var hNe=s(j5);gMe=n(hNe,"STRONG",{});var K8t=s(gMe);cPr=r(K8t,"electra"),K8t.forEach(t),fPr=r(hNe," \u2014 "),KY=n(hNe,"A",{href:!0});var Z8t=s(KY);mPr=r(Z8t,"FlaxElectraForMaskedLM"),Z8t.forEach(t),gPr=r(hNe," (ELECTRA model)"),hNe.forEach(t),hPr=i(Ne),D5=n(Ne,"LI",{});var pNe=s(D5);hMe=n(pNe,"STRONG",{});var e7t=s(hMe);pPr=r(e7t,"mbart"),e7t.forEach(t),_Pr=r(pNe," \u2014 "),ZY=n(pNe,"A",{href:!0});var o7t=s(ZY);uPr=r(o7t,"FlaxMBartForConditionalGeneration"),o7t.forEach(t),bPr=r(pNe," (mBART model)"),pNe.forEach(t),vPr=i(Ne),G5=n(Ne,"LI",{});var _Ne=s(G5);pMe=n(_Ne,"STRONG",{});var r7t=s(pMe);FPr=r(r7t,"roberta"),r7t.forEach(t),TPr=r(_Ne," \u2014 "),eK=n(_Ne,"A",{href:!0});var t7t=s(eK);MPr=r(t7t,"FlaxRobertaForMaskedLM"),t7t.forEach(t),EPr=r(_Ne," (RoBERTa model)"),_Ne.forEach(t),CPr=i(Ne),O5=n(Ne,"LI",{});var uNe=s(O5);_Me=n(uNe,"STRONG",{});var a7t=s(_Me);wPr=r(a7t,"roformer"),a7t.forEach(t),APr=r(uNe," \u2014 "),oK=n(uNe,"A",{href:!0});var n7t=s(oK);yPr=r(n7t,"FlaxRoFormerForMaskedLM"),n7t.forEach(t),LPr=r(uNe," (RoFormer model)"),uNe.forEach(t),xPr=i(Ne),V5=n(Ne,"LI",{});var bNe=s(V5);uMe=n(bNe,"STRONG",{});var s7t=s(uMe);$Pr=r(s7t,"xlm-roberta"),s7t.forEach(t),kPr=r(bNe," \u2014 "),rK=n(bNe,"A",{href:!0});var l7t=s(rK);SPr=r(l7t,"FlaxXLMRobertaForMaskedLM"),l7t.forEach(t),RPr=r(bNe," (XLM-RoBERTa model)"),bNe.forEach(t),Ne.forEach(t),PPr=i(Hl),T(X5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),oDe=i(f),Gc=n(f,"H2",{class:!0});var iOe=s(Gc);z5=n(iOe,"A",{id:!0,class:!0,href:!0});var i7t=s(z5);bMe=n(i7t,"SPAN",{});var d7t=s(bMe);T(U9.$$.fragment,d7t),d7t.forEach(t),i7t.forEach(t),BPr=i(iOe),vMe=n(iOe,"SPAN",{});var c7t=s(vMe);IPr=r(c7t,"FlaxAutoModelForSeq2SeqLM"),c7t.forEach(t),iOe.forEach(t),rDe=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(J9.$$.fragment,Ul),NPr=i(Ul),Oc=n(Ul,"P",{});var Kee=s(Oc);qPr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tK=n(Kee,"A",{href:!0});var f7t=s(tK);jPr=r(f7t,"from_pretrained()"),f7t.forEach(t),DPr=r(Kee," class method or the "),aK=n(Kee,"A",{href:!0});var m7t=s(aK);GPr=r(m7t,"from_config()"),m7t.forEach(t),OPr=r(Kee,` class
method.`),Kee.forEach(t),VPr=i(Ul),Y9=n(Ul,"P",{});var dOe=s(Y9);XPr=r(dOe,"This class cannot be instantiated directly using "),FMe=n(dOe,"CODE",{});var g7t=s(FMe);zPr=r(g7t,"__init__()"),g7t.forEach(t),WPr=r(dOe," (throws an error)."),dOe.forEach(t),QPr=i(Ul),zt=n(Ul,"DIV",{class:!0});var fy=s(zt);T(K9.$$.fragment,fy),HPr=i(fy),TMe=n(fy,"P",{});var h7t=s(TMe);UPr=r(h7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h7t.forEach(t),JPr=i(fy),Vc=n(fy,"P",{});var Zee=s(Vc);YPr=r(Zee,`Note:
Loading a model from its configuration file does `),MMe=n(Zee,"STRONG",{});var p7t=s(MMe);KPr=r(p7t,"not"),p7t.forEach(t),ZPr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=n(Zee,"A",{href:!0});var _7t=s(nK);eBr=r(_7t,"from_pretrained()"),_7t.forEach(t),oBr=r(Zee," to load the model weights."),Zee.forEach(t),rBr=i(fy),T(W5.$$.fragment,fy),fy.forEach(t),tBr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(Z9.$$.fragment,Jl),aBr=i(Jl),EMe=n(Jl,"P",{});var u7t=s(EMe);nBr=r(u7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),u7t.forEach(t),sBr=i(Jl),bn=n(Jl,"P",{});var my=s(bn);lBr=r(my,"The model class to instantiate is selected based on the "),CMe=n(my,"CODE",{});var b7t=s(CMe);iBr=r(b7t,"model_type"),b7t.forEach(t),dBr=r(my,` property of the config object (either
passed as an argument or loaded from `),wMe=n(my,"CODE",{});var v7t=s(wMe);cBr=r(v7t,"pretrained_model_name_or_path"),v7t.forEach(t),fBr=r(my,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=n(my,"CODE",{});var F7t=s(AMe);mBr=r(F7t,"pretrained_model_name_or_path"),F7t.forEach(t),gBr=r(my,":"),my.forEach(t),hBr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);Q5=n(ze,"LI",{});var vNe=s(Q5);yMe=n(vNe,"STRONG",{});var T7t=s(yMe);pBr=r(T7t,"bart"),T7t.forEach(t),_Br=r(vNe," \u2014 "),sK=n(vNe,"A",{href:!0});var M7t=s(sK);uBr=r(M7t,"FlaxBartForConditionalGeneration"),M7t.forEach(t),bBr=r(vNe," (BART model)"),vNe.forEach(t),vBr=i(ze),H5=n(ze,"LI",{});var FNe=s(H5);LMe=n(FNe,"STRONG",{});var E7t=s(LMe);FBr=r(E7t,"blenderbot"),E7t.forEach(t),TBr=r(FNe," \u2014 "),lK=n(FNe,"A",{href:!0});var C7t=s(lK);MBr=r(C7t,"FlaxBlenderbotForConditionalGeneration"),C7t.forEach(t),EBr=r(FNe," (Blenderbot model)"),FNe.forEach(t),CBr=i(ze),U5=n(ze,"LI",{});var TNe=s(U5);xMe=n(TNe,"STRONG",{});var w7t=s(xMe);wBr=r(w7t,"blenderbot-small"),w7t.forEach(t),ABr=r(TNe," \u2014 "),iK=n(TNe,"A",{href:!0});var A7t=s(iK);yBr=r(A7t,"FlaxBlenderbotSmallForConditionalGeneration"),A7t.forEach(t),LBr=r(TNe," (BlenderbotSmall model)"),TNe.forEach(t),xBr=i(ze),J5=n(ze,"LI",{});var MNe=s(J5);$Me=n(MNe,"STRONG",{});var y7t=s($Me);$Br=r(y7t,"encoder-decoder"),y7t.forEach(t),kBr=r(MNe," \u2014 "),dK=n(MNe,"A",{href:!0});var L7t=s(dK);SBr=r(L7t,"FlaxEncoderDecoderModel"),L7t.forEach(t),RBr=r(MNe," (Encoder decoder model)"),MNe.forEach(t),PBr=i(ze),Y5=n(ze,"LI",{});var ENe=s(Y5);kMe=n(ENe,"STRONG",{});var x7t=s(kMe);BBr=r(x7t,"marian"),x7t.forEach(t),IBr=r(ENe," \u2014 "),cK=n(ENe,"A",{href:!0});var $7t=s(cK);NBr=r($7t,"FlaxMarianMTModel"),$7t.forEach(t),qBr=r(ENe," (Marian model)"),ENe.forEach(t),jBr=i(ze),K5=n(ze,"LI",{});var CNe=s(K5);SMe=n(CNe,"STRONG",{});var k7t=s(SMe);DBr=r(k7t,"mbart"),k7t.forEach(t),GBr=r(CNe," \u2014 "),fK=n(CNe,"A",{href:!0});var S7t=s(fK);OBr=r(S7t,"FlaxMBartForConditionalGeneration"),S7t.forEach(t),VBr=r(CNe," (mBART model)"),CNe.forEach(t),XBr=i(ze),Z5=n(ze,"LI",{});var wNe=s(Z5);RMe=n(wNe,"STRONG",{});var R7t=s(RMe);zBr=r(R7t,"mt5"),R7t.forEach(t),WBr=r(wNe," \u2014 "),mK=n(wNe,"A",{href:!0});var P7t=s(mK);QBr=r(P7t,"FlaxMT5ForConditionalGeneration"),P7t.forEach(t),HBr=r(wNe," (mT5 model)"),wNe.forEach(t),UBr=i(ze),e3=n(ze,"LI",{});var ANe=s(e3);PMe=n(ANe,"STRONG",{});var B7t=s(PMe);JBr=r(B7t,"pegasus"),B7t.forEach(t),YBr=r(ANe," \u2014 "),gK=n(ANe,"A",{href:!0});var I7t=s(gK);KBr=r(I7t,"FlaxPegasusForConditionalGeneration"),I7t.forEach(t),ZBr=r(ANe," (Pegasus model)"),ANe.forEach(t),eIr=i(ze),o3=n(ze,"LI",{});var yNe=s(o3);BMe=n(yNe,"STRONG",{});var N7t=s(BMe);oIr=r(N7t,"t5"),N7t.forEach(t),rIr=r(yNe," \u2014 "),hK=n(yNe,"A",{href:!0});var q7t=s(hK);tIr=r(q7t,"FlaxT5ForConditionalGeneration"),q7t.forEach(t),aIr=r(yNe," (T5 model)"),yNe.forEach(t),ze.forEach(t),nIr=i(Jl),T(r3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),tDe=i(f),Xc=n(f,"H2",{class:!0});var cOe=s(Xc);t3=n(cOe,"A",{id:!0,class:!0,href:!0});var j7t=s(t3);IMe=n(j7t,"SPAN",{});var D7t=s(IMe);T(ex.$$.fragment,D7t),D7t.forEach(t),j7t.forEach(t),sIr=i(cOe),NMe=n(cOe,"SPAN",{});var G7t=s(NMe);lIr=r(G7t,"FlaxAutoModelForSequenceClassification"),G7t.forEach(t),cOe.forEach(t),aDe=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(ox.$$.fragment,Yl),iIr=i(Yl),zc=n(Yl,"P",{});var eoe=s(zc);dIr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pK=n(eoe,"A",{href:!0});var O7t=s(pK);cIr=r(O7t,"from_pretrained()"),O7t.forEach(t),fIr=r(eoe," class method or the "),_K=n(eoe,"A",{href:!0});var V7t=s(_K);mIr=r(V7t,"from_config()"),V7t.forEach(t),gIr=r(eoe,` class
method.`),eoe.forEach(t),hIr=i(Yl),rx=n(Yl,"P",{});var fOe=s(rx);pIr=r(fOe,"This class cannot be instantiated directly using "),qMe=n(fOe,"CODE",{});var X7t=s(qMe);_Ir=r(X7t,"__init__()"),X7t.forEach(t),uIr=r(fOe," (throws an error)."),fOe.forEach(t),bIr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var gy=s(Wt);T(tx.$$.fragment,gy),vIr=i(gy),jMe=n(gy,"P",{});var z7t=s(jMe);FIr=r(z7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),z7t.forEach(t),TIr=i(gy),Wc=n(gy,"P",{});var ooe=s(Wc);MIr=r(ooe,`Note:
Loading a model from its configuration file does `),DMe=n(ooe,"STRONG",{});var W7t=s(DMe);EIr=r(W7t,"not"),W7t.forEach(t),CIr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(ooe,"A",{href:!0});var Q7t=s(uK);wIr=r(Q7t,"from_pretrained()"),Q7t.forEach(t),AIr=r(ooe," to load the model weights."),ooe.forEach(t),yIr=i(gy),T(a3.$$.fragment,gy),gy.forEach(t),LIr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(ax.$$.fragment,Kl),xIr=i(Kl),GMe=n(Kl,"P",{});var H7t=s(GMe);$Ir=r(H7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),H7t.forEach(t),kIr=i(Kl),vn=n(Kl,"P",{});var hy=s(vn);SIr=r(hy,"The model class to instantiate is selected based on the "),OMe=n(hy,"CODE",{});var U7t=s(OMe);RIr=r(U7t,"model_type"),U7t.forEach(t),PIr=r(hy,` property of the config object (either
passed as an argument or loaded from `),VMe=n(hy,"CODE",{});var J7t=s(VMe);BIr=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),IIr=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=n(hy,"CODE",{});var Y7t=s(XMe);NIr=r(Y7t,"pretrained_model_name_or_path"),Y7t.forEach(t),qIr=r(hy,":"),hy.forEach(t),jIr=i(Kl),$e=n(Kl,"UL",{});var qe=s($e);n3=n(qe,"LI",{});var LNe=s(n3);zMe=n(LNe,"STRONG",{});var K7t=s(zMe);DIr=r(K7t,"albert"),K7t.forEach(t),GIr=r(LNe," \u2014 "),bK=n(LNe,"A",{href:!0});var Z7t=s(bK);OIr=r(Z7t,"FlaxAlbertForSequenceClassification"),Z7t.forEach(t),VIr=r(LNe," (ALBERT model)"),LNe.forEach(t),XIr=i(qe),s3=n(qe,"LI",{});var xNe=s(s3);WMe=n(xNe,"STRONG",{});var e9t=s(WMe);zIr=r(e9t,"bart"),e9t.forEach(t),WIr=r(xNe," \u2014 "),vK=n(xNe,"A",{href:!0});var o9t=s(vK);QIr=r(o9t,"FlaxBartForSequenceClassification"),o9t.forEach(t),HIr=r(xNe," (BART model)"),xNe.forEach(t),UIr=i(qe),l3=n(qe,"LI",{});var $Ne=s(l3);QMe=n($Ne,"STRONG",{});var r9t=s(QMe);JIr=r(r9t,"bert"),r9t.forEach(t),YIr=r($Ne," \u2014 "),FK=n($Ne,"A",{href:!0});var t9t=s(FK);KIr=r(t9t,"FlaxBertForSequenceClassification"),t9t.forEach(t),ZIr=r($Ne," (BERT model)"),$Ne.forEach(t),eNr=i(qe),i3=n(qe,"LI",{});var kNe=s(i3);HMe=n(kNe,"STRONG",{});var a9t=s(HMe);oNr=r(a9t,"big_bird"),a9t.forEach(t),rNr=r(kNe," \u2014 "),TK=n(kNe,"A",{href:!0});var n9t=s(TK);tNr=r(n9t,"FlaxBigBirdForSequenceClassification"),n9t.forEach(t),aNr=r(kNe," (BigBird model)"),kNe.forEach(t),nNr=i(qe),d3=n(qe,"LI",{});var SNe=s(d3);UMe=n(SNe,"STRONG",{});var s9t=s(UMe);sNr=r(s9t,"distilbert"),s9t.forEach(t),lNr=r(SNe," \u2014 "),MK=n(SNe,"A",{href:!0});var l9t=s(MK);iNr=r(l9t,"FlaxDistilBertForSequenceClassification"),l9t.forEach(t),dNr=r(SNe," (DistilBERT model)"),SNe.forEach(t),cNr=i(qe),c3=n(qe,"LI",{});var RNe=s(c3);JMe=n(RNe,"STRONG",{});var i9t=s(JMe);fNr=r(i9t,"electra"),i9t.forEach(t),mNr=r(RNe," \u2014 "),EK=n(RNe,"A",{href:!0});var d9t=s(EK);gNr=r(d9t,"FlaxElectraForSequenceClassification"),d9t.forEach(t),hNr=r(RNe," (ELECTRA model)"),RNe.forEach(t),pNr=i(qe),f3=n(qe,"LI",{});var PNe=s(f3);YMe=n(PNe,"STRONG",{});var c9t=s(YMe);_Nr=r(c9t,"mbart"),c9t.forEach(t),uNr=r(PNe," \u2014 "),CK=n(PNe,"A",{href:!0});var f9t=s(CK);bNr=r(f9t,"FlaxMBartForSequenceClassification"),f9t.forEach(t),vNr=r(PNe," (mBART model)"),PNe.forEach(t),FNr=i(qe),m3=n(qe,"LI",{});var BNe=s(m3);KMe=n(BNe,"STRONG",{});var m9t=s(KMe);TNr=r(m9t,"roberta"),m9t.forEach(t),MNr=r(BNe," \u2014 "),wK=n(BNe,"A",{href:!0});var g9t=s(wK);ENr=r(g9t,"FlaxRobertaForSequenceClassification"),g9t.forEach(t),CNr=r(BNe," (RoBERTa model)"),BNe.forEach(t),wNr=i(qe),g3=n(qe,"LI",{});var INe=s(g3);ZMe=n(INe,"STRONG",{});var h9t=s(ZMe);ANr=r(h9t,"roformer"),h9t.forEach(t),yNr=r(INe," \u2014 "),AK=n(INe,"A",{href:!0});var p9t=s(AK);LNr=r(p9t,"FlaxRoFormerForSequenceClassification"),p9t.forEach(t),xNr=r(INe," (RoFormer model)"),INe.forEach(t),$Nr=i(qe),h3=n(qe,"LI",{});var NNe=s(h3);eEe=n(NNe,"STRONG",{});var _9t=s(eEe);kNr=r(_9t,"xlm-roberta"),_9t.forEach(t),SNr=r(NNe," \u2014 "),yK=n(NNe,"A",{href:!0});var u9t=s(yK);RNr=r(u9t,"FlaxXLMRobertaForSequenceClassification"),u9t.forEach(t),PNr=r(NNe," (XLM-RoBERTa model)"),NNe.forEach(t),qe.forEach(t),BNr=i(Kl),T(p3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),nDe=i(f),Qc=n(f,"H2",{class:!0});var mOe=s(Qc);_3=n(mOe,"A",{id:!0,class:!0,href:!0});var b9t=s(_3);oEe=n(b9t,"SPAN",{});var v9t=s(oEe);T(nx.$$.fragment,v9t),v9t.forEach(t),b9t.forEach(t),INr=i(mOe),rEe=n(mOe,"SPAN",{});var F9t=s(rEe);NNr=r(F9t,"FlaxAutoModelForQuestionAnswering"),F9t.forEach(t),mOe.forEach(t),sDe=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(sx.$$.fragment,Zl),qNr=i(Zl),Hc=n(Zl,"P",{});var roe=s(Hc);jNr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LK=n(roe,"A",{href:!0});var T9t=s(LK);DNr=r(T9t,"from_pretrained()"),T9t.forEach(t),GNr=r(roe," class method or the "),xK=n(roe,"A",{href:!0});var M9t=s(xK);ONr=r(M9t,"from_config()"),M9t.forEach(t),VNr=r(roe,` class
method.`),roe.forEach(t),XNr=i(Zl),lx=n(Zl,"P",{});var gOe=s(lx);zNr=r(gOe,"This class cannot be instantiated directly using "),tEe=n(gOe,"CODE",{});var E9t=s(tEe);WNr=r(E9t,"__init__()"),E9t.forEach(t),QNr=r(gOe," (throws an error)."),gOe.forEach(t),HNr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var py=s(Qt);T(ix.$$.fragment,py),UNr=i(py),aEe=n(py,"P",{});var C9t=s(aEe);JNr=r(C9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),C9t.forEach(t),YNr=i(py),Uc=n(py,"P",{});var toe=s(Uc);KNr=r(toe,`Note:
Loading a model from its configuration file does `),nEe=n(toe,"STRONG",{});var w9t=s(nEe);ZNr=r(w9t,"not"),w9t.forEach(t),eqr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=n(toe,"A",{href:!0});var A9t=s($K);oqr=r(A9t,"from_pretrained()"),A9t.forEach(t),rqr=r(toe," to load the model weights."),toe.forEach(t),tqr=i(py),T(u3.$$.fragment,py),py.forEach(t),aqr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(dx.$$.fragment,ei),nqr=i(ei),sEe=n(ei,"P",{});var y9t=s(sEe);sqr=r(y9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),y9t.forEach(t),lqr=i(ei),Fn=n(ei,"P",{});var _y=s(Fn);iqr=r(_y,"The model class to instantiate is selected based on the "),lEe=n(_y,"CODE",{});var L9t=s(lEe);dqr=r(L9t,"model_type"),L9t.forEach(t),cqr=r(_y,` property of the config object (either
passed as an argument or loaded from `),iEe=n(_y,"CODE",{});var x9t=s(iEe);fqr=r(x9t,"pretrained_model_name_or_path"),x9t.forEach(t),mqr=r(_y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=n(_y,"CODE",{});var $9t=s(dEe);gqr=r($9t,"pretrained_model_name_or_path"),$9t.forEach(t),hqr=r(_y,":"),_y.forEach(t),pqr=i(ei),ke=n(ei,"UL",{});var je=s(ke);b3=n(je,"LI",{});var qNe=s(b3);cEe=n(qNe,"STRONG",{});var k9t=s(cEe);_qr=r(k9t,"albert"),k9t.forEach(t),uqr=r(qNe," \u2014 "),kK=n(qNe,"A",{href:!0});var S9t=s(kK);bqr=r(S9t,"FlaxAlbertForQuestionAnswering"),S9t.forEach(t),vqr=r(qNe," (ALBERT model)"),qNe.forEach(t),Fqr=i(je),v3=n(je,"LI",{});var jNe=s(v3);fEe=n(jNe,"STRONG",{});var R9t=s(fEe);Tqr=r(R9t,"bart"),R9t.forEach(t),Mqr=r(jNe," \u2014 "),SK=n(jNe,"A",{href:!0});var P9t=s(SK);Eqr=r(P9t,"FlaxBartForQuestionAnswering"),P9t.forEach(t),Cqr=r(jNe," (BART model)"),jNe.forEach(t),wqr=i(je),F3=n(je,"LI",{});var DNe=s(F3);mEe=n(DNe,"STRONG",{});var B9t=s(mEe);Aqr=r(B9t,"bert"),B9t.forEach(t),yqr=r(DNe," \u2014 "),RK=n(DNe,"A",{href:!0});var I9t=s(RK);Lqr=r(I9t,"FlaxBertForQuestionAnswering"),I9t.forEach(t),xqr=r(DNe," (BERT model)"),DNe.forEach(t),$qr=i(je),T3=n(je,"LI",{});var GNe=s(T3);gEe=n(GNe,"STRONG",{});var N9t=s(gEe);kqr=r(N9t,"big_bird"),N9t.forEach(t),Sqr=r(GNe," \u2014 "),PK=n(GNe,"A",{href:!0});var q9t=s(PK);Rqr=r(q9t,"FlaxBigBirdForQuestionAnswering"),q9t.forEach(t),Pqr=r(GNe," (BigBird model)"),GNe.forEach(t),Bqr=i(je),M3=n(je,"LI",{});var ONe=s(M3);hEe=n(ONe,"STRONG",{});var j9t=s(hEe);Iqr=r(j9t,"distilbert"),j9t.forEach(t),Nqr=r(ONe," \u2014 "),BK=n(ONe,"A",{href:!0});var D9t=s(BK);qqr=r(D9t,"FlaxDistilBertForQuestionAnswering"),D9t.forEach(t),jqr=r(ONe," (DistilBERT model)"),ONe.forEach(t),Dqr=i(je),E3=n(je,"LI",{});var VNe=s(E3);pEe=n(VNe,"STRONG",{});var G9t=s(pEe);Gqr=r(G9t,"electra"),G9t.forEach(t),Oqr=r(VNe," \u2014 "),IK=n(VNe,"A",{href:!0});var O9t=s(IK);Vqr=r(O9t,"FlaxElectraForQuestionAnswering"),O9t.forEach(t),Xqr=r(VNe," (ELECTRA model)"),VNe.forEach(t),zqr=i(je),C3=n(je,"LI",{});var XNe=s(C3);_Ee=n(XNe,"STRONG",{});var V9t=s(_Ee);Wqr=r(V9t,"mbart"),V9t.forEach(t),Qqr=r(XNe," \u2014 "),NK=n(XNe,"A",{href:!0});var X9t=s(NK);Hqr=r(X9t,"FlaxMBartForQuestionAnswering"),X9t.forEach(t),Uqr=r(XNe," (mBART model)"),XNe.forEach(t),Jqr=i(je),w3=n(je,"LI",{});var zNe=s(w3);uEe=n(zNe,"STRONG",{});var z9t=s(uEe);Yqr=r(z9t,"roberta"),z9t.forEach(t),Kqr=r(zNe," \u2014 "),qK=n(zNe,"A",{href:!0});var W9t=s(qK);Zqr=r(W9t,"FlaxRobertaForQuestionAnswering"),W9t.forEach(t),ejr=r(zNe," (RoBERTa model)"),zNe.forEach(t),ojr=i(je),A3=n(je,"LI",{});var WNe=s(A3);bEe=n(WNe,"STRONG",{});var Q9t=s(bEe);rjr=r(Q9t,"roformer"),Q9t.forEach(t),tjr=r(WNe," \u2014 "),jK=n(WNe,"A",{href:!0});var H9t=s(jK);ajr=r(H9t,"FlaxRoFormerForQuestionAnswering"),H9t.forEach(t),njr=r(WNe," (RoFormer model)"),WNe.forEach(t),sjr=i(je),y3=n(je,"LI",{});var QNe=s(y3);vEe=n(QNe,"STRONG",{});var U9t=s(vEe);ljr=r(U9t,"xlm-roberta"),U9t.forEach(t),ijr=r(QNe," \u2014 "),DK=n(QNe,"A",{href:!0});var J9t=s(DK);djr=r(J9t,"FlaxXLMRobertaForQuestionAnswering"),J9t.forEach(t),cjr=r(QNe," (XLM-RoBERTa model)"),QNe.forEach(t),je.forEach(t),fjr=i(ei),T(L3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),lDe=i(f),Jc=n(f,"H2",{class:!0});var hOe=s(Jc);x3=n(hOe,"A",{id:!0,class:!0,href:!0});var Y9t=s(x3);FEe=n(Y9t,"SPAN",{});var K9t=s(FEe);T(cx.$$.fragment,K9t),K9t.forEach(t),Y9t.forEach(t),mjr=i(hOe),TEe=n(hOe,"SPAN",{});var Z9t=s(TEe);gjr=r(Z9t,"FlaxAutoModelForTokenClassification"),Z9t.forEach(t),hOe.forEach(t),iDe=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(fx.$$.fragment,oi),hjr=i(oi),Yc=n(oi,"P",{});var aoe=s(Yc);pjr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GK=n(aoe,"A",{href:!0});var ext=s(GK);_jr=r(ext,"from_pretrained()"),ext.forEach(t),ujr=r(aoe," class method or the "),OK=n(aoe,"A",{href:!0});var oxt=s(OK);bjr=r(oxt,"from_config()"),oxt.forEach(t),vjr=r(aoe,` class
method.`),aoe.forEach(t),Fjr=i(oi),mx=n(oi,"P",{});var pOe=s(mx);Tjr=r(pOe,"This class cannot be instantiated directly using "),MEe=n(pOe,"CODE",{});var rxt=s(MEe);Mjr=r(rxt,"__init__()"),rxt.forEach(t),Ejr=r(pOe," (throws an error)."),pOe.forEach(t),Cjr=i(oi),Ht=n(oi,"DIV",{class:!0});var uy=s(Ht);T(gx.$$.fragment,uy),wjr=i(uy),EEe=n(uy,"P",{});var txt=s(EEe);Ajr=r(txt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),txt.forEach(t),yjr=i(uy),Kc=n(uy,"P",{});var noe=s(Kc);Ljr=r(noe,`Note:
Loading a model from its configuration file does `),CEe=n(noe,"STRONG",{});var axt=s(CEe);xjr=r(axt,"not"),axt.forEach(t),$jr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(noe,"A",{href:!0});var nxt=s(VK);kjr=r(nxt,"from_pretrained()"),nxt.forEach(t),Sjr=r(noe," to load the model weights."),noe.forEach(t),Rjr=i(uy),T($3.$$.fragment,uy),uy.forEach(t),Pjr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(hx.$$.fragment,ri),Bjr=i(ri),wEe=n(ri,"P",{});var sxt=s(wEe);Ijr=r(sxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sxt.forEach(t),Njr=i(ri),Tn=n(ri,"P",{});var by=s(Tn);qjr=r(by,"The model class to instantiate is selected based on the "),AEe=n(by,"CODE",{});var lxt=s(AEe);jjr=r(lxt,"model_type"),lxt.forEach(t),Djr=r(by,` property of the config object (either
passed as an argument or loaded from `),yEe=n(by,"CODE",{});var ixt=s(yEe);Gjr=r(ixt,"pretrained_model_name_or_path"),ixt.forEach(t),Ojr=r(by,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=n(by,"CODE",{});var dxt=s(LEe);Vjr=r(dxt,"pretrained_model_name_or_path"),dxt.forEach(t),Xjr=r(by,":"),by.forEach(t),zjr=i(ri),Ge=n(ri,"UL",{});var Fo=s(Ge);k3=n(Fo,"LI",{});var HNe=s(k3);xEe=n(HNe,"STRONG",{});var cxt=s(xEe);Wjr=r(cxt,"albert"),cxt.forEach(t),Qjr=r(HNe," \u2014 "),XK=n(HNe,"A",{href:!0});var fxt=s(XK);Hjr=r(fxt,"FlaxAlbertForTokenClassification"),fxt.forEach(t),Ujr=r(HNe," (ALBERT model)"),HNe.forEach(t),Jjr=i(Fo),S3=n(Fo,"LI",{});var UNe=s(S3);$Ee=n(UNe,"STRONG",{});var mxt=s($Ee);Yjr=r(mxt,"bert"),mxt.forEach(t),Kjr=r(UNe," \u2014 "),zK=n(UNe,"A",{href:!0});var gxt=s(zK);Zjr=r(gxt,"FlaxBertForTokenClassification"),gxt.forEach(t),eDr=r(UNe," (BERT model)"),UNe.forEach(t),oDr=i(Fo),R3=n(Fo,"LI",{});var JNe=s(R3);kEe=n(JNe,"STRONG",{});var hxt=s(kEe);rDr=r(hxt,"big_bird"),hxt.forEach(t),tDr=r(JNe," \u2014 "),WK=n(JNe,"A",{href:!0});var pxt=s(WK);aDr=r(pxt,"FlaxBigBirdForTokenClassification"),pxt.forEach(t),nDr=r(JNe," (BigBird model)"),JNe.forEach(t),sDr=i(Fo),P3=n(Fo,"LI",{});var YNe=s(P3);SEe=n(YNe,"STRONG",{});var _xt=s(SEe);lDr=r(_xt,"distilbert"),_xt.forEach(t),iDr=r(YNe," \u2014 "),QK=n(YNe,"A",{href:!0});var uxt=s(QK);dDr=r(uxt,"FlaxDistilBertForTokenClassification"),uxt.forEach(t),cDr=r(YNe," (DistilBERT model)"),YNe.forEach(t),fDr=i(Fo),B3=n(Fo,"LI",{});var KNe=s(B3);REe=n(KNe,"STRONG",{});var bxt=s(REe);mDr=r(bxt,"electra"),bxt.forEach(t),gDr=r(KNe," \u2014 "),HK=n(KNe,"A",{href:!0});var vxt=s(HK);hDr=r(vxt,"FlaxElectraForTokenClassification"),vxt.forEach(t),pDr=r(KNe," (ELECTRA model)"),KNe.forEach(t),_Dr=i(Fo),I3=n(Fo,"LI",{});var ZNe=s(I3);PEe=n(ZNe,"STRONG",{});var Fxt=s(PEe);uDr=r(Fxt,"roberta"),Fxt.forEach(t),bDr=r(ZNe," \u2014 "),UK=n(ZNe,"A",{href:!0});var Txt=s(UK);vDr=r(Txt,"FlaxRobertaForTokenClassification"),Txt.forEach(t),FDr=r(ZNe," (RoBERTa model)"),ZNe.forEach(t),TDr=i(Fo),N3=n(Fo,"LI",{});var eqe=s(N3);BEe=n(eqe,"STRONG",{});var Mxt=s(BEe);MDr=r(Mxt,"roformer"),Mxt.forEach(t),EDr=r(eqe," \u2014 "),JK=n(eqe,"A",{href:!0});var Ext=s(JK);CDr=r(Ext,"FlaxRoFormerForTokenClassification"),Ext.forEach(t),wDr=r(eqe," (RoFormer model)"),eqe.forEach(t),ADr=i(Fo),q3=n(Fo,"LI",{});var oqe=s(q3);IEe=n(oqe,"STRONG",{});var Cxt=s(IEe);yDr=r(Cxt,"xlm-roberta"),Cxt.forEach(t),LDr=r(oqe," \u2014 "),YK=n(oqe,"A",{href:!0});var wxt=s(YK);xDr=r(wxt,"FlaxXLMRobertaForTokenClassification"),wxt.forEach(t),$Dr=r(oqe," (XLM-RoBERTa model)"),oqe.forEach(t),Fo.forEach(t),kDr=i(ri),T(j3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),dDe=i(f),Zc=n(f,"H2",{class:!0});var _Oe=s(Zc);D3=n(_Oe,"A",{id:!0,class:!0,href:!0});var Axt=s(D3);NEe=n(Axt,"SPAN",{});var yxt=s(NEe);T(px.$$.fragment,yxt),yxt.forEach(t),Axt.forEach(t),SDr=i(_Oe),qEe=n(_Oe,"SPAN",{});var Lxt=s(qEe);RDr=r(Lxt,"FlaxAutoModelForMultipleChoice"),Lxt.forEach(t),_Oe.forEach(t),cDe=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(_x.$$.fragment,ti),PDr=i(ti),ef=n(ti,"P",{});var soe=s(ef);BDr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KK=n(soe,"A",{href:!0});var xxt=s(KK);IDr=r(xxt,"from_pretrained()"),xxt.forEach(t),NDr=r(soe," class method or the "),ZK=n(soe,"A",{href:!0});var $xt=s(ZK);qDr=r($xt,"from_config()"),$xt.forEach(t),jDr=r(soe,` class
method.`),soe.forEach(t),DDr=i(ti),ux=n(ti,"P",{});var uOe=s(ux);GDr=r(uOe,"This class cannot be instantiated directly using "),jEe=n(uOe,"CODE",{});var kxt=s(jEe);ODr=r(kxt,"__init__()"),kxt.forEach(t),VDr=r(uOe," (throws an error)."),uOe.forEach(t),XDr=i(ti),Ut=n(ti,"DIV",{class:!0});var vy=s(Ut);T(bx.$$.fragment,vy),zDr=i(vy),DEe=n(vy,"P",{});var Sxt=s(DEe);WDr=r(Sxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Sxt.forEach(t),QDr=i(vy),of=n(vy,"P",{});var loe=s(of);HDr=r(loe,`Note:
Loading a model from its configuration file does `),GEe=n(loe,"STRONG",{});var Rxt=s(GEe);UDr=r(Rxt,"not"),Rxt.forEach(t),JDr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(loe,"A",{href:!0});var Pxt=s(eZ);YDr=r(Pxt,"from_pretrained()"),Pxt.forEach(t),KDr=r(loe," to load the model weights."),loe.forEach(t),ZDr=i(vy),T(G3.$$.fragment,vy),vy.forEach(t),eGr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(vx.$$.fragment,ai),oGr=i(ai),OEe=n(ai,"P",{});var Bxt=s(OEe);rGr=r(Bxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Bxt.forEach(t),tGr=i(ai),Mn=n(ai,"P",{});var Fy=s(Mn);aGr=r(Fy,"The model class to instantiate is selected based on the "),VEe=n(Fy,"CODE",{});var Ixt=s(VEe);nGr=r(Ixt,"model_type"),Ixt.forEach(t),sGr=r(Fy,` property of the config object (either
passed as an argument or loaded from `),XEe=n(Fy,"CODE",{});var Nxt=s(XEe);lGr=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),iGr=r(Fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zEe=n(Fy,"CODE",{});var qxt=s(zEe);dGr=r(qxt,"pretrained_model_name_or_path"),qxt.forEach(t),cGr=r(Fy,":"),Fy.forEach(t),fGr=i(ai),Oe=n(ai,"UL",{});var To=s(Oe);O3=n(To,"LI",{});var rqe=s(O3);WEe=n(rqe,"STRONG",{});var jxt=s(WEe);mGr=r(jxt,"albert"),jxt.forEach(t),gGr=r(rqe," \u2014 "),oZ=n(rqe,"A",{href:!0});var Dxt=s(oZ);hGr=r(Dxt,"FlaxAlbertForMultipleChoice"),Dxt.forEach(t),pGr=r(rqe," (ALBERT model)"),rqe.forEach(t),_Gr=i(To),V3=n(To,"LI",{});var tqe=s(V3);QEe=n(tqe,"STRONG",{});var Gxt=s(QEe);uGr=r(Gxt,"bert"),Gxt.forEach(t),bGr=r(tqe," \u2014 "),rZ=n(tqe,"A",{href:!0});var Oxt=s(rZ);vGr=r(Oxt,"FlaxBertForMultipleChoice"),Oxt.forEach(t),FGr=r(tqe," (BERT model)"),tqe.forEach(t),TGr=i(To),X3=n(To,"LI",{});var aqe=s(X3);HEe=n(aqe,"STRONG",{});var Vxt=s(HEe);MGr=r(Vxt,"big_bird"),Vxt.forEach(t),EGr=r(aqe," \u2014 "),tZ=n(aqe,"A",{href:!0});var Xxt=s(tZ);CGr=r(Xxt,"FlaxBigBirdForMultipleChoice"),Xxt.forEach(t),wGr=r(aqe," (BigBird model)"),aqe.forEach(t),AGr=i(To),z3=n(To,"LI",{});var nqe=s(z3);UEe=n(nqe,"STRONG",{});var zxt=s(UEe);yGr=r(zxt,"distilbert"),zxt.forEach(t),LGr=r(nqe," \u2014 "),aZ=n(nqe,"A",{href:!0});var Wxt=s(aZ);xGr=r(Wxt,"FlaxDistilBertForMultipleChoice"),Wxt.forEach(t),$Gr=r(nqe," (DistilBERT model)"),nqe.forEach(t),kGr=i(To),W3=n(To,"LI",{});var sqe=s(W3);JEe=n(sqe,"STRONG",{});var Qxt=s(JEe);SGr=r(Qxt,"electra"),Qxt.forEach(t),RGr=r(sqe," \u2014 "),nZ=n(sqe,"A",{href:!0});var Hxt=s(nZ);PGr=r(Hxt,"FlaxElectraForMultipleChoice"),Hxt.forEach(t),BGr=r(sqe," (ELECTRA model)"),sqe.forEach(t),IGr=i(To),Q3=n(To,"LI",{});var lqe=s(Q3);YEe=n(lqe,"STRONG",{});var Uxt=s(YEe);NGr=r(Uxt,"roberta"),Uxt.forEach(t),qGr=r(lqe," \u2014 "),sZ=n(lqe,"A",{href:!0});var Jxt=s(sZ);jGr=r(Jxt,"FlaxRobertaForMultipleChoice"),Jxt.forEach(t),DGr=r(lqe," (RoBERTa model)"),lqe.forEach(t),GGr=i(To),H3=n(To,"LI",{});var iqe=s(H3);KEe=n(iqe,"STRONG",{});var Yxt=s(KEe);OGr=r(Yxt,"roformer"),Yxt.forEach(t),VGr=r(iqe," \u2014 "),lZ=n(iqe,"A",{href:!0});var Kxt=s(lZ);XGr=r(Kxt,"FlaxRoFormerForMultipleChoice"),Kxt.forEach(t),zGr=r(iqe," (RoFormer model)"),iqe.forEach(t),WGr=i(To),U3=n(To,"LI",{});var dqe=s(U3);ZEe=n(dqe,"STRONG",{});var Zxt=s(ZEe);QGr=r(Zxt,"xlm-roberta"),Zxt.forEach(t),HGr=r(dqe," \u2014 "),iZ=n(dqe,"A",{href:!0});var e$t=s(iZ);UGr=r(e$t,"FlaxXLMRobertaForMultipleChoice"),e$t.forEach(t),JGr=r(dqe," (XLM-RoBERTa model)"),dqe.forEach(t),To.forEach(t),YGr=i(ai),T(J3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),fDe=i(f),rf=n(f,"H2",{class:!0});var bOe=s(rf);Y3=n(bOe,"A",{id:!0,class:!0,href:!0});var o$t=s(Y3);eCe=n(o$t,"SPAN",{});var r$t=s(eCe);T(Fx.$$.fragment,r$t),r$t.forEach(t),o$t.forEach(t),KGr=i(bOe),oCe=n(bOe,"SPAN",{});var t$t=s(oCe);ZGr=r(t$t,"FlaxAutoModelForNextSentencePrediction"),t$t.forEach(t),bOe.forEach(t),mDe=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(Tx.$$.fragment,ni),eOr=i(ni),tf=n(ni,"P",{});var ioe=s(tf);oOr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dZ=n(ioe,"A",{href:!0});var a$t=s(dZ);rOr=r(a$t,"from_pretrained()"),a$t.forEach(t),tOr=r(ioe," class method or the "),cZ=n(ioe,"A",{href:!0});var n$t=s(cZ);aOr=r(n$t,"from_config()"),n$t.forEach(t),nOr=r(ioe,` class
method.`),ioe.forEach(t),sOr=i(ni),Mx=n(ni,"P",{});var vOe=s(Mx);lOr=r(vOe,"This class cannot be instantiated directly using "),rCe=n(vOe,"CODE",{});var s$t=s(rCe);iOr=r(s$t,"__init__()"),s$t.forEach(t),dOr=r(vOe," (throws an error)."),vOe.forEach(t),cOr=i(ni),Jt=n(ni,"DIV",{class:!0});var Ty=s(Jt);T(Ex.$$.fragment,Ty),fOr=i(Ty),tCe=n(Ty,"P",{});var l$t=s(tCe);mOr=r(l$t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),l$t.forEach(t),gOr=i(Ty),af=n(Ty,"P",{});var doe=s(af);hOr=r(doe,`Note:
Loading a model from its configuration file does `),aCe=n(doe,"STRONG",{});var i$t=s(aCe);pOr=r(i$t,"not"),i$t.forEach(t),_Or=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(doe,"A",{href:!0});var d$t=s(fZ);uOr=r(d$t,"from_pretrained()"),d$t.forEach(t),bOr=r(doe," to load the model weights."),doe.forEach(t),vOr=i(Ty),T(K3.$$.fragment,Ty),Ty.forEach(t),FOr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(Cx.$$.fragment,si),TOr=i(si),nCe=n(si,"P",{});var c$t=s(nCe);MOr=r(c$t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),c$t.forEach(t),EOr=i(si),En=n(si,"P",{});var My=s(En);COr=r(My,"The model class to instantiate is selected based on the "),sCe=n(My,"CODE",{});var f$t=s(sCe);wOr=r(f$t,"model_type"),f$t.forEach(t),AOr=r(My,` property of the config object (either
passed as an argument or loaded from `),lCe=n(My,"CODE",{});var m$t=s(lCe);yOr=r(m$t,"pretrained_model_name_or_path"),m$t.forEach(t),LOr=r(My,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iCe=n(My,"CODE",{});var g$t=s(iCe);xOr=r(g$t,"pretrained_model_name_or_path"),g$t.forEach(t),$Or=r(My,":"),My.forEach(t),kOr=i(si),dCe=n(si,"UL",{});var h$t=s(dCe);Z3=n(h$t,"LI",{});var cqe=s(Z3);cCe=n(cqe,"STRONG",{});var p$t=s(cCe);SOr=r(p$t,"bert"),p$t.forEach(t),ROr=r(cqe," \u2014 "),mZ=n(cqe,"A",{href:!0});var _$t=s(mZ);POr=r(_$t,"FlaxBertForNextSentencePrediction"),_$t.forEach(t),BOr=r(cqe," (BERT model)"),cqe.forEach(t),h$t.forEach(t),IOr=i(si),T(ew.$$.fragment,si),si.forEach(t),ni.forEach(t),gDe=i(f),nf=n(f,"H2",{class:!0});var FOe=s(nf);ow=n(FOe,"A",{id:!0,class:!0,href:!0});var u$t=s(ow);fCe=n(u$t,"SPAN",{});var b$t=s(fCe);T(wx.$$.fragment,b$t),b$t.forEach(t),u$t.forEach(t),NOr=i(FOe),mCe=n(FOe,"SPAN",{});var v$t=s(mCe);qOr=r(v$t,"FlaxAutoModelForImageClassification"),v$t.forEach(t),FOe.forEach(t),hDe=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(Ax.$$.fragment,li),jOr=i(li),sf=n(li,"P",{});var coe=s(sf);DOr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gZ=n(coe,"A",{href:!0});var F$t=s(gZ);GOr=r(F$t,"from_pretrained()"),F$t.forEach(t),OOr=r(coe," class method or the "),hZ=n(coe,"A",{href:!0});var T$t=s(hZ);VOr=r(T$t,"from_config()"),T$t.forEach(t),XOr=r(coe,` class
method.`),coe.forEach(t),zOr=i(li),yx=n(li,"P",{});var TOe=s(yx);WOr=r(TOe,"This class cannot be instantiated directly using "),gCe=n(TOe,"CODE",{});var M$t=s(gCe);QOr=r(M$t,"__init__()"),M$t.forEach(t),HOr=r(TOe," (throws an error)."),TOe.forEach(t),UOr=i(li),Yt=n(li,"DIV",{class:!0});var Ey=s(Yt);T(Lx.$$.fragment,Ey),JOr=i(Ey),hCe=n(Ey,"P",{});var E$t=s(hCe);YOr=r(E$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),E$t.forEach(t),KOr=i(Ey),lf=n(Ey,"P",{});var foe=s(lf);ZOr=r(foe,`Note:
Loading a model from its configuration file does `),pCe=n(foe,"STRONG",{});var C$t=s(pCe);eVr=r(C$t,"not"),C$t.forEach(t),oVr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=n(foe,"A",{href:!0});var w$t=s(pZ);rVr=r(w$t,"from_pretrained()"),w$t.forEach(t),tVr=r(foe," to load the model weights."),foe.forEach(t),aVr=i(Ey),T(rw.$$.fragment,Ey),Ey.forEach(t),nVr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(xx.$$.fragment,ii),sVr=i(ii),_Ce=n(ii,"P",{});var A$t=s(_Ce);lVr=r(A$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),A$t.forEach(t),iVr=i(ii),Cn=n(ii,"P",{});var Cy=s(Cn);dVr=r(Cy,"The model class to instantiate is selected based on the "),uCe=n(Cy,"CODE",{});var y$t=s(uCe);cVr=r(y$t,"model_type"),y$t.forEach(t),fVr=r(Cy,` property of the config object (either
passed as an argument or loaded from `),bCe=n(Cy,"CODE",{});var L$t=s(bCe);mVr=r(L$t,"pretrained_model_name_or_path"),L$t.forEach(t),gVr=r(Cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vCe=n(Cy,"CODE",{});var x$t=s(vCe);hVr=r(x$t,"pretrained_model_name_or_path"),x$t.forEach(t),pVr=r(Cy,":"),Cy.forEach(t),_Vr=i(ii),$x=n(ii,"UL",{});var MOe=s($x);tw=n(MOe,"LI",{});var fqe=s(tw);FCe=n(fqe,"STRONG",{});var $$t=s(FCe);uVr=r($$t,"beit"),$$t.forEach(t),bVr=r(fqe," \u2014 "),_Z=n(fqe,"A",{href:!0});var k$t=s(_Z);vVr=r(k$t,"FlaxBeitForImageClassification"),k$t.forEach(t),FVr=r(fqe," (BEiT model)"),fqe.forEach(t),TVr=i(MOe),aw=n(MOe,"LI",{});var mqe=s(aw);TCe=n(mqe,"STRONG",{});var S$t=s(TCe);MVr=r(S$t,"vit"),S$t.forEach(t),EVr=r(mqe," \u2014 "),uZ=n(mqe,"A",{href:!0});var R$t=s(uZ);CVr=r(R$t,"FlaxViTForImageClassification"),R$t.forEach(t),wVr=r(mqe," (ViT model)"),mqe.forEach(t),MOe.forEach(t),AVr=i(ii),T(nw.$$.fragment,ii),ii.forEach(t),li.forEach(t),pDe=i(f),df=n(f,"H2",{class:!0});var EOe=s(df);sw=n(EOe,"A",{id:!0,class:!0,href:!0});var P$t=s(sw);MCe=n(P$t,"SPAN",{});var B$t=s(MCe);T(kx.$$.fragment,B$t),B$t.forEach(t),P$t.forEach(t),yVr=i(EOe),ECe=n(EOe,"SPAN",{});var I$t=s(ECe);LVr=r(I$t,"FlaxAutoModelForVision2Seq"),I$t.forEach(t),EOe.forEach(t),_De=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Sx.$$.fragment,di),xVr=i(di),cf=n(di,"P",{});var moe=s(cf);$Vr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bZ=n(moe,"A",{href:!0});var N$t=s(bZ);kVr=r(N$t,"from_pretrained()"),N$t.forEach(t),SVr=r(moe," class method or the "),vZ=n(moe,"A",{href:!0});var q$t=s(vZ);RVr=r(q$t,"from_config()"),q$t.forEach(t),PVr=r(moe,` class
method.`),moe.forEach(t),BVr=i(di),Rx=n(di,"P",{});var COe=s(Rx);IVr=r(COe,"This class cannot be instantiated directly using "),CCe=n(COe,"CODE",{});var j$t=s(CCe);NVr=r(j$t,"__init__()"),j$t.forEach(t),qVr=r(COe," (throws an error)."),COe.forEach(t),jVr=i(di),Kt=n(di,"DIV",{class:!0});var wy=s(Kt);T(Px.$$.fragment,wy),DVr=i(wy),wCe=n(wy,"P",{});var D$t=s(wCe);GVr=r(D$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),D$t.forEach(t),OVr=i(wy),ff=n(wy,"P",{});var goe=s(ff);VVr=r(goe,`Note:
Loading a model from its configuration file does `),ACe=n(goe,"STRONG",{});var G$t=s(ACe);XVr=r(G$t,"not"),G$t.forEach(t),zVr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FZ=n(goe,"A",{href:!0});var O$t=s(FZ);WVr=r(O$t,"from_pretrained()"),O$t.forEach(t),QVr=r(goe," to load the model weights."),goe.forEach(t),HVr=i(wy),T(lw.$$.fragment,wy),wy.forEach(t),UVr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Bx.$$.fragment,ci),JVr=i(ci),yCe=n(ci,"P",{});var V$t=s(yCe);YVr=r(V$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),V$t.forEach(t),KVr=i(ci),wn=n(ci,"P",{});var Ay=s(wn);ZVr=r(Ay,"The model class to instantiate is selected based on the "),LCe=n(Ay,"CODE",{});var X$t=s(LCe);eXr=r(X$t,"model_type"),X$t.forEach(t),oXr=r(Ay,` property of the config object (either
passed as an argument or loaded from `),xCe=n(Ay,"CODE",{});var z$t=s(xCe);rXr=r(z$t,"pretrained_model_name_or_path"),z$t.forEach(t),tXr=r(Ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ce=n(Ay,"CODE",{});var W$t=s($Ce);aXr=r(W$t,"pretrained_model_name_or_path"),W$t.forEach(t),nXr=r(Ay,":"),Ay.forEach(t),sXr=i(ci),kCe=n(ci,"UL",{});var Q$t=s(kCe);iw=n(Q$t,"LI",{});var gqe=s(iw);SCe=n(gqe,"STRONG",{});var H$t=s(SCe);lXr=r(H$t,"vision-encoder-decoder"),H$t.forEach(t),iXr=r(gqe," \u2014 "),TZ=n(gqe,"A",{href:!0});var U$t=s(TZ);dXr=r(U$t,"FlaxVisionEncoderDecoderModel"),U$t.forEach(t),cXr=r(gqe," (Vision Encoder decoder model)"),gqe.forEach(t),Q$t.forEach(t),fXr=i(ci),T(dw.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ZSt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(ok,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(rk,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig"),c(tk,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig"),c(ak,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig"),c(nk,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig"),c(sk,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(lk,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ik,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(dk,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ck,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(fk,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig"),c(mk,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig"),c(gk,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig"),c(hk,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig"),c(pk,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig"),c(_k,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig"),c(uk,"href","/docs/transformers/pr_16402/en/model_doc/cvt#transformers.CvtConfig"),c(bk,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(vk,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Fk,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Tk,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig"),c(Mk,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Ek,"href","/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Ck,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig"),c(wk,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig"),c(Ak,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig"),c(yk,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRConfig"),c(Lk,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTConfig"),c(xk,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig"),c($k,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(kk,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Sk,"href","/docs/transformers/pr_16402/en/model_doc/flava#transformers.FlavaConfig"),c(Rk,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig"),c(Pk,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig"),c(Bk,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig"),c(Ik,"href","/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNConfig"),c(Nk,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config"),c(qk,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(jk,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Dk,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig"),c(Gk,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig"),c(Ok,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig"),c(Vk,"href","/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Xk,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(zk,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Wk,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Qk,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig"),c(Hk,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig"),c(Uk,"href","/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeConfig"),c(Jk,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig"),c(Yk,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Config"),c(Kk,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig"),c(Zk,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(eS,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig"),c(oS,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTConfig"),c(rS,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(tS,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(aS,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig"),c(nS,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config"),c(sS,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(lS,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(iS,"href","/docs/transformers/pr_16402/en/model_doc/opt#transformers.OPTConfig"),c(dS,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig"),c(cS,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig"),c(fS,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig"),c(mS,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(gS,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(hS,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(pS,"href","/docs/transformers/pr_16402/en/model_doc/rag#transformers.RagConfig"),c(_S,"href","/docs/transformers/pr_16402/en/model_doc/realm#transformers.RealmConfig"),c(uS,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig"),c(bS,"href","/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetConfig"),c(vS,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig"),c(FS,"href","/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetConfig"),c(TS,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertConfig"),c(MS,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig"),c(ES,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig"),c(CS,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig"),c(wS,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig"),c(AS,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig"),c(yS,"href","/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(LS,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(xS,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c($S,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterConfig"),c(kS,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(SS,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig"),c(RS,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config"),c(PS,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig"),c(BS,"href","/docs/transformers/pr_16402/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(IS,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(NS,"href","/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRConfig"),c(qS,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(jS,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(DS,"href","/docs/transformers/pr_16402/en/model_doc/van#transformers.VanConfig"),c(GS,"href","/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltConfig"),c(OS,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(VS,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(XS,"href","/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(zS,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig"),c(WS,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(QS,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(HS,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(US,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig"),c(JS,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig"),c(YS,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig"),c(KS,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(ZS,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(eR,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(oR,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig"),c(rR,"href","/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosConfig"),c(tR,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"id","transformers.AutoTokenizer"),c(Ag,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ag,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(aR,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(nR,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizer"),c(sR,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lR,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartTokenizer"),c(iR,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartTokenizerFast"),c(dR,"href","/docs/transformers/pr_16402/en/model_doc/barthez#transformers.BarthezTokenizer"),c(cR,"href","/docs/transformers/pr_16402/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(fR,"href","/docs/transformers/pr_16402/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(mR,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(gR,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(hR,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(pR,"href","/docs/transformers/pr_16402/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(_R,"href","/docs/transformers/pr_16402/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(uR,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(bR,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(vR,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(FR,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(TR,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(MR,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(ER,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(CR,"href","/docs/transformers/pr_16402/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(wR,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertTokenizer"),c(AR,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(yR,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineTokenizer"),c(LR,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPTokenizer"),c(xR,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPTokenizerFast"),c($R,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(kR,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(SR,"href","/docs/transformers/pr_16402/en/model_doc/cpm#transformers.CpmTokenizer"),c(RR,"href","/docs/transformers/pr_16402/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(PR,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(BR,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IR,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NR,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaTokenizer"),c(qR,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(jR,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(DR,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(GR,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(OR,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(VR,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(XR,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(zR,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraTokenizer"),c(WR,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(QR,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(HR,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetTokenizer"),c(UR,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(JR,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(YR,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelTokenizer"),c(KR,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(ZR,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eP,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oP,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rP,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tP,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(aP,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nP,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sP,"href","/docs/transformers/pr_16402/en/model_doc/herbert#transformers.HerbertTokenizer"),c(lP,"href","/docs/transformers/pr_16402/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(iP,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dP,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cP,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fP,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(mP,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(gP,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(hP,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(pP,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(_P,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(uP,"href","/docs/transformers/pr_16402/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(bP,"href","/docs/transformers/pr_16402/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(vP,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDTokenizer"),c(FP,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDTokenizerFast"),c(TP,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerTokenizer"),c(MP,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(EP,"href","/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeTokenizer"),c(CP,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(wP,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(AP,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(yP,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianTokenizer"),c(LP,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartTokenizer"),c(xP,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartTokenizerFast"),c($P,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(kP,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(SP,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(RP,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(PP,"href","/docs/transformers/pr_16402/en/model_doc/mluke#transformers.MLukeTokenizer"),c(BP,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(IP,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(NP,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(qP,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(jP,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Tokenizer"),c(DP,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5TokenizerFast"),c(GP,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizer"),c(OP,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(VP,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(XP,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(zP,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(WP,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(QP,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(HP,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(UP,"href","/docs/transformers/pr_16402/en/model_doc/phobert#transformers.PhobertTokenizer"),c(JP,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartTokenizer"),c(YP,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(KP,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(ZP,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(eB,"href","/docs/transformers/pr_16402/en/model_doc/rag#transformers.RagTokenizer"),c(oB,"href","/docs/transformers/pr_16402/en/model_doc/realm#transformers.RealmTokenizer"),c(rB,"href","/docs/transformers/pr_16402/en/model_doc/realm#transformers.RealmTokenizerFast"),c(tB,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerTokenizer"),c(aB,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(nB,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertTokenizer"),c(sB,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(lB,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(iB,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(dB,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cB,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fB,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(mB,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(gB,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(hB,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(pB,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterTokenizer"),c(_B,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(uB,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(bB,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(vB,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Tokenizer"),c(FB,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5TokenizerFast"),c(TB,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasTokenizer"),c(MB,"href","/docs/transformers/pr_16402/en/model_doc/tapex#transformers.TapexTokenizer"),c(EB,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(CB,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(wB,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(AB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(yB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(LB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(xB,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMTokenizer"),c($B,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(kB,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMTokenizer"),c(SB,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(RB,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(PB,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(BB,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IB,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NB,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(qB,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(jB,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizer"),c(DB,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"id","transformers.AutoFeatureExtractor"),c(lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(GB,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(OB,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(VB,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(XB,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zB,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QB,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(HB,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(UB,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(JB,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(YB,"href","/docs/transformers/pr_16402/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(KB,"href","/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eI,"href","/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(oI,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(rI,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(tI,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(aI,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(nI,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(sI,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(lI,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iI,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dI,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(cI,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(fI,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(mI,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gI,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hI,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(pI,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(_I,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uI,"href","/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"id","transformers.AutoProcessor"),c(Gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(bI,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(vI,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPProcessor"),c(FI,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(TI,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(MI,"href","/docs/transformers/pr_16402/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(EI,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CI,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wI,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(AI,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(yI,"href","/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRProcessor"),c(LI,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xI,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltProcessor"),c(kI,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(SI,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RI,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PI,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"id","transformers.AutoModel"),c(ip,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ip,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(BI,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(II,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NI,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qI,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertModel"),c(jI,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartModel"),c(DI,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitModel"),c(GI,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertModel"),c(OI,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(VI,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdModel"),c(XI,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(zI,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(WI,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(QI,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertModel"),c(HI,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineModel"),c(UI,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPModel"),c(JI,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertModel"),c(YI,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextModel"),c(KI,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLModel"),c(ZI,"href","/docs/transformers/pr_16402/en/model_doc/cvt#transformers.CvtModel"),c(eN,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(oN,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(rN,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(tN,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaModel"),c(aN,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(nN,"href","/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(sN,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTModel"),c(lN,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrModel"),c(iN,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertModel"),c(dN,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(cN,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTModel"),c(fN,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraModel"),c(mN,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertModel"),c(gN,"href","/docs/transformers/pr_16402/en/model_doc/flava#transformers.FlavaModel"),c(hN,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetModel"),c(pN,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTModel"),c(_N,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelModel"),c(uN,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelBaseModel"),c(bN,"href","/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNModel"),c(vN,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Model"),c(FN,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(TN,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(MN,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJModel"),c(EN,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertModel"),c(CN,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertModel"),c(wN,"href","/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(AN,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(yN,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(LN,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(xN,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDModel"),c($N,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerModel"),c(kN,"href","/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeModel"),c(SN,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertModel"),c(RN,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Model"),c(PN,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianModel"),c(BN,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerModel"),c(IN,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartModel"),c(NN,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTModel"),c(qN,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(jN,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertModel"),c(DN,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetModel"),c(GN,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Model"),c(ON,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerModel"),c(VN,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(XN,"href","/docs/transformers/pr_16402/en/model_doc/opt#transformers.OPTModel"),c(zN,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusModel"),c(WN,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverModel"),c(QN,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartModel"),c(HN,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerModel"),c(UN,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(JN,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertModel"),c(YN,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModel"),c(KN,"href","/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetModel"),c(ZN,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertModel"),c(eq,"href","/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetModel"),c(oq,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel"),c(rq,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaModel"),c(tq,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerModel"),c(aq,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerModel"),c(nq,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWModel"),c(sq,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDModel"),c(lq,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(iq,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterModel"),c(dq,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(cq,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinModel"),c(fq,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Model"),c(mq,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasModel"),c(gq,"href","/docs/transformers/pr_16402/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(hq,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(pq,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechModel"),c(_q,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(uq,"href","/docs/transformers/pr_16402/en/model_doc/van#transformers.VanModel"),c(bq,"href","/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltModel"),c(vq,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Fq,"href","/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Tq,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTModel"),c(Mq,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Eq,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Cq,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(wq,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMModel"),c(Aq,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMModel"),c(yq,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMModel"),c(Lq,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(xq,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c($q,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(kq,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetModel"),c(Sq,"href","/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosModel"),c(Rq,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(su,"id","transformers.AutoModelForPreTraining"),c(su,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(su,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(Pq,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bq,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iq,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nq,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForPreTraining"),c(qq,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jq,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForPreTraining"),c(Dq,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Gq,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Oq,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Vq,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Xq,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(zq,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Wq,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Qq,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Hq,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Uq,"href","/docs/transformers/pr_16402/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Jq,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Yq,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Kq,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Zq,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(ej,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(oj,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(rj,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(tj,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(aj,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(nj,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(sj,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(lj,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(ij,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel"),c(dj,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(cj,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(fj,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(mj,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(gj,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(hj,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(pj,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(_j,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(uj,"href","/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(bj,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(vj,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Fj,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Tj,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Mj,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Ej,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Cj,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ku,"id","transformers.AutoModelForCausalLM"),c(Ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ku,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(wj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lj,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForCausalLM"),c(xj,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertLMHeadModel"),c($j,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(kj,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Sj,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Rj,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Pj,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Bj,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Ij,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Nj,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(qj,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForCausalLM"),c(jj,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Dj,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Gj,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Oj,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Vj,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianForCausalLM"),c(Xj,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForCausalLM"),c(zj,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Wj,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Qj,"href","/docs/transformers/pr_16402/en/model_doc/opt#transformers.OPTForCausalLM"),c(Hj,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Uj,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Jj,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Yj,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Kj,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Zj,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(eD,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(oD,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(rD,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(tD,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(aD,"href","/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(nD,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(sD,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(lD,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(iD,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(dD,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(cD,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j2,"id","transformers.AutoModelForMaskedLM"),c(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j2,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(fD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hD,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(pD,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMaskedLM"),c(uD,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(bD,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(vD,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(FD,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(TD,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(MD,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ED,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(CD,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(wD,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(AD,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(yD,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(LD,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(xD,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c($D,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(kD,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(RD,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(PD,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(BD,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(ID,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(ND,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(qD,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(jD,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(DD,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(GD,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(OD,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(VD,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(XD,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(zD,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(WD,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(QD,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C1,"id","transformers.AutoModelForSeq2SeqLM"),c(C1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ni,"class","relative group"),c(HD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YD,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(ZD,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(eG,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(oG,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(rG,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianMTModel"),c(sG,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(dG,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(fG,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X1,"id","transformers.AutoModelForSequenceClassification"),c(X1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(gG,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hG,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pG,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_G,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(uG,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForSequenceClassification"),c(bG,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForSequenceClassification"),c(vG,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(FG,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(TG,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(MG,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(EG,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(wG,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(AG,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(yG,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(LG,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(xG,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c($G,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(kG,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(SG,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(RG,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(PG,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(BG,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(IG,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(NG,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(qG,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(jG,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(DG,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForSequenceClassification"),c(GG,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(OG,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(VG,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(XG,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(zG,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(WG,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(QG,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(HG,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(UG,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(JG,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(KG,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(eO,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(oO,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(rO,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(tO,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(aO,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(nO,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(sO,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(lO,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(iO,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gb,"id","transformers.AutoModelForMultipleChoice"),c(Gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(dO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mO,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(gO,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMultipleChoice"),c(hO,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(pO,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(_O,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(uO,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(bO,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(vO,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(FO,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(MO,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(CO,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(wO,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(AO,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(yO,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(xO,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c($O,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(kO,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(SO,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(PO,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(BO,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(IO,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(NO,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(qO,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(jO,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(DO,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F4,"id","transformers.AutoModelForNextSentencePrediction"),c(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(GO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XO,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(zO,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(WO,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(QO,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(HO,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x4,"id","transformers.AutoModelForTokenClassification"),c(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x4,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(UO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KO,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(ZO,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForTokenClassification"),c(eV,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(oV,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(rV,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForTokenClassification"),c(tV,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(aV,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(nV,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(sV,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(lV,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(iV,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(dV,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(cV,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(fV,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(mV,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(gV,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(hV,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(pV,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(_V,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(uV,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(bV,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(vV,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(FV,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(TV,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(MV,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(EV,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(CV,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(wV,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(AV,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(yV,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(LV,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(xV,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c($V,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(kV,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gv,"id","transformers.AutoModelForQuestionAnswering"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(SV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BV,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(UV,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(uX,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(FX,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t0,"id","transformers.AutoModelForTableQuestionAnswering"),c(t0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t0,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(TX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CX,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.AutoModelForImageClassification"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(wX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LX,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForImageClassification"),c(xX,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c($X,"href","/docs/transformers/pr_16402/en/model_doc/cvt#transformers.CvtForImageClassification"),c(kX,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(SX,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassification"),c(RX,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(PX,"href","/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(BX,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(IX,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(NX,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(qX,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(jX,"href","/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(DX,"href","/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(GX,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(OX,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForImageClassification"),c(VX,"href","/docs/transformers/pr_16402/en/model_doc/van#transformers.VanForImageClassification"),c(XX,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C0,"id","transformers.AutoModelForVision2Seq"),c(C0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C0,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(zX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x0,"id","transformers.AutoModelForAudioClassification"),c(x0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x0,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(UX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KX,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(ez,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(oz,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(rz,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(tz,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(az,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(nz,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(sz,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O0,"id","transformers.AutoModelForAudioFrameClassification"),c(O0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O0,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(lz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cz,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(fz,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(mz,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(gz,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(hz,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.AutoModelForCTC"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(pz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_z,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(vz,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForCTC"),c(Fz,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTForCTC"),c(Tz,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForCTC"),c(Mz,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Ez,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Cz,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(wz,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Az,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(yz,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(Lz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($z,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kz,"href","/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Sz,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForAudioXVector"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(Rz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Nz,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(qz,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(jz,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Dz,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForMaskedImageModeling"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(zz,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Wz,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RF,"id","transformers.AutoModelForObjectDetection"),c(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RF,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Qz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Yz,"href","/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForImageSegmentation"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Kz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForSemanticSegmentation"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(rW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nW,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(sW,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(lW,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(iW,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KF,"id","transformers.AutoModelForInstanceSegmentation"),c(KF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KF,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(dW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t6,"id","transformers.TFAutoModel"),c(t6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t6,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(gW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertModel"),c(uW,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartModel"),c(bW,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertModel"),c(vW,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(FW,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(TW,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertModel"),c(MW,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.TFCLIPModel"),c(EW,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertModel"),c(CW,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextModel"),c(wW,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLModel"),c(AW,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(yW,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaModel"),c(LW,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(xW,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertModel"),c($W,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(kW,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraModel"),c(SW,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(RW,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelModel"),c(PW,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(BW,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2Model"),c(IW,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJModel"),c(NW,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.TFHubertModel"),c(qW,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(jW,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDModel"),c(DW,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerModel"),c(GW,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertModel"),c(OW,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianModel"),c(VW,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartModel"),c(XW,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(zW,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetModel"),c(WW,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5Model"),c(QW,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(HW,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusModel"),c(UW,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertModel"),c(JW,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaModel"),c(YW,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerModel"),c(KW,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(ZW,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.TFSwinModel"),c(eQ,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5Model"),c(oQ,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasModel"),c(rQ,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(tQ,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTModel"),c(aQ,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(nQ,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(sQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMModel"),c(lQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(iQ,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y6,"id","transformers.TFAutoModelForPreTraining"),c(Y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y6,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(dQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(gQ,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(hQ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForPreTraining"),c(pQ,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(_Q,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(uQ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bQ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(vQ,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FQ,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(TQ,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(MQ,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(EQ,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(CQ,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(wQ,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(AQ,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(yQ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(LQ,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xQ,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c($Q,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(kQ,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(SQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(PQ,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.TFAutoModelForCausalLM"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(BQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qQ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(jQ,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(DQ,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(GQ,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(OQ,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(VQ,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(XQ,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(zQ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(WQ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(QQ,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(HQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(UQ,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.TFAutoModelForImageClassification"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(JQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(eH,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(oH,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(rH,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.TFAutoModelForMaskedLM"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(tH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sH,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(lH,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(iH,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(dH,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(cH,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(fH,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(mH,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(gH,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(hH,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(pH,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(_H,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(uH,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(bH,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(vH,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(FH,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(TH,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(MH,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(EH,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(CH,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(wH,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(AH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c($H,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(kH,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(SH,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(RH,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(PH,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianMTModel"),c(BH,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(IH,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(NH,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(qH,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yM,"id","transformers.TFAutoModelForSequenceClassification"),c(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(jH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(VH,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(XH,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(zH,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(WH,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(QH,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(HH,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(UH,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(JH,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(YH,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(KH,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(eU,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(oU,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(rU,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(tU,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(aU,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(nU,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(sU,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(lU,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(iU,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(dU,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(cU,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(fU,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(mU,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(gU,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.TFAutoModelForMultipleChoice"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(hU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_U,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uU,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(bU,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(vU,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(FU,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(TU,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(MU,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(EU,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(CU,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(wU,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(AU,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(yU,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(LU,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(xU,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c($U,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(kU,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(SU,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(RU,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.TFAutoModelForNextSentencePrediction"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(PU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(qU,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(jU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kE,"id","transformers.TFAutoModelForTokenClassification"),c(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kE,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(VU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WU,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(QU,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(HU,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(UU,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(JU,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(YU,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(KU,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(ZU,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(eJ,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(rJ,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(tJ,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(aJ,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(nJ,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(sJ,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(lJ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(iJ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(dJ,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(cJ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(fJ,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.TFAutoModelForQuestionAnswering"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(mJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(CJ,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c($J,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(RJ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.TFAutoModelForVision2Seq"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(BJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(jJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kC,"id","transformers.FlaxAutoModel"),c(kC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kC,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertModel"),c(QJ,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartModel"),c(HJ,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitModel"),c(UJ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertModel"),c(JJ,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(YJ,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(KJ,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(ZJ,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.FlaxCLIPModel"),c(eY,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(oY,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraModel"),c(rY,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(tY,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(aY,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(nY,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianModel"),c(sY,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartModel"),c(lY,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5Model"),c(iY,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(dY,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(cY,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(fY,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5Model"),c(mY,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(gY,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTModel"),c(hY,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(pY,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(_Y,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.FlaxAutoModelForCausalLM"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(uY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(TY,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(MY,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(EY,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(CY,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(wY,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(AY,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(yY,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(LY,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.FlaxAutoModelForPreTraining"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(xY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Y,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SY,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(RY,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(BY,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(IY,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(NY,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(DY,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(GY,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(VY,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForMaskedLM"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(XY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QY,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(HY,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(JY,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(YY,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(KY,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(ZY,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eK,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(oK,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(rK,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(tK,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aK,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nK,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sK,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lK,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(iK,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(dK,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(cK,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(fK,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mK,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(gK,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(hK,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(pK,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(vK,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(FK,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(TK,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(MK,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(EK,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(CK,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(wK,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(AK,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(yK,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(LK,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xK,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($K,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kK,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.FlaxAutoModelForTokenClassification"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(GK,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OK,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VK,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XK,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(zK,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(WK,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(QK,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(HK,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(UK,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(JK,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(YK,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(KK,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(rZ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(tZ,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(aZ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(nZ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(sZ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(lZ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(iZ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(dZ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.FlaxAutoModelForImageClassification"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(gZ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hZ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pZ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Z,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(uZ,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.FlaxAutoModelForVision2Seq"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(bZ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vZ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FZ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TZ,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,u),b(f,rt,u),e(rt,mi),e(rt,gi),e(gi,yy),e(rt,_f),b(f,De,u),b(f,We,u),e(We,hi),e(We,yn),e(yn,Ly),e(We,Ln),e(We,xn),e(xn,xy),e(We,pi),e(We,$n),e($n,$y),e(We,_i),b(f,uf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,U$),e(Ae,ui),e(ui,J$),e(Ae,Y$),b(f,Eo,u),b(f,wa,u),e(wa,K$),e(wa,bf),e(bf,Z$),e(wa,wOe),b(f,hqe,u),b(f,bi,u),e(bi,vf),e(vf,hoe),M(ky,hoe,null),e(bi,AOe),e(bi,poe),e(poe,yOe),b(f,pqe,u),b(f,kn,u),e(kn,LOe),e(kn,_oe),e(_oe,xOe),e(kn,$Oe),e(kn,uoe),e(uoe,kOe),e(kn,SOe),b(f,_qe,u),M(Sy,f,u),b(f,uqe,u),b(f,ek,u),e(ek,ROe),b(f,bqe,u),M(Ff,f,u),b(f,vqe,u),b(f,vi,u),e(vi,Tf),e(Tf,boe),M(Ry,boe,null),e(vi,POe),e(vi,voe),e(voe,BOe),b(f,Fqe,u),b(f,Co,u),M(Py,Co,null),e(Co,IOe),e(Co,By),e(By,NOe),e(By,ok),e(ok,qOe),e(By,jOe),e(Co,DOe),e(Co,Iy),e(Iy,GOe),e(Iy,Foe),e(Foe,OOe),e(Iy,VOe),e(Co,XOe),e(Co,Er),M(Ny,Er,null),e(Er,zOe),e(Er,Toe),e(Toe,WOe),e(Er,QOe),e(Er,Fi),e(Fi,HOe),e(Fi,Moe),e(Moe,UOe),e(Fi,JOe),e(Fi,Eoe),e(Eoe,YOe),e(Fi,KOe),e(Er,ZOe),e(Er,A),e(A,Mf),e(Mf,Coe),e(Coe,eVe),e(Mf,oVe),e(Mf,rk),e(rk,rVe),e(Mf,tVe),e(A,aVe),e(A,Ef),e(Ef,woe),e(woe,nVe),e(Ef,sVe),e(Ef,tk),e(tk,lVe),e(Ef,iVe),e(A,dVe),e(A,Cf),e(Cf,Aoe),e(Aoe,cVe),e(Cf,fVe),e(Cf,ak),e(ak,mVe),e(Cf,gVe),e(A,hVe),e(A,wf),e(wf,yoe),e(yoe,pVe),e(wf,_Ve),e(wf,nk),e(nk,uVe),e(wf,bVe),e(A,vVe),e(A,Af),e(Af,Loe),e(Loe,FVe),e(Af,TVe),e(Af,sk),e(sk,MVe),e(Af,EVe),e(A,CVe),e(A,yf),e(yf,xoe),e(xoe,wVe),e(yf,AVe),e(yf,lk),e(lk,yVe),e(yf,LVe),e(A,xVe),e(A,Lf),e(Lf,$oe),e($oe,$Ve),e(Lf,kVe),e(Lf,ik),e(ik,SVe),e(Lf,RVe),e(A,PVe),e(A,xf),e(xf,koe),e(koe,BVe),e(xf,IVe),e(xf,dk),e(dk,NVe),e(xf,qVe),e(A,jVe),e(A,$f),e($f,Soe),e(Soe,DVe),e($f,GVe),e($f,ck),e(ck,OVe),e($f,VVe),e(A,XVe),e(A,kf),e(kf,Roe),e(Roe,zVe),e(kf,WVe),e(kf,fk),e(fk,QVe),e(kf,HVe),e(A,UVe),e(A,Sf),e(Sf,Poe),e(Poe,JVe),e(Sf,YVe),e(Sf,mk),e(mk,KVe),e(Sf,ZVe),e(A,eXe),e(A,Rf),e(Rf,Boe),e(Boe,oXe),e(Rf,rXe),e(Rf,gk),e(gk,tXe),e(Rf,aXe),e(A,nXe),e(A,Pf),e(Pf,Ioe),e(Ioe,sXe),e(Pf,lXe),e(Pf,hk),e(hk,iXe),e(Pf,dXe),e(A,cXe),e(A,Bf),e(Bf,Noe),e(Noe,fXe),e(Bf,mXe),e(Bf,pk),e(pk,gXe),e(Bf,hXe),e(A,pXe),e(A,If),e(If,qoe),e(qoe,_Xe),e(If,uXe),e(If,_k),e(_k,bXe),e(If,vXe),e(A,FXe),e(A,Nf),e(Nf,joe),e(joe,TXe),e(Nf,MXe),e(Nf,uk),e(uk,EXe),e(Nf,CXe),e(A,wXe),e(A,qf),e(qf,Doe),e(Doe,AXe),e(qf,yXe),e(qf,bk),e(bk,LXe),e(qf,xXe),e(A,$Xe),e(A,jf),e(jf,Goe),e(Goe,kXe),e(jf,SXe),e(jf,vk),e(vk,RXe),e(jf,PXe),e(A,BXe),e(A,Df),e(Df,Ooe),e(Ooe,IXe),e(Df,NXe),e(Df,Fk),e(Fk,qXe),e(Df,jXe),e(A,DXe),e(A,Gf),e(Gf,Voe),e(Voe,GXe),e(Gf,OXe),e(Gf,Tk),e(Tk,VXe),e(Gf,XXe),e(A,zXe),e(A,Of),e(Of,Xoe),e(Xoe,WXe),e(Of,QXe),e(Of,Mk),e(Mk,HXe),e(Of,UXe),e(A,JXe),e(A,Vf),e(Vf,zoe),e(zoe,YXe),e(Vf,KXe),e(Vf,Ek),e(Ek,ZXe),e(Vf,eze),e(A,oze),e(A,Xf),e(Xf,Woe),e(Woe,rze),e(Xf,tze),e(Xf,Ck),e(Ck,aze),e(Xf,nze),e(A,sze),e(A,zf),e(zf,Qoe),e(Qoe,lze),e(zf,ize),e(zf,wk),e(wk,dze),e(zf,cze),e(A,fze),e(A,Wf),e(Wf,Hoe),e(Hoe,mze),e(Wf,gze),e(Wf,Ak),e(Ak,hze),e(Wf,pze),e(A,_ze),e(A,Qf),e(Qf,Uoe),e(Uoe,uze),e(Qf,bze),e(Qf,yk),e(yk,vze),e(Qf,Fze),e(A,Tze),e(A,Hf),e(Hf,Joe),e(Joe,Mze),e(Hf,Eze),e(Hf,Lk),e(Lk,Cze),e(Hf,wze),e(A,Aze),e(A,Uf),e(Uf,Yoe),e(Yoe,yze),e(Uf,Lze),e(Uf,xk),e(xk,xze),e(Uf,$ze),e(A,kze),e(A,Jf),e(Jf,Koe),e(Koe,Sze),e(Jf,Rze),e(Jf,$k),e($k,Pze),e(Jf,Bze),e(A,Ize),e(A,Yf),e(Yf,Zoe),e(Zoe,Nze),e(Yf,qze),e(Yf,kk),e(kk,jze),e(Yf,Dze),e(A,Gze),e(A,Kf),e(Kf,ere),e(ere,Oze),e(Kf,Vze),e(Kf,Sk),e(Sk,Xze),e(Kf,zze),e(A,Wze),e(A,Zf),e(Zf,ore),e(ore,Qze),e(Zf,Hze),e(Zf,Rk),e(Rk,Uze),e(Zf,Jze),e(A,Yze),e(A,em),e(em,rre),e(rre,Kze),e(em,Zze),e(em,Pk),e(Pk,eWe),e(em,oWe),e(A,rWe),e(A,om),e(om,tre),e(tre,tWe),e(om,aWe),e(om,Bk),e(Bk,nWe),e(om,sWe),e(A,lWe),e(A,rm),e(rm,are),e(are,iWe),e(rm,dWe),e(rm,Ik),e(Ik,cWe),e(rm,fWe),e(A,mWe),e(A,tm),e(tm,nre),e(nre,gWe),e(tm,hWe),e(tm,Nk),e(Nk,pWe),e(tm,_We),e(A,uWe),e(A,am),e(am,sre),e(sre,bWe),e(am,vWe),e(am,qk),e(qk,FWe),e(am,TWe),e(A,MWe),e(A,nm),e(nm,lre),e(lre,EWe),e(nm,CWe),e(nm,jk),e(jk,wWe),e(nm,AWe),e(A,yWe),e(A,sm),e(sm,ire),e(ire,LWe),e(sm,xWe),e(sm,Dk),e(Dk,$We),e(sm,kWe),e(A,SWe),e(A,lm),e(lm,dre),e(dre,RWe),e(lm,PWe),e(lm,Gk),e(Gk,BWe),e(lm,IWe),e(A,NWe),e(A,im),e(im,cre),e(cre,qWe),e(im,jWe),e(im,Ok),e(Ok,DWe),e(im,GWe),e(A,OWe),e(A,dm),e(dm,fre),e(fre,VWe),e(dm,XWe),e(dm,Vk),e(Vk,zWe),e(dm,WWe),e(A,QWe),e(A,cm),e(cm,mre),e(mre,HWe),e(cm,UWe),e(cm,Xk),e(Xk,JWe),e(cm,YWe),e(A,KWe),e(A,fm),e(fm,gre),e(gre,ZWe),e(fm,eQe),e(fm,zk),e(zk,oQe),e(fm,rQe),e(A,tQe),e(A,mm),e(mm,hre),e(hre,aQe),e(mm,nQe),e(mm,Wk),e(Wk,sQe),e(mm,lQe),e(A,iQe),e(A,gm),e(gm,pre),e(pre,dQe),e(gm,cQe),e(gm,Qk),e(Qk,fQe),e(gm,mQe),e(A,gQe),e(A,hm),e(hm,_re),e(_re,hQe),e(hm,pQe),e(hm,Hk),e(Hk,_Qe),e(hm,uQe),e(A,bQe),e(A,pm),e(pm,ure),e(ure,vQe),e(pm,FQe),e(pm,Uk),e(Uk,TQe),e(pm,MQe),e(A,EQe),e(A,_m),e(_m,bre),e(bre,CQe),e(_m,wQe),e(_m,Jk),e(Jk,AQe),e(_m,yQe),e(A,LQe),e(A,um),e(um,vre),e(vre,xQe),e(um,$Qe),e(um,Yk),e(Yk,kQe),e(um,SQe),e(A,RQe),e(A,bm),e(bm,Fre),e(Fre,PQe),e(bm,BQe),e(bm,Kk),e(Kk,IQe),e(bm,NQe),e(A,qQe),e(A,vm),e(vm,Tre),e(Tre,jQe),e(vm,DQe),e(vm,Zk),e(Zk,GQe),e(vm,OQe),e(A,VQe),e(A,Fm),e(Fm,Mre),e(Mre,XQe),e(Fm,zQe),e(Fm,eS),e(eS,WQe),e(Fm,QQe),e(A,HQe),e(A,Tm),e(Tm,Ere),e(Ere,UQe),e(Tm,JQe),e(Tm,oS),e(oS,YQe),e(Tm,KQe),e(A,ZQe),e(A,Mm),e(Mm,Cre),e(Cre,eHe),e(Mm,oHe),e(Mm,rS),e(rS,rHe),e(Mm,tHe),e(A,aHe),e(A,Em),e(Em,wre),e(wre,nHe),e(Em,sHe),e(Em,tS),e(tS,lHe),e(Em,iHe),e(A,dHe),e(A,Cm),e(Cm,Are),e(Are,cHe),e(Cm,fHe),e(Cm,aS),e(aS,mHe),e(Cm,gHe),e(A,hHe),e(A,wm),e(wm,yre),e(yre,pHe),e(wm,_He),e(wm,nS),e(nS,uHe),e(wm,bHe),e(A,vHe),e(A,Am),e(Am,Lre),e(Lre,FHe),e(Am,THe),e(Am,sS),e(sS,MHe),e(Am,EHe),e(A,CHe),e(A,ym),e(ym,xre),e(xre,wHe),e(ym,AHe),e(ym,lS),e(lS,yHe),e(ym,LHe),e(A,xHe),e(A,Lm),e(Lm,$re),e($re,$He),e(Lm,kHe),e(Lm,iS),e(iS,SHe),e(Lm,RHe),e(A,PHe),e(A,xm),e(xm,kre),e(kre,BHe),e(xm,IHe),e(xm,dS),e(dS,NHe),e(xm,qHe),e(A,jHe),e(A,$m),e($m,Sre),e(Sre,DHe),e($m,GHe),e($m,cS),e(cS,OHe),e($m,VHe),e(A,XHe),e(A,km),e(km,Rre),e(Rre,zHe),e(km,WHe),e(km,fS),e(fS,QHe),e(km,HHe),e(A,UHe),e(A,Sm),e(Sm,Pre),e(Pre,JHe),e(Sm,YHe),e(Sm,mS),e(mS,KHe),e(Sm,ZHe),e(A,eUe),e(A,Rm),e(Rm,Bre),e(Bre,oUe),e(Rm,rUe),e(Rm,gS),e(gS,tUe),e(Rm,aUe),e(A,nUe),e(A,Pm),e(Pm,Ire),e(Ire,sUe),e(Pm,lUe),e(Pm,hS),e(hS,iUe),e(Pm,dUe),e(A,cUe),e(A,Bm),e(Bm,Nre),e(Nre,fUe),e(Bm,mUe),e(Bm,pS),e(pS,gUe),e(Bm,hUe),e(A,pUe),e(A,Im),e(Im,qre),e(qre,_Ue),e(Im,uUe),e(Im,_S),e(_S,bUe),e(Im,vUe),e(A,FUe),e(A,Nm),e(Nm,jre),e(jre,TUe),e(Nm,MUe),e(Nm,uS),e(uS,EUe),e(Nm,CUe),e(A,wUe),e(A,qm),e(qm,Dre),e(Dre,AUe),e(qm,yUe),e(qm,bS),e(bS,LUe),e(qm,xUe),e(A,$Ue),e(A,jm),e(jm,Gre),e(Gre,kUe),e(jm,SUe),e(jm,vS),e(vS,RUe),e(jm,PUe),e(A,BUe),e(A,Dm),e(Dm,Ore),e(Ore,IUe),e(Dm,NUe),e(Dm,FS),e(FS,qUe),e(Dm,jUe),e(A,DUe),e(A,Gm),e(Gm,Vre),e(Vre,GUe),e(Gm,OUe),e(Gm,TS),e(TS,VUe),e(Gm,XUe),e(A,zUe),e(A,Om),e(Om,Xre),e(Xre,WUe),e(Om,QUe),e(Om,MS),e(MS,HUe),e(Om,UUe),e(A,JUe),e(A,Vm),e(Vm,zre),e(zre,YUe),e(Vm,KUe),e(Vm,ES),e(ES,ZUe),e(Vm,eJe),e(A,oJe),e(A,Xm),e(Xm,Wre),e(Wre,rJe),e(Xm,tJe),e(Xm,CS),e(CS,aJe),e(Xm,nJe),e(A,sJe),e(A,zm),e(zm,Qre),e(Qre,lJe),e(zm,iJe),e(zm,wS),e(wS,dJe),e(zm,cJe),e(A,fJe),e(A,Wm),e(Wm,Hre),e(Hre,mJe),e(Wm,gJe),e(Wm,AS),e(AS,hJe),e(Wm,pJe),e(A,_Je),e(A,Qm),e(Qm,Ure),e(Ure,uJe),e(Qm,bJe),e(Qm,yS),e(yS,vJe),e(Qm,FJe),e(A,TJe),e(A,Hm),e(Hm,Jre),e(Jre,MJe),e(Hm,EJe),e(Hm,LS),e(LS,CJe),e(Hm,wJe),e(A,AJe),e(A,Um),e(Um,Yre),e(Yre,yJe),e(Um,LJe),e(Um,xS),e(xS,xJe),e(Um,$Je),e(A,kJe),e(A,Jm),e(Jm,Kre),e(Kre,SJe),e(Jm,RJe),e(Jm,$S),e($S,PJe),e(Jm,BJe),e(A,IJe),e(A,Ym),e(Ym,Zre),e(Zre,NJe),e(Ym,qJe),e(Ym,kS),e(kS,jJe),e(Ym,DJe),e(A,GJe),e(A,Km),e(Km,ete),e(ete,OJe),e(Km,VJe),e(Km,SS),e(SS,XJe),e(Km,zJe),e(A,WJe),e(A,Zm),e(Zm,ote),e(ote,QJe),e(Zm,HJe),e(Zm,RS),e(RS,UJe),e(Zm,JJe),e(A,YJe),e(A,eg),e(eg,rte),e(rte,KJe),e(eg,ZJe),e(eg,PS),e(PS,eYe),e(eg,oYe),e(A,rYe),e(A,og),e(og,tte),e(tte,tYe),e(og,aYe),e(og,BS),e(BS,nYe),e(og,sYe),e(A,lYe),e(A,rg),e(rg,ate),e(ate,iYe),e(rg,dYe),e(rg,IS),e(IS,cYe),e(rg,fYe),e(A,mYe),e(A,tg),e(tg,nte),e(nte,gYe),e(tg,hYe),e(tg,NS),e(NS,pYe),e(tg,_Ye),e(A,uYe),e(A,ag),e(ag,ste),e(ste,bYe),e(ag,vYe),e(ag,qS),e(qS,FYe),e(ag,TYe),e(A,MYe),e(A,ng),e(ng,lte),e(lte,EYe),e(ng,CYe),e(ng,jS),e(jS,wYe),e(ng,AYe),e(A,yYe),e(A,sg),e(sg,ite),e(ite,LYe),e(sg,xYe),e(sg,DS),e(DS,$Ye),e(sg,kYe),e(A,SYe),e(A,lg),e(lg,dte),e(dte,RYe),e(lg,PYe),e(lg,GS),e(GS,BYe),e(lg,IYe),e(A,NYe),e(A,ig),e(ig,cte),e(cte,qYe),e(ig,jYe),e(ig,OS),e(OS,DYe),e(ig,GYe),e(A,OYe),e(A,dg),e(dg,fte),e(fte,VYe),e(dg,XYe),e(dg,VS),e(VS,zYe),e(dg,WYe),e(A,QYe),e(A,cg),e(cg,mte),e(mte,HYe),e(cg,UYe),e(cg,XS),e(XS,JYe),e(cg,YYe),e(A,KYe),e(A,fg),e(fg,gte),e(gte,ZYe),e(fg,eKe),e(fg,zS),e(zS,oKe),e(fg,rKe),e(A,tKe),e(A,mg),e(mg,hte),e(hte,aKe),e(mg,nKe),e(mg,WS),e(WS,sKe),e(mg,lKe),e(A,iKe),e(A,gg),e(gg,pte),e(pte,dKe),e(gg,cKe),e(gg,QS),e(QS,fKe),e(gg,mKe),e(A,gKe),e(A,hg),e(hg,_te),e(_te,hKe),e(hg,pKe),e(hg,HS),e(HS,_Ke),e(hg,uKe),e(A,bKe),e(A,pg),e(pg,ute),e(ute,vKe),e(pg,FKe),e(pg,US),e(US,TKe),e(pg,MKe),e(A,EKe),e(A,_g),e(_g,bte),e(bte,CKe),e(_g,wKe),e(_g,JS),e(JS,AKe),e(_g,yKe),e(A,LKe),e(A,ug),e(ug,vte),e(vte,xKe),e(ug,$Ke),e(ug,YS),e(YS,kKe),e(ug,SKe),e(A,RKe),e(A,bg),e(bg,Fte),e(Fte,PKe),e(bg,BKe),e(bg,KS),e(KS,IKe),e(bg,NKe),e(A,qKe),e(A,vg),e(vg,Tte),e(Tte,jKe),e(vg,DKe),e(vg,ZS),e(ZS,GKe),e(vg,OKe),e(A,VKe),e(A,Fg),e(Fg,Mte),e(Mte,XKe),e(Fg,zKe),e(Fg,eR),e(eR,WKe),e(Fg,QKe),e(A,HKe),e(A,Tg),e(Tg,Ete),e(Ete,UKe),e(Tg,JKe),e(Tg,oR),e(oR,YKe),e(Tg,KKe),e(A,ZKe),e(A,Mg),e(Mg,Cte),e(Cte,eZe),e(Mg,oZe),e(Mg,rR),e(rR,rZe),e(Mg,tZe),e(A,aZe),e(A,Eg),e(Eg,wte),e(wte,nZe),e(Eg,sZe),e(Eg,tR),e(tR,lZe),e(Eg,iZe),e(Er,dZe),M(Cg,Er,null),e(Co,cZe),e(Co,wg),M(qy,wg,null),e(wg,fZe),e(wg,Ate),e(Ate,mZe),b(f,Tqe,u),b(f,Ti,u),e(Ti,Ag),e(Ag,yte),M(jy,yte,null),e(Ti,gZe),e(Ti,Lte),e(Lte,hZe),b(f,Mqe,u),b(f,wo,u),M(Dy,wo,null),e(wo,pZe),e(wo,Gy),e(Gy,_Ze),e(Gy,aR),e(aR,uZe),e(Gy,bZe),e(wo,vZe),e(wo,Oy),e(Oy,FZe),e(Oy,xte),e(xte,TZe),e(Oy,MZe),e(wo,EZe),e(wo,Cr),M(Vy,Cr,null),e(Cr,CZe),e(Cr,$te),e($te,wZe),e(Cr,AZe),e(Cr,Aa),e(Aa,yZe),e(Aa,kte),e(kte,LZe),e(Aa,xZe),e(Aa,Ste),e(Ste,$Ze),e(Aa,kZe),e(Aa,Rte),e(Rte,SZe),e(Aa,RZe),e(Cr,PZe),e(Cr,k),e(k,Sn),e(Sn,Pte),e(Pte,BZe),e(Sn,IZe),e(Sn,nR),e(nR,NZe),e(Sn,qZe),e(Sn,sR),e(sR,jZe),e(Sn,DZe),e(k,GZe),e(k,Rn),e(Rn,Bte),e(Bte,OZe),e(Rn,VZe),e(Rn,lR),e(lR,XZe),e(Rn,zZe),e(Rn,iR),e(iR,WZe),e(Rn,QZe),e(k,HZe),e(k,Pn),e(Pn,Ite),e(Ite,UZe),e(Pn,JZe),e(Pn,dR),e(dR,YZe),e(Pn,KZe),e(Pn,cR),e(cR,ZZe),e(Pn,eeo),e(k,oeo),e(k,yg),e(yg,Nte),e(Nte,reo),e(yg,teo),e(yg,fR),e(fR,aeo),e(yg,neo),e(k,seo),e(k,Bn),e(Bn,qte),e(qte,leo),e(Bn,ieo),e(Bn,mR),e(mR,deo),e(Bn,ceo),e(Bn,gR),e(gR,feo),e(Bn,meo),e(k,geo),e(k,Lg),e(Lg,jte),e(jte,heo),e(Lg,peo),e(Lg,hR),e(hR,_eo),e(Lg,ueo),e(k,beo),e(k,xg),e(xg,Dte),e(Dte,veo),e(xg,Feo),e(xg,pR),e(pR,Teo),e(xg,Meo),e(k,Eeo),e(k,$g),e($g,Gte),e(Gte,Ceo),e($g,weo),e($g,_R),e(_R,Aeo),e($g,yeo),e(k,Leo),e(k,In),e(In,Ote),e(Ote,xeo),e(In,$eo),e(In,uR),e(uR,keo),e(In,Seo),e(In,bR),e(bR,Reo),e(In,Peo),e(k,Beo),e(k,Nn),e(Nn,Vte),e(Vte,Ieo),e(Nn,Neo),e(Nn,vR),e(vR,qeo),e(Nn,jeo),e(Nn,FR),e(FR,Deo),e(Nn,Geo),e(k,Oeo),e(k,qn),e(qn,Xte),e(Xte,Veo),e(qn,Xeo),e(qn,TR),e(TR,zeo),e(qn,Weo),e(qn,MR),e(MR,Qeo),e(qn,Heo),e(k,Ueo),e(k,kg),e(kg,zte),e(zte,Jeo),e(kg,Yeo),e(kg,ER),e(ER,Keo),e(kg,Zeo),e(k,eoo),e(k,Sg),e(Sg,Wte),e(Wte,ooo),e(Sg,roo),e(Sg,CR),e(CR,too),e(Sg,aoo),e(k,noo),e(k,jn),e(jn,Qte),e(Qte,soo),e(jn,loo),e(jn,wR),e(wR,ioo),e(jn,doo),e(jn,AR),e(AR,coo),e(jn,foo),e(k,moo),e(k,Rg),e(Rg,Hte),e(Hte,goo),e(Rg,hoo),e(Rg,yR),e(yR,poo),e(Rg,_oo),e(k,uoo),e(k,Dn),e(Dn,Ute),e(Ute,boo),e(Dn,voo),e(Dn,LR),e(LR,Foo),e(Dn,Too),e(Dn,xR),e(xR,Moo),e(Dn,Eoo),e(k,Coo),e(k,Gn),e(Gn,Jte),e(Jte,woo),e(Gn,Aoo),e(Gn,$R),e($R,yoo),e(Gn,Loo),e(Gn,kR),e(kR,xoo),e(Gn,$oo),e(k,koo),e(k,On),e(On,Yte),e(Yte,Soo),e(On,Roo),e(On,SR),e(SR,Poo),e(On,Boo),e(On,RR),e(RR,Ioo),e(On,Noo),e(k,qoo),e(k,Pg),e(Pg,Kte),e(Kte,joo),e(Pg,Doo),e(Pg,PR),e(PR,Goo),e(Pg,Ooo),e(k,Voo),e(k,Vn),e(Vn,Zte),e(Zte,Xoo),e(Vn,zoo),e(Vn,BR),e(BR,Woo),e(Vn,Qoo),e(Vn,IR),e(IR,Hoo),e(Vn,Uoo),e(k,Joo),e(k,Xn),e(Xn,eae),e(eae,Yoo),e(Xn,Koo),e(Xn,NR),e(NR,Zoo),e(Xn,ero),e(Xn,qR),e(qR,oro),e(Xn,rro),e(k,tro),e(k,zn),e(zn,oae),e(oae,aro),e(zn,nro),e(zn,jR),e(jR,sro),e(zn,lro),e(zn,DR),e(DR,iro),e(zn,dro),e(k,cro),e(k,Wn),e(Wn,rae),e(rae,fro),e(Wn,mro),e(Wn,GR),e(GR,gro),e(Wn,hro),e(Wn,OR),e(OR,pro),e(Wn,_ro),e(k,uro),e(k,Qn),e(Qn,tae),e(tae,bro),e(Qn,vro),e(Qn,VR),e(VR,Fro),e(Qn,Tro),e(Qn,XR),e(XR,Mro),e(Qn,Ero),e(k,Cro),e(k,Hn),e(Hn,aae),e(aae,wro),e(Hn,Aro),e(Hn,zR),e(zR,yro),e(Hn,Lro),e(Hn,WR),e(WR,xro),e(Hn,$ro),e(k,kro),e(k,Bg),e(Bg,nae),e(nae,Sro),e(Bg,Rro),e(Bg,QR),e(QR,Pro),e(Bg,Bro),e(k,Iro),e(k,Un),e(Un,sae),e(sae,Nro),e(Un,qro),e(Un,HR),e(HR,jro),e(Un,Dro),e(Un,UR),e(UR,Gro),e(Un,Oro),e(k,Vro),e(k,Ig),e(Ig,lae),e(lae,Xro),e(Ig,zro),e(Ig,JR),e(JR,Wro),e(Ig,Qro),e(k,Hro),e(k,Jn),e(Jn,iae),e(iae,Uro),e(Jn,Jro),e(Jn,YR),e(YR,Yro),e(Jn,Kro),e(Jn,KR),e(KR,Zro),e(Jn,eto),e(k,oto),e(k,Yn),e(Yn,dae),e(dae,rto),e(Yn,tto),e(Yn,ZR),e(ZR,ato),e(Yn,nto),e(Yn,eP),e(eP,sto),e(Yn,lto),e(k,ito),e(k,Kn),e(Kn,cae),e(cae,dto),e(Kn,cto),e(Kn,oP),e(oP,fto),e(Kn,mto),e(Kn,rP),e(rP,gto),e(Kn,hto),e(k,pto),e(k,Ng),e(Ng,fae),e(fae,_to),e(Ng,uto),e(Ng,tP),e(tP,bto),e(Ng,vto),e(k,Fto),e(k,Zn),e(Zn,mae),e(mae,Tto),e(Zn,Mto),e(Zn,aP),e(aP,Eto),e(Zn,Cto),e(Zn,nP),e(nP,wto),e(Zn,Ato),e(k,yto),e(k,es),e(es,gae),e(gae,Lto),e(es,xto),e(es,sP),e(sP,$to),e(es,kto),e(es,lP),e(lP,Sto),e(es,Rto),e(k,Pto),e(k,qg),e(qg,hae),e(hae,Bto),e(qg,Ito),e(qg,iP),e(iP,Nto),e(qg,qto),e(k,jto),e(k,os),e(os,pae),e(pae,Dto),e(os,Gto),e(os,dP),e(dP,Oto),e(os,Vto),e(os,cP),e(cP,Xto),e(os,zto),e(k,Wto),e(k,rs),e(rs,_ae),e(_ae,Qto),e(rs,Hto),e(rs,fP),e(fP,Uto),e(rs,Jto),e(rs,mP),e(mP,Yto),e(rs,Kto),e(k,Zto),e(k,ts),e(ts,uae),e(uae,eao),e(ts,oao),e(ts,gP),e(gP,rao),e(ts,tao),e(ts,hP),e(hP,aao),e(ts,nao),e(k,sao),e(k,as),e(as,bae),e(bae,lao),e(as,iao),e(as,pP),e(pP,dao),e(as,cao),e(as,_P),e(_P,fao),e(as,mao),e(k,gao),e(k,ns),e(ns,vae),e(vae,hao),e(ns,pao),e(ns,uP),e(uP,_ao),e(ns,uao),e(ns,bP),e(bP,bao),e(ns,vao),e(k,Fao),e(k,ss),e(ss,Fae),e(Fae,Tao),e(ss,Mao),e(ss,vP),e(vP,Eao),e(ss,Cao),e(ss,FP),e(FP,wao),e(ss,Aao),e(k,yao),e(k,ls),e(ls,Tae),e(Tae,Lao),e(ls,xao),e(ls,TP),e(TP,$ao),e(ls,kao),e(ls,MP),e(MP,Sao),e(ls,Rao),e(k,Pao),e(k,jg),e(jg,Mae),e(Mae,Bao),e(jg,Iao),e(jg,EP),e(EP,Nao),e(jg,qao),e(k,jao),e(k,is),e(is,Eae),e(Eae,Dao),e(is,Gao),e(is,CP),e(CP,Oao),e(is,Vao),e(is,wP),e(wP,Xao),e(is,zao),e(k,Wao),e(k,Dg),e(Dg,Cae),e(Cae,Qao),e(Dg,Hao),e(Dg,AP),e(AP,Uao),e(Dg,Jao),e(k,Yao),e(k,Gg),e(Gg,wae),e(wae,Kao),e(Gg,Zao),e(Gg,yP),e(yP,eno),e(Gg,ono),e(k,rno),e(k,ds),e(ds,Aae),e(Aae,tno),e(ds,ano),e(ds,LP),e(LP,nno),e(ds,sno),e(ds,xP),e(xP,lno),e(ds,ino),e(k,dno),e(k,cs),e(cs,yae),e(yae,cno),e(cs,fno),e(cs,$P),e($P,mno),e(cs,gno),e(cs,kP),e(kP,hno),e(cs,pno),e(k,_no),e(k,fs),e(fs,Lae),e(Lae,uno),e(fs,bno),e(fs,SP),e(SP,vno),e(fs,Fno),e(fs,RP),e(RP,Tno),e(fs,Mno),e(k,Eno),e(k,Og),e(Og,xae),e(xae,Cno),e(Og,wno),e(Og,PP),e(PP,Ano),e(Og,yno),e(k,Lno),e(k,ms),e(ms,$ae),e($ae,xno),e(ms,$no),e(ms,BP),e(BP,kno),e(ms,Sno),e(ms,IP),e(IP,Rno),e(ms,Pno),e(k,Bno),e(k,gs),e(gs,kae),e(kae,Ino),e(gs,Nno),e(gs,NP),e(NP,qno),e(gs,jno),e(gs,qP),e(qP,Dno),e(gs,Gno),e(k,Ono),e(k,hs),e(hs,Sae),e(Sae,Vno),e(hs,Xno),e(hs,jP),e(jP,zno),e(hs,Wno),e(hs,DP),e(DP,Qno),e(hs,Hno),e(k,Uno),e(k,ps),e(ps,Rae),e(Rae,Jno),e(ps,Yno),e(ps,GP),e(GP,Kno),e(ps,Zno),e(ps,OP),e(OP,eso),e(ps,oso),e(k,rso),e(k,_s),e(_s,Pae),e(Pae,tso),e(_s,aso),e(_s,VP),e(VP,nso),e(_s,sso),e(_s,XP),e(XP,lso),e(_s,iso),e(k,dso),e(k,Vg),e(Vg,Bae),e(Bae,cso),e(Vg,fso),e(Vg,zP),e(zP,mso),e(Vg,gso),e(k,hso),e(k,us),e(us,Iae),e(Iae,pso),e(us,_so),e(us,WP),e(WP,uso),e(us,bso),e(us,QP),e(QP,vso),e(us,Fso),e(k,Tso),e(k,Xg),e(Xg,Nae),e(Nae,Mso),e(Xg,Eso),e(Xg,HP),e(HP,Cso),e(Xg,wso),e(k,Aso),e(k,zg),e(zg,qae),e(qae,yso),e(zg,Lso),e(zg,UP),e(UP,xso),e(zg,$so),e(k,kso),e(k,Wg),e(Wg,jae),e(jae,Sso),e(Wg,Rso),e(Wg,JP),e(JP,Pso),e(Wg,Bso),e(k,Iso),e(k,Qg),e(Qg,Dae),e(Dae,Nso),e(Qg,qso),e(Qg,YP),e(YP,jso),e(Qg,Dso),e(k,Gso),e(k,bs),e(bs,Gae),e(Gae,Oso),e(bs,Vso),e(bs,KP),e(KP,Xso),e(bs,zso),e(bs,ZP),e(ZP,Wso),e(bs,Qso),e(k,Hso),e(k,Hg),e(Hg,Oae),e(Oae,Uso),e(Hg,Jso),e(Hg,eB),e(eB,Yso),e(Hg,Kso),e(k,Zso),e(k,vs),e(vs,Vae),e(Vae,elo),e(vs,olo),e(vs,oB),e(oB,rlo),e(vs,tlo),e(vs,rB),e(rB,alo),e(vs,nlo),e(k,slo),e(k,Fs),e(Fs,Xae),e(Xae,llo),e(Fs,ilo),e(Fs,tB),e(tB,dlo),e(Fs,clo),e(Fs,aB),e(aB,flo),e(Fs,mlo),e(k,glo),e(k,Ts),e(Ts,zae),e(zae,hlo),e(Ts,plo),e(Ts,nB),e(nB,_lo),e(Ts,ulo),e(Ts,sB),e(sB,blo),e(Ts,vlo),e(k,Flo),e(k,Ms),e(Ms,Wae),e(Wae,Tlo),e(Ms,Mlo),e(Ms,lB),e(lB,Elo),e(Ms,Clo),e(Ms,iB),e(iB,wlo),e(Ms,Alo),e(k,ylo),e(k,Es),e(Es,Qae),e(Qae,Llo),e(Es,xlo),e(Es,dB),e(dB,$lo),e(Es,klo),e(Es,cB),e(cB,Slo),e(Es,Rlo),e(k,Plo),e(k,Cs),e(Cs,Hae),e(Hae,Blo),e(Cs,Ilo),e(Cs,fB),e(fB,Nlo),e(Cs,qlo),e(Cs,mB),e(mB,jlo),e(Cs,Dlo),e(k,Glo),e(k,Ug),e(Ug,Uae),e(Uae,Olo),e(Ug,Vlo),e(Ug,gB),e(gB,Xlo),e(Ug,zlo),e(k,Wlo),e(k,Jg),e(Jg,Jae),e(Jae,Qlo),e(Jg,Hlo),e(Jg,hB),e(hB,Ulo),e(Jg,Jlo),e(k,Ylo),e(k,ws),e(ws,Yae),e(Yae,Klo),e(ws,Zlo),e(ws,pB),e(pB,eio),e(ws,oio),e(ws,_B),e(_B,rio),e(ws,tio),e(k,aio),e(k,As),e(As,Kae),e(Kae,nio),e(As,sio),e(As,uB),e(uB,lio),e(As,iio),e(As,bB),e(bB,dio),e(As,cio),e(k,fio),e(k,ys),e(ys,Zae),e(Zae,mio),e(ys,gio),e(ys,vB),e(vB,hio),e(ys,pio),e(ys,FB),e(FB,_io),e(ys,uio),e(k,bio),e(k,Yg),e(Yg,ene),e(ene,vio),e(Yg,Fio),e(Yg,TB),e(TB,Tio),e(Yg,Mio),e(k,Eio),e(k,Kg),e(Kg,one),e(one,Cio),e(Kg,wio),e(Kg,MB),e(MB,Aio),e(Kg,yio),e(k,Lio),e(k,Zg),e(Zg,rne),e(rne,xio),e(Zg,$io),e(Zg,EB),e(EB,kio),e(Zg,Sio),e(k,Rio),e(k,Ls),e(Ls,tne),e(tne,Pio),e(Ls,Bio),e(Ls,CB),e(CB,Iio),e(Ls,Nio),e(Ls,wB),e(wB,qio),e(Ls,jio),e(k,Dio),e(k,eh),e(eh,ane),e(ane,Gio),e(eh,Oio),e(eh,AB),e(AB,Vio),e(eh,Xio),e(k,zio),e(k,oh),e(oh,nne),e(nne,Wio),e(oh,Qio),e(oh,yB),e(yB,Hio),e(oh,Uio),e(k,Jio),e(k,rh),e(rh,sne),e(sne,Yio),e(rh,Kio),e(rh,LB),e(LB,Zio),e(rh,edo),e(k,odo),e(k,xs),e(xs,lne),e(lne,rdo),e(xs,tdo),e(xs,xB),e(xB,ado),e(xs,ndo),e(xs,$B),e($B,sdo),e(xs,ldo),e(k,ido),e(k,th),e(th,ine),e(ine,ddo),e(th,cdo),e(th,kB),e(kB,fdo),e(th,mdo),e(k,gdo),e(k,ah),e(ah,dne),e(dne,hdo),e(ah,pdo),e(ah,SB),e(SB,_do),e(ah,udo),e(k,bdo),e(k,$s),e($s,cne),e(cne,vdo),e($s,Fdo),e($s,RB),e(RB,Tdo),e($s,Mdo),e($s,PB),e(PB,Edo),e($s,Cdo),e(k,wdo),e(k,ks),e(ks,fne),e(fne,Ado),e(ks,ydo),e(ks,BB),e(BB,Ldo),e(ks,xdo),e(ks,IB),e(IB,$do),e(ks,kdo),e(k,Sdo),e(k,Ss),e(Ss,mne),e(mne,Rdo),e(Ss,Pdo),e(Ss,NB),e(NB,Bdo),e(Ss,Ido),e(Ss,qB),e(qB,Ndo),e(Ss,qdo),e(k,jdo),e(k,Rs),e(Rs,gne),e(gne,Ddo),e(Rs,Gdo),e(Rs,jB),e(jB,Odo),e(Rs,Vdo),e(Rs,DB),e(DB,Xdo),e(Rs,zdo),e(Cr,Wdo),M(nh,Cr,null),e(wo,Qdo),e(wo,sh),M(Xy,sh,null),e(sh,Hdo),e(sh,hne),e(hne,Udo),b(f,Eqe,u),b(f,Mi,u),e(Mi,lh),e(lh,pne),M(zy,pne,null),e(Mi,Jdo),e(Mi,_ne),e(_ne,Ydo),b(f,Cqe,u),b(f,Ao,u),M(Wy,Ao,null),e(Ao,Kdo),e(Ao,Qy),e(Qy,Zdo),e(Qy,GB),e(GB,eco),e(Qy,oco),e(Ao,rco),e(Ao,Hy),e(Hy,tco),e(Hy,une),e(une,aco),e(Hy,nco),e(Ao,sco),e(Ao,He),M(Uy,He,null),e(He,lco),e(He,bne),e(bne,ico),e(He,dco),e(He,ya),e(ya,cco),e(ya,vne),e(vne,fco),e(ya,mco),e(ya,Fne),e(Fne,gco),e(ya,hco),e(ya,Tne),e(Tne,pco),e(ya,_co),e(He,uco),e(He,Y),e(Y,ih),e(ih,Mne),e(Mne,bco),e(ih,vco),e(ih,OB),e(OB,Fco),e(ih,Tco),e(Y,Mco),e(Y,dh),e(dh,Ene),e(Ene,Eco),e(dh,Cco),e(dh,VB),e(VB,wco),e(dh,Aco),e(Y,yco),e(Y,ch),e(ch,Cne),e(Cne,Lco),e(ch,xco),e(ch,XB),e(XB,$co),e(ch,kco),e(Y,Sco),e(Y,fh),e(fh,wne),e(wne,Rco),e(fh,Pco),e(fh,zB),e(zB,Bco),e(fh,Ico),e(Y,Nco),e(Y,mh),e(mh,Ane),e(Ane,qco),e(mh,jco),e(mh,WB),e(WB,Dco),e(mh,Gco),e(Y,Oco),e(Y,gh),e(gh,yne),e(yne,Vco),e(gh,Xco),e(gh,QB),e(QB,zco),e(gh,Wco),e(Y,Qco),e(Y,hh),e(hh,Lne),e(Lne,Hco),e(hh,Uco),e(hh,HB),e(HB,Jco),e(hh,Yco),e(Y,Kco),e(Y,ph),e(ph,xne),e(xne,Zco),e(ph,efo),e(ph,UB),e(UB,ofo),e(ph,rfo),e(Y,tfo),e(Y,_h),e(_h,$ne),e($ne,afo),e(_h,nfo),e(_h,JB),e(JB,sfo),e(_h,lfo),e(Y,ifo),e(Y,uh),e(uh,kne),e(kne,dfo),e(uh,cfo),e(uh,YB),e(YB,ffo),e(uh,mfo),e(Y,gfo),e(Y,bh),e(bh,Sne),e(Sne,hfo),e(bh,pfo),e(bh,KB),e(KB,_fo),e(bh,ufo),e(Y,bfo),e(Y,vh),e(vh,Rne),e(Rne,vfo),e(vh,Ffo),e(vh,ZB),e(ZB,Tfo),e(vh,Mfo),e(Y,Efo),e(Y,Fh),e(Fh,Pne),e(Pne,Cfo),e(Fh,wfo),e(Fh,eI),e(eI,Afo),e(Fh,yfo),e(Y,Lfo),e(Y,Th),e(Th,Bne),e(Bne,xfo),e(Th,$fo),e(Th,oI),e(oI,kfo),e(Th,Sfo),e(Y,Rfo),e(Y,Mh),e(Mh,Ine),e(Ine,Pfo),e(Mh,Bfo),e(Mh,rI),e(rI,Ifo),e(Mh,Nfo),e(Y,qfo),e(Y,Eh),e(Eh,Nne),e(Nne,jfo),e(Eh,Dfo),e(Eh,tI),e(tI,Gfo),e(Eh,Ofo),e(Y,Vfo),e(Y,Ch),e(Ch,qne),e(qne,Xfo),e(Ch,zfo),e(Ch,aI),e(aI,Wfo),e(Ch,Qfo),e(Y,Hfo),e(Y,wh),e(wh,jne),e(jne,Ufo),e(wh,Jfo),e(wh,nI),e(nI,Yfo),e(wh,Kfo),e(Y,Zfo),e(Y,Ah),e(Ah,Dne),e(Dne,emo),e(Ah,omo),e(Ah,sI),e(sI,rmo),e(Ah,tmo),e(Y,amo),e(Y,yh),e(yh,Gne),e(Gne,nmo),e(yh,smo),e(yh,lI),e(lI,lmo),e(yh,imo),e(Y,dmo),e(Y,Lh),e(Lh,One),e(One,cmo),e(Lh,fmo),e(Lh,iI),e(iI,mmo),e(Lh,gmo),e(Y,hmo),e(Y,xh),e(xh,Vne),e(Vne,pmo),e(xh,_mo),e(xh,dI),e(dI,umo),e(xh,bmo),e(Y,vmo),e(Y,$h),e($h,Xne),e(Xne,Fmo),e($h,Tmo),e($h,cI),e(cI,Mmo),e($h,Emo),e(Y,Cmo),e(Y,kh),e(kh,zne),e(zne,wmo),e(kh,Amo),e(kh,fI),e(fI,ymo),e(kh,Lmo),e(Y,xmo),e(Y,Sh),e(Sh,Wne),e(Wne,$mo),e(Sh,kmo),e(Sh,mI),e(mI,Smo),e(Sh,Rmo),e(Y,Pmo),e(Y,Rh),e(Rh,Qne),e(Qne,Bmo),e(Rh,Imo),e(Rh,gI),e(gI,Nmo),e(Rh,qmo),e(Y,jmo),e(Y,Ph),e(Ph,Hne),e(Hne,Dmo),e(Ph,Gmo),e(Ph,hI),e(hI,Omo),e(Ph,Vmo),e(Y,Xmo),e(Y,Bh),e(Bh,Une),e(Une,zmo),e(Bh,Wmo),e(Bh,pI),e(pI,Qmo),e(Bh,Hmo),e(Y,Umo),e(Y,Ih),e(Ih,Jne),e(Jne,Jmo),e(Ih,Ymo),e(Ih,_I),e(_I,Kmo),e(Ih,Zmo),e(Y,ego),e(Y,Nh),e(Nh,Yne),e(Yne,ogo),e(Nh,rgo),e(Nh,uI),e(uI,tgo),e(Nh,ago),e(He,ngo),M(qh,He,null),e(He,sgo),M(jh,He,null),e(Ao,lgo),e(Ao,Dh),M(Jy,Dh,null),e(Dh,igo),e(Dh,Kne),e(Kne,dgo),b(f,wqe,u),b(f,Ei,u),e(Ei,Gh),e(Gh,Zne),M(Yy,Zne,null),e(Ei,cgo),e(Ei,ese),e(ese,fgo),b(f,Aqe,u),b(f,yo,u),M(Ky,yo,null),e(yo,mgo),e(yo,Zy),e(Zy,ggo),e(Zy,bI),e(bI,hgo),e(Zy,pgo),e(yo,_go),e(yo,eL),e(eL,ugo),e(eL,ose),e(ose,bgo),e(eL,vgo),e(yo,Fgo),e(yo,Ue),M(oL,Ue,null),e(Ue,Tgo),e(Ue,rse),e(rse,Mgo),e(Ue,Ego),e(Ue,Ci),e(Ci,Cgo),e(Ci,tse),e(tse,wgo),e(Ci,Ago),e(Ci,ase),e(ase,ygo),e(Ci,Lgo),e(Ue,xgo),e(Ue,he),e(he,Oh),e(Oh,nse),e(nse,$go),e(Oh,kgo),e(Oh,vI),e(vI,Sgo),e(Oh,Rgo),e(he,Pgo),e(he,Vh),e(Vh,sse),e(sse,Bgo),e(Vh,Igo),e(Vh,lse),e(lse,Ngo),e(Vh,qgo),e(he,jgo),e(he,Xh),e(Xh,ise),e(ise,Dgo),e(Xh,Ggo),e(Xh,FI),e(FI,Ogo),e(Xh,Vgo),e(he,Xgo),e(he,zh),e(zh,dse),e(dse,zgo),e(zh,Wgo),e(zh,TI),e(TI,Qgo),e(zh,Hgo),e(he,Ugo),e(he,Wh),e(Wh,cse),e(cse,Jgo),e(Wh,Ygo),e(Wh,MI),e(MI,Kgo),e(Wh,Zgo),e(he,eho),e(he,Qh),e(Qh,fse),e(fse,oho),e(Qh,rho),e(Qh,EI),e(EI,tho),e(Qh,aho),e(he,nho),e(he,Hh),e(Hh,mse),e(mse,sho),e(Hh,lho),e(Hh,CI),e(CI,iho),e(Hh,dho),e(he,cho),e(he,Uh),e(Uh,gse),e(gse,fho),e(Uh,mho),e(Uh,wI),e(wI,gho),e(Uh,hho),e(he,pho),e(he,Jh),e(Jh,hse),e(hse,_ho),e(Jh,uho),e(Jh,AI),e(AI,bho),e(Jh,vho),e(he,Fho),e(he,Yh),e(Yh,pse),e(pse,Tho),e(Yh,Mho),e(Yh,yI),e(yI,Eho),e(Yh,Cho),e(he,who),e(he,Kh),e(Kh,_se),e(_se,Aho),e(Kh,yho),e(Kh,LI),e(LI,Lho),e(Kh,xho),e(he,$ho),e(he,Zh),e(Zh,use),e(use,kho),e(Zh,Sho),e(Zh,xI),e(xI,Rho),e(Zh,Pho),e(he,Bho),e(he,ep),e(ep,bse),e(bse,Iho),e(ep,Nho),e(ep,$I),e($I,qho),e(ep,jho),e(he,Dho),e(he,op),e(op,vse),e(vse,Gho),e(op,Oho),e(op,kI),e(kI,Vho),e(op,Xho),e(he,zho),e(he,rp),e(rp,Fse),e(Fse,Who),e(rp,Qho),e(rp,SI),e(SI,Hho),e(rp,Uho),e(he,Jho),e(he,tp),e(tp,Tse),e(Tse,Yho),e(tp,Kho),e(tp,RI),e(RI,Zho),e(tp,epo),e(he,opo),e(he,ap),e(ap,Mse),e(Mse,rpo),e(ap,tpo),e(ap,PI),e(PI,apo),e(ap,npo),e(Ue,spo),M(np,Ue,null),e(Ue,lpo),M(sp,Ue,null),e(yo,ipo),e(yo,lp),M(rL,lp,null),e(lp,dpo),e(lp,Ese),e(Ese,cpo),b(f,yqe,u),b(f,wi,u),e(wi,ip),e(ip,Cse),M(tL,Cse,null),e(wi,fpo),e(wi,wse),e(wse,mpo),b(f,Lqe,u),b(f,Lo,u),M(aL,Lo,null),e(Lo,gpo),e(Lo,Ai),e(Ai,hpo),e(Ai,BI),e(BI,ppo),e(Ai,_po),e(Ai,II),e(II,upo),e(Ai,bpo),e(Lo,vpo),e(Lo,nL),e(nL,Fpo),e(nL,Ase),e(Ase,Tpo),e(nL,Mpo),e(Lo,Epo),e(Lo,tt),M(sL,tt,null),e(tt,Cpo),e(tt,yse),e(yse,wpo),e(tt,Apo),e(tt,yi),e(yi,ypo),e(yi,Lse),e(Lse,Lpo),e(yi,xpo),e(yi,NI),e(NI,$po),e(yi,kpo),e(tt,Spo),M(dp,tt,null),e(Lo,Rpo),e(Lo,Je),M(lL,Je,null),e(Je,Ppo),e(Je,xse),e(xse,Bpo),e(Je,Ipo),e(Je,La),e(La,Npo),e(La,$se),e($se,qpo),e(La,jpo),e(La,kse),e(kse,Dpo),e(La,Gpo),e(La,Sse),e(Sse,Opo),e(La,Vpo),e(Je,Xpo),e(Je,x),e(x,cp),e(cp,Rse),e(Rse,zpo),e(cp,Wpo),e(cp,qI),e(qI,Qpo),e(cp,Hpo),e(x,Upo),e(x,fp),e(fp,Pse),e(Pse,Jpo),e(fp,Ypo),e(fp,jI),e(jI,Kpo),e(fp,Zpo),e(x,e_o),e(x,mp),e(mp,Bse),e(Bse,o_o),e(mp,r_o),e(mp,DI),e(DI,t_o),e(mp,a_o),e(x,n_o),e(x,gp),e(gp,Ise),e(Ise,s_o),e(gp,l_o),e(gp,GI),e(GI,i_o),e(gp,d_o),e(x,c_o),e(x,hp),e(hp,Nse),e(Nse,f_o),e(hp,m_o),e(hp,OI),e(OI,g_o),e(hp,h_o),e(x,p_o),e(x,pp),e(pp,qse),e(qse,__o),e(pp,u_o),e(pp,VI),e(VI,b_o),e(pp,v_o),e(x,F_o),e(x,_p),e(_p,jse),e(jse,T_o),e(_p,M_o),e(_p,XI),e(XI,E_o),e(_p,C_o),e(x,w_o),e(x,up),e(up,Dse),e(Dse,A_o),e(up,y_o),e(up,zI),e(zI,L_o),e(up,x_o),e(x,$_o),e(x,bp),e(bp,Gse),e(Gse,k_o),e(bp,S_o),e(bp,WI),e(WI,R_o),e(bp,P_o),e(x,B_o),e(x,vp),e(vp,Ose),e(Ose,I_o),e(vp,N_o),e(vp,QI),e(QI,q_o),e(vp,j_o),e(x,D_o),e(x,Fp),e(Fp,Vse),e(Vse,G_o),e(Fp,O_o),e(Fp,HI),e(HI,V_o),e(Fp,X_o),e(x,z_o),e(x,Tp),e(Tp,Xse),e(Xse,W_o),e(Tp,Q_o),e(Tp,UI),e(UI,H_o),e(Tp,U_o),e(x,J_o),e(x,Mp),e(Mp,zse),e(zse,Y_o),e(Mp,K_o),e(Mp,JI),e(JI,Z_o),e(Mp,euo),e(x,ouo),e(x,Ep),e(Ep,Wse),e(Wse,ruo),e(Ep,tuo),e(Ep,YI),e(YI,auo),e(Ep,nuo),e(x,suo),e(x,Cp),e(Cp,Qse),e(Qse,luo),e(Cp,iuo),e(Cp,KI),e(KI,duo),e(Cp,cuo),e(x,fuo),e(x,wp),e(wp,Hse),e(Hse,muo),e(wp,guo),e(wp,ZI),e(ZI,huo),e(wp,puo),e(x,_uo),e(x,Ap),e(Ap,Use),e(Use,uuo),e(Ap,buo),e(Ap,eN),e(eN,vuo),e(Ap,Fuo),e(x,Tuo),e(x,yp),e(yp,Jse),e(Jse,Muo),e(yp,Euo),e(yp,oN),e(oN,Cuo),e(yp,wuo),e(x,Auo),e(x,Lp),e(Lp,Yse),e(Yse,yuo),e(Lp,Luo),e(Lp,rN),e(rN,xuo),e(Lp,$uo),e(x,kuo),e(x,xp),e(xp,Kse),e(Kse,Suo),e(xp,Ruo),e(xp,tN),e(tN,Puo),e(xp,Buo),e(x,Iuo),e(x,$p),e($p,Zse),e(Zse,Nuo),e($p,quo),e($p,aN),e(aN,juo),e($p,Duo),e(x,Guo),e(x,kp),e(kp,ele),e(ele,Ouo),e(kp,Vuo),e(kp,nN),e(nN,Xuo),e(kp,zuo),e(x,Wuo),e(x,Sp),e(Sp,ole),e(ole,Quo),e(Sp,Huo),e(Sp,sN),e(sN,Uuo),e(Sp,Juo),e(x,Yuo),e(x,Rp),e(Rp,rle),e(rle,Kuo),e(Rp,Zuo),e(Rp,lN),e(lN,e2o),e(Rp,o2o),e(x,r2o),e(x,Pp),e(Pp,tle),e(tle,t2o),e(Pp,a2o),e(Pp,iN),e(iN,n2o),e(Pp,s2o),e(x,l2o),e(x,Bp),e(Bp,ale),e(ale,i2o),e(Bp,d2o),e(Bp,dN),e(dN,c2o),e(Bp,f2o),e(x,m2o),e(x,Ip),e(Ip,nle),e(nle,g2o),e(Ip,h2o),e(Ip,cN),e(cN,p2o),e(Ip,_2o),e(x,u2o),e(x,Np),e(Np,sle),e(sle,b2o),e(Np,v2o),e(Np,fN),e(fN,F2o),e(Np,T2o),e(x,M2o),e(x,qp),e(qp,lle),e(lle,E2o),e(qp,C2o),e(qp,mN),e(mN,w2o),e(qp,A2o),e(x,y2o),e(x,jp),e(jp,ile),e(ile,L2o),e(jp,x2o),e(jp,gN),e(gN,$2o),e(jp,k2o),e(x,S2o),e(x,Dp),e(Dp,dle),e(dle,R2o),e(Dp,P2o),e(Dp,hN),e(hN,B2o),e(Dp,I2o),e(x,N2o),e(x,Gp),e(Gp,cle),e(cle,q2o),e(Gp,j2o),e(Gp,pN),e(pN,D2o),e(Gp,G2o),e(x,O2o),e(x,Ps),e(Ps,fle),e(fle,V2o),e(Ps,X2o),e(Ps,_N),e(_N,z2o),e(Ps,W2o),e(Ps,uN),e(uN,Q2o),e(Ps,H2o),e(x,U2o),e(x,Op),e(Op,mle),e(mle,J2o),e(Op,Y2o),e(Op,bN),e(bN,K2o),e(Op,Z2o),e(x,e1o),e(x,Vp),e(Vp,gle),e(gle,o1o),e(Vp,r1o),e(Vp,vN),e(vN,t1o),e(Vp,a1o),e(x,n1o),e(x,Xp),e(Xp,hle),e(hle,s1o),e(Xp,l1o),e(Xp,FN),e(FN,i1o),e(Xp,d1o),e(x,c1o),e(x,zp),e(zp,ple),e(ple,f1o),e(zp,m1o),e(zp,TN),e(TN,g1o),e(zp,h1o),e(x,p1o),e(x,Wp),e(Wp,_le),e(_le,_1o),e(Wp,u1o),e(Wp,MN),e(MN,b1o),e(Wp,v1o),e(x,F1o),e(x,Qp),e(Qp,ule),e(ule,T1o),e(Qp,M1o),e(Qp,EN),e(EN,E1o),e(Qp,C1o),e(x,w1o),e(x,Hp),e(Hp,ble),e(ble,A1o),e(Hp,y1o),e(Hp,CN),e(CN,L1o),e(Hp,x1o),e(x,$1o),e(x,Up),e(Up,vle),e(vle,k1o),e(Up,S1o),e(Up,wN),e(wN,R1o),e(Up,P1o),e(x,B1o),e(x,Jp),e(Jp,Fle),e(Fle,I1o),e(Jp,N1o),e(Jp,AN),e(AN,q1o),e(Jp,j1o),e(x,D1o),e(x,Yp),e(Yp,Tle),e(Tle,G1o),e(Yp,O1o),e(Yp,yN),e(yN,V1o),e(Yp,X1o),e(x,z1o),e(x,Kp),e(Kp,Mle),e(Mle,W1o),e(Kp,Q1o),e(Kp,LN),e(LN,H1o),e(Kp,U1o),e(x,J1o),e(x,Zp),e(Zp,Ele),e(Ele,Y1o),e(Zp,K1o),e(Zp,xN),e(xN,Z1o),e(Zp,ebo),e(x,obo),e(x,e_),e(e_,Cle),e(Cle,rbo),e(e_,tbo),e(e_,$N),e($N,abo),e(e_,nbo),e(x,sbo),e(x,o_),e(o_,wle),e(wle,lbo),e(o_,ibo),e(o_,kN),e(kN,dbo),e(o_,cbo),e(x,fbo),e(x,r_),e(r_,Ale),e(Ale,mbo),e(r_,gbo),e(r_,SN),e(SN,hbo),e(r_,pbo),e(x,_bo),e(x,t_),e(t_,yle),e(yle,ubo),e(t_,bbo),e(t_,RN),e(RN,vbo),e(t_,Fbo),e(x,Tbo),e(x,a_),e(a_,Lle),e(Lle,Mbo),e(a_,Ebo),e(a_,PN),e(PN,Cbo),e(a_,wbo),e(x,Abo),e(x,n_),e(n_,xle),e(xle,ybo),e(n_,Lbo),e(n_,BN),e(BN,xbo),e(n_,$bo),e(x,kbo),e(x,s_),e(s_,$le),e($le,Sbo),e(s_,Rbo),e(s_,IN),e(IN,Pbo),e(s_,Bbo),e(x,Ibo),e(x,l_),e(l_,kle),e(kle,Nbo),e(l_,qbo),e(l_,NN),e(NN,jbo),e(l_,Dbo),e(x,Gbo),e(x,i_),e(i_,Sle),e(Sle,Obo),e(i_,Vbo),e(i_,qN),e(qN,Xbo),e(i_,zbo),e(x,Wbo),e(x,d_),e(d_,Rle),e(Rle,Qbo),e(d_,Hbo),e(d_,jN),e(jN,Ubo),e(d_,Jbo),e(x,Ybo),e(x,c_),e(c_,Ple),e(Ple,Kbo),e(c_,Zbo),e(c_,DN),e(DN,e4o),e(c_,o4o),e(x,r4o),e(x,f_),e(f_,Ble),e(Ble,t4o),e(f_,a4o),e(f_,GN),e(GN,n4o),e(f_,s4o),e(x,l4o),e(x,m_),e(m_,Ile),e(Ile,i4o),e(m_,d4o),e(m_,ON),e(ON,c4o),e(m_,f4o),e(x,m4o),e(x,g_),e(g_,Nle),e(Nle,g4o),e(g_,h4o),e(g_,VN),e(VN,p4o),e(g_,_4o),e(x,u4o),e(x,h_),e(h_,qle),e(qle,b4o),e(h_,v4o),e(h_,XN),e(XN,F4o),e(h_,T4o),e(x,M4o),e(x,p_),e(p_,jle),e(jle,E4o),e(p_,C4o),e(p_,zN),e(zN,w4o),e(p_,A4o),e(x,y4o),e(x,__),e(__,Dle),e(Dle,L4o),e(__,x4o),e(__,WN),e(WN,$4o),e(__,k4o),e(x,S4o),e(x,u_),e(u_,Gle),e(Gle,R4o),e(u_,P4o),e(u_,QN),e(QN,B4o),e(u_,I4o),e(x,N4o),e(x,b_),e(b_,Ole),e(Ole,q4o),e(b_,j4o),e(b_,HN),e(HN,D4o),e(b_,G4o),e(x,O4o),e(x,v_),e(v_,Vle),e(Vle,V4o),e(v_,X4o),e(v_,UN),e(UN,z4o),e(v_,W4o),e(x,Q4o),e(x,F_),e(F_,Xle),e(Xle,H4o),e(F_,U4o),e(F_,JN),e(JN,J4o),e(F_,Y4o),e(x,K4o),e(x,T_),e(T_,zle),e(zle,Z4o),e(T_,evo),e(T_,YN),e(YN,ovo),e(T_,rvo),e(x,tvo),e(x,M_),e(M_,Wle),e(Wle,avo),e(M_,nvo),e(M_,KN),e(KN,svo),e(M_,lvo),e(x,ivo),e(x,E_),e(E_,Qle),e(Qle,dvo),e(E_,cvo),e(E_,ZN),e(ZN,fvo),e(E_,mvo),e(x,gvo),e(x,C_),e(C_,Hle),e(Hle,hvo),e(C_,pvo),e(C_,eq),e(eq,_vo),e(C_,uvo),e(x,bvo),e(x,w_),e(w_,Ule),e(Ule,vvo),e(w_,Fvo),e(w_,oq),e(oq,Tvo),e(w_,Mvo),e(x,Evo),e(x,A_),e(A_,Jle),e(Jle,Cvo),e(A_,wvo),e(A_,rq),e(rq,Avo),e(A_,yvo),e(x,Lvo),e(x,y_),e(y_,Yle),e(Yle,xvo),e(y_,$vo),e(y_,tq),e(tq,kvo),e(y_,Svo),e(x,Rvo),e(x,L_),e(L_,Kle),e(Kle,Pvo),e(L_,Bvo),e(L_,aq),e(aq,Ivo),e(L_,Nvo),e(x,qvo),e(x,x_),e(x_,Zle),e(Zle,jvo),e(x_,Dvo),e(x_,nq),e(nq,Gvo),e(x_,Ovo),e(x,Vvo),e(x,$_),e($_,eie),e(eie,Xvo),e($_,zvo),e($_,sq),e(sq,Wvo),e($_,Qvo),e(x,Hvo),e(x,k_),e(k_,oie),e(oie,Uvo),e(k_,Jvo),e(k_,lq),e(lq,Yvo),e(k_,Kvo),e(x,Zvo),e(x,S_),e(S_,rie),e(rie,e0o),e(S_,o0o),e(S_,iq),e(iq,r0o),e(S_,t0o),e(x,a0o),e(x,R_),e(R_,tie),e(tie,n0o),e(R_,s0o),e(R_,dq),e(dq,l0o),e(R_,i0o),e(x,d0o),e(x,P_),e(P_,aie),e(aie,c0o),e(P_,f0o),e(P_,cq),e(cq,m0o),e(P_,g0o),e(x,h0o),e(x,B_),e(B_,nie),e(nie,p0o),e(B_,_0o),e(B_,fq),e(fq,u0o),e(B_,b0o),e(x,v0o),e(x,I_),e(I_,sie),e(sie,F0o),e(I_,T0o),e(I_,mq),e(mq,M0o),e(I_,E0o),e(x,C0o),e(x,N_),e(N_,lie),e(lie,w0o),e(N_,A0o),e(N_,gq),e(gq,y0o),e(N_,L0o),e(x,x0o),e(x,q_),e(q_,iie),e(iie,$0o),e(q_,k0o),e(q_,hq),e(hq,S0o),e(q_,R0o),e(x,P0o),e(x,j_),e(j_,die),e(die,B0o),e(j_,I0o),e(j_,pq),e(pq,N0o),e(j_,q0o),e(x,j0o),e(x,D_),e(D_,cie),e(cie,D0o),e(D_,G0o),e(D_,_q),e(_q,O0o),e(D_,V0o),e(x,X0o),e(x,G_),e(G_,fie),e(fie,z0o),e(G_,W0o),e(G_,uq),e(uq,Q0o),e(G_,H0o),e(x,U0o),e(x,O_),e(O_,mie),e(mie,J0o),e(O_,Y0o),e(O_,bq),e(bq,K0o),e(O_,Z0o),e(x,eFo),e(x,V_),e(V_,gie),e(gie,oFo),e(V_,rFo),e(V_,vq),e(vq,tFo),e(V_,aFo),e(x,nFo),e(x,X_),e(X_,hie),e(hie,sFo),e(X_,lFo),e(X_,Fq),e(Fq,iFo),e(X_,dFo),e(x,cFo),e(x,z_),e(z_,pie),e(pie,fFo),e(z_,mFo),e(z_,Tq),e(Tq,gFo),e(z_,hFo),e(x,pFo),e(x,W_),e(W_,_ie),e(_ie,_Fo),e(W_,uFo),e(W_,Mq),e(Mq,bFo),e(W_,vFo),e(x,FFo),e(x,Q_),e(Q_,uie),e(uie,TFo),e(Q_,MFo),e(Q_,Eq),e(Eq,EFo),e(Q_,CFo),e(x,wFo),e(x,H_),e(H_,bie),e(bie,AFo),e(H_,yFo),e(H_,Cq),e(Cq,LFo),e(H_,xFo),e(x,$Fo),e(x,U_),e(U_,vie),e(vie,kFo),e(U_,SFo),e(U_,wq),e(wq,RFo),e(U_,PFo),e(x,BFo),e(x,J_),e(J_,Fie),e(Fie,IFo),e(J_,NFo),e(J_,Aq),e(Aq,qFo),e(J_,jFo),e(x,DFo),e(x,Y_),e(Y_,Tie),e(Tie,GFo),e(Y_,OFo),e(Y_,yq),e(yq,VFo),e(Y_,XFo),e(x,zFo),e(x,K_),e(K_,Mie),e(Mie,WFo),e(K_,QFo),e(K_,Lq),e(Lq,HFo),e(K_,UFo),e(x,JFo),e(x,Z_),e(Z_,Eie),e(Eie,YFo),e(Z_,KFo),e(Z_,xq),e(xq,ZFo),e(Z_,e6o),e(x,o6o),e(x,eu),e(eu,Cie),e(Cie,r6o),e(eu,t6o),e(eu,$q),e($q,a6o),e(eu,n6o),e(x,s6o),e(x,ou),e(ou,wie),e(wie,l6o),e(ou,i6o),e(ou,kq),e(kq,d6o),e(ou,c6o),e(x,f6o),e(x,ru),e(ru,Aie),e(Aie,m6o),e(ru,g6o),e(ru,Sq),e(Sq,h6o),e(ru,p6o),e(x,_6o),e(x,tu),e(tu,yie),e(yie,u6o),e(tu,b6o),e(tu,Rq),e(Rq,v6o),e(tu,F6o),e(Je,T6o),e(Je,au),e(au,M6o),e(au,Lie),e(Lie,E6o),e(au,C6o),e(au,xie),e(xie,w6o),e(Je,A6o),M(nu,Je,null),b(f,xqe,u),b(f,Li,u),e(Li,su),e(su,$ie),M(iL,$ie,null),e(Li,y6o),e(Li,kie),e(kie,L6o),b(f,$qe,u),b(f,xo,u),M(dL,xo,null),e(xo,x6o),e(xo,xi),e(xi,$6o),e(xi,Pq),e(Pq,k6o),e(xi,S6o),e(xi,Bq),e(Bq,R6o),e(xi,P6o),e(xo,B6o),e(xo,cL),e(cL,I6o),e(cL,Sie),e(Sie,N6o),e(cL,q6o),e(xo,j6o),e(xo,at),M(fL,at,null),e(at,D6o),e(at,Rie),e(Rie,G6o),e(at,O6o),e(at,$i),e($i,V6o),e($i,Pie),e(Pie,X6o),e($i,z6o),e($i,Iq),e(Iq,W6o),e($i,Q6o),e(at,H6o),M(lu,at,null),e(xo,U6o),e(xo,Ye),M(mL,Ye,null),e(Ye,J6o),e(Ye,Bie),e(Bie,Y6o),e(Ye,K6o),e(Ye,xa),e(xa,Z6o),e(xa,Iie),e(Iie,eTo),e(xa,oTo),e(xa,Nie),e(Nie,rTo),e(xa,tTo),e(xa,qie),e(qie,aTo),e(xa,nTo),e(Ye,sTo),e(Ye,G),e(G,iu),e(iu,jie),e(jie,lTo),e(iu,iTo),e(iu,Nq),e(Nq,dTo),e(iu,cTo),e(G,fTo),e(G,du),e(du,Die),e(Die,mTo),e(du,gTo),e(du,qq),e(qq,hTo),e(du,pTo),e(G,_To),e(G,cu),e(cu,Gie),e(Gie,uTo),e(cu,bTo),e(cu,jq),e(jq,vTo),e(cu,FTo),e(G,TTo),e(G,fu),e(fu,Oie),e(Oie,MTo),e(fu,ETo),e(fu,Dq),e(Dq,CTo),e(fu,wTo),e(G,ATo),e(G,mu),e(mu,Vie),e(Vie,yTo),e(mu,LTo),e(mu,Gq),e(Gq,xTo),e(mu,$To),e(G,kTo),e(G,gu),e(gu,Xie),e(Xie,STo),e(gu,RTo),e(gu,Oq),e(Oq,PTo),e(gu,BTo),e(G,ITo),e(G,hu),e(hu,zie),e(zie,NTo),e(hu,qTo),e(hu,Vq),e(Vq,jTo),e(hu,DTo),e(G,GTo),e(G,pu),e(pu,Wie),e(Wie,OTo),e(pu,VTo),e(pu,Xq),e(Xq,XTo),e(pu,zTo),e(G,WTo),e(G,_u),e(_u,Qie),e(Qie,QTo),e(_u,HTo),e(_u,zq),e(zq,UTo),e(_u,JTo),e(G,YTo),e(G,uu),e(uu,Hie),e(Hie,KTo),e(uu,ZTo),e(uu,Wq),e(Wq,eMo),e(uu,oMo),e(G,rMo),e(G,bu),e(bu,Uie),e(Uie,tMo),e(bu,aMo),e(bu,Qq),e(Qq,nMo),e(bu,sMo),e(G,lMo),e(G,vu),e(vu,Jie),e(Jie,iMo),e(vu,dMo),e(vu,Hq),e(Hq,cMo),e(vu,fMo),e(G,mMo),e(G,Fu),e(Fu,Yie),e(Yie,gMo),e(Fu,hMo),e(Fu,Uq),e(Uq,pMo),e(Fu,_Mo),e(G,uMo),e(G,Tu),e(Tu,Kie),e(Kie,bMo),e(Tu,vMo),e(Tu,Jq),e(Jq,FMo),e(Tu,TMo),e(G,MMo),e(G,Mu),e(Mu,Zie),e(Zie,EMo),e(Mu,CMo),e(Mu,Yq),e(Yq,wMo),e(Mu,AMo),e(G,yMo),e(G,Eu),e(Eu,ede),e(ede,LMo),e(Eu,xMo),e(Eu,Kq),e(Kq,$Mo),e(Eu,kMo),e(G,SMo),e(G,Cu),e(Cu,ode),e(ode,RMo),e(Cu,PMo),e(Cu,Zq),e(Zq,BMo),e(Cu,IMo),e(G,NMo),e(G,wu),e(wu,rde),e(rde,qMo),e(wu,jMo),e(wu,ej),e(ej,DMo),e(wu,GMo),e(G,OMo),e(G,Au),e(Au,tde),e(tde,VMo),e(Au,XMo),e(Au,oj),e(oj,zMo),e(Au,WMo),e(G,QMo),e(G,yu),e(yu,ade),e(ade,HMo),e(yu,UMo),e(yu,rj),e(rj,JMo),e(yu,YMo),e(G,KMo),e(G,Lu),e(Lu,nde),e(nde,ZMo),e(Lu,eEo),e(Lu,tj),e(tj,oEo),e(Lu,rEo),e(G,tEo),e(G,xu),e(xu,sde),e(sde,aEo),e(xu,nEo),e(xu,aj),e(aj,sEo),e(xu,lEo),e(G,iEo),e(G,$u),e($u,lde),e(lde,dEo),e($u,cEo),e($u,nj),e(nj,fEo),e($u,mEo),e(G,gEo),e(G,ku),e(ku,ide),e(ide,hEo),e(ku,pEo),e(ku,sj),e(sj,_Eo),e(ku,uEo),e(G,bEo),e(G,Su),e(Su,dde),e(dde,vEo),e(Su,FEo),e(Su,lj),e(lj,TEo),e(Su,MEo),e(G,EEo),e(G,Ru),e(Ru,cde),e(cde,CEo),e(Ru,wEo),e(Ru,ij),e(ij,AEo),e(Ru,yEo),e(G,LEo),e(G,Pu),e(Pu,fde),e(fde,xEo),e(Pu,$Eo),e(Pu,dj),e(dj,kEo),e(Pu,SEo),e(G,REo),e(G,Bu),e(Bu,mde),e(mde,PEo),e(Bu,BEo),e(Bu,cj),e(cj,IEo),e(Bu,NEo),e(G,qEo),e(G,Iu),e(Iu,gde),e(gde,jEo),e(Iu,DEo),e(Iu,fj),e(fj,GEo),e(Iu,OEo),e(G,VEo),e(G,Nu),e(Nu,hde),e(hde,XEo),e(Nu,zEo),e(Nu,mj),e(mj,WEo),e(Nu,QEo),e(G,HEo),e(G,qu),e(qu,pde),e(pde,UEo),e(qu,JEo),e(qu,gj),e(gj,YEo),e(qu,KEo),e(G,ZEo),e(G,ju),e(ju,_de),e(_de,eCo),e(ju,oCo),e(ju,hj),e(hj,rCo),e(ju,tCo),e(G,aCo),e(G,Du),e(Du,ude),e(ude,nCo),e(Du,sCo),e(Du,pj),e(pj,lCo),e(Du,iCo),e(G,dCo),e(G,Gu),e(Gu,bde),e(bde,cCo),e(Gu,fCo),e(Gu,_j),e(_j,mCo),e(Gu,gCo),e(G,hCo),e(G,Ou),e(Ou,vde),e(vde,pCo),e(Ou,_Co),e(Ou,uj),e(uj,uCo),e(Ou,bCo),e(G,vCo),e(G,Vu),e(Vu,Fde),e(Fde,FCo),e(Vu,TCo),e(Vu,bj),e(bj,MCo),e(Vu,ECo),e(G,CCo),e(G,Xu),e(Xu,Tde),e(Tde,wCo),e(Xu,ACo),e(Xu,vj),e(vj,yCo),e(Xu,LCo),e(G,xCo),e(G,zu),e(zu,Mde),e(Mde,$Co),e(zu,kCo),e(zu,Fj),e(Fj,SCo),e(zu,RCo),e(G,PCo),e(G,Wu),e(Wu,Ede),e(Ede,BCo),e(Wu,ICo),e(Wu,Tj),e(Tj,NCo),e(Wu,qCo),e(G,jCo),e(G,Qu),e(Qu,Cde),e(Cde,DCo),e(Qu,GCo),e(Qu,Mj),e(Mj,OCo),e(Qu,VCo),e(G,XCo),e(G,Hu),e(Hu,wde),e(wde,zCo),e(Hu,WCo),e(Hu,Ej),e(Ej,QCo),e(Hu,HCo),e(G,UCo),e(G,Uu),e(Uu,Ade),e(Ade,JCo),e(Uu,YCo),e(Uu,Cj),e(Cj,KCo),e(Uu,ZCo),e(Ye,e5o),e(Ye,Ju),e(Ju,o5o),e(Ju,yde),e(yde,r5o),e(Ju,t5o),e(Ju,Lde),e(Lde,a5o),e(Ye,n5o),M(Yu,Ye,null),b(f,kqe,u),b(f,ki,u),e(ki,Ku),e(Ku,xde),M(gL,xde,null),e(ki,s5o),e(ki,$de),e($de,l5o),b(f,Sqe,u),b(f,$o,u),M(hL,$o,null),e($o,i5o),e($o,Si),e(Si,d5o),e(Si,wj),e(wj,c5o),e(Si,f5o),e(Si,Aj),e(Aj,m5o),e(Si,g5o),e($o,h5o),e($o,pL),e(pL,p5o),e(pL,kde),e(kde,_5o),e(pL,u5o),e($o,b5o),e($o,nt),M(_L,nt,null),e(nt,v5o),e(nt,Sde),e(Sde,F5o),e(nt,T5o),e(nt,Ri),e(Ri,M5o),e(Ri,Rde),e(Rde,E5o),e(Ri,C5o),e(Ri,yj),e(yj,w5o),e(Ri,A5o),e(nt,y5o),M(Zu,nt,null),e($o,L5o),e($o,Ke),M(uL,Ke,null),e(Ke,x5o),e(Ke,Pde),e(Pde,$5o),e(Ke,k5o),e(Ke,$a),e($a,S5o),e($a,Bde),e(Bde,R5o),e($a,P5o),e($a,Ide),e(Ide,B5o),e($a,I5o),e($a,Nde),e(Nde,N5o),e($a,q5o),e(Ke,j5o),e(Ke,z),e(z,e2),e(e2,qde),e(qde,D5o),e(e2,G5o),e(e2,Lj),e(Lj,O5o),e(e2,V5o),e(z,X5o),e(z,o2),e(o2,jde),e(jde,z5o),e(o2,W5o),e(o2,xj),e(xj,Q5o),e(o2,H5o),e(z,U5o),e(z,r2),e(r2,Dde),e(Dde,J5o),e(r2,Y5o),e(r2,$j),e($j,K5o),e(r2,Z5o),e(z,e3o),e(z,t2),e(t2,Gde),e(Gde,o3o),e(t2,r3o),e(t2,kj),e(kj,t3o),e(t2,a3o),e(z,n3o),e(z,a2),e(a2,Ode),e(Ode,s3o),e(a2,l3o),e(a2,Sj),e(Sj,i3o),e(a2,d3o),e(z,c3o),e(z,n2),e(n2,Vde),e(Vde,f3o),e(n2,m3o),e(n2,Rj),e(Rj,g3o),e(n2,h3o),e(z,p3o),e(z,s2),e(s2,Xde),e(Xde,_3o),e(s2,u3o),e(s2,Pj),e(Pj,b3o),e(s2,v3o),e(z,F3o),e(z,l2),e(l2,zde),e(zde,T3o),e(l2,M3o),e(l2,Bj),e(Bj,E3o),e(l2,C3o),e(z,w3o),e(z,i2),e(i2,Wde),e(Wde,A3o),e(i2,y3o),e(i2,Ij),e(Ij,L3o),e(i2,x3o),e(z,$3o),e(z,d2),e(d2,Qde),e(Qde,k3o),e(d2,S3o),e(d2,Nj),e(Nj,R3o),e(d2,P3o),e(z,B3o),e(z,c2),e(c2,Hde),e(Hde,I3o),e(c2,N3o),e(c2,qj),e(qj,q3o),e(c2,j3o),e(z,D3o),e(z,f2),e(f2,Ude),e(Ude,G3o),e(f2,O3o),e(f2,jj),e(jj,V3o),e(f2,X3o),e(z,z3o),e(z,m2),e(m2,Jde),e(Jde,W3o),e(m2,Q3o),e(m2,Dj),e(Dj,H3o),e(m2,U3o),e(z,J3o),e(z,g2),e(g2,Yde),e(Yde,Y3o),e(g2,K3o),e(g2,Gj),e(Gj,Z3o),e(g2,ewo),e(z,owo),e(z,h2),e(h2,Kde),e(Kde,rwo),e(h2,two),e(h2,Oj),e(Oj,awo),e(h2,nwo),e(z,swo),e(z,p2),e(p2,Zde),e(Zde,lwo),e(p2,iwo),e(p2,Vj),e(Vj,dwo),e(p2,cwo),e(z,fwo),e(z,_2),e(_2,ece),e(ece,mwo),e(_2,gwo),e(_2,Xj),e(Xj,hwo),e(_2,pwo),e(z,_wo),e(z,u2),e(u2,oce),e(oce,uwo),e(u2,bwo),e(u2,zj),e(zj,vwo),e(u2,Fwo),e(z,Two),e(z,b2),e(b2,rce),e(rce,Mwo),e(b2,Ewo),e(b2,Wj),e(Wj,Cwo),e(b2,wwo),e(z,Awo),e(z,v2),e(v2,tce),e(tce,ywo),e(v2,Lwo),e(v2,Qj),e(Qj,xwo),e(v2,$wo),e(z,kwo),e(z,F2),e(F2,ace),e(ace,Swo),e(F2,Rwo),e(F2,Hj),e(Hj,Pwo),e(F2,Bwo),e(z,Iwo),e(z,T2),e(T2,nce),e(nce,Nwo),e(T2,qwo),e(T2,Uj),e(Uj,jwo),e(T2,Dwo),e(z,Gwo),e(z,M2),e(M2,sce),e(sce,Owo),e(M2,Vwo),e(M2,Jj),e(Jj,Xwo),e(M2,zwo),e(z,Wwo),e(z,E2),e(E2,lce),e(lce,Qwo),e(E2,Hwo),e(E2,Yj),e(Yj,Uwo),e(E2,Jwo),e(z,Ywo),e(z,C2),e(C2,ice),e(ice,Kwo),e(C2,Zwo),e(C2,Kj),e(Kj,eAo),e(C2,oAo),e(z,rAo),e(z,w2),e(w2,dce),e(dce,tAo),e(w2,aAo),e(w2,Zj),e(Zj,nAo),e(w2,sAo),e(z,lAo),e(z,A2),e(A2,cce),e(cce,iAo),e(A2,dAo),e(A2,eD),e(eD,cAo),e(A2,fAo),e(z,mAo),e(z,y2),e(y2,fce),e(fce,gAo),e(y2,hAo),e(y2,oD),e(oD,pAo),e(y2,_Ao),e(z,uAo),e(z,L2),e(L2,mce),e(mce,bAo),e(L2,vAo),e(L2,rD),e(rD,FAo),e(L2,TAo),e(z,MAo),e(z,x2),e(x2,gce),e(gce,EAo),e(x2,CAo),e(x2,tD),e(tD,wAo),e(x2,AAo),e(z,yAo),e(z,$2),e($2,hce),e(hce,LAo),e($2,xAo),e($2,aD),e(aD,$Ao),e($2,kAo),e(z,SAo),e(z,k2),e(k2,pce),e(pce,RAo),e(k2,PAo),e(k2,nD),e(nD,BAo),e(k2,IAo),e(z,NAo),e(z,S2),e(S2,_ce),e(_ce,qAo),e(S2,jAo),e(S2,sD),e(sD,DAo),e(S2,GAo),e(z,OAo),e(z,R2),e(R2,uce),e(uce,VAo),e(R2,XAo),e(R2,lD),e(lD,zAo),e(R2,WAo),e(z,QAo),e(z,P2),e(P2,bce),e(bce,HAo),e(P2,UAo),e(P2,iD),e(iD,JAo),e(P2,YAo),e(z,KAo),e(z,B2),e(B2,vce),e(vce,ZAo),e(B2,eyo),e(B2,dD),e(dD,oyo),e(B2,ryo),e(z,tyo),e(z,I2),e(I2,Fce),e(Fce,ayo),e(I2,nyo),e(I2,cD),e(cD,syo),e(I2,lyo),e(Ke,iyo),e(Ke,N2),e(N2,dyo),e(N2,Tce),e(Tce,cyo),e(N2,fyo),e(N2,Mce),e(Mce,myo),e(Ke,gyo),M(q2,Ke,null),b(f,Rqe,u),b(f,Pi,u),e(Pi,j2),e(j2,Ece),M(bL,Ece,null),e(Pi,hyo),e(Pi,Cce),e(Cce,pyo),b(f,Pqe,u),b(f,ko,u),M(vL,ko,null),e(ko,_yo),e(ko,Bi),e(Bi,uyo),e(Bi,fD),e(fD,byo),e(Bi,vyo),e(Bi,mD),e(mD,Fyo),e(Bi,Tyo),e(ko,Myo),e(ko,FL),e(FL,Eyo),e(FL,wce),e(wce,Cyo),e(FL,wyo),e(ko,Ayo),e(ko,st),M(TL,st,null),e(st,yyo),e(st,Ace),e(Ace,Lyo),e(st,xyo),e(st,Ii),e(Ii,$yo),e(Ii,yce),e(yce,kyo),e(Ii,Syo),e(Ii,gD),e(gD,Ryo),e(Ii,Pyo),e(st,Byo),M(D2,st,null),e(ko,Iyo),e(ko,Ze),M(ML,Ze,null),e(Ze,Nyo),e(Ze,Lce),e(Lce,qyo),e(Ze,jyo),e(Ze,ka),e(ka,Dyo),e(ka,xce),e(xce,Gyo),e(ka,Oyo),e(ka,$ce),e($ce,Vyo),e(ka,Xyo),e(ka,kce),e(kce,zyo),e(ka,Wyo),e(Ze,Qyo),e(Ze,Q),e(Q,G2),e(G2,Sce),e(Sce,Hyo),e(G2,Uyo),e(G2,hD),e(hD,Jyo),e(G2,Yyo),e(Q,Kyo),e(Q,O2),e(O2,Rce),e(Rce,Zyo),e(O2,eLo),e(O2,pD),e(pD,oLo),e(O2,rLo),e(Q,tLo),e(Q,V2),e(V2,Pce),e(Pce,aLo),e(V2,nLo),e(V2,_D),e(_D,sLo),e(V2,lLo),e(Q,iLo),e(Q,X2),e(X2,Bce),e(Bce,dLo),e(X2,cLo),e(X2,uD),e(uD,fLo),e(X2,mLo),e(Q,gLo),e(Q,z2),e(z2,Ice),e(Ice,hLo),e(z2,pLo),e(z2,bD),e(bD,_Lo),e(z2,uLo),e(Q,bLo),e(Q,W2),e(W2,Nce),e(Nce,vLo),e(W2,FLo),e(W2,vD),e(vD,TLo),e(W2,MLo),e(Q,ELo),e(Q,Q2),e(Q2,qce),e(qce,CLo),e(Q2,wLo),e(Q2,FD),e(FD,ALo),e(Q2,yLo),e(Q,LLo),e(Q,H2),e(H2,jce),e(jce,xLo),e(H2,$Lo),e(H2,TD),e(TD,kLo),e(H2,SLo),e(Q,RLo),e(Q,U2),e(U2,Dce),e(Dce,PLo),e(U2,BLo),e(U2,MD),e(MD,ILo),e(U2,NLo),e(Q,qLo),e(Q,J2),e(J2,Gce),e(Gce,jLo),e(J2,DLo),e(J2,ED),e(ED,GLo),e(J2,OLo),e(Q,VLo),e(Q,Y2),e(Y2,Oce),e(Oce,XLo),e(Y2,zLo),e(Y2,CD),e(CD,WLo),e(Y2,QLo),e(Q,HLo),e(Q,K2),e(K2,Vce),e(Vce,ULo),e(K2,JLo),e(K2,wD),e(wD,YLo),e(K2,KLo),e(Q,ZLo),e(Q,Z2),e(Z2,Xce),e(Xce,e8o),e(Z2,o8o),e(Z2,AD),e(AD,r8o),e(Z2,t8o),e(Q,a8o),e(Q,e1),e(e1,zce),e(zce,n8o),e(e1,s8o),e(e1,yD),e(yD,l8o),e(e1,i8o),e(Q,d8o),e(Q,o1),e(o1,Wce),e(Wce,c8o),e(o1,f8o),e(o1,LD),e(LD,m8o),e(o1,g8o),e(Q,h8o),e(Q,r1),e(r1,Qce),e(Qce,p8o),e(r1,_8o),e(r1,xD),e(xD,u8o),e(r1,b8o),e(Q,v8o),e(Q,t1),e(t1,Hce),e(Hce,F8o),e(t1,T8o),e(t1,$D),e($D,M8o),e(t1,E8o),e(Q,C8o),e(Q,a1),e(a1,Uce),e(Uce,w8o),e(a1,A8o),e(a1,kD),e(kD,y8o),e(a1,L8o),e(Q,x8o),e(Q,n1),e(n1,Jce),e(Jce,$8o),e(n1,k8o),e(n1,SD),e(SD,S8o),e(n1,R8o),e(Q,P8o),e(Q,s1),e(s1,Yce),e(Yce,B8o),e(s1,I8o),e(s1,RD),e(RD,N8o),e(s1,q8o),e(Q,j8o),e(Q,l1),e(l1,Kce),e(Kce,D8o),e(l1,G8o),e(l1,PD),e(PD,O8o),e(l1,V8o),e(Q,X8o),e(Q,i1),e(i1,Zce),e(Zce,z8o),e(i1,W8o),e(i1,BD),e(BD,Q8o),e(i1,H8o),e(Q,U8o),e(Q,d1),e(d1,efe),e(efe,J8o),e(d1,Y8o),e(d1,ID),e(ID,K8o),e(d1,Z8o),e(Q,e7o),e(Q,c1),e(c1,ofe),e(ofe,o7o),e(c1,r7o),e(c1,ND),e(ND,t7o),e(c1,a7o),e(Q,n7o),e(Q,f1),e(f1,rfe),e(rfe,s7o),e(f1,l7o),e(f1,qD),e(qD,i7o),e(f1,d7o),e(Q,c7o),e(Q,m1),e(m1,tfe),e(tfe,f7o),e(m1,m7o),e(m1,jD),e(jD,g7o),e(m1,h7o),e(Q,p7o),e(Q,g1),e(g1,afe),e(afe,_7o),e(g1,u7o),e(g1,DD),e(DD,b7o),e(g1,v7o),e(Q,F7o),e(Q,h1),e(h1,nfe),e(nfe,T7o),e(h1,M7o),e(h1,GD),e(GD,E7o),e(h1,C7o),e(Q,w7o),e(Q,p1),e(p1,sfe),e(sfe,A7o),e(p1,y7o),e(p1,OD),e(OD,L7o),e(p1,x7o),e(Q,$7o),e(Q,_1),e(_1,lfe),e(lfe,k7o),e(_1,S7o),e(_1,VD),e(VD,R7o),e(_1,P7o),e(Q,B7o),e(Q,u1),e(u1,ife),e(ife,I7o),e(u1,N7o),e(u1,dfe),e(dfe,q7o),e(u1,j7o),e(Q,D7o),e(Q,b1),e(b1,cfe),e(cfe,G7o),e(b1,O7o),e(b1,XD),e(XD,V7o),e(b1,X7o),e(Q,z7o),e(Q,v1),e(v1,ffe),e(ffe,W7o),e(v1,Q7o),e(v1,zD),e(zD,H7o),e(v1,U7o),e(Q,J7o),e(Q,F1),e(F1,mfe),e(mfe,Y7o),e(F1,K7o),e(F1,WD),e(WD,Z7o),e(F1,e9o),e(Q,o9o),e(Q,T1),e(T1,gfe),e(gfe,r9o),e(T1,t9o),e(T1,QD),e(QD,a9o),e(T1,n9o),e(Ze,s9o),e(Ze,M1),e(M1,l9o),e(M1,hfe),e(hfe,i9o),e(M1,d9o),e(M1,pfe),e(pfe,c9o),e(Ze,f9o),M(E1,Ze,null),b(f,Bqe,u),b(f,Ni,u),e(Ni,C1),e(C1,_fe),M(EL,_fe,null),e(Ni,m9o),e(Ni,ufe),e(ufe,g9o),b(f,Iqe,u),b(f,So,u),M(CL,So,null),e(So,h9o),e(So,qi),e(qi,p9o),e(qi,HD),e(HD,_9o),e(qi,u9o),e(qi,UD),e(UD,b9o),e(qi,v9o),e(So,F9o),e(So,wL),e(wL,T9o),e(wL,bfe),e(bfe,M9o),e(wL,E9o),e(So,C9o),e(So,lt),M(AL,lt,null),e(lt,w9o),e(lt,vfe),e(vfe,A9o),e(lt,y9o),e(lt,ji),e(ji,L9o),e(ji,Ffe),e(Ffe,x9o),e(ji,$9o),e(ji,JD),e(JD,k9o),e(ji,S9o),e(lt,R9o),M(w1,lt,null),e(So,P9o),e(So,eo),M(yL,eo,null),e(eo,B9o),e(eo,Tfe),e(Tfe,I9o),e(eo,N9o),e(eo,Sa),e(Sa,q9o),e(Sa,Mfe),e(Mfe,j9o),e(Sa,D9o),e(Sa,Efe),e(Efe,G9o),e(Sa,O9o),e(Sa,Cfe),e(Cfe,V9o),e(Sa,X9o),e(eo,z9o),e(eo,_e),e(_e,A1),e(A1,wfe),e(wfe,W9o),e(A1,Q9o),e(A1,YD),e(YD,H9o),e(A1,U9o),e(_e,J9o),e(_e,y1),e(y1,Afe),e(Afe,Y9o),e(y1,K9o),e(y1,KD),e(KD,Z9o),e(y1,exo),e(_e,oxo),e(_e,L1),e(L1,yfe),e(yfe,rxo),e(L1,txo),e(L1,ZD),e(ZD,axo),e(L1,nxo),e(_e,sxo),e(_e,x1),e(x1,Lfe),e(Lfe,lxo),e(x1,ixo),e(x1,eG),e(eG,dxo),e(x1,cxo),e(_e,fxo),e(_e,$1),e($1,xfe),e(xfe,mxo),e($1,gxo),e($1,oG),e(oG,hxo),e($1,pxo),e(_e,_xo),e(_e,k1),e(k1,$fe),e($fe,uxo),e(k1,bxo),e(k1,rG),e(rG,vxo),e(k1,Fxo),e(_e,Txo),e(_e,S1),e(S1,kfe),e(kfe,Mxo),e(S1,Exo),e(S1,tG),e(tG,Cxo),e(S1,wxo),e(_e,Axo),e(_e,R1),e(R1,Sfe),e(Sfe,yxo),e(R1,Lxo),e(R1,aG),e(aG,xxo),e(R1,$xo),e(_e,kxo),e(_e,P1),e(P1,Rfe),e(Rfe,Sxo),e(P1,Rxo),e(P1,nG),e(nG,Pxo),e(P1,Bxo),e(_e,Ixo),e(_e,B1),e(B1,Pfe),e(Pfe,Nxo),e(B1,qxo),e(B1,sG),e(sG,jxo),e(B1,Dxo),e(_e,Gxo),e(_e,I1),e(I1,Bfe),e(Bfe,Oxo),e(I1,Vxo),e(I1,lG),e(lG,Xxo),e(I1,zxo),e(_e,Wxo),e(_e,N1),e(N1,Ife),e(Ife,Qxo),e(N1,Hxo),e(N1,iG),e(iG,Uxo),e(N1,Jxo),e(_e,Yxo),e(_e,q1),e(q1,Nfe),e(Nfe,Kxo),e(q1,Zxo),e(q1,dG),e(dG,e$o),e(q1,o$o),e(_e,r$o),e(_e,j1),e(j1,qfe),e(qfe,t$o),e(j1,a$o),e(j1,cG),e(cG,n$o),e(j1,s$o),e(_e,l$o),e(_e,D1),e(D1,jfe),e(jfe,i$o),e(D1,d$o),e(D1,fG),e(fG,c$o),e(D1,f$o),e(_e,m$o),e(_e,G1),e(G1,Dfe),e(Dfe,g$o),e(G1,h$o),e(G1,mG),e(mG,p$o),e(G1,_$o),e(eo,u$o),e(eo,O1),e(O1,b$o),e(O1,Gfe),e(Gfe,v$o),e(O1,F$o),e(O1,Ofe),e(Ofe,T$o),e(eo,M$o),M(V1,eo,null),b(f,Nqe,u),b(f,Di,u),e(Di,X1),e(X1,Vfe),M(LL,Vfe,null),e(Di,E$o),e(Di,Xfe),e(Xfe,C$o),b(f,qqe,u),b(f,Ro,u),M(xL,Ro,null),e(Ro,w$o),e(Ro,Gi),e(Gi,A$o),e(Gi,gG),e(gG,y$o),e(Gi,L$o),e(Gi,hG),e(hG,x$o),e(Gi,$$o),e(Ro,k$o),e(Ro,$L),e($L,S$o),e($L,zfe),e(zfe,R$o),e($L,P$o),e(Ro,B$o),e(Ro,it),M(kL,it,null),e(it,I$o),e(it,Wfe),e(Wfe,N$o),e(it,q$o),e(it,Oi),e(Oi,j$o),e(Oi,Qfe),e(Qfe,D$o),e(Oi,G$o),e(Oi,pG),e(pG,O$o),e(Oi,V$o),e(it,X$o),M(z1,it,null),e(Ro,z$o),e(Ro,oo),M(SL,oo,null),e(oo,W$o),e(oo,Hfe),e(Hfe,Q$o),e(oo,H$o),e(oo,Ra),e(Ra,U$o),e(Ra,Ufe),e(Ufe,J$o),e(Ra,Y$o),e(Ra,Jfe),e(Jfe,K$o),e(Ra,Z$o),e(Ra,Yfe),e(Yfe,eko),e(Ra,oko),e(oo,rko),e(oo,N),e(N,W1),e(W1,Kfe),e(Kfe,tko),e(W1,ako),e(W1,_G),e(_G,nko),e(W1,sko),e(N,lko),e(N,Q1),e(Q1,Zfe),e(Zfe,iko),e(Q1,dko),e(Q1,uG),e(uG,cko),e(Q1,fko),e(N,mko),e(N,H1),e(H1,eme),e(eme,gko),e(H1,hko),e(H1,bG),e(bG,pko),e(H1,_ko),e(N,uko),e(N,U1),e(U1,ome),e(ome,bko),e(U1,vko),e(U1,vG),e(vG,Fko),e(U1,Tko),e(N,Mko),e(N,J1),e(J1,rme),e(rme,Eko),e(J1,Cko),e(J1,FG),e(FG,wko),e(J1,Ako),e(N,yko),e(N,Y1),e(Y1,tme),e(tme,Lko),e(Y1,xko),e(Y1,TG),e(TG,$ko),e(Y1,kko),e(N,Sko),e(N,K1),e(K1,ame),e(ame,Rko),e(K1,Pko),e(K1,MG),e(MG,Bko),e(K1,Iko),e(N,Nko),e(N,Z1),e(Z1,nme),e(nme,qko),e(Z1,jko),e(Z1,EG),e(EG,Dko),e(Z1,Gko),e(N,Oko),e(N,eb),e(eb,sme),e(sme,Vko),e(eb,Xko),e(eb,CG),e(CG,zko),e(eb,Wko),e(N,Qko),e(N,ob),e(ob,lme),e(lme,Hko),e(ob,Uko),e(ob,wG),e(wG,Jko),e(ob,Yko),e(N,Kko),e(N,rb),e(rb,ime),e(ime,Zko),e(rb,eSo),e(rb,AG),e(AG,oSo),e(rb,rSo),e(N,tSo),e(N,tb),e(tb,dme),e(dme,aSo),e(tb,nSo),e(tb,yG),e(yG,sSo),e(tb,lSo),e(N,iSo),e(N,ab),e(ab,cme),e(cme,dSo),e(ab,cSo),e(ab,LG),e(LG,fSo),e(ab,mSo),e(N,gSo),e(N,nb),e(nb,fme),e(fme,hSo),e(nb,pSo),e(nb,xG),e(xG,_So),e(nb,uSo),e(N,bSo),e(N,sb),e(sb,mme),e(mme,vSo),e(sb,FSo),e(sb,$G),e($G,TSo),e(sb,MSo),e(N,ESo),e(N,lb),e(lb,gme),e(gme,CSo),e(lb,wSo),e(lb,kG),e(kG,ASo),e(lb,ySo),e(N,LSo),e(N,ib),e(ib,hme),e(hme,xSo),e(ib,$So),e(ib,SG),e(SG,kSo),e(ib,SSo),e(N,RSo),e(N,db),e(db,pme),e(pme,PSo),e(db,BSo),e(db,RG),e(RG,ISo),e(db,NSo),e(N,qSo),e(N,cb),e(cb,_me),e(_me,jSo),e(cb,DSo),e(cb,PG),e(PG,GSo),e(cb,OSo),e(N,VSo),e(N,fb),e(fb,ume),e(ume,XSo),e(fb,zSo),e(fb,BG),e(BG,WSo),e(fb,QSo),e(N,HSo),e(N,mb),e(mb,bme),e(bme,USo),e(mb,JSo),e(mb,IG),e(IG,YSo),e(mb,KSo),e(N,ZSo),e(N,gb),e(gb,vme),e(vme,eRo),e(gb,oRo),e(gb,NG),e(NG,rRo),e(gb,tRo),e(N,aRo),e(N,hb),e(hb,Fme),e(Fme,nRo),e(hb,sRo),e(hb,qG),e(qG,lRo),e(hb,iRo),e(N,dRo),e(N,pb),e(pb,Tme),e(Tme,cRo),e(pb,fRo),e(pb,jG),e(jG,mRo),e(pb,gRo),e(N,hRo),e(N,_b),e(_b,Mme),e(Mme,pRo),e(_b,_Ro),e(_b,DG),e(DG,uRo),e(_b,bRo),e(N,vRo),e(N,ub),e(ub,Eme),e(Eme,FRo),e(ub,TRo),e(ub,GG),e(GG,MRo),e(ub,ERo),e(N,CRo),e(N,bb),e(bb,Cme),e(Cme,wRo),e(bb,ARo),e(bb,OG),e(OG,yRo),e(bb,LRo),e(N,xRo),e(N,vb),e(vb,wme),e(wme,$Ro),e(vb,kRo),e(vb,VG),e(VG,SRo),e(vb,RRo),e(N,PRo),e(N,Fb),e(Fb,Ame),e(Ame,BRo),e(Fb,IRo),e(Fb,XG),e(XG,NRo),e(Fb,qRo),e(N,jRo),e(N,Tb),e(Tb,yme),e(yme,DRo),e(Tb,GRo),e(Tb,zG),e(zG,ORo),e(Tb,VRo),e(N,XRo),e(N,Mb),e(Mb,Lme),e(Lme,zRo),e(Mb,WRo),e(Mb,WG),e(WG,QRo),e(Mb,HRo),e(N,URo),e(N,Eb),e(Eb,xme),e(xme,JRo),e(Eb,YRo),e(Eb,QG),e(QG,KRo),e(Eb,ZRo),e(N,ePo),e(N,Cb),e(Cb,$me),e($me,oPo),e(Cb,rPo),e(Cb,HG),e(HG,tPo),e(Cb,aPo),e(N,nPo),e(N,wb),e(wb,kme),e(kme,sPo),e(wb,lPo),e(wb,UG),e(UG,iPo),e(wb,dPo),e(N,cPo),e(N,Ab),e(Ab,Sme),e(Sme,fPo),e(Ab,mPo),e(Ab,JG),e(JG,gPo),e(Ab,hPo),e(N,pPo),e(N,yb),e(yb,Rme),e(Rme,_Po),e(yb,uPo),e(yb,YG),e(YG,bPo),e(yb,vPo),e(N,FPo),e(N,Lb),e(Lb,Pme),e(Pme,TPo),e(Lb,MPo),e(Lb,KG),e(KG,EPo),e(Lb,CPo),e(N,wPo),e(N,xb),e(xb,Bme),e(Bme,APo),e(xb,yPo),e(xb,ZG),e(ZG,LPo),e(xb,xPo),e(N,$Po),e(N,$b),e($b,Ime),e(Ime,kPo),e($b,SPo),e($b,eO),e(eO,RPo),e($b,PPo),e(N,BPo),e(N,kb),e(kb,Nme),e(Nme,IPo),e(kb,NPo),e(kb,oO),e(oO,qPo),e(kb,jPo),e(N,DPo),e(N,Sb),e(Sb,qme),e(qme,GPo),e(Sb,OPo),e(Sb,rO),e(rO,VPo),e(Sb,XPo),e(N,zPo),e(N,Rb),e(Rb,jme),e(jme,WPo),e(Rb,QPo),e(Rb,tO),e(tO,HPo),e(Rb,UPo),e(N,JPo),e(N,Pb),e(Pb,Dme),e(Dme,YPo),e(Pb,KPo),e(Pb,aO),e(aO,ZPo),e(Pb,eBo),e(N,oBo),e(N,Bb),e(Bb,Gme),e(Gme,rBo),e(Bb,tBo),e(Bb,nO),e(nO,aBo),e(Bb,nBo),e(N,sBo),e(N,Ib),e(Ib,Ome),e(Ome,lBo),e(Ib,iBo),e(Ib,sO),e(sO,dBo),e(Ib,cBo),e(N,fBo),e(N,Nb),e(Nb,Vme),e(Vme,mBo),e(Nb,gBo),e(Nb,lO),e(lO,hBo),e(Nb,pBo),e(N,_Bo),e(N,qb),e(qb,Xme),e(Xme,uBo),e(qb,bBo),e(qb,iO),e(iO,vBo),e(qb,FBo),e(oo,TBo),e(oo,jb),e(jb,MBo),e(jb,zme),e(zme,EBo),e(jb,CBo),e(jb,Wme),e(Wme,wBo),e(oo,ABo),M(Db,oo,null),b(f,jqe,u),b(f,Vi,u),e(Vi,Gb),e(Gb,Qme),M(RL,Qme,null),e(Vi,yBo),e(Vi,Hme),e(Hme,LBo),b(f,Dqe,u),b(f,Po,u),M(PL,Po,null),e(Po,xBo),e(Po,Xi),e(Xi,$Bo),e(Xi,dO),e(dO,kBo),e(Xi,SBo),e(Xi,cO),e(cO,RBo),e(Xi,PBo),e(Po,BBo),e(Po,BL),e(BL,IBo),e(BL,Ume),e(Ume,NBo),e(BL,qBo),e(Po,jBo),e(Po,dt),M(IL,dt,null),e(dt,DBo),e(dt,Jme),e(Jme,GBo),e(dt,OBo),e(dt,zi),e(zi,VBo),e(zi,Yme),e(Yme,XBo),e(zi,zBo),e(zi,fO),e(fO,WBo),e(zi,QBo),e(dt,HBo),M(Ob,dt,null),e(Po,UBo),e(Po,ro),M(NL,ro,null),e(ro,JBo),e(ro,Kme),e(Kme,YBo),e(ro,KBo),e(ro,Pa),e(Pa,ZBo),e(Pa,Zme),e(Zme,eIo),e(Pa,oIo),e(Pa,ege),e(ege,rIo),e(Pa,tIo),e(Pa,oge),e(oge,aIo),e(Pa,nIo),e(ro,sIo),e(ro,K),e(K,Vb),e(Vb,rge),e(rge,lIo),e(Vb,iIo),e(Vb,mO),e(mO,dIo),e(Vb,cIo),e(K,fIo),e(K,Xb),e(Xb,tge),e(tge,mIo),e(Xb,gIo),e(Xb,gO),e(gO,hIo),e(Xb,pIo),e(K,_Io),e(K,zb),e(zb,age),e(age,uIo),e(zb,bIo),e(zb,hO),e(hO,vIo),e(zb,FIo),e(K,TIo),e(K,Wb),e(Wb,nge),e(nge,MIo),e(Wb,EIo),e(Wb,pO),e(pO,CIo),e(Wb,wIo),e(K,AIo),e(K,Qb),e(Qb,sge),e(sge,yIo),e(Qb,LIo),e(Qb,_O),e(_O,xIo),e(Qb,$Io),e(K,kIo),e(K,Hb),e(Hb,lge),e(lge,SIo),e(Hb,RIo),e(Hb,uO),e(uO,PIo),e(Hb,BIo),e(K,IIo),e(K,Ub),e(Ub,ige),e(ige,NIo),e(Ub,qIo),e(Ub,bO),e(bO,jIo),e(Ub,DIo),e(K,GIo),e(K,Jb),e(Jb,dge),e(dge,OIo),e(Jb,VIo),e(Jb,vO),e(vO,XIo),e(Jb,zIo),e(K,WIo),e(K,Yb),e(Yb,cge),e(cge,QIo),e(Yb,HIo),e(Yb,FO),e(FO,UIo),e(Yb,JIo),e(K,YIo),e(K,Kb),e(Kb,fge),e(fge,KIo),e(Kb,ZIo),e(Kb,TO),e(TO,eNo),e(Kb,oNo),e(K,rNo),e(K,Zb),e(Zb,mge),e(mge,tNo),e(Zb,aNo),e(Zb,MO),e(MO,nNo),e(Zb,sNo),e(K,lNo),e(K,e4),e(e4,gge),e(gge,iNo),e(e4,dNo),e(e4,EO),e(EO,cNo),e(e4,fNo),e(K,mNo),e(K,o4),e(o4,hge),e(hge,gNo),e(o4,hNo),e(o4,CO),e(CO,pNo),e(o4,_No),e(K,uNo),e(K,r4),e(r4,pge),e(pge,bNo),e(r4,vNo),e(r4,wO),e(wO,FNo),e(r4,TNo),e(K,MNo),e(K,t4),e(t4,_ge),e(_ge,ENo),e(t4,CNo),e(t4,AO),e(AO,wNo),e(t4,ANo),e(K,yNo),e(K,a4),e(a4,uge),e(uge,LNo),e(a4,xNo),e(a4,yO),e(yO,$No),e(a4,kNo),e(K,SNo),e(K,n4),e(n4,bge),e(bge,RNo),e(n4,PNo),e(n4,LO),e(LO,BNo),e(n4,INo),e(K,NNo),e(K,s4),e(s4,vge),e(vge,qNo),e(s4,jNo),e(s4,xO),e(xO,DNo),e(s4,GNo),e(K,ONo),e(K,l4),e(l4,Fge),e(Fge,VNo),e(l4,XNo),e(l4,$O),e($O,zNo),e(l4,WNo),e(K,QNo),e(K,i4),e(i4,Tge),e(Tge,HNo),e(i4,UNo),e(i4,kO),e(kO,JNo),e(i4,YNo),e(K,KNo),e(K,d4),e(d4,Mge),e(Mge,ZNo),e(d4,eqo),e(d4,SO),e(SO,oqo),e(d4,rqo),e(K,tqo),e(K,c4),e(c4,Ege),e(Ege,aqo),e(c4,nqo),e(c4,RO),e(RO,sqo),e(c4,lqo),e(K,iqo),e(K,f4),e(f4,Cge),e(Cge,dqo),e(f4,cqo),e(f4,PO),e(PO,fqo),e(f4,mqo),e(K,gqo),e(K,m4),e(m4,wge),e(wge,hqo),e(m4,pqo),e(m4,BO),e(BO,_qo),e(m4,uqo),e(K,bqo),e(K,g4),e(g4,Age),e(Age,vqo),e(g4,Fqo),e(g4,IO),e(IO,Tqo),e(g4,Mqo),e(K,Eqo),e(K,h4),e(h4,yge),e(yge,Cqo),e(h4,wqo),e(h4,NO),e(NO,Aqo),e(h4,yqo),e(K,Lqo),e(K,p4),e(p4,Lge),e(Lge,xqo),e(p4,$qo),e(p4,qO),e(qO,kqo),e(p4,Sqo),e(K,Rqo),e(K,_4),e(_4,xge),e(xge,Pqo),e(_4,Bqo),e(_4,jO),e(jO,Iqo),e(_4,Nqo),e(K,qqo),e(K,u4),e(u4,$ge),e($ge,jqo),e(u4,Dqo),e(u4,DO),e(DO,Gqo),e(u4,Oqo),e(ro,Vqo),e(ro,b4),e(b4,Xqo),e(b4,kge),e(kge,zqo),e(b4,Wqo),e(b4,Sge),e(Sge,Qqo),e(ro,Hqo),M(v4,ro,null),b(f,Gqe,u),b(f,Wi,u),e(Wi,F4),e(F4,Rge),M(qL,Rge,null),e(Wi,Uqo),e(Wi,Pge),e(Pge,Jqo),b(f,Oqe,u),b(f,Bo,u),M(jL,Bo,null),e(Bo,Yqo),e(Bo,Qi),e(Qi,Kqo),e(Qi,GO),e(GO,Zqo),e(Qi,ejo),e(Qi,OO),e(OO,ojo),e(Qi,rjo),e(Bo,tjo),e(Bo,DL),e(DL,ajo),e(DL,Bge),e(Bge,njo),e(DL,sjo),e(Bo,ljo),e(Bo,ct),M(GL,ct,null),e(ct,ijo),e(ct,Ige),e(Ige,djo),e(ct,cjo),e(ct,Hi),e(Hi,fjo),e(Hi,Nge),e(Nge,mjo),e(Hi,gjo),e(Hi,VO),e(VO,hjo),e(Hi,pjo),e(ct,_jo),M(T4,ct,null),e(Bo,ujo),e(Bo,to),M(OL,to,null),e(to,bjo),e(to,qge),e(qge,vjo),e(to,Fjo),e(to,Ba),e(Ba,Tjo),e(Ba,jge),e(jge,Mjo),e(Ba,Ejo),e(Ba,Dge),e(Dge,Cjo),e(Ba,wjo),e(Ba,Gge),e(Gge,Ajo),e(Ba,yjo),e(to,Ljo),e(to,Yr),e(Yr,M4),e(M4,Oge),e(Oge,xjo),e(M4,$jo),e(M4,XO),e(XO,kjo),e(M4,Sjo),e(Yr,Rjo),e(Yr,E4),e(E4,Vge),e(Vge,Pjo),e(E4,Bjo),e(E4,zO),e(zO,Ijo),e(E4,Njo),e(Yr,qjo),e(Yr,C4),e(C4,Xge),e(Xge,jjo),e(C4,Djo),e(C4,WO),e(WO,Gjo),e(C4,Ojo),e(Yr,Vjo),e(Yr,w4),e(w4,zge),e(zge,Xjo),e(w4,zjo),e(w4,QO),e(QO,Wjo),e(w4,Qjo),e(Yr,Hjo),e(Yr,A4),e(A4,Wge),e(Wge,Ujo),e(A4,Jjo),e(A4,HO),e(HO,Yjo),e(A4,Kjo),e(to,Zjo),e(to,y4),e(y4,eDo),e(y4,Qge),e(Qge,oDo),e(y4,rDo),e(y4,Hge),e(Hge,tDo),e(to,aDo),M(L4,to,null),b(f,Vqe,u),b(f,Ui,u),e(Ui,x4),e(x4,Uge),M(VL,Uge,null),e(Ui,nDo),e(Ui,Jge),e(Jge,sDo),b(f,Xqe,u),b(f,Io,u),M(XL,Io,null),e(Io,lDo),e(Io,Ji),e(Ji,iDo),e(Ji,UO),e(UO,dDo),e(Ji,cDo),e(Ji,JO),e(JO,fDo),e(Ji,mDo),e(Io,gDo),e(Io,zL),e(zL,hDo),e(zL,Yge),e(Yge,pDo),e(zL,_Do),e(Io,uDo),e(Io,ft),M(WL,ft,null),e(ft,bDo),e(ft,Kge),e(Kge,vDo),e(ft,FDo),e(ft,Yi),e(Yi,TDo),e(Yi,Zge),e(Zge,MDo),e(Yi,EDo),e(Yi,YO),e(YO,CDo),e(Yi,wDo),e(ft,ADo),M($4,ft,null),e(Io,yDo),e(Io,ao),M(QL,ao,null),e(ao,LDo),e(ao,ehe),e(ehe,xDo),e(ao,$Do),e(ao,Ia),e(Ia,kDo),e(Ia,ohe),e(ohe,SDo),e(Ia,RDo),e(Ia,rhe),e(rhe,PDo),e(Ia,BDo),e(Ia,the),e(the,IDo),e(Ia,NDo),e(ao,qDo),e(ao,H),e(H,k4),e(k4,ahe),e(ahe,jDo),e(k4,DDo),e(k4,KO),e(KO,GDo),e(k4,ODo),e(H,VDo),e(H,S4),e(S4,nhe),e(nhe,XDo),e(S4,zDo),e(S4,ZO),e(ZO,WDo),e(S4,QDo),e(H,HDo),e(H,R4),e(R4,she),e(she,UDo),e(R4,JDo),e(R4,eV),e(eV,YDo),e(R4,KDo),e(H,ZDo),e(H,P4),e(P4,lhe),e(lhe,eGo),e(P4,oGo),e(P4,oV),e(oV,rGo),e(P4,tGo),e(H,aGo),e(H,B4),e(B4,ihe),e(ihe,nGo),e(B4,sGo),e(B4,rV),e(rV,lGo),e(B4,iGo),e(H,dGo),e(H,I4),e(I4,dhe),e(dhe,cGo),e(I4,fGo),e(I4,tV),e(tV,mGo),e(I4,gGo),e(H,hGo),e(H,N4),e(N4,che),e(che,pGo),e(N4,_Go),e(N4,aV),e(aV,uGo),e(N4,bGo),e(H,vGo),e(H,q4),e(q4,fhe),e(fhe,FGo),e(q4,TGo),e(q4,nV),e(nV,MGo),e(q4,EGo),e(H,CGo),e(H,j4),e(j4,mhe),e(mhe,wGo),e(j4,AGo),e(j4,sV),e(sV,yGo),e(j4,LGo),e(H,xGo),e(H,D4),e(D4,ghe),e(ghe,$Go),e(D4,kGo),e(D4,lV),e(lV,SGo),e(D4,RGo),e(H,PGo),e(H,G4),e(G4,hhe),e(hhe,BGo),e(G4,IGo),e(G4,iV),e(iV,NGo),e(G4,qGo),e(H,jGo),e(H,O4),e(O4,phe),e(phe,DGo),e(O4,GGo),e(O4,dV),e(dV,OGo),e(O4,VGo),e(H,XGo),e(H,V4),e(V4,_he),e(_he,zGo),e(V4,WGo),e(V4,cV),e(cV,QGo),e(V4,HGo),e(H,UGo),e(H,X4),e(X4,uhe),e(uhe,JGo),e(X4,YGo),e(X4,fV),e(fV,KGo),e(X4,ZGo),e(H,eOo),e(H,z4),e(z4,bhe),e(bhe,oOo),e(z4,rOo),e(z4,mV),e(mV,tOo),e(z4,aOo),e(H,nOo),e(H,W4),e(W4,vhe),e(vhe,sOo),e(W4,lOo),e(W4,gV),e(gV,iOo),e(W4,dOo),e(H,cOo),e(H,Q4),e(Q4,Fhe),e(Fhe,fOo),e(Q4,mOo),e(Q4,hV),e(hV,gOo),e(Q4,hOo),e(H,pOo),e(H,H4),e(H4,The),e(The,_Oo),e(H4,uOo),e(H4,pV),e(pV,bOo),e(H4,vOo),e(H,FOo),e(H,U4),e(U4,Mhe),e(Mhe,TOo),e(U4,MOo),e(U4,_V),e(_V,EOo),e(U4,COo),e(H,wOo),e(H,J4),e(J4,Ehe),e(Ehe,AOo),e(J4,yOo),e(J4,uV),e(uV,LOo),e(J4,xOo),e(H,$Oo),e(H,Y4),e(Y4,Che),e(Che,kOo),e(Y4,SOo),e(Y4,bV),e(bV,ROo),e(Y4,POo),e(H,BOo),e(H,K4),e(K4,whe),e(whe,IOo),e(K4,NOo),e(K4,vV),e(vV,qOo),e(K4,jOo),e(H,DOo),e(H,Z4),e(Z4,Ahe),e(Ahe,GOo),e(Z4,OOo),e(Z4,FV),e(FV,VOo),e(Z4,XOo),e(H,zOo),e(H,ev),e(ev,yhe),e(yhe,WOo),e(ev,QOo),e(ev,TV),e(TV,HOo),e(ev,UOo),e(H,JOo),e(H,ov),e(ov,Lhe),e(Lhe,YOo),e(ov,KOo),e(ov,MV),e(MV,ZOo),e(ov,eVo),e(H,oVo),e(H,rv),e(rv,xhe),e(xhe,rVo),e(rv,tVo),e(rv,EV),e(EV,aVo),e(rv,nVo),e(H,sVo),e(H,tv),e(tv,$he),e($he,lVo),e(tv,iVo),e(tv,CV),e(CV,dVo),e(tv,cVo),e(H,fVo),e(H,av),e(av,khe),e(khe,mVo),e(av,gVo),e(av,wV),e(wV,hVo),e(av,pVo),e(H,_Vo),e(H,nv),e(nv,She),e(She,uVo),e(nv,bVo),e(nv,AV),e(AV,vVo),e(nv,FVo),e(H,TVo),e(H,sv),e(sv,Rhe),e(Rhe,MVo),e(sv,EVo),e(sv,yV),e(yV,CVo),e(sv,wVo),e(H,AVo),e(H,lv),e(lv,Phe),e(Phe,yVo),e(lv,LVo),e(lv,LV),e(LV,xVo),e(lv,$Vo),e(H,kVo),e(H,iv),e(iv,Bhe),e(Bhe,SVo),e(iv,RVo),e(iv,xV),e(xV,PVo),e(iv,BVo),e(H,IVo),e(H,dv),e(dv,Ihe),e(Ihe,NVo),e(dv,qVo),e(dv,$V),e($V,jVo),e(dv,DVo),e(H,GVo),e(H,cv),e(cv,Nhe),e(Nhe,OVo),e(cv,VVo),e(cv,kV),e(kV,XVo),e(cv,zVo),e(ao,WVo),e(ao,fv),e(fv,QVo),e(fv,qhe),e(qhe,HVo),e(fv,UVo),e(fv,jhe),e(jhe,JVo),e(ao,YVo),M(mv,ao,null),b(f,zqe,u),b(f,Ki,u),e(Ki,gv),e(gv,Dhe),M(HL,Dhe,null),e(Ki,KVo),e(Ki,Ghe),e(Ghe,ZVo),b(f,Wqe,u),b(f,No,u),M(UL,No,null),e(No,eXo),e(No,Zi),e(Zi,oXo),e(Zi,SV),e(SV,rXo),e(Zi,tXo),e(Zi,RV),e(RV,aXo),e(Zi,nXo),e(No,sXo),e(No,JL),e(JL,lXo),e(JL,Ohe),e(Ohe,iXo),e(JL,dXo),e(No,cXo),e(No,mt),M(YL,mt,null),e(mt,fXo),e(mt,Vhe),e(Vhe,mXo),e(mt,gXo),e(mt,ed),e(ed,hXo),e(ed,Xhe),e(Xhe,pXo),e(ed,_Xo),e(ed,PV),e(PV,uXo),e(ed,bXo),e(mt,vXo),M(hv,mt,null),e(No,FXo),e(No,no),M(KL,no,null),e(no,TXo),e(no,zhe),e(zhe,MXo),e(no,EXo),e(no,Na),e(Na,CXo),e(Na,Whe),e(Whe,wXo),e(Na,AXo),e(Na,Qhe),e(Qhe,yXo),e(Na,LXo),e(Na,Hhe),e(Hhe,xXo),e(Na,$Xo),e(no,kXo),e(no,V),e(V,pv),e(pv,Uhe),e(Uhe,SXo),e(pv,RXo),e(pv,BV),e(BV,PXo),e(pv,BXo),e(V,IXo),e(V,_v),e(_v,Jhe),e(Jhe,NXo),e(_v,qXo),e(_v,IV),e(IV,jXo),e(_v,DXo),e(V,GXo),e(V,uv),e(uv,Yhe),e(Yhe,OXo),e(uv,VXo),e(uv,NV),e(NV,XXo),e(uv,zXo),e(V,WXo),e(V,bv),e(bv,Khe),e(Khe,QXo),e(bv,HXo),e(bv,qV),e(qV,UXo),e(bv,JXo),e(V,YXo),e(V,vv),e(vv,Zhe),e(Zhe,KXo),e(vv,ZXo),e(vv,jV),e(jV,ezo),e(vv,ozo),e(V,rzo),e(V,Fv),e(Fv,epe),e(epe,tzo),e(Fv,azo),e(Fv,DV),e(DV,nzo),e(Fv,szo),e(V,lzo),e(V,Tv),e(Tv,ope),e(ope,izo),e(Tv,dzo),e(Tv,GV),e(GV,czo),e(Tv,fzo),e(V,mzo),e(V,Mv),e(Mv,rpe),e(rpe,gzo),e(Mv,hzo),e(Mv,OV),e(OV,pzo),e(Mv,_zo),e(V,uzo),e(V,Ev),e(Ev,tpe),e(tpe,bzo),e(Ev,vzo),e(Ev,VV),e(VV,Fzo),e(Ev,Tzo),e(V,Mzo),e(V,Cv),e(Cv,ape),e(ape,Ezo),e(Cv,Czo),e(Cv,XV),e(XV,wzo),e(Cv,Azo),e(V,yzo),e(V,wv),e(wv,npe),e(npe,Lzo),e(wv,xzo),e(wv,zV),e(zV,$zo),e(wv,kzo),e(V,Szo),e(V,Av),e(Av,spe),e(spe,Rzo),e(Av,Pzo),e(Av,WV),e(WV,Bzo),e(Av,Izo),e(V,Nzo),e(V,yv),e(yv,lpe),e(lpe,qzo),e(yv,jzo),e(yv,QV),e(QV,Dzo),e(yv,Gzo),e(V,Ozo),e(V,Lv),e(Lv,ipe),e(ipe,Vzo),e(Lv,Xzo),e(Lv,HV),e(HV,zzo),e(Lv,Wzo),e(V,Qzo),e(V,xv),e(xv,dpe),e(dpe,Hzo),e(xv,Uzo),e(xv,UV),e(UV,Jzo),e(xv,Yzo),e(V,Kzo),e(V,$v),e($v,cpe),e(cpe,Zzo),e($v,eWo),e($v,JV),e(JV,oWo),e($v,rWo),e(V,tWo),e(V,kv),e(kv,fpe),e(fpe,aWo),e(kv,nWo),e(kv,YV),e(YV,sWo),e(kv,lWo),e(V,iWo),e(V,Sv),e(Sv,mpe),e(mpe,dWo),e(Sv,cWo),e(Sv,KV),e(KV,fWo),e(Sv,mWo),e(V,gWo),e(V,Rv),e(Rv,gpe),e(gpe,hWo),e(Rv,pWo),e(Rv,ZV),e(ZV,_Wo),e(Rv,uWo),e(V,bWo),e(V,Pv),e(Pv,hpe),e(hpe,vWo),e(Pv,FWo),e(Pv,eX),e(eX,TWo),e(Pv,MWo),e(V,EWo),e(V,Bv),e(Bv,ppe),e(ppe,CWo),e(Bv,wWo),e(Bv,oX),e(oX,AWo),e(Bv,yWo),e(V,LWo),e(V,Iv),e(Iv,_pe),e(_pe,xWo),e(Iv,$Wo),e(Iv,rX),e(rX,kWo),e(Iv,SWo),e(V,RWo),e(V,Nv),e(Nv,upe),e(upe,PWo),e(Nv,BWo),e(Nv,tX),e(tX,IWo),e(Nv,NWo),e(V,qWo),e(V,qv),e(qv,bpe),e(bpe,jWo),e(qv,DWo),e(qv,aX),e(aX,GWo),e(qv,OWo),e(V,VWo),e(V,jv),e(jv,vpe),e(vpe,XWo),e(jv,zWo),e(jv,nX),e(nX,WWo),e(jv,QWo),e(V,HWo),e(V,Dv),e(Dv,Fpe),e(Fpe,UWo),e(Dv,JWo),e(Dv,sX),e(sX,YWo),e(Dv,KWo),e(V,ZWo),e(V,Gv),e(Gv,Tpe),e(Tpe,eQo),e(Gv,oQo),e(Gv,lX),e(lX,rQo),e(Gv,tQo),e(V,aQo),e(V,Ov),e(Ov,Mpe),e(Mpe,nQo),e(Ov,sQo),e(Ov,iX),e(iX,lQo),e(Ov,iQo),e(V,dQo),e(V,Vv),e(Vv,Epe),e(Epe,cQo),e(Vv,fQo),e(Vv,dX),e(dX,mQo),e(Vv,gQo),e(V,hQo),e(V,Xv),e(Xv,Cpe),e(Cpe,pQo),e(Xv,_Qo),e(Xv,cX),e(cX,uQo),e(Xv,bQo),e(V,vQo),e(V,zv),e(zv,wpe),e(wpe,FQo),e(zv,TQo),e(zv,fX),e(fX,MQo),e(zv,EQo),e(V,CQo),e(V,Wv),e(Wv,Ape),e(Ape,wQo),e(Wv,AQo),e(Wv,mX),e(mX,yQo),e(Wv,LQo),e(V,xQo),e(V,Qv),e(Qv,ype),e(ype,$Qo),e(Qv,kQo),e(Qv,gX),e(gX,SQo),e(Qv,RQo),e(V,PQo),e(V,Hv),e(Hv,Lpe),e(Lpe,BQo),e(Hv,IQo),e(Hv,hX),e(hX,NQo),e(Hv,qQo),e(V,jQo),e(V,Uv),e(Uv,xpe),e(xpe,DQo),e(Uv,GQo),e(Uv,pX),e(pX,OQo),e(Uv,VQo),e(V,XQo),e(V,Jv),e(Jv,$pe),e($pe,zQo),e(Jv,WQo),e(Jv,_X),e(_X,QQo),e(Jv,HQo),e(V,UQo),e(V,Yv),e(Yv,kpe),e(kpe,JQo),e(Yv,YQo),e(Yv,uX),e(uX,KQo),e(Yv,ZQo),e(V,eHo),e(V,Kv),e(Kv,Spe),e(Spe,oHo),e(Kv,rHo),e(Kv,bX),e(bX,tHo),e(Kv,aHo),e(V,nHo),e(V,Zv),e(Zv,Rpe),e(Rpe,sHo),e(Zv,lHo),e(Zv,vX),e(vX,iHo),e(Zv,dHo),e(V,cHo),e(V,e0),e(e0,Ppe),e(Ppe,fHo),e(e0,mHo),e(e0,FX),e(FX,gHo),e(e0,hHo),e(no,pHo),e(no,o0),e(o0,_Ho),e(o0,Bpe),e(Bpe,uHo),e(o0,bHo),e(o0,Ipe),e(Ipe,vHo),e(no,FHo),M(r0,no,null),b(f,Qqe,u),b(f,od,u),e(od,t0),e(t0,Npe),M(ZL,Npe,null),e(od,THo),e(od,qpe),e(qpe,MHo),b(f,Hqe,u),b(f,qo,u),M(e8,qo,null),e(qo,EHo),e(qo,rd),e(rd,CHo),e(rd,TX),e(TX,wHo),e(rd,AHo),e(rd,MX),e(MX,yHo),e(rd,LHo),e(qo,xHo),e(qo,o8),e(o8,$Ho),e(o8,jpe),e(jpe,kHo),e(o8,SHo),e(qo,RHo),e(qo,gt),M(r8,gt,null),e(gt,PHo),e(gt,Dpe),e(Dpe,BHo),e(gt,IHo),e(gt,td),e(td,NHo),e(td,Gpe),e(Gpe,qHo),e(td,jHo),e(td,EX),e(EX,DHo),e(td,GHo),e(gt,OHo),M(a0,gt,null),e(qo,VHo),e(qo,so),M(t8,so,null),e(so,XHo),e(so,Ope),e(Ope,zHo),e(so,WHo),e(so,qa),e(qa,QHo),e(qa,Vpe),e(Vpe,HHo),e(qa,UHo),e(qa,Xpe),e(Xpe,JHo),e(qa,YHo),e(qa,zpe),e(zpe,KHo),e(qa,ZHo),e(so,eUo),e(so,Wpe),e(Wpe,n0),e(n0,Qpe),e(Qpe,oUo),e(n0,rUo),e(n0,CX),e(CX,tUo),e(n0,aUo),e(so,nUo),e(so,s0),e(s0,sUo),e(s0,Hpe),e(Hpe,lUo),e(s0,iUo),e(s0,Upe),e(Upe,dUo),e(so,cUo),M(l0,so,null),b(f,Uqe,u),b(f,ad,u),e(ad,i0),e(i0,Jpe),M(a8,Jpe,null),e(ad,fUo),e(ad,Ype),e(Ype,mUo),b(f,Jqe,u),b(f,jo,u),M(n8,jo,null),e(jo,gUo),e(jo,nd),e(nd,hUo),e(nd,wX),e(wX,pUo),e(nd,_Uo),e(nd,AX),e(AX,uUo),e(nd,bUo),e(jo,vUo),e(jo,s8),e(s8,FUo),e(s8,Kpe),e(Kpe,TUo),e(s8,MUo),e(jo,EUo),e(jo,ht),M(l8,ht,null),e(ht,CUo),e(ht,Zpe),e(Zpe,wUo),e(ht,AUo),e(ht,sd),e(sd,yUo),e(sd,e_e),e(e_e,LUo),e(sd,xUo),e(sd,yX),e(yX,$Uo),e(sd,kUo),e(ht,SUo),M(d0,ht,null),e(jo,RUo),e(jo,lo),M(i8,lo,null),e(lo,PUo),e(lo,o_e),e(o_e,BUo),e(lo,IUo),e(lo,ja),e(ja,NUo),e(ja,r_e),e(r_e,qUo),e(ja,jUo),e(ja,t_e),e(t_e,DUo),e(ja,GUo),e(ja,a_e),e(a_e,OUo),e(ja,VUo),e(lo,XUo),e(lo,Fe),e(Fe,c0),e(c0,n_e),e(n_e,zUo),e(c0,WUo),e(c0,LX),e(LX,QUo),e(c0,HUo),e(Fe,UUo),e(Fe,f0),e(f0,s_e),e(s_e,JUo),e(f0,YUo),e(f0,xX),e(xX,KUo),e(f0,ZUo),e(Fe,eJo),e(Fe,m0),e(m0,l_e),e(l_e,oJo),e(m0,rJo),e(m0,$X),e($X,tJo),e(m0,aJo),e(Fe,nJo),e(Fe,g0),e(g0,i_e),e(i_e,sJo),e(g0,lJo),e(g0,kX),e(kX,iJo),e(g0,dJo),e(Fe,cJo),e(Fe,Bs),e(Bs,d_e),e(d_e,fJo),e(Bs,mJo),e(Bs,SX),e(SX,gJo),e(Bs,hJo),e(Bs,RX),e(RX,pJo),e(Bs,_Jo),e(Fe,uJo),e(Fe,h0),e(h0,c_e),e(c_e,bJo),e(h0,vJo),e(h0,PX),e(PX,FJo),e(h0,TJo),e(Fe,MJo),e(Fe,pt),e(pt,f_e),e(f_e,EJo),e(pt,CJo),e(pt,BX),e(BX,wJo),e(pt,AJo),e(pt,IX),e(IX,yJo),e(pt,LJo),e(pt,NX),e(NX,xJo),e(pt,$Jo),e(Fe,kJo),e(Fe,p0),e(p0,m_e),e(m_e,SJo),e(p0,RJo),e(p0,qX),e(qX,PJo),e(p0,BJo),e(Fe,IJo),e(Fe,_0),e(_0,g_e),e(g_e,NJo),e(_0,qJo),e(_0,jX),e(jX,jJo),e(_0,DJo),e(Fe,GJo),e(Fe,u0),e(u0,h_e),e(h_e,OJo),e(u0,VJo),e(u0,DX),e(DX,XJo),e(u0,zJo),e(Fe,WJo),e(Fe,b0),e(b0,p_e),e(p_e,QJo),e(b0,HJo),e(b0,GX),e(GX,UJo),e(b0,JJo),e(Fe,YJo),e(Fe,v0),e(v0,__e),e(__e,KJo),e(v0,ZJo),e(v0,OX),e(OX,eYo),e(v0,oYo),e(Fe,rYo),e(Fe,F0),e(F0,u_e),e(u_e,tYo),e(F0,aYo),e(F0,VX),e(VX,nYo),e(F0,sYo),e(Fe,lYo),e(Fe,T0),e(T0,b_e),e(b_e,iYo),e(T0,dYo),e(T0,XX),e(XX,cYo),e(T0,fYo),e(lo,mYo),e(lo,M0),e(M0,gYo),e(M0,v_e),e(v_e,hYo),e(M0,pYo),e(M0,F_e),e(F_e,_Yo),e(lo,uYo),M(E0,lo,null),b(f,Yqe,u),b(f,ld,u),e(ld,C0),e(C0,T_e),M(d8,T_e,null),e(ld,bYo),e(ld,M_e),e(M_e,vYo),b(f,Kqe,u),b(f,Do,u),M(c8,Do,null),e(Do,FYo),e(Do,id),e(id,TYo),e(id,zX),e(zX,MYo),e(id,EYo),e(id,WX),e(WX,CYo),e(id,wYo),e(Do,AYo),e(Do,f8),e(f8,yYo),e(f8,E_e),e(E_e,LYo),e(f8,xYo),e(Do,$Yo),e(Do,_t),M(m8,_t,null),e(_t,kYo),e(_t,C_e),e(C_e,SYo),e(_t,RYo),e(_t,dd),e(dd,PYo),e(dd,w_e),e(w_e,BYo),e(dd,IYo),e(dd,QX),e(QX,NYo),e(dd,qYo),e(_t,jYo),M(w0,_t,null),e(Do,DYo),e(Do,io),M(g8,io,null),e(io,GYo),e(io,A_e),e(A_e,OYo),e(io,VYo),e(io,Da),e(Da,XYo),e(Da,y_e),e(y_e,zYo),e(Da,WYo),e(Da,L_e),e(L_e,QYo),e(Da,HYo),e(Da,x_e),e(x_e,UYo),e(Da,JYo),e(io,YYo),e(io,$_e),e($_e,A0),e(A0,k_e),e(k_e,KYo),e(A0,ZYo),e(A0,HX),e(HX,eKo),e(A0,oKo),e(io,rKo),e(io,y0),e(y0,tKo),e(y0,S_e),e(S_e,aKo),e(y0,nKo),e(y0,R_e),e(R_e,sKo),e(io,lKo),M(L0,io,null),b(f,Zqe,u),b(f,cd,u),e(cd,x0),e(x0,P_e),M(h8,P_e,null),e(cd,iKo),e(cd,B_e),e(B_e,dKo),b(f,eje,u),b(f,Go,u),M(p8,Go,null),e(Go,cKo),e(Go,fd),e(fd,fKo),e(fd,UX),e(UX,mKo),e(fd,gKo),e(fd,JX),e(JX,hKo),e(fd,pKo),e(Go,_Ko),e(Go,_8),e(_8,uKo),e(_8,I_e),e(I_e,bKo),e(_8,vKo),e(Go,FKo),e(Go,ut),M(u8,ut,null),e(ut,TKo),e(ut,N_e),e(N_e,MKo),e(ut,EKo),e(ut,md),e(md,CKo),e(md,q_e),e(q_e,wKo),e(md,AKo),e(md,YX),e(YX,yKo),e(md,LKo),e(ut,xKo),M($0,ut,null),e(Go,$Ko),e(Go,co),M(b8,co,null),e(co,kKo),e(co,j_e),e(j_e,SKo),e(co,RKo),e(co,Ga),e(Ga,PKo),e(Ga,D_e),e(D_e,BKo),e(Ga,IKo),e(Ga,G_e),e(G_e,NKo),e(Ga,qKo),e(Ga,O_e),e(O_e,jKo),e(Ga,DKo),e(co,GKo),e(co,Se),e(Se,k0),e(k0,V_e),e(V_e,OKo),e(k0,VKo),e(k0,KX),e(KX,XKo),e(k0,zKo),e(Se,WKo),e(Se,S0),e(S0,X_e),e(X_e,QKo),e(S0,HKo),e(S0,ZX),e(ZX,UKo),e(S0,JKo),e(Se,YKo),e(Se,R0),e(R0,z_e),e(z_e,KKo),e(R0,ZKo),e(R0,ez),e(ez,eZo),e(R0,oZo),e(Se,rZo),e(Se,P0),e(P0,W_e),e(W_e,tZo),e(P0,aZo),e(P0,oz),e(oz,nZo),e(P0,sZo),e(Se,lZo),e(Se,B0),e(B0,Q_e),e(Q_e,iZo),e(B0,dZo),e(B0,rz),e(rz,cZo),e(B0,fZo),e(Se,mZo),e(Se,I0),e(I0,H_e),e(H_e,gZo),e(I0,hZo),e(I0,tz),e(tz,pZo),e(I0,_Zo),e(Se,uZo),e(Se,N0),e(N0,U_e),e(U_e,bZo),e(N0,vZo),e(N0,az),e(az,FZo),e(N0,TZo),e(Se,MZo),e(Se,q0),e(q0,J_e),e(J_e,EZo),e(q0,CZo),e(q0,nz),e(nz,wZo),e(q0,AZo),e(Se,yZo),e(Se,j0),e(j0,Y_e),e(Y_e,LZo),e(j0,xZo),e(j0,sz),e(sz,$Zo),e(j0,kZo),e(co,SZo),e(co,D0),e(D0,RZo),e(D0,K_e),e(K_e,PZo),e(D0,BZo),e(D0,Z_e),e(Z_e,IZo),e(co,NZo),M(G0,co,null),b(f,oje,u),b(f,gd,u),e(gd,O0),e(O0,eue),M(v8,eue,null),e(gd,qZo),e(gd,oue),e(oue,jZo),b(f,rje,u),b(f,Oo,u),M(F8,Oo,null),e(Oo,DZo),e(Oo,hd),e(hd,GZo),e(hd,lz),e(lz,OZo),e(hd,VZo),e(hd,iz),e(iz,XZo),e(hd,zZo),e(Oo,WZo),e(Oo,T8),e(T8,QZo),e(T8,rue),e(rue,HZo),e(T8,UZo),e(Oo,JZo),e(Oo,bt),M(M8,bt,null),e(bt,YZo),e(bt,tue),e(tue,KZo),e(bt,ZZo),e(bt,pd),e(pd,eer),e(pd,aue),e(aue,oer),e(pd,rer),e(pd,dz),e(dz,ter),e(pd,aer),e(bt,ner),M(V0,bt,null),e(Oo,ser),e(Oo,fo),M(E8,fo,null),e(fo,ler),e(fo,nue),e(nue,ier),e(fo,der),e(fo,Oa),e(Oa,cer),e(Oa,sue),e(sue,fer),e(Oa,mer),e(Oa,lue),e(lue,ger),e(Oa,her),e(Oa,iue),e(iue,per),e(Oa,_er),e(fo,uer),e(fo,Kr),e(Kr,X0),e(X0,due),e(due,ber),e(X0,ver),e(X0,cz),e(cz,Fer),e(X0,Ter),e(Kr,Mer),e(Kr,z0),e(z0,cue),e(cue,Eer),e(z0,Cer),e(z0,fz),e(fz,wer),e(z0,Aer),e(Kr,yer),e(Kr,W0),e(W0,fue),e(fue,Ler),e(W0,xer),e(W0,mz),e(mz,$er),e(W0,ker),e(Kr,Ser),e(Kr,Q0),e(Q0,mue),e(mue,Rer),e(Q0,Per),e(Q0,gz),e(gz,Ber),e(Q0,Ier),e(Kr,Ner),e(Kr,H0),e(H0,gue),e(gue,qer),e(H0,jer),e(H0,hz),e(hz,Der),e(H0,Ger),e(fo,Oer),e(fo,U0),e(U0,Ver),e(U0,hue),e(hue,Xer),e(U0,zer),e(U0,pue),e(pue,Wer),e(fo,Qer),M(J0,fo,null),b(f,tje,u),b(f,_d,u),e(_d,Y0),e(Y0,_ue),M(C8,_ue,null),e(_d,Her),e(_d,uue),e(uue,Uer),b(f,aje,u),b(f,Vo,u),M(w8,Vo,null),e(Vo,Jer),e(Vo,ud),e(ud,Yer),e(ud,pz),e(pz,Ker),e(ud,Zer),e(ud,_z),e(_z,eor),e(ud,oor),e(Vo,ror),e(Vo,A8),e(A8,tor),e(A8,bue),e(bue,aor),e(A8,nor),e(Vo,sor),e(Vo,vt),M(y8,vt,null),e(vt,lor),e(vt,vue),e(vue,ior),e(vt,dor),e(vt,bd),e(bd,cor),e(bd,Fue),e(Fue,mor),e(bd,gor),e(bd,uz),e(uz,hor),e(bd,por),e(vt,_or),M(K0,vt,null),e(Vo,uor),e(Vo,mo),M(L8,mo,null),e(mo,bor),e(mo,Tue),e(Tue,vor),e(mo,For),e(mo,Va),e(Va,Tor),e(Va,Mue),e(Mue,Mor),e(Va,Eor),e(Va,Eue),e(Eue,Cor),e(Va,wor),e(Va,Cue),e(Cue,Aor),e(Va,yor),e(mo,Lor),e(mo,ye),e(ye,Z0),e(Z0,wue),e(wue,xor),e(Z0,$or),e(Z0,bz),e(bz,kor),e(Z0,Sor),e(ye,Ror),e(ye,eF),e(eF,Aue),e(Aue,Por),e(eF,Bor),e(eF,vz),e(vz,Ior),e(eF,Nor),e(ye,qor),e(ye,oF),e(oF,yue),e(yue,jor),e(oF,Dor),e(oF,Fz),e(Fz,Gor),e(oF,Oor),e(ye,Vor),e(ye,rF),e(rF,Lue),e(Lue,Xor),e(rF,zor),e(rF,Tz),e(Tz,Wor),e(rF,Qor),e(ye,Hor),e(ye,tF),e(tF,xue),e(xue,Uor),e(tF,Jor),e(tF,Mz),e(Mz,Yor),e(tF,Kor),e(ye,Zor),e(ye,aF),e(aF,$ue),e($ue,err),e(aF,orr),e(aF,Ez),e(Ez,rrr),e(aF,trr),e(ye,arr),e(ye,nF),e(nF,kue),e(kue,nrr),e(nF,srr),e(nF,Cz),e(Cz,lrr),e(nF,irr),e(ye,drr),e(ye,sF),e(sF,Sue),e(Sue,crr),e(sF,frr),e(sF,wz),e(wz,mrr),e(sF,grr),e(ye,hrr),e(ye,lF),e(lF,Rue),e(Rue,prr),e(lF,_rr),e(lF,Az),e(Az,urr),e(lF,brr),e(ye,vrr),e(ye,iF),e(iF,Pue),e(Pue,Frr),e(iF,Trr),e(iF,yz),e(yz,Mrr),e(iF,Err),e(mo,Crr),e(mo,dF),e(dF,wrr),e(dF,Bue),e(Bue,Arr),e(dF,yrr),e(dF,Iue),e(Iue,Lrr),e(mo,xrr),M(cF,mo,null),b(f,nje,u),b(f,vd,u),e(vd,fF),e(fF,Nue),M(x8,Nue,null),e(vd,$rr),e(vd,que),e(que,krr),b(f,sje,u),b(f,Xo,u),M($8,Xo,null),e(Xo,Srr),e(Xo,Fd),e(Fd,Rrr),e(Fd,Lz),e(Lz,Prr),e(Fd,Brr),e(Fd,xz),e(xz,Irr),e(Fd,Nrr),e(Xo,qrr),e(Xo,k8),e(k8,jrr),e(k8,jue),e(jue,Drr),e(k8,Grr),e(Xo,Orr),e(Xo,Ft),M(S8,Ft,null),e(Ft,Vrr),e(Ft,Due),e(Due,Xrr),e(Ft,zrr),e(Ft,Td),e(Td,Wrr),e(Td,Gue),e(Gue,Qrr),e(Td,Hrr),e(Td,$z),e($z,Urr),e(Td,Jrr),e(Ft,Yrr),M(mF,Ft,null),e(Xo,Krr),e(Xo,go),M(R8,go,null),e(go,Zrr),e(go,Oue),e(Oue,etr),e(go,otr),e(go,Xa),e(Xa,rtr),e(Xa,Vue),e(Vue,ttr),e(Xa,atr),e(Xa,Xue),e(Xue,ntr),e(Xa,str),e(Xa,zue),e(zue,ltr),e(Xa,itr),e(go,dtr),e(go,P8),e(P8,gF),e(gF,Wue),e(Wue,ctr),e(gF,ftr),e(gF,kz),e(kz,mtr),e(gF,gtr),e(P8,htr),e(P8,hF),e(hF,Que),e(Que,ptr),e(hF,_tr),e(hF,Sz),e(Sz,utr),e(hF,btr),e(go,vtr),e(go,pF),e(pF,Ftr),e(pF,Hue),e(Hue,Ttr),e(pF,Mtr),e(pF,Uue),e(Uue,Etr),e(go,Ctr),M(_F,go,null),b(f,lje,u),b(f,Md,u),e(Md,uF),e(uF,Jue),M(B8,Jue,null),e(Md,wtr),e(Md,Yue),e(Yue,Atr),b(f,ije,u),b(f,zo,u),M(I8,zo,null),e(zo,ytr),e(zo,Ed),e(Ed,Ltr),e(Ed,Rz),e(Rz,xtr),e(Ed,$tr),e(Ed,Pz),e(Pz,ktr),e(Ed,Str),e(zo,Rtr),e(zo,N8),e(N8,Ptr),e(N8,Kue),e(Kue,Btr),e(N8,Itr),e(zo,Ntr),e(zo,Tt),M(q8,Tt,null),e(Tt,qtr),e(Tt,Zue),e(Zue,jtr),e(Tt,Dtr),e(Tt,Cd),e(Cd,Gtr),e(Cd,e2e),e(e2e,Otr),e(Cd,Vtr),e(Cd,Bz),e(Bz,Xtr),e(Cd,ztr),e(Tt,Wtr),M(bF,Tt,null),e(zo,Qtr),e(zo,ho),M(j8,ho,null),e(ho,Htr),e(ho,o2e),e(o2e,Utr),e(ho,Jtr),e(ho,za),e(za,Ytr),e(za,r2e),e(r2e,Ktr),e(za,Ztr),e(za,t2e),e(t2e,ear),e(za,oar),e(za,a2e),e(a2e,rar),e(za,tar),e(ho,aar),e(ho,Zr),e(Zr,vF),e(vF,n2e),e(n2e,nar),e(vF,sar),e(vF,Iz),e(Iz,lar),e(vF,iar),e(Zr,dar),e(Zr,FF),e(FF,s2e),e(s2e,car),e(FF,far),e(FF,Nz),e(Nz,mar),e(FF,gar),e(Zr,har),e(Zr,TF),e(TF,l2e),e(l2e,par),e(TF,_ar),e(TF,qz),e(qz,uar),e(TF,bar),e(Zr,Far),e(Zr,MF),e(MF,i2e),e(i2e,Tar),e(MF,Mar),e(MF,jz),e(jz,Ear),e(MF,Car),e(Zr,war),e(Zr,EF),e(EF,d2e),e(d2e,Aar),e(EF,yar),e(EF,Dz),e(Dz,Lar),e(EF,xar),e(ho,$ar),e(ho,CF),e(CF,kar),e(CF,c2e),e(c2e,Sar),e(CF,Rar),e(CF,f2e),e(f2e,Par),e(ho,Bar),M(wF,ho,null),b(f,dje,u),b(f,wd,u),e(wd,AF),e(AF,m2e),M(D8,m2e,null),e(wd,Iar),e(wd,g2e),e(g2e,Nar),b(f,cje,u),b(f,Wo,u),M(G8,Wo,null),e(Wo,qar),e(Wo,Ad),e(Ad,jar),e(Ad,Gz),e(Gz,Dar),e(Ad,Gar),e(Ad,Oz),e(Oz,Oar),e(Ad,Var),e(Wo,Xar),e(Wo,O8),e(O8,zar),e(O8,h2e),e(h2e,War),e(O8,Qar),e(Wo,Har),e(Wo,Mt),M(V8,Mt,null),e(Mt,Uar),e(Mt,p2e),e(p2e,Jar),e(Mt,Yar),e(Mt,yd),e(yd,Kar),e(yd,_2e),e(_2e,Zar),e(yd,enr),e(yd,Vz),e(Vz,onr),e(yd,rnr),e(Mt,tnr),M(yF,Mt,null),e(Wo,anr),e(Wo,po),M(X8,po,null),e(po,nnr),e(po,u2e),e(u2e,snr),e(po,lnr),e(po,Wa),e(Wa,inr),e(Wa,b2e),e(b2e,dnr),e(Wa,cnr),e(Wa,v2e),e(v2e,fnr),e(Wa,mnr),e(Wa,F2e),e(F2e,gnr),e(Wa,hnr),e(po,pnr),e(po,Ld),e(Ld,LF),e(LF,T2e),e(T2e,_nr),e(LF,unr),e(LF,Xz),e(Xz,bnr),e(LF,vnr),e(Ld,Fnr),e(Ld,xF),e(xF,M2e),e(M2e,Tnr),e(xF,Mnr),e(xF,zz),e(zz,Enr),e(xF,Cnr),e(Ld,wnr),e(Ld,$F),e($F,E2e),e(E2e,Anr),e($F,ynr),e($F,Wz),e(Wz,Lnr),e($F,xnr),e(po,$nr),e(po,kF),e(kF,knr),e(kF,C2e),e(C2e,Snr),e(kF,Rnr),e(kF,w2e),e(w2e,Pnr),e(po,Bnr),M(SF,po,null),b(f,fje,u),b(f,xd,u),e(xd,RF),e(RF,A2e),M(z8,A2e,null),e(xd,Inr),e(xd,y2e),e(y2e,Nnr),b(f,mje,u),b(f,Qo,u),M(W8,Qo,null),e(Qo,qnr),e(Qo,$d),e($d,jnr),e($d,Qz),e(Qz,Dnr),e($d,Gnr),e($d,Hz),e(Hz,Onr),e($d,Vnr),e(Qo,Xnr),e(Qo,Q8),e(Q8,znr),e(Q8,L2e),e(L2e,Wnr),e(Q8,Qnr),e(Qo,Hnr),e(Qo,Et),M(H8,Et,null),e(Et,Unr),e(Et,x2e),e(x2e,Jnr),e(Et,Ynr),e(Et,kd),e(kd,Knr),e(kd,$2e),e($2e,Znr),e(kd,esr),e(kd,Uz),e(Uz,osr),e(kd,rsr),e(Et,tsr),M(PF,Et,null),e(Qo,asr),e(Qo,_o),M(U8,_o,null),e(_o,nsr),e(_o,k2e),e(k2e,ssr),e(_o,lsr),e(_o,Qa),e(Qa,isr),e(Qa,S2e),e(S2e,dsr),e(Qa,csr),e(Qa,R2e),e(R2e,fsr),e(Qa,msr),e(Qa,P2e),e(P2e,gsr),e(Qa,hsr),e(_o,psr),e(_o,J8),e(J8,BF),e(BF,B2e),e(B2e,_sr),e(BF,usr),e(BF,Jz),e(Jz,bsr),e(BF,vsr),e(J8,Fsr),e(J8,IF),e(IF,I2e),e(I2e,Tsr),e(IF,Msr),e(IF,Yz),e(Yz,Esr),e(IF,Csr),e(_o,wsr),e(_o,NF),e(NF,Asr),e(NF,N2e),e(N2e,ysr),e(NF,Lsr),e(NF,q2e),e(q2e,xsr),e(_o,$sr),M(qF,_o,null),b(f,gje,u),b(f,Sd,u),e(Sd,jF),e(jF,j2e),M(Y8,j2e,null),e(Sd,ksr),e(Sd,D2e),e(D2e,Ssr),b(f,hje,u),b(f,Ho,u),M(K8,Ho,null),e(Ho,Rsr),e(Ho,Rd),e(Rd,Psr),e(Rd,Kz),e(Kz,Bsr),e(Rd,Isr),e(Rd,Zz),e(Zz,Nsr),e(Rd,qsr),e(Ho,jsr),e(Ho,Z8),e(Z8,Dsr),e(Z8,G2e),e(G2e,Gsr),e(Z8,Osr),e(Ho,Vsr),e(Ho,Ct),M(e7,Ct,null),e(Ct,Xsr),e(Ct,O2e),e(O2e,zsr),e(Ct,Wsr),e(Ct,Pd),e(Pd,Qsr),e(Pd,V2e),e(V2e,Hsr),e(Pd,Usr),e(Pd,eW),e(eW,Jsr),e(Pd,Ysr),e(Ct,Ksr),M(DF,Ct,null),e(Ho,Zsr),e(Ho,uo),M(o7,uo,null),e(uo,elr),e(uo,X2e),e(X2e,olr),e(uo,rlr),e(uo,Ha),e(Ha,tlr),e(Ha,z2e),e(z2e,alr),e(Ha,nlr),e(Ha,W2e),e(W2e,slr),e(Ha,llr),e(Ha,Q2e),e(Q2e,ilr),e(Ha,dlr),e(uo,clr),e(uo,H2e),e(H2e,GF),e(GF,U2e),e(U2e,flr),e(GF,mlr),e(GF,oW),e(oW,glr),e(GF,hlr),e(uo,plr),e(uo,OF),e(OF,_lr),e(OF,J2e),e(J2e,ulr),e(OF,blr),e(OF,Y2e),e(Y2e,vlr),e(uo,Flr),M(VF,uo,null),b(f,pje,u),b(f,Bd,u),e(Bd,XF),e(XF,K2e),M(r7,K2e,null),e(Bd,Tlr),e(Bd,Z2e),e(Z2e,Mlr),b(f,_je,u),b(f,Uo,u),M(t7,Uo,null),e(Uo,Elr),e(Uo,Id),e(Id,Clr),e(Id,rW),e(rW,wlr),e(Id,Alr),e(Id,tW),e(tW,ylr),e(Id,Llr),e(Uo,xlr),e(Uo,a7),e(a7,$lr),e(a7,e1e),e(e1e,klr),e(a7,Slr),e(Uo,Rlr),e(Uo,wt),M(n7,wt,null),e(wt,Plr),e(wt,o1e),e(o1e,Blr),e(wt,Ilr),e(wt,Nd),e(Nd,Nlr),e(Nd,r1e),e(r1e,qlr),e(Nd,jlr),e(Nd,aW),e(aW,Dlr),e(Nd,Glr),e(wt,Olr),M(zF,wt,null),e(Uo,Vlr),e(Uo,bo),M(s7,bo,null),e(bo,Xlr),e(bo,t1e),e(t1e,zlr),e(bo,Wlr),e(bo,Ua),e(Ua,Qlr),e(Ua,a1e),e(a1e,Hlr),e(Ua,Ulr),e(Ua,n1e),e(n1e,Jlr),e(Ua,Ylr),e(Ua,s1e),e(s1e,Klr),e(Ua,Zlr),e(bo,eir),e(bo,Ja),e(Ja,WF),e(WF,l1e),e(l1e,oir),e(WF,rir),e(WF,nW),e(nW,tir),e(WF,air),e(Ja,nir),e(Ja,QF),e(QF,i1e),e(i1e,sir),e(QF,lir),e(QF,sW),e(sW,iir),e(QF,dir),e(Ja,cir),e(Ja,HF),e(HF,d1e),e(d1e,fir),e(HF,mir),e(HF,lW),e(lW,gir),e(HF,hir),e(Ja,pir),e(Ja,UF),e(UF,c1e),e(c1e,_ir),e(UF,uir),e(UF,iW),e(iW,bir),e(UF,vir),e(bo,Fir),e(bo,JF),e(JF,Tir),e(JF,f1e),e(f1e,Mir),e(JF,Eir),e(JF,m1e),e(m1e,Cir),e(bo,wir),M(YF,bo,null),b(f,uje,u),b(f,qd,u),e(qd,KF),e(KF,g1e),M(l7,g1e,null),e(qd,Air),e(qd,h1e),e(h1e,yir),b(f,bje,u),b(f,Jo,u),M(i7,Jo,null),e(Jo,Lir),e(Jo,jd),e(jd,xir),e(jd,dW),e(dW,$ir),e(jd,kir),e(jd,cW),e(cW,Sir),e(jd,Rir),e(Jo,Pir),e(Jo,d7),e(d7,Bir),e(d7,p1e),e(p1e,Iir),e(d7,Nir),e(Jo,qir),e(Jo,At),M(c7,At,null),e(At,jir),e(At,_1e),e(_1e,Dir),e(At,Gir),e(At,Dd),e(Dd,Oir),e(Dd,u1e),e(u1e,Vir),e(Dd,Xir),e(Dd,fW),e(fW,zir),e(Dd,Wir),e(At,Qir),M(ZF,At,null),e(Jo,Hir),e(Jo,vo),M(f7,vo,null),e(vo,Uir),e(vo,b1e),e(b1e,Jir),e(vo,Yir),e(vo,Ya),e(Ya,Kir),e(Ya,v1e),e(v1e,Zir),e(Ya,edr),e(Ya,F1e),e(F1e,odr),e(Ya,rdr),e(Ya,T1e),e(T1e,tdr),e(Ya,adr),e(vo,ndr),e(vo,M1e),e(M1e,e6),e(e6,E1e),e(E1e,sdr),e(e6,ldr),e(e6,mW),e(mW,idr),e(e6,ddr),e(vo,cdr),e(vo,o6),e(o6,fdr),e(o6,C1e),e(C1e,mdr),e(o6,gdr),e(o6,w1e),e(w1e,hdr),e(vo,pdr),M(r6,vo,null),b(f,vje,u),b(f,Gd,u),e(Gd,t6),e(t6,A1e),M(m7,A1e,null),e(Gd,_dr),e(Gd,y1e),e(y1e,udr),b(f,Fje,u),b(f,Yo,u),M(g7,Yo,null),e(Yo,bdr),e(Yo,Od),e(Od,vdr),e(Od,gW),e(gW,Fdr),e(Od,Tdr),e(Od,hW),e(hW,Mdr),e(Od,Edr),e(Yo,Cdr),e(Yo,h7),e(h7,wdr),e(h7,L1e),e(L1e,Adr),e(h7,ydr),e(Yo,Ldr),e(Yo,yt),M(p7,yt,null),e(yt,xdr),e(yt,x1e),e(x1e,$dr),e(yt,kdr),e(yt,Vd),e(Vd,Sdr),e(Vd,$1e),e($1e,Rdr),e(Vd,Pdr),e(Vd,pW),e(pW,Bdr),e(Vd,Idr),e(yt,Ndr),M(a6,yt,null),e(Yo,qdr),e(Yo,wr),M(_7,wr,null),e(wr,jdr),e(wr,k1e),e(k1e,Ddr),e(wr,Gdr),e(wr,Ka),e(Ka,Odr),e(Ka,S1e),e(S1e,Vdr),e(Ka,Xdr),e(Ka,R1e),e(R1e,zdr),e(Ka,Wdr),e(Ka,P1e),e(P1e,Qdr),e(Ka,Hdr),e(wr,Udr),e(wr,q),e(q,n6),e(n6,B1e),e(B1e,Jdr),e(n6,Ydr),e(n6,_W),e(_W,Kdr),e(n6,Zdr),e(q,ecr),e(q,s6),e(s6,I1e),e(I1e,ocr),e(s6,rcr),e(s6,uW),e(uW,tcr),e(s6,acr),e(q,ncr),e(q,l6),e(l6,N1e),e(N1e,scr),e(l6,lcr),e(l6,bW),e(bW,icr),e(l6,dcr),e(q,ccr),e(q,i6),e(i6,q1e),e(q1e,fcr),e(i6,mcr),e(i6,vW),e(vW,gcr),e(i6,hcr),e(q,pcr),e(q,d6),e(d6,j1e),e(j1e,_cr),e(d6,ucr),e(d6,FW),e(FW,bcr),e(d6,vcr),e(q,Fcr),e(q,c6),e(c6,D1e),e(D1e,Tcr),e(c6,Mcr),e(c6,TW),e(TW,Ecr),e(c6,Ccr),e(q,wcr),e(q,f6),e(f6,G1e),e(G1e,Acr),e(f6,ycr),e(f6,MW),e(MW,Lcr),e(f6,xcr),e(q,$cr),e(q,m6),e(m6,O1e),e(O1e,kcr),e(m6,Scr),e(m6,EW),e(EW,Rcr),e(m6,Pcr),e(q,Bcr),e(q,g6),e(g6,V1e),e(V1e,Icr),e(g6,Ncr),e(g6,CW),e(CW,qcr),e(g6,jcr),e(q,Dcr),e(q,h6),e(h6,X1e),e(X1e,Gcr),e(h6,Ocr),e(h6,wW),e(wW,Vcr),e(h6,Xcr),e(q,zcr),e(q,p6),e(p6,z1e),e(z1e,Wcr),e(p6,Qcr),e(p6,AW),e(AW,Hcr),e(p6,Ucr),e(q,Jcr),e(q,_6),e(_6,W1e),e(W1e,Ycr),e(_6,Kcr),e(_6,yW),e(yW,Zcr),e(_6,efr),e(q,ofr),e(q,u6),e(u6,Q1e),e(Q1e,rfr),e(u6,tfr),e(u6,LW),e(LW,afr),e(u6,nfr),e(q,sfr),e(q,b6),e(b6,H1e),e(H1e,lfr),e(b6,ifr),e(b6,xW),e(xW,dfr),e(b6,cfr),e(q,ffr),e(q,v6),e(v6,U1e),e(U1e,mfr),e(v6,gfr),e(v6,$W),e($W,hfr),e(v6,pfr),e(q,_fr),e(q,F6),e(F6,J1e),e(J1e,ufr),e(F6,bfr),e(F6,kW),e(kW,vfr),e(F6,Ffr),e(q,Tfr),e(q,T6),e(T6,Y1e),e(Y1e,Mfr),e(T6,Efr),e(T6,SW),e(SW,Cfr),e(T6,wfr),e(q,Afr),e(q,Is),e(Is,K1e),e(K1e,yfr),e(Is,Lfr),e(Is,RW),e(RW,xfr),e(Is,$fr),e(Is,PW),e(PW,kfr),e(Is,Sfr),e(q,Rfr),e(q,M6),e(M6,Z1e),e(Z1e,Pfr),e(M6,Bfr),e(M6,BW),e(BW,Ifr),e(M6,Nfr),e(q,qfr),e(q,E6),e(E6,ebe),e(ebe,jfr),e(E6,Dfr),e(E6,IW),e(IW,Gfr),e(E6,Ofr),e(q,Vfr),e(q,C6),e(C6,obe),e(obe,Xfr),e(C6,zfr),e(C6,NW),e(NW,Wfr),e(C6,Qfr),e(q,Hfr),e(q,w6),e(w6,rbe),e(rbe,Ufr),e(w6,Jfr),e(w6,qW),e(qW,Yfr),e(w6,Kfr),e(q,Zfr),e(q,A6),e(A6,tbe),e(tbe,emr),e(A6,omr),e(A6,jW),e(jW,rmr),e(A6,tmr),e(q,amr),e(q,y6),e(y6,abe),e(abe,nmr),e(y6,smr),e(y6,DW),e(DW,lmr),e(y6,imr),e(q,dmr),e(q,L6),e(L6,nbe),e(nbe,cmr),e(L6,fmr),e(L6,GW),e(GW,mmr),e(L6,gmr),e(q,hmr),e(q,x6),e(x6,sbe),e(sbe,pmr),e(x6,_mr),e(x6,OW),e(OW,umr),e(x6,bmr),e(q,vmr),e(q,$6),e($6,lbe),e(lbe,Fmr),e($6,Tmr),e($6,VW),e(VW,Mmr),e($6,Emr),e(q,Cmr),e(q,k6),e(k6,ibe),e(ibe,wmr),e(k6,Amr),e(k6,XW),e(XW,ymr),e(k6,Lmr),e(q,xmr),e(q,S6),e(S6,dbe),e(dbe,$mr),e(S6,kmr),e(S6,zW),e(zW,Smr),e(S6,Rmr),e(q,Pmr),e(q,R6),e(R6,cbe),e(cbe,Bmr),e(R6,Imr),e(R6,WW),e(WW,Nmr),e(R6,qmr),e(q,jmr),e(q,P6),e(P6,fbe),e(fbe,Dmr),e(P6,Gmr),e(P6,QW),e(QW,Omr),e(P6,Vmr),e(q,Xmr),e(q,B6),e(B6,mbe),e(mbe,zmr),e(B6,Wmr),e(B6,HW),e(HW,Qmr),e(B6,Hmr),e(q,Umr),e(q,I6),e(I6,gbe),e(gbe,Jmr),e(I6,Ymr),e(I6,UW),e(UW,Kmr),e(I6,Zmr),e(q,egr),e(q,N6),e(N6,hbe),e(hbe,ogr),e(N6,rgr),e(N6,JW),e(JW,tgr),e(N6,agr),e(q,ngr),e(q,q6),e(q6,pbe),e(pbe,sgr),e(q6,lgr),e(q6,YW),e(YW,igr),e(q6,dgr),e(q,cgr),e(q,j6),e(j6,_be),e(_be,fgr),e(j6,mgr),e(j6,KW),e(KW,ggr),e(j6,hgr),e(q,pgr),e(q,D6),e(D6,ube),e(ube,_gr),e(D6,ugr),e(D6,ZW),e(ZW,bgr),e(D6,vgr),e(q,Fgr),e(q,G6),e(G6,bbe),e(bbe,Tgr),e(G6,Mgr),e(G6,eQ),e(eQ,Egr),e(G6,Cgr),e(q,wgr),e(q,O6),e(O6,vbe),e(vbe,Agr),e(O6,ygr),e(O6,oQ),e(oQ,Lgr),e(O6,xgr),e(q,$gr),e(q,V6),e(V6,Fbe),e(Fbe,kgr),e(V6,Sgr),e(V6,rQ),e(rQ,Rgr),e(V6,Pgr),e(q,Bgr),e(q,X6),e(X6,Tbe),e(Tbe,Igr),e(X6,Ngr),e(X6,tQ),e(tQ,qgr),e(X6,jgr),e(q,Dgr),e(q,z6),e(z6,Mbe),e(Mbe,Ggr),e(z6,Ogr),e(z6,aQ),e(aQ,Vgr),e(z6,Xgr),e(q,zgr),e(q,W6),e(W6,Ebe),e(Ebe,Wgr),e(W6,Qgr),e(W6,nQ),e(nQ,Hgr),e(W6,Ugr),e(q,Jgr),e(q,Q6),e(Q6,Cbe),e(Cbe,Ygr),e(Q6,Kgr),e(Q6,sQ),e(sQ,Zgr),e(Q6,ehr),e(q,ohr),e(q,H6),e(H6,wbe),e(wbe,rhr),e(H6,thr),e(H6,lQ),e(lQ,ahr),e(H6,nhr),e(q,shr),e(q,U6),e(U6,Abe),e(Abe,lhr),e(U6,ihr),e(U6,iQ),e(iQ,dhr),e(U6,chr),e(wr,fhr),M(J6,wr,null),b(f,Tje,u),b(f,Xd,u),e(Xd,Y6),e(Y6,ybe),M(u7,ybe,null),e(Xd,mhr),e(Xd,Lbe),e(Lbe,ghr),b(f,Mje,u),b(f,Ko,u),M(b7,Ko,null),e(Ko,hhr),e(Ko,zd),e(zd,phr),e(zd,dQ),e(dQ,_hr),e(zd,uhr),e(zd,cQ),e(cQ,bhr),e(zd,vhr),e(Ko,Fhr),e(Ko,v7),e(v7,Thr),e(v7,xbe),e(xbe,Mhr),e(v7,Ehr),e(Ko,Chr),e(Ko,Lt),M(F7,Lt,null),e(Lt,whr),e(Lt,$be),e($be,Ahr),e(Lt,yhr),e(Lt,Wd),e(Wd,Lhr),e(Wd,kbe),e(kbe,xhr),e(Wd,$hr),e(Wd,fQ),e(fQ,khr),e(Wd,Shr),e(Lt,Rhr),M(K6,Lt,null),e(Ko,Phr),e(Ko,Ar),M(T7,Ar,null),e(Ar,Bhr),e(Ar,Sbe),e(Sbe,Ihr),e(Ar,Nhr),e(Ar,Za),e(Za,qhr),e(Za,Rbe),e(Rbe,jhr),e(Za,Dhr),e(Za,Pbe),e(Pbe,Ghr),e(Za,Ohr),e(Za,Bbe),e(Bbe,Vhr),e(Za,Xhr),e(Ar,zhr),e(Ar,se),e(se,Z6),e(Z6,Ibe),e(Ibe,Whr),e(Z6,Qhr),e(Z6,mQ),e(mQ,Hhr),e(Z6,Uhr),e(se,Jhr),e(se,eT),e(eT,Nbe),e(Nbe,Yhr),e(eT,Khr),e(eT,gQ),e(gQ,Zhr),e(eT,epr),e(se,opr),e(se,oT),e(oT,qbe),e(qbe,rpr),e(oT,tpr),e(oT,hQ),e(hQ,apr),e(oT,npr),e(se,spr),e(se,rT),e(rT,jbe),e(jbe,lpr),e(rT,ipr),e(rT,pQ),e(pQ,dpr),e(rT,cpr),e(se,fpr),e(se,tT),e(tT,Dbe),e(Dbe,mpr),e(tT,gpr),e(tT,_Q),e(_Q,hpr),e(tT,ppr),e(se,_pr),e(se,aT),e(aT,Gbe),e(Gbe,upr),e(aT,bpr),e(aT,uQ),e(uQ,vpr),e(aT,Fpr),e(se,Tpr),e(se,nT),e(nT,Obe),e(Obe,Mpr),e(nT,Epr),e(nT,bQ),e(bQ,Cpr),e(nT,wpr),e(se,Apr),e(se,sT),e(sT,Vbe),e(Vbe,ypr),e(sT,Lpr),e(sT,vQ),e(vQ,xpr),e(sT,$pr),e(se,kpr),e(se,lT),e(lT,Xbe),e(Xbe,Spr),e(lT,Rpr),e(lT,FQ),e(FQ,Ppr),e(lT,Bpr),e(se,Ipr),e(se,iT),e(iT,zbe),e(zbe,Npr),e(iT,qpr),e(iT,TQ),e(TQ,jpr),e(iT,Dpr),e(se,Gpr),e(se,dT),e(dT,Wbe),e(Wbe,Opr),e(dT,Vpr),e(dT,MQ),e(MQ,Xpr),e(dT,zpr),e(se,Wpr),e(se,cT),e(cT,Qbe),e(Qbe,Qpr),e(cT,Hpr),e(cT,EQ),e(EQ,Upr),e(cT,Jpr),e(se,Ypr),e(se,fT),e(fT,Hbe),e(Hbe,Kpr),e(fT,Zpr),e(fT,CQ),e(CQ,e_r),e(fT,o_r),e(se,r_r),e(se,mT),e(mT,Ube),e(Ube,t_r),e(mT,a_r),e(mT,wQ),e(wQ,n_r),e(mT,s_r),e(se,l_r),e(se,gT),e(gT,Jbe),e(Jbe,i_r),e(gT,d_r),e(gT,AQ),e(AQ,c_r),e(gT,f_r),e(se,m_r),e(se,hT),e(hT,Ybe),e(Ybe,g_r),e(hT,h_r),e(hT,yQ),e(yQ,p_r),e(hT,__r),e(se,u_r),e(se,pT),e(pT,Kbe),e(Kbe,b_r),e(pT,v_r),e(pT,LQ),e(LQ,F_r),e(pT,T_r),e(se,M_r),e(se,_T),e(_T,Zbe),e(Zbe,E_r),e(_T,C_r),e(_T,xQ),e(xQ,w_r),e(_T,A_r),e(se,y_r),e(se,uT),e(uT,e4e),e(e4e,L_r),e(uT,x_r),e(uT,$Q),e($Q,$_r),e(uT,k_r),e(se,S_r),e(se,bT),e(bT,o4e),e(o4e,R_r),e(bT,P_r),e(bT,kQ),e(kQ,B_r),e(bT,I_r),e(se,N_r),e(se,vT),e(vT,r4e),e(r4e,q_r),e(vT,j_r),e(vT,SQ),e(SQ,D_r),e(vT,G_r),e(se,O_r),e(se,FT),e(FT,t4e),e(t4e,V_r),e(FT,X_r),e(FT,RQ),e(RQ,z_r),e(FT,W_r),e(se,Q_r),e(se,TT),e(TT,a4e),e(a4e,H_r),e(TT,U_r),e(TT,PQ),e(PQ,J_r),e(TT,Y_r),e(Ar,K_r),M(MT,Ar,null),b(f,Eje,u),b(f,Qd,u),e(Qd,ET),e(ET,n4e),M(M7,n4e,null),e(Qd,Z_r),e(Qd,s4e),e(s4e,eur),b(f,Cje,u),b(f,Zo,u),M(E7,Zo,null),e(Zo,our),e(Zo,Hd),e(Hd,rur),e(Hd,BQ),e(BQ,tur),e(Hd,aur),e(Hd,IQ),e(IQ,nur),e(Hd,sur),e(Zo,lur),e(Zo,C7),e(C7,iur),e(C7,l4e),e(l4e,dur),e(C7,cur),e(Zo,fur),e(Zo,xt),M(w7,xt,null),e(xt,mur),e(xt,i4e),e(i4e,gur),e(xt,hur),e(xt,Ud),e(Ud,pur),e(Ud,d4e),e(d4e,_ur),e(Ud,uur),e(Ud,NQ),e(NQ,bur),e(Ud,vur),e(xt,Fur),M(CT,xt,null),e(Zo,Tur),e(Zo,yr),M(A7,yr,null),e(yr,Mur),e(yr,c4e),e(c4e,Eur),e(yr,Cur),e(yr,en),e(en,wur),e(en,f4e),e(f4e,Aur),e(en,yur),e(en,m4e),e(m4e,Lur),e(en,xur),e(en,g4e),e(g4e,$ur),e(en,kur),e(yr,Sur),e(yr,Me),e(Me,wT),e(wT,h4e),e(h4e,Rur),e(wT,Pur),e(wT,qQ),e(qQ,Bur),e(wT,Iur),e(Me,Nur),e(Me,AT),e(AT,p4e),e(p4e,qur),e(AT,jur),e(AT,jQ),e(jQ,Dur),e(AT,Gur),e(Me,Our),e(Me,yT),e(yT,_4e),e(_4e,Vur),e(yT,Xur),e(yT,DQ),e(DQ,zur),e(yT,Wur),e(Me,Qur),e(Me,LT),e(LT,u4e),e(u4e,Hur),e(LT,Uur),e(LT,GQ),e(GQ,Jur),e(LT,Yur),e(Me,Kur),e(Me,xT),e(xT,b4e),e(b4e,Zur),e(xT,e2r),e(xT,OQ),e(OQ,o2r),e(xT,r2r),e(Me,t2r),e(Me,$T),e($T,v4e),e(v4e,a2r),e($T,n2r),e($T,VQ),e(VQ,s2r),e($T,l2r),e(Me,i2r),e(Me,kT),e(kT,F4e),e(F4e,d2r),e(kT,c2r),e(kT,XQ),e(XQ,f2r),e(kT,m2r),e(Me,g2r),e(Me,ST),e(ST,T4e),e(T4e,h2r),e(ST,p2r),e(ST,zQ),e(zQ,_2r),e(ST,u2r),e(Me,b2r),e(Me,RT),e(RT,M4e),e(M4e,v2r),e(RT,F2r),e(RT,WQ),e(WQ,T2r),e(RT,M2r),e(Me,E2r),e(Me,PT),e(PT,E4e),e(E4e,C2r),e(PT,w2r),e(PT,QQ),e(QQ,A2r),e(PT,y2r),e(Me,L2r),e(Me,BT),e(BT,C4e),e(C4e,x2r),e(BT,$2r),e(BT,HQ),e(HQ,k2r),e(BT,S2r),e(Me,R2r),e(Me,IT),e(IT,w4e),e(w4e,P2r),e(IT,B2r),e(IT,UQ),e(UQ,I2r),e(IT,N2r),e(yr,q2r),M(NT,yr,null),b(f,wje,u),b(f,Jd,u),e(Jd,qT),e(qT,A4e),M(y7,A4e,null),e(Jd,j2r),e(Jd,y4e),e(y4e,D2r),b(f,Aje,u),b(f,er,u),M(L7,er,null),e(er,G2r),e(er,Yd),e(Yd,O2r),e(Yd,JQ),e(JQ,V2r),e(Yd,X2r),e(Yd,YQ),e(YQ,z2r),e(Yd,W2r),e(er,Q2r),e(er,x7),e(x7,H2r),e(x7,L4e),e(L4e,U2r),e(x7,J2r),e(er,Y2r),e(er,$t),M($7,$t,null),e($t,K2r),e($t,x4e),e(x4e,Z2r),e($t,e1r),e($t,Kd),e(Kd,o1r),e(Kd,$4e),e($4e,r1r),e(Kd,t1r),e(Kd,KQ),e(KQ,a1r),e(Kd,n1r),e($t,s1r),M(jT,$t,null),e(er,l1r),e(er,Lr),M(k7,Lr,null),e(Lr,i1r),e(Lr,k4e),e(k4e,d1r),e(Lr,c1r),e(Lr,on),e(on,f1r),e(on,S4e),e(S4e,m1r),e(on,g1r),e(on,R4e),e(R4e,h1r),e(on,p1r),e(on,P4e),e(P4e,_1r),e(on,u1r),e(Lr,b1r),e(Lr,rn),e(rn,DT),e(DT,B4e),e(B4e,v1r),e(DT,F1r),e(DT,ZQ),e(ZQ,T1r),e(DT,M1r),e(rn,E1r),e(rn,GT),e(GT,I4e),e(I4e,C1r),e(GT,w1r),e(GT,eH),e(eH,A1r),e(GT,y1r),e(rn,L1r),e(rn,OT),e(OT,N4e),e(N4e,x1r),e(OT,$1r),e(OT,oH),e(oH,k1r),e(OT,S1r),e(rn,R1r),e(rn,VT),e(VT,q4e),e(q4e,P1r),e(VT,B1r),e(VT,rH),e(rH,I1r),e(VT,N1r),e(Lr,q1r),M(XT,Lr,null),b(f,yje,u),b(f,Zd,u),e(Zd,zT),e(zT,j4e),M(S7,j4e,null),e(Zd,j1r),e(Zd,D4e),e(D4e,D1r),b(f,Lje,u),b(f,or,u),M(R7,or,null),e(or,G1r),e(or,ec),e(ec,O1r),e(ec,tH),e(tH,V1r),e(ec,X1r),e(ec,aH),e(aH,z1r),e(ec,W1r),e(or,Q1r),e(or,P7),e(P7,H1r),e(P7,G4e),e(G4e,U1r),e(P7,J1r),e(or,Y1r),e(or,kt),M(B7,kt,null),e(kt,K1r),e(kt,O4e),e(O4e,Z1r),e(kt,ebr),e(kt,oc),e(oc,obr),e(oc,V4e),e(V4e,rbr),e(oc,tbr),e(oc,nH),e(nH,abr),e(oc,nbr),e(kt,sbr),M(WT,kt,null),e(or,lbr),e(or,xr),M(I7,xr,null),e(xr,ibr),e(xr,X4e),e(X4e,dbr),e(xr,cbr),e(xr,tn),e(tn,fbr),e(tn,z4e),e(z4e,mbr),e(tn,gbr),e(tn,W4e),e(W4e,hbr),e(tn,pbr),e(tn,Q4e),e(Q4e,_br),e(tn,ubr),e(xr,bbr),e(xr,ie),e(ie,QT),e(QT,H4e),e(H4e,vbr),e(QT,Fbr),e(QT,sH),e(sH,Tbr),e(QT,Mbr),e(ie,Ebr),e(ie,HT),e(HT,U4e),e(U4e,Cbr),e(HT,wbr),e(HT,lH),e(lH,Abr),e(HT,ybr),e(ie,Lbr),e(ie,UT),e(UT,J4e),e(J4e,xbr),e(UT,$br),e(UT,iH),e(iH,kbr),e(UT,Sbr),e(ie,Rbr),e(ie,JT),e(JT,Y4e),e(Y4e,Pbr),e(JT,Bbr),e(JT,dH),e(dH,Ibr),e(JT,Nbr),e(ie,qbr),e(ie,YT),e(YT,K4e),e(K4e,jbr),e(YT,Dbr),e(YT,cH),e(cH,Gbr),e(YT,Obr),e(ie,Vbr),e(ie,KT),e(KT,Z4e),e(Z4e,Xbr),e(KT,zbr),e(KT,fH),e(fH,Wbr),e(KT,Qbr),e(ie,Hbr),e(ie,ZT),e(ZT,eve),e(eve,Ubr),e(ZT,Jbr),e(ZT,mH),e(mH,Ybr),e(ZT,Kbr),e(ie,Zbr),e(ie,eM),e(eM,ove),e(ove,e4r),e(eM,o4r),e(eM,gH),e(gH,r4r),e(eM,t4r),e(ie,a4r),e(ie,oM),e(oM,rve),e(rve,n4r),e(oM,s4r),e(oM,hH),e(hH,l4r),e(oM,i4r),e(ie,d4r),e(ie,rM),e(rM,tve),e(tve,c4r),e(rM,f4r),e(rM,pH),e(pH,m4r),e(rM,g4r),e(ie,h4r),e(ie,tM),e(tM,ave),e(ave,p4r),e(tM,_4r),e(tM,_H),e(_H,u4r),e(tM,b4r),e(ie,v4r),e(ie,aM),e(aM,nve),e(nve,F4r),e(aM,T4r),e(aM,uH),e(uH,M4r),e(aM,E4r),e(ie,C4r),e(ie,nM),e(nM,sve),e(sve,w4r),e(nM,A4r),e(nM,bH),e(bH,y4r),e(nM,L4r),e(ie,x4r),e(ie,sM),e(sM,lve),e(lve,$4r),e(sM,k4r),e(sM,vH),e(vH,S4r),e(sM,R4r),e(ie,P4r),e(ie,lM),e(lM,ive),e(ive,B4r),e(lM,I4r),e(lM,FH),e(FH,N4r),e(lM,q4r),e(ie,j4r),e(ie,iM),e(iM,dve),e(dve,D4r),e(iM,G4r),e(iM,TH),e(TH,O4r),e(iM,V4r),e(ie,X4r),e(ie,dM),e(dM,cve),e(cve,z4r),e(dM,W4r),e(dM,MH),e(MH,Q4r),e(dM,H4r),e(ie,U4r),e(ie,cM),e(cM,fve),e(fve,J4r),e(cM,Y4r),e(cM,EH),e(EH,K4r),e(cM,Z4r),e(ie,evr),e(ie,fM),e(fM,mve),e(mve,ovr),e(fM,rvr),e(fM,CH),e(CH,tvr),e(fM,avr),e(ie,nvr),e(ie,mM),e(mM,gve),e(gve,svr),e(mM,lvr),e(mM,wH),e(wH,ivr),e(mM,dvr),e(xr,cvr),M(gM,xr,null),b(f,xje,u),b(f,rc,u),e(rc,hM),e(hM,hve),M(N7,hve,null),e(rc,fvr),e(rc,pve),e(pve,mvr),b(f,$je,u),b(f,rr,u),M(q7,rr,null),e(rr,gvr),e(rr,tc),e(tc,hvr),e(tc,AH),e(AH,pvr),e(tc,_vr),e(tc,yH),e(yH,uvr),e(tc,bvr),e(rr,vvr),e(rr,j7),e(j7,Fvr),e(j7,_ve),e(_ve,Tvr),e(j7,Mvr),e(rr,Evr),e(rr,St),M(D7,St,null),e(St,Cvr),e(St,uve),e(uve,wvr),e(St,Avr),e(St,ac),e(ac,yvr),e(ac,bve),e(bve,Lvr),e(ac,xvr),e(ac,LH),e(LH,$vr),e(ac,kvr),e(St,Svr),M(pM,St,null),e(rr,Rvr),e(rr,$r),M(G7,$r,null),e($r,Pvr),e($r,vve),e(vve,Bvr),e($r,Ivr),e($r,an),e(an,Nvr),e(an,Fve),e(Fve,qvr),e(an,jvr),e(an,Tve),e(Tve,Dvr),e(an,Gvr),e(an,Mve),e(Mve,Ovr),e(an,Vvr),e($r,Xvr),e($r,Le),e(Le,_M),e(_M,Eve),e(Eve,zvr),e(_M,Wvr),e(_M,xH),e(xH,Qvr),e(_M,Hvr),e(Le,Uvr),e(Le,uM),e(uM,Cve),e(Cve,Jvr),e(uM,Yvr),e(uM,$H),e($H,Kvr),e(uM,Zvr),e(Le,e0r),e(Le,bM),e(bM,wve),e(wve,o0r),e(bM,r0r),e(bM,kH),e(kH,t0r),e(bM,a0r),e(Le,n0r),e(Le,vM),e(vM,Ave),e(Ave,s0r),e(vM,l0r),e(vM,SH),e(SH,i0r),e(vM,d0r),e(Le,c0r),e(Le,FM),e(FM,yve),e(yve,f0r),e(FM,m0r),e(FM,RH),e(RH,g0r),e(FM,h0r),e(Le,p0r),e(Le,TM),e(TM,Lve),e(Lve,_0r),e(TM,u0r),e(TM,PH),e(PH,b0r),e(TM,v0r),e(Le,F0r),e(Le,MM),e(MM,xve),e(xve,T0r),e(MM,M0r),e(MM,BH),e(BH,E0r),e(MM,C0r),e(Le,w0r),e(Le,EM),e(EM,$ve),e($ve,A0r),e(EM,y0r),e(EM,IH),e(IH,L0r),e(EM,x0r),e(Le,$0r),e(Le,CM),e(CM,kve),e(kve,k0r),e(CM,S0r),e(CM,NH),e(NH,R0r),e(CM,P0r),e(Le,B0r),e(Le,wM),e(wM,Sve),e(Sve,I0r),e(wM,N0r),e(wM,qH),e(qH,q0r),e(wM,j0r),e($r,D0r),M(AM,$r,null),b(f,kje,u),b(f,nc,u),e(nc,yM),e(yM,Rve),M(O7,Rve,null),e(nc,G0r),e(nc,Pve),e(Pve,O0r),b(f,Sje,u),b(f,tr,u),M(V7,tr,null),e(tr,V0r),e(tr,sc),e(sc,X0r),e(sc,jH),e(jH,z0r),e(sc,W0r),e(sc,DH),e(DH,Q0r),e(sc,H0r),e(tr,U0r),e(tr,X7),e(X7,J0r),e(X7,Bve),e(Bve,Y0r),e(X7,K0r),e(tr,Z0r),e(tr,Rt),M(z7,Rt,null),e(Rt,eFr),e(Rt,Ive),e(Ive,oFr),e(Rt,rFr),e(Rt,lc),e(lc,tFr),e(lc,Nve),e(Nve,aFr),e(lc,nFr),e(lc,GH),e(GH,sFr),e(lc,lFr),e(Rt,iFr),M(LM,Rt,null),e(tr,dFr),e(tr,kr),M(W7,kr,null),e(kr,cFr),e(kr,qve),e(qve,fFr),e(kr,mFr),e(kr,nn),e(nn,gFr),e(nn,jve),e(jve,hFr),e(nn,pFr),e(nn,Dve),e(Dve,_Fr),e(nn,uFr),e(nn,Gve),e(Gve,bFr),e(nn,vFr),e(kr,FFr),e(kr,oe),e(oe,xM),e(xM,Ove),e(Ove,TFr),e(xM,MFr),e(xM,OH),e(OH,EFr),e(xM,CFr),e(oe,wFr),e(oe,$M),e($M,Vve),e(Vve,AFr),e($M,yFr),e($M,VH),e(VH,LFr),e($M,xFr),e(oe,$Fr),e(oe,kM),e(kM,Xve),e(Xve,kFr),e(kM,SFr),e(kM,XH),e(XH,RFr),e(kM,PFr),e(oe,BFr),e(oe,SM),e(SM,zve),e(zve,IFr),e(SM,NFr),e(SM,zH),e(zH,qFr),e(SM,jFr),e(oe,DFr),e(oe,RM),e(RM,Wve),e(Wve,GFr),e(RM,OFr),e(RM,WH),e(WH,VFr),e(RM,XFr),e(oe,zFr),e(oe,PM),e(PM,Qve),e(Qve,WFr),e(PM,QFr),e(PM,QH),e(QH,HFr),e(PM,UFr),e(oe,JFr),e(oe,BM),e(BM,Hve),e(Hve,YFr),e(BM,KFr),e(BM,HH),e(HH,ZFr),e(BM,e6r),e(oe,o6r),e(oe,IM),e(IM,Uve),e(Uve,r6r),e(IM,t6r),e(IM,UH),e(UH,a6r),e(IM,n6r),e(oe,s6r),e(oe,NM),e(NM,Jve),e(Jve,l6r),e(NM,i6r),e(NM,JH),e(JH,d6r),e(NM,c6r),e(oe,f6r),e(oe,qM),e(qM,Yve),e(Yve,m6r),e(qM,g6r),e(qM,YH),e(YH,h6r),e(qM,p6r),e(oe,_6r),e(oe,jM),e(jM,Kve),e(Kve,u6r),e(jM,b6r),e(jM,KH),e(KH,v6r),e(jM,F6r),e(oe,T6r),e(oe,DM),e(DM,Zve),e(Zve,M6r),e(DM,E6r),e(DM,ZH),e(ZH,C6r),e(DM,w6r),e(oe,A6r),e(oe,GM),e(GM,e0e),e(e0e,y6r),e(GM,L6r),e(GM,eU),e(eU,x6r),e(GM,$6r),e(oe,k6r),e(oe,OM),e(OM,o0e),e(o0e,S6r),e(OM,R6r),e(OM,oU),e(oU,P6r),e(OM,B6r),e(oe,I6r),e(oe,VM),e(VM,r0e),e(r0e,N6r),e(VM,q6r),e(VM,rU),e(rU,j6r),e(VM,D6r),e(oe,G6r),e(oe,XM),e(XM,t0e),e(t0e,O6r),e(XM,V6r),e(XM,tU),e(tU,X6r),e(XM,z6r),e(oe,W6r),e(oe,zM),e(zM,a0e),e(a0e,Q6r),e(zM,H6r),e(zM,aU),e(aU,U6r),e(zM,J6r),e(oe,Y6r),e(oe,WM),e(WM,n0e),e(n0e,K6r),e(WM,Z6r),e(WM,nU),e(nU,eTr),e(WM,oTr),e(oe,rTr),e(oe,QM),e(QM,s0e),e(s0e,tTr),e(QM,aTr),e(QM,sU),e(sU,nTr),e(QM,sTr),e(oe,lTr),e(oe,HM),e(HM,l0e),e(l0e,iTr),e(HM,dTr),e(HM,lU),e(lU,cTr),e(HM,fTr),e(oe,mTr),e(oe,UM),e(UM,i0e),e(i0e,gTr),e(UM,hTr),e(UM,iU),e(iU,pTr),e(UM,_Tr),e(oe,uTr),e(oe,JM),e(JM,d0e),e(d0e,bTr),e(JM,vTr),e(JM,dU),e(dU,FTr),e(JM,TTr),e(oe,MTr),e(oe,YM),e(YM,c0e),e(c0e,ETr),e(YM,CTr),e(YM,cU),e(cU,wTr),e(YM,ATr),e(oe,yTr),e(oe,KM),e(KM,f0e),e(f0e,LTr),e(KM,xTr),e(KM,fU),e(fU,$Tr),e(KM,kTr),e(oe,STr),e(oe,ZM),e(ZM,m0e),e(m0e,RTr),e(ZM,PTr),e(ZM,mU),e(mU,BTr),e(ZM,ITr),e(oe,NTr),e(oe,eE),e(eE,g0e),e(g0e,qTr),e(eE,jTr),e(eE,gU),e(gU,DTr),e(eE,GTr),e(kr,OTr),M(oE,kr,null),b(f,Rje,u),b(f,ic,u),e(ic,rE),e(rE,h0e),M(Q7,h0e,null),e(ic,VTr),e(ic,p0e),e(p0e,XTr),b(f,Pje,u),b(f,ar,u),M(H7,ar,null),e(ar,zTr),e(ar,dc),e(dc,WTr),e(dc,hU),e(hU,QTr),e(dc,HTr),e(dc,pU),e(pU,UTr),e(dc,JTr),e(ar,YTr),e(ar,U7),e(U7,KTr),e(U7,_0e),e(_0e,ZTr),e(U7,eMr),e(ar,oMr),e(ar,Pt),M(J7,Pt,null),e(Pt,rMr),e(Pt,u0e),e(u0e,tMr),e(Pt,aMr),e(Pt,cc),e(cc,nMr),e(cc,b0e),e(b0e,sMr),e(cc,lMr),e(cc,_U),e(_U,iMr),e(cc,dMr),e(Pt,cMr),M(tE,Pt,null),e(ar,fMr),e(ar,Sr),M(Y7,Sr,null),e(Sr,mMr),e(Sr,v0e),e(v0e,gMr),e(Sr,hMr),e(Sr,sn),e(sn,pMr),e(sn,F0e),e(F0e,_Mr),e(sn,uMr),e(sn,T0e),e(T0e,bMr),e(sn,vMr),e(sn,M0e),e(M0e,FMr),e(sn,TMr),e(Sr,MMr),e(Sr,pe),e(pe,aE),e(aE,E0e),e(E0e,EMr),e(aE,CMr),e(aE,uU),e(uU,wMr),e(aE,AMr),e(pe,yMr),e(pe,nE),e(nE,C0e),e(C0e,LMr),e(nE,xMr),e(nE,bU),e(bU,$Mr),e(nE,kMr),e(pe,SMr),e(pe,sE),e(sE,w0e),e(w0e,RMr),e(sE,PMr),e(sE,vU),e(vU,BMr),e(sE,IMr),e(pe,NMr),e(pe,lE),e(lE,A0e),e(A0e,qMr),e(lE,jMr),e(lE,FU),e(FU,DMr),e(lE,GMr),e(pe,OMr),e(pe,iE),e(iE,y0e),e(y0e,VMr),e(iE,XMr),e(iE,TU),e(TU,zMr),e(iE,WMr),e(pe,QMr),e(pe,dE),e(dE,L0e),e(L0e,HMr),e(dE,UMr),e(dE,MU),e(MU,JMr),e(dE,YMr),e(pe,KMr),e(pe,cE),e(cE,x0e),e(x0e,ZMr),e(cE,eEr),e(cE,EU),e(EU,oEr),e(cE,rEr),e(pe,tEr),e(pe,fE),e(fE,$0e),e($0e,aEr),e(fE,nEr),e(fE,CU),e(CU,sEr),e(fE,lEr),e(pe,iEr),e(pe,mE),e(mE,k0e),e(k0e,dEr),e(mE,cEr),e(mE,wU),e(wU,fEr),e(mE,mEr),e(pe,gEr),e(pe,gE),e(gE,S0e),e(S0e,hEr),e(gE,pEr),e(gE,AU),e(AU,_Er),e(gE,uEr),e(pe,bEr),e(pe,hE),e(hE,R0e),e(R0e,vEr),e(hE,FEr),e(hE,yU),e(yU,TEr),e(hE,MEr),e(pe,EEr),e(pe,pE),e(pE,P0e),e(P0e,CEr),e(pE,wEr),e(pE,LU),e(LU,AEr),e(pE,yEr),e(pe,LEr),e(pe,_E),e(_E,B0e),e(B0e,xEr),e(_E,$Er),e(_E,xU),e(xU,kEr),e(_E,SEr),e(pe,REr),e(pe,uE),e(uE,I0e),e(I0e,PEr),e(uE,BEr),e(uE,$U),e($U,IEr),e(uE,NEr),e(pe,qEr),e(pe,bE),e(bE,N0e),e(N0e,jEr),e(bE,DEr),e(bE,kU),e(kU,GEr),e(bE,OEr),e(pe,VEr),e(pe,vE),e(vE,q0e),e(q0e,XEr),e(vE,zEr),e(vE,SU),e(SU,WEr),e(vE,QEr),e(pe,HEr),e(pe,FE),e(FE,j0e),e(j0e,UEr),e(FE,JEr),e(FE,RU),e(RU,YEr),e(FE,KEr),e(Sr,ZEr),M(TE,Sr,null),b(f,Bje,u),b(f,fc,u),e(fc,ME),e(ME,D0e),M(K7,D0e,null),e(fc,eCr),e(fc,G0e),e(G0e,oCr),b(f,Ije,u),b(f,nr,u),M(Z7,nr,null),e(nr,rCr),e(nr,mc),e(mc,tCr),e(mc,PU),e(PU,aCr),e(mc,nCr),e(mc,BU),e(BU,sCr),e(mc,lCr),e(nr,iCr),e(nr,e9),e(e9,dCr),e(e9,O0e),e(O0e,cCr),e(e9,fCr),e(nr,mCr),e(nr,Bt),M(o9,Bt,null),e(Bt,gCr),e(Bt,V0e),e(V0e,hCr),e(Bt,pCr),e(Bt,gc),e(gc,_Cr),e(gc,X0e),e(X0e,uCr),e(gc,bCr),e(gc,IU),e(IU,vCr),e(gc,FCr),e(Bt,TCr),M(EE,Bt,null),e(nr,MCr),e(nr,Rr),M(r9,Rr,null),e(Rr,ECr),e(Rr,z0e),e(z0e,CCr),e(Rr,wCr),e(Rr,ln),e(ln,ACr),e(ln,W0e),e(W0e,yCr),e(ln,LCr),e(ln,Q0e),e(Q0e,xCr),e(ln,$Cr),e(ln,H0e),e(H0e,kCr),e(ln,SCr),e(Rr,RCr),e(Rr,t9),e(t9,CE),e(CE,U0e),e(U0e,PCr),e(CE,BCr),e(CE,NU),e(NU,ICr),e(CE,NCr),e(t9,qCr),e(t9,wE),e(wE,J0e),e(J0e,jCr),e(wE,DCr),e(wE,qU),e(qU,GCr),e(wE,OCr),e(Rr,VCr),M(AE,Rr,null),b(f,Nje,u),b(f,hc,u),e(hc,yE),e(yE,Y0e),M(a9,Y0e,null),e(hc,XCr),e(hc,K0e),e(K0e,zCr),b(f,qje,u),b(f,sr,u),M(n9,sr,null),e(sr,WCr),e(sr,pc),e(pc,QCr),e(pc,jU),e(jU,HCr),e(pc,UCr),e(pc,DU),e(DU,JCr),e(pc,YCr),e(sr,KCr),e(sr,s9),e(s9,ZCr),e(s9,Z0e),e(Z0e,e5r),e(s9,o5r),e(sr,r5r),e(sr,It),M(l9,It,null),e(It,t5r),e(It,eFe),e(eFe,a5r),e(It,n5r),e(It,_c),e(_c,s5r),e(_c,oFe),e(oFe,l5r),e(_c,i5r),e(_c,GU),e(GU,d5r),e(_c,c5r),e(It,f5r),M(LE,It,null),e(sr,m5r),e(sr,Pr),M(i9,Pr,null),e(Pr,g5r),e(Pr,rFe),e(rFe,h5r),e(Pr,p5r),e(Pr,dn),e(dn,_5r),e(dn,tFe),e(tFe,u5r),e(dn,b5r),e(dn,aFe),e(aFe,v5r),e(dn,F5r),e(dn,nFe),e(nFe,T5r),e(dn,M5r),e(Pr,E5r),e(Pr,sFe),e(sFe,xE),e(xE,lFe),e(lFe,C5r),e(xE,w5r),e(xE,OU),e(OU,A5r),e(xE,y5r),e(Pr,L5r),M($E,Pr,null),b(f,jje,u),b(f,uc,u),e(uc,kE),e(kE,iFe),M(d9,iFe,null),e(uc,x5r),e(uc,dFe),e(dFe,$5r),b(f,Dje,u),b(f,lr,u),M(c9,lr,null),e(lr,k5r),e(lr,bc),e(bc,S5r),e(bc,VU),e(VU,R5r),e(bc,P5r),e(bc,XU),e(XU,B5r),e(bc,I5r),e(lr,N5r),e(lr,f9),e(f9,q5r),e(f9,cFe),e(cFe,j5r),e(f9,D5r),e(lr,G5r),e(lr,Nt),M(m9,Nt,null),e(Nt,O5r),e(Nt,fFe),e(fFe,V5r),e(Nt,X5r),e(Nt,vc),e(vc,z5r),e(vc,mFe),e(mFe,W5r),e(vc,Q5r),e(vc,zU),e(zU,H5r),e(vc,U5r),e(Nt,J5r),M(SE,Nt,null),e(lr,Y5r),e(lr,Br),M(g9,Br,null),e(Br,K5r),e(Br,gFe),e(gFe,Z5r),e(Br,e3r),e(Br,cn),e(cn,o3r),e(cn,hFe),e(hFe,r3r),e(cn,t3r),e(cn,pFe),e(pFe,a3r),e(cn,n3r),e(cn,_Fe),e(_Fe,s3r),e(cn,l3r),e(Br,i3r),e(Br,de),e(de,RE),e(RE,uFe),e(uFe,d3r),e(RE,c3r),e(RE,WU),e(WU,f3r),e(RE,m3r),e(de,g3r),e(de,PE),e(PE,bFe),e(bFe,h3r),e(PE,p3r),e(PE,QU),e(QU,_3r),e(PE,u3r),e(de,b3r),e(de,BE),e(BE,vFe),e(vFe,v3r),e(BE,F3r),e(BE,HU),e(HU,T3r),e(BE,M3r),e(de,E3r),e(de,IE),e(IE,FFe),e(FFe,C3r),e(IE,w3r),e(IE,UU),e(UU,A3r),e(IE,y3r),e(de,L3r),e(de,NE),e(NE,TFe),e(TFe,x3r),e(NE,$3r),e(NE,JU),e(JU,k3r),e(NE,S3r),e(de,R3r),e(de,qE),e(qE,MFe),e(MFe,P3r),e(qE,B3r),e(qE,YU),e(YU,I3r),e(qE,N3r),e(de,q3r),e(de,jE),e(jE,EFe),e(EFe,j3r),e(jE,D3r),e(jE,KU),e(KU,G3r),e(jE,O3r),e(de,V3r),e(de,DE),e(DE,CFe),e(CFe,X3r),e(DE,z3r),e(DE,ZU),e(ZU,W3r),e(DE,Q3r),e(de,H3r),e(de,GE),e(GE,wFe),e(wFe,U3r),e(GE,J3r),e(GE,eJ),e(eJ,Y3r),e(GE,K3r),e(de,Z3r),e(de,OE),e(OE,AFe),e(AFe,ewr),e(OE,owr),e(OE,oJ),e(oJ,rwr),e(OE,twr),e(de,awr),e(de,VE),e(VE,yFe),e(yFe,nwr),e(VE,swr),e(VE,rJ),e(rJ,lwr),e(VE,iwr),e(de,dwr),e(de,XE),e(XE,LFe),e(LFe,cwr),e(XE,fwr),e(XE,tJ),e(tJ,mwr),e(XE,gwr),e(de,hwr),e(de,zE),e(zE,xFe),e(xFe,pwr),e(zE,_wr),e(zE,aJ),e(aJ,uwr),e(zE,bwr),e(de,vwr),e(de,WE),e(WE,$Fe),e($Fe,Fwr),e(WE,Twr),e(WE,nJ),e(nJ,Mwr),e(WE,Ewr),e(de,Cwr),e(de,QE),e(QE,kFe),e(kFe,wwr),e(QE,Awr),e(QE,sJ),e(sJ,ywr),e(QE,Lwr),e(de,xwr),e(de,HE),e(HE,SFe),e(SFe,$wr),e(HE,kwr),e(HE,lJ),e(lJ,Swr),e(HE,Rwr),e(de,Pwr),e(de,UE),e(UE,RFe),e(RFe,Bwr),e(UE,Iwr),e(UE,iJ),e(iJ,Nwr),e(UE,qwr),e(de,jwr),e(de,JE),e(JE,PFe),e(PFe,Dwr),e(JE,Gwr),e(JE,dJ),e(dJ,Owr),e(JE,Vwr),e(de,Xwr),e(de,YE),e(YE,BFe),e(BFe,zwr),e(YE,Wwr),e(YE,cJ),e(cJ,Qwr),e(YE,Hwr),e(de,Uwr),e(de,KE),e(KE,IFe),e(IFe,Jwr),e(KE,Ywr),e(KE,fJ),e(fJ,Kwr),e(KE,Zwr),e(Br,eAr),M(ZE,Br,null),b(f,Gje,u),b(f,Fc,u),e(Fc,eC),e(eC,NFe),M(h9,NFe,null),e(Fc,oAr),e(Fc,qFe),e(qFe,rAr),b(f,Oje,u),b(f,ir,u),M(p9,ir,null),e(ir,tAr),e(ir,Tc),e(Tc,aAr),e(Tc,mJ),e(mJ,nAr),e(Tc,sAr),e(Tc,gJ),e(gJ,lAr),e(Tc,iAr),e(ir,dAr),e(ir,_9),e(_9,cAr),e(_9,jFe),e(jFe,fAr),e(_9,mAr),e(ir,gAr),e(ir,qt),M(u9,qt,null),e(qt,hAr),e(qt,DFe),e(DFe,pAr),e(qt,_Ar),e(qt,Mc),e(Mc,uAr),e(Mc,GFe),e(GFe,bAr),e(Mc,vAr),e(Mc,hJ),e(hJ,FAr),e(Mc,TAr),e(qt,MAr),M(oC,qt,null),e(ir,EAr),e(ir,Ir),M(b9,Ir,null),e(Ir,CAr),e(Ir,OFe),e(OFe,wAr),e(Ir,AAr),e(Ir,fn),e(fn,yAr),e(fn,VFe),e(VFe,LAr),e(fn,xAr),e(fn,XFe),e(XFe,$Ar),e(fn,kAr),e(fn,zFe),e(zFe,SAr),e(fn,RAr),e(Ir,PAr),e(Ir,ce),e(ce,rC),e(rC,WFe),e(WFe,BAr),e(rC,IAr),e(rC,pJ),e(pJ,NAr),e(rC,qAr),e(ce,jAr),e(ce,tC),e(tC,QFe),e(QFe,DAr),e(tC,GAr),e(tC,_J),e(_J,OAr),e(tC,VAr),e(ce,XAr),e(ce,aC),e(aC,HFe),e(HFe,zAr),e(aC,WAr),e(aC,uJ),e(uJ,QAr),e(aC,HAr),e(ce,UAr),e(ce,nC),e(nC,UFe),e(UFe,JAr),e(nC,YAr),e(nC,bJ),e(bJ,KAr),e(nC,ZAr),e(ce,eyr),e(ce,sC),e(sC,JFe),e(JFe,oyr),e(sC,ryr),e(sC,vJ),e(vJ,tyr),e(sC,ayr),e(ce,nyr),e(ce,lC),e(lC,YFe),e(YFe,syr),e(lC,lyr),e(lC,FJ),e(FJ,iyr),e(lC,dyr),e(ce,cyr),e(ce,iC),e(iC,KFe),e(KFe,fyr),e(iC,myr),e(iC,TJ),e(TJ,gyr),e(iC,hyr),e(ce,pyr),e(ce,dC),e(dC,ZFe),e(ZFe,_yr),e(dC,uyr),e(dC,MJ),e(MJ,byr),e(dC,vyr),e(ce,Fyr),e(ce,cC),e(cC,e6e),e(e6e,Tyr),e(cC,Myr),e(cC,EJ),e(EJ,Eyr),e(cC,Cyr),e(ce,wyr),e(ce,fC),e(fC,o6e),e(o6e,Ayr),e(fC,yyr),e(fC,CJ),e(CJ,Lyr),e(fC,xyr),e(ce,$yr),e(ce,mC),e(mC,r6e),e(r6e,kyr),e(mC,Syr),e(mC,wJ),e(wJ,Ryr),e(mC,Pyr),e(ce,Byr),e(ce,gC),e(gC,t6e),e(t6e,Iyr),e(gC,Nyr),e(gC,AJ),e(AJ,qyr),e(gC,jyr),e(ce,Dyr),e(ce,hC),e(hC,a6e),e(a6e,Gyr),e(hC,Oyr),e(hC,yJ),e(yJ,Vyr),e(hC,Xyr),e(ce,zyr),e(ce,pC),e(pC,n6e),e(n6e,Wyr),e(pC,Qyr),e(pC,LJ),e(LJ,Hyr),e(pC,Uyr),e(ce,Jyr),e(ce,_C),e(_C,s6e),e(s6e,Yyr),e(_C,Kyr),e(_C,xJ),e(xJ,Zyr),e(_C,eLr),e(ce,oLr),e(ce,uC),e(uC,l6e),e(l6e,rLr),e(uC,tLr),e(uC,$J),e($J,aLr),e(uC,nLr),e(ce,sLr),e(ce,bC),e(bC,i6e),e(i6e,lLr),e(bC,iLr),e(bC,kJ),e(kJ,dLr),e(bC,cLr),e(ce,fLr),e(ce,vC),e(vC,d6e),e(d6e,mLr),e(vC,gLr),e(vC,SJ),e(SJ,hLr),e(vC,pLr),e(ce,_Lr),e(ce,FC),e(FC,c6e),e(c6e,uLr),e(FC,bLr),e(FC,RJ),e(RJ,vLr),e(FC,FLr),e(ce,TLr),e(ce,TC),e(TC,f6e),e(f6e,MLr),e(TC,ELr),e(TC,PJ),e(PJ,CLr),e(TC,wLr),e(Ir,ALr),M(MC,Ir,null),b(f,Vje,u),b(f,Ec,u),e(Ec,EC),e(EC,m6e),M(v9,m6e,null),e(Ec,yLr),e(Ec,g6e),e(g6e,LLr),b(f,Xje,u),b(f,dr,u),M(F9,dr,null),e(dr,xLr),e(dr,Cc),e(Cc,$Lr),e(Cc,BJ),e(BJ,kLr),e(Cc,SLr),e(Cc,IJ),e(IJ,RLr),e(Cc,PLr),e(dr,BLr),e(dr,T9),e(T9,ILr),e(T9,h6e),e(h6e,NLr),e(T9,qLr),e(dr,jLr),e(dr,jt),M(M9,jt,null),e(jt,DLr),e(jt,p6e),e(p6e,GLr),e(jt,OLr),e(jt,wc),e(wc,VLr),e(wc,_6e),e(_6e,XLr),e(wc,zLr),e(wc,NJ),e(NJ,WLr),e(wc,QLr),e(jt,HLr),M(CC,jt,null),e(dr,ULr),e(dr,Nr),M(E9,Nr,null),e(Nr,JLr),e(Nr,u6e),e(u6e,YLr),e(Nr,KLr),e(Nr,mn),e(mn,ZLr),e(mn,b6e),e(b6e,e8r),e(mn,o8r),e(mn,v6e),e(v6e,r8r),e(mn,t8r),e(mn,F6e),e(F6e,a8r),e(mn,n8r),e(Nr,s8r),e(Nr,T6e),e(T6e,wC),e(wC,M6e),e(M6e,l8r),e(wC,i8r),e(wC,qJ),e(qJ,d8r),e(wC,c8r),e(Nr,f8r),M(AC,Nr,null),b(f,zje,u),b(f,Ac,u),e(Ac,yC),e(yC,E6e),M(C9,E6e,null),e(Ac,m8r),e(Ac,C6e),e(C6e,g8r),b(f,Wje,u),b(f,cr,u),M(w9,cr,null),e(cr,h8r),e(cr,yc),e(yc,p8r),e(yc,jJ),e(jJ,_8r),e(yc,u8r),e(yc,DJ),e(DJ,b8r),e(yc,v8r),e(cr,F8r),e(cr,A9),e(A9,T8r),e(A9,w6e),e(w6e,M8r),e(A9,E8r),e(cr,C8r),e(cr,Dt),M(y9,Dt,null),e(Dt,w8r),e(Dt,A6e),e(A6e,A8r),e(Dt,y8r),e(Dt,Lc),e(Lc,L8r),e(Lc,y6e),e(y6e,x8r),e(Lc,$8r),e(Lc,GJ),e(GJ,k8r),e(Lc,S8r),e(Dt,R8r),M(LC,Dt,null),e(cr,P8r),e(cr,qr),M(L9,qr,null),e(qr,B8r),e(qr,L6e),e(L6e,I8r),e(qr,N8r),e(qr,gn),e(gn,q8r),e(gn,x6e),e(x6e,j8r),e(gn,D8r),e(gn,$6e),e($6e,G8r),e(gn,O8r),e(gn,k6e),e(k6e,V8r),e(gn,X8r),e(qr,z8r),e(qr,S6e),e(S6e,xC),e(xC,R6e),e(R6e,W8r),e(xC,Q8r),e(xC,OJ),e(OJ,H8r),e(xC,U8r),e(qr,J8r),M($C,qr,null),b(f,Qje,u),b(f,xc,u),e(xc,kC),e(kC,P6e),M(x9,P6e,null),e(xc,Y8r),e(xc,B6e),e(B6e,K8r),b(f,Hje,u),b(f,fr,u),M($9,fr,null),e(fr,Z8r),e(fr,$c),e($c,e7r),e($c,VJ),e(VJ,o7r),e($c,r7r),e($c,XJ),e(XJ,t7r),e($c,a7r),e(fr,n7r),e(fr,k9),e(k9,s7r),e(k9,I6e),e(I6e,l7r),e(k9,i7r),e(fr,d7r),e(fr,Gt),M(S9,Gt,null),e(Gt,c7r),e(Gt,N6e),e(N6e,f7r),e(Gt,m7r),e(Gt,kc),e(kc,g7r),e(kc,q6e),e(q6e,h7r),e(kc,p7r),e(kc,zJ),e(zJ,_7r),e(kc,u7r),e(Gt,b7r),M(SC,Gt,null),e(fr,v7r),e(fr,jr),M(R9,jr,null),e(jr,F7r),e(jr,j6e),e(j6e,T7r),e(jr,M7r),e(jr,hn),e(hn,E7r),e(hn,D6e),e(D6e,C7r),e(hn,w7r),e(hn,G6e),e(G6e,A7r),e(hn,y7r),e(hn,O6e),e(O6e,L7r),e(hn,x7r),e(jr,$7r),e(jr,te),e(te,RC),e(RC,V6e),e(V6e,k7r),e(RC,S7r),e(RC,WJ),e(WJ,R7r),e(RC,P7r),e(te,B7r),e(te,PC),e(PC,X6e),e(X6e,I7r),e(PC,N7r),e(PC,QJ),e(QJ,q7r),e(PC,j7r),e(te,D7r),e(te,BC),e(BC,z6e),e(z6e,G7r),e(BC,O7r),e(BC,HJ),e(HJ,V7r),e(BC,X7r),e(te,z7r),e(te,IC),e(IC,W6e),e(W6e,W7r),e(IC,Q7r),e(IC,UJ),e(UJ,H7r),e(IC,U7r),e(te,J7r),e(te,NC),e(NC,Q6e),e(Q6e,Y7r),e(NC,K7r),e(NC,JJ),e(JJ,Z7r),e(NC,e9r),e(te,o9r),e(te,qC),e(qC,H6e),e(H6e,r9r),e(qC,t9r),e(qC,YJ),e(YJ,a9r),e(qC,n9r),e(te,s9r),e(te,jC),e(jC,U6e),e(U6e,l9r),e(jC,i9r),e(jC,KJ),e(KJ,d9r),e(jC,c9r),e(te,f9r),e(te,DC),e(DC,J6e),e(J6e,m9r),e(DC,g9r),e(DC,ZJ),e(ZJ,h9r),e(DC,p9r),e(te,_9r),e(te,GC),e(GC,Y6e),e(Y6e,u9r),e(GC,b9r),e(GC,eY),e(eY,v9r),e(GC,F9r),e(te,T9r),e(te,OC),e(OC,K6e),e(K6e,M9r),e(OC,E9r),e(OC,oY),e(oY,C9r),e(OC,w9r),e(te,A9r),e(te,VC),e(VC,Z6e),e(Z6e,y9r),e(VC,L9r),e(VC,rY),e(rY,x9r),e(VC,$9r),e(te,k9r),e(te,XC),e(XC,eTe),e(eTe,S9r),e(XC,R9r),e(XC,tY),e(tY,P9r),e(XC,B9r),e(te,I9r),e(te,zC),e(zC,oTe),e(oTe,N9r),e(zC,q9r),e(zC,aY),e(aY,j9r),e(zC,D9r),e(te,G9r),e(te,WC),e(WC,rTe),e(rTe,O9r),e(WC,V9r),e(WC,nY),e(nY,X9r),e(WC,z9r),e(te,W9r),e(te,QC),e(QC,tTe),e(tTe,Q9r),e(QC,H9r),e(QC,sY),e(sY,U9r),e(QC,J9r),e(te,Y9r),e(te,HC),e(HC,aTe),e(aTe,K9r),e(HC,Z9r),e(HC,lY),e(lY,exr),e(HC,oxr),e(te,rxr),e(te,UC),e(UC,nTe),e(nTe,txr),e(UC,axr),e(UC,iY),e(iY,nxr),e(UC,sxr),e(te,lxr),e(te,JC),e(JC,sTe),e(sTe,ixr),e(JC,dxr),e(JC,dY),e(dY,cxr),e(JC,fxr),e(te,mxr),e(te,YC),e(YC,lTe),e(lTe,gxr),e(YC,hxr),e(YC,cY),e(cY,pxr),e(YC,_xr),e(te,uxr),e(te,KC),e(KC,iTe),e(iTe,bxr),e(KC,vxr),e(KC,fY),e(fY,Fxr),e(KC,Txr),e(te,Mxr),e(te,ZC),e(ZC,dTe),e(dTe,Exr),e(ZC,Cxr),e(ZC,mY),e(mY,wxr),e(ZC,Axr),e(te,yxr),e(te,e5),e(e5,cTe),e(cTe,Lxr),e(e5,xxr),e(e5,gY),e(gY,$xr),e(e5,kxr),e(te,Sxr),e(te,o5),e(o5,fTe),e(fTe,Rxr),e(o5,Pxr),e(o5,hY),e(hY,Bxr),e(o5,Ixr),e(te,Nxr),e(te,r5),e(r5,mTe),e(mTe,qxr),e(r5,jxr),e(r5,pY),e(pY,Dxr),e(r5,Gxr),e(te,Oxr),e(te,t5),e(t5,gTe),e(gTe,Vxr),e(t5,Xxr),e(t5,_Y),e(_Y,zxr),e(t5,Wxr),e(jr,Qxr),M(a5,jr,null),b(f,Uje,u),b(f,Sc,u),e(Sc,n5),e(n5,hTe),M(P9,hTe,null),e(Sc,Hxr),e(Sc,pTe),e(pTe,Uxr),b(f,Jje,u),b(f,mr,u),M(B9,mr,null),e(mr,Jxr),e(mr,Rc),e(Rc,Yxr),e(Rc,uY),e(uY,Kxr),e(Rc,Zxr),e(Rc,bY),e(bY,e$r),e(Rc,o$r),e(mr,r$r),e(mr,I9),e(I9,t$r),e(I9,_Te),e(_Te,a$r),e(I9,n$r),e(mr,s$r),e(mr,Ot),M(N9,Ot,null),e(Ot,l$r),e(Ot,uTe),e(uTe,i$r),e(Ot,d$r),e(Ot,Pc),e(Pc,c$r),e(Pc,bTe),e(bTe,f$r),e(Pc,m$r),e(Pc,vY),e(vY,g$r),e(Pc,h$r),e(Ot,p$r),M(s5,Ot,null),e(mr,_$r),e(mr,Dr),M(q9,Dr,null),e(Dr,u$r),e(Dr,vTe),e(vTe,b$r),e(Dr,v$r),e(Dr,pn),e(pn,F$r),e(pn,FTe),e(FTe,T$r),e(pn,M$r),e(pn,TTe),e(TTe,E$r),e(pn,C$r),e(pn,MTe),e(MTe,w$r),e(pn,A$r),e(Dr,y$r),e(Dr,Re),e(Re,l5),e(l5,ETe),e(ETe,L$r),e(l5,x$r),e(l5,FY),e(FY,$$r),e(l5,k$r),e(Re,S$r),e(Re,i5),e(i5,CTe),e(CTe,R$r),e(i5,P$r),e(i5,TY),e(TY,B$r),e(i5,I$r),e(Re,N$r),e(Re,d5),e(d5,wTe),e(wTe,q$r),e(d5,j$r),e(d5,MY),e(MY,D$r),e(d5,G$r),e(Re,O$r),e(Re,c5),e(c5,ATe),e(ATe,V$r),e(c5,X$r),e(c5,EY),e(EY,z$r),e(c5,W$r),e(Re,Q$r),e(Re,f5),e(f5,yTe),e(yTe,H$r),e(f5,U$r),e(f5,CY),e(CY,J$r),e(f5,Y$r),e(Re,K$r),e(Re,m5),e(m5,LTe),e(LTe,Z$r),e(m5,ekr),e(m5,wY),e(wY,okr),e(m5,rkr),e(Re,tkr),e(Re,g5),e(g5,xTe),e(xTe,akr),e(g5,nkr),e(g5,AY),e(AY,skr),e(g5,lkr),e(Re,ikr),e(Re,h5),e(h5,$Te),e($Te,dkr),e(h5,ckr),e(h5,yY),e(yY,fkr),e(h5,mkr),e(Re,gkr),e(Re,p5),e(p5,kTe),e(kTe,hkr),e(p5,pkr),e(p5,LY),e(LY,_kr),e(p5,ukr),e(Dr,bkr),M(_5,Dr,null),b(f,Yje,u),b(f,Bc,u),e(Bc,u5),e(u5,STe),M(j9,STe,null),e(Bc,vkr),e(Bc,RTe),e(RTe,Fkr),b(f,Kje,u),b(f,gr,u),M(D9,gr,null),e(gr,Tkr),e(gr,Ic),e(Ic,Mkr),e(Ic,xY),e(xY,Ekr),e(Ic,Ckr),e(Ic,$Y),e($Y,wkr),e(Ic,Akr),e(gr,ykr),e(gr,G9),e(G9,Lkr),e(G9,PTe),e(PTe,xkr),e(G9,$kr),e(gr,kkr),e(gr,Vt),M(O9,Vt,null),e(Vt,Skr),e(Vt,BTe),e(BTe,Rkr),e(Vt,Pkr),e(Vt,Nc),e(Nc,Bkr),e(Nc,ITe),e(ITe,Ikr),e(Nc,Nkr),e(Nc,kY),e(kY,qkr),e(Nc,jkr),e(Vt,Dkr),M(b5,Vt,null),e(gr,Gkr),e(gr,Gr),M(V9,Gr,null),e(Gr,Okr),e(Gr,NTe),e(NTe,Vkr),e(Gr,Xkr),e(Gr,_n),e(_n,zkr),e(_n,qTe),e(qTe,Wkr),e(_n,Qkr),e(_n,jTe),e(jTe,Hkr),e(_n,Ukr),e(_n,DTe),e(DTe,Jkr),e(_n,Ykr),e(Gr,Kkr),e(Gr,Ee),e(Ee,v5),e(v5,GTe),e(GTe,Zkr),e(v5,eSr),e(v5,SY),e(SY,oSr),e(v5,rSr),e(Ee,tSr),e(Ee,F5),e(F5,OTe),e(OTe,aSr),e(F5,nSr),e(F5,RY),e(RY,sSr),e(F5,lSr),e(Ee,iSr),e(Ee,T5),e(T5,VTe),e(VTe,dSr),e(T5,cSr),e(T5,PY),e(PY,fSr),e(T5,mSr),e(Ee,gSr),e(Ee,M5),e(M5,XTe),e(XTe,hSr),e(M5,pSr),e(M5,BY),e(BY,_Sr),e(M5,uSr),e(Ee,bSr),e(Ee,E5),e(E5,zTe),e(zTe,vSr),e(E5,FSr),e(E5,IY),e(IY,TSr),e(E5,MSr),e(Ee,ESr),e(Ee,C5),e(C5,WTe),e(WTe,CSr),e(C5,wSr),e(C5,NY),e(NY,ASr),e(C5,ySr),e(Ee,LSr),e(Ee,w5),e(w5,QTe),e(QTe,xSr),e(w5,$Sr),e(w5,qY),e(qY,kSr),e(w5,SSr),e(Ee,RSr),e(Ee,A5),e(A5,HTe),e(HTe,PSr),e(A5,BSr),e(A5,jY),e(jY,ISr),e(A5,NSr),e(Ee,qSr),e(Ee,y5),e(y5,UTe),e(UTe,jSr),e(y5,DSr),e(y5,DY),e(DY,GSr),e(y5,OSr),e(Ee,VSr),e(Ee,L5),e(L5,JTe),e(JTe,XSr),e(L5,zSr),e(L5,GY),e(GY,WSr),e(L5,QSr),e(Ee,HSr),e(Ee,x5),e(x5,YTe),e(YTe,USr),e(x5,JSr),e(x5,OY),e(OY,YSr),e(x5,KSr),e(Ee,ZSr),e(Ee,$5),e($5,KTe),e(KTe,eRr),e($5,oRr),e($5,VY),e(VY,rRr),e($5,tRr),e(Gr,aRr),M(k5,Gr,null),b(f,Zje,u),b(f,qc,u),e(qc,S5),e(S5,ZTe),M(X9,ZTe,null),e(qc,nRr),e(qc,eMe),e(eMe,sRr),b(f,eDe,u),b(f,hr,u),M(z9,hr,null),e(hr,lRr),e(hr,jc),e(jc,iRr),e(jc,XY),e(XY,dRr),e(jc,cRr),e(jc,zY),e(zY,fRr),e(jc,mRr),e(hr,gRr),e(hr,W9),e(W9,hRr),e(W9,oMe),e(oMe,pRr),e(W9,_Rr),e(hr,uRr),e(hr,Xt),M(Q9,Xt,null),e(Xt,bRr),e(Xt,rMe),e(rMe,vRr),e(Xt,FRr),e(Xt,Dc),e(Dc,TRr),e(Dc,tMe),e(tMe,MRr),e(Dc,ERr),e(Dc,WY),e(WY,CRr),e(Dc,wRr),e(Xt,ARr),M(R5,Xt,null),e(hr,yRr),e(hr,Or),M(H9,Or,null),e(Or,LRr),e(Or,aMe),e(aMe,xRr),e(Or,$Rr),e(Or,un),e(un,kRr),e(un,nMe),e(nMe,SRr),e(un,RRr),e(un,sMe),e(sMe,PRr),e(un,BRr),e(un,lMe),e(lMe,IRr),e(un,NRr),e(Or,qRr),e(Or,xe),e(xe,P5),e(P5,iMe),e(iMe,jRr),e(P5,DRr),e(P5,QY),e(QY,GRr),e(P5,ORr),e(xe,VRr),e(xe,B5),e(B5,dMe),e(dMe,XRr),e(B5,zRr),e(B5,HY),e(HY,WRr),e(B5,QRr),e(xe,HRr),e(xe,I5),e(I5,cMe),e(cMe,URr),e(I5,JRr),e(I5,UY),e(UY,YRr),e(I5,KRr),e(xe,ZRr),e(xe,N5),e(N5,fMe),e(fMe,ePr),e(N5,oPr),e(N5,JY),e(JY,rPr),e(N5,tPr),e(xe,aPr),e(xe,q5),e(q5,mMe),e(mMe,nPr),e(q5,sPr),e(q5,YY),e(YY,lPr),e(q5,iPr),e(xe,dPr),e(xe,j5),e(j5,gMe),e(gMe,cPr),e(j5,fPr),e(j5,KY),e(KY,mPr),e(j5,gPr),e(xe,hPr),e(xe,D5),e(D5,hMe),e(hMe,pPr),e(D5,_Pr),e(D5,ZY),e(ZY,uPr),e(D5,bPr),e(xe,vPr),e(xe,G5),e(G5,pMe),e(pMe,FPr),e(G5,TPr),e(G5,eK),e(eK,MPr),e(G5,EPr),e(xe,CPr),e(xe,O5),e(O5,_Me),e(_Me,wPr),e(O5,APr),e(O5,oK),e(oK,yPr),e(O5,LPr),e(xe,xPr),e(xe,V5),e(V5,uMe),e(uMe,$Pr),e(V5,kPr),e(V5,rK),e(rK,SPr),e(V5,RPr),e(Or,PPr),M(X5,Or,null),b(f,oDe,u),b(f,Gc,u),e(Gc,z5),e(z5,bMe),M(U9,bMe,null),e(Gc,BPr),e(Gc,vMe),e(vMe,IPr),b(f,rDe,u),b(f,pr,u),M(J9,pr,null),e(pr,NPr),e(pr,Oc),e(Oc,qPr),e(Oc,tK),e(tK,jPr),e(Oc,DPr),e(Oc,aK),e(aK,GPr),e(Oc,OPr),e(pr,VPr),e(pr,Y9),e(Y9,XPr),e(Y9,FMe),e(FMe,zPr),e(Y9,WPr),e(pr,QPr),e(pr,zt),M(K9,zt,null),e(zt,HPr),e(zt,TMe),e(TMe,UPr),e(zt,JPr),e(zt,Vc),e(Vc,YPr),e(Vc,MMe),e(MMe,KPr),e(Vc,ZPr),e(Vc,nK),e(nK,eBr),e(Vc,oBr),e(zt,rBr),M(W5,zt,null),e(pr,tBr),e(pr,Vr),M(Z9,Vr,null),e(Vr,aBr),e(Vr,EMe),e(EMe,nBr),e(Vr,sBr),e(Vr,bn),e(bn,lBr),e(bn,CMe),e(CMe,iBr),e(bn,dBr),e(bn,wMe),e(wMe,cBr),e(bn,fBr),e(bn,AMe),e(AMe,mBr),e(bn,gBr),e(Vr,hBr),e(Vr,Pe),e(Pe,Q5),e(Q5,yMe),e(yMe,pBr),e(Q5,_Br),e(Q5,sK),e(sK,uBr),e(Q5,bBr),e(Pe,vBr),e(Pe,H5),e(H5,LMe),e(LMe,FBr),e(H5,TBr),e(H5,lK),e(lK,MBr),e(H5,EBr),e(Pe,CBr),e(Pe,U5),e(U5,xMe),e(xMe,wBr),e(U5,ABr),e(U5,iK),e(iK,yBr),e(U5,LBr),e(Pe,xBr),e(Pe,J5),e(J5,$Me),e($Me,$Br),e(J5,kBr),e(J5,dK),e(dK,SBr),e(J5,RBr),e(Pe,PBr),e(Pe,Y5),e(Y5,kMe),e(kMe,BBr),e(Y5,IBr),e(Y5,cK),e(cK,NBr),e(Y5,qBr),e(Pe,jBr),e(Pe,K5),e(K5,SMe),e(SMe,DBr),e(K5,GBr),e(K5,fK),e(fK,OBr),e(K5,VBr),e(Pe,XBr),e(Pe,Z5),e(Z5,RMe),e(RMe,zBr),e(Z5,WBr),e(Z5,mK),e(mK,QBr),e(Z5,HBr),e(Pe,UBr),e(Pe,e3),e(e3,PMe),e(PMe,JBr),e(e3,YBr),e(e3,gK),e(gK,KBr),e(e3,ZBr),e(Pe,eIr),e(Pe,o3),e(o3,BMe),e(BMe,oIr),e(o3,rIr),e(o3,hK),e(hK,tIr),e(o3,aIr),e(Vr,nIr),M(r3,Vr,null),b(f,tDe,u),b(f,Xc,u),e(Xc,t3),e(t3,IMe),M(ex,IMe,null),e(Xc,sIr),e(Xc,NMe),e(NMe,lIr),b(f,aDe,u),b(f,_r,u),M(ox,_r,null),e(_r,iIr),e(_r,zc),e(zc,dIr),e(zc,pK),e(pK,cIr),e(zc,fIr),e(zc,_K),e(_K,mIr),e(zc,gIr),e(_r,hIr),e(_r,rx),e(rx,pIr),e(rx,qMe),e(qMe,_Ir),e(rx,uIr),e(_r,bIr),e(_r,Wt),M(tx,Wt,null),e(Wt,vIr),e(Wt,jMe),e(jMe,FIr),e(Wt,TIr),e(Wt,Wc),e(Wc,MIr),e(Wc,DMe),e(DMe,EIr),e(Wc,CIr),e(Wc,uK),e(uK,wIr),e(Wc,AIr),e(Wt,yIr),M(a3,Wt,null),e(_r,LIr),e(_r,Xr),M(ax,Xr,null),e(Xr,xIr),e(Xr,GMe),e(GMe,$Ir),e(Xr,kIr),e(Xr,vn),e(vn,SIr),e(vn,OMe),e(OMe,RIr),e(vn,PIr),e(vn,VMe),e(VMe,BIr),e(vn,IIr),e(vn,XMe),e(XMe,NIr),e(vn,qIr),e(Xr,jIr),e(Xr,$e),e($e,n3),e(n3,zMe),e(zMe,DIr),e(n3,GIr),e(n3,bK),e(bK,OIr),e(n3,VIr),e($e,XIr),e($e,s3),e(s3,WMe),e(WMe,zIr),e(s3,WIr),e(s3,vK),e(vK,QIr),e(s3,HIr),e($e,UIr),e($e,l3),e(l3,QMe),e(QMe,JIr),e(l3,YIr),e(l3,FK),e(FK,KIr),e(l3,ZIr),e($e,eNr),e($e,i3),e(i3,HMe),e(HMe,oNr),e(i3,rNr),e(i3,TK),e(TK,tNr),e(i3,aNr),e($e,nNr),e($e,d3),e(d3,UMe),e(UMe,sNr),e(d3,lNr),e(d3,MK),e(MK,iNr),e(d3,dNr),e($e,cNr),e($e,c3),e(c3,JMe),e(JMe,fNr),e(c3,mNr),e(c3,EK),e(EK,gNr),e(c3,hNr),e($e,pNr),e($e,f3),e(f3,YMe),e(YMe,_Nr),e(f3,uNr),e(f3,CK),e(CK,bNr),e(f3,vNr),e($e,FNr),e($e,m3),e(m3,KMe),e(KMe,TNr),e(m3,MNr),e(m3,wK),e(wK,ENr),e(m3,CNr),e($e,wNr),e($e,g3),e(g3,ZMe),e(ZMe,ANr),e(g3,yNr),e(g3,AK),e(AK,LNr),e(g3,xNr),e($e,$Nr),e($e,h3),e(h3,eEe),e(eEe,kNr),e(h3,SNr),e(h3,yK),e(yK,RNr),e(h3,PNr),e(Xr,BNr),M(p3,Xr,null),b(f,nDe,u),b(f,Qc,u),e(Qc,_3),e(_3,oEe),M(nx,oEe,null),e(Qc,INr),e(Qc,rEe),e(rEe,NNr),b(f,sDe,u),b(f,ur,u),M(sx,ur,null),e(ur,qNr),e(ur,Hc),e(Hc,jNr),e(Hc,LK),e(LK,DNr),e(Hc,GNr),e(Hc,xK),e(xK,ONr),e(Hc,VNr),e(ur,XNr),e(ur,lx),e(lx,zNr),e(lx,tEe),e(tEe,WNr),e(lx,QNr),e(ur,HNr),e(ur,Qt),M(ix,Qt,null),e(Qt,UNr),e(Qt,aEe),e(aEe,JNr),e(Qt,YNr),e(Qt,Uc),e(Uc,KNr),e(Uc,nEe),e(nEe,ZNr),e(Uc,eqr),e(Uc,$K),e($K,oqr),e(Uc,rqr),e(Qt,tqr),M(u3,Qt,null),e(ur,aqr),e(ur,zr),M(dx,zr,null),e(zr,nqr),e(zr,sEe),e(sEe,sqr),e(zr,lqr),e(zr,Fn),e(Fn,iqr),e(Fn,lEe),e(lEe,dqr),e(Fn,cqr),e(Fn,iEe),e(iEe,fqr),e(Fn,mqr),e(Fn,dEe),e(dEe,gqr),e(Fn,hqr),e(zr,pqr),e(zr,ke),e(ke,b3),e(b3,cEe),e(cEe,_qr),e(b3,uqr),e(b3,kK),e(kK,bqr),e(b3,vqr),e(ke,Fqr),e(ke,v3),e(v3,fEe),e(fEe,Tqr),e(v3,Mqr),e(v3,SK),e(SK,Eqr),e(v3,Cqr),e(ke,wqr),e(ke,F3),e(F3,mEe),e(mEe,Aqr),e(F3,yqr),e(F3,RK),e(RK,Lqr),e(F3,xqr),e(ke,$qr),e(ke,T3),e(T3,gEe),e(gEe,kqr),e(T3,Sqr),e(T3,PK),e(PK,Rqr),e(T3,Pqr),e(ke,Bqr),e(ke,M3),e(M3,hEe),e(hEe,Iqr),e(M3,Nqr),e(M3,BK),e(BK,qqr),e(M3,jqr),e(ke,Dqr),e(ke,E3),e(E3,pEe),e(pEe,Gqr),e(E3,Oqr),e(E3,IK),e(IK,Vqr),e(E3,Xqr),e(ke,zqr),e(ke,C3),e(C3,_Ee),e(_Ee,Wqr),e(C3,Qqr),e(C3,NK),e(NK,Hqr),e(C3,Uqr),e(ke,Jqr),e(ke,w3),e(w3,uEe),e(uEe,Yqr),e(w3,Kqr),e(w3,qK),e(qK,Zqr),e(w3,ejr),e(ke,ojr),e(ke,A3),e(A3,bEe),e(bEe,rjr),e(A3,tjr),e(A3,jK),e(jK,ajr),e(A3,njr),e(ke,sjr),e(ke,y3),e(y3,vEe),e(vEe,ljr),e(y3,ijr),e(y3,DK),e(DK,djr),e(y3,cjr),e(zr,fjr),M(L3,zr,null),b(f,lDe,u),b(f,Jc,u),e(Jc,x3),e(x3,FEe),M(cx,FEe,null),e(Jc,mjr),e(Jc,TEe),e(TEe,gjr),b(f,iDe,u),b(f,br,u),M(fx,br,null),e(br,hjr),e(br,Yc),e(Yc,pjr),e(Yc,GK),e(GK,_jr),e(Yc,ujr),e(Yc,OK),e(OK,bjr),e(Yc,vjr),e(br,Fjr),e(br,mx),e(mx,Tjr),e(mx,MEe),e(MEe,Mjr),e(mx,Ejr),e(br,Cjr),e(br,Ht),M(gx,Ht,null),e(Ht,wjr),e(Ht,EEe),e(EEe,Ajr),e(Ht,yjr),e(Ht,Kc),e(Kc,Ljr),e(Kc,CEe),e(CEe,xjr),e(Kc,$jr),e(Kc,VK),e(VK,kjr),e(Kc,Sjr),e(Ht,Rjr),M($3,Ht,null),e(br,Pjr),e(br,Wr),M(hx,Wr,null),e(Wr,Bjr),e(Wr,wEe),e(wEe,Ijr),e(Wr,Njr),e(Wr,Tn),e(Tn,qjr),e(Tn,AEe),e(AEe,jjr),e(Tn,Djr),e(Tn,yEe),e(yEe,Gjr),e(Tn,Ojr),e(Tn,LEe),e(LEe,Vjr),e(Tn,Xjr),e(Wr,zjr),e(Wr,Ge),e(Ge,k3),e(k3,xEe),e(xEe,Wjr),e(k3,Qjr),e(k3,XK),e(XK,Hjr),e(k3,Ujr),e(Ge,Jjr),e(Ge,S3),e(S3,$Ee),e($Ee,Yjr),e(S3,Kjr),e(S3,zK),e(zK,Zjr),e(S3,eDr),e(Ge,oDr),e(Ge,R3),e(R3,kEe),e(kEe,rDr),e(R3,tDr),e(R3,WK),e(WK,aDr),e(R3,nDr),e(Ge,sDr),e(Ge,P3),e(P3,SEe),e(SEe,lDr),e(P3,iDr),e(P3,QK),e(QK,dDr),e(P3,cDr),e(Ge,fDr),e(Ge,B3),e(B3,REe),e(REe,mDr),e(B3,gDr),e(B3,HK),e(HK,hDr),e(B3,pDr),e(Ge,_Dr),e(Ge,I3),e(I3,PEe),e(PEe,uDr),e(I3,bDr),e(I3,UK),e(UK,vDr),e(I3,FDr),e(Ge,TDr),e(Ge,N3),e(N3,BEe),e(BEe,MDr),e(N3,EDr),e(N3,JK),e(JK,CDr),e(N3,wDr),e(Ge,ADr),e(Ge,q3),e(q3,IEe),e(IEe,yDr),e(q3,LDr),e(q3,YK),e(YK,xDr),e(q3,$Dr),e(Wr,kDr),M(j3,Wr,null),b(f,dDe,u),b(f,Zc,u),e(Zc,D3),e(D3,NEe),M(px,NEe,null),e(Zc,SDr),e(Zc,qEe),e(qEe,RDr),b(f,cDe,u),b(f,vr,u),M(_x,vr,null),e(vr,PDr),e(vr,ef),e(ef,BDr),e(ef,KK),e(KK,IDr),e(ef,NDr),e(ef,ZK),e(ZK,qDr),e(ef,jDr),e(vr,DDr),e(vr,ux),e(ux,GDr),e(ux,jEe),e(jEe,ODr),e(ux,VDr),e(vr,XDr),e(vr,Ut),M(bx,Ut,null),e(Ut,zDr),e(Ut,DEe),e(DEe,WDr),e(Ut,QDr),e(Ut,of),e(of,HDr),e(of,GEe),e(GEe,UDr),e(of,JDr),e(of,eZ),e(eZ,YDr),e(of,KDr),e(Ut,ZDr),M(G3,Ut,null),e(vr,eGr),e(vr,Qr),M(vx,Qr,null),e(Qr,oGr),e(Qr,OEe),e(OEe,rGr),e(Qr,tGr),e(Qr,Mn),e(Mn,aGr),e(Mn,VEe),e(VEe,nGr),e(Mn,sGr),e(Mn,XEe),e(XEe,lGr),e(Mn,iGr),e(Mn,zEe),e(zEe,dGr),e(Mn,cGr),e(Qr,fGr),e(Qr,Oe),e(Oe,O3),e(O3,WEe),e(WEe,mGr),e(O3,gGr),e(O3,oZ),e(oZ,hGr),e(O3,pGr),e(Oe,_Gr),e(Oe,V3),e(V3,QEe),e(QEe,uGr),e(V3,bGr),e(V3,rZ),e(rZ,vGr),e(V3,FGr),e(Oe,TGr),e(Oe,X3),e(X3,HEe),e(HEe,MGr),e(X3,EGr),e(X3,tZ),e(tZ,CGr),e(X3,wGr),e(Oe,AGr),e(Oe,z3),e(z3,UEe),e(UEe,yGr),e(z3,LGr),e(z3,aZ),e(aZ,xGr),e(z3,$Gr),e(Oe,kGr),e(Oe,W3),e(W3,JEe),e(JEe,SGr),e(W3,RGr),e(W3,nZ),e(nZ,PGr),e(W3,BGr),e(Oe,IGr),e(Oe,Q3),e(Q3,YEe),e(YEe,NGr),e(Q3,qGr),e(Q3,sZ),e(sZ,jGr),e(Q3,DGr),e(Oe,GGr),e(Oe,H3),e(H3,KEe),e(KEe,OGr),e(H3,VGr),e(H3,lZ),e(lZ,XGr),e(H3,zGr),e(Oe,WGr),e(Oe,U3),e(U3,ZEe),e(ZEe,QGr),e(U3,HGr),e(U3,iZ),e(iZ,UGr),e(U3,JGr),e(Qr,YGr),M(J3,Qr,null),b(f,fDe,u),b(f,rf,u),e(rf,Y3),e(Y3,eCe),M(Fx,eCe,null),e(rf,KGr),e(rf,oCe),e(oCe,ZGr),b(f,mDe,u),b(f,Fr,u),M(Tx,Fr,null),e(Fr,eOr),e(Fr,tf),e(tf,oOr),e(tf,dZ),e(dZ,rOr),e(tf,tOr),e(tf,cZ),e(cZ,aOr),e(tf,nOr),e(Fr,sOr),e(Fr,Mx),e(Mx,lOr),e(Mx,rCe),e(rCe,iOr),e(Mx,dOr),e(Fr,cOr),e(Fr,Jt),M(Ex,Jt,null),e(Jt,fOr),e(Jt,tCe),e(tCe,mOr),e(Jt,gOr),e(Jt,af),e(af,hOr),e(af,aCe),e(aCe,pOr),e(af,_Or),e(af,fZ),e(fZ,uOr),e(af,bOr),e(Jt,vOr),M(K3,Jt,null),e(Fr,FOr),e(Fr,Hr),M(Cx,Hr,null),e(Hr,TOr),e(Hr,nCe),e(nCe,MOr),e(Hr,EOr),e(Hr,En),e(En,COr),e(En,sCe),e(sCe,wOr),e(En,AOr),e(En,lCe),e(lCe,yOr),e(En,LOr),e(En,iCe),e(iCe,xOr),e(En,$Or),e(Hr,kOr),e(Hr,dCe),e(dCe,Z3),e(Z3,cCe),e(cCe,SOr),e(Z3,ROr),e(Z3,mZ),e(mZ,POr),e(Z3,BOr),e(Hr,IOr),M(ew,Hr,null),b(f,gDe,u),b(f,nf,u),e(nf,ow),e(ow,fCe),M(wx,fCe,null),e(nf,NOr),e(nf,mCe),e(mCe,qOr),b(f,hDe,u),b(f,Tr,u),M(Ax,Tr,null),e(Tr,jOr),e(Tr,sf),e(sf,DOr),e(sf,gZ),e(gZ,GOr),e(sf,OOr),e(sf,hZ),e(hZ,VOr),e(sf,XOr),e(Tr,zOr),e(Tr,yx),e(yx,WOr),e(yx,gCe),e(gCe,QOr),e(yx,HOr),e(Tr,UOr),e(Tr,Yt),M(Lx,Yt,null),e(Yt,JOr),e(Yt,hCe),e(hCe,YOr),e(Yt,KOr),e(Yt,lf),e(lf,ZOr),e(lf,pCe),e(pCe,eVr),e(lf,oVr),e(lf,pZ),e(pZ,rVr),e(lf,tVr),e(Yt,aVr),M(rw,Yt,null),e(Tr,nVr),e(Tr,Ur),M(xx,Ur,null),e(Ur,sVr),e(Ur,_Ce),e(_Ce,lVr),e(Ur,iVr),e(Ur,Cn),e(Cn,dVr),e(Cn,uCe),e(uCe,cVr),e(Cn,fVr),e(Cn,bCe),e(bCe,mVr),e(Cn,gVr),e(Cn,vCe),e(vCe,hVr),e(Cn,pVr),e(Ur,_Vr),e(Ur,$x),e($x,tw),e(tw,FCe),e(FCe,uVr),e(tw,bVr),e(tw,_Z),e(_Z,vVr),e(tw,FVr),e($x,TVr),e($x,aw),e(aw,TCe),e(TCe,MVr),e(aw,EVr),e(aw,uZ),e(uZ,CVr),e(aw,wVr),e(Ur,AVr),M(nw,Ur,null),b(f,pDe,u),b(f,df,u),e(df,sw),e(sw,MCe),M(kx,MCe,null),e(df,yVr),e(df,ECe),e(ECe,LVr),b(f,_De,u),b(f,Mr,u),M(Sx,Mr,null),e(Mr,xVr),e(Mr,cf),e(cf,$Vr),e(cf,bZ),e(bZ,kVr),e(cf,SVr),e(cf,vZ),e(vZ,RVr),e(cf,PVr),e(Mr,BVr),e(Mr,Rx),e(Rx,IVr),e(Rx,CCe),e(CCe,NVr),e(Rx,qVr),e(Mr,jVr),e(Mr,Kt),M(Px,Kt,null),e(Kt,DVr),e(Kt,wCe),e(wCe,GVr),e(Kt,OVr),e(Kt,ff),e(ff,VVr),e(ff,ACe),e(ACe,XVr),e(ff,zVr),e(ff,FZ),e(FZ,WVr),e(ff,QVr),e(Kt,HVr),M(lw,Kt,null),e(Mr,UVr),e(Mr,Jr),M(Bx,Jr,null),e(Jr,JVr),e(Jr,yCe),e(yCe,YVr),e(Jr,KVr),e(Jr,wn),e(wn,ZVr),e(wn,LCe),e(LCe,eXr),e(wn,oXr),e(wn,xCe),e(xCe,rXr),e(wn,tXr),e(wn,$Ce),e($Ce,aXr),e(wn,nXr),e(Jr,sXr),e(Jr,kCe),e(kCe,iw),e(iw,SCe),e(SCe,lXr),e(iw,iXr),e(iw,TZ),e(TZ,dXr),e(iw,cXr),e(Jr,fXr),M(dw,Jr,null),uDe=!0},p(f,[u]){const Ix={};u&2&&(Ix.$$scope={dirty:u,ctx:f}),Ff.$set(Ix);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),Cg.$set(RCe);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),nh.$set(PCe);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),qh.$set(BCe);const Nx={};u&2&&(Nx.$$scope={dirty:u,ctx:f}),jh.$set(Nx);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),np.$set(ICe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),sp.$set(An);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),dp.$set(NCe);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),nu.$set(qCe);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),lu.$set(jCe);const qx={};u&2&&(qx.$$scope={dirty:u,ctx:f}),Yu.$set(qx);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),Zu.$set(DCe);const jx={};u&2&&(jx.$$scope={dirty:u,ctx:f}),q2.$set(jx);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),D2.$set(GCe);const Dx={};u&2&&(Dx.$$scope={dirty:u,ctx:f}),E1.$set(Dx);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),w1.$set(OCe);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),V1.$set(VCe);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),z1.$set(XCe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),Db.$set(mf);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),Ob.$set(zCe);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),v4.$set(WCe);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),T4.$set(QCe);const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),L4.$set(Gx);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),$4.$set(HCe);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),mv.$set(UCe);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),hv.$set(JCe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),r0.$set(et);const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),a0.$set(Ox);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),l0.$set(YCe);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),d0.$set(Vx);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),E0.$set(KCe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),w0.$set(ot);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),L0.$set(ZCe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),$0.$set(gf);const e5e={};u&2&&(e5e.$$scope={dirty:u,ctx:f}),G0.$set(e5e);const o5e={};u&2&&(o5e.$$scope={dirty:u,ctx:f}),V0.$set(o5e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),J0.$set(y);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),K0.$set(cw);const r5e={};u&2&&(r5e.$$scope={dirty:u,ctx:f}),cF.$set(r5e);const t5e={};u&2&&(t5e.$$scope={dirty:u,ctx:f}),mF.$set(t5e);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),_F.$set(fw);const a5e={};u&2&&(a5e.$$scope={dirty:u,ctx:f}),bF.$set(a5e);const n5e={};u&2&&(n5e.$$scope={dirty:u,ctx:f}),wF.$set(n5e);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),yF.$set(mw);const s5e={};u&2&&(s5e.$$scope={dirty:u,ctx:f}),SF.$set(s5e);const l5e={};u&2&&(l5e.$$scope={dirty:u,ctx:f}),PF.$set(l5e);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),qF.$set(gw);const i5e={};u&2&&(i5e.$$scope={dirty:u,ctx:f}),DF.$set(i5e);const d5e={};u&2&&(d5e.$$scope={dirty:u,ctx:f}),VF.$set(d5e);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),zF.$set(hw);const c5e={};u&2&&(c5e.$$scope={dirty:u,ctx:f}),YF.$set(c5e);const f5e={};u&2&&(f5e.$$scope={dirty:u,ctx:f}),ZF.$set(f5e);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),r6.$set(pw);const m5e={};u&2&&(m5e.$$scope={dirty:u,ctx:f}),a6.$set(m5e);const g5e={};u&2&&(g5e.$$scope={dirty:u,ctx:f}),J6.$set(g5e);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),K6.$set(_w);const h5e={};u&2&&(h5e.$$scope={dirty:u,ctx:f}),MT.$set(h5e);const p5e={};u&2&&(p5e.$$scope={dirty:u,ctx:f}),CT.$set(p5e);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),NT.$set(uw);const _5e={};u&2&&(_5e.$$scope={dirty:u,ctx:f}),jT.$set(_5e);const u5e={};u&2&&(u5e.$$scope={dirty:u,ctx:f}),XT.$set(u5e);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),WT.$set(bw);const b5e={};u&2&&(b5e.$$scope={dirty:u,ctx:f}),gM.$set(b5e);const v5e={};u&2&&(v5e.$$scope={dirty:u,ctx:f}),pM.$set(v5e);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),AM.$set(vw);const F5e={};u&2&&(F5e.$$scope={dirty:u,ctx:f}),LM.$set(F5e);const T5e={};u&2&&(T5e.$$scope={dirty:u,ctx:f}),oE.$set(T5e);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),tE.$set(Fw);const M5e={};u&2&&(M5e.$$scope={dirty:u,ctx:f}),TE.$set(M5e);const E5e={};u&2&&(E5e.$$scope={dirty:u,ctx:f}),EE.$set(E5e);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),AE.$set(Tw);const C5e={};u&2&&(C5e.$$scope={dirty:u,ctx:f}),LE.$set(C5e);const w5e={};u&2&&(w5e.$$scope={dirty:u,ctx:f}),$E.$set(w5e);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),SE.$set(Mw);const A5e={};u&2&&(A5e.$$scope={dirty:u,ctx:f}),ZE.$set(A5e);const y5e={};u&2&&(y5e.$$scope={dirty:u,ctx:f}),oC.$set(y5e);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),MC.$set(Ew);const L5e={};u&2&&(L5e.$$scope={dirty:u,ctx:f}),CC.$set(L5e);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:f}),AC.$set(x5e);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),LC.$set(Cw);const $5e={};u&2&&($5e.$$scope={dirty:u,ctx:f}),$C.$set($5e);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:f}),SC.$set(k5e);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),a5.$set(ww);const S5e={};u&2&&(S5e.$$scope={dirty:u,ctx:f}),s5.$set(S5e);const R5e={};u&2&&(R5e.$$scope={dirty:u,ctx:f}),_5.$set(R5e);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),b5.$set(Aw);const P5e={};u&2&&(P5e.$$scope={dirty:u,ctx:f}),k5.$set(P5e);const B5e={};u&2&&(B5e.$$scope={dirty:u,ctx:f}),R5.$set(B5e);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),X5.$set(yw);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),W5.$set(I5e);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),r3.$set(N5e);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),a3.$set(Lw);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),p3.$set(q5e);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),u3.$set(j5e);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),L3.$set(xw);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),$3.$set(D5e);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),j3.$set(G5e);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),G3.$set($w);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),J3.$set(O5e);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),K3.$set(V5e);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),ew.$set(kw);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),rw.$set(X5e);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),nw.$set(z5e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),lw.$set(Sw);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),dw.$set(W5e)},i(f){uDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Ff.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Ny.$$.fragment,f),E(Cg.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Vy.$$.fragment,f),E(nh.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(qh.$$.fragment,f),E(jh.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(oL.$$.fragment,f),E(np.$$.fragment,f),E(sp.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(dp.$$.fragment,f),E(lL.$$.fragment,f),E(nu.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(lu.$$.fragment,f),E(mL.$$.fragment,f),E(Yu.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(_L.$$.fragment,f),E(Zu.$$.fragment,f),E(uL.$$.fragment,f),E(q2.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(D2.$$.fragment,f),E(ML.$$.fragment,f),E(E1.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(w1.$$.fragment,f),E(yL.$$.fragment,f),E(V1.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(z1.$$.fragment,f),E(SL.$$.fragment,f),E(Db.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(Ob.$$.fragment,f),E(NL.$$.fragment,f),E(v4.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(T4.$$.fragment,f),E(OL.$$.fragment,f),E(L4.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E($4.$$.fragment,f),E(QL.$$.fragment,f),E(mv.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(hv.$$.fragment,f),E(KL.$$.fragment,f),E(r0.$$.fragment,f),E(ZL.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(a0.$$.fragment,f),E(t8.$$.fragment,f),E(l0.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(d0.$$.fragment,f),E(i8.$$.fragment,f),E(E0.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(w0.$$.fragment,f),E(g8.$$.fragment,f),E(L0.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E($0.$$.fragment,f),E(b8.$$.fragment,f),E(G0.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(V0.$$.fragment,f),E(E8.$$.fragment,f),E(J0.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(K0.$$.fragment,f),E(L8.$$.fragment,f),E(cF.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(mF.$$.fragment,f),E(R8.$$.fragment,f),E(_F.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(bF.$$.fragment,f),E(j8.$$.fragment,f),E(wF.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(yF.$$.fragment,f),E(X8.$$.fragment,f),E(SF.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(PF.$$.fragment,f),E(U8.$$.fragment,f),E(qF.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e7.$$.fragment,f),E(DF.$$.fragment,f),E(o7.$$.fragment,f),E(VF.$$.fragment,f),E(r7.$$.fragment,f),E(t7.$$.fragment,f),E(n7.$$.fragment,f),E(zF.$$.fragment,f),E(s7.$$.fragment,f),E(YF.$$.fragment,f),E(l7.$$.fragment,f),E(i7.$$.fragment,f),E(c7.$$.fragment,f),E(ZF.$$.fragment,f),E(f7.$$.fragment,f),E(r6.$$.fragment,f),E(m7.$$.fragment,f),E(g7.$$.fragment,f),E(p7.$$.fragment,f),E(a6.$$.fragment,f),E(_7.$$.fragment,f),E(J6.$$.fragment,f),E(u7.$$.fragment,f),E(b7.$$.fragment,f),E(F7.$$.fragment,f),E(K6.$$.fragment,f),E(T7.$$.fragment,f),E(MT.$$.fragment,f),E(M7.$$.fragment,f),E(E7.$$.fragment,f),E(w7.$$.fragment,f),E(CT.$$.fragment,f),E(A7.$$.fragment,f),E(NT.$$.fragment,f),E(y7.$$.fragment,f),E(L7.$$.fragment,f),E($7.$$.fragment,f),E(jT.$$.fragment,f),E(k7.$$.fragment,f),E(XT.$$.fragment,f),E(S7.$$.fragment,f),E(R7.$$.fragment,f),E(B7.$$.fragment,f),E(WT.$$.fragment,f),E(I7.$$.fragment,f),E(gM.$$.fragment,f),E(N7.$$.fragment,f),E(q7.$$.fragment,f),E(D7.$$.fragment,f),E(pM.$$.fragment,f),E(G7.$$.fragment,f),E(AM.$$.fragment,f),E(O7.$$.fragment,f),E(V7.$$.fragment,f),E(z7.$$.fragment,f),E(LM.$$.fragment,f),E(W7.$$.fragment,f),E(oE.$$.fragment,f),E(Q7.$$.fragment,f),E(H7.$$.fragment,f),E(J7.$$.fragment,f),E(tE.$$.fragment,f),E(Y7.$$.fragment,f),E(TE.$$.fragment,f),E(K7.$$.fragment,f),E(Z7.$$.fragment,f),E(o9.$$.fragment,f),E(EE.$$.fragment,f),E(r9.$$.fragment,f),E(AE.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(LE.$$.fragment,f),E(i9.$$.fragment,f),E($E.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(SE.$$.fragment,f),E(g9.$$.fragment,f),E(ZE.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(oC.$$.fragment,f),E(b9.$$.fragment,f),E(MC.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(CC.$$.fragment,f),E(E9.$$.fragment,f),E(AC.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(y9.$$.fragment,f),E(LC.$$.fragment,f),E(L9.$$.fragment,f),E($C.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(SC.$$.fragment,f),E(R9.$$.fragment,f),E(a5.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(s5.$$.fragment,f),E(q9.$$.fragment,f),E(_5.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(b5.$$.fragment,f),E(V9.$$.fragment,f),E(k5.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(R5.$$.fragment,f),E(H9.$$.fragment,f),E(X5.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(W5.$$.fragment,f),E(Z9.$$.fragment,f),E(r3.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(a3.$$.fragment,f),E(ax.$$.fragment,f),E(p3.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(u3.$$.fragment,f),E(dx.$$.fragment,f),E(L3.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E($3.$$.fragment,f),E(hx.$$.fragment,f),E(j3.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(G3.$$.fragment,f),E(vx.$$.fragment,f),E(J3.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(K3.$$.fragment,f),E(Cx.$$.fragment,f),E(ew.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(rw.$$.fragment,f),E(xx.$$.fragment,f),E(nw.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(lw.$$.fragment,f),E(Bx.$$.fragment,f),E(dw.$$.fragment,f),uDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Ff.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Ny.$$.fragment,f),C(Cg.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Vy.$$.fragment,f),C(nh.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(qh.$$.fragment,f),C(jh.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(oL.$$.fragment,f),C(np.$$.fragment,f),C(sp.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(dp.$$.fragment,f),C(lL.$$.fragment,f),C(nu.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(lu.$$.fragment,f),C(mL.$$.fragment,f),C(Yu.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(_L.$$.fragment,f),C(Zu.$$.fragment,f),C(uL.$$.fragment,f),C(q2.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(D2.$$.fragment,f),C(ML.$$.fragment,f),C(E1.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(w1.$$.fragment,f),C(yL.$$.fragment,f),C(V1.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(z1.$$.fragment,f),C(SL.$$.fragment,f),C(Db.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(Ob.$$.fragment,f),C(NL.$$.fragment,f),C(v4.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(T4.$$.fragment,f),C(OL.$$.fragment,f),C(L4.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C($4.$$.fragment,f),C(QL.$$.fragment,f),C(mv.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(hv.$$.fragment,f),C(KL.$$.fragment,f),C(r0.$$.fragment,f),C(ZL.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(a0.$$.fragment,f),C(t8.$$.fragment,f),C(l0.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(d0.$$.fragment,f),C(i8.$$.fragment,f),C(E0.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(w0.$$.fragment,f),C(g8.$$.fragment,f),C(L0.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C($0.$$.fragment,f),C(b8.$$.fragment,f),C(G0.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(V0.$$.fragment,f),C(E8.$$.fragment,f),C(J0.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(K0.$$.fragment,f),C(L8.$$.fragment,f),C(cF.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(mF.$$.fragment,f),C(R8.$$.fragment,f),C(_F.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(bF.$$.fragment,f),C(j8.$$.fragment,f),C(wF.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(yF.$$.fragment,f),C(X8.$$.fragment,f),C(SF.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(PF.$$.fragment,f),C(U8.$$.fragment,f),C(qF.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e7.$$.fragment,f),C(DF.$$.fragment,f),C(o7.$$.fragment,f),C(VF.$$.fragment,f),C(r7.$$.fragment,f),C(t7.$$.fragment,f),C(n7.$$.fragment,f),C(zF.$$.fragment,f),C(s7.$$.fragment,f),C(YF.$$.fragment,f),C(l7.$$.fragment,f),C(i7.$$.fragment,f),C(c7.$$.fragment,f),C(ZF.$$.fragment,f),C(f7.$$.fragment,f),C(r6.$$.fragment,f),C(m7.$$.fragment,f),C(g7.$$.fragment,f),C(p7.$$.fragment,f),C(a6.$$.fragment,f),C(_7.$$.fragment,f),C(J6.$$.fragment,f),C(u7.$$.fragment,f),C(b7.$$.fragment,f),C(F7.$$.fragment,f),C(K6.$$.fragment,f),C(T7.$$.fragment,f),C(MT.$$.fragment,f),C(M7.$$.fragment,f),C(E7.$$.fragment,f),C(w7.$$.fragment,f),C(CT.$$.fragment,f),C(A7.$$.fragment,f),C(NT.$$.fragment,f),C(y7.$$.fragment,f),C(L7.$$.fragment,f),C($7.$$.fragment,f),C(jT.$$.fragment,f),C(k7.$$.fragment,f),C(XT.$$.fragment,f),C(S7.$$.fragment,f),C(R7.$$.fragment,f),C(B7.$$.fragment,f),C(WT.$$.fragment,f),C(I7.$$.fragment,f),C(gM.$$.fragment,f),C(N7.$$.fragment,f),C(q7.$$.fragment,f),C(D7.$$.fragment,f),C(pM.$$.fragment,f),C(G7.$$.fragment,f),C(AM.$$.fragment,f),C(O7.$$.fragment,f),C(V7.$$.fragment,f),C(z7.$$.fragment,f),C(LM.$$.fragment,f),C(W7.$$.fragment,f),C(oE.$$.fragment,f),C(Q7.$$.fragment,f),C(H7.$$.fragment,f),C(J7.$$.fragment,f),C(tE.$$.fragment,f),C(Y7.$$.fragment,f),C(TE.$$.fragment,f),C(K7.$$.fragment,f),C(Z7.$$.fragment,f),C(o9.$$.fragment,f),C(EE.$$.fragment,f),C(r9.$$.fragment,f),C(AE.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(LE.$$.fragment,f),C(i9.$$.fragment,f),C($E.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(SE.$$.fragment,f),C(g9.$$.fragment,f),C(ZE.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(oC.$$.fragment,f),C(b9.$$.fragment,f),C(MC.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(CC.$$.fragment,f),C(E9.$$.fragment,f),C(AC.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(y9.$$.fragment,f),C(LC.$$.fragment,f),C(L9.$$.fragment,f),C($C.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(SC.$$.fragment,f),C(R9.$$.fragment,f),C(a5.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(s5.$$.fragment,f),C(q9.$$.fragment,f),C(_5.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(b5.$$.fragment,f),C(V9.$$.fragment,f),C(k5.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(R5.$$.fragment,f),C(H9.$$.fragment,f),C(X5.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(W5.$$.fragment,f),C(Z9.$$.fragment,f),C(r3.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(a3.$$.fragment,f),C(ax.$$.fragment,f),C(p3.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(u3.$$.fragment,f),C(dx.$$.fragment,f),C(L3.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C($3.$$.fragment,f),C(hx.$$.fragment,f),C(j3.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(G3.$$.fragment,f),C(vx.$$.fragment,f),C(J3.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(K3.$$.fragment,f),C(Cx.$$.fragment,f),C(ew.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(rw.$$.fragment,f),C(xx.$$.fragment,f),C(nw.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(lw.$$.fragment,f),C(Bx.$$.fragment,f),C(dw.$$.fragment,f),uDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(De),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(hqe),f&&t(bi),w(ky),f&&t(pqe),f&&t(kn),f&&t(_qe),w(Sy,f),f&&t(uqe),f&&t(ek),f&&t(bqe),w(Ff,f),f&&t(vqe),f&&t(vi),w(Ry),f&&t(Fqe),f&&t(Co),w(Py),w(Ny),w(Cg),w(qy),f&&t(Tqe),f&&t(Ti),w(jy),f&&t(Mqe),f&&t(wo),w(Dy),w(Vy),w(nh),w(Xy),f&&t(Eqe),f&&t(Mi),w(zy),f&&t(Cqe),f&&t(Ao),w(Wy),w(Uy),w(qh),w(jh),w(Jy),f&&t(wqe),f&&t(Ei),w(Yy),f&&t(Aqe),f&&t(yo),w(Ky),w(oL),w(np),w(sp),w(rL),f&&t(yqe),f&&t(wi),w(tL),f&&t(Lqe),f&&t(Lo),w(aL),w(sL),w(dp),w(lL),w(nu),f&&t(xqe),f&&t(Li),w(iL),f&&t($qe),f&&t(xo),w(dL),w(fL),w(lu),w(mL),w(Yu),f&&t(kqe),f&&t(ki),w(gL),f&&t(Sqe),f&&t($o),w(hL),w(_L),w(Zu),w(uL),w(q2),f&&t(Rqe),f&&t(Pi),w(bL),f&&t(Pqe),f&&t(ko),w(vL),w(TL),w(D2),w(ML),w(E1),f&&t(Bqe),f&&t(Ni),w(EL),f&&t(Iqe),f&&t(So),w(CL),w(AL),w(w1),w(yL),w(V1),f&&t(Nqe),f&&t(Di),w(LL),f&&t(qqe),f&&t(Ro),w(xL),w(kL),w(z1),w(SL),w(Db),f&&t(jqe),f&&t(Vi),w(RL),f&&t(Dqe),f&&t(Po),w(PL),w(IL),w(Ob),w(NL),w(v4),f&&t(Gqe),f&&t(Wi),w(qL),f&&t(Oqe),f&&t(Bo),w(jL),w(GL),w(T4),w(OL),w(L4),f&&t(Vqe),f&&t(Ui),w(VL),f&&t(Xqe),f&&t(Io),w(XL),w(WL),w($4),w(QL),w(mv),f&&t(zqe),f&&t(Ki),w(HL),f&&t(Wqe),f&&t(No),w(UL),w(YL),w(hv),w(KL),w(r0),f&&t(Qqe),f&&t(od),w(ZL),f&&t(Hqe),f&&t(qo),w(e8),w(r8),w(a0),w(t8),w(l0),f&&t(Uqe),f&&t(ad),w(a8),f&&t(Jqe),f&&t(jo),w(n8),w(l8),w(d0),w(i8),w(E0),f&&t(Yqe),f&&t(ld),w(d8),f&&t(Kqe),f&&t(Do),w(c8),w(m8),w(w0),w(g8),w(L0),f&&t(Zqe),f&&t(cd),w(h8),f&&t(eje),f&&t(Go),w(p8),w(u8),w($0),w(b8),w(G0),f&&t(oje),f&&t(gd),w(v8),f&&t(rje),f&&t(Oo),w(F8),w(M8),w(V0),w(E8),w(J0),f&&t(tje),f&&t(_d),w(C8),f&&t(aje),f&&t(Vo),w(w8),w(y8),w(K0),w(L8),w(cF),f&&t(nje),f&&t(vd),w(x8),f&&t(sje),f&&t(Xo),w($8),w(S8),w(mF),w(R8),w(_F),f&&t(lje),f&&t(Md),w(B8),f&&t(ije),f&&t(zo),w(I8),w(q8),w(bF),w(j8),w(wF),f&&t(dje),f&&t(wd),w(D8),f&&t(cje),f&&t(Wo),w(G8),w(V8),w(yF),w(X8),w(SF),f&&t(fje),f&&t(xd),w(z8),f&&t(mje),f&&t(Qo),w(W8),w(H8),w(PF),w(U8),w(qF),f&&t(gje),f&&t(Sd),w(Y8),f&&t(hje),f&&t(Ho),w(K8),w(e7),w(DF),w(o7),w(VF),f&&t(pje),f&&t(Bd),w(r7),f&&t(_je),f&&t(Uo),w(t7),w(n7),w(zF),w(s7),w(YF),f&&t(uje),f&&t(qd),w(l7),f&&t(bje),f&&t(Jo),w(i7),w(c7),w(ZF),w(f7),w(r6),f&&t(vje),f&&t(Gd),w(m7),f&&t(Fje),f&&t(Yo),w(g7),w(p7),w(a6),w(_7),w(J6),f&&t(Tje),f&&t(Xd),w(u7),f&&t(Mje),f&&t(Ko),w(b7),w(F7),w(K6),w(T7),w(MT),f&&t(Eje),f&&t(Qd),w(M7),f&&t(Cje),f&&t(Zo),w(E7),w(w7),w(CT),w(A7),w(NT),f&&t(wje),f&&t(Jd),w(y7),f&&t(Aje),f&&t(er),w(L7),w($7),w(jT),w(k7),w(XT),f&&t(yje),f&&t(Zd),w(S7),f&&t(Lje),f&&t(or),w(R7),w(B7),w(WT),w(I7),w(gM),f&&t(xje),f&&t(rc),w(N7),f&&t($je),f&&t(rr),w(q7),w(D7),w(pM),w(G7),w(AM),f&&t(kje),f&&t(nc),w(O7),f&&t(Sje),f&&t(tr),w(V7),w(z7),w(LM),w(W7),w(oE),f&&t(Rje),f&&t(ic),w(Q7),f&&t(Pje),f&&t(ar),w(H7),w(J7),w(tE),w(Y7),w(TE),f&&t(Bje),f&&t(fc),w(K7),f&&t(Ije),f&&t(nr),w(Z7),w(o9),w(EE),w(r9),w(AE),f&&t(Nje),f&&t(hc),w(a9),f&&t(qje),f&&t(sr),w(n9),w(l9),w(LE),w(i9),w($E),f&&t(jje),f&&t(uc),w(d9),f&&t(Dje),f&&t(lr),w(c9),w(m9),w(SE),w(g9),w(ZE),f&&t(Gje),f&&t(Fc),w(h9),f&&t(Oje),f&&t(ir),w(p9),w(u9),w(oC),w(b9),w(MC),f&&t(Vje),f&&t(Ec),w(v9),f&&t(Xje),f&&t(dr),w(F9),w(M9),w(CC),w(E9),w(AC),f&&t(zje),f&&t(Ac),w(C9),f&&t(Wje),f&&t(cr),w(w9),w(y9),w(LC),w(L9),w($C),f&&t(Qje),f&&t(xc),w(x9),f&&t(Hje),f&&t(fr),w($9),w(S9),w(SC),w(R9),w(a5),f&&t(Uje),f&&t(Sc),w(P9),f&&t(Jje),f&&t(mr),w(B9),w(N9),w(s5),w(q9),w(_5),f&&t(Yje),f&&t(Bc),w(j9),f&&t(Kje),f&&t(gr),w(D9),w(O9),w(b5),w(V9),w(k5),f&&t(Zje),f&&t(qc),w(X9),f&&t(eDe),f&&t(hr),w(z9),w(Q9),w(R5),w(H9),w(X5),f&&t(oDe),f&&t(Gc),w(U9),f&&t(rDe),f&&t(pr),w(J9),w(K9),w(W5),w(Z9),w(r3),f&&t(tDe),f&&t(Xc),w(ex),f&&t(aDe),f&&t(_r),w(ox),w(tx),w(a3),w(ax),w(p3),f&&t(nDe),f&&t(Qc),w(nx),f&&t(sDe),f&&t(ur),w(sx),w(ix),w(u3),w(dx),w(L3),f&&t(lDe),f&&t(Jc),w(cx),f&&t(iDe),f&&t(br),w(fx),w(gx),w($3),w(hx),w(j3),f&&t(dDe),f&&t(Zc),w(px),f&&t(cDe),f&&t(vr),w(_x),w(bx),w(G3),w(vx),w(J3),f&&t(fDe),f&&t(rf),w(Fx),f&&t(mDe),f&&t(Fr),w(Tx),w(Ex),w(K3),w(Cx),w(ew),f&&t(gDe),f&&t(nf),w(wx),f&&t(hDe),f&&t(Tr),w(Ax),w(Lx),w(rw),w(xx),w(nw),f&&t(pDe),f&&t(df),w(kx),f&&t(_De),f&&t(Mr),w(Sx),w(Px),w(lw),w(Bx),w(dw)}}}const ZSt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function eRt(L){return ekt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lRt extends J$t{constructor(g){super();Y$t(this,g,eRt,KSt,K$t,{})}}export{lRt as default,ZSt as metadata};
