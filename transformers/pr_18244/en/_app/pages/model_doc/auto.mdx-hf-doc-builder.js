import{S as QWt,i as WWt,s as HWt,e as a,k as l,w as F,t as o,M as UWt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as JWt,L as q}from"../../chunks/vendor-hf-doc-builder.js";import{T as nat}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function YWt($){let g,v,p,m,_,d,h,wo,yi,Bf,lt,xi,$i,sL,If,Oe,We,ki,Pn,lL,Bn,In,iL,Si,Nn,dL,Ri,Nf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),wo=o(`, make sure its
`),yi=a("code"),Bf=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),xi=a("code"),$i=o('"new-model"'),sL=o(")."),If=l(),Oe=a("p"),We=o("Likewise, if your "),ki=a("code"),Pn=o("NewModel"),lL=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),iL=o(`, make sure its
`),Si=a("code"),Nn=o("config_class"),dL=o(` attribute is set to the same class you use when registering the model (here
`),Ri=a("code"),Nf=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var OS=s(p);m=r(OS,"NewModelConfig"),OS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Pi=s(d);h=r(Pi,"PretrainedConfig"),Pi.forEach(t),wo=r(Ae,`, make sure its
`),yi=n(Ae,"CODE",{});var VS=s(yi);Bf=r(VS,"model_type"),VS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),xi=n(Ae,"CODE",{});var XS=s(xi);$i=r(XS,'"new-model"'),XS.forEach(t),sL=r(Ae,")."),Ae.forEach(t),If=i(He),Oe=n(He,"P",{});var Ao=s(Oe);We=r(Ao,"Likewise, if your "),ki=n(Ao,"CODE",{});var Ra=s(ki);Pn=r(Ra,"NewModel"),Ra.forEach(t),lL=r(Ao," is a subclass of "),Bn=n(Ao,"A",{href:!0});var zS=s(Bn);In=r(zS,"PreTrainedModel"),zS.forEach(t),iL=r(Ao,`, make sure its
`),Si=n(Ao,"CODE",{});var qf=s(Si);Nn=r(qf,"config_class"),qf.forEach(t),dL=r(Ao,` attribute is set to the same class you use when registering the model (here
`),Ri=n(Ao,"CODE",{});var QS=s(Ri);Nf=r(QS,"NewModelConfig"),QS.forEach(t),Sa=r(Ao,")."),Ao.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,wo),e(g,yi),e(yi,Bf),e(g,lt),e(g,xi),e(xi,$i),e(g,sL),b(He,If,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,ki),e(ki,Pn),e(Oe,lL),e(Oe,Bn),e(Bn,In),e(Oe,iL),e(Oe,Si),e(Si,Nn),e(Oe,dL),e(Oe,Ri),e(Ri,Nf),e(Oe,Sa)},d(He){He&&t(g),He&&t(If),He&&t(Oe)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:q,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JUt($){let g,v,p,m,_,d,h,wo,yi,Bf,lt,xi,$i,sL,If,Oe,We,ki,Pn,lL,Bn,In,iL,Si,Nn,dL,Ri,Nf,Sa,He,Ae,OS,Pi,VS,XS,Ao,Ra,zS,qf,QS,NHe,MXe,Bi,jf,jae,cL,qHe,Dae,jHe,EXe,qn,DHe,Gae,GHe,OHe,Oae,VHe,XHe,CXe,fL,wXe,WS,zHe,AXe,Df,LXe,Ii,Gf,Vae,mL,QHe,Xae,WHe,yXe,Lo,gL,HHe,hL,UHe,HS,JHe,YHe,KHe,pL,ZHe,zae,eUe,oUe,rUe,yr,_L,tUe,Qae,aUe,nUe,Ni,sUe,Wae,lUe,iUe,Hae,dUe,cUe,fUe,A,Of,Uae,mUe,gUe,US,hUe,pUe,_Ue,Vf,Jae,uUe,bUe,JS,vUe,FUe,TUe,Xf,Yae,MUe,EUe,YS,CUe,wUe,AUe,zf,Kae,LUe,yUe,KS,xUe,$Ue,kUe,Qf,Zae,SUe,RUe,ZS,PUe,BUe,IUe,Wf,ene,NUe,qUe,eR,jUe,DUe,GUe,Hf,one,OUe,VUe,oR,XUe,zUe,QUe,Uf,rne,WUe,HUe,rR,UUe,JUe,YUe,Jf,tne,KUe,ZUe,tR,eJe,oJe,rJe,Yf,ane,tJe,aJe,aR,nJe,sJe,lJe,Kf,nne,iJe,dJe,nR,cJe,fJe,mJe,Zf,sne,gJe,hJe,sR,pJe,_Je,uJe,em,lne,bJe,vJe,lR,FJe,TJe,MJe,om,ine,EJe,CJe,iR,wJe,AJe,LJe,rm,dne,yJe,xJe,dR,$Je,kJe,SJe,tm,cne,RJe,PJe,cR,BJe,IJe,NJe,am,fne,qJe,jJe,fR,DJe,GJe,OJe,nm,mne,VJe,XJe,mR,zJe,QJe,WJe,sm,gne,HJe,UJe,gR,JJe,YJe,KJe,lm,hne,ZJe,eYe,hR,oYe,rYe,tYe,im,pne,aYe,nYe,pR,sYe,lYe,iYe,dm,_ne,dYe,cYe,_R,fYe,mYe,gYe,cm,une,hYe,pYe,uR,_Ye,uYe,bYe,fm,bne,vYe,FYe,bR,TYe,MYe,EYe,mm,vne,CYe,wYe,vR,AYe,LYe,yYe,gm,Fne,xYe,$Ye,FR,kYe,SYe,RYe,hm,Tne,PYe,BYe,TR,IYe,NYe,qYe,pm,Mne,jYe,DYe,MR,GYe,OYe,VYe,_m,Ene,XYe,zYe,ER,QYe,WYe,HYe,um,Cne,UYe,JYe,CR,YYe,KYe,ZYe,bm,wne,eKe,oKe,wR,rKe,tKe,aKe,vm,Ane,nKe,sKe,AR,lKe,iKe,dKe,Fm,Lne,cKe,fKe,LR,mKe,gKe,hKe,Tm,yne,pKe,_Ke,yR,uKe,bKe,vKe,Mm,xne,FKe,TKe,xR,MKe,EKe,CKe,Em,$ne,wKe,AKe,$R,LKe,yKe,xKe,Cm,kne,$Ke,kKe,kR,SKe,RKe,PKe,wm,Sne,BKe,IKe,SR,NKe,qKe,jKe,Am,Rne,DKe,GKe,RR,OKe,VKe,XKe,Lm,Pne,zKe,QKe,PR,WKe,HKe,UKe,ym,Bne,JKe,YKe,BR,KKe,ZKe,eZe,xm,Ine,oZe,rZe,IR,tZe,aZe,nZe,$m,Nne,sZe,lZe,NR,iZe,dZe,cZe,km,qne,fZe,mZe,qR,gZe,hZe,pZe,Sm,jne,_Ze,uZe,jR,bZe,vZe,FZe,Rm,Dne,TZe,MZe,DR,EZe,CZe,wZe,Pm,Gne,AZe,LZe,GR,yZe,xZe,$Ze,Bm,One,kZe,SZe,OR,RZe,PZe,BZe,Im,Vne,IZe,NZe,VR,qZe,jZe,DZe,Nm,Xne,GZe,OZe,XR,VZe,XZe,zZe,qm,zne,QZe,WZe,zR,HZe,UZe,JZe,jm,Qne,YZe,KZe,QR,ZZe,eeo,oeo,Dm,Wne,reo,teo,WR,aeo,neo,seo,Gm,Hne,leo,ieo,HR,deo,ceo,feo,Om,Une,meo,geo,UR,heo,peo,_eo,Vm,Jne,ueo,beo,JR,veo,Feo,Teo,Xm,Yne,Meo,Eeo,YR,Ceo,weo,Aeo,zm,Kne,Leo,yeo,KR,xeo,$eo,keo,Qm,Zne,Seo,Reo,ZR,Peo,Beo,Ieo,Wm,ese,Neo,qeo,eP,jeo,Deo,Geo,Hm,ose,Oeo,Veo,oP,Xeo,zeo,Qeo,Um,rse,Weo,Heo,rP,Ueo,Jeo,Yeo,Jm,tse,Keo,Zeo,tP,eoo,ooo,roo,Ym,ase,too,aoo,aP,noo,soo,loo,Km,nse,ioo,doo,nP,coo,foo,moo,Zm,sse,goo,hoo,sP,poo,_oo,uoo,eg,lse,boo,voo,lP,Foo,Too,Moo,og,ise,Eoo,Coo,iP,woo,Aoo,Loo,rg,dse,yoo,xoo,dP,$oo,koo,Soo,tg,cse,Roo,Poo,cP,Boo,Ioo,Noo,ag,fse,qoo,joo,fP,Doo,Goo,Ooo,ng,mse,Voo,Xoo,mP,zoo,Qoo,Woo,sg,gse,Hoo,Uoo,gP,Joo,Yoo,Koo,lg,hse,Zoo,ero,hP,oro,rro,tro,ig,pse,aro,nro,pP,sro,lro,iro,dg,_se,dro,cro,_P,fro,mro,gro,cg,use,hro,pro,uP,_ro,uro,bro,fg,bse,vro,Fro,bP,Tro,Mro,Ero,mg,vse,Cro,wro,vP,Aro,Lro,yro,gg,Fse,xro,$ro,FP,kro,Sro,Rro,hg,Tse,Pro,Bro,TP,Iro,Nro,qro,pg,Mse,jro,Dro,MP,Gro,Oro,Vro,_g,Ese,Xro,zro,EP,Qro,Wro,Hro,ug,Cse,Uro,Jro,CP,Yro,Kro,Zro,bg,wse,eto,oto,wP,rto,tto,ato,vg,Ase,nto,sto,AP,lto,ito,dto,Fg,Lse,cto,fto,LP,mto,gto,hto,Tg,yse,pto,_to,yP,uto,bto,vto,Mg,xse,Fto,Tto,xP,Mto,Eto,Cto,Eg,$se,wto,Ato,$P,Lto,yto,xto,Cg,kse,$to,kto,kP,Sto,Rto,Pto,wg,Sse,Bto,Ito,SP,Nto,qto,jto,Ag,Rse,Dto,Gto,RP,Oto,Vto,Xto,Lg,Pse,zto,Qto,PP,Wto,Hto,Uto,yg,Bse,Jto,Yto,BP,Kto,Zto,eao,xg,Ise,oao,rao,IP,tao,aao,nao,$g,Nse,sao,lao,NP,iao,dao,cao,kg,qse,fao,mao,qP,gao,hao,pao,Sg,jse,_ao,uao,jP,bao,vao,Fao,Rg,Dse,Tao,Mao,DP,Eao,Cao,wao,Pg,Gse,Aao,Lao,GP,yao,xao,$ao,Bg,Ose,kao,Sao,OP,Rao,Pao,Bao,Ig,Vse,Iao,Nao,VP,qao,jao,Dao,Ng,Xse,Gao,Oao,XP,Vao,Xao,zao,qg,zse,Qao,Wao,zP,Hao,Uao,Jao,jg,Qse,Yao,Kao,QP,Zao,eno,ono,Dg,Wse,rno,tno,WP,ano,nno,sno,Gg,Hse,lno,ino,HP,dno,cno,fno,Og,Use,mno,gno,UP,hno,pno,_no,Vg,Jse,uno,bno,JP,vno,Fno,Tno,Xg,Yse,Mno,Eno,YP,Cno,wno,Ano,zg,Kse,Lno,yno,KP,xno,$no,kno,Qg,Zse,Sno,Rno,ZP,Pno,Bno,Ino,Wg,ele,Nno,qno,eB,jno,Dno,Gno,Hg,ole,Ono,Vno,oB,Xno,zno,Qno,Ug,rle,Wno,Hno,rB,Uno,Jno,Yno,Jg,tle,Kno,Zno,tB,eso,oso,rso,Yg,ale,tso,aso,aB,nso,sso,lso,Kg,iso,Zg,uL,dso,nle,cso,xXe,qi,eh,sle,bL,fso,lle,mso,$Xe,yo,vL,gso,FL,hso,nB,pso,_so,uso,TL,bso,ile,vso,Fso,Tso,xr,ML,Mso,dle,Eso,Cso,Pa,wso,cle,Aso,Lso,fle,yso,xso,mle,$so,kso,Sso,k,jn,gle,Rso,Pso,sB,Bso,Iso,lB,Nso,qso,jso,Dn,hle,Dso,Gso,iB,Oso,Vso,dB,Xso,zso,Qso,Gn,ple,Wso,Hso,cB,Uso,Jso,fB,Yso,Kso,Zso,oh,_le,elo,olo,mB,rlo,tlo,alo,On,ule,nlo,slo,gB,llo,ilo,hB,dlo,clo,flo,rh,ble,mlo,glo,pB,hlo,plo,_lo,th,vle,ulo,blo,_B,vlo,Flo,Tlo,ah,Fle,Mlo,Elo,uB,Clo,wlo,Alo,Vn,Tle,Llo,ylo,bB,xlo,$lo,vB,klo,Slo,Rlo,Xn,Mle,Plo,Blo,FB,Ilo,Nlo,TB,qlo,jlo,Dlo,zn,Ele,Glo,Olo,MB,Vlo,Xlo,EB,zlo,Qlo,Wlo,nh,Cle,Hlo,Ulo,CB,Jlo,Ylo,Klo,sh,wle,Zlo,eio,wB,oio,rio,tio,lh,Ale,aio,nio,AB,sio,lio,iio,Qn,Lle,dio,cio,LB,fio,mio,yB,gio,hio,pio,ih,yle,_io,uio,xB,bio,vio,Fio,Wn,xle,Tio,Mio,$B,Eio,Cio,kB,wio,Aio,Lio,Hn,$le,yio,xio,SB,$io,kio,RB,Sio,Rio,Pio,Un,kle,Bio,Iio,PB,Nio,qio,BB,jio,Dio,Gio,Jn,Sle,Oio,Vio,IB,Xio,zio,NB,Qio,Wio,Hio,dh,Rle,Uio,Jio,qB,Yio,Kio,Zio,Yn,Ple,edo,odo,jB,rdo,tdo,DB,ado,ndo,sdo,Kn,Ble,ldo,ido,GB,ddo,cdo,OB,fdo,mdo,gdo,Zn,Ile,hdo,pdo,VB,_do,udo,XB,bdo,vdo,Fdo,es,Nle,Tdo,Mdo,zB,Edo,Cdo,QB,wdo,Ado,Ldo,os,qle,ydo,xdo,WB,$do,kdo,HB,Sdo,Rdo,Pdo,rs,jle,Bdo,Ido,UB,Ndo,qdo,JB,jdo,Ddo,Gdo,ch,Dle,Odo,Vdo,YB,Xdo,zdo,Qdo,ts,Gle,Wdo,Hdo,KB,Udo,Jdo,ZB,Ydo,Kdo,Zdo,fh,Ole,eco,oco,eI,rco,tco,aco,as,Vle,nco,sco,oI,lco,ico,rI,dco,cco,fco,ns,Xle,mco,gco,tI,hco,pco,aI,_co,uco,bco,ss,zle,vco,Fco,nI,Tco,Mco,sI,Eco,Cco,wco,mh,Qle,Aco,Lco,lI,yco,xco,$co,ls,Wle,kco,Sco,iI,Rco,Pco,dI,Bco,Ico,Nco,is,Hle,qco,jco,cI,Dco,Gco,fI,Oco,Vco,Xco,ds,Ule,zco,Qco,mI,Wco,Hco,gI,Uco,Jco,Yco,gh,Jle,Kco,Zco,hI,efo,ofo,rfo,cs,Yle,tfo,afo,pI,nfo,sfo,_I,lfo,ifo,dfo,fs,Kle,cfo,ffo,uI,mfo,gfo,bI,hfo,pfo,_fo,ms,Zle,ufo,bfo,vI,vfo,Ffo,FI,Tfo,Mfo,Efo,gs,eie,Cfo,wfo,TI,Afo,Lfo,MI,yfo,xfo,$fo,hs,oie,kfo,Sfo,EI,Rfo,Pfo,CI,Bfo,Ifo,Nfo,ps,rie,qfo,jfo,wI,Dfo,Gfo,AI,Ofo,Vfo,Xfo,_s,tie,zfo,Qfo,LI,Wfo,Hfo,yI,Ufo,Jfo,Yfo,us,aie,Kfo,Zfo,xI,emo,omo,$I,rmo,tmo,amo,hh,nie,nmo,smo,kI,lmo,imo,dmo,bs,sie,cmo,fmo,SI,mmo,gmo,RI,hmo,pmo,_mo,ph,lie,umo,bmo,PI,vmo,Fmo,Tmo,_h,iie,Mmo,Emo,BI,Cmo,wmo,Amo,vs,die,Lmo,ymo,II,xmo,$mo,NI,kmo,Smo,Rmo,Fs,cie,Pmo,Bmo,qI,Imo,Nmo,jI,qmo,jmo,Dmo,Ts,fie,Gmo,Omo,DI,Vmo,Xmo,GI,zmo,Qmo,Wmo,uh,mie,Hmo,Umo,OI,Jmo,Ymo,Kmo,Ms,gie,Zmo,ego,VI,ogo,rgo,XI,tgo,ago,ngo,Es,hie,sgo,lgo,zI,igo,dgo,QI,cgo,fgo,mgo,Cs,pie,ggo,hgo,WI,pgo,_go,HI,ugo,bgo,vgo,ws,_ie,Fgo,Tgo,UI,Mgo,Ego,JI,Cgo,wgo,Ago,As,uie,Lgo,ygo,YI,xgo,$go,KI,kgo,Sgo,Rgo,Ls,bie,Pgo,Bgo,ZI,Igo,Ngo,eN,qgo,jgo,Dgo,ys,vie,Ggo,Ogo,oN,Vgo,Xgo,rN,zgo,Qgo,Wgo,xs,Fie,Hgo,Ugo,tN,Jgo,Ygo,aN,Kgo,Zgo,eho,bh,Tie,oho,rho,nN,tho,aho,nho,$s,Mie,sho,lho,sN,iho,dho,lN,cho,fho,mho,vh,Eie,gho,hho,iN,pho,_ho,uho,Fh,Cie,bho,vho,dN,Fho,Tho,Mho,Th,wie,Eho,Cho,cN,who,Aho,Lho,Mh,Aie,yho,xho,fN,$ho,kho,Sho,ks,Lie,Rho,Pho,mN,Bho,Iho,gN,Nho,qho,jho,Eh,yie,Dho,Gho,hN,Oho,Vho,Xho,Ss,xie,zho,Qho,pN,Who,Hho,_N,Uho,Jho,Yho,Rs,$ie,Kho,Zho,uN,epo,opo,bN,rpo,tpo,apo,Ps,kie,npo,spo,vN,lpo,ipo,FN,dpo,cpo,fpo,Bs,Sie,mpo,gpo,TN,hpo,ppo,MN,_po,upo,bpo,Is,Rie,vpo,Fpo,EN,Tpo,Mpo,CN,Epo,Cpo,wpo,Ns,Pie,Apo,Lpo,wN,ypo,xpo,AN,$po,kpo,Spo,Ch,Bie,Rpo,Ppo,LN,Bpo,Ipo,Npo,wh,Iie,qpo,jpo,yN,Dpo,Gpo,Opo,qs,Nie,Vpo,Xpo,xN,zpo,Qpo,$N,Wpo,Hpo,Upo,js,qie,Jpo,Ypo,kN,Kpo,Zpo,SN,e_o,o_o,r_o,Ds,jie,t_o,a_o,RN,n_o,s_o,PN,l_o,i_o,d_o,Ah,Die,c_o,f_o,BN,m_o,g_o,h_o,Lh,Gie,p_o,__o,IN,u_o,b_o,v_o,yh,Oie,F_o,T_o,NN,M_o,E_o,C_o,Gs,Vie,w_o,A_o,qN,L_o,y_o,jN,x_o,$_o,k_o,Os,Xie,S_o,R_o,DN,P_o,B_o,GN,I_o,N_o,q_o,xh,zie,j_o,D_o,ON,G_o,O_o,V_o,$h,Qie,X_o,z_o,VN,Q_o,W_o,H_o,kh,Wie,U_o,J_o,XN,Y_o,K_o,Z_o,Vs,Hie,euo,ouo,zN,ruo,tuo,QN,auo,nuo,suo,Sh,Uie,luo,iuo,WN,duo,cuo,fuo,Rh,Jie,muo,guo,HN,huo,puo,_uo,Xs,Yie,uuo,buo,UN,vuo,Fuo,JN,Tuo,Muo,Euo,zs,Kie,Cuo,wuo,YN,Auo,Luo,KN,yuo,xuo,$uo,Qs,Zie,kuo,Suo,ZN,Ruo,Puo,eq,Buo,Iuo,Nuo,Ws,ede,quo,juo,oq,Duo,Guo,rq,Ouo,Vuo,Xuo,Ph,zuo,Bh,EL,Quo,ode,Wuo,kXe,ji,Ih,rde,CL,Huo,tde,Uuo,SXe,xo,wL,Juo,AL,Yuo,tq,Kuo,Zuo,e4o,LL,o4o,ade,r4o,t4o,a4o,Ue,yL,n4o,nde,s4o,l4o,Ba,i4o,sde,d4o,c4o,lde,f4o,m4o,ide,g4o,h4o,p4o,Y,Nh,dde,_4o,u4o,aq,b4o,v4o,F4o,qh,cde,T4o,M4o,nq,E4o,C4o,w4o,jh,fde,A4o,L4o,sq,y4o,x4o,$4o,Dh,mde,k4o,S4o,lq,R4o,P4o,B4o,Gh,gde,I4o,N4o,iq,q4o,j4o,D4o,Oh,hde,G4o,O4o,dq,V4o,X4o,z4o,Vh,pde,Q4o,W4o,cq,H4o,U4o,J4o,Xh,_de,Y4o,K4o,fq,Z4o,e2o,o2o,zh,ude,r2o,t2o,mq,a2o,n2o,s2o,Qh,bde,l2o,i2o,gq,d2o,c2o,f2o,Wh,vde,m2o,g2o,hq,h2o,p2o,_2o,Hh,Fde,u2o,b2o,pq,v2o,F2o,T2o,Uh,Tde,M2o,E2o,_q,C2o,w2o,A2o,Jh,Mde,L2o,y2o,uq,x2o,$2o,k2o,Yh,Ede,S2o,R2o,bq,P2o,B2o,I2o,Kh,Cde,N2o,q2o,vq,j2o,D2o,G2o,Zh,wde,O2o,V2o,Fq,X2o,z2o,Q2o,ep,Ade,W2o,H2o,Tq,U2o,J2o,Y2o,op,Lde,K2o,Z2o,Mq,e1o,o1o,r1o,rp,yde,t1o,a1o,Eq,n1o,s1o,l1o,tp,xde,i1o,d1o,Cq,c1o,f1o,m1o,ap,$de,g1o,h1o,wq,p1o,_1o,u1o,np,kde,b1o,v1o,Aq,F1o,T1o,M1o,sp,Sde,E1o,C1o,Lq,w1o,A1o,L1o,lp,Rde,y1o,x1o,yq,$1o,k1o,S1o,ip,Pde,R1o,P1o,xq,B1o,I1o,N1o,dp,Bde,q1o,j1o,$q,D1o,G1o,O1o,cp,Ide,V1o,X1o,kq,z1o,Q1o,W1o,fp,Nde,H1o,U1o,Sq,J1o,Y1o,K1o,mp,qde,Z1o,ebo,Rq,obo,rbo,tbo,gp,jde,abo,nbo,Pq,sbo,lbo,ibo,hp,Dde,dbo,cbo,Bq,fbo,mbo,gbo,pp,Gde,hbo,pbo,Iq,_bo,ubo,bbo,_p,Ode,vbo,Fbo,Nq,Tbo,Mbo,Ebo,up,Cbo,bp,wbo,vp,xL,Abo,Vde,Lbo,RXe,Di,Fp,Xde,$L,ybo,zde,xbo,PXe,$o,kL,$bo,SL,kbo,qq,Sbo,Rbo,Pbo,RL,Bbo,Qde,Ibo,Nbo,qbo,Je,PL,jbo,Wde,Dbo,Gbo,Gi,Obo,Hde,Vbo,Xbo,Ude,zbo,Qbo,Wbo,pe,Tp,Jde,Hbo,Ubo,jq,Jbo,Ybo,Kbo,Mp,Yde,Zbo,evo,Dq,ovo,rvo,tvo,Ep,Kde,avo,nvo,Gq,svo,lvo,ivo,Cp,Zde,dvo,cvo,Oq,fvo,mvo,gvo,wp,ece,hvo,pvo,Vq,_vo,uvo,bvo,Ap,oce,vvo,Fvo,Xq,Tvo,Mvo,Evo,Lp,rce,Cvo,wvo,zq,Avo,Lvo,yvo,yp,tce,xvo,$vo,Qq,kvo,Svo,Rvo,xp,ace,Pvo,Bvo,Wq,Ivo,Nvo,qvo,$p,nce,jvo,Dvo,Hq,Gvo,Ovo,Vvo,kp,sce,Xvo,zvo,Uq,Qvo,Wvo,Hvo,Sp,lce,Uvo,Jvo,Jq,Yvo,Kvo,Zvo,Rp,ice,eFo,oFo,Yq,rFo,tFo,aFo,Pp,dce,nFo,sFo,Kq,lFo,iFo,dFo,Bp,cce,cFo,fFo,Zq,mFo,gFo,hFo,Ip,fce,pFo,_Fo,ej,uFo,bFo,vFo,Np,mce,FFo,TFo,oj,MFo,EFo,CFo,qp,gce,wFo,AFo,rj,LFo,yFo,xFo,jp,$Fo,Dp,kFo,Gp,BL,SFo,hce,RFo,BXe,Oi,Op,pce,IL,PFo,_ce,BFo,IXe,ko,NL,IFo,Vi,NFo,tj,qFo,jFo,aj,DFo,GFo,OFo,qL,VFo,uce,XFo,zFo,QFo,it,jL,WFo,bce,HFo,UFo,Xi,JFo,vce,YFo,KFo,nj,ZFo,eTo,oTo,Vp,rTo,Ye,DL,tTo,Fce,aTo,nTo,Ia,sTo,Tce,lTo,iTo,Mce,dTo,cTo,Ece,fTo,mTo,gTo,y,Xp,Cce,hTo,pTo,sj,_To,uTo,bTo,zp,wce,vTo,FTo,lj,TTo,MTo,ETo,Qp,Ace,CTo,wTo,ij,ATo,LTo,yTo,Wp,Lce,xTo,$To,dj,kTo,STo,RTo,Hp,yce,PTo,BTo,cj,ITo,NTo,qTo,Up,xce,jTo,DTo,fj,GTo,OTo,VTo,Jp,$ce,XTo,zTo,mj,QTo,WTo,HTo,Yp,kce,UTo,JTo,gj,YTo,KTo,ZTo,Kp,Sce,e8o,o8o,hj,r8o,t8o,a8o,Zp,Rce,n8o,s8o,pj,l8o,i8o,d8o,e_,Pce,c8o,f8o,_j,m8o,g8o,h8o,o_,Bce,p8o,_8o,uj,u8o,b8o,v8o,r_,Ice,F8o,T8o,bj,M8o,E8o,C8o,t_,Nce,w8o,A8o,vj,L8o,y8o,x8o,a_,qce,$8o,k8o,Fj,S8o,R8o,P8o,n_,jce,B8o,I8o,Tj,N8o,q8o,j8o,s_,Dce,D8o,G8o,Mj,O8o,V8o,X8o,l_,Gce,z8o,Q8o,Ej,W8o,H8o,U8o,i_,Oce,J8o,Y8o,Cj,K8o,Z8o,eMo,d_,Vce,oMo,rMo,wj,tMo,aMo,nMo,c_,Xce,sMo,lMo,Aj,iMo,dMo,cMo,f_,zce,fMo,mMo,Lj,gMo,hMo,pMo,m_,Qce,_Mo,uMo,yj,bMo,vMo,FMo,g_,Wce,TMo,MMo,xj,EMo,CMo,wMo,h_,Hce,AMo,LMo,$j,yMo,xMo,$Mo,p_,Uce,kMo,SMo,kj,RMo,PMo,BMo,__,Jce,IMo,NMo,Sj,qMo,jMo,DMo,u_,Yce,GMo,OMo,Rj,VMo,XMo,zMo,b_,Kce,QMo,WMo,Pj,HMo,UMo,JMo,v_,Zce,YMo,KMo,Bj,ZMo,eEo,oEo,F_,efe,rEo,tEo,Ij,aEo,nEo,sEo,T_,ofe,lEo,iEo,Nj,dEo,cEo,fEo,M_,rfe,mEo,gEo,qj,hEo,pEo,_Eo,E_,tfe,uEo,bEo,jj,vEo,FEo,TEo,Hs,afe,MEo,EEo,Dj,CEo,wEo,Gj,AEo,LEo,yEo,C_,nfe,xEo,$Eo,Oj,kEo,SEo,REo,w_,sfe,PEo,BEo,Vj,IEo,NEo,qEo,A_,lfe,jEo,DEo,Xj,GEo,OEo,VEo,L_,ife,XEo,zEo,zj,QEo,WEo,HEo,y_,dfe,UEo,JEo,Qj,YEo,KEo,ZEo,x_,cfe,eCo,oCo,Wj,rCo,tCo,aCo,$_,ffe,nCo,sCo,Hj,lCo,iCo,dCo,k_,mfe,cCo,fCo,Uj,mCo,gCo,hCo,S_,gfe,pCo,_Co,Jj,uCo,bCo,vCo,R_,hfe,FCo,TCo,Yj,MCo,ECo,CCo,P_,pfe,wCo,ACo,Kj,LCo,yCo,xCo,B_,_fe,$Co,kCo,Zj,SCo,RCo,PCo,I_,ufe,BCo,ICo,eD,NCo,qCo,jCo,N_,bfe,DCo,GCo,oD,OCo,VCo,XCo,q_,vfe,zCo,QCo,rD,WCo,HCo,UCo,j_,Ffe,JCo,YCo,tD,KCo,ZCo,e3o,D_,Tfe,o3o,r3o,aD,t3o,a3o,n3o,G_,Mfe,s3o,l3o,nD,i3o,d3o,c3o,O_,Efe,f3o,m3o,sD,g3o,h3o,p3o,V_,Cfe,_3o,u3o,lD,b3o,v3o,F3o,X_,wfe,T3o,M3o,iD,E3o,C3o,w3o,z_,Afe,A3o,L3o,dD,y3o,x3o,$3o,Q_,Lfe,k3o,S3o,cD,R3o,P3o,B3o,W_,yfe,I3o,N3o,fD,q3o,j3o,D3o,H_,xfe,G3o,O3o,mD,V3o,X3o,z3o,U_,$fe,Q3o,W3o,gD,H3o,U3o,J3o,J_,kfe,Y3o,K3o,hD,Z3o,e5o,o5o,Y_,Sfe,r5o,t5o,pD,a5o,n5o,s5o,K_,Rfe,l5o,i5o,_D,d5o,c5o,f5o,Z_,Pfe,m5o,g5o,uD,h5o,p5o,_5o,eu,Bfe,u5o,b5o,bD,v5o,F5o,T5o,ou,Ife,M5o,E5o,vD,C5o,w5o,A5o,ru,Nfe,L5o,y5o,FD,x5o,$5o,k5o,tu,qfe,S5o,R5o,TD,P5o,B5o,I5o,au,jfe,N5o,q5o,MD,j5o,D5o,G5o,nu,Dfe,O5o,V5o,ED,X5o,z5o,Q5o,su,Gfe,W5o,H5o,CD,U5o,J5o,Y5o,lu,Ofe,K5o,Z5o,wD,e0o,o0o,r0o,iu,Vfe,t0o,a0o,AD,n0o,s0o,l0o,du,Xfe,i0o,d0o,LD,c0o,f0o,m0o,cu,zfe,g0o,h0o,yD,p0o,_0o,u0o,fu,Qfe,b0o,v0o,xD,F0o,T0o,M0o,mu,Wfe,E0o,C0o,$D,w0o,A0o,L0o,gu,Hfe,y0o,x0o,kD,$0o,k0o,S0o,hu,Ufe,R0o,P0o,SD,B0o,I0o,N0o,pu,Jfe,q0o,j0o,RD,D0o,G0o,O0o,_u,Yfe,V0o,X0o,PD,z0o,Q0o,W0o,uu,Kfe,H0o,U0o,BD,J0o,Y0o,K0o,bu,Zfe,Z0o,ewo,ID,owo,rwo,two,vu,eme,awo,nwo,ND,swo,lwo,iwo,Fu,ome,dwo,cwo,qD,fwo,mwo,gwo,Tu,rme,hwo,pwo,jD,_wo,uwo,bwo,Mu,tme,vwo,Fwo,DD,Two,Mwo,Ewo,Eu,ame,Cwo,wwo,GD,Awo,Lwo,ywo,Cu,nme,xwo,$wo,OD,kwo,Swo,Rwo,wu,sme,Pwo,Bwo,VD,Iwo,Nwo,qwo,Au,lme,jwo,Dwo,XD,Gwo,Owo,Vwo,Lu,ime,Xwo,zwo,zD,Qwo,Wwo,Hwo,yu,dme,Uwo,Jwo,QD,Ywo,Kwo,Zwo,xu,cme,eAo,oAo,WD,rAo,tAo,aAo,$u,fme,nAo,sAo,HD,lAo,iAo,dAo,ku,mme,cAo,fAo,UD,mAo,gAo,hAo,Su,gme,pAo,_Ao,JD,uAo,bAo,vAo,Ru,hme,FAo,TAo,YD,MAo,EAo,CAo,Pu,pme,wAo,AAo,KD,LAo,yAo,xAo,Bu,_me,$Ao,kAo,ZD,SAo,RAo,PAo,Iu,ume,BAo,IAo,eG,NAo,qAo,jAo,Nu,bme,DAo,GAo,oG,OAo,VAo,XAo,qu,vme,zAo,QAo,rG,WAo,HAo,UAo,ju,Fme,JAo,YAo,tG,KAo,ZAo,e6o,Du,Tme,o6o,r6o,aG,t6o,a6o,n6o,Gu,Mme,s6o,l6o,nG,i6o,d6o,c6o,Ou,Eme,f6o,m6o,sG,g6o,h6o,p6o,Vu,Cme,_6o,u6o,lG,b6o,v6o,F6o,Xu,wme,T6o,M6o,iG,E6o,C6o,w6o,zu,Ame,A6o,L6o,dG,y6o,x6o,$6o,Qu,Lme,k6o,S6o,cG,R6o,P6o,B6o,Wu,I6o,yme,N6o,q6o,xme,j6o,D6o,Hu,NXe,zi,Uu,$me,GL,G6o,kme,O6o,qXe,So,OL,V6o,Qi,X6o,fG,z6o,Q6o,mG,W6o,H6o,U6o,VL,J6o,Sme,Y6o,K6o,Z6o,dt,XL,e7o,Rme,o7o,r7o,Wi,t7o,Pme,a7o,n7o,gG,s7o,l7o,i7o,Ju,d7o,Ke,zL,c7o,Bme,f7o,m7o,Na,g7o,Ime,h7o,p7o,Nme,_7o,u7o,qme,b7o,v7o,F7o,G,Yu,jme,T7o,M7o,hG,E7o,C7o,w7o,Ku,Dme,A7o,L7o,pG,y7o,x7o,$7o,Zu,Gme,k7o,S7o,_G,R7o,P7o,B7o,e4,Ome,I7o,N7o,uG,q7o,j7o,D7o,o4,Vme,G7o,O7o,bG,V7o,X7o,z7o,r4,Xme,Q7o,W7o,vG,H7o,U7o,J7o,t4,zme,Y7o,K7o,FG,Z7o,eLo,oLo,a4,Qme,rLo,tLo,TG,aLo,nLo,sLo,n4,Wme,lLo,iLo,MG,dLo,cLo,fLo,s4,Hme,mLo,gLo,EG,hLo,pLo,_Lo,l4,Ume,uLo,bLo,CG,vLo,FLo,TLo,i4,Jme,MLo,ELo,wG,CLo,wLo,ALo,d4,Yme,LLo,yLo,AG,xLo,$Lo,kLo,c4,Kme,SLo,RLo,LG,PLo,BLo,ILo,f4,Zme,NLo,qLo,yG,jLo,DLo,GLo,m4,ege,OLo,VLo,xG,XLo,zLo,QLo,g4,oge,WLo,HLo,$G,ULo,JLo,YLo,h4,rge,KLo,ZLo,kG,eyo,oyo,ryo,p4,tge,tyo,ayo,SG,nyo,syo,lyo,_4,age,iyo,dyo,RG,cyo,fyo,myo,u4,nge,gyo,hyo,PG,pyo,_yo,uyo,b4,sge,byo,vyo,BG,Fyo,Tyo,Myo,v4,lge,Eyo,Cyo,IG,wyo,Ayo,Lyo,F4,ige,yyo,xyo,NG,$yo,kyo,Syo,T4,dge,Ryo,Pyo,qG,Byo,Iyo,Nyo,M4,cge,qyo,jyo,jG,Dyo,Gyo,Oyo,E4,fge,Vyo,Xyo,DG,zyo,Qyo,Wyo,C4,mge,Hyo,Uyo,GG,Jyo,Yyo,Kyo,w4,gge,Zyo,e9o,OG,o9o,r9o,t9o,A4,hge,a9o,n9o,VG,s9o,l9o,i9o,L4,pge,d9o,c9o,XG,f9o,m9o,g9o,y4,_ge,h9o,p9o,zG,_9o,u9o,b9o,x4,uge,v9o,F9o,QG,T9o,M9o,E9o,$4,bge,C9o,w9o,WG,A9o,L9o,y9o,k4,vge,x9o,$9o,HG,k9o,S9o,R9o,S4,Fge,P9o,B9o,UG,I9o,N9o,q9o,R4,Tge,j9o,D9o,JG,G9o,O9o,V9o,P4,Mge,X9o,z9o,YG,Q9o,W9o,H9o,B4,Ege,U9o,J9o,KG,Y9o,K9o,Z9o,I4,Cge,exo,oxo,ZG,rxo,txo,axo,N4,wge,nxo,sxo,eO,lxo,ixo,dxo,q4,Age,cxo,fxo,oO,mxo,gxo,hxo,j4,Lge,pxo,_xo,rO,uxo,bxo,vxo,D4,yge,Fxo,Txo,tO,Mxo,Exo,Cxo,G4,xge,wxo,Axo,aO,Lxo,yxo,xxo,O4,$xo,$ge,kxo,Sxo,kge,Rxo,Pxo,V4,jXe,Hi,X4,Sge,QL,Bxo,Rge,Ixo,DXe,Ro,WL,Nxo,Ui,qxo,nO,jxo,Dxo,sO,Gxo,Oxo,Vxo,HL,Xxo,Pge,zxo,Qxo,Wxo,ct,UL,Hxo,Bge,Uxo,Jxo,Ji,Yxo,Ige,Kxo,Zxo,lO,e$o,o$o,r$o,z4,t$o,Ze,JL,a$o,Nge,n$o,s$o,qa,l$o,qge,i$o,d$o,jge,c$o,f$o,Dge,m$o,g$o,h$o,z,Q4,Gge,p$o,_$o,iO,u$o,b$o,v$o,W4,Oge,F$o,T$o,dO,M$o,E$o,C$o,H4,Vge,w$o,A$o,cO,L$o,y$o,x$o,U4,Xge,$$o,k$o,fO,S$o,R$o,P$o,J4,zge,B$o,I$o,mO,N$o,q$o,j$o,Y4,Qge,D$o,G$o,gO,O$o,V$o,X$o,K4,Wge,z$o,Q$o,hO,W$o,H$o,U$o,Z4,Hge,J$o,Y$o,pO,K$o,Z$o,eko,e2,Uge,oko,rko,_O,tko,ako,nko,o2,Jge,sko,lko,uO,iko,dko,cko,r2,Yge,fko,mko,bO,gko,hko,pko,t2,Kge,_ko,uko,vO,bko,vko,Fko,a2,Zge,Tko,Mko,FO,Eko,Cko,wko,n2,ehe,Ako,Lko,TO,yko,xko,$ko,s2,ohe,kko,Sko,MO,Rko,Pko,Bko,l2,rhe,Iko,Nko,EO,qko,jko,Dko,i2,the,Gko,Oko,CO,Vko,Xko,zko,d2,ahe,Qko,Wko,wO,Hko,Uko,Jko,c2,nhe,Yko,Kko,AO,Zko,eSo,oSo,f2,she,rSo,tSo,LO,aSo,nSo,sSo,m2,lhe,lSo,iSo,yO,dSo,cSo,fSo,g2,ihe,mSo,gSo,xO,hSo,pSo,_So,h2,dhe,uSo,bSo,$O,vSo,FSo,TSo,p2,che,MSo,ESo,kO,CSo,wSo,ASo,_2,fhe,LSo,ySo,SO,xSo,$So,kSo,u2,mhe,SSo,RSo,RO,PSo,BSo,ISo,b2,ghe,NSo,qSo,PO,jSo,DSo,GSo,v2,hhe,OSo,VSo,BO,XSo,zSo,QSo,F2,phe,WSo,HSo,IO,USo,JSo,YSo,T2,_he,KSo,ZSo,NO,eRo,oRo,rRo,M2,uhe,tRo,aRo,qO,nRo,sRo,lRo,E2,bhe,iRo,dRo,jO,cRo,fRo,mRo,C2,vhe,gRo,hRo,DO,pRo,_Ro,uRo,w2,Fhe,bRo,vRo,GO,FRo,TRo,MRo,A2,The,ERo,CRo,OO,wRo,ARo,LRo,L2,Mhe,yRo,xRo,VO,$Ro,kRo,SRo,y2,Ehe,RRo,PRo,XO,BRo,IRo,NRo,x2,Che,qRo,jRo,zO,DRo,GRo,ORo,$2,whe,VRo,XRo,QO,zRo,QRo,WRo,k2,Ahe,HRo,URo,WO,JRo,YRo,KRo,S2,ZRo,Lhe,ePo,oPo,yhe,rPo,tPo,R2,GXe,Yi,P2,xhe,YL,aPo,$he,nPo,OXe,Po,KL,sPo,Ki,lPo,HO,iPo,dPo,UO,cPo,fPo,mPo,ZL,gPo,khe,hPo,pPo,_Po,ft,ey,uPo,She,bPo,vPo,Zi,FPo,Rhe,TPo,MPo,JO,EPo,CPo,wPo,B2,APo,eo,oy,LPo,Phe,yPo,xPo,ja,$Po,Bhe,kPo,SPo,Ihe,RPo,PPo,Nhe,BPo,IPo,NPo,W,I2,qhe,qPo,jPo,YO,DPo,GPo,OPo,N2,jhe,VPo,XPo,KO,zPo,QPo,WPo,q2,Dhe,HPo,UPo,ZO,JPo,YPo,KPo,j2,Ghe,ZPo,eBo,eV,oBo,rBo,tBo,D2,Ohe,aBo,nBo,oV,sBo,lBo,iBo,G2,Vhe,dBo,cBo,rV,fBo,mBo,gBo,O2,Xhe,hBo,pBo,tV,_Bo,uBo,bBo,V2,zhe,vBo,FBo,aV,TBo,MBo,EBo,X2,Qhe,CBo,wBo,nV,ABo,LBo,yBo,z2,Whe,xBo,$Bo,sV,kBo,SBo,RBo,Q2,Hhe,PBo,BBo,lV,IBo,NBo,qBo,W2,Uhe,jBo,DBo,iV,GBo,OBo,VBo,H2,Jhe,XBo,zBo,dV,QBo,WBo,HBo,U2,Yhe,UBo,JBo,cV,YBo,KBo,ZBo,J2,Khe,eIo,oIo,fV,rIo,tIo,aIo,Y2,Zhe,nIo,sIo,mV,lIo,iIo,dIo,K2,epe,cIo,fIo,gV,mIo,gIo,hIo,Z2,ope,pIo,_Io,hV,uIo,bIo,vIo,e1,rpe,FIo,TIo,pV,MIo,EIo,CIo,o1,tpe,wIo,AIo,_V,LIo,yIo,xIo,r1,ape,$Io,kIo,uV,SIo,RIo,PIo,t1,npe,BIo,IIo,bV,NIo,qIo,jIo,a1,spe,DIo,GIo,vV,OIo,VIo,XIo,n1,lpe,zIo,QIo,FV,WIo,HIo,UIo,s1,ipe,JIo,YIo,TV,KIo,ZIo,eNo,l1,dpe,oNo,rNo,MV,tNo,aNo,nNo,i1,cpe,sNo,lNo,EV,iNo,dNo,cNo,d1,fpe,fNo,mNo,CV,gNo,hNo,pNo,c1,mpe,_No,uNo,wV,bNo,vNo,FNo,f1,gpe,TNo,MNo,AV,ENo,CNo,wNo,m1,hpe,ANo,LNo,LV,yNo,xNo,$No,g1,ppe,kNo,SNo,yV,RNo,PNo,BNo,h1,_pe,INo,NNo,xV,qNo,jNo,DNo,p1,upe,GNo,ONo,bpe,VNo,XNo,zNo,_1,vpe,QNo,WNo,$V,HNo,UNo,JNo,u1,Fpe,YNo,KNo,kV,ZNo,eqo,oqo,b1,Tpe,rqo,tqo,SV,aqo,nqo,sqo,v1,Mpe,lqo,iqo,RV,dqo,cqo,fqo,F1,mqo,Epe,gqo,hqo,Cpe,pqo,_qo,T1,VXe,ed,M1,wpe,ry,uqo,Ape,bqo,XXe,Bo,ty,vqo,od,Fqo,PV,Tqo,Mqo,BV,Eqo,Cqo,wqo,ay,Aqo,Lpe,Lqo,yqo,xqo,mt,ny,$qo,ype,kqo,Sqo,rd,Rqo,xpe,Pqo,Bqo,IV,Iqo,Nqo,qqo,E1,jqo,oo,sy,Dqo,$pe,Gqo,Oqo,Da,Vqo,kpe,Xqo,zqo,Spe,Qqo,Wqo,Rpe,Hqo,Uqo,Jqo,fe,C1,Ppe,Yqo,Kqo,NV,Zqo,ejo,ojo,w1,Bpe,rjo,tjo,qV,ajo,njo,sjo,A1,Ipe,ljo,ijo,jV,djo,cjo,fjo,L1,Npe,mjo,gjo,DV,hjo,pjo,_jo,y1,qpe,ujo,bjo,GV,vjo,Fjo,Tjo,x1,jpe,Mjo,Ejo,OV,Cjo,wjo,Ajo,$1,Dpe,Ljo,yjo,VV,xjo,$jo,kjo,k1,Gpe,Sjo,Rjo,XV,Pjo,Bjo,Ijo,S1,Ope,Njo,qjo,zV,jjo,Djo,Gjo,R1,Vpe,Ojo,Vjo,QV,Xjo,zjo,Qjo,P1,Xpe,Wjo,Hjo,WV,Ujo,Jjo,Yjo,B1,zpe,Kjo,Zjo,HV,eDo,oDo,rDo,I1,Qpe,tDo,aDo,UV,nDo,sDo,lDo,N1,Wpe,iDo,dDo,JV,cDo,fDo,mDo,q1,Hpe,gDo,hDo,YV,pDo,_Do,uDo,j1,Upe,bDo,vDo,KV,FDo,TDo,MDo,D1,Jpe,EDo,CDo,ZV,wDo,ADo,LDo,G1,Ype,yDo,xDo,eX,$Do,kDo,SDo,O1,Kpe,RDo,PDo,oX,BDo,IDo,NDo,V1,qDo,Zpe,jDo,DDo,e_e,GDo,ODo,X1,zXe,td,z1,o_e,ly,VDo,r_e,XDo,QXe,Io,iy,zDo,ad,QDo,rX,WDo,HDo,tX,UDo,JDo,YDo,dy,KDo,t_e,ZDo,eGo,oGo,gt,cy,rGo,a_e,tGo,aGo,nd,nGo,n_e,sGo,lGo,aX,iGo,dGo,cGo,Q1,fGo,ro,fy,mGo,s_e,gGo,hGo,Ga,pGo,l_e,_Go,uGo,i_e,bGo,vGo,d_e,FGo,TGo,MGo,B,W1,c_e,EGo,CGo,nX,wGo,AGo,LGo,H1,f_e,yGo,xGo,sX,$Go,kGo,SGo,U1,m_e,RGo,PGo,lX,BGo,IGo,NGo,J1,g_e,qGo,jGo,iX,DGo,GGo,OGo,Y1,h_e,VGo,XGo,dX,zGo,QGo,WGo,K1,p_e,HGo,UGo,cX,JGo,YGo,KGo,Z1,__e,ZGo,eOo,fX,oOo,rOo,tOo,eb,u_e,aOo,nOo,mX,sOo,lOo,iOo,ob,b_e,dOo,cOo,gX,fOo,mOo,gOo,rb,v_e,hOo,pOo,hX,_Oo,uOo,bOo,tb,F_e,vOo,FOo,pX,TOo,MOo,EOo,ab,T_e,COo,wOo,_X,AOo,LOo,yOo,nb,M_e,xOo,$Oo,uX,kOo,SOo,ROo,sb,E_e,POo,BOo,bX,IOo,NOo,qOo,lb,C_e,jOo,DOo,vX,GOo,OOo,VOo,ib,w_e,XOo,zOo,FX,QOo,WOo,HOo,db,A_e,UOo,JOo,TX,YOo,KOo,ZOo,cb,L_e,eVo,oVo,MX,rVo,tVo,aVo,fb,y_e,nVo,sVo,EX,lVo,iVo,dVo,mb,x_e,cVo,fVo,CX,mVo,gVo,hVo,gb,$_e,pVo,_Vo,wX,uVo,bVo,vVo,hb,k_e,FVo,TVo,AX,MVo,EVo,CVo,pb,S_e,wVo,AVo,LX,LVo,yVo,xVo,_b,R_e,$Vo,kVo,yX,SVo,RVo,PVo,ub,P_e,BVo,IVo,xX,NVo,qVo,jVo,bb,B_e,DVo,GVo,$X,OVo,VVo,XVo,vb,I_e,zVo,QVo,kX,WVo,HVo,UVo,Fb,N_e,JVo,YVo,SX,KVo,ZVo,eXo,Tb,q_e,oXo,rXo,RX,tXo,aXo,nXo,Mb,j_e,sXo,lXo,PX,iXo,dXo,cXo,Eb,D_e,fXo,mXo,BX,gXo,hXo,pXo,Cb,G_e,_Xo,uXo,IX,bXo,vXo,FXo,wb,O_e,TXo,MXo,NX,EXo,CXo,wXo,Ab,V_e,AXo,LXo,qX,yXo,xXo,$Xo,Lb,X_e,kXo,SXo,jX,RXo,PXo,BXo,yb,z_e,IXo,NXo,DX,qXo,jXo,DXo,xb,Q_e,GXo,OXo,GX,VXo,XXo,zXo,$b,W_e,QXo,WXo,OX,HXo,UXo,JXo,kb,H_e,YXo,KXo,VX,ZXo,ezo,ozo,Sb,U_e,rzo,tzo,XX,azo,nzo,szo,Rb,J_e,lzo,izo,zX,dzo,czo,fzo,Pb,Y_e,mzo,gzo,QX,hzo,pzo,_zo,Bb,K_e,uzo,bzo,WX,vzo,Fzo,Tzo,Ib,Z_e,Mzo,Ezo,HX,Czo,wzo,Azo,Nb,eue,Lzo,yzo,UX,xzo,$zo,kzo,qb,oue,Szo,Rzo,JX,Pzo,Bzo,Izo,jb,rue,Nzo,qzo,YX,jzo,Dzo,Gzo,Db,tue,Ozo,Vzo,KX,Xzo,zzo,Qzo,Gb,aue,Wzo,Hzo,ZX,Uzo,Jzo,Yzo,Ob,nue,Kzo,Zzo,ez,eQo,oQo,rQo,Vb,sue,tQo,aQo,oz,nQo,sQo,lQo,Xb,iQo,lue,dQo,cQo,iue,fQo,mQo,zb,WXe,sd,Qb,due,my,gQo,cue,hQo,HXe,No,gy,pQo,ld,_Qo,rz,uQo,bQo,tz,vQo,FQo,TQo,hy,MQo,fue,EQo,CQo,wQo,ht,py,AQo,mue,LQo,yQo,id,xQo,gue,$Qo,kQo,az,SQo,RQo,PQo,Wb,BQo,to,_y,IQo,hue,NQo,qQo,Oa,jQo,pue,DQo,GQo,_ue,OQo,VQo,uue,XQo,zQo,QQo,Z,Hb,bue,WQo,HQo,nz,UQo,JQo,YQo,Ub,vue,KQo,ZQo,sz,eWo,oWo,rWo,Jb,Fue,tWo,aWo,lz,nWo,sWo,lWo,Yb,Tue,iWo,dWo,iz,cWo,fWo,mWo,Kb,Mue,gWo,hWo,dz,pWo,_Wo,uWo,Zb,Eue,bWo,vWo,cz,FWo,TWo,MWo,ev,Cue,EWo,CWo,fz,wWo,AWo,LWo,ov,wue,yWo,xWo,mz,$Wo,kWo,SWo,rv,Aue,RWo,PWo,gz,BWo,IWo,NWo,tv,Lue,qWo,jWo,hz,DWo,GWo,OWo,av,yue,VWo,XWo,pz,zWo,QWo,WWo,nv,xue,HWo,UWo,_z,JWo,YWo,KWo,sv,$ue,ZWo,eHo,uz,oHo,rHo,tHo,lv,kue,aHo,nHo,bz,sHo,lHo,iHo,iv,Sue,dHo,cHo,vz,fHo,mHo,gHo,dv,Rue,hHo,pHo,Fz,_Ho,uHo,bHo,cv,Pue,vHo,FHo,Tz,THo,MHo,EHo,fv,Bue,CHo,wHo,Mz,AHo,LHo,yHo,mv,Iue,xHo,$Ho,Ez,kHo,SHo,RHo,gv,Nue,PHo,BHo,Cz,IHo,NHo,qHo,hv,que,jHo,DHo,wz,GHo,OHo,VHo,pv,jue,XHo,zHo,Az,QHo,WHo,HHo,_v,Due,UHo,JHo,Lz,YHo,KHo,ZHo,uv,Gue,eUo,oUo,yz,rUo,tUo,aUo,bv,Oue,nUo,sUo,xz,lUo,iUo,dUo,vv,Vue,cUo,fUo,$z,mUo,gUo,hUo,Fv,Xue,pUo,_Uo,kz,uUo,bUo,vUo,Tv,zue,FUo,TUo,Sz,MUo,EUo,CUo,Mv,Que,wUo,AUo,Rz,LUo,yUo,xUo,Ev,Wue,$Uo,kUo,Pz,SUo,RUo,PUo,Cv,BUo,Hue,IUo,NUo,Uue,qUo,jUo,wv,UXe,dd,Av,Jue,uy,DUo,Yue,GUo,JXe,qo,by,OUo,cd,VUo,Bz,XUo,zUo,Iz,QUo,WUo,HUo,vy,UUo,Kue,JUo,YUo,KUo,pt,Fy,ZUo,Zue,eJo,oJo,fd,rJo,e4e,tJo,aJo,Nz,nJo,sJo,lJo,Lv,iJo,ao,Ty,dJo,o4e,cJo,fJo,Va,mJo,r4e,gJo,hJo,t4e,pJo,_Jo,a4e,uJo,bJo,vJo,jo,yv,n4e,FJo,TJo,qz,MJo,EJo,CJo,xv,s4e,wJo,AJo,jz,LJo,yJo,xJo,$v,l4e,$Jo,kJo,Dz,SJo,RJo,PJo,kv,i4e,BJo,IJo,Gz,NJo,qJo,jJo,Sv,d4e,DJo,GJo,Oz,OJo,VJo,XJo,Rv,c4e,zJo,QJo,Vz,WJo,HJo,UJo,Pv,JJo,f4e,YJo,KJo,m4e,ZJo,eYo,Bv,YXe,md,Iv,g4e,My,oYo,h4e,rYo,KXe,Do,Ey,tYo,gd,aYo,Xz,nYo,sYo,zz,lYo,iYo,dYo,Cy,cYo,p4e,fYo,mYo,gYo,_t,wy,hYo,_4e,pYo,_Yo,hd,uYo,u4e,bYo,vYo,Qz,FYo,TYo,MYo,Nv,EYo,no,Ay,CYo,b4e,wYo,AYo,Xa,LYo,v4e,yYo,xYo,F4e,$Yo,kYo,T4e,SYo,RYo,PYo,U,qv,M4e,BYo,IYo,Wz,NYo,qYo,jYo,jv,E4e,DYo,GYo,Hz,OYo,VYo,XYo,Dv,C4e,zYo,QYo,Uz,WYo,HYo,UYo,Gv,w4e,JYo,YYo,Jz,KYo,ZYo,eKo,Ov,A4e,oKo,rKo,Yz,tKo,aKo,nKo,Vv,L4e,sKo,lKo,Kz,iKo,dKo,cKo,Xv,y4e,fKo,mKo,Zz,gKo,hKo,pKo,zv,x4e,_Ko,uKo,eQ,bKo,vKo,FKo,Qv,$4e,TKo,MKo,oQ,EKo,CKo,wKo,Wv,k4e,AKo,LKo,rQ,yKo,xKo,$Ko,Hv,S4e,kKo,SKo,tQ,RKo,PKo,BKo,Uv,R4e,IKo,NKo,aQ,qKo,jKo,DKo,Jv,P4e,GKo,OKo,nQ,VKo,XKo,zKo,Yv,B4e,QKo,WKo,sQ,HKo,UKo,JKo,Kv,I4e,YKo,KKo,lQ,ZKo,eZo,oZo,Zv,N4e,rZo,tZo,iQ,aZo,nZo,sZo,eF,q4e,lZo,iZo,dQ,dZo,cZo,fZo,oF,j4e,mZo,gZo,cQ,hZo,pZo,_Zo,rF,D4e,uZo,bZo,fQ,vZo,FZo,TZo,tF,G4e,MZo,EZo,mQ,CZo,wZo,AZo,aF,O4e,LZo,yZo,gQ,xZo,$Zo,kZo,nF,V4e,SZo,RZo,hQ,PZo,BZo,IZo,sF,X4e,NZo,qZo,pQ,jZo,DZo,GZo,lF,z4e,OZo,VZo,_Q,XZo,zZo,QZo,iF,Q4e,WZo,HZo,uQ,UZo,JZo,YZo,dF,W4e,KZo,ZZo,bQ,eer,oer,rer,cF,H4e,ter,aer,vQ,ner,ser,ler,fF,U4e,ier,der,FQ,cer,fer,mer,mF,J4e,ger,her,TQ,per,_er,uer,gF,Y4e,ber,ver,MQ,Fer,Ter,Mer,hF,K4e,Eer,Cer,EQ,wer,Aer,Ler,pF,Z4e,yer,xer,CQ,$er,ker,Ser,_F,e2e,Rer,Per,wQ,Ber,Ier,Ner,uF,o2e,qer,jer,AQ,Der,Ger,Oer,bF,r2e,Ver,Xer,LQ,zer,Qer,Wer,vF,t2e,Her,Uer,yQ,Jer,Yer,Ker,FF,Zer,a2e,eor,oor,n2e,ror,tor,TF,ZXe,pd,MF,s2e,Ly,aor,l2e,nor,eze,Go,yy,sor,_d,lor,xQ,ior,dor,$Q,cor,mor,gor,xy,hor,i2e,por,_or,uor,ut,$y,bor,d2e,vor,For,ud,Tor,c2e,Mor,Eor,kQ,Cor,wor,Aor,EF,Lor,so,ky,yor,f2e,xor,$or,za,kor,m2e,Sor,Ror,g2e,Por,Bor,h2e,Ior,Nor,qor,V,CF,p2e,jor,Dor,SQ,Gor,Oor,Vor,wF,_2e,Xor,zor,RQ,Qor,Wor,Hor,AF,u2e,Uor,Jor,PQ,Yor,Kor,Zor,LF,b2e,err,orr,BQ,rrr,trr,arr,yF,v2e,nrr,srr,IQ,lrr,irr,drr,xF,F2e,crr,frr,NQ,mrr,grr,hrr,$F,T2e,prr,_rr,qQ,urr,brr,vrr,kF,M2e,Frr,Trr,jQ,Mrr,Err,Crr,SF,E2e,wrr,Arr,DQ,Lrr,yrr,xrr,RF,C2e,$rr,krr,GQ,Srr,Rrr,Prr,PF,w2e,Brr,Irr,OQ,Nrr,qrr,jrr,BF,A2e,Drr,Grr,VQ,Orr,Vrr,Xrr,IF,L2e,zrr,Qrr,XQ,Wrr,Hrr,Urr,NF,y2e,Jrr,Yrr,zQ,Krr,Zrr,etr,qF,x2e,otr,rtr,QQ,ttr,atr,ntr,jF,$2e,str,ltr,WQ,itr,dtr,ctr,DF,k2e,ftr,mtr,HQ,gtr,htr,ptr,GF,S2e,_tr,utr,UQ,btr,vtr,Ftr,OF,R2e,Ttr,Mtr,JQ,Etr,Ctr,wtr,VF,P2e,Atr,Ltr,YQ,ytr,xtr,$tr,XF,B2e,ktr,Str,KQ,Rtr,Ptr,Btr,zF,I2e,Itr,Ntr,ZQ,qtr,jtr,Dtr,QF,N2e,Gtr,Otr,eW,Vtr,Xtr,ztr,WF,q2e,Qtr,Wtr,oW,Htr,Utr,Jtr,HF,j2e,Ytr,Ktr,rW,Ztr,ear,oar,UF,D2e,rar,tar,tW,aar,nar,sar,JF,G2e,lar,iar,aW,dar,car,far,YF,O2e,mar,gar,nW,har,par,_ar,KF,V2e,uar,bar,sW,Far,Tar,Mar,ZF,X2e,Ear,Car,lW,war,Aar,Lar,eT,z2e,yar,xar,iW,$ar,kar,Sar,oT,Q2e,Rar,Par,dW,Bar,Iar,Nar,rT,W2e,qar,jar,cW,Dar,Gar,Oar,tT,H2e,Var,Xar,fW,zar,Qar,War,aT,U2e,Har,Uar,mW,Jar,Yar,Kar,nT,J2e,Zar,enr,gW,onr,rnr,tnr,sT,Y2e,anr,nnr,hW,snr,lnr,inr,lT,K2e,dnr,cnr,pW,fnr,mnr,gnr,iT,Z2e,hnr,pnr,_W,_nr,unr,bnr,dT,e1e,vnr,Fnr,uW,Tnr,Mnr,Enr,cT,o1e,Cnr,wnr,bW,Anr,Lnr,ynr,fT,r1e,xnr,$nr,vW,knr,Snr,Rnr,mT,Pnr,t1e,Bnr,Inr,a1e,Nnr,qnr,gT,oze,bd,hT,n1e,Sy,jnr,s1e,Dnr,rze,Oo,Ry,Gnr,vd,Onr,FW,Vnr,Xnr,TW,znr,Qnr,Wnr,Py,Hnr,l1e,Unr,Jnr,Ynr,bt,By,Knr,i1e,Znr,esr,Fd,osr,d1e,rsr,tsr,MW,asr,nsr,ssr,pT,lsr,lo,Iy,isr,c1e,dsr,csr,Qa,fsr,f1e,msr,gsr,m1e,hsr,psr,g1e,_sr,usr,bsr,h1e,_T,p1e,vsr,Fsr,EW,Tsr,Msr,Esr,uT,Csr,_1e,wsr,Asr,u1e,Lsr,ysr,bT,tze,Td,vT,b1e,Ny,xsr,v1e,$sr,aze,Vo,qy,ksr,Md,Ssr,CW,Rsr,Psr,wW,Bsr,Isr,Nsr,jy,qsr,F1e,jsr,Dsr,Gsr,vt,Dy,Osr,T1e,Vsr,Xsr,Ed,zsr,M1e,Qsr,Wsr,AW,Hsr,Usr,Jsr,FT,Ysr,io,Gy,Ksr,E1e,Zsr,elr,Wa,olr,C1e,rlr,tlr,w1e,alr,nlr,A1e,slr,llr,ilr,ve,TT,L1e,dlr,clr,LW,flr,mlr,glr,MT,y1e,hlr,plr,yW,_lr,ulr,blr,ET,x1e,vlr,Flr,xW,Tlr,Mlr,Elr,CT,$1e,Clr,wlr,$W,Alr,Llr,ylr,Us,k1e,xlr,$lr,kW,klr,Slr,SW,Rlr,Plr,Blr,wT,S1e,Ilr,Nlr,RW,qlr,jlr,Dlr,Js,R1e,Glr,Olr,PW,Vlr,Xlr,BW,zlr,Qlr,Wlr,AT,P1e,Hlr,Ulr,IW,Jlr,Ylr,Klr,Ft,B1e,Zlr,eir,NW,oir,rir,qW,tir,air,jW,nir,sir,lir,LT,I1e,iir,dir,DW,cir,fir,mir,yT,N1e,gir,hir,GW,pir,_ir,uir,xT,q1e,bir,vir,OW,Fir,Tir,Mir,$T,j1e,Eir,Cir,VW,wir,Air,Lir,kT,D1e,yir,xir,XW,$ir,kir,Sir,ST,G1e,Rir,Pir,zW,Bir,Iir,Nir,RT,O1e,qir,jir,QW,Dir,Gir,Oir,PT,Vir,V1e,Xir,zir,X1e,Qir,Wir,BT,nze,Cd,IT,z1e,Oy,Hir,Q1e,Uir,sze,Xo,Vy,Jir,wd,Yir,WW,Kir,Zir,HW,edr,odr,rdr,Xy,tdr,W1e,adr,ndr,sdr,Tt,zy,ldr,H1e,idr,ddr,Ad,cdr,U1e,fdr,mdr,UW,gdr,hdr,pdr,NT,_dr,co,Qy,udr,J1e,bdr,vdr,Ha,Fdr,Y1e,Tdr,Mdr,K1e,Edr,Cdr,Z1e,wdr,Adr,Ldr,ebe,qT,obe,ydr,xdr,JW,$dr,kdr,Sdr,jT,Rdr,rbe,Pdr,Bdr,tbe,Idr,Ndr,DT,lze,Ld,GT,abe,Wy,qdr,nbe,jdr,ize,zo,Hy,Ddr,yd,Gdr,YW,Odr,Vdr,KW,Xdr,zdr,Qdr,Uy,Wdr,sbe,Hdr,Udr,Jdr,Mt,Jy,Ydr,lbe,Kdr,Zdr,xd,ecr,ibe,ocr,rcr,ZW,tcr,acr,ncr,OT,scr,fo,Yy,lcr,dbe,icr,dcr,Ua,ccr,cbe,fcr,mcr,fbe,gcr,hcr,mbe,pcr,_cr,ucr,gbe,VT,hbe,bcr,vcr,eH,Fcr,Tcr,Mcr,XT,Ecr,pbe,Ccr,wcr,_be,Acr,Lcr,zT,dze,$d,QT,ube,Ky,ycr,bbe,xcr,cze,Qo,Zy,$cr,kd,kcr,oH,Scr,Rcr,rH,Pcr,Bcr,Icr,e9,Ncr,vbe,qcr,jcr,Dcr,Et,o9,Gcr,Fbe,Ocr,Vcr,Sd,Xcr,Tbe,zcr,Qcr,tH,Wcr,Hcr,Ucr,WT,Jcr,mo,r9,Ycr,Mbe,Kcr,Zcr,Ja,efr,Ebe,ofr,rfr,Cbe,tfr,afr,wbe,nfr,sfr,lfr,Pe,HT,Abe,ifr,dfr,aH,cfr,ffr,mfr,UT,Lbe,gfr,hfr,nH,pfr,_fr,ufr,JT,ybe,bfr,vfr,sH,Ffr,Tfr,Mfr,YT,xbe,Efr,Cfr,lH,wfr,Afr,Lfr,KT,$be,yfr,xfr,iH,$fr,kfr,Sfr,ZT,kbe,Rfr,Pfr,dH,Bfr,Ifr,Nfr,e8,Sbe,qfr,jfr,cH,Dfr,Gfr,Ofr,o8,Rbe,Vfr,Xfr,fH,zfr,Qfr,Wfr,r8,Pbe,Hfr,Ufr,mH,Jfr,Yfr,Kfr,t8,Zfr,Bbe,emr,omr,Ibe,rmr,tmr,a8,fze,Rd,n8,Nbe,t9,amr,qbe,nmr,mze,Wo,a9,smr,Pd,lmr,gH,imr,dmr,hH,cmr,fmr,mmr,n9,gmr,jbe,hmr,pmr,_mr,Ct,s9,umr,Dbe,bmr,vmr,Bd,Fmr,Gbe,Tmr,Mmr,pH,Emr,Cmr,wmr,s8,Amr,go,l9,Lmr,Obe,ymr,xmr,Ya,$mr,Vbe,kmr,Smr,Xbe,Rmr,Pmr,zbe,Bmr,Imr,Nmr,rt,l8,Qbe,qmr,jmr,_H,Dmr,Gmr,Omr,i8,Wbe,Vmr,Xmr,uH,zmr,Qmr,Wmr,d8,Hbe,Hmr,Umr,bH,Jmr,Ymr,Kmr,c8,Ube,Zmr,egr,vH,ogr,rgr,tgr,f8,Jbe,agr,ngr,FH,sgr,lgr,igr,m8,dgr,Ybe,cgr,fgr,Kbe,mgr,ggr,g8,gze,Id,h8,Zbe,i9,hgr,eve,pgr,hze,Ho,d9,_gr,Nd,ugr,TH,bgr,vgr,MH,Fgr,Tgr,Mgr,c9,Egr,ove,Cgr,wgr,Agr,wt,f9,Lgr,rve,ygr,xgr,qd,$gr,tve,kgr,Sgr,EH,Rgr,Pgr,Bgr,p8,Igr,ho,m9,Ngr,ave,qgr,jgr,Ka,Dgr,nve,Ggr,Ogr,sve,Vgr,Xgr,lve,zgr,Qgr,Wgr,Le,_8,ive,Hgr,Ugr,CH,Jgr,Ygr,Kgr,u8,dve,Zgr,ehr,wH,ohr,rhr,thr,b8,cve,ahr,nhr,AH,shr,lhr,ihr,v8,fve,dhr,chr,LH,fhr,mhr,ghr,F8,mve,hhr,phr,yH,_hr,uhr,bhr,T8,gve,vhr,Fhr,xH,Thr,Mhr,Ehr,M8,hve,Chr,whr,$H,Ahr,Lhr,yhr,E8,pve,xhr,$hr,kH,khr,Shr,Rhr,C8,_ve,Phr,Bhr,SH,Ihr,Nhr,qhr,w8,uve,jhr,Dhr,RH,Ghr,Ohr,Vhr,A8,Xhr,bve,zhr,Qhr,vve,Whr,Hhr,L8,pze,jd,y8,Fve,g9,Uhr,Tve,Jhr,_ze,Uo,h9,Yhr,Dd,Khr,PH,Zhr,epr,BH,opr,rpr,tpr,p9,apr,Mve,npr,spr,lpr,At,_9,ipr,Eve,dpr,cpr,Gd,fpr,Cve,mpr,gpr,IH,hpr,ppr,_pr,x8,upr,po,u9,bpr,wve,vpr,Fpr,Za,Tpr,Ave,Mpr,Epr,Lve,Cpr,wpr,yve,Apr,Lpr,ypr,b9,$8,xve,xpr,$pr,NH,kpr,Spr,Rpr,k8,$ve,Ppr,Bpr,qH,Ipr,Npr,qpr,S8,jpr,kve,Dpr,Gpr,Sve,Opr,Vpr,R8,uze,Od,P8,Rve,v9,Xpr,Pve,zpr,bze,Jo,F9,Qpr,Vd,Wpr,jH,Hpr,Upr,DH,Jpr,Ypr,Kpr,T9,Zpr,Bve,e_r,o_r,r_r,Lt,M9,t_r,Ive,a_r,n_r,Xd,s_r,Nve,l_r,i_r,GH,d_r,c_r,f_r,B8,m_r,_o,E9,g_r,qve,h_r,p_r,en,__r,jve,u_r,b_r,Dve,v_r,F_r,Gve,T_r,M_r,E_r,tt,I8,Ove,C_r,w_r,OH,A_r,L_r,y_r,N8,Vve,x_r,$_r,VH,k_r,S_r,R_r,q8,Xve,P_r,B_r,XH,I_r,N_r,q_r,j8,zve,j_r,D_r,zH,G_r,O_r,V_r,D8,Qve,X_r,z_r,QH,Q_r,W_r,H_r,G8,U_r,Wve,J_r,Y_r,Hve,K_r,Z_r,O8,vze,zd,V8,Uve,C9,eur,Jve,our,Fze,Yo,w9,rur,Qd,tur,WH,aur,nur,HH,sur,lur,iur,A9,dur,Yve,cur,fur,mur,yt,L9,gur,Kve,hur,pur,Wd,_ur,Zve,uur,bur,UH,vur,Fur,Tur,X8,Mur,uo,y9,Eur,eFe,Cur,wur,on,Aur,oFe,Lur,yur,rFe,xur,$ur,tFe,kur,Sur,Rur,Hd,z8,aFe,Pur,Bur,JH,Iur,Nur,qur,Q8,nFe,jur,Dur,YH,Gur,Our,Vur,W8,sFe,Xur,zur,KH,Qur,Wur,Hur,H8,Uur,lFe,Jur,Yur,iFe,Kur,Zur,U8,Tze,Ud,J8,dFe,x9,e4r,cFe,o4r,Mze,Ko,$9,r4r,Jd,t4r,ZH,a4r,n4r,eU,s4r,l4r,i4r,k9,d4r,fFe,c4r,f4r,m4r,xt,S9,g4r,mFe,h4r,p4r,Yd,_4r,gFe,u4r,b4r,oU,v4r,F4r,T4r,Y8,M4r,bo,R9,E4r,hFe,C4r,w4r,rn,A4r,pFe,L4r,y4r,_Fe,x4r,$4r,uFe,k4r,S4r,R4r,P9,K8,bFe,P4r,B4r,rU,I4r,N4r,q4r,Z8,vFe,j4r,D4r,tU,G4r,O4r,V4r,eM,X4r,FFe,z4r,Q4r,TFe,W4r,H4r,oM,Eze,Kd,rM,MFe,B9,U4r,EFe,J4r,Cze,Zo,I9,Y4r,Zd,K4r,aU,Z4r,e2r,nU,o2r,r2r,t2r,N9,a2r,CFe,n2r,s2r,l2r,$t,q9,i2r,wFe,d2r,c2r,ec,f2r,AFe,m2r,g2r,sU,h2r,p2r,_2r,tM,u2r,vo,j9,b2r,LFe,v2r,F2r,tn,T2r,yFe,M2r,E2r,xFe,C2r,w2r,$Fe,A2r,L2r,y2r,kFe,aM,SFe,x2r,$2r,lU,k2r,S2r,R2r,nM,P2r,RFe,B2r,I2r,PFe,N2r,q2r,sM,wze,oc,lM,BFe,D9,j2r,IFe,D2r,Aze,er,G9,G2r,rc,O2r,iU,V2r,X2r,dU,z2r,Q2r,W2r,O9,H2r,NFe,U2r,J2r,Y2r,kt,V9,K2r,qFe,Z2r,e1r,tc,o1r,jFe,r1r,t1r,cU,a1r,n1r,s1r,iM,l1r,Fo,X9,i1r,DFe,d1r,c1r,an,f1r,GFe,m1r,g1r,OFe,h1r,p1r,VFe,_1r,u1r,b1r,at,dM,XFe,v1r,F1r,fU,T1r,M1r,E1r,cM,zFe,C1r,w1r,mU,A1r,L1r,y1r,fM,QFe,x1r,$1r,gU,k1r,S1r,R1r,mM,WFe,P1r,B1r,hU,I1r,N1r,q1r,gM,HFe,j1r,D1r,pU,G1r,O1r,V1r,hM,X1r,UFe,z1r,Q1r,JFe,W1r,H1r,pM,Lze,ac,_M,YFe,z9,U1r,KFe,J1r,yze,or,Q9,Y1r,nc,K1r,_U,Z1r,ebr,uU,obr,rbr,tbr,W9,abr,ZFe,nbr,sbr,lbr,St,H9,ibr,eTe,dbr,cbr,sc,fbr,oTe,mbr,gbr,bU,hbr,pbr,_br,uM,ubr,To,U9,bbr,rTe,vbr,Fbr,nn,Tbr,tTe,Mbr,Ebr,aTe,Cbr,wbr,nTe,Abr,Lbr,ybr,sTe,bM,lTe,xbr,$br,vU,kbr,Sbr,Rbr,vM,Pbr,iTe,Bbr,Ibr,dTe,Nbr,qbr,FM,xze,lc,TM,cTe,J9,jbr,fTe,Dbr,$ze,rr,Y9,Gbr,ic,Obr,FU,Vbr,Xbr,TU,zbr,Qbr,Wbr,K9,Hbr,mTe,Ubr,Jbr,Ybr,Rt,Z9,Kbr,gTe,Zbr,evr,dc,ovr,hTe,rvr,tvr,MU,avr,nvr,svr,MM,lvr,$r,ex,ivr,pTe,dvr,cvr,sn,fvr,_Te,mvr,gvr,uTe,hvr,pvr,bTe,_vr,uvr,bvr,I,EM,vTe,vvr,Fvr,EU,Tvr,Mvr,Evr,CM,FTe,Cvr,wvr,CU,Avr,Lvr,yvr,wM,TTe,xvr,$vr,wU,kvr,Svr,Rvr,AM,MTe,Pvr,Bvr,AU,Ivr,Nvr,qvr,LM,ETe,jvr,Dvr,LU,Gvr,Ovr,Vvr,yM,CTe,Xvr,zvr,yU,Qvr,Wvr,Hvr,xM,wTe,Uvr,Jvr,xU,Yvr,Kvr,Zvr,$M,ATe,eFr,oFr,$U,rFr,tFr,aFr,kM,LTe,nFr,sFr,kU,lFr,iFr,dFr,SM,yTe,cFr,fFr,SU,mFr,gFr,hFr,RM,xTe,pFr,_Fr,RU,uFr,bFr,vFr,PM,$Te,FFr,TFr,PU,MFr,EFr,CFr,BM,kTe,wFr,AFr,BU,LFr,yFr,xFr,IM,STe,$Fr,kFr,IU,SFr,RFr,PFr,NM,RTe,BFr,IFr,NU,NFr,qFr,jFr,qM,PTe,DFr,GFr,qU,OFr,VFr,XFr,jM,BTe,zFr,QFr,jU,WFr,HFr,UFr,DM,ITe,JFr,YFr,DU,KFr,ZFr,eTr,Ys,NTe,oTr,rTr,GU,tTr,aTr,OU,nTr,sTr,lTr,GM,qTe,iTr,dTr,VU,cTr,fTr,mTr,OM,jTe,gTr,hTr,XU,pTr,_Tr,uTr,VM,DTe,bTr,vTr,zU,FTr,TTr,MTr,XM,GTe,ETr,CTr,QU,wTr,ATr,LTr,zM,OTe,yTr,xTr,WU,$Tr,kTr,STr,QM,VTe,RTr,PTr,HU,BTr,ITr,NTr,WM,XTe,qTr,jTr,UU,DTr,GTr,OTr,HM,zTe,VTr,XTr,JU,zTr,QTr,WTr,UM,QTe,HTr,UTr,YU,JTr,YTr,KTr,JM,WTe,ZTr,e8r,KU,o8r,r8r,t8r,YM,HTe,a8r,n8r,ZU,s8r,l8r,i8r,KM,UTe,d8r,c8r,eJ,f8r,m8r,g8r,ZM,JTe,h8r,p8r,oJ,_8r,u8r,b8r,eE,YTe,v8r,F8r,rJ,T8r,M8r,E8r,oE,KTe,C8r,w8r,tJ,A8r,L8r,y8r,rE,ZTe,x8r,$8r,aJ,k8r,S8r,R8r,tE,e8e,P8r,B8r,nJ,I8r,N8r,q8r,aE,o8e,j8r,D8r,sJ,G8r,O8r,V8r,nE,r8e,X8r,z8r,lJ,Q8r,W8r,H8r,sE,t8e,U8r,J8r,iJ,Y8r,K8r,Z8r,lE,a8e,eMr,oMr,dJ,rMr,tMr,aMr,iE,n8e,nMr,sMr,cJ,lMr,iMr,dMr,dE,s8e,cMr,fMr,fJ,mMr,gMr,hMr,cE,l8e,pMr,_Mr,mJ,uMr,bMr,vMr,fE,i8e,FMr,TMr,gJ,MMr,EMr,CMr,mE,d8e,wMr,AMr,hJ,LMr,yMr,xMr,gE,c8e,$Mr,kMr,pJ,SMr,RMr,PMr,hE,f8e,BMr,IMr,_J,NMr,qMr,jMr,pE,m8e,DMr,GMr,uJ,OMr,VMr,XMr,_E,g8e,zMr,QMr,bJ,WMr,HMr,UMr,uE,h8e,JMr,YMr,vJ,KMr,ZMr,eEr,bE,p8e,oEr,rEr,FJ,tEr,aEr,nEr,vE,kze,cc,FE,_8e,ox,sEr,u8e,lEr,Sze,tr,rx,iEr,fc,dEr,TJ,cEr,fEr,MJ,mEr,gEr,hEr,tx,pEr,b8e,_Er,uEr,bEr,Pt,ax,vEr,v8e,FEr,TEr,mc,MEr,F8e,EEr,CEr,EJ,wEr,AEr,LEr,TE,yEr,kr,nx,xEr,T8e,$Er,kEr,ln,SEr,M8e,REr,PEr,E8e,BEr,IEr,C8e,NEr,qEr,jEr,se,ME,w8e,DEr,GEr,CJ,OEr,VEr,XEr,EE,A8e,zEr,QEr,wJ,WEr,HEr,UEr,CE,L8e,JEr,YEr,AJ,KEr,ZEr,eCr,wE,y8e,oCr,rCr,LJ,tCr,aCr,nCr,AE,x8e,sCr,lCr,yJ,iCr,dCr,cCr,LE,$8e,fCr,mCr,xJ,gCr,hCr,pCr,yE,k8e,_Cr,uCr,$J,bCr,vCr,FCr,xE,S8e,TCr,MCr,kJ,ECr,CCr,wCr,$E,R8e,ACr,LCr,SJ,yCr,xCr,$Cr,kE,P8e,kCr,SCr,RJ,RCr,PCr,BCr,SE,B8e,ICr,NCr,PJ,qCr,jCr,DCr,RE,I8e,GCr,OCr,BJ,VCr,XCr,zCr,PE,N8e,QCr,WCr,IJ,HCr,UCr,JCr,BE,q8e,YCr,KCr,NJ,ZCr,e3r,o3r,IE,j8e,r3r,t3r,qJ,a3r,n3r,s3r,NE,D8e,l3r,i3r,jJ,d3r,c3r,f3r,qE,G8e,m3r,g3r,DJ,h3r,p3r,_3r,jE,O8e,u3r,b3r,GJ,v3r,F3r,T3r,DE,V8e,M3r,E3r,OJ,C3r,w3r,A3r,GE,X8e,L3r,y3r,VJ,x3r,$3r,k3r,OE,z8e,S3r,R3r,XJ,P3r,B3r,I3r,VE,Q8e,N3r,q3r,zJ,j3r,D3r,G3r,XE,W8e,O3r,V3r,QJ,X3r,z3r,Q3r,zE,Rze,gc,QE,H8e,sx,W3r,U8e,H3r,Pze,ar,lx,U3r,hc,J3r,WJ,Y3r,K3r,HJ,Z3r,e5r,o5r,ix,r5r,J8e,t5r,a5r,n5r,Bt,dx,s5r,Y8e,l5r,i5r,pc,d5r,K8e,c5r,f5r,UJ,m5r,g5r,h5r,WE,p5r,Sr,cx,_5r,Z8e,u5r,b5r,dn,v5r,eMe,F5r,T5r,oMe,M5r,E5r,rMe,C5r,w5r,A5r,Me,HE,tMe,L5r,y5r,JJ,x5r,$5r,k5r,UE,aMe,S5r,R5r,YJ,P5r,B5r,I5r,JE,nMe,N5r,q5r,KJ,j5r,D5r,G5r,YE,sMe,O5r,V5r,ZJ,X5r,z5r,Q5r,KE,lMe,W5r,H5r,eY,U5r,J5r,Y5r,ZE,iMe,K5r,Z5r,oY,e0r,o0r,r0r,eC,dMe,t0r,a0r,rY,n0r,s0r,l0r,oC,cMe,i0r,d0r,tY,c0r,f0r,m0r,rC,fMe,g0r,h0r,aY,p0r,_0r,u0r,tC,mMe,b0r,v0r,nY,F0r,T0r,M0r,aC,gMe,E0r,C0r,sY,w0r,A0r,L0r,nC,hMe,y0r,x0r,lY,$0r,k0r,S0r,sC,pMe,R0r,P0r,iY,B0r,I0r,N0r,lC,Bze,_c,iC,_Me,fx,q0r,uMe,j0r,Ize,nr,mx,D0r,uc,G0r,dY,O0r,V0r,cY,X0r,z0r,Q0r,gx,W0r,bMe,H0r,U0r,J0r,It,hx,Y0r,vMe,K0r,Z0r,bc,ewr,FMe,owr,rwr,fY,twr,awr,nwr,dC,swr,Rr,px,lwr,TMe,iwr,dwr,cn,cwr,MMe,fwr,mwr,EMe,gwr,hwr,CMe,pwr,_wr,uwr,Ve,cC,wMe,bwr,vwr,mY,Fwr,Twr,Mwr,fC,AMe,Ewr,Cwr,gY,wwr,Awr,Lwr,Ks,LMe,ywr,xwr,hY,$wr,kwr,pY,Swr,Rwr,Pwr,mC,yMe,Bwr,Iwr,_Y,Nwr,qwr,jwr,gC,xMe,Dwr,Gwr,uY,Owr,Vwr,Xwr,hC,$Me,zwr,Qwr,bY,Wwr,Hwr,Uwr,pC,kMe,Jwr,Ywr,vY,Kwr,Zwr,eAr,_C,SMe,oAr,rAr,FY,tAr,aAr,nAr,uC,Nze,vc,bC,RMe,_x,sAr,PMe,lAr,qze,sr,ux,iAr,Fc,dAr,TY,cAr,fAr,MY,mAr,gAr,hAr,bx,pAr,BMe,_Ar,uAr,bAr,Nt,vx,vAr,IMe,FAr,TAr,Tc,MAr,NMe,EAr,CAr,EY,wAr,AAr,LAr,vC,yAr,Pr,Fx,xAr,qMe,$Ar,kAr,fn,SAr,jMe,RAr,PAr,DMe,BAr,IAr,GMe,NAr,qAr,jAr,ie,FC,OMe,DAr,GAr,CY,OAr,VAr,XAr,TC,VMe,zAr,QAr,wY,WAr,HAr,UAr,MC,XMe,JAr,YAr,AY,KAr,ZAr,e6r,EC,zMe,o6r,r6r,LY,t6r,a6r,n6r,CC,QMe,s6r,l6r,yY,i6r,d6r,c6r,wC,WMe,f6r,m6r,xY,g6r,h6r,p6r,AC,HMe,_6r,u6r,$Y,b6r,v6r,F6r,LC,UMe,T6r,M6r,kY,E6r,C6r,w6r,yC,JMe,A6r,L6r,SY,y6r,x6r,$6r,xC,YMe,k6r,S6r,RY,R6r,P6r,B6r,$C,KMe,I6r,N6r,PY,q6r,j6r,D6r,kC,ZMe,G6r,O6r,BY,V6r,X6r,z6r,SC,eEe,Q6r,W6r,IY,H6r,U6r,J6r,RC,oEe,Y6r,K6r,NY,Z6r,e7r,o7r,PC,rEe,r7r,t7r,qY,a7r,n7r,s7r,BC,tEe,l7r,i7r,jY,d7r,c7r,f7r,IC,aEe,m7r,g7r,DY,h7r,p7r,_7r,NC,nEe,u7r,b7r,GY,v7r,F7r,T7r,qC,sEe,M7r,E7r,OY,C7r,w7r,A7r,jC,lEe,L7r,y7r,VY,x7r,$7r,k7r,DC,jze,Mc,GC,iEe,Tx,S7r,dEe,R7r,Dze,lr,Mx,P7r,Ec,B7r,XY,I7r,N7r,zY,q7r,j7r,D7r,Ex,G7r,cEe,O7r,V7r,X7r,qt,Cx,z7r,fEe,Q7r,W7r,Cc,H7r,mEe,U7r,J7r,QY,Y7r,K7r,Z7r,OC,eLr,Br,wx,oLr,gEe,rLr,tLr,mn,aLr,hEe,nLr,sLr,pEe,lLr,iLr,_Ee,dLr,cLr,fLr,ye,VC,uEe,mLr,gLr,WY,hLr,pLr,_Lr,XC,bEe,uLr,bLr,HY,vLr,FLr,TLr,zC,vEe,MLr,ELr,UY,CLr,wLr,ALr,QC,FEe,LLr,yLr,JY,xLr,$Lr,kLr,WC,TEe,SLr,RLr,YY,PLr,BLr,ILr,HC,MEe,NLr,qLr,KY,jLr,DLr,GLr,UC,EEe,OLr,VLr,ZY,XLr,zLr,QLr,JC,CEe,WLr,HLr,eK,ULr,JLr,YLr,YC,wEe,KLr,ZLr,oK,eyr,oyr,ryr,KC,AEe,tyr,ayr,rK,nyr,syr,lyr,ZC,Gze,wc,e3,LEe,Ax,iyr,yEe,dyr,Oze,ir,Lx,cyr,Ac,fyr,tK,myr,gyr,aK,hyr,pyr,_yr,yx,uyr,xEe,byr,vyr,Fyr,jt,xx,Tyr,$Ee,Myr,Eyr,Lc,Cyr,kEe,wyr,Ayr,nK,Lyr,yyr,xyr,o3,$yr,Ir,$x,kyr,SEe,Syr,Ryr,gn,Pyr,REe,Byr,Iyr,PEe,Nyr,qyr,BEe,jyr,Dyr,Gyr,te,r3,IEe,Oyr,Vyr,sK,Xyr,zyr,Qyr,t3,NEe,Wyr,Hyr,lK,Uyr,Jyr,Yyr,a3,qEe,Kyr,Zyr,iK,e9r,o9r,r9r,n3,jEe,t9r,a9r,dK,n9r,s9r,l9r,s3,DEe,i9r,d9r,cK,c9r,f9r,m9r,l3,GEe,g9r,h9r,fK,p9r,_9r,u9r,i3,OEe,b9r,v9r,mK,F9r,T9r,M9r,d3,VEe,E9r,C9r,gK,w9r,A9r,L9r,c3,XEe,y9r,x9r,hK,$9r,k9r,S9r,f3,zEe,R9r,P9r,pK,B9r,I9r,N9r,m3,QEe,q9r,j9r,_K,D9r,G9r,O9r,g3,WEe,V9r,X9r,uK,z9r,Q9r,W9r,h3,HEe,H9r,U9r,bK,J9r,Y9r,K9r,p3,UEe,Z9r,exr,vK,oxr,rxr,txr,_3,JEe,axr,nxr,FK,sxr,lxr,ixr,u3,YEe,dxr,cxr,TK,fxr,mxr,gxr,b3,KEe,hxr,pxr,MK,_xr,uxr,bxr,v3,ZEe,vxr,Fxr,EK,Txr,Mxr,Exr,F3,eCe,Cxr,wxr,CK,Axr,Lxr,yxr,T3,oCe,xxr,$xr,wK,kxr,Sxr,Rxr,M3,rCe,Pxr,Bxr,AK,Ixr,Nxr,qxr,E3,tCe,jxr,Dxr,LK,Gxr,Oxr,Vxr,C3,aCe,Xxr,zxr,yK,Qxr,Wxr,Hxr,w3,nCe,Uxr,Jxr,xK,Yxr,Kxr,Zxr,A3,sCe,e$r,o$r,$K,r$r,t$r,a$r,L3,lCe,n$r,s$r,kK,l$r,i$r,d$r,y3,Vze,yc,x3,iCe,kx,c$r,dCe,f$r,Xze,dr,Sx,m$r,xc,g$r,SK,h$r,p$r,RK,_$r,u$r,b$r,Rx,v$r,cCe,F$r,T$r,M$r,Dt,Px,E$r,fCe,C$r,w$r,$c,A$r,mCe,L$r,y$r,PK,x$r,$$r,k$r,$3,S$r,Nr,Bx,R$r,gCe,P$r,B$r,hn,I$r,hCe,N$r,q$r,pCe,j$r,D$r,_Ce,G$r,O$r,V$r,ue,k3,uCe,X$r,z$r,BK,Q$r,W$r,H$r,S3,bCe,U$r,J$r,IK,Y$r,K$r,Z$r,R3,vCe,ekr,okr,NK,rkr,tkr,akr,P3,FCe,nkr,skr,qK,lkr,ikr,dkr,B3,TCe,ckr,fkr,jK,mkr,gkr,hkr,I3,MCe,pkr,_kr,DK,ukr,bkr,vkr,N3,ECe,Fkr,Tkr,GK,Mkr,Ekr,Ckr,q3,CCe,wkr,Akr,OK,Lkr,ykr,xkr,j3,wCe,$kr,kkr,VK,Skr,Rkr,Pkr,D3,ACe,Bkr,Ikr,XK,Nkr,qkr,jkr,G3,LCe,Dkr,Gkr,zK,Okr,Vkr,Xkr,O3,yCe,zkr,Qkr,QK,Wkr,Hkr,Ukr,V3,xCe,Jkr,Ykr,WK,Kkr,Zkr,eSr,X3,$Ce,oSr,rSr,HK,tSr,aSr,nSr,z3,kCe,sSr,lSr,UK,iSr,dSr,cSr,Q3,SCe,fSr,mSr,JK,gSr,hSr,pSr,W3,RCe,_Sr,uSr,YK,bSr,vSr,FSr,H3,zze,kc,U3,PCe,Ix,TSr,BCe,MSr,Qze,cr,Nx,ESr,Sc,CSr,KK,wSr,ASr,ZK,LSr,ySr,xSr,qx,$Sr,ICe,kSr,SSr,RSr,Gt,jx,PSr,NCe,BSr,ISr,Rc,NSr,qCe,qSr,jSr,eZ,DSr,GSr,OSr,J3,VSr,qr,Dx,XSr,jCe,zSr,QSr,pn,WSr,DCe,HSr,USr,GCe,JSr,YSr,OCe,KSr,ZSr,eRr,Gx,Y3,VCe,oRr,rRr,oZ,tRr,aRr,nRr,K3,XCe,sRr,lRr,rZ,iRr,dRr,cRr,Z3,Wze,Pc,e5,zCe,Ox,fRr,QCe,mRr,Hze,fr,Vx,gRr,Bc,hRr,tZ,pRr,_Rr,aZ,uRr,bRr,vRr,Xx,FRr,WCe,TRr,MRr,ERr,Ot,zx,CRr,HCe,wRr,ARr,Ic,LRr,UCe,yRr,xRr,nZ,$Rr,kRr,SRr,o5,RRr,jr,Qx,PRr,JCe,BRr,IRr,_n,NRr,YCe,qRr,jRr,KCe,DRr,GRr,ZCe,ORr,VRr,XRr,e3e,r5,o3e,zRr,QRr,sZ,WRr,HRr,URr,t5,Uze,Nc,a5,r3e,Wx,JRr,t3e,YRr,Jze,mr,Hx,KRr,qc,ZRr,lZ,ePr,oPr,iZ,rPr,tPr,aPr,Ux,nPr,a3e,sPr,lPr,iPr,Vt,Jx,dPr,n3e,cPr,fPr,jc,mPr,s3e,gPr,hPr,dZ,pPr,_Pr,uPr,n5,bPr,Dr,Yx,vPr,l3e,FPr,TPr,un,MPr,i3e,EPr,CPr,d3e,wPr,APr,c3e,LPr,yPr,xPr,de,s5,f3e,$Pr,kPr,cZ,SPr,RPr,PPr,l5,m3e,BPr,IPr,fZ,NPr,qPr,jPr,i5,g3e,DPr,GPr,mZ,OPr,VPr,XPr,d5,h3e,zPr,QPr,gZ,WPr,HPr,UPr,c5,p3e,JPr,YPr,hZ,KPr,ZPr,eBr,f5,_3e,oBr,rBr,pZ,tBr,aBr,nBr,m5,u3e,sBr,lBr,_Z,iBr,dBr,cBr,g5,b3e,fBr,mBr,uZ,gBr,hBr,pBr,h5,v3e,_Br,uBr,bZ,bBr,vBr,FBr,p5,F3e,TBr,MBr,vZ,EBr,CBr,wBr,_5,T3e,ABr,LBr,FZ,yBr,xBr,$Br,u5,M3e,kBr,SBr,TZ,RBr,PBr,BBr,b5,E3e,IBr,NBr,MZ,qBr,jBr,DBr,v5,C3e,GBr,OBr,EZ,VBr,XBr,zBr,F5,w3e,QBr,WBr,CZ,HBr,UBr,JBr,T5,A3e,YBr,KBr,wZ,ZBr,eIr,oIr,M5,L3e,rIr,tIr,AZ,aIr,nIr,sIr,E5,y3e,lIr,iIr,LZ,dIr,cIr,fIr,C5,x3e,mIr,gIr,yZ,hIr,pIr,_Ir,w5,$3e,uIr,bIr,xZ,vIr,FIr,TIr,A5,Yze,Dc,L5,k3e,Kx,MIr,S3e,EIr,Kze,gr,Zx,CIr,Gc,wIr,$Z,AIr,LIr,kZ,yIr,xIr,$Ir,e$,kIr,R3e,SIr,RIr,PIr,Xt,o$,BIr,P3e,IIr,NIr,Oc,qIr,B3e,jIr,DIr,SZ,GIr,OIr,VIr,y5,XIr,Gr,r$,zIr,I3e,QIr,WIr,bn,HIr,N3e,UIr,JIr,q3e,YIr,KIr,j3e,ZIr,eNr,oNr,ce,x5,D3e,rNr,tNr,RZ,aNr,nNr,sNr,$5,G3e,lNr,iNr,PZ,dNr,cNr,fNr,k5,O3e,mNr,gNr,BZ,hNr,pNr,_Nr,S5,V3e,uNr,bNr,IZ,vNr,FNr,TNr,R5,X3e,MNr,ENr,NZ,CNr,wNr,ANr,P5,z3e,LNr,yNr,qZ,xNr,$Nr,kNr,B5,Q3e,SNr,RNr,jZ,PNr,BNr,INr,I5,W3e,NNr,qNr,DZ,jNr,DNr,GNr,N5,H3e,ONr,VNr,GZ,XNr,zNr,QNr,q5,U3e,WNr,HNr,OZ,UNr,JNr,YNr,j5,J3e,KNr,ZNr,VZ,eqr,oqr,rqr,D5,Y3e,tqr,aqr,XZ,nqr,sqr,lqr,G5,K3e,iqr,dqr,zZ,cqr,fqr,mqr,O5,Z3e,gqr,hqr,QZ,pqr,_qr,uqr,V5,e5e,bqr,vqr,WZ,Fqr,Tqr,Mqr,X5,o5e,Eqr,Cqr,HZ,wqr,Aqr,Lqr,z5,r5e,yqr,xqr,UZ,$qr,kqr,Sqr,Q5,t5e,Rqr,Pqr,JZ,Bqr,Iqr,Nqr,W5,a5e,qqr,jqr,YZ,Dqr,Gqr,Oqr,H5,n5e,Vqr,Xqr,KZ,zqr,Qqr,Wqr,U5,Zze,Vc,J5,s5e,t$,Hqr,l5e,Uqr,eQe,hr,a$,Jqr,Xc,Yqr,ZZ,Kqr,Zqr,eee,ejr,ojr,rjr,n$,tjr,i5e,ajr,njr,sjr,zt,s$,ljr,d5e,ijr,djr,zc,cjr,c5e,fjr,mjr,oee,gjr,hjr,pjr,Y5,_jr,Or,l$,ujr,f5e,bjr,vjr,vn,Fjr,m5e,Tjr,Mjr,g5e,Ejr,Cjr,h5e,wjr,Ajr,Ljr,p5e,K5,_5e,yjr,xjr,ree,$jr,kjr,Sjr,Z5,oQe,Qc,e0,u5e,i$,Rjr,b5e,Pjr,rQe,pr,d$,Bjr,Wc,Ijr,tee,Njr,qjr,aee,jjr,Djr,Gjr,c$,Ojr,v5e,Vjr,Xjr,zjr,Qt,f$,Qjr,F5e,Wjr,Hjr,Hc,Ujr,T5e,Jjr,Yjr,nee,Kjr,Zjr,eDr,o0,oDr,Vr,m$,rDr,M5e,tDr,aDr,Fn,nDr,E5e,sDr,lDr,C5e,iDr,dDr,w5e,cDr,fDr,mDr,A5e,r0,L5e,gDr,hDr,see,pDr,_Dr,uDr,t0,tQe,Uc,a0,y5e,g$,bDr,x5e,vDr,aQe,_r,h$,FDr,Jc,TDr,lee,MDr,EDr,iee,CDr,wDr,ADr,p$,LDr,$5e,yDr,xDr,$Dr,Wt,_$,kDr,k5e,SDr,RDr,Yc,PDr,S5e,BDr,IDr,dee,NDr,qDr,jDr,n0,DDr,Xr,u$,GDr,R5e,ODr,VDr,Tn,XDr,P5e,zDr,QDr,B5e,WDr,HDr,I5e,UDr,JDr,YDr,oe,s0,N5e,KDr,ZDr,cee,eGr,oGr,rGr,l0,q5e,tGr,aGr,fee,nGr,sGr,lGr,i0,j5e,iGr,dGr,mee,cGr,fGr,mGr,d0,D5e,gGr,hGr,gee,pGr,_Gr,uGr,c0,G5e,bGr,vGr,hee,FGr,TGr,MGr,f0,O5e,EGr,CGr,pee,wGr,AGr,LGr,m0,V5e,yGr,xGr,_ee,$Gr,kGr,SGr,g0,X5e,RGr,PGr,uee,BGr,IGr,NGr,h0,z5e,qGr,jGr,bee,DGr,GGr,OGr,p0,Q5e,VGr,XGr,vee,zGr,QGr,WGr,_0,W5e,HGr,UGr,Fee,JGr,YGr,KGr,u0,H5e,ZGr,eOr,Tee,oOr,rOr,tOr,b0,U5e,aOr,nOr,Mee,sOr,lOr,iOr,v0,J5e,dOr,cOr,Eee,fOr,mOr,gOr,F0,Y5e,hOr,pOr,Cee,_Or,uOr,bOr,T0,K5e,vOr,FOr,wee,TOr,MOr,EOr,M0,Z5e,COr,wOr,Aee,AOr,LOr,yOr,E0,e0e,xOr,$Or,Lee,kOr,SOr,ROr,C0,o0e,POr,BOr,yee,IOr,NOr,qOr,w0,r0e,jOr,DOr,xee,GOr,OOr,VOr,A0,t0e,XOr,zOr,$ee,QOr,WOr,HOr,L0,a0e,UOr,JOr,kee,YOr,KOr,ZOr,y0,n0e,eVr,oVr,See,rVr,tVr,aVr,x0,s0e,nVr,sVr,Ree,lVr,iVr,dVr,$0,l0e,cVr,fVr,Pee,mVr,gVr,hVr,k0,i0e,pVr,_Vr,Bee,uVr,bVr,vVr,S0,d0e,FVr,TVr,Iee,MVr,EVr,CVr,R0,nQe,Kc,P0,c0e,b$,wVr,f0e,AVr,sQe,ur,v$,LVr,Zc,yVr,Nee,xVr,$Vr,qee,kVr,SVr,RVr,F$,PVr,m0e,BVr,IVr,NVr,Ht,T$,qVr,g0e,jVr,DVr,ef,GVr,h0e,OVr,VVr,jee,XVr,zVr,QVr,B0,WVr,zr,M$,HVr,p0e,UVr,JVr,Mn,YVr,_0e,KVr,ZVr,u0e,eXr,oXr,b0e,rXr,tXr,aXr,xe,I0,v0e,nXr,sXr,Dee,lXr,iXr,dXr,N0,F0e,cXr,fXr,Gee,mXr,gXr,hXr,q0,T0e,pXr,_Xr,Oee,uXr,bXr,vXr,j0,M0e,FXr,TXr,Vee,MXr,EXr,CXr,D0,E0e,wXr,AXr,Xee,LXr,yXr,xXr,G0,C0e,$Xr,kXr,zee,SXr,RXr,PXr,O0,w0e,BXr,IXr,Qee,NXr,qXr,jXr,V0,A0e,DXr,GXr,Wee,OXr,VXr,XXr,X0,L0e,zXr,QXr,Hee,WXr,HXr,UXr,z0,y0e,JXr,YXr,Uee,KXr,ZXr,ezr,Q0,lQe,of,W0,x0e,E$,ozr,$0e,rzr,iQe,br,C$,tzr,rf,azr,Jee,nzr,szr,Yee,lzr,izr,dzr,w$,czr,k0e,fzr,mzr,gzr,Ut,A$,hzr,S0e,pzr,_zr,tf,uzr,R0e,bzr,vzr,Kee,Fzr,Tzr,Mzr,H0,Ezr,Qr,L$,Czr,P0e,wzr,Azr,En,Lzr,B0e,yzr,xzr,I0e,$zr,kzr,N0e,Szr,Rzr,Pzr,Ee,U0,q0e,Bzr,Izr,Zee,Nzr,qzr,jzr,J0,j0e,Dzr,Gzr,eoe,Ozr,Vzr,Xzr,Y0,D0e,zzr,Qzr,ooe,Wzr,Hzr,Uzr,K0,G0e,Jzr,Yzr,roe,Kzr,Zzr,eQr,Z0,O0e,oQr,rQr,toe,tQr,aQr,nQr,ew,V0e,sQr,lQr,aoe,iQr,dQr,cQr,ow,X0e,fQr,mQr,noe,gQr,hQr,pQr,rw,z0e,_Qr,uQr,soe,bQr,vQr,FQr,tw,Q0e,TQr,MQr,loe,EQr,CQr,wQr,aw,W0e,AQr,LQr,ioe,yQr,xQr,$Qr,nw,H0e,kQr,SQr,doe,RQr,PQr,BQr,sw,U0e,IQr,NQr,coe,qQr,jQr,DQr,lw,J0e,GQr,OQr,foe,VQr,XQr,zQr,iw,dQe,af,dw,Y0e,y$,QQr,K0e,WQr,cQe,vr,x$,HQr,nf,UQr,moe,JQr,YQr,goe,KQr,ZQr,eWr,$$,oWr,Z0e,rWr,tWr,aWr,Jt,k$,nWr,ewe,sWr,lWr,sf,iWr,owe,dWr,cWr,hoe,fWr,mWr,gWr,cw,hWr,Wr,S$,pWr,rwe,_Wr,uWr,Cn,bWr,twe,vWr,FWr,awe,TWr,MWr,nwe,EWr,CWr,wWr,$e,fw,swe,AWr,LWr,poe,yWr,xWr,$Wr,mw,lwe,kWr,SWr,_oe,RWr,PWr,BWr,gw,iwe,IWr,NWr,uoe,qWr,jWr,DWr,hw,dwe,GWr,OWr,boe,VWr,XWr,zWr,pw,cwe,QWr,WWr,voe,HWr,UWr,JWr,_w,fwe,YWr,KWr,Foe,ZWr,eHr,oHr,uw,mwe,rHr,tHr,Toe,aHr,nHr,sHr,bw,gwe,lHr,iHr,Moe,dHr,cHr,fHr,vw,hwe,mHr,gHr,Eoe,hHr,pHr,_Hr,Fw,pwe,uHr,bHr,Coe,vHr,FHr,THr,Tw,fQe,lf,Mw,_we,R$,MHr,uwe,EHr,mQe,Fr,P$,CHr,df,wHr,woe,AHr,LHr,Aoe,yHr,xHr,$Hr,B$,kHr,bwe,SHr,RHr,PHr,Yt,I$,BHr,vwe,IHr,NHr,cf,qHr,Fwe,jHr,DHr,Loe,GHr,OHr,VHr,Ew,XHr,Hr,N$,zHr,Twe,QHr,WHr,wn,HHr,Mwe,UHr,JHr,Ewe,YHr,KHr,Cwe,ZHr,eUr,oUr,ke,Cw,wwe,rUr,tUr,yoe,aUr,nUr,sUr,ww,Awe,lUr,iUr,xoe,dUr,cUr,fUr,Aw,Lwe,mUr,gUr,$oe,hUr,pUr,_Ur,Lw,ywe,uUr,bUr,koe,vUr,FUr,TUr,yw,xwe,MUr,EUr,Soe,CUr,wUr,AUr,xw,$we,LUr,yUr,Roe,xUr,$Ur,kUr,$w,kwe,SUr,RUr,Poe,PUr,BUr,IUr,kw,Swe,NUr,qUr,Boe,jUr,DUr,GUr,Sw,Rwe,OUr,VUr,Ioe,XUr,zUr,QUr,Rw,Pwe,WUr,HUr,Noe,UUr,JUr,YUr,Pw,gQe,ff,Bw,Bwe,q$,KUr,Iwe,ZUr,hQe,Tr,j$,eJr,mf,oJr,qoe,rJr,tJr,joe,aJr,nJr,sJr,D$,lJr,Nwe,iJr,dJr,cJr,Kt,G$,fJr,qwe,mJr,gJr,gf,hJr,jwe,pJr,_Jr,Doe,uJr,bJr,vJr,Iw,FJr,Ur,O$,TJr,Dwe,MJr,EJr,An,CJr,Gwe,wJr,AJr,Owe,LJr,yJr,Vwe,xJr,$Jr,kJr,Se,Nw,Xwe,SJr,RJr,Goe,PJr,BJr,IJr,qw,zwe,NJr,qJr,Ooe,jJr,DJr,GJr,jw,Qwe,OJr,VJr,Voe,XJr,zJr,QJr,Dw,Wwe,WJr,HJr,Xoe,UJr,JJr,YJr,Gw,Hwe,KJr,ZJr,zoe,eYr,oYr,rYr,Ow,Uwe,tYr,aYr,Qoe,nYr,sYr,lYr,Vw,Jwe,iYr,dYr,Woe,cYr,fYr,mYr,Xw,Ywe,gYr,hYr,Hoe,pYr,_Yr,uYr,zw,Kwe,bYr,vYr,Uoe,FYr,TYr,MYr,Qw,Zwe,EYr,CYr,Joe,wYr,AYr,LYr,Ww,pQe,hf,Hw,eAe,V$,yYr,oAe,xYr,_Qe,Mr,X$,$Yr,pf,kYr,Yoe,SYr,RYr,Koe,PYr,BYr,IYr,z$,NYr,rAe,qYr,jYr,DYr,Zt,Q$,GYr,tAe,OYr,VYr,_f,XYr,aAe,zYr,QYr,Zoe,WYr,HYr,UYr,Uw,JYr,Jr,W$,YYr,nAe,KYr,ZYr,Ln,eKr,sAe,oKr,rKr,lAe,tKr,aKr,iAe,nKr,sKr,lKr,Re,Jw,dAe,iKr,dKr,ere,cKr,fKr,mKr,Yw,cAe,gKr,hKr,ore,pKr,_Kr,uKr,Kw,fAe,bKr,vKr,rre,FKr,TKr,MKr,Zw,mAe,EKr,CKr,tre,wKr,AKr,LKr,eA,gAe,yKr,xKr,are,$Kr,kKr,SKr,oA,hAe,RKr,PKr,nre,BKr,IKr,NKr,rA,pAe,qKr,jKr,sre,DKr,GKr,OKr,tA,_Ae,VKr,XKr,lre,zKr,QKr,WKr,aA,uAe,HKr,UKr,ire,JKr,YKr,KKr,nA,bAe,ZKr,eZr,dre,oZr,rZr,tZr,sA,uQe,uf,lA,vAe,H$,aZr,FAe,nZr,bQe,Er,U$,sZr,bf,lZr,cre,iZr,dZr,fre,cZr,fZr,mZr,J$,gZr,TAe,hZr,pZr,_Zr,ea,Y$,uZr,MAe,bZr,vZr,vf,FZr,EAe,TZr,MZr,mre,EZr,CZr,wZr,iA,AZr,Yr,K$,LZr,CAe,yZr,xZr,yn,$Zr,wAe,kZr,SZr,AAe,RZr,PZr,LAe,BZr,IZr,NZr,Xe,dA,yAe,qZr,jZr,gre,DZr,GZr,OZr,cA,xAe,VZr,XZr,hre,zZr,QZr,WZr,fA,$Ae,HZr,UZr,pre,JZr,YZr,KZr,mA,kAe,ZZr,eet,_re,oet,ret,tet,gA,SAe,aet,net,ure,set,iet,det,hA,RAe,cet,fet,bre,met,get,het,pA,PAe,pet,_et,vre,uet,bet,vet,_A,BAe,Fet,Tet,Fre,Met,Eet,Cet,uA,vQe,Ff,bA,IAe,Z$,wet,NAe,Aet,FQe,Cr,ek,Let,Tf,yet,Tre,xet,$et,Mre,ket,Set,Ret,ok,Pet,qAe,Bet,Iet,Net,oa,rk,qet,jAe,jet,Det,Mf,Get,DAe,Oet,Vet,Ere,Xet,zet,Qet,vA,Wet,Kr,tk,Het,GAe,Uet,Jet,xn,Yet,OAe,Ket,Zet,VAe,eot,oot,XAe,rot,tot,aot,ze,FA,zAe,not,sot,Cre,lot,iot,dot,TA,QAe,cot,fot,wre,mot,got,hot,MA,WAe,pot,_ot,Are,uot,bot,vot,EA,HAe,Fot,Tot,Lre,Mot,Eot,Cot,CA,UAe,wot,Aot,yre,Lot,yot,xot,wA,JAe,$ot,kot,xre,Sot,Rot,Pot,AA,YAe,Bot,Iot,$re,Not,qot,jot,LA,KAe,Dot,Got,kre,Oot,Vot,Xot,yA,TQe,Ef,xA,ZAe,ak,zot,e6e,Qot,MQe,wr,nk,Wot,Cf,Hot,Sre,Uot,Jot,Rre,Yot,Kot,Zot,sk,ert,o6e,ort,rrt,trt,ra,lk,art,r6e,nrt,srt,wf,lrt,t6e,irt,drt,Pre,crt,frt,mrt,$A,grt,Zr,ik,hrt,a6e,prt,_rt,$n,urt,n6e,brt,vrt,s6e,Frt,Trt,l6e,Mrt,Ert,Crt,i6e,kA,d6e,wrt,Art,Bre,Lrt,yrt,xrt,SA,EQe,Af,RA,c6e,dk,$rt,f6e,krt,CQe,Ar,ck,Srt,Lf,Rrt,Ire,Prt,Brt,Nre,Irt,Nrt,qrt,fk,jrt,m6e,Drt,Grt,Ort,ta,mk,Vrt,g6e,Xrt,zrt,yf,Qrt,h6e,Wrt,Hrt,qre,Urt,Jrt,Yrt,PA,Krt,et,gk,Zrt,p6e,ett,ott,kn,rtt,_6e,ttt,att,u6e,ntt,stt,b6e,ltt,itt,dtt,hk,BA,v6e,ctt,ftt,jre,mtt,gtt,htt,IA,F6e,ptt,_tt,Dre,utt,btt,vtt,NA,wQe,xf,qA,T6e,pk,Ftt,M6e,Ttt,AQe,Lr,_k,Mtt,$f,Ett,Gre,Ctt,wtt,Ore,Att,Ltt,ytt,uk,xtt,E6e,$tt,ktt,Stt,aa,bk,Rtt,C6e,Ptt,Btt,kf,Itt,w6e,Ntt,qtt,Vre,jtt,Dtt,Gtt,jA,Ott,ot,vk,Vtt,A6e,Xtt,ztt,Sn,Qtt,L6e,Wtt,Htt,y6e,Utt,Jtt,x6e,Ytt,Ktt,Ztt,$6e,DA,k6e,eat,oat,Xre,rat,tat,aat,GA,LQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),cL=new re({}),fL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Df=new nat({props:{warning:!0,$$slots:{default:[YWt]},$$scope:{ctx:$}}}),mL=new re({}),gL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/configuration_auto.py#L611"}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/configuration_auto.py#L634"}}),Kg=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),uL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/configuration_auto.py#L757"}}),bL=new re({}),vL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/tokenization_auto.py#L410"}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18244/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/tokenization_auto.py#L424"}}),Ph=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),EL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/tokenization_auto.py#L623"}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18244/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),up=new nat({props:{$$slots:{default:[eHt]},$$scope:{ctx:$}}}),bp=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),xL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),$L=new re({}),kL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/processing_auto.py#L89"}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/processing_auto.py#L103"}}),jp=new nat({props:{$$slots:{default:[rHt]},$$scope:{ctx:$}}}),Dp=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),BL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/processing_auto.py#L256"}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L786"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),Vp=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),Hu=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L793"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),Ju=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),QL=new re({}),WL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L808"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),R2=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),YL=new re({}),KL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L815"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),B2=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),T1=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),ry=new re({}),ty=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L822"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),E1=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),X1=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),ly=new re({}),iy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L831"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),Q1=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L876"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),Wb=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),uy=new re({}),by=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L883"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),Bv=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L869"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),Nv=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L840"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L847"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L892"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18244/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),BT=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L931"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L858"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),zT=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L938"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),a8=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),t9=new re({}),a9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L961"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),s8=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),g8=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),i9=new re({}),d9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L945"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),p8=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),L8=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),g9=new re({}),h9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L952"}}),_9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),x8=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),R8=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L970"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),B8=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),O8=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L977"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),X8=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),U8=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),x9=new re({}),$9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L924"}}),S9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),Y8=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),B9=new re({}),I9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L899"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),D9=new re({}),G9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L906"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),z9=new re({}),Q9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_auto.py#L915"}}),H9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),WE=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18244/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),OC=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),ZC=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),o5=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),Wx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[bUt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vUt]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[FUt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[TUt]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),s$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[MUt]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[EUt]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),f$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),o0=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[CUt]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[LUt]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[yUt]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),Q0=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xUt]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),H0=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[$Ut]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[kUt]},$$scope:{ctx:$}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[SUt]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),Tw=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[RUt]},$$scope:{ctx:$}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),Ew=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[PUt]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),Pw=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[BUt]},$$scope:{ctx:$}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),Iw=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[IUt]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[NUt]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qUt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),sA=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[jUt]},$$scope:{ctx:$}}}),H$=new re({}),U$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),iA=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[DUt]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),uA=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[GUt]},$$scope:{ctx:$}}}),Z$=new re({}),ek=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),vA=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[OUt]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),yA=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[VUt]},$$scope:{ctx:$}}}),ak=new re({}),nk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),lk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),$A=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[XUt]},$$scope:{ctx:$}}}),ik=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),SA=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[zUt]},$$scope:{ctx:$}}}),dk=new re({}),ck=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),mk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),PA=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[QUt]},$$scope:{ctx:$}}}),gk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),NA=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[WUt]},$$scope:{ctx:$}}}),pk=new re({}),_k=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),bk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18244/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18244/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L389"}}),jA=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[HUt]},$$scope:{ctx:$}}}),vk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18244/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18244/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18244/src/transformers/models/auto/auto_factory.py#L417"}}),GA=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[UUt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),wo=a("span"),yi=o("Auto Classes"),Bf=l(),lt=a("p"),xi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=a("code"),sL=o("from_pretrained()"),If=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),ki=o("Instantiating one of "),Pn=a("a"),lL=o("AutoConfig"),Bn=o(", "),In=a("a"),iL=o("AutoModel"),Si=o(`, and
`),Nn=a("a"),dL=o("AutoTokenizer"),Ri=o(" will directly create a class of the relevant architecture. For instance"),Nf=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),OS=o("will create a model that is an instance of "),Pi=a("a"),VS=o("BertModel"),XS=o("."),Ao=l(),Ra=a("p"),zS=o("There is one class of "),qf=a("code"),QS=o("AutoModel"),NHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),MXe=l(),Bi=a("h2"),jf=a("a"),jae=a("span"),F(cL.$$.fragment),qHe=l(),Dae=a("span"),jHe=o("Extending the Auto Classes"),EXe=l(),qn=a("p"),DHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Gae=a("code"),GHe=o("NewModel"),OHe=o(", make sure you have a "),Oae=a("code"),VHe=o("NewModelConfig"),XHe=o(` then you can add those to the auto
classes like this:`),CXe=l(),F(fL.$$.fragment),wXe=l(),WS=a("p"),zHe=o("You will then be able to use the auto classes like you would usually do!"),AXe=l(),F(Df.$$.fragment),LXe=l(),Ii=a("h2"),Gf=a("a"),Vae=a("span"),F(mL.$$.fragment),QHe=l(),Xae=a("span"),WHe=o("AutoConfig"),yXe=l(),Lo=a("div"),F(gL.$$.fragment),HHe=l(),hL=a("p"),UHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),HS=a("a"),JHe=o("from_pretrained()"),YHe=o(" class method."),KHe=l(),pL=a("p"),ZHe=o("This class cannot be instantiated directly using "),zae=a("code"),eUe=o("__init__()"),oUe=o(" (throws an error)."),rUe=l(),yr=a("div"),F(_L.$$.fragment),tUe=l(),Qae=a("p"),aUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),nUe=l(),Ni=a("p"),sUe=o("The configuration class to instantiate is selected based on the "),Wae=a("code"),lUe=o("model_type"),iUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Hae=a("code"),dUe=o("pretrained_model_name_or_path"),cUe=o(":"),fUe=l(),A=a("ul"),Of=a("li"),Uae=a("strong"),mUe=o("albert"),gUe=o(" \u2014 "),US=a("a"),hUe=o("AlbertConfig"),pUe=o(" (ALBERT model)"),_Ue=l(),Vf=a("li"),Jae=a("strong"),uUe=o("bart"),bUe=o(" \u2014 "),JS=a("a"),vUe=o("BartConfig"),FUe=o(" (BART model)"),TUe=l(),Xf=a("li"),Yae=a("strong"),MUe=o("beit"),EUe=o(" \u2014 "),YS=a("a"),CUe=o("BeitConfig"),wUe=o(" (BEiT model)"),AUe=l(),zf=a("li"),Kae=a("strong"),LUe=o("bert"),yUe=o(" \u2014 "),KS=a("a"),xUe=o("BertConfig"),$Ue=o(" (BERT model)"),kUe=l(),Qf=a("li"),Zae=a("strong"),SUe=o("bert-generation"),RUe=o(" \u2014 "),ZS=a("a"),PUe=o("BertGenerationConfig"),BUe=o(" (Bert Generation model)"),IUe=l(),Wf=a("li"),ene=a("strong"),NUe=o("big_bird"),qUe=o(" \u2014 "),eR=a("a"),jUe=o("BigBirdConfig"),DUe=o(" (BigBird model)"),GUe=l(),Hf=a("li"),one=a("strong"),OUe=o("bigbird_pegasus"),VUe=o(" \u2014 "),oR=a("a"),XUe=o("BigBirdPegasusConfig"),zUe=o(" (BigBird-Pegasus model)"),QUe=l(),Uf=a("li"),rne=a("strong"),WUe=o("blenderbot"),HUe=o(" \u2014 "),rR=a("a"),UUe=o("BlenderbotConfig"),JUe=o(" (Blenderbot model)"),YUe=l(),Jf=a("li"),tne=a("strong"),KUe=o("blenderbot-small"),ZUe=o(" \u2014 "),tR=a("a"),eJe=o("BlenderbotSmallConfig"),oJe=o(" (BlenderbotSmall model)"),rJe=l(),Yf=a("li"),ane=a("strong"),tJe=o("bloom"),aJe=o(" \u2014 "),aR=a("a"),nJe=o("BloomConfig"),sJe=o(" (BLOOM model)"),lJe=l(),Kf=a("li"),nne=a("strong"),iJe=o("camembert"),dJe=o(" \u2014 "),nR=a("a"),cJe=o("CamembertConfig"),fJe=o(" (CamemBERT model)"),mJe=l(),Zf=a("li"),sne=a("strong"),gJe=o("canine"),hJe=o(" \u2014 "),sR=a("a"),pJe=o("CanineConfig"),_Je=o(" (CANINE model)"),uJe=l(),em=a("li"),lne=a("strong"),bJe=o("clip"),vJe=o(" \u2014 "),lR=a("a"),FJe=o("CLIPConfig"),TJe=o(" (CLIP model)"),MJe=l(),om=a("li"),ine=a("strong"),EJe=o("codegen"),CJe=o(" \u2014 "),iR=a("a"),wJe=o("CodeGenConfig"),AJe=o(" (CodeGen model)"),LJe=l(),rm=a("li"),dne=a("strong"),yJe=o("convbert"),xJe=o(" \u2014 "),dR=a("a"),$Je=o("ConvBertConfig"),kJe=o(" (ConvBERT model)"),SJe=l(),tm=a("li"),cne=a("strong"),RJe=o("convnext"),PJe=o(" \u2014 "),cR=a("a"),BJe=o("ConvNextConfig"),IJe=o(" (ConvNeXT model)"),NJe=l(),am=a("li"),fne=a("strong"),qJe=o("ctrl"),jJe=o(" \u2014 "),fR=a("a"),DJe=o("CTRLConfig"),GJe=o(" (CTRL model)"),OJe=l(),nm=a("li"),mne=a("strong"),VJe=o("cvt"),XJe=o(" \u2014 "),mR=a("a"),zJe=o("CvtConfig"),QJe=o(" (CvT model)"),WJe=l(),sm=a("li"),gne=a("strong"),HJe=o("data2vec-audio"),UJe=o(" \u2014 "),gR=a("a"),JJe=o("Data2VecAudioConfig"),YJe=o(" (Data2VecAudio model)"),KJe=l(),lm=a("li"),hne=a("strong"),ZJe=o("data2vec-text"),eYe=o(" \u2014 "),hR=a("a"),oYe=o("Data2VecTextConfig"),rYe=o(" (Data2VecText model)"),tYe=l(),im=a("li"),pne=a("strong"),aYe=o("data2vec-vision"),nYe=o(" \u2014 "),pR=a("a"),sYe=o("Data2VecVisionConfig"),lYe=o(" (Data2VecVision model)"),iYe=l(),dm=a("li"),_ne=a("strong"),dYe=o("deberta"),cYe=o(" \u2014 "),_R=a("a"),fYe=o("DebertaConfig"),mYe=o(" (DeBERTa model)"),gYe=l(),cm=a("li"),une=a("strong"),hYe=o("deberta-v2"),pYe=o(" \u2014 "),uR=a("a"),_Ye=o("DebertaV2Config"),uYe=o(" (DeBERTa-v2 model)"),bYe=l(),fm=a("li"),bne=a("strong"),vYe=o("decision_transformer"),FYe=o(" \u2014 "),bR=a("a"),TYe=o("DecisionTransformerConfig"),MYe=o(" (Decision Transformer model)"),EYe=l(),mm=a("li"),vne=a("strong"),CYe=o("deit"),wYe=o(" \u2014 "),vR=a("a"),AYe=o("DeiTConfig"),LYe=o(" (DeiT model)"),yYe=l(),gm=a("li"),Fne=a("strong"),xYe=o("detr"),$Ye=o(" \u2014 "),FR=a("a"),kYe=o("DetrConfig"),SYe=o(" (DETR model)"),RYe=l(),hm=a("li"),Tne=a("strong"),PYe=o("distilbert"),BYe=o(" \u2014 "),TR=a("a"),IYe=o("DistilBertConfig"),NYe=o(" (DistilBERT model)"),qYe=l(),pm=a("li"),Mne=a("strong"),jYe=o("dpr"),DYe=o(" \u2014 "),MR=a("a"),GYe=o("DPRConfig"),OYe=o(" (DPR model)"),VYe=l(),_m=a("li"),Ene=a("strong"),XYe=o("dpt"),zYe=o(" \u2014 "),ER=a("a"),QYe=o("DPTConfig"),WYe=o(" (DPT model)"),HYe=l(),um=a("li"),Cne=a("strong"),UYe=o("electra"),JYe=o(" \u2014 "),CR=a("a"),YYe=o("ElectraConfig"),KYe=o(" (ELECTRA model)"),ZYe=l(),bm=a("li"),wne=a("strong"),eKe=o("encoder-decoder"),oKe=o(" \u2014 "),wR=a("a"),rKe=o("EncoderDecoderConfig"),tKe=o(" (Encoder decoder model)"),aKe=l(),vm=a("li"),Ane=a("strong"),nKe=o("flaubert"),sKe=o(" \u2014 "),AR=a("a"),lKe=o("FlaubertConfig"),iKe=o(" (FlauBERT model)"),dKe=l(),Fm=a("li"),Lne=a("strong"),cKe=o("flava"),fKe=o(" \u2014 "),LR=a("a"),mKe=o("FlavaConfig"),gKe=o(" (FLAVA model)"),hKe=l(),Tm=a("li"),yne=a("strong"),pKe=o("fnet"),_Ke=o(" \u2014 "),yR=a("a"),uKe=o("FNetConfig"),bKe=o(" (FNet model)"),vKe=l(),Mm=a("li"),xne=a("strong"),FKe=o("fsmt"),TKe=o(" \u2014 "),xR=a("a"),MKe=o("FSMTConfig"),EKe=o(" (FairSeq Machine-Translation model)"),CKe=l(),Em=a("li"),$ne=a("strong"),wKe=o("funnel"),AKe=o(" \u2014 "),$R=a("a"),LKe=o("FunnelConfig"),yKe=o(" (Funnel Transformer model)"),xKe=l(),Cm=a("li"),kne=a("strong"),$Ke=o("glpn"),kKe=o(" \u2014 "),kR=a("a"),SKe=o("GLPNConfig"),RKe=o(" (GLPN model)"),PKe=l(),wm=a("li"),Sne=a("strong"),BKe=o("gpt2"),IKe=o(" \u2014 "),SR=a("a"),NKe=o("GPT2Config"),qKe=o(" (OpenAI GPT-2 model)"),jKe=l(),Am=a("li"),Rne=a("strong"),DKe=o("gpt_neo"),GKe=o(" \u2014 "),RR=a("a"),OKe=o("GPTNeoConfig"),VKe=o(" (GPT Neo model)"),XKe=l(),Lm=a("li"),Pne=a("strong"),zKe=o("gpt_neox"),QKe=o(" \u2014 "),PR=a("a"),WKe=o("GPTNeoXConfig"),HKe=o(" (GPT NeoX model)"),UKe=l(),ym=a("li"),Bne=a("strong"),JKe=o("gptj"),YKe=o(" \u2014 "),BR=a("a"),KKe=o("GPTJConfig"),ZKe=o(" (GPT-J model)"),eZe=l(),xm=a("li"),Ine=a("strong"),oZe=o("groupvit"),rZe=o(" \u2014 "),IR=a("a"),tZe=o("GroupViTConfig"),aZe=o(" (GroupViT model)"),nZe=l(),$m=a("li"),Nne=a("strong"),sZe=o("hubert"),lZe=o(" \u2014 "),NR=a("a"),iZe=o("HubertConfig"),dZe=o(" (Hubert model)"),cZe=l(),km=a("li"),qne=a("strong"),fZe=o("ibert"),mZe=o(" \u2014 "),qR=a("a"),gZe=o("IBertConfig"),hZe=o(" (I-BERT model)"),pZe=l(),Sm=a("li"),jne=a("strong"),_Ze=o("imagegpt"),uZe=o(" \u2014 "),jR=a("a"),bZe=o("ImageGPTConfig"),vZe=o(" (ImageGPT model)"),FZe=l(),Rm=a("li"),Dne=a("strong"),TZe=o("layoutlm"),MZe=o(" \u2014 "),DR=a("a"),EZe=o("LayoutLMConfig"),CZe=o(" (LayoutLM model)"),wZe=l(),Pm=a("li"),Gne=a("strong"),AZe=o("layoutlmv2"),LZe=o(" \u2014 "),GR=a("a"),yZe=o("LayoutLMv2Config"),xZe=o(" (LayoutLMv2 model)"),$Ze=l(),Bm=a("li"),One=a("strong"),kZe=o("layoutlmv3"),SZe=o(" \u2014 "),OR=a("a"),RZe=o("LayoutLMv3Config"),PZe=o(" (LayoutLMv3 model)"),BZe=l(),Im=a("li"),Vne=a("strong"),IZe=o("led"),NZe=o(" \u2014 "),VR=a("a"),qZe=o("LEDConfig"),jZe=o(" (LED model)"),DZe=l(),Nm=a("li"),Xne=a("strong"),GZe=o("levit"),OZe=o(" \u2014 "),XR=a("a"),VZe=o("LevitConfig"),XZe=o(" (LeViT model)"),zZe=l(),qm=a("li"),zne=a("strong"),QZe=o("longformer"),WZe=o(" \u2014 "),zR=a("a"),HZe=o("LongformerConfig"),UZe=o(" (Longformer model)"),JZe=l(),jm=a("li"),Qne=a("strong"),YZe=o("longt5"),KZe=o(" \u2014 "),QR=a("a"),ZZe=o("LongT5Config"),eeo=o(" (LongT5 model)"),oeo=l(),Dm=a("li"),Wne=a("strong"),reo=o("luke"),teo=o(" \u2014 "),WR=a("a"),aeo=o("LukeConfig"),neo=o(" (LUKE model)"),seo=l(),Gm=a("li"),Hne=a("strong"),leo=o("lxmert"),ieo=o(" \u2014 "),HR=a("a"),deo=o("LxmertConfig"),ceo=o(" (LXMERT model)"),feo=l(),Om=a("li"),Une=a("strong"),meo=o("m2m_100"),geo=o(" \u2014 "),UR=a("a"),heo=o("M2M100Config"),peo=o(" (M2M100 model)"),_eo=l(),Vm=a("li"),Jne=a("strong"),ueo=o("marian"),beo=o(" \u2014 "),JR=a("a"),veo=o("MarianConfig"),Feo=o(" (Marian model)"),Teo=l(),Xm=a("li"),Yne=a("strong"),Meo=o("maskformer"),Eeo=o(" \u2014 "),YR=a("a"),Ceo=o("MaskFormerConfig"),weo=o(" (MaskFormer model)"),Aeo=l(),zm=a("li"),Kne=a("strong"),Leo=o("mbart"),yeo=o(" \u2014 "),KR=a("a"),xeo=o("MBartConfig"),$eo=o(" (mBART model)"),keo=l(),Qm=a("li"),Zne=a("strong"),Seo=o("mctct"),Reo=o(" \u2014 "),ZR=a("a"),Peo=o("MCTCTConfig"),Beo=o(" (M-CTC-T model)"),Ieo=l(),Wm=a("li"),ese=a("strong"),Neo=o("megatron-bert"),qeo=o(" \u2014 "),eP=a("a"),jeo=o("MegatronBertConfig"),Deo=o(" (Megatron-BERT model)"),Geo=l(),Hm=a("li"),ose=a("strong"),Oeo=o("mobilebert"),Veo=o(" \u2014 "),oP=a("a"),Xeo=o("MobileBertConfig"),zeo=o(" (MobileBERT model)"),Qeo=l(),Um=a("li"),rse=a("strong"),Weo=o("mobilevit"),Heo=o(" \u2014 "),rP=a("a"),Ueo=o("MobileViTConfig"),Jeo=o(" (MobileViT model)"),Yeo=l(),Jm=a("li"),tse=a("strong"),Keo=o("mpnet"),Zeo=o(" \u2014 "),tP=a("a"),eoo=o("MPNetConfig"),ooo=o(" (MPNet model)"),roo=l(),Ym=a("li"),ase=a("strong"),too=o("mt5"),aoo=o(" \u2014 "),aP=a("a"),noo=o("MT5Config"),soo=o(" (MT5 model)"),loo=l(),Km=a("li"),nse=a("strong"),ioo=o("mvp"),doo=o(" \u2014 "),nP=a("a"),coo=o("MvpConfig"),foo=o(" (MVP model)"),moo=l(),Zm=a("li"),sse=a("strong"),goo=o("nezha"),hoo=o(" \u2014 "),sP=a("a"),poo=o("NezhaConfig"),_oo=o(" (Nezha model)"),uoo=l(),eg=a("li"),lse=a("strong"),boo=o("nystromformer"),voo=o(" \u2014 "),lP=a("a"),Foo=o("NystromformerConfig"),Too=o(" (Nystr\xF6mformer model)"),Moo=l(),og=a("li"),ise=a("strong"),Eoo=o("openai-gpt"),Coo=o(" \u2014 "),iP=a("a"),woo=o("OpenAIGPTConfig"),Aoo=o(" (OpenAI GPT model)"),Loo=l(),rg=a("li"),dse=a("strong"),yoo=o("opt"),xoo=o(" \u2014 "),dP=a("a"),$oo=o("OPTConfig"),koo=o(" (OPT model)"),Soo=l(),tg=a("li"),cse=a("strong"),Roo=o("pegasus"),Poo=o(" \u2014 "),cP=a("a"),Boo=o("PegasusConfig"),Ioo=o(" (Pegasus model)"),Noo=l(),ag=a("li"),fse=a("strong"),qoo=o("perceiver"),joo=o(" \u2014 "),fP=a("a"),Doo=o("PerceiverConfig"),Goo=o(" (Perceiver model)"),Ooo=l(),ng=a("li"),mse=a("strong"),Voo=o("plbart"),Xoo=o(" \u2014 "),mP=a("a"),zoo=o("PLBartConfig"),Qoo=o(" (PLBart model)"),Woo=l(),sg=a("li"),gse=a("strong"),Hoo=o("poolformer"),Uoo=o(" \u2014 "),gP=a("a"),Joo=o("PoolFormerConfig"),Yoo=o(" (PoolFormer model)"),Koo=l(),lg=a("li"),hse=a("strong"),Zoo=o("prophetnet"),ero=o(" \u2014 "),hP=a("a"),oro=o("ProphetNetConfig"),rro=o(" (ProphetNet model)"),tro=l(),ig=a("li"),pse=a("strong"),aro=o("qdqbert"),nro=o(" \u2014 "),pP=a("a"),sro=o("QDQBertConfig"),lro=o(" (QDQBert model)"),iro=l(),dg=a("li"),_se=a("strong"),dro=o("rag"),cro=o(" \u2014 "),_P=a("a"),fro=o("RagConfig"),mro=o(" (RAG model)"),gro=l(),cg=a("li"),use=a("strong"),hro=o("realm"),pro=o(" \u2014 "),uP=a("a"),_ro=o("RealmConfig"),uro=o(" (REALM model)"),bro=l(),fg=a("li"),bse=a("strong"),vro=o("reformer"),Fro=o(" \u2014 "),bP=a("a"),Tro=o("ReformerConfig"),Mro=o(" (Reformer model)"),Ero=l(),mg=a("li"),vse=a("strong"),Cro=o("regnet"),wro=o(" \u2014 "),vP=a("a"),Aro=o("RegNetConfig"),Lro=o(" (RegNet model)"),yro=l(),gg=a("li"),Fse=a("strong"),xro=o("rembert"),$ro=o(" \u2014 "),FP=a("a"),kro=o("RemBertConfig"),Sro=o(" (RemBERT model)"),Rro=l(),hg=a("li"),Tse=a("strong"),Pro=o("resnet"),Bro=o(" \u2014 "),TP=a("a"),Iro=o("ResNetConfig"),Nro=o(" (ResNet model)"),qro=l(),pg=a("li"),Mse=a("strong"),jro=o("retribert"),Dro=o(" \u2014 "),MP=a("a"),Gro=o("RetriBertConfig"),Oro=o(" (RetriBERT model)"),Vro=l(),_g=a("li"),Ese=a("strong"),Xro=o("roberta"),zro=o(" \u2014 "),EP=a("a"),Qro=o("RobertaConfig"),Wro=o(" (RoBERTa model)"),Hro=l(),ug=a("li"),Cse=a("strong"),Uro=o("roformer"),Jro=o(" \u2014 "),CP=a("a"),Yro=o("RoFormerConfig"),Kro=o(" (RoFormer model)"),Zro=l(),bg=a("li"),wse=a("strong"),eto=o("segformer"),oto=o(" \u2014 "),wP=a("a"),rto=o("SegformerConfig"),tto=o(" (SegFormer model)"),ato=l(),vg=a("li"),Ase=a("strong"),nto=o("sew"),sto=o(" \u2014 "),AP=a("a"),lto=o("SEWConfig"),ito=o(" (SEW model)"),dto=l(),Fg=a("li"),Lse=a("strong"),cto=o("sew-d"),fto=o(" \u2014 "),LP=a("a"),mto=o("SEWDConfig"),gto=o(" (SEW-D model)"),hto=l(),Tg=a("li"),yse=a("strong"),pto=o("speech-encoder-decoder"),_to=o(" \u2014 "),yP=a("a"),uto=o("SpeechEncoderDecoderConfig"),bto=o(" (Speech Encoder decoder model)"),vto=l(),Mg=a("li"),xse=a("strong"),Fto=o("speech_to_text"),Tto=o(" \u2014 "),xP=a("a"),Mto=o("Speech2TextConfig"),Eto=o(" (Speech2Text model)"),Cto=l(),Eg=a("li"),$se=a("strong"),wto=o("speech_to_text_2"),Ato=o(" \u2014 "),$P=a("a"),Lto=o("Speech2Text2Config"),yto=o(" (Speech2Text2 model)"),xto=l(),Cg=a("li"),kse=a("strong"),$to=o("splinter"),kto=o(" \u2014 "),kP=a("a"),Sto=o("SplinterConfig"),Rto=o(" (Splinter model)"),Pto=l(),wg=a("li"),Sse=a("strong"),Bto=o("squeezebert"),Ito=o(" \u2014 "),SP=a("a"),Nto=o("SqueezeBertConfig"),qto=o(" (SqueezeBERT model)"),jto=l(),Ag=a("li"),Rse=a("strong"),Dto=o("swin"),Gto=o(" \u2014 "),RP=a("a"),Oto=o("SwinConfig"),Vto=o(" (Swin Transformer model)"),Xto=l(),Lg=a("li"),Pse=a("strong"),zto=o("t5"),Qto=o(" \u2014 "),PP=a("a"),Wto=o("T5Config"),Hto=o(" (T5 model)"),Uto=l(),yg=a("li"),Bse=a("strong"),Jto=o("tapas"),Yto=o(" \u2014 "),BP=a("a"),Kto=o("TapasConfig"),Zto=o(" (TAPAS model)"),eao=l(),xg=a("li"),Ise=a("strong"),oao=o("trajectory_transformer"),rao=o(" \u2014 "),IP=a("a"),tao=o("TrajectoryTransformerConfig"),aao=o(" (Trajectory Transformer model)"),nao=l(),$g=a("li"),Nse=a("strong"),sao=o("transfo-xl"),lao=o(" \u2014 "),NP=a("a"),iao=o("TransfoXLConfig"),dao=o(" (Transformer-XL model)"),cao=l(),kg=a("li"),qse=a("strong"),fao=o("trocr"),mao=o(" \u2014 "),qP=a("a"),gao=o("TrOCRConfig"),hao=o(" (TrOCR model)"),pao=l(),Sg=a("li"),jse=a("strong"),_ao=o("unispeech"),uao=o(" \u2014 "),jP=a("a"),bao=o("UniSpeechConfig"),vao=o(" (UniSpeech model)"),Fao=l(),Rg=a("li"),Dse=a("strong"),Tao=o("unispeech-sat"),Mao=o(" \u2014 "),DP=a("a"),Eao=o("UniSpeechSatConfig"),Cao=o(" (UniSpeechSat model)"),wao=l(),Pg=a("li"),Gse=a("strong"),Aao=o("van"),Lao=o(" \u2014 "),GP=a("a"),yao=o("VanConfig"),xao=o(" (VAN model)"),$ao=l(),Bg=a("li"),Ose=a("strong"),kao=o("vilt"),Sao=o(" \u2014 "),OP=a("a"),Rao=o("ViltConfig"),Pao=o(" (ViLT model)"),Bao=l(),Ig=a("li"),Vse=a("strong"),Iao=o("vision-encoder-decoder"),Nao=o(" \u2014 "),VP=a("a"),qao=o("VisionEncoderDecoderConfig"),jao=o(" (Vision Encoder decoder model)"),Dao=l(),Ng=a("li"),Xse=a("strong"),Gao=o("vision-text-dual-encoder"),Oao=o(" \u2014 "),XP=a("a"),Vao=o("VisionTextDualEncoderConfig"),Xao=o(" (VisionTextDualEncoder model)"),zao=l(),qg=a("li"),zse=a("strong"),Qao=o("visual_bert"),Wao=o(" \u2014 "),zP=a("a"),Hao=o("VisualBertConfig"),Uao=o(" (VisualBERT model)"),Jao=l(),jg=a("li"),Qse=a("strong"),Yao=o("vit"),Kao=o(" \u2014 "),QP=a("a"),Zao=o("ViTConfig"),eno=o(" (ViT model)"),ono=l(),Dg=a("li"),Wse=a("strong"),rno=o("vit_mae"),tno=o(" \u2014 "),WP=a("a"),ano=o("ViTMAEConfig"),nno=o(" (ViTMAE model)"),sno=l(),Gg=a("li"),Hse=a("strong"),lno=o("wav2vec2"),ino=o(" \u2014 "),HP=a("a"),dno=o("Wav2Vec2Config"),cno=o(" (Wav2Vec2 model)"),fno=l(),Og=a("li"),Use=a("strong"),mno=o("wav2vec2-conformer"),gno=o(" \u2014 "),UP=a("a"),hno=o("Wav2Vec2ConformerConfig"),pno=o(" (Wav2Vec2-Conformer model)"),_no=l(),Vg=a("li"),Jse=a("strong"),uno=o("wavlm"),bno=o(" \u2014 "),JP=a("a"),vno=o("WavLMConfig"),Fno=o(" (WavLM model)"),Tno=l(),Xg=a("li"),Yse=a("strong"),Mno=o("xglm"),Eno=o(" \u2014 "),YP=a("a"),Cno=o("XGLMConfig"),wno=o(" (XGLM model)"),Ano=l(),zg=a("li"),Kse=a("strong"),Lno=o("xlm"),yno=o(" \u2014 "),KP=a("a"),xno=o("XLMConfig"),$no=o(" (XLM model)"),kno=l(),Qg=a("li"),Zse=a("strong"),Sno=o("xlm-prophetnet"),Rno=o(" \u2014 "),ZP=a("a"),Pno=o("XLMProphetNetConfig"),Bno=o(" (XLM-ProphetNet model)"),Ino=l(),Wg=a("li"),ele=a("strong"),Nno=o("xlm-roberta"),qno=o(" \u2014 "),eB=a("a"),jno=o("XLMRobertaConfig"),Dno=o(" (XLM-RoBERTa model)"),Gno=l(),Hg=a("li"),ole=a("strong"),Ono=o("xlm-roberta-xl"),Vno=o(" \u2014 "),oB=a("a"),Xno=o("XLMRobertaXLConfig"),zno=o(" (XLM-RoBERTa-XL model)"),Qno=l(),Ug=a("li"),rle=a("strong"),Wno=o("xlnet"),Hno=o(" \u2014 "),rB=a("a"),Uno=o("XLNetConfig"),Jno=o(" (XLNet model)"),Yno=l(),Jg=a("li"),tle=a("strong"),Kno=o("yolos"),Zno=o(" \u2014 "),tB=a("a"),eso=o("YolosConfig"),oso=o(" (YOLOS model)"),rso=l(),Yg=a("li"),ale=a("strong"),tso=o("yoso"),aso=o(" \u2014 "),aB=a("a"),nso=o("YosoConfig"),sso=o(" (YOSO model)"),lso=l(),F(Kg.$$.fragment),iso=l(),Zg=a("div"),F(uL.$$.fragment),dso=l(),nle=a("p"),cso=o("Register a new configuration for this class."),xXe=l(),qi=a("h2"),eh=a("a"),sle=a("span"),F(bL.$$.fragment),fso=l(),lle=a("span"),mso=o("AutoTokenizer"),$Xe=l(),yo=a("div"),F(vL.$$.fragment),gso=l(),FL=a("p"),hso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nB=a("a"),pso=o("AutoTokenizer.from_pretrained()"),_so=o(" class method."),uso=l(),TL=a("p"),bso=o("This class cannot be instantiated directly using "),ile=a("code"),vso=o("__init__()"),Fso=o(" (throws an error)."),Tso=l(),xr=a("div"),F(ML.$$.fragment),Mso=l(),dle=a("p"),Eso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Cso=l(),Pa=a("p"),wso=o("The tokenizer class to instantiate is selected based on the "),cle=a("code"),Aso=o("model_type"),Lso=o(` property of the config object (either
passed as an argument or loaded from `),fle=a("code"),yso=o("pretrained_model_name_or_path"),xso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mle=a("code"),$so=o("pretrained_model_name_or_path"),kso=o(":"),Sso=l(),k=a("ul"),jn=a("li"),gle=a("strong"),Rso=o("albert"),Pso=o(" \u2014 "),sB=a("a"),Bso=o("AlbertTokenizer"),Iso=o(" or "),lB=a("a"),Nso=o("AlbertTokenizerFast"),qso=o(" (ALBERT model)"),jso=l(),Dn=a("li"),hle=a("strong"),Dso=o("bart"),Gso=o(" \u2014 "),iB=a("a"),Oso=o("BartTokenizer"),Vso=o(" or "),dB=a("a"),Xso=o("BartTokenizerFast"),zso=o(" (BART model)"),Qso=l(),Gn=a("li"),ple=a("strong"),Wso=o("barthez"),Hso=o(" \u2014 "),cB=a("a"),Uso=o("BarthezTokenizer"),Jso=o(" or "),fB=a("a"),Yso=o("BarthezTokenizerFast"),Kso=o(" (BARThez model)"),Zso=l(),oh=a("li"),_le=a("strong"),elo=o("bartpho"),olo=o(" \u2014 "),mB=a("a"),rlo=o("BartphoTokenizer"),tlo=o(" (BARTpho model)"),alo=l(),On=a("li"),ule=a("strong"),nlo=o("bert"),slo=o(" \u2014 "),gB=a("a"),llo=o("BertTokenizer"),ilo=o(" or "),hB=a("a"),dlo=o("BertTokenizerFast"),clo=o(" (BERT model)"),flo=l(),rh=a("li"),ble=a("strong"),mlo=o("bert-generation"),glo=o(" \u2014 "),pB=a("a"),hlo=o("BertGenerationTokenizer"),plo=o(" (Bert Generation model)"),_lo=l(),th=a("li"),vle=a("strong"),ulo=o("bert-japanese"),blo=o(" \u2014 "),_B=a("a"),vlo=o("BertJapaneseTokenizer"),Flo=o(" (BertJapanese model)"),Tlo=l(),ah=a("li"),Fle=a("strong"),Mlo=o("bertweet"),Elo=o(" \u2014 "),uB=a("a"),Clo=o("BertweetTokenizer"),wlo=o(" (BERTweet model)"),Alo=l(),Vn=a("li"),Tle=a("strong"),Llo=o("big_bird"),ylo=o(" \u2014 "),bB=a("a"),xlo=o("BigBirdTokenizer"),$lo=o(" or "),vB=a("a"),klo=o("BigBirdTokenizerFast"),Slo=o(" (BigBird model)"),Rlo=l(),Xn=a("li"),Mle=a("strong"),Plo=o("bigbird_pegasus"),Blo=o(" \u2014 "),FB=a("a"),Ilo=o("PegasusTokenizer"),Nlo=o(" or "),TB=a("a"),qlo=o("PegasusTokenizerFast"),jlo=o(" (BigBird-Pegasus model)"),Dlo=l(),zn=a("li"),Ele=a("strong"),Glo=o("blenderbot"),Olo=o(" \u2014 "),MB=a("a"),Vlo=o("BlenderbotTokenizer"),Xlo=o(" or "),EB=a("a"),zlo=o("BlenderbotTokenizerFast"),Qlo=o(" (Blenderbot model)"),Wlo=l(),nh=a("li"),Cle=a("strong"),Hlo=o("blenderbot-small"),Ulo=o(" \u2014 "),CB=a("a"),Jlo=o("BlenderbotSmallTokenizer"),Ylo=o(" (BlenderbotSmall model)"),Klo=l(),sh=a("li"),wle=a("strong"),Zlo=o("bloom"),eio=o(" \u2014 "),wB=a("a"),oio=o("BloomTokenizerFast"),rio=o(" (BLOOM model)"),tio=l(),lh=a("li"),Ale=a("strong"),aio=o("byt5"),nio=o(" \u2014 "),AB=a("a"),sio=o("ByT5Tokenizer"),lio=o(" (ByT5 model)"),iio=l(),Qn=a("li"),Lle=a("strong"),dio=o("camembert"),cio=o(" \u2014 "),LB=a("a"),fio=o("CamembertTokenizer"),mio=o(" or "),yB=a("a"),gio=o("CamembertTokenizerFast"),hio=o(" (CamemBERT model)"),pio=l(),ih=a("li"),yle=a("strong"),_io=o("canine"),uio=o(" \u2014 "),xB=a("a"),bio=o("CanineTokenizer"),vio=o(" (CANINE model)"),Fio=l(),Wn=a("li"),xle=a("strong"),Tio=o("clip"),Mio=o(" \u2014 "),$B=a("a"),Eio=o("CLIPTokenizer"),Cio=o(" or "),kB=a("a"),wio=o("CLIPTokenizerFast"),Aio=o(" (CLIP model)"),Lio=l(),Hn=a("li"),$le=a("strong"),yio=o("codegen"),xio=o(" \u2014 "),SB=a("a"),$io=o("CodeGenTokenizer"),kio=o(" or "),RB=a("a"),Sio=o("CodeGenTokenizerFast"),Rio=o(" (CodeGen model)"),Pio=l(),Un=a("li"),kle=a("strong"),Bio=o("convbert"),Iio=o(" \u2014 "),PB=a("a"),Nio=o("ConvBertTokenizer"),qio=o(" or "),BB=a("a"),jio=o("ConvBertTokenizerFast"),Dio=o(" (ConvBERT model)"),Gio=l(),Jn=a("li"),Sle=a("strong"),Oio=o("cpm"),Vio=o(" \u2014 "),IB=a("a"),Xio=o("CpmTokenizer"),zio=o(" or "),NB=a("a"),Qio=o("CpmTokenizerFast"),Wio=o(" (CPM model)"),Hio=l(),dh=a("li"),Rle=a("strong"),Uio=o("ctrl"),Jio=o(" \u2014 "),qB=a("a"),Yio=o("CTRLTokenizer"),Kio=o(" (CTRL model)"),Zio=l(),Yn=a("li"),Ple=a("strong"),edo=o("data2vec-text"),odo=o(" \u2014 "),jB=a("a"),rdo=o("RobertaTokenizer"),tdo=o(" or "),DB=a("a"),ado=o("RobertaTokenizerFast"),ndo=o(" (Data2VecText model)"),sdo=l(),Kn=a("li"),Ble=a("strong"),ldo=o("deberta"),ido=o(" \u2014 "),GB=a("a"),ddo=o("DebertaTokenizer"),cdo=o(" or "),OB=a("a"),fdo=o("DebertaTokenizerFast"),mdo=o(" (DeBERTa model)"),gdo=l(),Zn=a("li"),Ile=a("strong"),hdo=o("deberta-v2"),pdo=o(" \u2014 "),VB=a("a"),_do=o("DebertaV2Tokenizer"),udo=o(" or "),XB=a("a"),bdo=o("DebertaV2TokenizerFast"),vdo=o(" (DeBERTa-v2 model)"),Fdo=l(),es=a("li"),Nle=a("strong"),Tdo=o("distilbert"),Mdo=o(" \u2014 "),zB=a("a"),Edo=o("DistilBertTokenizer"),Cdo=o(" or "),QB=a("a"),wdo=o("DistilBertTokenizerFast"),Ado=o(" (DistilBERT model)"),Ldo=l(),os=a("li"),qle=a("strong"),ydo=o("dpr"),xdo=o(" \u2014 "),WB=a("a"),$do=o("DPRQuestionEncoderTokenizer"),kdo=o(" or "),HB=a("a"),Sdo=o("DPRQuestionEncoderTokenizerFast"),Rdo=o(" (DPR model)"),Pdo=l(),rs=a("li"),jle=a("strong"),Bdo=o("electra"),Ido=o(" \u2014 "),UB=a("a"),Ndo=o("ElectraTokenizer"),qdo=o(" or "),JB=a("a"),jdo=o("ElectraTokenizerFast"),Ddo=o(" (ELECTRA model)"),Gdo=l(),ch=a("li"),Dle=a("strong"),Odo=o("flaubert"),Vdo=o(" \u2014 "),YB=a("a"),Xdo=o("FlaubertTokenizer"),zdo=o(" (FlauBERT model)"),Qdo=l(),ts=a("li"),Gle=a("strong"),Wdo=o("fnet"),Hdo=o(" \u2014 "),KB=a("a"),Udo=o("FNetTokenizer"),Jdo=o(" or "),ZB=a("a"),Ydo=o("FNetTokenizerFast"),Kdo=o(" (FNet model)"),Zdo=l(),fh=a("li"),Ole=a("strong"),eco=o("fsmt"),oco=o(" \u2014 "),eI=a("a"),rco=o("FSMTTokenizer"),tco=o(" (FairSeq Machine-Translation model)"),aco=l(),as=a("li"),Vle=a("strong"),nco=o("funnel"),sco=o(" \u2014 "),oI=a("a"),lco=o("FunnelTokenizer"),ico=o(" or "),rI=a("a"),dco=o("FunnelTokenizerFast"),cco=o(" (Funnel Transformer model)"),fco=l(),ns=a("li"),Xle=a("strong"),mco=o("gpt2"),gco=o(" \u2014 "),tI=a("a"),hco=o("GPT2Tokenizer"),pco=o(" or "),aI=a("a"),_co=o("GPT2TokenizerFast"),uco=o(" (OpenAI GPT-2 model)"),bco=l(),ss=a("li"),zle=a("strong"),vco=o("gpt_neo"),Fco=o(" \u2014 "),nI=a("a"),Tco=o("GPT2Tokenizer"),Mco=o(" or "),sI=a("a"),Eco=o("GPT2TokenizerFast"),Cco=o(" (GPT Neo model)"),wco=l(),mh=a("li"),Qle=a("strong"),Aco=o("gpt_neox"),Lco=o(" \u2014 "),lI=a("a"),yco=o("GPTNeoXTokenizerFast"),xco=o(" (GPT NeoX model)"),$co=l(),ls=a("li"),Wle=a("strong"),kco=o("gptj"),Sco=o(" \u2014 "),iI=a("a"),Rco=o("GPT2Tokenizer"),Pco=o(" or "),dI=a("a"),Bco=o("GPT2TokenizerFast"),Ico=o(" (GPT-J model)"),Nco=l(),is=a("li"),Hle=a("strong"),qco=o("groupvit"),jco=o(" \u2014 "),cI=a("a"),Dco=o("CLIPTokenizer"),Gco=o(" or "),fI=a("a"),Oco=o("CLIPTokenizerFast"),Vco=o(" (GroupViT model)"),Xco=l(),ds=a("li"),Ule=a("strong"),zco=o("herbert"),Qco=o(" \u2014 "),mI=a("a"),Wco=o("HerbertTokenizer"),Hco=o(" or "),gI=a("a"),Uco=o("HerbertTokenizerFast"),Jco=o(" (HerBERT model)"),Yco=l(),gh=a("li"),Jle=a("strong"),Kco=o("hubert"),Zco=o(" \u2014 "),hI=a("a"),efo=o("Wav2Vec2CTCTokenizer"),ofo=o(" (Hubert model)"),rfo=l(),cs=a("li"),Yle=a("strong"),tfo=o("ibert"),afo=o(" \u2014 "),pI=a("a"),nfo=o("RobertaTokenizer"),sfo=o(" or "),_I=a("a"),lfo=o("RobertaTokenizerFast"),ifo=o(" (I-BERT model)"),dfo=l(),fs=a("li"),Kle=a("strong"),cfo=o("layoutlm"),ffo=o(" \u2014 "),uI=a("a"),mfo=o("LayoutLMTokenizer"),gfo=o(" or "),bI=a("a"),hfo=o("LayoutLMTokenizerFast"),pfo=o(" (LayoutLM model)"),_fo=l(),ms=a("li"),Zle=a("strong"),ufo=o("layoutlmv2"),bfo=o(" \u2014 "),vI=a("a"),vfo=o("LayoutLMv2Tokenizer"),Ffo=o(" or "),FI=a("a"),Tfo=o("LayoutLMv2TokenizerFast"),Mfo=o(" (LayoutLMv2 model)"),Efo=l(),gs=a("li"),eie=a("strong"),Cfo=o("layoutlmv3"),wfo=o(" \u2014 "),TI=a("a"),Afo=o("LayoutLMv3Tokenizer"),Lfo=o(" or "),MI=a("a"),yfo=o("LayoutLMv3TokenizerFast"),xfo=o(" (LayoutLMv3 model)"),$fo=l(),hs=a("li"),oie=a("strong"),kfo=o("layoutxlm"),Sfo=o(" \u2014 "),EI=a("a"),Rfo=o("LayoutXLMTokenizer"),Pfo=o(" or "),CI=a("a"),Bfo=o("LayoutXLMTokenizerFast"),Ifo=o(" (LayoutXLM model)"),Nfo=l(),ps=a("li"),rie=a("strong"),qfo=o("led"),jfo=o(" \u2014 "),wI=a("a"),Dfo=o("LEDTokenizer"),Gfo=o(" or "),AI=a("a"),Ofo=o("LEDTokenizerFast"),Vfo=o(" (LED model)"),Xfo=l(),_s=a("li"),tie=a("strong"),zfo=o("longformer"),Qfo=o(" \u2014 "),LI=a("a"),Wfo=o("LongformerTokenizer"),Hfo=o(" or "),yI=a("a"),Ufo=o("LongformerTokenizerFast"),Jfo=o(" (Longformer model)"),Yfo=l(),us=a("li"),aie=a("strong"),Kfo=o("longt5"),Zfo=o(" \u2014 "),xI=a("a"),emo=o("T5Tokenizer"),omo=o(" or "),$I=a("a"),rmo=o("T5TokenizerFast"),tmo=o(" (LongT5 model)"),amo=l(),hh=a("li"),nie=a("strong"),nmo=o("luke"),smo=o(" \u2014 "),kI=a("a"),lmo=o("LukeTokenizer"),imo=o(" (LUKE model)"),dmo=l(),bs=a("li"),sie=a("strong"),cmo=o("lxmert"),fmo=o(" \u2014 "),SI=a("a"),mmo=o("LxmertTokenizer"),gmo=o(" or "),RI=a("a"),hmo=o("LxmertTokenizerFast"),pmo=o(" (LXMERT model)"),_mo=l(),ph=a("li"),lie=a("strong"),umo=o("m2m_100"),bmo=o(" \u2014 "),PI=a("a"),vmo=o("M2M100Tokenizer"),Fmo=o(" (M2M100 model)"),Tmo=l(),_h=a("li"),iie=a("strong"),Mmo=o("marian"),Emo=o(" \u2014 "),BI=a("a"),Cmo=o("MarianTokenizer"),wmo=o(" (Marian model)"),Amo=l(),vs=a("li"),die=a("strong"),Lmo=o("mbart"),ymo=o(" \u2014 "),II=a("a"),xmo=o("MBartTokenizer"),$mo=o(" or "),NI=a("a"),kmo=o("MBartTokenizerFast"),Smo=o(" (mBART model)"),Rmo=l(),Fs=a("li"),cie=a("strong"),Pmo=o("mbart50"),Bmo=o(" \u2014 "),qI=a("a"),Imo=o("MBart50Tokenizer"),Nmo=o(" or "),jI=a("a"),qmo=o("MBart50TokenizerFast"),jmo=o(" (mBART-50 model)"),Dmo=l(),Ts=a("li"),fie=a("strong"),Gmo=o("megatron-bert"),Omo=o(" \u2014 "),DI=a("a"),Vmo=o("BertTokenizer"),Xmo=o(" or "),GI=a("a"),zmo=o("BertTokenizerFast"),Qmo=o(" (Megatron-BERT model)"),Wmo=l(),uh=a("li"),mie=a("strong"),Hmo=o("mluke"),Umo=o(" \u2014 "),OI=a("a"),Jmo=o("MLukeTokenizer"),Ymo=o(" (mLUKE model)"),Kmo=l(),Ms=a("li"),gie=a("strong"),Zmo=o("mobilebert"),ego=o(" \u2014 "),VI=a("a"),ogo=o("MobileBertTokenizer"),rgo=o(" or "),XI=a("a"),tgo=o("MobileBertTokenizerFast"),ago=o(" (MobileBERT model)"),ngo=l(),Es=a("li"),hie=a("strong"),sgo=o("mpnet"),lgo=o(" \u2014 "),zI=a("a"),igo=o("MPNetTokenizer"),dgo=o(" or "),QI=a("a"),cgo=o("MPNetTokenizerFast"),fgo=o(" (MPNet model)"),mgo=l(),Cs=a("li"),pie=a("strong"),ggo=o("mt5"),hgo=o(" \u2014 "),WI=a("a"),pgo=o("MT5Tokenizer"),_go=o(" or "),HI=a("a"),ugo=o("MT5TokenizerFast"),bgo=o(" (MT5 model)"),vgo=l(),ws=a("li"),_ie=a("strong"),Fgo=o("mvp"),Tgo=o(" \u2014 "),UI=a("a"),Mgo=o("MvpTokenizer"),Ego=o(" or "),JI=a("a"),Cgo=o("MvpTokenizerFast"),wgo=o(" (MVP model)"),Ago=l(),As=a("li"),uie=a("strong"),Lgo=o("nezha"),ygo=o(" \u2014 "),YI=a("a"),xgo=o("BertTokenizer"),$go=o(" or "),KI=a("a"),kgo=o("BertTokenizerFast"),Sgo=o(" (Nezha model)"),Rgo=l(),Ls=a("li"),bie=a("strong"),Pgo=o("nllb"),Bgo=o(" \u2014 "),ZI=a("a"),Igo=o("NllbTokenizer"),Ngo=o(" or "),eN=a("a"),qgo=o("NllbTokenizerFast"),jgo=o(" (NLLB model)"),Dgo=l(),ys=a("li"),vie=a("strong"),Ggo=o("nystromformer"),Ogo=o(" \u2014 "),oN=a("a"),Vgo=o("AlbertTokenizer"),Xgo=o(" or "),rN=a("a"),zgo=o("AlbertTokenizerFast"),Qgo=o(" (Nystr\xF6mformer model)"),Wgo=l(),xs=a("li"),Fie=a("strong"),Hgo=o("openai-gpt"),Ugo=o(" \u2014 "),tN=a("a"),Jgo=o("OpenAIGPTTokenizer"),Ygo=o(" or "),aN=a("a"),Kgo=o("OpenAIGPTTokenizerFast"),Zgo=o(" (OpenAI GPT model)"),eho=l(),bh=a("li"),Tie=a("strong"),oho=o("opt"),rho=o(" \u2014 "),nN=a("a"),tho=o("GPT2Tokenizer"),aho=o(" (OPT model)"),nho=l(),$s=a("li"),Mie=a("strong"),sho=o("pegasus"),lho=o(" \u2014 "),sN=a("a"),iho=o("PegasusTokenizer"),dho=o(" or "),lN=a("a"),cho=o("PegasusTokenizerFast"),fho=o(" (Pegasus model)"),mho=l(),vh=a("li"),Eie=a("strong"),gho=o("perceiver"),hho=o(" \u2014 "),iN=a("a"),pho=o("PerceiverTokenizer"),_ho=o(" (Perceiver model)"),uho=l(),Fh=a("li"),Cie=a("strong"),bho=o("phobert"),vho=o(" \u2014 "),dN=a("a"),Fho=o("PhobertTokenizer"),Tho=o(" (PhoBERT model)"),Mho=l(),Th=a("li"),wie=a("strong"),Eho=o("plbart"),Cho=o(" \u2014 "),cN=a("a"),who=o("PLBartTokenizer"),Aho=o(" (PLBart model)"),Lho=l(),Mh=a("li"),Aie=a("strong"),yho=o("prophetnet"),xho=o(" \u2014 "),fN=a("a"),$ho=o("ProphetNetTokenizer"),kho=o(" (ProphetNet model)"),Sho=l(),ks=a("li"),Lie=a("strong"),Rho=o("qdqbert"),Pho=o(" \u2014 "),mN=a("a"),Bho=o("BertTokenizer"),Iho=o(" or "),gN=a("a"),Nho=o("BertTokenizerFast"),qho=o(" (QDQBert model)"),jho=l(),Eh=a("li"),yie=a("strong"),Dho=o("rag"),Gho=o(" \u2014 "),hN=a("a"),Oho=o("RagTokenizer"),Vho=o(" (RAG model)"),Xho=l(),Ss=a("li"),xie=a("strong"),zho=o("realm"),Qho=o(" \u2014 "),pN=a("a"),Who=o("RealmTokenizer"),Hho=o(" or "),_N=a("a"),Uho=o("RealmTokenizerFast"),Jho=o(" (REALM model)"),Yho=l(),Rs=a("li"),$ie=a("strong"),Kho=o("reformer"),Zho=o(" \u2014 "),uN=a("a"),epo=o("ReformerTokenizer"),opo=o(" or "),bN=a("a"),rpo=o("ReformerTokenizerFast"),tpo=o(" (Reformer model)"),apo=l(),Ps=a("li"),kie=a("strong"),npo=o("rembert"),spo=o(" \u2014 "),vN=a("a"),lpo=o("RemBertTokenizer"),ipo=o(" or "),FN=a("a"),dpo=o("RemBertTokenizerFast"),cpo=o(" (RemBERT model)"),fpo=l(),Bs=a("li"),Sie=a("strong"),mpo=o("retribert"),gpo=o(" \u2014 "),TN=a("a"),hpo=o("RetriBertTokenizer"),ppo=o(" or "),MN=a("a"),_po=o("RetriBertTokenizerFast"),upo=o(" (RetriBERT model)"),bpo=l(),Is=a("li"),Rie=a("strong"),vpo=o("roberta"),Fpo=o(" \u2014 "),EN=a("a"),Tpo=o("RobertaTokenizer"),Mpo=o(" or "),CN=a("a"),Epo=o("RobertaTokenizerFast"),Cpo=o(" (RoBERTa model)"),wpo=l(),Ns=a("li"),Pie=a("strong"),Apo=o("roformer"),Lpo=o(" \u2014 "),wN=a("a"),ypo=o("RoFormerTokenizer"),xpo=o(" or "),AN=a("a"),$po=o("RoFormerTokenizerFast"),kpo=o(" (RoFormer model)"),Spo=l(),Ch=a("li"),Bie=a("strong"),Rpo=o("speech_to_text"),Ppo=o(" \u2014 "),LN=a("a"),Bpo=o("Speech2TextTokenizer"),Ipo=o(" (Speech2Text model)"),Npo=l(),wh=a("li"),Iie=a("strong"),qpo=o("speech_to_text_2"),jpo=o(" \u2014 "),yN=a("a"),Dpo=o("Speech2Text2Tokenizer"),Gpo=o(" (Speech2Text2 model)"),Opo=l(),qs=a("li"),Nie=a("strong"),Vpo=o("splinter"),Xpo=o(" \u2014 "),xN=a("a"),zpo=o("SplinterTokenizer"),Qpo=o(" or "),$N=a("a"),Wpo=o("SplinterTokenizerFast"),Hpo=o(" (Splinter model)"),Upo=l(),js=a("li"),qie=a("strong"),Jpo=o("squeezebert"),Ypo=o(" \u2014 "),kN=a("a"),Kpo=o("SqueezeBertTokenizer"),Zpo=o(" or "),SN=a("a"),e_o=o("SqueezeBertTokenizerFast"),o_o=o(" (SqueezeBERT model)"),r_o=l(),Ds=a("li"),jie=a("strong"),t_o=o("t5"),a_o=o(" \u2014 "),RN=a("a"),n_o=o("T5Tokenizer"),s_o=o(" or "),PN=a("a"),l_o=o("T5TokenizerFast"),i_o=o(" (T5 model)"),d_o=l(),Ah=a("li"),Die=a("strong"),c_o=o("tapas"),f_o=o(" \u2014 "),BN=a("a"),m_o=o("TapasTokenizer"),g_o=o(" (TAPAS model)"),h_o=l(),Lh=a("li"),Gie=a("strong"),p_o=o("tapex"),__o=o(" \u2014 "),IN=a("a"),u_o=o("TapexTokenizer"),b_o=o(" (TAPEX model)"),v_o=l(),yh=a("li"),Oie=a("strong"),F_o=o("transfo-xl"),T_o=o(" \u2014 "),NN=a("a"),M_o=o("TransfoXLTokenizer"),E_o=o(" (Transformer-XL model)"),C_o=l(),Gs=a("li"),Vie=a("strong"),w_o=o("vilt"),A_o=o(" \u2014 "),qN=a("a"),L_o=o("BertTokenizer"),y_o=o(" or "),jN=a("a"),x_o=o("BertTokenizerFast"),$_o=o(" (ViLT model)"),k_o=l(),Os=a("li"),Xie=a("strong"),S_o=o("visual_bert"),R_o=o(" \u2014 "),DN=a("a"),P_o=o("BertTokenizer"),B_o=o(" or "),GN=a("a"),I_o=o("BertTokenizerFast"),N_o=o(" (VisualBERT model)"),q_o=l(),xh=a("li"),zie=a("strong"),j_o=o("wav2vec2"),D_o=o(" \u2014 "),ON=a("a"),G_o=o("Wav2Vec2CTCTokenizer"),O_o=o(" (Wav2Vec2 model)"),V_o=l(),$h=a("li"),Qie=a("strong"),X_o=o("wav2vec2-conformer"),z_o=o(" \u2014 "),VN=a("a"),Q_o=o("Wav2Vec2CTCTokenizer"),W_o=o(" (Wav2Vec2-Conformer model)"),H_o=l(),kh=a("li"),Wie=a("strong"),U_o=o("wav2vec2_phoneme"),J_o=o(" \u2014 "),XN=a("a"),Y_o=o("Wav2Vec2PhonemeCTCTokenizer"),K_o=o(" (Wav2Vec2Phoneme model)"),Z_o=l(),Vs=a("li"),Hie=a("strong"),euo=o("xglm"),ouo=o(" \u2014 "),zN=a("a"),ruo=o("XGLMTokenizer"),tuo=o(" or "),QN=a("a"),auo=o("XGLMTokenizerFast"),nuo=o(" (XGLM model)"),suo=l(),Sh=a("li"),Uie=a("strong"),luo=o("xlm"),iuo=o(" \u2014 "),WN=a("a"),duo=o("XLMTokenizer"),cuo=o(" (XLM model)"),fuo=l(),Rh=a("li"),Jie=a("strong"),muo=o("xlm-prophetnet"),guo=o(" \u2014 "),HN=a("a"),huo=o("XLMProphetNetTokenizer"),puo=o(" (XLM-ProphetNet model)"),_uo=l(),Xs=a("li"),Yie=a("strong"),uuo=o("xlm-roberta"),buo=o(" \u2014 "),UN=a("a"),vuo=o("XLMRobertaTokenizer"),Fuo=o(" or "),JN=a("a"),Tuo=o("XLMRobertaTokenizerFast"),Muo=o(" (XLM-RoBERTa model)"),Euo=l(),zs=a("li"),Kie=a("strong"),Cuo=o("xlm-roberta-xl"),wuo=o(" \u2014 "),YN=a("a"),Auo=o("RobertaTokenizer"),Luo=o(" or "),KN=a("a"),yuo=o("RobertaTokenizerFast"),xuo=o(" (XLM-RoBERTa-XL model)"),$uo=l(),Qs=a("li"),Zie=a("strong"),kuo=o("xlnet"),Suo=o(" \u2014 "),ZN=a("a"),Ruo=o("XLNetTokenizer"),Puo=o(" or "),eq=a("a"),Buo=o("XLNetTokenizerFast"),Iuo=o(" (XLNet model)"),Nuo=l(),Ws=a("li"),ede=a("strong"),quo=o("yoso"),juo=o(" \u2014 "),oq=a("a"),Duo=o("AlbertTokenizer"),Guo=o(" or "),rq=a("a"),Ouo=o("AlbertTokenizerFast"),Vuo=o(" (YOSO model)"),Xuo=l(),F(Ph.$$.fragment),zuo=l(),Bh=a("div"),F(EL.$$.fragment),Quo=l(),ode=a("p"),Wuo=o("Register a new tokenizer in this mapping."),kXe=l(),ji=a("h2"),Ih=a("a"),rde=a("span"),F(CL.$$.fragment),Huo=l(),tde=a("span"),Uuo=o("AutoFeatureExtractor"),SXe=l(),xo=a("div"),F(wL.$$.fragment),Juo=l(),AL=a("p"),Yuo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),tq=a("a"),Kuo=o("AutoFeatureExtractor.from_pretrained()"),Zuo=o(" class method."),e4o=l(),LL=a("p"),o4o=o("This class cannot be instantiated directly using "),ade=a("code"),r4o=o("__init__()"),t4o=o(" (throws an error)."),a4o=l(),Ue=a("div"),F(yL.$$.fragment),n4o=l(),nde=a("p"),s4o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),l4o=l(),Ba=a("p"),i4o=o("The feature extractor class to instantiate is selected based on the "),sde=a("code"),d4o=o("model_type"),c4o=o(` property of the config object
(either passed as an argument or loaded from `),lde=a("code"),f4o=o("pretrained_model_name_or_path"),m4o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ide=a("code"),g4o=o("pretrained_model_name_or_path"),h4o=o(":"),p4o=l(),Y=a("ul"),Nh=a("li"),dde=a("strong"),_4o=o("beit"),u4o=o(" \u2014 "),aq=a("a"),b4o=o("BeitFeatureExtractor"),v4o=o(" (BEiT model)"),F4o=l(),qh=a("li"),cde=a("strong"),T4o=o("clip"),M4o=o(" \u2014 "),nq=a("a"),E4o=o("CLIPFeatureExtractor"),C4o=o(" (CLIP model)"),w4o=l(),jh=a("li"),fde=a("strong"),A4o=o("convnext"),L4o=o(" \u2014 "),sq=a("a"),y4o=o("ConvNextFeatureExtractor"),x4o=o(" (ConvNeXT model)"),$4o=l(),Dh=a("li"),mde=a("strong"),k4o=o("cvt"),S4o=o(" \u2014 "),lq=a("a"),R4o=o("ConvNextFeatureExtractor"),P4o=o(" (CvT model)"),B4o=l(),Gh=a("li"),gde=a("strong"),I4o=o("data2vec-audio"),N4o=o(" \u2014 "),iq=a("a"),q4o=o("Wav2Vec2FeatureExtractor"),j4o=o(" (Data2VecAudio model)"),D4o=l(),Oh=a("li"),hde=a("strong"),G4o=o("data2vec-vision"),O4o=o(" \u2014 "),dq=a("a"),V4o=o("BeitFeatureExtractor"),X4o=o(" (Data2VecVision model)"),z4o=l(),Vh=a("li"),pde=a("strong"),Q4o=o("deit"),W4o=o(" \u2014 "),cq=a("a"),H4o=o("DeiTFeatureExtractor"),U4o=o(" (DeiT model)"),J4o=l(),Xh=a("li"),_de=a("strong"),Y4o=o("detr"),K4o=o(" \u2014 "),fq=a("a"),Z4o=o("DetrFeatureExtractor"),e2o=o(" (DETR model)"),o2o=l(),zh=a("li"),ude=a("strong"),r2o=o("dpt"),t2o=o(" \u2014 "),mq=a("a"),a2o=o("DPTFeatureExtractor"),n2o=o(" (DPT model)"),s2o=l(),Qh=a("li"),bde=a("strong"),l2o=o("flava"),i2o=o(" \u2014 "),gq=a("a"),d2o=o("FlavaFeatureExtractor"),c2o=o(" (FLAVA model)"),f2o=l(),Wh=a("li"),vde=a("strong"),m2o=o("glpn"),g2o=o(" \u2014 "),hq=a("a"),h2o=o("GLPNFeatureExtractor"),p2o=o(" (GLPN model)"),_2o=l(),Hh=a("li"),Fde=a("strong"),u2o=o("groupvit"),b2o=o(" \u2014 "),pq=a("a"),v2o=o("CLIPFeatureExtractor"),F2o=o(" (GroupViT model)"),T2o=l(),Uh=a("li"),Tde=a("strong"),M2o=o("hubert"),E2o=o(" \u2014 "),_q=a("a"),C2o=o("Wav2Vec2FeatureExtractor"),w2o=o(" (Hubert model)"),A2o=l(),Jh=a("li"),Mde=a("strong"),L2o=o("imagegpt"),y2o=o(" \u2014 "),uq=a("a"),x2o=o("ImageGPTFeatureExtractor"),$2o=o(" (ImageGPT model)"),k2o=l(),Yh=a("li"),Ede=a("strong"),S2o=o("layoutlmv2"),R2o=o(" \u2014 "),bq=a("a"),P2o=o("LayoutLMv2FeatureExtractor"),B2o=o(" (LayoutLMv2 model)"),I2o=l(),Kh=a("li"),Cde=a("strong"),N2o=o("layoutlmv3"),q2o=o(" \u2014 "),vq=a("a"),j2o=o("LayoutLMv3FeatureExtractor"),D2o=o(" (LayoutLMv3 model)"),G2o=l(),Zh=a("li"),wde=a("strong"),O2o=o("levit"),V2o=o(" \u2014 "),Fq=a("a"),X2o=o("LevitFeatureExtractor"),z2o=o(" (LeViT model)"),Q2o=l(),ep=a("li"),Ade=a("strong"),W2o=o("maskformer"),H2o=o(" \u2014 "),Tq=a("a"),U2o=o("MaskFormerFeatureExtractor"),J2o=o(" (MaskFormer model)"),Y2o=l(),op=a("li"),Lde=a("strong"),K2o=o("mctct"),Z2o=o(" \u2014 "),Mq=a("a"),e1o=o("MCTCTFeatureExtractor"),o1o=o(" (M-CTC-T model)"),r1o=l(),rp=a("li"),yde=a("strong"),t1o=o("mobilevit"),a1o=o(" \u2014 "),Eq=a("a"),n1o=o("MobileViTFeatureExtractor"),s1o=o(" (MobileViT model)"),l1o=l(),tp=a("li"),xde=a("strong"),i1o=o("perceiver"),d1o=o(" \u2014 "),Cq=a("a"),c1o=o("PerceiverFeatureExtractor"),f1o=o(" (Perceiver model)"),m1o=l(),ap=a("li"),$de=a("strong"),g1o=o("poolformer"),h1o=o(" \u2014 "),wq=a("a"),p1o=o("PoolFormerFeatureExtractor"),_1o=o(" (PoolFormer model)"),u1o=l(),np=a("li"),kde=a("strong"),b1o=o("regnet"),v1o=o(" \u2014 "),Aq=a("a"),F1o=o("ConvNextFeatureExtractor"),T1o=o(" (RegNet model)"),M1o=l(),sp=a("li"),Sde=a("strong"),E1o=o("resnet"),C1o=o(" \u2014 "),Lq=a("a"),w1o=o("ConvNextFeatureExtractor"),A1o=o(" (ResNet model)"),L1o=l(),lp=a("li"),Rde=a("strong"),y1o=o("segformer"),x1o=o(" \u2014 "),yq=a("a"),$1o=o("SegformerFeatureExtractor"),k1o=o(" (SegFormer model)"),S1o=l(),ip=a("li"),Pde=a("strong"),R1o=o("speech_to_text"),P1o=o(" \u2014 "),xq=a("a"),B1o=o("Speech2TextFeatureExtractor"),I1o=o(" (Speech2Text model)"),N1o=l(),dp=a("li"),Bde=a("strong"),q1o=o("swin"),j1o=o(" \u2014 "),$q=a("a"),D1o=o("ViTFeatureExtractor"),G1o=o(" (Swin Transformer model)"),O1o=l(),cp=a("li"),Ide=a("strong"),V1o=o("van"),X1o=o(" \u2014 "),kq=a("a"),z1o=o("ConvNextFeatureExtractor"),Q1o=o(" (VAN model)"),W1o=l(),fp=a("li"),Nde=a("strong"),H1o=o("vilt"),U1o=o(" \u2014 "),Sq=a("a"),J1o=o("ViltFeatureExtractor"),Y1o=o(" (ViLT model)"),K1o=l(),mp=a("li"),qde=a("strong"),Z1o=o("vit"),ebo=o(" \u2014 "),Rq=a("a"),obo=o("ViTFeatureExtractor"),rbo=o(" (ViT model)"),tbo=l(),gp=a("li"),jde=a("strong"),abo=o("vit_mae"),nbo=o(" \u2014 "),Pq=a("a"),sbo=o("ViTFeatureExtractor"),lbo=o(" (ViTMAE model)"),ibo=l(),hp=a("li"),Dde=a("strong"),dbo=o("wav2vec2"),cbo=o(" \u2014 "),Bq=a("a"),fbo=o("Wav2Vec2FeatureExtractor"),mbo=o(" (Wav2Vec2 model)"),gbo=l(),pp=a("li"),Gde=a("strong"),hbo=o("wav2vec2-conformer"),pbo=o(" \u2014 "),Iq=a("a"),_bo=o("Wav2Vec2FeatureExtractor"),ubo=o(" (Wav2Vec2-Conformer model)"),bbo=l(),_p=a("li"),Ode=a("strong"),vbo=o("yolos"),Fbo=o(" \u2014 "),Nq=a("a"),Tbo=o("YolosFeatureExtractor"),Mbo=o(" (YOLOS model)"),Ebo=l(),F(up.$$.fragment),Cbo=l(),F(bp.$$.fragment),wbo=l(),vp=a("div"),F(xL.$$.fragment),Abo=l(),Vde=a("p"),Lbo=o("Register a new feature extractor for this class."),RXe=l(),Di=a("h2"),Fp=a("a"),Xde=a("span"),F($L.$$.fragment),ybo=l(),zde=a("span"),xbo=o("AutoProcessor"),PXe=l(),$o=a("div"),F(kL.$$.fragment),$bo=l(),SL=a("p"),kbo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),qq=a("a"),Sbo=o("AutoProcessor.from_pretrained()"),Rbo=o(" class method."),Pbo=l(),RL=a("p"),Bbo=o("This class cannot be instantiated directly using "),Qde=a("code"),Ibo=o("__init__()"),Nbo=o(" (throws an error)."),qbo=l(),Je=a("div"),F(PL.$$.fragment),jbo=l(),Wde=a("p"),Dbo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Gbo=l(),Gi=a("p"),Obo=o("The processor class to instantiate is selected based on the "),Hde=a("code"),Vbo=o("model_type"),Xbo=o(` property of the config object (either
passed as an argument or loaded from `),Ude=a("code"),zbo=o("pretrained_model_name_or_path"),Qbo=o(" if possible):"),Wbo=l(),pe=a("ul"),Tp=a("li"),Jde=a("strong"),Hbo=o("clip"),Ubo=o(" \u2014 "),jq=a("a"),Jbo=o("CLIPProcessor"),Ybo=o(" (CLIP model)"),Kbo=l(),Mp=a("li"),Yde=a("strong"),Zbo=o("flava"),evo=o(" \u2014 "),Dq=a("a"),ovo=o("FlavaProcessor"),rvo=o(" (FLAVA model)"),tvo=l(),Ep=a("li"),Kde=a("strong"),avo=o("groupvit"),nvo=o(" \u2014 "),Gq=a("a"),svo=o("CLIPProcessor"),lvo=o(" (GroupViT model)"),ivo=l(),Cp=a("li"),Zde=a("strong"),dvo=o("layoutlmv2"),cvo=o(" \u2014 "),Oq=a("a"),fvo=o("LayoutLMv2Processor"),mvo=o(" (LayoutLMv2 model)"),gvo=l(),wp=a("li"),ece=a("strong"),hvo=o("layoutlmv3"),pvo=o(" \u2014 "),Vq=a("a"),_vo=o("LayoutLMv3Processor"),uvo=o(" (LayoutLMv3 model)"),bvo=l(),Ap=a("li"),oce=a("strong"),vvo=o("layoutxlm"),Fvo=o(" \u2014 "),Xq=a("a"),Tvo=o("LayoutXLMProcessor"),Mvo=o(" (LayoutXLM model)"),Evo=l(),Lp=a("li"),rce=a("strong"),Cvo=o("sew"),wvo=o(" \u2014 "),zq=a("a"),Avo=o("Wav2Vec2Processor"),Lvo=o(" (SEW model)"),yvo=l(),yp=a("li"),tce=a("strong"),xvo=o("sew-d"),$vo=o(" \u2014 "),Qq=a("a"),kvo=o("Wav2Vec2Processor"),Svo=o(" (SEW-D model)"),Rvo=l(),xp=a("li"),ace=a("strong"),Pvo=o("speech_to_text"),Bvo=o(" \u2014 "),Wq=a("a"),Ivo=o("Speech2TextProcessor"),Nvo=o(" (Speech2Text model)"),qvo=l(),$p=a("li"),nce=a("strong"),jvo=o("speech_to_text_2"),Dvo=o(" \u2014 "),Hq=a("a"),Gvo=o("Speech2Text2Processor"),Ovo=o(" (Speech2Text2 model)"),Vvo=l(),kp=a("li"),sce=a("strong"),Xvo=o("trocr"),zvo=o(" \u2014 "),Uq=a("a"),Qvo=o("TrOCRProcessor"),Wvo=o(" (TrOCR model)"),Hvo=l(),Sp=a("li"),lce=a("strong"),Uvo=o("unispeech"),Jvo=o(" \u2014 "),Jq=a("a"),Yvo=o("Wav2Vec2Processor"),Kvo=o(" (UniSpeech model)"),Zvo=l(),Rp=a("li"),ice=a("strong"),eFo=o("unispeech-sat"),oFo=o(" \u2014 "),Yq=a("a"),rFo=o("Wav2Vec2Processor"),tFo=o(" (UniSpeechSat model)"),aFo=l(),Pp=a("li"),dce=a("strong"),nFo=o("vilt"),sFo=o(" \u2014 "),Kq=a("a"),lFo=o("ViltProcessor"),iFo=o(" (ViLT model)"),dFo=l(),Bp=a("li"),cce=a("strong"),cFo=o("vision-text-dual-encoder"),fFo=o(" \u2014 "),Zq=a("a"),mFo=o("VisionTextDualEncoderProcessor"),gFo=o(" (VisionTextDualEncoder model)"),hFo=l(),Ip=a("li"),fce=a("strong"),pFo=o("wav2vec2"),_Fo=o(" \u2014 "),ej=a("a"),uFo=o("Wav2Vec2Processor"),bFo=o(" (Wav2Vec2 model)"),vFo=l(),Np=a("li"),mce=a("strong"),FFo=o("wav2vec2-conformer"),TFo=o(" \u2014 "),oj=a("a"),MFo=o("Wav2Vec2Processor"),EFo=o(" (Wav2Vec2-Conformer model)"),CFo=l(),qp=a("li"),gce=a("strong"),wFo=o("wavlm"),AFo=o(" \u2014 "),rj=a("a"),LFo=o("Wav2Vec2Processor"),yFo=o(" (WavLM model)"),xFo=l(),F(jp.$$.fragment),$Fo=l(),F(Dp.$$.fragment),kFo=l(),Gp=a("div"),F(BL.$$.fragment),SFo=l(),hce=a("p"),RFo=o("Register a new processor for this class."),BXe=l(),Oi=a("h2"),Op=a("a"),pce=a("span"),F(IL.$$.fragment),PFo=l(),_ce=a("span"),BFo=o("AutoModel"),IXe=l(),ko=a("div"),F(NL.$$.fragment),IFo=l(),Vi=a("p"),NFo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tj=a("a"),qFo=o("from_pretrained()"),jFo=o(" class method or the "),aj=a("a"),DFo=o("from_config()"),GFo=o(` class
method.`),OFo=l(),qL=a("p"),VFo=o("This class cannot be instantiated directly using "),uce=a("code"),XFo=o("__init__()"),zFo=o(" (throws an error)."),QFo=l(),it=a("div"),F(jL.$$.fragment),WFo=l(),bce=a("p"),HFo=o("Instantiates one of the base model classes of the library from a configuration."),UFo=l(),Xi=a("p"),JFo=o(`Note:
Loading a model from its configuration file does `),vce=a("strong"),YFo=o("not"),KFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=a("a"),ZFo=o("from_pretrained()"),eTo=o(" to load the model weights."),oTo=l(),F(Vp.$$.fragment),rTo=l(),Ye=a("div"),F(DL.$$.fragment),tTo=l(),Fce=a("p"),aTo=o("Instantiate one of the base model classes of the library from a pretrained model."),nTo=l(),Ia=a("p"),sTo=o("The model class to instantiate is selected based on the "),Tce=a("code"),lTo=o("model_type"),iTo=o(` property of the config object (either
passed as an argument or loaded from `),Mce=a("code"),dTo=o("pretrained_model_name_or_path"),cTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=a("code"),fTo=o("pretrained_model_name_or_path"),mTo=o(":"),gTo=l(),y=a("ul"),Xp=a("li"),Cce=a("strong"),hTo=o("albert"),pTo=o(" \u2014 "),sj=a("a"),_To=o("AlbertModel"),uTo=o(" (ALBERT model)"),bTo=l(),zp=a("li"),wce=a("strong"),vTo=o("bart"),FTo=o(" \u2014 "),lj=a("a"),TTo=o("BartModel"),MTo=o(" (BART model)"),ETo=l(),Qp=a("li"),Ace=a("strong"),CTo=o("beit"),wTo=o(" \u2014 "),ij=a("a"),ATo=o("BeitModel"),LTo=o(" (BEiT model)"),yTo=l(),Wp=a("li"),Lce=a("strong"),xTo=o("bert"),$To=o(" \u2014 "),dj=a("a"),kTo=o("BertModel"),STo=o(" (BERT model)"),RTo=l(),Hp=a("li"),yce=a("strong"),PTo=o("bert-generation"),BTo=o(" \u2014 "),cj=a("a"),ITo=o("BertGenerationEncoder"),NTo=o(" (Bert Generation model)"),qTo=l(),Up=a("li"),xce=a("strong"),jTo=o("big_bird"),DTo=o(" \u2014 "),fj=a("a"),GTo=o("BigBirdModel"),OTo=o(" (BigBird model)"),VTo=l(),Jp=a("li"),$ce=a("strong"),XTo=o("bigbird_pegasus"),zTo=o(" \u2014 "),mj=a("a"),QTo=o("BigBirdPegasusModel"),WTo=o(" (BigBird-Pegasus model)"),HTo=l(),Yp=a("li"),kce=a("strong"),UTo=o("blenderbot"),JTo=o(" \u2014 "),gj=a("a"),YTo=o("BlenderbotModel"),KTo=o(" (Blenderbot model)"),ZTo=l(),Kp=a("li"),Sce=a("strong"),e8o=o("blenderbot-small"),o8o=o(" \u2014 "),hj=a("a"),r8o=o("BlenderbotSmallModel"),t8o=o(" (BlenderbotSmall model)"),a8o=l(),Zp=a("li"),Rce=a("strong"),n8o=o("bloom"),s8o=o(" \u2014 "),pj=a("a"),l8o=o("BloomModel"),i8o=o(" (BLOOM model)"),d8o=l(),e_=a("li"),Pce=a("strong"),c8o=o("camembert"),f8o=o(" \u2014 "),_j=a("a"),m8o=o("CamembertModel"),g8o=o(" (CamemBERT model)"),h8o=l(),o_=a("li"),Bce=a("strong"),p8o=o("canine"),_8o=o(" \u2014 "),uj=a("a"),u8o=o("CanineModel"),b8o=o(" (CANINE model)"),v8o=l(),r_=a("li"),Ice=a("strong"),F8o=o("clip"),T8o=o(" \u2014 "),bj=a("a"),M8o=o("CLIPModel"),E8o=o(" (CLIP model)"),C8o=l(),t_=a("li"),Nce=a("strong"),w8o=o("codegen"),A8o=o(" \u2014 "),vj=a("a"),L8o=o("CodeGenModel"),y8o=o(" (CodeGen model)"),x8o=l(),a_=a("li"),qce=a("strong"),$8o=o("convbert"),k8o=o(" \u2014 "),Fj=a("a"),S8o=o("ConvBertModel"),R8o=o(" (ConvBERT model)"),P8o=l(),n_=a("li"),jce=a("strong"),B8o=o("convnext"),I8o=o(" \u2014 "),Tj=a("a"),N8o=o("ConvNextModel"),q8o=o(" (ConvNeXT model)"),j8o=l(),s_=a("li"),Dce=a("strong"),D8o=o("ctrl"),G8o=o(" \u2014 "),Mj=a("a"),O8o=o("CTRLModel"),V8o=o(" (CTRL model)"),X8o=l(),l_=a("li"),Gce=a("strong"),z8o=o("cvt"),Q8o=o(" \u2014 "),Ej=a("a"),W8o=o("CvtModel"),H8o=o(" (CvT model)"),U8o=l(),i_=a("li"),Oce=a("strong"),J8o=o("data2vec-audio"),Y8o=o(" \u2014 "),Cj=a("a"),K8o=o("Data2VecAudioModel"),Z8o=o(" (Data2VecAudio model)"),eMo=l(),d_=a("li"),Vce=a("strong"),oMo=o("data2vec-text"),rMo=o(" \u2014 "),wj=a("a"),tMo=o("Data2VecTextModel"),aMo=o(" (Data2VecText model)"),nMo=l(),c_=a("li"),Xce=a("strong"),sMo=o("data2vec-vision"),lMo=o(" \u2014 "),Aj=a("a"),iMo=o("Data2VecVisionModel"),dMo=o(" (Data2VecVision model)"),cMo=l(),f_=a("li"),zce=a("strong"),fMo=o("deberta"),mMo=o(" \u2014 "),Lj=a("a"),gMo=o("DebertaModel"),hMo=o(" (DeBERTa model)"),pMo=l(),m_=a("li"),Qce=a("strong"),_Mo=o("deberta-v2"),uMo=o(" \u2014 "),yj=a("a"),bMo=o("DebertaV2Model"),vMo=o(" (DeBERTa-v2 model)"),FMo=l(),g_=a("li"),Wce=a("strong"),TMo=o("decision_transformer"),MMo=o(" \u2014 "),xj=a("a"),EMo=o("DecisionTransformerModel"),CMo=o(" (Decision Transformer model)"),wMo=l(),h_=a("li"),Hce=a("strong"),AMo=o("deit"),LMo=o(" \u2014 "),$j=a("a"),yMo=o("DeiTModel"),xMo=o(" (DeiT model)"),$Mo=l(),p_=a("li"),Uce=a("strong"),kMo=o("detr"),SMo=o(" \u2014 "),kj=a("a"),RMo=o("DetrModel"),PMo=o(" (DETR model)"),BMo=l(),__=a("li"),Jce=a("strong"),IMo=o("distilbert"),NMo=o(" \u2014 "),Sj=a("a"),qMo=o("DistilBertModel"),jMo=o(" (DistilBERT model)"),DMo=l(),u_=a("li"),Yce=a("strong"),GMo=o("dpr"),OMo=o(" \u2014 "),Rj=a("a"),VMo=o("DPRQuestionEncoder"),XMo=o(" (DPR model)"),zMo=l(),b_=a("li"),Kce=a("strong"),QMo=o("dpt"),WMo=o(" \u2014 "),Pj=a("a"),HMo=o("DPTModel"),UMo=o(" (DPT model)"),JMo=l(),v_=a("li"),Zce=a("strong"),YMo=o("electra"),KMo=o(" \u2014 "),Bj=a("a"),ZMo=o("ElectraModel"),eEo=o(" (ELECTRA model)"),oEo=l(),F_=a("li"),efe=a("strong"),rEo=o("flaubert"),tEo=o(" \u2014 "),Ij=a("a"),aEo=o("FlaubertModel"),nEo=o(" (FlauBERT model)"),sEo=l(),T_=a("li"),ofe=a("strong"),lEo=o("flava"),iEo=o(" \u2014 "),Nj=a("a"),dEo=o("FlavaModel"),cEo=o(" (FLAVA model)"),fEo=l(),M_=a("li"),rfe=a("strong"),mEo=o("fnet"),gEo=o(" \u2014 "),qj=a("a"),hEo=o("FNetModel"),pEo=o(" (FNet model)"),_Eo=l(),E_=a("li"),tfe=a("strong"),uEo=o("fsmt"),bEo=o(" \u2014 "),jj=a("a"),vEo=o("FSMTModel"),FEo=o(" (FairSeq Machine-Translation model)"),TEo=l(),Hs=a("li"),afe=a("strong"),MEo=o("funnel"),EEo=o(" \u2014 "),Dj=a("a"),CEo=o("FunnelModel"),wEo=o(" or "),Gj=a("a"),AEo=o("FunnelBaseModel"),LEo=o(" (Funnel Transformer model)"),yEo=l(),C_=a("li"),nfe=a("strong"),xEo=o("glpn"),$Eo=o(" \u2014 "),Oj=a("a"),kEo=o("GLPNModel"),SEo=o(" (GLPN model)"),REo=l(),w_=a("li"),sfe=a("strong"),PEo=o("gpt2"),BEo=o(" \u2014 "),Vj=a("a"),IEo=o("GPT2Model"),NEo=o(" (OpenAI GPT-2 model)"),qEo=l(),A_=a("li"),lfe=a("strong"),jEo=o("gpt_neo"),DEo=o(" \u2014 "),Xj=a("a"),GEo=o("GPTNeoModel"),OEo=o(" (GPT Neo model)"),VEo=l(),L_=a("li"),ife=a("strong"),XEo=o("gpt_neox"),zEo=o(" \u2014 "),zj=a("a"),QEo=o("GPTNeoXModel"),WEo=o(" (GPT NeoX model)"),HEo=l(),y_=a("li"),dfe=a("strong"),UEo=o("gptj"),JEo=o(" \u2014 "),Qj=a("a"),YEo=o("GPTJModel"),KEo=o(" (GPT-J model)"),ZEo=l(),x_=a("li"),cfe=a("strong"),eCo=o("groupvit"),oCo=o(" \u2014 "),Wj=a("a"),rCo=o("GroupViTModel"),tCo=o(" (GroupViT model)"),aCo=l(),$_=a("li"),ffe=a("strong"),nCo=o("hubert"),sCo=o(" \u2014 "),Hj=a("a"),lCo=o("HubertModel"),iCo=o(" (Hubert model)"),dCo=l(),k_=a("li"),mfe=a("strong"),cCo=o("ibert"),fCo=o(" \u2014 "),Uj=a("a"),mCo=o("IBertModel"),gCo=o(" (I-BERT model)"),hCo=l(),S_=a("li"),gfe=a("strong"),pCo=o("imagegpt"),_Co=o(" \u2014 "),Jj=a("a"),uCo=o("ImageGPTModel"),bCo=o(" (ImageGPT model)"),vCo=l(),R_=a("li"),hfe=a("strong"),FCo=o("layoutlm"),TCo=o(" \u2014 "),Yj=a("a"),MCo=o("LayoutLMModel"),ECo=o(" (LayoutLM model)"),CCo=l(),P_=a("li"),pfe=a("strong"),wCo=o("layoutlmv2"),ACo=o(" \u2014 "),Kj=a("a"),LCo=o("LayoutLMv2Model"),yCo=o(" (LayoutLMv2 model)"),xCo=l(),B_=a("li"),_fe=a("strong"),$Co=o("layoutlmv3"),kCo=o(" \u2014 "),Zj=a("a"),SCo=o("LayoutLMv3Model"),RCo=o(" (LayoutLMv3 model)"),PCo=l(),I_=a("li"),ufe=a("strong"),BCo=o("led"),ICo=o(" \u2014 "),eD=a("a"),NCo=o("LEDModel"),qCo=o(" (LED model)"),jCo=l(),N_=a("li"),bfe=a("strong"),DCo=o("levit"),GCo=o(" \u2014 "),oD=a("a"),OCo=o("LevitModel"),VCo=o(" (LeViT model)"),XCo=l(),q_=a("li"),vfe=a("strong"),zCo=o("longformer"),QCo=o(" \u2014 "),rD=a("a"),WCo=o("LongformerModel"),HCo=o(" (Longformer model)"),UCo=l(),j_=a("li"),Ffe=a("strong"),JCo=o("longt5"),YCo=o(" \u2014 "),tD=a("a"),KCo=o("LongT5Model"),ZCo=o(" (LongT5 model)"),e3o=l(),D_=a("li"),Tfe=a("strong"),o3o=o("luke"),r3o=o(" \u2014 "),aD=a("a"),t3o=o("LukeModel"),a3o=o(" (LUKE model)"),n3o=l(),G_=a("li"),Mfe=a("strong"),s3o=o("lxmert"),l3o=o(" \u2014 "),nD=a("a"),i3o=o("LxmertModel"),d3o=o(" (LXMERT model)"),c3o=l(),O_=a("li"),Efe=a("strong"),f3o=o("m2m_100"),m3o=o(" \u2014 "),sD=a("a"),g3o=o("M2M100Model"),h3o=o(" (M2M100 model)"),p3o=l(),V_=a("li"),Cfe=a("strong"),_3o=o("marian"),u3o=o(" \u2014 "),lD=a("a"),b3o=o("MarianModel"),v3o=o(" (Marian model)"),F3o=l(),X_=a("li"),wfe=a("strong"),T3o=o("maskformer"),M3o=o(" \u2014 "),iD=a("a"),E3o=o("MaskFormerModel"),C3o=o(" (MaskFormer model)"),w3o=l(),z_=a("li"),Afe=a("strong"),A3o=o("mbart"),L3o=o(" \u2014 "),dD=a("a"),y3o=o("MBartModel"),x3o=o(" (mBART model)"),$3o=l(),Q_=a("li"),Lfe=a("strong"),k3o=o("mctct"),S3o=o(" \u2014 "),cD=a("a"),R3o=o("MCTCTModel"),P3o=o(" (M-CTC-T model)"),B3o=l(),W_=a("li"),yfe=a("strong"),I3o=o("megatron-bert"),N3o=o(" \u2014 "),fD=a("a"),q3o=o("MegatronBertModel"),j3o=o(" (Megatron-BERT model)"),D3o=l(),H_=a("li"),xfe=a("strong"),G3o=o("mobilebert"),O3o=o(" \u2014 "),mD=a("a"),V3o=o("MobileBertModel"),X3o=o(" (MobileBERT model)"),z3o=l(),U_=a("li"),$fe=a("strong"),Q3o=o("mobilevit"),W3o=o(" \u2014 "),gD=a("a"),H3o=o("MobileViTModel"),U3o=o(" (MobileViT model)"),J3o=l(),J_=a("li"),kfe=a("strong"),Y3o=o("mpnet"),K3o=o(" \u2014 "),hD=a("a"),Z3o=o("MPNetModel"),e5o=o(" (MPNet model)"),o5o=l(),Y_=a("li"),Sfe=a("strong"),r5o=o("mt5"),t5o=o(" \u2014 "),pD=a("a"),a5o=o("MT5Model"),n5o=o(" (MT5 model)"),s5o=l(),K_=a("li"),Rfe=a("strong"),l5o=o("mvp"),i5o=o(" \u2014 "),_D=a("a"),d5o=o("MvpModel"),c5o=o(" (MVP model)"),f5o=l(),Z_=a("li"),Pfe=a("strong"),m5o=o("nezha"),g5o=o(" \u2014 "),uD=a("a"),h5o=o("NezhaModel"),p5o=o(" (Nezha model)"),_5o=l(),eu=a("li"),Bfe=a("strong"),u5o=o("nllb"),b5o=o(" \u2014 "),bD=a("a"),v5o=o("M2M100Model"),F5o=o(" (NLLB model)"),T5o=l(),ou=a("li"),Ife=a("strong"),M5o=o("nystromformer"),E5o=o(" \u2014 "),vD=a("a"),C5o=o("NystromformerModel"),w5o=o(" (Nystr\xF6mformer model)"),A5o=l(),ru=a("li"),Nfe=a("strong"),L5o=o("openai-gpt"),y5o=o(" \u2014 "),FD=a("a"),x5o=o("OpenAIGPTModel"),$5o=o(" (OpenAI GPT model)"),k5o=l(),tu=a("li"),qfe=a("strong"),S5o=o("opt"),R5o=o(" \u2014 "),TD=a("a"),P5o=o("OPTModel"),B5o=o(" (OPT model)"),I5o=l(),au=a("li"),jfe=a("strong"),N5o=o("pegasus"),q5o=o(" \u2014 "),MD=a("a"),j5o=o("PegasusModel"),D5o=o(" (Pegasus model)"),G5o=l(),nu=a("li"),Dfe=a("strong"),O5o=o("perceiver"),V5o=o(" \u2014 "),ED=a("a"),X5o=o("PerceiverModel"),z5o=o(" (Perceiver model)"),Q5o=l(),su=a("li"),Gfe=a("strong"),W5o=o("plbart"),H5o=o(" \u2014 "),CD=a("a"),U5o=o("PLBartModel"),J5o=o(" (PLBart model)"),Y5o=l(),lu=a("li"),Ofe=a("strong"),K5o=o("poolformer"),Z5o=o(" \u2014 "),wD=a("a"),e0o=o("PoolFormerModel"),o0o=o(" (PoolFormer model)"),r0o=l(),iu=a("li"),Vfe=a("strong"),t0o=o("prophetnet"),a0o=o(" \u2014 "),AD=a("a"),n0o=o("ProphetNetModel"),s0o=o(" (ProphetNet model)"),l0o=l(),du=a("li"),Xfe=a("strong"),i0o=o("qdqbert"),d0o=o(" \u2014 "),LD=a("a"),c0o=o("QDQBertModel"),f0o=o(" (QDQBert model)"),m0o=l(),cu=a("li"),zfe=a("strong"),g0o=o("reformer"),h0o=o(" \u2014 "),yD=a("a"),p0o=o("ReformerModel"),_0o=o(" (Reformer model)"),u0o=l(),fu=a("li"),Qfe=a("strong"),b0o=o("regnet"),v0o=o(" \u2014 "),xD=a("a"),F0o=o("RegNetModel"),T0o=o(" (RegNet model)"),M0o=l(),mu=a("li"),Wfe=a("strong"),E0o=o("rembert"),C0o=o(" \u2014 "),$D=a("a"),w0o=o("RemBertModel"),A0o=o(" (RemBERT model)"),L0o=l(),gu=a("li"),Hfe=a("strong"),y0o=o("resnet"),x0o=o(" \u2014 "),kD=a("a"),$0o=o("ResNetModel"),k0o=o(" (ResNet model)"),S0o=l(),hu=a("li"),Ufe=a("strong"),R0o=o("retribert"),P0o=o(" \u2014 "),SD=a("a"),B0o=o("RetriBertModel"),I0o=o(" (RetriBERT model)"),N0o=l(),pu=a("li"),Jfe=a("strong"),q0o=o("roberta"),j0o=o(" \u2014 "),RD=a("a"),D0o=o("RobertaModel"),G0o=o(" (RoBERTa model)"),O0o=l(),_u=a("li"),Yfe=a("strong"),V0o=o("roformer"),X0o=o(" \u2014 "),PD=a("a"),z0o=o("RoFormerModel"),Q0o=o(" (RoFormer model)"),W0o=l(),uu=a("li"),Kfe=a("strong"),H0o=o("segformer"),U0o=o(" \u2014 "),BD=a("a"),J0o=o("SegformerModel"),Y0o=o(" (SegFormer model)"),K0o=l(),bu=a("li"),Zfe=a("strong"),Z0o=o("sew"),ewo=o(" \u2014 "),ID=a("a"),owo=o("SEWModel"),rwo=o(" (SEW model)"),two=l(),vu=a("li"),eme=a("strong"),awo=o("sew-d"),nwo=o(" \u2014 "),ND=a("a"),swo=o("SEWDModel"),lwo=o(" (SEW-D model)"),iwo=l(),Fu=a("li"),ome=a("strong"),dwo=o("speech_to_text"),cwo=o(" \u2014 "),qD=a("a"),fwo=o("Speech2TextModel"),mwo=o(" (Speech2Text model)"),gwo=l(),Tu=a("li"),rme=a("strong"),hwo=o("splinter"),pwo=o(" \u2014 "),jD=a("a"),_wo=o("SplinterModel"),uwo=o(" (Splinter model)"),bwo=l(),Mu=a("li"),tme=a("strong"),vwo=o("squeezebert"),Fwo=o(" \u2014 "),DD=a("a"),Two=o("SqueezeBertModel"),Mwo=o(" (SqueezeBERT model)"),Ewo=l(),Eu=a("li"),ame=a("strong"),Cwo=o("swin"),wwo=o(" \u2014 "),GD=a("a"),Awo=o("SwinModel"),Lwo=o(" (Swin Transformer model)"),ywo=l(),Cu=a("li"),nme=a("strong"),xwo=o("t5"),$wo=o(" \u2014 "),OD=a("a"),kwo=o("T5Model"),Swo=o(" (T5 model)"),Rwo=l(),wu=a("li"),sme=a("strong"),Pwo=o("tapas"),Bwo=o(" \u2014 "),VD=a("a"),Iwo=o("TapasModel"),Nwo=o(" (TAPAS model)"),qwo=l(),Au=a("li"),lme=a("strong"),jwo=o("trajectory_transformer"),Dwo=o(" \u2014 "),XD=a("a"),Gwo=o("TrajectoryTransformerModel"),Owo=o(" (Trajectory Transformer model)"),Vwo=l(),Lu=a("li"),ime=a("strong"),Xwo=o("transfo-xl"),zwo=o(" \u2014 "),zD=a("a"),Qwo=o("TransfoXLModel"),Wwo=o(" (Transformer-XL model)"),Hwo=l(),yu=a("li"),dme=a("strong"),Uwo=o("unispeech"),Jwo=o(" \u2014 "),QD=a("a"),Ywo=o("UniSpeechModel"),Kwo=o(" (UniSpeech model)"),Zwo=l(),xu=a("li"),cme=a("strong"),eAo=o("unispeech-sat"),oAo=o(" \u2014 "),WD=a("a"),rAo=o("UniSpeechSatModel"),tAo=o(" (UniSpeechSat model)"),aAo=l(),$u=a("li"),fme=a("strong"),nAo=o("van"),sAo=o(" \u2014 "),HD=a("a"),lAo=o("VanModel"),iAo=o(" (VAN model)"),dAo=l(),ku=a("li"),mme=a("strong"),cAo=o("vilt"),fAo=o(" \u2014 "),UD=a("a"),mAo=o("ViltModel"),gAo=o(" (ViLT model)"),hAo=l(),Su=a("li"),gme=a("strong"),pAo=o("vision-text-dual-encoder"),_Ao=o(" \u2014 "),JD=a("a"),uAo=o("VisionTextDualEncoderModel"),bAo=o(" (VisionTextDualEncoder model)"),vAo=l(),Ru=a("li"),hme=a("strong"),FAo=o("visual_bert"),TAo=o(" \u2014 "),YD=a("a"),MAo=o("VisualBertModel"),EAo=o(" (VisualBERT model)"),CAo=l(),Pu=a("li"),pme=a("strong"),wAo=o("vit"),AAo=o(" \u2014 "),KD=a("a"),LAo=o("ViTModel"),yAo=o(" (ViT model)"),xAo=l(),Bu=a("li"),_me=a("strong"),$Ao=o("vit_mae"),kAo=o(" \u2014 "),ZD=a("a"),SAo=o("ViTMAEModel"),RAo=o(" (ViTMAE model)"),PAo=l(),Iu=a("li"),ume=a("strong"),BAo=o("wav2vec2"),IAo=o(" \u2014 "),eG=a("a"),NAo=o("Wav2Vec2Model"),qAo=o(" (Wav2Vec2 model)"),jAo=l(),Nu=a("li"),bme=a("strong"),DAo=o("wav2vec2-conformer"),GAo=o(" \u2014 "),oG=a("a"),OAo=o("Wav2Vec2ConformerModel"),VAo=o(" (Wav2Vec2-Conformer model)"),XAo=l(),qu=a("li"),vme=a("strong"),zAo=o("wavlm"),QAo=o(" \u2014 "),rG=a("a"),WAo=o("WavLMModel"),HAo=o(" (WavLM model)"),UAo=l(),ju=a("li"),Fme=a("strong"),JAo=o("xglm"),YAo=o(" \u2014 "),tG=a("a"),KAo=o("XGLMModel"),ZAo=o(" (XGLM model)"),e6o=l(),Du=a("li"),Tme=a("strong"),o6o=o("xlm"),r6o=o(" \u2014 "),aG=a("a"),t6o=o("XLMModel"),a6o=o(" (XLM model)"),n6o=l(),Gu=a("li"),Mme=a("strong"),s6o=o("xlm-prophetnet"),l6o=o(" \u2014 "),nG=a("a"),i6o=o("XLMProphetNetModel"),d6o=o(" (XLM-ProphetNet model)"),c6o=l(),Ou=a("li"),Eme=a("strong"),f6o=o("xlm-roberta"),m6o=o(" \u2014 "),sG=a("a"),g6o=o("XLMRobertaModel"),h6o=o(" (XLM-RoBERTa model)"),p6o=l(),Vu=a("li"),Cme=a("strong"),_6o=o("xlm-roberta-xl"),u6o=o(" \u2014 "),lG=a("a"),b6o=o("XLMRobertaXLModel"),v6o=o(" (XLM-RoBERTa-XL model)"),F6o=l(),Xu=a("li"),wme=a("strong"),T6o=o("xlnet"),M6o=o(" \u2014 "),iG=a("a"),E6o=o("XLNetModel"),C6o=o(" (XLNet model)"),w6o=l(),zu=a("li"),Ame=a("strong"),A6o=o("yolos"),L6o=o(" \u2014 "),dG=a("a"),y6o=o("YolosModel"),x6o=o(" (YOLOS model)"),$6o=l(),Qu=a("li"),Lme=a("strong"),k6o=o("yoso"),S6o=o(" \u2014 "),cG=a("a"),R6o=o("YosoModel"),P6o=o(" (YOSO model)"),B6o=l(),Wu=a("p"),I6o=o("The model is set in evaluation mode by default using "),yme=a("code"),N6o=o("model.eval()"),q6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=a("code"),j6o=o("model.train()"),D6o=l(),F(Hu.$$.fragment),NXe=l(),zi=a("h2"),Uu=a("a"),$me=a("span"),F(GL.$$.fragment),G6o=l(),kme=a("span"),O6o=o("AutoModelForPreTraining"),qXe=l(),So=a("div"),F(OL.$$.fragment),V6o=l(),Qi=a("p"),X6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fG=a("a"),z6o=o("from_pretrained()"),Q6o=o(" class method or the "),mG=a("a"),W6o=o("from_config()"),H6o=o(` class
method.`),U6o=l(),VL=a("p"),J6o=o("This class cannot be instantiated directly using "),Sme=a("code"),Y6o=o("__init__()"),K6o=o(" (throws an error)."),Z6o=l(),dt=a("div"),F(XL.$$.fragment),e7o=l(),Rme=a("p"),o7o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),r7o=l(),Wi=a("p"),t7o=o(`Note:
Loading a model from its configuration file does `),Pme=a("strong"),a7o=o("not"),n7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=a("a"),s7o=o("from_pretrained()"),l7o=o(" to load the model weights."),i7o=l(),F(Ju.$$.fragment),d7o=l(),Ke=a("div"),F(zL.$$.fragment),c7o=l(),Bme=a("p"),f7o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),m7o=l(),Na=a("p"),g7o=o("The model class to instantiate is selected based on the "),Ime=a("code"),h7o=o("model_type"),p7o=o(` property of the config object (either
passed as an argument or loaded from `),Nme=a("code"),_7o=o("pretrained_model_name_or_path"),u7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=a("code"),b7o=o("pretrained_model_name_or_path"),v7o=o(":"),F7o=l(),G=a("ul"),Yu=a("li"),jme=a("strong"),T7o=o("albert"),M7o=o(" \u2014 "),hG=a("a"),E7o=o("AlbertForPreTraining"),C7o=o(" (ALBERT model)"),w7o=l(),Ku=a("li"),Dme=a("strong"),A7o=o("bart"),L7o=o(" \u2014 "),pG=a("a"),y7o=o("BartForConditionalGeneration"),x7o=o(" (BART model)"),$7o=l(),Zu=a("li"),Gme=a("strong"),k7o=o("bert"),S7o=o(" \u2014 "),_G=a("a"),R7o=o("BertForPreTraining"),P7o=o(" (BERT model)"),B7o=l(),e4=a("li"),Ome=a("strong"),I7o=o("big_bird"),N7o=o(" \u2014 "),uG=a("a"),q7o=o("BigBirdForPreTraining"),j7o=o(" (BigBird model)"),D7o=l(),o4=a("li"),Vme=a("strong"),G7o=o("bloom"),O7o=o(" \u2014 "),bG=a("a"),V7o=o("BloomForCausalLM"),X7o=o(" (BLOOM model)"),z7o=l(),r4=a("li"),Xme=a("strong"),Q7o=o("camembert"),W7o=o(" \u2014 "),vG=a("a"),H7o=o("CamembertForMaskedLM"),U7o=o(" (CamemBERT model)"),J7o=l(),t4=a("li"),zme=a("strong"),Y7o=o("ctrl"),K7o=o(" \u2014 "),FG=a("a"),Z7o=o("CTRLLMHeadModel"),eLo=o(" (CTRL model)"),oLo=l(),a4=a("li"),Qme=a("strong"),rLo=o("data2vec-text"),tLo=o(" \u2014 "),TG=a("a"),aLo=o("Data2VecTextForMaskedLM"),nLo=o(" (Data2VecText model)"),sLo=l(),n4=a("li"),Wme=a("strong"),lLo=o("deberta"),iLo=o(" \u2014 "),MG=a("a"),dLo=o("DebertaForMaskedLM"),cLo=o(" (DeBERTa model)"),fLo=l(),s4=a("li"),Hme=a("strong"),mLo=o("deberta-v2"),gLo=o(" \u2014 "),EG=a("a"),hLo=o("DebertaV2ForMaskedLM"),pLo=o(" (DeBERTa-v2 model)"),_Lo=l(),l4=a("li"),Ume=a("strong"),uLo=o("distilbert"),bLo=o(" \u2014 "),CG=a("a"),vLo=o("DistilBertForMaskedLM"),FLo=o(" (DistilBERT model)"),TLo=l(),i4=a("li"),Jme=a("strong"),MLo=o("electra"),ELo=o(" \u2014 "),wG=a("a"),CLo=o("ElectraForPreTraining"),wLo=o(" (ELECTRA model)"),ALo=l(),d4=a("li"),Yme=a("strong"),LLo=o("flaubert"),yLo=o(" \u2014 "),AG=a("a"),xLo=o("FlaubertWithLMHeadModel"),$Lo=o(" (FlauBERT model)"),kLo=l(),c4=a("li"),Kme=a("strong"),SLo=o("flava"),RLo=o(" \u2014 "),LG=a("a"),PLo=o("FlavaForPreTraining"),BLo=o(" (FLAVA model)"),ILo=l(),f4=a("li"),Zme=a("strong"),NLo=o("fnet"),qLo=o(" \u2014 "),yG=a("a"),jLo=o("FNetForPreTraining"),DLo=o(" (FNet model)"),GLo=l(),m4=a("li"),ege=a("strong"),OLo=o("fsmt"),VLo=o(" \u2014 "),xG=a("a"),XLo=o("FSMTForConditionalGeneration"),zLo=o(" (FairSeq Machine-Translation model)"),QLo=l(),g4=a("li"),oge=a("strong"),WLo=o("funnel"),HLo=o(" \u2014 "),$G=a("a"),ULo=o("FunnelForPreTraining"),JLo=o(" (Funnel Transformer model)"),YLo=l(),h4=a("li"),rge=a("strong"),KLo=o("gpt2"),ZLo=o(" \u2014 "),kG=a("a"),eyo=o("GPT2LMHeadModel"),oyo=o(" (OpenAI GPT-2 model)"),ryo=l(),p4=a("li"),tge=a("strong"),tyo=o("ibert"),ayo=o(" \u2014 "),SG=a("a"),nyo=o("IBertForMaskedLM"),syo=o(" (I-BERT model)"),lyo=l(),_4=a("li"),age=a("strong"),iyo=o("layoutlm"),dyo=o(" \u2014 "),RG=a("a"),cyo=o("LayoutLMForMaskedLM"),fyo=o(" (LayoutLM model)"),myo=l(),u4=a("li"),nge=a("strong"),gyo=o("longformer"),hyo=o(" \u2014 "),PG=a("a"),pyo=o("LongformerForMaskedLM"),_yo=o(" (Longformer model)"),uyo=l(),b4=a("li"),sge=a("strong"),byo=o("lxmert"),vyo=o(" \u2014 "),BG=a("a"),Fyo=o("LxmertForPreTraining"),Tyo=o(" (LXMERT model)"),Myo=l(),v4=a("li"),lge=a("strong"),Eyo=o("megatron-bert"),Cyo=o(" \u2014 "),IG=a("a"),wyo=o("MegatronBertForPreTraining"),Ayo=o(" (Megatron-BERT model)"),Lyo=l(),F4=a("li"),ige=a("strong"),yyo=o("mobilebert"),xyo=o(" \u2014 "),NG=a("a"),$yo=o("MobileBertForPreTraining"),kyo=o(" (MobileBERT model)"),Syo=l(),T4=a("li"),dge=a("strong"),Ryo=o("mpnet"),Pyo=o(" \u2014 "),qG=a("a"),Byo=o("MPNetForMaskedLM"),Iyo=o(" (MPNet model)"),Nyo=l(),M4=a("li"),cge=a("strong"),qyo=o("mvp"),jyo=o(" \u2014 "),jG=a("a"),Dyo=o("MvpForConditionalGeneration"),Gyo=o(" (MVP model)"),Oyo=l(),E4=a("li"),fge=a("strong"),Vyo=o("nezha"),Xyo=o(" \u2014 "),DG=a("a"),zyo=o("NezhaForPreTraining"),Qyo=o(" (Nezha model)"),Wyo=l(),C4=a("li"),mge=a("strong"),Hyo=o("openai-gpt"),Uyo=o(" \u2014 "),GG=a("a"),Jyo=o("OpenAIGPTLMHeadModel"),Yyo=o(" (OpenAI GPT model)"),Kyo=l(),w4=a("li"),gge=a("strong"),Zyo=o("retribert"),e9o=o(" \u2014 "),OG=a("a"),o9o=o("RetriBertModel"),r9o=o(" (RetriBERT model)"),t9o=l(),A4=a("li"),hge=a("strong"),a9o=o("roberta"),n9o=o(" \u2014 "),VG=a("a"),s9o=o("RobertaForMaskedLM"),l9o=o(" (RoBERTa model)"),i9o=l(),L4=a("li"),pge=a("strong"),d9o=o("splinter"),c9o=o(" \u2014 "),XG=a("a"),f9o=o("SplinterForPreTraining"),m9o=o(" (Splinter model)"),g9o=l(),y4=a("li"),_ge=a("strong"),h9o=o("squeezebert"),p9o=o(" \u2014 "),zG=a("a"),_9o=o("SqueezeBertForMaskedLM"),u9o=o(" (SqueezeBERT model)"),b9o=l(),x4=a("li"),uge=a("strong"),v9o=o("t5"),F9o=o(" \u2014 "),QG=a("a"),T9o=o("T5ForConditionalGeneration"),M9o=o(" (T5 model)"),E9o=l(),$4=a("li"),bge=a("strong"),C9o=o("tapas"),w9o=o(" \u2014 "),WG=a("a"),A9o=o("TapasForMaskedLM"),L9o=o(" (TAPAS model)"),y9o=l(),k4=a("li"),vge=a("strong"),x9o=o("transfo-xl"),$9o=o(" \u2014 "),HG=a("a"),k9o=o("TransfoXLLMHeadModel"),S9o=o(" (Transformer-XL model)"),R9o=l(),S4=a("li"),Fge=a("strong"),P9o=o("unispeech"),B9o=o(" \u2014 "),UG=a("a"),I9o=o("UniSpeechForPreTraining"),N9o=o(" (UniSpeech model)"),q9o=l(),R4=a("li"),Tge=a("strong"),j9o=o("unispeech-sat"),D9o=o(" \u2014 "),JG=a("a"),G9o=o("UniSpeechSatForPreTraining"),O9o=o(" (UniSpeechSat model)"),V9o=l(),P4=a("li"),Mge=a("strong"),X9o=o("visual_bert"),z9o=o(" \u2014 "),YG=a("a"),Q9o=o("VisualBertForPreTraining"),W9o=o(" (VisualBERT model)"),H9o=l(),B4=a("li"),Ege=a("strong"),U9o=o("vit_mae"),J9o=o(" \u2014 "),KG=a("a"),Y9o=o("ViTMAEForPreTraining"),K9o=o(" (ViTMAE model)"),Z9o=l(),I4=a("li"),Cge=a("strong"),exo=o("wav2vec2"),oxo=o(" \u2014 "),ZG=a("a"),rxo=o("Wav2Vec2ForPreTraining"),txo=o(" (Wav2Vec2 model)"),axo=l(),N4=a("li"),wge=a("strong"),nxo=o("wav2vec2-conformer"),sxo=o(" \u2014 "),eO=a("a"),lxo=o("Wav2Vec2ConformerForPreTraining"),ixo=o(" (Wav2Vec2-Conformer model)"),dxo=l(),q4=a("li"),Age=a("strong"),cxo=o("xlm"),fxo=o(" \u2014 "),oO=a("a"),mxo=o("XLMWithLMHeadModel"),gxo=o(" (XLM model)"),hxo=l(),j4=a("li"),Lge=a("strong"),pxo=o("xlm-roberta"),_xo=o(" \u2014 "),rO=a("a"),uxo=o("XLMRobertaForMaskedLM"),bxo=o(" (XLM-RoBERTa model)"),vxo=l(),D4=a("li"),yge=a("strong"),Fxo=o("xlm-roberta-xl"),Txo=o(" \u2014 "),tO=a("a"),Mxo=o("XLMRobertaXLForMaskedLM"),Exo=o(" (XLM-RoBERTa-XL model)"),Cxo=l(),G4=a("li"),xge=a("strong"),wxo=o("xlnet"),Axo=o(" \u2014 "),aO=a("a"),Lxo=o("XLNetLMHeadModel"),yxo=o(" (XLNet model)"),xxo=l(),O4=a("p"),$xo=o("The model is set in evaluation mode by default using "),$ge=a("code"),kxo=o("model.eval()"),Sxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=a("code"),Rxo=o("model.train()"),Pxo=l(),F(V4.$$.fragment),jXe=l(),Hi=a("h2"),X4=a("a"),Sge=a("span"),F(QL.$$.fragment),Bxo=l(),Rge=a("span"),Ixo=o("AutoModelForCausalLM"),DXe=l(),Ro=a("div"),F(WL.$$.fragment),Nxo=l(),Ui=a("p"),qxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nO=a("a"),jxo=o("from_pretrained()"),Dxo=o(" class method or the "),sO=a("a"),Gxo=o("from_config()"),Oxo=o(` class
method.`),Vxo=l(),HL=a("p"),Xxo=o("This class cannot be instantiated directly using "),Pge=a("code"),zxo=o("__init__()"),Qxo=o(" (throws an error)."),Wxo=l(),ct=a("div"),F(UL.$$.fragment),Hxo=l(),Bge=a("p"),Uxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jxo=l(),Ji=a("p"),Yxo=o(`Note:
Loading a model from its configuration file does `),Ige=a("strong"),Kxo=o("not"),Zxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=a("a"),e$o=o("from_pretrained()"),o$o=o(" to load the model weights."),r$o=l(),F(z4.$$.fragment),t$o=l(),Ze=a("div"),F(JL.$$.fragment),a$o=l(),Nge=a("p"),n$o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),s$o=l(),qa=a("p"),l$o=o("The model class to instantiate is selected based on the "),qge=a("code"),i$o=o("model_type"),d$o=o(` property of the config object (either
passed as an argument or loaded from `),jge=a("code"),c$o=o("pretrained_model_name_or_path"),f$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=a("code"),m$o=o("pretrained_model_name_or_path"),g$o=o(":"),h$o=l(),z=a("ul"),Q4=a("li"),Gge=a("strong"),p$o=o("bart"),_$o=o(" \u2014 "),iO=a("a"),u$o=o("BartForCausalLM"),b$o=o(" (BART model)"),v$o=l(),W4=a("li"),Oge=a("strong"),F$o=o("bert"),T$o=o(" \u2014 "),dO=a("a"),M$o=o("BertLMHeadModel"),E$o=o(" (BERT model)"),C$o=l(),H4=a("li"),Vge=a("strong"),w$o=o("bert-generation"),A$o=o(" \u2014 "),cO=a("a"),L$o=o("BertGenerationDecoder"),y$o=o(" (Bert Generation model)"),x$o=l(),U4=a("li"),Xge=a("strong"),$$o=o("big_bird"),k$o=o(" \u2014 "),fO=a("a"),S$o=o("BigBirdForCausalLM"),R$o=o(" (BigBird model)"),P$o=l(),J4=a("li"),zge=a("strong"),B$o=o("bigbird_pegasus"),I$o=o(" \u2014 "),mO=a("a"),N$o=o("BigBirdPegasusForCausalLM"),q$o=o(" (BigBird-Pegasus model)"),j$o=l(),Y4=a("li"),Qge=a("strong"),D$o=o("blenderbot"),G$o=o(" \u2014 "),gO=a("a"),O$o=o("BlenderbotForCausalLM"),V$o=o(" (Blenderbot model)"),X$o=l(),K4=a("li"),Wge=a("strong"),z$o=o("blenderbot-small"),Q$o=o(" \u2014 "),hO=a("a"),W$o=o("BlenderbotSmallForCausalLM"),H$o=o(" (BlenderbotSmall model)"),U$o=l(),Z4=a("li"),Hge=a("strong"),J$o=o("bloom"),Y$o=o(" \u2014 "),pO=a("a"),K$o=o("BloomForCausalLM"),Z$o=o(" (BLOOM model)"),eko=l(),e2=a("li"),Uge=a("strong"),oko=o("camembert"),rko=o(" \u2014 "),_O=a("a"),tko=o("CamembertForCausalLM"),ako=o(" (CamemBERT model)"),nko=l(),o2=a("li"),Jge=a("strong"),sko=o("codegen"),lko=o(" \u2014 "),uO=a("a"),iko=o("CodeGenForCausalLM"),dko=o(" (CodeGen model)"),cko=l(),r2=a("li"),Yge=a("strong"),fko=o("ctrl"),mko=o(" \u2014 "),bO=a("a"),gko=o("CTRLLMHeadModel"),hko=o(" (CTRL model)"),pko=l(),t2=a("li"),Kge=a("strong"),_ko=o("data2vec-text"),uko=o(" \u2014 "),vO=a("a"),bko=o("Data2VecTextForCausalLM"),vko=o(" (Data2VecText model)"),Fko=l(),a2=a("li"),Zge=a("strong"),Tko=o("electra"),Mko=o(" \u2014 "),FO=a("a"),Eko=o("ElectraForCausalLM"),Cko=o(" (ELECTRA model)"),wko=l(),n2=a("li"),ehe=a("strong"),Ako=o("gpt2"),Lko=o(" \u2014 "),TO=a("a"),yko=o("GPT2LMHeadModel"),xko=o(" (OpenAI GPT-2 model)"),$ko=l(),s2=a("li"),ohe=a("strong"),kko=o("gpt_neo"),Sko=o(" \u2014 "),MO=a("a"),Rko=o("GPTNeoForCausalLM"),Pko=o(" (GPT Neo model)"),Bko=l(),l2=a("li"),rhe=a("strong"),Iko=o("gpt_neox"),Nko=o(" \u2014 "),EO=a("a"),qko=o("GPTNeoXForCausalLM"),jko=o(" (GPT NeoX model)"),Dko=l(),i2=a("li"),the=a("strong"),Gko=o("gptj"),Oko=o(" \u2014 "),CO=a("a"),Vko=o("GPTJForCausalLM"),Xko=o(" (GPT-J model)"),zko=l(),d2=a("li"),ahe=a("strong"),Qko=o("marian"),Wko=o(" \u2014 "),wO=a("a"),Hko=o("MarianForCausalLM"),Uko=o(" (Marian model)"),Jko=l(),c2=a("li"),nhe=a("strong"),Yko=o("mbart"),Kko=o(" \u2014 "),AO=a("a"),Zko=o("MBartForCausalLM"),eSo=o(" (mBART model)"),oSo=l(),f2=a("li"),she=a("strong"),rSo=o("megatron-bert"),tSo=o(" \u2014 "),LO=a("a"),aSo=o("MegatronBertForCausalLM"),nSo=o(" (Megatron-BERT model)"),sSo=l(),m2=a("li"),lhe=a("strong"),lSo=o("mvp"),iSo=o(" \u2014 "),yO=a("a"),dSo=o("MvpForCausalLM"),cSo=o(" (MVP model)"),fSo=l(),g2=a("li"),ihe=a("strong"),mSo=o("openai-gpt"),gSo=o(" \u2014 "),xO=a("a"),hSo=o("OpenAIGPTLMHeadModel"),pSo=o(" (OpenAI GPT model)"),_So=l(),h2=a("li"),dhe=a("strong"),uSo=o("opt"),bSo=o(" \u2014 "),$O=a("a"),vSo=o("OPTForCausalLM"),FSo=o(" (OPT model)"),TSo=l(),p2=a("li"),che=a("strong"),MSo=o("pegasus"),ESo=o(" \u2014 "),kO=a("a"),CSo=o("PegasusForCausalLM"),wSo=o(" (Pegasus model)"),ASo=l(),_2=a("li"),fhe=a("strong"),LSo=o("plbart"),ySo=o(" \u2014 "),SO=a("a"),xSo=o("PLBartForCausalLM"),$So=o(" (PLBart model)"),kSo=l(),u2=a("li"),mhe=a("strong"),SSo=o("prophetnet"),RSo=o(" \u2014 "),RO=a("a"),PSo=o("ProphetNetForCausalLM"),BSo=o(" (ProphetNet model)"),ISo=l(),b2=a("li"),ghe=a("strong"),NSo=o("qdqbert"),qSo=o(" \u2014 "),PO=a("a"),jSo=o("QDQBertLMHeadModel"),DSo=o(" (QDQBert model)"),GSo=l(),v2=a("li"),hhe=a("strong"),OSo=o("reformer"),VSo=o(" \u2014 "),BO=a("a"),XSo=o("ReformerModelWithLMHead"),zSo=o(" (Reformer model)"),QSo=l(),F2=a("li"),phe=a("strong"),WSo=o("rembert"),HSo=o(" \u2014 "),IO=a("a"),USo=o("RemBertForCausalLM"),JSo=o(" (RemBERT model)"),YSo=l(),T2=a("li"),_he=a("strong"),KSo=o("roberta"),ZSo=o(" \u2014 "),NO=a("a"),eRo=o("RobertaForCausalLM"),oRo=o(" (RoBERTa model)"),rRo=l(),M2=a("li"),uhe=a("strong"),tRo=o("roformer"),aRo=o(" \u2014 "),qO=a("a"),nRo=o("RoFormerForCausalLM"),sRo=o(" (RoFormer model)"),lRo=l(),E2=a("li"),bhe=a("strong"),iRo=o("speech_to_text_2"),dRo=o(" \u2014 "),jO=a("a"),cRo=o("Speech2Text2ForCausalLM"),fRo=o(" (Speech2Text2 model)"),mRo=l(),C2=a("li"),vhe=a("strong"),gRo=o("transfo-xl"),hRo=o(" \u2014 "),DO=a("a"),pRo=o("TransfoXLLMHeadModel"),_Ro=o(" (Transformer-XL model)"),uRo=l(),w2=a("li"),Fhe=a("strong"),bRo=o("trocr"),vRo=o(" \u2014 "),GO=a("a"),FRo=o("TrOCRForCausalLM"),TRo=o(" (TrOCR model)"),MRo=l(),A2=a("li"),The=a("strong"),ERo=o("xglm"),CRo=o(" \u2014 "),OO=a("a"),wRo=o("XGLMForCausalLM"),ARo=o(" (XGLM model)"),LRo=l(),L2=a("li"),Mhe=a("strong"),yRo=o("xlm"),xRo=o(" \u2014 "),VO=a("a"),$Ro=o("XLMWithLMHeadModel"),kRo=o(" (XLM model)"),SRo=l(),y2=a("li"),Ehe=a("strong"),RRo=o("xlm-prophetnet"),PRo=o(" \u2014 "),XO=a("a"),BRo=o("XLMProphetNetForCausalLM"),IRo=o(" (XLM-ProphetNet model)"),NRo=l(),x2=a("li"),Che=a("strong"),qRo=o("xlm-roberta"),jRo=o(" \u2014 "),zO=a("a"),DRo=o("XLMRobertaForCausalLM"),GRo=o(" (XLM-RoBERTa model)"),ORo=l(),$2=a("li"),whe=a("strong"),VRo=o("xlm-roberta-xl"),XRo=o(" \u2014 "),QO=a("a"),zRo=o("XLMRobertaXLForCausalLM"),QRo=o(" (XLM-RoBERTa-XL model)"),WRo=l(),k2=a("li"),Ahe=a("strong"),HRo=o("xlnet"),URo=o(" \u2014 "),WO=a("a"),JRo=o("XLNetLMHeadModel"),YRo=o(" (XLNet model)"),KRo=l(),S2=a("p"),ZRo=o("The model is set in evaluation mode by default using "),Lhe=a("code"),ePo=o("model.eval()"),oPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=a("code"),rPo=o("model.train()"),tPo=l(),F(R2.$$.fragment),GXe=l(),Yi=a("h2"),P2=a("a"),xhe=a("span"),F(YL.$$.fragment),aPo=l(),$he=a("span"),nPo=o("AutoModelForMaskedLM"),OXe=l(),Po=a("div"),F(KL.$$.fragment),sPo=l(),Ki=a("p"),lPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HO=a("a"),iPo=o("from_pretrained()"),dPo=o(" class method or the "),UO=a("a"),cPo=o("from_config()"),fPo=o(` class
method.`),mPo=l(),ZL=a("p"),gPo=o("This class cannot be instantiated directly using "),khe=a("code"),hPo=o("__init__()"),pPo=o(" (throws an error)."),_Po=l(),ft=a("div"),F(ey.$$.fragment),uPo=l(),She=a("p"),bPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vPo=l(),Zi=a("p"),FPo=o(`Note:
Loading a model from its configuration file does `),Rhe=a("strong"),TPo=o("not"),MPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),EPo=o("from_pretrained()"),CPo=o(" to load the model weights."),wPo=l(),F(B2.$$.fragment),APo=l(),eo=a("div"),F(oy.$$.fragment),LPo=l(),Phe=a("p"),yPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xPo=l(),ja=a("p"),$Po=o("The model class to instantiate is selected based on the "),Bhe=a("code"),kPo=o("model_type"),SPo=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),RPo=o("pretrained_model_name_or_path"),PPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=a("code"),BPo=o("pretrained_model_name_or_path"),IPo=o(":"),NPo=l(),W=a("ul"),I2=a("li"),qhe=a("strong"),qPo=o("albert"),jPo=o(" \u2014 "),YO=a("a"),DPo=o("AlbertForMaskedLM"),GPo=o(" (ALBERT model)"),OPo=l(),N2=a("li"),jhe=a("strong"),VPo=o("bart"),XPo=o(" \u2014 "),KO=a("a"),zPo=o("BartForConditionalGeneration"),QPo=o(" (BART model)"),WPo=l(),q2=a("li"),Dhe=a("strong"),HPo=o("bert"),UPo=o(" \u2014 "),ZO=a("a"),JPo=o("BertForMaskedLM"),YPo=o(" (BERT model)"),KPo=l(),j2=a("li"),Ghe=a("strong"),ZPo=o("big_bird"),eBo=o(" \u2014 "),eV=a("a"),oBo=o("BigBirdForMaskedLM"),rBo=o(" (BigBird model)"),tBo=l(),D2=a("li"),Ohe=a("strong"),aBo=o("camembert"),nBo=o(" \u2014 "),oV=a("a"),sBo=o("CamembertForMaskedLM"),lBo=o(" (CamemBERT model)"),iBo=l(),G2=a("li"),Vhe=a("strong"),dBo=o("convbert"),cBo=o(" \u2014 "),rV=a("a"),fBo=o("ConvBertForMaskedLM"),mBo=o(" (ConvBERT model)"),gBo=l(),O2=a("li"),Xhe=a("strong"),hBo=o("data2vec-text"),pBo=o(" \u2014 "),tV=a("a"),_Bo=o("Data2VecTextForMaskedLM"),uBo=o(" (Data2VecText model)"),bBo=l(),V2=a("li"),zhe=a("strong"),vBo=o("deberta"),FBo=o(" \u2014 "),aV=a("a"),TBo=o("DebertaForMaskedLM"),MBo=o(" (DeBERTa model)"),EBo=l(),X2=a("li"),Qhe=a("strong"),CBo=o("deberta-v2"),wBo=o(" \u2014 "),nV=a("a"),ABo=o("DebertaV2ForMaskedLM"),LBo=o(" (DeBERTa-v2 model)"),yBo=l(),z2=a("li"),Whe=a("strong"),xBo=o("distilbert"),$Bo=o(" \u2014 "),sV=a("a"),kBo=o("DistilBertForMaskedLM"),SBo=o(" (DistilBERT model)"),RBo=l(),Q2=a("li"),Hhe=a("strong"),PBo=o("electra"),BBo=o(" \u2014 "),lV=a("a"),IBo=o("ElectraForMaskedLM"),NBo=o(" (ELECTRA model)"),qBo=l(),W2=a("li"),Uhe=a("strong"),jBo=o("flaubert"),DBo=o(" \u2014 "),iV=a("a"),GBo=o("FlaubertWithLMHeadModel"),OBo=o(" (FlauBERT model)"),VBo=l(),H2=a("li"),Jhe=a("strong"),XBo=o("fnet"),zBo=o(" \u2014 "),dV=a("a"),QBo=o("FNetForMaskedLM"),WBo=o(" (FNet model)"),HBo=l(),U2=a("li"),Yhe=a("strong"),UBo=o("funnel"),JBo=o(" \u2014 "),cV=a("a"),YBo=o("FunnelForMaskedLM"),KBo=o(" (Funnel Transformer model)"),ZBo=l(),J2=a("li"),Khe=a("strong"),eIo=o("ibert"),oIo=o(" \u2014 "),fV=a("a"),rIo=o("IBertForMaskedLM"),tIo=o(" (I-BERT model)"),aIo=l(),Y2=a("li"),Zhe=a("strong"),nIo=o("layoutlm"),sIo=o(" \u2014 "),mV=a("a"),lIo=o("LayoutLMForMaskedLM"),iIo=o(" (LayoutLM model)"),dIo=l(),K2=a("li"),epe=a("strong"),cIo=o("longformer"),fIo=o(" \u2014 "),gV=a("a"),mIo=o("LongformerForMaskedLM"),gIo=o(" (Longformer model)"),hIo=l(),Z2=a("li"),ope=a("strong"),pIo=o("luke"),_Io=o(" \u2014 "),hV=a("a"),uIo=o("LukeForMaskedLM"),bIo=o(" (LUKE model)"),vIo=l(),e1=a("li"),rpe=a("strong"),FIo=o("mbart"),TIo=o(" \u2014 "),pV=a("a"),MIo=o("MBartForConditionalGeneration"),EIo=o(" (mBART model)"),CIo=l(),o1=a("li"),tpe=a("strong"),wIo=o("megatron-bert"),AIo=o(" \u2014 "),_V=a("a"),LIo=o("MegatronBertForMaskedLM"),yIo=o(" (Megatron-BERT model)"),xIo=l(),r1=a("li"),ape=a("strong"),$Io=o("mobilebert"),kIo=o(" \u2014 "),uV=a("a"),SIo=o("MobileBertForMaskedLM"),RIo=o(" (MobileBERT model)"),PIo=l(),t1=a("li"),npe=a("strong"),BIo=o("mpnet"),IIo=o(" \u2014 "),bV=a("a"),NIo=o("MPNetForMaskedLM"),qIo=o(" (MPNet model)"),jIo=l(),a1=a("li"),spe=a("strong"),DIo=o("mvp"),GIo=o(" \u2014 "),vV=a("a"),OIo=o("MvpForConditionalGeneration"),VIo=o(" (MVP model)"),XIo=l(),n1=a("li"),lpe=a("strong"),zIo=o("nezha"),QIo=o(" \u2014 "),FV=a("a"),WIo=o("NezhaForMaskedLM"),HIo=o(" (Nezha model)"),UIo=l(),s1=a("li"),ipe=a("strong"),JIo=o("nystromformer"),YIo=o(" \u2014 "),TV=a("a"),KIo=o("NystromformerForMaskedLM"),ZIo=o(" (Nystr\xF6mformer model)"),eNo=l(),l1=a("li"),dpe=a("strong"),oNo=o("perceiver"),rNo=o(" \u2014 "),MV=a("a"),tNo=o("PerceiverForMaskedLM"),aNo=o(" (Perceiver model)"),nNo=l(),i1=a("li"),cpe=a("strong"),sNo=o("qdqbert"),lNo=o(" \u2014 "),EV=a("a"),iNo=o("QDQBertForMaskedLM"),dNo=o(" (QDQBert model)"),cNo=l(),d1=a("li"),fpe=a("strong"),fNo=o("reformer"),mNo=o(" \u2014 "),CV=a("a"),gNo=o("ReformerForMaskedLM"),hNo=o(" (Reformer model)"),pNo=l(),c1=a("li"),mpe=a("strong"),_No=o("rembert"),uNo=o(" \u2014 "),wV=a("a"),bNo=o("RemBertForMaskedLM"),vNo=o(" (RemBERT model)"),FNo=l(),f1=a("li"),gpe=a("strong"),TNo=o("roberta"),MNo=o(" \u2014 "),AV=a("a"),ENo=o("RobertaForMaskedLM"),CNo=o(" (RoBERTa model)"),wNo=l(),m1=a("li"),hpe=a("strong"),ANo=o("roformer"),LNo=o(" \u2014 "),LV=a("a"),yNo=o("RoFormerForMaskedLM"),xNo=o(" (RoFormer model)"),$No=l(),g1=a("li"),ppe=a("strong"),kNo=o("squeezebert"),SNo=o(" \u2014 "),yV=a("a"),RNo=o("SqueezeBertForMaskedLM"),PNo=o(" (SqueezeBERT model)"),BNo=l(),h1=a("li"),_pe=a("strong"),INo=o("tapas"),NNo=o(" \u2014 "),xV=a("a"),qNo=o("TapasForMaskedLM"),jNo=o(" (TAPAS model)"),DNo=l(),p1=a("li"),upe=a("strong"),GNo=o("wav2vec2"),ONo=o(" \u2014 "),bpe=a("code"),VNo=o("Wav2Vec2ForMaskedLM"),XNo=o(" (Wav2Vec2 model)"),zNo=l(),_1=a("li"),vpe=a("strong"),QNo=o("xlm"),WNo=o(" \u2014 "),$V=a("a"),HNo=o("XLMWithLMHeadModel"),UNo=o(" (XLM model)"),JNo=l(),u1=a("li"),Fpe=a("strong"),YNo=o("xlm-roberta"),KNo=o(" \u2014 "),kV=a("a"),ZNo=o("XLMRobertaForMaskedLM"),eqo=o(" (XLM-RoBERTa model)"),oqo=l(),b1=a("li"),Tpe=a("strong"),rqo=o("xlm-roberta-xl"),tqo=o(" \u2014 "),SV=a("a"),aqo=o("XLMRobertaXLForMaskedLM"),nqo=o(" (XLM-RoBERTa-XL model)"),sqo=l(),v1=a("li"),Mpe=a("strong"),lqo=o("yoso"),iqo=o(" \u2014 "),RV=a("a"),dqo=o("YosoForMaskedLM"),cqo=o(" (YOSO model)"),fqo=l(),F1=a("p"),mqo=o("The model is set in evaluation mode by default using "),Epe=a("code"),gqo=o("model.eval()"),hqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=a("code"),pqo=o("model.train()"),_qo=l(),F(T1.$$.fragment),VXe=l(),ed=a("h2"),M1=a("a"),wpe=a("span"),F(ry.$$.fragment),uqo=l(),Ape=a("span"),bqo=o("AutoModelForSeq2SeqLM"),XXe=l(),Bo=a("div"),F(ty.$$.fragment),vqo=l(),od=a("p"),Fqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PV=a("a"),Tqo=o("from_pretrained()"),Mqo=o(" class method or the "),BV=a("a"),Eqo=o("from_config()"),Cqo=o(` class
method.`),wqo=l(),ay=a("p"),Aqo=o("This class cannot be instantiated directly using "),Lpe=a("code"),Lqo=o("__init__()"),yqo=o(" (throws an error)."),xqo=l(),mt=a("div"),F(ny.$$.fragment),$qo=l(),ype=a("p"),kqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sqo=l(),rd=a("p"),Rqo=o(`Note:
Loading a model from its configuration file does `),xpe=a("strong"),Pqo=o("not"),Bqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),Iqo=o("from_pretrained()"),Nqo=o(" to load the model weights."),qqo=l(),F(E1.$$.fragment),jqo=l(),oo=a("div"),F(sy.$$.fragment),Dqo=l(),$pe=a("p"),Gqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Oqo=l(),Da=a("p"),Vqo=o("The model class to instantiate is selected based on the "),kpe=a("code"),Xqo=o("model_type"),zqo=o(` property of the config object (either
passed as an argument or loaded from `),Spe=a("code"),Qqo=o("pretrained_model_name_or_path"),Wqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=a("code"),Hqo=o("pretrained_model_name_or_path"),Uqo=o(":"),Jqo=l(),fe=a("ul"),C1=a("li"),Ppe=a("strong"),Yqo=o("bart"),Kqo=o(" \u2014 "),NV=a("a"),Zqo=o("BartForConditionalGeneration"),ejo=o(" (BART model)"),ojo=l(),w1=a("li"),Bpe=a("strong"),rjo=o("bigbird_pegasus"),tjo=o(" \u2014 "),qV=a("a"),ajo=o("BigBirdPegasusForConditionalGeneration"),njo=o(" (BigBird-Pegasus model)"),sjo=l(),A1=a("li"),Ipe=a("strong"),ljo=o("blenderbot"),ijo=o(" \u2014 "),jV=a("a"),djo=o("BlenderbotForConditionalGeneration"),cjo=o(" (Blenderbot model)"),fjo=l(),L1=a("li"),Npe=a("strong"),mjo=o("blenderbot-small"),gjo=o(" \u2014 "),DV=a("a"),hjo=o("BlenderbotSmallForConditionalGeneration"),pjo=o(" (BlenderbotSmall model)"),_jo=l(),y1=a("li"),qpe=a("strong"),ujo=o("encoder-decoder"),bjo=o(" \u2014 "),GV=a("a"),vjo=o("EncoderDecoderModel"),Fjo=o(" (Encoder decoder model)"),Tjo=l(),x1=a("li"),jpe=a("strong"),Mjo=o("fsmt"),Ejo=o(" \u2014 "),OV=a("a"),Cjo=o("FSMTForConditionalGeneration"),wjo=o(" (FairSeq Machine-Translation model)"),Ajo=l(),$1=a("li"),Dpe=a("strong"),Ljo=o("led"),yjo=o(" \u2014 "),VV=a("a"),xjo=o("LEDForConditionalGeneration"),$jo=o(" (LED model)"),kjo=l(),k1=a("li"),Gpe=a("strong"),Sjo=o("longt5"),Rjo=o(" \u2014 "),XV=a("a"),Pjo=o("LongT5ForConditionalGeneration"),Bjo=o(" (LongT5 model)"),Ijo=l(),S1=a("li"),Ope=a("strong"),Njo=o("m2m_100"),qjo=o(" \u2014 "),zV=a("a"),jjo=o("M2M100ForConditionalGeneration"),Djo=o(" (M2M100 model)"),Gjo=l(),R1=a("li"),Vpe=a("strong"),Ojo=o("marian"),Vjo=o(" \u2014 "),QV=a("a"),Xjo=o("MarianMTModel"),zjo=o(" (Marian model)"),Qjo=l(),P1=a("li"),Xpe=a("strong"),Wjo=o("mbart"),Hjo=o(" \u2014 "),WV=a("a"),Ujo=o("MBartForConditionalGeneration"),Jjo=o(" (mBART model)"),Yjo=l(),B1=a("li"),zpe=a("strong"),Kjo=o("mt5"),Zjo=o(" \u2014 "),HV=a("a"),eDo=o("MT5ForConditionalGeneration"),oDo=o(" (MT5 model)"),rDo=l(),I1=a("li"),Qpe=a("strong"),tDo=o("mvp"),aDo=o(" \u2014 "),UV=a("a"),nDo=o("MvpForConditionalGeneration"),sDo=o(" (MVP model)"),lDo=l(),N1=a("li"),Wpe=a("strong"),iDo=o("nllb"),dDo=o(" \u2014 "),JV=a("a"),cDo=o("M2M100ForConditionalGeneration"),fDo=o(" (NLLB model)"),mDo=l(),q1=a("li"),Hpe=a("strong"),gDo=o("pegasus"),hDo=o(" \u2014 "),YV=a("a"),pDo=o("PegasusForConditionalGeneration"),_Do=o(" (Pegasus model)"),uDo=l(),j1=a("li"),Upe=a("strong"),bDo=o("plbart"),vDo=o(" \u2014 "),KV=a("a"),FDo=o("PLBartForConditionalGeneration"),TDo=o(" (PLBart model)"),MDo=l(),D1=a("li"),Jpe=a("strong"),EDo=o("prophetnet"),CDo=o(" \u2014 "),ZV=a("a"),wDo=o("ProphetNetForConditionalGeneration"),ADo=o(" (ProphetNet model)"),LDo=l(),G1=a("li"),Ype=a("strong"),yDo=o("t5"),xDo=o(" \u2014 "),eX=a("a"),$Do=o("T5ForConditionalGeneration"),kDo=o(" (T5 model)"),SDo=l(),O1=a("li"),Kpe=a("strong"),RDo=o("xlm-prophetnet"),PDo=o(" \u2014 "),oX=a("a"),BDo=o("XLMProphetNetForConditionalGeneration"),IDo=o(" (XLM-ProphetNet model)"),NDo=l(),V1=a("p"),qDo=o("The model is set in evaluation mode by default using "),Zpe=a("code"),jDo=o("model.eval()"),DDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=a("code"),GDo=o("model.train()"),ODo=l(),F(X1.$$.fragment),zXe=l(),td=a("h2"),z1=a("a"),o_e=a("span"),F(ly.$$.fragment),VDo=l(),r_e=a("span"),XDo=o("AutoModelForSequenceClassification"),QXe=l(),Io=a("div"),F(iy.$$.fragment),zDo=l(),ad=a("p"),QDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rX=a("a"),WDo=o("from_pretrained()"),HDo=o(" class method or the "),tX=a("a"),UDo=o("from_config()"),JDo=o(` class
method.`),YDo=l(),dy=a("p"),KDo=o("This class cannot be instantiated directly using "),t_e=a("code"),ZDo=o("__init__()"),eGo=o(" (throws an error)."),oGo=l(),gt=a("div"),F(cy.$$.fragment),rGo=l(),a_e=a("p"),tGo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aGo=l(),nd=a("p"),nGo=o(`Note:
Loading a model from its configuration file does `),n_e=a("strong"),sGo=o("not"),lGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),iGo=o("from_pretrained()"),dGo=o(" to load the model weights."),cGo=l(),F(Q1.$$.fragment),fGo=l(),ro=a("div"),F(fy.$$.fragment),mGo=l(),s_e=a("p"),gGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hGo=l(),Ga=a("p"),pGo=o("The model class to instantiate is selected based on the "),l_e=a("code"),_Go=o("model_type"),uGo=o(` property of the config object (either
passed as an argument or loaded from `),i_e=a("code"),bGo=o("pretrained_model_name_or_path"),vGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=a("code"),FGo=o("pretrained_model_name_or_path"),TGo=o(":"),MGo=l(),B=a("ul"),W1=a("li"),c_e=a("strong"),EGo=o("albert"),CGo=o(" \u2014 "),nX=a("a"),wGo=o("AlbertForSequenceClassification"),AGo=o(" (ALBERT model)"),LGo=l(),H1=a("li"),f_e=a("strong"),yGo=o("bart"),xGo=o(" \u2014 "),sX=a("a"),$Go=o("BartForSequenceClassification"),kGo=o(" (BART model)"),SGo=l(),U1=a("li"),m_e=a("strong"),RGo=o("bert"),PGo=o(" \u2014 "),lX=a("a"),BGo=o("BertForSequenceClassification"),IGo=o(" (BERT model)"),NGo=l(),J1=a("li"),g_e=a("strong"),qGo=o("big_bird"),jGo=o(" \u2014 "),iX=a("a"),DGo=o("BigBirdForSequenceClassification"),GGo=o(" (BigBird model)"),OGo=l(),Y1=a("li"),h_e=a("strong"),VGo=o("bigbird_pegasus"),XGo=o(" \u2014 "),dX=a("a"),zGo=o("BigBirdPegasusForSequenceClassification"),QGo=o(" (BigBird-Pegasus model)"),WGo=l(),K1=a("li"),p_e=a("strong"),HGo=o("bloom"),UGo=o(" \u2014 "),cX=a("a"),JGo=o("BloomForSequenceClassification"),YGo=o(" (BLOOM model)"),KGo=l(),Z1=a("li"),__e=a("strong"),ZGo=o("camembert"),eOo=o(" \u2014 "),fX=a("a"),oOo=o("CamembertForSequenceClassification"),rOo=o(" (CamemBERT model)"),tOo=l(),eb=a("li"),u_e=a("strong"),aOo=o("canine"),nOo=o(" \u2014 "),mX=a("a"),sOo=o("CanineForSequenceClassification"),lOo=o(" (CANINE model)"),iOo=l(),ob=a("li"),b_e=a("strong"),dOo=o("convbert"),cOo=o(" \u2014 "),gX=a("a"),fOo=o("ConvBertForSequenceClassification"),mOo=o(" (ConvBERT model)"),gOo=l(),rb=a("li"),v_e=a("strong"),hOo=o("ctrl"),pOo=o(" \u2014 "),hX=a("a"),_Oo=o("CTRLForSequenceClassification"),uOo=o(" (CTRL model)"),bOo=l(),tb=a("li"),F_e=a("strong"),vOo=o("data2vec-text"),FOo=o(" \u2014 "),pX=a("a"),TOo=o("Data2VecTextForSequenceClassification"),MOo=o(" (Data2VecText model)"),EOo=l(),ab=a("li"),T_e=a("strong"),COo=o("deberta"),wOo=o(" \u2014 "),_X=a("a"),AOo=o("DebertaForSequenceClassification"),LOo=o(" (DeBERTa model)"),yOo=l(),nb=a("li"),M_e=a("strong"),xOo=o("deberta-v2"),$Oo=o(" \u2014 "),uX=a("a"),kOo=o("DebertaV2ForSequenceClassification"),SOo=o(" (DeBERTa-v2 model)"),ROo=l(),sb=a("li"),E_e=a("strong"),POo=o("distilbert"),BOo=o(" \u2014 "),bX=a("a"),IOo=o("DistilBertForSequenceClassification"),NOo=o(" (DistilBERT model)"),qOo=l(),lb=a("li"),C_e=a("strong"),jOo=o("electra"),DOo=o(" \u2014 "),vX=a("a"),GOo=o("ElectraForSequenceClassification"),OOo=o(" (ELECTRA model)"),VOo=l(),ib=a("li"),w_e=a("strong"),XOo=o("flaubert"),zOo=o(" \u2014 "),FX=a("a"),QOo=o("FlaubertForSequenceClassification"),WOo=o(" (FlauBERT model)"),HOo=l(),db=a("li"),A_e=a("strong"),UOo=o("fnet"),JOo=o(" \u2014 "),TX=a("a"),YOo=o("FNetForSequenceClassification"),KOo=o(" (FNet model)"),ZOo=l(),cb=a("li"),L_e=a("strong"),eVo=o("funnel"),oVo=o(" \u2014 "),MX=a("a"),rVo=o("FunnelForSequenceClassification"),tVo=o(" (Funnel Transformer model)"),aVo=l(),fb=a("li"),y_e=a("strong"),nVo=o("gpt2"),sVo=o(" \u2014 "),EX=a("a"),lVo=o("GPT2ForSequenceClassification"),iVo=o(" (OpenAI GPT-2 model)"),dVo=l(),mb=a("li"),x_e=a("strong"),cVo=o("gpt_neo"),fVo=o(" \u2014 "),CX=a("a"),mVo=o("GPTNeoForSequenceClassification"),gVo=o(" (GPT Neo model)"),hVo=l(),gb=a("li"),$_e=a("strong"),pVo=o("gptj"),_Vo=o(" \u2014 "),wX=a("a"),uVo=o("GPTJForSequenceClassification"),bVo=o(" (GPT-J model)"),vVo=l(),hb=a("li"),k_e=a("strong"),FVo=o("ibert"),TVo=o(" \u2014 "),AX=a("a"),MVo=o("IBertForSequenceClassification"),EVo=o(" (I-BERT model)"),CVo=l(),pb=a("li"),S_e=a("strong"),wVo=o("layoutlm"),AVo=o(" \u2014 "),LX=a("a"),LVo=o("LayoutLMForSequenceClassification"),yVo=o(" (LayoutLM model)"),xVo=l(),_b=a("li"),R_e=a("strong"),$Vo=o("layoutlmv2"),kVo=o(" \u2014 "),yX=a("a"),SVo=o("LayoutLMv2ForSequenceClassification"),RVo=o(" (LayoutLMv2 model)"),PVo=l(),ub=a("li"),P_e=a("strong"),BVo=o("layoutlmv3"),IVo=o(" \u2014 "),xX=a("a"),NVo=o("LayoutLMv3ForSequenceClassification"),qVo=o(" (LayoutLMv3 model)"),jVo=l(),bb=a("li"),B_e=a("strong"),DVo=o("led"),GVo=o(" \u2014 "),$X=a("a"),OVo=o("LEDForSequenceClassification"),VVo=o(" (LED model)"),XVo=l(),vb=a("li"),I_e=a("strong"),zVo=o("longformer"),QVo=o(" \u2014 "),kX=a("a"),WVo=o("LongformerForSequenceClassification"),HVo=o(" (Longformer model)"),UVo=l(),Fb=a("li"),N_e=a("strong"),JVo=o("mbart"),YVo=o(" \u2014 "),SX=a("a"),KVo=o("MBartForSequenceClassification"),ZVo=o(" (mBART model)"),eXo=l(),Tb=a("li"),q_e=a("strong"),oXo=o("megatron-bert"),rXo=o(" \u2014 "),RX=a("a"),tXo=o("MegatronBertForSequenceClassification"),aXo=o(" (Megatron-BERT model)"),nXo=l(),Mb=a("li"),j_e=a("strong"),sXo=o("mobilebert"),lXo=o(" \u2014 "),PX=a("a"),iXo=o("MobileBertForSequenceClassification"),dXo=o(" (MobileBERT model)"),cXo=l(),Eb=a("li"),D_e=a("strong"),fXo=o("mpnet"),mXo=o(" \u2014 "),BX=a("a"),gXo=o("MPNetForSequenceClassification"),hXo=o(" (MPNet model)"),pXo=l(),Cb=a("li"),G_e=a("strong"),_Xo=o("mvp"),uXo=o(" \u2014 "),IX=a("a"),bXo=o("MvpForSequenceClassification"),vXo=o(" (MVP model)"),FXo=l(),wb=a("li"),O_e=a("strong"),TXo=o("nezha"),MXo=o(" \u2014 "),NX=a("a"),EXo=o("NezhaForSequenceClassification"),CXo=o(" (Nezha model)"),wXo=l(),Ab=a("li"),V_e=a("strong"),AXo=o("nystromformer"),LXo=o(" \u2014 "),qX=a("a"),yXo=o("NystromformerForSequenceClassification"),xXo=o(" (Nystr\xF6mformer model)"),$Xo=l(),Lb=a("li"),X_e=a("strong"),kXo=o("openai-gpt"),SXo=o(" \u2014 "),jX=a("a"),RXo=o("OpenAIGPTForSequenceClassification"),PXo=o(" (OpenAI GPT model)"),BXo=l(),yb=a("li"),z_e=a("strong"),IXo=o("opt"),NXo=o(" \u2014 "),DX=a("a"),qXo=o("OPTForSequenceClassification"),jXo=o(" (OPT model)"),DXo=l(),xb=a("li"),Q_e=a("strong"),GXo=o("perceiver"),OXo=o(" \u2014 "),GX=a("a"),VXo=o("PerceiverForSequenceClassification"),XXo=o(" (Perceiver model)"),zXo=l(),$b=a("li"),W_e=a("strong"),QXo=o("plbart"),WXo=o(" \u2014 "),OX=a("a"),HXo=o("PLBartForSequenceClassification"),UXo=o(" (PLBart model)"),JXo=l(),kb=a("li"),H_e=a("strong"),YXo=o("qdqbert"),KXo=o(" \u2014 "),VX=a("a"),ZXo=o("QDQBertForSequenceClassification"),ezo=o(" (QDQBert model)"),ozo=l(),Sb=a("li"),U_e=a("strong"),rzo=o("reformer"),tzo=o(" \u2014 "),XX=a("a"),azo=o("ReformerForSequenceClassification"),nzo=o(" (Reformer model)"),szo=l(),Rb=a("li"),J_e=a("strong"),lzo=o("rembert"),izo=o(" \u2014 "),zX=a("a"),dzo=o("RemBertForSequenceClassification"),czo=o(" (RemBERT model)"),fzo=l(),Pb=a("li"),Y_e=a("strong"),mzo=o("roberta"),gzo=o(" \u2014 "),QX=a("a"),hzo=o("RobertaForSequenceClassification"),pzo=o(" (RoBERTa model)"),_zo=l(),Bb=a("li"),K_e=a("strong"),uzo=o("roformer"),bzo=o(" \u2014 "),WX=a("a"),vzo=o("RoFormerForSequenceClassification"),Fzo=o(" (RoFormer model)"),Tzo=l(),Ib=a("li"),Z_e=a("strong"),Mzo=o("squeezebert"),Ezo=o(" \u2014 "),HX=a("a"),Czo=o("SqueezeBertForSequenceClassification"),wzo=o(" (SqueezeBERT model)"),Azo=l(),Nb=a("li"),eue=a("strong"),Lzo=o("tapas"),yzo=o(" \u2014 "),UX=a("a"),xzo=o("TapasForSequenceClassification"),$zo=o(" (TAPAS model)"),kzo=l(),qb=a("li"),oue=a("strong"),Szo=o("transfo-xl"),Rzo=o(" \u2014 "),JX=a("a"),Pzo=o("TransfoXLForSequenceClassification"),Bzo=o(" (Transformer-XL model)"),Izo=l(),jb=a("li"),rue=a("strong"),Nzo=o("xlm"),qzo=o(" \u2014 "),YX=a("a"),jzo=o("XLMForSequenceClassification"),Dzo=o(" (XLM model)"),Gzo=l(),Db=a("li"),tue=a("strong"),Ozo=o("xlm-roberta"),Vzo=o(" \u2014 "),KX=a("a"),Xzo=o("XLMRobertaForSequenceClassification"),zzo=o(" (XLM-RoBERTa model)"),Qzo=l(),Gb=a("li"),aue=a("strong"),Wzo=o("xlm-roberta-xl"),Hzo=o(" \u2014 "),ZX=a("a"),Uzo=o("XLMRobertaXLForSequenceClassification"),Jzo=o(" (XLM-RoBERTa-XL model)"),Yzo=l(),Ob=a("li"),nue=a("strong"),Kzo=o("xlnet"),Zzo=o(" \u2014 "),ez=a("a"),eQo=o("XLNetForSequenceClassification"),oQo=o(" (XLNet model)"),rQo=l(),Vb=a("li"),sue=a("strong"),tQo=o("yoso"),aQo=o(" \u2014 "),oz=a("a"),nQo=o("YosoForSequenceClassification"),sQo=o(" (YOSO model)"),lQo=l(),Xb=a("p"),iQo=o("The model is set in evaluation mode by default using "),lue=a("code"),dQo=o("model.eval()"),cQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),fQo=o("model.train()"),mQo=l(),F(zb.$$.fragment),WXe=l(),sd=a("h2"),Qb=a("a"),due=a("span"),F(my.$$.fragment),gQo=l(),cue=a("span"),hQo=o("AutoModelForMultipleChoice"),HXe=l(),No=a("div"),F(gy.$$.fragment),pQo=l(),ld=a("p"),_Qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rz=a("a"),uQo=o("from_pretrained()"),bQo=o(" class method or the "),tz=a("a"),vQo=o("from_config()"),FQo=o(` class
method.`),TQo=l(),hy=a("p"),MQo=o("This class cannot be instantiated directly using "),fue=a("code"),EQo=o("__init__()"),CQo=o(" (throws an error)."),wQo=l(),ht=a("div"),F(py.$$.fragment),AQo=l(),mue=a("p"),LQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yQo=l(),id=a("p"),xQo=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),$Qo=o("not"),kQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),SQo=o("from_pretrained()"),RQo=o(" to load the model weights."),PQo=l(),F(Wb.$$.fragment),BQo=l(),to=a("div"),F(_y.$$.fragment),IQo=l(),hue=a("p"),NQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qQo=l(),Oa=a("p"),jQo=o("The model class to instantiate is selected based on the "),pue=a("code"),DQo=o("model_type"),GQo=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),OQo=o("pretrained_model_name_or_path"),VQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),XQo=o("pretrained_model_name_or_path"),zQo=o(":"),QQo=l(),Z=a("ul"),Hb=a("li"),bue=a("strong"),WQo=o("albert"),HQo=o(" \u2014 "),nz=a("a"),UQo=o("AlbertForMultipleChoice"),JQo=o(" (ALBERT model)"),YQo=l(),Ub=a("li"),vue=a("strong"),KQo=o("bert"),ZQo=o(" \u2014 "),sz=a("a"),eWo=o("BertForMultipleChoice"),oWo=o(" (BERT model)"),rWo=l(),Jb=a("li"),Fue=a("strong"),tWo=o("big_bird"),aWo=o(" \u2014 "),lz=a("a"),nWo=o("BigBirdForMultipleChoice"),sWo=o(" (BigBird model)"),lWo=l(),Yb=a("li"),Tue=a("strong"),iWo=o("camembert"),dWo=o(" \u2014 "),iz=a("a"),cWo=o("CamembertForMultipleChoice"),fWo=o(" (CamemBERT model)"),mWo=l(),Kb=a("li"),Mue=a("strong"),gWo=o("canine"),hWo=o(" \u2014 "),dz=a("a"),pWo=o("CanineForMultipleChoice"),_Wo=o(" (CANINE model)"),uWo=l(),Zb=a("li"),Eue=a("strong"),bWo=o("convbert"),vWo=o(" \u2014 "),cz=a("a"),FWo=o("ConvBertForMultipleChoice"),TWo=o(" (ConvBERT model)"),MWo=l(),ev=a("li"),Cue=a("strong"),EWo=o("data2vec-text"),CWo=o(" \u2014 "),fz=a("a"),wWo=o("Data2VecTextForMultipleChoice"),AWo=o(" (Data2VecText model)"),LWo=l(),ov=a("li"),wue=a("strong"),yWo=o("deberta-v2"),xWo=o(" \u2014 "),mz=a("a"),$Wo=o("DebertaV2ForMultipleChoice"),kWo=o(" (DeBERTa-v2 model)"),SWo=l(),rv=a("li"),Aue=a("strong"),RWo=o("distilbert"),PWo=o(" \u2014 "),gz=a("a"),BWo=o("DistilBertForMultipleChoice"),IWo=o(" (DistilBERT model)"),NWo=l(),tv=a("li"),Lue=a("strong"),qWo=o("electra"),jWo=o(" \u2014 "),hz=a("a"),DWo=o("ElectraForMultipleChoice"),GWo=o(" (ELECTRA model)"),OWo=l(),av=a("li"),yue=a("strong"),VWo=o("flaubert"),XWo=o(" \u2014 "),pz=a("a"),zWo=o("FlaubertForMultipleChoice"),QWo=o(" (FlauBERT model)"),WWo=l(),nv=a("li"),xue=a("strong"),HWo=o("fnet"),UWo=o(" \u2014 "),_z=a("a"),JWo=o("FNetForMultipleChoice"),YWo=o(" (FNet model)"),KWo=l(),sv=a("li"),$ue=a("strong"),ZWo=o("funnel"),eHo=o(" \u2014 "),uz=a("a"),oHo=o("FunnelForMultipleChoice"),rHo=o(" (Funnel Transformer model)"),tHo=l(),lv=a("li"),kue=a("strong"),aHo=o("ibert"),nHo=o(" \u2014 "),bz=a("a"),sHo=o("IBertForMultipleChoice"),lHo=o(" (I-BERT model)"),iHo=l(),iv=a("li"),Sue=a("strong"),dHo=o("longformer"),cHo=o(" \u2014 "),vz=a("a"),fHo=o("LongformerForMultipleChoice"),mHo=o(" (Longformer model)"),gHo=l(),dv=a("li"),Rue=a("strong"),hHo=o("megatron-bert"),pHo=o(" \u2014 "),Fz=a("a"),_Ho=o("MegatronBertForMultipleChoice"),uHo=o(" (Megatron-BERT model)"),bHo=l(),cv=a("li"),Pue=a("strong"),vHo=o("mobilebert"),FHo=o(" \u2014 "),Tz=a("a"),THo=o("MobileBertForMultipleChoice"),MHo=o(" (MobileBERT model)"),EHo=l(),fv=a("li"),Bue=a("strong"),CHo=o("mpnet"),wHo=o(" \u2014 "),Mz=a("a"),AHo=o("MPNetForMultipleChoice"),LHo=o(" (MPNet model)"),yHo=l(),mv=a("li"),Iue=a("strong"),xHo=o("nezha"),$Ho=o(" \u2014 "),Ez=a("a"),kHo=o("NezhaForMultipleChoice"),SHo=o(" (Nezha model)"),RHo=l(),gv=a("li"),Nue=a("strong"),PHo=o("nystromformer"),BHo=o(" \u2014 "),Cz=a("a"),IHo=o("NystromformerForMultipleChoice"),NHo=o(" (Nystr\xF6mformer model)"),qHo=l(),hv=a("li"),que=a("strong"),jHo=o("qdqbert"),DHo=o(" \u2014 "),wz=a("a"),GHo=o("QDQBertForMultipleChoice"),OHo=o(" (QDQBert model)"),VHo=l(),pv=a("li"),jue=a("strong"),XHo=o("rembert"),zHo=o(" \u2014 "),Az=a("a"),QHo=o("RemBertForMultipleChoice"),WHo=o(" (RemBERT model)"),HHo=l(),_v=a("li"),Due=a("strong"),UHo=o("roberta"),JHo=o(" \u2014 "),Lz=a("a"),YHo=o("RobertaForMultipleChoice"),KHo=o(" (RoBERTa model)"),ZHo=l(),uv=a("li"),Gue=a("strong"),eUo=o("roformer"),oUo=o(" \u2014 "),yz=a("a"),rUo=o("RoFormerForMultipleChoice"),tUo=o(" (RoFormer model)"),aUo=l(),bv=a("li"),Oue=a("strong"),nUo=o("squeezebert"),sUo=o(" \u2014 "),xz=a("a"),lUo=o("SqueezeBertForMultipleChoice"),iUo=o(" (SqueezeBERT model)"),dUo=l(),vv=a("li"),Vue=a("strong"),cUo=o("xlm"),fUo=o(" \u2014 "),$z=a("a"),mUo=o("XLMForMultipleChoice"),gUo=o(" (XLM model)"),hUo=l(),Fv=a("li"),Xue=a("strong"),pUo=o("xlm-roberta"),_Uo=o(" \u2014 "),kz=a("a"),uUo=o("XLMRobertaForMultipleChoice"),bUo=o(" (XLM-RoBERTa model)"),vUo=l(),Tv=a("li"),zue=a("strong"),FUo=o("xlm-roberta-xl"),TUo=o(" \u2014 "),Sz=a("a"),MUo=o("XLMRobertaXLForMultipleChoice"),EUo=o(" (XLM-RoBERTa-XL model)"),CUo=l(),Mv=a("li"),Que=a("strong"),wUo=o("xlnet"),AUo=o(" \u2014 "),Rz=a("a"),LUo=o("XLNetForMultipleChoice"),yUo=o(" (XLNet model)"),xUo=l(),Ev=a("li"),Wue=a("strong"),$Uo=o("yoso"),kUo=o(" \u2014 "),Pz=a("a"),SUo=o("YosoForMultipleChoice"),RUo=o(" (YOSO model)"),PUo=l(),Cv=a("p"),BUo=o("The model is set in evaluation mode by default using "),Hue=a("code"),IUo=o("model.eval()"),NUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),qUo=o("model.train()"),jUo=l(),F(wv.$$.fragment),UXe=l(),dd=a("h2"),Av=a("a"),Jue=a("span"),F(uy.$$.fragment),DUo=l(),Yue=a("span"),GUo=o("AutoModelForNextSentencePrediction"),JXe=l(),qo=a("div"),F(by.$$.fragment),OUo=l(),cd=a("p"),VUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Bz=a("a"),XUo=o("from_pretrained()"),zUo=o(" class method or the "),Iz=a("a"),QUo=o("from_config()"),WUo=o(` class
method.`),HUo=l(),vy=a("p"),UUo=o("This class cannot be instantiated directly using "),Kue=a("code"),JUo=o("__init__()"),YUo=o(" (throws an error)."),KUo=l(),pt=a("div"),F(Fy.$$.fragment),ZUo=l(),Zue=a("p"),eJo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oJo=l(),fd=a("p"),rJo=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),tJo=o("not"),aJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),nJo=o("from_pretrained()"),sJo=o(" to load the model weights."),lJo=l(),F(Lv.$$.fragment),iJo=l(),ao=a("div"),F(Ty.$$.fragment),dJo=l(),o4e=a("p"),cJo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fJo=l(),Va=a("p"),mJo=o("The model class to instantiate is selected based on the "),r4e=a("code"),gJo=o("model_type"),hJo=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),pJo=o("pretrained_model_name_or_path"),_Jo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),uJo=o("pretrained_model_name_or_path"),bJo=o(":"),vJo=l(),jo=a("ul"),yv=a("li"),n4e=a("strong"),FJo=o("bert"),TJo=o(" \u2014 "),qz=a("a"),MJo=o("BertForNextSentencePrediction"),EJo=o(" (BERT model)"),CJo=l(),xv=a("li"),s4e=a("strong"),wJo=o("fnet"),AJo=o(" \u2014 "),jz=a("a"),LJo=o("FNetForNextSentencePrediction"),yJo=o(" (FNet model)"),xJo=l(),$v=a("li"),l4e=a("strong"),$Jo=o("megatron-bert"),kJo=o(" \u2014 "),Dz=a("a"),SJo=o("MegatronBertForNextSentencePrediction"),RJo=o(" (Megatron-BERT model)"),PJo=l(),kv=a("li"),i4e=a("strong"),BJo=o("mobilebert"),IJo=o(" \u2014 "),Gz=a("a"),NJo=o("MobileBertForNextSentencePrediction"),qJo=o(" (MobileBERT model)"),jJo=l(),Sv=a("li"),d4e=a("strong"),DJo=o("nezha"),GJo=o(" \u2014 "),Oz=a("a"),OJo=o("NezhaForNextSentencePrediction"),VJo=o(" (Nezha model)"),XJo=l(),Rv=a("li"),c4e=a("strong"),zJo=o("qdqbert"),QJo=o(" \u2014 "),Vz=a("a"),WJo=o("QDQBertForNextSentencePrediction"),HJo=o(" (QDQBert model)"),UJo=l(),Pv=a("p"),JJo=o("The model is set in evaluation mode by default using "),f4e=a("code"),YJo=o("model.eval()"),KJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m4e=a("code"),ZJo=o("model.train()"),eYo=l(),F(Bv.$$.fragment),YXe=l(),md=a("h2"),Iv=a("a"),g4e=a("span"),F(My.$$.fragment),oYo=l(),h4e=a("span"),rYo=o("AutoModelForTokenClassification"),KXe=l(),Do=a("div"),F(Ey.$$.fragment),tYo=l(),gd=a("p"),aYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Xz=a("a"),nYo=o("from_pretrained()"),sYo=o(" class method or the "),zz=a("a"),lYo=o("from_config()"),iYo=o(` class
method.`),dYo=l(),Cy=a("p"),cYo=o("This class cannot be instantiated directly using "),p4e=a("code"),fYo=o("__init__()"),mYo=o(" (throws an error)."),gYo=l(),_t=a("div"),F(wy.$$.fragment),hYo=l(),_4e=a("p"),pYo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Yo=l(),hd=a("p"),uYo=o(`Note:
Loading a model from its configuration file does `),u4e=a("strong"),bYo=o("not"),vYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),FYo=o("from_pretrained()"),TYo=o(" to load the model weights."),MYo=l(),F(Nv.$$.fragment),EYo=l(),no=a("div"),F(Ay.$$.fragment),CYo=l(),b4e=a("p"),wYo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),AYo=l(),Xa=a("p"),LYo=o("The model class to instantiate is selected based on the "),v4e=a("code"),yYo=o("model_type"),xYo=o(` property of the config object (either
passed as an argument or loaded from `),F4e=a("code"),$Yo=o("pretrained_model_name_or_path"),kYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=a("code"),SYo=o("pretrained_model_name_or_path"),RYo=o(":"),PYo=l(),U=a("ul"),qv=a("li"),M4e=a("strong"),BYo=o("albert"),IYo=o(" \u2014 "),Wz=a("a"),NYo=o("AlbertForTokenClassification"),qYo=o(" (ALBERT model)"),jYo=l(),jv=a("li"),E4e=a("strong"),DYo=o("bert"),GYo=o(" \u2014 "),Hz=a("a"),OYo=o("BertForTokenClassification"),VYo=o(" (BERT model)"),XYo=l(),Dv=a("li"),C4e=a("strong"),zYo=o("big_bird"),QYo=o(" \u2014 "),Uz=a("a"),WYo=o("BigBirdForTokenClassification"),HYo=o(" (BigBird model)"),UYo=l(),Gv=a("li"),w4e=a("strong"),JYo=o("bloom"),YYo=o(" \u2014 "),Jz=a("a"),KYo=o("BloomForTokenClassification"),ZYo=o(" (BLOOM model)"),eKo=l(),Ov=a("li"),A4e=a("strong"),oKo=o("camembert"),rKo=o(" \u2014 "),Yz=a("a"),tKo=o("CamembertForTokenClassification"),aKo=o(" (CamemBERT model)"),nKo=l(),Vv=a("li"),L4e=a("strong"),sKo=o("canine"),lKo=o(" \u2014 "),Kz=a("a"),iKo=o("CanineForTokenClassification"),dKo=o(" (CANINE model)"),cKo=l(),Xv=a("li"),y4e=a("strong"),fKo=o("convbert"),mKo=o(" \u2014 "),Zz=a("a"),gKo=o("ConvBertForTokenClassification"),hKo=o(" (ConvBERT model)"),pKo=l(),zv=a("li"),x4e=a("strong"),_Ko=o("data2vec-text"),uKo=o(" \u2014 "),eQ=a("a"),bKo=o("Data2VecTextForTokenClassification"),vKo=o(" (Data2VecText model)"),FKo=l(),Qv=a("li"),$4e=a("strong"),TKo=o("deberta"),MKo=o(" \u2014 "),oQ=a("a"),EKo=o("DebertaForTokenClassification"),CKo=o(" (DeBERTa model)"),wKo=l(),Wv=a("li"),k4e=a("strong"),AKo=o("deberta-v2"),LKo=o(" \u2014 "),rQ=a("a"),yKo=o("DebertaV2ForTokenClassification"),xKo=o(" (DeBERTa-v2 model)"),$Ko=l(),Hv=a("li"),S4e=a("strong"),kKo=o("distilbert"),SKo=o(" \u2014 "),tQ=a("a"),RKo=o("DistilBertForTokenClassification"),PKo=o(" (DistilBERT model)"),BKo=l(),Uv=a("li"),R4e=a("strong"),IKo=o("electra"),NKo=o(" \u2014 "),aQ=a("a"),qKo=o("ElectraForTokenClassification"),jKo=o(" (ELECTRA model)"),DKo=l(),Jv=a("li"),P4e=a("strong"),GKo=o("flaubert"),OKo=o(" \u2014 "),nQ=a("a"),VKo=o("FlaubertForTokenClassification"),XKo=o(" (FlauBERT model)"),zKo=l(),Yv=a("li"),B4e=a("strong"),QKo=o("fnet"),WKo=o(" \u2014 "),sQ=a("a"),HKo=o("FNetForTokenClassification"),UKo=o(" (FNet model)"),JKo=l(),Kv=a("li"),I4e=a("strong"),YKo=o("funnel"),KKo=o(" \u2014 "),lQ=a("a"),ZKo=o("FunnelForTokenClassification"),eZo=o(" (Funnel Transformer model)"),oZo=l(),Zv=a("li"),N4e=a("strong"),rZo=o("gpt2"),tZo=o(" \u2014 "),iQ=a("a"),aZo=o("GPT2ForTokenClassification"),nZo=o(" (OpenAI GPT-2 model)"),sZo=l(),eF=a("li"),q4e=a("strong"),lZo=o("ibert"),iZo=o(" \u2014 "),dQ=a("a"),dZo=o("IBertForTokenClassification"),cZo=o(" (I-BERT model)"),fZo=l(),oF=a("li"),j4e=a("strong"),mZo=o("layoutlm"),gZo=o(" \u2014 "),cQ=a("a"),hZo=o("LayoutLMForTokenClassification"),pZo=o(" (LayoutLM model)"),_Zo=l(),rF=a("li"),D4e=a("strong"),uZo=o("layoutlmv2"),bZo=o(" \u2014 "),fQ=a("a"),vZo=o("LayoutLMv2ForTokenClassification"),FZo=o(" (LayoutLMv2 model)"),TZo=l(),tF=a("li"),G4e=a("strong"),MZo=o("layoutlmv3"),EZo=o(" \u2014 "),mQ=a("a"),CZo=o("LayoutLMv3ForTokenClassification"),wZo=o(" (LayoutLMv3 model)"),AZo=l(),aF=a("li"),O4e=a("strong"),LZo=o("longformer"),yZo=o(" \u2014 "),gQ=a("a"),xZo=o("LongformerForTokenClassification"),$Zo=o(" (Longformer model)"),kZo=l(),nF=a("li"),V4e=a("strong"),SZo=o("megatron-bert"),RZo=o(" \u2014 "),hQ=a("a"),PZo=o("MegatronBertForTokenClassification"),BZo=o(" (Megatron-BERT model)"),IZo=l(),sF=a("li"),X4e=a("strong"),NZo=o("mobilebert"),qZo=o(" \u2014 "),pQ=a("a"),jZo=o("MobileBertForTokenClassification"),DZo=o(" (MobileBERT model)"),GZo=l(),lF=a("li"),z4e=a("strong"),OZo=o("mpnet"),VZo=o(" \u2014 "),_Q=a("a"),XZo=o("MPNetForTokenClassification"),zZo=o(" (MPNet model)"),QZo=l(),iF=a("li"),Q4e=a("strong"),WZo=o("nezha"),HZo=o(" \u2014 "),uQ=a("a"),UZo=o("NezhaForTokenClassification"),JZo=o(" (Nezha model)"),YZo=l(),dF=a("li"),W4e=a("strong"),KZo=o("nystromformer"),ZZo=o(" \u2014 "),bQ=a("a"),eer=o("NystromformerForTokenClassification"),oer=o(" (Nystr\xF6mformer model)"),rer=l(),cF=a("li"),H4e=a("strong"),ter=o("qdqbert"),aer=o(" \u2014 "),vQ=a("a"),ner=o("QDQBertForTokenClassification"),ser=o(" (QDQBert model)"),ler=l(),fF=a("li"),U4e=a("strong"),ier=o("rembert"),der=o(" \u2014 "),FQ=a("a"),cer=o("RemBertForTokenClassification"),fer=o(" (RemBERT model)"),mer=l(),mF=a("li"),J4e=a("strong"),ger=o("roberta"),her=o(" \u2014 "),TQ=a("a"),per=o("RobertaForTokenClassification"),_er=o(" (RoBERTa model)"),uer=l(),gF=a("li"),Y4e=a("strong"),ber=o("roformer"),ver=o(" \u2014 "),MQ=a("a"),Fer=o("RoFormerForTokenClassification"),Ter=o(" (RoFormer model)"),Mer=l(),hF=a("li"),K4e=a("strong"),Eer=o("squeezebert"),Cer=o(" \u2014 "),EQ=a("a"),wer=o("SqueezeBertForTokenClassification"),Aer=o(" (SqueezeBERT model)"),Ler=l(),pF=a("li"),Z4e=a("strong"),yer=o("xlm"),xer=o(" \u2014 "),CQ=a("a"),$er=o("XLMForTokenClassification"),ker=o(" (XLM model)"),Ser=l(),_F=a("li"),e2e=a("strong"),Rer=o("xlm-roberta"),Per=o(" \u2014 "),wQ=a("a"),Ber=o("XLMRobertaForTokenClassification"),Ier=o(" (XLM-RoBERTa model)"),Ner=l(),uF=a("li"),o2e=a("strong"),qer=o("xlm-roberta-xl"),jer=o(" \u2014 "),AQ=a("a"),Der=o("XLMRobertaXLForTokenClassification"),Ger=o(" (XLM-RoBERTa-XL model)"),Oer=l(),bF=a("li"),r2e=a("strong"),Ver=o("xlnet"),Xer=o(" \u2014 "),LQ=a("a"),zer=o("XLNetForTokenClassification"),Qer=o(" (XLNet model)"),Wer=l(),vF=a("li"),t2e=a("strong"),Her=o("yoso"),Uer=o(" \u2014 "),yQ=a("a"),Jer=o("YosoForTokenClassification"),Yer=o(" (YOSO model)"),Ker=l(),FF=a("p"),Zer=o("The model is set in evaluation mode by default using "),a2e=a("code"),eor=o("model.eval()"),oor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n2e=a("code"),ror=o("model.train()"),tor=l(),F(TF.$$.fragment),ZXe=l(),pd=a("h2"),MF=a("a"),s2e=a("span"),F(Ly.$$.fragment),aor=l(),l2e=a("span"),nor=o("AutoModelForQuestionAnswering"),eze=l(),Go=a("div"),F(yy.$$.fragment),sor=l(),_d=a("p"),lor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xQ=a("a"),ior=o("from_pretrained()"),dor=o(" class method or the "),$Q=a("a"),cor=o("from_config()"),mor=o(` class
method.`),gor=l(),xy=a("p"),hor=o("This class cannot be instantiated directly using "),i2e=a("code"),por=o("__init__()"),_or=o(" (throws an error)."),uor=l(),ut=a("div"),F($y.$$.fragment),bor=l(),d2e=a("p"),vor=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),For=l(),ud=a("p"),Tor=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),Mor=o("not"),Eor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=a("a"),Cor=o("from_pretrained()"),wor=o(" to load the model weights."),Aor=l(),F(EF.$$.fragment),Lor=l(),so=a("div"),F(ky.$$.fragment),yor=l(),f2e=a("p"),xor=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$or=l(),za=a("p"),kor=o("The model class to instantiate is selected based on the "),m2e=a("code"),Sor=o("model_type"),Ror=o(` property of the config object (either
passed as an argument or loaded from `),g2e=a("code"),Por=o("pretrained_model_name_or_path"),Bor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=a("code"),Ior=o("pretrained_model_name_or_path"),Nor=o(":"),qor=l(),V=a("ul"),CF=a("li"),p2e=a("strong"),jor=o("albert"),Dor=o(" \u2014 "),SQ=a("a"),Gor=o("AlbertForQuestionAnswering"),Oor=o(" (ALBERT model)"),Vor=l(),wF=a("li"),_2e=a("strong"),Xor=o("bart"),zor=o(" \u2014 "),RQ=a("a"),Qor=o("BartForQuestionAnswering"),Wor=o(" (BART model)"),Hor=l(),AF=a("li"),u2e=a("strong"),Uor=o("bert"),Jor=o(" \u2014 "),PQ=a("a"),Yor=o("BertForQuestionAnswering"),Kor=o(" (BERT model)"),Zor=l(),LF=a("li"),b2e=a("strong"),err=o("big_bird"),orr=o(" \u2014 "),BQ=a("a"),rrr=o("BigBirdForQuestionAnswering"),trr=o(" (BigBird model)"),arr=l(),yF=a("li"),v2e=a("strong"),nrr=o("bigbird_pegasus"),srr=o(" \u2014 "),IQ=a("a"),lrr=o("BigBirdPegasusForQuestionAnswering"),irr=o(" (BigBird-Pegasus model)"),drr=l(),xF=a("li"),F2e=a("strong"),crr=o("camembert"),frr=o(" \u2014 "),NQ=a("a"),mrr=o("CamembertForQuestionAnswering"),grr=o(" (CamemBERT model)"),hrr=l(),$F=a("li"),T2e=a("strong"),prr=o("canine"),_rr=o(" \u2014 "),qQ=a("a"),urr=o("CanineForQuestionAnswering"),brr=o(" (CANINE model)"),vrr=l(),kF=a("li"),M2e=a("strong"),Frr=o("convbert"),Trr=o(" \u2014 "),jQ=a("a"),Mrr=o("ConvBertForQuestionAnswering"),Err=o(" (ConvBERT model)"),Crr=l(),SF=a("li"),E2e=a("strong"),wrr=o("data2vec-text"),Arr=o(" \u2014 "),DQ=a("a"),Lrr=o("Data2VecTextForQuestionAnswering"),yrr=o(" (Data2VecText model)"),xrr=l(),RF=a("li"),C2e=a("strong"),$rr=o("deberta"),krr=o(" \u2014 "),GQ=a("a"),Srr=o("DebertaForQuestionAnswering"),Rrr=o(" (DeBERTa model)"),Prr=l(),PF=a("li"),w2e=a("strong"),Brr=o("deberta-v2"),Irr=o(" \u2014 "),OQ=a("a"),Nrr=o("DebertaV2ForQuestionAnswering"),qrr=o(" (DeBERTa-v2 model)"),jrr=l(),BF=a("li"),A2e=a("strong"),Drr=o("distilbert"),Grr=o(" \u2014 "),VQ=a("a"),Orr=o("DistilBertForQuestionAnswering"),Vrr=o(" (DistilBERT model)"),Xrr=l(),IF=a("li"),L2e=a("strong"),zrr=o("electra"),Qrr=o(" \u2014 "),XQ=a("a"),Wrr=o("ElectraForQuestionAnswering"),Hrr=o(" (ELECTRA model)"),Urr=l(),NF=a("li"),y2e=a("strong"),Jrr=o("flaubert"),Yrr=o(" \u2014 "),zQ=a("a"),Krr=o("FlaubertForQuestionAnsweringSimple"),Zrr=o(" (FlauBERT model)"),etr=l(),qF=a("li"),x2e=a("strong"),otr=o("fnet"),rtr=o(" \u2014 "),QQ=a("a"),ttr=o("FNetForQuestionAnswering"),atr=o(" (FNet model)"),ntr=l(),jF=a("li"),$2e=a("strong"),str=o("funnel"),ltr=o(" \u2014 "),WQ=a("a"),itr=o("FunnelForQuestionAnswering"),dtr=o(" (Funnel Transformer model)"),ctr=l(),DF=a("li"),k2e=a("strong"),ftr=o("gptj"),mtr=o(" \u2014 "),HQ=a("a"),gtr=o("GPTJForQuestionAnswering"),htr=o(" (GPT-J model)"),ptr=l(),GF=a("li"),S2e=a("strong"),_tr=o("ibert"),utr=o(" \u2014 "),UQ=a("a"),btr=o("IBertForQuestionAnswering"),vtr=o(" (I-BERT model)"),Ftr=l(),OF=a("li"),R2e=a("strong"),Ttr=o("layoutlmv2"),Mtr=o(" \u2014 "),JQ=a("a"),Etr=o("LayoutLMv2ForQuestionAnswering"),Ctr=o(" (LayoutLMv2 model)"),wtr=l(),VF=a("li"),P2e=a("strong"),Atr=o("layoutlmv3"),Ltr=o(" \u2014 "),YQ=a("a"),ytr=o("LayoutLMv3ForQuestionAnswering"),xtr=o(" (LayoutLMv3 model)"),$tr=l(),XF=a("li"),B2e=a("strong"),ktr=o("led"),Str=o(" \u2014 "),KQ=a("a"),Rtr=o("LEDForQuestionAnswering"),Ptr=o(" (LED model)"),Btr=l(),zF=a("li"),I2e=a("strong"),Itr=o("longformer"),Ntr=o(" \u2014 "),ZQ=a("a"),qtr=o("LongformerForQuestionAnswering"),jtr=o(" (Longformer model)"),Dtr=l(),QF=a("li"),N2e=a("strong"),Gtr=o("lxmert"),Otr=o(" \u2014 "),eW=a("a"),Vtr=o("LxmertForQuestionAnswering"),Xtr=o(" (LXMERT model)"),ztr=l(),WF=a("li"),q2e=a("strong"),Qtr=o("mbart"),Wtr=o(" \u2014 "),oW=a("a"),Htr=o("MBartForQuestionAnswering"),Utr=o(" (mBART model)"),Jtr=l(),HF=a("li"),j2e=a("strong"),Ytr=o("megatron-bert"),Ktr=o(" \u2014 "),rW=a("a"),Ztr=o("MegatronBertForQuestionAnswering"),ear=o(" (Megatron-BERT model)"),oar=l(),UF=a("li"),D2e=a("strong"),rar=o("mobilebert"),tar=o(" \u2014 "),tW=a("a"),aar=o("MobileBertForQuestionAnswering"),nar=o(" (MobileBERT model)"),sar=l(),JF=a("li"),G2e=a("strong"),lar=o("mpnet"),iar=o(" \u2014 "),aW=a("a"),dar=o("MPNetForQuestionAnswering"),car=o(" (MPNet model)"),far=l(),YF=a("li"),O2e=a("strong"),mar=o("mvp"),gar=o(" \u2014 "),nW=a("a"),har=o("MvpForQuestionAnswering"),par=o(" (MVP model)"),_ar=l(),KF=a("li"),V2e=a("strong"),uar=o("nezha"),bar=o(" \u2014 "),sW=a("a"),Far=o("NezhaForQuestionAnswering"),Tar=o(" (Nezha model)"),Mar=l(),ZF=a("li"),X2e=a("strong"),Ear=o("nystromformer"),Car=o(" \u2014 "),lW=a("a"),war=o("NystromformerForQuestionAnswering"),Aar=o(" (Nystr\xF6mformer model)"),Lar=l(),eT=a("li"),z2e=a("strong"),yar=o("qdqbert"),xar=o(" \u2014 "),iW=a("a"),$ar=o("QDQBertForQuestionAnswering"),kar=o(" (QDQBert model)"),Sar=l(),oT=a("li"),Q2e=a("strong"),Rar=o("reformer"),Par=o(" \u2014 "),dW=a("a"),Bar=o("ReformerForQuestionAnswering"),Iar=o(" (Reformer model)"),Nar=l(),rT=a("li"),W2e=a("strong"),qar=o("rembert"),jar=o(" \u2014 "),cW=a("a"),Dar=o("RemBertForQuestionAnswering"),Gar=o(" (RemBERT model)"),Oar=l(),tT=a("li"),H2e=a("strong"),Var=o("roberta"),Xar=o(" \u2014 "),fW=a("a"),zar=o("RobertaForQuestionAnswering"),Qar=o(" (RoBERTa model)"),War=l(),aT=a("li"),U2e=a("strong"),Har=o("roformer"),Uar=o(" \u2014 "),mW=a("a"),Jar=o("RoFormerForQuestionAnswering"),Yar=o(" (RoFormer model)"),Kar=l(),nT=a("li"),J2e=a("strong"),Zar=o("splinter"),enr=o(" \u2014 "),gW=a("a"),onr=o("SplinterForQuestionAnswering"),rnr=o(" (Splinter model)"),tnr=l(),sT=a("li"),Y2e=a("strong"),anr=o("squeezebert"),nnr=o(" \u2014 "),hW=a("a"),snr=o("SqueezeBertForQuestionAnswering"),lnr=o(" (SqueezeBERT model)"),inr=l(),lT=a("li"),K2e=a("strong"),dnr=o("xlm"),cnr=o(" \u2014 "),pW=a("a"),fnr=o("XLMForQuestionAnsweringSimple"),mnr=o(" (XLM model)"),gnr=l(),iT=a("li"),Z2e=a("strong"),hnr=o("xlm-roberta"),pnr=o(" \u2014 "),_W=a("a"),_nr=o("XLMRobertaForQuestionAnswering"),unr=o(" (XLM-RoBERTa model)"),bnr=l(),dT=a("li"),e1e=a("strong"),vnr=o("xlm-roberta-xl"),Fnr=o(" \u2014 "),uW=a("a"),Tnr=o("XLMRobertaXLForQuestionAnswering"),Mnr=o(" (XLM-RoBERTa-XL model)"),Enr=l(),cT=a("li"),o1e=a("strong"),Cnr=o("xlnet"),wnr=o(" \u2014 "),bW=a("a"),Anr=o("XLNetForQuestionAnsweringSimple"),Lnr=o(" (XLNet model)"),ynr=l(),fT=a("li"),r1e=a("strong"),xnr=o("yoso"),$nr=o(" \u2014 "),vW=a("a"),knr=o("YosoForQuestionAnswering"),Snr=o(" (YOSO model)"),Rnr=l(),mT=a("p"),Pnr=o("The model is set in evaluation mode by default using "),t1e=a("code"),Bnr=o("model.eval()"),Inr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a1e=a("code"),Nnr=o("model.train()"),qnr=l(),F(gT.$$.fragment),oze=l(),bd=a("h2"),hT=a("a"),n1e=a("span"),F(Sy.$$.fragment),jnr=l(),s1e=a("span"),Dnr=o("AutoModelForTableQuestionAnswering"),rze=l(),Oo=a("div"),F(Ry.$$.fragment),Gnr=l(),vd=a("p"),Onr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),FW=a("a"),Vnr=o("from_pretrained()"),Xnr=o(" class method or the "),TW=a("a"),znr=o("from_config()"),Qnr=o(` class
method.`),Wnr=l(),Py=a("p"),Hnr=o("This class cannot be instantiated directly using "),l1e=a("code"),Unr=o("__init__()"),Jnr=o(" (throws an error)."),Ynr=l(),bt=a("div"),F(By.$$.fragment),Knr=l(),i1e=a("p"),Znr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),esr=l(),Fd=a("p"),osr=o(`Note:
Loading a model from its configuration file does `),d1e=a("strong"),rsr=o("not"),tsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),asr=o("from_pretrained()"),nsr=o(" to load the model weights."),ssr=l(),F(pT.$$.fragment),lsr=l(),lo=a("div"),F(Iy.$$.fragment),isr=l(),c1e=a("p"),dsr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),csr=l(),Qa=a("p"),fsr=o("The model class to instantiate is selected based on the "),f1e=a("code"),msr=o("model_type"),gsr=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),hsr=o("pretrained_model_name_or_path"),psr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=a("code"),_sr=o("pretrained_model_name_or_path"),usr=o(":"),bsr=l(),h1e=a("ul"),_T=a("li"),p1e=a("strong"),vsr=o("tapas"),Fsr=o(" \u2014 "),EW=a("a"),Tsr=o("TapasForQuestionAnswering"),Msr=o(" (TAPAS model)"),Esr=l(),uT=a("p"),Csr=o("The model is set in evaluation mode by default using "),_1e=a("code"),wsr=o("model.eval()"),Asr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=a("code"),Lsr=o("model.train()"),ysr=l(),F(bT.$$.fragment),tze=l(),Td=a("h2"),vT=a("a"),b1e=a("span"),F(Ny.$$.fragment),xsr=l(),v1e=a("span"),$sr=o("AutoModelForImageClassification"),aze=l(),Vo=a("div"),F(qy.$$.fragment),ksr=l(),Md=a("p"),Ssr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CW=a("a"),Rsr=o("from_pretrained()"),Psr=o(" class method or the "),wW=a("a"),Bsr=o("from_config()"),Isr=o(` class
method.`),Nsr=l(),jy=a("p"),qsr=o("This class cannot be instantiated directly using "),F1e=a("code"),jsr=o("__init__()"),Dsr=o(" (throws an error)."),Gsr=l(),vt=a("div"),F(Dy.$$.fragment),Osr=l(),T1e=a("p"),Vsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xsr=l(),Ed=a("p"),zsr=o(`Note:
Loading a model from its configuration file does `),M1e=a("strong"),Qsr=o("not"),Wsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),Hsr=o("from_pretrained()"),Usr=o(" to load the model weights."),Jsr=l(),F(FT.$$.fragment),Ysr=l(),io=a("div"),F(Gy.$$.fragment),Ksr=l(),E1e=a("p"),Zsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),elr=l(),Wa=a("p"),olr=o("The model class to instantiate is selected based on the "),C1e=a("code"),rlr=o("model_type"),tlr=o(` property of the config object (either
passed as an argument or loaded from `),w1e=a("code"),alr=o("pretrained_model_name_or_path"),nlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=a("code"),slr=o("pretrained_model_name_or_path"),llr=o(":"),ilr=l(),ve=a("ul"),TT=a("li"),L1e=a("strong"),dlr=o("beit"),clr=o(" \u2014 "),LW=a("a"),flr=o("BeitForImageClassification"),mlr=o(" (BEiT model)"),glr=l(),MT=a("li"),y1e=a("strong"),hlr=o("convnext"),plr=o(" \u2014 "),yW=a("a"),_lr=o("ConvNextForImageClassification"),ulr=o(" (ConvNeXT model)"),blr=l(),ET=a("li"),x1e=a("strong"),vlr=o("cvt"),Flr=o(" \u2014 "),xW=a("a"),Tlr=o("CvtForImageClassification"),Mlr=o(" (CvT model)"),Elr=l(),CT=a("li"),$1e=a("strong"),Clr=o("data2vec-vision"),wlr=o(" \u2014 "),$W=a("a"),Alr=o("Data2VecVisionForImageClassification"),Llr=o(" (Data2VecVision model)"),ylr=l(),Us=a("li"),k1e=a("strong"),xlr=o("deit"),$lr=o(" \u2014 "),kW=a("a"),klr=o("DeiTForImageClassification"),Slr=o(" or "),SW=a("a"),Rlr=o("DeiTForImageClassificationWithTeacher"),Plr=o(" (DeiT model)"),Blr=l(),wT=a("li"),S1e=a("strong"),Ilr=o("imagegpt"),Nlr=o(" \u2014 "),RW=a("a"),qlr=o("ImageGPTForImageClassification"),jlr=o(" (ImageGPT model)"),Dlr=l(),Js=a("li"),R1e=a("strong"),Glr=o("levit"),Olr=o(" \u2014 "),PW=a("a"),Vlr=o("LevitForImageClassification"),Xlr=o(" or "),BW=a("a"),zlr=o("LevitForImageClassificationWithTeacher"),Qlr=o(" (LeViT model)"),Wlr=l(),AT=a("li"),P1e=a("strong"),Hlr=o("mobilevit"),Ulr=o(" \u2014 "),IW=a("a"),Jlr=o("MobileViTForImageClassification"),Ylr=o(" (MobileViT model)"),Klr=l(),Ft=a("li"),B1e=a("strong"),Zlr=o("perceiver"),eir=o(" \u2014 "),NW=a("a"),oir=o("PerceiverForImageClassificationLearned"),rir=o(" or "),qW=a("a"),tir=o("PerceiverForImageClassificationFourier"),air=o(" or "),jW=a("a"),nir=o("PerceiverForImageClassificationConvProcessing"),sir=o(" (Perceiver model)"),lir=l(),LT=a("li"),I1e=a("strong"),iir=o("poolformer"),dir=o(" \u2014 "),DW=a("a"),cir=o("PoolFormerForImageClassification"),fir=o(" (PoolFormer model)"),mir=l(),yT=a("li"),N1e=a("strong"),gir=o("regnet"),hir=o(" \u2014 "),GW=a("a"),pir=o("RegNetForImageClassification"),_ir=o(" (RegNet model)"),uir=l(),xT=a("li"),q1e=a("strong"),bir=o("resnet"),vir=o(" \u2014 "),OW=a("a"),Fir=o("ResNetForImageClassification"),Tir=o(" (ResNet model)"),Mir=l(),$T=a("li"),j1e=a("strong"),Eir=o("segformer"),Cir=o(" \u2014 "),VW=a("a"),wir=o("SegformerForImageClassification"),Air=o(" (SegFormer model)"),Lir=l(),kT=a("li"),D1e=a("strong"),yir=o("swin"),xir=o(" \u2014 "),XW=a("a"),$ir=o("SwinForImageClassification"),kir=o(" (Swin Transformer model)"),Sir=l(),ST=a("li"),G1e=a("strong"),Rir=o("van"),Pir=o(" \u2014 "),zW=a("a"),Bir=o("VanForImageClassification"),Iir=o(" (VAN model)"),Nir=l(),RT=a("li"),O1e=a("strong"),qir=o("vit"),jir=o(" \u2014 "),QW=a("a"),Dir=o("ViTForImageClassification"),Gir=o(" (ViT model)"),Oir=l(),PT=a("p"),Vir=o("The model is set in evaluation mode by default using "),V1e=a("code"),Xir=o("model.eval()"),zir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X1e=a("code"),Qir=o("model.train()"),Wir=l(),F(BT.$$.fragment),nze=l(),Cd=a("h2"),IT=a("a"),z1e=a("span"),F(Oy.$$.fragment),Hir=l(),Q1e=a("span"),Uir=o("AutoModelForVision2Seq"),sze=l(),Xo=a("div"),F(Vy.$$.fragment),Jir=l(),wd=a("p"),Yir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WW=a("a"),Kir=o("from_pretrained()"),Zir=o(" class method or the "),HW=a("a"),edr=o("from_config()"),odr=o(` class
method.`),rdr=l(),Xy=a("p"),tdr=o("This class cannot be instantiated directly using "),W1e=a("code"),adr=o("__init__()"),ndr=o(" (throws an error)."),sdr=l(),Tt=a("div"),F(zy.$$.fragment),ldr=l(),H1e=a("p"),idr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ddr=l(),Ad=a("p"),cdr=o(`Note:
Loading a model from its configuration file does `),U1e=a("strong"),fdr=o("not"),mdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),gdr=o("from_pretrained()"),hdr=o(" to load the model weights."),pdr=l(),F(NT.$$.fragment),_dr=l(),co=a("div"),F(Qy.$$.fragment),udr=l(),J1e=a("p"),bdr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vdr=l(),Ha=a("p"),Fdr=o("The model class to instantiate is selected based on the "),Y1e=a("code"),Tdr=o("model_type"),Mdr=o(` property of the config object (either
passed as an argument or loaded from `),K1e=a("code"),Edr=o("pretrained_model_name_or_path"),Cdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=a("code"),wdr=o("pretrained_model_name_or_path"),Adr=o(":"),Ldr=l(),ebe=a("ul"),qT=a("li"),obe=a("strong"),ydr=o("vision-encoder-decoder"),xdr=o(" \u2014 "),JW=a("a"),$dr=o("VisionEncoderDecoderModel"),kdr=o(" (Vision Encoder decoder model)"),Sdr=l(),jT=a("p"),Rdr=o("The model is set in evaluation mode by default using "),rbe=a("code"),Pdr=o("model.eval()"),Bdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=a("code"),Idr=o("model.train()"),Ndr=l(),F(DT.$$.fragment),lze=l(),Ld=a("h2"),GT=a("a"),abe=a("span"),F(Wy.$$.fragment),qdr=l(),nbe=a("span"),jdr=o("AutoModelForVisualQuestionAnswering"),ize=l(),zo=a("div"),F(Hy.$$.fragment),Ddr=l(),yd=a("p"),Gdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),YW=a("a"),Odr=o("from_pretrained()"),Vdr=o(" class method or the "),KW=a("a"),Xdr=o("from_config()"),zdr=o(` class
method.`),Qdr=l(),Uy=a("p"),Wdr=o("This class cannot be instantiated directly using "),sbe=a("code"),Hdr=o("__init__()"),Udr=o(" (throws an error)."),Jdr=l(),Mt=a("div"),F(Jy.$$.fragment),Ydr=l(),lbe=a("p"),Kdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Zdr=l(),xd=a("p"),ecr=o(`Note:
Loading a model from its configuration file does `),ibe=a("strong"),ocr=o("not"),rcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),tcr=o("from_pretrained()"),acr=o(" to load the model weights."),ncr=l(),F(OT.$$.fragment),scr=l(),fo=a("div"),F(Yy.$$.fragment),lcr=l(),dbe=a("p"),icr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),dcr=l(),Ua=a("p"),ccr=o("The model class to instantiate is selected based on the "),cbe=a("code"),fcr=o("model_type"),mcr=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),gcr=o("pretrained_model_name_or_path"),hcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=a("code"),pcr=o("pretrained_model_name_or_path"),_cr=o(":"),ucr=l(),gbe=a("ul"),VT=a("li"),hbe=a("strong"),bcr=o("vilt"),vcr=o(" \u2014 "),eH=a("a"),Fcr=o("ViltForQuestionAnswering"),Tcr=o(" (ViLT model)"),Mcr=l(),XT=a("p"),Ecr=o("The model is set in evaluation mode by default using "),pbe=a("code"),Ccr=o("model.eval()"),wcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=a("code"),Acr=o("model.train()"),Lcr=l(),F(zT.$$.fragment),dze=l(),$d=a("h2"),QT=a("a"),ube=a("span"),F(Ky.$$.fragment),ycr=l(),bbe=a("span"),xcr=o("AutoModelForAudioClassification"),cze=l(),Qo=a("div"),F(Zy.$$.fragment),$cr=l(),kd=a("p"),kcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oH=a("a"),Scr=o("from_pretrained()"),Rcr=o(" class method or the "),rH=a("a"),Pcr=o("from_config()"),Bcr=o(` class
method.`),Icr=l(),e9=a("p"),Ncr=o("This class cannot be instantiated directly using "),vbe=a("code"),qcr=o("__init__()"),jcr=o(" (throws an error)."),Dcr=l(),Et=a("div"),F(o9.$$.fragment),Gcr=l(),Fbe=a("p"),Ocr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Vcr=l(),Sd=a("p"),Xcr=o(`Note:
Loading a model from its configuration file does `),Tbe=a("strong"),zcr=o("not"),Qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),Wcr=o("from_pretrained()"),Hcr=o(" to load the model weights."),Ucr=l(),F(WT.$$.fragment),Jcr=l(),mo=a("div"),F(r9.$$.fragment),Ycr=l(),Mbe=a("p"),Kcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Zcr=l(),Ja=a("p"),efr=o("The model class to instantiate is selected based on the "),Ebe=a("code"),ofr=o("model_type"),rfr=o(` property of the config object (either
passed as an argument or loaded from `),Cbe=a("code"),tfr=o("pretrained_model_name_or_path"),afr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=a("code"),nfr=o("pretrained_model_name_or_path"),sfr=o(":"),lfr=l(),Pe=a("ul"),HT=a("li"),Abe=a("strong"),ifr=o("data2vec-audio"),dfr=o(" \u2014 "),aH=a("a"),cfr=o("Data2VecAudioForSequenceClassification"),ffr=o(" (Data2VecAudio model)"),mfr=l(),UT=a("li"),Lbe=a("strong"),gfr=o("hubert"),hfr=o(" \u2014 "),nH=a("a"),pfr=o("HubertForSequenceClassification"),_fr=o(" (Hubert model)"),ufr=l(),JT=a("li"),ybe=a("strong"),bfr=o("sew"),vfr=o(" \u2014 "),sH=a("a"),Ffr=o("SEWForSequenceClassification"),Tfr=o(" (SEW model)"),Mfr=l(),YT=a("li"),xbe=a("strong"),Efr=o("sew-d"),Cfr=o(" \u2014 "),lH=a("a"),wfr=o("SEWDForSequenceClassification"),Afr=o(" (SEW-D model)"),Lfr=l(),KT=a("li"),$be=a("strong"),yfr=o("unispeech"),xfr=o(" \u2014 "),iH=a("a"),$fr=o("UniSpeechForSequenceClassification"),kfr=o(" (UniSpeech model)"),Sfr=l(),ZT=a("li"),kbe=a("strong"),Rfr=o("unispeech-sat"),Pfr=o(" \u2014 "),dH=a("a"),Bfr=o("UniSpeechSatForSequenceClassification"),Ifr=o(" (UniSpeechSat model)"),Nfr=l(),e8=a("li"),Sbe=a("strong"),qfr=o("wav2vec2"),jfr=o(" \u2014 "),cH=a("a"),Dfr=o("Wav2Vec2ForSequenceClassification"),Gfr=o(" (Wav2Vec2 model)"),Ofr=l(),o8=a("li"),Rbe=a("strong"),Vfr=o("wav2vec2-conformer"),Xfr=o(" \u2014 "),fH=a("a"),zfr=o("Wav2Vec2ConformerForSequenceClassification"),Qfr=o(" (Wav2Vec2-Conformer model)"),Wfr=l(),r8=a("li"),Pbe=a("strong"),Hfr=o("wavlm"),Ufr=o(" \u2014 "),mH=a("a"),Jfr=o("WavLMForSequenceClassification"),Yfr=o(" (WavLM model)"),Kfr=l(),t8=a("p"),Zfr=o("The model is set in evaluation mode by default using "),Bbe=a("code"),emr=o("model.eval()"),omr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=a("code"),rmr=o("model.train()"),tmr=l(),F(a8.$$.fragment),fze=l(),Rd=a("h2"),n8=a("a"),Nbe=a("span"),F(t9.$$.fragment),amr=l(),qbe=a("span"),nmr=o("AutoModelForAudioFrameClassification"),mze=l(),Wo=a("div"),F(a9.$$.fragment),smr=l(),Pd=a("p"),lmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),gH=a("a"),imr=o("from_pretrained()"),dmr=o(" class method or the "),hH=a("a"),cmr=o("from_config()"),fmr=o(` class
method.`),mmr=l(),n9=a("p"),gmr=o("This class cannot be instantiated directly using "),jbe=a("code"),hmr=o("__init__()"),pmr=o(" (throws an error)."),_mr=l(),Ct=a("div"),F(s9.$$.fragment),umr=l(),Dbe=a("p"),bmr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),vmr=l(),Bd=a("p"),Fmr=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),Tmr=o("not"),Mmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),Emr=o("from_pretrained()"),Cmr=o(" to load the model weights."),wmr=l(),F(s8.$$.fragment),Amr=l(),go=a("div"),F(l9.$$.fragment),Lmr=l(),Obe=a("p"),ymr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xmr=l(),Ya=a("p"),$mr=o("The model class to instantiate is selected based on the "),Vbe=a("code"),kmr=o("model_type"),Smr=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),Rmr=o("pretrained_model_name_or_path"),Pmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),Bmr=o("pretrained_model_name_or_path"),Imr=o(":"),Nmr=l(),rt=a("ul"),l8=a("li"),Qbe=a("strong"),qmr=o("data2vec-audio"),jmr=o(" \u2014 "),_H=a("a"),Dmr=o("Data2VecAudioForAudioFrameClassification"),Gmr=o(" (Data2VecAudio model)"),Omr=l(),i8=a("li"),Wbe=a("strong"),Vmr=o("unispeech-sat"),Xmr=o(" \u2014 "),uH=a("a"),zmr=o("UniSpeechSatForAudioFrameClassification"),Qmr=o(" (UniSpeechSat model)"),Wmr=l(),d8=a("li"),Hbe=a("strong"),Hmr=o("wav2vec2"),Umr=o(" \u2014 "),bH=a("a"),Jmr=o("Wav2Vec2ForAudioFrameClassification"),Ymr=o(" (Wav2Vec2 model)"),Kmr=l(),c8=a("li"),Ube=a("strong"),Zmr=o("wav2vec2-conformer"),egr=o(" \u2014 "),vH=a("a"),ogr=o("Wav2Vec2ConformerForAudioFrameClassification"),rgr=o(" (Wav2Vec2-Conformer model)"),tgr=l(),f8=a("li"),Jbe=a("strong"),agr=o("wavlm"),ngr=o(" \u2014 "),FH=a("a"),sgr=o("WavLMForAudioFrameClassification"),lgr=o(" (WavLM model)"),igr=l(),m8=a("p"),dgr=o("The model is set in evaluation mode by default using "),Ybe=a("code"),cgr=o("model.eval()"),fgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kbe=a("code"),mgr=o("model.train()"),ggr=l(),F(g8.$$.fragment),gze=l(),Id=a("h2"),h8=a("a"),Zbe=a("span"),F(i9.$$.fragment),hgr=l(),eve=a("span"),pgr=o("AutoModelForCTC"),hze=l(),Ho=a("div"),F(d9.$$.fragment),_gr=l(),Nd=a("p"),ugr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),TH=a("a"),bgr=o("from_pretrained()"),vgr=o(" class method or the "),MH=a("a"),Fgr=o("from_config()"),Tgr=o(` class
method.`),Mgr=l(),c9=a("p"),Egr=o("This class cannot be instantiated directly using "),ove=a("code"),Cgr=o("__init__()"),wgr=o(" (throws an error)."),Agr=l(),wt=a("div"),F(f9.$$.fragment),Lgr=l(),rve=a("p"),ygr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),xgr=l(),qd=a("p"),$gr=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),kgr=o("not"),Sgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),Rgr=o("from_pretrained()"),Pgr=o(" to load the model weights."),Bgr=l(),F(p8.$$.fragment),Igr=l(),ho=a("div"),F(m9.$$.fragment),Ngr=l(),ave=a("p"),qgr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jgr=l(),Ka=a("p"),Dgr=o("The model class to instantiate is selected based on the "),nve=a("code"),Ggr=o("model_type"),Ogr=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),Vgr=o("pretrained_model_name_or_path"),Xgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),zgr=o("pretrained_model_name_or_path"),Qgr=o(":"),Wgr=l(),Le=a("ul"),_8=a("li"),ive=a("strong"),Hgr=o("data2vec-audio"),Ugr=o(" \u2014 "),CH=a("a"),Jgr=o("Data2VecAudioForCTC"),Ygr=o(" (Data2VecAudio model)"),Kgr=l(),u8=a("li"),dve=a("strong"),Zgr=o("hubert"),ehr=o(" \u2014 "),wH=a("a"),ohr=o("HubertForCTC"),rhr=o(" (Hubert model)"),thr=l(),b8=a("li"),cve=a("strong"),ahr=o("mctct"),nhr=o(" \u2014 "),AH=a("a"),shr=o("MCTCTForCTC"),lhr=o(" (M-CTC-T model)"),ihr=l(),v8=a("li"),fve=a("strong"),dhr=o("sew"),chr=o(" \u2014 "),LH=a("a"),fhr=o("SEWForCTC"),mhr=o(" (SEW model)"),ghr=l(),F8=a("li"),mve=a("strong"),hhr=o("sew-d"),phr=o(" \u2014 "),yH=a("a"),_hr=o("SEWDForCTC"),uhr=o(" (SEW-D model)"),bhr=l(),T8=a("li"),gve=a("strong"),vhr=o("unispeech"),Fhr=o(" \u2014 "),xH=a("a"),Thr=o("UniSpeechForCTC"),Mhr=o(" (UniSpeech model)"),Ehr=l(),M8=a("li"),hve=a("strong"),Chr=o("unispeech-sat"),whr=o(" \u2014 "),$H=a("a"),Ahr=o("UniSpeechSatForCTC"),Lhr=o(" (UniSpeechSat model)"),yhr=l(),E8=a("li"),pve=a("strong"),xhr=o("wav2vec2"),$hr=o(" \u2014 "),kH=a("a"),khr=o("Wav2Vec2ForCTC"),Shr=o(" (Wav2Vec2 model)"),Rhr=l(),C8=a("li"),_ve=a("strong"),Phr=o("wav2vec2-conformer"),Bhr=o(" \u2014 "),SH=a("a"),Ihr=o("Wav2Vec2ConformerForCTC"),Nhr=o(" (Wav2Vec2-Conformer model)"),qhr=l(),w8=a("li"),uve=a("strong"),jhr=o("wavlm"),Dhr=o(" \u2014 "),RH=a("a"),Ghr=o("WavLMForCTC"),Ohr=o(" (WavLM model)"),Vhr=l(),A8=a("p"),Xhr=o("The model is set in evaluation mode by default using "),bve=a("code"),zhr=o("model.eval()"),Qhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vve=a("code"),Whr=o("model.train()"),Hhr=l(),F(L8.$$.fragment),pze=l(),jd=a("h2"),y8=a("a"),Fve=a("span"),F(g9.$$.fragment),Uhr=l(),Tve=a("span"),Jhr=o("AutoModelForSpeechSeq2Seq"),_ze=l(),Uo=a("div"),F(h9.$$.fragment),Yhr=l(),Dd=a("p"),Khr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PH=a("a"),Zhr=o("from_pretrained()"),epr=o(" class method or the "),BH=a("a"),opr=o("from_config()"),rpr=o(` class
method.`),tpr=l(),p9=a("p"),apr=o("This class cannot be instantiated directly using "),Mve=a("code"),npr=o("__init__()"),spr=o(" (throws an error)."),lpr=l(),At=a("div"),F(_9.$$.fragment),ipr=l(),Eve=a("p"),dpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cpr=l(),Gd=a("p"),fpr=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),mpr=o("not"),gpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),hpr=o("from_pretrained()"),ppr=o(" to load the model weights."),_pr=l(),F(x8.$$.fragment),upr=l(),po=a("div"),F(u9.$$.fragment),bpr=l(),wve=a("p"),vpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Fpr=l(),Za=a("p"),Tpr=o("The model class to instantiate is selected based on the "),Ave=a("code"),Mpr=o("model_type"),Epr=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),Cpr=o("pretrained_model_name_or_path"),wpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),Apr=o("pretrained_model_name_or_path"),Lpr=o(":"),ypr=l(),b9=a("ul"),$8=a("li"),xve=a("strong"),xpr=o("speech-encoder-decoder"),$pr=o(" \u2014 "),NH=a("a"),kpr=o("SpeechEncoderDecoderModel"),Spr=o(" (Speech Encoder decoder model)"),Rpr=l(),k8=a("li"),$ve=a("strong"),Ppr=o("speech_to_text"),Bpr=o(" \u2014 "),qH=a("a"),Ipr=o("Speech2TextForConditionalGeneration"),Npr=o(" (Speech2Text model)"),qpr=l(),S8=a("p"),jpr=o("The model is set in evaluation mode by default using "),kve=a("code"),Dpr=o("model.eval()"),Gpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sve=a("code"),Opr=o("model.train()"),Vpr=l(),F(R8.$$.fragment),uze=l(),Od=a("h2"),P8=a("a"),Rve=a("span"),F(v9.$$.fragment),Xpr=l(),Pve=a("span"),zpr=o("AutoModelForAudioXVector"),bze=l(),Jo=a("div"),F(F9.$$.fragment),Qpr=l(),Vd=a("p"),Wpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jH=a("a"),Hpr=o("from_pretrained()"),Upr=o(" class method or the "),DH=a("a"),Jpr=o("from_config()"),Ypr=o(` class
method.`),Kpr=l(),T9=a("p"),Zpr=o("This class cannot be instantiated directly using "),Bve=a("code"),e_r=o("__init__()"),o_r=o(" (throws an error)."),r_r=l(),Lt=a("div"),F(M9.$$.fragment),t_r=l(),Ive=a("p"),a_r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),n_r=l(),Xd=a("p"),s_r=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),l_r=o("not"),i_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),d_r=o("from_pretrained()"),c_r=o(" to load the model weights."),f_r=l(),F(B8.$$.fragment),m_r=l(),_o=a("div"),F(E9.$$.fragment),g_r=l(),qve=a("p"),h_r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),p_r=l(),en=a("p"),__r=o("The model class to instantiate is selected based on the "),jve=a("code"),u_r=o("model_type"),b_r=o(` property of the config object (either
passed as an argument or loaded from `),Dve=a("code"),v_r=o("pretrained_model_name_or_path"),F_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),T_r=o("pretrained_model_name_or_path"),M_r=o(":"),E_r=l(),tt=a("ul"),I8=a("li"),Ove=a("strong"),C_r=o("data2vec-audio"),w_r=o(" \u2014 "),OH=a("a"),A_r=o("Data2VecAudioForXVector"),L_r=o(" (Data2VecAudio model)"),y_r=l(),N8=a("li"),Vve=a("strong"),x_r=o("unispeech-sat"),$_r=o(" \u2014 "),VH=a("a"),k_r=o("UniSpeechSatForXVector"),S_r=o(" (UniSpeechSat model)"),R_r=l(),q8=a("li"),Xve=a("strong"),P_r=o("wav2vec2"),B_r=o(" \u2014 "),XH=a("a"),I_r=o("Wav2Vec2ForXVector"),N_r=o(" (Wav2Vec2 model)"),q_r=l(),j8=a("li"),zve=a("strong"),j_r=o("wav2vec2-conformer"),D_r=o(" \u2014 "),zH=a("a"),G_r=o("Wav2Vec2ConformerForXVector"),O_r=o(" (Wav2Vec2-Conformer model)"),V_r=l(),D8=a("li"),Qve=a("strong"),X_r=o("wavlm"),z_r=o(" \u2014 "),QH=a("a"),Q_r=o("WavLMForXVector"),W_r=o(" (WavLM model)"),H_r=l(),G8=a("p"),U_r=o("The model is set in evaluation mode by default using "),Wve=a("code"),J_r=o("model.eval()"),Y_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hve=a("code"),K_r=o("model.train()"),Z_r=l(),F(O8.$$.fragment),vze=l(),zd=a("h2"),V8=a("a"),Uve=a("span"),F(C9.$$.fragment),eur=l(),Jve=a("span"),our=o("AutoModelForMaskedImageModeling"),Fze=l(),Yo=a("div"),F(w9.$$.fragment),rur=l(),Qd=a("p"),tur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),WH=a("a"),aur=o("from_pretrained()"),nur=o(" class method or the "),HH=a("a"),sur=o("from_config()"),lur=o(` class
method.`),iur=l(),A9=a("p"),dur=o("This class cannot be instantiated directly using "),Yve=a("code"),cur=o("__init__()"),fur=o(" (throws an error)."),mur=l(),yt=a("div"),F(L9.$$.fragment),gur=l(),Kve=a("p"),hur=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),pur=l(),Wd=a("p"),_ur=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),uur=o("not"),bur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),vur=o("from_pretrained()"),Fur=o(" to load the model weights."),Tur=l(),F(X8.$$.fragment),Mur=l(),uo=a("div"),F(y9.$$.fragment),Eur=l(),eFe=a("p"),Cur=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),wur=l(),on=a("p"),Aur=o("The model class to instantiate is selected based on the "),oFe=a("code"),Lur=o("model_type"),yur=o(` property of the config object (either
passed as an argument or loaded from `),rFe=a("code"),xur=o("pretrained_model_name_or_path"),$ur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=a("code"),kur=o("pretrained_model_name_or_path"),Sur=o(":"),Rur=l(),Hd=a("ul"),z8=a("li"),aFe=a("strong"),Pur=o("deit"),Bur=o(" \u2014 "),JH=a("a"),Iur=o("DeiTForMaskedImageModeling"),Nur=o(" (DeiT model)"),qur=l(),Q8=a("li"),nFe=a("strong"),jur=o("swin"),Dur=o(" \u2014 "),YH=a("a"),Gur=o("SwinForMaskedImageModeling"),Our=o(" (Swin Transformer model)"),Vur=l(),W8=a("li"),sFe=a("strong"),Xur=o("vit"),zur=o(" \u2014 "),KH=a("a"),Qur=o("ViTForMaskedImageModeling"),Wur=o(" (ViT model)"),Hur=l(),H8=a("p"),Uur=o("The model is set in evaluation mode by default using "),lFe=a("code"),Jur=o("model.eval()"),Yur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iFe=a("code"),Kur=o("model.train()"),Zur=l(),F(U8.$$.fragment),Tze=l(),Ud=a("h2"),J8=a("a"),dFe=a("span"),F(x9.$$.fragment),e4r=l(),cFe=a("span"),o4r=o("AutoModelForObjectDetection"),Mze=l(),Ko=a("div"),F($9.$$.fragment),r4r=l(),Jd=a("p"),t4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ZH=a("a"),a4r=o("from_pretrained()"),n4r=o(" class method or the "),eU=a("a"),s4r=o("from_config()"),l4r=o(` class
method.`),i4r=l(),k9=a("p"),d4r=o("This class cannot be instantiated directly using "),fFe=a("code"),c4r=o("__init__()"),f4r=o(" (throws an error)."),m4r=l(),xt=a("div"),F(S9.$$.fragment),g4r=l(),mFe=a("p"),h4r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),p4r=l(),Yd=a("p"),_4r=o(`Note:
Loading a model from its configuration file does `),gFe=a("strong"),u4r=o("not"),b4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),v4r=o("from_pretrained()"),F4r=o(" to load the model weights."),T4r=l(),F(Y8.$$.fragment),M4r=l(),bo=a("div"),F(R9.$$.fragment),E4r=l(),hFe=a("p"),C4r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),w4r=l(),rn=a("p"),A4r=o("The model class to instantiate is selected based on the "),pFe=a("code"),L4r=o("model_type"),y4r=o(` property of the config object (either
passed as an argument or loaded from `),_Fe=a("code"),x4r=o("pretrained_model_name_or_path"),$4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=a("code"),k4r=o("pretrained_model_name_or_path"),S4r=o(":"),R4r=l(),P9=a("ul"),K8=a("li"),bFe=a("strong"),P4r=o("detr"),B4r=o(" \u2014 "),rU=a("a"),I4r=o("DetrForObjectDetection"),N4r=o(" (DETR model)"),q4r=l(),Z8=a("li"),vFe=a("strong"),j4r=o("yolos"),D4r=o(" \u2014 "),tU=a("a"),G4r=o("YolosForObjectDetection"),O4r=o(" (YOLOS model)"),V4r=l(),eM=a("p"),X4r=o("The model is set in evaluation mode by default using "),FFe=a("code"),z4r=o("model.eval()"),Q4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TFe=a("code"),W4r=o("model.train()"),H4r=l(),F(oM.$$.fragment),Eze=l(),Kd=a("h2"),rM=a("a"),MFe=a("span"),F(B9.$$.fragment),U4r=l(),EFe=a("span"),J4r=o("AutoModelForImageSegmentation"),Cze=l(),Zo=a("div"),F(I9.$$.fragment),Y4r=l(),Zd=a("p"),K4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aU=a("a"),Z4r=o("from_pretrained()"),e2r=o(" class method or the "),nU=a("a"),o2r=o("from_config()"),r2r=o(` class
method.`),t2r=l(),N9=a("p"),a2r=o("This class cannot be instantiated directly using "),CFe=a("code"),n2r=o("__init__()"),s2r=o(" (throws an error)."),l2r=l(),$t=a("div"),F(q9.$$.fragment),i2r=l(),wFe=a("p"),d2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),c2r=l(),ec=a("p"),f2r=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),m2r=o("not"),g2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),h2r=o("from_pretrained()"),p2r=o(" to load the model weights."),_2r=l(),F(tM.$$.fragment),u2r=l(),vo=a("div"),F(j9.$$.fragment),b2r=l(),LFe=a("p"),v2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),F2r=l(),tn=a("p"),T2r=o("The model class to instantiate is selected based on the "),yFe=a("code"),M2r=o("model_type"),E2r=o(` property of the config object (either
passed as an argument or loaded from `),xFe=a("code"),C2r=o("pretrained_model_name_or_path"),w2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=a("code"),A2r=o("pretrained_model_name_or_path"),L2r=o(":"),y2r=l(),kFe=a("ul"),aM=a("li"),SFe=a("strong"),x2r=o("detr"),$2r=o(" \u2014 "),lU=a("a"),k2r=o("DetrForSegmentation"),S2r=o(" (DETR model)"),R2r=l(),nM=a("p"),P2r=o("The model is set in evaluation mode by default using "),RFe=a("code"),B2r=o("model.eval()"),I2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PFe=a("code"),N2r=o("model.train()"),q2r=l(),F(sM.$$.fragment),wze=l(),oc=a("h2"),lM=a("a"),BFe=a("span"),F(D9.$$.fragment),j2r=l(),IFe=a("span"),D2r=o("AutoModelForSemanticSegmentation"),Aze=l(),er=a("div"),F(G9.$$.fragment),G2r=l(),rc=a("p"),O2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iU=a("a"),V2r=o("from_pretrained()"),X2r=o(" class method or the "),dU=a("a"),z2r=o("from_config()"),Q2r=o(` class
method.`),W2r=l(),O9=a("p"),H2r=o("This class cannot be instantiated directly using "),NFe=a("code"),U2r=o("__init__()"),J2r=o(" (throws an error)."),Y2r=l(),kt=a("div"),F(V9.$$.fragment),K2r=l(),qFe=a("p"),Z2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),e1r=l(),tc=a("p"),o1r=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),r1r=o("not"),t1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),a1r=o("from_pretrained()"),n1r=o(" to load the model weights."),s1r=l(),F(iM.$$.fragment),l1r=l(),Fo=a("div"),F(X9.$$.fragment),i1r=l(),DFe=a("p"),d1r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),c1r=l(),an=a("p"),f1r=o("The model class to instantiate is selected based on the "),GFe=a("code"),m1r=o("model_type"),g1r=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),h1r=o("pretrained_model_name_or_path"),p1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),_1r=o("pretrained_model_name_or_path"),u1r=o(":"),b1r=l(),at=a("ul"),dM=a("li"),XFe=a("strong"),v1r=o("beit"),F1r=o(" \u2014 "),fU=a("a"),T1r=o("BeitForSemanticSegmentation"),M1r=o(" (BEiT model)"),E1r=l(),cM=a("li"),zFe=a("strong"),C1r=o("data2vec-vision"),w1r=o(" \u2014 "),mU=a("a"),A1r=o("Data2VecVisionForSemanticSegmentation"),L1r=o(" (Data2VecVision model)"),y1r=l(),fM=a("li"),QFe=a("strong"),x1r=o("dpt"),$1r=o(" \u2014 "),gU=a("a"),k1r=o("DPTForSemanticSegmentation"),S1r=o(" (DPT model)"),R1r=l(),mM=a("li"),WFe=a("strong"),P1r=o("mobilevit"),B1r=o(" \u2014 "),hU=a("a"),I1r=o("MobileViTForSemanticSegmentation"),N1r=o(" (MobileViT model)"),q1r=l(),gM=a("li"),HFe=a("strong"),j1r=o("segformer"),D1r=o(" \u2014 "),pU=a("a"),G1r=o("SegformerForSemanticSegmentation"),O1r=o(" (SegFormer model)"),V1r=l(),hM=a("p"),X1r=o("The model is set in evaluation mode by default using "),UFe=a("code"),z1r=o("model.eval()"),Q1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JFe=a("code"),W1r=o("model.train()"),H1r=l(),F(pM.$$.fragment),Lze=l(),ac=a("h2"),_M=a("a"),YFe=a("span"),F(z9.$$.fragment),U1r=l(),KFe=a("span"),J1r=o("AutoModelForInstanceSegmentation"),yze=l(),or=a("div"),F(Q9.$$.fragment),Y1r=l(),nc=a("p"),K1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),_U=a("a"),Z1r=o("from_pretrained()"),ebr=o(" class method or the "),uU=a("a"),obr=o("from_config()"),rbr=o(` class
method.`),tbr=l(),W9=a("p"),abr=o("This class cannot be instantiated directly using "),ZFe=a("code"),nbr=o("__init__()"),sbr=o(" (throws an error)."),lbr=l(),St=a("div"),F(H9.$$.fragment),ibr=l(),eTe=a("p"),dbr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),cbr=l(),sc=a("p"),fbr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),mbr=o("not"),gbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),hbr=o("from_pretrained()"),pbr=o(" to load the model weights."),_br=l(),F(uM.$$.fragment),ubr=l(),To=a("div"),F(U9.$$.fragment),bbr=l(),rTe=a("p"),vbr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Fbr=l(),nn=a("p"),Tbr=o("The model class to instantiate is selected based on the "),tTe=a("code"),Mbr=o("model_type"),Ebr=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),Cbr=o("pretrained_model_name_or_path"),wbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),Abr=o("pretrained_model_name_or_path"),Lbr=o(":"),ybr=l(),sTe=a("ul"),bM=a("li"),lTe=a("strong"),xbr=o("maskformer"),$br=o(" \u2014 "),vU=a("a"),kbr=o("MaskFormerForInstanceSegmentation"),Sbr=o(" (MaskFormer model)"),Rbr=l(),vM=a("p"),Pbr=o("The model is set in evaluation mode by default using "),iTe=a("code"),Bbr=o("model.eval()"),Ibr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dTe=a("code"),Nbr=o("model.train()"),qbr=l(),F(FM.$$.fragment),xze=l(),lc=a("h2"),TM=a("a"),cTe=a("span"),F(J9.$$.fragment),jbr=l(),fTe=a("span"),Dbr=o("TFAutoModel"),$ze=l(),rr=a("div"),F(Y9.$$.fragment),Gbr=l(),ic=a("p"),Obr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FU=a("a"),Vbr=o("from_pretrained()"),Xbr=o(" class method or the "),TU=a("a"),zbr=o("from_config()"),Qbr=o(` class
method.`),Wbr=l(),K9=a("p"),Hbr=o("This class cannot be instantiated directly using "),mTe=a("code"),Ubr=o("__init__()"),Jbr=o(" (throws an error)."),Ybr=l(),Rt=a("div"),F(Z9.$$.fragment),Kbr=l(),gTe=a("p"),Zbr=o("Instantiates one of the base model classes of the library from a configuration."),evr=l(),dc=a("p"),ovr=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),rvr=o("not"),tvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),avr=o("from_pretrained()"),nvr=o(" to load the model weights."),svr=l(),F(MM.$$.fragment),lvr=l(),$r=a("div"),F(ex.$$.fragment),ivr=l(),pTe=a("p"),dvr=o("Instantiate one of the base model classes of the library from a pretrained model."),cvr=l(),sn=a("p"),fvr=o("The model class to instantiate is selected based on the "),_Te=a("code"),mvr=o("model_type"),gvr=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),hvr=o("pretrained_model_name_or_path"),pvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),_vr=o("pretrained_model_name_or_path"),uvr=o(":"),bvr=l(),I=a("ul"),EM=a("li"),vTe=a("strong"),vvr=o("albert"),Fvr=o(" \u2014 "),EU=a("a"),Tvr=o("TFAlbertModel"),Mvr=o(" (ALBERT model)"),Evr=l(),CM=a("li"),FTe=a("strong"),Cvr=o("bart"),wvr=o(" \u2014 "),CU=a("a"),Avr=o("TFBartModel"),Lvr=o(" (BART model)"),yvr=l(),wM=a("li"),TTe=a("strong"),xvr=o("bert"),$vr=o(" \u2014 "),wU=a("a"),kvr=o("TFBertModel"),Svr=o(" (BERT model)"),Rvr=l(),AM=a("li"),MTe=a("strong"),Pvr=o("blenderbot"),Bvr=o(" \u2014 "),AU=a("a"),Ivr=o("TFBlenderbotModel"),Nvr=o(" (Blenderbot model)"),qvr=l(),LM=a("li"),ETe=a("strong"),jvr=o("blenderbot-small"),Dvr=o(" \u2014 "),LU=a("a"),Gvr=o("TFBlenderbotSmallModel"),Ovr=o(" (BlenderbotSmall model)"),Vvr=l(),yM=a("li"),CTe=a("strong"),Xvr=o("camembert"),zvr=o(" \u2014 "),yU=a("a"),Qvr=o("TFCamembertModel"),Wvr=o(" (CamemBERT model)"),Hvr=l(),xM=a("li"),wTe=a("strong"),Uvr=o("clip"),Jvr=o(" \u2014 "),xU=a("a"),Yvr=o("TFCLIPModel"),Kvr=o(" (CLIP model)"),Zvr=l(),$M=a("li"),ATe=a("strong"),eFr=o("convbert"),oFr=o(" \u2014 "),$U=a("a"),rFr=o("TFConvBertModel"),tFr=o(" (ConvBERT model)"),aFr=l(),kM=a("li"),LTe=a("strong"),nFr=o("convnext"),sFr=o(" \u2014 "),kU=a("a"),lFr=o("TFConvNextModel"),iFr=o(" (ConvNeXT model)"),dFr=l(),SM=a("li"),yTe=a("strong"),cFr=o("ctrl"),fFr=o(" \u2014 "),SU=a("a"),mFr=o("TFCTRLModel"),gFr=o(" (CTRL model)"),hFr=l(),RM=a("li"),xTe=a("strong"),pFr=o("data2vec-vision"),_Fr=o(" \u2014 "),RU=a("a"),uFr=o("TFData2VecVisionModel"),bFr=o(" (Data2VecVision model)"),vFr=l(),PM=a("li"),$Te=a("strong"),FFr=o("deberta"),TFr=o(" \u2014 "),PU=a("a"),MFr=o("TFDebertaModel"),EFr=o(" (DeBERTa model)"),CFr=l(),BM=a("li"),kTe=a("strong"),wFr=o("deberta-v2"),AFr=o(" \u2014 "),BU=a("a"),LFr=o("TFDebertaV2Model"),yFr=o(" (DeBERTa-v2 model)"),xFr=l(),IM=a("li"),STe=a("strong"),$Fr=o("deit"),kFr=o(" \u2014 "),IU=a("a"),SFr=o("TFDeiTModel"),RFr=o(" (DeiT model)"),PFr=l(),NM=a("li"),RTe=a("strong"),BFr=o("distilbert"),IFr=o(" \u2014 "),NU=a("a"),NFr=o("TFDistilBertModel"),qFr=o(" (DistilBERT model)"),jFr=l(),qM=a("li"),PTe=a("strong"),DFr=o("dpr"),GFr=o(" \u2014 "),qU=a("a"),OFr=o("TFDPRQuestionEncoder"),VFr=o(" (DPR model)"),XFr=l(),jM=a("li"),BTe=a("strong"),zFr=o("electra"),QFr=o(" \u2014 "),jU=a("a"),WFr=o("TFElectraModel"),HFr=o(" (ELECTRA model)"),UFr=l(),DM=a("li"),ITe=a("strong"),JFr=o("flaubert"),YFr=o(" \u2014 "),DU=a("a"),KFr=o("TFFlaubertModel"),ZFr=o(" (FlauBERT model)"),eTr=l(),Ys=a("li"),NTe=a("strong"),oTr=o("funnel"),rTr=o(" \u2014 "),GU=a("a"),tTr=o("TFFunnelModel"),aTr=o(" or "),OU=a("a"),nTr=o("TFFunnelBaseModel"),sTr=o(" (Funnel Transformer model)"),lTr=l(),GM=a("li"),qTe=a("strong"),iTr=o("gpt2"),dTr=o(" \u2014 "),VU=a("a"),cTr=o("TFGPT2Model"),fTr=o(" (OpenAI GPT-2 model)"),mTr=l(),OM=a("li"),jTe=a("strong"),gTr=o("gptj"),hTr=o(" \u2014 "),XU=a("a"),pTr=o("TFGPTJModel"),_Tr=o(" (GPT-J model)"),uTr=l(),VM=a("li"),DTe=a("strong"),bTr=o("hubert"),vTr=o(" \u2014 "),zU=a("a"),FTr=o("TFHubertModel"),TTr=o(" (Hubert model)"),MTr=l(),XM=a("li"),GTe=a("strong"),ETr=o("layoutlm"),CTr=o(" \u2014 "),QU=a("a"),wTr=o("TFLayoutLMModel"),ATr=o(" (LayoutLM model)"),LTr=l(),zM=a("li"),OTe=a("strong"),yTr=o("led"),xTr=o(" \u2014 "),WU=a("a"),$Tr=o("TFLEDModel"),kTr=o(" (LED model)"),STr=l(),QM=a("li"),VTe=a("strong"),RTr=o("longformer"),PTr=o(" \u2014 "),HU=a("a"),BTr=o("TFLongformerModel"),ITr=o(" (Longformer model)"),NTr=l(),WM=a("li"),XTe=a("strong"),qTr=o("lxmert"),jTr=o(" \u2014 "),UU=a("a"),DTr=o("TFLxmertModel"),GTr=o(" (LXMERT model)"),OTr=l(),HM=a("li"),zTe=a("strong"),VTr=o("marian"),XTr=o(" \u2014 "),JU=a("a"),zTr=o("TFMarianModel"),QTr=o(" (Marian model)"),WTr=l(),UM=a("li"),QTe=a("strong"),HTr=o("mbart"),UTr=o(" \u2014 "),YU=a("a"),JTr=o("TFMBartModel"),YTr=o(" (mBART model)"),KTr=l(),JM=a("li"),WTe=a("strong"),ZTr=o("mobilebert"),e8r=o(" \u2014 "),KU=a("a"),o8r=o("TFMobileBertModel"),r8r=o(" (MobileBERT model)"),t8r=l(),YM=a("li"),HTe=a("strong"),a8r=o("mpnet"),n8r=o(" \u2014 "),ZU=a("a"),s8r=o("TFMPNetModel"),l8r=o(" (MPNet model)"),i8r=l(),KM=a("li"),UTe=a("strong"),d8r=o("mt5"),c8r=o(" \u2014 "),eJ=a("a"),f8r=o("TFMT5Model"),m8r=o(" (MT5 model)"),g8r=l(),ZM=a("li"),JTe=a("strong"),h8r=o("openai-gpt"),p8r=o(" \u2014 "),oJ=a("a"),_8r=o("TFOpenAIGPTModel"),u8r=o(" (OpenAI GPT model)"),b8r=l(),eE=a("li"),YTe=a("strong"),v8r=o("opt"),F8r=o(" \u2014 "),rJ=a("a"),T8r=o("TFOPTModel"),M8r=o(" (OPT model)"),E8r=l(),oE=a("li"),KTe=a("strong"),C8r=o("pegasus"),w8r=o(" \u2014 "),tJ=a("a"),A8r=o("TFPegasusModel"),L8r=o(" (Pegasus model)"),y8r=l(),rE=a("li"),ZTe=a("strong"),x8r=o("regnet"),$8r=o(" \u2014 "),aJ=a("a"),k8r=o("TFRegNetModel"),S8r=o(" (RegNet model)"),R8r=l(),tE=a("li"),e8e=a("strong"),P8r=o("rembert"),B8r=o(" \u2014 "),nJ=a("a"),I8r=o("TFRemBertModel"),N8r=o(" (RemBERT model)"),q8r=l(),aE=a("li"),o8e=a("strong"),j8r=o("resnet"),D8r=o(" \u2014 "),sJ=a("a"),G8r=o("TFResNetModel"),O8r=o(" (ResNet model)"),V8r=l(),nE=a("li"),r8e=a("strong"),X8r=o("roberta"),z8r=o(" \u2014 "),lJ=a("a"),Q8r=o("TFRobertaModel"),W8r=o(" (RoBERTa model)"),H8r=l(),sE=a("li"),t8e=a("strong"),U8r=o("roformer"),J8r=o(" \u2014 "),iJ=a("a"),Y8r=o("TFRoFormerModel"),K8r=o(" (RoFormer model)"),Z8r=l(),lE=a("li"),a8e=a("strong"),eMr=o("segformer"),oMr=o(" \u2014 "),dJ=a("a"),rMr=o("TFSegformerModel"),tMr=o(" (SegFormer model)"),aMr=l(),iE=a("li"),n8e=a("strong"),nMr=o("speech_to_text"),sMr=o(" \u2014 "),cJ=a("a"),lMr=o("TFSpeech2TextModel"),iMr=o(" (Speech2Text model)"),dMr=l(),dE=a("li"),s8e=a("strong"),cMr=o("swin"),fMr=o(" \u2014 "),fJ=a("a"),mMr=o("TFSwinModel"),gMr=o(" (Swin Transformer model)"),hMr=l(),cE=a("li"),l8e=a("strong"),pMr=o("t5"),_Mr=o(" \u2014 "),mJ=a("a"),uMr=o("TFT5Model"),bMr=o(" (T5 model)"),vMr=l(),fE=a("li"),i8e=a("strong"),FMr=o("tapas"),TMr=o(" \u2014 "),gJ=a("a"),MMr=o("TFTapasModel"),EMr=o(" (TAPAS model)"),CMr=l(),mE=a("li"),d8e=a("strong"),wMr=o("transfo-xl"),AMr=o(" \u2014 "),hJ=a("a"),LMr=o("TFTransfoXLModel"),yMr=o(" (Transformer-XL model)"),xMr=l(),gE=a("li"),c8e=a("strong"),$Mr=o("vit"),kMr=o(" \u2014 "),pJ=a("a"),SMr=o("TFViTModel"),RMr=o(" (ViT model)"),PMr=l(),hE=a("li"),f8e=a("strong"),BMr=o("vit_mae"),IMr=o(" \u2014 "),_J=a("a"),NMr=o("TFViTMAEModel"),qMr=o(" (ViTMAE model)"),jMr=l(),pE=a("li"),m8e=a("strong"),DMr=o("wav2vec2"),GMr=o(" \u2014 "),uJ=a("a"),OMr=o("TFWav2Vec2Model"),VMr=o(" (Wav2Vec2 model)"),XMr=l(),_E=a("li"),g8e=a("strong"),zMr=o("xlm"),QMr=o(" \u2014 "),bJ=a("a"),WMr=o("TFXLMModel"),HMr=o(" (XLM model)"),UMr=l(),uE=a("li"),h8e=a("strong"),JMr=o("xlm-roberta"),YMr=o(" \u2014 "),vJ=a("a"),KMr=o("TFXLMRobertaModel"),ZMr=o(" (XLM-RoBERTa model)"),eEr=l(),bE=a("li"),p8e=a("strong"),oEr=o("xlnet"),rEr=o(" \u2014 "),FJ=a("a"),tEr=o("TFXLNetModel"),aEr=o(" (XLNet model)"),nEr=l(),F(vE.$$.fragment),kze=l(),cc=a("h2"),FE=a("a"),_8e=a("span"),F(ox.$$.fragment),sEr=l(),u8e=a("span"),lEr=o("TFAutoModelForPreTraining"),Sze=l(),tr=a("div"),F(rx.$$.fragment),iEr=l(),fc=a("p"),dEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TJ=a("a"),cEr=o("from_pretrained()"),fEr=o(" class method or the "),MJ=a("a"),mEr=o("from_config()"),gEr=o(` class
method.`),hEr=l(),tx=a("p"),pEr=o("This class cannot be instantiated directly using "),b8e=a("code"),_Er=o("__init__()"),uEr=o(" (throws an error)."),bEr=l(),Pt=a("div"),F(ax.$$.fragment),vEr=l(),v8e=a("p"),FEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),TEr=l(),mc=a("p"),MEr=o(`Note:
Loading a model from its configuration file does `),F8e=a("strong"),EEr=o("not"),CEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),wEr=o("from_pretrained()"),AEr=o(" to load the model weights."),LEr=l(),F(TE.$$.fragment),yEr=l(),kr=a("div"),F(nx.$$.fragment),xEr=l(),T8e=a("p"),$Er=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kEr=l(),ln=a("p"),SEr=o("The model class to instantiate is selected based on the "),M8e=a("code"),REr=o("model_type"),PEr=o(` property of the config object (either
passed as an argument or loaded from `),E8e=a("code"),BEr=o("pretrained_model_name_or_path"),IEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C8e=a("code"),NEr=o("pretrained_model_name_or_path"),qEr=o(":"),jEr=l(),se=a("ul"),ME=a("li"),w8e=a("strong"),DEr=o("albert"),GEr=o(" \u2014 "),CJ=a("a"),OEr=o("TFAlbertForPreTraining"),VEr=o(" (ALBERT model)"),XEr=l(),EE=a("li"),A8e=a("strong"),zEr=o("bart"),QEr=o(" \u2014 "),wJ=a("a"),WEr=o("TFBartForConditionalGeneration"),HEr=o(" (BART model)"),UEr=l(),CE=a("li"),L8e=a("strong"),JEr=o("bert"),YEr=o(" \u2014 "),AJ=a("a"),KEr=o("TFBertForPreTraining"),ZEr=o(" (BERT model)"),eCr=l(),wE=a("li"),y8e=a("strong"),oCr=o("camembert"),rCr=o(" \u2014 "),LJ=a("a"),tCr=o("TFCamembertForMaskedLM"),aCr=o(" (CamemBERT model)"),nCr=l(),AE=a("li"),x8e=a("strong"),sCr=o("ctrl"),lCr=o(" \u2014 "),yJ=a("a"),iCr=o("TFCTRLLMHeadModel"),dCr=o(" (CTRL model)"),cCr=l(),LE=a("li"),$8e=a("strong"),fCr=o("distilbert"),mCr=o(" \u2014 "),xJ=a("a"),gCr=o("TFDistilBertForMaskedLM"),hCr=o(" (DistilBERT model)"),pCr=l(),yE=a("li"),k8e=a("strong"),_Cr=o("electra"),uCr=o(" \u2014 "),$J=a("a"),bCr=o("TFElectraForPreTraining"),vCr=o(" (ELECTRA model)"),FCr=l(),xE=a("li"),S8e=a("strong"),TCr=o("flaubert"),MCr=o(" \u2014 "),kJ=a("a"),ECr=o("TFFlaubertWithLMHeadModel"),CCr=o(" (FlauBERT model)"),wCr=l(),$E=a("li"),R8e=a("strong"),ACr=o("funnel"),LCr=o(" \u2014 "),SJ=a("a"),yCr=o("TFFunnelForPreTraining"),xCr=o(" (Funnel Transformer model)"),$Cr=l(),kE=a("li"),P8e=a("strong"),kCr=o("gpt2"),SCr=o(" \u2014 "),RJ=a("a"),RCr=o("TFGPT2LMHeadModel"),PCr=o(" (OpenAI GPT-2 model)"),BCr=l(),SE=a("li"),B8e=a("strong"),ICr=o("layoutlm"),NCr=o(" \u2014 "),PJ=a("a"),qCr=o("TFLayoutLMForMaskedLM"),jCr=o(" (LayoutLM model)"),DCr=l(),RE=a("li"),I8e=a("strong"),GCr=o("lxmert"),OCr=o(" \u2014 "),BJ=a("a"),VCr=o("TFLxmertForPreTraining"),XCr=o(" (LXMERT model)"),zCr=l(),PE=a("li"),N8e=a("strong"),QCr=o("mobilebert"),WCr=o(" \u2014 "),IJ=a("a"),HCr=o("TFMobileBertForPreTraining"),UCr=o(" (MobileBERT model)"),JCr=l(),BE=a("li"),q8e=a("strong"),YCr=o("mpnet"),KCr=o(" \u2014 "),NJ=a("a"),ZCr=o("TFMPNetForMaskedLM"),e3r=o(" (MPNet model)"),o3r=l(),IE=a("li"),j8e=a("strong"),r3r=o("openai-gpt"),t3r=o(" \u2014 "),qJ=a("a"),a3r=o("TFOpenAIGPTLMHeadModel"),n3r=o(" (OpenAI GPT model)"),s3r=l(),NE=a("li"),D8e=a("strong"),l3r=o("roberta"),i3r=o(" \u2014 "),jJ=a("a"),d3r=o("TFRobertaForMaskedLM"),c3r=o(" (RoBERTa model)"),f3r=l(),qE=a("li"),G8e=a("strong"),m3r=o("t5"),g3r=o(" \u2014 "),DJ=a("a"),h3r=o("TFT5ForConditionalGeneration"),p3r=o(" (T5 model)"),_3r=l(),jE=a("li"),O8e=a("strong"),u3r=o("tapas"),b3r=o(" \u2014 "),GJ=a("a"),v3r=o("TFTapasForMaskedLM"),F3r=o(" (TAPAS model)"),T3r=l(),DE=a("li"),V8e=a("strong"),M3r=o("transfo-xl"),E3r=o(" \u2014 "),OJ=a("a"),C3r=o("TFTransfoXLLMHeadModel"),w3r=o(" (Transformer-XL model)"),A3r=l(),GE=a("li"),X8e=a("strong"),L3r=o("vit_mae"),y3r=o(" \u2014 "),VJ=a("a"),x3r=o("TFViTMAEForPreTraining"),$3r=o(" (ViTMAE model)"),k3r=l(),OE=a("li"),z8e=a("strong"),S3r=o("xlm"),R3r=o(" \u2014 "),XJ=a("a"),P3r=o("TFXLMWithLMHeadModel"),B3r=o(" (XLM model)"),I3r=l(),VE=a("li"),Q8e=a("strong"),N3r=o("xlm-roberta"),q3r=o(" \u2014 "),zJ=a("a"),j3r=o("TFXLMRobertaForMaskedLM"),D3r=o(" (XLM-RoBERTa model)"),G3r=l(),XE=a("li"),W8e=a("strong"),O3r=o("xlnet"),V3r=o(" \u2014 "),QJ=a("a"),X3r=o("TFXLNetLMHeadModel"),z3r=o(" (XLNet model)"),Q3r=l(),F(zE.$$.fragment),Rze=l(),gc=a("h2"),QE=a("a"),H8e=a("span"),F(sx.$$.fragment),W3r=l(),U8e=a("span"),H3r=o("TFAutoModelForCausalLM"),Pze=l(),ar=a("div"),F(lx.$$.fragment),U3r=l(),hc=a("p"),J3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WJ=a("a"),Y3r=o("from_pretrained()"),K3r=o(" class method or the "),HJ=a("a"),Z3r=o("from_config()"),e5r=o(` class
method.`),o5r=l(),ix=a("p"),r5r=o("This class cannot be instantiated directly using "),J8e=a("code"),t5r=o("__init__()"),a5r=o(" (throws an error)."),n5r=l(),Bt=a("div"),F(dx.$$.fragment),s5r=l(),Y8e=a("p"),l5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),i5r=l(),pc=a("p"),d5r=o(`Note:
Loading a model from its configuration file does `),K8e=a("strong"),c5r=o("not"),f5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),m5r=o("from_pretrained()"),g5r=o(" to load the model weights."),h5r=l(),F(WE.$$.fragment),p5r=l(),Sr=a("div"),F(cx.$$.fragment),_5r=l(),Z8e=a("p"),u5r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),b5r=l(),dn=a("p"),v5r=o("The model class to instantiate is selected based on the "),eMe=a("code"),F5r=o("model_type"),T5r=o(` property of the config object (either
passed as an argument or loaded from `),oMe=a("code"),M5r=o("pretrained_model_name_or_path"),E5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=a("code"),C5r=o("pretrained_model_name_or_path"),w5r=o(":"),A5r=l(),Me=a("ul"),HE=a("li"),tMe=a("strong"),L5r=o("bert"),y5r=o(" \u2014 "),JJ=a("a"),x5r=o("TFBertLMHeadModel"),$5r=o(" (BERT model)"),k5r=l(),UE=a("li"),aMe=a("strong"),S5r=o("camembert"),R5r=o(" \u2014 "),YJ=a("a"),P5r=o("TFCamembertForCausalLM"),B5r=o(" (CamemBERT model)"),I5r=l(),JE=a("li"),nMe=a("strong"),N5r=o("ctrl"),q5r=o(" \u2014 "),KJ=a("a"),j5r=o("TFCTRLLMHeadModel"),D5r=o(" (CTRL model)"),G5r=l(),YE=a("li"),sMe=a("strong"),O5r=o("gpt2"),V5r=o(" \u2014 "),ZJ=a("a"),X5r=o("TFGPT2LMHeadModel"),z5r=o(" (OpenAI GPT-2 model)"),Q5r=l(),KE=a("li"),lMe=a("strong"),W5r=o("gptj"),H5r=o(" \u2014 "),eY=a("a"),U5r=o("TFGPTJForCausalLM"),J5r=o(" (GPT-J model)"),Y5r=l(),ZE=a("li"),iMe=a("strong"),K5r=o("openai-gpt"),Z5r=o(" \u2014 "),oY=a("a"),e0r=o("TFOpenAIGPTLMHeadModel"),o0r=o(" (OpenAI GPT model)"),r0r=l(),eC=a("li"),dMe=a("strong"),t0r=o("opt"),a0r=o(" \u2014 "),rY=a("a"),n0r=o("TFOPTForCausalLM"),s0r=o(" (OPT model)"),l0r=l(),oC=a("li"),cMe=a("strong"),i0r=o("rembert"),d0r=o(" \u2014 "),tY=a("a"),c0r=o("TFRemBertForCausalLM"),f0r=o(" (RemBERT model)"),m0r=l(),rC=a("li"),fMe=a("strong"),g0r=o("roberta"),h0r=o(" \u2014 "),aY=a("a"),p0r=o("TFRobertaForCausalLM"),_0r=o(" (RoBERTa model)"),u0r=l(),tC=a("li"),mMe=a("strong"),b0r=o("roformer"),v0r=o(" \u2014 "),nY=a("a"),F0r=o("TFRoFormerForCausalLM"),T0r=o(" (RoFormer model)"),M0r=l(),aC=a("li"),gMe=a("strong"),E0r=o("transfo-xl"),C0r=o(" \u2014 "),sY=a("a"),w0r=o("TFTransfoXLLMHeadModel"),A0r=o(" (Transformer-XL model)"),L0r=l(),nC=a("li"),hMe=a("strong"),y0r=o("xlm"),x0r=o(" \u2014 "),lY=a("a"),$0r=o("TFXLMWithLMHeadModel"),k0r=o(" (XLM model)"),S0r=l(),sC=a("li"),pMe=a("strong"),R0r=o("xlnet"),P0r=o(" \u2014 "),iY=a("a"),B0r=o("TFXLNetLMHeadModel"),I0r=o(" (XLNet model)"),N0r=l(),F(lC.$$.fragment),Bze=l(),_c=a("h2"),iC=a("a"),_Me=a("span"),F(fx.$$.fragment),q0r=l(),uMe=a("span"),j0r=o("TFAutoModelForImageClassification"),Ize=l(),nr=a("div"),F(mx.$$.fragment),D0r=l(),uc=a("p"),G0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dY=a("a"),O0r=o("from_pretrained()"),V0r=o(" class method or the "),cY=a("a"),X0r=o("from_config()"),z0r=o(` class
method.`),Q0r=l(),gx=a("p"),W0r=o("This class cannot be instantiated directly using "),bMe=a("code"),H0r=o("__init__()"),U0r=o(" (throws an error)."),J0r=l(),It=a("div"),F(hx.$$.fragment),Y0r=l(),vMe=a("p"),K0r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Z0r=l(),bc=a("p"),ewr=o(`Note:
Loading a model from its configuration file does `),FMe=a("strong"),owr=o("not"),rwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),twr=o("from_pretrained()"),awr=o(" to load the model weights."),nwr=l(),F(dC.$$.fragment),swr=l(),Rr=a("div"),F(px.$$.fragment),lwr=l(),TMe=a("p"),iwr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dwr=l(),cn=a("p"),cwr=o("The model class to instantiate is selected based on the "),MMe=a("code"),fwr=o("model_type"),mwr=o(` property of the config object (either
passed as an argument or loaded from `),EMe=a("code"),gwr=o("pretrained_model_name_or_path"),hwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=a("code"),pwr=o("pretrained_model_name_or_path"),_wr=o(":"),uwr=l(),Ve=a("ul"),cC=a("li"),wMe=a("strong"),bwr=o("convnext"),vwr=o(" \u2014 "),mY=a("a"),Fwr=o("TFConvNextForImageClassification"),Twr=o(" (ConvNeXT model)"),Mwr=l(),fC=a("li"),AMe=a("strong"),Ewr=o("data2vec-vision"),Cwr=o(" \u2014 "),gY=a("a"),wwr=o("TFData2VecVisionForImageClassification"),Awr=o(" (Data2VecVision model)"),Lwr=l(),Ks=a("li"),LMe=a("strong"),ywr=o("deit"),xwr=o(" \u2014 "),hY=a("a"),$wr=o("TFDeiTForImageClassification"),kwr=o(" or "),pY=a("a"),Swr=o("TFDeiTForImageClassificationWithTeacher"),Rwr=o(" (DeiT model)"),Pwr=l(),mC=a("li"),yMe=a("strong"),Bwr=o("regnet"),Iwr=o(" \u2014 "),_Y=a("a"),Nwr=o("TFRegNetForImageClassification"),qwr=o(" (RegNet model)"),jwr=l(),gC=a("li"),xMe=a("strong"),Dwr=o("resnet"),Gwr=o(" \u2014 "),uY=a("a"),Owr=o("TFResNetForImageClassification"),Vwr=o(" (ResNet model)"),Xwr=l(),hC=a("li"),$Me=a("strong"),zwr=o("segformer"),Qwr=o(" \u2014 "),bY=a("a"),Wwr=o("TFSegformerForImageClassification"),Hwr=o(" (SegFormer model)"),Uwr=l(),pC=a("li"),kMe=a("strong"),Jwr=o("swin"),Ywr=o(" \u2014 "),vY=a("a"),Kwr=o("TFSwinForImageClassification"),Zwr=o(" (Swin Transformer model)"),eAr=l(),_C=a("li"),SMe=a("strong"),oAr=o("vit"),rAr=o(" \u2014 "),FY=a("a"),tAr=o("TFViTForImageClassification"),aAr=o(" (ViT model)"),nAr=l(),F(uC.$$.fragment),Nze=l(),vc=a("h2"),bC=a("a"),RMe=a("span"),F(_x.$$.fragment),sAr=l(),PMe=a("span"),lAr=o("TFAutoModelForMaskedLM"),qze=l(),sr=a("div"),F(ux.$$.fragment),iAr=l(),Fc=a("p"),dAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TY=a("a"),cAr=o("from_pretrained()"),fAr=o(" class method or the "),MY=a("a"),mAr=o("from_config()"),gAr=o(` class
method.`),hAr=l(),bx=a("p"),pAr=o("This class cannot be instantiated directly using "),BMe=a("code"),_Ar=o("__init__()"),uAr=o(" (throws an error)."),bAr=l(),Nt=a("div"),F(vx.$$.fragment),vAr=l(),IMe=a("p"),FAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),TAr=l(),Tc=a("p"),MAr=o(`Note:
Loading a model from its configuration file does `),NMe=a("strong"),EAr=o("not"),CAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),wAr=o("from_pretrained()"),AAr=o(" to load the model weights."),LAr=l(),F(vC.$$.fragment),yAr=l(),Pr=a("div"),F(Fx.$$.fragment),xAr=l(),qMe=a("p"),$Ar=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kAr=l(),fn=a("p"),SAr=o("The model class to instantiate is selected based on the "),jMe=a("code"),RAr=o("model_type"),PAr=o(` property of the config object (either
passed as an argument or loaded from `),DMe=a("code"),BAr=o("pretrained_model_name_or_path"),IAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=a("code"),NAr=o("pretrained_model_name_or_path"),qAr=o(":"),jAr=l(),ie=a("ul"),FC=a("li"),OMe=a("strong"),DAr=o("albert"),GAr=o(" \u2014 "),CY=a("a"),OAr=o("TFAlbertForMaskedLM"),VAr=o(" (ALBERT model)"),XAr=l(),TC=a("li"),VMe=a("strong"),zAr=o("bert"),QAr=o(" \u2014 "),wY=a("a"),WAr=o("TFBertForMaskedLM"),HAr=o(" (BERT model)"),UAr=l(),MC=a("li"),XMe=a("strong"),JAr=o("camembert"),YAr=o(" \u2014 "),AY=a("a"),KAr=o("TFCamembertForMaskedLM"),ZAr=o(" (CamemBERT model)"),e6r=l(),EC=a("li"),zMe=a("strong"),o6r=o("convbert"),r6r=o(" \u2014 "),LY=a("a"),t6r=o("TFConvBertForMaskedLM"),a6r=o(" (ConvBERT model)"),n6r=l(),CC=a("li"),QMe=a("strong"),s6r=o("deberta"),l6r=o(" \u2014 "),yY=a("a"),i6r=o("TFDebertaForMaskedLM"),d6r=o(" (DeBERTa model)"),c6r=l(),wC=a("li"),WMe=a("strong"),f6r=o("deberta-v2"),m6r=o(" \u2014 "),xY=a("a"),g6r=o("TFDebertaV2ForMaskedLM"),h6r=o(" (DeBERTa-v2 model)"),p6r=l(),AC=a("li"),HMe=a("strong"),_6r=o("distilbert"),u6r=o(" \u2014 "),$Y=a("a"),b6r=o("TFDistilBertForMaskedLM"),v6r=o(" (DistilBERT model)"),F6r=l(),LC=a("li"),UMe=a("strong"),T6r=o("electra"),M6r=o(" \u2014 "),kY=a("a"),E6r=o("TFElectraForMaskedLM"),C6r=o(" (ELECTRA model)"),w6r=l(),yC=a("li"),JMe=a("strong"),A6r=o("flaubert"),L6r=o(" \u2014 "),SY=a("a"),y6r=o("TFFlaubertWithLMHeadModel"),x6r=o(" (FlauBERT model)"),$6r=l(),xC=a("li"),YMe=a("strong"),k6r=o("funnel"),S6r=o(" \u2014 "),RY=a("a"),R6r=o("TFFunnelForMaskedLM"),P6r=o(" (Funnel Transformer model)"),B6r=l(),$C=a("li"),KMe=a("strong"),I6r=o("layoutlm"),N6r=o(" \u2014 "),PY=a("a"),q6r=o("TFLayoutLMForMaskedLM"),j6r=o(" (LayoutLM model)"),D6r=l(),kC=a("li"),ZMe=a("strong"),G6r=o("longformer"),O6r=o(" \u2014 "),BY=a("a"),V6r=o("TFLongformerForMaskedLM"),X6r=o(" (Longformer model)"),z6r=l(),SC=a("li"),eEe=a("strong"),Q6r=o("mobilebert"),W6r=o(" \u2014 "),IY=a("a"),H6r=o("TFMobileBertForMaskedLM"),U6r=o(" (MobileBERT model)"),J6r=l(),RC=a("li"),oEe=a("strong"),Y6r=o("mpnet"),K6r=o(" \u2014 "),NY=a("a"),Z6r=o("TFMPNetForMaskedLM"),e7r=o(" (MPNet model)"),o7r=l(),PC=a("li"),rEe=a("strong"),r7r=o("rembert"),t7r=o(" \u2014 "),qY=a("a"),a7r=o("TFRemBertForMaskedLM"),n7r=o(" (RemBERT model)"),s7r=l(),BC=a("li"),tEe=a("strong"),l7r=o("roberta"),i7r=o(" \u2014 "),jY=a("a"),d7r=o("TFRobertaForMaskedLM"),c7r=o(" (RoBERTa model)"),f7r=l(),IC=a("li"),aEe=a("strong"),m7r=o("roformer"),g7r=o(" \u2014 "),DY=a("a"),h7r=o("TFRoFormerForMaskedLM"),p7r=o(" (RoFormer model)"),_7r=l(),NC=a("li"),nEe=a("strong"),u7r=o("tapas"),b7r=o(" \u2014 "),GY=a("a"),v7r=o("TFTapasForMaskedLM"),F7r=o(" (TAPAS model)"),T7r=l(),qC=a("li"),sEe=a("strong"),M7r=o("xlm"),E7r=o(" \u2014 "),OY=a("a"),C7r=o("TFXLMWithLMHeadModel"),w7r=o(" (XLM model)"),A7r=l(),jC=a("li"),lEe=a("strong"),L7r=o("xlm-roberta"),y7r=o(" \u2014 "),VY=a("a"),x7r=o("TFXLMRobertaForMaskedLM"),$7r=o(" (XLM-RoBERTa model)"),k7r=l(),F(DC.$$.fragment),jze=l(),Mc=a("h2"),GC=a("a"),iEe=a("span"),F(Tx.$$.fragment),S7r=l(),dEe=a("span"),R7r=o("TFAutoModelForSeq2SeqLM"),Dze=l(),lr=a("div"),F(Mx.$$.fragment),P7r=l(),Ec=a("p"),B7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XY=a("a"),I7r=o("from_pretrained()"),N7r=o(" class method or the "),zY=a("a"),q7r=o("from_config()"),j7r=o(` class
method.`),D7r=l(),Ex=a("p"),G7r=o("This class cannot be instantiated directly using "),cEe=a("code"),O7r=o("__init__()"),V7r=o(" (throws an error)."),X7r=l(),qt=a("div"),F(Cx.$$.fragment),z7r=l(),fEe=a("p"),Q7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W7r=l(),Cc=a("p"),H7r=o(`Note:
Loading a model from its configuration file does `),mEe=a("strong"),U7r=o("not"),J7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),Y7r=o("from_pretrained()"),K7r=o(" to load the model weights."),Z7r=l(),F(OC.$$.fragment),eLr=l(),Br=a("div"),F(wx.$$.fragment),oLr=l(),gEe=a("p"),rLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tLr=l(),mn=a("p"),aLr=o("The model class to instantiate is selected based on the "),hEe=a("code"),nLr=o("model_type"),sLr=o(` property of the config object (either
passed as an argument or loaded from `),pEe=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ee=a("code"),dLr=o("pretrained_model_name_or_path"),cLr=o(":"),fLr=l(),ye=a("ul"),VC=a("li"),uEe=a("strong"),mLr=o("bart"),gLr=o(" \u2014 "),WY=a("a"),hLr=o("TFBartForConditionalGeneration"),pLr=o(" (BART model)"),_Lr=l(),XC=a("li"),bEe=a("strong"),uLr=o("blenderbot"),bLr=o(" \u2014 "),HY=a("a"),vLr=o("TFBlenderbotForConditionalGeneration"),FLr=o(" (Blenderbot model)"),TLr=l(),zC=a("li"),vEe=a("strong"),MLr=o("blenderbot-small"),ELr=o(" \u2014 "),UY=a("a"),CLr=o("TFBlenderbotSmallForConditionalGeneration"),wLr=o(" (BlenderbotSmall model)"),ALr=l(),QC=a("li"),FEe=a("strong"),LLr=o("encoder-decoder"),yLr=o(" \u2014 "),JY=a("a"),xLr=o("TFEncoderDecoderModel"),$Lr=o(" (Encoder decoder model)"),kLr=l(),WC=a("li"),TEe=a("strong"),SLr=o("led"),RLr=o(" \u2014 "),YY=a("a"),PLr=o("TFLEDForConditionalGeneration"),BLr=o(" (LED model)"),ILr=l(),HC=a("li"),MEe=a("strong"),NLr=o("marian"),qLr=o(" \u2014 "),KY=a("a"),jLr=o("TFMarianMTModel"),DLr=o(" (Marian model)"),GLr=l(),UC=a("li"),EEe=a("strong"),OLr=o("mbart"),VLr=o(" \u2014 "),ZY=a("a"),XLr=o("TFMBartForConditionalGeneration"),zLr=o(" (mBART model)"),QLr=l(),JC=a("li"),CEe=a("strong"),WLr=o("mt5"),HLr=o(" \u2014 "),eK=a("a"),ULr=o("TFMT5ForConditionalGeneration"),JLr=o(" (MT5 model)"),YLr=l(),YC=a("li"),wEe=a("strong"),KLr=o("pegasus"),ZLr=o(" \u2014 "),oK=a("a"),eyr=o("TFPegasusForConditionalGeneration"),oyr=o(" (Pegasus model)"),ryr=l(),KC=a("li"),AEe=a("strong"),tyr=o("t5"),ayr=o(" \u2014 "),rK=a("a"),nyr=o("TFT5ForConditionalGeneration"),syr=o(" (T5 model)"),lyr=l(),F(ZC.$$.fragment),Gze=l(),wc=a("h2"),e3=a("a"),LEe=a("span"),F(Ax.$$.fragment),iyr=l(),yEe=a("span"),dyr=o("TFAutoModelForSequenceClassification"),Oze=l(),ir=a("div"),F(Lx.$$.fragment),cyr=l(),Ac=a("p"),fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tK=a("a"),myr=o("from_pretrained()"),gyr=o(" class method or the "),aK=a("a"),hyr=o("from_config()"),pyr=o(` class
method.`),_yr=l(),yx=a("p"),uyr=o("This class cannot be instantiated directly using "),xEe=a("code"),byr=o("__init__()"),vyr=o(" (throws an error)."),Fyr=l(),jt=a("div"),F(xx.$$.fragment),Tyr=l(),$Ee=a("p"),Myr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Eyr=l(),Lc=a("p"),Cyr=o(`Note:
Loading a model from its configuration file does `),kEe=a("strong"),wyr=o("not"),Ayr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=a("a"),Lyr=o("from_pretrained()"),yyr=o(" to load the model weights."),xyr=l(),F(o3.$$.fragment),$yr=l(),Ir=a("div"),F($x.$$.fragment),kyr=l(),SEe=a("p"),Syr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ryr=l(),gn=a("p"),Pyr=o("The model class to instantiate is selected based on the "),REe=a("code"),Byr=o("model_type"),Iyr=o(` property of the config object (either
passed as an argument or loaded from `),PEe=a("code"),Nyr=o("pretrained_model_name_or_path"),qyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BEe=a("code"),jyr=o("pretrained_model_name_or_path"),Dyr=o(":"),Gyr=l(),te=a("ul"),r3=a("li"),IEe=a("strong"),Oyr=o("albert"),Vyr=o(" \u2014 "),sK=a("a"),Xyr=o("TFAlbertForSequenceClassification"),zyr=o(" (ALBERT model)"),Qyr=l(),t3=a("li"),NEe=a("strong"),Wyr=o("bert"),Hyr=o(" \u2014 "),lK=a("a"),Uyr=o("TFBertForSequenceClassification"),Jyr=o(" (BERT model)"),Yyr=l(),a3=a("li"),qEe=a("strong"),Kyr=o("camembert"),Zyr=o(" \u2014 "),iK=a("a"),e9r=o("TFCamembertForSequenceClassification"),o9r=o(" (CamemBERT model)"),r9r=l(),n3=a("li"),jEe=a("strong"),t9r=o("convbert"),a9r=o(" \u2014 "),dK=a("a"),n9r=o("TFConvBertForSequenceClassification"),s9r=o(" (ConvBERT model)"),l9r=l(),s3=a("li"),DEe=a("strong"),i9r=o("ctrl"),d9r=o(" \u2014 "),cK=a("a"),c9r=o("TFCTRLForSequenceClassification"),f9r=o(" (CTRL model)"),m9r=l(),l3=a("li"),GEe=a("strong"),g9r=o("deberta"),h9r=o(" \u2014 "),fK=a("a"),p9r=o("TFDebertaForSequenceClassification"),_9r=o(" (DeBERTa model)"),u9r=l(),i3=a("li"),OEe=a("strong"),b9r=o("deberta-v2"),v9r=o(" \u2014 "),mK=a("a"),F9r=o("TFDebertaV2ForSequenceClassification"),T9r=o(" (DeBERTa-v2 model)"),M9r=l(),d3=a("li"),VEe=a("strong"),E9r=o("distilbert"),C9r=o(" \u2014 "),gK=a("a"),w9r=o("TFDistilBertForSequenceClassification"),A9r=o(" (DistilBERT model)"),L9r=l(),c3=a("li"),XEe=a("strong"),y9r=o("electra"),x9r=o(" \u2014 "),hK=a("a"),$9r=o("TFElectraForSequenceClassification"),k9r=o(" (ELECTRA model)"),S9r=l(),f3=a("li"),zEe=a("strong"),R9r=o("flaubert"),P9r=o(" \u2014 "),pK=a("a"),B9r=o("TFFlaubertForSequenceClassification"),I9r=o(" (FlauBERT model)"),N9r=l(),m3=a("li"),QEe=a("strong"),q9r=o("funnel"),j9r=o(" \u2014 "),_K=a("a"),D9r=o("TFFunnelForSequenceClassification"),G9r=o(" (Funnel Transformer model)"),O9r=l(),g3=a("li"),WEe=a("strong"),V9r=o("gpt2"),X9r=o(" \u2014 "),uK=a("a"),z9r=o("TFGPT2ForSequenceClassification"),Q9r=o(" (OpenAI GPT-2 model)"),W9r=l(),h3=a("li"),HEe=a("strong"),H9r=o("gptj"),U9r=o(" \u2014 "),bK=a("a"),J9r=o("TFGPTJForSequenceClassification"),Y9r=o(" (GPT-J model)"),K9r=l(),p3=a("li"),UEe=a("strong"),Z9r=o("layoutlm"),exr=o(" \u2014 "),vK=a("a"),oxr=o("TFLayoutLMForSequenceClassification"),rxr=o(" (LayoutLM model)"),txr=l(),_3=a("li"),JEe=a("strong"),axr=o("longformer"),nxr=o(" \u2014 "),FK=a("a"),sxr=o("TFLongformerForSequenceClassification"),lxr=o(" (Longformer model)"),ixr=l(),u3=a("li"),YEe=a("strong"),dxr=o("mobilebert"),cxr=o(" \u2014 "),TK=a("a"),fxr=o("TFMobileBertForSequenceClassification"),mxr=o(" (MobileBERT model)"),gxr=l(),b3=a("li"),KEe=a("strong"),hxr=o("mpnet"),pxr=o(" \u2014 "),MK=a("a"),_xr=o("TFMPNetForSequenceClassification"),uxr=o(" (MPNet model)"),bxr=l(),v3=a("li"),ZEe=a("strong"),vxr=o("openai-gpt"),Fxr=o(" \u2014 "),EK=a("a"),Txr=o("TFOpenAIGPTForSequenceClassification"),Mxr=o(" (OpenAI GPT model)"),Exr=l(),F3=a("li"),eCe=a("strong"),Cxr=o("rembert"),wxr=o(" \u2014 "),CK=a("a"),Axr=o("TFRemBertForSequenceClassification"),Lxr=o(" (RemBERT model)"),yxr=l(),T3=a("li"),oCe=a("strong"),xxr=o("roberta"),$xr=o(" \u2014 "),wK=a("a"),kxr=o("TFRobertaForSequenceClassification"),Sxr=o(" (RoBERTa model)"),Rxr=l(),M3=a("li"),rCe=a("strong"),Pxr=o("roformer"),Bxr=o(" \u2014 "),AK=a("a"),Ixr=o("TFRoFormerForSequenceClassification"),Nxr=o(" (RoFormer model)"),qxr=l(),E3=a("li"),tCe=a("strong"),jxr=o("tapas"),Dxr=o(" \u2014 "),LK=a("a"),Gxr=o("TFTapasForSequenceClassification"),Oxr=o(" (TAPAS model)"),Vxr=l(),C3=a("li"),aCe=a("strong"),Xxr=o("transfo-xl"),zxr=o(" \u2014 "),yK=a("a"),Qxr=o("TFTransfoXLForSequenceClassification"),Wxr=o(" (Transformer-XL model)"),Hxr=l(),w3=a("li"),nCe=a("strong"),Uxr=o("xlm"),Jxr=o(" \u2014 "),xK=a("a"),Yxr=o("TFXLMForSequenceClassification"),Kxr=o(" (XLM model)"),Zxr=l(),A3=a("li"),sCe=a("strong"),e$r=o("xlm-roberta"),o$r=o(" \u2014 "),$K=a("a"),r$r=o("TFXLMRobertaForSequenceClassification"),t$r=o(" (XLM-RoBERTa model)"),a$r=l(),L3=a("li"),lCe=a("strong"),n$r=o("xlnet"),s$r=o(" \u2014 "),kK=a("a"),l$r=o("TFXLNetForSequenceClassification"),i$r=o(" (XLNet model)"),d$r=l(),F(y3.$$.fragment),Vze=l(),yc=a("h2"),x3=a("a"),iCe=a("span"),F(kx.$$.fragment),c$r=l(),dCe=a("span"),f$r=o("TFAutoModelForMultipleChoice"),Xze=l(),dr=a("div"),F(Sx.$$.fragment),m$r=l(),xc=a("p"),g$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SK=a("a"),h$r=o("from_pretrained()"),p$r=o(" class method or the "),RK=a("a"),_$r=o("from_config()"),u$r=o(` class
method.`),b$r=l(),Rx=a("p"),v$r=o("This class cannot be instantiated directly using "),cCe=a("code"),F$r=o("__init__()"),T$r=o(" (throws an error)."),M$r=l(),Dt=a("div"),F(Px.$$.fragment),E$r=l(),fCe=a("p"),C$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),w$r=l(),$c=a("p"),A$r=o(`Note:
Loading a model from its configuration file does `),mCe=a("strong"),L$r=o("not"),y$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=a("a"),x$r=o("from_pretrained()"),$$r=o(" to load the model weights."),k$r=l(),F($3.$$.fragment),S$r=l(),Nr=a("div"),F(Bx.$$.fragment),R$r=l(),gCe=a("p"),P$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),B$r=l(),hn=a("p"),I$r=o("The model class to instantiate is selected based on the "),hCe=a("code"),N$r=o("model_type"),q$r=o(` property of the config object (either
passed as an argument or loaded from `),pCe=a("code"),j$r=o("pretrained_model_name_or_path"),D$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=a("code"),G$r=o("pretrained_model_name_or_path"),O$r=o(":"),V$r=l(),ue=a("ul"),k3=a("li"),uCe=a("strong"),X$r=o("albert"),z$r=o(" \u2014 "),BK=a("a"),Q$r=o("TFAlbertForMultipleChoice"),W$r=o(" (ALBERT model)"),H$r=l(),S3=a("li"),bCe=a("strong"),U$r=o("bert"),J$r=o(" \u2014 "),IK=a("a"),Y$r=o("TFBertForMultipleChoice"),K$r=o(" (BERT model)"),Z$r=l(),R3=a("li"),vCe=a("strong"),ekr=o("camembert"),okr=o(" \u2014 "),NK=a("a"),rkr=o("TFCamembertForMultipleChoice"),tkr=o(" (CamemBERT model)"),akr=l(),P3=a("li"),FCe=a("strong"),nkr=o("convbert"),skr=o(" \u2014 "),qK=a("a"),lkr=o("TFConvBertForMultipleChoice"),ikr=o(" (ConvBERT model)"),dkr=l(),B3=a("li"),TCe=a("strong"),ckr=o("distilbert"),fkr=o(" \u2014 "),jK=a("a"),mkr=o("TFDistilBertForMultipleChoice"),gkr=o(" (DistilBERT model)"),hkr=l(),I3=a("li"),MCe=a("strong"),pkr=o("electra"),_kr=o(" \u2014 "),DK=a("a"),ukr=o("TFElectraForMultipleChoice"),bkr=o(" (ELECTRA model)"),vkr=l(),N3=a("li"),ECe=a("strong"),Fkr=o("flaubert"),Tkr=o(" \u2014 "),GK=a("a"),Mkr=o("TFFlaubertForMultipleChoice"),Ekr=o(" (FlauBERT model)"),Ckr=l(),q3=a("li"),CCe=a("strong"),wkr=o("funnel"),Akr=o(" \u2014 "),OK=a("a"),Lkr=o("TFFunnelForMultipleChoice"),ykr=o(" (Funnel Transformer model)"),xkr=l(),j3=a("li"),wCe=a("strong"),$kr=o("longformer"),kkr=o(" \u2014 "),VK=a("a"),Skr=o("TFLongformerForMultipleChoice"),Rkr=o(" (Longformer model)"),Pkr=l(),D3=a("li"),ACe=a("strong"),Bkr=o("mobilebert"),Ikr=o(" \u2014 "),XK=a("a"),Nkr=o("TFMobileBertForMultipleChoice"),qkr=o(" (MobileBERT model)"),jkr=l(),G3=a("li"),LCe=a("strong"),Dkr=o("mpnet"),Gkr=o(" \u2014 "),zK=a("a"),Okr=o("TFMPNetForMultipleChoice"),Vkr=o(" (MPNet model)"),Xkr=l(),O3=a("li"),yCe=a("strong"),zkr=o("rembert"),Qkr=o(" \u2014 "),QK=a("a"),Wkr=o("TFRemBertForMultipleChoice"),Hkr=o(" (RemBERT model)"),Ukr=l(),V3=a("li"),xCe=a("strong"),Jkr=o("roberta"),Ykr=o(" \u2014 "),WK=a("a"),Kkr=o("TFRobertaForMultipleChoice"),Zkr=o(" (RoBERTa model)"),eSr=l(),X3=a("li"),$Ce=a("strong"),oSr=o("roformer"),rSr=o(" \u2014 "),HK=a("a"),tSr=o("TFRoFormerForMultipleChoice"),aSr=o(" (RoFormer model)"),nSr=l(),z3=a("li"),kCe=a("strong"),sSr=o("xlm"),lSr=o(" \u2014 "),UK=a("a"),iSr=o("TFXLMForMultipleChoice"),dSr=o(" (XLM model)"),cSr=l(),Q3=a("li"),SCe=a("strong"),fSr=o("xlm-roberta"),mSr=o(" \u2014 "),JK=a("a"),gSr=o("TFXLMRobertaForMultipleChoice"),hSr=o(" (XLM-RoBERTa model)"),pSr=l(),W3=a("li"),RCe=a("strong"),_Sr=o("xlnet"),uSr=o(" \u2014 "),YK=a("a"),bSr=o("TFXLNetForMultipleChoice"),vSr=o(" (XLNet model)"),FSr=l(),F(H3.$$.fragment),zze=l(),kc=a("h2"),U3=a("a"),PCe=a("span"),F(Ix.$$.fragment),TSr=l(),BCe=a("span"),MSr=o("TFAutoModelForNextSentencePrediction"),Qze=l(),cr=a("div"),F(Nx.$$.fragment),ESr=l(),Sc=a("p"),CSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KK=a("a"),wSr=o("from_pretrained()"),ASr=o(" class method or the "),ZK=a("a"),LSr=o("from_config()"),ySr=o(` class
method.`),xSr=l(),qx=a("p"),$Sr=o("This class cannot be instantiated directly using "),ICe=a("code"),kSr=o("__init__()"),SSr=o(" (throws an error)."),RSr=l(),Gt=a("div"),F(jx.$$.fragment),PSr=l(),NCe=a("p"),BSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ISr=l(),Rc=a("p"),NSr=o(`Note:
Loading a model from its configuration file does `),qCe=a("strong"),qSr=o("not"),jSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),DSr=o("from_pretrained()"),GSr=o(" to load the model weights."),OSr=l(),F(J3.$$.fragment),VSr=l(),qr=a("div"),F(Dx.$$.fragment),XSr=l(),jCe=a("p"),zSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),QSr=l(),pn=a("p"),WSr=o("The model class to instantiate is selected based on the "),DCe=a("code"),HSr=o("model_type"),USr=o(` property of the config object (either
passed as an argument or loaded from `),GCe=a("code"),JSr=o("pretrained_model_name_or_path"),YSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=a("code"),KSr=o("pretrained_model_name_or_path"),ZSr=o(":"),eRr=l(),Gx=a("ul"),Y3=a("li"),VCe=a("strong"),oRr=o("bert"),rRr=o(" \u2014 "),oZ=a("a"),tRr=o("TFBertForNextSentencePrediction"),aRr=o(" (BERT model)"),nRr=l(),K3=a("li"),XCe=a("strong"),sRr=o("mobilebert"),lRr=o(" \u2014 "),rZ=a("a"),iRr=o("TFMobileBertForNextSentencePrediction"),dRr=o(" (MobileBERT model)"),cRr=l(),F(Z3.$$.fragment),Wze=l(),Pc=a("h2"),e5=a("a"),zCe=a("span"),F(Ox.$$.fragment),fRr=l(),QCe=a("span"),mRr=o("TFAutoModelForTableQuestionAnswering"),Hze=l(),fr=a("div"),F(Vx.$$.fragment),gRr=l(),Bc=a("p"),hRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),tZ=a("a"),pRr=o("from_pretrained()"),_Rr=o(" class method or the "),aZ=a("a"),uRr=o("from_config()"),bRr=o(` class
method.`),vRr=l(),Xx=a("p"),FRr=o("This class cannot be instantiated directly using "),WCe=a("code"),TRr=o("__init__()"),MRr=o(" (throws an error)."),ERr=l(),Ot=a("div"),F(zx.$$.fragment),CRr=l(),HCe=a("p"),wRr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ARr=l(),Ic=a("p"),LRr=o(`Note:
Loading a model from its configuration file does `),UCe=a("strong"),yRr=o("not"),xRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=a("a"),$Rr=o("from_pretrained()"),kRr=o(" to load the model weights."),SRr=l(),F(o5.$$.fragment),RRr=l(),jr=a("div"),F(Qx.$$.fragment),PRr=l(),JCe=a("p"),BRr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),IRr=l(),_n=a("p"),NRr=o("The model class to instantiate is selected based on the "),YCe=a("code"),qRr=o("model_type"),jRr=o(` property of the config object (either
passed as an argument or loaded from `),KCe=a("code"),DRr=o("pretrained_model_name_or_path"),GRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=a("code"),ORr=o("pretrained_model_name_or_path"),VRr=o(":"),XRr=l(),e3e=a("ul"),r5=a("li"),o3e=a("strong"),zRr=o("tapas"),QRr=o(" \u2014 "),sZ=a("a"),WRr=o("TFTapasForQuestionAnswering"),HRr=o(" (TAPAS model)"),URr=l(),F(t5.$$.fragment),Uze=l(),Nc=a("h2"),a5=a("a"),r3e=a("span"),F(Wx.$$.fragment),JRr=l(),t3e=a("span"),YRr=o("TFAutoModelForTokenClassification"),Jze=l(),mr=a("div"),F(Hx.$$.fragment),KRr=l(),qc=a("p"),ZRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lZ=a("a"),ePr=o("from_pretrained()"),oPr=o(" class method or the "),iZ=a("a"),rPr=o("from_config()"),tPr=o(` class
method.`),aPr=l(),Ux=a("p"),nPr=o("This class cannot be instantiated directly using "),a3e=a("code"),sPr=o("__init__()"),lPr=o(" (throws an error)."),iPr=l(),Vt=a("div"),F(Jx.$$.fragment),dPr=l(),n3e=a("p"),cPr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fPr=l(),jc=a("p"),mPr=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),gPr=o("not"),hPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=a("a"),pPr=o("from_pretrained()"),_Pr=o(" to load the model weights."),uPr=l(),F(n5.$$.fragment),bPr=l(),Dr=a("div"),F(Yx.$$.fragment),vPr=l(),l3e=a("p"),FPr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),TPr=l(),un=a("p"),MPr=o("The model class to instantiate is selected based on the "),i3e=a("code"),EPr=o("model_type"),CPr=o(` property of the config object (either
passed as an argument or loaded from `),d3e=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=a("code"),LPr=o("pretrained_model_name_or_path"),yPr=o(":"),xPr=l(),de=a("ul"),s5=a("li"),f3e=a("strong"),$Pr=o("albert"),kPr=o(" \u2014 "),cZ=a("a"),SPr=o("TFAlbertForTokenClassification"),RPr=o(" (ALBERT model)"),PPr=l(),l5=a("li"),m3e=a("strong"),BPr=o("bert"),IPr=o(" \u2014 "),fZ=a("a"),NPr=o("TFBertForTokenClassification"),qPr=o(" (BERT model)"),jPr=l(),i5=a("li"),g3e=a("strong"),DPr=o("camembert"),GPr=o(" \u2014 "),mZ=a("a"),OPr=o("TFCamembertForTokenClassification"),VPr=o(" (CamemBERT model)"),XPr=l(),d5=a("li"),h3e=a("strong"),zPr=o("convbert"),QPr=o(" \u2014 "),gZ=a("a"),WPr=o("TFConvBertForTokenClassification"),HPr=o(" (ConvBERT model)"),UPr=l(),c5=a("li"),p3e=a("strong"),JPr=o("deberta"),YPr=o(" \u2014 "),hZ=a("a"),KPr=o("TFDebertaForTokenClassification"),ZPr=o(" (DeBERTa model)"),eBr=l(),f5=a("li"),_3e=a("strong"),oBr=o("deberta-v2"),rBr=o(" \u2014 "),pZ=a("a"),tBr=o("TFDebertaV2ForTokenClassification"),aBr=o(" (DeBERTa-v2 model)"),nBr=l(),m5=a("li"),u3e=a("strong"),sBr=o("distilbert"),lBr=o(" \u2014 "),_Z=a("a"),iBr=o("TFDistilBertForTokenClassification"),dBr=o(" (DistilBERT model)"),cBr=l(),g5=a("li"),b3e=a("strong"),fBr=o("electra"),mBr=o(" \u2014 "),uZ=a("a"),gBr=o("TFElectraForTokenClassification"),hBr=o(" (ELECTRA model)"),pBr=l(),h5=a("li"),v3e=a("strong"),_Br=o("flaubert"),uBr=o(" \u2014 "),bZ=a("a"),bBr=o("TFFlaubertForTokenClassification"),vBr=o(" (FlauBERT model)"),FBr=l(),p5=a("li"),F3e=a("strong"),TBr=o("funnel"),MBr=o(" \u2014 "),vZ=a("a"),EBr=o("TFFunnelForTokenClassification"),CBr=o(" (Funnel Transformer model)"),wBr=l(),_5=a("li"),T3e=a("strong"),ABr=o("layoutlm"),LBr=o(" \u2014 "),FZ=a("a"),yBr=o("TFLayoutLMForTokenClassification"),xBr=o(" (LayoutLM model)"),$Br=l(),u5=a("li"),M3e=a("strong"),kBr=o("longformer"),SBr=o(" \u2014 "),TZ=a("a"),RBr=o("TFLongformerForTokenClassification"),PBr=o(" (Longformer model)"),BBr=l(),b5=a("li"),E3e=a("strong"),IBr=o("mobilebert"),NBr=o(" \u2014 "),MZ=a("a"),qBr=o("TFMobileBertForTokenClassification"),jBr=o(" (MobileBERT model)"),DBr=l(),v5=a("li"),C3e=a("strong"),GBr=o("mpnet"),OBr=o(" \u2014 "),EZ=a("a"),VBr=o("TFMPNetForTokenClassification"),XBr=o(" (MPNet model)"),zBr=l(),F5=a("li"),w3e=a("strong"),QBr=o("rembert"),WBr=o(" \u2014 "),CZ=a("a"),HBr=o("TFRemBertForTokenClassification"),UBr=o(" (RemBERT model)"),JBr=l(),T5=a("li"),A3e=a("strong"),YBr=o("roberta"),KBr=o(" \u2014 "),wZ=a("a"),ZBr=o("TFRobertaForTokenClassification"),eIr=o(" (RoBERTa model)"),oIr=l(),M5=a("li"),L3e=a("strong"),rIr=o("roformer"),tIr=o(" \u2014 "),AZ=a("a"),aIr=o("TFRoFormerForTokenClassification"),nIr=o(" (RoFormer model)"),sIr=l(),E5=a("li"),y3e=a("strong"),lIr=o("xlm"),iIr=o(" \u2014 "),LZ=a("a"),dIr=o("TFXLMForTokenClassification"),cIr=o(" (XLM model)"),fIr=l(),C5=a("li"),x3e=a("strong"),mIr=o("xlm-roberta"),gIr=o(" \u2014 "),yZ=a("a"),hIr=o("TFXLMRobertaForTokenClassification"),pIr=o(" (XLM-RoBERTa model)"),_Ir=l(),w5=a("li"),$3e=a("strong"),uIr=o("xlnet"),bIr=o(" \u2014 "),xZ=a("a"),vIr=o("TFXLNetForTokenClassification"),FIr=o(" (XLNet model)"),TIr=l(),F(A5.$$.fragment),Yze=l(),Dc=a("h2"),L5=a("a"),k3e=a("span"),F(Kx.$$.fragment),MIr=l(),S3e=a("span"),EIr=o("TFAutoModelForQuestionAnswering"),Kze=l(),gr=a("div"),F(Zx.$$.fragment),CIr=l(),Gc=a("p"),wIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$Z=a("a"),AIr=o("from_pretrained()"),LIr=o(" class method or the "),kZ=a("a"),yIr=o("from_config()"),xIr=o(` class
method.`),$Ir=l(),e$=a("p"),kIr=o("This class cannot be instantiated directly using "),R3e=a("code"),SIr=o("__init__()"),RIr=o(" (throws an error)."),PIr=l(),Xt=a("div"),F(o$.$$.fragment),BIr=l(),P3e=a("p"),IIr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NIr=l(),Oc=a("p"),qIr=o(`Note:
Loading a model from its configuration file does `),B3e=a("strong"),jIr=o("not"),DIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),GIr=o("from_pretrained()"),OIr=o(" to load the model weights."),VIr=l(),F(y5.$$.fragment),XIr=l(),Gr=a("div"),F(r$.$$.fragment),zIr=l(),I3e=a("p"),QIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WIr=l(),bn=a("p"),HIr=o("The model class to instantiate is selected based on the "),N3e=a("code"),UIr=o("model_type"),JIr=o(` property of the config object (either
passed as an argument or loaded from `),q3e=a("code"),YIr=o("pretrained_model_name_or_path"),KIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=a("code"),ZIr=o("pretrained_model_name_or_path"),eNr=o(":"),oNr=l(),ce=a("ul"),x5=a("li"),D3e=a("strong"),rNr=o("albert"),tNr=o(" \u2014 "),RZ=a("a"),aNr=o("TFAlbertForQuestionAnswering"),nNr=o(" (ALBERT model)"),sNr=l(),$5=a("li"),G3e=a("strong"),lNr=o("bert"),iNr=o(" \u2014 "),PZ=a("a"),dNr=o("TFBertForQuestionAnswering"),cNr=o(" (BERT model)"),fNr=l(),k5=a("li"),O3e=a("strong"),mNr=o("camembert"),gNr=o(" \u2014 "),BZ=a("a"),hNr=o("TFCamembertForQuestionAnswering"),pNr=o(" (CamemBERT model)"),_Nr=l(),S5=a("li"),V3e=a("strong"),uNr=o("convbert"),bNr=o(" \u2014 "),IZ=a("a"),vNr=o("TFConvBertForQuestionAnswering"),FNr=o(" (ConvBERT model)"),TNr=l(),R5=a("li"),X3e=a("strong"),MNr=o("deberta"),ENr=o(" \u2014 "),NZ=a("a"),CNr=o("TFDebertaForQuestionAnswering"),wNr=o(" (DeBERTa model)"),ANr=l(),P5=a("li"),z3e=a("strong"),LNr=o("deberta-v2"),yNr=o(" \u2014 "),qZ=a("a"),xNr=o("TFDebertaV2ForQuestionAnswering"),$Nr=o(" (DeBERTa-v2 model)"),kNr=l(),B5=a("li"),Q3e=a("strong"),SNr=o("distilbert"),RNr=o(" \u2014 "),jZ=a("a"),PNr=o("TFDistilBertForQuestionAnswering"),BNr=o(" (DistilBERT model)"),INr=l(),I5=a("li"),W3e=a("strong"),NNr=o("electra"),qNr=o(" \u2014 "),DZ=a("a"),jNr=o("TFElectraForQuestionAnswering"),DNr=o(" (ELECTRA model)"),GNr=l(),N5=a("li"),H3e=a("strong"),ONr=o("flaubert"),VNr=o(" \u2014 "),GZ=a("a"),XNr=o("TFFlaubertForQuestionAnsweringSimple"),zNr=o(" (FlauBERT model)"),QNr=l(),q5=a("li"),U3e=a("strong"),WNr=o("funnel"),HNr=o(" \u2014 "),OZ=a("a"),UNr=o("TFFunnelForQuestionAnswering"),JNr=o(" (Funnel Transformer model)"),YNr=l(),j5=a("li"),J3e=a("strong"),KNr=o("gptj"),ZNr=o(" \u2014 "),VZ=a("a"),eqr=o("TFGPTJForQuestionAnswering"),oqr=o(" (GPT-J model)"),rqr=l(),D5=a("li"),Y3e=a("strong"),tqr=o("longformer"),aqr=o(" \u2014 "),XZ=a("a"),nqr=o("TFLongformerForQuestionAnswering"),sqr=o(" (Longformer model)"),lqr=l(),G5=a("li"),K3e=a("strong"),iqr=o("mobilebert"),dqr=o(" \u2014 "),zZ=a("a"),cqr=o("TFMobileBertForQuestionAnswering"),fqr=o(" (MobileBERT model)"),mqr=l(),O5=a("li"),Z3e=a("strong"),gqr=o("mpnet"),hqr=o(" \u2014 "),QZ=a("a"),pqr=o("TFMPNetForQuestionAnswering"),_qr=o(" (MPNet model)"),uqr=l(),V5=a("li"),e5e=a("strong"),bqr=o("rembert"),vqr=o(" \u2014 "),WZ=a("a"),Fqr=o("TFRemBertForQuestionAnswering"),Tqr=o(" (RemBERT model)"),Mqr=l(),X5=a("li"),o5e=a("strong"),Eqr=o("roberta"),Cqr=o(" \u2014 "),HZ=a("a"),wqr=o("TFRobertaForQuestionAnswering"),Aqr=o(" (RoBERTa model)"),Lqr=l(),z5=a("li"),r5e=a("strong"),yqr=o("roformer"),xqr=o(" \u2014 "),UZ=a("a"),$qr=o("TFRoFormerForQuestionAnswering"),kqr=o(" (RoFormer model)"),Sqr=l(),Q5=a("li"),t5e=a("strong"),Rqr=o("xlm"),Pqr=o(" \u2014 "),JZ=a("a"),Bqr=o("TFXLMForQuestionAnsweringSimple"),Iqr=o(" (XLM model)"),Nqr=l(),W5=a("li"),a5e=a("strong"),qqr=o("xlm-roberta"),jqr=o(" \u2014 "),YZ=a("a"),Dqr=o("TFXLMRobertaForQuestionAnswering"),Gqr=o(" (XLM-RoBERTa model)"),Oqr=l(),H5=a("li"),n5e=a("strong"),Vqr=o("xlnet"),Xqr=o(" \u2014 "),KZ=a("a"),zqr=o("TFXLNetForQuestionAnsweringSimple"),Qqr=o(" (XLNet model)"),Wqr=l(),F(U5.$$.fragment),Zze=l(),Vc=a("h2"),J5=a("a"),s5e=a("span"),F(t$.$$.fragment),Hqr=l(),l5e=a("span"),Uqr=o("TFAutoModelForVision2Seq"),eQe=l(),hr=a("div"),F(a$.$$.fragment),Jqr=l(),Xc=a("p"),Yqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZZ=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" class method or the "),eee=a("a"),ejr=o("from_config()"),ojr=o(` class
method.`),rjr=l(),n$=a("p"),tjr=o("This class cannot be instantiated directly using "),i5e=a("code"),ajr=o("__init__()"),njr=o(" (throws an error)."),sjr=l(),zt=a("div"),F(s$.$$.fragment),ljr=l(),d5e=a("p"),ijr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),djr=l(),zc=a("p"),cjr=o(`Note:
Loading a model from its configuration file does `),c5e=a("strong"),fjr=o("not"),mjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),gjr=o("from_pretrained()"),hjr=o(" to load the model weights."),pjr=l(),F(Y5.$$.fragment),_jr=l(),Or=a("div"),F(l$.$$.fragment),ujr=l(),f5e=a("p"),bjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vjr=l(),vn=a("p"),Fjr=o("The model class to instantiate is selected based on the "),m5e=a("code"),Tjr=o("model_type"),Mjr=o(` property of the config object (either
passed as an argument or loaded from `),g5e=a("code"),Ejr=o("pretrained_model_name_or_path"),Cjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=a("code"),wjr=o("pretrained_model_name_or_path"),Ajr=o(":"),Ljr=l(),p5e=a("ul"),K5=a("li"),_5e=a("strong"),yjr=o("vision-encoder-decoder"),xjr=o(" \u2014 "),ree=a("a"),$jr=o("TFVisionEncoderDecoderModel"),kjr=o(" (Vision Encoder decoder model)"),Sjr=l(),F(Z5.$$.fragment),oQe=l(),Qc=a("h2"),e0=a("a"),u5e=a("span"),F(i$.$$.fragment),Rjr=l(),b5e=a("span"),Pjr=o("TFAutoModelForSpeechSeq2Seq"),rQe=l(),pr=a("div"),F(d$.$$.fragment),Bjr=l(),Wc=a("p"),Ijr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tee=a("a"),Njr=o("from_pretrained()"),qjr=o(" class method or the "),aee=a("a"),jjr=o("from_config()"),Djr=o(` class
method.`),Gjr=l(),c$=a("p"),Ojr=o("This class cannot be instantiated directly using "),v5e=a("code"),Vjr=o("__init__()"),Xjr=o(" (throws an error)."),zjr=l(),Qt=a("div"),F(f$.$$.fragment),Qjr=l(),F5e=a("p"),Wjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hjr=l(),Hc=a("p"),Ujr=o(`Note:
Loading a model from its configuration file does `),T5e=a("strong"),Jjr=o("not"),Yjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=a("a"),Kjr=o("from_pretrained()"),Zjr=o(" to load the model weights."),eDr=l(),F(o0.$$.fragment),oDr=l(),Vr=a("div"),F(m$.$$.fragment),rDr=l(),M5e=a("p"),tDr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),aDr=l(),Fn=a("p"),nDr=o("The model class to instantiate is selected based on the "),E5e=a("code"),sDr=o("model_type"),lDr=o(` property of the config object (either
passed as an argument or loaded from `),C5e=a("code"),iDr=o("pretrained_model_name_or_path"),dDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=a("code"),cDr=o("pretrained_model_name_or_path"),fDr=o(":"),mDr=l(),A5e=a("ul"),r0=a("li"),L5e=a("strong"),gDr=o("speech_to_text"),hDr=o(" \u2014 "),see=a("a"),pDr=o("TFSpeech2TextForConditionalGeneration"),_Dr=o(" (Speech2Text model)"),uDr=l(),F(t0.$$.fragment),tQe=l(),Uc=a("h2"),a0=a("a"),y5e=a("span"),F(g$.$$.fragment),bDr=l(),x5e=a("span"),vDr=o("FlaxAutoModel"),aQe=l(),_r=a("div"),F(h$.$$.fragment),FDr=l(),Jc=a("p"),TDr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lee=a("a"),MDr=o("from_pretrained()"),EDr=o(" class method or the "),iee=a("a"),CDr=o("from_config()"),wDr=o(` class
method.`),ADr=l(),p$=a("p"),LDr=o("This class cannot be instantiated directly using "),$5e=a("code"),yDr=o("__init__()"),xDr=o(" (throws an error)."),$Dr=l(),Wt=a("div"),F(_$.$$.fragment),kDr=l(),k5e=a("p"),SDr=o("Instantiates one of the base model classes of the library from a configuration."),RDr=l(),Yc=a("p"),PDr=o(`Note:
Loading a model from its configuration file does `),S5e=a("strong"),BDr=o("not"),IDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=a("a"),NDr=o("from_pretrained()"),qDr=o(" to load the model weights."),jDr=l(),F(n0.$$.fragment),DDr=l(),Xr=a("div"),F(u$.$$.fragment),GDr=l(),R5e=a("p"),ODr=o("Instantiate one of the base model classes of the library from a pretrained model."),VDr=l(),Tn=a("p"),XDr=o("The model class to instantiate is selected based on the "),P5e=a("code"),zDr=o("model_type"),QDr=o(` property of the config object (either
passed as an argument or loaded from `),B5e=a("code"),WDr=o("pretrained_model_name_or_path"),HDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=a("code"),UDr=o("pretrained_model_name_or_path"),JDr=o(":"),YDr=l(),oe=a("ul"),s0=a("li"),N5e=a("strong"),KDr=o("albert"),ZDr=o(" \u2014 "),cee=a("a"),eGr=o("FlaxAlbertModel"),oGr=o(" (ALBERT model)"),rGr=l(),l0=a("li"),q5e=a("strong"),tGr=o("bart"),aGr=o(" \u2014 "),fee=a("a"),nGr=o("FlaxBartModel"),sGr=o(" (BART model)"),lGr=l(),i0=a("li"),j5e=a("strong"),iGr=o("beit"),dGr=o(" \u2014 "),mee=a("a"),cGr=o("FlaxBeitModel"),fGr=o(" (BEiT model)"),mGr=l(),d0=a("li"),D5e=a("strong"),gGr=o("bert"),hGr=o(" \u2014 "),gee=a("a"),pGr=o("FlaxBertModel"),_Gr=o(" (BERT model)"),uGr=l(),c0=a("li"),G5e=a("strong"),bGr=o("big_bird"),vGr=o(" \u2014 "),hee=a("a"),FGr=o("FlaxBigBirdModel"),TGr=o(" (BigBird model)"),MGr=l(),f0=a("li"),O5e=a("strong"),EGr=o("blenderbot"),CGr=o(" \u2014 "),pee=a("a"),wGr=o("FlaxBlenderbotModel"),AGr=o(" (Blenderbot model)"),LGr=l(),m0=a("li"),V5e=a("strong"),yGr=o("blenderbot-small"),xGr=o(" \u2014 "),_ee=a("a"),$Gr=o("FlaxBlenderbotSmallModel"),kGr=o(" (BlenderbotSmall model)"),SGr=l(),g0=a("li"),X5e=a("strong"),RGr=o("clip"),PGr=o(" \u2014 "),uee=a("a"),BGr=o("FlaxCLIPModel"),IGr=o(" (CLIP model)"),NGr=l(),h0=a("li"),z5e=a("strong"),qGr=o("distilbert"),jGr=o(" \u2014 "),bee=a("a"),DGr=o("FlaxDistilBertModel"),GGr=o(" (DistilBERT model)"),OGr=l(),p0=a("li"),Q5e=a("strong"),VGr=o("electra"),XGr=o(" \u2014 "),vee=a("a"),zGr=o("FlaxElectraModel"),QGr=o(" (ELECTRA model)"),WGr=l(),_0=a("li"),W5e=a("strong"),HGr=o("gpt2"),UGr=o(" \u2014 "),Fee=a("a"),JGr=o("FlaxGPT2Model"),YGr=o(" (OpenAI GPT-2 model)"),KGr=l(),u0=a("li"),H5e=a("strong"),ZGr=o("gpt_neo"),eOr=o(" \u2014 "),Tee=a("a"),oOr=o("FlaxGPTNeoModel"),rOr=o(" (GPT Neo model)"),tOr=l(),b0=a("li"),U5e=a("strong"),aOr=o("gptj"),nOr=o(" \u2014 "),Mee=a("a"),sOr=o("FlaxGPTJModel"),lOr=o(" (GPT-J model)"),iOr=l(),v0=a("li"),J5e=a("strong"),dOr=o("longt5"),cOr=o(" \u2014 "),Eee=a("a"),fOr=o("FlaxLongT5Model"),mOr=o(" (LongT5 model)"),gOr=l(),F0=a("li"),Y5e=a("strong"),hOr=o("marian"),pOr=o(" \u2014 "),Cee=a("a"),_Or=o("FlaxMarianModel"),uOr=o(" (Marian model)"),bOr=l(),T0=a("li"),K5e=a("strong"),vOr=o("mbart"),FOr=o(" \u2014 "),wee=a("a"),TOr=o("FlaxMBartModel"),MOr=o(" (mBART model)"),EOr=l(),M0=a("li"),Z5e=a("strong"),COr=o("mt5"),wOr=o(" \u2014 "),Aee=a("a"),AOr=o("FlaxMT5Model"),LOr=o(" (MT5 model)"),yOr=l(),E0=a("li"),e0e=a("strong"),xOr=o("opt"),$Or=o(" \u2014 "),Lee=a("a"),kOr=o("FlaxOPTModel"),SOr=o(" (OPT model)"),ROr=l(),C0=a("li"),o0e=a("strong"),POr=o("pegasus"),BOr=o(" \u2014 "),yee=a("a"),IOr=o("FlaxPegasusModel"),NOr=o(" (Pegasus model)"),qOr=l(),w0=a("li"),r0e=a("strong"),jOr=o("roberta"),DOr=o(" \u2014 "),xee=a("a"),GOr=o("FlaxRobertaModel"),OOr=o(" (RoBERTa model)"),VOr=l(),A0=a("li"),t0e=a("strong"),XOr=o("roformer"),zOr=o(" \u2014 "),$ee=a("a"),QOr=o("FlaxRoFormerModel"),WOr=o(" (RoFormer model)"),HOr=l(),L0=a("li"),a0e=a("strong"),UOr=o("t5"),JOr=o(" \u2014 "),kee=a("a"),YOr=o("FlaxT5Model"),KOr=o(" (T5 model)"),ZOr=l(),y0=a("li"),n0e=a("strong"),eVr=o("vision-text-dual-encoder"),oVr=o(" \u2014 "),See=a("a"),rVr=o("FlaxVisionTextDualEncoderModel"),tVr=o(" (VisionTextDualEncoder model)"),aVr=l(),x0=a("li"),s0e=a("strong"),nVr=o("vit"),sVr=o(" \u2014 "),Ree=a("a"),lVr=o("FlaxViTModel"),iVr=o(" (ViT model)"),dVr=l(),$0=a("li"),l0e=a("strong"),cVr=o("wav2vec2"),fVr=o(" \u2014 "),Pee=a("a"),mVr=o("FlaxWav2Vec2Model"),gVr=o(" (Wav2Vec2 model)"),hVr=l(),k0=a("li"),i0e=a("strong"),pVr=o("xglm"),_Vr=o(" \u2014 "),Bee=a("a"),uVr=o("FlaxXGLMModel"),bVr=o(" (XGLM model)"),vVr=l(),S0=a("li"),d0e=a("strong"),FVr=o("xlm-roberta"),TVr=o(" \u2014 "),Iee=a("a"),MVr=o("FlaxXLMRobertaModel"),EVr=o(" (XLM-RoBERTa model)"),CVr=l(),F(R0.$$.fragment),nQe=l(),Kc=a("h2"),P0=a("a"),c0e=a("span"),F(b$.$$.fragment),wVr=l(),f0e=a("span"),AVr=o("FlaxAutoModelForCausalLM"),sQe=l(),ur=a("div"),F(v$.$$.fragment),LVr=l(),Zc=a("p"),yVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nee=a("a"),xVr=o("from_pretrained()"),$Vr=o(" class method or the "),qee=a("a"),kVr=o("from_config()"),SVr=o(` class
method.`),RVr=l(),F$=a("p"),PVr=o("This class cannot be instantiated directly using "),m0e=a("code"),BVr=o("__init__()"),IVr=o(" (throws an error)."),NVr=l(),Ht=a("div"),F(T$.$$.fragment),qVr=l(),g0e=a("p"),jVr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),DVr=l(),ef=a("p"),GVr=o(`Note:
Loading a model from its configuration file does `),h0e=a("strong"),OVr=o("not"),VVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=a("a"),XVr=o("from_pretrained()"),zVr=o(" to load the model weights."),QVr=l(),F(B0.$$.fragment),WVr=l(),zr=a("div"),F(M$.$$.fragment),HVr=l(),p0e=a("p"),UVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),JVr=l(),Mn=a("p"),YVr=o("The model class to instantiate is selected based on the "),_0e=a("code"),KVr=o("model_type"),ZVr=o(` property of the config object (either
passed as an argument or loaded from `),u0e=a("code"),eXr=o("pretrained_model_name_or_path"),oXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b0e=a("code"),rXr=o("pretrained_model_name_or_path"),tXr=o(":"),aXr=l(),xe=a("ul"),I0=a("li"),v0e=a("strong"),nXr=o("bart"),sXr=o(" \u2014 "),Dee=a("a"),lXr=o("FlaxBartForCausalLM"),iXr=o(" (BART model)"),dXr=l(),N0=a("li"),F0e=a("strong"),cXr=o("bert"),fXr=o(" \u2014 "),Gee=a("a"),mXr=o("FlaxBertForCausalLM"),gXr=o(" (BERT model)"),hXr=l(),q0=a("li"),T0e=a("strong"),pXr=o("big_bird"),_Xr=o(" \u2014 "),Oee=a("a"),uXr=o("FlaxBigBirdForCausalLM"),bXr=o(" (BigBird model)"),vXr=l(),j0=a("li"),M0e=a("strong"),FXr=o("electra"),TXr=o(" \u2014 "),Vee=a("a"),MXr=o("FlaxElectraForCausalLM"),EXr=o(" (ELECTRA model)"),CXr=l(),D0=a("li"),E0e=a("strong"),wXr=o("gpt2"),AXr=o(" \u2014 "),Xee=a("a"),LXr=o("FlaxGPT2LMHeadModel"),yXr=o(" (OpenAI GPT-2 model)"),xXr=l(),G0=a("li"),C0e=a("strong"),$Xr=o("gpt_neo"),kXr=o(" \u2014 "),zee=a("a"),SXr=o("FlaxGPTNeoForCausalLM"),RXr=o(" (GPT Neo model)"),PXr=l(),O0=a("li"),w0e=a("strong"),BXr=o("gptj"),IXr=o(" \u2014 "),Qee=a("a"),NXr=o("FlaxGPTJForCausalLM"),qXr=o(" (GPT-J model)"),jXr=l(),V0=a("li"),A0e=a("strong"),DXr=o("opt"),GXr=o(" \u2014 "),Wee=a("a"),OXr=o("FlaxOPTForCausalLM"),VXr=o(" (OPT model)"),XXr=l(),X0=a("li"),L0e=a("strong"),zXr=o("roberta"),QXr=o(" \u2014 "),Hee=a("a"),WXr=o("FlaxRobertaForCausalLM"),HXr=o(" (RoBERTa model)"),UXr=l(),z0=a("li"),y0e=a("strong"),JXr=o("xglm"),YXr=o(" \u2014 "),Uee=a("a"),KXr=o("FlaxXGLMForCausalLM"),ZXr=o(" (XGLM model)"),ezr=l(),F(Q0.$$.fragment),lQe=l(),of=a("h2"),W0=a("a"),x0e=a("span"),F(E$.$$.fragment),ozr=l(),$0e=a("span"),rzr=o("FlaxAutoModelForPreTraining"),iQe=l(),br=a("div"),F(C$.$$.fragment),tzr=l(),rf=a("p"),azr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jee=a("a"),nzr=o("from_pretrained()"),szr=o(" class method or the "),Yee=a("a"),lzr=o("from_config()"),izr=o(` class
method.`),dzr=l(),w$=a("p"),czr=o("This class cannot be instantiated directly using "),k0e=a("code"),fzr=o("__init__()"),mzr=o(" (throws an error)."),gzr=l(),Ut=a("div"),F(A$.$$.fragment),hzr=l(),S0e=a("p"),pzr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_zr=l(),tf=a("p"),uzr=o(`Note:
Loading a model from its configuration file does `),R0e=a("strong"),bzr=o("not"),vzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=a("a"),Fzr=o("from_pretrained()"),Tzr=o(" to load the model weights."),Mzr=l(),F(H0.$$.fragment),Ezr=l(),Qr=a("div"),F(L$.$$.fragment),Czr=l(),P0e=a("p"),wzr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Azr=l(),En=a("p"),Lzr=o("The model class to instantiate is selected based on the "),B0e=a("code"),yzr=o("model_type"),xzr=o(` property of the config object (either
passed as an argument or loaded from `),I0e=a("code"),$zr=o("pretrained_model_name_or_path"),kzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=a("code"),Szr=o("pretrained_model_name_or_path"),Rzr=o(":"),Pzr=l(),Ee=a("ul"),U0=a("li"),q0e=a("strong"),Bzr=o("albert"),Izr=o(" \u2014 "),Zee=a("a"),Nzr=o("FlaxAlbertForPreTraining"),qzr=o(" (ALBERT model)"),jzr=l(),J0=a("li"),j0e=a("strong"),Dzr=o("bart"),Gzr=o(" \u2014 "),eoe=a("a"),Ozr=o("FlaxBartForConditionalGeneration"),Vzr=o(" (BART model)"),Xzr=l(),Y0=a("li"),D0e=a("strong"),zzr=o("bert"),Qzr=o(" \u2014 "),ooe=a("a"),Wzr=o("FlaxBertForPreTraining"),Hzr=o(" (BERT model)"),Uzr=l(),K0=a("li"),G0e=a("strong"),Jzr=o("big_bird"),Yzr=o(" \u2014 "),roe=a("a"),Kzr=o("FlaxBigBirdForPreTraining"),Zzr=o(" (BigBird model)"),eQr=l(),Z0=a("li"),O0e=a("strong"),oQr=o("electra"),rQr=o(" \u2014 "),toe=a("a"),tQr=o("FlaxElectraForPreTraining"),aQr=o(" (ELECTRA model)"),nQr=l(),ew=a("li"),V0e=a("strong"),sQr=o("longt5"),lQr=o(" \u2014 "),aoe=a("a"),iQr=o("FlaxLongT5ForConditionalGeneration"),dQr=o(" (LongT5 model)"),cQr=l(),ow=a("li"),X0e=a("strong"),fQr=o("mbart"),mQr=o(" \u2014 "),noe=a("a"),gQr=o("FlaxMBartForConditionalGeneration"),hQr=o(" (mBART model)"),pQr=l(),rw=a("li"),z0e=a("strong"),_Qr=o("mt5"),uQr=o(" \u2014 "),soe=a("a"),bQr=o("FlaxMT5ForConditionalGeneration"),vQr=o(" (MT5 model)"),FQr=l(),tw=a("li"),Q0e=a("strong"),TQr=o("roberta"),MQr=o(" \u2014 "),loe=a("a"),EQr=o("FlaxRobertaForMaskedLM"),CQr=o(" (RoBERTa model)"),wQr=l(),aw=a("li"),W0e=a("strong"),AQr=o("roformer"),LQr=o(" \u2014 "),ioe=a("a"),yQr=o("FlaxRoFormerForMaskedLM"),xQr=o(" (RoFormer model)"),$Qr=l(),nw=a("li"),H0e=a("strong"),kQr=o("t5"),SQr=o(" \u2014 "),doe=a("a"),RQr=o("FlaxT5ForConditionalGeneration"),PQr=o(" (T5 model)"),BQr=l(),sw=a("li"),U0e=a("strong"),IQr=o("wav2vec2"),NQr=o(" \u2014 "),coe=a("a"),qQr=o("FlaxWav2Vec2ForPreTraining"),jQr=o(" (Wav2Vec2 model)"),DQr=l(),lw=a("li"),J0e=a("strong"),GQr=o("xlm-roberta"),OQr=o(" \u2014 "),foe=a("a"),VQr=o("FlaxXLMRobertaForMaskedLM"),XQr=o(" (XLM-RoBERTa model)"),zQr=l(),F(iw.$$.fragment),dQe=l(),af=a("h2"),dw=a("a"),Y0e=a("span"),F(y$.$$.fragment),QQr=l(),K0e=a("span"),WQr=o("FlaxAutoModelForMaskedLM"),cQe=l(),vr=a("div"),F(x$.$$.fragment),HQr=l(),nf=a("p"),UQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),moe=a("a"),JQr=o("from_pretrained()"),YQr=o(" class method or the "),goe=a("a"),KQr=o("from_config()"),ZQr=o(` class
method.`),eWr=l(),$$=a("p"),oWr=o("This class cannot be instantiated directly using "),Z0e=a("code"),rWr=o("__init__()"),tWr=o(" (throws an error)."),aWr=l(),Jt=a("div"),F(k$.$$.fragment),nWr=l(),ewe=a("p"),sWr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lWr=l(),sf=a("p"),iWr=o(`Note:
Loading a model from its configuration file does `),owe=a("strong"),dWr=o("not"),cWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=a("a"),fWr=o("from_pretrained()"),mWr=o(" to load the model weights."),gWr=l(),F(cw.$$.fragment),hWr=l(),Wr=a("div"),F(S$.$$.fragment),pWr=l(),rwe=a("p"),_Wr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uWr=l(),Cn=a("p"),bWr=o("The model class to instantiate is selected based on the "),twe=a("code"),vWr=o("model_type"),FWr=o(` property of the config object (either
passed as an argument or loaded from `),awe=a("code"),TWr=o("pretrained_model_name_or_path"),MWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nwe=a("code"),EWr=o("pretrained_model_name_or_path"),CWr=o(":"),wWr=l(),$e=a("ul"),fw=a("li"),swe=a("strong"),AWr=o("albert"),LWr=o(" \u2014 "),poe=a("a"),yWr=o("FlaxAlbertForMaskedLM"),xWr=o(" (ALBERT model)"),$Wr=l(),mw=a("li"),lwe=a("strong"),kWr=o("bart"),SWr=o(" \u2014 "),_oe=a("a"),RWr=o("FlaxBartForConditionalGeneration"),PWr=o(" (BART model)"),BWr=l(),gw=a("li"),iwe=a("strong"),IWr=o("bert"),NWr=o(" \u2014 "),uoe=a("a"),qWr=o("FlaxBertForMaskedLM"),jWr=o(" (BERT model)"),DWr=l(),hw=a("li"),dwe=a("strong"),GWr=o("big_bird"),OWr=o(" \u2014 "),boe=a("a"),VWr=o("FlaxBigBirdForMaskedLM"),XWr=o(" (BigBird model)"),zWr=l(),pw=a("li"),cwe=a("strong"),QWr=o("distilbert"),WWr=o(" \u2014 "),voe=a("a"),HWr=o("FlaxDistilBertForMaskedLM"),UWr=o(" (DistilBERT model)"),JWr=l(),_w=a("li"),fwe=a("strong"),YWr=o("electra"),KWr=o(" \u2014 "),Foe=a("a"),ZWr=o("FlaxElectraForMaskedLM"),eHr=o(" (ELECTRA model)"),oHr=l(),uw=a("li"),mwe=a("strong"),rHr=o("mbart"),tHr=o(" \u2014 "),Toe=a("a"),aHr=o("FlaxMBartForConditionalGeneration"),nHr=o(" (mBART model)"),sHr=l(),bw=a("li"),gwe=a("strong"),lHr=o("roberta"),iHr=o(" \u2014 "),Moe=a("a"),dHr=o("FlaxRobertaForMaskedLM"),cHr=o(" (RoBERTa model)"),fHr=l(),vw=a("li"),hwe=a("strong"),mHr=o("roformer"),gHr=o(" \u2014 "),Eoe=a("a"),hHr=o("FlaxRoFormerForMaskedLM"),pHr=o(" (RoFormer model)"),_Hr=l(),Fw=a("li"),pwe=a("strong"),uHr=o("xlm-roberta"),bHr=o(" \u2014 "),Coe=a("a"),vHr=o("FlaxXLMRobertaForMaskedLM"),FHr=o(" (XLM-RoBERTa model)"),THr=l(),F(Tw.$$.fragment),fQe=l(),lf=a("h2"),Mw=a("a"),_we=a("span"),F(R$.$$.fragment),MHr=l(),uwe=a("span"),EHr=o("FlaxAutoModelForSeq2SeqLM"),mQe=l(),Fr=a("div"),F(P$.$$.fragment),CHr=l(),df=a("p"),wHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),woe=a("a"),AHr=o("from_pretrained()"),LHr=o(" class method or the "),Aoe=a("a"),yHr=o("from_config()"),xHr=o(` class
method.`),$Hr=l(),B$=a("p"),kHr=o("This class cannot be instantiated directly using "),bwe=a("code"),SHr=o("__init__()"),RHr=o(" (throws an error)."),PHr=l(),Yt=a("div"),F(I$.$$.fragment),BHr=l(),vwe=a("p"),IHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NHr=l(),cf=a("p"),qHr=o(`Note:
Loading a model from its configuration file does `),Fwe=a("strong"),jHr=o("not"),DHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=a("a"),GHr=o("from_pretrained()"),OHr=o(" to load the model weights."),VHr=l(),F(Ew.$$.fragment),XHr=l(),Hr=a("div"),F(N$.$$.fragment),zHr=l(),Twe=a("p"),QHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),WHr=l(),wn=a("p"),HHr=o("The model class to instantiate is selected based on the "),Mwe=a("code"),UHr=o("model_type"),JHr=o(` property of the config object (either
passed as an argument or loaded from `),Ewe=a("code"),YHr=o("pretrained_model_name_or_path"),KHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cwe=a("code"),ZHr=o("pretrained_model_name_or_path"),eUr=o(":"),oUr=l(),ke=a("ul"),Cw=a("li"),wwe=a("strong"),rUr=o("bart"),tUr=o(" \u2014 "),yoe=a("a"),aUr=o("FlaxBartForConditionalGeneration"),nUr=o(" (BART model)"),sUr=l(),ww=a("li"),Awe=a("strong"),lUr=o("blenderbot"),iUr=o(" \u2014 "),xoe=a("a"),dUr=o("FlaxBlenderbotForConditionalGeneration"),cUr=o(" (Blenderbot model)"),fUr=l(),Aw=a("li"),Lwe=a("strong"),mUr=o("blenderbot-small"),gUr=o(" \u2014 "),$oe=a("a"),hUr=o("FlaxBlenderbotSmallForConditionalGeneration"),pUr=o(" (BlenderbotSmall model)"),_Ur=l(),Lw=a("li"),ywe=a("strong"),uUr=o("encoder-decoder"),bUr=o(" \u2014 "),koe=a("a"),vUr=o("FlaxEncoderDecoderModel"),FUr=o(" (Encoder decoder model)"),TUr=l(),yw=a("li"),xwe=a("strong"),MUr=o("longt5"),EUr=o(" \u2014 "),Soe=a("a"),CUr=o("FlaxLongT5ForConditionalGeneration"),wUr=o(" (LongT5 model)"),AUr=l(),xw=a("li"),$we=a("strong"),LUr=o("marian"),yUr=o(" \u2014 "),Roe=a("a"),xUr=o("FlaxMarianMTModel"),$Ur=o(" (Marian model)"),kUr=l(),$w=a("li"),kwe=a("strong"),SUr=o("mbart"),RUr=o(" \u2014 "),Poe=a("a"),PUr=o("FlaxMBartForConditionalGeneration"),BUr=o(" (mBART model)"),IUr=l(),kw=a("li"),Swe=a("strong"),NUr=o("mt5"),qUr=o(" \u2014 "),Boe=a("a"),jUr=o("FlaxMT5ForConditionalGeneration"),DUr=o(" (MT5 model)"),GUr=l(),Sw=a("li"),Rwe=a("strong"),OUr=o("pegasus"),VUr=o(" \u2014 "),Ioe=a("a"),XUr=o("FlaxPegasusForConditionalGeneration"),zUr=o(" (Pegasus model)"),QUr=l(),Rw=a("li"),Pwe=a("strong"),WUr=o("t5"),HUr=o(" \u2014 "),Noe=a("a"),UUr=o("FlaxT5ForConditionalGeneration"),JUr=o(" (T5 model)"),YUr=l(),F(Pw.$$.fragment),gQe=l(),ff=a("h2"),Bw=a("a"),Bwe=a("span"),F(q$.$$.fragment),KUr=l(),Iwe=a("span"),ZUr=o("FlaxAutoModelForSequenceClassification"),hQe=l(),Tr=a("div"),F(j$.$$.fragment),eJr=l(),mf=a("p"),oJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qoe=a("a"),rJr=o("from_pretrained()"),tJr=o(" class method or the "),joe=a("a"),aJr=o("from_config()"),nJr=o(` class
method.`),sJr=l(),D$=a("p"),lJr=o("This class cannot be instantiated directly using "),Nwe=a("code"),iJr=o("__init__()"),dJr=o(" (throws an error)."),cJr=l(),Kt=a("div"),F(G$.$$.fragment),fJr=l(),qwe=a("p"),mJr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gJr=l(),gf=a("p"),hJr=o(`Note:
Loading a model from its configuration file does `),jwe=a("strong"),pJr=o("not"),_Jr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Doe=a("a"),uJr=o("from_pretrained()"),bJr=o(" to load the model weights."),vJr=l(),F(Iw.$$.fragment),FJr=l(),Ur=a("div"),F(O$.$$.fragment),TJr=l(),Dwe=a("p"),MJr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),EJr=l(),An=a("p"),CJr=o("The model class to instantiate is selected based on the "),Gwe=a("code"),wJr=o("model_type"),AJr=o(` property of the config object (either
passed as an argument or loaded from `),Owe=a("code"),LJr=o("pretrained_model_name_or_path"),yJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vwe=a("code"),xJr=o("pretrained_model_name_or_path"),$Jr=o(":"),kJr=l(),Se=a("ul"),Nw=a("li"),Xwe=a("strong"),SJr=o("albert"),RJr=o(" \u2014 "),Goe=a("a"),PJr=o("FlaxAlbertForSequenceClassification"),BJr=o(" (ALBERT model)"),IJr=l(),qw=a("li"),zwe=a("strong"),NJr=o("bart"),qJr=o(" \u2014 "),Ooe=a("a"),jJr=o("FlaxBartForSequenceClassification"),DJr=o(" (BART model)"),GJr=l(),jw=a("li"),Qwe=a("strong"),OJr=o("bert"),VJr=o(" \u2014 "),Voe=a("a"),XJr=o("FlaxBertForSequenceClassification"),zJr=o(" (BERT model)"),QJr=l(),Dw=a("li"),Wwe=a("strong"),WJr=o("big_bird"),HJr=o(" \u2014 "),Xoe=a("a"),UJr=o("FlaxBigBirdForSequenceClassification"),JJr=o(" (BigBird model)"),YJr=l(),Gw=a("li"),Hwe=a("strong"),KJr=o("distilbert"),ZJr=o(" \u2014 "),zoe=a("a"),eYr=o("FlaxDistilBertForSequenceClassification"),oYr=o(" (DistilBERT model)"),rYr=l(),Ow=a("li"),Uwe=a("strong"),tYr=o("electra"),aYr=o(" \u2014 "),Qoe=a("a"),nYr=o("FlaxElectraForSequenceClassification"),sYr=o(" (ELECTRA model)"),lYr=l(),Vw=a("li"),Jwe=a("strong"),iYr=o("mbart"),dYr=o(" \u2014 "),Woe=a("a"),cYr=o("FlaxMBartForSequenceClassification"),fYr=o(" (mBART model)"),mYr=l(),Xw=a("li"),Ywe=a("strong"),gYr=o("roberta"),hYr=o(" \u2014 "),Hoe=a("a"),pYr=o("FlaxRobertaForSequenceClassification"),_Yr=o(" (RoBERTa model)"),uYr=l(),zw=a("li"),Kwe=a("strong"),bYr=o("roformer"),vYr=o(" \u2014 "),Uoe=a("a"),FYr=o("FlaxRoFormerForSequenceClassification"),TYr=o(" (RoFormer model)"),MYr=l(),Qw=a("li"),Zwe=a("strong"),EYr=o("xlm-roberta"),CYr=o(" \u2014 "),Joe=a("a"),wYr=o("FlaxXLMRobertaForSequenceClassification"),AYr=o(" (XLM-RoBERTa model)"),LYr=l(),F(Ww.$$.fragment),pQe=l(),hf=a("h2"),Hw=a("a"),eAe=a("span"),F(V$.$$.fragment),yYr=l(),oAe=a("span"),xYr=o("FlaxAutoModelForQuestionAnswering"),_Qe=l(),Mr=a("div"),F(X$.$$.fragment),$Yr=l(),pf=a("p"),kYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Yoe=a("a"),SYr=o("from_pretrained()"),RYr=o(" class method or the "),Koe=a("a"),PYr=o("from_config()"),BYr=o(` class
method.`),IYr=l(),z$=a("p"),NYr=o("This class cannot be instantiated directly using "),rAe=a("code"),qYr=o("__init__()"),jYr=o(" (throws an error)."),DYr=l(),Zt=a("div"),F(Q$.$$.fragment),GYr=l(),tAe=a("p"),OYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VYr=l(),_f=a("p"),XYr=o(`Note:
Loading a model from its configuration file does `),aAe=a("strong"),zYr=o("not"),QYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=a("a"),WYr=o("from_pretrained()"),HYr=o(" to load the model weights."),UYr=l(),F(Uw.$$.fragment),JYr=l(),Jr=a("div"),F(W$.$$.fragment),YYr=l(),nAe=a("p"),KYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZYr=l(),Ln=a("p"),eKr=o("The model class to instantiate is selected based on the "),sAe=a("code"),oKr=o("model_type"),rKr=o(` property of the config object (either
passed as an argument or loaded from `),lAe=a("code"),tKr=o("pretrained_model_name_or_path"),aKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iAe=a("code"),nKr=o("pretrained_model_name_or_path"),sKr=o(":"),lKr=l(),Re=a("ul"),Jw=a("li"),dAe=a("strong"),iKr=o("albert"),dKr=o(" \u2014 "),ere=a("a"),cKr=o("FlaxAlbertForQuestionAnswering"),fKr=o(" (ALBERT model)"),mKr=l(),Yw=a("li"),cAe=a("strong"),gKr=o("bart"),hKr=o(" \u2014 "),ore=a("a"),pKr=o("FlaxBartForQuestionAnswering"),_Kr=o(" (BART model)"),uKr=l(),Kw=a("li"),fAe=a("strong"),bKr=o("bert"),vKr=o(" \u2014 "),rre=a("a"),FKr=o("FlaxBertForQuestionAnswering"),TKr=o(" (BERT model)"),MKr=l(),Zw=a("li"),mAe=a("strong"),EKr=o("big_bird"),CKr=o(" \u2014 "),tre=a("a"),wKr=o("FlaxBigBirdForQuestionAnswering"),AKr=o(" (BigBird model)"),LKr=l(),eA=a("li"),gAe=a("strong"),yKr=o("distilbert"),xKr=o(" \u2014 "),are=a("a"),$Kr=o("FlaxDistilBertForQuestionAnswering"),kKr=o(" (DistilBERT model)"),SKr=l(),oA=a("li"),hAe=a("strong"),RKr=o("electra"),PKr=o(" \u2014 "),nre=a("a"),BKr=o("FlaxElectraForQuestionAnswering"),IKr=o(" (ELECTRA model)"),NKr=l(),rA=a("li"),pAe=a("strong"),qKr=o("mbart"),jKr=o(" \u2014 "),sre=a("a"),DKr=o("FlaxMBartForQuestionAnswering"),GKr=o(" (mBART model)"),OKr=l(),tA=a("li"),_Ae=a("strong"),VKr=o("roberta"),XKr=o(" \u2014 "),lre=a("a"),zKr=o("FlaxRobertaForQuestionAnswering"),QKr=o(" (RoBERTa model)"),WKr=l(),aA=a("li"),uAe=a("strong"),HKr=o("roformer"),UKr=o(" \u2014 "),ire=a("a"),JKr=o("FlaxRoFormerForQuestionAnswering"),YKr=o(" (RoFormer model)"),KKr=l(),nA=a("li"),bAe=a("strong"),ZKr=o("xlm-roberta"),eZr=o(" \u2014 "),dre=a("a"),oZr=o("FlaxXLMRobertaForQuestionAnswering"),rZr=o(" (XLM-RoBERTa model)"),tZr=l(),F(sA.$$.fragment),uQe=l(),uf=a("h2"),lA=a("a"),vAe=a("span"),F(H$.$$.fragment),aZr=l(),FAe=a("span"),nZr=o("FlaxAutoModelForTokenClassification"),bQe=l(),Er=a("div"),F(U$.$$.fragment),sZr=l(),bf=a("p"),lZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cre=a("a"),iZr=o("from_pretrained()"),dZr=o(" class method or the "),fre=a("a"),cZr=o("from_config()"),fZr=o(` class
method.`),mZr=l(),J$=a("p"),gZr=o("This class cannot be instantiated directly using "),TAe=a("code"),hZr=o("__init__()"),pZr=o(" (throws an error)."),_Zr=l(),ea=a("div"),F(Y$.$$.fragment),uZr=l(),MAe=a("p"),bZr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vZr=l(),vf=a("p"),FZr=o(`Note:
Loading a model from its configuration file does `),EAe=a("strong"),TZr=o("not"),MZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=a("a"),EZr=o("from_pretrained()"),CZr=o(" to load the model weights."),wZr=l(),F(iA.$$.fragment),AZr=l(),Yr=a("div"),F(K$.$$.fragment),LZr=l(),CAe=a("p"),yZr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xZr=l(),yn=a("p"),$Zr=o("The model class to instantiate is selected based on the "),wAe=a("code"),kZr=o("model_type"),SZr=o(` property of the config object (either
passed as an argument or loaded from `),AAe=a("code"),RZr=o("pretrained_model_name_or_path"),PZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LAe=a("code"),BZr=o("pretrained_model_name_or_path"),IZr=o(":"),NZr=l(),Xe=a("ul"),dA=a("li"),yAe=a("strong"),qZr=o("albert"),jZr=o(" \u2014 "),gre=a("a"),DZr=o("FlaxAlbertForTokenClassification"),GZr=o(" (ALBERT model)"),OZr=l(),cA=a("li"),xAe=a("strong"),VZr=o("bert"),XZr=o(" \u2014 "),hre=a("a"),zZr=o("FlaxBertForTokenClassification"),QZr=o(" (BERT model)"),WZr=l(),fA=a("li"),$Ae=a("strong"),HZr=o("big_bird"),UZr=o(" \u2014 "),pre=a("a"),JZr=o("FlaxBigBirdForTokenClassification"),YZr=o(" (BigBird model)"),KZr=l(),mA=a("li"),kAe=a("strong"),ZZr=o("distilbert"),eet=o(" \u2014 "),_re=a("a"),oet=o("FlaxDistilBertForTokenClassification"),ret=o(" (DistilBERT model)"),tet=l(),gA=a("li"),SAe=a("strong"),aet=o("electra"),net=o(" \u2014 "),ure=a("a"),set=o("FlaxElectraForTokenClassification"),iet=o(" (ELECTRA model)"),det=l(),hA=a("li"),RAe=a("strong"),cet=o("roberta"),fet=o(" \u2014 "),bre=a("a"),met=o("FlaxRobertaForTokenClassification"),get=o(" (RoBERTa model)"),het=l(),pA=a("li"),PAe=a("strong"),pet=o("roformer"),_et=o(" \u2014 "),vre=a("a"),uet=o("FlaxRoFormerForTokenClassification"),bet=o(" (RoFormer model)"),vet=l(),_A=a("li"),BAe=a("strong"),Fet=o("xlm-roberta"),Tet=o(" \u2014 "),Fre=a("a"),Met=o("FlaxXLMRobertaForTokenClassification"),Eet=o(" (XLM-RoBERTa model)"),Cet=l(),F(uA.$$.fragment),vQe=l(),Ff=a("h2"),bA=a("a"),IAe=a("span"),F(Z$.$$.fragment),wet=l(),NAe=a("span"),Aet=o("FlaxAutoModelForMultipleChoice"),FQe=l(),Cr=a("div"),F(ek.$$.fragment),Let=l(),Tf=a("p"),yet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Tre=a("a"),xet=o("from_pretrained()"),$et=o(" class method or the "),Mre=a("a"),ket=o("from_config()"),Set=o(` class
method.`),Ret=l(),ok=a("p"),Pet=o("This class cannot be instantiated directly using "),qAe=a("code"),Bet=o("__init__()"),Iet=o(" (throws an error)."),Net=l(),oa=a("div"),F(rk.$$.fragment),qet=l(),jAe=a("p"),jet=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Det=l(),Mf=a("p"),Get=o(`Note:
Loading a model from its configuration file does `),DAe=a("strong"),Oet=o("not"),Vet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=a("a"),Xet=o("from_pretrained()"),zet=o(" to load the model weights."),Qet=l(),F(vA.$$.fragment),Wet=l(),Kr=a("div"),F(tk.$$.fragment),Het=l(),GAe=a("p"),Uet=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jet=l(),xn=a("p"),Yet=o("The model class to instantiate is selected based on the "),OAe=a("code"),Ket=o("model_type"),Zet=o(` property of the config object (either
passed as an argument or loaded from `),VAe=a("code"),eot=o("pretrained_model_name_or_path"),oot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XAe=a("code"),rot=o("pretrained_model_name_or_path"),tot=o(":"),aot=l(),ze=a("ul"),FA=a("li"),zAe=a("strong"),not=o("albert"),sot=o(" \u2014 "),Cre=a("a"),lot=o("FlaxAlbertForMultipleChoice"),iot=o(" (ALBERT model)"),dot=l(),TA=a("li"),QAe=a("strong"),cot=o("bert"),fot=o(" \u2014 "),wre=a("a"),mot=o("FlaxBertForMultipleChoice"),got=o(" (BERT model)"),hot=l(),MA=a("li"),WAe=a("strong"),pot=o("big_bird"),_ot=o(" \u2014 "),Are=a("a"),uot=o("FlaxBigBirdForMultipleChoice"),bot=o(" (BigBird model)"),vot=l(),EA=a("li"),HAe=a("strong"),Fot=o("distilbert"),Tot=o(" \u2014 "),Lre=a("a"),Mot=o("FlaxDistilBertForMultipleChoice"),Eot=o(" (DistilBERT model)"),Cot=l(),CA=a("li"),UAe=a("strong"),wot=o("electra"),Aot=o(" \u2014 "),yre=a("a"),Lot=o("FlaxElectraForMultipleChoice"),yot=o(" (ELECTRA model)"),xot=l(),wA=a("li"),JAe=a("strong"),$ot=o("roberta"),kot=o(" \u2014 "),xre=a("a"),Sot=o("FlaxRobertaForMultipleChoice"),Rot=o(" (RoBERTa model)"),Pot=l(),AA=a("li"),YAe=a("strong"),Bot=o("roformer"),Iot=o(" \u2014 "),$re=a("a"),Not=o("FlaxRoFormerForMultipleChoice"),qot=o(" (RoFormer model)"),jot=l(),LA=a("li"),KAe=a("strong"),Dot=o("xlm-roberta"),Got=o(" \u2014 "),kre=a("a"),Oot=o("FlaxXLMRobertaForMultipleChoice"),Vot=o(" (XLM-RoBERTa model)"),Xot=l(),F(yA.$$.fragment),TQe=l(),Ef=a("h2"),xA=a("a"),ZAe=a("span"),F(ak.$$.fragment),zot=l(),e6e=a("span"),Qot=o("FlaxAutoModelForNextSentencePrediction"),MQe=l(),wr=a("div"),F(nk.$$.fragment),Wot=l(),Cf=a("p"),Hot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sre=a("a"),Uot=o("from_pretrained()"),Jot=o(" class method or the "),Rre=a("a"),Yot=o("from_config()"),Kot=o(` class
method.`),Zot=l(),sk=a("p"),ert=o("This class cannot be instantiated directly using "),o6e=a("code"),ort=o("__init__()"),rrt=o(" (throws an error)."),trt=l(),ra=a("div"),F(lk.$$.fragment),art=l(),r6e=a("p"),nrt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),srt=l(),wf=a("p"),lrt=o(`Note:
Loading a model from its configuration file does `),t6e=a("strong"),irt=o("not"),drt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pre=a("a"),crt=o("from_pretrained()"),frt=o(" to load the model weights."),mrt=l(),F($A.$$.fragment),grt=l(),Zr=a("div"),F(ik.$$.fragment),hrt=l(),a6e=a("p"),prt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_rt=l(),$n=a("p"),urt=o("The model class to instantiate is selected based on the "),n6e=a("code"),brt=o("model_type"),vrt=o(` property of the config object (either
passed as an argument or loaded from `),s6e=a("code"),Frt=o("pretrained_model_name_or_path"),Trt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=a("code"),Mrt=o("pretrained_model_name_or_path"),Ert=o(":"),Crt=l(),i6e=a("ul"),kA=a("li"),d6e=a("strong"),wrt=o("bert"),Art=o(" \u2014 "),Bre=a("a"),Lrt=o("FlaxBertForNextSentencePrediction"),yrt=o(" (BERT model)"),xrt=l(),F(SA.$$.fragment),EQe=l(),Af=a("h2"),RA=a("a"),c6e=a("span"),F(dk.$$.fragment),$rt=l(),f6e=a("span"),krt=o("FlaxAutoModelForImageClassification"),CQe=l(),Ar=a("div"),F(ck.$$.fragment),Srt=l(),Lf=a("p"),Rrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Ire=a("a"),Prt=o("from_pretrained()"),Brt=o(" class method or the "),Nre=a("a"),Irt=o("from_config()"),Nrt=o(` class
method.`),qrt=l(),fk=a("p"),jrt=o("This class cannot be instantiated directly using "),m6e=a("code"),Drt=o("__init__()"),Grt=o(" (throws an error)."),Ort=l(),ta=a("div"),F(mk.$$.fragment),Vrt=l(),g6e=a("p"),Xrt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zrt=l(),yf=a("p"),Qrt=o(`Note:
Loading a model from its configuration file does `),h6e=a("strong"),Wrt=o("not"),Hrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=a("a"),Urt=o("from_pretrained()"),Jrt=o(" to load the model weights."),Yrt=l(),F(PA.$$.fragment),Krt=l(),et=a("div"),F(gk.$$.fragment),Zrt=l(),p6e=a("p"),ett=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ott=l(),kn=a("p"),rtt=o("The model class to instantiate is selected based on the "),_6e=a("code"),ttt=o("model_type"),att=o(` property of the config object (either
passed as an argument or loaded from `),u6e=a("code"),ntt=o("pretrained_model_name_or_path"),stt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=a("code"),ltt=o("pretrained_model_name_or_path"),itt=o(":"),dtt=l(),hk=a("ul"),BA=a("li"),v6e=a("strong"),ctt=o("beit"),ftt=o(" \u2014 "),jre=a("a"),mtt=o("FlaxBeitForImageClassification"),gtt=o(" (BEiT model)"),htt=l(),IA=a("li"),F6e=a("strong"),ptt=o("vit"),_tt=o(" \u2014 "),Dre=a("a"),utt=o("FlaxViTForImageClassification"),btt=o(" (ViT model)"),vtt=l(),F(NA.$$.fragment),wQe=l(),xf=a("h2"),qA=a("a"),T6e=a("span"),F(pk.$$.fragment),Ftt=l(),M6e=a("span"),Ttt=o("FlaxAutoModelForVision2Seq"),AQe=l(),Lr=a("div"),F(_k.$$.fragment),Mtt=l(),$f=a("p"),Ett=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Gre=a("a"),Ctt=o("from_pretrained()"),wtt=o(" class method or the "),Ore=a("a"),Att=o("from_config()"),Ltt=o(` class
method.`),ytt=l(),uk=a("p"),xtt=o("This class cannot be instantiated directly using "),E6e=a("code"),$tt=o("__init__()"),ktt=o(" (throws an error)."),Stt=l(),aa=a("div"),F(bk.$$.fragment),Rtt=l(),C6e=a("p"),Ptt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Btt=l(),kf=a("p"),Itt=o(`Note:
Loading a model from its configuration file does `),w6e=a("strong"),Ntt=o("not"),qtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vre=a("a"),jtt=o("from_pretrained()"),Dtt=o(" to load the model weights."),Gtt=l(),F(jA.$$.fragment),Ott=l(),ot=a("div"),F(vk.$$.fragment),Vtt=l(),A6e=a("p"),Xtt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ztt=l(),Sn=a("p"),Qtt=o("The model class to instantiate is selected based on the "),L6e=a("code"),Wtt=o("model_type"),Htt=o(` property of the config object (either
passed as an argument or loaded from `),y6e=a("code"),Utt=o("pretrained_model_name_or_path"),Jtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=a("code"),Ytt=o("pretrained_model_name_or_path"),Ktt=o(":"),Ztt=l(),$6e=a("ul"),DA=a("li"),k6e=a("strong"),eat=o("vision-encoder-decoder"),oat=o(" \u2014 "),Xre=a("a"),rat=o("FlaxVisionEncoderDecoderModel"),tat=o(" (Vision Encoder decoder model)"),aat=l(),F(GA.$$.fragment),this.h()},l(f){const u=UWt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Fk=s(p);m=n(Fk,"A",{id:!0,class:!0,href:!0});var S6e=s(m);_=n(S6e,"SPAN",{});var R6e=s(_);T(d.$$.fragment,R6e),R6e.forEach(t),S6e.forEach(t),h=i(Fk),wo=n(Fk,"SPAN",{});var P6e=s(wo);yi=r(P6e,"Auto Classes"),P6e.forEach(t),Fk.forEach(t),Bf=i(f),lt=n(f,"P",{});var Tk=s(lt);xi=r(Tk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=n(Tk,"CODE",{});var B6e=s($i);sL=r(B6e,"from_pretrained()"),B6e.forEach(t),If=r(Tk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Tk.forEach(t),Oe=i(f),We=n(f,"P",{});var Rn=s(We);ki=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var I6e=s(Pn);lL=r(I6e,"AutoConfig"),I6e.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var N6e=s(In);iL=r(N6e,"AutoModel"),N6e.forEach(t),Si=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var q6e=s(Nn);dL=r(q6e,"AutoTokenizer"),q6e.forEach(t),Ri=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Nf=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var Mk=s(Ae);OS=r(Mk,"will create a model that is an instance of "),Pi=n(Mk,"A",{href:!0});var j6e=s(Pi);VS=r(j6e,"BertModel"),j6e.forEach(t),XS=r(Mk,"."),Mk.forEach(t),Ao=i(f),Ra=n(f,"P",{});var Ek=s(Ra);zS=r(Ek,"There is one class of "),qf=n(Ek,"CODE",{});var D6e=s(qf);QS=r(D6e,"AutoModel"),D6e.forEach(t),NHe=r(Ek," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ek.forEach(t),MXe=i(f),Bi=n(f,"H2",{class:!0});var Ck=s(Bi);jf=n(Ck,"A",{id:!0,class:!0,href:!0});var G6e=s(jf);jae=n(G6e,"SPAN",{});var O6e=s(jae);T(cL.$$.fragment,O6e),O6e.forEach(t),G6e.forEach(t),qHe=i(Ck),Dae=n(Ck,"SPAN",{});var V6e=s(Dae);jHe=r(V6e,"Extending the Auto Classes"),V6e.forEach(t),Ck.forEach(t),EXe=i(f),qn=n(f,"P",{});var Sf=s(qn);DHe=r(Sf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Gae=n(Sf,"CODE",{});var X6e=s(Gae);GHe=r(X6e,"NewModel"),X6e.forEach(t),OHe=r(Sf,", make sure you have a "),Oae=n(Sf,"CODE",{});var z6e=s(Oae);VHe=r(z6e,"NewModelConfig"),z6e.forEach(t),XHe=r(Sf,` then you can add those to the auto
classes like this:`),Sf.forEach(t),CXe=i(f),T(fL.$$.fragment,f),wXe=i(f),WS=n(f,"P",{});var Q6e=s(WS);zHe=r(Q6e,"You will then be able to use the auto classes like you would usually do!"),Q6e.forEach(t),AXe=i(f),T(Df.$$.fragment,f),LXe=i(f),Ii=n(f,"H2",{class:!0});var wk=s(Ii);Gf=n(wk,"A",{id:!0,class:!0,href:!0});var W6e=s(Gf);Vae=n(W6e,"SPAN",{});var H6e=s(Vae);T(mL.$$.fragment,H6e),H6e.forEach(t),W6e.forEach(t),QHe=i(wk),Xae=n(wk,"SPAN",{});var U6e=s(Xae);WHe=r(U6e,"AutoConfig"),U6e.forEach(t),wk.forEach(t),yXe=i(f),Lo=n(f,"DIV",{class:!0});var nt=s(Lo);T(gL.$$.fragment,nt),HHe=i(nt),hL=n(nt,"P",{});var Ak=s(hL);UHe=r(Ak,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),HS=n(Ak,"A",{href:!0});var J6e=s(HS);JHe=r(J6e,"from_pretrained()"),J6e.forEach(t),YHe=r(Ak," class method."),Ak.forEach(t),KHe=i(nt),pL=n(nt,"P",{});var Lk=s(pL);ZHe=r(Lk,"This class cannot be instantiated directly using "),zae=n(Lk,"CODE",{});var Y6e=s(zae);eUe=r(Y6e,"__init__()"),Y6e.forEach(t),oUe=r(Lk," (throws an error)."),Lk.forEach(t),rUe=i(nt),yr=n(nt,"DIV",{class:!0});var st=s(yr);T(_L.$$.fragment,st),tUe=i(st),Qae=n(st,"P",{});var K6e=s(Qae);aUe=r(K6e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),K6e.forEach(t),nUe=i(st),Ni=n(st,"P",{});var Rf=s(Ni);sUe=r(Rf,"The configuration class to instantiate is selected based on the "),Wae=n(Rf,"CODE",{});var Z6e=s(Wae);lUe=r(Z6e,"model_type"),Z6e.forEach(t),iUe=r(Rf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Hae=n(Rf,"CODE",{});var e7e=s(Hae);dUe=r(e7e,"pretrained_model_name_or_path"),e7e.forEach(t),cUe=r(Rf,":"),Rf.forEach(t),fUe=i(st),A=n(st,"UL",{});var L=s(A);Of=n(L,"LI",{});var OA=s(Of);Uae=n(OA,"STRONG",{});var o7e=s(Uae);mUe=r(o7e,"albert"),o7e.forEach(t),gUe=r(OA," \u2014 "),US=n(OA,"A",{href:!0});var r7e=s(US);hUe=r(r7e,"AlbertConfig"),r7e.forEach(t),pUe=r(OA," (ALBERT model)"),OA.forEach(t),_Ue=i(L),Vf=n(L,"LI",{});var VA=s(Vf);Jae=n(VA,"STRONG",{});var t7e=s(Jae);uUe=r(t7e,"bart"),t7e.forEach(t),bUe=r(VA," \u2014 "),JS=n(VA,"A",{href:!0});var a7e=s(JS);vUe=r(a7e,"BartConfig"),a7e.forEach(t),FUe=r(VA," (BART model)"),VA.forEach(t),TUe=i(L),Xf=n(L,"LI",{});var XA=s(Xf);Yae=n(XA,"STRONG",{});var n7e=s(Yae);MUe=r(n7e,"beit"),n7e.forEach(t),EUe=r(XA," \u2014 "),YS=n(XA,"A",{href:!0});var s7e=s(YS);CUe=r(s7e,"BeitConfig"),s7e.forEach(t),wUe=r(XA," (BEiT model)"),XA.forEach(t),AUe=i(L),zf=n(L,"LI",{});var zA=s(zf);Kae=n(zA,"STRONG",{});var l7e=s(Kae);LUe=r(l7e,"bert"),l7e.forEach(t),yUe=r(zA," \u2014 "),KS=n(zA,"A",{href:!0});var i7e=s(KS);xUe=r(i7e,"BertConfig"),i7e.forEach(t),$Ue=r(zA," (BERT model)"),zA.forEach(t),kUe=i(L),Qf=n(L,"LI",{});var QA=s(Qf);Zae=n(QA,"STRONG",{});var d7e=s(Zae);SUe=r(d7e,"bert-generation"),d7e.forEach(t),RUe=r(QA," \u2014 "),ZS=n(QA,"A",{href:!0});var c7e=s(ZS);PUe=r(c7e,"BertGenerationConfig"),c7e.forEach(t),BUe=r(QA," (Bert Generation model)"),QA.forEach(t),IUe=i(L),Wf=n(L,"LI",{});var WA=s(Wf);ene=n(WA,"STRONG",{});var f7e=s(ene);NUe=r(f7e,"big_bird"),f7e.forEach(t),qUe=r(WA," \u2014 "),eR=n(WA,"A",{href:!0});var m7e=s(eR);jUe=r(m7e,"BigBirdConfig"),m7e.forEach(t),DUe=r(WA," (BigBird model)"),WA.forEach(t),GUe=i(L),Hf=n(L,"LI",{});var HA=s(Hf);one=n(HA,"STRONG",{});var g7e=s(one);OUe=r(g7e,"bigbird_pegasus"),g7e.forEach(t),VUe=r(HA," \u2014 "),oR=n(HA,"A",{href:!0});var h7e=s(oR);XUe=r(h7e,"BigBirdPegasusConfig"),h7e.forEach(t),zUe=r(HA," (BigBird-Pegasus model)"),HA.forEach(t),QUe=i(L),Uf=n(L,"LI",{});var UA=s(Uf);rne=n(UA,"STRONG",{});var p7e=s(rne);WUe=r(p7e,"blenderbot"),p7e.forEach(t),HUe=r(UA," \u2014 "),rR=n(UA,"A",{href:!0});var _7e=s(rR);UUe=r(_7e,"BlenderbotConfig"),_7e.forEach(t),JUe=r(UA," (Blenderbot model)"),UA.forEach(t),YUe=i(L),Jf=n(L,"LI",{});var JA=s(Jf);tne=n(JA,"STRONG",{});var u7e=s(tne);KUe=r(u7e,"blenderbot-small"),u7e.forEach(t),ZUe=r(JA," \u2014 "),tR=n(JA,"A",{href:!0});var b7e=s(tR);eJe=r(b7e,"BlenderbotSmallConfig"),b7e.forEach(t),oJe=r(JA," (BlenderbotSmall model)"),JA.forEach(t),rJe=i(L),Yf=n(L,"LI",{});var YA=s(Yf);ane=n(YA,"STRONG",{});var v7e=s(ane);tJe=r(v7e,"bloom"),v7e.forEach(t),aJe=r(YA," \u2014 "),aR=n(YA,"A",{href:!0});var F7e=s(aR);nJe=r(F7e,"BloomConfig"),F7e.forEach(t),sJe=r(YA," (BLOOM model)"),YA.forEach(t),lJe=i(L),Kf=n(L,"LI",{});var KA=s(Kf);nne=n(KA,"STRONG",{});var T7e=s(nne);iJe=r(T7e,"camembert"),T7e.forEach(t),dJe=r(KA," \u2014 "),nR=n(KA,"A",{href:!0});var M7e=s(nR);cJe=r(M7e,"CamembertConfig"),M7e.forEach(t),fJe=r(KA," (CamemBERT model)"),KA.forEach(t),mJe=i(L),Zf=n(L,"LI",{});var ZA=s(Zf);sne=n(ZA,"STRONG",{});var E7e=s(sne);gJe=r(E7e,"canine"),E7e.forEach(t),hJe=r(ZA," \u2014 "),sR=n(ZA,"A",{href:!0});var C7e=s(sR);pJe=r(C7e,"CanineConfig"),C7e.forEach(t),_Je=r(ZA," (CANINE model)"),ZA.forEach(t),uJe=i(L),em=n(L,"LI",{});var e6=s(em);lne=n(e6,"STRONG",{});var w7e=s(lne);bJe=r(w7e,"clip"),w7e.forEach(t),vJe=r(e6," \u2014 "),lR=n(e6,"A",{href:!0});var A7e=s(lR);FJe=r(A7e,"CLIPConfig"),A7e.forEach(t),TJe=r(e6," (CLIP model)"),e6.forEach(t),MJe=i(L),om=n(L,"LI",{});var o6=s(om);ine=n(o6,"STRONG",{});var L7e=s(ine);EJe=r(L7e,"codegen"),L7e.forEach(t),CJe=r(o6," \u2014 "),iR=n(o6,"A",{href:!0});var y7e=s(iR);wJe=r(y7e,"CodeGenConfig"),y7e.forEach(t),AJe=r(o6," (CodeGen model)"),o6.forEach(t),LJe=i(L),rm=n(L,"LI",{});var r6=s(rm);dne=n(r6,"STRONG",{});var x7e=s(dne);yJe=r(x7e,"convbert"),x7e.forEach(t),xJe=r(r6," \u2014 "),dR=n(r6,"A",{href:!0});var $7e=s(dR);$Je=r($7e,"ConvBertConfig"),$7e.forEach(t),kJe=r(r6," (ConvBERT model)"),r6.forEach(t),SJe=i(L),tm=n(L,"LI",{});var t6=s(tm);cne=n(t6,"STRONG",{});var k7e=s(cne);RJe=r(k7e,"convnext"),k7e.forEach(t),PJe=r(t6," \u2014 "),cR=n(t6,"A",{href:!0});var S7e=s(cR);BJe=r(S7e,"ConvNextConfig"),S7e.forEach(t),IJe=r(t6," (ConvNeXT model)"),t6.forEach(t),NJe=i(L),am=n(L,"LI",{});var a6=s(am);fne=n(a6,"STRONG",{});var R7e=s(fne);qJe=r(R7e,"ctrl"),R7e.forEach(t),jJe=r(a6," \u2014 "),fR=n(a6,"A",{href:!0});var P7e=s(fR);DJe=r(P7e,"CTRLConfig"),P7e.forEach(t),GJe=r(a6," (CTRL model)"),a6.forEach(t),OJe=i(L),nm=n(L,"LI",{});var n6=s(nm);mne=n(n6,"STRONG",{});var B7e=s(mne);VJe=r(B7e,"cvt"),B7e.forEach(t),XJe=r(n6," \u2014 "),mR=n(n6,"A",{href:!0});var I7e=s(mR);zJe=r(I7e,"CvtConfig"),I7e.forEach(t),QJe=r(n6," (CvT model)"),n6.forEach(t),WJe=i(L),sm=n(L,"LI",{});var s6=s(sm);gne=n(s6,"STRONG",{});var N7e=s(gne);HJe=r(N7e,"data2vec-audio"),N7e.forEach(t),UJe=r(s6," \u2014 "),gR=n(s6,"A",{href:!0});var q7e=s(gR);JJe=r(q7e,"Data2VecAudioConfig"),q7e.forEach(t),YJe=r(s6," (Data2VecAudio model)"),s6.forEach(t),KJe=i(L),lm=n(L,"LI",{});var l6=s(lm);hne=n(l6,"STRONG",{});var j7e=s(hne);ZJe=r(j7e,"data2vec-text"),j7e.forEach(t),eYe=r(l6," \u2014 "),hR=n(l6,"A",{href:!0});var D7e=s(hR);oYe=r(D7e,"Data2VecTextConfig"),D7e.forEach(t),rYe=r(l6," (Data2VecText model)"),l6.forEach(t),tYe=i(L),im=n(L,"LI",{});var i6=s(im);pne=n(i6,"STRONG",{});var G7e=s(pne);aYe=r(G7e,"data2vec-vision"),G7e.forEach(t),nYe=r(i6," \u2014 "),pR=n(i6,"A",{href:!0});var O7e=s(pR);sYe=r(O7e,"Data2VecVisionConfig"),O7e.forEach(t),lYe=r(i6," (Data2VecVision model)"),i6.forEach(t),iYe=i(L),dm=n(L,"LI",{});var d6=s(dm);_ne=n(d6,"STRONG",{});var V7e=s(_ne);dYe=r(V7e,"deberta"),V7e.forEach(t),cYe=r(d6," \u2014 "),_R=n(d6,"A",{href:!0});var X7e=s(_R);fYe=r(X7e,"DebertaConfig"),X7e.forEach(t),mYe=r(d6," (DeBERTa model)"),d6.forEach(t),gYe=i(L),cm=n(L,"LI",{});var c6=s(cm);une=n(c6,"STRONG",{});var z7e=s(une);hYe=r(z7e,"deberta-v2"),z7e.forEach(t),pYe=r(c6," \u2014 "),uR=n(c6,"A",{href:!0});var Q7e=s(uR);_Ye=r(Q7e,"DebertaV2Config"),Q7e.forEach(t),uYe=r(c6," (DeBERTa-v2 model)"),c6.forEach(t),bYe=i(L),fm=n(L,"LI",{});var f6=s(fm);bne=n(f6,"STRONG",{});var sat=s(bne);vYe=r(sat,"decision_transformer"),sat.forEach(t),FYe=r(f6," \u2014 "),bR=n(f6,"A",{href:!0});var lat=s(bR);TYe=r(lat,"DecisionTransformerConfig"),lat.forEach(t),MYe=r(f6," (Decision Transformer model)"),f6.forEach(t),EYe=i(L),mm=n(L,"LI",{});var W7e=s(mm);vne=n(W7e,"STRONG",{});var iat=s(vne);CYe=r(iat,"deit"),iat.forEach(t),wYe=r(W7e," \u2014 "),vR=n(W7e,"A",{href:!0});var dat=s(vR);AYe=r(dat,"DeiTConfig"),dat.forEach(t),LYe=r(W7e," (DeiT model)"),W7e.forEach(t),yYe=i(L),gm=n(L,"LI",{});var H7e=s(gm);Fne=n(H7e,"STRONG",{});var cat=s(Fne);xYe=r(cat,"detr"),cat.forEach(t),$Ye=r(H7e," \u2014 "),FR=n(H7e,"A",{href:!0});var fat=s(FR);kYe=r(fat,"DetrConfig"),fat.forEach(t),SYe=r(H7e," (DETR model)"),H7e.forEach(t),RYe=i(L),hm=n(L,"LI",{});var U7e=s(hm);Tne=n(U7e,"STRONG",{});var mat=s(Tne);PYe=r(mat,"distilbert"),mat.forEach(t),BYe=r(U7e," \u2014 "),TR=n(U7e,"A",{href:!0});var gat=s(TR);IYe=r(gat,"DistilBertConfig"),gat.forEach(t),NYe=r(U7e," (DistilBERT model)"),U7e.forEach(t),qYe=i(L),pm=n(L,"LI",{});var J7e=s(pm);Mne=n(J7e,"STRONG",{});var hat=s(Mne);jYe=r(hat,"dpr"),hat.forEach(t),DYe=r(J7e," \u2014 "),MR=n(J7e,"A",{href:!0});var pat=s(MR);GYe=r(pat,"DPRConfig"),pat.forEach(t),OYe=r(J7e," (DPR model)"),J7e.forEach(t),VYe=i(L),_m=n(L,"LI",{});var Y7e=s(_m);Ene=n(Y7e,"STRONG",{});var _at=s(Ene);XYe=r(_at,"dpt"),_at.forEach(t),zYe=r(Y7e," \u2014 "),ER=n(Y7e,"A",{href:!0});var uat=s(ER);QYe=r(uat,"DPTConfig"),uat.forEach(t),WYe=r(Y7e," (DPT model)"),Y7e.forEach(t),HYe=i(L),um=n(L,"LI",{});var K7e=s(um);Cne=n(K7e,"STRONG",{});var bat=s(Cne);UYe=r(bat,"electra"),bat.forEach(t),JYe=r(K7e," \u2014 "),CR=n(K7e,"A",{href:!0});var vat=s(CR);YYe=r(vat,"ElectraConfig"),vat.forEach(t),KYe=r(K7e," (ELECTRA model)"),K7e.forEach(t),ZYe=i(L),bm=n(L,"LI",{});var Z7e=s(bm);wne=n(Z7e,"STRONG",{});var Fat=s(wne);eKe=r(Fat,"encoder-decoder"),Fat.forEach(t),oKe=r(Z7e," \u2014 "),wR=n(Z7e,"A",{href:!0});var Tat=s(wR);rKe=r(Tat,"EncoderDecoderConfig"),Tat.forEach(t),tKe=r(Z7e," (Encoder decoder model)"),Z7e.forEach(t),aKe=i(L),vm=n(L,"LI",{});var eLe=s(vm);Ane=n(eLe,"STRONG",{});var Mat=s(Ane);nKe=r(Mat,"flaubert"),Mat.forEach(t),sKe=r(eLe," \u2014 "),AR=n(eLe,"A",{href:!0});var Eat=s(AR);lKe=r(Eat,"FlaubertConfig"),Eat.forEach(t),iKe=r(eLe," (FlauBERT model)"),eLe.forEach(t),dKe=i(L),Fm=n(L,"LI",{});var oLe=s(Fm);Lne=n(oLe,"STRONG",{});var Cat=s(Lne);cKe=r(Cat,"flava"),Cat.forEach(t),fKe=r(oLe," \u2014 "),LR=n(oLe,"A",{href:!0});var wat=s(LR);mKe=r(wat,"FlavaConfig"),wat.forEach(t),gKe=r(oLe," (FLAVA model)"),oLe.forEach(t),hKe=i(L),Tm=n(L,"LI",{});var rLe=s(Tm);yne=n(rLe,"STRONG",{});var Aat=s(yne);pKe=r(Aat,"fnet"),Aat.forEach(t),_Ke=r(rLe," \u2014 "),yR=n(rLe,"A",{href:!0});var Lat=s(yR);uKe=r(Lat,"FNetConfig"),Lat.forEach(t),bKe=r(rLe," (FNet model)"),rLe.forEach(t),vKe=i(L),Mm=n(L,"LI",{});var tLe=s(Mm);xne=n(tLe,"STRONG",{});var yat=s(xne);FKe=r(yat,"fsmt"),yat.forEach(t),TKe=r(tLe," \u2014 "),xR=n(tLe,"A",{href:!0});var xat=s(xR);MKe=r(xat,"FSMTConfig"),xat.forEach(t),EKe=r(tLe," (FairSeq Machine-Translation model)"),tLe.forEach(t),CKe=i(L),Em=n(L,"LI",{});var aLe=s(Em);$ne=n(aLe,"STRONG",{});var $at=s($ne);wKe=r($at,"funnel"),$at.forEach(t),AKe=r(aLe," \u2014 "),$R=n(aLe,"A",{href:!0});var kat=s($R);LKe=r(kat,"FunnelConfig"),kat.forEach(t),yKe=r(aLe," (Funnel Transformer model)"),aLe.forEach(t),xKe=i(L),Cm=n(L,"LI",{});var nLe=s(Cm);kne=n(nLe,"STRONG",{});var Sat=s(kne);$Ke=r(Sat,"glpn"),Sat.forEach(t),kKe=r(nLe," \u2014 "),kR=n(nLe,"A",{href:!0});var Rat=s(kR);SKe=r(Rat,"GLPNConfig"),Rat.forEach(t),RKe=r(nLe," (GLPN model)"),nLe.forEach(t),PKe=i(L),wm=n(L,"LI",{});var sLe=s(wm);Sne=n(sLe,"STRONG",{});var Pat=s(Sne);BKe=r(Pat,"gpt2"),Pat.forEach(t),IKe=r(sLe," \u2014 "),SR=n(sLe,"A",{href:!0});var Bat=s(SR);NKe=r(Bat,"GPT2Config"),Bat.forEach(t),qKe=r(sLe," (OpenAI GPT-2 model)"),sLe.forEach(t),jKe=i(L),Am=n(L,"LI",{});var lLe=s(Am);Rne=n(lLe,"STRONG",{});var Iat=s(Rne);DKe=r(Iat,"gpt_neo"),Iat.forEach(t),GKe=r(lLe," \u2014 "),RR=n(lLe,"A",{href:!0});var Nat=s(RR);OKe=r(Nat,"GPTNeoConfig"),Nat.forEach(t),VKe=r(lLe," (GPT Neo model)"),lLe.forEach(t),XKe=i(L),Lm=n(L,"LI",{});var iLe=s(Lm);Pne=n(iLe,"STRONG",{});var qat=s(Pne);zKe=r(qat,"gpt_neox"),qat.forEach(t),QKe=r(iLe," \u2014 "),PR=n(iLe,"A",{href:!0});var jat=s(PR);WKe=r(jat,"GPTNeoXConfig"),jat.forEach(t),HKe=r(iLe," (GPT NeoX model)"),iLe.forEach(t),UKe=i(L),ym=n(L,"LI",{});var dLe=s(ym);Bne=n(dLe,"STRONG",{});var Dat=s(Bne);JKe=r(Dat,"gptj"),Dat.forEach(t),YKe=r(dLe," \u2014 "),BR=n(dLe,"A",{href:!0});var Gat=s(BR);KKe=r(Gat,"GPTJConfig"),Gat.forEach(t),ZKe=r(dLe," (GPT-J model)"),dLe.forEach(t),eZe=i(L),xm=n(L,"LI",{});var cLe=s(xm);Ine=n(cLe,"STRONG",{});var Oat=s(Ine);oZe=r(Oat,"groupvit"),Oat.forEach(t),rZe=r(cLe," \u2014 "),IR=n(cLe,"A",{href:!0});var Vat=s(IR);tZe=r(Vat,"GroupViTConfig"),Vat.forEach(t),aZe=r(cLe," (GroupViT model)"),cLe.forEach(t),nZe=i(L),$m=n(L,"LI",{});var fLe=s($m);Nne=n(fLe,"STRONG",{});var Xat=s(Nne);sZe=r(Xat,"hubert"),Xat.forEach(t),lZe=r(fLe," \u2014 "),NR=n(fLe,"A",{href:!0});var zat=s(NR);iZe=r(zat,"HubertConfig"),zat.forEach(t),dZe=r(fLe," (Hubert model)"),fLe.forEach(t),cZe=i(L),km=n(L,"LI",{});var mLe=s(km);qne=n(mLe,"STRONG",{});var Qat=s(qne);fZe=r(Qat,"ibert"),Qat.forEach(t),mZe=r(mLe," \u2014 "),qR=n(mLe,"A",{href:!0});var Wat=s(qR);gZe=r(Wat,"IBertConfig"),Wat.forEach(t),hZe=r(mLe," (I-BERT model)"),mLe.forEach(t),pZe=i(L),Sm=n(L,"LI",{});var gLe=s(Sm);jne=n(gLe,"STRONG",{});var Hat=s(jne);_Ze=r(Hat,"imagegpt"),Hat.forEach(t),uZe=r(gLe," \u2014 "),jR=n(gLe,"A",{href:!0});var Uat=s(jR);bZe=r(Uat,"ImageGPTConfig"),Uat.forEach(t),vZe=r(gLe," (ImageGPT model)"),gLe.forEach(t),FZe=i(L),Rm=n(L,"LI",{});var hLe=s(Rm);Dne=n(hLe,"STRONG",{});var Jat=s(Dne);TZe=r(Jat,"layoutlm"),Jat.forEach(t),MZe=r(hLe," \u2014 "),DR=n(hLe,"A",{href:!0});var Yat=s(DR);EZe=r(Yat,"LayoutLMConfig"),Yat.forEach(t),CZe=r(hLe," (LayoutLM model)"),hLe.forEach(t),wZe=i(L),Pm=n(L,"LI",{});var pLe=s(Pm);Gne=n(pLe,"STRONG",{});var Kat=s(Gne);AZe=r(Kat,"layoutlmv2"),Kat.forEach(t),LZe=r(pLe," \u2014 "),GR=n(pLe,"A",{href:!0});var Zat=s(GR);yZe=r(Zat,"LayoutLMv2Config"),Zat.forEach(t),xZe=r(pLe," (LayoutLMv2 model)"),pLe.forEach(t),$Ze=i(L),Bm=n(L,"LI",{});var _Le=s(Bm);One=n(_Le,"STRONG",{});var ent=s(One);kZe=r(ent,"layoutlmv3"),ent.forEach(t),SZe=r(_Le," \u2014 "),OR=n(_Le,"A",{href:!0});var ont=s(OR);RZe=r(ont,"LayoutLMv3Config"),ont.forEach(t),PZe=r(_Le," (LayoutLMv3 model)"),_Le.forEach(t),BZe=i(L),Im=n(L,"LI",{});var uLe=s(Im);Vne=n(uLe,"STRONG",{});var rnt=s(Vne);IZe=r(rnt,"led"),rnt.forEach(t),NZe=r(uLe," \u2014 "),VR=n(uLe,"A",{href:!0});var tnt=s(VR);qZe=r(tnt,"LEDConfig"),tnt.forEach(t),jZe=r(uLe," (LED model)"),uLe.forEach(t),DZe=i(L),Nm=n(L,"LI",{});var bLe=s(Nm);Xne=n(bLe,"STRONG",{});var ant=s(Xne);GZe=r(ant,"levit"),ant.forEach(t),OZe=r(bLe," \u2014 "),XR=n(bLe,"A",{href:!0});var nnt=s(XR);VZe=r(nnt,"LevitConfig"),nnt.forEach(t),XZe=r(bLe," (LeViT model)"),bLe.forEach(t),zZe=i(L),qm=n(L,"LI",{});var vLe=s(qm);zne=n(vLe,"STRONG",{});var snt=s(zne);QZe=r(snt,"longformer"),snt.forEach(t),WZe=r(vLe," \u2014 "),zR=n(vLe,"A",{href:!0});var lnt=s(zR);HZe=r(lnt,"LongformerConfig"),lnt.forEach(t),UZe=r(vLe," (Longformer model)"),vLe.forEach(t),JZe=i(L),jm=n(L,"LI",{});var FLe=s(jm);Qne=n(FLe,"STRONG",{});var int=s(Qne);YZe=r(int,"longt5"),int.forEach(t),KZe=r(FLe," \u2014 "),QR=n(FLe,"A",{href:!0});var dnt=s(QR);ZZe=r(dnt,"LongT5Config"),dnt.forEach(t),eeo=r(FLe," (LongT5 model)"),FLe.forEach(t),oeo=i(L),Dm=n(L,"LI",{});var TLe=s(Dm);Wne=n(TLe,"STRONG",{});var cnt=s(Wne);reo=r(cnt,"luke"),cnt.forEach(t),teo=r(TLe," \u2014 "),WR=n(TLe,"A",{href:!0});var fnt=s(WR);aeo=r(fnt,"LukeConfig"),fnt.forEach(t),neo=r(TLe," (LUKE model)"),TLe.forEach(t),seo=i(L),Gm=n(L,"LI",{});var MLe=s(Gm);Hne=n(MLe,"STRONG",{});var mnt=s(Hne);leo=r(mnt,"lxmert"),mnt.forEach(t),ieo=r(MLe," \u2014 "),HR=n(MLe,"A",{href:!0});var gnt=s(HR);deo=r(gnt,"LxmertConfig"),gnt.forEach(t),ceo=r(MLe," (LXMERT model)"),MLe.forEach(t),feo=i(L),Om=n(L,"LI",{});var ELe=s(Om);Une=n(ELe,"STRONG",{});var hnt=s(Une);meo=r(hnt,"m2m_100"),hnt.forEach(t),geo=r(ELe," \u2014 "),UR=n(ELe,"A",{href:!0});var pnt=s(UR);heo=r(pnt,"M2M100Config"),pnt.forEach(t),peo=r(ELe," (M2M100 model)"),ELe.forEach(t),_eo=i(L),Vm=n(L,"LI",{});var CLe=s(Vm);Jne=n(CLe,"STRONG",{});var _nt=s(Jne);ueo=r(_nt,"marian"),_nt.forEach(t),beo=r(CLe," \u2014 "),JR=n(CLe,"A",{href:!0});var unt=s(JR);veo=r(unt,"MarianConfig"),unt.forEach(t),Feo=r(CLe," (Marian model)"),CLe.forEach(t),Teo=i(L),Xm=n(L,"LI",{});var wLe=s(Xm);Yne=n(wLe,"STRONG",{});var bnt=s(Yne);Meo=r(bnt,"maskformer"),bnt.forEach(t),Eeo=r(wLe," \u2014 "),YR=n(wLe,"A",{href:!0});var vnt=s(YR);Ceo=r(vnt,"MaskFormerConfig"),vnt.forEach(t),weo=r(wLe," (MaskFormer model)"),wLe.forEach(t),Aeo=i(L),zm=n(L,"LI",{});var ALe=s(zm);Kne=n(ALe,"STRONG",{});var Fnt=s(Kne);Leo=r(Fnt,"mbart"),Fnt.forEach(t),yeo=r(ALe," \u2014 "),KR=n(ALe,"A",{href:!0});var Tnt=s(KR);xeo=r(Tnt,"MBartConfig"),Tnt.forEach(t),$eo=r(ALe," (mBART model)"),ALe.forEach(t),keo=i(L),Qm=n(L,"LI",{});var LLe=s(Qm);Zne=n(LLe,"STRONG",{});var Mnt=s(Zne);Seo=r(Mnt,"mctct"),Mnt.forEach(t),Reo=r(LLe," \u2014 "),ZR=n(LLe,"A",{href:!0});var Ent=s(ZR);Peo=r(Ent,"MCTCTConfig"),Ent.forEach(t),Beo=r(LLe," (M-CTC-T model)"),LLe.forEach(t),Ieo=i(L),Wm=n(L,"LI",{});var yLe=s(Wm);ese=n(yLe,"STRONG",{});var Cnt=s(ese);Neo=r(Cnt,"megatron-bert"),Cnt.forEach(t),qeo=r(yLe," \u2014 "),eP=n(yLe,"A",{href:!0});var wnt=s(eP);jeo=r(wnt,"MegatronBertConfig"),wnt.forEach(t),Deo=r(yLe," (Megatron-BERT model)"),yLe.forEach(t),Geo=i(L),Hm=n(L,"LI",{});var xLe=s(Hm);ose=n(xLe,"STRONG",{});var Ant=s(ose);Oeo=r(Ant,"mobilebert"),Ant.forEach(t),Veo=r(xLe," \u2014 "),oP=n(xLe,"A",{href:!0});var Lnt=s(oP);Xeo=r(Lnt,"MobileBertConfig"),Lnt.forEach(t),zeo=r(xLe," (MobileBERT model)"),xLe.forEach(t),Qeo=i(L),Um=n(L,"LI",{});var $Le=s(Um);rse=n($Le,"STRONG",{});var ynt=s(rse);Weo=r(ynt,"mobilevit"),ynt.forEach(t),Heo=r($Le," \u2014 "),rP=n($Le,"A",{href:!0});var xnt=s(rP);Ueo=r(xnt,"MobileViTConfig"),xnt.forEach(t),Jeo=r($Le," (MobileViT model)"),$Le.forEach(t),Yeo=i(L),Jm=n(L,"LI",{});var kLe=s(Jm);tse=n(kLe,"STRONG",{});var $nt=s(tse);Keo=r($nt,"mpnet"),$nt.forEach(t),Zeo=r(kLe," \u2014 "),tP=n(kLe,"A",{href:!0});var knt=s(tP);eoo=r(knt,"MPNetConfig"),knt.forEach(t),ooo=r(kLe," (MPNet model)"),kLe.forEach(t),roo=i(L),Ym=n(L,"LI",{});var SLe=s(Ym);ase=n(SLe,"STRONG",{});var Snt=s(ase);too=r(Snt,"mt5"),Snt.forEach(t),aoo=r(SLe," \u2014 "),aP=n(SLe,"A",{href:!0});var Rnt=s(aP);noo=r(Rnt,"MT5Config"),Rnt.forEach(t),soo=r(SLe," (MT5 model)"),SLe.forEach(t),loo=i(L),Km=n(L,"LI",{});var RLe=s(Km);nse=n(RLe,"STRONG",{});var Pnt=s(nse);ioo=r(Pnt,"mvp"),Pnt.forEach(t),doo=r(RLe," \u2014 "),nP=n(RLe,"A",{href:!0});var Bnt=s(nP);coo=r(Bnt,"MvpConfig"),Bnt.forEach(t),foo=r(RLe," (MVP model)"),RLe.forEach(t),moo=i(L),Zm=n(L,"LI",{});var PLe=s(Zm);sse=n(PLe,"STRONG",{});var Int=s(sse);goo=r(Int,"nezha"),Int.forEach(t),hoo=r(PLe," \u2014 "),sP=n(PLe,"A",{href:!0});var Nnt=s(sP);poo=r(Nnt,"NezhaConfig"),Nnt.forEach(t),_oo=r(PLe," (Nezha model)"),PLe.forEach(t),uoo=i(L),eg=n(L,"LI",{});var BLe=s(eg);lse=n(BLe,"STRONG",{});var qnt=s(lse);boo=r(qnt,"nystromformer"),qnt.forEach(t),voo=r(BLe," \u2014 "),lP=n(BLe,"A",{href:!0});var jnt=s(lP);Foo=r(jnt,"NystromformerConfig"),jnt.forEach(t),Too=r(BLe," (Nystr\xF6mformer model)"),BLe.forEach(t),Moo=i(L),og=n(L,"LI",{});var ILe=s(og);ise=n(ILe,"STRONG",{});var Dnt=s(ise);Eoo=r(Dnt,"openai-gpt"),Dnt.forEach(t),Coo=r(ILe," \u2014 "),iP=n(ILe,"A",{href:!0});var Gnt=s(iP);woo=r(Gnt,"OpenAIGPTConfig"),Gnt.forEach(t),Aoo=r(ILe," (OpenAI GPT model)"),ILe.forEach(t),Loo=i(L),rg=n(L,"LI",{});var NLe=s(rg);dse=n(NLe,"STRONG",{});var Ont=s(dse);yoo=r(Ont,"opt"),Ont.forEach(t),xoo=r(NLe," \u2014 "),dP=n(NLe,"A",{href:!0});var Vnt=s(dP);$oo=r(Vnt,"OPTConfig"),Vnt.forEach(t),koo=r(NLe," (OPT model)"),NLe.forEach(t),Soo=i(L),tg=n(L,"LI",{});var qLe=s(tg);cse=n(qLe,"STRONG",{});var Xnt=s(cse);Roo=r(Xnt,"pegasus"),Xnt.forEach(t),Poo=r(qLe," \u2014 "),cP=n(qLe,"A",{href:!0});var znt=s(cP);Boo=r(znt,"PegasusConfig"),znt.forEach(t),Ioo=r(qLe," (Pegasus model)"),qLe.forEach(t),Noo=i(L),ag=n(L,"LI",{});var jLe=s(ag);fse=n(jLe,"STRONG",{});var Qnt=s(fse);qoo=r(Qnt,"perceiver"),Qnt.forEach(t),joo=r(jLe," \u2014 "),fP=n(jLe,"A",{href:!0});var Wnt=s(fP);Doo=r(Wnt,"PerceiverConfig"),Wnt.forEach(t),Goo=r(jLe," (Perceiver model)"),jLe.forEach(t),Ooo=i(L),ng=n(L,"LI",{});var DLe=s(ng);mse=n(DLe,"STRONG",{});var Hnt=s(mse);Voo=r(Hnt,"plbart"),Hnt.forEach(t),Xoo=r(DLe," \u2014 "),mP=n(DLe,"A",{href:!0});var Unt=s(mP);zoo=r(Unt,"PLBartConfig"),Unt.forEach(t),Qoo=r(DLe," (PLBart model)"),DLe.forEach(t),Woo=i(L),sg=n(L,"LI",{});var GLe=s(sg);gse=n(GLe,"STRONG",{});var Jnt=s(gse);Hoo=r(Jnt,"poolformer"),Jnt.forEach(t),Uoo=r(GLe," \u2014 "),gP=n(GLe,"A",{href:!0});var Ynt=s(gP);Joo=r(Ynt,"PoolFormerConfig"),Ynt.forEach(t),Yoo=r(GLe," (PoolFormer model)"),GLe.forEach(t),Koo=i(L),lg=n(L,"LI",{});var OLe=s(lg);hse=n(OLe,"STRONG",{});var Knt=s(hse);Zoo=r(Knt,"prophetnet"),Knt.forEach(t),ero=r(OLe," \u2014 "),hP=n(OLe,"A",{href:!0});var Znt=s(hP);oro=r(Znt,"ProphetNetConfig"),Znt.forEach(t),rro=r(OLe," (ProphetNet model)"),OLe.forEach(t),tro=i(L),ig=n(L,"LI",{});var VLe=s(ig);pse=n(VLe,"STRONG",{});var est=s(pse);aro=r(est,"qdqbert"),est.forEach(t),nro=r(VLe," \u2014 "),pP=n(VLe,"A",{href:!0});var ost=s(pP);sro=r(ost,"QDQBertConfig"),ost.forEach(t),lro=r(VLe," (QDQBert model)"),VLe.forEach(t),iro=i(L),dg=n(L,"LI",{});var XLe=s(dg);_se=n(XLe,"STRONG",{});var rst=s(_se);dro=r(rst,"rag"),rst.forEach(t),cro=r(XLe," \u2014 "),_P=n(XLe,"A",{href:!0});var tst=s(_P);fro=r(tst,"RagConfig"),tst.forEach(t),mro=r(XLe," (RAG model)"),XLe.forEach(t),gro=i(L),cg=n(L,"LI",{});var zLe=s(cg);use=n(zLe,"STRONG",{});var ast=s(use);hro=r(ast,"realm"),ast.forEach(t),pro=r(zLe," \u2014 "),uP=n(zLe,"A",{href:!0});var nst=s(uP);_ro=r(nst,"RealmConfig"),nst.forEach(t),uro=r(zLe," (REALM model)"),zLe.forEach(t),bro=i(L),fg=n(L,"LI",{});var QLe=s(fg);bse=n(QLe,"STRONG",{});var sst=s(bse);vro=r(sst,"reformer"),sst.forEach(t),Fro=r(QLe," \u2014 "),bP=n(QLe,"A",{href:!0});var lst=s(bP);Tro=r(lst,"ReformerConfig"),lst.forEach(t),Mro=r(QLe," (Reformer model)"),QLe.forEach(t),Ero=i(L),mg=n(L,"LI",{});var WLe=s(mg);vse=n(WLe,"STRONG",{});var ist=s(vse);Cro=r(ist,"regnet"),ist.forEach(t),wro=r(WLe," \u2014 "),vP=n(WLe,"A",{href:!0});var dst=s(vP);Aro=r(dst,"RegNetConfig"),dst.forEach(t),Lro=r(WLe," (RegNet model)"),WLe.forEach(t),yro=i(L),gg=n(L,"LI",{});var HLe=s(gg);Fse=n(HLe,"STRONG",{});var cst=s(Fse);xro=r(cst,"rembert"),cst.forEach(t),$ro=r(HLe," \u2014 "),FP=n(HLe,"A",{href:!0});var fst=s(FP);kro=r(fst,"RemBertConfig"),fst.forEach(t),Sro=r(HLe," (RemBERT model)"),HLe.forEach(t),Rro=i(L),hg=n(L,"LI",{});var ULe=s(hg);Tse=n(ULe,"STRONG",{});var mst=s(Tse);Pro=r(mst,"resnet"),mst.forEach(t),Bro=r(ULe," \u2014 "),TP=n(ULe,"A",{href:!0});var gst=s(TP);Iro=r(gst,"ResNetConfig"),gst.forEach(t),Nro=r(ULe," (ResNet model)"),ULe.forEach(t),qro=i(L),pg=n(L,"LI",{});var JLe=s(pg);Mse=n(JLe,"STRONG",{});var hst=s(Mse);jro=r(hst,"retribert"),hst.forEach(t),Dro=r(JLe," \u2014 "),MP=n(JLe,"A",{href:!0});var pst=s(MP);Gro=r(pst,"RetriBertConfig"),pst.forEach(t),Oro=r(JLe," (RetriBERT model)"),JLe.forEach(t),Vro=i(L),_g=n(L,"LI",{});var YLe=s(_g);Ese=n(YLe,"STRONG",{});var _st=s(Ese);Xro=r(_st,"roberta"),_st.forEach(t),zro=r(YLe," \u2014 "),EP=n(YLe,"A",{href:!0});var ust=s(EP);Qro=r(ust,"RobertaConfig"),ust.forEach(t),Wro=r(YLe," (RoBERTa model)"),YLe.forEach(t),Hro=i(L),ug=n(L,"LI",{});var KLe=s(ug);Cse=n(KLe,"STRONG",{});var bst=s(Cse);Uro=r(bst,"roformer"),bst.forEach(t),Jro=r(KLe," \u2014 "),CP=n(KLe,"A",{href:!0});var vst=s(CP);Yro=r(vst,"RoFormerConfig"),vst.forEach(t),Kro=r(KLe," (RoFormer model)"),KLe.forEach(t),Zro=i(L),bg=n(L,"LI",{});var ZLe=s(bg);wse=n(ZLe,"STRONG",{});var Fst=s(wse);eto=r(Fst,"segformer"),Fst.forEach(t),oto=r(ZLe," \u2014 "),wP=n(ZLe,"A",{href:!0});var Tst=s(wP);rto=r(Tst,"SegformerConfig"),Tst.forEach(t),tto=r(ZLe," (SegFormer model)"),ZLe.forEach(t),ato=i(L),vg=n(L,"LI",{});var eye=s(vg);Ase=n(eye,"STRONG",{});var Mst=s(Ase);nto=r(Mst,"sew"),Mst.forEach(t),sto=r(eye," \u2014 "),AP=n(eye,"A",{href:!0});var Est=s(AP);lto=r(Est,"SEWConfig"),Est.forEach(t),ito=r(eye," (SEW model)"),eye.forEach(t),dto=i(L),Fg=n(L,"LI",{});var oye=s(Fg);Lse=n(oye,"STRONG",{});var Cst=s(Lse);cto=r(Cst,"sew-d"),Cst.forEach(t),fto=r(oye," \u2014 "),LP=n(oye,"A",{href:!0});var wst=s(LP);mto=r(wst,"SEWDConfig"),wst.forEach(t),gto=r(oye," (SEW-D model)"),oye.forEach(t),hto=i(L),Tg=n(L,"LI",{});var rye=s(Tg);yse=n(rye,"STRONG",{});var Ast=s(yse);pto=r(Ast,"speech-encoder-decoder"),Ast.forEach(t),_to=r(rye," \u2014 "),yP=n(rye,"A",{href:!0});var Lst=s(yP);uto=r(Lst,"SpeechEncoderDecoderConfig"),Lst.forEach(t),bto=r(rye," (Speech Encoder decoder model)"),rye.forEach(t),vto=i(L),Mg=n(L,"LI",{});var tye=s(Mg);xse=n(tye,"STRONG",{});var yst=s(xse);Fto=r(yst,"speech_to_text"),yst.forEach(t),Tto=r(tye," \u2014 "),xP=n(tye,"A",{href:!0});var xst=s(xP);Mto=r(xst,"Speech2TextConfig"),xst.forEach(t),Eto=r(tye," (Speech2Text model)"),tye.forEach(t),Cto=i(L),Eg=n(L,"LI",{});var aye=s(Eg);$se=n(aye,"STRONG",{});var $st=s($se);wto=r($st,"speech_to_text_2"),$st.forEach(t),Ato=r(aye," \u2014 "),$P=n(aye,"A",{href:!0});var kst=s($P);Lto=r(kst,"Speech2Text2Config"),kst.forEach(t),yto=r(aye," (Speech2Text2 model)"),aye.forEach(t),xto=i(L),Cg=n(L,"LI",{});var nye=s(Cg);kse=n(nye,"STRONG",{});var Sst=s(kse);$to=r(Sst,"splinter"),Sst.forEach(t),kto=r(nye," \u2014 "),kP=n(nye,"A",{href:!0});var Rst=s(kP);Sto=r(Rst,"SplinterConfig"),Rst.forEach(t),Rto=r(nye," (Splinter model)"),nye.forEach(t),Pto=i(L),wg=n(L,"LI",{});var sye=s(wg);Sse=n(sye,"STRONG",{});var Pst=s(Sse);Bto=r(Pst,"squeezebert"),Pst.forEach(t),Ito=r(sye," \u2014 "),SP=n(sye,"A",{href:!0});var Bst=s(SP);Nto=r(Bst,"SqueezeBertConfig"),Bst.forEach(t),qto=r(sye," (SqueezeBERT model)"),sye.forEach(t),jto=i(L),Ag=n(L,"LI",{});var lye=s(Ag);Rse=n(lye,"STRONG",{});var Ist=s(Rse);Dto=r(Ist,"swin"),Ist.forEach(t),Gto=r(lye," \u2014 "),RP=n(lye,"A",{href:!0});var Nst=s(RP);Oto=r(Nst,"SwinConfig"),Nst.forEach(t),Vto=r(lye," (Swin Transformer model)"),lye.forEach(t),Xto=i(L),Lg=n(L,"LI",{});var iye=s(Lg);Pse=n(iye,"STRONG",{});var qst=s(Pse);zto=r(qst,"t5"),qst.forEach(t),Qto=r(iye," \u2014 "),PP=n(iye,"A",{href:!0});var jst=s(PP);Wto=r(jst,"T5Config"),jst.forEach(t),Hto=r(iye," (T5 model)"),iye.forEach(t),Uto=i(L),yg=n(L,"LI",{});var dye=s(yg);Bse=n(dye,"STRONG",{});var Dst=s(Bse);Jto=r(Dst,"tapas"),Dst.forEach(t),Yto=r(dye," \u2014 "),BP=n(dye,"A",{href:!0});var Gst=s(BP);Kto=r(Gst,"TapasConfig"),Gst.forEach(t),Zto=r(dye," (TAPAS model)"),dye.forEach(t),eao=i(L),xg=n(L,"LI",{});var cye=s(xg);Ise=n(cye,"STRONG",{});var Ost=s(Ise);oao=r(Ost,"trajectory_transformer"),Ost.forEach(t),rao=r(cye," \u2014 "),IP=n(cye,"A",{href:!0});var Vst=s(IP);tao=r(Vst,"TrajectoryTransformerConfig"),Vst.forEach(t),aao=r(cye," (Trajectory Transformer model)"),cye.forEach(t),nao=i(L),$g=n(L,"LI",{});var fye=s($g);Nse=n(fye,"STRONG",{});var Xst=s(Nse);sao=r(Xst,"transfo-xl"),Xst.forEach(t),lao=r(fye," \u2014 "),NP=n(fye,"A",{href:!0});var zst=s(NP);iao=r(zst,"TransfoXLConfig"),zst.forEach(t),dao=r(fye," (Transformer-XL model)"),fye.forEach(t),cao=i(L),kg=n(L,"LI",{});var mye=s(kg);qse=n(mye,"STRONG",{});var Qst=s(qse);fao=r(Qst,"trocr"),Qst.forEach(t),mao=r(mye," \u2014 "),qP=n(mye,"A",{href:!0});var Wst=s(qP);gao=r(Wst,"TrOCRConfig"),Wst.forEach(t),hao=r(mye," (TrOCR model)"),mye.forEach(t),pao=i(L),Sg=n(L,"LI",{});var gye=s(Sg);jse=n(gye,"STRONG",{});var Hst=s(jse);_ao=r(Hst,"unispeech"),Hst.forEach(t),uao=r(gye," \u2014 "),jP=n(gye,"A",{href:!0});var Ust=s(jP);bao=r(Ust,"UniSpeechConfig"),Ust.forEach(t),vao=r(gye," (UniSpeech model)"),gye.forEach(t),Fao=i(L),Rg=n(L,"LI",{});var hye=s(Rg);Dse=n(hye,"STRONG",{});var Jst=s(Dse);Tao=r(Jst,"unispeech-sat"),Jst.forEach(t),Mao=r(hye," \u2014 "),DP=n(hye,"A",{href:!0});var Yst=s(DP);Eao=r(Yst,"UniSpeechSatConfig"),Yst.forEach(t),Cao=r(hye," (UniSpeechSat model)"),hye.forEach(t),wao=i(L),Pg=n(L,"LI",{});var pye=s(Pg);Gse=n(pye,"STRONG",{});var Kst=s(Gse);Aao=r(Kst,"van"),Kst.forEach(t),Lao=r(pye," \u2014 "),GP=n(pye,"A",{href:!0});var Zst=s(GP);yao=r(Zst,"VanConfig"),Zst.forEach(t),xao=r(pye," (VAN model)"),pye.forEach(t),$ao=i(L),Bg=n(L,"LI",{});var _ye=s(Bg);Ose=n(_ye,"STRONG",{});var elt=s(Ose);kao=r(elt,"vilt"),elt.forEach(t),Sao=r(_ye," \u2014 "),OP=n(_ye,"A",{href:!0});var olt=s(OP);Rao=r(olt,"ViltConfig"),olt.forEach(t),Pao=r(_ye," (ViLT model)"),_ye.forEach(t),Bao=i(L),Ig=n(L,"LI",{});var uye=s(Ig);Vse=n(uye,"STRONG",{});var rlt=s(Vse);Iao=r(rlt,"vision-encoder-decoder"),rlt.forEach(t),Nao=r(uye," \u2014 "),VP=n(uye,"A",{href:!0});var tlt=s(VP);qao=r(tlt,"VisionEncoderDecoderConfig"),tlt.forEach(t),jao=r(uye," (Vision Encoder decoder model)"),uye.forEach(t),Dao=i(L),Ng=n(L,"LI",{});var bye=s(Ng);Xse=n(bye,"STRONG",{});var alt=s(Xse);Gao=r(alt,"vision-text-dual-encoder"),alt.forEach(t),Oao=r(bye," \u2014 "),XP=n(bye,"A",{href:!0});var nlt=s(XP);Vao=r(nlt,"VisionTextDualEncoderConfig"),nlt.forEach(t),Xao=r(bye," (VisionTextDualEncoder model)"),bye.forEach(t),zao=i(L),qg=n(L,"LI",{});var vye=s(qg);zse=n(vye,"STRONG",{});var slt=s(zse);Qao=r(slt,"visual_bert"),slt.forEach(t),Wao=r(vye," \u2014 "),zP=n(vye,"A",{href:!0});var llt=s(zP);Hao=r(llt,"VisualBertConfig"),llt.forEach(t),Uao=r(vye," (VisualBERT model)"),vye.forEach(t),Jao=i(L),jg=n(L,"LI",{});var Fye=s(jg);Qse=n(Fye,"STRONG",{});var ilt=s(Qse);Yao=r(ilt,"vit"),ilt.forEach(t),Kao=r(Fye," \u2014 "),QP=n(Fye,"A",{href:!0});var dlt=s(QP);Zao=r(dlt,"ViTConfig"),dlt.forEach(t),eno=r(Fye," (ViT model)"),Fye.forEach(t),ono=i(L),Dg=n(L,"LI",{});var Tye=s(Dg);Wse=n(Tye,"STRONG",{});var clt=s(Wse);rno=r(clt,"vit_mae"),clt.forEach(t),tno=r(Tye," \u2014 "),WP=n(Tye,"A",{href:!0});var flt=s(WP);ano=r(flt,"ViTMAEConfig"),flt.forEach(t),nno=r(Tye," (ViTMAE model)"),Tye.forEach(t),sno=i(L),Gg=n(L,"LI",{});var Mye=s(Gg);Hse=n(Mye,"STRONG",{});var mlt=s(Hse);lno=r(mlt,"wav2vec2"),mlt.forEach(t),ino=r(Mye," \u2014 "),HP=n(Mye,"A",{href:!0});var glt=s(HP);dno=r(glt,"Wav2Vec2Config"),glt.forEach(t),cno=r(Mye," (Wav2Vec2 model)"),Mye.forEach(t),fno=i(L),Og=n(L,"LI",{});var Eye=s(Og);Use=n(Eye,"STRONG",{});var hlt=s(Use);mno=r(hlt,"wav2vec2-conformer"),hlt.forEach(t),gno=r(Eye," \u2014 "),UP=n(Eye,"A",{href:!0});var plt=s(UP);hno=r(plt,"Wav2Vec2ConformerConfig"),plt.forEach(t),pno=r(Eye," (Wav2Vec2-Conformer model)"),Eye.forEach(t),_no=i(L),Vg=n(L,"LI",{});var Cye=s(Vg);Jse=n(Cye,"STRONG",{});var _lt=s(Jse);uno=r(_lt,"wavlm"),_lt.forEach(t),bno=r(Cye," \u2014 "),JP=n(Cye,"A",{href:!0});var ult=s(JP);vno=r(ult,"WavLMConfig"),ult.forEach(t),Fno=r(Cye," (WavLM model)"),Cye.forEach(t),Tno=i(L),Xg=n(L,"LI",{});var wye=s(Xg);Yse=n(wye,"STRONG",{});var blt=s(Yse);Mno=r(blt,"xglm"),blt.forEach(t),Eno=r(wye," \u2014 "),YP=n(wye,"A",{href:!0});var vlt=s(YP);Cno=r(vlt,"XGLMConfig"),vlt.forEach(t),wno=r(wye," (XGLM model)"),wye.forEach(t),Ano=i(L),zg=n(L,"LI",{});var Aye=s(zg);Kse=n(Aye,"STRONG",{});var Flt=s(Kse);Lno=r(Flt,"xlm"),Flt.forEach(t),yno=r(Aye," \u2014 "),KP=n(Aye,"A",{href:!0});var Tlt=s(KP);xno=r(Tlt,"XLMConfig"),Tlt.forEach(t),$no=r(Aye," (XLM model)"),Aye.forEach(t),kno=i(L),Qg=n(L,"LI",{});var Lye=s(Qg);Zse=n(Lye,"STRONG",{});var Mlt=s(Zse);Sno=r(Mlt,"xlm-prophetnet"),Mlt.forEach(t),Rno=r(Lye," \u2014 "),ZP=n(Lye,"A",{href:!0});var Elt=s(ZP);Pno=r(Elt,"XLMProphetNetConfig"),Elt.forEach(t),Bno=r(Lye," (XLM-ProphetNet model)"),Lye.forEach(t),Ino=i(L),Wg=n(L,"LI",{});var yye=s(Wg);ele=n(yye,"STRONG",{});var Clt=s(ele);Nno=r(Clt,"xlm-roberta"),Clt.forEach(t),qno=r(yye," \u2014 "),eB=n(yye,"A",{href:!0});var wlt=s(eB);jno=r(wlt,"XLMRobertaConfig"),wlt.forEach(t),Dno=r(yye," (XLM-RoBERTa model)"),yye.forEach(t),Gno=i(L),Hg=n(L,"LI",{});var xye=s(Hg);ole=n(xye,"STRONG",{});var Alt=s(ole);Ono=r(Alt,"xlm-roberta-xl"),Alt.forEach(t),Vno=r(xye," \u2014 "),oB=n(xye,"A",{href:!0});var Llt=s(oB);Xno=r(Llt,"XLMRobertaXLConfig"),Llt.forEach(t),zno=r(xye," (XLM-RoBERTa-XL model)"),xye.forEach(t),Qno=i(L),Ug=n(L,"LI",{});var $ye=s(Ug);rle=n($ye,"STRONG",{});var ylt=s(rle);Wno=r(ylt,"xlnet"),ylt.forEach(t),Hno=r($ye," \u2014 "),rB=n($ye,"A",{href:!0});var xlt=s(rB);Uno=r(xlt,"XLNetConfig"),xlt.forEach(t),Jno=r($ye," (XLNet model)"),$ye.forEach(t),Yno=i(L),Jg=n(L,"LI",{});var kye=s(Jg);tle=n(kye,"STRONG",{});var $lt=s(tle);Kno=r($lt,"yolos"),$lt.forEach(t),Zno=r(kye," \u2014 "),tB=n(kye,"A",{href:!0});var klt=s(tB);eso=r(klt,"YolosConfig"),klt.forEach(t),oso=r(kye," (YOLOS model)"),kye.forEach(t),rso=i(L),Yg=n(L,"LI",{});var Sye=s(Yg);ale=n(Sye,"STRONG",{});var Slt=s(ale);tso=r(Slt,"yoso"),Slt.forEach(t),aso=r(Sye," \u2014 "),aB=n(Sye,"A",{href:!0});var Rlt=s(aB);nso=r(Rlt,"YosoConfig"),Rlt.forEach(t),sso=r(Sye," (YOSO model)"),Sye.forEach(t),L.forEach(t),lso=i(st),T(Kg.$$.fragment,st),st.forEach(t),iso=i(nt),Zg=n(nt,"DIV",{class:!0});var yQe=s(Zg);T(uL.$$.fragment,yQe),dso=i(yQe),nle=n(yQe,"P",{});var Plt=s(nle);cso=r(Plt,"Register a new configuration for this class."),Plt.forEach(t),yQe.forEach(t),nt.forEach(t),xXe=i(f),qi=n(f,"H2",{class:!0});var xQe=s(qi);eh=n(xQe,"A",{id:!0,class:!0,href:!0});var Blt=s(eh);sle=n(Blt,"SPAN",{});var Ilt=s(sle);T(bL.$$.fragment,Ilt),Ilt.forEach(t),Blt.forEach(t),fso=i(xQe),lle=n(xQe,"SPAN",{});var Nlt=s(lle);mso=r(Nlt,"AutoTokenizer"),Nlt.forEach(t),xQe.forEach(t),$Xe=i(f),yo=n(f,"DIV",{class:!0});var Zs=s(yo);T(vL.$$.fragment,Zs),gso=i(Zs),FL=n(Zs,"P",{});var $Qe=s(FL);hso=r($Qe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nB=n($Qe,"A",{href:!0});var qlt=s(nB);pso=r(qlt,"AutoTokenizer.from_pretrained()"),qlt.forEach(t),_so=r($Qe," class method."),$Qe.forEach(t),uso=i(Zs),TL=n(Zs,"P",{});var kQe=s(TL);bso=r(kQe,"This class cannot be instantiated directly using "),ile=n(kQe,"CODE",{});var jlt=s(ile);vso=r(jlt,"__init__()"),jlt.forEach(t),Fso=r(kQe," (throws an error)."),kQe.forEach(t),Tso=i(Zs),xr=n(Zs,"DIV",{class:!0});var el=s(xr);T(ML.$$.fragment,el),Mso=i(el),dle=n(el,"P",{});var Dlt=s(dle);Eso=r(Dlt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Dlt.forEach(t),Cso=i(el),Pa=n(el,"P",{});var m6=s(Pa);wso=r(m6,"The tokenizer class to instantiate is selected based on the "),cle=n(m6,"CODE",{});var Glt=s(cle);Aso=r(Glt,"model_type"),Glt.forEach(t),Lso=r(m6,` property of the config object (either
passed as an argument or loaded from `),fle=n(m6,"CODE",{});var Olt=s(fle);yso=r(Olt,"pretrained_model_name_or_path"),Olt.forEach(t),xso=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mle=n(m6,"CODE",{});var Vlt=s(mle);$so=r(Vlt,"pretrained_model_name_or_path"),Vlt.forEach(t),kso=r(m6,":"),m6.forEach(t),Sso=i(el),k=n(el,"UL",{});var S=s(k);jn=n(S,"LI",{});var yk=s(jn);gle=n(yk,"STRONG",{});var Xlt=s(gle);Rso=r(Xlt,"albert"),Xlt.forEach(t),Pso=r(yk," \u2014 "),sB=n(yk,"A",{href:!0});var zlt=s(sB);Bso=r(zlt,"AlbertTokenizer"),zlt.forEach(t),Iso=r(yk," or "),lB=n(yk,"A",{href:!0});var Qlt=s(lB);Nso=r(Qlt,"AlbertTokenizerFast"),Qlt.forEach(t),qso=r(yk," (ALBERT model)"),yk.forEach(t),jso=i(S),Dn=n(S,"LI",{});var xk=s(Dn);hle=n(xk,"STRONG",{});var Wlt=s(hle);Dso=r(Wlt,"bart"),Wlt.forEach(t),Gso=r(xk," \u2014 "),iB=n(xk,"A",{href:!0});var Hlt=s(iB);Oso=r(Hlt,"BartTokenizer"),Hlt.forEach(t),Vso=r(xk," or "),dB=n(xk,"A",{href:!0});var Ult=s(dB);Xso=r(Ult,"BartTokenizerFast"),Ult.forEach(t),zso=r(xk," (BART model)"),xk.forEach(t),Qso=i(S),Gn=n(S,"LI",{});var $k=s(Gn);ple=n($k,"STRONG",{});var Jlt=s(ple);Wso=r(Jlt,"barthez"),Jlt.forEach(t),Hso=r($k," \u2014 "),cB=n($k,"A",{href:!0});var Ylt=s(cB);Uso=r(Ylt,"BarthezTokenizer"),Ylt.forEach(t),Jso=r($k," or "),fB=n($k,"A",{href:!0});var Klt=s(fB);Yso=r(Klt,"BarthezTokenizerFast"),Klt.forEach(t),Kso=r($k," (BARThez model)"),$k.forEach(t),Zso=i(S),oh=n(S,"LI",{});var Rye=s(oh);_le=n(Rye,"STRONG",{});var Zlt=s(_le);elo=r(Zlt,"bartpho"),Zlt.forEach(t),olo=r(Rye," \u2014 "),mB=n(Rye,"A",{href:!0});var eit=s(mB);rlo=r(eit,"BartphoTokenizer"),eit.forEach(t),tlo=r(Rye," (BARTpho model)"),Rye.forEach(t),alo=i(S),On=n(S,"LI",{});var kk=s(On);ule=n(kk,"STRONG",{});var oit=s(ule);nlo=r(oit,"bert"),oit.forEach(t),slo=r(kk," \u2014 "),gB=n(kk,"A",{href:!0});var rit=s(gB);llo=r(rit,"BertTokenizer"),rit.forEach(t),ilo=r(kk," or "),hB=n(kk,"A",{href:!0});var tit=s(hB);dlo=r(tit,"BertTokenizerFast"),tit.forEach(t),clo=r(kk," (BERT model)"),kk.forEach(t),flo=i(S),rh=n(S,"LI",{});var Pye=s(rh);ble=n(Pye,"STRONG",{});var ait=s(ble);mlo=r(ait,"bert-generation"),ait.forEach(t),glo=r(Pye," \u2014 "),pB=n(Pye,"A",{href:!0});var nit=s(pB);hlo=r(nit,"BertGenerationTokenizer"),nit.forEach(t),plo=r(Pye," (Bert Generation model)"),Pye.forEach(t),_lo=i(S),th=n(S,"LI",{});var Bye=s(th);vle=n(Bye,"STRONG",{});var sit=s(vle);ulo=r(sit,"bert-japanese"),sit.forEach(t),blo=r(Bye," \u2014 "),_B=n(Bye,"A",{href:!0});var lit=s(_B);vlo=r(lit,"BertJapaneseTokenizer"),lit.forEach(t),Flo=r(Bye," (BertJapanese model)"),Bye.forEach(t),Tlo=i(S),ah=n(S,"LI",{});var Iye=s(ah);Fle=n(Iye,"STRONG",{});var iit=s(Fle);Mlo=r(iit,"bertweet"),iit.forEach(t),Elo=r(Iye," \u2014 "),uB=n(Iye,"A",{href:!0});var dit=s(uB);Clo=r(dit,"BertweetTokenizer"),dit.forEach(t),wlo=r(Iye," (BERTweet model)"),Iye.forEach(t),Alo=i(S),Vn=n(S,"LI",{});var Sk=s(Vn);Tle=n(Sk,"STRONG",{});var cit=s(Tle);Llo=r(cit,"big_bird"),cit.forEach(t),ylo=r(Sk," \u2014 "),bB=n(Sk,"A",{href:!0});var fit=s(bB);xlo=r(fit,"BigBirdTokenizer"),fit.forEach(t),$lo=r(Sk," or "),vB=n(Sk,"A",{href:!0});var mit=s(vB);klo=r(mit,"BigBirdTokenizerFast"),mit.forEach(t),Slo=r(Sk," (BigBird model)"),Sk.forEach(t),Rlo=i(S),Xn=n(S,"LI",{});var Rk=s(Xn);Mle=n(Rk,"STRONG",{});var git=s(Mle);Plo=r(git,"bigbird_pegasus"),git.forEach(t),Blo=r(Rk," \u2014 "),FB=n(Rk,"A",{href:!0});var hit=s(FB);Ilo=r(hit,"PegasusTokenizer"),hit.forEach(t),Nlo=r(Rk," or "),TB=n(Rk,"A",{href:!0});var pit=s(TB);qlo=r(pit,"PegasusTokenizerFast"),pit.forEach(t),jlo=r(Rk," (BigBird-Pegasus model)"),Rk.forEach(t),Dlo=i(S),zn=n(S,"LI",{});var Pk=s(zn);Ele=n(Pk,"STRONG",{});var _it=s(Ele);Glo=r(_it,"blenderbot"),_it.forEach(t),Olo=r(Pk," \u2014 "),MB=n(Pk,"A",{href:!0});var uit=s(MB);Vlo=r(uit,"BlenderbotTokenizer"),uit.forEach(t),Xlo=r(Pk," or "),EB=n(Pk,"A",{href:!0});var bit=s(EB);zlo=r(bit,"BlenderbotTokenizerFast"),bit.forEach(t),Qlo=r(Pk," (Blenderbot model)"),Pk.forEach(t),Wlo=i(S),nh=n(S,"LI",{});var Nye=s(nh);Cle=n(Nye,"STRONG",{});var vit=s(Cle);Hlo=r(vit,"blenderbot-small"),vit.forEach(t),Ulo=r(Nye," \u2014 "),CB=n(Nye,"A",{href:!0});var Fit=s(CB);Jlo=r(Fit,"BlenderbotSmallTokenizer"),Fit.forEach(t),Ylo=r(Nye," (BlenderbotSmall model)"),Nye.forEach(t),Klo=i(S),sh=n(S,"LI",{});var qye=s(sh);wle=n(qye,"STRONG",{});var Tit=s(wle);Zlo=r(Tit,"bloom"),Tit.forEach(t),eio=r(qye," \u2014 "),wB=n(qye,"A",{href:!0});var Mit=s(wB);oio=r(Mit,"BloomTokenizerFast"),Mit.forEach(t),rio=r(qye," (BLOOM model)"),qye.forEach(t),tio=i(S),lh=n(S,"LI",{});var jye=s(lh);Ale=n(jye,"STRONG",{});var Eit=s(Ale);aio=r(Eit,"byt5"),Eit.forEach(t),nio=r(jye," \u2014 "),AB=n(jye,"A",{href:!0});var Cit=s(AB);sio=r(Cit,"ByT5Tokenizer"),Cit.forEach(t),lio=r(jye," (ByT5 model)"),jye.forEach(t),iio=i(S),Qn=n(S,"LI",{});var Bk=s(Qn);Lle=n(Bk,"STRONG",{});var wit=s(Lle);dio=r(wit,"camembert"),wit.forEach(t),cio=r(Bk," \u2014 "),LB=n(Bk,"A",{href:!0});var Ait=s(LB);fio=r(Ait,"CamembertTokenizer"),Ait.forEach(t),mio=r(Bk," or "),yB=n(Bk,"A",{href:!0});var Lit=s(yB);gio=r(Lit,"CamembertTokenizerFast"),Lit.forEach(t),hio=r(Bk," (CamemBERT model)"),Bk.forEach(t),pio=i(S),ih=n(S,"LI",{});var Dye=s(ih);yle=n(Dye,"STRONG",{});var yit=s(yle);_io=r(yit,"canine"),yit.forEach(t),uio=r(Dye," \u2014 "),xB=n(Dye,"A",{href:!0});var xit=s(xB);bio=r(xit,"CanineTokenizer"),xit.forEach(t),vio=r(Dye," (CANINE model)"),Dye.forEach(t),Fio=i(S),Wn=n(S,"LI",{});var Ik=s(Wn);xle=n(Ik,"STRONG",{});var $it=s(xle);Tio=r($it,"clip"),$it.forEach(t),Mio=r(Ik," \u2014 "),$B=n(Ik,"A",{href:!0});var kit=s($B);Eio=r(kit,"CLIPTokenizer"),kit.forEach(t),Cio=r(Ik," or "),kB=n(Ik,"A",{href:!0});var Sit=s(kB);wio=r(Sit,"CLIPTokenizerFast"),Sit.forEach(t),Aio=r(Ik," (CLIP model)"),Ik.forEach(t),Lio=i(S),Hn=n(S,"LI",{});var Nk=s(Hn);$le=n(Nk,"STRONG",{});var Rit=s($le);yio=r(Rit,"codegen"),Rit.forEach(t),xio=r(Nk," \u2014 "),SB=n(Nk,"A",{href:!0});var Pit=s(SB);$io=r(Pit,"CodeGenTokenizer"),Pit.forEach(t),kio=r(Nk," or "),RB=n(Nk,"A",{href:!0});var Bit=s(RB);Sio=r(Bit,"CodeGenTokenizerFast"),Bit.forEach(t),Rio=r(Nk," (CodeGen model)"),Nk.forEach(t),Pio=i(S),Un=n(S,"LI",{});var qk=s(Un);kle=n(qk,"STRONG",{});var Iit=s(kle);Bio=r(Iit,"convbert"),Iit.forEach(t),Iio=r(qk," \u2014 "),PB=n(qk,"A",{href:!0});var Nit=s(PB);Nio=r(Nit,"ConvBertTokenizer"),Nit.forEach(t),qio=r(qk," or "),BB=n(qk,"A",{href:!0});var qit=s(BB);jio=r(qit,"ConvBertTokenizerFast"),qit.forEach(t),Dio=r(qk," (ConvBERT model)"),qk.forEach(t),Gio=i(S),Jn=n(S,"LI",{});var jk=s(Jn);Sle=n(jk,"STRONG",{});var jit=s(Sle);Oio=r(jit,"cpm"),jit.forEach(t),Vio=r(jk," \u2014 "),IB=n(jk,"A",{href:!0});var Dit=s(IB);Xio=r(Dit,"CpmTokenizer"),Dit.forEach(t),zio=r(jk," or "),NB=n(jk,"A",{href:!0});var Git=s(NB);Qio=r(Git,"CpmTokenizerFast"),Git.forEach(t),Wio=r(jk," (CPM model)"),jk.forEach(t),Hio=i(S),dh=n(S,"LI",{});var Gye=s(dh);Rle=n(Gye,"STRONG",{});var Oit=s(Rle);Uio=r(Oit,"ctrl"),Oit.forEach(t),Jio=r(Gye," \u2014 "),qB=n(Gye,"A",{href:!0});var Vit=s(qB);Yio=r(Vit,"CTRLTokenizer"),Vit.forEach(t),Kio=r(Gye," (CTRL model)"),Gye.forEach(t),Zio=i(S),Yn=n(S,"LI",{});var Dk=s(Yn);Ple=n(Dk,"STRONG",{});var Xit=s(Ple);edo=r(Xit,"data2vec-text"),Xit.forEach(t),odo=r(Dk," \u2014 "),jB=n(Dk,"A",{href:!0});var zit=s(jB);rdo=r(zit,"RobertaTokenizer"),zit.forEach(t),tdo=r(Dk," or "),DB=n(Dk,"A",{href:!0});var Qit=s(DB);ado=r(Qit,"RobertaTokenizerFast"),Qit.forEach(t),ndo=r(Dk," (Data2VecText model)"),Dk.forEach(t),sdo=i(S),Kn=n(S,"LI",{});var Gk=s(Kn);Ble=n(Gk,"STRONG",{});var Wit=s(Ble);ldo=r(Wit,"deberta"),Wit.forEach(t),ido=r(Gk," \u2014 "),GB=n(Gk,"A",{href:!0});var Hit=s(GB);ddo=r(Hit,"DebertaTokenizer"),Hit.forEach(t),cdo=r(Gk," or "),OB=n(Gk,"A",{href:!0});var Uit=s(OB);fdo=r(Uit,"DebertaTokenizerFast"),Uit.forEach(t),mdo=r(Gk," (DeBERTa model)"),Gk.forEach(t),gdo=i(S),Zn=n(S,"LI",{});var Ok=s(Zn);Ile=n(Ok,"STRONG",{});var Jit=s(Ile);hdo=r(Jit,"deberta-v2"),Jit.forEach(t),pdo=r(Ok," \u2014 "),VB=n(Ok,"A",{href:!0});var Yit=s(VB);_do=r(Yit,"DebertaV2Tokenizer"),Yit.forEach(t),udo=r(Ok," or "),XB=n(Ok,"A",{href:!0});var Kit=s(XB);bdo=r(Kit,"DebertaV2TokenizerFast"),Kit.forEach(t),vdo=r(Ok," (DeBERTa-v2 model)"),Ok.forEach(t),Fdo=i(S),es=n(S,"LI",{});var Vk=s(es);Nle=n(Vk,"STRONG",{});var Zit=s(Nle);Tdo=r(Zit,"distilbert"),Zit.forEach(t),Mdo=r(Vk," \u2014 "),zB=n(Vk,"A",{href:!0});var edt=s(zB);Edo=r(edt,"DistilBertTokenizer"),edt.forEach(t),Cdo=r(Vk," or "),QB=n(Vk,"A",{href:!0});var odt=s(QB);wdo=r(odt,"DistilBertTokenizerFast"),odt.forEach(t),Ado=r(Vk," (DistilBERT model)"),Vk.forEach(t),Ldo=i(S),os=n(S,"LI",{});var Xk=s(os);qle=n(Xk,"STRONG",{});var rdt=s(qle);ydo=r(rdt,"dpr"),rdt.forEach(t),xdo=r(Xk," \u2014 "),WB=n(Xk,"A",{href:!0});var tdt=s(WB);$do=r(tdt,"DPRQuestionEncoderTokenizer"),tdt.forEach(t),kdo=r(Xk," or "),HB=n(Xk,"A",{href:!0});var adt=s(HB);Sdo=r(adt,"DPRQuestionEncoderTokenizerFast"),adt.forEach(t),Rdo=r(Xk," (DPR model)"),Xk.forEach(t),Pdo=i(S),rs=n(S,"LI",{});var zk=s(rs);jle=n(zk,"STRONG",{});var ndt=s(jle);Bdo=r(ndt,"electra"),ndt.forEach(t),Ido=r(zk," \u2014 "),UB=n(zk,"A",{href:!0});var sdt=s(UB);Ndo=r(sdt,"ElectraTokenizer"),sdt.forEach(t),qdo=r(zk," or "),JB=n(zk,"A",{href:!0});var ldt=s(JB);jdo=r(ldt,"ElectraTokenizerFast"),ldt.forEach(t),Ddo=r(zk," (ELECTRA model)"),zk.forEach(t),Gdo=i(S),ch=n(S,"LI",{});var Oye=s(ch);Dle=n(Oye,"STRONG",{});var idt=s(Dle);Odo=r(idt,"flaubert"),idt.forEach(t),Vdo=r(Oye," \u2014 "),YB=n(Oye,"A",{href:!0});var ddt=s(YB);Xdo=r(ddt,"FlaubertTokenizer"),ddt.forEach(t),zdo=r(Oye," (FlauBERT model)"),Oye.forEach(t),Qdo=i(S),ts=n(S,"LI",{});var Qk=s(ts);Gle=n(Qk,"STRONG",{});var cdt=s(Gle);Wdo=r(cdt,"fnet"),cdt.forEach(t),Hdo=r(Qk," \u2014 "),KB=n(Qk,"A",{href:!0});var fdt=s(KB);Udo=r(fdt,"FNetTokenizer"),fdt.forEach(t),Jdo=r(Qk," or "),ZB=n(Qk,"A",{href:!0});var mdt=s(ZB);Ydo=r(mdt,"FNetTokenizerFast"),mdt.forEach(t),Kdo=r(Qk," (FNet model)"),Qk.forEach(t),Zdo=i(S),fh=n(S,"LI",{});var Vye=s(fh);Ole=n(Vye,"STRONG",{});var gdt=s(Ole);eco=r(gdt,"fsmt"),gdt.forEach(t),oco=r(Vye," \u2014 "),eI=n(Vye,"A",{href:!0});var hdt=s(eI);rco=r(hdt,"FSMTTokenizer"),hdt.forEach(t),tco=r(Vye," (FairSeq Machine-Translation model)"),Vye.forEach(t),aco=i(S),as=n(S,"LI",{});var Wk=s(as);Vle=n(Wk,"STRONG",{});var pdt=s(Vle);nco=r(pdt,"funnel"),pdt.forEach(t),sco=r(Wk," \u2014 "),oI=n(Wk,"A",{href:!0});var _dt=s(oI);lco=r(_dt,"FunnelTokenizer"),_dt.forEach(t),ico=r(Wk," or "),rI=n(Wk,"A",{href:!0});var udt=s(rI);dco=r(udt,"FunnelTokenizerFast"),udt.forEach(t),cco=r(Wk," (Funnel Transformer model)"),Wk.forEach(t),fco=i(S),ns=n(S,"LI",{});var Hk=s(ns);Xle=n(Hk,"STRONG",{});var bdt=s(Xle);mco=r(bdt,"gpt2"),bdt.forEach(t),gco=r(Hk," \u2014 "),tI=n(Hk,"A",{href:!0});var vdt=s(tI);hco=r(vdt,"GPT2Tokenizer"),vdt.forEach(t),pco=r(Hk," or "),aI=n(Hk,"A",{href:!0});var Fdt=s(aI);_co=r(Fdt,"GPT2TokenizerFast"),Fdt.forEach(t),uco=r(Hk," (OpenAI GPT-2 model)"),Hk.forEach(t),bco=i(S),ss=n(S,"LI",{});var Uk=s(ss);zle=n(Uk,"STRONG",{});var Tdt=s(zle);vco=r(Tdt,"gpt_neo"),Tdt.forEach(t),Fco=r(Uk," \u2014 "),nI=n(Uk,"A",{href:!0});var Mdt=s(nI);Tco=r(Mdt,"GPT2Tokenizer"),Mdt.forEach(t),Mco=r(Uk," or "),sI=n(Uk,"A",{href:!0});var Edt=s(sI);Eco=r(Edt,"GPT2TokenizerFast"),Edt.forEach(t),Cco=r(Uk," (GPT Neo model)"),Uk.forEach(t),wco=i(S),mh=n(S,"LI",{});var Xye=s(mh);Qle=n(Xye,"STRONG",{});var Cdt=s(Qle);Aco=r(Cdt,"gpt_neox"),Cdt.forEach(t),Lco=r(Xye," \u2014 "),lI=n(Xye,"A",{href:!0});var wdt=s(lI);yco=r(wdt,"GPTNeoXTokenizerFast"),wdt.forEach(t),xco=r(Xye," (GPT NeoX model)"),Xye.forEach(t),$co=i(S),ls=n(S,"LI",{});var Jk=s(ls);Wle=n(Jk,"STRONG",{});var Adt=s(Wle);kco=r(Adt,"gptj"),Adt.forEach(t),Sco=r(Jk," \u2014 "),iI=n(Jk,"A",{href:!0});var Ldt=s(iI);Rco=r(Ldt,"GPT2Tokenizer"),Ldt.forEach(t),Pco=r(Jk," or "),dI=n(Jk,"A",{href:!0});var ydt=s(dI);Bco=r(ydt,"GPT2TokenizerFast"),ydt.forEach(t),Ico=r(Jk," (GPT-J model)"),Jk.forEach(t),Nco=i(S),is=n(S,"LI",{});var Yk=s(is);Hle=n(Yk,"STRONG",{});var xdt=s(Hle);qco=r(xdt,"groupvit"),xdt.forEach(t),jco=r(Yk," \u2014 "),cI=n(Yk,"A",{href:!0});var $dt=s(cI);Dco=r($dt,"CLIPTokenizer"),$dt.forEach(t),Gco=r(Yk," or "),fI=n(Yk,"A",{href:!0});var kdt=s(fI);Oco=r(kdt,"CLIPTokenizerFast"),kdt.forEach(t),Vco=r(Yk," (GroupViT model)"),Yk.forEach(t),Xco=i(S),ds=n(S,"LI",{});var Kk=s(ds);Ule=n(Kk,"STRONG",{});var Sdt=s(Ule);zco=r(Sdt,"herbert"),Sdt.forEach(t),Qco=r(Kk," \u2014 "),mI=n(Kk,"A",{href:!0});var Rdt=s(mI);Wco=r(Rdt,"HerbertTokenizer"),Rdt.forEach(t),Hco=r(Kk," or "),gI=n(Kk,"A",{href:!0});var Pdt=s(gI);Uco=r(Pdt,"HerbertTokenizerFast"),Pdt.forEach(t),Jco=r(Kk," (HerBERT model)"),Kk.forEach(t),Yco=i(S),gh=n(S,"LI",{});var zye=s(gh);Jle=n(zye,"STRONG",{});var Bdt=s(Jle);Kco=r(Bdt,"hubert"),Bdt.forEach(t),Zco=r(zye," \u2014 "),hI=n(zye,"A",{href:!0});var Idt=s(hI);efo=r(Idt,"Wav2Vec2CTCTokenizer"),Idt.forEach(t),ofo=r(zye," (Hubert model)"),zye.forEach(t),rfo=i(S),cs=n(S,"LI",{});var Zk=s(cs);Yle=n(Zk,"STRONG",{});var Ndt=s(Yle);tfo=r(Ndt,"ibert"),Ndt.forEach(t),afo=r(Zk," \u2014 "),pI=n(Zk,"A",{href:!0});var qdt=s(pI);nfo=r(qdt,"RobertaTokenizer"),qdt.forEach(t),sfo=r(Zk," or "),_I=n(Zk,"A",{href:!0});var jdt=s(_I);lfo=r(jdt,"RobertaTokenizerFast"),jdt.forEach(t),ifo=r(Zk," (I-BERT model)"),Zk.forEach(t),dfo=i(S),fs=n(S,"LI",{});var eS=s(fs);Kle=n(eS,"STRONG",{});var Ddt=s(Kle);cfo=r(Ddt,"layoutlm"),Ddt.forEach(t),ffo=r(eS," \u2014 "),uI=n(eS,"A",{href:!0});var Gdt=s(uI);mfo=r(Gdt,"LayoutLMTokenizer"),Gdt.forEach(t),gfo=r(eS," or "),bI=n(eS,"A",{href:!0});var Odt=s(bI);hfo=r(Odt,"LayoutLMTokenizerFast"),Odt.forEach(t),pfo=r(eS," (LayoutLM model)"),eS.forEach(t),_fo=i(S),ms=n(S,"LI",{});var oS=s(ms);Zle=n(oS,"STRONG",{});var Vdt=s(Zle);ufo=r(Vdt,"layoutlmv2"),Vdt.forEach(t),bfo=r(oS," \u2014 "),vI=n(oS,"A",{href:!0});var Xdt=s(vI);vfo=r(Xdt,"LayoutLMv2Tokenizer"),Xdt.forEach(t),Ffo=r(oS," or "),FI=n(oS,"A",{href:!0});var zdt=s(FI);Tfo=r(zdt,"LayoutLMv2TokenizerFast"),zdt.forEach(t),Mfo=r(oS," (LayoutLMv2 model)"),oS.forEach(t),Efo=i(S),gs=n(S,"LI",{});var rS=s(gs);eie=n(rS,"STRONG",{});var Qdt=s(eie);Cfo=r(Qdt,"layoutlmv3"),Qdt.forEach(t),wfo=r(rS," \u2014 "),TI=n(rS,"A",{href:!0});var Wdt=s(TI);Afo=r(Wdt,"LayoutLMv3Tokenizer"),Wdt.forEach(t),Lfo=r(rS," or "),MI=n(rS,"A",{href:!0});var Hdt=s(MI);yfo=r(Hdt,"LayoutLMv3TokenizerFast"),Hdt.forEach(t),xfo=r(rS," (LayoutLMv3 model)"),rS.forEach(t),$fo=i(S),hs=n(S,"LI",{});var tS=s(hs);oie=n(tS,"STRONG",{});var Udt=s(oie);kfo=r(Udt,"layoutxlm"),Udt.forEach(t),Sfo=r(tS," \u2014 "),EI=n(tS,"A",{href:!0});var Jdt=s(EI);Rfo=r(Jdt,"LayoutXLMTokenizer"),Jdt.forEach(t),Pfo=r(tS," or "),CI=n(tS,"A",{href:!0});var Ydt=s(CI);Bfo=r(Ydt,"LayoutXLMTokenizerFast"),Ydt.forEach(t),Ifo=r(tS," (LayoutXLM model)"),tS.forEach(t),Nfo=i(S),ps=n(S,"LI",{});var aS=s(ps);rie=n(aS,"STRONG",{});var Kdt=s(rie);qfo=r(Kdt,"led"),Kdt.forEach(t),jfo=r(aS," \u2014 "),wI=n(aS,"A",{href:!0});var Zdt=s(wI);Dfo=r(Zdt,"LEDTokenizer"),Zdt.forEach(t),Gfo=r(aS," or "),AI=n(aS,"A",{href:!0});var ect=s(AI);Ofo=r(ect,"LEDTokenizerFast"),ect.forEach(t),Vfo=r(aS," (LED model)"),aS.forEach(t),Xfo=i(S),_s=n(S,"LI",{});var nS=s(_s);tie=n(nS,"STRONG",{});var oct=s(tie);zfo=r(oct,"longformer"),oct.forEach(t),Qfo=r(nS," \u2014 "),LI=n(nS,"A",{href:!0});var rct=s(LI);Wfo=r(rct,"LongformerTokenizer"),rct.forEach(t),Hfo=r(nS," or "),yI=n(nS,"A",{href:!0});var tct=s(yI);Ufo=r(tct,"LongformerTokenizerFast"),tct.forEach(t),Jfo=r(nS," (Longformer model)"),nS.forEach(t),Yfo=i(S),us=n(S,"LI",{});var sS=s(us);aie=n(sS,"STRONG",{});var act=s(aie);Kfo=r(act,"longt5"),act.forEach(t),Zfo=r(sS," \u2014 "),xI=n(sS,"A",{href:!0});var nct=s(xI);emo=r(nct,"T5Tokenizer"),nct.forEach(t),omo=r(sS," or "),$I=n(sS,"A",{href:!0});var sct=s($I);rmo=r(sct,"T5TokenizerFast"),sct.forEach(t),tmo=r(sS," (LongT5 model)"),sS.forEach(t),amo=i(S),hh=n(S,"LI",{});var Qye=s(hh);nie=n(Qye,"STRONG",{});var lct=s(nie);nmo=r(lct,"luke"),lct.forEach(t),smo=r(Qye," \u2014 "),kI=n(Qye,"A",{href:!0});var ict=s(kI);lmo=r(ict,"LukeTokenizer"),ict.forEach(t),imo=r(Qye," (LUKE model)"),Qye.forEach(t),dmo=i(S),bs=n(S,"LI",{});var lS=s(bs);sie=n(lS,"STRONG",{});var dct=s(sie);cmo=r(dct,"lxmert"),dct.forEach(t),fmo=r(lS," \u2014 "),SI=n(lS,"A",{href:!0});var cct=s(SI);mmo=r(cct,"LxmertTokenizer"),cct.forEach(t),gmo=r(lS," or "),RI=n(lS,"A",{href:!0});var fct=s(RI);hmo=r(fct,"LxmertTokenizerFast"),fct.forEach(t),pmo=r(lS," (LXMERT model)"),lS.forEach(t),_mo=i(S),ph=n(S,"LI",{});var Wye=s(ph);lie=n(Wye,"STRONG",{});var mct=s(lie);umo=r(mct,"m2m_100"),mct.forEach(t),bmo=r(Wye," \u2014 "),PI=n(Wye,"A",{href:!0});var gct=s(PI);vmo=r(gct,"M2M100Tokenizer"),gct.forEach(t),Fmo=r(Wye," (M2M100 model)"),Wye.forEach(t),Tmo=i(S),_h=n(S,"LI",{});var Hye=s(_h);iie=n(Hye,"STRONG",{});var hct=s(iie);Mmo=r(hct,"marian"),hct.forEach(t),Emo=r(Hye," \u2014 "),BI=n(Hye,"A",{href:!0});var pct=s(BI);Cmo=r(pct,"MarianTokenizer"),pct.forEach(t),wmo=r(Hye," (Marian model)"),Hye.forEach(t),Amo=i(S),vs=n(S,"LI",{});var iS=s(vs);die=n(iS,"STRONG",{});var _ct=s(die);Lmo=r(_ct,"mbart"),_ct.forEach(t),ymo=r(iS," \u2014 "),II=n(iS,"A",{href:!0});var uct=s(II);xmo=r(uct,"MBartTokenizer"),uct.forEach(t),$mo=r(iS," or "),NI=n(iS,"A",{href:!0});var bct=s(NI);kmo=r(bct,"MBartTokenizerFast"),bct.forEach(t),Smo=r(iS," (mBART model)"),iS.forEach(t),Rmo=i(S),Fs=n(S,"LI",{});var dS=s(Fs);cie=n(dS,"STRONG",{});var vct=s(cie);Pmo=r(vct,"mbart50"),vct.forEach(t),Bmo=r(dS," \u2014 "),qI=n(dS,"A",{href:!0});var Fct=s(qI);Imo=r(Fct,"MBart50Tokenizer"),Fct.forEach(t),Nmo=r(dS," or "),jI=n(dS,"A",{href:!0});var Tct=s(jI);qmo=r(Tct,"MBart50TokenizerFast"),Tct.forEach(t),jmo=r(dS," (mBART-50 model)"),dS.forEach(t),Dmo=i(S),Ts=n(S,"LI",{});var cS=s(Ts);fie=n(cS,"STRONG",{});var Mct=s(fie);Gmo=r(Mct,"megatron-bert"),Mct.forEach(t),Omo=r(cS," \u2014 "),DI=n(cS,"A",{href:!0});var Ect=s(DI);Vmo=r(Ect,"BertTokenizer"),Ect.forEach(t),Xmo=r(cS," or "),GI=n(cS,"A",{href:!0});var Cct=s(GI);zmo=r(Cct,"BertTokenizerFast"),Cct.forEach(t),Qmo=r(cS," (Megatron-BERT model)"),cS.forEach(t),Wmo=i(S),uh=n(S,"LI",{});var Uye=s(uh);mie=n(Uye,"STRONG",{});var wct=s(mie);Hmo=r(wct,"mluke"),wct.forEach(t),Umo=r(Uye," \u2014 "),OI=n(Uye,"A",{href:!0});var Act=s(OI);Jmo=r(Act,"MLukeTokenizer"),Act.forEach(t),Ymo=r(Uye," (mLUKE model)"),Uye.forEach(t),Kmo=i(S),Ms=n(S,"LI",{});var fS=s(Ms);gie=n(fS,"STRONG",{});var Lct=s(gie);Zmo=r(Lct,"mobilebert"),Lct.forEach(t),ego=r(fS," \u2014 "),VI=n(fS,"A",{href:!0});var yct=s(VI);ogo=r(yct,"MobileBertTokenizer"),yct.forEach(t),rgo=r(fS," or "),XI=n(fS,"A",{href:!0});var xct=s(XI);tgo=r(xct,"MobileBertTokenizerFast"),xct.forEach(t),ago=r(fS," (MobileBERT model)"),fS.forEach(t),ngo=i(S),Es=n(S,"LI",{});var mS=s(Es);hie=n(mS,"STRONG",{});var $ct=s(hie);sgo=r($ct,"mpnet"),$ct.forEach(t),lgo=r(mS," \u2014 "),zI=n(mS,"A",{href:!0});var kct=s(zI);igo=r(kct,"MPNetTokenizer"),kct.forEach(t),dgo=r(mS," or "),QI=n(mS,"A",{href:!0});var Sct=s(QI);cgo=r(Sct,"MPNetTokenizerFast"),Sct.forEach(t),fgo=r(mS," (MPNet model)"),mS.forEach(t),mgo=i(S),Cs=n(S,"LI",{});var gS=s(Cs);pie=n(gS,"STRONG",{});var Rct=s(pie);ggo=r(Rct,"mt5"),Rct.forEach(t),hgo=r(gS," \u2014 "),WI=n(gS,"A",{href:!0});var Pct=s(WI);pgo=r(Pct,"MT5Tokenizer"),Pct.forEach(t),_go=r(gS," or "),HI=n(gS,"A",{href:!0});var Bct=s(HI);ugo=r(Bct,"MT5TokenizerFast"),Bct.forEach(t),bgo=r(gS," (MT5 model)"),gS.forEach(t),vgo=i(S),ws=n(S,"LI",{});var hS=s(ws);_ie=n(hS,"STRONG",{});var Ict=s(_ie);Fgo=r(Ict,"mvp"),Ict.forEach(t),Tgo=r(hS," \u2014 "),UI=n(hS,"A",{href:!0});var Nct=s(UI);Mgo=r(Nct,"MvpTokenizer"),Nct.forEach(t),Ego=r(hS," or "),JI=n(hS,"A",{href:!0});var qct=s(JI);Cgo=r(qct,"MvpTokenizerFast"),qct.forEach(t),wgo=r(hS," (MVP model)"),hS.forEach(t),Ago=i(S),As=n(S,"LI",{});var pS=s(As);uie=n(pS,"STRONG",{});var jct=s(uie);Lgo=r(jct,"nezha"),jct.forEach(t),ygo=r(pS," \u2014 "),YI=n(pS,"A",{href:!0});var Dct=s(YI);xgo=r(Dct,"BertTokenizer"),Dct.forEach(t),$go=r(pS," or "),KI=n(pS,"A",{href:!0});var Gct=s(KI);kgo=r(Gct,"BertTokenizerFast"),Gct.forEach(t),Sgo=r(pS," (Nezha model)"),pS.forEach(t),Rgo=i(S),Ls=n(S,"LI",{});var _S=s(Ls);bie=n(_S,"STRONG",{});var Oct=s(bie);Pgo=r(Oct,"nllb"),Oct.forEach(t),Bgo=r(_S," \u2014 "),ZI=n(_S,"A",{href:!0});var Vct=s(ZI);Igo=r(Vct,"NllbTokenizer"),Vct.forEach(t),Ngo=r(_S," or "),eN=n(_S,"A",{href:!0});var Xct=s(eN);qgo=r(Xct,"NllbTokenizerFast"),Xct.forEach(t),jgo=r(_S," (NLLB model)"),_S.forEach(t),Dgo=i(S),ys=n(S,"LI",{});var uS=s(ys);vie=n(uS,"STRONG",{});var zct=s(vie);Ggo=r(zct,"nystromformer"),zct.forEach(t),Ogo=r(uS," \u2014 "),oN=n(uS,"A",{href:!0});var Qct=s(oN);Vgo=r(Qct,"AlbertTokenizer"),Qct.forEach(t),Xgo=r(uS," or "),rN=n(uS,"A",{href:!0});var Wct=s(rN);zgo=r(Wct,"AlbertTokenizerFast"),Wct.forEach(t),Qgo=r(uS," (Nystr\xF6mformer model)"),uS.forEach(t),Wgo=i(S),xs=n(S,"LI",{});var bS=s(xs);Fie=n(bS,"STRONG",{});var Hct=s(Fie);Hgo=r(Hct,"openai-gpt"),Hct.forEach(t),Ugo=r(bS," \u2014 "),tN=n(bS,"A",{href:!0});var Uct=s(tN);Jgo=r(Uct,"OpenAIGPTTokenizer"),Uct.forEach(t),Ygo=r(bS," or "),aN=n(bS,"A",{href:!0});var Jct=s(aN);Kgo=r(Jct,"OpenAIGPTTokenizerFast"),Jct.forEach(t),Zgo=r(bS," (OpenAI GPT model)"),bS.forEach(t),eho=i(S),bh=n(S,"LI",{});var Jye=s(bh);Tie=n(Jye,"STRONG",{});var Yct=s(Tie);oho=r(Yct,"opt"),Yct.forEach(t),rho=r(Jye," \u2014 "),nN=n(Jye,"A",{href:!0});var Kct=s(nN);tho=r(Kct,"GPT2Tokenizer"),Kct.forEach(t),aho=r(Jye," (OPT model)"),Jye.forEach(t),nho=i(S),$s=n(S,"LI",{});var vS=s($s);Mie=n(vS,"STRONG",{});var Zct=s(Mie);sho=r(Zct,"pegasus"),Zct.forEach(t),lho=r(vS," \u2014 "),sN=n(vS,"A",{href:!0});var eft=s(sN);iho=r(eft,"PegasusTokenizer"),eft.forEach(t),dho=r(vS," or "),lN=n(vS,"A",{href:!0});var oft=s(lN);cho=r(oft,"PegasusTokenizerFast"),oft.forEach(t),fho=r(vS," (Pegasus model)"),vS.forEach(t),mho=i(S),vh=n(S,"LI",{});var Yye=s(vh);Eie=n(Yye,"STRONG",{});var rft=s(Eie);gho=r(rft,"perceiver"),rft.forEach(t),hho=r(Yye," \u2014 "),iN=n(Yye,"A",{href:!0});var tft=s(iN);pho=r(tft,"PerceiverTokenizer"),tft.forEach(t),_ho=r(Yye," (Perceiver model)"),Yye.forEach(t),uho=i(S),Fh=n(S,"LI",{});var Kye=s(Fh);Cie=n(Kye,"STRONG",{});var aft=s(Cie);bho=r(aft,"phobert"),aft.forEach(t),vho=r(Kye," \u2014 "),dN=n(Kye,"A",{href:!0});var nft=s(dN);Fho=r(nft,"PhobertTokenizer"),nft.forEach(t),Tho=r(Kye," (PhoBERT model)"),Kye.forEach(t),Mho=i(S),Th=n(S,"LI",{});var Zye=s(Th);wie=n(Zye,"STRONG",{});var sft=s(wie);Eho=r(sft,"plbart"),sft.forEach(t),Cho=r(Zye," \u2014 "),cN=n(Zye,"A",{href:!0});var lft=s(cN);who=r(lft,"PLBartTokenizer"),lft.forEach(t),Aho=r(Zye," (PLBart model)"),Zye.forEach(t),Lho=i(S),Mh=n(S,"LI",{});var e9e=s(Mh);Aie=n(e9e,"STRONG",{});var ift=s(Aie);yho=r(ift,"prophetnet"),ift.forEach(t),xho=r(e9e," \u2014 "),fN=n(e9e,"A",{href:!0});var dft=s(fN);$ho=r(dft,"ProphetNetTokenizer"),dft.forEach(t),kho=r(e9e," (ProphetNet model)"),e9e.forEach(t),Sho=i(S),ks=n(S,"LI",{});var FS=s(ks);Lie=n(FS,"STRONG",{});var cft=s(Lie);Rho=r(cft,"qdqbert"),cft.forEach(t),Pho=r(FS," \u2014 "),mN=n(FS,"A",{href:!0});var fft=s(mN);Bho=r(fft,"BertTokenizer"),fft.forEach(t),Iho=r(FS," or "),gN=n(FS,"A",{href:!0});var mft=s(gN);Nho=r(mft,"BertTokenizerFast"),mft.forEach(t),qho=r(FS," (QDQBert model)"),FS.forEach(t),jho=i(S),Eh=n(S,"LI",{});var o9e=s(Eh);yie=n(o9e,"STRONG",{});var gft=s(yie);Dho=r(gft,"rag"),gft.forEach(t),Gho=r(o9e," \u2014 "),hN=n(o9e,"A",{href:!0});var hft=s(hN);Oho=r(hft,"RagTokenizer"),hft.forEach(t),Vho=r(o9e," (RAG model)"),o9e.forEach(t),Xho=i(S),Ss=n(S,"LI",{});var TS=s(Ss);xie=n(TS,"STRONG",{});var pft=s(xie);zho=r(pft,"realm"),pft.forEach(t),Qho=r(TS," \u2014 "),pN=n(TS,"A",{href:!0});var _ft=s(pN);Who=r(_ft,"RealmTokenizer"),_ft.forEach(t),Hho=r(TS," or "),_N=n(TS,"A",{href:!0});var uft=s(_N);Uho=r(uft,"RealmTokenizerFast"),uft.forEach(t),Jho=r(TS," (REALM model)"),TS.forEach(t),Yho=i(S),Rs=n(S,"LI",{});var MS=s(Rs);$ie=n(MS,"STRONG",{});var bft=s($ie);Kho=r(bft,"reformer"),bft.forEach(t),Zho=r(MS," \u2014 "),uN=n(MS,"A",{href:!0});var vft=s(uN);epo=r(vft,"ReformerTokenizer"),vft.forEach(t),opo=r(MS," or "),bN=n(MS,"A",{href:!0});var Fft=s(bN);rpo=r(Fft,"ReformerTokenizerFast"),Fft.forEach(t),tpo=r(MS," (Reformer model)"),MS.forEach(t),apo=i(S),Ps=n(S,"LI",{});var ES=s(Ps);kie=n(ES,"STRONG",{});var Tft=s(kie);npo=r(Tft,"rembert"),Tft.forEach(t),spo=r(ES," \u2014 "),vN=n(ES,"A",{href:!0});var Mft=s(vN);lpo=r(Mft,"RemBertTokenizer"),Mft.forEach(t),ipo=r(ES," or "),FN=n(ES,"A",{href:!0});var Eft=s(FN);dpo=r(Eft,"RemBertTokenizerFast"),Eft.forEach(t),cpo=r(ES," (RemBERT model)"),ES.forEach(t),fpo=i(S),Bs=n(S,"LI",{});var CS=s(Bs);Sie=n(CS,"STRONG",{});var Cft=s(Sie);mpo=r(Cft,"retribert"),Cft.forEach(t),gpo=r(CS," \u2014 "),TN=n(CS,"A",{href:!0});var wft=s(TN);hpo=r(wft,"RetriBertTokenizer"),wft.forEach(t),ppo=r(CS," or "),MN=n(CS,"A",{href:!0});var Aft=s(MN);_po=r(Aft,"RetriBertTokenizerFast"),Aft.forEach(t),upo=r(CS," (RetriBERT model)"),CS.forEach(t),bpo=i(S),Is=n(S,"LI",{});var wS=s(Is);Rie=n(wS,"STRONG",{});var Lft=s(Rie);vpo=r(Lft,"roberta"),Lft.forEach(t),Fpo=r(wS," \u2014 "),EN=n(wS,"A",{href:!0});var yft=s(EN);Tpo=r(yft,"RobertaTokenizer"),yft.forEach(t),Mpo=r(wS," or "),CN=n(wS,"A",{href:!0});var xft=s(CN);Epo=r(xft,"RobertaTokenizerFast"),xft.forEach(t),Cpo=r(wS," (RoBERTa model)"),wS.forEach(t),wpo=i(S),Ns=n(S,"LI",{});var AS=s(Ns);Pie=n(AS,"STRONG",{});var $ft=s(Pie);Apo=r($ft,"roformer"),$ft.forEach(t),Lpo=r(AS," \u2014 "),wN=n(AS,"A",{href:!0});var kft=s(wN);ypo=r(kft,"RoFormerTokenizer"),kft.forEach(t),xpo=r(AS," or "),AN=n(AS,"A",{href:!0});var Sft=s(AN);$po=r(Sft,"RoFormerTokenizerFast"),Sft.forEach(t),kpo=r(AS," (RoFormer model)"),AS.forEach(t),Spo=i(S),Ch=n(S,"LI",{});var r9e=s(Ch);Bie=n(r9e,"STRONG",{});var Rft=s(Bie);Rpo=r(Rft,"speech_to_text"),Rft.forEach(t),Ppo=r(r9e," \u2014 "),LN=n(r9e,"A",{href:!0});var Pft=s(LN);Bpo=r(Pft,"Speech2TextTokenizer"),Pft.forEach(t),Ipo=r(r9e," (Speech2Text model)"),r9e.forEach(t),Npo=i(S),wh=n(S,"LI",{});var t9e=s(wh);Iie=n(t9e,"STRONG",{});var Bft=s(Iie);qpo=r(Bft,"speech_to_text_2"),Bft.forEach(t),jpo=r(t9e," \u2014 "),yN=n(t9e,"A",{href:!0});var Ift=s(yN);Dpo=r(Ift,"Speech2Text2Tokenizer"),Ift.forEach(t),Gpo=r(t9e," (Speech2Text2 model)"),t9e.forEach(t),Opo=i(S),qs=n(S,"LI",{});var LS=s(qs);Nie=n(LS,"STRONG",{});var Nft=s(Nie);Vpo=r(Nft,"splinter"),Nft.forEach(t),Xpo=r(LS," \u2014 "),xN=n(LS,"A",{href:!0});var qft=s(xN);zpo=r(qft,"SplinterTokenizer"),qft.forEach(t),Qpo=r(LS," or "),$N=n(LS,"A",{href:!0});var jft=s($N);Wpo=r(jft,"SplinterTokenizerFast"),jft.forEach(t),Hpo=r(LS," (Splinter model)"),LS.forEach(t),Upo=i(S),js=n(S,"LI",{});var yS=s(js);qie=n(yS,"STRONG",{});var Dft=s(qie);Jpo=r(Dft,"squeezebert"),Dft.forEach(t),Ypo=r(yS," \u2014 "),kN=n(yS,"A",{href:!0});var Gft=s(kN);Kpo=r(Gft,"SqueezeBertTokenizer"),Gft.forEach(t),Zpo=r(yS," or "),SN=n(yS,"A",{href:!0});var Oft=s(SN);e_o=r(Oft,"SqueezeBertTokenizerFast"),Oft.forEach(t),o_o=r(yS," (SqueezeBERT model)"),yS.forEach(t),r_o=i(S),Ds=n(S,"LI",{});var xS=s(Ds);jie=n(xS,"STRONG",{});var Vft=s(jie);t_o=r(Vft,"t5"),Vft.forEach(t),a_o=r(xS," \u2014 "),RN=n(xS,"A",{href:!0});var Xft=s(RN);n_o=r(Xft,"T5Tokenizer"),Xft.forEach(t),s_o=r(xS," or "),PN=n(xS,"A",{href:!0});var zft=s(PN);l_o=r(zft,"T5TokenizerFast"),zft.forEach(t),i_o=r(xS," (T5 model)"),xS.forEach(t),d_o=i(S),Ah=n(S,"LI",{});var a9e=s(Ah);Die=n(a9e,"STRONG",{});var Qft=s(Die);c_o=r(Qft,"tapas"),Qft.forEach(t),f_o=r(a9e," \u2014 "),BN=n(a9e,"A",{href:!0});var Wft=s(BN);m_o=r(Wft,"TapasTokenizer"),Wft.forEach(t),g_o=r(a9e," (TAPAS model)"),a9e.forEach(t),h_o=i(S),Lh=n(S,"LI",{});var n9e=s(Lh);Gie=n(n9e,"STRONG",{});var Hft=s(Gie);p_o=r(Hft,"tapex"),Hft.forEach(t),__o=r(n9e," \u2014 "),IN=n(n9e,"A",{href:!0});var Uft=s(IN);u_o=r(Uft,"TapexTokenizer"),Uft.forEach(t),b_o=r(n9e," (TAPEX model)"),n9e.forEach(t),v_o=i(S),yh=n(S,"LI",{});var s9e=s(yh);Oie=n(s9e,"STRONG",{});var Jft=s(Oie);F_o=r(Jft,"transfo-xl"),Jft.forEach(t),T_o=r(s9e," \u2014 "),NN=n(s9e,"A",{href:!0});var Yft=s(NN);M_o=r(Yft,"TransfoXLTokenizer"),Yft.forEach(t),E_o=r(s9e," (Transformer-XL model)"),s9e.forEach(t),C_o=i(S),Gs=n(S,"LI",{});var $S=s(Gs);Vie=n($S,"STRONG",{});var Kft=s(Vie);w_o=r(Kft,"vilt"),Kft.forEach(t),A_o=r($S," \u2014 "),qN=n($S,"A",{href:!0});var Zft=s(qN);L_o=r(Zft,"BertTokenizer"),Zft.forEach(t),y_o=r($S," or "),jN=n($S,"A",{href:!0});var emt=s(jN);x_o=r(emt,"BertTokenizerFast"),emt.forEach(t),$_o=r($S," (ViLT model)"),$S.forEach(t),k_o=i(S),Os=n(S,"LI",{});var kS=s(Os);Xie=n(kS,"STRONG",{});var omt=s(Xie);S_o=r(omt,"visual_bert"),omt.forEach(t),R_o=r(kS," \u2014 "),DN=n(kS,"A",{href:!0});var rmt=s(DN);P_o=r(rmt,"BertTokenizer"),rmt.forEach(t),B_o=r(kS," or "),GN=n(kS,"A",{href:!0});var tmt=s(GN);I_o=r(tmt,"BertTokenizerFast"),tmt.forEach(t),N_o=r(kS," (VisualBERT model)"),kS.forEach(t),q_o=i(S),xh=n(S,"LI",{});var l9e=s(xh);zie=n(l9e,"STRONG",{});var amt=s(zie);j_o=r(amt,"wav2vec2"),amt.forEach(t),D_o=r(l9e," \u2014 "),ON=n(l9e,"A",{href:!0});var nmt=s(ON);G_o=r(nmt,"Wav2Vec2CTCTokenizer"),nmt.forEach(t),O_o=r(l9e," (Wav2Vec2 model)"),l9e.forEach(t),V_o=i(S),$h=n(S,"LI",{});var i9e=s($h);Qie=n(i9e,"STRONG",{});var smt=s(Qie);X_o=r(smt,"wav2vec2-conformer"),smt.forEach(t),z_o=r(i9e," \u2014 "),VN=n(i9e,"A",{href:!0});var lmt=s(VN);Q_o=r(lmt,"Wav2Vec2CTCTokenizer"),lmt.forEach(t),W_o=r(i9e," (Wav2Vec2-Conformer model)"),i9e.forEach(t),H_o=i(S),kh=n(S,"LI",{});var d9e=s(kh);Wie=n(d9e,"STRONG",{});var imt=s(Wie);U_o=r(imt,"wav2vec2_phoneme"),imt.forEach(t),J_o=r(d9e," \u2014 "),XN=n(d9e,"A",{href:!0});var dmt=s(XN);Y_o=r(dmt,"Wav2Vec2PhonemeCTCTokenizer"),dmt.forEach(t),K_o=r(d9e," (Wav2Vec2Phoneme model)"),d9e.forEach(t),Z_o=i(S),Vs=n(S,"LI",{});var SS=s(Vs);Hie=n(SS,"STRONG",{});var cmt=s(Hie);euo=r(cmt,"xglm"),cmt.forEach(t),ouo=r(SS," \u2014 "),zN=n(SS,"A",{href:!0});var fmt=s(zN);ruo=r(fmt,"XGLMTokenizer"),fmt.forEach(t),tuo=r(SS," or "),QN=n(SS,"A",{href:!0});var mmt=s(QN);auo=r(mmt,"XGLMTokenizerFast"),mmt.forEach(t),nuo=r(SS," (XGLM model)"),SS.forEach(t),suo=i(S),Sh=n(S,"LI",{});var c9e=s(Sh);Uie=n(c9e,"STRONG",{});var gmt=s(Uie);luo=r(gmt,"xlm"),gmt.forEach(t),iuo=r(c9e," \u2014 "),WN=n(c9e,"A",{href:!0});var hmt=s(WN);duo=r(hmt,"XLMTokenizer"),hmt.forEach(t),cuo=r(c9e," (XLM model)"),c9e.forEach(t),fuo=i(S),Rh=n(S,"LI",{});var f9e=s(Rh);Jie=n(f9e,"STRONG",{});var pmt=s(Jie);muo=r(pmt,"xlm-prophetnet"),pmt.forEach(t),guo=r(f9e," \u2014 "),HN=n(f9e,"A",{href:!0});var _mt=s(HN);huo=r(_mt,"XLMProphetNetTokenizer"),_mt.forEach(t),puo=r(f9e," (XLM-ProphetNet model)"),f9e.forEach(t),_uo=i(S),Xs=n(S,"LI",{});var RS=s(Xs);Yie=n(RS,"STRONG",{});var umt=s(Yie);uuo=r(umt,"xlm-roberta"),umt.forEach(t),buo=r(RS," \u2014 "),UN=n(RS,"A",{href:!0});var bmt=s(UN);vuo=r(bmt,"XLMRobertaTokenizer"),bmt.forEach(t),Fuo=r(RS," or "),JN=n(RS,"A",{href:!0});var vmt=s(JN);Tuo=r(vmt,"XLMRobertaTokenizerFast"),vmt.forEach(t),Muo=r(RS," (XLM-RoBERTa model)"),RS.forEach(t),Euo=i(S),zs=n(S,"LI",{});var PS=s(zs);Kie=n(PS,"STRONG",{});var Fmt=s(Kie);Cuo=r(Fmt,"xlm-roberta-xl"),Fmt.forEach(t),wuo=r(PS," \u2014 "),YN=n(PS,"A",{href:!0});var Tmt=s(YN);Auo=r(Tmt,"RobertaTokenizer"),Tmt.forEach(t),Luo=r(PS," or "),KN=n(PS,"A",{href:!0});var Mmt=s(KN);yuo=r(Mmt,"RobertaTokenizerFast"),Mmt.forEach(t),xuo=r(PS," (XLM-RoBERTa-XL model)"),PS.forEach(t),$uo=i(S),Qs=n(S,"LI",{});var BS=s(Qs);Zie=n(BS,"STRONG",{});var Emt=s(Zie);kuo=r(Emt,"xlnet"),Emt.forEach(t),Suo=r(BS," \u2014 "),ZN=n(BS,"A",{href:!0});var Cmt=s(ZN);Ruo=r(Cmt,"XLNetTokenizer"),Cmt.forEach(t),Puo=r(BS," or "),eq=n(BS,"A",{href:!0});var wmt=s(eq);Buo=r(wmt,"XLNetTokenizerFast"),wmt.forEach(t),Iuo=r(BS," (XLNet model)"),BS.forEach(t),Nuo=i(S),Ws=n(S,"LI",{});var IS=s(Ws);ede=n(IS,"STRONG",{});var Amt=s(ede);quo=r(Amt,"yoso"),Amt.forEach(t),juo=r(IS," \u2014 "),oq=n(IS,"A",{href:!0});var Lmt=s(oq);Duo=r(Lmt,"AlbertTokenizer"),Lmt.forEach(t),Guo=r(IS," or "),rq=n(IS,"A",{href:!0});var ymt=s(rq);Ouo=r(ymt,"AlbertTokenizerFast"),ymt.forEach(t),Vuo=r(IS," (YOSO model)"),IS.forEach(t),S.forEach(t),Xuo=i(el),T(Ph.$$.fragment,el),el.forEach(t),zuo=i(Zs),Bh=n(Zs,"DIV",{class:!0});var SQe=s(Bh);T(EL.$$.fragment,SQe),Quo=i(SQe),ode=n(SQe,"P",{});var xmt=s(ode);Wuo=r(xmt,"Register a new tokenizer in this mapping."),xmt.forEach(t),SQe.forEach(t),Zs.forEach(t),kXe=i(f),ji=n(f,"H2",{class:!0});var RQe=s(ji);Ih=n(RQe,"A",{id:!0,class:!0,href:!0});var $mt=s(Ih);rde=n($mt,"SPAN",{});var kmt=s(rde);T(CL.$$.fragment,kmt),kmt.forEach(t),$mt.forEach(t),Huo=i(RQe),tde=n(RQe,"SPAN",{});var Smt=s(tde);Uuo=r(Smt,"AutoFeatureExtractor"),Smt.forEach(t),RQe.forEach(t),SXe=i(f),xo=n(f,"DIV",{class:!0});var ol=s(xo);T(wL.$$.fragment,ol),Juo=i(ol),AL=n(ol,"P",{});var PQe=s(AL);Yuo=r(PQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),tq=n(PQe,"A",{href:!0});var Rmt=s(tq);Kuo=r(Rmt,"AutoFeatureExtractor.from_pretrained()"),Rmt.forEach(t),Zuo=r(PQe," class method."),PQe.forEach(t),e4o=i(ol),LL=n(ol,"P",{});var BQe=s(LL);o4o=r(BQe,"This class cannot be instantiated directly using "),ade=n(BQe,"CODE",{});var Pmt=s(ade);r4o=r(Pmt,"__init__()"),Pmt.forEach(t),t4o=r(BQe," (throws an error)."),BQe.forEach(t),a4o=i(ol),Ue=n(ol,"DIV",{class:!0});var na=s(Ue);T(yL.$$.fragment,na),n4o=i(na),nde=n(na,"P",{});var Bmt=s(nde);s4o=r(Bmt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Bmt.forEach(t),l4o=i(na),Ba=n(na,"P",{});var g6=s(Ba);i4o=r(g6,"The feature extractor class to instantiate is selected based on the "),sde=n(g6,"CODE",{});var Imt=s(sde);d4o=r(Imt,"model_type"),Imt.forEach(t),c4o=r(g6,` property of the config object
(either passed as an argument or loaded from `),lde=n(g6,"CODE",{});var Nmt=s(lde);f4o=r(Nmt,"pretrained_model_name_or_path"),Nmt.forEach(t),m4o=r(g6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ide=n(g6,"CODE",{});var qmt=s(ide);g4o=r(qmt,"pretrained_model_name_or_path"),qmt.forEach(t),h4o=r(g6,":"),g6.forEach(t),p4o=i(na),Y=n(na,"UL",{});var K=s(Y);Nh=n(K,"LI",{});var m9e=s(Nh);dde=n(m9e,"STRONG",{});var jmt=s(dde);_4o=r(jmt,"beit"),jmt.forEach(t),u4o=r(m9e," \u2014 "),aq=n(m9e,"A",{href:!0});var Dmt=s(aq);b4o=r(Dmt,"BeitFeatureExtractor"),Dmt.forEach(t),v4o=r(m9e," (BEiT model)"),m9e.forEach(t),F4o=i(K),qh=n(K,"LI",{});var g9e=s(qh);cde=n(g9e,"STRONG",{});var Gmt=s(cde);T4o=r(Gmt,"clip"),Gmt.forEach(t),M4o=r(g9e," \u2014 "),nq=n(g9e,"A",{href:!0});var Omt=s(nq);E4o=r(Omt,"CLIPFeatureExtractor"),Omt.forEach(t),C4o=r(g9e," (CLIP model)"),g9e.forEach(t),w4o=i(K),jh=n(K,"LI",{});var h9e=s(jh);fde=n(h9e,"STRONG",{});var Vmt=s(fde);A4o=r(Vmt,"convnext"),Vmt.forEach(t),L4o=r(h9e," \u2014 "),sq=n(h9e,"A",{href:!0});var Xmt=s(sq);y4o=r(Xmt,"ConvNextFeatureExtractor"),Xmt.forEach(t),x4o=r(h9e," (ConvNeXT model)"),h9e.forEach(t),$4o=i(K),Dh=n(K,"LI",{});var p9e=s(Dh);mde=n(p9e,"STRONG",{});var zmt=s(mde);k4o=r(zmt,"cvt"),zmt.forEach(t),S4o=r(p9e," \u2014 "),lq=n(p9e,"A",{href:!0});var Qmt=s(lq);R4o=r(Qmt,"ConvNextFeatureExtractor"),Qmt.forEach(t),P4o=r(p9e," (CvT model)"),p9e.forEach(t),B4o=i(K),Gh=n(K,"LI",{});var _9e=s(Gh);gde=n(_9e,"STRONG",{});var Wmt=s(gde);I4o=r(Wmt,"data2vec-audio"),Wmt.forEach(t),N4o=r(_9e," \u2014 "),iq=n(_9e,"A",{href:!0});var Hmt=s(iq);q4o=r(Hmt,"Wav2Vec2FeatureExtractor"),Hmt.forEach(t),j4o=r(_9e," (Data2VecAudio model)"),_9e.forEach(t),D4o=i(K),Oh=n(K,"LI",{});var u9e=s(Oh);hde=n(u9e,"STRONG",{});var Umt=s(hde);G4o=r(Umt,"data2vec-vision"),Umt.forEach(t),O4o=r(u9e," \u2014 "),dq=n(u9e,"A",{href:!0});var Jmt=s(dq);V4o=r(Jmt,"BeitFeatureExtractor"),Jmt.forEach(t),X4o=r(u9e," (Data2VecVision model)"),u9e.forEach(t),z4o=i(K),Vh=n(K,"LI",{});var b9e=s(Vh);pde=n(b9e,"STRONG",{});var Ymt=s(pde);Q4o=r(Ymt,"deit"),Ymt.forEach(t),W4o=r(b9e," \u2014 "),cq=n(b9e,"A",{href:!0});var Kmt=s(cq);H4o=r(Kmt,"DeiTFeatureExtractor"),Kmt.forEach(t),U4o=r(b9e," (DeiT model)"),b9e.forEach(t),J4o=i(K),Xh=n(K,"LI",{});var v9e=s(Xh);_de=n(v9e,"STRONG",{});var Zmt=s(_de);Y4o=r(Zmt,"detr"),Zmt.forEach(t),K4o=r(v9e," \u2014 "),fq=n(v9e,"A",{href:!0});var egt=s(fq);Z4o=r(egt,"DetrFeatureExtractor"),egt.forEach(t),e2o=r(v9e," (DETR model)"),v9e.forEach(t),o2o=i(K),zh=n(K,"LI",{});var F9e=s(zh);ude=n(F9e,"STRONG",{});var ogt=s(ude);r2o=r(ogt,"dpt"),ogt.forEach(t),t2o=r(F9e," \u2014 "),mq=n(F9e,"A",{href:!0});var rgt=s(mq);a2o=r(rgt,"DPTFeatureExtractor"),rgt.forEach(t),n2o=r(F9e," (DPT model)"),F9e.forEach(t),s2o=i(K),Qh=n(K,"LI",{});var T9e=s(Qh);bde=n(T9e,"STRONG",{});var tgt=s(bde);l2o=r(tgt,"flava"),tgt.forEach(t),i2o=r(T9e," \u2014 "),gq=n(T9e,"A",{href:!0});var agt=s(gq);d2o=r(agt,"FlavaFeatureExtractor"),agt.forEach(t),c2o=r(T9e," (FLAVA model)"),T9e.forEach(t),f2o=i(K),Wh=n(K,"LI",{});var M9e=s(Wh);vde=n(M9e,"STRONG",{});var ngt=s(vde);m2o=r(ngt,"glpn"),ngt.forEach(t),g2o=r(M9e," \u2014 "),hq=n(M9e,"A",{href:!0});var sgt=s(hq);h2o=r(sgt,"GLPNFeatureExtractor"),sgt.forEach(t),p2o=r(M9e," (GLPN model)"),M9e.forEach(t),_2o=i(K),Hh=n(K,"LI",{});var E9e=s(Hh);Fde=n(E9e,"STRONG",{});var lgt=s(Fde);u2o=r(lgt,"groupvit"),lgt.forEach(t),b2o=r(E9e," \u2014 "),pq=n(E9e,"A",{href:!0});var igt=s(pq);v2o=r(igt,"CLIPFeatureExtractor"),igt.forEach(t),F2o=r(E9e," (GroupViT model)"),E9e.forEach(t),T2o=i(K),Uh=n(K,"LI",{});var C9e=s(Uh);Tde=n(C9e,"STRONG",{});var dgt=s(Tde);M2o=r(dgt,"hubert"),dgt.forEach(t),E2o=r(C9e," \u2014 "),_q=n(C9e,"A",{href:!0});var cgt=s(_q);C2o=r(cgt,"Wav2Vec2FeatureExtractor"),cgt.forEach(t),w2o=r(C9e," (Hubert model)"),C9e.forEach(t),A2o=i(K),Jh=n(K,"LI",{});var w9e=s(Jh);Mde=n(w9e,"STRONG",{});var fgt=s(Mde);L2o=r(fgt,"imagegpt"),fgt.forEach(t),y2o=r(w9e," \u2014 "),uq=n(w9e,"A",{href:!0});var mgt=s(uq);x2o=r(mgt,"ImageGPTFeatureExtractor"),mgt.forEach(t),$2o=r(w9e," (ImageGPT model)"),w9e.forEach(t),k2o=i(K),Yh=n(K,"LI",{});var A9e=s(Yh);Ede=n(A9e,"STRONG",{});var ggt=s(Ede);S2o=r(ggt,"layoutlmv2"),ggt.forEach(t),R2o=r(A9e," \u2014 "),bq=n(A9e,"A",{href:!0});var hgt=s(bq);P2o=r(hgt,"LayoutLMv2FeatureExtractor"),hgt.forEach(t),B2o=r(A9e," (LayoutLMv2 model)"),A9e.forEach(t),I2o=i(K),Kh=n(K,"LI",{});var L9e=s(Kh);Cde=n(L9e,"STRONG",{});var pgt=s(Cde);N2o=r(pgt,"layoutlmv3"),pgt.forEach(t),q2o=r(L9e," \u2014 "),vq=n(L9e,"A",{href:!0});var _gt=s(vq);j2o=r(_gt,"LayoutLMv3FeatureExtractor"),_gt.forEach(t),D2o=r(L9e," (LayoutLMv3 model)"),L9e.forEach(t),G2o=i(K),Zh=n(K,"LI",{});var y9e=s(Zh);wde=n(y9e,"STRONG",{});var ugt=s(wde);O2o=r(ugt,"levit"),ugt.forEach(t),V2o=r(y9e," \u2014 "),Fq=n(y9e,"A",{href:!0});var bgt=s(Fq);X2o=r(bgt,"LevitFeatureExtractor"),bgt.forEach(t),z2o=r(y9e," (LeViT model)"),y9e.forEach(t),Q2o=i(K),ep=n(K,"LI",{});var x9e=s(ep);Ade=n(x9e,"STRONG",{});var vgt=s(Ade);W2o=r(vgt,"maskformer"),vgt.forEach(t),H2o=r(x9e," \u2014 "),Tq=n(x9e,"A",{href:!0});var Fgt=s(Tq);U2o=r(Fgt,"MaskFormerFeatureExtractor"),Fgt.forEach(t),J2o=r(x9e," (MaskFormer model)"),x9e.forEach(t),Y2o=i(K),op=n(K,"LI",{});var $9e=s(op);Lde=n($9e,"STRONG",{});var Tgt=s(Lde);K2o=r(Tgt,"mctct"),Tgt.forEach(t),Z2o=r($9e," \u2014 "),Mq=n($9e,"A",{href:!0});var Mgt=s(Mq);e1o=r(Mgt,"MCTCTFeatureExtractor"),Mgt.forEach(t),o1o=r($9e," (M-CTC-T model)"),$9e.forEach(t),r1o=i(K),rp=n(K,"LI",{});var k9e=s(rp);yde=n(k9e,"STRONG",{});var Egt=s(yde);t1o=r(Egt,"mobilevit"),Egt.forEach(t),a1o=r(k9e," \u2014 "),Eq=n(k9e,"A",{href:!0});var Cgt=s(Eq);n1o=r(Cgt,"MobileViTFeatureExtractor"),Cgt.forEach(t),s1o=r(k9e," (MobileViT model)"),k9e.forEach(t),l1o=i(K),tp=n(K,"LI",{});var S9e=s(tp);xde=n(S9e,"STRONG",{});var wgt=s(xde);i1o=r(wgt,"perceiver"),wgt.forEach(t),d1o=r(S9e," \u2014 "),Cq=n(S9e,"A",{href:!0});var Agt=s(Cq);c1o=r(Agt,"PerceiverFeatureExtractor"),Agt.forEach(t),f1o=r(S9e," (Perceiver model)"),S9e.forEach(t),m1o=i(K),ap=n(K,"LI",{});var R9e=s(ap);$de=n(R9e,"STRONG",{});var Lgt=s($de);g1o=r(Lgt,"poolformer"),Lgt.forEach(t),h1o=r(R9e," \u2014 "),wq=n(R9e,"A",{href:!0});var ygt=s(wq);p1o=r(ygt,"PoolFormerFeatureExtractor"),ygt.forEach(t),_1o=r(R9e," (PoolFormer model)"),R9e.forEach(t),u1o=i(K),np=n(K,"LI",{});var P9e=s(np);kde=n(P9e,"STRONG",{});var xgt=s(kde);b1o=r(xgt,"regnet"),xgt.forEach(t),v1o=r(P9e," \u2014 "),Aq=n(P9e,"A",{href:!0});var $gt=s(Aq);F1o=r($gt,"ConvNextFeatureExtractor"),$gt.forEach(t),T1o=r(P9e," (RegNet model)"),P9e.forEach(t),M1o=i(K),sp=n(K,"LI",{});var B9e=s(sp);Sde=n(B9e,"STRONG",{});var kgt=s(Sde);E1o=r(kgt,"resnet"),kgt.forEach(t),C1o=r(B9e," \u2014 "),Lq=n(B9e,"A",{href:!0});var Sgt=s(Lq);w1o=r(Sgt,"ConvNextFeatureExtractor"),Sgt.forEach(t),A1o=r(B9e," (ResNet model)"),B9e.forEach(t),L1o=i(K),lp=n(K,"LI",{});var I9e=s(lp);Rde=n(I9e,"STRONG",{});var Rgt=s(Rde);y1o=r(Rgt,"segformer"),Rgt.forEach(t),x1o=r(I9e," \u2014 "),yq=n(I9e,"A",{href:!0});var Pgt=s(yq);$1o=r(Pgt,"SegformerFeatureExtractor"),Pgt.forEach(t),k1o=r(I9e," (SegFormer model)"),I9e.forEach(t),S1o=i(K),ip=n(K,"LI",{});var N9e=s(ip);Pde=n(N9e,"STRONG",{});var Bgt=s(Pde);R1o=r(Bgt,"speech_to_text"),Bgt.forEach(t),P1o=r(N9e," \u2014 "),xq=n(N9e,"A",{href:!0});var Igt=s(xq);B1o=r(Igt,"Speech2TextFeatureExtractor"),Igt.forEach(t),I1o=r(N9e," (Speech2Text model)"),N9e.forEach(t),N1o=i(K),dp=n(K,"LI",{});var q9e=s(dp);Bde=n(q9e,"STRONG",{});var Ngt=s(Bde);q1o=r(Ngt,"swin"),Ngt.forEach(t),j1o=r(q9e," \u2014 "),$q=n(q9e,"A",{href:!0});var qgt=s($q);D1o=r(qgt,"ViTFeatureExtractor"),qgt.forEach(t),G1o=r(q9e," (Swin Transformer model)"),q9e.forEach(t),O1o=i(K),cp=n(K,"LI",{});var j9e=s(cp);Ide=n(j9e,"STRONG",{});var jgt=s(Ide);V1o=r(jgt,"van"),jgt.forEach(t),X1o=r(j9e," \u2014 "),kq=n(j9e,"A",{href:!0});var Dgt=s(kq);z1o=r(Dgt,"ConvNextFeatureExtractor"),Dgt.forEach(t),Q1o=r(j9e," (VAN model)"),j9e.forEach(t),W1o=i(K),fp=n(K,"LI",{});var D9e=s(fp);Nde=n(D9e,"STRONG",{});var Ggt=s(Nde);H1o=r(Ggt,"vilt"),Ggt.forEach(t),U1o=r(D9e," \u2014 "),Sq=n(D9e,"A",{href:!0});var Ogt=s(Sq);J1o=r(Ogt,"ViltFeatureExtractor"),Ogt.forEach(t),Y1o=r(D9e," (ViLT model)"),D9e.forEach(t),K1o=i(K),mp=n(K,"LI",{});var G9e=s(mp);qde=n(G9e,"STRONG",{});var Vgt=s(qde);Z1o=r(Vgt,"vit"),Vgt.forEach(t),ebo=r(G9e," \u2014 "),Rq=n(G9e,"A",{href:!0});var Xgt=s(Rq);obo=r(Xgt,"ViTFeatureExtractor"),Xgt.forEach(t),rbo=r(G9e," (ViT model)"),G9e.forEach(t),tbo=i(K),gp=n(K,"LI",{});var O9e=s(gp);jde=n(O9e,"STRONG",{});var zgt=s(jde);abo=r(zgt,"vit_mae"),zgt.forEach(t),nbo=r(O9e," \u2014 "),Pq=n(O9e,"A",{href:!0});var Qgt=s(Pq);sbo=r(Qgt,"ViTFeatureExtractor"),Qgt.forEach(t),lbo=r(O9e," (ViTMAE model)"),O9e.forEach(t),ibo=i(K),hp=n(K,"LI",{});var V9e=s(hp);Dde=n(V9e,"STRONG",{});var Wgt=s(Dde);dbo=r(Wgt,"wav2vec2"),Wgt.forEach(t),cbo=r(V9e," \u2014 "),Bq=n(V9e,"A",{href:!0});var Hgt=s(Bq);fbo=r(Hgt,"Wav2Vec2FeatureExtractor"),Hgt.forEach(t),mbo=r(V9e," (Wav2Vec2 model)"),V9e.forEach(t),gbo=i(K),pp=n(K,"LI",{});var X9e=s(pp);Gde=n(X9e,"STRONG",{});var Ugt=s(Gde);hbo=r(Ugt,"wav2vec2-conformer"),Ugt.forEach(t),pbo=r(X9e," \u2014 "),Iq=n(X9e,"A",{href:!0});var Jgt=s(Iq);_bo=r(Jgt,"Wav2Vec2FeatureExtractor"),Jgt.forEach(t),ubo=r(X9e," (Wav2Vec2-Conformer model)"),X9e.forEach(t),bbo=i(K),_p=n(K,"LI",{});var z9e=s(_p);Ode=n(z9e,"STRONG",{});var Ygt=s(Ode);vbo=r(Ygt,"yolos"),Ygt.forEach(t),Fbo=r(z9e," \u2014 "),Nq=n(z9e,"A",{href:!0});var Kgt=s(Nq);Tbo=r(Kgt,"YolosFeatureExtractor"),Kgt.forEach(t),Mbo=r(z9e," (YOLOS model)"),z9e.forEach(t),K.forEach(t),Ebo=i(na),T(up.$$.fragment,na),Cbo=i(na),T(bp.$$.fragment,na),na.forEach(t),wbo=i(ol),vp=n(ol,"DIV",{class:!0});var IQe=s(vp);T(xL.$$.fragment,IQe),Abo=i(IQe),Vde=n(IQe,"P",{});var Zgt=s(Vde);Lbo=r(Zgt,"Register a new feature extractor for this class."),Zgt.forEach(t),IQe.forEach(t),ol.forEach(t),RXe=i(f),Di=n(f,"H2",{class:!0});var NQe=s(Di);Fp=n(NQe,"A",{id:!0,class:!0,href:!0});var eht=s(Fp);Xde=n(eht,"SPAN",{});var oht=s(Xde);T($L.$$.fragment,oht),oht.forEach(t),eht.forEach(t),ybo=i(NQe),zde=n(NQe,"SPAN",{});var rht=s(zde);xbo=r(rht,"AutoProcessor"),rht.forEach(t),NQe.forEach(t),PXe=i(f),$o=n(f,"DIV",{class:!0});var rl=s($o);T(kL.$$.fragment,rl),$bo=i(rl),SL=n(rl,"P",{});var qQe=s(SL);kbo=r(qQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),qq=n(qQe,"A",{href:!0});var tht=s(qq);Sbo=r(tht,"AutoProcessor.from_pretrained()"),tht.forEach(t),Rbo=r(qQe," class method."),qQe.forEach(t),Pbo=i(rl),RL=n(rl,"P",{});var jQe=s(RL);Bbo=r(jQe,"This class cannot be instantiated directly using "),Qde=n(jQe,"CODE",{});var aht=s(Qde);Ibo=r(aht,"__init__()"),aht.forEach(t),Nbo=r(jQe," (throws an error)."),jQe.forEach(t),qbo=i(rl),Je=n(rl,"DIV",{class:!0});var sa=s(Je);T(PL.$$.fragment,sa),jbo=i(sa),Wde=n(sa,"P",{});var nht=s(Wde);Dbo=r(nht,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),nht.forEach(t),Gbo=i(sa),Gi=n(sa,"P",{});var zre=s(Gi);Obo=r(zre,"The processor class to instantiate is selected based on the "),Hde=n(zre,"CODE",{});var sht=s(Hde);Vbo=r(sht,"model_type"),sht.forEach(t),Xbo=r(zre,` property of the config object (either
passed as an argument or loaded from `),Ude=n(zre,"CODE",{});var lht=s(Ude);zbo=r(lht,"pretrained_model_name_or_path"),lht.forEach(t),Qbo=r(zre," if possible):"),zre.forEach(t),Wbo=i(sa),pe=n(sa,"UL",{});var be=s(pe);Tp=n(be,"LI",{});var Q9e=s(Tp);Jde=n(Q9e,"STRONG",{});var iht=s(Jde);Hbo=r(iht,"clip"),iht.forEach(t),Ubo=r(Q9e," \u2014 "),jq=n(Q9e,"A",{href:!0});var dht=s(jq);Jbo=r(dht,"CLIPProcessor"),dht.forEach(t),Ybo=r(Q9e," (CLIP model)"),Q9e.forEach(t),Kbo=i(be),Mp=n(be,"LI",{});var W9e=s(Mp);Yde=n(W9e,"STRONG",{});var cht=s(Yde);Zbo=r(cht,"flava"),cht.forEach(t),evo=r(W9e," \u2014 "),Dq=n(W9e,"A",{href:!0});var fht=s(Dq);ovo=r(fht,"FlavaProcessor"),fht.forEach(t),rvo=r(W9e," (FLAVA model)"),W9e.forEach(t),tvo=i(be),Ep=n(be,"LI",{});var H9e=s(Ep);Kde=n(H9e,"STRONG",{});var mht=s(Kde);avo=r(mht,"groupvit"),mht.forEach(t),nvo=r(H9e," \u2014 "),Gq=n(H9e,"A",{href:!0});var ght=s(Gq);svo=r(ght,"CLIPProcessor"),ght.forEach(t),lvo=r(H9e," (GroupViT model)"),H9e.forEach(t),ivo=i(be),Cp=n(be,"LI",{});var U9e=s(Cp);Zde=n(U9e,"STRONG",{});var hht=s(Zde);dvo=r(hht,"layoutlmv2"),hht.forEach(t),cvo=r(U9e," \u2014 "),Oq=n(U9e,"A",{href:!0});var pht=s(Oq);fvo=r(pht,"LayoutLMv2Processor"),pht.forEach(t),mvo=r(U9e," (LayoutLMv2 model)"),U9e.forEach(t),gvo=i(be),wp=n(be,"LI",{});var J9e=s(wp);ece=n(J9e,"STRONG",{});var _ht=s(ece);hvo=r(_ht,"layoutlmv3"),_ht.forEach(t),pvo=r(J9e," \u2014 "),Vq=n(J9e,"A",{href:!0});var uht=s(Vq);_vo=r(uht,"LayoutLMv3Processor"),uht.forEach(t),uvo=r(J9e," (LayoutLMv3 model)"),J9e.forEach(t),bvo=i(be),Ap=n(be,"LI",{});var Y9e=s(Ap);oce=n(Y9e,"STRONG",{});var bht=s(oce);vvo=r(bht,"layoutxlm"),bht.forEach(t),Fvo=r(Y9e," \u2014 "),Xq=n(Y9e,"A",{href:!0});var vht=s(Xq);Tvo=r(vht,"LayoutXLMProcessor"),vht.forEach(t),Mvo=r(Y9e," (LayoutXLM model)"),Y9e.forEach(t),Evo=i(be),Lp=n(be,"LI",{});var K9e=s(Lp);rce=n(K9e,"STRONG",{});var Fht=s(rce);Cvo=r(Fht,"sew"),Fht.forEach(t),wvo=r(K9e," \u2014 "),zq=n(K9e,"A",{href:!0});var Tht=s(zq);Avo=r(Tht,"Wav2Vec2Processor"),Tht.forEach(t),Lvo=r(K9e," (SEW model)"),K9e.forEach(t),yvo=i(be),yp=n(be,"LI",{});var Z9e=s(yp);tce=n(Z9e,"STRONG",{});var Mht=s(tce);xvo=r(Mht,"sew-d"),Mht.forEach(t),$vo=r(Z9e," \u2014 "),Qq=n(Z9e,"A",{href:!0});var Eht=s(Qq);kvo=r(Eht,"Wav2Vec2Processor"),Eht.forEach(t),Svo=r(Z9e," (SEW-D model)"),Z9e.forEach(t),Rvo=i(be),xp=n(be,"LI",{});var exe=s(xp);ace=n(exe,"STRONG",{});var Cht=s(ace);Pvo=r(Cht,"speech_to_text"),Cht.forEach(t),Bvo=r(exe," \u2014 "),Wq=n(exe,"A",{href:!0});var wht=s(Wq);Ivo=r(wht,"Speech2TextProcessor"),wht.forEach(t),Nvo=r(exe," (Speech2Text model)"),exe.forEach(t),qvo=i(be),$p=n(be,"LI",{});var oxe=s($p);nce=n(oxe,"STRONG",{});var Aht=s(nce);jvo=r(Aht,"speech_to_text_2"),Aht.forEach(t),Dvo=r(oxe," \u2014 "),Hq=n(oxe,"A",{href:!0});var Lht=s(Hq);Gvo=r(Lht,"Speech2Text2Processor"),Lht.forEach(t),Ovo=r(oxe," (Speech2Text2 model)"),oxe.forEach(t),Vvo=i(be),kp=n(be,"LI",{});var rxe=s(kp);sce=n(rxe,"STRONG",{});var yht=s(sce);Xvo=r(yht,"trocr"),yht.forEach(t),zvo=r(rxe," \u2014 "),Uq=n(rxe,"A",{href:!0});var xht=s(Uq);Qvo=r(xht,"TrOCRProcessor"),xht.forEach(t),Wvo=r(rxe," (TrOCR model)"),rxe.forEach(t),Hvo=i(be),Sp=n(be,"LI",{});var txe=s(Sp);lce=n(txe,"STRONG",{});var $ht=s(lce);Uvo=r($ht,"unispeech"),$ht.forEach(t),Jvo=r(txe," \u2014 "),Jq=n(txe,"A",{href:!0});var kht=s(Jq);Yvo=r(kht,"Wav2Vec2Processor"),kht.forEach(t),Kvo=r(txe," (UniSpeech model)"),txe.forEach(t),Zvo=i(be),Rp=n(be,"LI",{});var axe=s(Rp);ice=n(axe,"STRONG",{});var Sht=s(ice);eFo=r(Sht,"unispeech-sat"),Sht.forEach(t),oFo=r(axe," \u2014 "),Yq=n(axe,"A",{href:!0});var Rht=s(Yq);rFo=r(Rht,"Wav2Vec2Processor"),Rht.forEach(t),tFo=r(axe," (UniSpeechSat model)"),axe.forEach(t),aFo=i(be),Pp=n(be,"LI",{});var nxe=s(Pp);dce=n(nxe,"STRONG",{});var Pht=s(dce);nFo=r(Pht,"vilt"),Pht.forEach(t),sFo=r(nxe," \u2014 "),Kq=n(nxe,"A",{href:!0});var Bht=s(Kq);lFo=r(Bht,"ViltProcessor"),Bht.forEach(t),iFo=r(nxe," (ViLT model)"),nxe.forEach(t),dFo=i(be),Bp=n(be,"LI",{});var sxe=s(Bp);cce=n(sxe,"STRONG",{});var Iht=s(cce);cFo=r(Iht,"vision-text-dual-encoder"),Iht.forEach(t),fFo=r(sxe," \u2014 "),Zq=n(sxe,"A",{href:!0});var Nht=s(Zq);mFo=r(Nht,"VisionTextDualEncoderProcessor"),Nht.forEach(t),gFo=r(sxe," (VisionTextDualEncoder model)"),sxe.forEach(t),hFo=i(be),Ip=n(be,"LI",{});var lxe=s(Ip);fce=n(lxe,"STRONG",{});var qht=s(fce);pFo=r(qht,"wav2vec2"),qht.forEach(t),_Fo=r(lxe," \u2014 "),ej=n(lxe,"A",{href:!0});var jht=s(ej);uFo=r(jht,"Wav2Vec2Processor"),jht.forEach(t),bFo=r(lxe," (Wav2Vec2 model)"),lxe.forEach(t),vFo=i(be),Np=n(be,"LI",{});var ixe=s(Np);mce=n(ixe,"STRONG",{});var Dht=s(mce);FFo=r(Dht,"wav2vec2-conformer"),Dht.forEach(t),TFo=r(ixe," \u2014 "),oj=n(ixe,"A",{href:!0});var Ght=s(oj);MFo=r(Ght,"Wav2Vec2Processor"),Ght.forEach(t),EFo=r(ixe," (Wav2Vec2-Conformer model)"),ixe.forEach(t),CFo=i(be),qp=n(be,"LI",{});var dxe=s(qp);gce=n(dxe,"STRONG",{});var Oht=s(gce);wFo=r(Oht,"wavlm"),Oht.forEach(t),AFo=r(dxe," \u2014 "),rj=n(dxe,"A",{href:!0});var Vht=s(rj);LFo=r(Vht,"Wav2Vec2Processor"),Vht.forEach(t),yFo=r(dxe," (WavLM model)"),dxe.forEach(t),be.forEach(t),xFo=i(sa),T(jp.$$.fragment,sa),$Fo=i(sa),T(Dp.$$.fragment,sa),sa.forEach(t),kFo=i(rl),Gp=n(rl,"DIV",{class:!0});var DQe=s(Gp);T(BL.$$.fragment,DQe),SFo=i(DQe),hce=n(DQe,"P",{});var Xht=s(hce);RFo=r(Xht,"Register a new processor for this class."),Xht.forEach(t),DQe.forEach(t),rl.forEach(t),BXe=i(f),Oi=n(f,"H2",{class:!0});var GQe=s(Oi);Op=n(GQe,"A",{id:!0,class:!0,href:!0});var zht=s(Op);pce=n(zht,"SPAN",{});var Qht=s(pce);T(IL.$$.fragment,Qht),Qht.forEach(t),zht.forEach(t),PFo=i(GQe),_ce=n(GQe,"SPAN",{});var Wht=s(_ce);BFo=r(Wht,"AutoModel"),Wht.forEach(t),GQe.forEach(t),IXe=i(f),ko=n(f,"DIV",{class:!0});var tl=s(ko);T(NL.$$.fragment,tl),IFo=i(tl),Vi=n(tl,"P",{});var Qre=s(Vi);NFo=r(Qre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tj=n(Qre,"A",{href:!0});var Hht=s(tj);qFo=r(Hht,"from_pretrained()"),Hht.forEach(t),jFo=r(Qre," class method or the "),aj=n(Qre,"A",{href:!0});var Uht=s(aj);DFo=r(Uht,"from_config()"),Uht.forEach(t),GFo=r(Qre,` class
method.`),Qre.forEach(t),OFo=i(tl),qL=n(tl,"P",{});var OQe=s(qL);VFo=r(OQe,"This class cannot be instantiated directly using "),uce=n(OQe,"CODE",{});var Jht=s(uce);XFo=r(Jht,"__init__()"),Jht.forEach(t),zFo=r(OQe," (throws an error)."),OQe.forEach(t),QFo=i(tl),it=n(tl,"DIV",{class:!0});var h6=s(it);T(jL.$$.fragment,h6),WFo=i(h6),bce=n(h6,"P",{});var Yht=s(bce);HFo=r(Yht,"Instantiates one of the base model classes of the library from a configuration."),Yht.forEach(t),UFo=i(h6),Xi=n(h6,"P",{});var Wre=s(Xi);JFo=r(Wre,`Note:
Loading a model from its configuration file does `),vce=n(Wre,"STRONG",{});var Kht=s(vce);YFo=r(Kht,"not"),Kht.forEach(t),KFo=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=n(Wre,"A",{href:!0});var Zht=s(nj);ZFo=r(Zht,"from_pretrained()"),Zht.forEach(t),eTo=r(Wre," to load the model weights."),Wre.forEach(t),oTo=i(h6),T(Vp.$$.fragment,h6),h6.forEach(t),rTo=i(tl),Ye=n(tl,"DIV",{class:!0});var la=s(Ye);T(DL.$$.fragment,la),tTo=i(la),Fce=n(la,"P",{});var ept=s(Fce);aTo=r(ept,"Instantiate one of the base model classes of the library from a pretrained model."),ept.forEach(t),nTo=i(la),Ia=n(la,"P",{});var p6=s(Ia);sTo=r(p6,"The model class to instantiate is selected based on the "),Tce=n(p6,"CODE",{});var opt=s(Tce);lTo=r(opt,"model_type"),opt.forEach(t),iTo=r(p6,` property of the config object (either
passed as an argument or loaded from `),Mce=n(p6,"CODE",{});var rpt=s(Mce);dTo=r(rpt,"pretrained_model_name_or_path"),rpt.forEach(t),cTo=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=n(p6,"CODE",{});var tpt=s(Ece);fTo=r(tpt,"pretrained_model_name_or_path"),tpt.forEach(t),mTo=r(p6,":"),p6.forEach(t),gTo=i(la),y=n(la,"UL",{});var x=s(y);Xp=n(x,"LI",{});var cxe=s(Xp);Cce=n(cxe,"STRONG",{});var apt=s(Cce);hTo=r(apt,"albert"),apt.forEach(t),pTo=r(cxe," \u2014 "),sj=n(cxe,"A",{href:!0});var npt=s(sj);_To=r(npt,"AlbertModel"),npt.forEach(t),uTo=r(cxe," (ALBERT model)"),cxe.forEach(t),bTo=i(x),zp=n(x,"LI",{});var fxe=s(zp);wce=n(fxe,"STRONG",{});var spt=s(wce);vTo=r(spt,"bart"),spt.forEach(t),FTo=r(fxe," \u2014 "),lj=n(fxe,"A",{href:!0});var lpt=s(lj);TTo=r(lpt,"BartModel"),lpt.forEach(t),MTo=r(fxe," (BART model)"),fxe.forEach(t),ETo=i(x),Qp=n(x,"LI",{});var mxe=s(Qp);Ace=n(mxe,"STRONG",{});var ipt=s(Ace);CTo=r(ipt,"beit"),ipt.forEach(t),wTo=r(mxe," \u2014 "),ij=n(mxe,"A",{href:!0});var dpt=s(ij);ATo=r(dpt,"BeitModel"),dpt.forEach(t),LTo=r(mxe," (BEiT model)"),mxe.forEach(t),yTo=i(x),Wp=n(x,"LI",{});var gxe=s(Wp);Lce=n(gxe,"STRONG",{});var cpt=s(Lce);xTo=r(cpt,"bert"),cpt.forEach(t),$To=r(gxe," \u2014 "),dj=n(gxe,"A",{href:!0});var fpt=s(dj);kTo=r(fpt,"BertModel"),fpt.forEach(t),STo=r(gxe," (BERT model)"),gxe.forEach(t),RTo=i(x),Hp=n(x,"LI",{});var hxe=s(Hp);yce=n(hxe,"STRONG",{});var mpt=s(yce);PTo=r(mpt,"bert-generation"),mpt.forEach(t),BTo=r(hxe," \u2014 "),cj=n(hxe,"A",{href:!0});var gpt=s(cj);ITo=r(gpt,"BertGenerationEncoder"),gpt.forEach(t),NTo=r(hxe," (Bert Generation model)"),hxe.forEach(t),qTo=i(x),Up=n(x,"LI",{});var pxe=s(Up);xce=n(pxe,"STRONG",{});var hpt=s(xce);jTo=r(hpt,"big_bird"),hpt.forEach(t),DTo=r(pxe," \u2014 "),fj=n(pxe,"A",{href:!0});var ppt=s(fj);GTo=r(ppt,"BigBirdModel"),ppt.forEach(t),OTo=r(pxe," (BigBird model)"),pxe.forEach(t),VTo=i(x),Jp=n(x,"LI",{});var _xe=s(Jp);$ce=n(_xe,"STRONG",{});var _pt=s($ce);XTo=r(_pt,"bigbird_pegasus"),_pt.forEach(t),zTo=r(_xe," \u2014 "),mj=n(_xe,"A",{href:!0});var upt=s(mj);QTo=r(upt,"BigBirdPegasusModel"),upt.forEach(t),WTo=r(_xe," (BigBird-Pegasus model)"),_xe.forEach(t),HTo=i(x),Yp=n(x,"LI",{});var uxe=s(Yp);kce=n(uxe,"STRONG",{});var bpt=s(kce);UTo=r(bpt,"blenderbot"),bpt.forEach(t),JTo=r(uxe," \u2014 "),gj=n(uxe,"A",{href:!0});var vpt=s(gj);YTo=r(vpt,"BlenderbotModel"),vpt.forEach(t),KTo=r(uxe," (Blenderbot model)"),uxe.forEach(t),ZTo=i(x),Kp=n(x,"LI",{});var bxe=s(Kp);Sce=n(bxe,"STRONG",{});var Fpt=s(Sce);e8o=r(Fpt,"blenderbot-small"),Fpt.forEach(t),o8o=r(bxe," \u2014 "),hj=n(bxe,"A",{href:!0});var Tpt=s(hj);r8o=r(Tpt,"BlenderbotSmallModel"),Tpt.forEach(t),t8o=r(bxe," (BlenderbotSmall model)"),bxe.forEach(t),a8o=i(x),Zp=n(x,"LI",{});var vxe=s(Zp);Rce=n(vxe,"STRONG",{});var Mpt=s(Rce);n8o=r(Mpt,"bloom"),Mpt.forEach(t),s8o=r(vxe," \u2014 "),pj=n(vxe,"A",{href:!0});var Ept=s(pj);l8o=r(Ept,"BloomModel"),Ept.forEach(t),i8o=r(vxe," (BLOOM model)"),vxe.forEach(t),d8o=i(x),e_=n(x,"LI",{});var Fxe=s(e_);Pce=n(Fxe,"STRONG",{});var Cpt=s(Pce);c8o=r(Cpt,"camembert"),Cpt.forEach(t),f8o=r(Fxe," \u2014 "),_j=n(Fxe,"A",{href:!0});var wpt=s(_j);m8o=r(wpt,"CamembertModel"),wpt.forEach(t),g8o=r(Fxe," (CamemBERT model)"),Fxe.forEach(t),h8o=i(x),o_=n(x,"LI",{});var Txe=s(o_);Bce=n(Txe,"STRONG",{});var Apt=s(Bce);p8o=r(Apt,"canine"),Apt.forEach(t),_8o=r(Txe," \u2014 "),uj=n(Txe,"A",{href:!0});var Lpt=s(uj);u8o=r(Lpt,"CanineModel"),Lpt.forEach(t),b8o=r(Txe," (CANINE model)"),Txe.forEach(t),v8o=i(x),r_=n(x,"LI",{});var Mxe=s(r_);Ice=n(Mxe,"STRONG",{});var ypt=s(Ice);F8o=r(ypt,"clip"),ypt.forEach(t),T8o=r(Mxe," \u2014 "),bj=n(Mxe,"A",{href:!0});var xpt=s(bj);M8o=r(xpt,"CLIPModel"),xpt.forEach(t),E8o=r(Mxe," (CLIP model)"),Mxe.forEach(t),C8o=i(x),t_=n(x,"LI",{});var Exe=s(t_);Nce=n(Exe,"STRONG",{});var $pt=s(Nce);w8o=r($pt,"codegen"),$pt.forEach(t),A8o=r(Exe," \u2014 "),vj=n(Exe,"A",{href:!0});var kpt=s(vj);L8o=r(kpt,"CodeGenModel"),kpt.forEach(t),y8o=r(Exe," (CodeGen model)"),Exe.forEach(t),x8o=i(x),a_=n(x,"LI",{});var Cxe=s(a_);qce=n(Cxe,"STRONG",{});var Spt=s(qce);$8o=r(Spt,"convbert"),Spt.forEach(t),k8o=r(Cxe," \u2014 "),Fj=n(Cxe,"A",{href:!0});var Rpt=s(Fj);S8o=r(Rpt,"ConvBertModel"),Rpt.forEach(t),R8o=r(Cxe," (ConvBERT model)"),Cxe.forEach(t),P8o=i(x),n_=n(x,"LI",{});var wxe=s(n_);jce=n(wxe,"STRONG",{});var Ppt=s(jce);B8o=r(Ppt,"convnext"),Ppt.forEach(t),I8o=r(wxe," \u2014 "),Tj=n(wxe,"A",{href:!0});var Bpt=s(Tj);N8o=r(Bpt,"ConvNextModel"),Bpt.forEach(t),q8o=r(wxe," (ConvNeXT model)"),wxe.forEach(t),j8o=i(x),s_=n(x,"LI",{});var Axe=s(s_);Dce=n(Axe,"STRONG",{});var Ipt=s(Dce);D8o=r(Ipt,"ctrl"),Ipt.forEach(t),G8o=r(Axe," \u2014 "),Mj=n(Axe,"A",{href:!0});var Npt=s(Mj);O8o=r(Npt,"CTRLModel"),Npt.forEach(t),V8o=r(Axe," (CTRL model)"),Axe.forEach(t),X8o=i(x),l_=n(x,"LI",{});var Lxe=s(l_);Gce=n(Lxe,"STRONG",{});var qpt=s(Gce);z8o=r(qpt,"cvt"),qpt.forEach(t),Q8o=r(Lxe," \u2014 "),Ej=n(Lxe,"A",{href:!0});var jpt=s(Ej);W8o=r(jpt,"CvtModel"),jpt.forEach(t),H8o=r(Lxe," (CvT model)"),Lxe.forEach(t),U8o=i(x),i_=n(x,"LI",{});var yxe=s(i_);Oce=n(yxe,"STRONG",{});var Dpt=s(Oce);J8o=r(Dpt,"data2vec-audio"),Dpt.forEach(t),Y8o=r(yxe," \u2014 "),Cj=n(yxe,"A",{href:!0});var Gpt=s(Cj);K8o=r(Gpt,"Data2VecAudioModel"),Gpt.forEach(t),Z8o=r(yxe," (Data2VecAudio model)"),yxe.forEach(t),eMo=i(x),d_=n(x,"LI",{});var xxe=s(d_);Vce=n(xxe,"STRONG",{});var Opt=s(Vce);oMo=r(Opt,"data2vec-text"),Opt.forEach(t),rMo=r(xxe," \u2014 "),wj=n(xxe,"A",{href:!0});var Vpt=s(wj);tMo=r(Vpt,"Data2VecTextModel"),Vpt.forEach(t),aMo=r(xxe," (Data2VecText model)"),xxe.forEach(t),nMo=i(x),c_=n(x,"LI",{});var $xe=s(c_);Xce=n($xe,"STRONG",{});var Xpt=s(Xce);sMo=r(Xpt,"data2vec-vision"),Xpt.forEach(t),lMo=r($xe," \u2014 "),Aj=n($xe,"A",{href:!0});var zpt=s(Aj);iMo=r(zpt,"Data2VecVisionModel"),zpt.forEach(t),dMo=r($xe," (Data2VecVision model)"),$xe.forEach(t),cMo=i(x),f_=n(x,"LI",{});var kxe=s(f_);zce=n(kxe,"STRONG",{});var Qpt=s(zce);fMo=r(Qpt,"deberta"),Qpt.forEach(t),mMo=r(kxe," \u2014 "),Lj=n(kxe,"A",{href:!0});var Wpt=s(Lj);gMo=r(Wpt,"DebertaModel"),Wpt.forEach(t),hMo=r(kxe," (DeBERTa model)"),kxe.forEach(t),pMo=i(x),m_=n(x,"LI",{});var Sxe=s(m_);Qce=n(Sxe,"STRONG",{});var Hpt=s(Qce);_Mo=r(Hpt,"deberta-v2"),Hpt.forEach(t),uMo=r(Sxe," \u2014 "),yj=n(Sxe,"A",{href:!0});var Upt=s(yj);bMo=r(Upt,"DebertaV2Model"),Upt.forEach(t),vMo=r(Sxe," (DeBERTa-v2 model)"),Sxe.forEach(t),FMo=i(x),g_=n(x,"LI",{});var Rxe=s(g_);Wce=n(Rxe,"STRONG",{});var Jpt=s(Wce);TMo=r(Jpt,"decision_transformer"),Jpt.forEach(t),MMo=r(Rxe," \u2014 "),xj=n(Rxe,"A",{href:!0});var Ypt=s(xj);EMo=r(Ypt,"DecisionTransformerModel"),Ypt.forEach(t),CMo=r(Rxe," (Decision Transformer model)"),Rxe.forEach(t),wMo=i(x),h_=n(x,"LI",{});var Pxe=s(h_);Hce=n(Pxe,"STRONG",{});var Kpt=s(Hce);AMo=r(Kpt,"deit"),Kpt.forEach(t),LMo=r(Pxe," \u2014 "),$j=n(Pxe,"A",{href:!0});var Zpt=s($j);yMo=r(Zpt,"DeiTModel"),Zpt.forEach(t),xMo=r(Pxe," (DeiT model)"),Pxe.forEach(t),$Mo=i(x),p_=n(x,"LI",{});var Bxe=s(p_);Uce=n(Bxe,"STRONG",{});var e_t=s(Uce);kMo=r(e_t,"detr"),e_t.forEach(t),SMo=r(Bxe," \u2014 "),kj=n(Bxe,"A",{href:!0});var o_t=s(kj);RMo=r(o_t,"DetrModel"),o_t.forEach(t),PMo=r(Bxe," (DETR model)"),Bxe.forEach(t),BMo=i(x),__=n(x,"LI",{});var Ixe=s(__);Jce=n(Ixe,"STRONG",{});var r_t=s(Jce);IMo=r(r_t,"distilbert"),r_t.forEach(t),NMo=r(Ixe," \u2014 "),Sj=n(Ixe,"A",{href:!0});var t_t=s(Sj);qMo=r(t_t,"DistilBertModel"),t_t.forEach(t),jMo=r(Ixe," (DistilBERT model)"),Ixe.forEach(t),DMo=i(x),u_=n(x,"LI",{});var Nxe=s(u_);Yce=n(Nxe,"STRONG",{});var a_t=s(Yce);GMo=r(a_t,"dpr"),a_t.forEach(t),OMo=r(Nxe," \u2014 "),Rj=n(Nxe,"A",{href:!0});var n_t=s(Rj);VMo=r(n_t,"DPRQuestionEncoder"),n_t.forEach(t),XMo=r(Nxe," (DPR model)"),Nxe.forEach(t),zMo=i(x),b_=n(x,"LI",{});var qxe=s(b_);Kce=n(qxe,"STRONG",{});var s_t=s(Kce);QMo=r(s_t,"dpt"),s_t.forEach(t),WMo=r(qxe," \u2014 "),Pj=n(qxe,"A",{href:!0});var l_t=s(Pj);HMo=r(l_t,"DPTModel"),l_t.forEach(t),UMo=r(qxe," (DPT model)"),qxe.forEach(t),JMo=i(x),v_=n(x,"LI",{});var jxe=s(v_);Zce=n(jxe,"STRONG",{});var i_t=s(Zce);YMo=r(i_t,"electra"),i_t.forEach(t),KMo=r(jxe," \u2014 "),Bj=n(jxe,"A",{href:!0});var d_t=s(Bj);ZMo=r(d_t,"ElectraModel"),d_t.forEach(t),eEo=r(jxe," (ELECTRA model)"),jxe.forEach(t),oEo=i(x),F_=n(x,"LI",{});var Dxe=s(F_);efe=n(Dxe,"STRONG",{});var c_t=s(efe);rEo=r(c_t,"flaubert"),c_t.forEach(t),tEo=r(Dxe," \u2014 "),Ij=n(Dxe,"A",{href:!0});var f_t=s(Ij);aEo=r(f_t,"FlaubertModel"),f_t.forEach(t),nEo=r(Dxe," (FlauBERT model)"),Dxe.forEach(t),sEo=i(x),T_=n(x,"LI",{});var Gxe=s(T_);ofe=n(Gxe,"STRONG",{});var m_t=s(ofe);lEo=r(m_t,"flava"),m_t.forEach(t),iEo=r(Gxe," \u2014 "),Nj=n(Gxe,"A",{href:!0});var g_t=s(Nj);dEo=r(g_t,"FlavaModel"),g_t.forEach(t),cEo=r(Gxe," (FLAVA model)"),Gxe.forEach(t),fEo=i(x),M_=n(x,"LI",{});var Oxe=s(M_);rfe=n(Oxe,"STRONG",{});var h_t=s(rfe);mEo=r(h_t,"fnet"),h_t.forEach(t),gEo=r(Oxe," \u2014 "),qj=n(Oxe,"A",{href:!0});var p_t=s(qj);hEo=r(p_t,"FNetModel"),p_t.forEach(t),pEo=r(Oxe," (FNet model)"),Oxe.forEach(t),_Eo=i(x),E_=n(x,"LI",{});var Vxe=s(E_);tfe=n(Vxe,"STRONG",{});var __t=s(tfe);uEo=r(__t,"fsmt"),__t.forEach(t),bEo=r(Vxe," \u2014 "),jj=n(Vxe,"A",{href:!0});var u_t=s(jj);vEo=r(u_t,"FSMTModel"),u_t.forEach(t),FEo=r(Vxe," (FairSeq Machine-Translation model)"),Vxe.forEach(t),TEo=i(x),Hs=n(x,"LI",{});var NS=s(Hs);afe=n(NS,"STRONG",{});var b_t=s(afe);MEo=r(b_t,"funnel"),b_t.forEach(t),EEo=r(NS," \u2014 "),Dj=n(NS,"A",{href:!0});var v_t=s(Dj);CEo=r(v_t,"FunnelModel"),v_t.forEach(t),wEo=r(NS," or "),Gj=n(NS,"A",{href:!0});var F_t=s(Gj);AEo=r(F_t,"FunnelBaseModel"),F_t.forEach(t),LEo=r(NS," (Funnel Transformer model)"),NS.forEach(t),yEo=i(x),C_=n(x,"LI",{});var Xxe=s(C_);nfe=n(Xxe,"STRONG",{});var T_t=s(nfe);xEo=r(T_t,"glpn"),T_t.forEach(t),$Eo=r(Xxe," \u2014 "),Oj=n(Xxe,"A",{href:!0});var M_t=s(Oj);kEo=r(M_t,"GLPNModel"),M_t.forEach(t),SEo=r(Xxe," (GLPN model)"),Xxe.forEach(t),REo=i(x),w_=n(x,"LI",{});var zxe=s(w_);sfe=n(zxe,"STRONG",{});var E_t=s(sfe);PEo=r(E_t,"gpt2"),E_t.forEach(t),BEo=r(zxe," \u2014 "),Vj=n(zxe,"A",{href:!0});var C_t=s(Vj);IEo=r(C_t,"GPT2Model"),C_t.forEach(t),NEo=r(zxe," (OpenAI GPT-2 model)"),zxe.forEach(t),qEo=i(x),A_=n(x,"LI",{});var Qxe=s(A_);lfe=n(Qxe,"STRONG",{});var w_t=s(lfe);jEo=r(w_t,"gpt_neo"),w_t.forEach(t),DEo=r(Qxe," \u2014 "),Xj=n(Qxe,"A",{href:!0});var A_t=s(Xj);GEo=r(A_t,"GPTNeoModel"),A_t.forEach(t),OEo=r(Qxe," (GPT Neo model)"),Qxe.forEach(t),VEo=i(x),L_=n(x,"LI",{});var Wxe=s(L_);ife=n(Wxe,"STRONG",{});var L_t=s(ife);XEo=r(L_t,"gpt_neox"),L_t.forEach(t),zEo=r(Wxe," \u2014 "),zj=n(Wxe,"A",{href:!0});var y_t=s(zj);QEo=r(y_t,"GPTNeoXModel"),y_t.forEach(t),WEo=r(Wxe," (GPT NeoX model)"),Wxe.forEach(t),HEo=i(x),y_=n(x,"LI",{});var Hxe=s(y_);dfe=n(Hxe,"STRONG",{});var x_t=s(dfe);UEo=r(x_t,"gptj"),x_t.forEach(t),JEo=r(Hxe," \u2014 "),Qj=n(Hxe,"A",{href:!0});var $_t=s(Qj);YEo=r($_t,"GPTJModel"),$_t.forEach(t),KEo=r(Hxe," (GPT-J model)"),Hxe.forEach(t),ZEo=i(x),x_=n(x,"LI",{});var Uxe=s(x_);cfe=n(Uxe,"STRONG",{});var k_t=s(cfe);eCo=r(k_t,"groupvit"),k_t.forEach(t),oCo=r(Uxe," \u2014 "),Wj=n(Uxe,"A",{href:!0});var S_t=s(Wj);rCo=r(S_t,"GroupViTModel"),S_t.forEach(t),tCo=r(Uxe," (GroupViT model)"),Uxe.forEach(t),aCo=i(x),$_=n(x,"LI",{});var Jxe=s($_);ffe=n(Jxe,"STRONG",{});var R_t=s(ffe);nCo=r(R_t,"hubert"),R_t.forEach(t),sCo=r(Jxe," \u2014 "),Hj=n(Jxe,"A",{href:!0});var P_t=s(Hj);lCo=r(P_t,"HubertModel"),P_t.forEach(t),iCo=r(Jxe," (Hubert model)"),Jxe.forEach(t),dCo=i(x),k_=n(x,"LI",{});var Yxe=s(k_);mfe=n(Yxe,"STRONG",{});var B_t=s(mfe);cCo=r(B_t,"ibert"),B_t.forEach(t),fCo=r(Yxe," \u2014 "),Uj=n(Yxe,"A",{href:!0});var I_t=s(Uj);mCo=r(I_t,"IBertModel"),I_t.forEach(t),gCo=r(Yxe," (I-BERT model)"),Yxe.forEach(t),hCo=i(x),S_=n(x,"LI",{});var Kxe=s(S_);gfe=n(Kxe,"STRONG",{});var N_t=s(gfe);pCo=r(N_t,"imagegpt"),N_t.forEach(t),_Co=r(Kxe," \u2014 "),Jj=n(Kxe,"A",{href:!0});var q_t=s(Jj);uCo=r(q_t,"ImageGPTModel"),q_t.forEach(t),bCo=r(Kxe," (ImageGPT model)"),Kxe.forEach(t),vCo=i(x),R_=n(x,"LI",{});var Zxe=s(R_);hfe=n(Zxe,"STRONG",{});var j_t=s(hfe);FCo=r(j_t,"layoutlm"),j_t.forEach(t),TCo=r(Zxe," \u2014 "),Yj=n(Zxe,"A",{href:!0});var D_t=s(Yj);MCo=r(D_t,"LayoutLMModel"),D_t.forEach(t),ECo=r(Zxe," (LayoutLM model)"),Zxe.forEach(t),CCo=i(x),P_=n(x,"LI",{});var e$e=s(P_);pfe=n(e$e,"STRONG",{});var G_t=s(pfe);wCo=r(G_t,"layoutlmv2"),G_t.forEach(t),ACo=r(e$e," \u2014 "),Kj=n(e$e,"A",{href:!0});var O_t=s(Kj);LCo=r(O_t,"LayoutLMv2Model"),O_t.forEach(t),yCo=r(e$e," (LayoutLMv2 model)"),e$e.forEach(t),xCo=i(x),B_=n(x,"LI",{});var o$e=s(B_);_fe=n(o$e,"STRONG",{});var V_t=s(_fe);$Co=r(V_t,"layoutlmv3"),V_t.forEach(t),kCo=r(o$e," \u2014 "),Zj=n(o$e,"A",{href:!0});var X_t=s(Zj);SCo=r(X_t,"LayoutLMv3Model"),X_t.forEach(t),RCo=r(o$e," (LayoutLMv3 model)"),o$e.forEach(t),PCo=i(x),I_=n(x,"LI",{});var r$e=s(I_);ufe=n(r$e,"STRONG",{});var z_t=s(ufe);BCo=r(z_t,"led"),z_t.forEach(t),ICo=r(r$e," \u2014 "),eD=n(r$e,"A",{href:!0});var Q_t=s(eD);NCo=r(Q_t,"LEDModel"),Q_t.forEach(t),qCo=r(r$e," (LED model)"),r$e.forEach(t),jCo=i(x),N_=n(x,"LI",{});var t$e=s(N_);bfe=n(t$e,"STRONG",{});var W_t=s(bfe);DCo=r(W_t,"levit"),W_t.forEach(t),GCo=r(t$e," \u2014 "),oD=n(t$e,"A",{href:!0});var H_t=s(oD);OCo=r(H_t,"LevitModel"),H_t.forEach(t),VCo=r(t$e," (LeViT model)"),t$e.forEach(t),XCo=i(x),q_=n(x,"LI",{});var a$e=s(q_);vfe=n(a$e,"STRONG",{});var U_t=s(vfe);zCo=r(U_t,"longformer"),U_t.forEach(t),QCo=r(a$e," \u2014 "),rD=n(a$e,"A",{href:!0});var J_t=s(rD);WCo=r(J_t,"LongformerModel"),J_t.forEach(t),HCo=r(a$e," (Longformer model)"),a$e.forEach(t),UCo=i(x),j_=n(x,"LI",{});var n$e=s(j_);Ffe=n(n$e,"STRONG",{});var Y_t=s(Ffe);JCo=r(Y_t,"longt5"),Y_t.forEach(t),YCo=r(n$e," \u2014 "),tD=n(n$e,"A",{href:!0});var K_t=s(tD);KCo=r(K_t,"LongT5Model"),K_t.forEach(t),ZCo=r(n$e," (LongT5 model)"),n$e.forEach(t),e3o=i(x),D_=n(x,"LI",{});var s$e=s(D_);Tfe=n(s$e,"STRONG",{});var Z_t=s(Tfe);o3o=r(Z_t,"luke"),Z_t.forEach(t),r3o=r(s$e," \u2014 "),aD=n(s$e,"A",{href:!0});var eut=s(aD);t3o=r(eut,"LukeModel"),eut.forEach(t),a3o=r(s$e," (LUKE model)"),s$e.forEach(t),n3o=i(x),G_=n(x,"LI",{});var l$e=s(G_);Mfe=n(l$e,"STRONG",{});var out=s(Mfe);s3o=r(out,"lxmert"),out.forEach(t),l3o=r(l$e," \u2014 "),nD=n(l$e,"A",{href:!0});var rut=s(nD);i3o=r(rut,"LxmertModel"),rut.forEach(t),d3o=r(l$e," (LXMERT model)"),l$e.forEach(t),c3o=i(x),O_=n(x,"LI",{});var i$e=s(O_);Efe=n(i$e,"STRONG",{});var tut=s(Efe);f3o=r(tut,"m2m_100"),tut.forEach(t),m3o=r(i$e," \u2014 "),sD=n(i$e,"A",{href:!0});var aut=s(sD);g3o=r(aut,"M2M100Model"),aut.forEach(t),h3o=r(i$e," (M2M100 model)"),i$e.forEach(t),p3o=i(x),V_=n(x,"LI",{});var d$e=s(V_);Cfe=n(d$e,"STRONG",{});var nut=s(Cfe);_3o=r(nut,"marian"),nut.forEach(t),u3o=r(d$e," \u2014 "),lD=n(d$e,"A",{href:!0});var sut=s(lD);b3o=r(sut,"MarianModel"),sut.forEach(t),v3o=r(d$e," (Marian model)"),d$e.forEach(t),F3o=i(x),X_=n(x,"LI",{});var c$e=s(X_);wfe=n(c$e,"STRONG",{});var lut=s(wfe);T3o=r(lut,"maskformer"),lut.forEach(t),M3o=r(c$e," \u2014 "),iD=n(c$e,"A",{href:!0});var iut=s(iD);E3o=r(iut,"MaskFormerModel"),iut.forEach(t),C3o=r(c$e," (MaskFormer model)"),c$e.forEach(t),w3o=i(x),z_=n(x,"LI",{});var f$e=s(z_);Afe=n(f$e,"STRONG",{});var dut=s(Afe);A3o=r(dut,"mbart"),dut.forEach(t),L3o=r(f$e," \u2014 "),dD=n(f$e,"A",{href:!0});var cut=s(dD);y3o=r(cut,"MBartModel"),cut.forEach(t),x3o=r(f$e," (mBART model)"),f$e.forEach(t),$3o=i(x),Q_=n(x,"LI",{});var m$e=s(Q_);Lfe=n(m$e,"STRONG",{});var fut=s(Lfe);k3o=r(fut,"mctct"),fut.forEach(t),S3o=r(m$e," \u2014 "),cD=n(m$e,"A",{href:!0});var mut=s(cD);R3o=r(mut,"MCTCTModel"),mut.forEach(t),P3o=r(m$e," (M-CTC-T model)"),m$e.forEach(t),B3o=i(x),W_=n(x,"LI",{});var g$e=s(W_);yfe=n(g$e,"STRONG",{});var gut=s(yfe);I3o=r(gut,"megatron-bert"),gut.forEach(t),N3o=r(g$e," \u2014 "),fD=n(g$e,"A",{href:!0});var hut=s(fD);q3o=r(hut,"MegatronBertModel"),hut.forEach(t),j3o=r(g$e," (Megatron-BERT model)"),g$e.forEach(t),D3o=i(x),H_=n(x,"LI",{});var h$e=s(H_);xfe=n(h$e,"STRONG",{});var put=s(xfe);G3o=r(put,"mobilebert"),put.forEach(t),O3o=r(h$e," \u2014 "),mD=n(h$e,"A",{href:!0});var _ut=s(mD);V3o=r(_ut,"MobileBertModel"),_ut.forEach(t),X3o=r(h$e," (MobileBERT model)"),h$e.forEach(t),z3o=i(x),U_=n(x,"LI",{});var p$e=s(U_);$fe=n(p$e,"STRONG",{});var uut=s($fe);Q3o=r(uut,"mobilevit"),uut.forEach(t),W3o=r(p$e," \u2014 "),gD=n(p$e,"A",{href:!0});var but=s(gD);H3o=r(but,"MobileViTModel"),but.forEach(t),U3o=r(p$e," (MobileViT model)"),p$e.forEach(t),J3o=i(x),J_=n(x,"LI",{});var _$e=s(J_);kfe=n(_$e,"STRONG",{});var vut=s(kfe);Y3o=r(vut,"mpnet"),vut.forEach(t),K3o=r(_$e," \u2014 "),hD=n(_$e,"A",{href:!0});var Fut=s(hD);Z3o=r(Fut,"MPNetModel"),Fut.forEach(t),e5o=r(_$e," (MPNet model)"),_$e.forEach(t),o5o=i(x),Y_=n(x,"LI",{});var u$e=s(Y_);Sfe=n(u$e,"STRONG",{});var Tut=s(Sfe);r5o=r(Tut,"mt5"),Tut.forEach(t),t5o=r(u$e," \u2014 "),pD=n(u$e,"A",{href:!0});var Mut=s(pD);a5o=r(Mut,"MT5Model"),Mut.forEach(t),n5o=r(u$e," (MT5 model)"),u$e.forEach(t),s5o=i(x),K_=n(x,"LI",{});var b$e=s(K_);Rfe=n(b$e,"STRONG",{});var Eut=s(Rfe);l5o=r(Eut,"mvp"),Eut.forEach(t),i5o=r(b$e," \u2014 "),_D=n(b$e,"A",{href:!0});var Cut=s(_D);d5o=r(Cut,"MvpModel"),Cut.forEach(t),c5o=r(b$e," (MVP model)"),b$e.forEach(t),f5o=i(x),Z_=n(x,"LI",{});var v$e=s(Z_);Pfe=n(v$e,"STRONG",{});var wut=s(Pfe);m5o=r(wut,"nezha"),wut.forEach(t),g5o=r(v$e," \u2014 "),uD=n(v$e,"A",{href:!0});var Aut=s(uD);h5o=r(Aut,"NezhaModel"),Aut.forEach(t),p5o=r(v$e," (Nezha model)"),v$e.forEach(t),_5o=i(x),eu=n(x,"LI",{});var F$e=s(eu);Bfe=n(F$e,"STRONG",{});var Lut=s(Bfe);u5o=r(Lut,"nllb"),Lut.forEach(t),b5o=r(F$e," \u2014 "),bD=n(F$e,"A",{href:!0});var yut=s(bD);v5o=r(yut,"M2M100Model"),yut.forEach(t),F5o=r(F$e," (NLLB model)"),F$e.forEach(t),T5o=i(x),ou=n(x,"LI",{});var T$e=s(ou);Ife=n(T$e,"STRONG",{});var xut=s(Ife);M5o=r(xut,"nystromformer"),xut.forEach(t),E5o=r(T$e," \u2014 "),vD=n(T$e,"A",{href:!0});var $ut=s(vD);C5o=r($ut,"NystromformerModel"),$ut.forEach(t),w5o=r(T$e," (Nystr\xF6mformer model)"),T$e.forEach(t),A5o=i(x),ru=n(x,"LI",{});var M$e=s(ru);Nfe=n(M$e,"STRONG",{});var kut=s(Nfe);L5o=r(kut,"openai-gpt"),kut.forEach(t),y5o=r(M$e," \u2014 "),FD=n(M$e,"A",{href:!0});var Sut=s(FD);x5o=r(Sut,"OpenAIGPTModel"),Sut.forEach(t),$5o=r(M$e," (OpenAI GPT model)"),M$e.forEach(t),k5o=i(x),tu=n(x,"LI",{});var E$e=s(tu);qfe=n(E$e,"STRONG",{});var Rut=s(qfe);S5o=r(Rut,"opt"),Rut.forEach(t),R5o=r(E$e," \u2014 "),TD=n(E$e,"A",{href:!0});var Put=s(TD);P5o=r(Put,"OPTModel"),Put.forEach(t),B5o=r(E$e," (OPT model)"),E$e.forEach(t),I5o=i(x),au=n(x,"LI",{});var C$e=s(au);jfe=n(C$e,"STRONG",{});var But=s(jfe);N5o=r(But,"pegasus"),But.forEach(t),q5o=r(C$e," \u2014 "),MD=n(C$e,"A",{href:!0});var Iut=s(MD);j5o=r(Iut,"PegasusModel"),Iut.forEach(t),D5o=r(C$e," (Pegasus model)"),C$e.forEach(t),G5o=i(x),nu=n(x,"LI",{});var w$e=s(nu);Dfe=n(w$e,"STRONG",{});var Nut=s(Dfe);O5o=r(Nut,"perceiver"),Nut.forEach(t),V5o=r(w$e," \u2014 "),ED=n(w$e,"A",{href:!0});var qut=s(ED);X5o=r(qut,"PerceiverModel"),qut.forEach(t),z5o=r(w$e," (Perceiver model)"),w$e.forEach(t),Q5o=i(x),su=n(x,"LI",{});var A$e=s(su);Gfe=n(A$e,"STRONG",{});var jut=s(Gfe);W5o=r(jut,"plbart"),jut.forEach(t),H5o=r(A$e," \u2014 "),CD=n(A$e,"A",{href:!0});var Dut=s(CD);U5o=r(Dut,"PLBartModel"),Dut.forEach(t),J5o=r(A$e," (PLBart model)"),A$e.forEach(t),Y5o=i(x),lu=n(x,"LI",{});var L$e=s(lu);Ofe=n(L$e,"STRONG",{});var Gut=s(Ofe);K5o=r(Gut,"poolformer"),Gut.forEach(t),Z5o=r(L$e," \u2014 "),wD=n(L$e,"A",{href:!0});var Out=s(wD);e0o=r(Out,"PoolFormerModel"),Out.forEach(t),o0o=r(L$e," (PoolFormer model)"),L$e.forEach(t),r0o=i(x),iu=n(x,"LI",{});var y$e=s(iu);Vfe=n(y$e,"STRONG",{});var Vut=s(Vfe);t0o=r(Vut,"prophetnet"),Vut.forEach(t),a0o=r(y$e," \u2014 "),AD=n(y$e,"A",{href:!0});var Xut=s(AD);n0o=r(Xut,"ProphetNetModel"),Xut.forEach(t),s0o=r(y$e," (ProphetNet model)"),y$e.forEach(t),l0o=i(x),du=n(x,"LI",{});var x$e=s(du);Xfe=n(x$e,"STRONG",{});var zut=s(Xfe);i0o=r(zut,"qdqbert"),zut.forEach(t),d0o=r(x$e," \u2014 "),LD=n(x$e,"A",{href:!0});var Qut=s(LD);c0o=r(Qut,"QDQBertModel"),Qut.forEach(t),f0o=r(x$e," (QDQBert model)"),x$e.forEach(t),m0o=i(x),cu=n(x,"LI",{});var $$e=s(cu);zfe=n($$e,"STRONG",{});var Wut=s(zfe);g0o=r(Wut,"reformer"),Wut.forEach(t),h0o=r($$e," \u2014 "),yD=n($$e,"A",{href:!0});var Hut=s(yD);p0o=r(Hut,"ReformerModel"),Hut.forEach(t),_0o=r($$e," (Reformer model)"),$$e.forEach(t),u0o=i(x),fu=n(x,"LI",{});var k$e=s(fu);Qfe=n(k$e,"STRONG",{});var Uut=s(Qfe);b0o=r(Uut,"regnet"),Uut.forEach(t),v0o=r(k$e," \u2014 "),xD=n(k$e,"A",{href:!0});var Jut=s(xD);F0o=r(Jut,"RegNetModel"),Jut.forEach(t),T0o=r(k$e," (RegNet model)"),k$e.forEach(t),M0o=i(x),mu=n(x,"LI",{});var S$e=s(mu);Wfe=n(S$e,"STRONG",{});var Yut=s(Wfe);E0o=r(Yut,"rembert"),Yut.forEach(t),C0o=r(S$e," \u2014 "),$D=n(S$e,"A",{href:!0});var Kut=s($D);w0o=r(Kut,"RemBertModel"),Kut.forEach(t),A0o=r(S$e," (RemBERT model)"),S$e.forEach(t),L0o=i(x),gu=n(x,"LI",{});var R$e=s(gu);Hfe=n(R$e,"STRONG",{});var Zut=s(Hfe);y0o=r(Zut,"resnet"),Zut.forEach(t),x0o=r(R$e," \u2014 "),kD=n(R$e,"A",{href:!0});var e4t=s(kD);$0o=r(e4t,"ResNetModel"),e4t.forEach(t),k0o=r(R$e," (ResNet model)"),R$e.forEach(t),S0o=i(x),hu=n(x,"LI",{});var P$e=s(hu);Ufe=n(P$e,"STRONG",{});var o4t=s(Ufe);R0o=r(o4t,"retribert"),o4t.forEach(t),P0o=r(P$e," \u2014 "),SD=n(P$e,"A",{href:!0});var r4t=s(SD);B0o=r(r4t,"RetriBertModel"),r4t.forEach(t),I0o=r(P$e," (RetriBERT model)"),P$e.forEach(t),N0o=i(x),pu=n(x,"LI",{});var B$e=s(pu);Jfe=n(B$e,"STRONG",{});var t4t=s(Jfe);q0o=r(t4t,"roberta"),t4t.forEach(t),j0o=r(B$e," \u2014 "),RD=n(B$e,"A",{href:!0});var a4t=s(RD);D0o=r(a4t,"RobertaModel"),a4t.forEach(t),G0o=r(B$e," (RoBERTa model)"),B$e.forEach(t),O0o=i(x),_u=n(x,"LI",{});var I$e=s(_u);Yfe=n(I$e,"STRONG",{});var n4t=s(Yfe);V0o=r(n4t,"roformer"),n4t.forEach(t),X0o=r(I$e," \u2014 "),PD=n(I$e,"A",{href:!0});var s4t=s(PD);z0o=r(s4t,"RoFormerModel"),s4t.forEach(t),Q0o=r(I$e," (RoFormer model)"),I$e.forEach(t),W0o=i(x),uu=n(x,"LI",{});var N$e=s(uu);Kfe=n(N$e,"STRONG",{});var l4t=s(Kfe);H0o=r(l4t,"segformer"),l4t.forEach(t),U0o=r(N$e," \u2014 "),BD=n(N$e,"A",{href:!0});var i4t=s(BD);J0o=r(i4t,"SegformerModel"),i4t.forEach(t),Y0o=r(N$e," (SegFormer model)"),N$e.forEach(t),K0o=i(x),bu=n(x,"LI",{});var q$e=s(bu);Zfe=n(q$e,"STRONG",{});var d4t=s(Zfe);Z0o=r(d4t,"sew"),d4t.forEach(t),ewo=r(q$e," \u2014 "),ID=n(q$e,"A",{href:!0});var c4t=s(ID);owo=r(c4t,"SEWModel"),c4t.forEach(t),rwo=r(q$e," (SEW model)"),q$e.forEach(t),two=i(x),vu=n(x,"LI",{});var j$e=s(vu);eme=n(j$e,"STRONG",{});var f4t=s(eme);awo=r(f4t,"sew-d"),f4t.forEach(t),nwo=r(j$e," \u2014 "),ND=n(j$e,"A",{href:!0});var m4t=s(ND);swo=r(m4t,"SEWDModel"),m4t.forEach(t),lwo=r(j$e," (SEW-D model)"),j$e.forEach(t),iwo=i(x),Fu=n(x,"LI",{});var D$e=s(Fu);ome=n(D$e,"STRONG",{});var g4t=s(ome);dwo=r(g4t,"speech_to_text"),g4t.forEach(t),cwo=r(D$e," \u2014 "),qD=n(D$e,"A",{href:!0});var h4t=s(qD);fwo=r(h4t,"Speech2TextModel"),h4t.forEach(t),mwo=r(D$e," (Speech2Text model)"),D$e.forEach(t),gwo=i(x),Tu=n(x,"LI",{});var G$e=s(Tu);rme=n(G$e,"STRONG",{});var p4t=s(rme);hwo=r(p4t,"splinter"),p4t.forEach(t),pwo=r(G$e," \u2014 "),jD=n(G$e,"A",{href:!0});var _4t=s(jD);_wo=r(_4t,"SplinterModel"),_4t.forEach(t),uwo=r(G$e," (Splinter model)"),G$e.forEach(t),bwo=i(x),Mu=n(x,"LI",{});var O$e=s(Mu);tme=n(O$e,"STRONG",{});var u4t=s(tme);vwo=r(u4t,"squeezebert"),u4t.forEach(t),Fwo=r(O$e," \u2014 "),DD=n(O$e,"A",{href:!0});var b4t=s(DD);Two=r(b4t,"SqueezeBertModel"),b4t.forEach(t),Mwo=r(O$e," (SqueezeBERT model)"),O$e.forEach(t),Ewo=i(x),Eu=n(x,"LI",{});var V$e=s(Eu);ame=n(V$e,"STRONG",{});var v4t=s(ame);Cwo=r(v4t,"swin"),v4t.forEach(t),wwo=r(V$e," \u2014 "),GD=n(V$e,"A",{href:!0});var F4t=s(GD);Awo=r(F4t,"SwinModel"),F4t.forEach(t),Lwo=r(V$e," (Swin Transformer model)"),V$e.forEach(t),ywo=i(x),Cu=n(x,"LI",{});var X$e=s(Cu);nme=n(X$e,"STRONG",{});var T4t=s(nme);xwo=r(T4t,"t5"),T4t.forEach(t),$wo=r(X$e," \u2014 "),OD=n(X$e,"A",{href:!0});var M4t=s(OD);kwo=r(M4t,"T5Model"),M4t.forEach(t),Swo=r(X$e," (T5 model)"),X$e.forEach(t),Rwo=i(x),wu=n(x,"LI",{});var z$e=s(wu);sme=n(z$e,"STRONG",{});var E4t=s(sme);Pwo=r(E4t,"tapas"),E4t.forEach(t),Bwo=r(z$e," \u2014 "),VD=n(z$e,"A",{href:!0});var C4t=s(VD);Iwo=r(C4t,"TapasModel"),C4t.forEach(t),Nwo=r(z$e," (TAPAS model)"),z$e.forEach(t),qwo=i(x),Au=n(x,"LI",{});var Q$e=s(Au);lme=n(Q$e,"STRONG",{});var w4t=s(lme);jwo=r(w4t,"trajectory_transformer"),w4t.forEach(t),Dwo=r(Q$e," \u2014 "),XD=n(Q$e,"A",{href:!0});var A4t=s(XD);Gwo=r(A4t,"TrajectoryTransformerModel"),A4t.forEach(t),Owo=r(Q$e," (Trajectory Transformer model)"),Q$e.forEach(t),Vwo=i(x),Lu=n(x,"LI",{});var W$e=s(Lu);ime=n(W$e,"STRONG",{});var L4t=s(ime);Xwo=r(L4t,"transfo-xl"),L4t.forEach(t),zwo=r(W$e," \u2014 "),zD=n(W$e,"A",{href:!0});var y4t=s(zD);Qwo=r(y4t,"TransfoXLModel"),y4t.forEach(t),Wwo=r(W$e," (Transformer-XL model)"),W$e.forEach(t),Hwo=i(x),yu=n(x,"LI",{});var H$e=s(yu);dme=n(H$e,"STRONG",{});var x4t=s(dme);Uwo=r(x4t,"unispeech"),x4t.forEach(t),Jwo=r(H$e," \u2014 "),QD=n(H$e,"A",{href:!0});var $4t=s(QD);Ywo=r($4t,"UniSpeechModel"),$4t.forEach(t),Kwo=r(H$e," (UniSpeech model)"),H$e.forEach(t),Zwo=i(x),xu=n(x,"LI",{});var U$e=s(xu);cme=n(U$e,"STRONG",{});var k4t=s(cme);eAo=r(k4t,"unispeech-sat"),k4t.forEach(t),oAo=r(U$e," \u2014 "),WD=n(U$e,"A",{href:!0});var S4t=s(WD);rAo=r(S4t,"UniSpeechSatModel"),S4t.forEach(t),tAo=r(U$e," (UniSpeechSat model)"),U$e.forEach(t),aAo=i(x),$u=n(x,"LI",{});var J$e=s($u);fme=n(J$e,"STRONG",{});var R4t=s(fme);nAo=r(R4t,"van"),R4t.forEach(t),sAo=r(J$e," \u2014 "),HD=n(J$e,"A",{href:!0});var P4t=s(HD);lAo=r(P4t,"VanModel"),P4t.forEach(t),iAo=r(J$e," (VAN model)"),J$e.forEach(t),dAo=i(x),ku=n(x,"LI",{});var Y$e=s(ku);mme=n(Y$e,"STRONG",{});var B4t=s(mme);cAo=r(B4t,"vilt"),B4t.forEach(t),fAo=r(Y$e," \u2014 "),UD=n(Y$e,"A",{href:!0});var I4t=s(UD);mAo=r(I4t,"ViltModel"),I4t.forEach(t),gAo=r(Y$e," (ViLT model)"),Y$e.forEach(t),hAo=i(x),Su=n(x,"LI",{});var K$e=s(Su);gme=n(K$e,"STRONG",{});var N4t=s(gme);pAo=r(N4t,"vision-text-dual-encoder"),N4t.forEach(t),_Ao=r(K$e," \u2014 "),JD=n(K$e,"A",{href:!0});var q4t=s(JD);uAo=r(q4t,"VisionTextDualEncoderModel"),q4t.forEach(t),bAo=r(K$e," (VisionTextDualEncoder model)"),K$e.forEach(t),vAo=i(x),Ru=n(x,"LI",{});var Z$e=s(Ru);hme=n(Z$e,"STRONG",{});var j4t=s(hme);FAo=r(j4t,"visual_bert"),j4t.forEach(t),TAo=r(Z$e," \u2014 "),YD=n(Z$e,"A",{href:!0});var D4t=s(YD);MAo=r(D4t,"VisualBertModel"),D4t.forEach(t),EAo=r(Z$e," (VisualBERT model)"),Z$e.forEach(t),CAo=i(x),Pu=n(x,"LI",{});var eke=s(Pu);pme=n(eke,"STRONG",{});var G4t=s(pme);wAo=r(G4t,"vit"),G4t.forEach(t),AAo=r(eke," \u2014 "),KD=n(eke,"A",{href:!0});var O4t=s(KD);LAo=r(O4t,"ViTModel"),O4t.forEach(t),yAo=r(eke," (ViT model)"),eke.forEach(t),xAo=i(x),Bu=n(x,"LI",{});var oke=s(Bu);_me=n(oke,"STRONG",{});var V4t=s(_me);$Ao=r(V4t,"vit_mae"),V4t.forEach(t),kAo=r(oke," \u2014 "),ZD=n(oke,"A",{href:!0});var X4t=s(ZD);SAo=r(X4t,"ViTMAEModel"),X4t.forEach(t),RAo=r(oke," (ViTMAE model)"),oke.forEach(t),PAo=i(x),Iu=n(x,"LI",{});var rke=s(Iu);ume=n(rke,"STRONG",{});var z4t=s(ume);BAo=r(z4t,"wav2vec2"),z4t.forEach(t),IAo=r(rke," \u2014 "),eG=n(rke,"A",{href:!0});var Q4t=s(eG);NAo=r(Q4t,"Wav2Vec2Model"),Q4t.forEach(t),qAo=r(rke," (Wav2Vec2 model)"),rke.forEach(t),jAo=i(x),Nu=n(x,"LI",{});var tke=s(Nu);bme=n(tke,"STRONG",{});var W4t=s(bme);DAo=r(W4t,"wav2vec2-conformer"),W4t.forEach(t),GAo=r(tke," \u2014 "),oG=n(tke,"A",{href:!0});var H4t=s(oG);OAo=r(H4t,"Wav2Vec2ConformerModel"),H4t.forEach(t),VAo=r(tke," (Wav2Vec2-Conformer model)"),tke.forEach(t),XAo=i(x),qu=n(x,"LI",{});var ake=s(qu);vme=n(ake,"STRONG",{});var U4t=s(vme);zAo=r(U4t,"wavlm"),U4t.forEach(t),QAo=r(ake," \u2014 "),rG=n(ake,"A",{href:!0});var J4t=s(rG);WAo=r(J4t,"WavLMModel"),J4t.forEach(t),HAo=r(ake," (WavLM model)"),ake.forEach(t),UAo=i(x),ju=n(x,"LI",{});var nke=s(ju);Fme=n(nke,"STRONG",{});var Y4t=s(Fme);JAo=r(Y4t,"xglm"),Y4t.forEach(t),YAo=r(nke," \u2014 "),tG=n(nke,"A",{href:!0});var K4t=s(tG);KAo=r(K4t,"XGLMModel"),K4t.forEach(t),ZAo=r(nke," (XGLM model)"),nke.forEach(t),e6o=i(x),Du=n(x,"LI",{});var ske=s(Du);Tme=n(ske,"STRONG",{});var Z4t=s(Tme);o6o=r(Z4t,"xlm"),Z4t.forEach(t),r6o=r(ske," \u2014 "),aG=n(ske,"A",{href:!0});var e2t=s(aG);t6o=r(e2t,"XLMModel"),e2t.forEach(t),a6o=r(ske," (XLM model)"),ske.forEach(t),n6o=i(x),Gu=n(x,"LI",{});var lke=s(Gu);Mme=n(lke,"STRONG",{});var o2t=s(Mme);s6o=r(o2t,"xlm-prophetnet"),o2t.forEach(t),l6o=r(lke," \u2014 "),nG=n(lke,"A",{href:!0});var r2t=s(nG);i6o=r(r2t,"XLMProphetNetModel"),r2t.forEach(t),d6o=r(lke," (XLM-ProphetNet model)"),lke.forEach(t),c6o=i(x),Ou=n(x,"LI",{});var ike=s(Ou);Eme=n(ike,"STRONG",{});var t2t=s(Eme);f6o=r(t2t,"xlm-roberta"),t2t.forEach(t),m6o=r(ike," \u2014 "),sG=n(ike,"A",{href:!0});var a2t=s(sG);g6o=r(a2t,"XLMRobertaModel"),a2t.forEach(t),h6o=r(ike," (XLM-RoBERTa model)"),ike.forEach(t),p6o=i(x),Vu=n(x,"LI",{});var dke=s(Vu);Cme=n(dke,"STRONG",{});var n2t=s(Cme);_6o=r(n2t,"xlm-roberta-xl"),n2t.forEach(t),u6o=r(dke," \u2014 "),lG=n(dke,"A",{href:!0});var s2t=s(lG);b6o=r(s2t,"XLMRobertaXLModel"),s2t.forEach(t),v6o=r(dke," (XLM-RoBERTa-XL model)"),dke.forEach(t),F6o=i(x),Xu=n(x,"LI",{});var cke=s(Xu);wme=n(cke,"STRONG",{});var l2t=s(wme);T6o=r(l2t,"xlnet"),l2t.forEach(t),M6o=r(cke," \u2014 "),iG=n(cke,"A",{href:!0});var i2t=s(iG);E6o=r(i2t,"XLNetModel"),i2t.forEach(t),C6o=r(cke," (XLNet model)"),cke.forEach(t),w6o=i(x),zu=n(x,"LI",{});var fke=s(zu);Ame=n(fke,"STRONG",{});var d2t=s(Ame);A6o=r(d2t,"yolos"),d2t.forEach(t),L6o=r(fke," \u2014 "),dG=n(fke,"A",{href:!0});var c2t=s(dG);y6o=r(c2t,"YolosModel"),c2t.forEach(t),x6o=r(fke," (YOLOS model)"),fke.forEach(t),$6o=i(x),Qu=n(x,"LI",{});var mke=s(Qu);Lme=n(mke,"STRONG",{});var f2t=s(Lme);k6o=r(f2t,"yoso"),f2t.forEach(t),S6o=r(mke," \u2014 "),cG=n(mke,"A",{href:!0});var m2t=s(cG);R6o=r(m2t,"YosoModel"),m2t.forEach(t),P6o=r(mke," (YOSO model)"),mke.forEach(t),x.forEach(t),B6o=i(la),Wu=n(la,"P",{});var gke=s(Wu);I6o=r(gke,"The model is set in evaluation mode by default using "),yme=n(gke,"CODE",{});var g2t=s(yme);N6o=r(g2t,"model.eval()"),g2t.forEach(t),q6o=r(gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=n(gke,"CODE",{});var h2t=s(xme);j6o=r(h2t,"model.train()"),h2t.forEach(t),gke.forEach(t),D6o=i(la),T(Hu.$$.fragment,la),la.forEach(t),tl.forEach(t),NXe=i(f),zi=n(f,"H2",{class:!0});var VQe=s(zi);Uu=n(VQe,"A",{id:!0,class:!0,href:!0});var p2t=s(Uu);$me=n(p2t,"SPAN",{});var _2t=s($me);T(GL.$$.fragment,_2t),_2t.forEach(t),p2t.forEach(t),G6o=i(VQe),kme=n(VQe,"SPAN",{});var u2t=s(kme);O6o=r(u2t,"AutoModelForPreTraining"),u2t.forEach(t),VQe.forEach(t),qXe=i(f),So=n(f,"DIV",{class:!0});var al=s(So);T(OL.$$.fragment,al),V6o=i(al),Qi=n(al,"P",{});var Hre=s(Qi);X6o=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fG=n(Hre,"A",{href:!0});var b2t=s(fG);z6o=r(b2t,"from_pretrained()"),b2t.forEach(t),Q6o=r(Hre," class method or the "),mG=n(Hre,"A",{href:!0});var v2t=s(mG);W6o=r(v2t,"from_config()"),v2t.forEach(t),H6o=r(Hre,` class
method.`),Hre.forEach(t),U6o=i(al),VL=n(al,"P",{});var XQe=s(VL);J6o=r(XQe,"This class cannot be instantiated directly using "),Sme=n(XQe,"CODE",{});var F2t=s(Sme);Y6o=r(F2t,"__init__()"),F2t.forEach(t),K6o=r(XQe," (throws an error)."),XQe.forEach(t),Z6o=i(al),dt=n(al,"DIV",{class:!0});var _6=s(dt);T(XL.$$.fragment,_6),e7o=i(_6),Rme=n(_6,"P",{});var T2t=s(Rme);o7o=r(T2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),T2t.forEach(t),r7o=i(_6),Wi=n(_6,"P",{});var Ure=s(Wi);t7o=r(Ure,`Note:
Loading a model from its configuration file does `),Pme=n(Ure,"STRONG",{});var M2t=s(Pme);a7o=r(M2t,"not"),M2t.forEach(t),n7o=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=n(Ure,"A",{href:!0});var E2t=s(gG);s7o=r(E2t,"from_pretrained()"),E2t.forEach(t),l7o=r(Ure," to load the model weights."),Ure.forEach(t),i7o=i(_6),T(Ju.$$.fragment,_6),_6.forEach(t),d7o=i(al),Ke=n(al,"DIV",{class:!0});var ia=s(Ke);T(zL.$$.fragment,ia),c7o=i(ia),Bme=n(ia,"P",{});var C2t=s(Bme);f7o=r(C2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),C2t.forEach(t),m7o=i(ia),Na=n(ia,"P",{});var u6=s(Na);g7o=r(u6,"The model class to instantiate is selected based on the "),Ime=n(u6,"CODE",{});var w2t=s(Ime);h7o=r(w2t,"model_type"),w2t.forEach(t),p7o=r(u6,` property of the config object (either
passed as an argument or loaded from `),Nme=n(u6,"CODE",{});var A2t=s(Nme);_7o=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),u7o=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=n(u6,"CODE",{});var L2t=s(qme);b7o=r(L2t,"pretrained_model_name_or_path"),L2t.forEach(t),v7o=r(u6,":"),u6.forEach(t),F7o=i(ia),G=n(ia,"UL",{});var O=s(G);Yu=n(O,"LI",{});var hke=s(Yu);jme=n(hke,"STRONG",{});var y2t=s(jme);T7o=r(y2t,"albert"),y2t.forEach(t),M7o=r(hke," \u2014 "),hG=n(hke,"A",{href:!0});var x2t=s(hG);E7o=r(x2t,"AlbertForPreTraining"),x2t.forEach(t),C7o=r(hke," (ALBERT model)"),hke.forEach(t),w7o=i(O),Ku=n(O,"LI",{});var pke=s(Ku);Dme=n(pke,"STRONG",{});var $2t=s(Dme);A7o=r($2t,"bart"),$2t.forEach(t),L7o=r(pke," \u2014 "),pG=n(pke,"A",{href:!0});var k2t=s(pG);y7o=r(k2t,"BartForConditionalGeneration"),k2t.forEach(t),x7o=r(pke," (BART model)"),pke.forEach(t),$7o=i(O),Zu=n(O,"LI",{});var _ke=s(Zu);Gme=n(_ke,"STRONG",{});var S2t=s(Gme);k7o=r(S2t,"bert"),S2t.forEach(t),S7o=r(_ke," \u2014 "),_G=n(_ke,"A",{href:!0});var R2t=s(_G);R7o=r(R2t,"BertForPreTraining"),R2t.forEach(t),P7o=r(_ke," (BERT model)"),_ke.forEach(t),B7o=i(O),e4=n(O,"LI",{});var uke=s(e4);Ome=n(uke,"STRONG",{});var P2t=s(Ome);I7o=r(P2t,"big_bird"),P2t.forEach(t),N7o=r(uke," \u2014 "),uG=n(uke,"A",{href:!0});var B2t=s(uG);q7o=r(B2t,"BigBirdForPreTraining"),B2t.forEach(t),j7o=r(uke," (BigBird model)"),uke.forEach(t),D7o=i(O),o4=n(O,"LI",{});var bke=s(o4);Vme=n(bke,"STRONG",{});var I2t=s(Vme);G7o=r(I2t,"bloom"),I2t.forEach(t),O7o=r(bke," \u2014 "),bG=n(bke,"A",{href:!0});var N2t=s(bG);V7o=r(N2t,"BloomForCausalLM"),N2t.forEach(t),X7o=r(bke," (BLOOM model)"),bke.forEach(t),z7o=i(O),r4=n(O,"LI",{});var vke=s(r4);Xme=n(vke,"STRONG",{});var q2t=s(Xme);Q7o=r(q2t,"camembert"),q2t.forEach(t),W7o=r(vke," \u2014 "),vG=n(vke,"A",{href:!0});var j2t=s(vG);H7o=r(j2t,"CamembertForMaskedLM"),j2t.forEach(t),U7o=r(vke," (CamemBERT model)"),vke.forEach(t),J7o=i(O),t4=n(O,"LI",{});var Fke=s(t4);zme=n(Fke,"STRONG",{});var D2t=s(zme);Y7o=r(D2t,"ctrl"),D2t.forEach(t),K7o=r(Fke," \u2014 "),FG=n(Fke,"A",{href:!0});var G2t=s(FG);Z7o=r(G2t,"CTRLLMHeadModel"),G2t.forEach(t),eLo=r(Fke," (CTRL model)"),Fke.forEach(t),oLo=i(O),a4=n(O,"LI",{});var Tke=s(a4);Qme=n(Tke,"STRONG",{});var O2t=s(Qme);rLo=r(O2t,"data2vec-text"),O2t.forEach(t),tLo=r(Tke," \u2014 "),TG=n(Tke,"A",{href:!0});var V2t=s(TG);aLo=r(V2t,"Data2VecTextForMaskedLM"),V2t.forEach(t),nLo=r(Tke," (Data2VecText model)"),Tke.forEach(t),sLo=i(O),n4=n(O,"LI",{});var Mke=s(n4);Wme=n(Mke,"STRONG",{});var X2t=s(Wme);lLo=r(X2t,"deberta"),X2t.forEach(t),iLo=r(Mke," \u2014 "),MG=n(Mke,"A",{href:!0});var z2t=s(MG);dLo=r(z2t,"DebertaForMaskedLM"),z2t.forEach(t),cLo=r(Mke," (DeBERTa model)"),Mke.forEach(t),fLo=i(O),s4=n(O,"LI",{});var Eke=s(s4);Hme=n(Eke,"STRONG",{});var Q2t=s(Hme);mLo=r(Q2t,"deberta-v2"),Q2t.forEach(t),gLo=r(Eke," \u2014 "),EG=n(Eke,"A",{href:!0});var W2t=s(EG);hLo=r(W2t,"DebertaV2ForMaskedLM"),W2t.forEach(t),pLo=r(Eke," (DeBERTa-v2 model)"),Eke.forEach(t),_Lo=i(O),l4=n(O,"LI",{});var Cke=s(l4);Ume=n(Cke,"STRONG",{});var H2t=s(Ume);uLo=r(H2t,"distilbert"),H2t.forEach(t),bLo=r(Cke," \u2014 "),CG=n(Cke,"A",{href:!0});var U2t=s(CG);vLo=r(U2t,"DistilBertForMaskedLM"),U2t.forEach(t),FLo=r(Cke," (DistilBERT model)"),Cke.forEach(t),TLo=i(O),i4=n(O,"LI",{});var wke=s(i4);Jme=n(wke,"STRONG",{});var J2t=s(Jme);MLo=r(J2t,"electra"),J2t.forEach(t),ELo=r(wke," \u2014 "),wG=n(wke,"A",{href:!0});var Y2t=s(wG);CLo=r(Y2t,"ElectraForPreTraining"),Y2t.forEach(t),wLo=r(wke," (ELECTRA model)"),wke.forEach(t),ALo=i(O),d4=n(O,"LI",{});var Ake=s(d4);Yme=n(Ake,"STRONG",{});var K2t=s(Yme);LLo=r(K2t,"flaubert"),K2t.forEach(t),yLo=r(Ake," \u2014 "),AG=n(Ake,"A",{href:!0});var Z2t=s(AG);xLo=r(Z2t,"FlaubertWithLMHeadModel"),Z2t.forEach(t),$Lo=r(Ake," (FlauBERT model)"),Ake.forEach(t),kLo=i(O),c4=n(O,"LI",{});var Lke=s(c4);Kme=n(Lke,"STRONG",{});var e1t=s(Kme);SLo=r(e1t,"flava"),e1t.forEach(t),RLo=r(Lke," \u2014 "),LG=n(Lke,"A",{href:!0});var o1t=s(LG);PLo=r(o1t,"FlavaForPreTraining"),o1t.forEach(t),BLo=r(Lke," (FLAVA model)"),Lke.forEach(t),ILo=i(O),f4=n(O,"LI",{});var yke=s(f4);Zme=n(yke,"STRONG",{});var r1t=s(Zme);NLo=r(r1t,"fnet"),r1t.forEach(t),qLo=r(yke," \u2014 "),yG=n(yke,"A",{href:!0});var t1t=s(yG);jLo=r(t1t,"FNetForPreTraining"),t1t.forEach(t),DLo=r(yke," (FNet model)"),yke.forEach(t),GLo=i(O),m4=n(O,"LI",{});var xke=s(m4);ege=n(xke,"STRONG",{});var a1t=s(ege);OLo=r(a1t,"fsmt"),a1t.forEach(t),VLo=r(xke," \u2014 "),xG=n(xke,"A",{href:!0});var n1t=s(xG);XLo=r(n1t,"FSMTForConditionalGeneration"),n1t.forEach(t),zLo=r(xke," (FairSeq Machine-Translation model)"),xke.forEach(t),QLo=i(O),g4=n(O,"LI",{});var $ke=s(g4);oge=n($ke,"STRONG",{});var s1t=s(oge);WLo=r(s1t,"funnel"),s1t.forEach(t),HLo=r($ke," \u2014 "),$G=n($ke,"A",{href:!0});var l1t=s($G);ULo=r(l1t,"FunnelForPreTraining"),l1t.forEach(t),JLo=r($ke," (Funnel Transformer model)"),$ke.forEach(t),YLo=i(O),h4=n(O,"LI",{});var kke=s(h4);rge=n(kke,"STRONG",{});var i1t=s(rge);KLo=r(i1t,"gpt2"),i1t.forEach(t),ZLo=r(kke," \u2014 "),kG=n(kke,"A",{href:!0});var d1t=s(kG);eyo=r(d1t,"GPT2LMHeadModel"),d1t.forEach(t),oyo=r(kke," (OpenAI GPT-2 model)"),kke.forEach(t),ryo=i(O),p4=n(O,"LI",{});var Ske=s(p4);tge=n(Ske,"STRONG",{});var c1t=s(tge);tyo=r(c1t,"ibert"),c1t.forEach(t),ayo=r(Ske," \u2014 "),SG=n(Ske,"A",{href:!0});var f1t=s(SG);nyo=r(f1t,"IBertForMaskedLM"),f1t.forEach(t),syo=r(Ske," (I-BERT model)"),Ske.forEach(t),lyo=i(O),_4=n(O,"LI",{});var Rke=s(_4);age=n(Rke,"STRONG",{});var m1t=s(age);iyo=r(m1t,"layoutlm"),m1t.forEach(t),dyo=r(Rke," \u2014 "),RG=n(Rke,"A",{href:!0});var g1t=s(RG);cyo=r(g1t,"LayoutLMForMaskedLM"),g1t.forEach(t),fyo=r(Rke," (LayoutLM model)"),Rke.forEach(t),myo=i(O),u4=n(O,"LI",{});var Pke=s(u4);nge=n(Pke,"STRONG",{});var h1t=s(nge);gyo=r(h1t,"longformer"),h1t.forEach(t),hyo=r(Pke," \u2014 "),PG=n(Pke,"A",{href:!0});var p1t=s(PG);pyo=r(p1t,"LongformerForMaskedLM"),p1t.forEach(t),_yo=r(Pke," (Longformer model)"),Pke.forEach(t),uyo=i(O),b4=n(O,"LI",{});var Bke=s(b4);sge=n(Bke,"STRONG",{});var _1t=s(sge);byo=r(_1t,"lxmert"),_1t.forEach(t),vyo=r(Bke," \u2014 "),BG=n(Bke,"A",{href:!0});var u1t=s(BG);Fyo=r(u1t,"LxmertForPreTraining"),u1t.forEach(t),Tyo=r(Bke," (LXMERT model)"),Bke.forEach(t),Myo=i(O),v4=n(O,"LI",{});var Ike=s(v4);lge=n(Ike,"STRONG",{});var b1t=s(lge);Eyo=r(b1t,"megatron-bert"),b1t.forEach(t),Cyo=r(Ike," \u2014 "),IG=n(Ike,"A",{href:!0});var v1t=s(IG);wyo=r(v1t,"MegatronBertForPreTraining"),v1t.forEach(t),Ayo=r(Ike," (Megatron-BERT model)"),Ike.forEach(t),Lyo=i(O),F4=n(O,"LI",{});var Nke=s(F4);ige=n(Nke,"STRONG",{});var F1t=s(ige);yyo=r(F1t,"mobilebert"),F1t.forEach(t),xyo=r(Nke," \u2014 "),NG=n(Nke,"A",{href:!0});var T1t=s(NG);$yo=r(T1t,"MobileBertForPreTraining"),T1t.forEach(t),kyo=r(Nke," (MobileBERT model)"),Nke.forEach(t),Syo=i(O),T4=n(O,"LI",{});var qke=s(T4);dge=n(qke,"STRONG",{});var M1t=s(dge);Ryo=r(M1t,"mpnet"),M1t.forEach(t),Pyo=r(qke," \u2014 "),qG=n(qke,"A",{href:!0});var E1t=s(qG);Byo=r(E1t,"MPNetForMaskedLM"),E1t.forEach(t),Iyo=r(qke," (MPNet model)"),qke.forEach(t),Nyo=i(O),M4=n(O,"LI",{});var jke=s(M4);cge=n(jke,"STRONG",{});var C1t=s(cge);qyo=r(C1t,"mvp"),C1t.forEach(t),jyo=r(jke," \u2014 "),jG=n(jke,"A",{href:!0});var w1t=s(jG);Dyo=r(w1t,"MvpForConditionalGeneration"),w1t.forEach(t),Gyo=r(jke," (MVP model)"),jke.forEach(t),Oyo=i(O),E4=n(O,"LI",{});var Dke=s(E4);fge=n(Dke,"STRONG",{});var A1t=s(fge);Vyo=r(A1t,"nezha"),A1t.forEach(t),Xyo=r(Dke," \u2014 "),DG=n(Dke,"A",{href:!0});var L1t=s(DG);zyo=r(L1t,"NezhaForPreTraining"),L1t.forEach(t),Qyo=r(Dke," (Nezha model)"),Dke.forEach(t),Wyo=i(O),C4=n(O,"LI",{});var Gke=s(C4);mge=n(Gke,"STRONG",{});var y1t=s(mge);Hyo=r(y1t,"openai-gpt"),y1t.forEach(t),Uyo=r(Gke," \u2014 "),GG=n(Gke,"A",{href:!0});var x1t=s(GG);Jyo=r(x1t,"OpenAIGPTLMHeadModel"),x1t.forEach(t),Yyo=r(Gke," (OpenAI GPT model)"),Gke.forEach(t),Kyo=i(O),w4=n(O,"LI",{});var Oke=s(w4);gge=n(Oke,"STRONG",{});var $1t=s(gge);Zyo=r($1t,"retribert"),$1t.forEach(t),e9o=r(Oke," \u2014 "),OG=n(Oke,"A",{href:!0});var k1t=s(OG);o9o=r(k1t,"RetriBertModel"),k1t.forEach(t),r9o=r(Oke," (RetriBERT model)"),Oke.forEach(t),t9o=i(O),A4=n(O,"LI",{});var Vke=s(A4);hge=n(Vke,"STRONG",{});var S1t=s(hge);a9o=r(S1t,"roberta"),S1t.forEach(t),n9o=r(Vke," \u2014 "),VG=n(Vke,"A",{href:!0});var R1t=s(VG);s9o=r(R1t,"RobertaForMaskedLM"),R1t.forEach(t),l9o=r(Vke," (RoBERTa model)"),Vke.forEach(t),i9o=i(O),L4=n(O,"LI",{});var Xke=s(L4);pge=n(Xke,"STRONG",{});var P1t=s(pge);d9o=r(P1t,"splinter"),P1t.forEach(t),c9o=r(Xke," \u2014 "),XG=n(Xke,"A",{href:!0});var B1t=s(XG);f9o=r(B1t,"SplinterForPreTraining"),B1t.forEach(t),m9o=r(Xke," (Splinter model)"),Xke.forEach(t),g9o=i(O),y4=n(O,"LI",{});var zke=s(y4);_ge=n(zke,"STRONG",{});var I1t=s(_ge);h9o=r(I1t,"squeezebert"),I1t.forEach(t),p9o=r(zke," \u2014 "),zG=n(zke,"A",{href:!0});var N1t=s(zG);_9o=r(N1t,"SqueezeBertForMaskedLM"),N1t.forEach(t),u9o=r(zke," (SqueezeBERT model)"),zke.forEach(t),b9o=i(O),x4=n(O,"LI",{});var Qke=s(x4);uge=n(Qke,"STRONG",{});var q1t=s(uge);v9o=r(q1t,"t5"),q1t.forEach(t),F9o=r(Qke," \u2014 "),QG=n(Qke,"A",{href:!0});var j1t=s(QG);T9o=r(j1t,"T5ForConditionalGeneration"),j1t.forEach(t),M9o=r(Qke," (T5 model)"),Qke.forEach(t),E9o=i(O),$4=n(O,"LI",{});var Wke=s($4);bge=n(Wke,"STRONG",{});var D1t=s(bge);C9o=r(D1t,"tapas"),D1t.forEach(t),w9o=r(Wke," \u2014 "),WG=n(Wke,"A",{href:!0});var G1t=s(WG);A9o=r(G1t,"TapasForMaskedLM"),G1t.forEach(t),L9o=r(Wke," (TAPAS model)"),Wke.forEach(t),y9o=i(O),k4=n(O,"LI",{});var Hke=s(k4);vge=n(Hke,"STRONG",{});var O1t=s(vge);x9o=r(O1t,"transfo-xl"),O1t.forEach(t),$9o=r(Hke," \u2014 "),HG=n(Hke,"A",{href:!0});var V1t=s(HG);k9o=r(V1t,"TransfoXLLMHeadModel"),V1t.forEach(t),S9o=r(Hke," (Transformer-XL model)"),Hke.forEach(t),R9o=i(O),S4=n(O,"LI",{});var Uke=s(S4);Fge=n(Uke,"STRONG",{});var X1t=s(Fge);P9o=r(X1t,"unispeech"),X1t.forEach(t),B9o=r(Uke," \u2014 "),UG=n(Uke,"A",{href:!0});var z1t=s(UG);I9o=r(z1t,"UniSpeechForPreTraining"),z1t.forEach(t),N9o=r(Uke," (UniSpeech model)"),Uke.forEach(t),q9o=i(O),R4=n(O,"LI",{});var Jke=s(R4);Tge=n(Jke,"STRONG",{});var Q1t=s(Tge);j9o=r(Q1t,"unispeech-sat"),Q1t.forEach(t),D9o=r(Jke," \u2014 "),JG=n(Jke,"A",{href:!0});var W1t=s(JG);G9o=r(W1t,"UniSpeechSatForPreTraining"),W1t.forEach(t),O9o=r(Jke," (UniSpeechSat model)"),Jke.forEach(t),V9o=i(O),P4=n(O,"LI",{});var Yke=s(P4);Mge=n(Yke,"STRONG",{});var H1t=s(Mge);X9o=r(H1t,"visual_bert"),H1t.forEach(t),z9o=r(Yke," \u2014 "),YG=n(Yke,"A",{href:!0});var U1t=s(YG);Q9o=r(U1t,"VisualBertForPreTraining"),U1t.forEach(t),W9o=r(Yke," (VisualBERT model)"),Yke.forEach(t),H9o=i(O),B4=n(O,"LI",{});var Kke=s(B4);Ege=n(Kke,"STRONG",{});var J1t=s(Ege);U9o=r(J1t,"vit_mae"),J1t.forEach(t),J9o=r(Kke," \u2014 "),KG=n(Kke,"A",{href:!0});var Y1t=s(KG);Y9o=r(Y1t,"ViTMAEForPreTraining"),Y1t.forEach(t),K9o=r(Kke," (ViTMAE model)"),Kke.forEach(t),Z9o=i(O),I4=n(O,"LI",{});var Zke=s(I4);Cge=n(Zke,"STRONG",{});var K1t=s(Cge);exo=r(K1t,"wav2vec2"),K1t.forEach(t),oxo=r(Zke," \u2014 "),ZG=n(Zke,"A",{href:!0});var Z1t=s(ZG);rxo=r(Z1t,"Wav2Vec2ForPreTraining"),Z1t.forEach(t),txo=r(Zke," (Wav2Vec2 model)"),Zke.forEach(t),axo=i(O),N4=n(O,"LI",{});var eSe=s(N4);wge=n(eSe,"STRONG",{});var ebt=s(wge);nxo=r(ebt,"wav2vec2-conformer"),ebt.forEach(t),sxo=r(eSe," \u2014 "),eO=n(eSe,"A",{href:!0});var obt=s(eO);lxo=r(obt,"Wav2Vec2ConformerForPreTraining"),obt.forEach(t),ixo=r(eSe," (Wav2Vec2-Conformer model)"),eSe.forEach(t),dxo=i(O),q4=n(O,"LI",{});var oSe=s(q4);Age=n(oSe,"STRONG",{});var rbt=s(Age);cxo=r(rbt,"xlm"),rbt.forEach(t),fxo=r(oSe," \u2014 "),oO=n(oSe,"A",{href:!0});var tbt=s(oO);mxo=r(tbt,"XLMWithLMHeadModel"),tbt.forEach(t),gxo=r(oSe," (XLM model)"),oSe.forEach(t),hxo=i(O),j4=n(O,"LI",{});var rSe=s(j4);Lge=n(rSe,"STRONG",{});var abt=s(Lge);pxo=r(abt,"xlm-roberta"),abt.forEach(t),_xo=r(rSe," \u2014 "),rO=n(rSe,"A",{href:!0});var nbt=s(rO);uxo=r(nbt,"XLMRobertaForMaskedLM"),nbt.forEach(t),bxo=r(rSe," (XLM-RoBERTa model)"),rSe.forEach(t),vxo=i(O),D4=n(O,"LI",{});var tSe=s(D4);yge=n(tSe,"STRONG",{});var sbt=s(yge);Fxo=r(sbt,"xlm-roberta-xl"),sbt.forEach(t),Txo=r(tSe," \u2014 "),tO=n(tSe,"A",{href:!0});var lbt=s(tO);Mxo=r(lbt,"XLMRobertaXLForMaskedLM"),lbt.forEach(t),Exo=r(tSe," (XLM-RoBERTa-XL model)"),tSe.forEach(t),Cxo=i(O),G4=n(O,"LI",{});var aSe=s(G4);xge=n(aSe,"STRONG",{});var ibt=s(xge);wxo=r(ibt,"xlnet"),ibt.forEach(t),Axo=r(aSe," \u2014 "),aO=n(aSe,"A",{href:!0});var dbt=s(aO);Lxo=r(dbt,"XLNetLMHeadModel"),dbt.forEach(t),yxo=r(aSe," (XLNet model)"),aSe.forEach(t),O.forEach(t),xxo=i(ia),O4=n(ia,"P",{});var nSe=s(O4);$xo=r(nSe,"The model is set in evaluation mode by default using "),$ge=n(nSe,"CODE",{});var cbt=s($ge);kxo=r(cbt,"model.eval()"),cbt.forEach(t),Sxo=r(nSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=n(nSe,"CODE",{});var fbt=s(kge);Rxo=r(fbt,"model.train()"),fbt.forEach(t),nSe.forEach(t),Pxo=i(ia),T(V4.$$.fragment,ia),ia.forEach(t),al.forEach(t),jXe=i(f),Hi=n(f,"H2",{class:!0});var zQe=s(Hi);X4=n(zQe,"A",{id:!0,class:!0,href:!0});var mbt=s(X4);Sge=n(mbt,"SPAN",{});var gbt=s(Sge);T(QL.$$.fragment,gbt),gbt.forEach(t),mbt.forEach(t),Bxo=i(zQe),Rge=n(zQe,"SPAN",{});var hbt=s(Rge);Ixo=r(hbt,"AutoModelForCausalLM"),hbt.forEach(t),zQe.forEach(t),DXe=i(f),Ro=n(f,"DIV",{class:!0});var nl=s(Ro);T(WL.$$.fragment,nl),Nxo=i(nl),Ui=n(nl,"P",{});var Jre=s(Ui);qxo=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nO=n(Jre,"A",{href:!0});var pbt=s(nO);jxo=r(pbt,"from_pretrained()"),pbt.forEach(t),Dxo=r(Jre," class method or the "),sO=n(Jre,"A",{href:!0});var _bt=s(sO);Gxo=r(_bt,"from_config()"),_bt.forEach(t),Oxo=r(Jre,` class
method.`),Jre.forEach(t),Vxo=i(nl),HL=n(nl,"P",{});var QQe=s(HL);Xxo=r(QQe,"This class cannot be instantiated directly using "),Pge=n(QQe,"CODE",{});var ubt=s(Pge);zxo=r(ubt,"__init__()"),ubt.forEach(t),Qxo=r(QQe," (throws an error)."),QQe.forEach(t),Wxo=i(nl),ct=n(nl,"DIV",{class:!0});var b6=s(ct);T(UL.$$.fragment,b6),Hxo=i(b6),Bge=n(b6,"P",{});var bbt=s(Bge);Uxo=r(bbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bbt.forEach(t),Jxo=i(b6),Ji=n(b6,"P",{});var Yre=s(Ji);Yxo=r(Yre,`Note:
Loading a model from its configuration file does `),Ige=n(Yre,"STRONG",{});var vbt=s(Ige);Kxo=r(vbt,"not"),vbt.forEach(t),Zxo=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=n(Yre,"A",{href:!0});var Fbt=s(lO);e$o=r(Fbt,"from_pretrained()"),Fbt.forEach(t),o$o=r(Yre," to load the model weights."),Yre.forEach(t),r$o=i(b6),T(z4.$$.fragment,b6),b6.forEach(t),t$o=i(nl),Ze=n(nl,"DIV",{class:!0});var da=s(Ze);T(JL.$$.fragment,da),a$o=i(da),Nge=n(da,"P",{});var Tbt=s(Nge);n$o=r(Tbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tbt.forEach(t),s$o=i(da),qa=n(da,"P",{});var v6=s(qa);l$o=r(v6,"The model class to instantiate is selected based on the "),qge=n(v6,"CODE",{});var Mbt=s(qge);i$o=r(Mbt,"model_type"),Mbt.forEach(t),d$o=r(v6,` property of the config object (either
passed as an argument or loaded from `),jge=n(v6,"CODE",{});var Ebt=s(jge);c$o=r(Ebt,"pretrained_model_name_or_path"),Ebt.forEach(t),f$o=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=n(v6,"CODE",{});var Cbt=s(Dge);m$o=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),g$o=r(v6,":"),v6.forEach(t),h$o=i(da),z=n(da,"UL",{});var Q=s(z);Q4=n(Q,"LI",{});var sSe=s(Q4);Gge=n(sSe,"STRONG",{});var wbt=s(Gge);p$o=r(wbt,"bart"),wbt.forEach(t),_$o=r(sSe," \u2014 "),iO=n(sSe,"A",{href:!0});var Abt=s(iO);u$o=r(Abt,"BartForCausalLM"),Abt.forEach(t),b$o=r(sSe," (BART model)"),sSe.forEach(t),v$o=i(Q),W4=n(Q,"LI",{});var lSe=s(W4);Oge=n(lSe,"STRONG",{});var Lbt=s(Oge);F$o=r(Lbt,"bert"),Lbt.forEach(t),T$o=r(lSe," \u2014 "),dO=n(lSe,"A",{href:!0});var ybt=s(dO);M$o=r(ybt,"BertLMHeadModel"),ybt.forEach(t),E$o=r(lSe," (BERT model)"),lSe.forEach(t),C$o=i(Q),H4=n(Q,"LI",{});var iSe=s(H4);Vge=n(iSe,"STRONG",{});var xbt=s(Vge);w$o=r(xbt,"bert-generation"),xbt.forEach(t),A$o=r(iSe," \u2014 "),cO=n(iSe,"A",{href:!0});var $bt=s(cO);L$o=r($bt,"BertGenerationDecoder"),$bt.forEach(t),y$o=r(iSe," (Bert Generation model)"),iSe.forEach(t),x$o=i(Q),U4=n(Q,"LI",{});var dSe=s(U4);Xge=n(dSe,"STRONG",{});var kbt=s(Xge);$$o=r(kbt,"big_bird"),kbt.forEach(t),k$o=r(dSe," \u2014 "),fO=n(dSe,"A",{href:!0});var Sbt=s(fO);S$o=r(Sbt,"BigBirdForCausalLM"),Sbt.forEach(t),R$o=r(dSe," (BigBird model)"),dSe.forEach(t),P$o=i(Q),J4=n(Q,"LI",{});var cSe=s(J4);zge=n(cSe,"STRONG",{});var Rbt=s(zge);B$o=r(Rbt,"bigbird_pegasus"),Rbt.forEach(t),I$o=r(cSe," \u2014 "),mO=n(cSe,"A",{href:!0});var Pbt=s(mO);N$o=r(Pbt,"BigBirdPegasusForCausalLM"),Pbt.forEach(t),q$o=r(cSe," (BigBird-Pegasus model)"),cSe.forEach(t),j$o=i(Q),Y4=n(Q,"LI",{});var fSe=s(Y4);Qge=n(fSe,"STRONG",{});var Bbt=s(Qge);D$o=r(Bbt,"blenderbot"),Bbt.forEach(t),G$o=r(fSe," \u2014 "),gO=n(fSe,"A",{href:!0});var Ibt=s(gO);O$o=r(Ibt,"BlenderbotForCausalLM"),Ibt.forEach(t),V$o=r(fSe," (Blenderbot model)"),fSe.forEach(t),X$o=i(Q),K4=n(Q,"LI",{});var mSe=s(K4);Wge=n(mSe,"STRONG",{});var Nbt=s(Wge);z$o=r(Nbt,"blenderbot-small"),Nbt.forEach(t),Q$o=r(mSe," \u2014 "),hO=n(mSe,"A",{href:!0});var qbt=s(hO);W$o=r(qbt,"BlenderbotSmallForCausalLM"),qbt.forEach(t),H$o=r(mSe," (BlenderbotSmall model)"),mSe.forEach(t),U$o=i(Q),Z4=n(Q,"LI",{});var gSe=s(Z4);Hge=n(gSe,"STRONG",{});var jbt=s(Hge);J$o=r(jbt,"bloom"),jbt.forEach(t),Y$o=r(gSe," \u2014 "),pO=n(gSe,"A",{href:!0});var Dbt=s(pO);K$o=r(Dbt,"BloomForCausalLM"),Dbt.forEach(t),Z$o=r(gSe," (BLOOM model)"),gSe.forEach(t),eko=i(Q),e2=n(Q,"LI",{});var hSe=s(e2);Uge=n(hSe,"STRONG",{});var Gbt=s(Uge);oko=r(Gbt,"camembert"),Gbt.forEach(t),rko=r(hSe," \u2014 "),_O=n(hSe,"A",{href:!0});var Obt=s(_O);tko=r(Obt,"CamembertForCausalLM"),Obt.forEach(t),ako=r(hSe," (CamemBERT model)"),hSe.forEach(t),nko=i(Q),o2=n(Q,"LI",{});var pSe=s(o2);Jge=n(pSe,"STRONG",{});var Vbt=s(Jge);sko=r(Vbt,"codegen"),Vbt.forEach(t),lko=r(pSe," \u2014 "),uO=n(pSe,"A",{href:!0});var Xbt=s(uO);iko=r(Xbt,"CodeGenForCausalLM"),Xbt.forEach(t),dko=r(pSe," (CodeGen model)"),pSe.forEach(t),cko=i(Q),r2=n(Q,"LI",{});var _Se=s(r2);Yge=n(_Se,"STRONG",{});var zbt=s(Yge);fko=r(zbt,"ctrl"),zbt.forEach(t),mko=r(_Se," \u2014 "),bO=n(_Se,"A",{href:!0});var Qbt=s(bO);gko=r(Qbt,"CTRLLMHeadModel"),Qbt.forEach(t),hko=r(_Se," (CTRL model)"),_Se.forEach(t),pko=i(Q),t2=n(Q,"LI",{});var uSe=s(t2);Kge=n(uSe,"STRONG",{});var Wbt=s(Kge);_ko=r(Wbt,"data2vec-text"),Wbt.forEach(t),uko=r(uSe," \u2014 "),vO=n(uSe,"A",{href:!0});var Hbt=s(vO);bko=r(Hbt,"Data2VecTextForCausalLM"),Hbt.forEach(t),vko=r(uSe," (Data2VecText model)"),uSe.forEach(t),Fko=i(Q),a2=n(Q,"LI",{});var bSe=s(a2);Zge=n(bSe,"STRONG",{});var Ubt=s(Zge);Tko=r(Ubt,"electra"),Ubt.forEach(t),Mko=r(bSe," \u2014 "),FO=n(bSe,"A",{href:!0});var Jbt=s(FO);Eko=r(Jbt,"ElectraForCausalLM"),Jbt.forEach(t),Cko=r(bSe," (ELECTRA model)"),bSe.forEach(t),wko=i(Q),n2=n(Q,"LI",{});var vSe=s(n2);ehe=n(vSe,"STRONG",{});var Ybt=s(ehe);Ako=r(Ybt,"gpt2"),Ybt.forEach(t),Lko=r(vSe," \u2014 "),TO=n(vSe,"A",{href:!0});var Kbt=s(TO);yko=r(Kbt,"GPT2LMHeadModel"),Kbt.forEach(t),xko=r(vSe," (OpenAI GPT-2 model)"),vSe.forEach(t),$ko=i(Q),s2=n(Q,"LI",{});var FSe=s(s2);ohe=n(FSe,"STRONG",{});var Zbt=s(ohe);kko=r(Zbt,"gpt_neo"),Zbt.forEach(t),Sko=r(FSe," \u2014 "),MO=n(FSe,"A",{href:!0});var evt=s(MO);Rko=r(evt,"GPTNeoForCausalLM"),evt.forEach(t),Pko=r(FSe," (GPT Neo model)"),FSe.forEach(t),Bko=i(Q),l2=n(Q,"LI",{});var TSe=s(l2);rhe=n(TSe,"STRONG",{});var ovt=s(rhe);Iko=r(ovt,"gpt_neox"),ovt.forEach(t),Nko=r(TSe," \u2014 "),EO=n(TSe,"A",{href:!0});var rvt=s(EO);qko=r(rvt,"GPTNeoXForCausalLM"),rvt.forEach(t),jko=r(TSe," (GPT NeoX model)"),TSe.forEach(t),Dko=i(Q),i2=n(Q,"LI",{});var MSe=s(i2);the=n(MSe,"STRONG",{});var tvt=s(the);Gko=r(tvt,"gptj"),tvt.forEach(t),Oko=r(MSe," \u2014 "),CO=n(MSe,"A",{href:!0});var avt=s(CO);Vko=r(avt,"GPTJForCausalLM"),avt.forEach(t),Xko=r(MSe," (GPT-J model)"),MSe.forEach(t),zko=i(Q),d2=n(Q,"LI",{});var ESe=s(d2);ahe=n(ESe,"STRONG",{});var nvt=s(ahe);Qko=r(nvt,"marian"),nvt.forEach(t),Wko=r(ESe," \u2014 "),wO=n(ESe,"A",{href:!0});var svt=s(wO);Hko=r(svt,"MarianForCausalLM"),svt.forEach(t),Uko=r(ESe," (Marian model)"),ESe.forEach(t),Jko=i(Q),c2=n(Q,"LI",{});var CSe=s(c2);nhe=n(CSe,"STRONG",{});var lvt=s(nhe);Yko=r(lvt,"mbart"),lvt.forEach(t),Kko=r(CSe," \u2014 "),AO=n(CSe,"A",{href:!0});var ivt=s(AO);Zko=r(ivt,"MBartForCausalLM"),ivt.forEach(t),eSo=r(CSe," (mBART model)"),CSe.forEach(t),oSo=i(Q),f2=n(Q,"LI",{});var wSe=s(f2);she=n(wSe,"STRONG",{});var dvt=s(she);rSo=r(dvt,"megatron-bert"),dvt.forEach(t),tSo=r(wSe," \u2014 "),LO=n(wSe,"A",{href:!0});var cvt=s(LO);aSo=r(cvt,"MegatronBertForCausalLM"),cvt.forEach(t),nSo=r(wSe," (Megatron-BERT model)"),wSe.forEach(t),sSo=i(Q),m2=n(Q,"LI",{});var ASe=s(m2);lhe=n(ASe,"STRONG",{});var fvt=s(lhe);lSo=r(fvt,"mvp"),fvt.forEach(t),iSo=r(ASe," \u2014 "),yO=n(ASe,"A",{href:!0});var mvt=s(yO);dSo=r(mvt,"MvpForCausalLM"),mvt.forEach(t),cSo=r(ASe," (MVP model)"),ASe.forEach(t),fSo=i(Q),g2=n(Q,"LI",{});var LSe=s(g2);ihe=n(LSe,"STRONG",{});var gvt=s(ihe);mSo=r(gvt,"openai-gpt"),gvt.forEach(t),gSo=r(LSe," \u2014 "),xO=n(LSe,"A",{href:!0});var hvt=s(xO);hSo=r(hvt,"OpenAIGPTLMHeadModel"),hvt.forEach(t),pSo=r(LSe," (OpenAI GPT model)"),LSe.forEach(t),_So=i(Q),h2=n(Q,"LI",{});var ySe=s(h2);dhe=n(ySe,"STRONG",{});var pvt=s(dhe);uSo=r(pvt,"opt"),pvt.forEach(t),bSo=r(ySe," \u2014 "),$O=n(ySe,"A",{href:!0});var _vt=s($O);vSo=r(_vt,"OPTForCausalLM"),_vt.forEach(t),FSo=r(ySe," (OPT model)"),ySe.forEach(t),TSo=i(Q),p2=n(Q,"LI",{});var xSe=s(p2);che=n(xSe,"STRONG",{});var uvt=s(che);MSo=r(uvt,"pegasus"),uvt.forEach(t),ESo=r(xSe," \u2014 "),kO=n(xSe,"A",{href:!0});var bvt=s(kO);CSo=r(bvt,"PegasusForCausalLM"),bvt.forEach(t),wSo=r(xSe," (Pegasus model)"),xSe.forEach(t),ASo=i(Q),_2=n(Q,"LI",{});var $Se=s(_2);fhe=n($Se,"STRONG",{});var vvt=s(fhe);LSo=r(vvt,"plbart"),vvt.forEach(t),ySo=r($Se," \u2014 "),SO=n($Se,"A",{href:!0});var Fvt=s(SO);xSo=r(Fvt,"PLBartForCausalLM"),Fvt.forEach(t),$So=r($Se," (PLBart model)"),$Se.forEach(t),kSo=i(Q),u2=n(Q,"LI",{});var kSe=s(u2);mhe=n(kSe,"STRONG",{});var Tvt=s(mhe);SSo=r(Tvt,"prophetnet"),Tvt.forEach(t),RSo=r(kSe," \u2014 "),RO=n(kSe,"A",{href:!0});var Mvt=s(RO);PSo=r(Mvt,"ProphetNetForCausalLM"),Mvt.forEach(t),BSo=r(kSe," (ProphetNet model)"),kSe.forEach(t),ISo=i(Q),b2=n(Q,"LI",{});var SSe=s(b2);ghe=n(SSe,"STRONG",{});var Evt=s(ghe);NSo=r(Evt,"qdqbert"),Evt.forEach(t),qSo=r(SSe," \u2014 "),PO=n(SSe,"A",{href:!0});var Cvt=s(PO);jSo=r(Cvt,"QDQBertLMHeadModel"),Cvt.forEach(t),DSo=r(SSe," (QDQBert model)"),SSe.forEach(t),GSo=i(Q),v2=n(Q,"LI",{});var RSe=s(v2);hhe=n(RSe,"STRONG",{});var wvt=s(hhe);OSo=r(wvt,"reformer"),wvt.forEach(t),VSo=r(RSe," \u2014 "),BO=n(RSe,"A",{href:!0});var Avt=s(BO);XSo=r(Avt,"ReformerModelWithLMHead"),Avt.forEach(t),zSo=r(RSe," (Reformer model)"),RSe.forEach(t),QSo=i(Q),F2=n(Q,"LI",{});var PSe=s(F2);phe=n(PSe,"STRONG",{});var Lvt=s(phe);WSo=r(Lvt,"rembert"),Lvt.forEach(t),HSo=r(PSe," \u2014 "),IO=n(PSe,"A",{href:!0});var yvt=s(IO);USo=r(yvt,"RemBertForCausalLM"),yvt.forEach(t),JSo=r(PSe," (RemBERT model)"),PSe.forEach(t),YSo=i(Q),T2=n(Q,"LI",{});var BSe=s(T2);_he=n(BSe,"STRONG",{});var xvt=s(_he);KSo=r(xvt,"roberta"),xvt.forEach(t),ZSo=r(BSe," \u2014 "),NO=n(BSe,"A",{href:!0});var $vt=s(NO);eRo=r($vt,"RobertaForCausalLM"),$vt.forEach(t),oRo=r(BSe," (RoBERTa model)"),BSe.forEach(t),rRo=i(Q),M2=n(Q,"LI",{});var ISe=s(M2);uhe=n(ISe,"STRONG",{});var kvt=s(uhe);tRo=r(kvt,"roformer"),kvt.forEach(t),aRo=r(ISe," \u2014 "),qO=n(ISe,"A",{href:!0});var Svt=s(qO);nRo=r(Svt,"RoFormerForCausalLM"),Svt.forEach(t),sRo=r(ISe," (RoFormer model)"),ISe.forEach(t),lRo=i(Q),E2=n(Q,"LI",{});var NSe=s(E2);bhe=n(NSe,"STRONG",{});var Rvt=s(bhe);iRo=r(Rvt,"speech_to_text_2"),Rvt.forEach(t),dRo=r(NSe," \u2014 "),jO=n(NSe,"A",{href:!0});var Pvt=s(jO);cRo=r(Pvt,"Speech2Text2ForCausalLM"),Pvt.forEach(t),fRo=r(NSe," (Speech2Text2 model)"),NSe.forEach(t),mRo=i(Q),C2=n(Q,"LI",{});var qSe=s(C2);vhe=n(qSe,"STRONG",{});var Bvt=s(vhe);gRo=r(Bvt,"transfo-xl"),Bvt.forEach(t),hRo=r(qSe," \u2014 "),DO=n(qSe,"A",{href:!0});var Ivt=s(DO);pRo=r(Ivt,"TransfoXLLMHeadModel"),Ivt.forEach(t),_Ro=r(qSe," (Transformer-XL model)"),qSe.forEach(t),uRo=i(Q),w2=n(Q,"LI",{});var jSe=s(w2);Fhe=n(jSe,"STRONG",{});var Nvt=s(Fhe);bRo=r(Nvt,"trocr"),Nvt.forEach(t),vRo=r(jSe," \u2014 "),GO=n(jSe,"A",{href:!0});var qvt=s(GO);FRo=r(qvt,"TrOCRForCausalLM"),qvt.forEach(t),TRo=r(jSe," (TrOCR model)"),jSe.forEach(t),MRo=i(Q),A2=n(Q,"LI",{});var DSe=s(A2);The=n(DSe,"STRONG",{});var jvt=s(The);ERo=r(jvt,"xglm"),jvt.forEach(t),CRo=r(DSe," \u2014 "),OO=n(DSe,"A",{href:!0});var Dvt=s(OO);wRo=r(Dvt,"XGLMForCausalLM"),Dvt.forEach(t),ARo=r(DSe," (XGLM model)"),DSe.forEach(t),LRo=i(Q),L2=n(Q,"LI",{});var GSe=s(L2);Mhe=n(GSe,"STRONG",{});var Gvt=s(Mhe);yRo=r(Gvt,"xlm"),Gvt.forEach(t),xRo=r(GSe," \u2014 "),VO=n(GSe,"A",{href:!0});var Ovt=s(VO);$Ro=r(Ovt,"XLMWithLMHeadModel"),Ovt.forEach(t),kRo=r(GSe," (XLM model)"),GSe.forEach(t),SRo=i(Q),y2=n(Q,"LI",{});var OSe=s(y2);Ehe=n(OSe,"STRONG",{});var Vvt=s(Ehe);RRo=r(Vvt,"xlm-prophetnet"),Vvt.forEach(t),PRo=r(OSe," \u2014 "),XO=n(OSe,"A",{href:!0});var Xvt=s(XO);BRo=r(Xvt,"XLMProphetNetForCausalLM"),Xvt.forEach(t),IRo=r(OSe," (XLM-ProphetNet model)"),OSe.forEach(t),NRo=i(Q),x2=n(Q,"LI",{});var VSe=s(x2);Che=n(VSe,"STRONG",{});var zvt=s(Che);qRo=r(zvt,"xlm-roberta"),zvt.forEach(t),jRo=r(VSe," \u2014 "),zO=n(VSe,"A",{href:!0});var Qvt=s(zO);DRo=r(Qvt,"XLMRobertaForCausalLM"),Qvt.forEach(t),GRo=r(VSe," (XLM-RoBERTa model)"),VSe.forEach(t),ORo=i(Q),$2=n(Q,"LI",{});var XSe=s($2);whe=n(XSe,"STRONG",{});var Wvt=s(whe);VRo=r(Wvt,"xlm-roberta-xl"),Wvt.forEach(t),XRo=r(XSe," \u2014 "),QO=n(XSe,"A",{href:!0});var Hvt=s(QO);zRo=r(Hvt,"XLMRobertaXLForCausalLM"),Hvt.forEach(t),QRo=r(XSe," (XLM-RoBERTa-XL model)"),XSe.forEach(t),WRo=i(Q),k2=n(Q,"LI",{});var zSe=s(k2);Ahe=n(zSe,"STRONG",{});var Uvt=s(Ahe);HRo=r(Uvt,"xlnet"),Uvt.forEach(t),URo=r(zSe," \u2014 "),WO=n(zSe,"A",{href:!0});var Jvt=s(WO);JRo=r(Jvt,"XLNetLMHeadModel"),Jvt.forEach(t),YRo=r(zSe," (XLNet model)"),zSe.forEach(t),Q.forEach(t),KRo=i(da),S2=n(da,"P",{});var QSe=s(S2);ZRo=r(QSe,"The model is set in evaluation mode by default using "),Lhe=n(QSe,"CODE",{});var Yvt=s(Lhe);ePo=r(Yvt,"model.eval()"),Yvt.forEach(t),oPo=r(QSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=n(QSe,"CODE",{});var Kvt=s(yhe);rPo=r(Kvt,"model.train()"),Kvt.forEach(t),QSe.forEach(t),tPo=i(da),T(R2.$$.fragment,da),da.forEach(t),nl.forEach(t),GXe=i(f),Yi=n(f,"H2",{class:!0});var WQe=s(Yi);P2=n(WQe,"A",{id:!0,class:!0,href:!0});var Zvt=s(P2);xhe=n(Zvt,"SPAN",{});var eFt=s(xhe);T(YL.$$.fragment,eFt),eFt.forEach(t),Zvt.forEach(t),aPo=i(WQe),$he=n(WQe,"SPAN",{});var oFt=s($he);nPo=r(oFt,"AutoModelForMaskedLM"),oFt.forEach(t),WQe.forEach(t),OXe=i(f),Po=n(f,"DIV",{class:!0});var sl=s(Po);T(KL.$$.fragment,sl),sPo=i(sl),Ki=n(sl,"P",{});var Kre=s(Ki);lPo=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HO=n(Kre,"A",{href:!0});var rFt=s(HO);iPo=r(rFt,"from_pretrained()"),rFt.forEach(t),dPo=r(Kre," class method or the "),UO=n(Kre,"A",{href:!0});var tFt=s(UO);cPo=r(tFt,"from_config()"),tFt.forEach(t),fPo=r(Kre,` class
method.`),Kre.forEach(t),mPo=i(sl),ZL=n(sl,"P",{});var HQe=s(ZL);gPo=r(HQe,"This class cannot be instantiated directly using "),khe=n(HQe,"CODE",{});var aFt=s(khe);hPo=r(aFt,"__init__()"),aFt.forEach(t),pPo=r(HQe," (throws an error)."),HQe.forEach(t),_Po=i(sl),ft=n(sl,"DIV",{class:!0});var F6=s(ft);T(ey.$$.fragment,F6),uPo=i(F6),She=n(F6,"P",{});var nFt=s(She);bPo=r(nFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nFt.forEach(t),vPo=i(F6),Zi=n(F6,"P",{});var Zre=s(Zi);FPo=r(Zre,`Note:
Loading a model from its configuration file does `),Rhe=n(Zre,"STRONG",{});var sFt=s(Rhe);TPo=r(sFt,"not"),sFt.forEach(t),MPo=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(Zre,"A",{href:!0});var lFt=s(JO);EPo=r(lFt,"from_pretrained()"),lFt.forEach(t),CPo=r(Zre," to load the model weights."),Zre.forEach(t),wPo=i(F6),T(B2.$$.fragment,F6),F6.forEach(t),APo=i(sl),eo=n(sl,"DIV",{class:!0});var ca=s(eo);T(oy.$$.fragment,ca),LPo=i(ca),Phe=n(ca,"P",{});var iFt=s(Phe);yPo=r(iFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iFt.forEach(t),xPo=i(ca),ja=n(ca,"P",{});var T6=s(ja);$Po=r(T6,"The model class to instantiate is selected based on the "),Bhe=n(T6,"CODE",{});var dFt=s(Bhe);kPo=r(dFt,"model_type"),dFt.forEach(t),SPo=r(T6,` property of the config object (either
passed as an argument or loaded from `),Ihe=n(T6,"CODE",{});var cFt=s(Ihe);RPo=r(cFt,"pretrained_model_name_or_path"),cFt.forEach(t),PPo=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=n(T6,"CODE",{});var fFt=s(Nhe);BPo=r(fFt,"pretrained_model_name_or_path"),fFt.forEach(t),IPo=r(T6,":"),T6.forEach(t),NPo=i(ca),W=n(ca,"UL",{});var H=s(W);I2=n(H,"LI",{});var WSe=s(I2);qhe=n(WSe,"STRONG",{});var mFt=s(qhe);qPo=r(mFt,"albert"),mFt.forEach(t),jPo=r(WSe," \u2014 "),YO=n(WSe,"A",{href:!0});var gFt=s(YO);DPo=r(gFt,"AlbertForMaskedLM"),gFt.forEach(t),GPo=r(WSe," (ALBERT model)"),WSe.forEach(t),OPo=i(H),N2=n(H,"LI",{});var HSe=s(N2);jhe=n(HSe,"STRONG",{});var hFt=s(jhe);VPo=r(hFt,"bart"),hFt.forEach(t),XPo=r(HSe," \u2014 "),KO=n(HSe,"A",{href:!0});var pFt=s(KO);zPo=r(pFt,"BartForConditionalGeneration"),pFt.forEach(t),QPo=r(HSe," (BART model)"),HSe.forEach(t),WPo=i(H),q2=n(H,"LI",{});var USe=s(q2);Dhe=n(USe,"STRONG",{});var _Ft=s(Dhe);HPo=r(_Ft,"bert"),_Ft.forEach(t),UPo=r(USe," \u2014 "),ZO=n(USe,"A",{href:!0});var uFt=s(ZO);JPo=r(uFt,"BertForMaskedLM"),uFt.forEach(t),YPo=r(USe," (BERT model)"),USe.forEach(t),KPo=i(H),j2=n(H,"LI",{});var JSe=s(j2);Ghe=n(JSe,"STRONG",{});var bFt=s(Ghe);ZPo=r(bFt,"big_bird"),bFt.forEach(t),eBo=r(JSe," \u2014 "),eV=n(JSe,"A",{href:!0});var vFt=s(eV);oBo=r(vFt,"BigBirdForMaskedLM"),vFt.forEach(t),rBo=r(JSe," (BigBird model)"),JSe.forEach(t),tBo=i(H),D2=n(H,"LI",{});var YSe=s(D2);Ohe=n(YSe,"STRONG",{});var FFt=s(Ohe);aBo=r(FFt,"camembert"),FFt.forEach(t),nBo=r(YSe," \u2014 "),oV=n(YSe,"A",{href:!0});var TFt=s(oV);sBo=r(TFt,"CamembertForMaskedLM"),TFt.forEach(t),lBo=r(YSe," (CamemBERT model)"),YSe.forEach(t),iBo=i(H),G2=n(H,"LI",{});var KSe=s(G2);Vhe=n(KSe,"STRONG",{});var MFt=s(Vhe);dBo=r(MFt,"convbert"),MFt.forEach(t),cBo=r(KSe," \u2014 "),rV=n(KSe,"A",{href:!0});var EFt=s(rV);fBo=r(EFt,"ConvBertForMaskedLM"),EFt.forEach(t),mBo=r(KSe," (ConvBERT model)"),KSe.forEach(t),gBo=i(H),O2=n(H,"LI",{});var ZSe=s(O2);Xhe=n(ZSe,"STRONG",{});var CFt=s(Xhe);hBo=r(CFt,"data2vec-text"),CFt.forEach(t),pBo=r(ZSe," \u2014 "),tV=n(ZSe,"A",{href:!0});var wFt=s(tV);_Bo=r(wFt,"Data2VecTextForMaskedLM"),wFt.forEach(t),uBo=r(ZSe," (Data2VecText model)"),ZSe.forEach(t),bBo=i(H),V2=n(H,"LI",{});var eRe=s(V2);zhe=n(eRe,"STRONG",{});var AFt=s(zhe);vBo=r(AFt,"deberta"),AFt.forEach(t),FBo=r(eRe," \u2014 "),aV=n(eRe,"A",{href:!0});var LFt=s(aV);TBo=r(LFt,"DebertaForMaskedLM"),LFt.forEach(t),MBo=r(eRe," (DeBERTa model)"),eRe.forEach(t),EBo=i(H),X2=n(H,"LI",{});var oRe=s(X2);Qhe=n(oRe,"STRONG",{});var yFt=s(Qhe);CBo=r(yFt,"deberta-v2"),yFt.forEach(t),wBo=r(oRe," \u2014 "),nV=n(oRe,"A",{href:!0});var xFt=s(nV);ABo=r(xFt,"DebertaV2ForMaskedLM"),xFt.forEach(t),LBo=r(oRe," (DeBERTa-v2 model)"),oRe.forEach(t),yBo=i(H),z2=n(H,"LI",{});var rRe=s(z2);Whe=n(rRe,"STRONG",{});var $Ft=s(Whe);xBo=r($Ft,"distilbert"),$Ft.forEach(t),$Bo=r(rRe," \u2014 "),sV=n(rRe,"A",{href:!0});var kFt=s(sV);kBo=r(kFt,"DistilBertForMaskedLM"),kFt.forEach(t),SBo=r(rRe," (DistilBERT model)"),rRe.forEach(t),RBo=i(H),Q2=n(H,"LI",{});var tRe=s(Q2);Hhe=n(tRe,"STRONG",{});var SFt=s(Hhe);PBo=r(SFt,"electra"),SFt.forEach(t),BBo=r(tRe," \u2014 "),lV=n(tRe,"A",{href:!0});var RFt=s(lV);IBo=r(RFt,"ElectraForMaskedLM"),RFt.forEach(t),NBo=r(tRe," (ELECTRA model)"),tRe.forEach(t),qBo=i(H),W2=n(H,"LI",{});var aRe=s(W2);Uhe=n(aRe,"STRONG",{});var PFt=s(Uhe);jBo=r(PFt,"flaubert"),PFt.forEach(t),DBo=r(aRe," \u2014 "),iV=n(aRe,"A",{href:!0});var BFt=s(iV);GBo=r(BFt,"FlaubertWithLMHeadModel"),BFt.forEach(t),OBo=r(aRe," (FlauBERT model)"),aRe.forEach(t),VBo=i(H),H2=n(H,"LI",{});var nRe=s(H2);Jhe=n(nRe,"STRONG",{});var IFt=s(Jhe);XBo=r(IFt,"fnet"),IFt.forEach(t),zBo=r(nRe," \u2014 "),dV=n(nRe,"A",{href:!0});var NFt=s(dV);QBo=r(NFt,"FNetForMaskedLM"),NFt.forEach(t),WBo=r(nRe," (FNet model)"),nRe.forEach(t),HBo=i(H),U2=n(H,"LI",{});var sRe=s(U2);Yhe=n(sRe,"STRONG",{});var qFt=s(Yhe);UBo=r(qFt,"funnel"),qFt.forEach(t),JBo=r(sRe," \u2014 "),cV=n(sRe,"A",{href:!0});var jFt=s(cV);YBo=r(jFt,"FunnelForMaskedLM"),jFt.forEach(t),KBo=r(sRe," (Funnel Transformer model)"),sRe.forEach(t),ZBo=i(H),J2=n(H,"LI",{});var lRe=s(J2);Khe=n(lRe,"STRONG",{});var DFt=s(Khe);eIo=r(DFt,"ibert"),DFt.forEach(t),oIo=r(lRe," \u2014 "),fV=n(lRe,"A",{href:!0});var GFt=s(fV);rIo=r(GFt,"IBertForMaskedLM"),GFt.forEach(t),tIo=r(lRe," (I-BERT model)"),lRe.forEach(t),aIo=i(H),Y2=n(H,"LI",{});var iRe=s(Y2);Zhe=n(iRe,"STRONG",{});var OFt=s(Zhe);nIo=r(OFt,"layoutlm"),OFt.forEach(t),sIo=r(iRe," \u2014 "),mV=n(iRe,"A",{href:!0});var VFt=s(mV);lIo=r(VFt,"LayoutLMForMaskedLM"),VFt.forEach(t),iIo=r(iRe," (LayoutLM model)"),iRe.forEach(t),dIo=i(H),K2=n(H,"LI",{});var dRe=s(K2);epe=n(dRe,"STRONG",{});var XFt=s(epe);cIo=r(XFt,"longformer"),XFt.forEach(t),fIo=r(dRe," \u2014 "),gV=n(dRe,"A",{href:!0});var zFt=s(gV);mIo=r(zFt,"LongformerForMaskedLM"),zFt.forEach(t),gIo=r(dRe," (Longformer model)"),dRe.forEach(t),hIo=i(H),Z2=n(H,"LI",{});var cRe=s(Z2);ope=n(cRe,"STRONG",{});var QFt=s(ope);pIo=r(QFt,"luke"),QFt.forEach(t),_Io=r(cRe," \u2014 "),hV=n(cRe,"A",{href:!0});var WFt=s(hV);uIo=r(WFt,"LukeForMaskedLM"),WFt.forEach(t),bIo=r(cRe," (LUKE model)"),cRe.forEach(t),vIo=i(H),e1=n(H,"LI",{});var fRe=s(e1);rpe=n(fRe,"STRONG",{});var HFt=s(rpe);FIo=r(HFt,"mbart"),HFt.forEach(t),TIo=r(fRe," \u2014 "),pV=n(fRe,"A",{href:!0});var UFt=s(pV);MIo=r(UFt,"MBartForConditionalGeneration"),UFt.forEach(t),EIo=r(fRe," (mBART model)"),fRe.forEach(t),CIo=i(H),o1=n(H,"LI",{});var mRe=s(o1);tpe=n(mRe,"STRONG",{});var JFt=s(tpe);wIo=r(JFt,"megatron-bert"),JFt.forEach(t),AIo=r(mRe," \u2014 "),_V=n(mRe,"A",{href:!0});var YFt=s(_V);LIo=r(YFt,"MegatronBertForMaskedLM"),YFt.forEach(t),yIo=r(mRe," (Megatron-BERT model)"),mRe.forEach(t),xIo=i(H),r1=n(H,"LI",{});var gRe=s(r1);ape=n(gRe,"STRONG",{});var KFt=s(ape);$Io=r(KFt,"mobilebert"),KFt.forEach(t),kIo=r(gRe," \u2014 "),uV=n(gRe,"A",{href:!0});var ZFt=s(uV);SIo=r(ZFt,"MobileBertForMaskedLM"),ZFt.forEach(t),RIo=r(gRe," (MobileBERT model)"),gRe.forEach(t),PIo=i(H),t1=n(H,"LI",{});var hRe=s(t1);npe=n(hRe,"STRONG",{});var eTt=s(npe);BIo=r(eTt,"mpnet"),eTt.forEach(t),IIo=r(hRe," \u2014 "),bV=n(hRe,"A",{href:!0});var oTt=s(bV);NIo=r(oTt,"MPNetForMaskedLM"),oTt.forEach(t),qIo=r(hRe," (MPNet model)"),hRe.forEach(t),jIo=i(H),a1=n(H,"LI",{});var pRe=s(a1);spe=n(pRe,"STRONG",{});var rTt=s(spe);DIo=r(rTt,"mvp"),rTt.forEach(t),GIo=r(pRe," \u2014 "),vV=n(pRe,"A",{href:!0});var tTt=s(vV);OIo=r(tTt,"MvpForConditionalGeneration"),tTt.forEach(t),VIo=r(pRe," (MVP model)"),pRe.forEach(t),XIo=i(H),n1=n(H,"LI",{});var _Re=s(n1);lpe=n(_Re,"STRONG",{});var aTt=s(lpe);zIo=r(aTt,"nezha"),aTt.forEach(t),QIo=r(_Re," \u2014 "),FV=n(_Re,"A",{href:!0});var nTt=s(FV);WIo=r(nTt,"NezhaForMaskedLM"),nTt.forEach(t),HIo=r(_Re," (Nezha model)"),_Re.forEach(t),UIo=i(H),s1=n(H,"LI",{});var uRe=s(s1);ipe=n(uRe,"STRONG",{});var sTt=s(ipe);JIo=r(sTt,"nystromformer"),sTt.forEach(t),YIo=r(uRe," \u2014 "),TV=n(uRe,"A",{href:!0});var lTt=s(TV);KIo=r(lTt,"NystromformerForMaskedLM"),lTt.forEach(t),ZIo=r(uRe," (Nystr\xF6mformer model)"),uRe.forEach(t),eNo=i(H),l1=n(H,"LI",{});var bRe=s(l1);dpe=n(bRe,"STRONG",{});var iTt=s(dpe);oNo=r(iTt,"perceiver"),iTt.forEach(t),rNo=r(bRe," \u2014 "),MV=n(bRe,"A",{href:!0});var dTt=s(MV);tNo=r(dTt,"PerceiverForMaskedLM"),dTt.forEach(t),aNo=r(bRe," (Perceiver model)"),bRe.forEach(t),nNo=i(H),i1=n(H,"LI",{});var vRe=s(i1);cpe=n(vRe,"STRONG",{});var cTt=s(cpe);sNo=r(cTt,"qdqbert"),cTt.forEach(t),lNo=r(vRe," \u2014 "),EV=n(vRe,"A",{href:!0});var fTt=s(EV);iNo=r(fTt,"QDQBertForMaskedLM"),fTt.forEach(t),dNo=r(vRe," (QDQBert model)"),vRe.forEach(t),cNo=i(H),d1=n(H,"LI",{});var FRe=s(d1);fpe=n(FRe,"STRONG",{});var mTt=s(fpe);fNo=r(mTt,"reformer"),mTt.forEach(t),mNo=r(FRe," \u2014 "),CV=n(FRe,"A",{href:!0});var gTt=s(CV);gNo=r(gTt,"ReformerForMaskedLM"),gTt.forEach(t),hNo=r(FRe," (Reformer model)"),FRe.forEach(t),pNo=i(H),c1=n(H,"LI",{});var TRe=s(c1);mpe=n(TRe,"STRONG",{});var hTt=s(mpe);_No=r(hTt,"rembert"),hTt.forEach(t),uNo=r(TRe," \u2014 "),wV=n(TRe,"A",{href:!0});var pTt=s(wV);bNo=r(pTt,"RemBertForMaskedLM"),pTt.forEach(t),vNo=r(TRe," (RemBERT model)"),TRe.forEach(t),FNo=i(H),f1=n(H,"LI",{});var MRe=s(f1);gpe=n(MRe,"STRONG",{});var _Tt=s(gpe);TNo=r(_Tt,"roberta"),_Tt.forEach(t),MNo=r(MRe," \u2014 "),AV=n(MRe,"A",{href:!0});var uTt=s(AV);ENo=r(uTt,"RobertaForMaskedLM"),uTt.forEach(t),CNo=r(MRe," (RoBERTa model)"),MRe.forEach(t),wNo=i(H),m1=n(H,"LI",{});var ERe=s(m1);hpe=n(ERe,"STRONG",{});var bTt=s(hpe);ANo=r(bTt,"roformer"),bTt.forEach(t),LNo=r(ERe," \u2014 "),LV=n(ERe,"A",{href:!0});var vTt=s(LV);yNo=r(vTt,"RoFormerForMaskedLM"),vTt.forEach(t),xNo=r(ERe," (RoFormer model)"),ERe.forEach(t),$No=i(H),g1=n(H,"LI",{});var CRe=s(g1);ppe=n(CRe,"STRONG",{});var FTt=s(ppe);kNo=r(FTt,"squeezebert"),FTt.forEach(t),SNo=r(CRe," \u2014 "),yV=n(CRe,"A",{href:!0});var TTt=s(yV);RNo=r(TTt,"SqueezeBertForMaskedLM"),TTt.forEach(t),PNo=r(CRe," (SqueezeBERT model)"),CRe.forEach(t),BNo=i(H),h1=n(H,"LI",{});var wRe=s(h1);_pe=n(wRe,"STRONG",{});var MTt=s(_pe);INo=r(MTt,"tapas"),MTt.forEach(t),NNo=r(wRe," \u2014 "),xV=n(wRe,"A",{href:!0});var ETt=s(xV);qNo=r(ETt,"TapasForMaskedLM"),ETt.forEach(t),jNo=r(wRe," (TAPAS model)"),wRe.forEach(t),DNo=i(H),p1=n(H,"LI",{});var ARe=s(p1);upe=n(ARe,"STRONG",{});var CTt=s(upe);GNo=r(CTt,"wav2vec2"),CTt.forEach(t),ONo=r(ARe," \u2014 "),bpe=n(ARe,"CODE",{});var wTt=s(bpe);VNo=r(wTt,"Wav2Vec2ForMaskedLM"),wTt.forEach(t),XNo=r(ARe," (Wav2Vec2 model)"),ARe.forEach(t),zNo=i(H),_1=n(H,"LI",{});var LRe=s(_1);vpe=n(LRe,"STRONG",{});var ATt=s(vpe);QNo=r(ATt,"xlm"),ATt.forEach(t),WNo=r(LRe," \u2014 "),$V=n(LRe,"A",{href:!0});var LTt=s($V);HNo=r(LTt,"XLMWithLMHeadModel"),LTt.forEach(t),UNo=r(LRe," (XLM model)"),LRe.forEach(t),JNo=i(H),u1=n(H,"LI",{});var yRe=s(u1);Fpe=n(yRe,"STRONG",{});var yTt=s(Fpe);YNo=r(yTt,"xlm-roberta"),yTt.forEach(t),KNo=r(yRe," \u2014 "),kV=n(yRe,"A",{href:!0});var xTt=s(kV);ZNo=r(xTt,"XLMRobertaForMaskedLM"),xTt.forEach(t),eqo=r(yRe," (XLM-RoBERTa model)"),yRe.forEach(t),oqo=i(H),b1=n(H,"LI",{});var xRe=s(b1);Tpe=n(xRe,"STRONG",{});var $Tt=s(Tpe);rqo=r($Tt,"xlm-roberta-xl"),$Tt.forEach(t),tqo=r(xRe," \u2014 "),SV=n(xRe,"A",{href:!0});var kTt=s(SV);aqo=r(kTt,"XLMRobertaXLForMaskedLM"),kTt.forEach(t),nqo=r(xRe," (XLM-RoBERTa-XL model)"),xRe.forEach(t),sqo=i(H),v1=n(H,"LI",{});var $Re=s(v1);Mpe=n($Re,"STRONG",{});var STt=s(Mpe);lqo=r(STt,"yoso"),STt.forEach(t),iqo=r($Re," \u2014 "),RV=n($Re,"A",{href:!0});var RTt=s(RV);dqo=r(RTt,"YosoForMaskedLM"),RTt.forEach(t),cqo=r($Re," (YOSO model)"),$Re.forEach(t),H.forEach(t),fqo=i(ca),F1=n(ca,"P",{});var kRe=s(F1);mqo=r(kRe,"The model is set in evaluation mode by default using "),Epe=n(kRe,"CODE",{});var PTt=s(Epe);gqo=r(PTt,"model.eval()"),PTt.forEach(t),hqo=r(kRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cpe=n(kRe,"CODE",{});var BTt=s(Cpe);pqo=r(BTt,"model.train()"),BTt.forEach(t),kRe.forEach(t),_qo=i(ca),T(T1.$$.fragment,ca),ca.forEach(t),sl.forEach(t),VXe=i(f),ed=n(f,"H2",{class:!0});var UQe=s(ed);M1=n(UQe,"A",{id:!0,class:!0,href:!0});var ITt=s(M1);wpe=n(ITt,"SPAN",{});var NTt=s(wpe);T(ry.$$.fragment,NTt),NTt.forEach(t),ITt.forEach(t),uqo=i(UQe),Ape=n(UQe,"SPAN",{});var qTt=s(Ape);bqo=r(qTt,"AutoModelForSeq2SeqLM"),qTt.forEach(t),UQe.forEach(t),XXe=i(f),Bo=n(f,"DIV",{class:!0});var ll=s(Bo);T(ty.$$.fragment,ll),vqo=i(ll),od=n(ll,"P",{});var ete=s(od);Fqo=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PV=n(ete,"A",{href:!0});var jTt=s(PV);Tqo=r(jTt,"from_pretrained()"),jTt.forEach(t),Mqo=r(ete," class method or the "),BV=n(ete,"A",{href:!0});var DTt=s(BV);Eqo=r(DTt,"from_config()"),DTt.forEach(t),Cqo=r(ete,` class
method.`),ete.forEach(t),wqo=i(ll),ay=n(ll,"P",{});var JQe=s(ay);Aqo=r(JQe,"This class cannot be instantiated directly using "),Lpe=n(JQe,"CODE",{});var GTt=s(Lpe);Lqo=r(GTt,"__init__()"),GTt.forEach(t),yqo=r(JQe," (throws an error)."),JQe.forEach(t),xqo=i(ll),mt=n(ll,"DIV",{class:!0});var M6=s(mt);T(ny.$$.fragment,M6),$qo=i(M6),ype=n(M6,"P",{});var OTt=s(ype);kqo=r(OTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),OTt.forEach(t),Sqo=i(M6),rd=n(M6,"P",{});var ote=s(rd);Rqo=r(ote,`Note:
Loading a model from its configuration file does `),xpe=n(ote,"STRONG",{});var VTt=s(xpe);Pqo=r(VTt,"not"),VTt.forEach(t),Bqo=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(ote,"A",{href:!0});var XTt=s(IV);Iqo=r(XTt,"from_pretrained()"),XTt.forEach(t),Nqo=r(ote," to load the model weights."),ote.forEach(t),qqo=i(M6),T(E1.$$.fragment,M6),M6.forEach(t),jqo=i(ll),oo=n(ll,"DIV",{class:!0});var fa=s(oo);T(sy.$$.fragment,fa),Dqo=i(fa),$pe=n(fa,"P",{});var zTt=s($pe);Gqo=r(zTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zTt.forEach(t),Oqo=i(fa),Da=n(fa,"P",{});var E6=s(Da);Vqo=r(E6,"The model class to instantiate is selected based on the "),kpe=n(E6,"CODE",{});var QTt=s(kpe);Xqo=r(QTt,"model_type"),QTt.forEach(t),zqo=r(E6,` property of the config object (either
passed as an argument or loaded from `),Spe=n(E6,"CODE",{});var WTt=s(Spe);Qqo=r(WTt,"pretrained_model_name_or_path"),WTt.forEach(t),Wqo=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rpe=n(E6,"CODE",{});var HTt=s(Rpe);Hqo=r(HTt,"pretrained_model_name_or_path"),HTt.forEach(t),Uqo=r(E6,":"),E6.forEach(t),Jqo=i(fa),fe=n(fa,"UL",{});var _e=s(fe);C1=n(_e,"LI",{});var SRe=s(C1);Ppe=n(SRe,"STRONG",{});var UTt=s(Ppe);Yqo=r(UTt,"bart"),UTt.forEach(t),Kqo=r(SRe," \u2014 "),NV=n(SRe,"A",{href:!0});var JTt=s(NV);Zqo=r(JTt,"BartForConditionalGeneration"),JTt.forEach(t),ejo=r(SRe," (BART model)"),SRe.forEach(t),ojo=i(_e),w1=n(_e,"LI",{});var RRe=s(w1);Bpe=n(RRe,"STRONG",{});var YTt=s(Bpe);rjo=r(YTt,"bigbird_pegasus"),YTt.forEach(t),tjo=r(RRe," \u2014 "),qV=n(RRe,"A",{href:!0});var KTt=s(qV);ajo=r(KTt,"BigBirdPegasusForConditionalGeneration"),KTt.forEach(t),njo=r(RRe," (BigBird-Pegasus model)"),RRe.forEach(t),sjo=i(_e),A1=n(_e,"LI",{});var PRe=s(A1);Ipe=n(PRe,"STRONG",{});var ZTt=s(Ipe);ljo=r(ZTt,"blenderbot"),ZTt.forEach(t),ijo=r(PRe," \u2014 "),jV=n(PRe,"A",{href:!0});var e8t=s(jV);djo=r(e8t,"BlenderbotForConditionalGeneration"),e8t.forEach(t),cjo=r(PRe," (Blenderbot model)"),PRe.forEach(t),fjo=i(_e),L1=n(_e,"LI",{});var BRe=s(L1);Npe=n(BRe,"STRONG",{});var o8t=s(Npe);mjo=r(o8t,"blenderbot-small"),o8t.forEach(t),gjo=r(BRe," \u2014 "),DV=n(BRe,"A",{href:!0});var r8t=s(DV);hjo=r(r8t,"BlenderbotSmallForConditionalGeneration"),r8t.forEach(t),pjo=r(BRe," (BlenderbotSmall model)"),BRe.forEach(t),_jo=i(_e),y1=n(_e,"LI",{});var IRe=s(y1);qpe=n(IRe,"STRONG",{});var t8t=s(qpe);ujo=r(t8t,"encoder-decoder"),t8t.forEach(t),bjo=r(IRe," \u2014 "),GV=n(IRe,"A",{href:!0});var a8t=s(GV);vjo=r(a8t,"EncoderDecoderModel"),a8t.forEach(t),Fjo=r(IRe," (Encoder decoder model)"),IRe.forEach(t),Tjo=i(_e),x1=n(_e,"LI",{});var NRe=s(x1);jpe=n(NRe,"STRONG",{});var n8t=s(jpe);Mjo=r(n8t,"fsmt"),n8t.forEach(t),Ejo=r(NRe," \u2014 "),OV=n(NRe,"A",{href:!0});var s8t=s(OV);Cjo=r(s8t,"FSMTForConditionalGeneration"),s8t.forEach(t),wjo=r(NRe," (FairSeq Machine-Translation model)"),NRe.forEach(t),Ajo=i(_e),$1=n(_e,"LI",{});var qRe=s($1);Dpe=n(qRe,"STRONG",{});var l8t=s(Dpe);Ljo=r(l8t,"led"),l8t.forEach(t),yjo=r(qRe," \u2014 "),VV=n(qRe,"A",{href:!0});var i8t=s(VV);xjo=r(i8t,"LEDForConditionalGeneration"),i8t.forEach(t),$jo=r(qRe," (LED model)"),qRe.forEach(t),kjo=i(_e),k1=n(_e,"LI",{});var jRe=s(k1);Gpe=n(jRe,"STRONG",{});var d8t=s(Gpe);Sjo=r(d8t,"longt5"),d8t.forEach(t),Rjo=r(jRe," \u2014 "),XV=n(jRe,"A",{href:!0});var c8t=s(XV);Pjo=r(c8t,"LongT5ForConditionalGeneration"),c8t.forEach(t),Bjo=r(jRe," (LongT5 model)"),jRe.forEach(t),Ijo=i(_e),S1=n(_e,"LI",{});var DRe=s(S1);Ope=n(DRe,"STRONG",{});var f8t=s(Ope);Njo=r(f8t,"m2m_100"),f8t.forEach(t),qjo=r(DRe," \u2014 "),zV=n(DRe,"A",{href:!0});var m8t=s(zV);jjo=r(m8t,"M2M100ForConditionalGeneration"),m8t.forEach(t),Djo=r(DRe," (M2M100 model)"),DRe.forEach(t),Gjo=i(_e),R1=n(_e,"LI",{});var GRe=s(R1);Vpe=n(GRe,"STRONG",{});var g8t=s(Vpe);Ojo=r(g8t,"marian"),g8t.forEach(t),Vjo=r(GRe," \u2014 "),QV=n(GRe,"A",{href:!0});var h8t=s(QV);Xjo=r(h8t,"MarianMTModel"),h8t.forEach(t),zjo=r(GRe," (Marian model)"),GRe.forEach(t),Qjo=i(_e),P1=n(_e,"LI",{});var ORe=s(P1);Xpe=n(ORe,"STRONG",{});var p8t=s(Xpe);Wjo=r(p8t,"mbart"),p8t.forEach(t),Hjo=r(ORe," \u2014 "),WV=n(ORe,"A",{href:!0});var _8t=s(WV);Ujo=r(_8t,"MBartForConditionalGeneration"),_8t.forEach(t),Jjo=r(ORe," (mBART model)"),ORe.forEach(t),Yjo=i(_e),B1=n(_e,"LI",{});var VRe=s(B1);zpe=n(VRe,"STRONG",{});var u8t=s(zpe);Kjo=r(u8t,"mt5"),u8t.forEach(t),Zjo=r(VRe," \u2014 "),HV=n(VRe,"A",{href:!0});var b8t=s(HV);eDo=r(b8t,"MT5ForConditionalGeneration"),b8t.forEach(t),oDo=r(VRe," (MT5 model)"),VRe.forEach(t),rDo=i(_e),I1=n(_e,"LI",{});var XRe=s(I1);Qpe=n(XRe,"STRONG",{});var v8t=s(Qpe);tDo=r(v8t,"mvp"),v8t.forEach(t),aDo=r(XRe," \u2014 "),UV=n(XRe,"A",{href:!0});var F8t=s(UV);nDo=r(F8t,"MvpForConditionalGeneration"),F8t.forEach(t),sDo=r(XRe," (MVP model)"),XRe.forEach(t),lDo=i(_e),N1=n(_e,"LI",{});var zRe=s(N1);Wpe=n(zRe,"STRONG",{});var T8t=s(Wpe);iDo=r(T8t,"nllb"),T8t.forEach(t),dDo=r(zRe," \u2014 "),JV=n(zRe,"A",{href:!0});var M8t=s(JV);cDo=r(M8t,"M2M100ForConditionalGeneration"),M8t.forEach(t),fDo=r(zRe," (NLLB model)"),zRe.forEach(t),mDo=i(_e),q1=n(_e,"LI",{});var QRe=s(q1);Hpe=n(QRe,"STRONG",{});var E8t=s(Hpe);gDo=r(E8t,"pegasus"),E8t.forEach(t),hDo=r(QRe," \u2014 "),YV=n(QRe,"A",{href:!0});var C8t=s(YV);pDo=r(C8t,"PegasusForConditionalGeneration"),C8t.forEach(t),_Do=r(QRe," (Pegasus model)"),QRe.forEach(t),uDo=i(_e),j1=n(_e,"LI",{});var WRe=s(j1);Upe=n(WRe,"STRONG",{});var w8t=s(Upe);bDo=r(w8t,"plbart"),w8t.forEach(t),vDo=r(WRe," \u2014 "),KV=n(WRe,"A",{href:!0});var A8t=s(KV);FDo=r(A8t,"PLBartForConditionalGeneration"),A8t.forEach(t),TDo=r(WRe," (PLBart model)"),WRe.forEach(t),MDo=i(_e),D1=n(_e,"LI",{});var HRe=s(D1);Jpe=n(HRe,"STRONG",{});var L8t=s(Jpe);EDo=r(L8t,"prophetnet"),L8t.forEach(t),CDo=r(HRe," \u2014 "),ZV=n(HRe,"A",{href:!0});var y8t=s(ZV);wDo=r(y8t,"ProphetNetForConditionalGeneration"),y8t.forEach(t),ADo=r(HRe," (ProphetNet model)"),HRe.forEach(t),LDo=i(_e),G1=n(_e,"LI",{});var URe=s(G1);Ype=n(URe,"STRONG",{});var x8t=s(Ype);yDo=r(x8t,"t5"),x8t.forEach(t),xDo=r(URe," \u2014 "),eX=n(URe,"A",{href:!0});var $8t=s(eX);$Do=r($8t,"T5ForConditionalGeneration"),$8t.forEach(t),kDo=r(URe," (T5 model)"),URe.forEach(t),SDo=i(_e),O1=n(_e,"LI",{});var JRe=s(O1);Kpe=n(JRe,"STRONG",{});var k8t=s(Kpe);RDo=r(k8t,"xlm-prophetnet"),k8t.forEach(t),PDo=r(JRe," \u2014 "),oX=n(JRe,"A",{href:!0});var S8t=s(oX);BDo=r(S8t,"XLMProphetNetForConditionalGeneration"),S8t.forEach(t),IDo=r(JRe," (XLM-ProphetNet model)"),JRe.forEach(t),_e.forEach(t),NDo=i(fa),V1=n(fa,"P",{});var YRe=s(V1);qDo=r(YRe,"The model is set in evaluation mode by default using "),Zpe=n(YRe,"CODE",{});var R8t=s(Zpe);jDo=r(R8t,"model.eval()"),R8t.forEach(t),DDo=r(YRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=n(YRe,"CODE",{});var P8t=s(e_e);GDo=r(P8t,"model.train()"),P8t.forEach(t),YRe.forEach(t),ODo=i(fa),T(X1.$$.fragment,fa),fa.forEach(t),ll.forEach(t),zXe=i(f),td=n(f,"H2",{class:!0});var YQe=s(td);z1=n(YQe,"A",{id:!0,class:!0,href:!0});var B8t=s(z1);o_e=n(B8t,"SPAN",{});var I8t=s(o_e);T(ly.$$.fragment,I8t),I8t.forEach(t),B8t.forEach(t),VDo=i(YQe),r_e=n(YQe,"SPAN",{});var N8t=s(r_e);XDo=r(N8t,"AutoModelForSequenceClassification"),N8t.forEach(t),YQe.forEach(t),QXe=i(f),Io=n(f,"DIV",{class:!0});var il=s(Io);T(iy.$$.fragment,il),zDo=i(il),ad=n(il,"P",{});var rte=s(ad);QDo=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rX=n(rte,"A",{href:!0});var q8t=s(rX);WDo=r(q8t,"from_pretrained()"),q8t.forEach(t),HDo=r(rte," class method or the "),tX=n(rte,"A",{href:!0});var j8t=s(tX);UDo=r(j8t,"from_config()"),j8t.forEach(t),JDo=r(rte,` class
method.`),rte.forEach(t),YDo=i(il),dy=n(il,"P",{});var KQe=s(dy);KDo=r(KQe,"This class cannot be instantiated directly using "),t_e=n(KQe,"CODE",{});var D8t=s(t_e);ZDo=r(D8t,"__init__()"),D8t.forEach(t),eGo=r(KQe," (throws an error)."),KQe.forEach(t),oGo=i(il),gt=n(il,"DIV",{class:!0});var C6=s(gt);T(cy.$$.fragment,C6),rGo=i(C6),a_e=n(C6,"P",{});var G8t=s(a_e);tGo=r(G8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),G8t.forEach(t),aGo=i(C6),nd=n(C6,"P",{});var tte=s(nd);nGo=r(tte,`Note:
Loading a model from its configuration file does `),n_e=n(tte,"STRONG",{});var O8t=s(n_e);sGo=r(O8t,"not"),O8t.forEach(t),lGo=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(tte,"A",{href:!0});var V8t=s(aX);iGo=r(V8t,"from_pretrained()"),V8t.forEach(t),dGo=r(tte," to load the model weights."),tte.forEach(t),cGo=i(C6),T(Q1.$$.fragment,C6),C6.forEach(t),fGo=i(il),ro=n(il,"DIV",{class:!0});var ma=s(ro);T(fy.$$.fragment,ma),mGo=i(ma),s_e=n(ma,"P",{});var X8t=s(s_e);gGo=r(X8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),X8t.forEach(t),hGo=i(ma),Ga=n(ma,"P",{});var w6=s(Ga);pGo=r(w6,"The model class to instantiate is selected based on the "),l_e=n(w6,"CODE",{});var z8t=s(l_e);_Go=r(z8t,"model_type"),z8t.forEach(t),uGo=r(w6,` property of the config object (either
passed as an argument or loaded from `),i_e=n(w6,"CODE",{});var Q8t=s(i_e);bGo=r(Q8t,"pretrained_model_name_or_path"),Q8t.forEach(t),vGo=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=n(w6,"CODE",{});var W8t=s(d_e);FGo=r(W8t,"pretrained_model_name_or_path"),W8t.forEach(t),TGo=r(w6,":"),w6.forEach(t),MGo=i(ma),B=n(ma,"UL",{});var j=s(B);W1=n(j,"LI",{});var KRe=s(W1);c_e=n(KRe,"STRONG",{});var H8t=s(c_e);EGo=r(H8t,"albert"),H8t.forEach(t),CGo=r(KRe," \u2014 "),nX=n(KRe,"A",{href:!0});var U8t=s(nX);wGo=r(U8t,"AlbertForSequenceClassification"),U8t.forEach(t),AGo=r(KRe," (ALBERT model)"),KRe.forEach(t),LGo=i(j),H1=n(j,"LI",{});var ZRe=s(H1);f_e=n(ZRe,"STRONG",{});var J8t=s(f_e);yGo=r(J8t,"bart"),J8t.forEach(t),xGo=r(ZRe," \u2014 "),sX=n(ZRe,"A",{href:!0});var Y8t=s(sX);$Go=r(Y8t,"BartForSequenceClassification"),Y8t.forEach(t),kGo=r(ZRe," (BART model)"),ZRe.forEach(t),SGo=i(j),U1=n(j,"LI",{});var ePe=s(U1);m_e=n(ePe,"STRONG",{});var K8t=s(m_e);RGo=r(K8t,"bert"),K8t.forEach(t),PGo=r(ePe," \u2014 "),lX=n(ePe,"A",{href:!0});var Z8t=s(lX);BGo=r(Z8t,"BertForSequenceClassification"),Z8t.forEach(t),IGo=r(ePe," (BERT model)"),ePe.forEach(t),NGo=i(j),J1=n(j,"LI",{});var oPe=s(J1);g_e=n(oPe,"STRONG",{});var eMt=s(g_e);qGo=r(eMt,"big_bird"),eMt.forEach(t),jGo=r(oPe," \u2014 "),iX=n(oPe,"A",{href:!0});var oMt=s(iX);DGo=r(oMt,"BigBirdForSequenceClassification"),oMt.forEach(t),GGo=r(oPe," (BigBird model)"),oPe.forEach(t),OGo=i(j),Y1=n(j,"LI",{});var rPe=s(Y1);h_e=n(rPe,"STRONG",{});var rMt=s(h_e);VGo=r(rMt,"bigbird_pegasus"),rMt.forEach(t),XGo=r(rPe," \u2014 "),dX=n(rPe,"A",{href:!0});var tMt=s(dX);zGo=r(tMt,"BigBirdPegasusForSequenceClassification"),tMt.forEach(t),QGo=r(rPe," (BigBird-Pegasus model)"),rPe.forEach(t),WGo=i(j),K1=n(j,"LI",{});var tPe=s(K1);p_e=n(tPe,"STRONG",{});var aMt=s(p_e);HGo=r(aMt,"bloom"),aMt.forEach(t),UGo=r(tPe," \u2014 "),cX=n(tPe,"A",{href:!0});var nMt=s(cX);JGo=r(nMt,"BloomForSequenceClassification"),nMt.forEach(t),YGo=r(tPe," (BLOOM model)"),tPe.forEach(t),KGo=i(j),Z1=n(j,"LI",{});var aPe=s(Z1);__e=n(aPe,"STRONG",{});var sMt=s(__e);ZGo=r(sMt,"camembert"),sMt.forEach(t),eOo=r(aPe," \u2014 "),fX=n(aPe,"A",{href:!0});var lMt=s(fX);oOo=r(lMt,"CamembertForSequenceClassification"),lMt.forEach(t),rOo=r(aPe," (CamemBERT model)"),aPe.forEach(t),tOo=i(j),eb=n(j,"LI",{});var nPe=s(eb);u_e=n(nPe,"STRONG",{});var iMt=s(u_e);aOo=r(iMt,"canine"),iMt.forEach(t),nOo=r(nPe," \u2014 "),mX=n(nPe,"A",{href:!0});var dMt=s(mX);sOo=r(dMt,"CanineForSequenceClassification"),dMt.forEach(t),lOo=r(nPe," (CANINE model)"),nPe.forEach(t),iOo=i(j),ob=n(j,"LI",{});var sPe=s(ob);b_e=n(sPe,"STRONG",{});var cMt=s(b_e);dOo=r(cMt,"convbert"),cMt.forEach(t),cOo=r(sPe," \u2014 "),gX=n(sPe,"A",{href:!0});var fMt=s(gX);fOo=r(fMt,"ConvBertForSequenceClassification"),fMt.forEach(t),mOo=r(sPe," (ConvBERT model)"),sPe.forEach(t),gOo=i(j),rb=n(j,"LI",{});var lPe=s(rb);v_e=n(lPe,"STRONG",{});var mMt=s(v_e);hOo=r(mMt,"ctrl"),mMt.forEach(t),pOo=r(lPe," \u2014 "),hX=n(lPe,"A",{href:!0});var gMt=s(hX);_Oo=r(gMt,"CTRLForSequenceClassification"),gMt.forEach(t),uOo=r(lPe," (CTRL model)"),lPe.forEach(t),bOo=i(j),tb=n(j,"LI",{});var iPe=s(tb);F_e=n(iPe,"STRONG",{});var hMt=s(F_e);vOo=r(hMt,"data2vec-text"),hMt.forEach(t),FOo=r(iPe," \u2014 "),pX=n(iPe,"A",{href:!0});var pMt=s(pX);TOo=r(pMt,"Data2VecTextForSequenceClassification"),pMt.forEach(t),MOo=r(iPe," (Data2VecText model)"),iPe.forEach(t),EOo=i(j),ab=n(j,"LI",{});var dPe=s(ab);T_e=n(dPe,"STRONG",{});var _Mt=s(T_e);COo=r(_Mt,"deberta"),_Mt.forEach(t),wOo=r(dPe," \u2014 "),_X=n(dPe,"A",{href:!0});var uMt=s(_X);AOo=r(uMt,"DebertaForSequenceClassification"),uMt.forEach(t),LOo=r(dPe," (DeBERTa model)"),dPe.forEach(t),yOo=i(j),nb=n(j,"LI",{});var cPe=s(nb);M_e=n(cPe,"STRONG",{});var bMt=s(M_e);xOo=r(bMt,"deberta-v2"),bMt.forEach(t),$Oo=r(cPe," \u2014 "),uX=n(cPe,"A",{href:!0});var vMt=s(uX);kOo=r(vMt,"DebertaV2ForSequenceClassification"),vMt.forEach(t),SOo=r(cPe," (DeBERTa-v2 model)"),cPe.forEach(t),ROo=i(j),sb=n(j,"LI",{});var fPe=s(sb);E_e=n(fPe,"STRONG",{});var FMt=s(E_e);POo=r(FMt,"distilbert"),FMt.forEach(t),BOo=r(fPe," \u2014 "),bX=n(fPe,"A",{href:!0});var TMt=s(bX);IOo=r(TMt,"DistilBertForSequenceClassification"),TMt.forEach(t),NOo=r(fPe," (DistilBERT model)"),fPe.forEach(t),qOo=i(j),lb=n(j,"LI",{});var mPe=s(lb);C_e=n(mPe,"STRONG",{});var MMt=s(C_e);jOo=r(MMt,"electra"),MMt.forEach(t),DOo=r(mPe," \u2014 "),vX=n(mPe,"A",{href:!0});var EMt=s(vX);GOo=r(EMt,"ElectraForSequenceClassification"),EMt.forEach(t),OOo=r(mPe," (ELECTRA model)"),mPe.forEach(t),VOo=i(j),ib=n(j,"LI",{});var gPe=s(ib);w_e=n(gPe,"STRONG",{});var CMt=s(w_e);XOo=r(CMt,"flaubert"),CMt.forEach(t),zOo=r(gPe," \u2014 "),FX=n(gPe,"A",{href:!0});var wMt=s(FX);QOo=r(wMt,"FlaubertForSequenceClassification"),wMt.forEach(t),WOo=r(gPe," (FlauBERT model)"),gPe.forEach(t),HOo=i(j),db=n(j,"LI",{});var hPe=s(db);A_e=n(hPe,"STRONG",{});var AMt=s(A_e);UOo=r(AMt,"fnet"),AMt.forEach(t),JOo=r(hPe," \u2014 "),TX=n(hPe,"A",{href:!0});var LMt=s(TX);YOo=r(LMt,"FNetForSequenceClassification"),LMt.forEach(t),KOo=r(hPe," (FNet model)"),hPe.forEach(t),ZOo=i(j),cb=n(j,"LI",{});var pPe=s(cb);L_e=n(pPe,"STRONG",{});var yMt=s(L_e);eVo=r(yMt,"funnel"),yMt.forEach(t),oVo=r(pPe," \u2014 "),MX=n(pPe,"A",{href:!0});var xMt=s(MX);rVo=r(xMt,"FunnelForSequenceClassification"),xMt.forEach(t),tVo=r(pPe," (Funnel Transformer model)"),pPe.forEach(t),aVo=i(j),fb=n(j,"LI",{});var _Pe=s(fb);y_e=n(_Pe,"STRONG",{});var $Mt=s(y_e);nVo=r($Mt,"gpt2"),$Mt.forEach(t),sVo=r(_Pe," \u2014 "),EX=n(_Pe,"A",{href:!0});var kMt=s(EX);lVo=r(kMt,"GPT2ForSequenceClassification"),kMt.forEach(t),iVo=r(_Pe," (OpenAI GPT-2 model)"),_Pe.forEach(t),dVo=i(j),mb=n(j,"LI",{});var uPe=s(mb);x_e=n(uPe,"STRONG",{});var SMt=s(x_e);cVo=r(SMt,"gpt_neo"),SMt.forEach(t),fVo=r(uPe," \u2014 "),CX=n(uPe,"A",{href:!0});var RMt=s(CX);mVo=r(RMt,"GPTNeoForSequenceClassification"),RMt.forEach(t),gVo=r(uPe," (GPT Neo model)"),uPe.forEach(t),hVo=i(j),gb=n(j,"LI",{});var bPe=s(gb);$_e=n(bPe,"STRONG",{});var PMt=s($_e);pVo=r(PMt,"gptj"),PMt.forEach(t),_Vo=r(bPe," \u2014 "),wX=n(bPe,"A",{href:!0});var BMt=s(wX);uVo=r(BMt,"GPTJForSequenceClassification"),BMt.forEach(t),bVo=r(bPe," (GPT-J model)"),bPe.forEach(t),vVo=i(j),hb=n(j,"LI",{});var vPe=s(hb);k_e=n(vPe,"STRONG",{});var IMt=s(k_e);FVo=r(IMt,"ibert"),IMt.forEach(t),TVo=r(vPe," \u2014 "),AX=n(vPe,"A",{href:!0});var NMt=s(AX);MVo=r(NMt,"IBertForSequenceClassification"),NMt.forEach(t),EVo=r(vPe," (I-BERT model)"),vPe.forEach(t),CVo=i(j),pb=n(j,"LI",{});var FPe=s(pb);S_e=n(FPe,"STRONG",{});var qMt=s(S_e);wVo=r(qMt,"layoutlm"),qMt.forEach(t),AVo=r(FPe," \u2014 "),LX=n(FPe,"A",{href:!0});var jMt=s(LX);LVo=r(jMt,"LayoutLMForSequenceClassification"),jMt.forEach(t),yVo=r(FPe," (LayoutLM model)"),FPe.forEach(t),xVo=i(j),_b=n(j,"LI",{});var TPe=s(_b);R_e=n(TPe,"STRONG",{});var DMt=s(R_e);$Vo=r(DMt,"layoutlmv2"),DMt.forEach(t),kVo=r(TPe," \u2014 "),yX=n(TPe,"A",{href:!0});var GMt=s(yX);SVo=r(GMt,"LayoutLMv2ForSequenceClassification"),GMt.forEach(t),RVo=r(TPe," (LayoutLMv2 model)"),TPe.forEach(t),PVo=i(j),ub=n(j,"LI",{});var MPe=s(ub);P_e=n(MPe,"STRONG",{});var OMt=s(P_e);BVo=r(OMt,"layoutlmv3"),OMt.forEach(t),IVo=r(MPe," \u2014 "),xX=n(MPe,"A",{href:!0});var VMt=s(xX);NVo=r(VMt,"LayoutLMv3ForSequenceClassification"),VMt.forEach(t),qVo=r(MPe," (LayoutLMv3 model)"),MPe.forEach(t),jVo=i(j),bb=n(j,"LI",{});var EPe=s(bb);B_e=n(EPe,"STRONG",{});var XMt=s(B_e);DVo=r(XMt,"led"),XMt.forEach(t),GVo=r(EPe," \u2014 "),$X=n(EPe,"A",{href:!0});var zMt=s($X);OVo=r(zMt,"LEDForSequenceClassification"),zMt.forEach(t),VVo=r(EPe," (LED model)"),EPe.forEach(t),XVo=i(j),vb=n(j,"LI",{});var CPe=s(vb);I_e=n(CPe,"STRONG",{});var QMt=s(I_e);zVo=r(QMt,"longformer"),QMt.forEach(t),QVo=r(CPe," \u2014 "),kX=n(CPe,"A",{href:!0});var WMt=s(kX);WVo=r(WMt,"LongformerForSequenceClassification"),WMt.forEach(t),HVo=r(CPe," (Longformer model)"),CPe.forEach(t),UVo=i(j),Fb=n(j,"LI",{});var wPe=s(Fb);N_e=n(wPe,"STRONG",{});var HMt=s(N_e);JVo=r(HMt,"mbart"),HMt.forEach(t),YVo=r(wPe," \u2014 "),SX=n(wPe,"A",{href:!0});var UMt=s(SX);KVo=r(UMt,"MBartForSequenceClassification"),UMt.forEach(t),ZVo=r(wPe," (mBART model)"),wPe.forEach(t),eXo=i(j),Tb=n(j,"LI",{});var APe=s(Tb);q_e=n(APe,"STRONG",{});var JMt=s(q_e);oXo=r(JMt,"megatron-bert"),JMt.forEach(t),rXo=r(APe," \u2014 "),RX=n(APe,"A",{href:!0});var YMt=s(RX);tXo=r(YMt,"MegatronBertForSequenceClassification"),YMt.forEach(t),aXo=r(APe," (Megatron-BERT model)"),APe.forEach(t),nXo=i(j),Mb=n(j,"LI",{});var LPe=s(Mb);j_e=n(LPe,"STRONG",{});var KMt=s(j_e);sXo=r(KMt,"mobilebert"),KMt.forEach(t),lXo=r(LPe," \u2014 "),PX=n(LPe,"A",{href:!0});var ZMt=s(PX);iXo=r(ZMt,"MobileBertForSequenceClassification"),ZMt.forEach(t),dXo=r(LPe," (MobileBERT model)"),LPe.forEach(t),cXo=i(j),Eb=n(j,"LI",{});var yPe=s(Eb);D_e=n(yPe,"STRONG",{});var eEt=s(D_e);fXo=r(eEt,"mpnet"),eEt.forEach(t),mXo=r(yPe," \u2014 "),BX=n(yPe,"A",{href:!0});var oEt=s(BX);gXo=r(oEt,"MPNetForSequenceClassification"),oEt.forEach(t),hXo=r(yPe," (MPNet model)"),yPe.forEach(t),pXo=i(j),Cb=n(j,"LI",{});var xPe=s(Cb);G_e=n(xPe,"STRONG",{});var rEt=s(G_e);_Xo=r(rEt,"mvp"),rEt.forEach(t),uXo=r(xPe," \u2014 "),IX=n(xPe,"A",{href:!0});var tEt=s(IX);bXo=r(tEt,"MvpForSequenceClassification"),tEt.forEach(t),vXo=r(xPe," (MVP model)"),xPe.forEach(t),FXo=i(j),wb=n(j,"LI",{});var $Pe=s(wb);O_e=n($Pe,"STRONG",{});var aEt=s(O_e);TXo=r(aEt,"nezha"),aEt.forEach(t),MXo=r($Pe," \u2014 "),NX=n($Pe,"A",{href:!0});var nEt=s(NX);EXo=r(nEt,"NezhaForSequenceClassification"),nEt.forEach(t),CXo=r($Pe," (Nezha model)"),$Pe.forEach(t),wXo=i(j),Ab=n(j,"LI",{});var kPe=s(Ab);V_e=n(kPe,"STRONG",{});var sEt=s(V_e);AXo=r(sEt,"nystromformer"),sEt.forEach(t),LXo=r(kPe," \u2014 "),qX=n(kPe,"A",{href:!0});var lEt=s(qX);yXo=r(lEt,"NystromformerForSequenceClassification"),lEt.forEach(t),xXo=r(kPe," (Nystr\xF6mformer model)"),kPe.forEach(t),$Xo=i(j),Lb=n(j,"LI",{});var SPe=s(Lb);X_e=n(SPe,"STRONG",{});var iEt=s(X_e);kXo=r(iEt,"openai-gpt"),iEt.forEach(t),SXo=r(SPe," \u2014 "),jX=n(SPe,"A",{href:!0});var dEt=s(jX);RXo=r(dEt,"OpenAIGPTForSequenceClassification"),dEt.forEach(t),PXo=r(SPe," (OpenAI GPT model)"),SPe.forEach(t),BXo=i(j),yb=n(j,"LI",{});var RPe=s(yb);z_e=n(RPe,"STRONG",{});var cEt=s(z_e);IXo=r(cEt,"opt"),cEt.forEach(t),NXo=r(RPe," \u2014 "),DX=n(RPe,"A",{href:!0});var fEt=s(DX);qXo=r(fEt,"OPTForSequenceClassification"),fEt.forEach(t),jXo=r(RPe," (OPT model)"),RPe.forEach(t),DXo=i(j),xb=n(j,"LI",{});var PPe=s(xb);Q_e=n(PPe,"STRONG",{});var mEt=s(Q_e);GXo=r(mEt,"perceiver"),mEt.forEach(t),OXo=r(PPe," \u2014 "),GX=n(PPe,"A",{href:!0});var gEt=s(GX);VXo=r(gEt,"PerceiverForSequenceClassification"),gEt.forEach(t),XXo=r(PPe," (Perceiver model)"),PPe.forEach(t),zXo=i(j),$b=n(j,"LI",{});var BPe=s($b);W_e=n(BPe,"STRONG",{});var hEt=s(W_e);QXo=r(hEt,"plbart"),hEt.forEach(t),WXo=r(BPe," \u2014 "),OX=n(BPe,"A",{href:!0});var pEt=s(OX);HXo=r(pEt,"PLBartForSequenceClassification"),pEt.forEach(t),UXo=r(BPe," (PLBart model)"),BPe.forEach(t),JXo=i(j),kb=n(j,"LI",{});var IPe=s(kb);H_e=n(IPe,"STRONG",{});var _Et=s(H_e);YXo=r(_Et,"qdqbert"),_Et.forEach(t),KXo=r(IPe," \u2014 "),VX=n(IPe,"A",{href:!0});var uEt=s(VX);ZXo=r(uEt,"QDQBertForSequenceClassification"),uEt.forEach(t),ezo=r(IPe," (QDQBert model)"),IPe.forEach(t),ozo=i(j),Sb=n(j,"LI",{});var NPe=s(Sb);U_e=n(NPe,"STRONG",{});var bEt=s(U_e);rzo=r(bEt,"reformer"),bEt.forEach(t),tzo=r(NPe," \u2014 "),XX=n(NPe,"A",{href:!0});var vEt=s(XX);azo=r(vEt,"ReformerForSequenceClassification"),vEt.forEach(t),nzo=r(NPe," (Reformer model)"),NPe.forEach(t),szo=i(j),Rb=n(j,"LI",{});var qPe=s(Rb);J_e=n(qPe,"STRONG",{});var FEt=s(J_e);lzo=r(FEt,"rembert"),FEt.forEach(t),izo=r(qPe," \u2014 "),zX=n(qPe,"A",{href:!0});var TEt=s(zX);dzo=r(TEt,"RemBertForSequenceClassification"),TEt.forEach(t),czo=r(qPe," (RemBERT model)"),qPe.forEach(t),fzo=i(j),Pb=n(j,"LI",{});var jPe=s(Pb);Y_e=n(jPe,"STRONG",{});var MEt=s(Y_e);mzo=r(MEt,"roberta"),MEt.forEach(t),gzo=r(jPe," \u2014 "),QX=n(jPe,"A",{href:!0});var EEt=s(QX);hzo=r(EEt,"RobertaForSequenceClassification"),EEt.forEach(t),pzo=r(jPe," (RoBERTa model)"),jPe.forEach(t),_zo=i(j),Bb=n(j,"LI",{});var DPe=s(Bb);K_e=n(DPe,"STRONG",{});var CEt=s(K_e);uzo=r(CEt,"roformer"),CEt.forEach(t),bzo=r(DPe," \u2014 "),WX=n(DPe,"A",{href:!0});var wEt=s(WX);vzo=r(wEt,"RoFormerForSequenceClassification"),wEt.forEach(t),Fzo=r(DPe," (RoFormer model)"),DPe.forEach(t),Tzo=i(j),Ib=n(j,"LI",{});var GPe=s(Ib);Z_e=n(GPe,"STRONG",{});var AEt=s(Z_e);Mzo=r(AEt,"squeezebert"),AEt.forEach(t),Ezo=r(GPe," \u2014 "),HX=n(GPe,"A",{href:!0});var LEt=s(HX);Czo=r(LEt,"SqueezeBertForSequenceClassification"),LEt.forEach(t),wzo=r(GPe," (SqueezeBERT model)"),GPe.forEach(t),Azo=i(j),Nb=n(j,"LI",{});var OPe=s(Nb);eue=n(OPe,"STRONG",{});var yEt=s(eue);Lzo=r(yEt,"tapas"),yEt.forEach(t),yzo=r(OPe," \u2014 "),UX=n(OPe,"A",{href:!0});var xEt=s(UX);xzo=r(xEt,"TapasForSequenceClassification"),xEt.forEach(t),$zo=r(OPe," (TAPAS model)"),OPe.forEach(t),kzo=i(j),qb=n(j,"LI",{});var VPe=s(qb);oue=n(VPe,"STRONG",{});var $Et=s(oue);Szo=r($Et,"transfo-xl"),$Et.forEach(t),Rzo=r(VPe," \u2014 "),JX=n(VPe,"A",{href:!0});var kEt=s(JX);Pzo=r(kEt,"TransfoXLForSequenceClassification"),kEt.forEach(t),Bzo=r(VPe," (Transformer-XL model)"),VPe.forEach(t),Izo=i(j),jb=n(j,"LI",{});var XPe=s(jb);rue=n(XPe,"STRONG",{});var SEt=s(rue);Nzo=r(SEt,"xlm"),SEt.forEach(t),qzo=r(XPe," \u2014 "),YX=n(XPe,"A",{href:!0});var REt=s(YX);jzo=r(REt,"XLMForSequenceClassification"),REt.forEach(t),Dzo=r(XPe," (XLM model)"),XPe.forEach(t),Gzo=i(j),Db=n(j,"LI",{});var zPe=s(Db);tue=n(zPe,"STRONG",{});var PEt=s(tue);Ozo=r(PEt,"xlm-roberta"),PEt.forEach(t),Vzo=r(zPe," \u2014 "),KX=n(zPe,"A",{href:!0});var BEt=s(KX);Xzo=r(BEt,"XLMRobertaForSequenceClassification"),BEt.forEach(t),zzo=r(zPe," (XLM-RoBERTa model)"),zPe.forEach(t),Qzo=i(j),Gb=n(j,"LI",{});var QPe=s(Gb);aue=n(QPe,"STRONG",{});var IEt=s(aue);Wzo=r(IEt,"xlm-roberta-xl"),IEt.forEach(t),Hzo=r(QPe," \u2014 "),ZX=n(QPe,"A",{href:!0});var NEt=s(ZX);Uzo=r(NEt,"XLMRobertaXLForSequenceClassification"),NEt.forEach(t),Jzo=r(QPe," (XLM-RoBERTa-XL model)"),QPe.forEach(t),Yzo=i(j),Ob=n(j,"LI",{});var WPe=s(Ob);nue=n(WPe,"STRONG",{});var qEt=s(nue);Kzo=r(qEt,"xlnet"),qEt.forEach(t),Zzo=r(WPe," \u2014 "),ez=n(WPe,"A",{href:!0});var jEt=s(ez);eQo=r(jEt,"XLNetForSequenceClassification"),jEt.forEach(t),oQo=r(WPe," (XLNet model)"),WPe.forEach(t),rQo=i(j),Vb=n(j,"LI",{});var HPe=s(Vb);sue=n(HPe,"STRONG",{});var DEt=s(sue);tQo=r(DEt,"yoso"),DEt.forEach(t),aQo=r(HPe," \u2014 "),oz=n(HPe,"A",{href:!0});var GEt=s(oz);nQo=r(GEt,"YosoForSequenceClassification"),GEt.forEach(t),sQo=r(HPe," (YOSO model)"),HPe.forEach(t),j.forEach(t),lQo=i(ma),Xb=n(ma,"P",{});var UPe=s(Xb);iQo=r(UPe,"The model is set in evaluation mode by default using "),lue=n(UPe,"CODE",{});var OEt=s(lue);dQo=r(OEt,"model.eval()"),OEt.forEach(t),cQo=r(UPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n(UPe,"CODE",{});var VEt=s(iue);fQo=r(VEt,"model.train()"),VEt.forEach(t),UPe.forEach(t),mQo=i(ma),T(zb.$$.fragment,ma),ma.forEach(t),il.forEach(t),WXe=i(f),sd=n(f,"H2",{class:!0});var ZQe=s(sd);Qb=n(ZQe,"A",{id:!0,class:!0,href:!0});var XEt=s(Qb);due=n(XEt,"SPAN",{});var zEt=s(due);T(my.$$.fragment,zEt),zEt.forEach(t),XEt.forEach(t),gQo=i(ZQe),cue=n(ZQe,"SPAN",{});var QEt=s(cue);hQo=r(QEt,"AutoModelForMultipleChoice"),QEt.forEach(t),ZQe.forEach(t),HXe=i(f),No=n(f,"DIV",{class:!0});var dl=s(No);T(gy.$$.fragment,dl),pQo=i(dl),ld=n(dl,"P",{});var ate=s(ld);_Qo=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rz=n(ate,"A",{href:!0});var WEt=s(rz);uQo=r(WEt,"from_pretrained()"),WEt.forEach(t),bQo=r(ate," class method or the "),tz=n(ate,"A",{href:!0});var HEt=s(tz);vQo=r(HEt,"from_config()"),HEt.forEach(t),FQo=r(ate,` class
method.`),ate.forEach(t),TQo=i(dl),hy=n(dl,"P",{});var eWe=s(hy);MQo=r(eWe,"This class cannot be instantiated directly using "),fue=n(eWe,"CODE",{});var UEt=s(fue);EQo=r(UEt,"__init__()"),UEt.forEach(t),CQo=r(eWe," (throws an error)."),eWe.forEach(t),wQo=i(dl),ht=n(dl,"DIV",{class:!0});var A6=s(ht);T(py.$$.fragment,A6),AQo=i(A6),mue=n(A6,"P",{});var JEt=s(mue);LQo=r(JEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JEt.forEach(t),yQo=i(A6),id=n(A6,"P",{});var nte=s(id);xQo=r(nte,`Note:
Loading a model from its configuration file does `),gue=n(nte,"STRONG",{});var YEt=s(gue);$Qo=r(YEt,"not"),YEt.forEach(t),kQo=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(nte,"A",{href:!0});var KEt=s(az);SQo=r(KEt,"from_pretrained()"),KEt.forEach(t),RQo=r(nte," to load the model weights."),nte.forEach(t),PQo=i(A6),T(Wb.$$.fragment,A6),A6.forEach(t),BQo=i(dl),to=n(dl,"DIV",{class:!0});var ga=s(to);T(_y.$$.fragment,ga),IQo=i(ga),hue=n(ga,"P",{});var ZEt=s(hue);NQo=r(ZEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZEt.forEach(t),qQo=i(ga),Oa=n(ga,"P",{});var L6=s(Oa);jQo=r(L6,"The model class to instantiate is selected based on the "),pue=n(L6,"CODE",{});var eCt=s(pue);DQo=r(eCt,"model_type"),eCt.forEach(t),GQo=r(L6,` property of the config object (either
passed as an argument or loaded from `),_ue=n(L6,"CODE",{});var oCt=s(_ue);OQo=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),VQo=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(L6,"CODE",{});var rCt=s(uue);XQo=r(rCt,"pretrained_model_name_or_path"),rCt.forEach(t),zQo=r(L6,":"),L6.forEach(t),QQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);Hb=n(ee,"LI",{});var JPe=s(Hb);bue=n(JPe,"STRONG",{});var tCt=s(bue);WQo=r(tCt,"albert"),tCt.forEach(t),HQo=r(JPe," \u2014 "),nz=n(JPe,"A",{href:!0});var aCt=s(nz);UQo=r(aCt,"AlbertForMultipleChoice"),aCt.forEach(t),JQo=r(JPe," (ALBERT model)"),JPe.forEach(t),YQo=i(ee),Ub=n(ee,"LI",{});var YPe=s(Ub);vue=n(YPe,"STRONG",{});var nCt=s(vue);KQo=r(nCt,"bert"),nCt.forEach(t),ZQo=r(YPe," \u2014 "),sz=n(YPe,"A",{href:!0});var sCt=s(sz);eWo=r(sCt,"BertForMultipleChoice"),sCt.forEach(t),oWo=r(YPe," (BERT model)"),YPe.forEach(t),rWo=i(ee),Jb=n(ee,"LI",{});var KPe=s(Jb);Fue=n(KPe,"STRONG",{});var lCt=s(Fue);tWo=r(lCt,"big_bird"),lCt.forEach(t),aWo=r(KPe," \u2014 "),lz=n(KPe,"A",{href:!0});var iCt=s(lz);nWo=r(iCt,"BigBirdForMultipleChoice"),iCt.forEach(t),sWo=r(KPe," (BigBird model)"),KPe.forEach(t),lWo=i(ee),Yb=n(ee,"LI",{});var ZPe=s(Yb);Tue=n(ZPe,"STRONG",{});var dCt=s(Tue);iWo=r(dCt,"camembert"),dCt.forEach(t),dWo=r(ZPe," \u2014 "),iz=n(ZPe,"A",{href:!0});var cCt=s(iz);cWo=r(cCt,"CamembertForMultipleChoice"),cCt.forEach(t),fWo=r(ZPe," (CamemBERT model)"),ZPe.forEach(t),mWo=i(ee),Kb=n(ee,"LI",{});var eBe=s(Kb);Mue=n(eBe,"STRONG",{});var fCt=s(Mue);gWo=r(fCt,"canine"),fCt.forEach(t),hWo=r(eBe," \u2014 "),dz=n(eBe,"A",{href:!0});var mCt=s(dz);pWo=r(mCt,"CanineForMultipleChoice"),mCt.forEach(t),_Wo=r(eBe," (CANINE model)"),eBe.forEach(t),uWo=i(ee),Zb=n(ee,"LI",{});var oBe=s(Zb);Eue=n(oBe,"STRONG",{});var gCt=s(Eue);bWo=r(gCt,"convbert"),gCt.forEach(t),vWo=r(oBe," \u2014 "),cz=n(oBe,"A",{href:!0});var hCt=s(cz);FWo=r(hCt,"ConvBertForMultipleChoice"),hCt.forEach(t),TWo=r(oBe," (ConvBERT model)"),oBe.forEach(t),MWo=i(ee),ev=n(ee,"LI",{});var rBe=s(ev);Cue=n(rBe,"STRONG",{});var pCt=s(Cue);EWo=r(pCt,"data2vec-text"),pCt.forEach(t),CWo=r(rBe," \u2014 "),fz=n(rBe,"A",{href:!0});var _Ct=s(fz);wWo=r(_Ct,"Data2VecTextForMultipleChoice"),_Ct.forEach(t),AWo=r(rBe," (Data2VecText model)"),rBe.forEach(t),LWo=i(ee),ov=n(ee,"LI",{});var tBe=s(ov);wue=n(tBe,"STRONG",{});var uCt=s(wue);yWo=r(uCt,"deberta-v2"),uCt.forEach(t),xWo=r(tBe," \u2014 "),mz=n(tBe,"A",{href:!0});var bCt=s(mz);$Wo=r(bCt,"DebertaV2ForMultipleChoice"),bCt.forEach(t),kWo=r(tBe," (DeBERTa-v2 model)"),tBe.forEach(t),SWo=i(ee),rv=n(ee,"LI",{});var aBe=s(rv);Aue=n(aBe,"STRONG",{});var vCt=s(Aue);RWo=r(vCt,"distilbert"),vCt.forEach(t),PWo=r(aBe," \u2014 "),gz=n(aBe,"A",{href:!0});var FCt=s(gz);BWo=r(FCt,"DistilBertForMultipleChoice"),FCt.forEach(t),IWo=r(aBe," (DistilBERT model)"),aBe.forEach(t),NWo=i(ee),tv=n(ee,"LI",{});var nBe=s(tv);Lue=n(nBe,"STRONG",{});var TCt=s(Lue);qWo=r(TCt,"electra"),TCt.forEach(t),jWo=r(nBe," \u2014 "),hz=n(nBe,"A",{href:!0});var MCt=s(hz);DWo=r(MCt,"ElectraForMultipleChoice"),MCt.forEach(t),GWo=r(nBe," (ELECTRA model)"),nBe.forEach(t),OWo=i(ee),av=n(ee,"LI",{});var sBe=s(av);yue=n(sBe,"STRONG",{});var ECt=s(yue);VWo=r(ECt,"flaubert"),ECt.forEach(t),XWo=r(sBe," \u2014 "),pz=n(sBe,"A",{href:!0});var CCt=s(pz);zWo=r(CCt,"FlaubertForMultipleChoice"),CCt.forEach(t),QWo=r(sBe," (FlauBERT model)"),sBe.forEach(t),WWo=i(ee),nv=n(ee,"LI",{});var lBe=s(nv);xue=n(lBe,"STRONG",{});var wCt=s(xue);HWo=r(wCt,"fnet"),wCt.forEach(t),UWo=r(lBe," \u2014 "),_z=n(lBe,"A",{href:!0});var ACt=s(_z);JWo=r(ACt,"FNetForMultipleChoice"),ACt.forEach(t),YWo=r(lBe," (FNet model)"),lBe.forEach(t),KWo=i(ee),sv=n(ee,"LI",{});var iBe=s(sv);$ue=n(iBe,"STRONG",{});var LCt=s($ue);ZWo=r(LCt,"funnel"),LCt.forEach(t),eHo=r(iBe," \u2014 "),uz=n(iBe,"A",{href:!0});var yCt=s(uz);oHo=r(yCt,"FunnelForMultipleChoice"),yCt.forEach(t),rHo=r(iBe," (Funnel Transformer model)"),iBe.forEach(t),tHo=i(ee),lv=n(ee,"LI",{});var dBe=s(lv);kue=n(dBe,"STRONG",{});var xCt=s(kue);aHo=r(xCt,"ibert"),xCt.forEach(t),nHo=r(dBe," \u2014 "),bz=n(dBe,"A",{href:!0});var $Ct=s(bz);sHo=r($Ct,"IBertForMultipleChoice"),$Ct.forEach(t),lHo=r(dBe," (I-BERT model)"),dBe.forEach(t),iHo=i(ee),iv=n(ee,"LI",{});var cBe=s(iv);Sue=n(cBe,"STRONG",{});var kCt=s(Sue);dHo=r(kCt,"longformer"),kCt.forEach(t),cHo=r(cBe," \u2014 "),vz=n(cBe,"A",{href:!0});var SCt=s(vz);fHo=r(SCt,"LongformerForMultipleChoice"),SCt.forEach(t),mHo=r(cBe," (Longformer model)"),cBe.forEach(t),gHo=i(ee),dv=n(ee,"LI",{});var fBe=s(dv);Rue=n(fBe,"STRONG",{});var RCt=s(Rue);hHo=r(RCt,"megatron-bert"),RCt.forEach(t),pHo=r(fBe," \u2014 "),Fz=n(fBe,"A",{href:!0});var PCt=s(Fz);_Ho=r(PCt,"MegatronBertForMultipleChoice"),PCt.forEach(t),uHo=r(fBe," (Megatron-BERT model)"),fBe.forEach(t),bHo=i(ee),cv=n(ee,"LI",{});var mBe=s(cv);Pue=n(mBe,"STRONG",{});var BCt=s(Pue);vHo=r(BCt,"mobilebert"),BCt.forEach(t),FHo=r(mBe," \u2014 "),Tz=n(mBe,"A",{href:!0});var ICt=s(Tz);THo=r(ICt,"MobileBertForMultipleChoice"),ICt.forEach(t),MHo=r(mBe," (MobileBERT model)"),mBe.forEach(t),EHo=i(ee),fv=n(ee,"LI",{});var gBe=s(fv);Bue=n(gBe,"STRONG",{});var NCt=s(Bue);CHo=r(NCt,"mpnet"),NCt.forEach(t),wHo=r(gBe," \u2014 "),Mz=n(gBe,"A",{href:!0});var qCt=s(Mz);AHo=r(qCt,"MPNetForMultipleChoice"),qCt.forEach(t),LHo=r(gBe," (MPNet model)"),gBe.forEach(t),yHo=i(ee),mv=n(ee,"LI",{});var hBe=s(mv);Iue=n(hBe,"STRONG",{});var jCt=s(Iue);xHo=r(jCt,"nezha"),jCt.forEach(t),$Ho=r(hBe," \u2014 "),Ez=n(hBe,"A",{href:!0});var DCt=s(Ez);kHo=r(DCt,"NezhaForMultipleChoice"),DCt.forEach(t),SHo=r(hBe," (Nezha model)"),hBe.forEach(t),RHo=i(ee),gv=n(ee,"LI",{});var pBe=s(gv);Nue=n(pBe,"STRONG",{});var GCt=s(Nue);PHo=r(GCt,"nystromformer"),GCt.forEach(t),BHo=r(pBe," \u2014 "),Cz=n(pBe,"A",{href:!0});var OCt=s(Cz);IHo=r(OCt,"NystromformerForMultipleChoice"),OCt.forEach(t),NHo=r(pBe," (Nystr\xF6mformer model)"),pBe.forEach(t),qHo=i(ee),hv=n(ee,"LI",{});var _Be=s(hv);que=n(_Be,"STRONG",{});var VCt=s(que);jHo=r(VCt,"qdqbert"),VCt.forEach(t),DHo=r(_Be," \u2014 "),wz=n(_Be,"A",{href:!0});var XCt=s(wz);GHo=r(XCt,"QDQBertForMultipleChoice"),XCt.forEach(t),OHo=r(_Be," (QDQBert model)"),_Be.forEach(t),VHo=i(ee),pv=n(ee,"LI",{});var uBe=s(pv);jue=n(uBe,"STRONG",{});var zCt=s(jue);XHo=r(zCt,"rembert"),zCt.forEach(t),zHo=r(uBe," \u2014 "),Az=n(uBe,"A",{href:!0});var QCt=s(Az);QHo=r(QCt,"RemBertForMultipleChoice"),QCt.forEach(t),WHo=r(uBe," (RemBERT model)"),uBe.forEach(t),HHo=i(ee),_v=n(ee,"LI",{});var bBe=s(_v);Due=n(bBe,"STRONG",{});var WCt=s(Due);UHo=r(WCt,"roberta"),WCt.forEach(t),JHo=r(bBe," \u2014 "),Lz=n(bBe,"A",{href:!0});var HCt=s(Lz);YHo=r(HCt,"RobertaForMultipleChoice"),HCt.forEach(t),KHo=r(bBe," (RoBERTa model)"),bBe.forEach(t),ZHo=i(ee),uv=n(ee,"LI",{});var vBe=s(uv);Gue=n(vBe,"STRONG",{});var UCt=s(Gue);eUo=r(UCt,"roformer"),UCt.forEach(t),oUo=r(vBe," \u2014 "),yz=n(vBe,"A",{href:!0});var JCt=s(yz);rUo=r(JCt,"RoFormerForMultipleChoice"),JCt.forEach(t),tUo=r(vBe," (RoFormer model)"),vBe.forEach(t),aUo=i(ee),bv=n(ee,"LI",{});var FBe=s(bv);Oue=n(FBe,"STRONG",{});var YCt=s(Oue);nUo=r(YCt,"squeezebert"),YCt.forEach(t),sUo=r(FBe," \u2014 "),xz=n(FBe,"A",{href:!0});var KCt=s(xz);lUo=r(KCt,"SqueezeBertForMultipleChoice"),KCt.forEach(t),iUo=r(FBe," (SqueezeBERT model)"),FBe.forEach(t),dUo=i(ee),vv=n(ee,"LI",{});var TBe=s(vv);Vue=n(TBe,"STRONG",{});var ZCt=s(Vue);cUo=r(ZCt,"xlm"),ZCt.forEach(t),fUo=r(TBe," \u2014 "),$z=n(TBe,"A",{href:!0});var e3t=s($z);mUo=r(e3t,"XLMForMultipleChoice"),e3t.forEach(t),gUo=r(TBe," (XLM model)"),TBe.forEach(t),hUo=i(ee),Fv=n(ee,"LI",{});var MBe=s(Fv);Xue=n(MBe,"STRONG",{});var o3t=s(Xue);pUo=r(o3t,"xlm-roberta"),o3t.forEach(t),_Uo=r(MBe," \u2014 "),kz=n(MBe,"A",{href:!0});var r3t=s(kz);uUo=r(r3t,"XLMRobertaForMultipleChoice"),r3t.forEach(t),bUo=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),vUo=i(ee),Tv=n(ee,"LI",{});var EBe=s(Tv);zue=n(EBe,"STRONG",{});var t3t=s(zue);FUo=r(t3t,"xlm-roberta-xl"),t3t.forEach(t),TUo=r(EBe," \u2014 "),Sz=n(EBe,"A",{href:!0});var a3t=s(Sz);MUo=r(a3t,"XLMRobertaXLForMultipleChoice"),a3t.forEach(t),EUo=r(EBe," (XLM-RoBERTa-XL model)"),EBe.forEach(t),CUo=i(ee),Mv=n(ee,"LI",{});var CBe=s(Mv);Que=n(CBe,"STRONG",{});var n3t=s(Que);wUo=r(n3t,"xlnet"),n3t.forEach(t),AUo=r(CBe," \u2014 "),Rz=n(CBe,"A",{href:!0});var s3t=s(Rz);LUo=r(s3t,"XLNetForMultipleChoice"),s3t.forEach(t),yUo=r(CBe," (XLNet model)"),CBe.forEach(t),xUo=i(ee),Ev=n(ee,"LI",{});var wBe=s(Ev);Wue=n(wBe,"STRONG",{});var l3t=s(Wue);$Uo=r(l3t,"yoso"),l3t.forEach(t),kUo=r(wBe," \u2014 "),Pz=n(wBe,"A",{href:!0});var i3t=s(Pz);SUo=r(i3t,"YosoForMultipleChoice"),i3t.forEach(t),RUo=r(wBe," (YOSO model)"),wBe.forEach(t),ee.forEach(t),PUo=i(ga),Cv=n(ga,"P",{});var ABe=s(Cv);BUo=r(ABe,"The model is set in evaluation mode by default using "),Hue=n(ABe,"CODE",{});var d3t=s(Hue);IUo=r(d3t,"model.eval()"),d3t.forEach(t),NUo=r(ABe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(ABe,"CODE",{});var c3t=s(Uue);qUo=r(c3t,"model.train()"),c3t.forEach(t),ABe.forEach(t),jUo=i(ga),T(wv.$$.fragment,ga),ga.forEach(t),dl.forEach(t),UXe=i(f),dd=n(f,"H2",{class:!0});var oWe=s(dd);Av=n(oWe,"A",{id:!0,class:!0,href:!0});var f3t=s(Av);Jue=n(f3t,"SPAN",{});var m3t=s(Jue);T(uy.$$.fragment,m3t),m3t.forEach(t),f3t.forEach(t),DUo=i(oWe),Yue=n(oWe,"SPAN",{});var g3t=s(Yue);GUo=r(g3t,"AutoModelForNextSentencePrediction"),g3t.forEach(t),oWe.forEach(t),JXe=i(f),qo=n(f,"DIV",{class:!0});var cl=s(qo);T(by.$$.fragment,cl),OUo=i(cl),cd=n(cl,"P",{});var ste=s(cd);VUo=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Bz=n(ste,"A",{href:!0});var h3t=s(Bz);XUo=r(h3t,"from_pretrained()"),h3t.forEach(t),zUo=r(ste," class method or the "),Iz=n(ste,"A",{href:!0});var p3t=s(Iz);QUo=r(p3t,"from_config()"),p3t.forEach(t),WUo=r(ste,` class
method.`),ste.forEach(t),HUo=i(cl),vy=n(cl,"P",{});var rWe=s(vy);UUo=r(rWe,"This class cannot be instantiated directly using "),Kue=n(rWe,"CODE",{});var _3t=s(Kue);JUo=r(_3t,"__init__()"),_3t.forEach(t),YUo=r(rWe," (throws an error)."),rWe.forEach(t),KUo=i(cl),pt=n(cl,"DIV",{class:!0});var y6=s(pt);T(Fy.$$.fragment,y6),ZUo=i(y6),Zue=n(y6,"P",{});var u3t=s(Zue);eJo=r(u3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),u3t.forEach(t),oJo=i(y6),fd=n(y6,"P",{});var lte=s(fd);rJo=r(lte,`Note:
Loading a model from its configuration file does `),e4e=n(lte,"STRONG",{});var b3t=s(e4e);tJo=r(b3t,"not"),b3t.forEach(t),aJo=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(lte,"A",{href:!0});var v3t=s(Nz);nJo=r(v3t,"from_pretrained()"),v3t.forEach(t),sJo=r(lte," to load the model weights."),lte.forEach(t),lJo=i(y6),T(Lv.$$.fragment,y6),y6.forEach(t),iJo=i(cl),ao=n(cl,"DIV",{class:!0});var ha=s(ao);T(Ty.$$.fragment,ha),dJo=i(ha),o4e=n(ha,"P",{});var F3t=s(o4e);cJo=r(F3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),F3t.forEach(t),fJo=i(ha),Va=n(ha,"P",{});var x6=s(Va);mJo=r(x6,"The model class to instantiate is selected based on the "),r4e=n(x6,"CODE",{});var T3t=s(r4e);gJo=r(T3t,"model_type"),T3t.forEach(t),hJo=r(x6,` property of the config object (either
passed as an argument or loaded from `),t4e=n(x6,"CODE",{});var M3t=s(t4e);pJo=r(M3t,"pretrained_model_name_or_path"),M3t.forEach(t),_Jo=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(x6,"CODE",{});var E3t=s(a4e);uJo=r(E3t,"pretrained_model_name_or_path"),E3t.forEach(t),bJo=r(x6,":"),x6.forEach(t),vJo=i(ha),jo=n(ha,"UL",{});var pa=s(jo);yv=n(pa,"LI",{});var LBe=s(yv);n4e=n(LBe,"STRONG",{});var C3t=s(n4e);FJo=r(C3t,"bert"),C3t.forEach(t),TJo=r(LBe," \u2014 "),qz=n(LBe,"A",{href:!0});var w3t=s(qz);MJo=r(w3t,"BertForNextSentencePrediction"),w3t.forEach(t),EJo=r(LBe," (BERT model)"),LBe.forEach(t),CJo=i(pa),xv=n(pa,"LI",{});var yBe=s(xv);s4e=n(yBe,"STRONG",{});var A3t=s(s4e);wJo=r(A3t,"fnet"),A3t.forEach(t),AJo=r(yBe," \u2014 "),jz=n(yBe,"A",{href:!0});var L3t=s(jz);LJo=r(L3t,"FNetForNextSentencePrediction"),L3t.forEach(t),yJo=r(yBe," (FNet model)"),yBe.forEach(t),xJo=i(pa),$v=n(pa,"LI",{});var xBe=s($v);l4e=n(xBe,"STRONG",{});var y3t=s(l4e);$Jo=r(y3t,"megatron-bert"),y3t.forEach(t),kJo=r(xBe," \u2014 "),Dz=n(xBe,"A",{href:!0});var x3t=s(Dz);SJo=r(x3t,"MegatronBertForNextSentencePrediction"),x3t.forEach(t),RJo=r(xBe," (Megatron-BERT model)"),xBe.forEach(t),PJo=i(pa),kv=n(pa,"LI",{});var $Be=s(kv);i4e=n($Be,"STRONG",{});var $3t=s(i4e);BJo=r($3t,"mobilebert"),$3t.forEach(t),IJo=r($Be," \u2014 "),Gz=n($Be,"A",{href:!0});var k3t=s(Gz);NJo=r(k3t,"MobileBertForNextSentencePrediction"),k3t.forEach(t),qJo=r($Be," (MobileBERT model)"),$Be.forEach(t),jJo=i(pa),Sv=n(pa,"LI",{});var kBe=s(Sv);d4e=n(kBe,"STRONG",{});var S3t=s(d4e);DJo=r(S3t,"nezha"),S3t.forEach(t),GJo=r(kBe," \u2014 "),Oz=n(kBe,"A",{href:!0});var R3t=s(Oz);OJo=r(R3t,"NezhaForNextSentencePrediction"),R3t.forEach(t),VJo=r(kBe," (Nezha model)"),kBe.forEach(t),XJo=i(pa),Rv=n(pa,"LI",{});var SBe=s(Rv);c4e=n(SBe,"STRONG",{});var P3t=s(c4e);zJo=r(P3t,"qdqbert"),P3t.forEach(t),QJo=r(SBe," \u2014 "),Vz=n(SBe,"A",{href:!0});var B3t=s(Vz);WJo=r(B3t,"QDQBertForNextSentencePrediction"),B3t.forEach(t),HJo=r(SBe," (QDQBert model)"),SBe.forEach(t),pa.forEach(t),UJo=i(ha),Pv=n(ha,"P",{});var RBe=s(Pv);JJo=r(RBe,"The model is set in evaluation mode by default using "),f4e=n(RBe,"CODE",{});var I3t=s(f4e);YJo=r(I3t,"model.eval()"),I3t.forEach(t),KJo=r(RBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m4e=n(RBe,"CODE",{});var N3t=s(m4e);ZJo=r(N3t,"model.train()"),N3t.forEach(t),RBe.forEach(t),eYo=i(ha),T(Bv.$$.fragment,ha),ha.forEach(t),cl.forEach(t),YXe=i(f),md=n(f,"H2",{class:!0});var tWe=s(md);Iv=n(tWe,"A",{id:!0,class:!0,href:!0});var q3t=s(Iv);g4e=n(q3t,"SPAN",{});var j3t=s(g4e);T(My.$$.fragment,j3t),j3t.forEach(t),q3t.forEach(t),oYo=i(tWe),h4e=n(tWe,"SPAN",{});var D3t=s(h4e);rYo=r(D3t,"AutoModelForTokenClassification"),D3t.forEach(t),tWe.forEach(t),KXe=i(f),Do=n(f,"DIV",{class:!0});var fl=s(Do);T(Ey.$$.fragment,fl),tYo=i(fl),gd=n(fl,"P",{});var ite=s(gd);aYo=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Xz=n(ite,"A",{href:!0});var G3t=s(Xz);nYo=r(G3t,"from_pretrained()"),G3t.forEach(t),sYo=r(ite," class method or the "),zz=n(ite,"A",{href:!0});var O3t=s(zz);lYo=r(O3t,"from_config()"),O3t.forEach(t),iYo=r(ite,` class
method.`),ite.forEach(t),dYo=i(fl),Cy=n(fl,"P",{});var aWe=s(Cy);cYo=r(aWe,"This class cannot be instantiated directly using "),p4e=n(aWe,"CODE",{});var V3t=s(p4e);fYo=r(V3t,"__init__()"),V3t.forEach(t),mYo=r(aWe," (throws an error)."),aWe.forEach(t),gYo=i(fl),_t=n(fl,"DIV",{class:!0});var $6=s(_t);T(wy.$$.fragment,$6),hYo=i($6),_4e=n($6,"P",{});var X3t=s(_4e);pYo=r(X3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),X3t.forEach(t),_Yo=i($6),hd=n($6,"P",{});var dte=s(hd);uYo=r(dte,`Note:
Loading a model from its configuration file does `),u4e=n(dte,"STRONG",{});var z3t=s(u4e);bYo=r(z3t,"not"),z3t.forEach(t),vYo=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(dte,"A",{href:!0});var Q3t=s(Qz);FYo=r(Q3t,"from_pretrained()"),Q3t.forEach(t),TYo=r(dte," to load the model weights."),dte.forEach(t),MYo=i($6),T(Nv.$$.fragment,$6),$6.forEach(t),EYo=i(fl),no=n(fl,"DIV",{class:!0});var _a=s(no);T(Ay.$$.fragment,_a),CYo=i(_a),b4e=n(_a,"P",{});var W3t=s(b4e);wYo=r(W3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),W3t.forEach(t),AYo=i(_a),Xa=n(_a,"P",{});var k6=s(Xa);LYo=r(k6,"The model class to instantiate is selected based on the "),v4e=n(k6,"CODE",{});var H3t=s(v4e);yYo=r(H3t,"model_type"),H3t.forEach(t),xYo=r(k6,` property of the config object (either
passed as an argument or loaded from `),F4e=n(k6,"CODE",{});var U3t=s(F4e);$Yo=r(U3t,"pretrained_model_name_or_path"),U3t.forEach(t),kYo=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=n(k6,"CODE",{});var J3t=s(T4e);SYo=r(J3t,"pretrained_model_name_or_path"),J3t.forEach(t),RYo=r(k6,":"),k6.forEach(t),PYo=i(_a),U=n(_a,"UL",{});var J=s(U);qv=n(J,"LI",{});var PBe=s(qv);M4e=n(PBe,"STRONG",{});var Y3t=s(M4e);BYo=r(Y3t,"albert"),Y3t.forEach(t),IYo=r(PBe," \u2014 "),Wz=n(PBe,"A",{href:!0});var K3t=s(Wz);NYo=r(K3t,"AlbertForTokenClassification"),K3t.forEach(t),qYo=r(PBe," (ALBERT model)"),PBe.forEach(t),jYo=i(J),jv=n(J,"LI",{});var BBe=s(jv);E4e=n(BBe,"STRONG",{});var Z3t=s(E4e);DYo=r(Z3t,"bert"),Z3t.forEach(t),GYo=r(BBe," \u2014 "),Hz=n(BBe,"A",{href:!0});var e5t=s(Hz);OYo=r(e5t,"BertForTokenClassification"),e5t.forEach(t),VYo=r(BBe," (BERT model)"),BBe.forEach(t),XYo=i(J),Dv=n(J,"LI",{});var IBe=s(Dv);C4e=n(IBe,"STRONG",{});var o5t=s(C4e);zYo=r(o5t,"big_bird"),o5t.forEach(t),QYo=r(IBe," \u2014 "),Uz=n(IBe,"A",{href:!0});var r5t=s(Uz);WYo=r(r5t,"BigBirdForTokenClassification"),r5t.forEach(t),HYo=r(IBe," (BigBird model)"),IBe.forEach(t),UYo=i(J),Gv=n(J,"LI",{});var NBe=s(Gv);w4e=n(NBe,"STRONG",{});var t5t=s(w4e);JYo=r(t5t,"bloom"),t5t.forEach(t),YYo=r(NBe," \u2014 "),Jz=n(NBe,"A",{href:!0});var a5t=s(Jz);KYo=r(a5t,"BloomForTokenClassification"),a5t.forEach(t),ZYo=r(NBe," (BLOOM model)"),NBe.forEach(t),eKo=i(J),Ov=n(J,"LI",{});var qBe=s(Ov);A4e=n(qBe,"STRONG",{});var n5t=s(A4e);oKo=r(n5t,"camembert"),n5t.forEach(t),rKo=r(qBe," \u2014 "),Yz=n(qBe,"A",{href:!0});var s5t=s(Yz);tKo=r(s5t,"CamembertForTokenClassification"),s5t.forEach(t),aKo=r(qBe," (CamemBERT model)"),qBe.forEach(t),nKo=i(J),Vv=n(J,"LI",{});var jBe=s(Vv);L4e=n(jBe,"STRONG",{});var l5t=s(L4e);sKo=r(l5t,"canine"),l5t.forEach(t),lKo=r(jBe," \u2014 "),Kz=n(jBe,"A",{href:!0});var i5t=s(Kz);iKo=r(i5t,"CanineForTokenClassification"),i5t.forEach(t),dKo=r(jBe," (CANINE model)"),jBe.forEach(t),cKo=i(J),Xv=n(J,"LI",{});var DBe=s(Xv);y4e=n(DBe,"STRONG",{});var d5t=s(y4e);fKo=r(d5t,"convbert"),d5t.forEach(t),mKo=r(DBe," \u2014 "),Zz=n(DBe,"A",{href:!0});var c5t=s(Zz);gKo=r(c5t,"ConvBertForTokenClassification"),c5t.forEach(t),hKo=r(DBe," (ConvBERT model)"),DBe.forEach(t),pKo=i(J),zv=n(J,"LI",{});var GBe=s(zv);x4e=n(GBe,"STRONG",{});var f5t=s(x4e);_Ko=r(f5t,"data2vec-text"),f5t.forEach(t),uKo=r(GBe," \u2014 "),eQ=n(GBe,"A",{href:!0});var m5t=s(eQ);bKo=r(m5t,"Data2VecTextForTokenClassification"),m5t.forEach(t),vKo=r(GBe," (Data2VecText model)"),GBe.forEach(t),FKo=i(J),Qv=n(J,"LI",{});var OBe=s(Qv);$4e=n(OBe,"STRONG",{});var g5t=s($4e);TKo=r(g5t,"deberta"),g5t.forEach(t),MKo=r(OBe," \u2014 "),oQ=n(OBe,"A",{href:!0});var h5t=s(oQ);EKo=r(h5t,"DebertaForTokenClassification"),h5t.forEach(t),CKo=r(OBe," (DeBERTa model)"),OBe.forEach(t),wKo=i(J),Wv=n(J,"LI",{});var VBe=s(Wv);k4e=n(VBe,"STRONG",{});var p5t=s(k4e);AKo=r(p5t,"deberta-v2"),p5t.forEach(t),LKo=r(VBe," \u2014 "),rQ=n(VBe,"A",{href:!0});var _5t=s(rQ);yKo=r(_5t,"DebertaV2ForTokenClassification"),_5t.forEach(t),xKo=r(VBe," (DeBERTa-v2 model)"),VBe.forEach(t),$Ko=i(J),Hv=n(J,"LI",{});var XBe=s(Hv);S4e=n(XBe,"STRONG",{});var u5t=s(S4e);kKo=r(u5t,"distilbert"),u5t.forEach(t),SKo=r(XBe," \u2014 "),tQ=n(XBe,"A",{href:!0});var b5t=s(tQ);RKo=r(b5t,"DistilBertForTokenClassification"),b5t.forEach(t),PKo=r(XBe," (DistilBERT model)"),XBe.forEach(t),BKo=i(J),Uv=n(J,"LI",{});var zBe=s(Uv);R4e=n(zBe,"STRONG",{});var v5t=s(R4e);IKo=r(v5t,"electra"),v5t.forEach(t),NKo=r(zBe," \u2014 "),aQ=n(zBe,"A",{href:!0});var F5t=s(aQ);qKo=r(F5t,"ElectraForTokenClassification"),F5t.forEach(t),jKo=r(zBe," (ELECTRA model)"),zBe.forEach(t),DKo=i(J),Jv=n(J,"LI",{});var QBe=s(Jv);P4e=n(QBe,"STRONG",{});var T5t=s(P4e);GKo=r(T5t,"flaubert"),T5t.forEach(t),OKo=r(QBe," \u2014 "),nQ=n(QBe,"A",{href:!0});var M5t=s(nQ);VKo=r(M5t,"FlaubertForTokenClassification"),M5t.forEach(t),XKo=r(QBe," (FlauBERT model)"),QBe.forEach(t),zKo=i(J),Yv=n(J,"LI",{});var WBe=s(Yv);B4e=n(WBe,"STRONG",{});var E5t=s(B4e);QKo=r(E5t,"fnet"),E5t.forEach(t),WKo=r(WBe," \u2014 "),sQ=n(WBe,"A",{href:!0});var C5t=s(sQ);HKo=r(C5t,"FNetForTokenClassification"),C5t.forEach(t),UKo=r(WBe," (FNet model)"),WBe.forEach(t),JKo=i(J),Kv=n(J,"LI",{});var HBe=s(Kv);I4e=n(HBe,"STRONG",{});var w5t=s(I4e);YKo=r(w5t,"funnel"),w5t.forEach(t),KKo=r(HBe," \u2014 "),lQ=n(HBe,"A",{href:!0});var A5t=s(lQ);ZKo=r(A5t,"FunnelForTokenClassification"),A5t.forEach(t),eZo=r(HBe," (Funnel Transformer model)"),HBe.forEach(t),oZo=i(J),Zv=n(J,"LI",{});var UBe=s(Zv);N4e=n(UBe,"STRONG",{});var L5t=s(N4e);rZo=r(L5t,"gpt2"),L5t.forEach(t),tZo=r(UBe," \u2014 "),iQ=n(UBe,"A",{href:!0});var y5t=s(iQ);aZo=r(y5t,"GPT2ForTokenClassification"),y5t.forEach(t),nZo=r(UBe," (OpenAI GPT-2 model)"),UBe.forEach(t),sZo=i(J),eF=n(J,"LI",{});var JBe=s(eF);q4e=n(JBe,"STRONG",{});var x5t=s(q4e);lZo=r(x5t,"ibert"),x5t.forEach(t),iZo=r(JBe," \u2014 "),dQ=n(JBe,"A",{href:!0});var $5t=s(dQ);dZo=r($5t,"IBertForTokenClassification"),$5t.forEach(t),cZo=r(JBe," (I-BERT model)"),JBe.forEach(t),fZo=i(J),oF=n(J,"LI",{});var YBe=s(oF);j4e=n(YBe,"STRONG",{});var k5t=s(j4e);mZo=r(k5t,"layoutlm"),k5t.forEach(t),gZo=r(YBe," \u2014 "),cQ=n(YBe,"A",{href:!0});var S5t=s(cQ);hZo=r(S5t,"LayoutLMForTokenClassification"),S5t.forEach(t),pZo=r(YBe," (LayoutLM model)"),YBe.forEach(t),_Zo=i(J),rF=n(J,"LI",{});var KBe=s(rF);D4e=n(KBe,"STRONG",{});var R5t=s(D4e);uZo=r(R5t,"layoutlmv2"),R5t.forEach(t),bZo=r(KBe," \u2014 "),fQ=n(KBe,"A",{href:!0});var P5t=s(fQ);vZo=r(P5t,"LayoutLMv2ForTokenClassification"),P5t.forEach(t),FZo=r(KBe," (LayoutLMv2 model)"),KBe.forEach(t),TZo=i(J),tF=n(J,"LI",{});var ZBe=s(tF);G4e=n(ZBe,"STRONG",{});var B5t=s(G4e);MZo=r(B5t,"layoutlmv3"),B5t.forEach(t),EZo=r(ZBe," \u2014 "),mQ=n(ZBe,"A",{href:!0});var I5t=s(mQ);CZo=r(I5t,"LayoutLMv3ForTokenClassification"),I5t.forEach(t),wZo=r(ZBe," (LayoutLMv3 model)"),ZBe.forEach(t),AZo=i(J),aF=n(J,"LI",{});var eIe=s(aF);O4e=n(eIe,"STRONG",{});var N5t=s(O4e);LZo=r(N5t,"longformer"),N5t.forEach(t),yZo=r(eIe," \u2014 "),gQ=n(eIe,"A",{href:!0});var q5t=s(gQ);xZo=r(q5t,"LongformerForTokenClassification"),q5t.forEach(t),$Zo=r(eIe," (Longformer model)"),eIe.forEach(t),kZo=i(J),nF=n(J,"LI",{});var oIe=s(nF);V4e=n(oIe,"STRONG",{});var j5t=s(V4e);SZo=r(j5t,"megatron-bert"),j5t.forEach(t),RZo=r(oIe," \u2014 "),hQ=n(oIe,"A",{href:!0});var D5t=s(hQ);PZo=r(D5t,"MegatronBertForTokenClassification"),D5t.forEach(t),BZo=r(oIe," (Megatron-BERT model)"),oIe.forEach(t),IZo=i(J),sF=n(J,"LI",{});var rIe=s(sF);X4e=n(rIe,"STRONG",{});var G5t=s(X4e);NZo=r(G5t,"mobilebert"),G5t.forEach(t),qZo=r(rIe," \u2014 "),pQ=n(rIe,"A",{href:!0});var O5t=s(pQ);jZo=r(O5t,"MobileBertForTokenClassification"),O5t.forEach(t),DZo=r(rIe," (MobileBERT model)"),rIe.forEach(t),GZo=i(J),lF=n(J,"LI",{});var tIe=s(lF);z4e=n(tIe,"STRONG",{});var V5t=s(z4e);OZo=r(V5t,"mpnet"),V5t.forEach(t),VZo=r(tIe," \u2014 "),_Q=n(tIe,"A",{href:!0});var X5t=s(_Q);XZo=r(X5t,"MPNetForTokenClassification"),X5t.forEach(t),zZo=r(tIe," (MPNet model)"),tIe.forEach(t),QZo=i(J),iF=n(J,"LI",{});var aIe=s(iF);Q4e=n(aIe,"STRONG",{});var z5t=s(Q4e);WZo=r(z5t,"nezha"),z5t.forEach(t),HZo=r(aIe," \u2014 "),uQ=n(aIe,"A",{href:!0});var Q5t=s(uQ);UZo=r(Q5t,"NezhaForTokenClassification"),Q5t.forEach(t),JZo=r(aIe," (Nezha model)"),aIe.forEach(t),YZo=i(J),dF=n(J,"LI",{});var nIe=s(dF);W4e=n(nIe,"STRONG",{});var W5t=s(W4e);KZo=r(W5t,"nystromformer"),W5t.forEach(t),ZZo=r(nIe," \u2014 "),bQ=n(nIe,"A",{href:!0});var H5t=s(bQ);eer=r(H5t,"NystromformerForTokenClassification"),H5t.forEach(t),oer=r(nIe," (Nystr\xF6mformer model)"),nIe.forEach(t),rer=i(J),cF=n(J,"LI",{});var sIe=s(cF);H4e=n(sIe,"STRONG",{});var U5t=s(H4e);ter=r(U5t,"qdqbert"),U5t.forEach(t),aer=r(sIe," \u2014 "),vQ=n(sIe,"A",{href:!0});var J5t=s(vQ);ner=r(J5t,"QDQBertForTokenClassification"),J5t.forEach(t),ser=r(sIe," (QDQBert model)"),sIe.forEach(t),ler=i(J),fF=n(J,"LI",{});var lIe=s(fF);U4e=n(lIe,"STRONG",{});var Y5t=s(U4e);ier=r(Y5t,"rembert"),Y5t.forEach(t),der=r(lIe," \u2014 "),FQ=n(lIe,"A",{href:!0});var K5t=s(FQ);cer=r(K5t,"RemBertForTokenClassification"),K5t.forEach(t),fer=r(lIe," (RemBERT model)"),lIe.forEach(t),mer=i(J),mF=n(J,"LI",{});var iIe=s(mF);J4e=n(iIe,"STRONG",{});var Z5t=s(J4e);ger=r(Z5t,"roberta"),Z5t.forEach(t),her=r(iIe," \u2014 "),TQ=n(iIe,"A",{href:!0});var e0t=s(TQ);per=r(e0t,"RobertaForTokenClassification"),e0t.forEach(t),_er=r(iIe," (RoBERTa model)"),iIe.forEach(t),uer=i(J),gF=n(J,"LI",{});var dIe=s(gF);Y4e=n(dIe,"STRONG",{});var o0t=s(Y4e);ber=r(o0t,"roformer"),o0t.forEach(t),ver=r(dIe," \u2014 "),MQ=n(dIe,"A",{href:!0});var r0t=s(MQ);Fer=r(r0t,"RoFormerForTokenClassification"),r0t.forEach(t),Ter=r(dIe," (RoFormer model)"),dIe.forEach(t),Mer=i(J),hF=n(J,"LI",{});var cIe=s(hF);K4e=n(cIe,"STRONG",{});var t0t=s(K4e);Eer=r(t0t,"squeezebert"),t0t.forEach(t),Cer=r(cIe," \u2014 "),EQ=n(cIe,"A",{href:!0});var a0t=s(EQ);wer=r(a0t,"SqueezeBertForTokenClassification"),a0t.forEach(t),Aer=r(cIe," (SqueezeBERT model)"),cIe.forEach(t),Ler=i(J),pF=n(J,"LI",{});var fIe=s(pF);Z4e=n(fIe,"STRONG",{});var n0t=s(Z4e);yer=r(n0t,"xlm"),n0t.forEach(t),xer=r(fIe," \u2014 "),CQ=n(fIe,"A",{href:!0});var s0t=s(CQ);$er=r(s0t,"XLMForTokenClassification"),s0t.forEach(t),ker=r(fIe," (XLM model)"),fIe.forEach(t),Ser=i(J),_F=n(J,"LI",{});var mIe=s(_F);e2e=n(mIe,"STRONG",{});var l0t=s(e2e);Rer=r(l0t,"xlm-roberta"),l0t.forEach(t),Per=r(mIe," \u2014 "),wQ=n(mIe,"A",{href:!0});var i0t=s(wQ);Ber=r(i0t,"XLMRobertaForTokenClassification"),i0t.forEach(t),Ier=r(mIe," (XLM-RoBERTa model)"),mIe.forEach(t),Ner=i(J),uF=n(J,"LI",{});var gIe=s(uF);o2e=n(gIe,"STRONG",{});var d0t=s(o2e);qer=r(d0t,"xlm-roberta-xl"),d0t.forEach(t),jer=r(gIe," \u2014 "),AQ=n(gIe,"A",{href:!0});var c0t=s(AQ);Der=r(c0t,"XLMRobertaXLForTokenClassification"),c0t.forEach(t),Ger=r(gIe," (XLM-RoBERTa-XL model)"),gIe.forEach(t),Oer=i(J),bF=n(J,"LI",{});var hIe=s(bF);r2e=n(hIe,"STRONG",{});var f0t=s(r2e);Ver=r(f0t,"xlnet"),f0t.forEach(t),Xer=r(hIe," \u2014 "),LQ=n(hIe,"A",{href:!0});var m0t=s(LQ);zer=r(m0t,"XLNetForTokenClassification"),m0t.forEach(t),Qer=r(hIe," (XLNet model)"),hIe.forEach(t),Wer=i(J),vF=n(J,"LI",{});var pIe=s(vF);t2e=n(pIe,"STRONG",{});var g0t=s(t2e);Her=r(g0t,"yoso"),g0t.forEach(t),Uer=r(pIe," \u2014 "),yQ=n(pIe,"A",{href:!0});var h0t=s(yQ);Jer=r(h0t,"YosoForTokenClassification"),h0t.forEach(t),Yer=r(pIe," (YOSO model)"),pIe.forEach(t),J.forEach(t),Ker=i(_a),FF=n(_a,"P",{});var _Ie=s(FF);Zer=r(_Ie,"The model is set in evaluation mode by default using "),a2e=n(_Ie,"CODE",{});var p0t=s(a2e);eor=r(p0t,"model.eval()"),p0t.forEach(t),oor=r(_Ie,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n2e=n(_Ie,"CODE",{});var _0t=s(n2e);ror=r(_0t,"model.train()"),_0t.forEach(t),_Ie.forEach(t),tor=i(_a),T(TF.$$.fragment,_a),_a.forEach(t),fl.forEach(t),ZXe=i(f),pd=n(f,"H2",{class:!0});var nWe=s(pd);MF=n(nWe,"A",{id:!0,class:!0,href:!0});var u0t=s(MF);s2e=n(u0t,"SPAN",{});var b0t=s(s2e);T(Ly.$$.fragment,b0t),b0t.forEach(t),u0t.forEach(t),aor=i(nWe),l2e=n(nWe,"SPAN",{});var v0t=s(l2e);nor=r(v0t,"AutoModelForQuestionAnswering"),v0t.forEach(t),nWe.forEach(t),eze=i(f),Go=n(f,"DIV",{class:!0});var ml=s(Go);T(yy.$$.fragment,ml),sor=i(ml),_d=n(ml,"P",{});var cte=s(_d);lor=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xQ=n(cte,"A",{href:!0});var F0t=s(xQ);ior=r(F0t,"from_pretrained()"),F0t.forEach(t),dor=r(cte," class method or the "),$Q=n(cte,"A",{href:!0});var T0t=s($Q);cor=r(T0t,"from_config()"),T0t.forEach(t),mor=r(cte,` class
method.`),cte.forEach(t),gor=i(ml),xy=n(ml,"P",{});var sWe=s(xy);hor=r(sWe,"This class cannot be instantiated directly using "),i2e=n(sWe,"CODE",{});var M0t=s(i2e);por=r(M0t,"__init__()"),M0t.forEach(t),_or=r(sWe," (throws an error)."),sWe.forEach(t),uor=i(ml),ut=n(ml,"DIV",{class:!0});var S6=s(ut);T($y.$$.fragment,S6),bor=i(S6),d2e=n(S6,"P",{});var E0t=s(d2e);vor=r(E0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),E0t.forEach(t),For=i(S6),ud=n(S6,"P",{});var fte=s(ud);Tor=r(fte,`Note:
Loading a model from its configuration file does `),c2e=n(fte,"STRONG",{});var C0t=s(c2e);Mor=r(C0t,"not"),C0t.forEach(t),Eor=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=n(fte,"A",{href:!0});var w0t=s(kQ);Cor=r(w0t,"from_pretrained()"),w0t.forEach(t),wor=r(fte," to load the model weights."),fte.forEach(t),Aor=i(S6),T(EF.$$.fragment,S6),S6.forEach(t),Lor=i(ml),so=n(ml,"DIV",{class:!0});var ua=s(so);T(ky.$$.fragment,ua),yor=i(ua),f2e=n(ua,"P",{});var A0t=s(f2e);xor=r(A0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),A0t.forEach(t),$or=i(ua),za=n(ua,"P",{});var R6=s(za);kor=r(R6,"The model class to instantiate is selected based on the "),m2e=n(R6,"CODE",{});var L0t=s(m2e);Sor=r(L0t,"model_type"),L0t.forEach(t),Ror=r(R6,` property of the config object (either
passed as an argument or loaded from `),g2e=n(R6,"CODE",{});var y0t=s(g2e);Por=r(y0t,"pretrained_model_name_or_path"),y0t.forEach(t),Bor=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=n(R6,"CODE",{});var x0t=s(h2e);Ior=r(x0t,"pretrained_model_name_or_path"),x0t.forEach(t),Nor=r(R6,":"),R6.forEach(t),qor=i(ua),V=n(ua,"UL",{});var X=s(V);CF=n(X,"LI",{});var uIe=s(CF);p2e=n(uIe,"STRONG",{});var $0t=s(p2e);jor=r($0t,"albert"),$0t.forEach(t),Dor=r(uIe," \u2014 "),SQ=n(uIe,"A",{href:!0});var k0t=s(SQ);Gor=r(k0t,"AlbertForQuestionAnswering"),k0t.forEach(t),Oor=r(uIe," (ALBERT model)"),uIe.forEach(t),Vor=i(X),wF=n(X,"LI",{});var bIe=s(wF);_2e=n(bIe,"STRONG",{});var S0t=s(_2e);Xor=r(S0t,"bart"),S0t.forEach(t),zor=r(bIe," \u2014 "),RQ=n(bIe,"A",{href:!0});var R0t=s(RQ);Qor=r(R0t,"BartForQuestionAnswering"),R0t.forEach(t),Wor=r(bIe," (BART model)"),bIe.forEach(t),Hor=i(X),AF=n(X,"LI",{});var vIe=s(AF);u2e=n(vIe,"STRONG",{});var P0t=s(u2e);Uor=r(P0t,"bert"),P0t.forEach(t),Jor=r(vIe," \u2014 "),PQ=n(vIe,"A",{href:!0});var B0t=s(PQ);Yor=r(B0t,"BertForQuestionAnswering"),B0t.forEach(t),Kor=r(vIe," (BERT model)"),vIe.forEach(t),Zor=i(X),LF=n(X,"LI",{});var FIe=s(LF);b2e=n(FIe,"STRONG",{});var I0t=s(b2e);err=r(I0t,"big_bird"),I0t.forEach(t),orr=r(FIe," \u2014 "),BQ=n(FIe,"A",{href:!0});var N0t=s(BQ);rrr=r(N0t,"BigBirdForQuestionAnswering"),N0t.forEach(t),trr=r(FIe," (BigBird model)"),FIe.forEach(t),arr=i(X),yF=n(X,"LI",{});var TIe=s(yF);v2e=n(TIe,"STRONG",{});var q0t=s(v2e);nrr=r(q0t,"bigbird_pegasus"),q0t.forEach(t),srr=r(TIe," \u2014 "),IQ=n(TIe,"A",{href:!0});var j0t=s(IQ);lrr=r(j0t,"BigBirdPegasusForQuestionAnswering"),j0t.forEach(t),irr=r(TIe," (BigBird-Pegasus model)"),TIe.forEach(t),drr=i(X),xF=n(X,"LI",{});var MIe=s(xF);F2e=n(MIe,"STRONG",{});var D0t=s(F2e);crr=r(D0t,"camembert"),D0t.forEach(t),frr=r(MIe," \u2014 "),NQ=n(MIe,"A",{href:!0});var G0t=s(NQ);mrr=r(G0t,"CamembertForQuestionAnswering"),G0t.forEach(t),grr=r(MIe," (CamemBERT model)"),MIe.forEach(t),hrr=i(X),$F=n(X,"LI",{});var EIe=s($F);T2e=n(EIe,"STRONG",{});var O0t=s(T2e);prr=r(O0t,"canine"),O0t.forEach(t),_rr=r(EIe," \u2014 "),qQ=n(EIe,"A",{href:!0});var V0t=s(qQ);urr=r(V0t,"CanineForQuestionAnswering"),V0t.forEach(t),brr=r(EIe," (CANINE model)"),EIe.forEach(t),vrr=i(X),kF=n(X,"LI",{});var CIe=s(kF);M2e=n(CIe,"STRONG",{});var X0t=s(M2e);Frr=r(X0t,"convbert"),X0t.forEach(t),Trr=r(CIe," \u2014 "),jQ=n(CIe,"A",{href:!0});var z0t=s(jQ);Mrr=r(z0t,"ConvBertForQuestionAnswering"),z0t.forEach(t),Err=r(CIe," (ConvBERT model)"),CIe.forEach(t),Crr=i(X),SF=n(X,"LI",{});var wIe=s(SF);E2e=n(wIe,"STRONG",{});var Q0t=s(E2e);wrr=r(Q0t,"data2vec-text"),Q0t.forEach(t),Arr=r(wIe," \u2014 "),DQ=n(wIe,"A",{href:!0});var W0t=s(DQ);Lrr=r(W0t,"Data2VecTextForQuestionAnswering"),W0t.forEach(t),yrr=r(wIe," (Data2VecText model)"),wIe.forEach(t),xrr=i(X),RF=n(X,"LI",{});var AIe=s(RF);C2e=n(AIe,"STRONG",{});var H0t=s(C2e);$rr=r(H0t,"deberta"),H0t.forEach(t),krr=r(AIe," \u2014 "),GQ=n(AIe,"A",{href:!0});var U0t=s(GQ);Srr=r(U0t,"DebertaForQuestionAnswering"),U0t.forEach(t),Rrr=r(AIe," (DeBERTa model)"),AIe.forEach(t),Prr=i(X),PF=n(X,"LI",{});var LIe=s(PF);w2e=n(LIe,"STRONG",{});var J0t=s(w2e);Brr=r(J0t,"deberta-v2"),J0t.forEach(t),Irr=r(LIe," \u2014 "),OQ=n(LIe,"A",{href:!0});var Y0t=s(OQ);Nrr=r(Y0t,"DebertaV2ForQuestionAnswering"),Y0t.forEach(t),qrr=r(LIe," (DeBERTa-v2 model)"),LIe.forEach(t),jrr=i(X),BF=n(X,"LI",{});var yIe=s(BF);A2e=n(yIe,"STRONG",{});var K0t=s(A2e);Drr=r(K0t,"distilbert"),K0t.forEach(t),Grr=r(yIe," \u2014 "),VQ=n(yIe,"A",{href:!0});var Z0t=s(VQ);Orr=r(Z0t,"DistilBertForQuestionAnswering"),Z0t.forEach(t),Vrr=r(yIe," (DistilBERT model)"),yIe.forEach(t),Xrr=i(X),IF=n(X,"LI",{});var xIe=s(IF);L2e=n(xIe,"STRONG",{});var ewt=s(L2e);zrr=r(ewt,"electra"),ewt.forEach(t),Qrr=r(xIe," \u2014 "),XQ=n(xIe,"A",{href:!0});var owt=s(XQ);Wrr=r(owt,"ElectraForQuestionAnswering"),owt.forEach(t),Hrr=r(xIe," (ELECTRA model)"),xIe.forEach(t),Urr=i(X),NF=n(X,"LI",{});var $Ie=s(NF);y2e=n($Ie,"STRONG",{});var rwt=s(y2e);Jrr=r(rwt,"flaubert"),rwt.forEach(t),Yrr=r($Ie," \u2014 "),zQ=n($Ie,"A",{href:!0});var twt=s(zQ);Krr=r(twt,"FlaubertForQuestionAnsweringSimple"),twt.forEach(t),Zrr=r($Ie," (FlauBERT model)"),$Ie.forEach(t),etr=i(X),qF=n(X,"LI",{});var kIe=s(qF);x2e=n(kIe,"STRONG",{});var awt=s(x2e);otr=r(awt,"fnet"),awt.forEach(t),rtr=r(kIe," \u2014 "),QQ=n(kIe,"A",{href:!0});var nwt=s(QQ);ttr=r(nwt,"FNetForQuestionAnswering"),nwt.forEach(t),atr=r(kIe," (FNet model)"),kIe.forEach(t),ntr=i(X),jF=n(X,"LI",{});var SIe=s(jF);$2e=n(SIe,"STRONG",{});var swt=s($2e);str=r(swt,"funnel"),swt.forEach(t),ltr=r(SIe," \u2014 "),WQ=n(SIe,"A",{href:!0});var lwt=s(WQ);itr=r(lwt,"FunnelForQuestionAnswering"),lwt.forEach(t),dtr=r(SIe," (Funnel Transformer model)"),SIe.forEach(t),ctr=i(X),DF=n(X,"LI",{});var RIe=s(DF);k2e=n(RIe,"STRONG",{});var iwt=s(k2e);ftr=r(iwt,"gptj"),iwt.forEach(t),mtr=r(RIe," \u2014 "),HQ=n(RIe,"A",{href:!0});var dwt=s(HQ);gtr=r(dwt,"GPTJForQuestionAnswering"),dwt.forEach(t),htr=r(RIe," (GPT-J model)"),RIe.forEach(t),ptr=i(X),GF=n(X,"LI",{});var PIe=s(GF);S2e=n(PIe,"STRONG",{});var cwt=s(S2e);_tr=r(cwt,"ibert"),cwt.forEach(t),utr=r(PIe," \u2014 "),UQ=n(PIe,"A",{href:!0});var fwt=s(UQ);btr=r(fwt,"IBertForQuestionAnswering"),fwt.forEach(t),vtr=r(PIe," (I-BERT model)"),PIe.forEach(t),Ftr=i(X),OF=n(X,"LI",{});var BIe=s(OF);R2e=n(BIe,"STRONG",{});var mwt=s(R2e);Ttr=r(mwt,"layoutlmv2"),mwt.forEach(t),Mtr=r(BIe," \u2014 "),JQ=n(BIe,"A",{href:!0});var gwt=s(JQ);Etr=r(gwt,"LayoutLMv2ForQuestionAnswering"),gwt.forEach(t),Ctr=r(BIe," (LayoutLMv2 model)"),BIe.forEach(t),wtr=i(X),VF=n(X,"LI",{});var IIe=s(VF);P2e=n(IIe,"STRONG",{});var hwt=s(P2e);Atr=r(hwt,"layoutlmv3"),hwt.forEach(t),Ltr=r(IIe," \u2014 "),YQ=n(IIe,"A",{href:!0});var pwt=s(YQ);ytr=r(pwt,"LayoutLMv3ForQuestionAnswering"),pwt.forEach(t),xtr=r(IIe," (LayoutLMv3 model)"),IIe.forEach(t),$tr=i(X),XF=n(X,"LI",{});var NIe=s(XF);B2e=n(NIe,"STRONG",{});var _wt=s(B2e);ktr=r(_wt,"led"),_wt.forEach(t),Str=r(NIe," \u2014 "),KQ=n(NIe,"A",{href:!0});var uwt=s(KQ);Rtr=r(uwt,"LEDForQuestionAnswering"),uwt.forEach(t),Ptr=r(NIe," (LED model)"),NIe.forEach(t),Btr=i(X),zF=n(X,"LI",{});var qIe=s(zF);I2e=n(qIe,"STRONG",{});var bwt=s(I2e);Itr=r(bwt,"longformer"),bwt.forEach(t),Ntr=r(qIe," \u2014 "),ZQ=n(qIe,"A",{href:!0});var vwt=s(ZQ);qtr=r(vwt,"LongformerForQuestionAnswering"),vwt.forEach(t),jtr=r(qIe," (Longformer model)"),qIe.forEach(t),Dtr=i(X),QF=n(X,"LI",{});var jIe=s(QF);N2e=n(jIe,"STRONG",{});var Fwt=s(N2e);Gtr=r(Fwt,"lxmert"),Fwt.forEach(t),Otr=r(jIe," \u2014 "),eW=n(jIe,"A",{href:!0});var Twt=s(eW);Vtr=r(Twt,"LxmertForQuestionAnswering"),Twt.forEach(t),Xtr=r(jIe," (LXMERT model)"),jIe.forEach(t),ztr=i(X),WF=n(X,"LI",{});var DIe=s(WF);q2e=n(DIe,"STRONG",{});var Mwt=s(q2e);Qtr=r(Mwt,"mbart"),Mwt.forEach(t),Wtr=r(DIe," \u2014 "),oW=n(DIe,"A",{href:!0});var Ewt=s(oW);Htr=r(Ewt,"MBartForQuestionAnswering"),Ewt.forEach(t),Utr=r(DIe," (mBART model)"),DIe.forEach(t),Jtr=i(X),HF=n(X,"LI",{});var GIe=s(HF);j2e=n(GIe,"STRONG",{});var Cwt=s(j2e);Ytr=r(Cwt,"megatron-bert"),Cwt.forEach(t),Ktr=r(GIe," \u2014 "),rW=n(GIe,"A",{href:!0});var wwt=s(rW);Ztr=r(wwt,"MegatronBertForQuestionAnswering"),wwt.forEach(t),ear=r(GIe," (Megatron-BERT model)"),GIe.forEach(t),oar=i(X),UF=n(X,"LI",{});var OIe=s(UF);D2e=n(OIe,"STRONG",{});var Awt=s(D2e);rar=r(Awt,"mobilebert"),Awt.forEach(t),tar=r(OIe," \u2014 "),tW=n(OIe,"A",{href:!0});var Lwt=s(tW);aar=r(Lwt,"MobileBertForQuestionAnswering"),Lwt.forEach(t),nar=r(OIe," (MobileBERT model)"),OIe.forEach(t),sar=i(X),JF=n(X,"LI",{});var VIe=s(JF);G2e=n(VIe,"STRONG",{});var ywt=s(G2e);lar=r(ywt,"mpnet"),ywt.forEach(t),iar=r(VIe," \u2014 "),aW=n(VIe,"A",{href:!0});var xwt=s(aW);dar=r(xwt,"MPNetForQuestionAnswering"),xwt.forEach(t),car=r(VIe," (MPNet model)"),VIe.forEach(t),far=i(X),YF=n(X,"LI",{});var XIe=s(YF);O2e=n(XIe,"STRONG",{});var $wt=s(O2e);mar=r($wt,"mvp"),$wt.forEach(t),gar=r(XIe," \u2014 "),nW=n(XIe,"A",{href:!0});var kwt=s(nW);har=r(kwt,"MvpForQuestionAnswering"),kwt.forEach(t),par=r(XIe," (MVP model)"),XIe.forEach(t),_ar=i(X),KF=n(X,"LI",{});var zIe=s(KF);V2e=n(zIe,"STRONG",{});var Swt=s(V2e);uar=r(Swt,"nezha"),Swt.forEach(t),bar=r(zIe," \u2014 "),sW=n(zIe,"A",{href:!0});var Rwt=s(sW);Far=r(Rwt,"NezhaForQuestionAnswering"),Rwt.forEach(t),Tar=r(zIe," (Nezha model)"),zIe.forEach(t),Mar=i(X),ZF=n(X,"LI",{});var QIe=s(ZF);X2e=n(QIe,"STRONG",{});var Pwt=s(X2e);Ear=r(Pwt,"nystromformer"),Pwt.forEach(t),Car=r(QIe," \u2014 "),lW=n(QIe,"A",{href:!0});var Bwt=s(lW);war=r(Bwt,"NystromformerForQuestionAnswering"),Bwt.forEach(t),Aar=r(QIe," (Nystr\xF6mformer model)"),QIe.forEach(t),Lar=i(X),eT=n(X,"LI",{});var WIe=s(eT);z2e=n(WIe,"STRONG",{});var Iwt=s(z2e);yar=r(Iwt,"qdqbert"),Iwt.forEach(t),xar=r(WIe," \u2014 "),iW=n(WIe,"A",{href:!0});var Nwt=s(iW);$ar=r(Nwt,"QDQBertForQuestionAnswering"),Nwt.forEach(t),kar=r(WIe," (QDQBert model)"),WIe.forEach(t),Sar=i(X),oT=n(X,"LI",{});var HIe=s(oT);Q2e=n(HIe,"STRONG",{});var qwt=s(Q2e);Rar=r(qwt,"reformer"),qwt.forEach(t),Par=r(HIe," \u2014 "),dW=n(HIe,"A",{href:!0});var jwt=s(dW);Bar=r(jwt,"ReformerForQuestionAnswering"),jwt.forEach(t),Iar=r(HIe," (Reformer model)"),HIe.forEach(t),Nar=i(X),rT=n(X,"LI",{});var UIe=s(rT);W2e=n(UIe,"STRONG",{});var Dwt=s(W2e);qar=r(Dwt,"rembert"),Dwt.forEach(t),jar=r(UIe," \u2014 "),cW=n(UIe,"A",{href:!0});var Gwt=s(cW);Dar=r(Gwt,"RemBertForQuestionAnswering"),Gwt.forEach(t),Gar=r(UIe," (RemBERT model)"),UIe.forEach(t),Oar=i(X),tT=n(X,"LI",{});var JIe=s(tT);H2e=n(JIe,"STRONG",{});var Owt=s(H2e);Var=r(Owt,"roberta"),Owt.forEach(t),Xar=r(JIe," \u2014 "),fW=n(JIe,"A",{href:!0});var Vwt=s(fW);zar=r(Vwt,"RobertaForQuestionAnswering"),Vwt.forEach(t),Qar=r(JIe," (RoBERTa model)"),JIe.forEach(t),War=i(X),aT=n(X,"LI",{});var YIe=s(aT);U2e=n(YIe,"STRONG",{});var Xwt=s(U2e);Har=r(Xwt,"roformer"),Xwt.forEach(t),Uar=r(YIe," \u2014 "),mW=n(YIe,"A",{href:!0});var zwt=s(mW);Jar=r(zwt,"RoFormerForQuestionAnswering"),zwt.forEach(t),Yar=r(YIe," (RoFormer model)"),YIe.forEach(t),Kar=i(X),nT=n(X,"LI",{});var KIe=s(nT);J2e=n(KIe,"STRONG",{});var Qwt=s(J2e);Zar=r(Qwt,"splinter"),Qwt.forEach(t),enr=r(KIe," \u2014 "),gW=n(KIe,"A",{href:!0});var Wwt=s(gW);onr=r(Wwt,"SplinterForQuestionAnswering"),Wwt.forEach(t),rnr=r(KIe," (Splinter model)"),KIe.forEach(t),tnr=i(X),sT=n(X,"LI",{});var ZIe=s(sT);Y2e=n(ZIe,"STRONG",{});var Hwt=s(Y2e);anr=r(Hwt,"squeezebert"),Hwt.forEach(t),nnr=r(ZIe," \u2014 "),hW=n(ZIe,"A",{href:!0});var Uwt=s(hW);snr=r(Uwt,"SqueezeBertForQuestionAnswering"),Uwt.forEach(t),lnr=r(ZIe," (SqueezeBERT model)"),ZIe.forEach(t),inr=i(X),lT=n(X,"LI",{});var eNe=s(lT);K2e=n(eNe,"STRONG",{});var Jwt=s(K2e);dnr=r(Jwt,"xlm"),Jwt.forEach(t),cnr=r(eNe," \u2014 "),pW=n(eNe,"A",{href:!0});var Ywt=s(pW);fnr=r(Ywt,"XLMForQuestionAnsweringSimple"),Ywt.forEach(t),mnr=r(eNe," (XLM model)"),eNe.forEach(t),gnr=i(X),iT=n(X,"LI",{});var oNe=s(iT);Z2e=n(oNe,"STRONG",{});var Kwt=s(Z2e);hnr=r(Kwt,"xlm-roberta"),Kwt.forEach(t),pnr=r(oNe," \u2014 "),_W=n(oNe,"A",{href:!0});var Zwt=s(_W);_nr=r(Zwt,"XLMRobertaForQuestionAnswering"),Zwt.forEach(t),unr=r(oNe," (XLM-RoBERTa model)"),oNe.forEach(t),bnr=i(X),dT=n(X,"LI",{});var rNe=s(dT);e1e=n(rNe,"STRONG",{});var eAt=s(e1e);vnr=r(eAt,"xlm-roberta-xl"),eAt.forEach(t),Fnr=r(rNe," \u2014 "),uW=n(rNe,"A",{href:!0});var oAt=s(uW);Tnr=r(oAt,"XLMRobertaXLForQuestionAnswering"),oAt.forEach(t),Mnr=r(rNe," (XLM-RoBERTa-XL model)"),rNe.forEach(t),Enr=i(X),cT=n(X,"LI",{});var tNe=s(cT);o1e=n(tNe,"STRONG",{});var rAt=s(o1e);Cnr=r(rAt,"xlnet"),rAt.forEach(t),wnr=r(tNe," \u2014 "),bW=n(tNe,"A",{href:!0});var tAt=s(bW);Anr=r(tAt,"XLNetForQuestionAnsweringSimple"),tAt.forEach(t),Lnr=r(tNe," (XLNet model)"),tNe.forEach(t),ynr=i(X),fT=n(X,"LI",{});var aNe=s(fT);r1e=n(aNe,"STRONG",{});var aAt=s(r1e);xnr=r(aAt,"yoso"),aAt.forEach(t),$nr=r(aNe," \u2014 "),vW=n(aNe,"A",{href:!0});var nAt=s(vW);knr=r(nAt,"YosoForQuestionAnswering"),nAt.forEach(t),Snr=r(aNe," (YOSO model)"),aNe.forEach(t),X.forEach(t),Rnr=i(ua),mT=n(ua,"P",{});var nNe=s(mT);Pnr=r(nNe,"The model is set in evaluation mode by default using "),t1e=n(nNe,"CODE",{});var sAt=s(t1e);Bnr=r(sAt,"model.eval()"),sAt.forEach(t),Inr=r(nNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a1e=n(nNe,"CODE",{});var lAt=s(a1e);Nnr=r(lAt,"model.train()"),lAt.forEach(t),nNe.forEach(t),qnr=i(ua),T(gT.$$.fragment,ua),ua.forEach(t),ml.forEach(t),oze=i(f),bd=n(f,"H2",{class:!0});var lWe=s(bd);hT=n(lWe,"A",{id:!0,class:!0,href:!0});var iAt=s(hT);n1e=n(iAt,"SPAN",{});var dAt=s(n1e);T(Sy.$$.fragment,dAt),dAt.forEach(t),iAt.forEach(t),jnr=i(lWe),s1e=n(lWe,"SPAN",{});var cAt=s(s1e);Dnr=r(cAt,"AutoModelForTableQuestionAnswering"),cAt.forEach(t),lWe.forEach(t),rze=i(f),Oo=n(f,"DIV",{class:!0});var gl=s(Oo);T(Ry.$$.fragment,gl),Gnr=i(gl),vd=n(gl,"P",{});var mte=s(vd);Onr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),FW=n(mte,"A",{href:!0});var fAt=s(FW);Vnr=r(fAt,"from_pretrained()"),fAt.forEach(t),Xnr=r(mte," class method or the "),TW=n(mte,"A",{href:!0});var mAt=s(TW);znr=r(mAt,"from_config()"),mAt.forEach(t),Qnr=r(mte,` class
method.`),mte.forEach(t),Wnr=i(gl),Py=n(gl,"P",{});var iWe=s(Py);Hnr=r(iWe,"This class cannot be instantiated directly using "),l1e=n(iWe,"CODE",{});var gAt=s(l1e);Unr=r(gAt,"__init__()"),gAt.forEach(t),Jnr=r(iWe," (throws an error)."),iWe.forEach(t),Ynr=i(gl),bt=n(gl,"DIV",{class:!0});var P6=s(bt);T(By.$$.fragment,P6),Knr=i(P6),i1e=n(P6,"P",{});var hAt=s(i1e);Znr=r(hAt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hAt.forEach(t),esr=i(P6),Fd=n(P6,"P",{});var gte=s(Fd);osr=r(gte,`Note:
Loading a model from its configuration file does `),d1e=n(gte,"STRONG",{});var pAt=s(d1e);rsr=r(pAt,"not"),pAt.forEach(t),tsr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(gte,"A",{href:!0});var _At=s(MW);asr=r(_At,"from_pretrained()"),_At.forEach(t),nsr=r(gte," to load the model weights."),gte.forEach(t),ssr=i(P6),T(pT.$$.fragment,P6),P6.forEach(t),lsr=i(gl),lo=n(gl,"DIV",{class:!0});var ba=s(lo);T(Iy.$$.fragment,ba),isr=i(ba),c1e=n(ba,"P",{});var uAt=s(c1e);dsr=r(uAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uAt.forEach(t),csr=i(ba),Qa=n(ba,"P",{});var B6=s(Qa);fsr=r(B6,"The model class to instantiate is selected based on the "),f1e=n(B6,"CODE",{});var bAt=s(f1e);msr=r(bAt,"model_type"),bAt.forEach(t),gsr=r(B6,` property of the config object (either
passed as an argument or loaded from `),m1e=n(B6,"CODE",{});var vAt=s(m1e);hsr=r(vAt,"pretrained_model_name_or_path"),vAt.forEach(t),psr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=n(B6,"CODE",{});var FAt=s(g1e);_sr=r(FAt,"pretrained_model_name_or_path"),FAt.forEach(t),usr=r(B6,":"),B6.forEach(t),bsr=i(ba),h1e=n(ba,"UL",{});var TAt=s(h1e);_T=n(TAt,"LI",{});var sNe=s(_T);p1e=n(sNe,"STRONG",{});var MAt=s(p1e);vsr=r(MAt,"tapas"),MAt.forEach(t),Fsr=r(sNe," \u2014 "),EW=n(sNe,"A",{href:!0});var EAt=s(EW);Tsr=r(EAt,"TapasForQuestionAnswering"),EAt.forEach(t),Msr=r(sNe," (TAPAS model)"),sNe.forEach(t),TAt.forEach(t),Esr=i(ba),uT=n(ba,"P",{});var lNe=s(uT);Csr=r(lNe,"The model is set in evaluation mode by default using "),_1e=n(lNe,"CODE",{});var CAt=s(_1e);wsr=r(CAt,"model.eval()"),CAt.forEach(t),Asr=r(lNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=n(lNe,"CODE",{});var wAt=s(u1e);Lsr=r(wAt,"model.train()"),wAt.forEach(t),lNe.forEach(t),ysr=i(ba),T(bT.$$.fragment,ba),ba.forEach(t),gl.forEach(t),tze=i(f),Td=n(f,"H2",{class:!0});var dWe=s(Td);vT=n(dWe,"A",{id:!0,class:!0,href:!0});var AAt=s(vT);b1e=n(AAt,"SPAN",{});var LAt=s(b1e);T(Ny.$$.fragment,LAt),LAt.forEach(t),AAt.forEach(t),xsr=i(dWe),v1e=n(dWe,"SPAN",{});var yAt=s(v1e);$sr=r(yAt,"AutoModelForImageClassification"),yAt.forEach(t),dWe.forEach(t),aze=i(f),Vo=n(f,"DIV",{class:!0});var hl=s(Vo);T(qy.$$.fragment,hl),ksr=i(hl),Md=n(hl,"P",{});var hte=s(Md);Ssr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CW=n(hte,"A",{href:!0});var xAt=s(CW);Rsr=r(xAt,"from_pretrained()"),xAt.forEach(t),Psr=r(hte," class method or the "),wW=n(hte,"A",{href:!0});var $At=s(wW);Bsr=r($At,"from_config()"),$At.forEach(t),Isr=r(hte,` class
method.`),hte.forEach(t),Nsr=i(hl),jy=n(hl,"P",{});var cWe=s(jy);qsr=r(cWe,"This class cannot be instantiated directly using "),F1e=n(cWe,"CODE",{});var kAt=s(F1e);jsr=r(kAt,"__init__()"),kAt.forEach(t),Dsr=r(cWe," (throws an error)."),cWe.forEach(t),Gsr=i(hl),vt=n(hl,"DIV",{class:!0});var I6=s(vt);T(Dy.$$.fragment,I6),Osr=i(I6),T1e=n(I6,"P",{});var SAt=s(T1e);Vsr=r(SAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SAt.forEach(t),Xsr=i(I6),Ed=n(I6,"P",{});var pte=s(Ed);zsr=r(pte,`Note:
Loading a model from its configuration file does `),M1e=n(pte,"STRONG",{});var RAt=s(M1e);Qsr=r(RAt,"not"),RAt.forEach(t),Wsr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(pte,"A",{href:!0});var PAt=s(AW);Hsr=r(PAt,"from_pretrained()"),PAt.forEach(t),Usr=r(pte," to load the model weights."),pte.forEach(t),Jsr=i(I6),T(FT.$$.fragment,I6),I6.forEach(t),Ysr=i(hl),io=n(hl,"DIV",{class:!0});var va=s(io);T(Gy.$$.fragment,va),Ksr=i(va),E1e=n(va,"P",{});var BAt=s(E1e);Zsr=r(BAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),BAt.forEach(t),elr=i(va),Wa=n(va,"P",{});var N6=s(Wa);olr=r(N6,"The model class to instantiate is selected based on the "),C1e=n(N6,"CODE",{});var IAt=s(C1e);rlr=r(IAt,"model_type"),IAt.forEach(t),tlr=r(N6,` property of the config object (either
passed as an argument or loaded from `),w1e=n(N6,"CODE",{});var NAt=s(w1e);alr=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),nlr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=n(N6,"CODE",{});var qAt=s(A1e);slr=r(qAt,"pretrained_model_name_or_path"),qAt.forEach(t),llr=r(N6,":"),N6.forEach(t),ilr=i(va),ve=n(va,"UL",{});var Te=s(ve);TT=n(Te,"LI",{});var iNe=s(TT);L1e=n(iNe,"STRONG",{});var jAt=s(L1e);dlr=r(jAt,"beit"),jAt.forEach(t),clr=r(iNe," \u2014 "),LW=n(iNe,"A",{href:!0});var DAt=s(LW);flr=r(DAt,"BeitForImageClassification"),DAt.forEach(t),mlr=r(iNe," (BEiT model)"),iNe.forEach(t),glr=i(Te),MT=n(Te,"LI",{});var dNe=s(MT);y1e=n(dNe,"STRONG",{});var GAt=s(y1e);hlr=r(GAt,"convnext"),GAt.forEach(t),plr=r(dNe," \u2014 "),yW=n(dNe,"A",{href:!0});var OAt=s(yW);_lr=r(OAt,"ConvNextForImageClassification"),OAt.forEach(t),ulr=r(dNe," (ConvNeXT model)"),dNe.forEach(t),blr=i(Te),ET=n(Te,"LI",{});var cNe=s(ET);x1e=n(cNe,"STRONG",{});var VAt=s(x1e);vlr=r(VAt,"cvt"),VAt.forEach(t),Flr=r(cNe," \u2014 "),xW=n(cNe,"A",{href:!0});var XAt=s(xW);Tlr=r(XAt,"CvtForImageClassification"),XAt.forEach(t),Mlr=r(cNe," (CvT model)"),cNe.forEach(t),Elr=i(Te),CT=n(Te,"LI",{});var fNe=s(CT);$1e=n(fNe,"STRONG",{});var zAt=s($1e);Clr=r(zAt,"data2vec-vision"),zAt.forEach(t),wlr=r(fNe," \u2014 "),$W=n(fNe,"A",{href:!0});var QAt=s($W);Alr=r(QAt,"Data2VecVisionForImageClassification"),QAt.forEach(t),Llr=r(fNe," (Data2VecVision model)"),fNe.forEach(t),ylr=i(Te),Us=n(Te,"LI",{});var qS=s(Us);k1e=n(qS,"STRONG",{});var WAt=s(k1e);xlr=r(WAt,"deit"),WAt.forEach(t),$lr=r(qS," \u2014 "),kW=n(qS,"A",{href:!0});var HAt=s(kW);klr=r(HAt,"DeiTForImageClassification"),HAt.forEach(t),Slr=r(qS," or "),SW=n(qS,"A",{href:!0});var UAt=s(SW);Rlr=r(UAt,"DeiTForImageClassificationWithTeacher"),UAt.forEach(t),Plr=r(qS," (DeiT model)"),qS.forEach(t),Blr=i(Te),wT=n(Te,"LI",{});var mNe=s(wT);S1e=n(mNe,"STRONG",{});var JAt=s(S1e);Ilr=r(JAt,"imagegpt"),JAt.forEach(t),Nlr=r(mNe," \u2014 "),RW=n(mNe,"A",{href:!0});var YAt=s(RW);qlr=r(YAt,"ImageGPTForImageClassification"),YAt.forEach(t),jlr=r(mNe," (ImageGPT model)"),mNe.forEach(t),Dlr=i(Te),Js=n(Te,"LI",{});var jS=s(Js);R1e=n(jS,"STRONG",{});var KAt=s(R1e);Glr=r(KAt,"levit"),KAt.forEach(t),Olr=r(jS," \u2014 "),PW=n(jS,"A",{href:!0});var ZAt=s(PW);Vlr=r(ZAt,"LevitForImageClassification"),ZAt.forEach(t),Xlr=r(jS," or "),BW=n(jS,"A",{href:!0});var e6t=s(BW);zlr=r(e6t,"LevitForImageClassificationWithTeacher"),e6t.forEach(t),Qlr=r(jS," (LeViT model)"),jS.forEach(t),Wlr=i(Te),AT=n(Te,"LI",{});var gNe=s(AT);P1e=n(gNe,"STRONG",{});var o6t=s(P1e);Hlr=r(o6t,"mobilevit"),o6t.forEach(t),Ulr=r(gNe," \u2014 "),IW=n(gNe,"A",{href:!0});var r6t=s(IW);Jlr=r(r6t,"MobileViTForImageClassification"),r6t.forEach(t),Ylr=r(gNe," (MobileViT model)"),gNe.forEach(t),Klr=i(Te),Ft=n(Te,"LI",{});var Pf=s(Ft);B1e=n(Pf,"STRONG",{});var t6t=s(B1e);Zlr=r(t6t,"perceiver"),t6t.forEach(t),eir=r(Pf," \u2014 "),NW=n(Pf,"A",{href:!0});var a6t=s(NW);oir=r(a6t,"PerceiverForImageClassificationLearned"),a6t.forEach(t),rir=r(Pf," or "),qW=n(Pf,"A",{href:!0});var n6t=s(qW);tir=r(n6t,"PerceiverForImageClassificationFourier"),n6t.forEach(t),air=r(Pf," or "),jW=n(Pf,"A",{href:!0});var s6t=s(jW);nir=r(s6t,"PerceiverForImageClassificationConvProcessing"),s6t.forEach(t),sir=r(Pf," (Perceiver model)"),Pf.forEach(t),lir=i(Te),LT=n(Te,"LI",{});var hNe=s(LT);I1e=n(hNe,"STRONG",{});var l6t=s(I1e);iir=r(l6t,"poolformer"),l6t.forEach(t),dir=r(hNe," \u2014 "),DW=n(hNe,"A",{href:!0});var i6t=s(DW);cir=r(i6t,"PoolFormerForImageClassification"),i6t.forEach(t),fir=r(hNe," (PoolFormer model)"),hNe.forEach(t),mir=i(Te),yT=n(Te,"LI",{});var pNe=s(yT);N1e=n(pNe,"STRONG",{});var d6t=s(N1e);gir=r(d6t,"regnet"),d6t.forEach(t),hir=r(pNe," \u2014 "),GW=n(pNe,"A",{href:!0});var c6t=s(GW);pir=r(c6t,"RegNetForImageClassification"),c6t.forEach(t),_ir=r(pNe," (RegNet model)"),pNe.forEach(t),uir=i(Te),xT=n(Te,"LI",{});var _Ne=s(xT);q1e=n(_Ne,"STRONG",{});var f6t=s(q1e);bir=r(f6t,"resnet"),f6t.forEach(t),vir=r(_Ne," \u2014 "),OW=n(_Ne,"A",{href:!0});var m6t=s(OW);Fir=r(m6t,"ResNetForImageClassification"),m6t.forEach(t),Tir=r(_Ne," (ResNet model)"),_Ne.forEach(t),Mir=i(Te),$T=n(Te,"LI",{});var uNe=s($T);j1e=n(uNe,"STRONG",{});var g6t=s(j1e);Eir=r(g6t,"segformer"),g6t.forEach(t),Cir=r(uNe," \u2014 "),VW=n(uNe,"A",{href:!0});var h6t=s(VW);wir=r(h6t,"SegformerForImageClassification"),h6t.forEach(t),Air=r(uNe," (SegFormer model)"),uNe.forEach(t),Lir=i(Te),kT=n(Te,"LI",{});var bNe=s(kT);D1e=n(bNe,"STRONG",{});var p6t=s(D1e);yir=r(p6t,"swin"),p6t.forEach(t),xir=r(bNe," \u2014 "),XW=n(bNe,"A",{href:!0});var _6t=s(XW);$ir=r(_6t,"SwinForImageClassification"),_6t.forEach(t),kir=r(bNe," (Swin Transformer model)"),bNe.forEach(t),Sir=i(Te),ST=n(Te,"LI",{});var vNe=s(ST);G1e=n(vNe,"STRONG",{});var u6t=s(G1e);Rir=r(u6t,"van"),u6t.forEach(t),Pir=r(vNe," \u2014 "),zW=n(vNe,"A",{href:!0});var b6t=s(zW);Bir=r(b6t,"VanForImageClassification"),b6t.forEach(t),Iir=r(vNe," (VAN model)"),vNe.forEach(t),Nir=i(Te),RT=n(Te,"LI",{});var FNe=s(RT);O1e=n(FNe,"STRONG",{});var v6t=s(O1e);qir=r(v6t,"vit"),v6t.forEach(t),jir=r(FNe," \u2014 "),QW=n(FNe,"A",{href:!0});var F6t=s(QW);Dir=r(F6t,"ViTForImageClassification"),F6t.forEach(t),Gir=r(FNe," (ViT model)"),FNe.forEach(t),Te.forEach(t),Oir=i(va),PT=n(va,"P",{});var TNe=s(PT);Vir=r(TNe,"The model is set in evaluation mode by default using "),V1e=n(TNe,"CODE",{});var T6t=s(V1e);Xir=r(T6t,"model.eval()"),T6t.forEach(t),zir=r(TNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X1e=n(TNe,"CODE",{});var M6t=s(X1e);Qir=r(M6t,"model.train()"),M6t.forEach(t),TNe.forEach(t),Wir=i(va),T(BT.$$.fragment,va),va.forEach(t),hl.forEach(t),nze=i(f),Cd=n(f,"H2",{class:!0});var fWe=s(Cd);IT=n(fWe,"A",{id:!0,class:!0,href:!0});var E6t=s(IT);z1e=n(E6t,"SPAN",{});var C6t=s(z1e);T(Oy.$$.fragment,C6t),C6t.forEach(t),E6t.forEach(t),Hir=i(fWe),Q1e=n(fWe,"SPAN",{});var w6t=s(Q1e);Uir=r(w6t,"AutoModelForVision2Seq"),w6t.forEach(t),fWe.forEach(t),sze=i(f),Xo=n(f,"DIV",{class:!0});var pl=s(Xo);T(Vy.$$.fragment,pl),Jir=i(pl),wd=n(pl,"P",{});var _te=s(wd);Yir=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WW=n(_te,"A",{href:!0});var A6t=s(WW);Kir=r(A6t,"from_pretrained()"),A6t.forEach(t),Zir=r(_te," class method or the "),HW=n(_te,"A",{href:!0});var L6t=s(HW);edr=r(L6t,"from_config()"),L6t.forEach(t),odr=r(_te,` class
method.`),_te.forEach(t),rdr=i(pl),Xy=n(pl,"P",{});var mWe=s(Xy);tdr=r(mWe,"This class cannot be instantiated directly using "),W1e=n(mWe,"CODE",{});var y6t=s(W1e);adr=r(y6t,"__init__()"),y6t.forEach(t),ndr=r(mWe," (throws an error)."),mWe.forEach(t),sdr=i(pl),Tt=n(pl,"DIV",{class:!0});var q6=s(Tt);T(zy.$$.fragment,q6),ldr=i(q6),H1e=n(q6,"P",{});var x6t=s(H1e);idr=r(x6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),x6t.forEach(t),ddr=i(q6),Ad=n(q6,"P",{});var ute=s(Ad);cdr=r(ute,`Note:
Loading a model from its configuration file does `),U1e=n(ute,"STRONG",{});var $6t=s(U1e);fdr=r($6t,"not"),$6t.forEach(t),mdr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(ute,"A",{href:!0});var k6t=s(UW);gdr=r(k6t,"from_pretrained()"),k6t.forEach(t),hdr=r(ute," to load the model weights."),ute.forEach(t),pdr=i(q6),T(NT.$$.fragment,q6),q6.forEach(t),_dr=i(pl),co=n(pl,"DIV",{class:!0});var Fa=s(co);T(Qy.$$.fragment,Fa),udr=i(Fa),J1e=n(Fa,"P",{});var S6t=s(J1e);bdr=r(S6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),S6t.forEach(t),vdr=i(Fa),Ha=n(Fa,"P",{});var j6=s(Ha);Fdr=r(j6,"The model class to instantiate is selected based on the "),Y1e=n(j6,"CODE",{});var R6t=s(Y1e);Tdr=r(R6t,"model_type"),R6t.forEach(t),Mdr=r(j6,` property of the config object (either
passed as an argument or loaded from `),K1e=n(j6,"CODE",{});var P6t=s(K1e);Edr=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),Cdr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=n(j6,"CODE",{});var B6t=s(Z1e);wdr=r(B6t,"pretrained_model_name_or_path"),B6t.forEach(t),Adr=r(j6,":"),j6.forEach(t),Ldr=i(Fa),ebe=n(Fa,"UL",{});var I6t=s(ebe);qT=n(I6t,"LI",{});var MNe=s(qT);obe=n(MNe,"STRONG",{});var N6t=s(obe);ydr=r(N6t,"vision-encoder-decoder"),N6t.forEach(t),xdr=r(MNe," \u2014 "),JW=n(MNe,"A",{href:!0});var q6t=s(JW);$dr=r(q6t,"VisionEncoderDecoderModel"),q6t.forEach(t),kdr=r(MNe," (Vision Encoder decoder model)"),MNe.forEach(t),I6t.forEach(t),Sdr=i(Fa),jT=n(Fa,"P",{});var ENe=s(jT);Rdr=r(ENe,"The model is set in evaluation mode by default using "),rbe=n(ENe,"CODE",{});var j6t=s(rbe);Pdr=r(j6t,"model.eval()"),j6t.forEach(t),Bdr=r(ENe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=n(ENe,"CODE",{});var D6t=s(tbe);Idr=r(D6t,"model.train()"),D6t.forEach(t),ENe.forEach(t),Ndr=i(Fa),T(DT.$$.fragment,Fa),Fa.forEach(t),pl.forEach(t),lze=i(f),Ld=n(f,"H2",{class:!0});var gWe=s(Ld);GT=n(gWe,"A",{id:!0,class:!0,href:!0});var G6t=s(GT);abe=n(G6t,"SPAN",{});var O6t=s(abe);T(Wy.$$.fragment,O6t),O6t.forEach(t),G6t.forEach(t),qdr=i(gWe),nbe=n(gWe,"SPAN",{});var V6t=s(nbe);jdr=r(V6t,"AutoModelForVisualQuestionAnswering"),V6t.forEach(t),gWe.forEach(t),ize=i(f),zo=n(f,"DIV",{class:!0});var _l=s(zo);T(Hy.$$.fragment,_l),Ddr=i(_l),yd=n(_l,"P",{});var bte=s(yd);Gdr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),YW=n(bte,"A",{href:!0});var X6t=s(YW);Odr=r(X6t,"from_pretrained()"),X6t.forEach(t),Vdr=r(bte," class method or the "),KW=n(bte,"A",{href:!0});var z6t=s(KW);Xdr=r(z6t,"from_config()"),z6t.forEach(t),zdr=r(bte,` class
method.`),bte.forEach(t),Qdr=i(_l),Uy=n(_l,"P",{});var hWe=s(Uy);Wdr=r(hWe,"This class cannot be instantiated directly using "),sbe=n(hWe,"CODE",{});var Q6t=s(sbe);Hdr=r(Q6t,"__init__()"),Q6t.forEach(t),Udr=r(hWe," (throws an error)."),hWe.forEach(t),Jdr=i(_l),Mt=n(_l,"DIV",{class:!0});var D6=s(Mt);T(Jy.$$.fragment,D6),Ydr=i(D6),lbe=n(D6,"P",{});var W6t=s(lbe);Kdr=r(W6t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),W6t.forEach(t),Zdr=i(D6),xd=n(D6,"P",{});var vte=s(xd);ecr=r(vte,`Note:
Loading a model from its configuration file does `),ibe=n(vte,"STRONG",{});var H6t=s(ibe);ocr=r(H6t,"not"),H6t.forEach(t),rcr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(vte,"A",{href:!0});var U6t=s(ZW);tcr=r(U6t,"from_pretrained()"),U6t.forEach(t),acr=r(vte," to load the model weights."),vte.forEach(t),ncr=i(D6),T(OT.$$.fragment,D6),D6.forEach(t),scr=i(_l),fo=n(_l,"DIV",{class:!0});var Ta=s(fo);T(Yy.$$.fragment,Ta),lcr=i(Ta),dbe=n(Ta,"P",{});var J6t=s(dbe);icr=r(J6t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),J6t.forEach(t),dcr=i(Ta),Ua=n(Ta,"P",{});var G6=s(Ua);ccr=r(G6,"The model class to instantiate is selected based on the "),cbe=n(G6,"CODE",{});var Y6t=s(cbe);fcr=r(Y6t,"model_type"),Y6t.forEach(t),mcr=r(G6,` property of the config object (either
passed as an argument or loaded from `),fbe=n(G6,"CODE",{});var K6t=s(fbe);gcr=r(K6t,"pretrained_model_name_or_path"),K6t.forEach(t),hcr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=n(G6,"CODE",{});var Z6t=s(mbe);pcr=r(Z6t,"pretrained_model_name_or_path"),Z6t.forEach(t),_cr=r(G6,":"),G6.forEach(t),ucr=i(Ta),gbe=n(Ta,"UL",{});var e7t=s(gbe);VT=n(e7t,"LI",{});var CNe=s(VT);hbe=n(CNe,"STRONG",{});var o7t=s(hbe);bcr=r(o7t,"vilt"),o7t.forEach(t),vcr=r(CNe," \u2014 "),eH=n(CNe,"A",{href:!0});var r7t=s(eH);Fcr=r(r7t,"ViltForQuestionAnswering"),r7t.forEach(t),Tcr=r(CNe," (ViLT model)"),CNe.forEach(t),e7t.forEach(t),Mcr=i(Ta),XT=n(Ta,"P",{});var wNe=s(XT);Ecr=r(wNe,"The model is set in evaluation mode by default using "),pbe=n(wNe,"CODE",{});var t7t=s(pbe);Ccr=r(t7t,"model.eval()"),t7t.forEach(t),wcr=r(wNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=n(wNe,"CODE",{});var a7t=s(_be);Acr=r(a7t,"model.train()"),a7t.forEach(t),wNe.forEach(t),Lcr=i(Ta),T(zT.$$.fragment,Ta),Ta.forEach(t),_l.forEach(t),dze=i(f),$d=n(f,"H2",{class:!0});var pWe=s($d);QT=n(pWe,"A",{id:!0,class:!0,href:!0});var n7t=s(QT);ube=n(n7t,"SPAN",{});var s7t=s(ube);T(Ky.$$.fragment,s7t),s7t.forEach(t),n7t.forEach(t),ycr=i(pWe),bbe=n(pWe,"SPAN",{});var l7t=s(bbe);xcr=r(l7t,"AutoModelForAudioClassification"),l7t.forEach(t),pWe.forEach(t),cze=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T(Zy.$$.fragment,ul),$cr=i(ul),kd=n(ul,"P",{});var Fte=s(kd);kcr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oH=n(Fte,"A",{href:!0});var i7t=s(oH);Scr=r(i7t,"from_pretrained()"),i7t.forEach(t),Rcr=r(Fte," class method or the "),rH=n(Fte,"A",{href:!0});var d7t=s(rH);Pcr=r(d7t,"from_config()"),d7t.forEach(t),Bcr=r(Fte,` class
method.`),Fte.forEach(t),Icr=i(ul),e9=n(ul,"P",{});var _We=s(e9);Ncr=r(_We,"This class cannot be instantiated directly using "),vbe=n(_We,"CODE",{});var c7t=s(vbe);qcr=r(c7t,"__init__()"),c7t.forEach(t),jcr=r(_We," (throws an error)."),_We.forEach(t),Dcr=i(ul),Et=n(ul,"DIV",{class:!0});var O6=s(Et);T(o9.$$.fragment,O6),Gcr=i(O6),Fbe=n(O6,"P",{});var f7t=s(Fbe);Ocr=r(f7t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),f7t.forEach(t),Vcr=i(O6),Sd=n(O6,"P",{});var Tte=s(Sd);Xcr=r(Tte,`Note:
Loading a model from its configuration file does `),Tbe=n(Tte,"STRONG",{});var m7t=s(Tbe);zcr=r(m7t,"not"),m7t.forEach(t),Qcr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(Tte,"A",{href:!0});var g7t=s(tH);Wcr=r(g7t,"from_pretrained()"),g7t.forEach(t),Hcr=r(Tte," to load the model weights."),Tte.forEach(t),Ucr=i(O6),T(WT.$$.fragment,O6),O6.forEach(t),Jcr=i(ul),mo=n(ul,"DIV",{class:!0});var Ma=s(mo);T(r9.$$.fragment,Ma),Ycr=i(Ma),Mbe=n(Ma,"P",{});var h7t=s(Mbe);Kcr=r(h7t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),h7t.forEach(t),Zcr=i(Ma),Ja=n(Ma,"P",{});var V6=s(Ja);efr=r(V6,"The model class to instantiate is selected based on the "),Ebe=n(V6,"CODE",{});var p7t=s(Ebe);ofr=r(p7t,"model_type"),p7t.forEach(t),rfr=r(V6,` property of the config object (either
passed as an argument or loaded from `),Cbe=n(V6,"CODE",{});var _7t=s(Cbe);tfr=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),afr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=n(V6,"CODE",{});var u7t=s(wbe);nfr=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),sfr=r(V6,":"),V6.forEach(t),lfr=i(Ma),Pe=n(Ma,"UL",{});var Qe=s(Pe);HT=n(Qe,"LI",{});var ANe=s(HT);Abe=n(ANe,"STRONG",{});var b7t=s(Abe);ifr=r(b7t,"data2vec-audio"),b7t.forEach(t),dfr=r(ANe," \u2014 "),aH=n(ANe,"A",{href:!0});var v7t=s(aH);cfr=r(v7t,"Data2VecAudioForSequenceClassification"),v7t.forEach(t),ffr=r(ANe," (Data2VecAudio model)"),ANe.forEach(t),mfr=i(Qe),UT=n(Qe,"LI",{});var LNe=s(UT);Lbe=n(LNe,"STRONG",{});var F7t=s(Lbe);gfr=r(F7t,"hubert"),F7t.forEach(t),hfr=r(LNe," \u2014 "),nH=n(LNe,"A",{href:!0});var T7t=s(nH);pfr=r(T7t,"HubertForSequenceClassification"),T7t.forEach(t),_fr=r(LNe," (Hubert model)"),LNe.forEach(t),ufr=i(Qe),JT=n(Qe,"LI",{});var yNe=s(JT);ybe=n(yNe,"STRONG",{});var M7t=s(ybe);bfr=r(M7t,"sew"),M7t.forEach(t),vfr=r(yNe," \u2014 "),sH=n(yNe,"A",{href:!0});var E7t=s(sH);Ffr=r(E7t,"SEWForSequenceClassification"),E7t.forEach(t),Tfr=r(yNe," (SEW model)"),yNe.forEach(t),Mfr=i(Qe),YT=n(Qe,"LI",{});var xNe=s(YT);xbe=n(xNe,"STRONG",{});var C7t=s(xbe);Efr=r(C7t,"sew-d"),C7t.forEach(t),Cfr=r(xNe," \u2014 "),lH=n(xNe,"A",{href:!0});var w7t=s(lH);wfr=r(w7t,"SEWDForSequenceClassification"),w7t.forEach(t),Afr=r(xNe," (SEW-D model)"),xNe.forEach(t),Lfr=i(Qe),KT=n(Qe,"LI",{});var $Ne=s(KT);$be=n($Ne,"STRONG",{});var A7t=s($be);yfr=r(A7t,"unispeech"),A7t.forEach(t),xfr=r($Ne," \u2014 "),iH=n($Ne,"A",{href:!0});var L7t=s(iH);$fr=r(L7t,"UniSpeechForSequenceClassification"),L7t.forEach(t),kfr=r($Ne," (UniSpeech model)"),$Ne.forEach(t),Sfr=i(Qe),ZT=n(Qe,"LI",{});var kNe=s(ZT);kbe=n(kNe,"STRONG",{});var y7t=s(kbe);Rfr=r(y7t,"unispeech-sat"),y7t.forEach(t),Pfr=r(kNe," \u2014 "),dH=n(kNe,"A",{href:!0});var x7t=s(dH);Bfr=r(x7t,"UniSpeechSatForSequenceClassification"),x7t.forEach(t),Ifr=r(kNe," (UniSpeechSat model)"),kNe.forEach(t),Nfr=i(Qe),e8=n(Qe,"LI",{});var SNe=s(e8);Sbe=n(SNe,"STRONG",{});var $7t=s(Sbe);qfr=r($7t,"wav2vec2"),$7t.forEach(t),jfr=r(SNe," \u2014 "),cH=n(SNe,"A",{href:!0});var k7t=s(cH);Dfr=r(k7t,"Wav2Vec2ForSequenceClassification"),k7t.forEach(t),Gfr=r(SNe," (Wav2Vec2 model)"),SNe.forEach(t),Ofr=i(Qe),o8=n(Qe,"LI",{});var RNe=s(o8);Rbe=n(RNe,"STRONG",{});var S7t=s(Rbe);Vfr=r(S7t,"wav2vec2-conformer"),S7t.forEach(t),Xfr=r(RNe," \u2014 "),fH=n(RNe,"A",{href:!0});var R7t=s(fH);zfr=r(R7t,"Wav2Vec2ConformerForSequenceClassification"),R7t.forEach(t),Qfr=r(RNe," (Wav2Vec2-Conformer model)"),RNe.forEach(t),Wfr=i(Qe),r8=n(Qe,"LI",{});var PNe=s(r8);Pbe=n(PNe,"STRONG",{});var P7t=s(Pbe);Hfr=r(P7t,"wavlm"),P7t.forEach(t),Ufr=r(PNe," \u2014 "),mH=n(PNe,"A",{href:!0});var B7t=s(mH);Jfr=r(B7t,"WavLMForSequenceClassification"),B7t.forEach(t),Yfr=r(PNe," (WavLM model)"),PNe.forEach(t),Qe.forEach(t),Kfr=i(Ma),t8=n(Ma,"P",{});var BNe=s(t8);Zfr=r(BNe,"The model is set in evaluation mode by default using "),Bbe=n(BNe,"CODE",{});var I7t=s(Bbe);emr=r(I7t,"model.eval()"),I7t.forEach(t),omr=r(BNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=n(BNe,"CODE",{});var N7t=s(Ibe);rmr=r(N7t,"model.train()"),N7t.forEach(t),BNe.forEach(t),tmr=i(Ma),T(a8.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),fze=i(f),Rd=n(f,"H2",{class:!0});var uWe=s(Rd);n8=n(uWe,"A",{id:!0,class:!0,href:!0});var q7t=s(n8);Nbe=n(q7t,"SPAN",{});var j7t=s(Nbe);T(t9.$$.fragment,j7t),j7t.forEach(t),q7t.forEach(t),amr=i(uWe),qbe=n(uWe,"SPAN",{});var D7t=s(qbe);nmr=r(D7t,"AutoModelForAudioFrameClassification"),D7t.forEach(t),uWe.forEach(t),mze=i(f),Wo=n(f,"DIV",{class:!0});var bl=s(Wo);T(a9.$$.fragment,bl),smr=i(bl),Pd=n(bl,"P",{});var Mte=s(Pd);lmr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),gH=n(Mte,"A",{href:!0});var G7t=s(gH);imr=r(G7t,"from_pretrained()"),G7t.forEach(t),dmr=r(Mte," class method or the "),hH=n(Mte,"A",{href:!0});var O7t=s(hH);cmr=r(O7t,"from_config()"),O7t.forEach(t),fmr=r(Mte,` class
method.`),Mte.forEach(t),mmr=i(bl),n9=n(bl,"P",{});var bWe=s(n9);gmr=r(bWe,"This class cannot be instantiated directly using "),jbe=n(bWe,"CODE",{});var V7t=s(jbe);hmr=r(V7t,"__init__()"),V7t.forEach(t),pmr=r(bWe," (throws an error)."),bWe.forEach(t),_mr=i(bl),Ct=n(bl,"DIV",{class:!0});var X6=s(Ct);T(s9.$$.fragment,X6),umr=i(X6),Dbe=n(X6,"P",{});var X7t=s(Dbe);bmr=r(X7t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),X7t.forEach(t),vmr=i(X6),Bd=n(X6,"P",{});var Ete=s(Bd);Fmr=r(Ete,`Note:
Loading a model from its configuration file does `),Gbe=n(Ete,"STRONG",{});var z7t=s(Gbe);Tmr=r(z7t,"not"),z7t.forEach(t),Mmr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(Ete,"A",{href:!0});var Q7t=s(pH);Emr=r(Q7t,"from_pretrained()"),Q7t.forEach(t),Cmr=r(Ete," to load the model weights."),Ete.forEach(t),wmr=i(X6),T(s8.$$.fragment,X6),X6.forEach(t),Amr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(l9.$$.fragment,Ea),Lmr=i(Ea),Obe=n(Ea,"P",{});var W7t=s(Obe);ymr=r(W7t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),W7t.forEach(t),xmr=i(Ea),Ya=n(Ea,"P",{});var z6=s(Ya);$mr=r(z6,"The model class to instantiate is selected based on the "),Vbe=n(z6,"CODE",{});var H7t=s(Vbe);kmr=r(H7t,"model_type"),H7t.forEach(t),Smr=r(z6,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(z6,"CODE",{});var U7t=s(Xbe);Rmr=r(U7t,"pretrained_model_name_or_path"),U7t.forEach(t),Pmr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(z6,"CODE",{});var J7t=s(zbe);Bmr=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),Imr=r(z6,":"),z6.forEach(t),Nmr=i(Ea),rt=n(Ea,"UL",{});var vl=s(rt);l8=n(vl,"LI",{});var INe=s(l8);Qbe=n(INe,"STRONG",{});var Y7t=s(Qbe);qmr=r(Y7t,"data2vec-audio"),Y7t.forEach(t),jmr=r(INe," \u2014 "),_H=n(INe,"A",{href:!0});var K7t=s(_H);Dmr=r(K7t,"Data2VecAudioForAudioFrameClassification"),K7t.forEach(t),Gmr=r(INe," (Data2VecAudio model)"),INe.forEach(t),Omr=i(vl),i8=n(vl,"LI",{});var NNe=s(i8);Wbe=n(NNe,"STRONG",{});var Z7t=s(Wbe);Vmr=r(Z7t,"unispeech-sat"),Z7t.forEach(t),Xmr=r(NNe," \u2014 "),uH=n(NNe,"A",{href:!0});var eLt=s(uH);zmr=r(eLt,"UniSpeechSatForAudioFrameClassification"),eLt.forEach(t),Qmr=r(NNe," (UniSpeechSat model)"),NNe.forEach(t),Wmr=i(vl),d8=n(vl,"LI",{});var qNe=s(d8);Hbe=n(qNe,"STRONG",{});var oLt=s(Hbe);Hmr=r(oLt,"wav2vec2"),oLt.forEach(t),Umr=r(qNe," \u2014 "),bH=n(qNe,"A",{href:!0});var rLt=s(bH);Jmr=r(rLt,"Wav2Vec2ForAudioFrameClassification"),rLt.forEach(t),Ymr=r(qNe," (Wav2Vec2 model)"),qNe.forEach(t),Kmr=i(vl),c8=n(vl,"LI",{});var jNe=s(c8);Ube=n(jNe,"STRONG",{});var tLt=s(Ube);Zmr=r(tLt,"wav2vec2-conformer"),tLt.forEach(t),egr=r(jNe," \u2014 "),vH=n(jNe,"A",{href:!0});var aLt=s(vH);ogr=r(aLt,"Wav2Vec2ConformerForAudioFrameClassification"),aLt.forEach(t),rgr=r(jNe," (Wav2Vec2-Conformer model)"),jNe.forEach(t),tgr=i(vl),f8=n(vl,"LI",{});var DNe=s(f8);Jbe=n(DNe,"STRONG",{});var nLt=s(Jbe);agr=r(nLt,"wavlm"),nLt.forEach(t),ngr=r(DNe," \u2014 "),FH=n(DNe,"A",{href:!0});var sLt=s(FH);sgr=r(sLt,"WavLMForAudioFrameClassification"),sLt.forEach(t),lgr=r(DNe," (WavLM model)"),DNe.forEach(t),vl.forEach(t),igr=i(Ea),m8=n(Ea,"P",{});var GNe=s(m8);dgr=r(GNe,"The model is set in evaluation mode by default using "),Ybe=n(GNe,"CODE",{});var lLt=s(Ybe);cgr=r(lLt,"model.eval()"),lLt.forEach(t),fgr=r(GNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kbe=n(GNe,"CODE",{});var iLt=s(Kbe);mgr=r(iLt,"model.train()"),iLt.forEach(t),GNe.forEach(t),ggr=i(Ea),T(g8.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),gze=i(f),Id=n(f,"H2",{class:!0});var vWe=s(Id);h8=n(vWe,"A",{id:!0,class:!0,href:!0});var dLt=s(h8);Zbe=n(dLt,"SPAN",{});var cLt=s(Zbe);T(i9.$$.fragment,cLt),cLt.forEach(t),dLt.forEach(t),hgr=i(vWe),eve=n(vWe,"SPAN",{});var fLt=s(eve);pgr=r(fLt,"AutoModelForCTC"),fLt.forEach(t),vWe.forEach(t),hze=i(f),Ho=n(f,"DIV",{class:!0});var Fl=s(Ho);T(d9.$$.fragment,Fl),_gr=i(Fl),Nd=n(Fl,"P",{});var Cte=s(Nd);ugr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),TH=n(Cte,"A",{href:!0});var mLt=s(TH);bgr=r(mLt,"from_pretrained()"),mLt.forEach(t),vgr=r(Cte," class method or the "),MH=n(Cte,"A",{href:!0});var gLt=s(MH);Fgr=r(gLt,"from_config()"),gLt.forEach(t),Tgr=r(Cte,` class
method.`),Cte.forEach(t),Mgr=i(Fl),c9=n(Fl,"P",{});var FWe=s(c9);Egr=r(FWe,"This class cannot be instantiated directly using "),ove=n(FWe,"CODE",{});var hLt=s(ove);Cgr=r(hLt,"__init__()"),hLt.forEach(t),wgr=r(FWe," (throws an error)."),FWe.forEach(t),Agr=i(Fl),wt=n(Fl,"DIV",{class:!0});var Q6=s(wt);T(f9.$$.fragment,Q6),Lgr=i(Q6),rve=n(Q6,"P",{});var pLt=s(rve);ygr=r(pLt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),pLt.forEach(t),xgr=i(Q6),qd=n(Q6,"P",{});var wte=s(qd);$gr=r(wte,`Note:
Loading a model from its configuration file does `),tve=n(wte,"STRONG",{});var _Lt=s(tve);kgr=r(_Lt,"not"),_Lt.forEach(t),Sgr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(wte,"A",{href:!0});var uLt=s(EH);Rgr=r(uLt,"from_pretrained()"),uLt.forEach(t),Pgr=r(wte," to load the model weights."),wte.forEach(t),Bgr=i(Q6),T(p8.$$.fragment,Q6),Q6.forEach(t),Igr=i(Fl),ho=n(Fl,"DIV",{class:!0});var Ca=s(ho);T(m9.$$.fragment,Ca),Ngr=i(Ca),ave=n(Ca,"P",{});var bLt=s(ave);qgr=r(bLt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),bLt.forEach(t),jgr=i(Ca),Ka=n(Ca,"P",{});var W6=s(Ka);Dgr=r(W6,"The model class to instantiate is selected based on the "),nve=n(W6,"CODE",{});var vLt=s(nve);Ggr=r(vLt,"model_type"),vLt.forEach(t),Ogr=r(W6,` property of the config object (either
passed as an argument or loaded from `),sve=n(W6,"CODE",{});var FLt=s(sve);Vgr=r(FLt,"pretrained_model_name_or_path"),FLt.forEach(t),Xgr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(W6,"CODE",{});var TLt=s(lve);zgr=r(TLt,"pretrained_model_name_or_path"),TLt.forEach(t),Qgr=r(W6,":"),W6.forEach(t),Wgr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);_8=n(Be,"LI",{});var ONe=s(_8);ive=n(ONe,"STRONG",{});var MLt=s(ive);Hgr=r(MLt,"data2vec-audio"),MLt.forEach(t),Ugr=r(ONe," \u2014 "),CH=n(ONe,"A",{href:!0});var ELt=s(CH);Jgr=r(ELt,"Data2VecAudioForCTC"),ELt.forEach(t),Ygr=r(ONe," (Data2VecAudio model)"),ONe.forEach(t),Kgr=i(Be),u8=n(Be,"LI",{});var VNe=s(u8);dve=n(VNe,"STRONG",{});var CLt=s(dve);Zgr=r(CLt,"hubert"),CLt.forEach(t),ehr=r(VNe," \u2014 "),wH=n(VNe,"A",{href:!0});var wLt=s(wH);ohr=r(wLt,"HubertForCTC"),wLt.forEach(t),rhr=r(VNe," (Hubert model)"),VNe.forEach(t),thr=i(Be),b8=n(Be,"LI",{});var XNe=s(b8);cve=n(XNe,"STRONG",{});var ALt=s(cve);ahr=r(ALt,"mctct"),ALt.forEach(t),nhr=r(XNe," \u2014 "),AH=n(XNe,"A",{href:!0});var LLt=s(AH);shr=r(LLt,"MCTCTForCTC"),LLt.forEach(t),lhr=r(XNe," (M-CTC-T model)"),XNe.forEach(t),ihr=i(Be),v8=n(Be,"LI",{});var zNe=s(v8);fve=n(zNe,"STRONG",{});var yLt=s(fve);dhr=r(yLt,"sew"),yLt.forEach(t),chr=r(zNe," \u2014 "),LH=n(zNe,"A",{href:!0});var xLt=s(LH);fhr=r(xLt,"SEWForCTC"),xLt.forEach(t),mhr=r(zNe," (SEW model)"),zNe.forEach(t),ghr=i(Be),F8=n(Be,"LI",{});var QNe=s(F8);mve=n(QNe,"STRONG",{});var $Lt=s(mve);hhr=r($Lt,"sew-d"),$Lt.forEach(t),phr=r(QNe," \u2014 "),yH=n(QNe,"A",{href:!0});var kLt=s(yH);_hr=r(kLt,"SEWDForCTC"),kLt.forEach(t),uhr=r(QNe," (SEW-D model)"),QNe.forEach(t),bhr=i(Be),T8=n(Be,"LI",{});var WNe=s(T8);gve=n(WNe,"STRONG",{});var SLt=s(gve);vhr=r(SLt,"unispeech"),SLt.forEach(t),Fhr=r(WNe," \u2014 "),xH=n(WNe,"A",{href:!0});var RLt=s(xH);Thr=r(RLt,"UniSpeechForCTC"),RLt.forEach(t),Mhr=r(WNe," (UniSpeech model)"),WNe.forEach(t),Ehr=i(Be),M8=n(Be,"LI",{});var HNe=s(M8);hve=n(HNe,"STRONG",{});var PLt=s(hve);Chr=r(PLt,"unispeech-sat"),PLt.forEach(t),whr=r(HNe," \u2014 "),$H=n(HNe,"A",{href:!0});var BLt=s($H);Ahr=r(BLt,"UniSpeechSatForCTC"),BLt.forEach(t),Lhr=r(HNe," (UniSpeechSat model)"),HNe.forEach(t),yhr=i(Be),E8=n(Be,"LI",{});var UNe=s(E8);pve=n(UNe,"STRONG",{});var ILt=s(pve);xhr=r(ILt,"wav2vec2"),ILt.forEach(t),$hr=r(UNe," \u2014 "),kH=n(UNe,"A",{href:!0});var NLt=s(kH);khr=r(NLt,"Wav2Vec2ForCTC"),NLt.forEach(t),Shr=r(UNe," (Wav2Vec2 model)"),UNe.forEach(t),Rhr=i(Be),C8=n(Be,"LI",{});var JNe=s(C8);_ve=n(JNe,"STRONG",{});var qLt=s(_ve);Phr=r(qLt,"wav2vec2-conformer"),qLt.forEach(t),Bhr=r(JNe," \u2014 "),SH=n(JNe,"A",{href:!0});var jLt=s(SH);Ihr=r(jLt,"Wav2Vec2ConformerForCTC"),jLt.forEach(t),Nhr=r(JNe," (Wav2Vec2-Conformer model)"),JNe.forEach(t),qhr=i(Be),w8=n(Be,"LI",{});var YNe=s(w8);uve=n(YNe,"STRONG",{});var DLt=s(uve);jhr=r(DLt,"wavlm"),DLt.forEach(t),Dhr=r(YNe," \u2014 "),RH=n(YNe,"A",{href:!0});var GLt=s(RH);Ghr=r(GLt,"WavLMForCTC"),GLt.forEach(t),Ohr=r(YNe," (WavLM model)"),YNe.forEach(t),Be.forEach(t),Vhr=i(Ca),A8=n(Ca,"P",{});var KNe=s(A8);Xhr=r(KNe,"The model is set in evaluation mode by default using "),bve=n(KNe,"CODE",{});var OLt=s(bve);zhr=r(OLt,"model.eval()"),OLt.forEach(t),Qhr=r(KNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vve=n(KNe,"CODE",{});var VLt=s(vve);Whr=r(VLt,"model.train()"),VLt.forEach(t),KNe.forEach(t),Hhr=i(Ca),T(L8.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),pze=i(f),jd=n(f,"H2",{class:!0});var TWe=s(jd);y8=n(TWe,"A",{id:!0,class:!0,href:!0});var XLt=s(y8);Fve=n(XLt,"SPAN",{});var zLt=s(Fve);T(g9.$$.fragment,zLt),zLt.forEach(t),XLt.forEach(t),Uhr=i(TWe),Tve=n(TWe,"SPAN",{});var QLt=s(Tve);Jhr=r(QLt,"AutoModelForSpeechSeq2Seq"),QLt.forEach(t),TWe.forEach(t),_ze=i(f),Uo=n(f,"DIV",{class:!0});var Tl=s(Uo);T(h9.$$.fragment,Tl),Yhr=i(Tl),Dd=n(Tl,"P",{});var Ate=s(Dd);Khr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PH=n(Ate,"A",{href:!0});var WLt=s(PH);Zhr=r(WLt,"from_pretrained()"),WLt.forEach(t),epr=r(Ate," class method or the "),BH=n(Ate,"A",{href:!0});var HLt=s(BH);opr=r(HLt,"from_config()"),HLt.forEach(t),rpr=r(Ate,` class
method.`),Ate.forEach(t),tpr=i(Tl),p9=n(Tl,"P",{});var MWe=s(p9);apr=r(MWe,"This class cannot be instantiated directly using "),Mve=n(MWe,"CODE",{});var ULt=s(Mve);npr=r(ULt,"__init__()"),ULt.forEach(t),spr=r(MWe," (throws an error)."),MWe.forEach(t),lpr=i(Tl),At=n(Tl,"DIV",{class:!0});var H6=s(At);T(_9.$$.fragment,H6),ipr=i(H6),Eve=n(H6,"P",{});var JLt=s(Eve);dpr=r(JLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JLt.forEach(t),cpr=i(H6),Gd=n(H6,"P",{});var Lte=s(Gd);fpr=r(Lte,`Note:
Loading a model from its configuration file does `),Cve=n(Lte,"STRONG",{});var YLt=s(Cve);mpr=r(YLt,"not"),YLt.forEach(t),gpr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(Lte,"A",{href:!0});var KLt=s(IH);hpr=r(KLt,"from_pretrained()"),KLt.forEach(t),ppr=r(Lte," to load the model weights."),Lte.forEach(t),_pr=i(H6),T(x8.$$.fragment,H6),H6.forEach(t),upr=i(Tl),po=n(Tl,"DIV",{class:!0});var wa=s(po);T(u9.$$.fragment,wa),bpr=i(wa),wve=n(wa,"P",{});var ZLt=s(wve);vpr=r(ZLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ZLt.forEach(t),Fpr=i(wa),Za=n(wa,"P",{});var U6=s(Za);Tpr=r(U6,"The model class to instantiate is selected based on the "),Ave=n(U6,"CODE",{});var eyt=s(Ave);Mpr=r(eyt,"model_type"),eyt.forEach(t),Epr=r(U6,` property of the config object (either
passed as an argument or loaded from `),Lve=n(U6,"CODE",{});var oyt=s(Lve);Cpr=r(oyt,"pretrained_model_name_or_path"),oyt.forEach(t),wpr=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(U6,"CODE",{});var ryt=s(yve);Apr=r(ryt,"pretrained_model_name_or_path"),ryt.forEach(t),Lpr=r(U6,":"),U6.forEach(t),ypr=i(wa),b9=n(wa,"UL",{});var EWe=s(b9);$8=n(EWe,"LI",{});var ZNe=s($8);xve=n(ZNe,"STRONG",{});var tyt=s(xve);xpr=r(tyt,"speech-encoder-decoder"),tyt.forEach(t),$pr=r(ZNe," \u2014 "),NH=n(ZNe,"A",{href:!0});var ayt=s(NH);kpr=r(ayt,"SpeechEncoderDecoderModel"),ayt.forEach(t),Spr=r(ZNe," (Speech Encoder decoder model)"),ZNe.forEach(t),Rpr=i(EWe),k8=n(EWe,"LI",{});var eqe=s(k8);$ve=n(eqe,"STRONG",{});var nyt=s($ve);Ppr=r(nyt,"speech_to_text"),nyt.forEach(t),Bpr=r(eqe," \u2014 "),qH=n(eqe,"A",{href:!0});var syt=s(qH);Ipr=r(syt,"Speech2TextForConditionalGeneration"),syt.forEach(t),Npr=r(eqe," (Speech2Text model)"),eqe.forEach(t),EWe.forEach(t),qpr=i(wa),S8=n(wa,"P",{});var oqe=s(S8);jpr=r(oqe,"The model is set in evaluation mode by default using "),kve=n(oqe,"CODE",{});var lyt=s(kve);Dpr=r(lyt,"model.eval()"),lyt.forEach(t),Gpr=r(oqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sve=n(oqe,"CODE",{});var iyt=s(Sve);Opr=r(iyt,"model.train()"),iyt.forEach(t),oqe.forEach(t),Vpr=i(wa),T(R8.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),uze=i(f),Od=n(f,"H2",{class:!0});var CWe=s(Od);P8=n(CWe,"A",{id:!0,class:!0,href:!0});var dyt=s(P8);Rve=n(dyt,"SPAN",{});var cyt=s(Rve);T(v9.$$.fragment,cyt),cyt.forEach(t),dyt.forEach(t),Xpr=i(CWe),Pve=n(CWe,"SPAN",{});var fyt=s(Pve);zpr=r(fyt,"AutoModelForAudioXVector"),fyt.forEach(t),CWe.forEach(t),bze=i(f),Jo=n(f,"DIV",{class:!0});var Ml=s(Jo);T(F9.$$.fragment,Ml),Qpr=i(Ml),Vd=n(Ml,"P",{});var yte=s(Vd);Wpr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jH=n(yte,"A",{href:!0});var myt=s(jH);Hpr=r(myt,"from_pretrained()"),myt.forEach(t),Upr=r(yte," class method or the "),DH=n(yte,"A",{href:!0});var gyt=s(DH);Jpr=r(gyt,"from_config()"),gyt.forEach(t),Ypr=r(yte,` class
method.`),yte.forEach(t),Kpr=i(Ml),T9=n(Ml,"P",{});var wWe=s(T9);Zpr=r(wWe,"This class cannot be instantiated directly using "),Bve=n(wWe,"CODE",{});var hyt=s(Bve);e_r=r(hyt,"__init__()"),hyt.forEach(t),o_r=r(wWe," (throws an error)."),wWe.forEach(t),r_r=i(Ml),Lt=n(Ml,"DIV",{class:!0});var J6=s(Lt);T(M9.$$.fragment,J6),t_r=i(J6),Ive=n(J6,"P",{});var pyt=s(Ive);a_r=r(pyt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),pyt.forEach(t),n_r=i(J6),Xd=n(J6,"P",{});var xte=s(Xd);s_r=r(xte,`Note:
Loading a model from its configuration file does `),Nve=n(xte,"STRONG",{});var _yt=s(Nve);l_r=r(_yt,"not"),_yt.forEach(t),i_r=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(xte,"A",{href:!0});var uyt=s(GH);d_r=r(uyt,"from_pretrained()"),uyt.forEach(t),c_r=r(xte," to load the model weights."),xte.forEach(t),f_r=i(J6),T(B8.$$.fragment,J6),J6.forEach(t),m_r=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(E9.$$.fragment,Aa),g_r=i(Aa),qve=n(Aa,"P",{});var byt=s(qve);h_r=r(byt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),byt.forEach(t),p_r=i(Aa),en=n(Aa,"P",{});var Y6=s(en);__r=r(Y6,"The model class to instantiate is selected based on the "),jve=n(Y6,"CODE",{});var vyt=s(jve);u_r=r(vyt,"model_type"),vyt.forEach(t),b_r=r(Y6,` property of the config object (either
passed as an argument or loaded from `),Dve=n(Y6,"CODE",{});var Fyt=s(Dve);v_r=r(Fyt,"pretrained_model_name_or_path"),Fyt.forEach(t),F_r=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(Y6,"CODE",{});var Tyt=s(Gve);T_r=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),M_r=r(Y6,":"),Y6.forEach(t),E_r=i(Aa),tt=n(Aa,"UL",{});var El=s(tt);I8=n(El,"LI",{});var rqe=s(I8);Ove=n(rqe,"STRONG",{});var Myt=s(Ove);C_r=r(Myt,"data2vec-audio"),Myt.forEach(t),w_r=r(rqe," \u2014 "),OH=n(rqe,"A",{href:!0});var Eyt=s(OH);A_r=r(Eyt,"Data2VecAudioForXVector"),Eyt.forEach(t),L_r=r(rqe," (Data2VecAudio model)"),rqe.forEach(t),y_r=i(El),N8=n(El,"LI",{});var tqe=s(N8);Vve=n(tqe,"STRONG",{});var Cyt=s(Vve);x_r=r(Cyt,"unispeech-sat"),Cyt.forEach(t),$_r=r(tqe," \u2014 "),VH=n(tqe,"A",{href:!0});var wyt=s(VH);k_r=r(wyt,"UniSpeechSatForXVector"),wyt.forEach(t),S_r=r(tqe," (UniSpeechSat model)"),tqe.forEach(t),R_r=i(El),q8=n(El,"LI",{});var aqe=s(q8);Xve=n(aqe,"STRONG",{});var Ayt=s(Xve);P_r=r(Ayt,"wav2vec2"),Ayt.forEach(t),B_r=r(aqe," \u2014 "),XH=n(aqe,"A",{href:!0});var Lyt=s(XH);I_r=r(Lyt,"Wav2Vec2ForXVector"),Lyt.forEach(t),N_r=r(aqe," (Wav2Vec2 model)"),aqe.forEach(t),q_r=i(El),j8=n(El,"LI",{});var nqe=s(j8);zve=n(nqe,"STRONG",{});var yyt=s(zve);j_r=r(yyt,"wav2vec2-conformer"),yyt.forEach(t),D_r=r(nqe," \u2014 "),zH=n(nqe,"A",{href:!0});var xyt=s(zH);G_r=r(xyt,"Wav2Vec2ConformerForXVector"),xyt.forEach(t),O_r=r(nqe," (Wav2Vec2-Conformer model)"),nqe.forEach(t),V_r=i(El),D8=n(El,"LI",{});var sqe=s(D8);Qve=n(sqe,"STRONG",{});var $yt=s(Qve);X_r=r($yt,"wavlm"),$yt.forEach(t),z_r=r(sqe," \u2014 "),QH=n(sqe,"A",{href:!0});var kyt=s(QH);Q_r=r(kyt,"WavLMForXVector"),kyt.forEach(t),W_r=r(sqe," (WavLM model)"),sqe.forEach(t),El.forEach(t),H_r=i(Aa),G8=n(Aa,"P",{});var lqe=s(G8);U_r=r(lqe,"The model is set in evaluation mode by default using "),Wve=n(lqe,"CODE",{});var Syt=s(Wve);J_r=r(Syt,"model.eval()"),Syt.forEach(t),Y_r=r(lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hve=n(lqe,"CODE",{});var Ryt=s(Hve);K_r=r(Ryt,"model.train()"),Ryt.forEach(t),lqe.forEach(t),Z_r=i(Aa),T(O8.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),vze=i(f),zd=n(f,"H2",{class:!0});var AWe=s(zd);V8=n(AWe,"A",{id:!0,class:!0,href:!0});var Pyt=s(V8);Uve=n(Pyt,"SPAN",{});var Byt=s(Uve);T(C9.$$.fragment,Byt),Byt.forEach(t),Pyt.forEach(t),eur=i(AWe),Jve=n(AWe,"SPAN",{});var Iyt=s(Jve);our=r(Iyt,"AutoModelForMaskedImageModeling"),Iyt.forEach(t),AWe.forEach(t),Fze=i(f),Yo=n(f,"DIV",{class:!0});var Cl=s(Yo);T(w9.$$.fragment,Cl),rur=i(Cl),Qd=n(Cl,"P",{});var $te=s(Qd);tur=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),WH=n($te,"A",{href:!0});var Nyt=s(WH);aur=r(Nyt,"from_pretrained()"),Nyt.forEach(t),nur=r($te," class method or the "),HH=n($te,"A",{href:!0});var qyt=s(HH);sur=r(qyt,"from_config()"),qyt.forEach(t),lur=r($te,` class
method.`),$te.forEach(t),iur=i(Cl),A9=n(Cl,"P",{});var LWe=s(A9);dur=r(LWe,"This class cannot be instantiated directly using "),Yve=n(LWe,"CODE",{});var jyt=s(Yve);cur=r(jyt,"__init__()"),jyt.forEach(t),fur=r(LWe," (throws an error)."),LWe.forEach(t),mur=i(Cl),yt=n(Cl,"DIV",{class:!0});var K6=s(yt);T(L9.$$.fragment,K6),gur=i(K6),Kve=n(K6,"P",{});var Dyt=s(Kve);hur=r(Dyt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Dyt.forEach(t),pur=i(K6),Wd=n(K6,"P",{});var kte=s(Wd);_ur=r(kte,`Note:
Loading a model from its configuration file does `),Zve=n(kte,"STRONG",{});var Gyt=s(Zve);uur=r(Gyt,"not"),Gyt.forEach(t),bur=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(kte,"A",{href:!0});var Oyt=s(UH);vur=r(Oyt,"from_pretrained()"),Oyt.forEach(t),Fur=r(kte," to load the model weights."),kte.forEach(t),Tur=i(K6),T(X8.$$.fragment,K6),K6.forEach(t),Mur=i(Cl),uo=n(Cl,"DIV",{class:!0});var La=s(uo);T(y9.$$.fragment,La),Eur=i(La),eFe=n(La,"P",{});var Vyt=s(eFe);Cur=r(Vyt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Vyt.forEach(t),wur=i(La),on=n(La,"P",{});var Z6=s(on);Aur=r(Z6,"The model class to instantiate is selected based on the "),oFe=n(Z6,"CODE",{});var Xyt=s(oFe);Lur=r(Xyt,"model_type"),Xyt.forEach(t),yur=r(Z6,` property of the config object (either
passed as an argument or loaded from `),rFe=n(Z6,"CODE",{});var zyt=s(rFe);xur=r(zyt,"pretrained_model_name_or_path"),zyt.forEach(t),$ur=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=n(Z6,"CODE",{});var Qyt=s(tFe);kur=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),Sur=r(Z6,":"),Z6.forEach(t),Rur=i(La),Hd=n(La,"UL",{});var Ste=s(Hd);z8=n(Ste,"LI",{});var iqe=s(z8);aFe=n(iqe,"STRONG",{});var Wyt=s(aFe);Pur=r(Wyt,"deit"),Wyt.forEach(t),Bur=r(iqe," \u2014 "),JH=n(iqe,"A",{href:!0});var Hyt=s(JH);Iur=r(Hyt,"DeiTForMaskedImageModeling"),Hyt.forEach(t),Nur=r(iqe," (DeiT model)"),iqe.forEach(t),qur=i(Ste),Q8=n(Ste,"LI",{});var dqe=s(Q8);nFe=n(dqe,"STRONG",{});var Uyt=s(nFe);jur=r(Uyt,"swin"),Uyt.forEach(t),Dur=r(dqe," \u2014 "),YH=n(dqe,"A",{href:!0});var Jyt=s(YH);Gur=r(Jyt,"SwinForMaskedImageModeling"),Jyt.forEach(t),Our=r(dqe," (Swin Transformer model)"),dqe.forEach(t),Vur=i(Ste),W8=n(Ste,"LI",{});var cqe=s(W8);sFe=n(cqe,"STRONG",{});var Yyt=s(sFe);Xur=r(Yyt,"vit"),Yyt.forEach(t),zur=r(cqe," \u2014 "),KH=n(cqe,"A",{href:!0});var Kyt=s(KH);Qur=r(Kyt,"ViTForMaskedImageModeling"),Kyt.forEach(t),Wur=r(cqe," (ViT model)"),cqe.forEach(t),Ste.forEach(t),Hur=i(La),H8=n(La,"P",{});var fqe=s(H8);Uur=r(fqe,"The model is set in evaluation mode by default using "),lFe=n(fqe,"CODE",{});var Zyt=s(lFe);Jur=r(Zyt,"model.eval()"),Zyt.forEach(t),Yur=r(fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iFe=n(fqe,"CODE",{});var e9t=s(iFe);Kur=r(e9t,"model.train()"),e9t.forEach(t),fqe.forEach(t),Zur=i(La),T(U8.$$.fragment,La),La.forEach(t),Cl.forEach(t),Tze=i(f),Ud=n(f,"H2",{class:!0});var yWe=s(Ud);J8=n(yWe,"A",{id:!0,class:!0,href:!0});var o9t=s(J8);dFe=n(o9t,"SPAN",{});var r9t=s(dFe);T(x9.$$.fragment,r9t),r9t.forEach(t),o9t.forEach(t),e4r=i(yWe),cFe=n(yWe,"SPAN",{});var t9t=s(cFe);o4r=r(t9t,"AutoModelForObjectDetection"),t9t.forEach(t),yWe.forEach(t),Mze=i(f),Ko=n(f,"DIV",{class:!0});var wl=s(Ko);T($9.$$.fragment,wl),r4r=i(wl),Jd=n(wl,"P",{});var Rte=s(Jd);t4r=r(Rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ZH=n(Rte,"A",{href:!0});var a9t=s(ZH);a4r=r(a9t,"from_pretrained()"),a9t.forEach(t),n4r=r(Rte," class method or the "),eU=n(Rte,"A",{href:!0});var n9t=s(eU);s4r=r(n9t,"from_config()"),n9t.forEach(t),l4r=r(Rte,` class
method.`),Rte.forEach(t),i4r=i(wl),k9=n(wl,"P",{});var xWe=s(k9);d4r=r(xWe,"This class cannot be instantiated directly using "),fFe=n(xWe,"CODE",{});var s9t=s(fFe);c4r=r(s9t,"__init__()"),s9t.forEach(t),f4r=r(xWe," (throws an error)."),xWe.forEach(t),m4r=i(wl),xt=n(wl,"DIV",{class:!0});var e7=s(xt);T(S9.$$.fragment,e7),g4r=i(e7),mFe=n(e7,"P",{});var l9t=s(mFe);h4r=r(l9t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),l9t.forEach(t),p4r=i(e7),Yd=n(e7,"P",{});var Pte=s(Yd);_4r=r(Pte,`Note:
Loading a model from its configuration file does `),gFe=n(Pte,"STRONG",{});var i9t=s(gFe);u4r=r(i9t,"not"),i9t.forEach(t),b4r=r(Pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(Pte,"A",{href:!0});var d9t=s(oU);v4r=r(d9t,"from_pretrained()"),d9t.forEach(t),F4r=r(Pte," to load the model weights."),Pte.forEach(t),T4r=i(e7),T(Y8.$$.fragment,e7),e7.forEach(t),M4r=i(wl),bo=n(wl,"DIV",{class:!0});var ya=s(bo);T(R9.$$.fragment,ya),E4r=i(ya),hFe=n(ya,"P",{});var c9t=s(hFe);C4r=r(c9t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),c9t.forEach(t),w4r=i(ya),rn=n(ya,"P",{});var o7=s(rn);A4r=r(o7,"The model class to instantiate is selected based on the "),pFe=n(o7,"CODE",{});var f9t=s(pFe);L4r=r(f9t,"model_type"),f9t.forEach(t),y4r=r(o7,` property of the config object (either
passed as an argument or loaded from `),_Fe=n(o7,"CODE",{});var m9t=s(_Fe);x4r=r(m9t,"pretrained_model_name_or_path"),m9t.forEach(t),$4r=r(o7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=n(o7,"CODE",{});var g9t=s(uFe);k4r=r(g9t,"pretrained_model_name_or_path"),g9t.forEach(t),S4r=r(o7,":"),o7.forEach(t),R4r=i(ya),P9=n(ya,"UL",{});var $We=s(P9);K8=n($We,"LI",{});var mqe=s(K8);bFe=n(mqe,"STRONG",{});var h9t=s(bFe);P4r=r(h9t,"detr"),h9t.forEach(t),B4r=r(mqe," \u2014 "),rU=n(mqe,"A",{href:!0});var p9t=s(rU);I4r=r(p9t,"DetrForObjectDetection"),p9t.forEach(t),N4r=r(mqe," (DETR model)"),mqe.forEach(t),q4r=i($We),Z8=n($We,"LI",{});var gqe=s(Z8);vFe=n(gqe,"STRONG",{});var _9t=s(vFe);j4r=r(_9t,"yolos"),_9t.forEach(t),D4r=r(gqe," \u2014 "),tU=n(gqe,"A",{href:!0});var u9t=s(tU);G4r=r(u9t,"YolosForObjectDetection"),u9t.forEach(t),O4r=r(gqe," (YOLOS model)"),gqe.forEach(t),$We.forEach(t),V4r=i(ya),eM=n(ya,"P",{});var hqe=s(eM);X4r=r(hqe,"The model is set in evaluation mode by default using "),FFe=n(hqe,"CODE",{});var b9t=s(FFe);z4r=r(b9t,"model.eval()"),b9t.forEach(t),Q4r=r(hqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TFe=n(hqe,"CODE",{});var v9t=s(TFe);W4r=r(v9t,"model.train()"),v9t.forEach(t),hqe.forEach(t),H4r=i(ya),T(oM.$$.fragment,ya),ya.forEach(t),wl.forEach(t),Eze=i(f),Kd=n(f,"H2",{class:!0});var kWe=s(Kd);rM=n(kWe,"A",{id:!0,class:!0,href:!0});var F9t=s(rM);MFe=n(F9t,"SPAN",{});var T9t=s(MFe);T(B9.$$.fragment,T9t),T9t.forEach(t),F9t.forEach(t),U4r=i(kWe),EFe=n(kWe,"SPAN",{});var M9t=s(EFe);J4r=r(M9t,"AutoModelForImageSegmentation"),M9t.forEach(t),kWe.forEach(t),Cze=i(f),Zo=n(f,"DIV",{class:!0});var Al=s(Zo);T(I9.$$.fragment,Al),Y4r=i(Al),Zd=n(Al,"P",{});var Bte=s(Zd);K4r=r(Bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aU=n(Bte,"A",{href:!0});var E9t=s(aU);Z4r=r(E9t,"from_pretrained()"),E9t.forEach(t),e2r=r(Bte," class method or the "),nU=n(Bte,"A",{href:!0});var C9t=s(nU);o2r=r(C9t,"from_config()"),C9t.forEach(t),r2r=r(Bte,` class
method.`),Bte.forEach(t),t2r=i(Al),N9=n(Al,"P",{});var SWe=s(N9);a2r=r(SWe,"This class cannot be instantiated directly using "),CFe=n(SWe,"CODE",{});var w9t=s(CFe);n2r=r(w9t,"__init__()"),w9t.forEach(t),s2r=r(SWe," (throws an error)."),SWe.forEach(t),l2r=i(Al),$t=n(Al,"DIV",{class:!0});var r7=s($t);T(q9.$$.fragment,r7),i2r=i(r7),wFe=n(r7,"P",{});var A9t=s(wFe);d2r=r(A9t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),A9t.forEach(t),c2r=i(r7),ec=n(r7,"P",{});var Ite=s(ec);f2r=r(Ite,`Note:
Loading a model from its configuration file does `),AFe=n(Ite,"STRONG",{});var L9t=s(AFe);m2r=r(L9t,"not"),L9t.forEach(t),g2r=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(Ite,"A",{href:!0});var y9t=s(sU);h2r=r(y9t,"from_pretrained()"),y9t.forEach(t),p2r=r(Ite," to load the model weights."),Ite.forEach(t),_2r=i(r7),T(tM.$$.fragment,r7),r7.forEach(t),u2r=i(Al),vo=n(Al,"DIV",{class:!0});var xa=s(vo);T(j9.$$.fragment,xa),b2r=i(xa),LFe=n(xa,"P",{});var x9t=s(LFe);v2r=r(x9t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),x9t.forEach(t),F2r=i(xa),tn=n(xa,"P",{});var t7=s(tn);T2r=r(t7,"The model class to instantiate is selected based on the "),yFe=n(t7,"CODE",{});var $9t=s(yFe);M2r=r($9t,"model_type"),$9t.forEach(t),E2r=r(t7,` property of the config object (either
passed as an argument or loaded from `),xFe=n(t7,"CODE",{});var k9t=s(xFe);C2r=r(k9t,"pretrained_model_name_or_path"),k9t.forEach(t),w2r=r(t7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=n(t7,"CODE",{});var S9t=s($Fe);A2r=r(S9t,"pretrained_model_name_or_path"),S9t.forEach(t),L2r=r(t7,":"),t7.forEach(t),y2r=i(xa),kFe=n(xa,"UL",{});var R9t=s(kFe);aM=n(R9t,"LI",{});var pqe=s(aM);SFe=n(pqe,"STRONG",{});var P9t=s(SFe);x2r=r(P9t,"detr"),P9t.forEach(t),$2r=r(pqe," \u2014 "),lU=n(pqe,"A",{href:!0});var B9t=s(lU);k2r=r(B9t,"DetrForSegmentation"),B9t.forEach(t),S2r=r(pqe," (DETR model)"),pqe.forEach(t),R9t.forEach(t),R2r=i(xa),nM=n(xa,"P",{});var _qe=s(nM);P2r=r(_qe,"The model is set in evaluation mode by default using "),RFe=n(_qe,"CODE",{});var I9t=s(RFe);B2r=r(I9t,"model.eval()"),I9t.forEach(t),I2r=r(_qe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PFe=n(_qe,"CODE",{});var N9t=s(PFe);N2r=r(N9t,"model.train()"),N9t.forEach(t),_qe.forEach(t),q2r=i(xa),T(sM.$$.fragment,xa),xa.forEach(t),Al.forEach(t),wze=i(f),oc=n(f,"H2",{class:!0});var RWe=s(oc);lM=n(RWe,"A",{id:!0,class:!0,href:!0});var q9t=s(lM);BFe=n(q9t,"SPAN",{});var j9t=s(BFe);T(D9.$$.fragment,j9t),j9t.forEach(t),q9t.forEach(t),j2r=i(RWe),IFe=n(RWe,"SPAN",{});var D9t=s(IFe);D2r=r(D9t,"AutoModelForSemanticSegmentation"),D9t.forEach(t),RWe.forEach(t),Aze=i(f),er=n(f,"DIV",{class:!0});var Ll=s(er);T(G9.$$.fragment,Ll),G2r=i(Ll),rc=n(Ll,"P",{});var Nte=s(rc);O2r=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iU=n(Nte,"A",{href:!0});var G9t=s(iU);V2r=r(G9t,"from_pretrained()"),G9t.forEach(t),X2r=r(Nte," class method or the "),dU=n(Nte,"A",{href:!0});var O9t=s(dU);z2r=r(O9t,"from_config()"),O9t.forEach(t),Q2r=r(Nte,` class
method.`),Nte.forEach(t),W2r=i(Ll),O9=n(Ll,"P",{});var PWe=s(O9);H2r=r(PWe,"This class cannot be instantiated directly using "),NFe=n(PWe,"CODE",{});var V9t=s(NFe);U2r=r(V9t,"__init__()"),V9t.forEach(t),J2r=r(PWe," (throws an error)."),PWe.forEach(t),Y2r=i(Ll),kt=n(Ll,"DIV",{class:!0});var a7=s(kt);T(V9.$$.fragment,a7),K2r=i(a7),qFe=n(a7,"P",{});var X9t=s(qFe);Z2r=r(X9t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),X9t.forEach(t),e1r=i(a7),tc=n(a7,"P",{});var qte=s(tc);o1r=r(qte,`Note:
Loading a model from its configuration file does `),jFe=n(qte,"STRONG",{});var z9t=s(jFe);r1r=r(z9t,"not"),z9t.forEach(t),t1r=r(qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(qte,"A",{href:!0});var Q9t=s(cU);a1r=r(Q9t,"from_pretrained()"),Q9t.forEach(t),n1r=r(qte," to load the model weights."),qte.forEach(t),s1r=i(a7),T(iM.$$.fragment,a7),a7.forEach(t),l1r=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(X9.$$.fragment,$a),i1r=i($a),DFe=n($a,"P",{});var W9t=s(DFe);d1r=r(W9t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),W9t.forEach(t),c1r=i($a),an=n($a,"P",{});var n7=s(an);f1r=r(n7,"The model class to instantiate is selected based on the "),GFe=n(n7,"CODE",{});var H9t=s(GFe);m1r=r(H9t,"model_type"),H9t.forEach(t),g1r=r(n7,` property of the config object (either
passed as an argument or loaded from `),OFe=n(n7,"CODE",{});var U9t=s(OFe);h1r=r(U9t,"pretrained_model_name_or_path"),U9t.forEach(t),p1r=r(n7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(n7,"CODE",{});var J9t=s(VFe);_1r=r(J9t,"pretrained_model_name_or_path"),J9t.forEach(t),u1r=r(n7,":"),n7.forEach(t),b1r=i($a),at=n($a,"UL",{});var yl=s(at);dM=n(yl,"LI",{});var uqe=s(dM);XFe=n(uqe,"STRONG",{});var Y9t=s(XFe);v1r=r(Y9t,"beit"),Y9t.forEach(t),F1r=r(uqe," \u2014 "),fU=n(uqe,"A",{href:!0});var K9t=s(fU);T1r=r(K9t,"BeitForSemanticSegmentation"),K9t.forEach(t),M1r=r(uqe," (BEiT model)"),uqe.forEach(t),E1r=i(yl),cM=n(yl,"LI",{});var bqe=s(cM);zFe=n(bqe,"STRONG",{});var Z9t=s(zFe);C1r=r(Z9t,"data2vec-vision"),Z9t.forEach(t),w1r=r(bqe," \u2014 "),mU=n(bqe,"A",{href:!0});var ext=s(mU);A1r=r(ext,"Data2VecVisionForSemanticSegmentation"),ext.forEach(t),L1r=r(bqe," (Data2VecVision model)"),bqe.forEach(t),y1r=i(yl),fM=n(yl,"LI",{});var vqe=s(fM);QFe=n(vqe,"STRONG",{});var oxt=s(QFe);x1r=r(oxt,"dpt"),oxt.forEach(t),$1r=r(vqe," \u2014 "),gU=n(vqe,"A",{href:!0});var rxt=s(gU);k1r=r(rxt,"DPTForSemanticSegmentation"),rxt.forEach(t),S1r=r(vqe," (DPT model)"),vqe.forEach(t),R1r=i(yl),mM=n(yl,"LI",{});var Fqe=s(mM);WFe=n(Fqe,"STRONG",{});var txt=s(WFe);P1r=r(txt,"mobilevit"),txt.forEach(t),B1r=r(Fqe," \u2014 "),hU=n(Fqe,"A",{href:!0});var axt=s(hU);I1r=r(axt,"MobileViTForSemanticSegmentation"),axt.forEach(t),N1r=r(Fqe," (MobileViT model)"),Fqe.forEach(t),q1r=i(yl),gM=n(yl,"LI",{});var Tqe=s(gM);HFe=n(Tqe,"STRONG",{});var nxt=s(HFe);j1r=r(nxt,"segformer"),nxt.forEach(t),D1r=r(Tqe," \u2014 "),pU=n(Tqe,"A",{href:!0});var sxt=s(pU);G1r=r(sxt,"SegformerForSemanticSegmentation"),sxt.forEach(t),O1r=r(Tqe," (SegFormer model)"),Tqe.forEach(t),yl.forEach(t),V1r=i($a),hM=n($a,"P",{});var Mqe=s(hM);X1r=r(Mqe,"The model is set in evaluation mode by default using "),UFe=n(Mqe,"CODE",{});var lxt=s(UFe);z1r=r(lxt,"model.eval()"),lxt.forEach(t),Q1r=r(Mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JFe=n(Mqe,"CODE",{});var ixt=s(JFe);W1r=r(ixt,"model.train()"),ixt.forEach(t),Mqe.forEach(t),H1r=i($a),T(pM.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),Lze=i(f),ac=n(f,"H2",{class:!0});var BWe=s(ac);_M=n(BWe,"A",{id:!0,class:!0,href:!0});var dxt=s(_M);YFe=n(dxt,"SPAN",{});var cxt=s(YFe);T(z9.$$.fragment,cxt),cxt.forEach(t),dxt.forEach(t),U1r=i(BWe),KFe=n(BWe,"SPAN",{});var fxt=s(KFe);J1r=r(fxt,"AutoModelForInstanceSegmentation"),fxt.forEach(t),BWe.forEach(t),yze=i(f),or=n(f,"DIV",{class:!0});var xl=s(or);T(Q9.$$.fragment,xl),Y1r=i(xl),nc=n(xl,"P",{});var jte=s(nc);K1r=r(jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),_U=n(jte,"A",{href:!0});var mxt=s(_U);Z1r=r(mxt,"from_pretrained()"),mxt.forEach(t),ebr=r(jte," class method or the "),uU=n(jte,"A",{href:!0});var gxt=s(uU);obr=r(gxt,"from_config()"),gxt.forEach(t),rbr=r(jte,` class
method.`),jte.forEach(t),tbr=i(xl),W9=n(xl,"P",{});var IWe=s(W9);abr=r(IWe,"This class cannot be instantiated directly using "),ZFe=n(IWe,"CODE",{});var hxt=s(ZFe);nbr=r(hxt,"__init__()"),hxt.forEach(t),sbr=r(IWe," (throws an error)."),IWe.forEach(t),lbr=i(xl),St=n(xl,"DIV",{class:!0});var s7=s(St);T(H9.$$.fragment,s7),ibr=i(s7),eTe=n(s7,"P",{});var pxt=s(eTe);dbr=r(pxt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),pxt.forEach(t),cbr=i(s7),sc=n(s7,"P",{});var Dte=s(sc);fbr=r(Dte,`Note:
Loading a model from its configuration file does `),oTe=n(Dte,"STRONG",{});var _xt=s(oTe);mbr=r(_xt,"not"),_xt.forEach(t),gbr=r(Dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(Dte,"A",{href:!0});var uxt=s(bU);hbr=r(uxt,"from_pretrained()"),uxt.forEach(t),pbr=r(Dte," to load the model weights."),Dte.forEach(t),_br=i(s7),T(uM.$$.fragment,s7),s7.forEach(t),ubr=i(xl),To=n(xl,"DIV",{class:!0});var ka=s(To);T(U9.$$.fragment,ka),bbr=i(ka),rTe=n(ka,"P",{});var bxt=s(rTe);vbr=r(bxt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),bxt.forEach(t),Fbr=i(ka),nn=n(ka,"P",{});var l7=s(nn);Tbr=r(l7,"The model class to instantiate is selected based on the "),tTe=n(l7,"CODE",{});var vxt=s(tTe);Mbr=r(vxt,"model_type"),vxt.forEach(t),Ebr=r(l7,` property of the config object (either
passed as an argument or loaded from `),aTe=n(l7,"CODE",{});var Fxt=s(aTe);Cbr=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),wbr=r(l7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(l7,"CODE",{});var Txt=s(nTe);Abr=r(Txt,"pretrained_model_name_or_path"),Txt.forEach(t),Lbr=r(l7,":"),l7.forEach(t),ybr=i(ka),sTe=n(ka,"UL",{});var Mxt=s(sTe);bM=n(Mxt,"LI",{});var Eqe=s(bM);lTe=n(Eqe,"STRONG",{});var Ext=s(lTe);xbr=r(Ext,"maskformer"),Ext.forEach(t),$br=r(Eqe," \u2014 "),vU=n(Eqe,"A",{href:!0});var Cxt=s(vU);kbr=r(Cxt,"MaskFormerForInstanceSegmentation"),Cxt.forEach(t),Sbr=r(Eqe," (MaskFormer model)"),Eqe.forEach(t),Mxt.forEach(t),Rbr=i(ka),vM=n(ka,"P",{});var Cqe=s(vM);Pbr=r(Cqe,"The model is set in evaluation mode by default using "),iTe=n(Cqe,"CODE",{});var wxt=s(iTe);Bbr=r(wxt,"model.eval()"),wxt.forEach(t),Ibr=r(Cqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dTe=n(Cqe,"CODE",{});var Axt=s(dTe);Nbr=r(Axt,"model.train()"),Axt.forEach(t),Cqe.forEach(t),qbr=i(ka),T(FM.$$.fragment,ka),ka.forEach(t),xl.forEach(t),xze=i(f),lc=n(f,"H2",{class:!0});var NWe=s(lc);TM=n(NWe,"A",{id:!0,class:!0,href:!0});var Lxt=s(TM);cTe=n(Lxt,"SPAN",{});var yxt=s(cTe);T(J9.$$.fragment,yxt),yxt.forEach(t),Lxt.forEach(t),jbr=i(NWe),fTe=n(NWe,"SPAN",{});var xxt=s(fTe);Dbr=r(xxt,"TFAutoModel"),xxt.forEach(t),NWe.forEach(t),$ze=i(f),rr=n(f,"DIV",{class:!0});var $l=s(rr);T(Y9.$$.fragment,$l),Gbr=i($l),ic=n($l,"P",{});var Gte=s(ic);Obr=r(Gte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FU=n(Gte,"A",{href:!0});var $xt=s(FU);Vbr=r($xt,"from_pretrained()"),$xt.forEach(t),Xbr=r(Gte," class method or the "),TU=n(Gte,"A",{href:!0});var kxt=s(TU);zbr=r(kxt,"from_config()"),kxt.forEach(t),Qbr=r(Gte,` class
method.`),Gte.forEach(t),Wbr=i($l),K9=n($l,"P",{});var qWe=s(K9);Hbr=r(qWe,"This class cannot be instantiated directly using "),mTe=n(qWe,"CODE",{});var Sxt=s(mTe);Ubr=r(Sxt,"__init__()"),Sxt.forEach(t),Jbr=r(qWe," (throws an error)."),qWe.forEach(t),Ybr=i($l),Rt=n($l,"DIV",{class:!0});var i7=s(Rt);T(Z9.$$.fragment,i7),Kbr=i(i7),gTe=n(i7,"P",{});var Rxt=s(gTe);Zbr=r(Rxt,"Instantiates one of the base model classes of the library from a configuration."),Rxt.forEach(t),evr=i(i7),dc=n(i7,"P",{});var Ote=s(dc);ovr=r(Ote,`Note:
Loading a model from its configuration file does `),hTe=n(Ote,"STRONG",{});var Pxt=s(hTe);rvr=r(Pxt,"not"),Pxt.forEach(t),tvr=r(Ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(Ote,"A",{href:!0});var Bxt=s(MU);avr=r(Bxt,"from_pretrained()"),Bxt.forEach(t),nvr=r(Ote," to load the model weights."),Ote.forEach(t),svr=i(i7),T(MM.$$.fragment,i7),i7.forEach(t),lvr=i($l),$r=n($l,"DIV",{class:!0});var kl=s($r);T(ex.$$.fragment,kl),ivr=i(kl),pTe=n(kl,"P",{});var Ixt=s(pTe);dvr=r(Ixt,"Instantiate one of the base model classes of the library from a pretrained model."),Ixt.forEach(t),cvr=i(kl),sn=n(kl,"P",{});var d7=s(sn);fvr=r(d7,"The model class to instantiate is selected based on the "),_Te=n(d7,"CODE",{});var Nxt=s(_Te);mvr=r(Nxt,"model_type"),Nxt.forEach(t),gvr=r(d7,` property of the config object (either
passed as an argument or loaded from `),uTe=n(d7,"CODE",{});var qxt=s(uTe);hvr=r(qxt,"pretrained_model_name_or_path"),qxt.forEach(t),pvr=r(d7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(d7,"CODE",{});var jxt=s(bTe);_vr=r(jxt,"pretrained_model_name_or_path"),jxt.forEach(t),uvr=r(d7,":"),d7.forEach(t),bvr=i(kl),I=n(kl,"UL",{});var D=s(I);EM=n(D,"LI",{});var wqe=s(EM);vTe=n(wqe,"STRONG",{});var Dxt=s(vTe);vvr=r(Dxt,"albert"),Dxt.forEach(t),Fvr=r(wqe," \u2014 "),EU=n(wqe,"A",{href:!0});var Gxt=s(EU);Tvr=r(Gxt,"TFAlbertModel"),Gxt.forEach(t),Mvr=r(wqe," (ALBERT model)"),wqe.forEach(t),Evr=i(D),CM=n(D,"LI",{});var Aqe=s(CM);FTe=n(Aqe,"STRONG",{});var Oxt=s(FTe);Cvr=r(Oxt,"bart"),Oxt.forEach(t),wvr=r(Aqe," \u2014 "),CU=n(Aqe,"A",{href:!0});var Vxt=s(CU);Avr=r(Vxt,"TFBartModel"),Vxt.forEach(t),Lvr=r(Aqe," (BART model)"),Aqe.forEach(t),yvr=i(D),wM=n(D,"LI",{});var Lqe=s(wM);TTe=n(Lqe,"STRONG",{});var Xxt=s(TTe);xvr=r(Xxt,"bert"),Xxt.forEach(t),$vr=r(Lqe," \u2014 "),wU=n(Lqe,"A",{href:!0});var zxt=s(wU);kvr=r(zxt,"TFBertModel"),zxt.forEach(t),Svr=r(Lqe," (BERT model)"),Lqe.forEach(t),Rvr=i(D),AM=n(D,"LI",{});var yqe=s(AM);MTe=n(yqe,"STRONG",{});var Qxt=s(MTe);Pvr=r(Qxt,"blenderbot"),Qxt.forEach(t),Bvr=r(yqe," \u2014 "),AU=n(yqe,"A",{href:!0});var Wxt=s(AU);Ivr=r(Wxt,"TFBlenderbotModel"),Wxt.forEach(t),Nvr=r(yqe," (Blenderbot model)"),yqe.forEach(t),qvr=i(D),LM=n(D,"LI",{});var xqe=s(LM);ETe=n(xqe,"STRONG",{});var Hxt=s(ETe);jvr=r(Hxt,"blenderbot-small"),Hxt.forEach(t),Dvr=r(xqe," \u2014 "),LU=n(xqe,"A",{href:!0});var Uxt=s(LU);Gvr=r(Uxt,"TFBlenderbotSmallModel"),Uxt.forEach(t),Ovr=r(xqe," (BlenderbotSmall model)"),xqe.forEach(t),Vvr=i(D),yM=n(D,"LI",{});var $qe=s(yM);CTe=n($qe,"STRONG",{});var Jxt=s(CTe);Xvr=r(Jxt,"camembert"),Jxt.forEach(t),zvr=r($qe," \u2014 "),yU=n($qe,"A",{href:!0});var Yxt=s(yU);Qvr=r(Yxt,"TFCamembertModel"),Yxt.forEach(t),Wvr=r($qe," (CamemBERT model)"),$qe.forEach(t),Hvr=i(D),xM=n(D,"LI",{});var kqe=s(xM);wTe=n(kqe,"STRONG",{});var Kxt=s(wTe);Uvr=r(Kxt,"clip"),Kxt.forEach(t),Jvr=r(kqe," \u2014 "),xU=n(kqe,"A",{href:!0});var Zxt=s(xU);Yvr=r(Zxt,"TFCLIPModel"),Zxt.forEach(t),Kvr=r(kqe," (CLIP model)"),kqe.forEach(t),Zvr=i(D),$M=n(D,"LI",{});var Sqe=s($M);ATe=n(Sqe,"STRONG",{});var e$t=s(ATe);eFr=r(e$t,"convbert"),e$t.forEach(t),oFr=r(Sqe," \u2014 "),$U=n(Sqe,"A",{href:!0});var o$t=s($U);rFr=r(o$t,"TFConvBertModel"),o$t.forEach(t),tFr=r(Sqe," (ConvBERT model)"),Sqe.forEach(t),aFr=i(D),kM=n(D,"LI",{});var Rqe=s(kM);LTe=n(Rqe,"STRONG",{});var r$t=s(LTe);nFr=r(r$t,"convnext"),r$t.forEach(t),sFr=r(Rqe," \u2014 "),kU=n(Rqe,"A",{href:!0});var t$t=s(kU);lFr=r(t$t,"TFConvNextModel"),t$t.forEach(t),iFr=r(Rqe," (ConvNeXT model)"),Rqe.forEach(t),dFr=i(D),SM=n(D,"LI",{});var Pqe=s(SM);yTe=n(Pqe,"STRONG",{});var a$t=s(yTe);cFr=r(a$t,"ctrl"),a$t.forEach(t),fFr=r(Pqe," \u2014 "),SU=n(Pqe,"A",{href:!0});var n$t=s(SU);mFr=r(n$t,"TFCTRLModel"),n$t.forEach(t),gFr=r(Pqe," (CTRL model)"),Pqe.forEach(t),hFr=i(D),RM=n(D,"LI",{});var Bqe=s(RM);xTe=n(Bqe,"STRONG",{});var s$t=s(xTe);pFr=r(s$t,"data2vec-vision"),s$t.forEach(t),_Fr=r(Bqe," \u2014 "),RU=n(Bqe,"A",{href:!0});var l$t=s(RU);uFr=r(l$t,"TFData2VecVisionModel"),l$t.forEach(t),bFr=r(Bqe," (Data2VecVision model)"),Bqe.forEach(t),vFr=i(D),PM=n(D,"LI",{});var Iqe=s(PM);$Te=n(Iqe,"STRONG",{});var i$t=s($Te);FFr=r(i$t,"deberta"),i$t.forEach(t),TFr=r(Iqe," \u2014 "),PU=n(Iqe,"A",{href:!0});var d$t=s(PU);MFr=r(d$t,"TFDebertaModel"),d$t.forEach(t),EFr=r(Iqe," (DeBERTa model)"),Iqe.forEach(t),CFr=i(D),BM=n(D,"LI",{});var Nqe=s(BM);kTe=n(Nqe,"STRONG",{});var c$t=s(kTe);wFr=r(c$t,"deberta-v2"),c$t.forEach(t),AFr=r(Nqe," \u2014 "),BU=n(Nqe,"A",{href:!0});var f$t=s(BU);LFr=r(f$t,"TFDebertaV2Model"),f$t.forEach(t),yFr=r(Nqe," (DeBERTa-v2 model)"),Nqe.forEach(t),xFr=i(D),IM=n(D,"LI",{});var qqe=s(IM);STe=n(qqe,"STRONG",{});var m$t=s(STe);$Fr=r(m$t,"deit"),m$t.forEach(t),kFr=r(qqe," \u2014 "),IU=n(qqe,"A",{href:!0});var g$t=s(IU);SFr=r(g$t,"TFDeiTModel"),g$t.forEach(t),RFr=r(qqe," (DeiT model)"),qqe.forEach(t),PFr=i(D),NM=n(D,"LI",{});var jqe=s(NM);RTe=n(jqe,"STRONG",{});var h$t=s(RTe);BFr=r(h$t,"distilbert"),h$t.forEach(t),IFr=r(jqe," \u2014 "),NU=n(jqe,"A",{href:!0});var p$t=s(NU);NFr=r(p$t,"TFDistilBertModel"),p$t.forEach(t),qFr=r(jqe," (DistilBERT model)"),jqe.forEach(t),jFr=i(D),qM=n(D,"LI",{});var Dqe=s(qM);PTe=n(Dqe,"STRONG",{});var _$t=s(PTe);DFr=r(_$t,"dpr"),_$t.forEach(t),GFr=r(Dqe," \u2014 "),qU=n(Dqe,"A",{href:!0});var u$t=s(qU);OFr=r(u$t,"TFDPRQuestionEncoder"),u$t.forEach(t),VFr=r(Dqe," (DPR model)"),Dqe.forEach(t),XFr=i(D),jM=n(D,"LI",{});var Gqe=s(jM);BTe=n(Gqe,"STRONG",{});var b$t=s(BTe);zFr=r(b$t,"electra"),b$t.forEach(t),QFr=r(Gqe," \u2014 "),jU=n(Gqe,"A",{href:!0});var v$t=s(jU);WFr=r(v$t,"TFElectraModel"),v$t.forEach(t),HFr=r(Gqe," (ELECTRA model)"),Gqe.forEach(t),UFr=i(D),DM=n(D,"LI",{});var Oqe=s(DM);ITe=n(Oqe,"STRONG",{});var F$t=s(ITe);JFr=r(F$t,"flaubert"),F$t.forEach(t),YFr=r(Oqe," \u2014 "),DU=n(Oqe,"A",{href:!0});var T$t=s(DU);KFr=r(T$t,"TFFlaubertModel"),T$t.forEach(t),ZFr=r(Oqe," (FlauBERT model)"),Oqe.forEach(t),eTr=i(D),Ys=n(D,"LI",{});var DS=s(Ys);NTe=n(DS,"STRONG",{});var M$t=s(NTe);oTr=r(M$t,"funnel"),M$t.forEach(t),rTr=r(DS," \u2014 "),GU=n(DS,"A",{href:!0});var E$t=s(GU);tTr=r(E$t,"TFFunnelModel"),E$t.forEach(t),aTr=r(DS," or "),OU=n(DS,"A",{href:!0});var C$t=s(OU);nTr=r(C$t,"TFFunnelBaseModel"),C$t.forEach(t),sTr=r(DS," (Funnel Transformer model)"),DS.forEach(t),lTr=i(D),GM=n(D,"LI",{});var Vqe=s(GM);qTe=n(Vqe,"STRONG",{});var w$t=s(qTe);iTr=r(w$t,"gpt2"),w$t.forEach(t),dTr=r(Vqe," \u2014 "),VU=n(Vqe,"A",{href:!0});var A$t=s(VU);cTr=r(A$t,"TFGPT2Model"),A$t.forEach(t),fTr=r(Vqe," (OpenAI GPT-2 model)"),Vqe.forEach(t),mTr=i(D),OM=n(D,"LI",{});var Xqe=s(OM);jTe=n(Xqe,"STRONG",{});var L$t=s(jTe);gTr=r(L$t,"gptj"),L$t.forEach(t),hTr=r(Xqe," \u2014 "),XU=n(Xqe,"A",{href:!0});var y$t=s(XU);pTr=r(y$t,"TFGPTJModel"),y$t.forEach(t),_Tr=r(Xqe," (GPT-J model)"),Xqe.forEach(t),uTr=i(D),VM=n(D,"LI",{});var zqe=s(VM);DTe=n(zqe,"STRONG",{});var x$t=s(DTe);bTr=r(x$t,"hubert"),x$t.forEach(t),vTr=r(zqe," \u2014 "),zU=n(zqe,"A",{href:!0});var $$t=s(zU);FTr=r($$t,"TFHubertModel"),$$t.forEach(t),TTr=r(zqe," (Hubert model)"),zqe.forEach(t),MTr=i(D),XM=n(D,"LI",{});var Qqe=s(XM);GTe=n(Qqe,"STRONG",{});var k$t=s(GTe);ETr=r(k$t,"layoutlm"),k$t.forEach(t),CTr=r(Qqe," \u2014 "),QU=n(Qqe,"A",{href:!0});var S$t=s(QU);wTr=r(S$t,"TFLayoutLMModel"),S$t.forEach(t),ATr=r(Qqe," (LayoutLM model)"),Qqe.forEach(t),LTr=i(D),zM=n(D,"LI",{});var Wqe=s(zM);OTe=n(Wqe,"STRONG",{});var R$t=s(OTe);yTr=r(R$t,"led"),R$t.forEach(t),xTr=r(Wqe," \u2014 "),WU=n(Wqe,"A",{href:!0});var P$t=s(WU);$Tr=r(P$t,"TFLEDModel"),P$t.forEach(t),kTr=r(Wqe," (LED model)"),Wqe.forEach(t),STr=i(D),QM=n(D,"LI",{});var Hqe=s(QM);VTe=n(Hqe,"STRONG",{});var B$t=s(VTe);RTr=r(B$t,"longformer"),B$t.forEach(t),PTr=r(Hqe," \u2014 "),HU=n(Hqe,"A",{href:!0});var I$t=s(HU);BTr=r(I$t,"TFLongformerModel"),I$t.forEach(t),ITr=r(Hqe," (Longformer model)"),Hqe.forEach(t),NTr=i(D),WM=n(D,"LI",{});var Uqe=s(WM);XTe=n(Uqe,"STRONG",{});var N$t=s(XTe);qTr=r(N$t,"lxmert"),N$t.forEach(t),jTr=r(Uqe," \u2014 "),UU=n(Uqe,"A",{href:!0});var q$t=s(UU);DTr=r(q$t,"TFLxmertModel"),q$t.forEach(t),GTr=r(Uqe," (LXMERT model)"),Uqe.forEach(t),OTr=i(D),HM=n(D,"LI",{});var Jqe=s(HM);zTe=n(Jqe,"STRONG",{});var j$t=s(zTe);VTr=r(j$t,"marian"),j$t.forEach(t),XTr=r(Jqe," \u2014 "),JU=n(Jqe,"A",{href:!0});var D$t=s(JU);zTr=r(D$t,"TFMarianModel"),D$t.forEach(t),QTr=r(Jqe," (Marian model)"),Jqe.forEach(t),WTr=i(D),UM=n(D,"LI",{});var Yqe=s(UM);QTe=n(Yqe,"STRONG",{});var G$t=s(QTe);HTr=r(G$t,"mbart"),G$t.forEach(t),UTr=r(Yqe," \u2014 "),YU=n(Yqe,"A",{href:!0});var O$t=s(YU);JTr=r(O$t,"TFMBartModel"),O$t.forEach(t),YTr=r(Yqe," (mBART model)"),Yqe.forEach(t),KTr=i(D),JM=n(D,"LI",{});var Kqe=s(JM);WTe=n(Kqe,"STRONG",{});var V$t=s(WTe);ZTr=r(V$t,"mobilebert"),V$t.forEach(t),e8r=r(Kqe," \u2014 "),KU=n(Kqe,"A",{href:!0});var X$t=s(KU);o8r=r(X$t,"TFMobileBertModel"),X$t.forEach(t),r8r=r(Kqe," (MobileBERT model)"),Kqe.forEach(t),t8r=i(D),YM=n(D,"LI",{});var Zqe=s(YM);HTe=n(Zqe,"STRONG",{});var z$t=s(HTe);a8r=r(z$t,"mpnet"),z$t.forEach(t),n8r=r(Zqe," \u2014 "),ZU=n(Zqe,"A",{href:!0});var Q$t=s(ZU);s8r=r(Q$t,"TFMPNetModel"),Q$t.forEach(t),l8r=r(Zqe," (MPNet model)"),Zqe.forEach(t),i8r=i(D),KM=n(D,"LI",{});var eje=s(KM);UTe=n(eje,"STRONG",{});var W$t=s(UTe);d8r=r(W$t,"mt5"),W$t.forEach(t),c8r=r(eje," \u2014 "),eJ=n(eje,"A",{href:!0});var H$t=s(eJ);f8r=r(H$t,"TFMT5Model"),H$t.forEach(t),m8r=r(eje," (MT5 model)"),eje.forEach(t),g8r=i(D),ZM=n(D,"LI",{});var oje=s(ZM);JTe=n(oje,"STRONG",{});var U$t=s(JTe);h8r=r(U$t,"openai-gpt"),U$t.forEach(t),p8r=r(oje," \u2014 "),oJ=n(oje,"A",{href:!0});var J$t=s(oJ);_8r=r(J$t,"TFOpenAIGPTModel"),J$t.forEach(t),u8r=r(oje," (OpenAI GPT model)"),oje.forEach(t),b8r=i(D),eE=n(D,"LI",{});var rje=s(eE);YTe=n(rje,"STRONG",{});var Y$t=s(YTe);v8r=r(Y$t,"opt"),Y$t.forEach(t),F8r=r(rje," \u2014 "),rJ=n(rje,"A",{href:!0});var K$t=s(rJ);T8r=r(K$t,"TFOPTModel"),K$t.forEach(t),M8r=r(rje," (OPT model)"),rje.forEach(t),E8r=i(D),oE=n(D,"LI",{});var tje=s(oE);KTe=n(tje,"STRONG",{});var Z$t=s(KTe);C8r=r(Z$t,"pegasus"),Z$t.forEach(t),w8r=r(tje," \u2014 "),tJ=n(tje,"A",{href:!0});var ekt=s(tJ);A8r=r(ekt,"TFPegasusModel"),ekt.forEach(t),L8r=r(tje," (Pegasus model)"),tje.forEach(t),y8r=i(D),rE=n(D,"LI",{});var aje=s(rE);ZTe=n(aje,"STRONG",{});var okt=s(ZTe);x8r=r(okt,"regnet"),okt.forEach(t),$8r=r(aje," \u2014 "),aJ=n(aje,"A",{href:!0});var rkt=s(aJ);k8r=r(rkt,"TFRegNetModel"),rkt.forEach(t),S8r=r(aje," (RegNet model)"),aje.forEach(t),R8r=i(D),tE=n(D,"LI",{});var nje=s(tE);e8e=n(nje,"STRONG",{});var tkt=s(e8e);P8r=r(tkt,"rembert"),tkt.forEach(t),B8r=r(nje," \u2014 "),nJ=n(nje,"A",{href:!0});var akt=s(nJ);I8r=r(akt,"TFRemBertModel"),akt.forEach(t),N8r=r(nje," (RemBERT model)"),nje.forEach(t),q8r=i(D),aE=n(D,"LI",{});var sje=s(aE);o8e=n(sje,"STRONG",{});var nkt=s(o8e);j8r=r(nkt,"resnet"),nkt.forEach(t),D8r=r(sje," \u2014 "),sJ=n(sje,"A",{href:!0});var skt=s(sJ);G8r=r(skt,"TFResNetModel"),skt.forEach(t),O8r=r(sje," (ResNet model)"),sje.forEach(t),V8r=i(D),nE=n(D,"LI",{});var lje=s(nE);r8e=n(lje,"STRONG",{});var lkt=s(r8e);X8r=r(lkt,"roberta"),lkt.forEach(t),z8r=r(lje," \u2014 "),lJ=n(lje,"A",{href:!0});var ikt=s(lJ);Q8r=r(ikt,"TFRobertaModel"),ikt.forEach(t),W8r=r(lje," (RoBERTa model)"),lje.forEach(t),H8r=i(D),sE=n(D,"LI",{});var ije=s(sE);t8e=n(ije,"STRONG",{});var dkt=s(t8e);U8r=r(dkt,"roformer"),dkt.forEach(t),J8r=r(ije," \u2014 "),iJ=n(ije,"A",{href:!0});var ckt=s(iJ);Y8r=r(ckt,"TFRoFormerModel"),ckt.forEach(t),K8r=r(ije," (RoFormer model)"),ije.forEach(t),Z8r=i(D),lE=n(D,"LI",{});var dje=s(lE);a8e=n(dje,"STRONG",{});var fkt=s(a8e);eMr=r(fkt,"segformer"),fkt.forEach(t),oMr=r(dje," \u2014 "),dJ=n(dje,"A",{href:!0});var mkt=s(dJ);rMr=r(mkt,"TFSegformerModel"),mkt.forEach(t),tMr=r(dje," (SegFormer model)"),dje.forEach(t),aMr=i(D),iE=n(D,"LI",{});var cje=s(iE);n8e=n(cje,"STRONG",{});var gkt=s(n8e);nMr=r(gkt,"speech_to_text"),gkt.forEach(t),sMr=r(cje," \u2014 "),cJ=n(cje,"A",{href:!0});var hkt=s(cJ);lMr=r(hkt,"TFSpeech2TextModel"),hkt.forEach(t),iMr=r(cje," (Speech2Text model)"),cje.forEach(t),dMr=i(D),dE=n(D,"LI",{});var fje=s(dE);s8e=n(fje,"STRONG",{});var pkt=s(s8e);cMr=r(pkt,"swin"),pkt.forEach(t),fMr=r(fje," \u2014 "),fJ=n(fje,"A",{href:!0});var _kt=s(fJ);mMr=r(_kt,"TFSwinModel"),_kt.forEach(t),gMr=r(fje," (Swin Transformer model)"),fje.forEach(t),hMr=i(D),cE=n(D,"LI",{});var mje=s(cE);l8e=n(mje,"STRONG",{});var ukt=s(l8e);pMr=r(ukt,"t5"),ukt.forEach(t),_Mr=r(mje," \u2014 "),mJ=n(mje,"A",{href:!0});var bkt=s(mJ);uMr=r(bkt,"TFT5Model"),bkt.forEach(t),bMr=r(mje," (T5 model)"),mje.forEach(t),vMr=i(D),fE=n(D,"LI",{});var gje=s(fE);i8e=n(gje,"STRONG",{});var vkt=s(i8e);FMr=r(vkt,"tapas"),vkt.forEach(t),TMr=r(gje," \u2014 "),gJ=n(gje,"A",{href:!0});var Fkt=s(gJ);MMr=r(Fkt,"TFTapasModel"),Fkt.forEach(t),EMr=r(gje," (TAPAS model)"),gje.forEach(t),CMr=i(D),mE=n(D,"LI",{});var hje=s(mE);d8e=n(hje,"STRONG",{});var Tkt=s(d8e);wMr=r(Tkt,"transfo-xl"),Tkt.forEach(t),AMr=r(hje," \u2014 "),hJ=n(hje,"A",{href:!0});var Mkt=s(hJ);LMr=r(Mkt,"TFTransfoXLModel"),Mkt.forEach(t),yMr=r(hje," (Transformer-XL model)"),hje.forEach(t),xMr=i(D),gE=n(D,"LI",{});var pje=s(gE);c8e=n(pje,"STRONG",{});var Ekt=s(c8e);$Mr=r(Ekt,"vit"),Ekt.forEach(t),kMr=r(pje," \u2014 "),pJ=n(pje,"A",{href:!0});var Ckt=s(pJ);SMr=r(Ckt,"TFViTModel"),Ckt.forEach(t),RMr=r(pje," (ViT model)"),pje.forEach(t),PMr=i(D),hE=n(D,"LI",{});var _je=s(hE);f8e=n(_je,"STRONG",{});var wkt=s(f8e);BMr=r(wkt,"vit_mae"),wkt.forEach(t),IMr=r(_je," \u2014 "),_J=n(_je,"A",{href:!0});var Akt=s(_J);NMr=r(Akt,"TFViTMAEModel"),Akt.forEach(t),qMr=r(_je," (ViTMAE model)"),_je.forEach(t),jMr=i(D),pE=n(D,"LI",{});var uje=s(pE);m8e=n(uje,"STRONG",{});var Lkt=s(m8e);DMr=r(Lkt,"wav2vec2"),Lkt.forEach(t),GMr=r(uje," \u2014 "),uJ=n(uje,"A",{href:!0});var ykt=s(uJ);OMr=r(ykt,"TFWav2Vec2Model"),ykt.forEach(t),VMr=r(uje," (Wav2Vec2 model)"),uje.forEach(t),XMr=i(D),_E=n(D,"LI",{});var bje=s(_E);g8e=n(bje,"STRONG",{});var xkt=s(g8e);zMr=r(xkt,"xlm"),xkt.forEach(t),QMr=r(bje," \u2014 "),bJ=n(bje,"A",{href:!0});var $kt=s(bJ);WMr=r($kt,"TFXLMModel"),$kt.forEach(t),HMr=r(bje," (XLM model)"),bje.forEach(t),UMr=i(D),uE=n(D,"LI",{});var vje=s(uE);h8e=n(vje,"STRONG",{});var kkt=s(h8e);JMr=r(kkt,"xlm-roberta"),kkt.forEach(t),YMr=r(vje," \u2014 "),vJ=n(vje,"A",{href:!0});var Skt=s(vJ);KMr=r(Skt,"TFXLMRobertaModel"),Skt.forEach(t),ZMr=r(vje," (XLM-RoBERTa model)"),vje.forEach(t),eEr=i(D),bE=n(D,"LI",{});var Fje=s(bE);p8e=n(Fje,"STRONG",{});var Rkt=s(p8e);oEr=r(Rkt,"xlnet"),Rkt.forEach(t),rEr=r(Fje," \u2014 "),FJ=n(Fje,"A",{href:!0});var Pkt=s(FJ);tEr=r(Pkt,"TFXLNetModel"),Pkt.forEach(t),aEr=r(Fje," (XLNet model)"),Fje.forEach(t),D.forEach(t),nEr=i(kl),T(vE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),kze=i(f),cc=n(f,"H2",{class:!0});var jWe=s(cc);FE=n(jWe,"A",{id:!0,class:!0,href:!0});var Bkt=s(FE);_8e=n(Bkt,"SPAN",{});var Ikt=s(_8e);T(ox.$$.fragment,Ikt),Ikt.forEach(t),Bkt.forEach(t),sEr=i(jWe),u8e=n(jWe,"SPAN",{});var Nkt=s(u8e);lEr=r(Nkt,"TFAutoModelForPreTraining"),Nkt.forEach(t),jWe.forEach(t),Sze=i(f),tr=n(f,"DIV",{class:!0});var Sl=s(tr);T(rx.$$.fragment,Sl),iEr=i(Sl),fc=n(Sl,"P",{});var Vte=s(fc);dEr=r(Vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TJ=n(Vte,"A",{href:!0});var qkt=s(TJ);cEr=r(qkt,"from_pretrained()"),qkt.forEach(t),fEr=r(Vte," class method or the "),MJ=n(Vte,"A",{href:!0});var jkt=s(MJ);mEr=r(jkt,"from_config()"),jkt.forEach(t),gEr=r(Vte,` class
method.`),Vte.forEach(t),hEr=i(Sl),tx=n(Sl,"P",{});var DWe=s(tx);pEr=r(DWe,"This class cannot be instantiated directly using "),b8e=n(DWe,"CODE",{});var Dkt=s(b8e);_Er=r(Dkt,"__init__()"),Dkt.forEach(t),uEr=r(DWe," (throws an error)."),DWe.forEach(t),bEr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var c7=s(Pt);T(ax.$$.fragment,c7),vEr=i(c7),v8e=n(c7,"P",{});var Gkt=s(v8e);FEr=r(Gkt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Gkt.forEach(t),TEr=i(c7),mc=n(c7,"P",{});var Xte=s(mc);MEr=r(Xte,`Note:
Loading a model from its configuration file does `),F8e=n(Xte,"STRONG",{});var Okt=s(F8e);EEr=r(Okt,"not"),Okt.forEach(t),CEr=r(Xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(Xte,"A",{href:!0});var Vkt=s(EJ);wEr=r(Vkt,"from_pretrained()"),Vkt.forEach(t),AEr=r(Xte," to load the model weights."),Xte.forEach(t),LEr=i(c7),T(TE.$$.fragment,c7),c7.forEach(t),yEr=i(Sl),kr=n(Sl,"DIV",{class:!0});var Rl=s(kr);T(nx.$$.fragment,Rl),xEr=i(Rl),T8e=n(Rl,"P",{});var Xkt=s(T8e);$Er=r(Xkt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xkt.forEach(t),kEr=i(Rl),ln=n(Rl,"P",{});var f7=s(ln);SEr=r(f7,"The model class to instantiate is selected based on the "),M8e=n(f7,"CODE",{});var zkt=s(M8e);REr=r(zkt,"model_type"),zkt.forEach(t),PEr=r(f7,` property of the config object (either
passed as an argument or loaded from `),E8e=n(f7,"CODE",{});var Qkt=s(E8e);BEr=r(Qkt,"pretrained_model_name_or_path"),Qkt.forEach(t),IEr=r(f7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C8e=n(f7,"CODE",{});var Wkt=s(C8e);NEr=r(Wkt,"pretrained_model_name_or_path"),Wkt.forEach(t),qEr=r(f7,":"),f7.forEach(t),jEr=i(Rl),se=n(Rl,"UL",{});var le=s(se);ME=n(le,"LI",{});var Tje=s(ME);w8e=n(Tje,"STRONG",{});var Hkt=s(w8e);DEr=r(Hkt,"albert"),Hkt.forEach(t),GEr=r(Tje," \u2014 "),CJ=n(Tje,"A",{href:!0});var Ukt=s(CJ);OEr=r(Ukt,"TFAlbertForPreTraining"),Ukt.forEach(t),VEr=r(Tje," (ALBERT model)"),Tje.forEach(t),XEr=i(le),EE=n(le,"LI",{});var Mje=s(EE);A8e=n(Mje,"STRONG",{});var Jkt=s(A8e);zEr=r(Jkt,"bart"),Jkt.forEach(t),QEr=r(Mje," \u2014 "),wJ=n(Mje,"A",{href:!0});var Ykt=s(wJ);WEr=r(Ykt,"TFBartForConditionalGeneration"),Ykt.forEach(t),HEr=r(Mje," (BART model)"),Mje.forEach(t),UEr=i(le),CE=n(le,"LI",{});var Eje=s(CE);L8e=n(Eje,"STRONG",{});var Kkt=s(L8e);JEr=r(Kkt,"bert"),Kkt.forEach(t),YEr=r(Eje," \u2014 "),AJ=n(Eje,"A",{href:!0});var Zkt=s(AJ);KEr=r(Zkt,"TFBertForPreTraining"),Zkt.forEach(t),ZEr=r(Eje," (BERT model)"),Eje.forEach(t),eCr=i(le),wE=n(le,"LI",{});var Cje=s(wE);y8e=n(Cje,"STRONG",{});var eSt=s(y8e);oCr=r(eSt,"camembert"),eSt.forEach(t),rCr=r(Cje," \u2014 "),LJ=n(Cje,"A",{href:!0});var oSt=s(LJ);tCr=r(oSt,"TFCamembertForMaskedLM"),oSt.forEach(t),aCr=r(Cje," (CamemBERT model)"),Cje.forEach(t),nCr=i(le),AE=n(le,"LI",{});var wje=s(AE);x8e=n(wje,"STRONG",{});var rSt=s(x8e);sCr=r(rSt,"ctrl"),rSt.forEach(t),lCr=r(wje," \u2014 "),yJ=n(wje,"A",{href:!0});var tSt=s(yJ);iCr=r(tSt,"TFCTRLLMHeadModel"),tSt.forEach(t),dCr=r(wje," (CTRL model)"),wje.forEach(t),cCr=i(le),LE=n(le,"LI",{});var Aje=s(LE);$8e=n(Aje,"STRONG",{});var aSt=s($8e);fCr=r(aSt,"distilbert"),aSt.forEach(t),mCr=r(Aje," \u2014 "),xJ=n(Aje,"A",{href:!0});var nSt=s(xJ);gCr=r(nSt,"TFDistilBertForMaskedLM"),nSt.forEach(t),hCr=r(Aje," (DistilBERT model)"),Aje.forEach(t),pCr=i(le),yE=n(le,"LI",{});var Lje=s(yE);k8e=n(Lje,"STRONG",{});var sSt=s(k8e);_Cr=r(sSt,"electra"),sSt.forEach(t),uCr=r(Lje," \u2014 "),$J=n(Lje,"A",{href:!0});var lSt=s($J);bCr=r(lSt,"TFElectraForPreTraining"),lSt.forEach(t),vCr=r(Lje," (ELECTRA model)"),Lje.forEach(t),FCr=i(le),xE=n(le,"LI",{});var yje=s(xE);S8e=n(yje,"STRONG",{});var iSt=s(S8e);TCr=r(iSt,"flaubert"),iSt.forEach(t),MCr=r(yje," \u2014 "),kJ=n(yje,"A",{href:!0});var dSt=s(kJ);ECr=r(dSt,"TFFlaubertWithLMHeadModel"),dSt.forEach(t),CCr=r(yje," (FlauBERT model)"),yje.forEach(t),wCr=i(le),$E=n(le,"LI",{});var xje=s($E);R8e=n(xje,"STRONG",{});var cSt=s(R8e);ACr=r(cSt,"funnel"),cSt.forEach(t),LCr=r(xje," \u2014 "),SJ=n(xje,"A",{href:!0});var fSt=s(SJ);yCr=r(fSt,"TFFunnelForPreTraining"),fSt.forEach(t),xCr=r(xje," (Funnel Transformer model)"),xje.forEach(t),$Cr=i(le),kE=n(le,"LI",{});var $je=s(kE);P8e=n($je,"STRONG",{});var mSt=s(P8e);kCr=r(mSt,"gpt2"),mSt.forEach(t),SCr=r($je," \u2014 "),RJ=n($je,"A",{href:!0});var gSt=s(RJ);RCr=r(gSt,"TFGPT2LMHeadModel"),gSt.forEach(t),PCr=r($je," (OpenAI GPT-2 model)"),$je.forEach(t),BCr=i(le),SE=n(le,"LI",{});var kje=s(SE);B8e=n(kje,"STRONG",{});var hSt=s(B8e);ICr=r(hSt,"layoutlm"),hSt.forEach(t),NCr=r(kje," \u2014 "),PJ=n(kje,"A",{href:!0});var pSt=s(PJ);qCr=r(pSt,"TFLayoutLMForMaskedLM"),pSt.forEach(t),jCr=r(kje," (LayoutLM model)"),kje.forEach(t),DCr=i(le),RE=n(le,"LI",{});var Sje=s(RE);I8e=n(Sje,"STRONG",{});var _St=s(I8e);GCr=r(_St,"lxmert"),_St.forEach(t),OCr=r(Sje," \u2014 "),BJ=n(Sje,"A",{href:!0});var uSt=s(BJ);VCr=r(uSt,"TFLxmertForPreTraining"),uSt.forEach(t),XCr=r(Sje," (LXMERT model)"),Sje.forEach(t),zCr=i(le),PE=n(le,"LI",{});var Rje=s(PE);N8e=n(Rje,"STRONG",{});var bSt=s(N8e);QCr=r(bSt,"mobilebert"),bSt.forEach(t),WCr=r(Rje," \u2014 "),IJ=n(Rje,"A",{href:!0});var vSt=s(IJ);HCr=r(vSt,"TFMobileBertForPreTraining"),vSt.forEach(t),UCr=r(Rje," (MobileBERT model)"),Rje.forEach(t),JCr=i(le),BE=n(le,"LI",{});var Pje=s(BE);q8e=n(Pje,"STRONG",{});var FSt=s(q8e);YCr=r(FSt,"mpnet"),FSt.forEach(t),KCr=r(Pje," \u2014 "),NJ=n(Pje,"A",{href:!0});var TSt=s(NJ);ZCr=r(TSt,"TFMPNetForMaskedLM"),TSt.forEach(t),e3r=r(Pje," (MPNet model)"),Pje.forEach(t),o3r=i(le),IE=n(le,"LI",{});var Bje=s(IE);j8e=n(Bje,"STRONG",{});var MSt=s(j8e);r3r=r(MSt,"openai-gpt"),MSt.forEach(t),t3r=r(Bje," \u2014 "),qJ=n(Bje,"A",{href:!0});var ESt=s(qJ);a3r=r(ESt,"TFOpenAIGPTLMHeadModel"),ESt.forEach(t),n3r=r(Bje," (OpenAI GPT model)"),Bje.forEach(t),s3r=i(le),NE=n(le,"LI",{});var Ije=s(NE);D8e=n(Ije,"STRONG",{});var CSt=s(D8e);l3r=r(CSt,"roberta"),CSt.forEach(t),i3r=r(Ije," \u2014 "),jJ=n(Ije,"A",{href:!0});var wSt=s(jJ);d3r=r(wSt,"TFRobertaForMaskedLM"),wSt.forEach(t),c3r=r(Ije," (RoBERTa model)"),Ije.forEach(t),f3r=i(le),qE=n(le,"LI",{});var Nje=s(qE);G8e=n(Nje,"STRONG",{});var ASt=s(G8e);m3r=r(ASt,"t5"),ASt.forEach(t),g3r=r(Nje," \u2014 "),DJ=n(Nje,"A",{href:!0});var LSt=s(DJ);h3r=r(LSt,"TFT5ForConditionalGeneration"),LSt.forEach(t),p3r=r(Nje," (T5 model)"),Nje.forEach(t),_3r=i(le),jE=n(le,"LI",{});var qje=s(jE);O8e=n(qje,"STRONG",{});var ySt=s(O8e);u3r=r(ySt,"tapas"),ySt.forEach(t),b3r=r(qje," \u2014 "),GJ=n(qje,"A",{href:!0});var xSt=s(GJ);v3r=r(xSt,"TFTapasForMaskedLM"),xSt.forEach(t),F3r=r(qje," (TAPAS model)"),qje.forEach(t),T3r=i(le),DE=n(le,"LI",{});var jje=s(DE);V8e=n(jje,"STRONG",{});var $St=s(V8e);M3r=r($St,"transfo-xl"),$St.forEach(t),E3r=r(jje," \u2014 "),OJ=n(jje,"A",{href:!0});var kSt=s(OJ);C3r=r(kSt,"TFTransfoXLLMHeadModel"),kSt.forEach(t),w3r=r(jje," (Transformer-XL model)"),jje.forEach(t),A3r=i(le),GE=n(le,"LI",{});var Dje=s(GE);X8e=n(Dje,"STRONG",{});var SSt=s(X8e);L3r=r(SSt,"vit_mae"),SSt.forEach(t),y3r=r(Dje," \u2014 "),VJ=n(Dje,"A",{href:!0});var RSt=s(VJ);x3r=r(RSt,"TFViTMAEForPreTraining"),RSt.forEach(t),$3r=r(Dje," (ViTMAE model)"),Dje.forEach(t),k3r=i(le),OE=n(le,"LI",{});var Gje=s(OE);z8e=n(Gje,"STRONG",{});var PSt=s(z8e);S3r=r(PSt,"xlm"),PSt.forEach(t),R3r=r(Gje," \u2014 "),XJ=n(Gje,"A",{href:!0});var BSt=s(XJ);P3r=r(BSt,"TFXLMWithLMHeadModel"),BSt.forEach(t),B3r=r(Gje," (XLM model)"),Gje.forEach(t),I3r=i(le),VE=n(le,"LI",{});var Oje=s(VE);Q8e=n(Oje,"STRONG",{});var ISt=s(Q8e);N3r=r(ISt,"xlm-roberta"),ISt.forEach(t),q3r=r(Oje," \u2014 "),zJ=n(Oje,"A",{href:!0});var NSt=s(zJ);j3r=r(NSt,"TFXLMRobertaForMaskedLM"),NSt.forEach(t),D3r=r(Oje," (XLM-RoBERTa model)"),Oje.forEach(t),G3r=i(le),XE=n(le,"LI",{});var Vje=s(XE);W8e=n(Vje,"STRONG",{});var qSt=s(W8e);O3r=r(qSt,"xlnet"),qSt.forEach(t),V3r=r(Vje," \u2014 "),QJ=n(Vje,"A",{href:!0});var jSt=s(QJ);X3r=r(jSt,"TFXLNetLMHeadModel"),jSt.forEach(t),z3r=r(Vje," (XLNet model)"),Vje.forEach(t),le.forEach(t),Q3r=i(Rl),T(zE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Rze=i(f),gc=n(f,"H2",{class:!0});var GWe=s(gc);QE=n(GWe,"A",{id:!0,class:!0,href:!0});var DSt=s(QE);H8e=n(DSt,"SPAN",{});var GSt=s(H8e);T(sx.$$.fragment,GSt),GSt.forEach(t),DSt.forEach(t),W3r=i(GWe),U8e=n(GWe,"SPAN",{});var OSt=s(U8e);H3r=r(OSt,"TFAutoModelForCausalLM"),OSt.forEach(t),GWe.forEach(t),Pze=i(f),ar=n(f,"DIV",{class:!0});var Pl=s(ar);T(lx.$$.fragment,Pl),U3r=i(Pl),hc=n(Pl,"P",{});var zte=s(hc);J3r=r(zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WJ=n(zte,"A",{href:!0});var VSt=s(WJ);Y3r=r(VSt,"from_pretrained()"),VSt.forEach(t),K3r=r(zte," class method or the "),HJ=n(zte,"A",{href:!0});var XSt=s(HJ);Z3r=r(XSt,"from_config()"),XSt.forEach(t),e5r=r(zte,` class
method.`),zte.forEach(t),o5r=i(Pl),ix=n(Pl,"P",{});var OWe=s(ix);r5r=r(OWe,"This class cannot be instantiated directly using "),J8e=n(OWe,"CODE",{});var zSt=s(J8e);t5r=r(zSt,"__init__()"),zSt.forEach(t),a5r=r(OWe," (throws an error)."),OWe.forEach(t),n5r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var m7=s(Bt);T(dx.$$.fragment,m7),s5r=i(m7),Y8e=n(m7,"P",{});var QSt=s(Y8e);l5r=r(QSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QSt.forEach(t),i5r=i(m7),pc=n(m7,"P",{});var Qte=s(pc);d5r=r(Qte,`Note:
Loading a model from its configuration file does `),K8e=n(Qte,"STRONG",{});var WSt=s(K8e);c5r=r(WSt,"not"),WSt.forEach(t),f5r=r(Qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(Qte,"A",{href:!0});var HSt=s(UJ);m5r=r(HSt,"from_pretrained()"),HSt.forEach(t),g5r=r(Qte," to load the model weights."),Qte.forEach(t),h5r=i(m7),T(WE.$$.fragment,m7),m7.forEach(t),p5r=i(Pl),Sr=n(Pl,"DIV",{class:!0});var Bl=s(Sr);T(cx.$$.fragment,Bl),_5r=i(Bl),Z8e=n(Bl,"P",{});var USt=s(Z8e);u5r=r(USt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),USt.forEach(t),b5r=i(Bl),dn=n(Bl,"P",{});var g7=s(dn);v5r=r(g7,"The model class to instantiate is selected based on the "),eMe=n(g7,"CODE",{});var JSt=s(eMe);F5r=r(JSt,"model_type"),JSt.forEach(t),T5r=r(g7,` property of the config object (either
passed as an argument or loaded from `),oMe=n(g7,"CODE",{});var YSt=s(oMe);M5r=r(YSt,"pretrained_model_name_or_path"),YSt.forEach(t),E5r=r(g7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=n(g7,"CODE",{});var KSt=s(rMe);C5r=r(KSt,"pretrained_model_name_or_path"),KSt.forEach(t),w5r=r(g7,":"),g7.forEach(t),A5r=i(Bl),Me=n(Bl,"UL",{});var Ce=s(Me);HE=n(Ce,"LI",{});var Xje=s(HE);tMe=n(Xje,"STRONG",{});var ZSt=s(tMe);L5r=r(ZSt,"bert"),ZSt.forEach(t),y5r=r(Xje," \u2014 "),JJ=n(Xje,"A",{href:!0});var eRt=s(JJ);x5r=r(eRt,"TFBertLMHeadModel"),eRt.forEach(t),$5r=r(Xje," (BERT model)"),Xje.forEach(t),k5r=i(Ce),UE=n(Ce,"LI",{});var zje=s(UE);aMe=n(zje,"STRONG",{});var oRt=s(aMe);S5r=r(oRt,"camembert"),oRt.forEach(t),R5r=r(zje," \u2014 "),YJ=n(zje,"A",{href:!0});var rRt=s(YJ);P5r=r(rRt,"TFCamembertForCausalLM"),rRt.forEach(t),B5r=r(zje," (CamemBERT model)"),zje.forEach(t),I5r=i(Ce),JE=n(Ce,"LI",{});var Qje=s(JE);nMe=n(Qje,"STRONG",{});var tRt=s(nMe);N5r=r(tRt,"ctrl"),tRt.forEach(t),q5r=r(Qje," \u2014 "),KJ=n(Qje,"A",{href:!0});var aRt=s(KJ);j5r=r(aRt,"TFCTRLLMHeadModel"),aRt.forEach(t),D5r=r(Qje," (CTRL model)"),Qje.forEach(t),G5r=i(Ce),YE=n(Ce,"LI",{});var Wje=s(YE);sMe=n(Wje,"STRONG",{});var nRt=s(sMe);O5r=r(nRt,"gpt2"),nRt.forEach(t),V5r=r(Wje," \u2014 "),ZJ=n(Wje,"A",{href:!0});var sRt=s(ZJ);X5r=r(sRt,"TFGPT2LMHeadModel"),sRt.forEach(t),z5r=r(Wje," (OpenAI GPT-2 model)"),Wje.forEach(t),Q5r=i(Ce),KE=n(Ce,"LI",{});var Hje=s(KE);lMe=n(Hje,"STRONG",{});var lRt=s(lMe);W5r=r(lRt,"gptj"),lRt.forEach(t),H5r=r(Hje," \u2014 "),eY=n(Hje,"A",{href:!0});var iRt=s(eY);U5r=r(iRt,"TFGPTJForCausalLM"),iRt.forEach(t),J5r=r(Hje," (GPT-J model)"),Hje.forEach(t),Y5r=i(Ce),ZE=n(Ce,"LI",{});var Uje=s(ZE);iMe=n(Uje,"STRONG",{});var dRt=s(iMe);K5r=r(dRt,"openai-gpt"),dRt.forEach(t),Z5r=r(Uje," \u2014 "),oY=n(Uje,"A",{href:!0});var cRt=s(oY);e0r=r(cRt,"TFOpenAIGPTLMHeadModel"),cRt.forEach(t),o0r=r(Uje," (OpenAI GPT model)"),Uje.forEach(t),r0r=i(Ce),eC=n(Ce,"LI",{});var Jje=s(eC);dMe=n(Jje,"STRONG",{});var fRt=s(dMe);t0r=r(fRt,"opt"),fRt.forEach(t),a0r=r(Jje," \u2014 "),rY=n(Jje,"A",{href:!0});var mRt=s(rY);n0r=r(mRt,"TFOPTForCausalLM"),mRt.forEach(t),s0r=r(Jje," (OPT model)"),Jje.forEach(t),l0r=i(Ce),oC=n(Ce,"LI",{});var Yje=s(oC);cMe=n(Yje,"STRONG",{});var gRt=s(cMe);i0r=r(gRt,"rembert"),gRt.forEach(t),d0r=r(Yje," \u2014 "),tY=n(Yje,"A",{href:!0});var hRt=s(tY);c0r=r(hRt,"TFRemBertForCausalLM"),hRt.forEach(t),f0r=r(Yje," (RemBERT model)"),Yje.forEach(t),m0r=i(Ce),rC=n(Ce,"LI",{});var Kje=s(rC);fMe=n(Kje,"STRONG",{});var pRt=s(fMe);g0r=r(pRt,"roberta"),pRt.forEach(t),h0r=r(Kje," \u2014 "),aY=n(Kje,"A",{href:!0});var _Rt=s(aY);p0r=r(_Rt,"TFRobertaForCausalLM"),_Rt.forEach(t),_0r=r(Kje," (RoBERTa model)"),Kje.forEach(t),u0r=i(Ce),tC=n(Ce,"LI",{});var Zje=s(tC);mMe=n(Zje,"STRONG",{});var uRt=s(mMe);b0r=r(uRt,"roformer"),uRt.forEach(t),v0r=r(Zje," \u2014 "),nY=n(Zje,"A",{href:!0});var bRt=s(nY);F0r=r(bRt,"TFRoFormerForCausalLM"),bRt.forEach(t),T0r=r(Zje," (RoFormer model)"),Zje.forEach(t),M0r=i(Ce),aC=n(Ce,"LI",{});var eDe=s(aC);gMe=n(eDe,"STRONG",{});var vRt=s(gMe);E0r=r(vRt,"transfo-xl"),vRt.forEach(t),C0r=r(eDe," \u2014 "),sY=n(eDe,"A",{href:!0});var FRt=s(sY);w0r=r(FRt,"TFTransfoXLLMHeadModel"),FRt.forEach(t),A0r=r(eDe," (Transformer-XL model)"),eDe.forEach(t),L0r=i(Ce),nC=n(Ce,"LI",{});var oDe=s(nC);hMe=n(oDe,"STRONG",{});var TRt=s(hMe);y0r=r(TRt,"xlm"),TRt.forEach(t),x0r=r(oDe," \u2014 "),lY=n(oDe,"A",{href:!0});var MRt=s(lY);$0r=r(MRt,"TFXLMWithLMHeadModel"),MRt.forEach(t),k0r=r(oDe," (XLM model)"),oDe.forEach(t),S0r=i(Ce),sC=n(Ce,"LI",{});var rDe=s(sC);pMe=n(rDe,"STRONG",{});var ERt=s(pMe);R0r=r(ERt,"xlnet"),ERt.forEach(t),P0r=r(rDe," \u2014 "),iY=n(rDe,"A",{href:!0});var CRt=s(iY);B0r=r(CRt,"TFXLNetLMHeadModel"),CRt.forEach(t),I0r=r(rDe," (XLNet model)"),rDe.forEach(t),Ce.forEach(t),N0r=i(Bl),T(lC.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),Bze=i(f),_c=n(f,"H2",{class:!0});var VWe=s(_c);iC=n(VWe,"A",{id:!0,class:!0,href:!0});var wRt=s(iC);_Me=n(wRt,"SPAN",{});var ARt=s(_Me);T(fx.$$.fragment,ARt),ARt.forEach(t),wRt.forEach(t),q0r=i(VWe),uMe=n(VWe,"SPAN",{});var LRt=s(uMe);j0r=r(LRt,"TFAutoModelForImageClassification"),LRt.forEach(t),VWe.forEach(t),Ize=i(f),nr=n(f,"DIV",{class:!0});var Il=s(nr);T(mx.$$.fragment,Il),D0r=i(Il),uc=n(Il,"P",{});var Wte=s(uc);G0r=r(Wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dY=n(Wte,"A",{href:!0});var yRt=s(dY);O0r=r(yRt,"from_pretrained()"),yRt.forEach(t),V0r=r(Wte," class method or the "),cY=n(Wte,"A",{href:!0});var xRt=s(cY);X0r=r(xRt,"from_config()"),xRt.forEach(t),z0r=r(Wte,` class
method.`),Wte.forEach(t),Q0r=i(Il),gx=n(Il,"P",{});var XWe=s(gx);W0r=r(XWe,"This class cannot be instantiated directly using "),bMe=n(XWe,"CODE",{});var $Rt=s(bMe);H0r=r($Rt,"__init__()"),$Rt.forEach(t),U0r=r(XWe," (throws an error)."),XWe.forEach(t),J0r=i(Il),It=n(Il,"DIV",{class:!0});var h7=s(It);T(hx.$$.fragment,h7),Y0r=i(h7),vMe=n(h7,"P",{});var kRt=s(vMe);K0r=r(kRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kRt.forEach(t),Z0r=i(h7),bc=n(h7,"P",{});var Hte=s(bc);ewr=r(Hte,`Note:
Loading a model from its configuration file does `),FMe=n(Hte,"STRONG",{});var SRt=s(FMe);owr=r(SRt,"not"),SRt.forEach(t),rwr=r(Hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(Hte,"A",{href:!0});var RRt=s(fY);twr=r(RRt,"from_pretrained()"),RRt.forEach(t),awr=r(Hte," to load the model weights."),Hte.forEach(t),nwr=i(h7),T(dC.$$.fragment,h7),h7.forEach(t),swr=i(Il),Rr=n(Il,"DIV",{class:!0});var Nl=s(Rr);T(px.$$.fragment,Nl),lwr=i(Nl),TMe=n(Nl,"P",{});var PRt=s(TMe);iwr=r(PRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PRt.forEach(t),dwr=i(Nl),cn=n(Nl,"P",{});var p7=s(cn);cwr=r(p7,"The model class to instantiate is selected based on the "),MMe=n(p7,"CODE",{});var BRt=s(MMe);fwr=r(BRt,"model_type"),BRt.forEach(t),mwr=r(p7,` property of the config object (either
passed as an argument or loaded from `),EMe=n(p7,"CODE",{});var IRt=s(EMe);gwr=r(IRt,"pretrained_model_name_or_path"),IRt.forEach(t),hwr=r(p7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=n(p7,"CODE",{});var NRt=s(CMe);pwr=r(NRt,"pretrained_model_name_or_path"),NRt.forEach(t),_wr=r(p7,":"),p7.forEach(t),uwr=i(Nl),Ve=n(Nl,"UL",{});var Mo=s(Ve);cC=n(Mo,"LI",{});var tDe=s(cC);wMe=n(tDe,"STRONG",{});var qRt=s(wMe);bwr=r(qRt,"convnext"),qRt.forEach(t),vwr=r(tDe," \u2014 "),mY=n(tDe,"A",{href:!0});var jRt=s(mY);Fwr=r(jRt,"TFConvNextForImageClassification"),jRt.forEach(t),Twr=r(tDe," (ConvNeXT model)"),tDe.forEach(t),Mwr=i(Mo),fC=n(Mo,"LI",{});var aDe=s(fC);AMe=n(aDe,"STRONG",{});var DRt=s(AMe);Ewr=r(DRt,"data2vec-vision"),DRt.forEach(t),Cwr=r(aDe," \u2014 "),gY=n(aDe,"A",{href:!0});var GRt=s(gY);wwr=r(GRt,"TFData2VecVisionForImageClassification"),GRt.forEach(t),Awr=r(aDe," (Data2VecVision model)"),aDe.forEach(t),Lwr=i(Mo),Ks=n(Mo,"LI",{});var GS=s(Ks);LMe=n(GS,"STRONG",{});var ORt=s(LMe);ywr=r(ORt,"deit"),ORt.forEach(t),xwr=r(GS," \u2014 "),hY=n(GS,"A",{href:!0});var VRt=s(hY);$wr=r(VRt,"TFDeiTForImageClassification"),VRt.forEach(t),kwr=r(GS," or "),pY=n(GS,"A",{href:!0});var XRt=s(pY);Swr=r(XRt,"TFDeiTForImageClassificationWithTeacher"),XRt.forEach(t),Rwr=r(GS," (DeiT model)"),GS.forEach(t),Pwr=i(Mo),mC=n(Mo,"LI",{});var nDe=s(mC);yMe=n(nDe,"STRONG",{});var zRt=s(yMe);Bwr=r(zRt,"regnet"),zRt.forEach(t),Iwr=r(nDe," \u2014 "),_Y=n(nDe,"A",{href:!0});var QRt=s(_Y);Nwr=r(QRt,"TFRegNetForImageClassification"),QRt.forEach(t),qwr=r(nDe," (RegNet model)"),nDe.forEach(t),jwr=i(Mo),gC=n(Mo,"LI",{});var sDe=s(gC);xMe=n(sDe,"STRONG",{});var WRt=s(xMe);Dwr=r(WRt,"resnet"),WRt.forEach(t),Gwr=r(sDe," \u2014 "),uY=n(sDe,"A",{href:!0});var HRt=s(uY);Owr=r(HRt,"TFResNetForImageClassification"),HRt.forEach(t),Vwr=r(sDe," (ResNet model)"),sDe.forEach(t),Xwr=i(Mo),hC=n(Mo,"LI",{});var lDe=s(hC);$Me=n(lDe,"STRONG",{});var URt=s($Me);zwr=r(URt,"segformer"),URt.forEach(t),Qwr=r(lDe," \u2014 "),bY=n(lDe,"A",{href:!0});var JRt=s(bY);Wwr=r(JRt,"TFSegformerForImageClassification"),JRt.forEach(t),Hwr=r(lDe," (SegFormer model)"),lDe.forEach(t),Uwr=i(Mo),pC=n(Mo,"LI",{});var iDe=s(pC);kMe=n(iDe,"STRONG",{});var YRt=s(kMe);Jwr=r(YRt,"swin"),YRt.forEach(t),Ywr=r(iDe," \u2014 "),vY=n(iDe,"A",{href:!0});var KRt=s(vY);Kwr=r(KRt,"TFSwinForImageClassification"),KRt.forEach(t),Zwr=r(iDe," (Swin Transformer model)"),iDe.forEach(t),eAr=i(Mo),_C=n(Mo,"LI",{});var dDe=s(_C);SMe=n(dDe,"STRONG",{});var ZRt=s(SMe);oAr=r(ZRt,"vit"),ZRt.forEach(t),rAr=r(dDe," \u2014 "),FY=n(dDe,"A",{href:!0});var ePt=s(FY);tAr=r(ePt,"TFViTForImageClassification"),ePt.forEach(t),aAr=r(dDe," (ViT model)"),dDe.forEach(t),Mo.forEach(t),nAr=i(Nl),T(uC.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),Nze=i(f),vc=n(f,"H2",{class:!0});var zWe=s(vc);bC=n(zWe,"A",{id:!0,class:!0,href:!0});var oPt=s(bC);RMe=n(oPt,"SPAN",{});var rPt=s(RMe);T(_x.$$.fragment,rPt),rPt.forEach(t),oPt.forEach(t),sAr=i(zWe),PMe=n(zWe,"SPAN",{});var tPt=s(PMe);lAr=r(tPt,"TFAutoModelForMaskedLM"),tPt.forEach(t),zWe.forEach(t),qze=i(f),sr=n(f,"DIV",{class:!0});var ql=s(sr);T(ux.$$.fragment,ql),iAr=i(ql),Fc=n(ql,"P",{});var Ute=s(Fc);dAr=r(Ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TY=n(Ute,"A",{href:!0});var aPt=s(TY);cAr=r(aPt,"from_pretrained()"),aPt.forEach(t),fAr=r(Ute," class method or the "),MY=n(Ute,"A",{href:!0});var nPt=s(MY);mAr=r(nPt,"from_config()"),nPt.forEach(t),gAr=r(Ute,` class
method.`),Ute.forEach(t),hAr=i(ql),bx=n(ql,"P",{});var QWe=s(bx);pAr=r(QWe,"This class cannot be instantiated directly using "),BMe=n(QWe,"CODE",{});var sPt=s(BMe);_Ar=r(sPt,"__init__()"),sPt.forEach(t),uAr=r(QWe," (throws an error)."),QWe.forEach(t),bAr=i(ql),Nt=n(ql,"DIV",{class:!0});var _7=s(Nt);T(vx.$$.fragment,_7),vAr=i(_7),IMe=n(_7,"P",{});var lPt=s(IMe);FAr=r(lPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lPt.forEach(t),TAr=i(_7),Tc=n(_7,"P",{});var Jte=s(Tc);MAr=r(Jte,`Note:
Loading a model from its configuration file does `),NMe=n(Jte,"STRONG",{});var iPt=s(NMe);EAr=r(iPt,"not"),iPt.forEach(t),CAr=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(Jte,"A",{href:!0});var dPt=s(EY);wAr=r(dPt,"from_pretrained()"),dPt.forEach(t),AAr=r(Jte," to load the model weights."),Jte.forEach(t),LAr=i(_7),T(vC.$$.fragment,_7),_7.forEach(t),yAr=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(Fx.$$.fragment,jl),xAr=i(jl),qMe=n(jl,"P",{});var cPt=s(qMe);$Ar=r(cPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cPt.forEach(t),kAr=i(jl),fn=n(jl,"P",{});var u7=s(fn);SAr=r(u7,"The model class to instantiate is selected based on the "),jMe=n(u7,"CODE",{});var fPt=s(jMe);RAr=r(fPt,"model_type"),fPt.forEach(t),PAr=r(u7,` property of the config object (either
passed as an argument or loaded from `),DMe=n(u7,"CODE",{});var mPt=s(DMe);BAr=r(mPt,"pretrained_model_name_or_path"),mPt.forEach(t),IAr=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=n(u7,"CODE",{});var gPt=s(GMe);NAr=r(gPt,"pretrained_model_name_or_path"),gPt.forEach(t),qAr=r(u7,":"),u7.forEach(t),jAr=i(jl),ie=n(jl,"UL",{});var me=s(ie);FC=n(me,"LI",{});var cDe=s(FC);OMe=n(cDe,"STRONG",{});var hPt=s(OMe);DAr=r(hPt,"albert"),hPt.forEach(t),GAr=r(cDe," \u2014 "),CY=n(cDe,"A",{href:!0});var pPt=s(CY);OAr=r(pPt,"TFAlbertForMaskedLM"),pPt.forEach(t),VAr=r(cDe," (ALBERT model)"),cDe.forEach(t),XAr=i(me),TC=n(me,"LI",{});var fDe=s(TC);VMe=n(fDe,"STRONG",{});var _Pt=s(VMe);zAr=r(_Pt,"bert"),_Pt.forEach(t),QAr=r(fDe," \u2014 "),wY=n(fDe,"A",{href:!0});var uPt=s(wY);WAr=r(uPt,"TFBertForMaskedLM"),uPt.forEach(t),HAr=r(fDe," (BERT model)"),fDe.forEach(t),UAr=i(me),MC=n(me,"LI",{});var mDe=s(MC);XMe=n(mDe,"STRONG",{});var bPt=s(XMe);JAr=r(bPt,"camembert"),bPt.forEach(t),YAr=r(mDe," \u2014 "),AY=n(mDe,"A",{href:!0});var vPt=s(AY);KAr=r(vPt,"TFCamembertForMaskedLM"),vPt.forEach(t),ZAr=r(mDe," (CamemBERT model)"),mDe.forEach(t),e6r=i(me),EC=n(me,"LI",{});var gDe=s(EC);zMe=n(gDe,"STRONG",{});var FPt=s(zMe);o6r=r(FPt,"convbert"),FPt.forEach(t),r6r=r(gDe," \u2014 "),LY=n(gDe,"A",{href:!0});var TPt=s(LY);t6r=r(TPt,"TFConvBertForMaskedLM"),TPt.forEach(t),a6r=r(gDe," (ConvBERT model)"),gDe.forEach(t),n6r=i(me),CC=n(me,"LI",{});var hDe=s(CC);QMe=n(hDe,"STRONG",{});var MPt=s(QMe);s6r=r(MPt,"deberta"),MPt.forEach(t),l6r=r(hDe," \u2014 "),yY=n(hDe,"A",{href:!0});var EPt=s(yY);i6r=r(EPt,"TFDebertaForMaskedLM"),EPt.forEach(t),d6r=r(hDe," (DeBERTa model)"),hDe.forEach(t),c6r=i(me),wC=n(me,"LI",{});var pDe=s(wC);WMe=n(pDe,"STRONG",{});var CPt=s(WMe);f6r=r(CPt,"deberta-v2"),CPt.forEach(t),m6r=r(pDe," \u2014 "),xY=n(pDe,"A",{href:!0});var wPt=s(xY);g6r=r(wPt,"TFDebertaV2ForMaskedLM"),wPt.forEach(t),h6r=r(pDe," (DeBERTa-v2 model)"),pDe.forEach(t),p6r=i(me),AC=n(me,"LI",{});var _De=s(AC);HMe=n(_De,"STRONG",{});var APt=s(HMe);_6r=r(APt,"distilbert"),APt.forEach(t),u6r=r(_De," \u2014 "),$Y=n(_De,"A",{href:!0});var LPt=s($Y);b6r=r(LPt,"TFDistilBertForMaskedLM"),LPt.forEach(t),v6r=r(_De," (DistilBERT model)"),_De.forEach(t),F6r=i(me),LC=n(me,"LI",{});var uDe=s(LC);UMe=n(uDe,"STRONG",{});var yPt=s(UMe);T6r=r(yPt,"electra"),yPt.forEach(t),M6r=r(uDe," \u2014 "),kY=n(uDe,"A",{href:!0});var xPt=s(kY);E6r=r(xPt,"TFElectraForMaskedLM"),xPt.forEach(t),C6r=r(uDe," (ELECTRA model)"),uDe.forEach(t),w6r=i(me),yC=n(me,"LI",{});var bDe=s(yC);JMe=n(bDe,"STRONG",{});var $Pt=s(JMe);A6r=r($Pt,"flaubert"),$Pt.forEach(t),L6r=r(bDe," \u2014 "),SY=n(bDe,"A",{href:!0});var kPt=s(SY);y6r=r(kPt,"TFFlaubertWithLMHeadModel"),kPt.forEach(t),x6r=r(bDe," (FlauBERT model)"),bDe.forEach(t),$6r=i(me),xC=n(me,"LI",{});var vDe=s(xC);YMe=n(vDe,"STRONG",{});var SPt=s(YMe);k6r=r(SPt,"funnel"),SPt.forEach(t),S6r=r(vDe," \u2014 "),RY=n(vDe,"A",{href:!0});var RPt=s(RY);R6r=r(RPt,"TFFunnelForMaskedLM"),RPt.forEach(t),P6r=r(vDe," (Funnel Transformer model)"),vDe.forEach(t),B6r=i(me),$C=n(me,"LI",{});var FDe=s($C);KMe=n(FDe,"STRONG",{});var PPt=s(KMe);I6r=r(PPt,"layoutlm"),PPt.forEach(t),N6r=r(FDe," \u2014 "),PY=n(FDe,"A",{href:!0});var BPt=s(PY);q6r=r(BPt,"TFLayoutLMForMaskedLM"),BPt.forEach(t),j6r=r(FDe," (LayoutLM model)"),FDe.forEach(t),D6r=i(me),kC=n(me,"LI",{});var TDe=s(kC);ZMe=n(TDe,"STRONG",{});var IPt=s(ZMe);G6r=r(IPt,"longformer"),IPt.forEach(t),O6r=r(TDe," \u2014 "),BY=n(TDe,"A",{href:!0});var NPt=s(BY);V6r=r(NPt,"TFLongformerForMaskedLM"),NPt.forEach(t),X6r=r(TDe," (Longformer model)"),TDe.forEach(t),z6r=i(me),SC=n(me,"LI",{});var MDe=s(SC);eEe=n(MDe,"STRONG",{});var qPt=s(eEe);Q6r=r(qPt,"mobilebert"),qPt.forEach(t),W6r=r(MDe," \u2014 "),IY=n(MDe,"A",{href:!0});var jPt=s(IY);H6r=r(jPt,"TFMobileBertForMaskedLM"),jPt.forEach(t),U6r=r(MDe," (MobileBERT model)"),MDe.forEach(t),J6r=i(me),RC=n(me,"LI",{});var EDe=s(RC);oEe=n(EDe,"STRONG",{});var DPt=s(oEe);Y6r=r(DPt,"mpnet"),DPt.forEach(t),K6r=r(EDe," \u2014 "),NY=n(EDe,"A",{href:!0});var GPt=s(NY);Z6r=r(GPt,"TFMPNetForMaskedLM"),GPt.forEach(t),e7r=r(EDe," (MPNet model)"),EDe.forEach(t),o7r=i(me),PC=n(me,"LI",{});var CDe=s(PC);rEe=n(CDe,"STRONG",{});var OPt=s(rEe);r7r=r(OPt,"rembert"),OPt.forEach(t),t7r=r(CDe," \u2014 "),qY=n(CDe,"A",{href:!0});var VPt=s(qY);a7r=r(VPt,"TFRemBertForMaskedLM"),VPt.forEach(t),n7r=r(CDe," (RemBERT model)"),CDe.forEach(t),s7r=i(me),BC=n(me,"LI",{});var wDe=s(BC);tEe=n(wDe,"STRONG",{});var XPt=s(tEe);l7r=r(XPt,"roberta"),XPt.forEach(t),i7r=r(wDe," \u2014 "),jY=n(wDe,"A",{href:!0});var zPt=s(jY);d7r=r(zPt,"TFRobertaForMaskedLM"),zPt.forEach(t),c7r=r(wDe," (RoBERTa model)"),wDe.forEach(t),f7r=i(me),IC=n(me,"LI",{});var ADe=s(IC);aEe=n(ADe,"STRONG",{});var QPt=s(aEe);m7r=r(QPt,"roformer"),QPt.forEach(t),g7r=r(ADe," \u2014 "),DY=n(ADe,"A",{href:!0});var WPt=s(DY);h7r=r(WPt,"TFRoFormerForMaskedLM"),WPt.forEach(t),p7r=r(ADe," (RoFormer model)"),ADe.forEach(t),_7r=i(me),NC=n(me,"LI",{});var LDe=s(NC);nEe=n(LDe,"STRONG",{});var HPt=s(nEe);u7r=r(HPt,"tapas"),HPt.forEach(t),b7r=r(LDe," \u2014 "),GY=n(LDe,"A",{href:!0});var UPt=s(GY);v7r=r(UPt,"TFTapasForMaskedLM"),UPt.forEach(t),F7r=r(LDe," (TAPAS model)"),LDe.forEach(t),T7r=i(me),qC=n(me,"LI",{});var yDe=s(qC);sEe=n(yDe,"STRONG",{});var JPt=s(sEe);M7r=r(JPt,"xlm"),JPt.forEach(t),E7r=r(yDe," \u2014 "),OY=n(yDe,"A",{href:!0});var YPt=s(OY);C7r=r(YPt,"TFXLMWithLMHeadModel"),YPt.forEach(t),w7r=r(yDe," (XLM model)"),yDe.forEach(t),A7r=i(me),jC=n(me,"LI",{});var xDe=s(jC);lEe=n(xDe,"STRONG",{});var KPt=s(lEe);L7r=r(KPt,"xlm-roberta"),KPt.forEach(t),y7r=r(xDe," \u2014 "),VY=n(xDe,"A",{href:!0});var ZPt=s(VY);x7r=r(ZPt,"TFXLMRobertaForMaskedLM"),ZPt.forEach(t),$7r=r(xDe," (XLM-RoBERTa model)"),xDe.forEach(t),me.forEach(t),k7r=i(jl),T(DC.$$.fragment,jl),jl.forEach(t),ql.forEach(t),jze=i(f),Mc=n(f,"H2",{class:!0});var WWe=s(Mc);GC=n(WWe,"A",{id:!0,class:!0,href:!0});var eBt=s(GC);iEe=n(eBt,"SPAN",{});var oBt=s(iEe);T(Tx.$$.fragment,oBt),oBt.forEach(t),eBt.forEach(t),S7r=i(WWe),dEe=n(WWe,"SPAN",{});var rBt=s(dEe);R7r=r(rBt,"TFAutoModelForSeq2SeqLM"),rBt.forEach(t),WWe.forEach(t),Dze=i(f),lr=n(f,"DIV",{class:!0});var Dl=s(lr);T(Mx.$$.fragment,Dl),P7r=i(Dl),Ec=n(Dl,"P",{});var Yte=s(Ec);B7r=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XY=n(Yte,"A",{href:!0});var tBt=s(XY);I7r=r(tBt,"from_pretrained()"),tBt.forEach(t),N7r=r(Yte," class method or the "),zY=n(Yte,"A",{href:!0});var aBt=s(zY);q7r=r(aBt,"from_config()"),aBt.forEach(t),j7r=r(Yte,` class
method.`),Yte.forEach(t),D7r=i(Dl),Ex=n(Dl,"P",{});var HWe=s(Ex);G7r=r(HWe,"This class cannot be instantiated directly using "),cEe=n(HWe,"CODE",{});var nBt=s(cEe);O7r=r(nBt,"__init__()"),nBt.forEach(t),V7r=r(HWe," (throws an error)."),HWe.forEach(t),X7r=i(Dl),qt=n(Dl,"DIV",{class:!0});var b7=s(qt);T(Cx.$$.fragment,b7),z7r=i(b7),fEe=n(b7,"P",{});var sBt=s(fEe);Q7r=r(sBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sBt.forEach(t),W7r=i(b7),Cc=n(b7,"P",{});var Kte=s(Cc);H7r=r(Kte,`Note:
Loading a model from its configuration file does `),mEe=n(Kte,"STRONG",{});var lBt=s(mEe);U7r=r(lBt,"not"),lBt.forEach(t),J7r=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(Kte,"A",{href:!0});var iBt=s(QY);Y7r=r(iBt,"from_pretrained()"),iBt.forEach(t),K7r=r(Kte," to load the model weights."),Kte.forEach(t),Z7r=i(b7),T(OC.$$.fragment,b7),b7.forEach(t),eLr=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(wx.$$.fragment,Gl),oLr=i(Gl),gEe=n(Gl,"P",{});var dBt=s(gEe);rLr=r(dBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dBt.forEach(t),tLr=i(Gl),mn=n(Gl,"P",{});var v7=s(mn);aLr=r(v7,"The model class to instantiate is selected based on the "),hEe=n(v7,"CODE",{});var cBt=s(hEe);nLr=r(cBt,"model_type"),cBt.forEach(t),sLr=r(v7,` property of the config object (either
passed as an argument or loaded from `),pEe=n(v7,"CODE",{});var fBt=s(pEe);lLr=r(fBt,"pretrained_model_name_or_path"),fBt.forEach(t),iLr=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ee=n(v7,"CODE",{});var mBt=s(_Ee);dLr=r(mBt,"pretrained_model_name_or_path"),mBt.forEach(t),cLr=r(v7,":"),v7.forEach(t),fLr=i(Gl),ye=n(Gl,"UL",{});var Ie=s(ye);VC=n(Ie,"LI",{});var $De=s(VC);uEe=n($De,"STRONG",{});var gBt=s(uEe);mLr=r(gBt,"bart"),gBt.forEach(t),gLr=r($De," \u2014 "),WY=n($De,"A",{href:!0});var hBt=s(WY);hLr=r(hBt,"TFBartForConditionalGeneration"),hBt.forEach(t),pLr=r($De," (BART model)"),$De.forEach(t),_Lr=i(Ie),XC=n(Ie,"LI",{});var kDe=s(XC);bEe=n(kDe,"STRONG",{});var pBt=s(bEe);uLr=r(pBt,"blenderbot"),pBt.forEach(t),bLr=r(kDe," \u2014 "),HY=n(kDe,"A",{href:!0});var _Bt=s(HY);vLr=r(_Bt,"TFBlenderbotForConditionalGeneration"),_Bt.forEach(t),FLr=r(kDe," (Blenderbot model)"),kDe.forEach(t),TLr=i(Ie),zC=n(Ie,"LI",{});var SDe=s(zC);vEe=n(SDe,"STRONG",{});var uBt=s(vEe);MLr=r(uBt,"blenderbot-small"),uBt.forEach(t),ELr=r(SDe," \u2014 "),UY=n(SDe,"A",{href:!0});var bBt=s(UY);CLr=r(bBt,"TFBlenderbotSmallForConditionalGeneration"),bBt.forEach(t),wLr=r(SDe," (BlenderbotSmall model)"),SDe.forEach(t),ALr=i(Ie),QC=n(Ie,"LI",{});var RDe=s(QC);FEe=n(RDe,"STRONG",{});var vBt=s(FEe);LLr=r(vBt,"encoder-decoder"),vBt.forEach(t),yLr=r(RDe," \u2014 "),JY=n(RDe,"A",{href:!0});var FBt=s(JY);xLr=r(FBt,"TFEncoderDecoderModel"),FBt.forEach(t),$Lr=r(RDe," (Encoder decoder model)"),RDe.forEach(t),kLr=i(Ie),WC=n(Ie,"LI",{});var PDe=s(WC);TEe=n(PDe,"STRONG",{});var TBt=s(TEe);SLr=r(TBt,"led"),TBt.forEach(t),RLr=r(PDe," \u2014 "),YY=n(PDe,"A",{href:!0});var MBt=s(YY);PLr=r(MBt,"TFLEDForConditionalGeneration"),MBt.forEach(t),BLr=r(PDe," (LED model)"),PDe.forEach(t),ILr=i(Ie),HC=n(Ie,"LI",{});var BDe=s(HC);MEe=n(BDe,"STRONG",{});var EBt=s(MEe);NLr=r(EBt,"marian"),EBt.forEach(t),qLr=r(BDe," \u2014 "),KY=n(BDe,"A",{href:!0});var CBt=s(KY);jLr=r(CBt,"TFMarianMTModel"),CBt.forEach(t),DLr=r(BDe," (Marian model)"),BDe.forEach(t),GLr=i(Ie),UC=n(Ie,"LI",{});var IDe=s(UC);EEe=n(IDe,"STRONG",{});var wBt=s(EEe);OLr=r(wBt,"mbart"),wBt.forEach(t),VLr=r(IDe," \u2014 "),ZY=n(IDe,"A",{href:!0});var ABt=s(ZY);XLr=r(ABt,"TFMBartForConditionalGeneration"),ABt.forEach(t),zLr=r(IDe," (mBART model)"),IDe.forEach(t),QLr=i(Ie),JC=n(Ie,"LI",{});var NDe=s(JC);CEe=n(NDe,"STRONG",{});var LBt=s(CEe);WLr=r(LBt,"mt5"),LBt.forEach(t),HLr=r(NDe," \u2014 "),eK=n(NDe,"A",{href:!0});var yBt=s(eK);ULr=r(yBt,"TFMT5ForConditionalGeneration"),yBt.forEach(t),JLr=r(NDe," (MT5 model)"),NDe.forEach(t),YLr=i(Ie),YC=n(Ie,"LI",{});var qDe=s(YC);wEe=n(qDe,"STRONG",{});var xBt=s(wEe);KLr=r(xBt,"pegasus"),xBt.forEach(t),ZLr=r(qDe," \u2014 "),oK=n(qDe,"A",{href:!0});var $Bt=s(oK);eyr=r($Bt,"TFPegasusForConditionalGeneration"),$Bt.forEach(t),oyr=r(qDe," (Pegasus model)"),qDe.forEach(t),ryr=i(Ie),KC=n(Ie,"LI",{});var jDe=s(KC);AEe=n(jDe,"STRONG",{});var kBt=s(AEe);tyr=r(kBt,"t5"),kBt.forEach(t),ayr=r(jDe," \u2014 "),rK=n(jDe,"A",{href:!0});var SBt=s(rK);nyr=r(SBt,"TFT5ForConditionalGeneration"),SBt.forEach(t),syr=r(jDe," (T5 model)"),jDe.forEach(t),Ie.forEach(t),lyr=i(Gl),T(ZC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Gze=i(f),wc=n(f,"H2",{class:!0});var UWe=s(wc);e3=n(UWe,"A",{id:!0,class:!0,href:!0});var RBt=s(e3);LEe=n(RBt,"SPAN",{});var PBt=s(LEe);T(Ax.$$.fragment,PBt),PBt.forEach(t),RBt.forEach(t),iyr=i(UWe),yEe=n(UWe,"SPAN",{});var BBt=s(yEe);dyr=r(BBt,"TFAutoModelForSequenceClassification"),BBt.forEach(t),UWe.forEach(t),Oze=i(f),ir=n(f,"DIV",{class:!0});var Ol=s(ir);T(Lx.$$.fragment,Ol),cyr=i(Ol),Ac=n(Ol,"P",{});var Zte=s(Ac);fyr=r(Zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tK=n(Zte,"A",{href:!0});var IBt=s(tK);myr=r(IBt,"from_pretrained()"),IBt.forEach(t),gyr=r(Zte," class method or the "),aK=n(Zte,"A",{href:!0});var NBt=s(aK);hyr=r(NBt,"from_config()"),NBt.forEach(t),pyr=r(Zte,` class
method.`),Zte.forEach(t),_yr=i(Ol),yx=n(Ol,"P",{});var JWe=s(yx);uyr=r(JWe,"This class cannot be instantiated directly using "),xEe=n(JWe,"CODE",{});var qBt=s(xEe);byr=r(qBt,"__init__()"),qBt.forEach(t),vyr=r(JWe," (throws an error)."),JWe.forEach(t),Fyr=i(Ol),jt=n(Ol,"DIV",{class:!0});var F7=s(jt);T(xx.$$.fragment,F7),Tyr=i(F7),$Ee=n(F7,"P",{});var jBt=s($Ee);Myr=r(jBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jBt.forEach(t),Eyr=i(F7),Lc=n(F7,"P",{});var eae=s(Lc);Cyr=r(eae,`Note:
Loading a model from its configuration file does `),kEe=n(eae,"STRONG",{});var DBt=s(kEe);wyr=r(DBt,"not"),DBt.forEach(t),Ayr=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=n(eae,"A",{href:!0});var GBt=s(nK);Lyr=r(GBt,"from_pretrained()"),GBt.forEach(t),yyr=r(eae," to load the model weights."),eae.forEach(t),xyr=i(F7),T(o3.$$.fragment,F7),F7.forEach(t),$yr=i(Ol),Ir=n(Ol,"DIV",{class:!0});var Vl=s(Ir);T($x.$$.fragment,Vl),kyr=i(Vl),SEe=n(Vl,"P",{});var OBt=s(SEe);Syr=r(OBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),OBt.forEach(t),Ryr=i(Vl),gn=n(Vl,"P",{});var T7=s(gn);Pyr=r(T7,"The model class to instantiate is selected based on the "),REe=n(T7,"CODE",{});var VBt=s(REe);Byr=r(VBt,"model_type"),VBt.forEach(t),Iyr=r(T7,` property of the config object (either
passed as an argument or loaded from `),PEe=n(T7,"CODE",{});var XBt=s(PEe);Nyr=r(XBt,"pretrained_model_name_or_path"),XBt.forEach(t),qyr=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BEe=n(T7,"CODE",{});var zBt=s(BEe);jyr=r(zBt,"pretrained_model_name_or_path"),zBt.forEach(t),Dyr=r(T7,":"),T7.forEach(t),Gyr=i(Vl),te=n(Vl,"UL",{});var ne=s(te);r3=n(ne,"LI",{});var DDe=s(r3);IEe=n(DDe,"STRONG",{});var QBt=s(IEe);Oyr=r(QBt,"albert"),QBt.forEach(t),Vyr=r(DDe," \u2014 "),sK=n(DDe,"A",{href:!0});var WBt=s(sK);Xyr=r(WBt,"TFAlbertForSequenceClassification"),WBt.forEach(t),zyr=r(DDe," (ALBERT model)"),DDe.forEach(t),Qyr=i(ne),t3=n(ne,"LI",{});var GDe=s(t3);NEe=n(GDe,"STRONG",{});var HBt=s(NEe);Wyr=r(HBt,"bert"),HBt.forEach(t),Hyr=r(GDe," \u2014 "),lK=n(GDe,"A",{href:!0});var UBt=s(lK);Uyr=r(UBt,"TFBertForSequenceClassification"),UBt.forEach(t),Jyr=r(GDe," (BERT model)"),GDe.forEach(t),Yyr=i(ne),a3=n(ne,"LI",{});var ODe=s(a3);qEe=n(ODe,"STRONG",{});var JBt=s(qEe);Kyr=r(JBt,"camembert"),JBt.forEach(t),Zyr=r(ODe," \u2014 "),iK=n(ODe,"A",{href:!0});var YBt=s(iK);e9r=r(YBt,"TFCamembertForSequenceClassification"),YBt.forEach(t),o9r=r(ODe," (CamemBERT model)"),ODe.forEach(t),r9r=i(ne),n3=n(ne,"LI",{});var VDe=s(n3);jEe=n(VDe,"STRONG",{});var KBt=s(jEe);t9r=r(KBt,"convbert"),KBt.forEach(t),a9r=r(VDe," \u2014 "),dK=n(VDe,"A",{href:!0});var ZBt=s(dK);n9r=r(ZBt,"TFConvBertForSequenceClassification"),ZBt.forEach(t),s9r=r(VDe," (ConvBERT model)"),VDe.forEach(t),l9r=i(ne),s3=n(ne,"LI",{});var XDe=s(s3);DEe=n(XDe,"STRONG",{});var eIt=s(DEe);i9r=r(eIt,"ctrl"),eIt.forEach(t),d9r=r(XDe," \u2014 "),cK=n(XDe,"A",{href:!0});var oIt=s(cK);c9r=r(oIt,"TFCTRLForSequenceClassification"),oIt.forEach(t),f9r=r(XDe," (CTRL model)"),XDe.forEach(t),m9r=i(ne),l3=n(ne,"LI",{});var zDe=s(l3);GEe=n(zDe,"STRONG",{});var rIt=s(GEe);g9r=r(rIt,"deberta"),rIt.forEach(t),h9r=r(zDe," \u2014 "),fK=n(zDe,"A",{href:!0});var tIt=s(fK);p9r=r(tIt,"TFDebertaForSequenceClassification"),tIt.forEach(t),_9r=r(zDe," (DeBERTa model)"),zDe.forEach(t),u9r=i(ne),i3=n(ne,"LI",{});var QDe=s(i3);OEe=n(QDe,"STRONG",{});var aIt=s(OEe);b9r=r(aIt,"deberta-v2"),aIt.forEach(t),v9r=r(QDe," \u2014 "),mK=n(QDe,"A",{href:!0});var nIt=s(mK);F9r=r(nIt,"TFDebertaV2ForSequenceClassification"),nIt.forEach(t),T9r=r(QDe," (DeBERTa-v2 model)"),QDe.forEach(t),M9r=i(ne),d3=n(ne,"LI",{});var WDe=s(d3);VEe=n(WDe,"STRONG",{});var sIt=s(VEe);E9r=r(sIt,"distilbert"),sIt.forEach(t),C9r=r(WDe," \u2014 "),gK=n(WDe,"A",{href:!0});var lIt=s(gK);w9r=r(lIt,"TFDistilBertForSequenceClassification"),lIt.forEach(t),A9r=r(WDe," (DistilBERT model)"),WDe.forEach(t),L9r=i(ne),c3=n(ne,"LI",{});var HDe=s(c3);XEe=n(HDe,"STRONG",{});var iIt=s(XEe);y9r=r(iIt,"electra"),iIt.forEach(t),x9r=r(HDe," \u2014 "),hK=n(HDe,"A",{href:!0});var dIt=s(hK);$9r=r(dIt,"TFElectraForSequenceClassification"),dIt.forEach(t),k9r=r(HDe," (ELECTRA model)"),HDe.forEach(t),S9r=i(ne),f3=n(ne,"LI",{});var UDe=s(f3);zEe=n(UDe,"STRONG",{});var cIt=s(zEe);R9r=r(cIt,"flaubert"),cIt.forEach(t),P9r=r(UDe," \u2014 "),pK=n(UDe,"A",{href:!0});var fIt=s(pK);B9r=r(fIt,"TFFlaubertForSequenceClassification"),fIt.forEach(t),I9r=r(UDe," (FlauBERT model)"),UDe.forEach(t),N9r=i(ne),m3=n(ne,"LI",{});var JDe=s(m3);QEe=n(JDe,"STRONG",{});var mIt=s(QEe);q9r=r(mIt,"funnel"),mIt.forEach(t),j9r=r(JDe," \u2014 "),_K=n(JDe,"A",{href:!0});var gIt=s(_K);D9r=r(gIt,"TFFunnelForSequenceClassification"),gIt.forEach(t),G9r=r(JDe," (Funnel Transformer model)"),JDe.forEach(t),O9r=i(ne),g3=n(ne,"LI",{});var YDe=s(g3);WEe=n(YDe,"STRONG",{});var hIt=s(WEe);V9r=r(hIt,"gpt2"),hIt.forEach(t),X9r=r(YDe," \u2014 "),uK=n(YDe,"A",{href:!0});var pIt=s(uK);z9r=r(pIt,"TFGPT2ForSequenceClassification"),pIt.forEach(t),Q9r=r(YDe," (OpenAI GPT-2 model)"),YDe.forEach(t),W9r=i(ne),h3=n(ne,"LI",{});var KDe=s(h3);HEe=n(KDe,"STRONG",{});var _It=s(HEe);H9r=r(_It,"gptj"),_It.forEach(t),U9r=r(KDe," \u2014 "),bK=n(KDe,"A",{href:!0});var uIt=s(bK);J9r=r(uIt,"TFGPTJForSequenceClassification"),uIt.forEach(t),Y9r=r(KDe," (GPT-J model)"),KDe.forEach(t),K9r=i(ne),p3=n(ne,"LI",{});var ZDe=s(p3);UEe=n(ZDe,"STRONG",{});var bIt=s(UEe);Z9r=r(bIt,"layoutlm"),bIt.forEach(t),exr=r(ZDe," \u2014 "),vK=n(ZDe,"A",{href:!0});var vIt=s(vK);oxr=r(vIt,"TFLayoutLMForSequenceClassification"),vIt.forEach(t),rxr=r(ZDe," (LayoutLM model)"),ZDe.forEach(t),txr=i(ne),_3=n(ne,"LI",{});var eGe=s(_3);JEe=n(eGe,"STRONG",{});var FIt=s(JEe);axr=r(FIt,"longformer"),FIt.forEach(t),nxr=r(eGe," \u2014 "),FK=n(eGe,"A",{href:!0});var TIt=s(FK);sxr=r(TIt,"TFLongformerForSequenceClassification"),TIt.forEach(t),lxr=r(eGe," (Longformer model)"),eGe.forEach(t),ixr=i(ne),u3=n(ne,"LI",{});var oGe=s(u3);YEe=n(oGe,"STRONG",{});var MIt=s(YEe);dxr=r(MIt,"mobilebert"),MIt.forEach(t),cxr=r(oGe," \u2014 "),TK=n(oGe,"A",{href:!0});var EIt=s(TK);fxr=r(EIt,"TFMobileBertForSequenceClassification"),EIt.forEach(t),mxr=r(oGe," (MobileBERT model)"),oGe.forEach(t),gxr=i(ne),b3=n(ne,"LI",{});var rGe=s(b3);KEe=n(rGe,"STRONG",{});var CIt=s(KEe);hxr=r(CIt,"mpnet"),CIt.forEach(t),pxr=r(rGe," \u2014 "),MK=n(rGe,"A",{href:!0});var wIt=s(MK);_xr=r(wIt,"TFMPNetForSequenceClassification"),wIt.forEach(t),uxr=r(rGe," (MPNet model)"),rGe.forEach(t),bxr=i(ne),v3=n(ne,"LI",{});var tGe=s(v3);ZEe=n(tGe,"STRONG",{});var AIt=s(ZEe);vxr=r(AIt,"openai-gpt"),AIt.forEach(t),Fxr=r(tGe," \u2014 "),EK=n(tGe,"A",{href:!0});var LIt=s(EK);Txr=r(LIt,"TFOpenAIGPTForSequenceClassification"),LIt.forEach(t),Mxr=r(tGe," (OpenAI GPT model)"),tGe.forEach(t),Exr=i(ne),F3=n(ne,"LI",{});var aGe=s(F3);eCe=n(aGe,"STRONG",{});var yIt=s(eCe);Cxr=r(yIt,"rembert"),yIt.forEach(t),wxr=r(aGe," \u2014 "),CK=n(aGe,"A",{href:!0});var xIt=s(CK);Axr=r(xIt,"TFRemBertForSequenceClassification"),xIt.forEach(t),Lxr=r(aGe," (RemBERT model)"),aGe.forEach(t),yxr=i(ne),T3=n(ne,"LI",{});var nGe=s(T3);oCe=n(nGe,"STRONG",{});var $It=s(oCe);xxr=r($It,"roberta"),$It.forEach(t),$xr=r(nGe," \u2014 "),wK=n(nGe,"A",{href:!0});var kIt=s(wK);kxr=r(kIt,"TFRobertaForSequenceClassification"),kIt.forEach(t),Sxr=r(nGe," (RoBERTa model)"),nGe.forEach(t),Rxr=i(ne),M3=n(ne,"LI",{});var sGe=s(M3);rCe=n(sGe,"STRONG",{});var SIt=s(rCe);Pxr=r(SIt,"roformer"),SIt.forEach(t),Bxr=r(sGe," \u2014 "),AK=n(sGe,"A",{href:!0});var RIt=s(AK);Ixr=r(RIt,"TFRoFormerForSequenceClassification"),RIt.forEach(t),Nxr=r(sGe," (RoFormer model)"),sGe.forEach(t),qxr=i(ne),E3=n(ne,"LI",{});var lGe=s(E3);tCe=n(lGe,"STRONG",{});var PIt=s(tCe);jxr=r(PIt,"tapas"),PIt.forEach(t),Dxr=r(lGe," \u2014 "),LK=n(lGe,"A",{href:!0});var BIt=s(LK);Gxr=r(BIt,"TFTapasForSequenceClassification"),BIt.forEach(t),Oxr=r(lGe," (TAPAS model)"),lGe.forEach(t),Vxr=i(ne),C3=n(ne,"LI",{});var iGe=s(C3);aCe=n(iGe,"STRONG",{});var IIt=s(aCe);Xxr=r(IIt,"transfo-xl"),IIt.forEach(t),zxr=r(iGe," \u2014 "),yK=n(iGe,"A",{href:!0});var NIt=s(yK);Qxr=r(NIt,"TFTransfoXLForSequenceClassification"),NIt.forEach(t),Wxr=r(iGe," (Transformer-XL model)"),iGe.forEach(t),Hxr=i(ne),w3=n(ne,"LI",{});var dGe=s(w3);nCe=n(dGe,"STRONG",{});var qIt=s(nCe);Uxr=r(qIt,"xlm"),qIt.forEach(t),Jxr=r(dGe," \u2014 "),xK=n(dGe,"A",{href:!0});var jIt=s(xK);Yxr=r(jIt,"TFXLMForSequenceClassification"),jIt.forEach(t),Kxr=r(dGe," (XLM model)"),dGe.forEach(t),Zxr=i(ne),A3=n(ne,"LI",{});var cGe=s(A3);sCe=n(cGe,"STRONG",{});var DIt=s(sCe);e$r=r(DIt,"xlm-roberta"),DIt.forEach(t),o$r=r(cGe," \u2014 "),$K=n(cGe,"A",{href:!0});var GIt=s($K);r$r=r(GIt,"TFXLMRobertaForSequenceClassification"),GIt.forEach(t),t$r=r(cGe," (XLM-RoBERTa model)"),cGe.forEach(t),a$r=i(ne),L3=n(ne,"LI",{});var fGe=s(L3);lCe=n(fGe,"STRONG",{});var OIt=s(lCe);n$r=r(OIt,"xlnet"),OIt.forEach(t),s$r=r(fGe," \u2014 "),kK=n(fGe,"A",{href:!0});var VIt=s(kK);l$r=r(VIt,"TFXLNetForSequenceClassification"),VIt.forEach(t),i$r=r(fGe," (XLNet model)"),fGe.forEach(t),ne.forEach(t),d$r=i(Vl),T(y3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Vze=i(f),yc=n(f,"H2",{class:!0});var YWe=s(yc);x3=n(YWe,"A",{id:!0,class:!0,href:!0});var XIt=s(x3);iCe=n(XIt,"SPAN",{});var zIt=s(iCe);T(kx.$$.fragment,zIt),zIt.forEach(t),XIt.forEach(t),c$r=i(YWe),dCe=n(YWe,"SPAN",{});var QIt=s(dCe);f$r=r(QIt,"TFAutoModelForMultipleChoice"),QIt.forEach(t),YWe.forEach(t),Xze=i(f),dr=n(f,"DIV",{class:!0});var Xl=s(dr);T(Sx.$$.fragment,Xl),m$r=i(Xl),xc=n(Xl,"P",{});var oae=s(xc);g$r=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SK=n(oae,"A",{href:!0});var WIt=s(SK);h$r=r(WIt,"from_pretrained()"),WIt.forEach(t),p$r=r(oae," class method or the "),RK=n(oae,"A",{href:!0});var HIt=s(RK);_$r=r(HIt,"from_config()"),HIt.forEach(t),u$r=r(oae,` class
method.`),oae.forEach(t),b$r=i(Xl),Rx=n(Xl,"P",{});var KWe=s(Rx);v$r=r(KWe,"This class cannot be instantiated directly using "),cCe=n(KWe,"CODE",{});var UIt=s(cCe);F$r=r(UIt,"__init__()"),UIt.forEach(t),T$r=r(KWe," (throws an error)."),KWe.forEach(t),M$r=i(Xl),Dt=n(Xl,"DIV",{class:!0});var M7=s(Dt);T(Px.$$.fragment,M7),E$r=i(M7),fCe=n(M7,"P",{});var JIt=s(fCe);C$r=r(JIt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JIt.forEach(t),w$r=i(M7),$c=n(M7,"P",{});var rae=s($c);A$r=r(rae,`Note:
Loading a model from its configuration file does `),mCe=n(rae,"STRONG",{});var YIt=s(mCe);L$r=r(YIt,"not"),YIt.forEach(t),y$r=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=n(rae,"A",{href:!0});var KIt=s(PK);x$r=r(KIt,"from_pretrained()"),KIt.forEach(t),$$r=r(rae," to load the model weights."),rae.forEach(t),k$r=i(M7),T($3.$$.fragment,M7),M7.forEach(t),S$r=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Bx.$$.fragment,zl),R$r=i(zl),gCe=n(zl,"P",{});var ZIt=s(gCe);P$r=r(ZIt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZIt.forEach(t),B$r=i(zl),hn=n(zl,"P",{});var E7=s(hn);I$r=r(E7,"The model class to instantiate is selected based on the "),hCe=n(E7,"CODE",{});var eNt=s(hCe);N$r=r(eNt,"model_type"),eNt.forEach(t),q$r=r(E7,` property of the config object (either
passed as an argument or loaded from `),pCe=n(E7,"CODE",{});var oNt=s(pCe);j$r=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),D$r=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=n(E7,"CODE",{});var rNt=s(_Ce);G$r=r(rNt,"pretrained_model_name_or_path"),rNt.forEach(t),O$r=r(E7,":"),E7.forEach(t),V$r=i(zl),ue=n(zl,"UL",{});var Fe=s(ue);k3=n(Fe,"LI",{});var mGe=s(k3);uCe=n(mGe,"STRONG",{});var tNt=s(uCe);X$r=r(tNt,"albert"),tNt.forEach(t),z$r=r(mGe," \u2014 "),BK=n(mGe,"A",{href:!0});var aNt=s(BK);Q$r=r(aNt,"TFAlbertForMultipleChoice"),aNt.forEach(t),W$r=r(mGe," (ALBERT model)"),mGe.forEach(t),H$r=i(Fe),S3=n(Fe,"LI",{});var gGe=s(S3);bCe=n(gGe,"STRONG",{});var nNt=s(bCe);U$r=r(nNt,"bert"),nNt.forEach(t),J$r=r(gGe," \u2014 "),IK=n(gGe,"A",{href:!0});var sNt=s(IK);Y$r=r(sNt,"TFBertForMultipleChoice"),sNt.forEach(t),K$r=r(gGe," (BERT model)"),gGe.forEach(t),Z$r=i(Fe),R3=n(Fe,"LI",{});var hGe=s(R3);vCe=n(hGe,"STRONG",{});var lNt=s(vCe);ekr=r(lNt,"camembert"),lNt.forEach(t),okr=r(hGe," \u2014 "),NK=n(hGe,"A",{href:!0});var iNt=s(NK);rkr=r(iNt,"TFCamembertForMultipleChoice"),iNt.forEach(t),tkr=r(hGe," (CamemBERT model)"),hGe.forEach(t),akr=i(Fe),P3=n(Fe,"LI",{});var pGe=s(P3);FCe=n(pGe,"STRONG",{});var dNt=s(FCe);nkr=r(dNt,"convbert"),dNt.forEach(t),skr=r(pGe," \u2014 "),qK=n(pGe,"A",{href:!0});var cNt=s(qK);lkr=r(cNt,"TFConvBertForMultipleChoice"),cNt.forEach(t),ikr=r(pGe," (ConvBERT model)"),pGe.forEach(t),dkr=i(Fe),B3=n(Fe,"LI",{});var _Ge=s(B3);TCe=n(_Ge,"STRONG",{});var fNt=s(TCe);ckr=r(fNt,"distilbert"),fNt.forEach(t),fkr=r(_Ge," \u2014 "),jK=n(_Ge,"A",{href:!0});var mNt=s(jK);mkr=r(mNt,"TFDistilBertForMultipleChoice"),mNt.forEach(t),gkr=r(_Ge," (DistilBERT model)"),_Ge.forEach(t),hkr=i(Fe),I3=n(Fe,"LI",{});var uGe=s(I3);MCe=n(uGe,"STRONG",{});var gNt=s(MCe);pkr=r(gNt,"electra"),gNt.forEach(t),_kr=r(uGe," \u2014 "),DK=n(uGe,"A",{href:!0});var hNt=s(DK);ukr=r(hNt,"TFElectraForMultipleChoice"),hNt.forEach(t),bkr=r(uGe," (ELECTRA model)"),uGe.forEach(t),vkr=i(Fe),N3=n(Fe,"LI",{});var bGe=s(N3);ECe=n(bGe,"STRONG",{});var pNt=s(ECe);Fkr=r(pNt,"flaubert"),pNt.forEach(t),Tkr=r(bGe," \u2014 "),GK=n(bGe,"A",{href:!0});var _Nt=s(GK);Mkr=r(_Nt,"TFFlaubertForMultipleChoice"),_Nt.forEach(t),Ekr=r(bGe," (FlauBERT model)"),bGe.forEach(t),Ckr=i(Fe),q3=n(Fe,"LI",{});var vGe=s(q3);CCe=n(vGe,"STRONG",{});var uNt=s(CCe);wkr=r(uNt,"funnel"),uNt.forEach(t),Akr=r(vGe," \u2014 "),OK=n(vGe,"A",{href:!0});var bNt=s(OK);Lkr=r(bNt,"TFFunnelForMultipleChoice"),bNt.forEach(t),ykr=r(vGe," (Funnel Transformer model)"),vGe.forEach(t),xkr=i(Fe),j3=n(Fe,"LI",{});var FGe=s(j3);wCe=n(FGe,"STRONG",{});var vNt=s(wCe);$kr=r(vNt,"longformer"),vNt.forEach(t),kkr=r(FGe," \u2014 "),VK=n(FGe,"A",{href:!0});var FNt=s(VK);Skr=r(FNt,"TFLongformerForMultipleChoice"),FNt.forEach(t),Rkr=r(FGe," (Longformer model)"),FGe.forEach(t),Pkr=i(Fe),D3=n(Fe,"LI",{});var TGe=s(D3);ACe=n(TGe,"STRONG",{});var TNt=s(ACe);Bkr=r(TNt,"mobilebert"),TNt.forEach(t),Ikr=r(TGe," \u2014 "),XK=n(TGe,"A",{href:!0});var MNt=s(XK);Nkr=r(MNt,"TFMobileBertForMultipleChoice"),MNt.forEach(t),qkr=r(TGe," (MobileBERT model)"),TGe.forEach(t),jkr=i(Fe),G3=n(Fe,"LI",{});var MGe=s(G3);LCe=n(MGe,"STRONG",{});var ENt=s(LCe);Dkr=r(ENt,"mpnet"),ENt.forEach(t),Gkr=r(MGe," \u2014 "),zK=n(MGe,"A",{href:!0});var CNt=s(zK);Okr=r(CNt,"TFMPNetForMultipleChoice"),CNt.forEach(t),Vkr=r(MGe," (MPNet model)"),MGe.forEach(t),Xkr=i(Fe),O3=n(Fe,"LI",{});var EGe=s(O3);yCe=n(EGe,"STRONG",{});var wNt=s(yCe);zkr=r(wNt,"rembert"),wNt.forEach(t),Qkr=r(EGe," \u2014 "),QK=n(EGe,"A",{href:!0});var ANt=s(QK);Wkr=r(ANt,"TFRemBertForMultipleChoice"),ANt.forEach(t),Hkr=r(EGe," (RemBERT model)"),EGe.forEach(t),Ukr=i(Fe),V3=n(Fe,"LI",{});var CGe=s(V3);xCe=n(CGe,"STRONG",{});var LNt=s(xCe);Jkr=r(LNt,"roberta"),LNt.forEach(t),Ykr=r(CGe," \u2014 "),WK=n(CGe,"A",{href:!0});var yNt=s(WK);Kkr=r(yNt,"TFRobertaForMultipleChoice"),yNt.forEach(t),Zkr=r(CGe," (RoBERTa model)"),CGe.forEach(t),eSr=i(Fe),X3=n(Fe,"LI",{});var wGe=s(X3);$Ce=n(wGe,"STRONG",{});var xNt=s($Ce);oSr=r(xNt,"roformer"),xNt.forEach(t),rSr=r(wGe," \u2014 "),HK=n(wGe,"A",{href:!0});var $Nt=s(HK);tSr=r($Nt,"TFRoFormerForMultipleChoice"),$Nt.forEach(t),aSr=r(wGe," (RoFormer model)"),wGe.forEach(t),nSr=i(Fe),z3=n(Fe,"LI",{});var AGe=s(z3);kCe=n(AGe,"STRONG",{});var kNt=s(kCe);sSr=r(kNt,"xlm"),kNt.forEach(t),lSr=r(AGe," \u2014 "),UK=n(AGe,"A",{href:!0});var SNt=s(UK);iSr=r(SNt,"TFXLMForMultipleChoice"),SNt.forEach(t),dSr=r(AGe," (XLM model)"),AGe.forEach(t),cSr=i(Fe),Q3=n(Fe,"LI",{});var LGe=s(Q3);SCe=n(LGe,"STRONG",{});var RNt=s(SCe);fSr=r(RNt,"xlm-roberta"),RNt.forEach(t),mSr=r(LGe," \u2014 "),JK=n(LGe,"A",{href:!0});var PNt=s(JK);gSr=r(PNt,"TFXLMRobertaForMultipleChoice"),PNt.forEach(t),hSr=r(LGe," (XLM-RoBERTa model)"),LGe.forEach(t),pSr=i(Fe),W3=n(Fe,"LI",{});var yGe=s(W3);RCe=n(yGe,"STRONG",{});var BNt=s(RCe);_Sr=r(BNt,"xlnet"),BNt.forEach(t),uSr=r(yGe," \u2014 "),YK=n(yGe,"A",{href:!0});var INt=s(YK);bSr=r(INt,"TFXLNetForMultipleChoice"),INt.forEach(t),vSr=r(yGe," (XLNet model)"),yGe.forEach(t),Fe.forEach(t),FSr=i(zl),T(H3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),zze=i(f),kc=n(f,"H2",{class:!0});var ZWe=s(kc);U3=n(ZWe,"A",{id:!0,class:!0,href:!0});var NNt=s(U3);PCe=n(NNt,"SPAN",{});var qNt=s(PCe);T(Ix.$$.fragment,qNt),qNt.forEach(t),NNt.forEach(t),TSr=i(ZWe),BCe=n(ZWe,"SPAN",{});var jNt=s(BCe);MSr=r(jNt,"TFAutoModelForNextSentencePrediction"),jNt.forEach(t),ZWe.forEach(t),Qze=i(f),cr=n(f,"DIV",{class:!0});var Ql=s(cr);T(Nx.$$.fragment,Ql),ESr=i(Ql),Sc=n(Ql,"P",{});var tae=s(Sc);CSr=r(tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KK=n(tae,"A",{href:!0});var DNt=s(KK);wSr=r(DNt,"from_pretrained()"),DNt.forEach(t),ASr=r(tae," class method or the "),ZK=n(tae,"A",{href:!0});var GNt=s(ZK);LSr=r(GNt,"from_config()"),GNt.forEach(t),ySr=r(tae,` class
method.`),tae.forEach(t),xSr=i(Ql),qx=n(Ql,"P",{});var eHe=s(qx);$Sr=r(eHe,"This class cannot be instantiated directly using "),ICe=n(eHe,"CODE",{});var ONt=s(ICe);kSr=r(ONt,"__init__()"),ONt.forEach(t),SSr=r(eHe," (throws an error)."),eHe.forEach(t),RSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var C7=s(Gt);T(jx.$$.fragment,C7),PSr=i(C7),NCe=n(C7,"P",{});var VNt=s(NCe);BSr=r(VNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),VNt.forEach(t),ISr=i(C7),Rc=n(C7,"P",{});var aae=s(Rc);NSr=r(aae,`Note:
Loading a model from its configuration file does `),qCe=n(aae,"STRONG",{});var XNt=s(qCe);qSr=r(XNt,"not"),XNt.forEach(t),jSr=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(aae,"A",{href:!0});var zNt=s(eZ);DSr=r(zNt,"from_pretrained()"),zNt.forEach(t),GSr=r(aae," to load the model weights."),aae.forEach(t),OSr=i(C7),T(J3.$$.fragment,C7),C7.forEach(t),VSr=i(Ql),qr=n(Ql,"DIV",{class:!0});var Wl=s(qr);T(Dx.$$.fragment,Wl),XSr=i(Wl),jCe=n(Wl,"P",{});var QNt=s(jCe);zSr=r(QNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),QNt.forEach(t),QSr=i(Wl),pn=n(Wl,"P",{});var w7=s(pn);WSr=r(w7,"The model class to instantiate is selected based on the "),DCe=n(w7,"CODE",{});var WNt=s(DCe);HSr=r(WNt,"model_type"),WNt.forEach(t),USr=r(w7,` property of the config object (either
passed as an argument or loaded from `),GCe=n(w7,"CODE",{});var HNt=s(GCe);JSr=r(HNt,"pretrained_model_name_or_path"),HNt.forEach(t),YSr=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=n(w7,"CODE",{});var UNt=s(OCe);KSr=r(UNt,"pretrained_model_name_or_path"),UNt.forEach(t),ZSr=r(w7,":"),w7.forEach(t),eRr=i(Wl),Gx=n(Wl,"UL",{});var oHe=s(Gx);Y3=n(oHe,"LI",{});var xGe=s(Y3);VCe=n(xGe,"STRONG",{});var JNt=s(VCe);oRr=r(JNt,"bert"),JNt.forEach(t),rRr=r(xGe," \u2014 "),oZ=n(xGe,"A",{href:!0});var YNt=s(oZ);tRr=r(YNt,"TFBertForNextSentencePrediction"),YNt.forEach(t),aRr=r(xGe," (BERT model)"),xGe.forEach(t),nRr=i(oHe),K3=n(oHe,"LI",{});var $Ge=s(K3);XCe=n($Ge,"STRONG",{});var KNt=s(XCe);sRr=r(KNt,"mobilebert"),KNt.forEach(t),lRr=r($Ge," \u2014 "),rZ=n($Ge,"A",{href:!0});var ZNt=s(rZ);iRr=r(ZNt,"TFMobileBertForNextSentencePrediction"),ZNt.forEach(t),dRr=r($Ge," (MobileBERT model)"),$Ge.forEach(t),oHe.forEach(t),cRr=i(Wl),T(Z3.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Wze=i(f),Pc=n(f,"H2",{class:!0});var rHe=s(Pc);e5=n(rHe,"A",{id:!0,class:!0,href:!0});var eqt=s(e5);zCe=n(eqt,"SPAN",{});var oqt=s(zCe);T(Ox.$$.fragment,oqt),oqt.forEach(t),eqt.forEach(t),fRr=i(rHe),QCe=n(rHe,"SPAN",{});var rqt=s(QCe);mRr=r(rqt,"TFAutoModelForTableQuestionAnswering"),rqt.forEach(t),rHe.forEach(t),Hze=i(f),fr=n(f,"DIV",{class:!0});var Hl=s(fr);T(Vx.$$.fragment,Hl),gRr=i(Hl),Bc=n(Hl,"P",{});var nae=s(Bc);hRr=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),tZ=n(nae,"A",{href:!0});var tqt=s(tZ);pRr=r(tqt,"from_pretrained()"),tqt.forEach(t),_Rr=r(nae," class method or the "),aZ=n(nae,"A",{href:!0});var aqt=s(aZ);uRr=r(aqt,"from_config()"),aqt.forEach(t),bRr=r(nae,` class
method.`),nae.forEach(t),vRr=i(Hl),Xx=n(Hl,"P",{});var tHe=s(Xx);FRr=r(tHe,"This class cannot be instantiated directly using "),WCe=n(tHe,"CODE",{});var nqt=s(WCe);TRr=r(nqt,"__init__()"),nqt.forEach(t),MRr=r(tHe," (throws an error)."),tHe.forEach(t),ERr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var A7=s(Ot);T(zx.$$.fragment,A7),CRr=i(A7),HCe=n(A7,"P",{});var sqt=s(HCe);wRr=r(sqt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sqt.forEach(t),ARr=i(A7),Ic=n(A7,"P",{});var sae=s(Ic);LRr=r(sae,`Note:
Loading a model from its configuration file does `),UCe=n(sae,"STRONG",{});var lqt=s(UCe);yRr=r(lqt,"not"),lqt.forEach(t),xRr=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=n(sae,"A",{href:!0});var iqt=s(nZ);$Rr=r(iqt,"from_pretrained()"),iqt.forEach(t),kRr=r(sae," to load the model weights."),sae.forEach(t),SRr=i(A7),T(o5.$$.fragment,A7),A7.forEach(t),RRr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(Qx.$$.fragment,Ul),PRr=i(Ul),JCe=n(Ul,"P",{});var dqt=s(JCe);BRr=r(dqt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dqt.forEach(t),IRr=i(Ul),_n=n(Ul,"P",{});var L7=s(_n);NRr=r(L7,"The model class to instantiate is selected based on the "),YCe=n(L7,"CODE",{});var cqt=s(YCe);qRr=r(cqt,"model_type"),cqt.forEach(t),jRr=r(L7,` property of the config object (either
passed as an argument or loaded from `),KCe=n(L7,"CODE",{});var fqt=s(KCe);DRr=r(fqt,"pretrained_model_name_or_path"),fqt.forEach(t),GRr=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=n(L7,"CODE",{});var mqt=s(ZCe);ORr=r(mqt,"pretrained_model_name_or_path"),mqt.forEach(t),VRr=r(L7,":"),L7.forEach(t),XRr=i(Ul),e3e=n(Ul,"UL",{});var gqt=s(e3e);r5=n(gqt,"LI",{});var kGe=s(r5);o3e=n(kGe,"STRONG",{});var hqt=s(o3e);zRr=r(hqt,"tapas"),hqt.forEach(t),QRr=r(kGe," \u2014 "),sZ=n(kGe,"A",{href:!0});var pqt=s(sZ);WRr=r(pqt,"TFTapasForQuestionAnswering"),pqt.forEach(t),HRr=r(kGe," (TAPAS model)"),kGe.forEach(t),gqt.forEach(t),URr=i(Ul),T(t5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Uze=i(f),Nc=n(f,"H2",{class:!0});var aHe=s(Nc);a5=n(aHe,"A",{id:!0,class:!0,href:!0});var _qt=s(a5);r3e=n(_qt,"SPAN",{});var uqt=s(r3e);T(Wx.$$.fragment,uqt),uqt.forEach(t),_qt.forEach(t),JRr=i(aHe),t3e=n(aHe,"SPAN",{});var bqt=s(t3e);YRr=r(bqt,"TFAutoModelForTokenClassification"),bqt.forEach(t),aHe.forEach(t),Jze=i(f),mr=n(f,"DIV",{class:!0});var Jl=s(mr);T(Hx.$$.fragment,Jl),KRr=i(Jl),qc=n(Jl,"P",{});var lae=s(qc);ZRr=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lZ=n(lae,"A",{href:!0});var vqt=s(lZ);ePr=r(vqt,"from_pretrained()"),vqt.forEach(t),oPr=r(lae," class method or the "),iZ=n(lae,"A",{href:!0});var Fqt=s(iZ);rPr=r(Fqt,"from_config()"),Fqt.forEach(t),tPr=r(lae,` class
method.`),lae.forEach(t),aPr=i(Jl),Ux=n(Jl,"P",{});var nHe=s(Ux);nPr=r(nHe,"This class cannot be instantiated directly using "),a3e=n(nHe,"CODE",{});var Tqt=s(a3e);sPr=r(Tqt,"__init__()"),Tqt.forEach(t),lPr=r(nHe," (throws an error)."),nHe.forEach(t),iPr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var y7=s(Vt);T(Jx.$$.fragment,y7),dPr=i(y7),n3e=n(y7,"P",{});var Mqt=s(n3e);cPr=r(Mqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mqt.forEach(t),fPr=i(y7),jc=n(y7,"P",{});var iae=s(jc);mPr=r(iae,`Note:
Loading a model from its configuration file does `),s3e=n(iae,"STRONG",{});var Eqt=s(s3e);gPr=r(Eqt,"not"),Eqt.forEach(t),hPr=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=n(iae,"A",{href:!0});var Cqt=s(dZ);pPr=r(Cqt,"from_pretrained()"),Cqt.forEach(t),_Pr=r(iae," to load the model weights."),iae.forEach(t),uPr=i(y7),T(n5.$$.fragment,y7),y7.forEach(t),bPr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(Yx.$$.fragment,Yl),vPr=i(Yl),l3e=n(Yl,"P",{});var wqt=s(l3e);FPr=r(wqt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wqt.forEach(t),TPr=i(Yl),un=n(Yl,"P",{});var x7=s(un);MPr=r(x7,"The model class to instantiate is selected based on the "),i3e=n(x7,"CODE",{});var Aqt=s(i3e);EPr=r(Aqt,"model_type"),Aqt.forEach(t),CPr=r(x7,` property of the config object (either
passed as an argument or loaded from `),d3e=n(x7,"CODE",{});var Lqt=s(d3e);wPr=r(Lqt,"pretrained_model_name_or_path"),Lqt.forEach(t),APr=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=n(x7,"CODE",{});var yqt=s(c3e);LPr=r(yqt,"pretrained_model_name_or_path"),yqt.forEach(t),yPr=r(x7,":"),x7.forEach(t),xPr=i(Yl),de=n(Yl,"UL",{});var ge=s(de);s5=n(ge,"LI",{});var SGe=s(s5);f3e=n(SGe,"STRONG",{});var xqt=s(f3e);$Pr=r(xqt,"albert"),xqt.forEach(t),kPr=r(SGe," \u2014 "),cZ=n(SGe,"A",{href:!0});var $qt=s(cZ);SPr=r($qt,"TFAlbertForTokenClassification"),$qt.forEach(t),RPr=r(SGe," (ALBERT model)"),SGe.forEach(t),PPr=i(ge),l5=n(ge,"LI",{});var RGe=s(l5);m3e=n(RGe,"STRONG",{});var kqt=s(m3e);BPr=r(kqt,"bert"),kqt.forEach(t),IPr=r(RGe," \u2014 "),fZ=n(RGe,"A",{href:!0});var Sqt=s(fZ);NPr=r(Sqt,"TFBertForTokenClassification"),Sqt.forEach(t),qPr=r(RGe," (BERT model)"),RGe.forEach(t),jPr=i(ge),i5=n(ge,"LI",{});var PGe=s(i5);g3e=n(PGe,"STRONG",{});var Rqt=s(g3e);DPr=r(Rqt,"camembert"),Rqt.forEach(t),GPr=r(PGe," \u2014 "),mZ=n(PGe,"A",{href:!0});var Pqt=s(mZ);OPr=r(Pqt,"TFCamembertForTokenClassification"),Pqt.forEach(t),VPr=r(PGe," (CamemBERT model)"),PGe.forEach(t),XPr=i(ge),d5=n(ge,"LI",{});var BGe=s(d5);h3e=n(BGe,"STRONG",{});var Bqt=s(h3e);zPr=r(Bqt,"convbert"),Bqt.forEach(t),QPr=r(BGe," \u2014 "),gZ=n(BGe,"A",{href:!0});var Iqt=s(gZ);WPr=r(Iqt,"TFConvBertForTokenClassification"),Iqt.forEach(t),HPr=r(BGe," (ConvBERT model)"),BGe.forEach(t),UPr=i(ge),c5=n(ge,"LI",{});var IGe=s(c5);p3e=n(IGe,"STRONG",{});var Nqt=s(p3e);JPr=r(Nqt,"deberta"),Nqt.forEach(t),YPr=r(IGe," \u2014 "),hZ=n(IGe,"A",{href:!0});var qqt=s(hZ);KPr=r(qqt,"TFDebertaForTokenClassification"),qqt.forEach(t),ZPr=r(IGe," (DeBERTa model)"),IGe.forEach(t),eBr=i(ge),f5=n(ge,"LI",{});var NGe=s(f5);_3e=n(NGe,"STRONG",{});var jqt=s(_3e);oBr=r(jqt,"deberta-v2"),jqt.forEach(t),rBr=r(NGe," \u2014 "),pZ=n(NGe,"A",{href:!0});var Dqt=s(pZ);tBr=r(Dqt,"TFDebertaV2ForTokenClassification"),Dqt.forEach(t),aBr=r(NGe," (DeBERTa-v2 model)"),NGe.forEach(t),nBr=i(ge),m5=n(ge,"LI",{});var qGe=s(m5);u3e=n(qGe,"STRONG",{});var Gqt=s(u3e);sBr=r(Gqt,"distilbert"),Gqt.forEach(t),lBr=r(qGe," \u2014 "),_Z=n(qGe,"A",{href:!0});var Oqt=s(_Z);iBr=r(Oqt,"TFDistilBertForTokenClassification"),Oqt.forEach(t),dBr=r(qGe," (DistilBERT model)"),qGe.forEach(t),cBr=i(ge),g5=n(ge,"LI",{});var jGe=s(g5);b3e=n(jGe,"STRONG",{});var Vqt=s(b3e);fBr=r(Vqt,"electra"),Vqt.forEach(t),mBr=r(jGe," \u2014 "),uZ=n(jGe,"A",{href:!0});var Xqt=s(uZ);gBr=r(Xqt,"TFElectraForTokenClassification"),Xqt.forEach(t),hBr=r(jGe," (ELECTRA model)"),jGe.forEach(t),pBr=i(ge),h5=n(ge,"LI",{});var DGe=s(h5);v3e=n(DGe,"STRONG",{});var zqt=s(v3e);_Br=r(zqt,"flaubert"),zqt.forEach(t),uBr=r(DGe," \u2014 "),bZ=n(DGe,"A",{href:!0});var Qqt=s(bZ);bBr=r(Qqt,"TFFlaubertForTokenClassification"),Qqt.forEach(t),vBr=r(DGe," (FlauBERT model)"),DGe.forEach(t),FBr=i(ge),p5=n(ge,"LI",{});var GGe=s(p5);F3e=n(GGe,"STRONG",{});var Wqt=s(F3e);TBr=r(Wqt,"funnel"),Wqt.forEach(t),MBr=r(GGe," \u2014 "),vZ=n(GGe,"A",{href:!0});var Hqt=s(vZ);EBr=r(Hqt,"TFFunnelForTokenClassification"),Hqt.forEach(t),CBr=r(GGe," (Funnel Transformer model)"),GGe.forEach(t),wBr=i(ge),_5=n(ge,"LI",{});var OGe=s(_5);T3e=n(OGe,"STRONG",{});var Uqt=s(T3e);ABr=r(Uqt,"layoutlm"),Uqt.forEach(t),LBr=r(OGe," \u2014 "),FZ=n(OGe,"A",{href:!0});var Jqt=s(FZ);yBr=r(Jqt,"TFLayoutLMForTokenClassification"),Jqt.forEach(t),xBr=r(OGe," (LayoutLM model)"),OGe.forEach(t),$Br=i(ge),u5=n(ge,"LI",{});var VGe=s(u5);M3e=n(VGe,"STRONG",{});var Yqt=s(M3e);kBr=r(Yqt,"longformer"),Yqt.forEach(t),SBr=r(VGe," \u2014 "),TZ=n(VGe,"A",{href:!0});var Kqt=s(TZ);RBr=r(Kqt,"TFLongformerForTokenClassification"),Kqt.forEach(t),PBr=r(VGe," (Longformer model)"),VGe.forEach(t),BBr=i(ge),b5=n(ge,"LI",{});var XGe=s(b5);E3e=n(XGe,"STRONG",{});var Zqt=s(E3e);IBr=r(Zqt,"mobilebert"),Zqt.forEach(t),NBr=r(XGe," \u2014 "),MZ=n(XGe,"A",{href:!0});var ejt=s(MZ);qBr=r(ejt,"TFMobileBertForTokenClassification"),ejt.forEach(t),jBr=r(XGe," (MobileBERT model)"),XGe.forEach(t),DBr=i(ge),v5=n(ge,"LI",{});var zGe=s(v5);C3e=n(zGe,"STRONG",{});var ojt=s(C3e);GBr=r(ojt,"mpnet"),ojt.forEach(t),OBr=r(zGe," \u2014 "),EZ=n(zGe,"A",{href:!0});var rjt=s(EZ);VBr=r(rjt,"TFMPNetForTokenClassification"),rjt.forEach(t),XBr=r(zGe," (MPNet model)"),zGe.forEach(t),zBr=i(ge),F5=n(ge,"LI",{});var QGe=s(F5);w3e=n(QGe,"STRONG",{});var tjt=s(w3e);QBr=r(tjt,"rembert"),tjt.forEach(t),WBr=r(QGe," \u2014 "),CZ=n(QGe,"A",{href:!0});var ajt=s(CZ);HBr=r(ajt,"TFRemBertForTokenClassification"),ajt.forEach(t),UBr=r(QGe," (RemBERT model)"),QGe.forEach(t),JBr=i(ge),T5=n(ge,"LI",{});var WGe=s(T5);A3e=n(WGe,"STRONG",{});var njt=s(A3e);YBr=r(njt,"roberta"),njt.forEach(t),KBr=r(WGe," \u2014 "),wZ=n(WGe,"A",{href:!0});var sjt=s(wZ);ZBr=r(sjt,"TFRobertaForTokenClassification"),sjt.forEach(t),eIr=r(WGe," (RoBERTa model)"),WGe.forEach(t),oIr=i(ge),M5=n(ge,"LI",{});var HGe=s(M5);L3e=n(HGe,"STRONG",{});var ljt=s(L3e);rIr=r(ljt,"roformer"),ljt.forEach(t),tIr=r(HGe," \u2014 "),AZ=n(HGe,"A",{href:!0});var ijt=s(AZ);aIr=r(ijt,"TFRoFormerForTokenClassification"),ijt.forEach(t),nIr=r(HGe," (RoFormer model)"),HGe.forEach(t),sIr=i(ge),E5=n(ge,"LI",{});var UGe=s(E5);y3e=n(UGe,"STRONG",{});var djt=s(y3e);lIr=r(djt,"xlm"),djt.forEach(t),iIr=r(UGe," \u2014 "),LZ=n(UGe,"A",{href:!0});var cjt=s(LZ);dIr=r(cjt,"TFXLMForTokenClassification"),cjt.forEach(t),cIr=r(UGe," (XLM model)"),UGe.forEach(t),fIr=i(ge),C5=n(ge,"LI",{});var JGe=s(C5);x3e=n(JGe,"STRONG",{});var fjt=s(x3e);mIr=r(fjt,"xlm-roberta"),fjt.forEach(t),gIr=r(JGe," \u2014 "),yZ=n(JGe,"A",{href:!0});var mjt=s(yZ);hIr=r(mjt,"TFXLMRobertaForTokenClassification"),mjt.forEach(t),pIr=r(JGe," (XLM-RoBERTa model)"),JGe.forEach(t),_Ir=i(ge),w5=n(ge,"LI",{});var YGe=s(w5);$3e=n(YGe,"STRONG",{});var gjt=s($3e);uIr=r(gjt,"xlnet"),gjt.forEach(t),bIr=r(YGe," \u2014 "),xZ=n(YGe,"A",{href:!0});var hjt=s(xZ);vIr=r(hjt,"TFXLNetForTokenClassification"),hjt.forEach(t),FIr=r(YGe," (XLNet model)"),YGe.forEach(t),ge.forEach(t),TIr=i(Yl),T(A5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Yze=i(f),Dc=n(f,"H2",{class:!0});var sHe=s(Dc);L5=n(sHe,"A",{id:!0,class:!0,href:!0});var pjt=s(L5);k3e=n(pjt,"SPAN",{});var _jt=s(k3e);T(Kx.$$.fragment,_jt),_jt.forEach(t),pjt.forEach(t),MIr=i(sHe),S3e=n(sHe,"SPAN",{});var ujt=s(S3e);EIr=r(ujt,"TFAutoModelForQuestionAnswering"),ujt.forEach(t),sHe.forEach(t),Kze=i(f),gr=n(f,"DIV",{class:!0});var Kl=s(gr);T(Zx.$$.fragment,Kl),CIr=i(Kl),Gc=n(Kl,"P",{});var dae=s(Gc);wIr=r(dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$Z=n(dae,"A",{href:!0});var bjt=s($Z);AIr=r(bjt,"from_pretrained()"),bjt.forEach(t),LIr=r(dae," class method or the "),kZ=n(dae,"A",{href:!0});var vjt=s(kZ);yIr=r(vjt,"from_config()"),vjt.forEach(t),xIr=r(dae,` class
method.`),dae.forEach(t),$Ir=i(Kl),e$=n(Kl,"P",{});var lHe=s(e$);kIr=r(lHe,"This class cannot be instantiated directly using "),R3e=n(lHe,"CODE",{});var Fjt=s(R3e);SIr=r(Fjt,"__init__()"),Fjt.forEach(t),RIr=r(lHe," (throws an error)."),lHe.forEach(t),PIr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var $7=s(Xt);T(o$.$$.fragment,$7),BIr=i($7),P3e=n($7,"P",{});var Tjt=s(P3e);IIr=r(Tjt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Tjt.forEach(t),NIr=i($7),Oc=n($7,"P",{});var cae=s(Oc);qIr=r(cae,`Note:
Loading a model from its configuration file does `),B3e=n(cae,"STRONG",{});var Mjt=s(B3e);jIr=r(Mjt,"not"),Mjt.forEach(t),DIr=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(cae,"A",{href:!0});var Ejt=s(SZ);GIr=r(Ejt,"from_pretrained()"),Ejt.forEach(t),OIr=r(cae," to load the model weights."),cae.forEach(t),VIr=i($7),T(y5.$$.fragment,$7),$7.forEach(t),XIr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(r$.$$.fragment,Zl),zIr=i(Zl),I3e=n(Zl,"P",{});var Cjt=s(I3e);QIr=r(Cjt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Cjt.forEach(t),WIr=i(Zl),bn=n(Zl,"P",{});var k7=s(bn);HIr=r(k7,"The model class to instantiate is selected based on the "),N3e=n(k7,"CODE",{});var wjt=s(N3e);UIr=r(wjt,"model_type"),wjt.forEach(t),JIr=r(k7,` property of the config object (either
passed as an argument or loaded from `),q3e=n(k7,"CODE",{});var Ajt=s(q3e);YIr=r(Ajt,"pretrained_model_name_or_path"),Ajt.forEach(t),KIr=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=n(k7,"CODE",{});var Ljt=s(j3e);ZIr=r(Ljt,"pretrained_model_name_or_path"),Ljt.forEach(t),eNr=r(k7,":"),k7.forEach(t),oNr=i(Zl),ce=n(Zl,"UL",{});var he=s(ce);x5=n(he,"LI",{});var KGe=s(x5);D3e=n(KGe,"STRONG",{});var yjt=s(D3e);rNr=r(yjt,"albert"),yjt.forEach(t),tNr=r(KGe," \u2014 "),RZ=n(KGe,"A",{href:!0});var xjt=s(RZ);aNr=r(xjt,"TFAlbertForQuestionAnswering"),xjt.forEach(t),nNr=r(KGe," (ALBERT model)"),KGe.forEach(t),sNr=i(he),$5=n(he,"LI",{});var ZGe=s($5);G3e=n(ZGe,"STRONG",{});var $jt=s(G3e);lNr=r($jt,"bert"),$jt.forEach(t),iNr=r(ZGe," \u2014 "),PZ=n(ZGe,"A",{href:!0});var kjt=s(PZ);dNr=r(kjt,"TFBertForQuestionAnswering"),kjt.forEach(t),cNr=r(ZGe," (BERT model)"),ZGe.forEach(t),fNr=i(he),k5=n(he,"LI",{});var eOe=s(k5);O3e=n(eOe,"STRONG",{});var Sjt=s(O3e);mNr=r(Sjt,"camembert"),Sjt.forEach(t),gNr=r(eOe," \u2014 "),BZ=n(eOe,"A",{href:!0});var Rjt=s(BZ);hNr=r(Rjt,"TFCamembertForQuestionAnswering"),Rjt.forEach(t),pNr=r(eOe," (CamemBERT model)"),eOe.forEach(t),_Nr=i(he),S5=n(he,"LI",{});var oOe=s(S5);V3e=n(oOe,"STRONG",{});var Pjt=s(V3e);uNr=r(Pjt,"convbert"),Pjt.forEach(t),bNr=r(oOe," \u2014 "),IZ=n(oOe,"A",{href:!0});var Bjt=s(IZ);vNr=r(Bjt,"TFConvBertForQuestionAnswering"),Bjt.forEach(t),FNr=r(oOe," (ConvBERT model)"),oOe.forEach(t),TNr=i(he),R5=n(he,"LI",{});var rOe=s(R5);X3e=n(rOe,"STRONG",{});var Ijt=s(X3e);MNr=r(Ijt,"deberta"),Ijt.forEach(t),ENr=r(rOe," \u2014 "),NZ=n(rOe,"A",{href:!0});var Njt=s(NZ);CNr=r(Njt,"TFDebertaForQuestionAnswering"),Njt.forEach(t),wNr=r(rOe," (DeBERTa model)"),rOe.forEach(t),ANr=i(he),P5=n(he,"LI",{});var tOe=s(P5);z3e=n(tOe,"STRONG",{});var qjt=s(z3e);LNr=r(qjt,"deberta-v2"),qjt.forEach(t),yNr=r(tOe," \u2014 "),qZ=n(tOe,"A",{href:!0});var jjt=s(qZ);xNr=r(jjt,"TFDebertaV2ForQuestionAnswering"),jjt.forEach(t),$Nr=r(tOe," (DeBERTa-v2 model)"),tOe.forEach(t),kNr=i(he),B5=n(he,"LI",{});var aOe=s(B5);Q3e=n(aOe,"STRONG",{});var Djt=s(Q3e);SNr=r(Djt,"distilbert"),Djt.forEach(t),RNr=r(aOe," \u2014 "),jZ=n(aOe,"A",{href:!0});var Gjt=s(jZ);PNr=r(Gjt,"TFDistilBertForQuestionAnswering"),Gjt.forEach(t),BNr=r(aOe," (DistilBERT model)"),aOe.forEach(t),INr=i(he),I5=n(he,"LI",{});var nOe=s(I5);W3e=n(nOe,"STRONG",{});var Ojt=s(W3e);NNr=r(Ojt,"electra"),Ojt.forEach(t),qNr=r(nOe," \u2014 "),DZ=n(nOe,"A",{href:!0});var Vjt=s(DZ);jNr=r(Vjt,"TFElectraForQuestionAnswering"),Vjt.forEach(t),DNr=r(nOe," (ELECTRA model)"),nOe.forEach(t),GNr=i(he),N5=n(he,"LI",{});var sOe=s(N5);H3e=n(sOe,"STRONG",{});var Xjt=s(H3e);ONr=r(Xjt,"flaubert"),Xjt.forEach(t),VNr=r(sOe," \u2014 "),GZ=n(sOe,"A",{href:!0});var zjt=s(GZ);XNr=r(zjt,"TFFlaubertForQuestionAnsweringSimple"),zjt.forEach(t),zNr=r(sOe," (FlauBERT model)"),sOe.forEach(t),QNr=i(he),q5=n(he,"LI",{});var lOe=s(q5);U3e=n(lOe,"STRONG",{});var Qjt=s(U3e);WNr=r(Qjt,"funnel"),Qjt.forEach(t),HNr=r(lOe," \u2014 "),OZ=n(lOe,"A",{href:!0});var Wjt=s(OZ);UNr=r(Wjt,"TFFunnelForQuestionAnswering"),Wjt.forEach(t),JNr=r(lOe," (Funnel Transformer model)"),lOe.forEach(t),YNr=i(he),j5=n(he,"LI",{});var iOe=s(j5);J3e=n(iOe,"STRONG",{});var Hjt=s(J3e);KNr=r(Hjt,"gptj"),Hjt.forEach(t),ZNr=r(iOe," \u2014 "),VZ=n(iOe,"A",{href:!0});var Ujt=s(VZ);eqr=r(Ujt,"TFGPTJForQuestionAnswering"),Ujt.forEach(t),oqr=r(iOe," (GPT-J model)"),iOe.forEach(t),rqr=i(he),D5=n(he,"LI",{});var dOe=s(D5);Y3e=n(dOe,"STRONG",{});var Jjt=s(Y3e);tqr=r(Jjt,"longformer"),Jjt.forEach(t),aqr=r(dOe," \u2014 "),XZ=n(dOe,"A",{href:!0});var Yjt=s(XZ);nqr=r(Yjt,"TFLongformerForQuestionAnswering"),Yjt.forEach(t),sqr=r(dOe," (Longformer model)"),dOe.forEach(t),lqr=i(he),G5=n(he,"LI",{});var cOe=s(G5);K3e=n(cOe,"STRONG",{});var Kjt=s(K3e);iqr=r(Kjt,"mobilebert"),Kjt.forEach(t),dqr=r(cOe," \u2014 "),zZ=n(cOe,"A",{href:!0});var Zjt=s(zZ);cqr=r(Zjt,"TFMobileBertForQuestionAnswering"),Zjt.forEach(t),fqr=r(cOe," (MobileBERT model)"),cOe.forEach(t),mqr=i(he),O5=n(he,"LI",{});var fOe=s(O5);Z3e=n(fOe,"STRONG",{});var eDt=s(Z3e);gqr=r(eDt,"mpnet"),eDt.forEach(t),hqr=r(fOe," \u2014 "),QZ=n(fOe,"A",{href:!0});var oDt=s(QZ);pqr=r(oDt,"TFMPNetForQuestionAnswering"),oDt.forEach(t),_qr=r(fOe," (MPNet model)"),fOe.forEach(t),uqr=i(he),V5=n(he,"LI",{});var mOe=s(V5);e5e=n(mOe,"STRONG",{});var rDt=s(e5e);bqr=r(rDt,"rembert"),rDt.forEach(t),vqr=r(mOe," \u2014 "),WZ=n(mOe,"A",{href:!0});var tDt=s(WZ);Fqr=r(tDt,"TFRemBertForQuestionAnswering"),tDt.forEach(t),Tqr=r(mOe," (RemBERT model)"),mOe.forEach(t),Mqr=i(he),X5=n(he,"LI",{});var gOe=s(X5);o5e=n(gOe,"STRONG",{});var aDt=s(o5e);Eqr=r(aDt,"roberta"),aDt.forEach(t),Cqr=r(gOe," \u2014 "),HZ=n(gOe,"A",{href:!0});var nDt=s(HZ);wqr=r(nDt,"TFRobertaForQuestionAnswering"),nDt.forEach(t),Aqr=r(gOe," (RoBERTa model)"),gOe.forEach(t),Lqr=i(he),z5=n(he,"LI",{});var hOe=s(z5);r5e=n(hOe,"STRONG",{});var sDt=s(r5e);yqr=r(sDt,"roformer"),sDt.forEach(t),xqr=r(hOe," \u2014 "),UZ=n(hOe,"A",{href:!0});var lDt=s(UZ);$qr=r(lDt,"TFRoFormerForQuestionAnswering"),lDt.forEach(t),kqr=r(hOe," (RoFormer model)"),hOe.forEach(t),Sqr=i(he),Q5=n(he,"LI",{});var pOe=s(Q5);t5e=n(pOe,"STRONG",{});var iDt=s(t5e);Rqr=r(iDt,"xlm"),iDt.forEach(t),Pqr=r(pOe," \u2014 "),JZ=n(pOe,"A",{href:!0});var dDt=s(JZ);Bqr=r(dDt,"TFXLMForQuestionAnsweringSimple"),dDt.forEach(t),Iqr=r(pOe," (XLM model)"),pOe.forEach(t),Nqr=i(he),W5=n(he,"LI",{});var _Oe=s(W5);a5e=n(_Oe,"STRONG",{});var cDt=s(a5e);qqr=r(cDt,"xlm-roberta"),cDt.forEach(t),jqr=r(_Oe," \u2014 "),YZ=n(_Oe,"A",{href:!0});var fDt=s(YZ);Dqr=r(fDt,"TFXLMRobertaForQuestionAnswering"),fDt.forEach(t),Gqr=r(_Oe," (XLM-RoBERTa model)"),_Oe.forEach(t),Oqr=i(he),H5=n(he,"LI",{});var uOe=s(H5);n5e=n(uOe,"STRONG",{});var mDt=s(n5e);Vqr=r(mDt,"xlnet"),mDt.forEach(t),Xqr=r(uOe," \u2014 "),KZ=n(uOe,"A",{href:!0});var gDt=s(KZ);zqr=r(gDt,"TFXLNetForQuestionAnsweringSimple"),gDt.forEach(t),Qqr=r(uOe," (XLNet model)"),uOe.forEach(t),he.forEach(t),Wqr=i(Zl),T(U5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Zze=i(f),Vc=n(f,"H2",{class:!0});var iHe=s(Vc);J5=n(iHe,"A",{id:!0,class:!0,href:!0});var hDt=s(J5);s5e=n(hDt,"SPAN",{});var pDt=s(s5e);T(t$.$$.fragment,pDt),pDt.forEach(t),hDt.forEach(t),Hqr=i(iHe),l5e=n(iHe,"SPAN",{});var _Dt=s(l5e);Uqr=r(_Dt,"TFAutoModelForVision2Seq"),_Dt.forEach(t),iHe.forEach(t),eQe=i(f),hr=n(f,"DIV",{class:!0});var ei=s(hr);T(a$.$$.fragment,ei),Jqr=i(ei),Xc=n(ei,"P",{});var fae=s(Xc);Yqr=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZZ=n(fae,"A",{href:!0});var uDt=s(ZZ);Kqr=r(uDt,"from_pretrained()"),uDt.forEach(t),Zqr=r(fae," class method or the "),eee=n(fae,"A",{href:!0});var bDt=s(eee);ejr=r(bDt,"from_config()"),bDt.forEach(t),ojr=r(fae,` class
method.`),fae.forEach(t),rjr=i(ei),n$=n(ei,"P",{});var dHe=s(n$);tjr=r(dHe,"This class cannot be instantiated directly using "),i5e=n(dHe,"CODE",{});var vDt=s(i5e);ajr=r(vDt,"__init__()"),vDt.forEach(t),njr=r(dHe," (throws an error)."),dHe.forEach(t),sjr=i(ei),zt=n(ei,"DIV",{class:!0});var S7=s(zt);T(s$.$$.fragment,S7),ljr=i(S7),d5e=n(S7,"P",{});var FDt=s(d5e);ijr=r(FDt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FDt.forEach(t),djr=i(S7),zc=n(S7,"P",{});var mae=s(zc);cjr=r(mae,`Note:
Loading a model from its configuration file does `),c5e=n(mae,"STRONG",{});var TDt=s(c5e);fjr=r(TDt,"not"),TDt.forEach(t),mjr=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(mae,"A",{href:!0});var MDt=s(oee);gjr=r(MDt,"from_pretrained()"),MDt.forEach(t),hjr=r(mae," to load the model weights."),mae.forEach(t),pjr=i(S7),T(Y5.$$.fragment,S7),S7.forEach(t),_jr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(l$.$$.fragment,oi),ujr=i(oi),f5e=n(oi,"P",{});var EDt=s(f5e);bjr=r(EDt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EDt.forEach(t),vjr=i(oi),vn=n(oi,"P",{});var R7=s(vn);Fjr=r(R7,"The model class to instantiate is selected based on the "),m5e=n(R7,"CODE",{});var CDt=s(m5e);Tjr=r(CDt,"model_type"),CDt.forEach(t),Mjr=r(R7,` property of the config object (either
passed as an argument or loaded from `),g5e=n(R7,"CODE",{});var wDt=s(g5e);Ejr=r(wDt,"pretrained_model_name_or_path"),wDt.forEach(t),Cjr=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=n(R7,"CODE",{});var ADt=s(h5e);wjr=r(ADt,"pretrained_model_name_or_path"),ADt.forEach(t),Ajr=r(R7,":"),R7.forEach(t),Ljr=i(oi),p5e=n(oi,"UL",{});var LDt=s(p5e);K5=n(LDt,"LI",{});var bOe=s(K5);_5e=n(bOe,"STRONG",{});var yDt=s(_5e);yjr=r(yDt,"vision-encoder-decoder"),yDt.forEach(t),xjr=r(bOe," \u2014 "),ree=n(bOe,"A",{href:!0});var xDt=s(ree);$jr=r(xDt,"TFVisionEncoderDecoderModel"),xDt.forEach(t),kjr=r(bOe," (Vision Encoder decoder model)"),bOe.forEach(t),LDt.forEach(t),Sjr=i(oi),T(Z5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),oQe=i(f),Qc=n(f,"H2",{class:!0});var cHe=s(Qc);e0=n(cHe,"A",{id:!0,class:!0,href:!0});var $Dt=s(e0);u5e=n($Dt,"SPAN",{});var kDt=s(u5e);T(i$.$$.fragment,kDt),kDt.forEach(t),$Dt.forEach(t),Rjr=i(cHe),b5e=n(cHe,"SPAN",{});var SDt=s(b5e);Pjr=r(SDt,"TFAutoModelForSpeechSeq2Seq"),SDt.forEach(t),cHe.forEach(t),rQe=i(f),pr=n(f,"DIV",{class:!0});var ri=s(pr);T(d$.$$.fragment,ri),Bjr=i(ri),Wc=n(ri,"P",{});var gae=s(Wc);Ijr=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tee=n(gae,"A",{href:!0});var RDt=s(tee);Njr=r(RDt,"from_pretrained()"),RDt.forEach(t),qjr=r(gae," class method or the "),aee=n(gae,"A",{href:!0});var PDt=s(aee);jjr=r(PDt,"from_config()"),PDt.forEach(t),Djr=r(gae,` class
method.`),gae.forEach(t),Gjr=i(ri),c$=n(ri,"P",{});var fHe=s(c$);Ojr=r(fHe,"This class cannot be instantiated directly using "),v5e=n(fHe,"CODE",{});var BDt=s(v5e);Vjr=r(BDt,"__init__()"),BDt.forEach(t),Xjr=r(fHe," (throws an error)."),fHe.forEach(t),zjr=i(ri),Qt=n(ri,"DIV",{class:!0});var P7=s(Qt);T(f$.$$.fragment,P7),Qjr=i(P7),F5e=n(P7,"P",{});var IDt=s(F5e);Wjr=r(IDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),IDt.forEach(t),Hjr=i(P7),Hc=n(P7,"P",{});var hae=s(Hc);Ujr=r(hae,`Note:
Loading a model from its configuration file does `),T5e=n(hae,"STRONG",{});var NDt=s(T5e);Jjr=r(NDt,"not"),NDt.forEach(t),Yjr=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=n(hae,"A",{href:!0});var qDt=s(nee);Kjr=r(qDt,"from_pretrained()"),qDt.forEach(t),Zjr=r(hae," to load the model weights."),hae.forEach(t),eDr=i(P7),T(o0.$$.fragment,P7),P7.forEach(t),oDr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(m$.$$.fragment,ti),rDr=i(ti),M5e=n(ti,"P",{});var jDt=s(M5e);tDr=r(jDt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jDt.forEach(t),aDr=i(ti),Fn=n(ti,"P",{});var B7=s(Fn);nDr=r(B7,"The model class to instantiate is selected based on the "),E5e=n(B7,"CODE",{});var DDt=s(E5e);sDr=r(DDt,"model_type"),DDt.forEach(t),lDr=r(B7,` property of the config object (either
passed as an argument or loaded from `),C5e=n(B7,"CODE",{});var GDt=s(C5e);iDr=r(GDt,"pretrained_model_name_or_path"),GDt.forEach(t),dDr=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=n(B7,"CODE",{});var ODt=s(w5e);cDr=r(ODt,"pretrained_model_name_or_path"),ODt.forEach(t),fDr=r(B7,":"),B7.forEach(t),mDr=i(ti),A5e=n(ti,"UL",{});var VDt=s(A5e);r0=n(VDt,"LI",{});var vOe=s(r0);L5e=n(vOe,"STRONG",{});var XDt=s(L5e);gDr=r(XDt,"speech_to_text"),XDt.forEach(t),hDr=r(vOe," \u2014 "),see=n(vOe,"A",{href:!0});var zDt=s(see);pDr=r(zDt,"TFSpeech2TextForConditionalGeneration"),zDt.forEach(t),_Dr=r(vOe," (Speech2Text model)"),vOe.forEach(t),VDt.forEach(t),uDr=i(ti),T(t0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),tQe=i(f),Uc=n(f,"H2",{class:!0});var mHe=s(Uc);a0=n(mHe,"A",{id:!0,class:!0,href:!0});var QDt=s(a0);y5e=n(QDt,"SPAN",{});var WDt=s(y5e);T(g$.$$.fragment,WDt),WDt.forEach(t),QDt.forEach(t),bDr=i(mHe),x5e=n(mHe,"SPAN",{});var HDt=s(x5e);vDr=r(HDt,"FlaxAutoModel"),HDt.forEach(t),mHe.forEach(t),aQe=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(h$.$$.fragment,ai),FDr=i(ai),Jc=n(ai,"P",{});var pae=s(Jc);TDr=r(pae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lee=n(pae,"A",{href:!0});var UDt=s(lee);MDr=r(UDt,"from_pretrained()"),UDt.forEach(t),EDr=r(pae," class method or the "),iee=n(pae,"A",{href:!0});var JDt=s(iee);CDr=r(JDt,"from_config()"),JDt.forEach(t),wDr=r(pae,` class
method.`),pae.forEach(t),ADr=i(ai),p$=n(ai,"P",{});var gHe=s(p$);LDr=r(gHe,"This class cannot be instantiated directly using "),$5e=n(gHe,"CODE",{});var YDt=s($5e);yDr=r(YDt,"__init__()"),YDt.forEach(t),xDr=r(gHe," (throws an error)."),gHe.forEach(t),$Dr=i(ai),Wt=n(ai,"DIV",{class:!0});var I7=s(Wt);T(_$.$$.fragment,I7),kDr=i(I7),k5e=n(I7,"P",{});var KDt=s(k5e);SDr=r(KDt,"Instantiates one of the base model classes of the library from a configuration."),KDt.forEach(t),RDr=i(I7),Yc=n(I7,"P",{});var _ae=s(Yc);PDr=r(_ae,`Note:
Loading a model from its configuration file does `),S5e=n(_ae,"STRONG",{});var ZDt=s(S5e);BDr=r(ZDt,"not"),ZDt.forEach(t),IDr=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=n(_ae,"A",{href:!0});var eGt=s(dee);NDr=r(eGt,"from_pretrained()"),eGt.forEach(t),qDr=r(_ae," to load the model weights."),_ae.forEach(t),jDr=i(I7),T(n0.$$.fragment,I7),I7.forEach(t),DDr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(u$.$$.fragment,ni),GDr=i(ni),R5e=n(ni,"P",{});var oGt=s(R5e);ODr=r(oGt,"Instantiate one of the base model classes of the library from a pretrained model."),oGt.forEach(t),VDr=i(ni),Tn=n(ni,"P",{});var N7=s(Tn);XDr=r(N7,"The model class to instantiate is selected based on the "),P5e=n(N7,"CODE",{});var rGt=s(P5e);zDr=r(rGt,"model_type"),rGt.forEach(t),QDr=r(N7,` property of the config object (either
passed as an argument or loaded from `),B5e=n(N7,"CODE",{});var tGt=s(B5e);WDr=r(tGt,"pretrained_model_name_or_path"),tGt.forEach(t),HDr=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=n(N7,"CODE",{});var aGt=s(I5e);UDr=r(aGt,"pretrained_model_name_or_path"),aGt.forEach(t),JDr=r(N7,":"),N7.forEach(t),YDr=i(ni),oe=n(ni,"UL",{});var ae=s(oe);s0=n(ae,"LI",{});var FOe=s(s0);N5e=n(FOe,"STRONG",{});var nGt=s(N5e);KDr=r(nGt,"albert"),nGt.forEach(t),ZDr=r(FOe," \u2014 "),cee=n(FOe,"A",{href:!0});var sGt=s(cee);eGr=r(sGt,"FlaxAlbertModel"),sGt.forEach(t),oGr=r(FOe," (ALBERT model)"),FOe.forEach(t),rGr=i(ae),l0=n(ae,"LI",{});var TOe=s(l0);q5e=n(TOe,"STRONG",{});var lGt=s(q5e);tGr=r(lGt,"bart"),lGt.forEach(t),aGr=r(TOe," \u2014 "),fee=n(TOe,"A",{href:!0});var iGt=s(fee);nGr=r(iGt,"FlaxBartModel"),iGt.forEach(t),sGr=r(TOe," (BART model)"),TOe.forEach(t),lGr=i(ae),i0=n(ae,"LI",{});var MOe=s(i0);j5e=n(MOe,"STRONG",{});var dGt=s(j5e);iGr=r(dGt,"beit"),dGt.forEach(t),dGr=r(MOe," \u2014 "),mee=n(MOe,"A",{href:!0});var cGt=s(mee);cGr=r(cGt,"FlaxBeitModel"),cGt.forEach(t),fGr=r(MOe," (BEiT model)"),MOe.forEach(t),mGr=i(ae),d0=n(ae,"LI",{});var EOe=s(d0);D5e=n(EOe,"STRONG",{});var fGt=s(D5e);gGr=r(fGt,"bert"),fGt.forEach(t),hGr=r(EOe," \u2014 "),gee=n(EOe,"A",{href:!0});var mGt=s(gee);pGr=r(mGt,"FlaxBertModel"),mGt.forEach(t),_Gr=r(EOe," (BERT model)"),EOe.forEach(t),uGr=i(ae),c0=n(ae,"LI",{});var COe=s(c0);G5e=n(COe,"STRONG",{});var gGt=s(G5e);bGr=r(gGt,"big_bird"),gGt.forEach(t),vGr=r(COe," \u2014 "),hee=n(COe,"A",{href:!0});var hGt=s(hee);FGr=r(hGt,"FlaxBigBirdModel"),hGt.forEach(t),TGr=r(COe," (BigBird model)"),COe.forEach(t),MGr=i(ae),f0=n(ae,"LI",{});var wOe=s(f0);O5e=n(wOe,"STRONG",{});var pGt=s(O5e);EGr=r(pGt,"blenderbot"),pGt.forEach(t),CGr=r(wOe," \u2014 "),pee=n(wOe,"A",{href:!0});var _Gt=s(pee);wGr=r(_Gt,"FlaxBlenderbotModel"),_Gt.forEach(t),AGr=r(wOe," (Blenderbot model)"),wOe.forEach(t),LGr=i(ae),m0=n(ae,"LI",{});var AOe=s(m0);V5e=n(AOe,"STRONG",{});var uGt=s(V5e);yGr=r(uGt,"blenderbot-small"),uGt.forEach(t),xGr=r(AOe," \u2014 "),_ee=n(AOe,"A",{href:!0});var bGt=s(_ee);$Gr=r(bGt,"FlaxBlenderbotSmallModel"),bGt.forEach(t),kGr=r(AOe," (BlenderbotSmall model)"),AOe.forEach(t),SGr=i(ae),g0=n(ae,"LI",{});var LOe=s(g0);X5e=n(LOe,"STRONG",{});var vGt=s(X5e);RGr=r(vGt,"clip"),vGt.forEach(t),PGr=r(LOe," \u2014 "),uee=n(LOe,"A",{href:!0});var FGt=s(uee);BGr=r(FGt,"FlaxCLIPModel"),FGt.forEach(t),IGr=r(LOe," (CLIP model)"),LOe.forEach(t),NGr=i(ae),h0=n(ae,"LI",{});var yOe=s(h0);z5e=n(yOe,"STRONG",{});var TGt=s(z5e);qGr=r(TGt,"distilbert"),TGt.forEach(t),jGr=r(yOe," \u2014 "),bee=n(yOe,"A",{href:!0});var MGt=s(bee);DGr=r(MGt,"FlaxDistilBertModel"),MGt.forEach(t),GGr=r(yOe," (DistilBERT model)"),yOe.forEach(t),OGr=i(ae),p0=n(ae,"LI",{});var xOe=s(p0);Q5e=n(xOe,"STRONG",{});var EGt=s(Q5e);VGr=r(EGt,"electra"),EGt.forEach(t),XGr=r(xOe," \u2014 "),vee=n(xOe,"A",{href:!0});var CGt=s(vee);zGr=r(CGt,"FlaxElectraModel"),CGt.forEach(t),QGr=r(xOe," (ELECTRA model)"),xOe.forEach(t),WGr=i(ae),_0=n(ae,"LI",{});var $Oe=s(_0);W5e=n($Oe,"STRONG",{});var wGt=s(W5e);HGr=r(wGt,"gpt2"),wGt.forEach(t),UGr=r($Oe," \u2014 "),Fee=n($Oe,"A",{href:!0});var AGt=s(Fee);JGr=r(AGt,"FlaxGPT2Model"),AGt.forEach(t),YGr=r($Oe," (OpenAI GPT-2 model)"),$Oe.forEach(t),KGr=i(ae),u0=n(ae,"LI",{});var kOe=s(u0);H5e=n(kOe,"STRONG",{});var LGt=s(H5e);ZGr=r(LGt,"gpt_neo"),LGt.forEach(t),eOr=r(kOe," \u2014 "),Tee=n(kOe,"A",{href:!0});var yGt=s(Tee);oOr=r(yGt,"FlaxGPTNeoModel"),yGt.forEach(t),rOr=r(kOe," (GPT Neo model)"),kOe.forEach(t),tOr=i(ae),b0=n(ae,"LI",{});var SOe=s(b0);U5e=n(SOe,"STRONG",{});var xGt=s(U5e);aOr=r(xGt,"gptj"),xGt.forEach(t),nOr=r(SOe," \u2014 "),Mee=n(SOe,"A",{href:!0});var $Gt=s(Mee);sOr=r($Gt,"FlaxGPTJModel"),$Gt.forEach(t),lOr=r(SOe," (GPT-J model)"),SOe.forEach(t),iOr=i(ae),v0=n(ae,"LI",{});var ROe=s(v0);J5e=n(ROe,"STRONG",{});var kGt=s(J5e);dOr=r(kGt,"longt5"),kGt.forEach(t),cOr=r(ROe," \u2014 "),Eee=n(ROe,"A",{href:!0});var SGt=s(Eee);fOr=r(SGt,"FlaxLongT5Model"),SGt.forEach(t),mOr=r(ROe," (LongT5 model)"),ROe.forEach(t),gOr=i(ae),F0=n(ae,"LI",{});var POe=s(F0);Y5e=n(POe,"STRONG",{});var RGt=s(Y5e);hOr=r(RGt,"marian"),RGt.forEach(t),pOr=r(POe," \u2014 "),Cee=n(POe,"A",{href:!0});var PGt=s(Cee);_Or=r(PGt,"FlaxMarianModel"),PGt.forEach(t),uOr=r(POe," (Marian model)"),POe.forEach(t),bOr=i(ae),T0=n(ae,"LI",{});var BOe=s(T0);K5e=n(BOe,"STRONG",{});var BGt=s(K5e);vOr=r(BGt,"mbart"),BGt.forEach(t),FOr=r(BOe," \u2014 "),wee=n(BOe,"A",{href:!0});var IGt=s(wee);TOr=r(IGt,"FlaxMBartModel"),IGt.forEach(t),MOr=r(BOe," (mBART model)"),BOe.forEach(t),EOr=i(ae),M0=n(ae,"LI",{});var IOe=s(M0);Z5e=n(IOe,"STRONG",{});var NGt=s(Z5e);COr=r(NGt,"mt5"),NGt.forEach(t),wOr=r(IOe," \u2014 "),Aee=n(IOe,"A",{href:!0});var qGt=s(Aee);AOr=r(qGt,"FlaxMT5Model"),qGt.forEach(t),LOr=r(IOe," (MT5 model)"),IOe.forEach(t),yOr=i(ae),E0=n(ae,"LI",{});var NOe=s(E0);e0e=n(NOe,"STRONG",{});var jGt=s(e0e);xOr=r(jGt,"opt"),jGt.forEach(t),$Or=r(NOe," \u2014 "),Lee=n(NOe,"A",{href:!0});var DGt=s(Lee);kOr=r(DGt,"FlaxOPTModel"),DGt.forEach(t),SOr=r(NOe," (OPT model)"),NOe.forEach(t),ROr=i(ae),C0=n(ae,"LI",{});var qOe=s(C0);o0e=n(qOe,"STRONG",{});var GGt=s(o0e);POr=r(GGt,"pegasus"),GGt.forEach(t),BOr=r(qOe," \u2014 "),yee=n(qOe,"A",{href:!0});var OGt=s(yee);IOr=r(OGt,"FlaxPegasusModel"),OGt.forEach(t),NOr=r(qOe," (Pegasus model)"),qOe.forEach(t),qOr=i(ae),w0=n(ae,"LI",{});var jOe=s(w0);r0e=n(jOe,"STRONG",{});var VGt=s(r0e);jOr=r(VGt,"roberta"),VGt.forEach(t),DOr=r(jOe," \u2014 "),xee=n(jOe,"A",{href:!0});var XGt=s(xee);GOr=r(XGt,"FlaxRobertaModel"),XGt.forEach(t),OOr=r(jOe," (RoBERTa model)"),jOe.forEach(t),VOr=i(ae),A0=n(ae,"LI",{});var DOe=s(A0);t0e=n(DOe,"STRONG",{});var zGt=s(t0e);XOr=r(zGt,"roformer"),zGt.forEach(t),zOr=r(DOe," \u2014 "),$ee=n(DOe,"A",{href:!0});var QGt=s($ee);QOr=r(QGt,"FlaxRoFormerModel"),QGt.forEach(t),WOr=r(DOe," (RoFormer model)"),DOe.forEach(t),HOr=i(ae),L0=n(ae,"LI",{});var GOe=s(L0);a0e=n(GOe,"STRONG",{});var WGt=s(a0e);UOr=r(WGt,"t5"),WGt.forEach(t),JOr=r(GOe," \u2014 "),kee=n(GOe,"A",{href:!0});var HGt=s(kee);YOr=r(HGt,"FlaxT5Model"),HGt.forEach(t),KOr=r(GOe," (T5 model)"),GOe.forEach(t),ZOr=i(ae),y0=n(ae,"LI",{});var OOe=s(y0);n0e=n(OOe,"STRONG",{});var UGt=s(n0e);eVr=r(UGt,"vision-text-dual-encoder"),UGt.forEach(t),oVr=r(OOe," \u2014 "),See=n(OOe,"A",{href:!0});var JGt=s(See);rVr=r(JGt,"FlaxVisionTextDualEncoderModel"),JGt.forEach(t),tVr=r(OOe," (VisionTextDualEncoder model)"),OOe.forEach(t),aVr=i(ae),x0=n(ae,"LI",{});var VOe=s(x0);s0e=n(VOe,"STRONG",{});var YGt=s(s0e);nVr=r(YGt,"vit"),YGt.forEach(t),sVr=r(VOe," \u2014 "),Ree=n(VOe,"A",{href:!0});var KGt=s(Ree);lVr=r(KGt,"FlaxViTModel"),KGt.forEach(t),iVr=r(VOe," (ViT model)"),VOe.forEach(t),dVr=i(ae),$0=n(ae,"LI",{});var XOe=s($0);l0e=n(XOe,"STRONG",{});var ZGt=s(l0e);cVr=r(ZGt,"wav2vec2"),ZGt.forEach(t),fVr=r(XOe," \u2014 "),Pee=n(XOe,"A",{href:!0});var eOt=s(Pee);mVr=r(eOt,"FlaxWav2Vec2Model"),eOt.forEach(t),gVr=r(XOe," (Wav2Vec2 model)"),XOe.forEach(t),hVr=i(ae),k0=n(ae,"LI",{});var zOe=s(k0);i0e=n(zOe,"STRONG",{});var oOt=s(i0e);pVr=r(oOt,"xglm"),oOt.forEach(t),_Vr=r(zOe," \u2014 "),Bee=n(zOe,"A",{href:!0});var rOt=s(Bee);uVr=r(rOt,"FlaxXGLMModel"),rOt.forEach(t),bVr=r(zOe," (XGLM model)"),zOe.forEach(t),vVr=i(ae),S0=n(ae,"LI",{});var QOe=s(S0);d0e=n(QOe,"STRONG",{});var tOt=s(d0e);FVr=r(tOt,"xlm-roberta"),tOt.forEach(t),TVr=r(QOe," \u2014 "),Iee=n(QOe,"A",{href:!0});var aOt=s(Iee);MVr=r(aOt,"FlaxXLMRobertaModel"),aOt.forEach(t),EVr=r(QOe," (XLM-RoBERTa model)"),QOe.forEach(t),ae.forEach(t),CVr=i(ni),T(R0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),nQe=i(f),Kc=n(f,"H2",{class:!0});var hHe=s(Kc);P0=n(hHe,"A",{id:!0,class:!0,href:!0});var nOt=s(P0);c0e=n(nOt,"SPAN",{});var sOt=s(c0e);T(b$.$$.fragment,sOt),sOt.forEach(t),nOt.forEach(t),wVr=i(hHe),f0e=n(hHe,"SPAN",{});var lOt=s(f0e);AVr=r(lOt,"FlaxAutoModelForCausalLM"),lOt.forEach(t),hHe.forEach(t),sQe=i(f),ur=n(f,"DIV",{class:!0});var si=s(ur);T(v$.$$.fragment,si),LVr=i(si),Zc=n(si,"P",{});var uae=s(Zc);yVr=r(uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nee=n(uae,"A",{href:!0});var iOt=s(Nee);xVr=r(iOt,"from_pretrained()"),iOt.forEach(t),$Vr=r(uae," class method or the "),qee=n(uae,"A",{href:!0});var dOt=s(qee);kVr=r(dOt,"from_config()"),dOt.forEach(t),SVr=r(uae,` class
method.`),uae.forEach(t),RVr=i(si),F$=n(si,"P",{});var pHe=s(F$);PVr=r(pHe,"This class cannot be instantiated directly using "),m0e=n(pHe,"CODE",{});var cOt=s(m0e);BVr=r(cOt,"__init__()"),cOt.forEach(t),IVr=r(pHe," (throws an error)."),pHe.forEach(t),NVr=i(si),Ht=n(si,"DIV",{class:!0});var q7=s(Ht);T(T$.$$.fragment,q7),qVr=i(q7),g0e=n(q7,"P",{});var fOt=s(g0e);jVr=r(fOt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fOt.forEach(t),DVr=i(q7),ef=n(q7,"P",{});var bae=s(ef);GVr=r(bae,`Note:
Loading a model from its configuration file does `),h0e=n(bae,"STRONG",{});var mOt=s(h0e);OVr=r(mOt,"not"),mOt.forEach(t),VVr=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=n(bae,"A",{href:!0});var gOt=s(jee);XVr=r(gOt,"from_pretrained()"),gOt.forEach(t),zVr=r(bae," to load the model weights."),bae.forEach(t),QVr=i(q7),T(B0.$$.fragment,q7),q7.forEach(t),WVr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(M$.$$.fragment,li),HVr=i(li),p0e=n(li,"P",{});var hOt=s(p0e);UVr=r(hOt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hOt.forEach(t),JVr=i(li),Mn=n(li,"P",{});var j7=s(Mn);YVr=r(j7,"The model class to instantiate is selected based on the "),_0e=n(j7,"CODE",{});var pOt=s(_0e);KVr=r(pOt,"model_type"),pOt.forEach(t),ZVr=r(j7,` property of the config object (either
passed as an argument or loaded from `),u0e=n(j7,"CODE",{});var _Ot=s(u0e);eXr=r(_Ot,"pretrained_model_name_or_path"),_Ot.forEach(t),oXr=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b0e=n(j7,"CODE",{});var uOt=s(b0e);rXr=r(uOt,"pretrained_model_name_or_path"),uOt.forEach(t),tXr=r(j7,":"),j7.forEach(t),aXr=i(li),xe=n(li,"UL",{});var Ne=s(xe);I0=n(Ne,"LI",{});var WOe=s(I0);v0e=n(WOe,"STRONG",{});var bOt=s(v0e);nXr=r(bOt,"bart"),bOt.forEach(t),sXr=r(WOe," \u2014 "),Dee=n(WOe,"A",{href:!0});var vOt=s(Dee);lXr=r(vOt,"FlaxBartForCausalLM"),vOt.forEach(t),iXr=r(WOe," (BART model)"),WOe.forEach(t),dXr=i(Ne),N0=n(Ne,"LI",{});var HOe=s(N0);F0e=n(HOe,"STRONG",{});var FOt=s(F0e);cXr=r(FOt,"bert"),FOt.forEach(t),fXr=r(HOe," \u2014 "),Gee=n(HOe,"A",{href:!0});var TOt=s(Gee);mXr=r(TOt,"FlaxBertForCausalLM"),TOt.forEach(t),gXr=r(HOe," (BERT model)"),HOe.forEach(t),hXr=i(Ne),q0=n(Ne,"LI",{});var UOe=s(q0);T0e=n(UOe,"STRONG",{});var MOt=s(T0e);pXr=r(MOt,"big_bird"),MOt.forEach(t),_Xr=r(UOe," \u2014 "),Oee=n(UOe,"A",{href:!0});var EOt=s(Oee);uXr=r(EOt,"FlaxBigBirdForCausalLM"),EOt.forEach(t),bXr=r(UOe," (BigBird model)"),UOe.forEach(t),vXr=i(Ne),j0=n(Ne,"LI",{});var JOe=s(j0);M0e=n(JOe,"STRONG",{});var COt=s(M0e);FXr=r(COt,"electra"),COt.forEach(t),TXr=r(JOe," \u2014 "),Vee=n(JOe,"A",{href:!0});var wOt=s(Vee);MXr=r(wOt,"FlaxElectraForCausalLM"),wOt.forEach(t),EXr=r(JOe," (ELECTRA model)"),JOe.forEach(t),CXr=i(Ne),D0=n(Ne,"LI",{});var YOe=s(D0);E0e=n(YOe,"STRONG",{});var AOt=s(E0e);wXr=r(AOt,"gpt2"),AOt.forEach(t),AXr=r(YOe," \u2014 "),Xee=n(YOe,"A",{href:!0});var LOt=s(Xee);LXr=r(LOt,"FlaxGPT2LMHeadModel"),LOt.forEach(t),yXr=r(YOe," (OpenAI GPT-2 model)"),YOe.forEach(t),xXr=i(Ne),G0=n(Ne,"LI",{});var KOe=s(G0);C0e=n(KOe,"STRONG",{});var yOt=s(C0e);$Xr=r(yOt,"gpt_neo"),yOt.forEach(t),kXr=r(KOe," \u2014 "),zee=n(KOe,"A",{href:!0});var xOt=s(zee);SXr=r(xOt,"FlaxGPTNeoForCausalLM"),xOt.forEach(t),RXr=r(KOe," (GPT Neo model)"),KOe.forEach(t),PXr=i(Ne),O0=n(Ne,"LI",{});var ZOe=s(O0);w0e=n(ZOe,"STRONG",{});var $Ot=s(w0e);BXr=r($Ot,"gptj"),$Ot.forEach(t),IXr=r(ZOe," \u2014 "),Qee=n(ZOe,"A",{href:!0});var kOt=s(Qee);NXr=r(kOt,"FlaxGPTJForCausalLM"),kOt.forEach(t),qXr=r(ZOe," (GPT-J model)"),ZOe.forEach(t),jXr=i(Ne),V0=n(Ne,"LI",{});var eVe=s(V0);A0e=n(eVe,"STRONG",{});var SOt=s(A0e);DXr=r(SOt,"opt"),SOt.forEach(t),GXr=r(eVe," \u2014 "),Wee=n(eVe,"A",{href:!0});var ROt=s(Wee);OXr=r(ROt,"FlaxOPTForCausalLM"),ROt.forEach(t),VXr=r(eVe," (OPT model)"),eVe.forEach(t),XXr=i(Ne),X0=n(Ne,"LI",{});var oVe=s(X0);L0e=n(oVe,"STRONG",{});var POt=s(L0e);zXr=r(POt,"roberta"),POt.forEach(t),QXr=r(oVe," \u2014 "),Hee=n(oVe,"A",{href:!0});var BOt=s(Hee);WXr=r(BOt,"FlaxRobertaForCausalLM"),BOt.forEach(t),HXr=r(oVe," (RoBERTa model)"),oVe.forEach(t),UXr=i(Ne),z0=n(Ne,"LI",{});var rVe=s(z0);y0e=n(rVe,"STRONG",{});var IOt=s(y0e);JXr=r(IOt,"xglm"),IOt.forEach(t),YXr=r(rVe," \u2014 "),Uee=n(rVe,"A",{href:!0});var NOt=s(Uee);KXr=r(NOt,"FlaxXGLMForCausalLM"),NOt.forEach(t),ZXr=r(rVe," (XGLM model)"),rVe.forEach(t),Ne.forEach(t),ezr=i(li),T(Q0.$$.fragment,li),li.forEach(t),si.forEach(t),lQe=i(f),of=n(f,"H2",{class:!0});var _He=s(of);W0=n(_He,"A",{id:!0,class:!0,href:!0});var qOt=s(W0);x0e=n(qOt,"SPAN",{});var jOt=s(x0e);T(E$.$$.fragment,jOt),jOt.forEach(t),qOt.forEach(t),ozr=i(_He),$0e=n(_He,"SPAN",{});var DOt=s($0e);rzr=r(DOt,"FlaxAutoModelForPreTraining"),DOt.forEach(t),_He.forEach(t),iQe=i(f),br=n(f,"DIV",{class:!0});var ii=s(br);T(C$.$$.fragment,ii),tzr=i(ii),rf=n(ii,"P",{});var vae=s(rf);azr=r(vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jee=n(vae,"A",{href:!0});var GOt=s(Jee);nzr=r(GOt,"from_pretrained()"),GOt.forEach(t),szr=r(vae," class method or the "),Yee=n(vae,"A",{href:!0});var OOt=s(Yee);lzr=r(OOt,"from_config()"),OOt.forEach(t),izr=r(vae,` class
method.`),vae.forEach(t),dzr=i(ii),w$=n(ii,"P",{});var uHe=s(w$);czr=r(uHe,"This class cannot be instantiated directly using "),k0e=n(uHe,"CODE",{});var VOt=s(k0e);fzr=r(VOt,"__init__()"),VOt.forEach(t),mzr=r(uHe," (throws an error)."),uHe.forEach(t),gzr=i(ii),Ut=n(ii,"DIV",{class:!0});var D7=s(Ut);T(A$.$$.fragment,D7),hzr=i(D7),S0e=n(D7,"P",{});var XOt=s(S0e);pzr=r(XOt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),XOt.forEach(t),_zr=i(D7),tf=n(D7,"P",{});var Fae=s(tf);uzr=r(Fae,`Note:
Loading a model from its configuration file does `),R0e=n(Fae,"STRONG",{});var zOt=s(R0e);bzr=r(zOt,"not"),zOt.forEach(t),vzr=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=n(Fae,"A",{href:!0});var QOt=s(Kee);Fzr=r(QOt,"from_pretrained()"),QOt.forEach(t),Tzr=r(Fae," to load the model weights."),Fae.forEach(t),Mzr=i(D7),T(H0.$$.fragment,D7),D7.forEach(t),Ezr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(L$.$$.fragment,di),Czr=i(di),P0e=n(di,"P",{});var WOt=s(P0e);wzr=r(WOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WOt.forEach(t),Azr=i(di),En=n(di,"P",{});var G7=s(En);Lzr=r(G7,"The model class to instantiate is selected based on the "),B0e=n(G7,"CODE",{});var HOt=s(B0e);yzr=r(HOt,"model_type"),HOt.forEach(t),xzr=r(G7,` property of the config object (either
passed as an argument or loaded from `),I0e=n(G7,"CODE",{});var UOt=s(I0e);$zr=r(UOt,"pretrained_model_name_or_path"),UOt.forEach(t),kzr=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=n(G7,"CODE",{});var JOt=s(N0e);Szr=r(JOt,"pretrained_model_name_or_path"),JOt.forEach(t),Rzr=r(G7,":"),G7.forEach(t),Pzr=i(di),Ee=n(di,"UL",{});var we=s(Ee);U0=n(we,"LI",{});var tVe=s(U0);q0e=n(tVe,"STRONG",{});var YOt=s(q0e);Bzr=r(YOt,"albert"),YOt.forEach(t),Izr=r(tVe," \u2014 "),Zee=n(tVe,"A",{href:!0});var KOt=s(Zee);Nzr=r(KOt,"FlaxAlbertForPreTraining"),KOt.forEach(t),qzr=r(tVe," (ALBERT model)"),tVe.forEach(t),jzr=i(we),J0=n(we,"LI",{});var aVe=s(J0);j0e=n(aVe,"STRONG",{});var ZOt=s(j0e);Dzr=r(ZOt,"bart"),ZOt.forEach(t),Gzr=r(aVe," \u2014 "),eoe=n(aVe,"A",{href:!0});var eVt=s(eoe);Ozr=r(eVt,"FlaxBartForConditionalGeneration"),eVt.forEach(t),Vzr=r(aVe," (BART model)"),aVe.forEach(t),Xzr=i(we),Y0=n(we,"LI",{});var nVe=s(Y0);D0e=n(nVe,"STRONG",{});var oVt=s(D0e);zzr=r(oVt,"bert"),oVt.forEach(t),Qzr=r(nVe," \u2014 "),ooe=n(nVe,"A",{href:!0});var rVt=s(ooe);Wzr=r(rVt,"FlaxBertForPreTraining"),rVt.forEach(t),Hzr=r(nVe," (BERT model)"),nVe.forEach(t),Uzr=i(we),K0=n(we,"LI",{});var sVe=s(K0);G0e=n(sVe,"STRONG",{});var tVt=s(G0e);Jzr=r(tVt,"big_bird"),tVt.forEach(t),Yzr=r(sVe," \u2014 "),roe=n(sVe,"A",{href:!0});var aVt=s(roe);Kzr=r(aVt,"FlaxBigBirdForPreTraining"),aVt.forEach(t),Zzr=r(sVe," (BigBird model)"),sVe.forEach(t),eQr=i(we),Z0=n(we,"LI",{});var lVe=s(Z0);O0e=n(lVe,"STRONG",{});var nVt=s(O0e);oQr=r(nVt,"electra"),nVt.forEach(t),rQr=r(lVe," \u2014 "),toe=n(lVe,"A",{href:!0});var sVt=s(toe);tQr=r(sVt,"FlaxElectraForPreTraining"),sVt.forEach(t),aQr=r(lVe," (ELECTRA model)"),lVe.forEach(t),nQr=i(we),ew=n(we,"LI",{});var iVe=s(ew);V0e=n(iVe,"STRONG",{});var lVt=s(V0e);sQr=r(lVt,"longt5"),lVt.forEach(t),lQr=r(iVe," \u2014 "),aoe=n(iVe,"A",{href:!0});var iVt=s(aoe);iQr=r(iVt,"FlaxLongT5ForConditionalGeneration"),iVt.forEach(t),dQr=r(iVe," (LongT5 model)"),iVe.forEach(t),cQr=i(we),ow=n(we,"LI",{});var dVe=s(ow);X0e=n(dVe,"STRONG",{});var dVt=s(X0e);fQr=r(dVt,"mbart"),dVt.forEach(t),mQr=r(dVe," \u2014 "),noe=n(dVe,"A",{href:!0});var cVt=s(noe);gQr=r(cVt,"FlaxMBartForConditionalGeneration"),cVt.forEach(t),hQr=r(dVe," (mBART model)"),dVe.forEach(t),pQr=i(we),rw=n(we,"LI",{});var cVe=s(rw);z0e=n(cVe,"STRONG",{});var fVt=s(z0e);_Qr=r(fVt,"mt5"),fVt.forEach(t),uQr=r(cVe," \u2014 "),soe=n(cVe,"A",{href:!0});var mVt=s(soe);bQr=r(mVt,"FlaxMT5ForConditionalGeneration"),mVt.forEach(t),vQr=r(cVe," (MT5 model)"),cVe.forEach(t),FQr=i(we),tw=n(we,"LI",{});var fVe=s(tw);Q0e=n(fVe,"STRONG",{});var gVt=s(Q0e);TQr=r(gVt,"roberta"),gVt.forEach(t),MQr=r(fVe," \u2014 "),loe=n(fVe,"A",{href:!0});var hVt=s(loe);EQr=r(hVt,"FlaxRobertaForMaskedLM"),hVt.forEach(t),CQr=r(fVe," (RoBERTa model)"),fVe.forEach(t),wQr=i(we),aw=n(we,"LI",{});var mVe=s(aw);W0e=n(mVe,"STRONG",{});var pVt=s(W0e);AQr=r(pVt,"roformer"),pVt.forEach(t),LQr=r(mVe," \u2014 "),ioe=n(mVe,"A",{href:!0});var _Vt=s(ioe);yQr=r(_Vt,"FlaxRoFormerForMaskedLM"),_Vt.forEach(t),xQr=r(mVe," (RoFormer model)"),mVe.forEach(t),$Qr=i(we),nw=n(we,"LI",{});var gVe=s(nw);H0e=n(gVe,"STRONG",{});var uVt=s(H0e);kQr=r(uVt,"t5"),uVt.forEach(t),SQr=r(gVe," \u2014 "),doe=n(gVe,"A",{href:!0});var bVt=s(doe);RQr=r(bVt,"FlaxT5ForConditionalGeneration"),bVt.forEach(t),PQr=r(gVe," (T5 model)"),gVe.forEach(t),BQr=i(we),sw=n(we,"LI",{});var hVe=s(sw);U0e=n(hVe,"STRONG",{});var vVt=s(U0e);IQr=r(vVt,"wav2vec2"),vVt.forEach(t),NQr=r(hVe," \u2014 "),coe=n(hVe,"A",{href:!0});var FVt=s(coe);qQr=r(FVt,"FlaxWav2Vec2ForPreTraining"),FVt.forEach(t),jQr=r(hVe," (Wav2Vec2 model)"),hVe.forEach(t),DQr=i(we),lw=n(we,"LI",{});var pVe=s(lw);J0e=n(pVe,"STRONG",{});var TVt=s(J0e);GQr=r(TVt,"xlm-roberta"),TVt.forEach(t),OQr=r(pVe," \u2014 "),foe=n(pVe,"A",{href:!0});var MVt=s(foe);VQr=r(MVt,"FlaxXLMRobertaForMaskedLM"),MVt.forEach(t),XQr=r(pVe," (XLM-RoBERTa model)"),pVe.forEach(t),we.forEach(t),zQr=i(di),T(iw.$$.fragment,di),di.forEach(t),ii.forEach(t),dQe=i(f),af=n(f,"H2",{class:!0});var bHe=s(af);dw=n(bHe,"A",{id:!0,class:!0,href:!0});var EVt=s(dw);Y0e=n(EVt,"SPAN",{});var CVt=s(Y0e);T(y$.$$.fragment,CVt),CVt.forEach(t),EVt.forEach(t),QQr=i(bHe),K0e=n(bHe,"SPAN",{});var wVt=s(K0e);WQr=r(wVt,"FlaxAutoModelForMaskedLM"),wVt.forEach(t),bHe.forEach(t),cQe=i(f),vr=n(f,"DIV",{class:!0});var ci=s(vr);T(x$.$$.fragment,ci),HQr=i(ci),nf=n(ci,"P",{});var Tae=s(nf);UQr=r(Tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),moe=n(Tae,"A",{href:!0});var AVt=s(moe);JQr=r(AVt,"from_pretrained()"),AVt.forEach(t),YQr=r(Tae," class method or the "),goe=n(Tae,"A",{href:!0});var LVt=s(goe);KQr=r(LVt,"from_config()"),LVt.forEach(t),ZQr=r(Tae,` class
method.`),Tae.forEach(t),eWr=i(ci),$$=n(ci,"P",{});var vHe=s($$);oWr=r(vHe,"This class cannot be instantiated directly using "),Z0e=n(vHe,"CODE",{});var yVt=s(Z0e);rWr=r(yVt,"__init__()"),yVt.forEach(t),tWr=r(vHe," (throws an error)."),vHe.forEach(t),aWr=i(ci),Jt=n(ci,"DIV",{class:!0});var O7=s(Jt);T(k$.$$.fragment,O7),nWr=i(O7),ewe=n(O7,"P",{});var xVt=s(ewe);sWr=r(xVt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xVt.forEach(t),lWr=i(O7),sf=n(O7,"P",{});var Mae=s(sf);iWr=r(Mae,`Note:
Loading a model from its configuration file does `),owe=n(Mae,"STRONG",{});var $Vt=s(owe);dWr=r($Vt,"not"),$Vt.forEach(t),cWr=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=n(Mae,"A",{href:!0});var kVt=s(hoe);fWr=r(kVt,"from_pretrained()"),kVt.forEach(t),mWr=r(Mae," to load the model weights."),Mae.forEach(t),gWr=i(O7),T(cw.$$.fragment,O7),O7.forEach(t),hWr=i(ci),Wr=n(ci,"DIV",{class:!0});var fi=s(Wr);T(S$.$$.fragment,fi),pWr=i(fi),rwe=n(fi,"P",{});var SVt=s(rwe);_Wr=r(SVt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),SVt.forEach(t),uWr=i(fi),Cn=n(fi,"P",{});var V7=s(Cn);bWr=r(V7,"The model class to instantiate is selected based on the "),twe=n(V7,"CODE",{});var RVt=s(twe);vWr=r(RVt,"model_type"),RVt.forEach(t),FWr=r(V7,` property of the config object (either
passed as an argument or loaded from `),awe=n(V7,"CODE",{});var PVt=s(awe);TWr=r(PVt,"pretrained_model_name_or_path"),PVt.forEach(t),MWr=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nwe=n(V7,"CODE",{});var BVt=s(nwe);EWr=r(BVt,"pretrained_model_name_or_path"),BVt.forEach(t),CWr=r(V7,":"),V7.forEach(t),wWr=i(fi),$e=n(fi,"UL",{});var qe=s($e);fw=n(qe,"LI",{});var _Ve=s(fw);swe=n(_Ve,"STRONG",{});var IVt=s(swe);AWr=r(IVt,"albert"),IVt.forEach(t),LWr=r(_Ve," \u2014 "),poe=n(_Ve,"A",{href:!0});var NVt=s(poe);yWr=r(NVt,"FlaxAlbertForMaskedLM"),NVt.forEach(t),xWr=r(_Ve," (ALBERT model)"),_Ve.forEach(t),$Wr=i(qe),mw=n(qe,"LI",{});var uVe=s(mw);lwe=n(uVe,"STRONG",{});var qVt=s(lwe);kWr=r(qVt,"bart"),qVt.forEach(t),SWr=r(uVe," \u2014 "),_oe=n(uVe,"A",{href:!0});var jVt=s(_oe);RWr=r(jVt,"FlaxBartForConditionalGeneration"),jVt.forEach(t),PWr=r(uVe," (BART model)"),uVe.forEach(t),BWr=i(qe),gw=n(qe,"LI",{});var bVe=s(gw);iwe=n(bVe,"STRONG",{});var DVt=s(iwe);IWr=r(DVt,"bert"),DVt.forEach(t),NWr=r(bVe," \u2014 "),uoe=n(bVe,"A",{href:!0});var GVt=s(uoe);qWr=r(GVt,"FlaxBertForMaskedLM"),GVt.forEach(t),jWr=r(bVe," (BERT model)"),bVe.forEach(t),DWr=i(qe),hw=n(qe,"LI",{});var vVe=s(hw);dwe=n(vVe,"STRONG",{});var OVt=s(dwe);GWr=r(OVt,"big_bird"),OVt.forEach(t),OWr=r(vVe," \u2014 "),boe=n(vVe,"A",{href:!0});var VVt=s(boe);VWr=r(VVt,"FlaxBigBirdForMaskedLM"),VVt.forEach(t),XWr=r(vVe," (BigBird model)"),vVe.forEach(t),zWr=i(qe),pw=n(qe,"LI",{});var FVe=s(pw);cwe=n(FVe,"STRONG",{});var XVt=s(cwe);QWr=r(XVt,"distilbert"),XVt.forEach(t),WWr=r(FVe," \u2014 "),voe=n(FVe,"A",{href:!0});var zVt=s(voe);HWr=r(zVt,"FlaxDistilBertForMaskedLM"),zVt.forEach(t),UWr=r(FVe," (DistilBERT model)"),FVe.forEach(t),JWr=i(qe),_w=n(qe,"LI",{});var TVe=s(_w);fwe=n(TVe,"STRONG",{});var QVt=s(fwe);YWr=r(QVt,"electra"),QVt.forEach(t),KWr=r(TVe," \u2014 "),Foe=n(TVe,"A",{href:!0});var WVt=s(Foe);ZWr=r(WVt,"FlaxElectraForMaskedLM"),WVt.forEach(t),eHr=r(TVe," (ELECTRA model)"),TVe.forEach(t),oHr=i(qe),uw=n(qe,"LI",{});var MVe=s(uw);mwe=n(MVe,"STRONG",{});var HVt=s(mwe);rHr=r(HVt,"mbart"),HVt.forEach(t),tHr=r(MVe," \u2014 "),Toe=n(MVe,"A",{href:!0});var UVt=s(Toe);aHr=r(UVt,"FlaxMBartForConditionalGeneration"),UVt.forEach(t),nHr=r(MVe," (mBART model)"),MVe.forEach(t),sHr=i(qe),bw=n(qe,"LI",{});var EVe=s(bw);gwe=n(EVe,"STRONG",{});var JVt=s(gwe);lHr=r(JVt,"roberta"),JVt.forEach(t),iHr=r(EVe," \u2014 "),Moe=n(EVe,"A",{href:!0});var YVt=s(Moe);dHr=r(YVt,"FlaxRobertaForMaskedLM"),YVt.forEach(t),cHr=r(EVe," (RoBERTa model)"),EVe.forEach(t),fHr=i(qe),vw=n(qe,"LI",{});var CVe=s(vw);hwe=n(CVe,"STRONG",{});var KVt=s(hwe);mHr=r(KVt,"roformer"),KVt.forEach(t),gHr=r(CVe," \u2014 "),Eoe=n(CVe,"A",{href:!0});var ZVt=s(Eoe);hHr=r(ZVt,"FlaxRoFormerForMaskedLM"),ZVt.forEach(t),pHr=r(CVe," (RoFormer model)"),CVe.forEach(t),_Hr=i(qe),Fw=n(qe,"LI",{});var wVe=s(Fw);pwe=n(wVe,"STRONG",{});var eXt=s(pwe);uHr=r(eXt,"xlm-roberta"),eXt.forEach(t),bHr=r(wVe," \u2014 "),Coe=n(wVe,"A",{href:!0});var oXt=s(Coe);vHr=r(oXt,"FlaxXLMRobertaForMaskedLM"),oXt.forEach(t),FHr=r(wVe," (XLM-RoBERTa model)"),wVe.forEach(t),qe.forEach(t),THr=i(fi),T(Tw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),fQe=i(f),lf=n(f,"H2",{class:!0});var FHe=s(lf);Mw=n(FHe,"A",{id:!0,class:!0,href:!0});var rXt=s(Mw);_we=n(rXt,"SPAN",{});var tXt=s(_we);T(R$.$$.fragment,tXt),tXt.forEach(t),rXt.forEach(t),MHr=i(FHe),uwe=n(FHe,"SPAN",{});var aXt=s(uwe);EHr=r(aXt,"FlaxAutoModelForSeq2SeqLM"),aXt.forEach(t),FHe.forEach(t),mQe=i(f),Fr=n(f,"DIV",{class:!0});var mi=s(Fr);T(P$.$$.fragment,mi),CHr=i(mi),df=n(mi,"P",{});var Eae=s(df);wHr=r(Eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),woe=n(Eae,"A",{href:!0});var nXt=s(woe);AHr=r(nXt,"from_pretrained()"),nXt.forEach(t),LHr=r(Eae," class method or the "),Aoe=n(Eae,"A",{href:!0});var sXt=s(Aoe);yHr=r(sXt,"from_config()"),sXt.forEach(t),xHr=r(Eae,` class
method.`),Eae.forEach(t),$Hr=i(mi),B$=n(mi,"P",{});var THe=s(B$);kHr=r(THe,"This class cannot be instantiated directly using "),bwe=n(THe,"CODE",{});var lXt=s(bwe);SHr=r(lXt,"__init__()"),lXt.forEach(t),RHr=r(THe," (throws an error)."),THe.forEach(t),PHr=i(mi),Yt=n(mi,"DIV",{class:!0});var X7=s(Yt);T(I$.$$.fragment,X7),BHr=i(X7),vwe=n(X7,"P",{});var iXt=s(vwe);IHr=r(iXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iXt.forEach(t),NHr=i(X7),cf=n(X7,"P",{});var Cae=s(cf);qHr=r(Cae,`Note:
Loading a model from its configuration file does `),Fwe=n(Cae,"STRONG",{});var dXt=s(Fwe);jHr=r(dXt,"not"),dXt.forEach(t),DHr=r(Cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=n(Cae,"A",{href:!0});var cXt=s(Loe);GHr=r(cXt,"from_pretrained()"),cXt.forEach(t),OHr=r(Cae," to load the model weights."),Cae.forEach(t),VHr=i(X7),T(Ew.$$.fragment,X7),X7.forEach(t),XHr=i(mi),Hr=n(mi,"DIV",{class:!0});var gi=s(Hr);T(N$.$$.fragment,gi),zHr=i(gi),Twe=n(gi,"P",{});var fXt=s(Twe);QHr=r(fXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fXt.forEach(t),WHr=i(gi),wn=n(gi,"P",{});var z7=s(wn);HHr=r(z7,"The model class to instantiate is selected based on the "),Mwe=n(z7,"CODE",{});var mXt=s(Mwe);UHr=r(mXt,"model_type"),mXt.forEach(t),JHr=r(z7,` property of the config object (either
passed as an argument or loaded from `),Ewe=n(z7,"CODE",{});var gXt=s(Ewe);YHr=r(gXt,"pretrained_model_name_or_path"),gXt.forEach(t),KHr=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cwe=n(z7,"CODE",{});var hXt=s(Cwe);ZHr=r(hXt,"pretrained_model_name_or_path"),hXt.forEach(t),eUr=r(z7,":"),z7.forEach(t),oUr=i(gi),ke=n(gi,"UL",{});var je=s(ke);Cw=n(je,"LI",{});var AVe=s(Cw);wwe=n(AVe,"STRONG",{});var pXt=s(wwe);rUr=r(pXt,"bart"),pXt.forEach(t),tUr=r(AVe," \u2014 "),yoe=n(AVe,"A",{href:!0});var _Xt=s(yoe);aUr=r(_Xt,"FlaxBartForConditionalGeneration"),_Xt.forEach(t),nUr=r(AVe," (BART model)"),AVe.forEach(t),sUr=i(je),ww=n(je,"LI",{});var LVe=s(ww);Awe=n(LVe,"STRONG",{});var uXt=s(Awe);lUr=r(uXt,"blenderbot"),uXt.forEach(t),iUr=r(LVe," \u2014 "),xoe=n(LVe,"A",{href:!0});var bXt=s(xoe);dUr=r(bXt,"FlaxBlenderbotForConditionalGeneration"),bXt.forEach(t),cUr=r(LVe," (Blenderbot model)"),LVe.forEach(t),fUr=i(je),Aw=n(je,"LI",{});var yVe=s(Aw);Lwe=n(yVe,"STRONG",{});var vXt=s(Lwe);mUr=r(vXt,"blenderbot-small"),vXt.forEach(t),gUr=r(yVe," \u2014 "),$oe=n(yVe,"A",{href:!0});var FXt=s($oe);hUr=r(FXt,"FlaxBlenderbotSmallForConditionalGeneration"),FXt.forEach(t),pUr=r(yVe," (BlenderbotSmall model)"),yVe.forEach(t),_Ur=i(je),Lw=n(je,"LI",{});var xVe=s(Lw);ywe=n(xVe,"STRONG",{});var TXt=s(ywe);uUr=r(TXt,"encoder-decoder"),TXt.forEach(t),bUr=r(xVe," \u2014 "),koe=n(xVe,"A",{href:!0});var MXt=s(koe);vUr=r(MXt,"FlaxEncoderDecoderModel"),MXt.forEach(t),FUr=r(xVe," (Encoder decoder model)"),xVe.forEach(t),TUr=i(je),yw=n(je,"LI",{});var $Ve=s(yw);xwe=n($Ve,"STRONG",{});var EXt=s(xwe);MUr=r(EXt,"longt5"),EXt.forEach(t),EUr=r($Ve," \u2014 "),Soe=n($Ve,"A",{href:!0});var CXt=s(Soe);CUr=r(CXt,"FlaxLongT5ForConditionalGeneration"),CXt.forEach(t),wUr=r($Ve," (LongT5 model)"),$Ve.forEach(t),AUr=i(je),xw=n(je,"LI",{});var kVe=s(xw);$we=n(kVe,"STRONG",{});var wXt=s($we);LUr=r(wXt,"marian"),wXt.forEach(t),yUr=r(kVe," \u2014 "),Roe=n(kVe,"A",{href:!0});var AXt=s(Roe);xUr=r(AXt,"FlaxMarianMTModel"),AXt.forEach(t),$Ur=r(kVe," (Marian model)"),kVe.forEach(t),kUr=i(je),$w=n(je,"LI",{});var SVe=s($w);kwe=n(SVe,"STRONG",{});var LXt=s(kwe);SUr=r(LXt,"mbart"),LXt.forEach(t),RUr=r(SVe," \u2014 "),Poe=n(SVe,"A",{href:!0});var yXt=s(Poe);PUr=r(yXt,"FlaxMBartForConditionalGeneration"),yXt.forEach(t),BUr=r(SVe," (mBART model)"),SVe.forEach(t),IUr=i(je),kw=n(je,"LI",{});var RVe=s(kw);Swe=n(RVe,"STRONG",{});var xXt=s(Swe);NUr=r(xXt,"mt5"),xXt.forEach(t),qUr=r(RVe," \u2014 "),Boe=n(RVe,"A",{href:!0});var $Xt=s(Boe);jUr=r($Xt,"FlaxMT5ForConditionalGeneration"),$Xt.forEach(t),DUr=r(RVe," (MT5 model)"),RVe.forEach(t),GUr=i(je),Sw=n(je,"LI",{});var PVe=s(Sw);Rwe=n(PVe,"STRONG",{});var kXt=s(Rwe);OUr=r(kXt,"pegasus"),kXt.forEach(t),VUr=r(PVe," \u2014 "),Ioe=n(PVe,"A",{href:!0});var SXt=s(Ioe);XUr=r(SXt,"FlaxPegasusForConditionalGeneration"),SXt.forEach(t),zUr=r(PVe," (Pegasus model)"),PVe.forEach(t),QUr=i(je),Rw=n(je,"LI",{});var BVe=s(Rw);Pwe=n(BVe,"STRONG",{});var RXt=s(Pwe);WUr=r(RXt,"t5"),RXt.forEach(t),HUr=r(BVe," \u2014 "),Noe=n(BVe,"A",{href:!0});var PXt=s(Noe);UUr=r(PXt,"FlaxT5ForConditionalGeneration"),PXt.forEach(t),JUr=r(BVe," (T5 model)"),BVe.forEach(t),je.forEach(t),YUr=i(gi),T(Pw.$$.fragment,gi),gi.forEach(t),mi.forEach(t),gQe=i(f),ff=n(f,"H2",{class:!0});var MHe=s(ff);Bw=n(MHe,"A",{id:!0,class:!0,href:!0});var BXt=s(Bw);Bwe=n(BXt,"SPAN",{});var IXt=s(Bwe);T(q$.$$.fragment,IXt),IXt.forEach(t),BXt.forEach(t),KUr=i(MHe),Iwe=n(MHe,"SPAN",{});var NXt=s(Iwe);ZUr=r(NXt,"FlaxAutoModelForSequenceClassification"),NXt.forEach(t),MHe.forEach(t),hQe=i(f),Tr=n(f,"DIV",{class:!0});var hi=s(Tr);T(j$.$$.fragment,hi),eJr=i(hi),mf=n(hi,"P",{});var wae=s(mf);oJr=r(wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qoe=n(wae,"A",{href:!0});var qXt=s(qoe);rJr=r(qXt,"from_pretrained()"),qXt.forEach(t),tJr=r(wae," class method or the "),joe=n(wae,"A",{href:!0});var jXt=s(joe);aJr=r(jXt,"from_config()"),jXt.forEach(t),nJr=r(wae,` class
method.`),wae.forEach(t),sJr=i(hi),D$=n(hi,"P",{});var EHe=s(D$);lJr=r(EHe,"This class cannot be instantiated directly using "),Nwe=n(EHe,"CODE",{});var DXt=s(Nwe);iJr=r(DXt,"__init__()"),DXt.forEach(t),dJr=r(EHe," (throws an error)."),EHe.forEach(t),cJr=i(hi),Kt=n(hi,"DIV",{class:!0});var Q7=s(Kt);T(G$.$$.fragment,Q7),fJr=i(Q7),qwe=n(Q7,"P",{});var GXt=s(qwe);mJr=r(GXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GXt.forEach(t),gJr=i(Q7),gf=n(Q7,"P",{});var Aae=s(gf);hJr=r(Aae,`Note:
Loading a model from its configuration file does `),jwe=n(Aae,"STRONG",{});var OXt=s(jwe);pJr=r(OXt,"not"),OXt.forEach(t),_Jr=r(Aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Doe=n(Aae,"A",{href:!0});var VXt=s(Doe);uJr=r(VXt,"from_pretrained()"),VXt.forEach(t),bJr=r(Aae," to load the model weights."),Aae.forEach(t),vJr=i(Q7),T(Iw.$$.fragment,Q7),Q7.forEach(t),FJr=i(hi),Ur=n(hi,"DIV",{class:!0});var pi=s(Ur);T(O$.$$.fragment,pi),TJr=i(pi),Dwe=n(pi,"P",{});var XXt=s(Dwe);MJr=r(XXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XXt.forEach(t),EJr=i(pi),An=n(pi,"P",{});var W7=s(An);CJr=r(W7,"The model class to instantiate is selected based on the "),Gwe=n(W7,"CODE",{});var zXt=s(Gwe);wJr=r(zXt,"model_type"),zXt.forEach(t),AJr=r(W7,` property of the config object (either
passed as an argument or loaded from `),Owe=n(W7,"CODE",{});var QXt=s(Owe);LJr=r(QXt,"pretrained_model_name_or_path"),QXt.forEach(t),yJr=r(W7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vwe=n(W7,"CODE",{});var WXt=s(Vwe);xJr=r(WXt,"pretrained_model_name_or_path"),WXt.forEach(t),$Jr=r(W7,":"),W7.forEach(t),kJr=i(pi),Se=n(pi,"UL",{});var De=s(Se);Nw=n(De,"LI",{});var IVe=s(Nw);Xwe=n(IVe,"STRONG",{});var HXt=s(Xwe);SJr=r(HXt,"albert"),HXt.forEach(t),RJr=r(IVe," \u2014 "),Goe=n(IVe,"A",{href:!0});var UXt=s(Goe);PJr=r(UXt,"FlaxAlbertForSequenceClassification"),UXt.forEach(t),BJr=r(IVe," (ALBERT model)"),IVe.forEach(t),IJr=i(De),qw=n(De,"LI",{});var NVe=s(qw);zwe=n(NVe,"STRONG",{});var JXt=s(zwe);NJr=r(JXt,"bart"),JXt.forEach(t),qJr=r(NVe," \u2014 "),Ooe=n(NVe,"A",{href:!0});var YXt=s(Ooe);jJr=r(YXt,"FlaxBartForSequenceClassification"),YXt.forEach(t),DJr=r(NVe," (BART model)"),NVe.forEach(t),GJr=i(De),jw=n(De,"LI",{});var qVe=s(jw);Qwe=n(qVe,"STRONG",{});var KXt=s(Qwe);OJr=r(KXt,"bert"),KXt.forEach(t),VJr=r(qVe," \u2014 "),Voe=n(qVe,"A",{href:!0});var ZXt=s(Voe);XJr=r(ZXt,"FlaxBertForSequenceClassification"),ZXt.forEach(t),zJr=r(qVe," (BERT model)"),qVe.forEach(t),QJr=i(De),Dw=n(De,"LI",{});var jVe=s(Dw);Wwe=n(jVe,"STRONG",{});var ezt=s(Wwe);WJr=r(ezt,"big_bird"),ezt.forEach(t),HJr=r(jVe," \u2014 "),Xoe=n(jVe,"A",{href:!0});var ozt=s(Xoe);UJr=r(ozt,"FlaxBigBirdForSequenceClassification"),ozt.forEach(t),JJr=r(jVe," (BigBird model)"),jVe.forEach(t),YJr=i(De),Gw=n(De,"LI",{});var DVe=s(Gw);Hwe=n(DVe,"STRONG",{});var rzt=s(Hwe);KJr=r(rzt,"distilbert"),rzt.forEach(t),ZJr=r(DVe," \u2014 "),zoe=n(DVe,"A",{href:!0});var tzt=s(zoe);eYr=r(tzt,"FlaxDistilBertForSequenceClassification"),tzt.forEach(t),oYr=r(DVe," (DistilBERT model)"),DVe.forEach(t),rYr=i(De),Ow=n(De,"LI",{});var GVe=s(Ow);Uwe=n(GVe,"STRONG",{});var azt=s(Uwe);tYr=r(azt,"electra"),azt.forEach(t),aYr=r(GVe," \u2014 "),Qoe=n(GVe,"A",{href:!0});var nzt=s(Qoe);nYr=r(nzt,"FlaxElectraForSequenceClassification"),nzt.forEach(t),sYr=r(GVe," (ELECTRA model)"),GVe.forEach(t),lYr=i(De),Vw=n(De,"LI",{});var OVe=s(Vw);Jwe=n(OVe,"STRONG",{});var szt=s(Jwe);iYr=r(szt,"mbart"),szt.forEach(t),dYr=r(OVe," \u2014 "),Woe=n(OVe,"A",{href:!0});var lzt=s(Woe);cYr=r(lzt,"FlaxMBartForSequenceClassification"),lzt.forEach(t),fYr=r(OVe," (mBART model)"),OVe.forEach(t),mYr=i(De),Xw=n(De,"LI",{});var VVe=s(Xw);Ywe=n(VVe,"STRONG",{});var izt=s(Ywe);gYr=r(izt,"roberta"),izt.forEach(t),hYr=r(VVe," \u2014 "),Hoe=n(VVe,"A",{href:!0});var dzt=s(Hoe);pYr=r(dzt,"FlaxRobertaForSequenceClassification"),dzt.forEach(t),_Yr=r(VVe," (RoBERTa model)"),VVe.forEach(t),uYr=i(De),zw=n(De,"LI",{});var XVe=s(zw);Kwe=n(XVe,"STRONG",{});var czt=s(Kwe);bYr=r(czt,"roformer"),czt.forEach(t),vYr=r(XVe," \u2014 "),Uoe=n(XVe,"A",{href:!0});var fzt=s(Uoe);FYr=r(fzt,"FlaxRoFormerForSequenceClassification"),fzt.forEach(t),TYr=r(XVe," (RoFormer model)"),XVe.forEach(t),MYr=i(De),Qw=n(De,"LI",{});var zVe=s(Qw);Zwe=n(zVe,"STRONG",{});var mzt=s(Zwe);EYr=r(mzt,"xlm-roberta"),mzt.forEach(t),CYr=r(zVe," \u2014 "),Joe=n(zVe,"A",{href:!0});var gzt=s(Joe);wYr=r(gzt,"FlaxXLMRobertaForSequenceClassification"),gzt.forEach(t),AYr=r(zVe," (XLM-RoBERTa model)"),zVe.forEach(t),De.forEach(t),LYr=i(pi),T(Ww.$$.fragment,pi),pi.forEach(t),hi.forEach(t),pQe=i(f),hf=n(f,"H2",{class:!0});var CHe=s(hf);Hw=n(CHe,"A",{id:!0,class:!0,href:!0});var hzt=s(Hw);eAe=n(hzt,"SPAN",{});var pzt=s(eAe);T(V$.$$.fragment,pzt),pzt.forEach(t),hzt.forEach(t),yYr=i(CHe),oAe=n(CHe,"SPAN",{});var _zt=s(oAe);xYr=r(_zt,"FlaxAutoModelForQuestionAnswering"),_zt.forEach(t),CHe.forEach(t),_Qe=i(f),Mr=n(f,"DIV",{class:!0});var _i=s(Mr);T(X$.$$.fragment,_i),$Yr=i(_i),pf=n(_i,"P",{});var Lae=s(pf);kYr=r(Lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Yoe=n(Lae,"A",{href:!0});var uzt=s(Yoe);SYr=r(uzt,"from_pretrained()"),uzt.forEach(t),RYr=r(Lae," class method or the "),Koe=n(Lae,"A",{href:!0});var bzt=s(Koe);PYr=r(bzt,"from_config()"),bzt.forEach(t),BYr=r(Lae,` class
method.`),Lae.forEach(t),IYr=i(_i),z$=n(_i,"P",{});var wHe=s(z$);NYr=r(wHe,"This class cannot be instantiated directly using "),rAe=n(wHe,"CODE",{});var vzt=s(rAe);qYr=r(vzt,"__init__()"),vzt.forEach(t),jYr=r(wHe," (throws an error)."),wHe.forEach(t),DYr=i(_i),Zt=n(_i,"DIV",{class:!0});var H7=s(Zt);T(Q$.$$.fragment,H7),GYr=i(H7),tAe=n(H7,"P",{});var Fzt=s(tAe);OYr=r(Fzt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fzt.forEach(t),VYr=i(H7),_f=n(H7,"P",{});var yae=s(_f);XYr=r(yae,`Note:
Loading a model from its configuration file does `),aAe=n(yae,"STRONG",{});var Tzt=s(aAe);zYr=r(Tzt,"not"),Tzt.forEach(t),QYr=r(yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=n(yae,"A",{href:!0});var Mzt=s(Zoe);WYr=r(Mzt,"from_pretrained()"),Mzt.forEach(t),HYr=r(yae," to load the model weights."),yae.forEach(t),UYr=i(H7),T(Uw.$$.fragment,H7),H7.forEach(t),JYr=i(_i),Jr=n(_i,"DIV",{class:!0});var ui=s(Jr);T(W$.$$.fragment,ui),YYr=i(ui),nAe=n(ui,"P",{});var Ezt=s(nAe);KYr=r(Ezt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ezt.forEach(t),ZYr=i(ui),Ln=n(ui,"P",{});var U7=s(Ln);eKr=r(U7,"The model class to instantiate is selected based on the "),sAe=n(U7,"CODE",{});var Czt=s(sAe);oKr=r(Czt,"model_type"),Czt.forEach(t),rKr=r(U7,` property of the config object (either
passed as an argument or loaded from `),lAe=n(U7,"CODE",{});var wzt=s(lAe);tKr=r(wzt,"pretrained_model_name_or_path"),wzt.forEach(t),aKr=r(U7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iAe=n(U7,"CODE",{});var Azt=s(iAe);nKr=r(Azt,"pretrained_model_name_or_path"),Azt.forEach(t),sKr=r(U7,":"),U7.forEach(t),lKr=i(ui),Re=n(ui,"UL",{});var Ge=s(Re);Jw=n(Ge,"LI",{});var QVe=s(Jw);dAe=n(QVe,"STRONG",{});var Lzt=s(dAe);iKr=r(Lzt,"albert"),Lzt.forEach(t),dKr=r(QVe," \u2014 "),ere=n(QVe,"A",{href:!0});var yzt=s(ere);cKr=r(yzt,"FlaxAlbertForQuestionAnswering"),yzt.forEach(t),fKr=r(QVe," (ALBERT model)"),QVe.forEach(t),mKr=i(Ge),Yw=n(Ge,"LI",{});var WVe=s(Yw);cAe=n(WVe,"STRONG",{});var xzt=s(cAe);gKr=r(xzt,"bart"),xzt.forEach(t),hKr=r(WVe," \u2014 "),ore=n(WVe,"A",{href:!0});var $zt=s(ore);pKr=r($zt,"FlaxBartForQuestionAnswering"),$zt.forEach(t),_Kr=r(WVe," (BART model)"),WVe.forEach(t),uKr=i(Ge),Kw=n(Ge,"LI",{});var HVe=s(Kw);fAe=n(HVe,"STRONG",{});var kzt=s(fAe);bKr=r(kzt,"bert"),kzt.forEach(t),vKr=r(HVe," \u2014 "),rre=n(HVe,"A",{href:!0});var Szt=s(rre);FKr=r(Szt,"FlaxBertForQuestionAnswering"),Szt.forEach(t),TKr=r(HVe," (BERT model)"),HVe.forEach(t),MKr=i(Ge),Zw=n(Ge,"LI",{});var UVe=s(Zw);mAe=n(UVe,"STRONG",{});var Rzt=s(mAe);EKr=r(Rzt,"big_bird"),Rzt.forEach(t),CKr=r(UVe," \u2014 "),tre=n(UVe,"A",{href:!0});var Pzt=s(tre);wKr=r(Pzt,"FlaxBigBirdForQuestionAnswering"),Pzt.forEach(t),AKr=r(UVe," (BigBird model)"),UVe.forEach(t),LKr=i(Ge),eA=n(Ge,"LI",{});var JVe=s(eA);gAe=n(JVe,"STRONG",{});var Bzt=s(gAe);yKr=r(Bzt,"distilbert"),Bzt.forEach(t),xKr=r(JVe," \u2014 "),are=n(JVe,"A",{href:!0});var Izt=s(are);$Kr=r(Izt,"FlaxDistilBertForQuestionAnswering"),Izt.forEach(t),kKr=r(JVe," (DistilBERT model)"),JVe.forEach(t),SKr=i(Ge),oA=n(Ge,"LI",{});var YVe=s(oA);hAe=n(YVe,"STRONG",{});var Nzt=s(hAe);RKr=r(Nzt,"electra"),Nzt.forEach(t),PKr=r(YVe," \u2014 "),nre=n(YVe,"A",{href:!0});var qzt=s(nre);BKr=r(qzt,"FlaxElectraForQuestionAnswering"),qzt.forEach(t),IKr=r(YVe," (ELECTRA model)"),YVe.forEach(t),NKr=i(Ge),rA=n(Ge,"LI",{});var KVe=s(rA);pAe=n(KVe,"STRONG",{});var jzt=s(pAe);qKr=r(jzt,"mbart"),jzt.forEach(t),jKr=r(KVe," \u2014 "),sre=n(KVe,"A",{href:!0});var Dzt=s(sre);DKr=r(Dzt,"FlaxMBartForQuestionAnswering"),Dzt.forEach(t),GKr=r(KVe," (mBART model)"),KVe.forEach(t),OKr=i(Ge),tA=n(Ge,"LI",{});var ZVe=s(tA);_Ae=n(ZVe,"STRONG",{});var Gzt=s(_Ae);VKr=r(Gzt,"roberta"),Gzt.forEach(t),XKr=r(ZVe," \u2014 "),lre=n(ZVe,"A",{href:!0});var Ozt=s(lre);zKr=r(Ozt,"FlaxRobertaForQuestionAnswering"),Ozt.forEach(t),QKr=r(ZVe," (RoBERTa model)"),ZVe.forEach(t),WKr=i(Ge),aA=n(Ge,"LI",{});var eXe=s(aA);uAe=n(eXe,"STRONG",{});var Vzt=s(uAe);HKr=r(Vzt,"roformer"),Vzt.forEach(t),UKr=r(eXe," \u2014 "),ire=n(eXe,"A",{href:!0});var Xzt=s(ire);JKr=r(Xzt,"FlaxRoFormerForQuestionAnswering"),Xzt.forEach(t),YKr=r(eXe," (RoFormer model)"),eXe.forEach(t),KKr=i(Ge),nA=n(Ge,"LI",{});var oXe=s(nA);bAe=n(oXe,"STRONG",{});var zzt=s(bAe);ZKr=r(zzt,"xlm-roberta"),zzt.forEach(t),eZr=r(oXe," \u2014 "),dre=n(oXe,"A",{href:!0});var Qzt=s(dre);oZr=r(Qzt,"FlaxXLMRobertaForQuestionAnswering"),Qzt.forEach(t),rZr=r(oXe," (XLM-RoBERTa model)"),oXe.forEach(t),Ge.forEach(t),tZr=i(ui),T(sA.$$.fragment,ui),ui.forEach(t),_i.forEach(t),uQe=i(f),uf=n(f,"H2",{class:!0});var AHe=s(uf);lA=n(AHe,"A",{id:!0,class:!0,href:!0});var Wzt=s(lA);vAe=n(Wzt,"SPAN",{});var Hzt=s(vAe);T(H$.$$.fragment,Hzt),Hzt.forEach(t),Wzt.forEach(t),aZr=i(AHe),FAe=n(AHe,"SPAN",{});var Uzt=s(FAe);nZr=r(Uzt,"FlaxAutoModelForTokenClassification"),Uzt.forEach(t),AHe.forEach(t),bQe=i(f),Er=n(f,"DIV",{class:!0});var bi=s(Er);T(U$.$$.fragment,bi),sZr=i(bi),bf=n(bi,"P",{});var xae=s(bf);lZr=r(xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cre=n(xae,"A",{href:!0});var Jzt=s(cre);iZr=r(Jzt,"from_pretrained()"),Jzt.forEach(t),dZr=r(xae," class method or the "),fre=n(xae,"A",{href:!0});var Yzt=s(fre);cZr=r(Yzt,"from_config()"),Yzt.forEach(t),fZr=r(xae,` class
method.`),xae.forEach(t),mZr=i(bi),J$=n(bi,"P",{});var LHe=s(J$);gZr=r(LHe,"This class cannot be instantiated directly using "),TAe=n(LHe,"CODE",{});var Kzt=s(TAe);hZr=r(Kzt,"__init__()"),Kzt.forEach(t),pZr=r(LHe," (throws an error)."),LHe.forEach(t),_Zr=i(bi),ea=n(bi,"DIV",{class:!0});var J7=s(ea);T(Y$.$$.fragment,J7),uZr=i(J7),MAe=n(J7,"P",{});var Zzt=s(MAe);bZr=r(Zzt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zzt.forEach(t),vZr=i(J7),vf=n(J7,"P",{});var $ae=s(vf);FZr=r($ae,`Note:
Loading a model from its configuration file does `),EAe=n($ae,"STRONG",{});var eQt=s(EAe);TZr=r(eQt,"not"),eQt.forEach(t),MZr=r($ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=n($ae,"A",{href:!0});var oQt=s(mre);EZr=r(oQt,"from_pretrained()"),oQt.forEach(t),CZr=r($ae," to load the model weights."),$ae.forEach(t),wZr=i(J7),T(iA.$$.fragment,J7),J7.forEach(t),AZr=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T(K$.$$.fragment,vi),LZr=i(vi),CAe=n(vi,"P",{});var rQt=s(CAe);yZr=r(rQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rQt.forEach(t),xZr=i(vi),yn=n(vi,"P",{});var Y7=s(yn);$Zr=r(Y7,"The model class to instantiate is selected based on the "),wAe=n(Y7,"CODE",{});var tQt=s(wAe);kZr=r(tQt,"model_type"),tQt.forEach(t),SZr=r(Y7,` property of the config object (either
passed as an argument or loaded from `),AAe=n(Y7,"CODE",{});var aQt=s(AAe);RZr=r(aQt,"pretrained_model_name_or_path"),aQt.forEach(t),PZr=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LAe=n(Y7,"CODE",{});var nQt=s(LAe);BZr=r(nQt,"pretrained_model_name_or_path"),nQt.forEach(t),IZr=r(Y7,":"),Y7.forEach(t),NZr=i(vi),Xe=n(vi,"UL",{});var Eo=s(Xe);dA=n(Eo,"LI",{});var rXe=s(dA);yAe=n(rXe,"STRONG",{});var sQt=s(yAe);qZr=r(sQt,"albert"),sQt.forEach(t),jZr=r(rXe," \u2014 "),gre=n(rXe,"A",{href:!0});var lQt=s(gre);DZr=r(lQt,"FlaxAlbertForTokenClassification"),lQt.forEach(t),GZr=r(rXe," (ALBERT model)"),rXe.forEach(t),OZr=i(Eo),cA=n(Eo,"LI",{});var tXe=s(cA);xAe=n(tXe,"STRONG",{});var iQt=s(xAe);VZr=r(iQt,"bert"),iQt.forEach(t),XZr=r(tXe," \u2014 "),hre=n(tXe,"A",{href:!0});var dQt=s(hre);zZr=r(dQt,"FlaxBertForTokenClassification"),dQt.forEach(t),QZr=r(tXe," (BERT model)"),tXe.forEach(t),WZr=i(Eo),fA=n(Eo,"LI",{});var aXe=s(fA);$Ae=n(aXe,"STRONG",{});var cQt=s($Ae);HZr=r(cQt,"big_bird"),cQt.forEach(t),UZr=r(aXe," \u2014 "),pre=n(aXe,"A",{href:!0});var fQt=s(pre);JZr=r(fQt,"FlaxBigBirdForTokenClassification"),fQt.forEach(t),YZr=r(aXe," (BigBird model)"),aXe.forEach(t),KZr=i(Eo),mA=n(Eo,"LI",{});var nXe=s(mA);kAe=n(nXe,"STRONG",{});var mQt=s(kAe);ZZr=r(mQt,"distilbert"),mQt.forEach(t),eet=r(nXe," \u2014 "),_re=n(nXe,"A",{href:!0});var gQt=s(_re);oet=r(gQt,"FlaxDistilBertForTokenClassification"),gQt.forEach(t),ret=r(nXe," (DistilBERT model)"),nXe.forEach(t),tet=i(Eo),gA=n(Eo,"LI",{});var sXe=s(gA);SAe=n(sXe,"STRONG",{});var hQt=s(SAe);aet=r(hQt,"electra"),hQt.forEach(t),net=r(sXe," \u2014 "),ure=n(sXe,"A",{href:!0});var pQt=s(ure);set=r(pQt,"FlaxElectraForTokenClassification"),pQt.forEach(t),iet=r(sXe," (ELECTRA model)"),sXe.forEach(t),det=i(Eo),hA=n(Eo,"LI",{});var lXe=s(hA);RAe=n(lXe,"STRONG",{});var _Qt=s(RAe);cet=r(_Qt,"roberta"),_Qt.forEach(t),fet=r(lXe," \u2014 "),bre=n(lXe,"A",{href:!0});var uQt=s(bre);met=r(uQt,"FlaxRobertaForTokenClassification"),uQt.forEach(t),get=r(lXe," (RoBERTa model)"),lXe.forEach(t),het=i(Eo),pA=n(Eo,"LI",{});var iXe=s(pA);PAe=n(iXe,"STRONG",{});var bQt=s(PAe);pet=r(bQt,"roformer"),bQt.forEach(t),_et=r(iXe," \u2014 "),vre=n(iXe,"A",{href:!0});var vQt=s(vre);uet=r(vQt,"FlaxRoFormerForTokenClassification"),vQt.forEach(t),bet=r(iXe," (RoFormer model)"),iXe.forEach(t),vet=i(Eo),_A=n(Eo,"LI",{});var dXe=s(_A);BAe=n(dXe,"STRONG",{});var FQt=s(BAe);Fet=r(FQt,"xlm-roberta"),FQt.forEach(t),Tet=r(dXe," \u2014 "),Fre=n(dXe,"A",{href:!0});var TQt=s(Fre);Met=r(TQt,"FlaxXLMRobertaForTokenClassification"),TQt.forEach(t),Eet=r(dXe," (XLM-RoBERTa model)"),dXe.forEach(t),Eo.forEach(t),Cet=i(vi),T(uA.$$.fragment,vi),vi.forEach(t),bi.forEach(t),vQe=i(f),Ff=n(f,"H2",{class:!0});var yHe=s(Ff);bA=n(yHe,"A",{id:!0,class:!0,href:!0});var MQt=s(bA);IAe=n(MQt,"SPAN",{});var EQt=s(IAe);T(Z$.$$.fragment,EQt),EQt.forEach(t),MQt.forEach(t),wet=i(yHe),NAe=n(yHe,"SPAN",{});var CQt=s(NAe);Aet=r(CQt,"FlaxAutoModelForMultipleChoice"),CQt.forEach(t),yHe.forEach(t),FQe=i(f),Cr=n(f,"DIV",{class:!0});var Fi=s(Cr);T(ek.$$.fragment,Fi),Let=i(Fi),Tf=n(Fi,"P",{});var kae=s(Tf);yet=r(kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Tre=n(kae,"A",{href:!0});var wQt=s(Tre);xet=r(wQt,"from_pretrained()"),wQt.forEach(t),$et=r(kae," class method or the "),Mre=n(kae,"A",{href:!0});var AQt=s(Mre);ket=r(AQt,"from_config()"),AQt.forEach(t),Set=r(kae,` class
method.`),kae.forEach(t),Ret=i(Fi),ok=n(Fi,"P",{});var xHe=s(ok);Pet=r(xHe,"This class cannot be instantiated directly using "),qAe=n(xHe,"CODE",{});var LQt=s(qAe);Bet=r(LQt,"__init__()"),LQt.forEach(t),Iet=r(xHe," (throws an error)."),xHe.forEach(t),Net=i(Fi),oa=n(Fi,"DIV",{class:!0});var K7=s(oa);T(rk.$$.fragment,K7),qet=i(K7),jAe=n(K7,"P",{});var yQt=s(jAe);jet=r(yQt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yQt.forEach(t),Det=i(K7),Mf=n(K7,"P",{});var Sae=s(Mf);Get=r(Sae,`Note:
Loading a model from its configuration file does `),DAe=n(Sae,"STRONG",{});var xQt=s(DAe);Oet=r(xQt,"not"),xQt.forEach(t),Vet=r(Sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=n(Sae,"A",{href:!0});var $Qt=s(Ere);Xet=r($Qt,"from_pretrained()"),$Qt.forEach(t),zet=r(Sae," to load the model weights."),Sae.forEach(t),Qet=i(K7),T(vA.$$.fragment,K7),K7.forEach(t),Wet=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T(tk.$$.fragment,Ti),Het=i(Ti),GAe=n(Ti,"P",{});var kQt=s(GAe);Uet=r(kQt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kQt.forEach(t),Jet=i(Ti),xn=n(Ti,"P",{});var Z7=s(xn);Yet=r(Z7,"The model class to instantiate is selected based on the "),OAe=n(Z7,"CODE",{});var SQt=s(OAe);Ket=r(SQt,"model_type"),SQt.forEach(t),Zet=r(Z7,` property of the config object (either
passed as an argument or loaded from `),VAe=n(Z7,"CODE",{});var RQt=s(VAe);eot=r(RQt,"pretrained_model_name_or_path"),RQt.forEach(t),oot=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XAe=n(Z7,"CODE",{});var PQt=s(XAe);rot=r(PQt,"pretrained_model_name_or_path"),PQt.forEach(t),tot=r(Z7,":"),Z7.forEach(t),aot=i(Ti),ze=n(Ti,"UL",{});var Co=s(ze);FA=n(Co,"LI",{});var cXe=s(FA);zAe=n(cXe,"STRONG",{});var BQt=s(zAe);not=r(BQt,"albert"),BQt.forEach(t),sot=r(cXe," \u2014 "),Cre=n(cXe,"A",{href:!0});var IQt=s(Cre);lot=r(IQt,"FlaxAlbertForMultipleChoice"),IQt.forEach(t),iot=r(cXe," (ALBERT model)"),cXe.forEach(t),dot=i(Co),TA=n(Co,"LI",{});var fXe=s(TA);QAe=n(fXe,"STRONG",{});var NQt=s(QAe);cot=r(NQt,"bert"),NQt.forEach(t),fot=r(fXe," \u2014 "),wre=n(fXe,"A",{href:!0});var qQt=s(wre);mot=r(qQt,"FlaxBertForMultipleChoice"),qQt.forEach(t),got=r(fXe," (BERT model)"),fXe.forEach(t),hot=i(Co),MA=n(Co,"LI",{});var mXe=s(MA);WAe=n(mXe,"STRONG",{});var jQt=s(WAe);pot=r(jQt,"big_bird"),jQt.forEach(t),_ot=r(mXe," \u2014 "),Are=n(mXe,"A",{href:!0});var DQt=s(Are);uot=r(DQt,"FlaxBigBirdForMultipleChoice"),DQt.forEach(t),bot=r(mXe," (BigBird model)"),mXe.forEach(t),vot=i(Co),EA=n(Co,"LI",{});var gXe=s(EA);HAe=n(gXe,"STRONG",{});var GQt=s(HAe);Fot=r(GQt,"distilbert"),GQt.forEach(t),Tot=r(gXe," \u2014 "),Lre=n(gXe,"A",{href:!0});var OQt=s(Lre);Mot=r(OQt,"FlaxDistilBertForMultipleChoice"),OQt.forEach(t),Eot=r(gXe," (DistilBERT model)"),gXe.forEach(t),Cot=i(Co),CA=n(Co,"LI",{});var hXe=s(CA);UAe=n(hXe,"STRONG",{});var VQt=s(UAe);wot=r(VQt,"electra"),VQt.forEach(t),Aot=r(hXe," \u2014 "),yre=n(hXe,"A",{href:!0});var XQt=s(yre);Lot=r(XQt,"FlaxElectraForMultipleChoice"),XQt.forEach(t),yot=r(hXe," (ELECTRA model)"),hXe.forEach(t),xot=i(Co),wA=n(Co,"LI",{});var pXe=s(wA);JAe=n(pXe,"STRONG",{});var zQt=s(JAe);$ot=r(zQt,"roberta"),zQt.forEach(t),kot=r(pXe," \u2014 "),xre=n(pXe,"A",{href:!0});var QQt=s(xre);Sot=r(QQt,"FlaxRobertaForMultipleChoice"),QQt.forEach(t),Rot=r(pXe," (RoBERTa model)"),pXe.forEach(t),Pot=i(Co),AA=n(Co,"LI",{});var _Xe=s(AA);YAe=n(_Xe,"STRONG",{});var WQt=s(YAe);Bot=r(WQt,"roformer"),WQt.forEach(t),Iot=r(_Xe," \u2014 "),$re=n(_Xe,"A",{href:!0});var HQt=s($re);Not=r(HQt,"FlaxRoFormerForMultipleChoice"),HQt.forEach(t),qot=r(_Xe," (RoFormer model)"),_Xe.forEach(t),jot=i(Co),LA=n(Co,"LI",{});var uXe=s(LA);KAe=n(uXe,"STRONG",{});var UQt=s(KAe);Dot=r(UQt,"xlm-roberta"),UQt.forEach(t),Got=r(uXe," \u2014 "),kre=n(uXe,"A",{href:!0});var JQt=s(kre);Oot=r(JQt,"FlaxXLMRobertaForMultipleChoice"),JQt.forEach(t),Vot=r(uXe," (XLM-RoBERTa model)"),uXe.forEach(t),Co.forEach(t),Xot=i(Ti),T(yA.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),TQe=i(f),Ef=n(f,"H2",{class:!0});var $He=s(Ef);xA=n($He,"A",{id:!0,class:!0,href:!0});var YQt=s(xA);ZAe=n(YQt,"SPAN",{});var KQt=s(ZAe);T(ak.$$.fragment,KQt),KQt.forEach(t),YQt.forEach(t),zot=i($He),e6e=n($He,"SPAN",{});var ZQt=s(e6e);Qot=r(ZQt,"FlaxAutoModelForNextSentencePrediction"),ZQt.forEach(t),$He.forEach(t),MQe=i(f),wr=n(f,"DIV",{class:!0});var Mi=s(wr);T(nk.$$.fragment,Mi),Wot=i(Mi),Cf=n(Mi,"P",{});var Rae=s(Cf);Hot=r(Rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sre=n(Rae,"A",{href:!0});var eWt=s(Sre);Uot=r(eWt,"from_pretrained()"),eWt.forEach(t),Jot=r(Rae," class method or the "),Rre=n(Rae,"A",{href:!0});var oWt=s(Rre);Yot=r(oWt,"from_config()"),oWt.forEach(t),Kot=r(Rae,` class
method.`),Rae.forEach(t),Zot=i(Mi),sk=n(Mi,"P",{});var kHe=s(sk);ert=r(kHe,"This class cannot be instantiated directly using "),o6e=n(kHe,"CODE",{});var rWt=s(o6e);ort=r(rWt,"__init__()"),rWt.forEach(t),rrt=r(kHe," (throws an error)."),kHe.forEach(t),trt=i(Mi),ra=n(Mi,"DIV",{class:!0});var eL=s(ra);T(lk.$$.fragment,eL),art=i(eL),r6e=n(eL,"P",{});var tWt=s(r6e);nrt=r(tWt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tWt.forEach(t),srt=i(eL),wf=n(eL,"P",{});var Pae=s(wf);lrt=r(Pae,`Note:
Loading a model from its configuration file does `),t6e=n(Pae,"STRONG",{});var aWt=s(t6e);irt=r(aWt,"not"),aWt.forEach(t),drt=r(Pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pre=n(Pae,"A",{href:!0});var nWt=s(Pre);crt=r(nWt,"from_pretrained()"),nWt.forEach(t),frt=r(Pae," to load the model weights."),Pae.forEach(t),mrt=i(eL),T($A.$$.fragment,eL),eL.forEach(t),grt=i(Mi),Zr=n(Mi,"DIV",{class:!0});var Ei=s(Zr);T(ik.$$.fragment,Ei),hrt=i(Ei),a6e=n(Ei,"P",{});var sWt=s(a6e);prt=r(sWt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sWt.forEach(t),_rt=i(Ei),$n=n(Ei,"P",{});var oL=s($n);urt=r(oL,"The model class to instantiate is selected based on the "),n6e=n(oL,"CODE",{});var lWt=s(n6e);brt=r(lWt,"model_type"),lWt.forEach(t),vrt=r(oL,` property of the config object (either
passed as an argument or loaded from `),s6e=n(oL,"CODE",{});var iWt=s(s6e);Frt=r(iWt,"pretrained_model_name_or_path"),iWt.forEach(t),Trt=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=n(oL,"CODE",{});var dWt=s(l6e);Mrt=r(dWt,"pretrained_model_name_or_path"),dWt.forEach(t),Ert=r(oL,":"),oL.forEach(t),Crt=i(Ei),i6e=n(Ei,"UL",{});var cWt=s(i6e);kA=n(cWt,"LI",{});var bXe=s(kA);d6e=n(bXe,"STRONG",{});var fWt=s(d6e);wrt=r(fWt,"bert"),fWt.forEach(t),Art=r(bXe," \u2014 "),Bre=n(bXe,"A",{href:!0});var mWt=s(Bre);Lrt=r(mWt,"FlaxBertForNextSentencePrediction"),mWt.forEach(t),yrt=r(bXe," (BERT model)"),bXe.forEach(t),cWt.forEach(t),xrt=i(Ei),T(SA.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),EQe=i(f),Af=n(f,"H2",{class:!0});var SHe=s(Af);RA=n(SHe,"A",{id:!0,class:!0,href:!0});var gWt=s(RA);c6e=n(gWt,"SPAN",{});var hWt=s(c6e);T(dk.$$.fragment,hWt),hWt.forEach(t),gWt.forEach(t),$rt=i(SHe),f6e=n(SHe,"SPAN",{});var pWt=s(f6e);krt=r(pWt,"FlaxAutoModelForImageClassification"),pWt.forEach(t),SHe.forEach(t),CQe=i(f),Ar=n(f,"DIV",{class:!0});var Ci=s(Ar);T(ck.$$.fragment,Ci),Srt=i(Ci),Lf=n(Ci,"P",{});var Bae=s(Lf);Rrt=r(Bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Ire=n(Bae,"A",{href:!0});var _Wt=s(Ire);Prt=r(_Wt,"from_pretrained()"),_Wt.forEach(t),Brt=r(Bae," class method or the "),Nre=n(Bae,"A",{href:!0});var uWt=s(Nre);Irt=r(uWt,"from_config()"),uWt.forEach(t),Nrt=r(Bae,` class
method.`),Bae.forEach(t),qrt=i(Ci),fk=n(Ci,"P",{});var RHe=s(fk);jrt=r(RHe,"This class cannot be instantiated directly using "),m6e=n(RHe,"CODE",{});var bWt=s(m6e);Drt=r(bWt,"__init__()"),bWt.forEach(t),Grt=r(RHe," (throws an error)."),RHe.forEach(t),Ort=i(Ci),ta=n(Ci,"DIV",{class:!0});var rL=s(ta);T(mk.$$.fragment,rL),Vrt=i(rL),g6e=n(rL,"P",{});var vWt=s(g6e);Xrt=r(vWt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vWt.forEach(t),zrt=i(rL),yf=n(rL,"P",{});var Iae=s(yf);Qrt=r(Iae,`Note:
Loading a model from its configuration file does `),h6e=n(Iae,"STRONG",{});var FWt=s(h6e);Wrt=r(FWt,"not"),FWt.forEach(t),Hrt=r(Iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=n(Iae,"A",{href:!0});var TWt=s(qre);Urt=r(TWt,"from_pretrained()"),TWt.forEach(t),Jrt=r(Iae," to load the model weights."),Iae.forEach(t),Yrt=i(rL),T(PA.$$.fragment,rL),rL.forEach(t),Krt=i(Ci),et=n(Ci,"DIV",{class:!0});var wi=s(et);T(gk.$$.fragment,wi),Zrt=i(wi),p6e=n(wi,"P",{});var MWt=s(p6e);ett=r(MWt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MWt.forEach(t),ott=i(wi),kn=n(wi,"P",{});var tL=s(kn);rtt=r(tL,"The model class to instantiate is selected based on the "),_6e=n(tL,"CODE",{});var EWt=s(_6e);ttt=r(EWt,"model_type"),EWt.forEach(t),att=r(tL,` property of the config object (either
passed as an argument or loaded from `),u6e=n(tL,"CODE",{});var CWt=s(u6e);ntt=r(CWt,"pretrained_model_name_or_path"),CWt.forEach(t),stt=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=n(tL,"CODE",{});var wWt=s(b6e);ltt=r(wWt,"pretrained_model_name_or_path"),wWt.forEach(t),itt=r(tL,":"),tL.forEach(t),dtt=i(wi),hk=n(wi,"UL",{});var PHe=s(hk);BA=n(PHe,"LI",{});var vXe=s(BA);v6e=n(vXe,"STRONG",{});var AWt=s(v6e);ctt=r(AWt,"beit"),AWt.forEach(t),ftt=r(vXe," \u2014 "),jre=n(vXe,"A",{href:!0});var LWt=s(jre);mtt=r(LWt,"FlaxBeitForImageClassification"),LWt.forEach(t),gtt=r(vXe," (BEiT model)"),vXe.forEach(t),htt=i(PHe),IA=n(PHe,"LI",{});var FXe=s(IA);F6e=n(FXe,"STRONG",{});var yWt=s(F6e);ptt=r(yWt,"vit"),yWt.forEach(t),_tt=r(FXe," \u2014 "),Dre=n(FXe,"A",{href:!0});var xWt=s(Dre);utt=r(xWt,"FlaxViTForImageClassification"),xWt.forEach(t),btt=r(FXe," (ViT model)"),FXe.forEach(t),PHe.forEach(t),vtt=i(wi),T(NA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),wQe=i(f),xf=n(f,"H2",{class:!0});var BHe=s(xf);qA=n(BHe,"A",{id:!0,class:!0,href:!0});var $Wt=s(qA);T6e=n($Wt,"SPAN",{});var kWt=s(T6e);T(pk.$$.fragment,kWt),kWt.forEach(t),$Wt.forEach(t),Ftt=i(BHe),M6e=n(BHe,"SPAN",{});var SWt=s(M6e);Ttt=r(SWt,"FlaxAutoModelForVision2Seq"),SWt.forEach(t),BHe.forEach(t),AQe=i(f),Lr=n(f,"DIV",{class:!0});var Ai=s(Lr);T(_k.$$.fragment,Ai),Mtt=i(Ai),$f=n(Ai,"P",{});var Nae=s($f);Ett=r(Nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Gre=n(Nae,"A",{href:!0});var RWt=s(Gre);Ctt=r(RWt,"from_pretrained()"),RWt.forEach(t),wtt=r(Nae," class method or the "),Ore=n(Nae,"A",{href:!0});var PWt=s(Ore);Att=r(PWt,"from_config()"),PWt.forEach(t),Ltt=r(Nae,` class
method.`),Nae.forEach(t),ytt=i(Ai),uk=n(Ai,"P",{});var IHe=s(uk);xtt=r(IHe,"This class cannot be instantiated directly using "),E6e=n(IHe,"CODE",{});var BWt=s(E6e);$tt=r(BWt,"__init__()"),BWt.forEach(t),ktt=r(IHe," (throws an error)."),IHe.forEach(t),Stt=i(Ai),aa=n(Ai,"DIV",{class:!0});var aL=s(aa);T(bk.$$.fragment,aL),Rtt=i(aL),C6e=n(aL,"P",{});var IWt=s(C6e);Ptt=r(IWt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),IWt.forEach(t),Btt=i(aL),kf=n(aL,"P",{});var qae=s(kf);Itt=r(qae,`Note:
Loading a model from its configuration file does `),w6e=n(qae,"STRONG",{});var NWt=s(w6e);Ntt=r(NWt,"not"),NWt.forEach(t),qtt=r(qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vre=n(qae,"A",{href:!0});var qWt=s(Vre);jtt=r(qWt,"from_pretrained()"),qWt.forEach(t),Dtt=r(qae," to load the model weights."),qae.forEach(t),Gtt=i(aL),T(jA.$$.fragment,aL),aL.forEach(t),Ott=i(Ai),ot=n(Ai,"DIV",{class:!0});var Li=s(ot);T(vk.$$.fragment,Li),Vtt=i(Li),A6e=n(Li,"P",{});var jWt=s(A6e);Xtt=r(jWt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jWt.forEach(t),ztt=i(Li),Sn=n(Li,"P",{});var nL=s(Sn);Qtt=r(nL,"The model class to instantiate is selected based on the "),L6e=n(nL,"CODE",{});var DWt=s(L6e);Wtt=r(DWt,"model_type"),DWt.forEach(t),Htt=r(nL,` property of the config object (either
passed as an argument or loaded from `),y6e=n(nL,"CODE",{});var GWt=s(y6e);Utt=r(GWt,"pretrained_model_name_or_path"),GWt.forEach(t),Jtt=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=n(nL,"CODE",{});var OWt=s(x6e);Ytt=r(OWt,"pretrained_model_name_or_path"),OWt.forEach(t),Ktt=r(nL,":"),nL.forEach(t),Ztt=i(Li),$6e=n(Li,"UL",{});var VWt=s($6e);DA=n(VWt,"LI",{});var TXe=s(DA);k6e=n(TXe,"STRONG",{});var XWt=s(k6e);eat=r(XWt,"vision-encoder-decoder"),XWt.forEach(t),oat=r(TXe," \u2014 "),Xre=n(TXe,"A",{href:!0});var zWt=s(Xre);rat=r(zWt,"FlaxVisionEncoderDecoderModel"),zWt.forEach(t),tat=r(TXe," (Vision Encoder decoder model)"),TXe.forEach(t),VWt.forEach(t),aat=i(Li),T(GA.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(YUt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.AutoTokenizer"),c(Pi,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertModel"),c(jf,"id","extending-the-auto-classes"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#extending-the-auto-classes"),c(Bi,"class","relative group"),c(Gf,"id","transformers.AutoConfig"),c(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gf,"href","#transformers.AutoConfig"),c(Ii,"class","relative group"),c(HS,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(US,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertConfig"),c(JS,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartConfig"),c(YS,"href","/docs/transformers/pr_18244/en/model_doc/beit#transformers.BeitConfig"),c(KS,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertConfig"),c(ZS,"href","/docs/transformers/pr_18244/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(eR,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdConfig"),c(oR,"href","/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(rR,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(tR,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(aR,"href","/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomConfig"),c(nR,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertConfig"),c(sR,"href","/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineConfig"),c(lR,"href","/docs/transformers/pr_18244/en/model_doc/clip#transformers.CLIPConfig"),c(iR,"href","/docs/transformers/pr_18244/en/model_doc/codegen#transformers.CodeGenConfig"),c(dR,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertConfig"),c(cR,"href","/docs/transformers/pr_18244/en/model_doc/convnext#transformers.ConvNextConfig"),c(fR,"href","/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLConfig"),c(mR,"href","/docs/transformers/pr_18244/en/model_doc/cvt#transformers.CvtConfig"),c(gR,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(hR,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(pR,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(_R,"href","/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaConfig"),c(uR,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(bR,"href","/docs/transformers/pr_18244/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(vR,"href","/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTConfig"),c(FR,"href","/docs/transformers/pr_18244/en/model_doc/detr#transformers.DetrConfig"),c(TR,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertConfig"),c(MR,"href","/docs/transformers/pr_18244/en/model_doc/dpr#transformers.DPRConfig"),c(ER,"href","/docs/transformers/pr_18244/en/model_doc/dpt#transformers.DPTConfig"),c(CR,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraConfig"),c(wR,"href","/docs/transformers/pr_18244/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(AR,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertConfig"),c(LR,"href","/docs/transformers/pr_18244/en/model_doc/flava#transformers.FlavaConfig"),c(yR,"href","/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetConfig"),c(xR,"href","/docs/transformers/pr_18244/en/model_doc/fsmt#transformers.FSMTConfig"),c($R,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelConfig"),c(kR,"href","/docs/transformers/pr_18244/en/model_doc/glpn#transformers.GLPNConfig"),c(SR,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Config"),c(RR,"href","/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(PR,"href","/docs/transformers/pr_18244/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(BR,"href","/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJConfig"),c(IR,"href","/docs/transformers/pr_18244/en/model_doc/groupvit#transformers.GroupViTConfig"),c(NR,"href","/docs/transformers/pr_18244/en/model_doc/hubert#transformers.HubertConfig"),c(qR,"href","/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertConfig"),c(jR,"href","/docs/transformers/pr_18244/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(DR,"href","/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(GR,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(OR,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(VR,"href","/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDConfig"),c(XR,"href","/docs/transformers/pr_18244/en/model_doc/levit#transformers.LevitConfig"),c(zR,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerConfig"),c(QR,"href","/docs/transformers/pr_18244/en/model_doc/longt5#transformers.LongT5Config"),c(WR,"href","/docs/transformers/pr_18244/en/model_doc/luke#transformers.LukeConfig"),c(HR,"href","/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.LxmertConfig"),c(UR,"href","/docs/transformers/pr_18244/en/model_doc/m2m_100#transformers.M2M100Config"),c(JR,"href","/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianConfig"),c(YR,"href","/docs/transformers/pr_18244/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(KR,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartConfig"),c(ZR,"href","/docs/transformers/pr_18244/en/model_doc/mctct#transformers.MCTCTConfig"),c(eP,"href","/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(oP,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(rP,"href","/docs/transformers/pr_18244/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(tP,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetConfig"),c(aP,"href","/docs/transformers/pr_18244/en/model_doc/mt5#transformers.MT5Config"),c(nP,"href","/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpConfig"),c(sP,"href","/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaConfig"),c(lP,"href","/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(iP,"href","/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(dP,"href","/docs/transformers/pr_18244/en/model_doc/opt#transformers.OPTConfig"),c(cP,"href","/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusConfig"),c(fP,"href","/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverConfig"),c(mP,"href","/docs/transformers/pr_18244/en/model_doc/plbart#transformers.PLBartConfig"),c(gP,"href","/docs/transformers/pr_18244/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(hP,"href","/docs/transformers/pr_18244/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(pP,"href","/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(_P,"href","/docs/transformers/pr_18244/en/model_doc/rag#transformers.RagConfig"),c(uP,"href","/docs/transformers/pr_18244/en/model_doc/realm#transformers.RealmConfig"),c(bP,"href","/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerConfig"),c(vP,"href","/docs/transformers/pr_18244/en/model_doc/regnet#transformers.RegNetConfig"),c(FP,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertConfig"),c(TP,"href","/docs/transformers/pr_18244/en/model_doc/resnet#transformers.ResNetConfig"),c(MP,"href","/docs/transformers/pr_18244/en/model_doc/retribert#transformers.RetriBertConfig"),c(EP,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaConfig"),c(CP,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerConfig"),c(wP,"href","/docs/transformers/pr_18244/en/model_doc/segformer#transformers.SegformerConfig"),c(AP,"href","/docs/transformers/pr_18244/en/model_doc/sew#transformers.SEWConfig"),c(LP,"href","/docs/transformers/pr_18244/en/model_doc/sew-d#transformers.SEWDConfig"),c(yP,"href","/docs/transformers/pr_18244/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(xP,"href","/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c($P,"href","/docs/transformers/pr_18244/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(kP,"href","/docs/transformers/pr_18244/en/model_doc/splinter#transformers.SplinterConfig"),c(SP,"href","/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(RP,"href","/docs/transformers/pr_18244/en/model_doc/swin#transformers.SwinConfig"),c(PP,"href","/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5Config"),c(BP,"href","/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasConfig"),c(IP,"href","/docs/transformers/pr_18244/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(NP,"href","/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(qP,"href","/docs/transformers/pr_18244/en/model_doc/trocr#transformers.TrOCRConfig"),c(jP,"href","/docs/transformers/pr_18244/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(DP,"href","/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(GP,"href","/docs/transformers/pr_18244/en/model_doc/van#transformers.VanConfig"),c(OP,"href","/docs/transformers/pr_18244/en/model_doc/vilt#transformers.ViltConfig"),c(VP,"href","/docs/transformers/pr_18244/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(XP,"href","/docs/transformers/pr_18244/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(zP,"href","/docs/transformers/pr_18244/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(QP,"href","/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTConfig"),c(WP,"href","/docs/transformers/pr_18244/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(HP,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(UP,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(JP,"href","/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMConfig"),c(YP,"href","/docs/transformers/pr_18244/en/model_doc/xglm#transformers.XGLMConfig"),c(KP,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMConfig"),c(ZP,"href","/docs/transformers/pr_18244/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(eB,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(oB,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(rB,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetConfig"),c(tB,"href","/docs/transformers/pr_18244/en/model_doc/yolos#transformers.YolosConfig"),c(aB,"href","/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoConfig"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoTokenizer"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoTokenizer"),c(qi,"class","relative group"),c(nB,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(sB,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertTokenizer"),c(lB,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(iB,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartTokenizer"),c(dB,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartTokenizerFast"),c(cB,"href","/docs/transformers/pr_18244/en/model_doc/barthez#transformers.BarthezTokenizer"),c(fB,"href","/docs/transformers/pr_18244/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(mB,"href","/docs/transformers/pr_18244/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(gB,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertTokenizer"),c(hB,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertTokenizerFast"),c(pB,"href","/docs/transformers/pr_18244/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(_B,"href","/docs/transformers/pr_18244/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(uB,"href","/docs/transformers/pr_18244/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(bB,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(vB,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(FB,"href","/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(TB,"href","/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(MB,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(EB,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(CB,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(wB,"href","/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(AB,"href","/docs/transformers/pr_18244/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(LB,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertTokenizer"),c(yB,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(xB,"href","/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineTokenizer"),c($B,"href","/docs/transformers/pr_18244/en/model_doc/clip#transformers.CLIPTokenizer"),c(kB,"href","/docs/transformers/pr_18244/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(SB,"href","/docs/transformers/pr_18244/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(RB,"href","/docs/transformers/pr_18244/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(PB,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(BB,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(IB,"href","/docs/transformers/pr_18244/en/model_doc/cpm#transformers.CpmTokenizer"),c(NB,"href","/docs/transformers/pr_18244/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(qB,"href","/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(jB,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DB,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GB,"href","/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaTokenizer"),c(OB,"href","/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(VB,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(XB,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(zB,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(QB,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(WB,"href","/docs/transformers/pr_18244/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(HB,"href","/docs/transformers/pr_18244/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(UB,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraTokenizer"),c(JB,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(YB,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(KB,"href","/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetTokenizer"),c(ZB,"href","/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(eI,"href","/docs/transformers/pr_18244/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(oI,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelTokenizer"),c(rI,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(tI,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aI,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nI,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sI,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lI,"href","/docs/transformers/pr_18244/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(iI,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(dI,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(cI,"href","/docs/transformers/pr_18244/en/model_doc/clip#transformers.CLIPTokenizer"),c(fI,"href","/docs/transformers/pr_18244/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(mI,"href","/docs/transformers/pr_18244/en/model_doc/herbert#transformers.HerbertTokenizer"),c(gI,"href","/docs/transformers/pr_18244/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(hI,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(pI,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_I,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uI,"href","/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(bI,"href","/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(vI,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(FI,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(TI,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(MI,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(EI,"href","/docs/transformers/pr_18244/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(CI,"href","/docs/transformers/pr_18244/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(wI,"href","/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDTokenizer"),c(AI,"href","/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDTokenizerFast"),c(LI,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerTokenizer"),c(yI,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(xI,"href","/docs/transformers/pr_18244/en/model_doc/mt5#transformers.T5Tokenizer"),c($I,"href","/docs/transformers/pr_18244/en/model_doc/mt5#transformers.T5TokenizerFast"),c(kI,"href","/docs/transformers/pr_18244/en/model_doc/luke#transformers.LukeTokenizer"),c(SI,"href","/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(RI,"href","/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(PI,"href","/docs/transformers/pr_18244/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(BI,"href","/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianTokenizer"),c(II,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartTokenizer"),c(NI,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(qI,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(jI,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(DI,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertTokenizer"),c(GI,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertTokenizerFast"),c(OI,"href","/docs/transformers/pr_18244/en/model_doc/mluke#transformers.MLukeTokenizer"),c(VI,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(XI,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(zI,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(QI,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(WI,"href","/docs/transformers/pr_18244/en/model_doc/mt5#transformers.T5Tokenizer"),c(HI,"href","/docs/transformers/pr_18244/en/model_doc/mt5#transformers.T5TokenizerFast"),c(UI,"href","/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpTokenizer"),c(JI,"href","/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(YI,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertTokenizer"),c(KI,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZI,"href","/docs/transformers/pr_18244/en/model_doc/nllb#transformers.NllbTokenizer"),c(eN,"href","/docs/transformers/pr_18244/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(oN,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertTokenizer"),c(rN,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(tN,"href","/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(aN,"href","/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(nN,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sN,"href","/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(lN,"href","/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(iN,"href","/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(dN,"href","/docs/transformers/pr_18244/en/model_doc/phobert#transformers.PhobertTokenizer"),c(cN,"href","/docs/transformers/pr_18244/en/model_doc/plbart#transformers.PLBartTokenizer"),c(fN,"href","/docs/transformers/pr_18244/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(mN,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertTokenizer"),c(gN,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertTokenizerFast"),c(hN,"href","/docs/transformers/pr_18244/en/model_doc/rag#transformers.RagTokenizer"),c(pN,"href","/docs/transformers/pr_18244/en/model_doc/realm#transformers.RealmTokenizer"),c(_N,"href","/docs/transformers/pr_18244/en/model_doc/realm#transformers.RealmTokenizerFast"),c(uN,"href","/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerTokenizer"),c(bN,"href","/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(vN,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertTokenizer"),c(FN,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(TN,"href","/docs/transformers/pr_18244/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(MN,"href","/docs/transformers/pr_18244/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(EN,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaTokenizer"),c(CN,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wN,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(AN,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(LN,"href","/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(yN,"href","/docs/transformers/pr_18244/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(xN,"href","/docs/transformers/pr_18244/en/model_doc/splinter#transformers.SplinterTokenizer"),c($N,"href","/docs/transformers/pr_18244/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(kN,"href","/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(SN,"href","/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(RN,"href","/docs/transformers/pr_18244/en/model_doc/mt5#transformers.T5Tokenizer"),c(PN,"href","/docs/transformers/pr_18244/en/model_doc/mt5#transformers.T5TokenizerFast"),c(BN,"href","/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasTokenizer"),c(IN,"href","/docs/transformers/pr_18244/en/model_doc/tapex#transformers.TapexTokenizer"),c(NN,"href","/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(qN,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertTokenizer"),c(jN,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertTokenizerFast"),c(DN,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertTokenizer"),c(GN,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertTokenizerFast"),c(ON,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(VN,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(XN,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(zN,"href","/docs/transformers/pr_18244/en/model_doc/xglm#transformers.XGLMTokenizer"),c(QN,"href","/docs/transformers/pr_18244/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(WN,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMTokenizer"),c(HN,"href","/docs/transformers/pr_18244/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(UN,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(JN,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(YN,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KN,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZN,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(eq,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(oq,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertTokenizer"),c(rq,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"id","transformers.AutoFeatureExtractor"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(tq,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(aq,"href","/docs/transformers/pr_18244/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(nq,"href","/docs/transformers/pr_18244/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(sq,"href","/docs/transformers/pr_18244/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lq,"href","/docs/transformers/pr_18244/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iq,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dq,"href","/docs/transformers/pr_18244/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(cq,"href","/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(fq,"href","/docs/transformers/pr_18244/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(mq,"href","/docs/transformers/pr_18244/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(gq,"href","/docs/transformers/pr_18244/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(hq,"href","/docs/transformers/pr_18244/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(pq,"href","/docs/transformers/pr_18244/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(_q,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uq,"href","/docs/transformers/pr_18244/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(bq,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(vq,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Fq,"href","/docs/transformers/pr_18244/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_18244/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_18244/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_18244/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(wq,"href","/docs/transformers/pr_18244/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_18244/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_18244/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yq,"href","/docs/transformers/pr_18244/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(xq,"href","/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c($q,"href","/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kq,"href","/docs/transformers/pr_18244/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Sq,"href","/docs/transformers/pr_18244/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Rq,"href","/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Pq,"href","/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Bq,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Iq,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Nq,"href","/docs/transformers/pr_18244/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fp,"id","transformers.AutoProcessor"),c(Fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fp,"href","#transformers.AutoProcessor"),c(Di,"class","relative group"),c(qq,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(jq,"href","/docs/transformers/pr_18244/en/model_doc/clip#transformers.CLIPProcessor"),c(Dq,"href","/docs/transformers/pr_18244/en/model_doc/flava#transformers.FlavaProcessor"),c(Gq,"href","/docs/transformers/pr_18244/en/model_doc/clip#transformers.CLIPProcessor"),c(Oq,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Vq,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Xq,"href","/docs/transformers/pr_18244/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(zq,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qq,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Wq,"href","/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Hq,"href","/docs/transformers/pr_18244/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Uq,"href","/docs/transformers/pr_18244/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Jq,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Yq,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Kq,"href","/docs/transformers/pr_18244/en/model_doc/vilt#transformers.ViltProcessor"),c(Zq,"href","/docs/transformers/pr_18244/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(ej,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oj,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rj,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Op,"id","transformers.AutoModel"),c(Op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Op,"href","#transformers.AutoModel"),c(Oi,"class","relative group"),c(tj,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aj,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nj,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sj,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertModel"),c(lj,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartModel"),c(ij,"href","/docs/transformers/pr_18244/en/model_doc/beit#transformers.BeitModel"),c(dj,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertModel"),c(cj,"href","/docs/transformers/pr_18244/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(fj,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdModel"),c(mj,"href","/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(gj,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(hj,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(pj,"href","/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomModel"),c(_j,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertModel"),c(uj,"href","/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineModel"),c(bj,"href","/docs/transformers/pr_18244/en/model_doc/clip#transformers.CLIPModel"),c(vj,"href","/docs/transformers/pr_18244/en/model_doc/codegen#transformers.CodeGenModel"),c(Fj,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertModel"),c(Tj,"href","/docs/transformers/pr_18244/en/model_doc/convnext#transformers.ConvNextModel"),c(Mj,"href","/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLModel"),c(Ej,"href","/docs/transformers/pr_18244/en/model_doc/cvt#transformers.CvtModel"),c(Cj,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(wj,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Aj,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Lj,"href","/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaModel"),c(yj,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(xj,"href","/docs/transformers/pr_18244/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c($j,"href","/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTModel"),c(kj,"href","/docs/transformers/pr_18244/en/model_doc/detr#transformers.DetrModel"),c(Sj,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertModel"),c(Rj,"href","/docs/transformers/pr_18244/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Pj,"href","/docs/transformers/pr_18244/en/model_doc/dpt#transformers.DPTModel"),c(Bj,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraModel"),c(Ij,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertModel"),c(Nj,"href","/docs/transformers/pr_18244/en/model_doc/flava#transformers.FlavaModel"),c(qj,"href","/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetModel"),c(jj,"href","/docs/transformers/pr_18244/en/model_doc/fsmt#transformers.FSMTModel"),c(Dj,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelModel"),c(Gj,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Oj,"href","/docs/transformers/pr_18244/en/model_doc/glpn#transformers.GLPNModel"),c(Vj,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2Model"),c(Xj,"href","/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(zj,"href","/docs/transformers/pr_18244/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Qj,"href","/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJModel"),c(Wj,"href","/docs/transformers/pr_18244/en/model_doc/groupvit#transformers.GroupViTModel"),c(Hj,"href","/docs/transformers/pr_18244/en/model_doc/hubert#transformers.HubertModel"),c(Uj,"href","/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertModel"),c(Jj,"href","/docs/transformers/pr_18244/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Yj,"href","/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Kj,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Zj,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(eD,"href","/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDModel"),c(oD,"href","/docs/transformers/pr_18244/en/model_doc/levit#transformers.LevitModel"),c(rD,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerModel"),c(tD,"href","/docs/transformers/pr_18244/en/model_doc/longt5#transformers.LongT5Model"),c(aD,"href","/docs/transformers/pr_18244/en/model_doc/luke#transformers.LukeModel"),c(nD,"href","/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.LxmertModel"),c(sD,"href","/docs/transformers/pr_18244/en/model_doc/m2m_100#transformers.M2M100Model"),c(lD,"href","/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianModel"),c(iD,"href","/docs/transformers/pr_18244/en/model_doc/maskformer#transformers.MaskFormerModel"),c(dD,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartModel"),c(cD,"href","/docs/transformers/pr_18244/en/model_doc/mctct#transformers.MCTCTModel"),c(fD,"href","/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(mD,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertModel"),c(gD,"href","/docs/transformers/pr_18244/en/model_doc/mobilevit#transformers.MobileViTModel"),c(hD,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetModel"),c(pD,"href","/docs/transformers/pr_18244/en/model_doc/mt5#transformers.MT5Model"),c(_D,"href","/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpModel"),c(uD,"href","/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaModel"),c(bD,"href","/docs/transformers/pr_18244/en/model_doc/m2m_100#transformers.M2M100Model"),c(vD,"href","/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerModel"),c(FD,"href","/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(TD,"href","/docs/transformers/pr_18244/en/model_doc/opt#transformers.OPTModel"),c(MD,"href","/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusModel"),c(ED,"href","/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverModel"),c(CD,"href","/docs/transformers/pr_18244/en/model_doc/plbart#transformers.PLBartModel"),c(wD,"href","/docs/transformers/pr_18244/en/model_doc/poolformer#transformers.PoolFormerModel"),c(AD,"href","/docs/transformers/pr_18244/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(LD,"href","/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertModel"),c(yD,"href","/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerModel"),c(xD,"href","/docs/transformers/pr_18244/en/model_doc/regnet#transformers.RegNetModel"),c($D,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertModel"),c(kD,"href","/docs/transformers/pr_18244/en/model_doc/resnet#transformers.ResNetModel"),c(SD,"href","/docs/transformers/pr_18244/en/model_doc/retribert#transformers.RetriBertModel"),c(RD,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaModel"),c(PD,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerModel"),c(BD,"href","/docs/transformers/pr_18244/en/model_doc/segformer#transformers.SegformerModel"),c(ID,"href","/docs/transformers/pr_18244/en/model_doc/sew#transformers.SEWModel"),c(ND,"href","/docs/transformers/pr_18244/en/model_doc/sew-d#transformers.SEWDModel"),c(qD,"href","/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(jD,"href","/docs/transformers/pr_18244/en/model_doc/splinter#transformers.SplinterModel"),c(DD,"href","/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(GD,"href","/docs/transformers/pr_18244/en/model_doc/swin#transformers.SwinModel"),c(OD,"href","/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5Model"),c(VD,"href","/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasModel"),c(XD,"href","/docs/transformers/pr_18244/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(zD,"href","/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(QD,"href","/docs/transformers/pr_18244/en/model_doc/unispeech#transformers.UniSpeechModel"),c(WD,"href","/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(HD,"href","/docs/transformers/pr_18244/en/model_doc/van#transformers.VanModel"),c(UD,"href","/docs/transformers/pr_18244/en/model_doc/vilt#transformers.ViltModel"),c(JD,"href","/docs/transformers/pr_18244/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(YD,"href","/docs/transformers/pr_18244/en/model_doc/visual_bert#transformers.VisualBertModel"),c(KD,"href","/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTModel"),c(ZD,"href","/docs/transformers/pr_18244/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(eG,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(oG,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(rG,"href","/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMModel"),c(tG,"href","/docs/transformers/pr_18244/en/model_doc/xglm#transformers.XGLMModel"),c(aG,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMModel"),c(nG,"href","/docs/transformers/pr_18244/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(sG,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(lG,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(iG,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetModel"),c(dG,"href","/docs/transformers/pr_18244/en/model_doc/yolos#transformers.YolosModel"),c(cG,"href","/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uu,"id","transformers.AutoModelForPreTraining"),c(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uu,"href","#transformers.AutoModelForPreTraining"),c(zi,"class","relative group"),c(fG,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mG,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gG,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hG,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertForPreTraining"),c(pG,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertForPreTraining"),c(uG,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(bG,"href","/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomForCausalLM"),c(vG,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(FG,"href","/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(TG,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(MG,"href","/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(EG,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(CG,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(wG,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraForPreTraining"),c(AG,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(LG,"href","/docs/transformers/pr_18244/en/model_doc/flava#transformers.FlavaForPreTraining"),c(yG,"href","/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetForPreTraining"),c(xG,"href","/docs/transformers/pr_18244/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c($G,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(kG,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(SG,"href","/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(RG,"href","/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(PG,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(BG,"href","/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(IG,"href","/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(NG,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(qG,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(jG,"href","/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(DG,"href","/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(GG,"href","/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(OG,"href","/docs/transformers/pr_18244/en/model_doc/retribert#transformers.RetriBertModel"),c(VG,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(XG,"href","/docs/transformers/pr_18244/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(zG,"href","/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(QG,"href","/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(WG,"href","/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(HG,"href","/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(UG,"href","/docs/transformers/pr_18244/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(JG,"href","/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(YG,"href","/docs/transformers/pr_18244/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(KG,"href","/docs/transformers/pr_18244/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(ZG,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(eO,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(oO,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rO,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(tO,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(aO,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.AutoModelForCausalLM"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.AutoModelForCausalLM"),c(Hi,"class","relative group"),c(nO,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sO,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lO,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iO,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartForCausalLM"),c(dO,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertLMHeadModel"),c(cO,"href","/docs/transformers/pr_18244/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(fO,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(mO,"href","/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(gO,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(hO,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(pO,"href","/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomForCausalLM"),c(_O,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(uO,"href","/docs/transformers/pr_18244/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(bO,"href","/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(vO,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(FO,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraForCausalLM"),c(TO,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(MO,"href","/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(EO,"href","/docs/transformers/pr_18244/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(CO,"href","/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(wO,"href","/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianForCausalLM"),c(AO,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartForCausalLM"),c(LO,"href","/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(yO,"href","/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpForCausalLM"),c(xO,"href","/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($O,"href","/docs/transformers/pr_18244/en/model_doc/opt#transformers.OPTForCausalLM"),c(kO,"href","/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(SO,"href","/docs/transformers/pr_18244/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(RO,"href","/docs/transformers/pr_18244/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(PO,"href","/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(BO,"href","/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(IO,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(NO,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(qO,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(jO,"href","/docs/transformers/pr_18244/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(DO,"href","/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(GO,"href","/docs/transformers/pr_18244/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(OO,"href","/docs/transformers/pr_18244/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(VO,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XO,"href","/docs/transformers/pr_18244/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(zO,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(QO,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(WO,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P2,"id","transformers.AutoModelForMaskedLM"),c(P2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P2,"href","#transformers.AutoModelForMaskedLM"),c(Yi,"class","relative group"),c(HO,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UO,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(KO,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ZO,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertForMaskedLM"),c(eV,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(oV,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(rV,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(tV,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(aV,"href","/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(nV,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(sV,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(lV,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(iV,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(dV,"href","/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(cV,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(fV,"href","/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(mV,"href","/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gV,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hV,"href","/docs/transformers/pr_18244/en/model_doc/luke#transformers.LukeForMaskedLM"),c(pV,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(_V,"href","/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(uV,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(bV,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(vV,"href","/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(FV,"href","/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(TV,"href","/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(MV,"href","/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(EV,"href","/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(CV,"href","/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(wV,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(AV,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(LV,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(yV,"href","/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(xV,"href","/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasForMaskedLM"),c($V,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(kV,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(SV,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(RV,"href","/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M1,"id","transformers.AutoModelForSeq2SeqLM"),c(M1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M1,"href","#transformers.AutoModelForSeq2SeqLM"),c(ed,"class","relative group"),c(PV,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IV,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_18244/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(OV,"href","/docs/transformers/pr_18244/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_18244/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_18244/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_18244/en/model_doc/marian#transformers.MarianMTModel"),c(WV,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(HV,"href","/docs/transformers/pr_18244/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(UV,"href","/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(JV,"href","/docs/transformers/pr_18244/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(KV,"href","/docs/transformers/pr_18244/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(ZV,"href","/docs/transformers/pr_18244/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(eX,"href","/docs/transformers/pr_18244/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(oX,"href","/docs/transformers/pr_18244/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z1,"id","transformers.AutoModelForSequenceClassification"),c(z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z1,"href","#transformers.AutoModelForSequenceClassification"),c(td,"class","relative group"),c(rX,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(sX,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartForSequenceClassification"),c(lX,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertForSequenceClassification"),c(iX,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(dX,"href","/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(cX,"href","/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(fX,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(mX,"href","/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(gX,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(hX,"href","/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(pX,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(_X,"href","/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(uX,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(bX,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(vX,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(FX,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(TX,"href","/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(MX,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(EX,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(CX,"href","/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(wX,"href","/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(AX,"href","/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(LX,"href","/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(yX,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(xX,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c($X,"href","/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDForSequenceClassification"),c(kX,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(SX,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(RX,"href","/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(PX,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(BX,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(IX,"href","/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(NX,"href","/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(qX,"href","/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(jX,"href","/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(DX,"href","/docs/transformers/pr_18244/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(GX,"href","/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(OX,"href","/docs/transformers/pr_18244/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(VX,"href","/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(XX,"href","/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(zX,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(QX,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(WX,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(HX,"href","/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(UX,"href","/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(JX,"href","/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(YX,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(KX,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(ez,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(oz,"href","/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qb,"id","transformers.AutoModelForMultipleChoice"),c(Qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qb,"href","#transformers.AutoModelForMultipleChoice"),c(sd,"class","relative group"),c(rz,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(sz,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertForMultipleChoice"),c(lz,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(iz,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(dz,"href","/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(cz,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(fz,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(mz,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(gz,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(hz,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(pz,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(uz,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(bz,"href","/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(vz,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(wz,"href","/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Az,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Lz,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(yz,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(xz,"href","/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c($z,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(kz,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Sz,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Rz,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Pz,"href","/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForNextSentencePrediction"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForNextSentencePrediction"),c(dd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(jz,"href","/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Dz,"href","/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Gz,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Oz,"href","/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Vz,"href","/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iv,"id","transformers.AutoModelForTokenClassification"),c(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iv,"href","#transformers.AutoModelForTokenClassification"),c(md,"class","relative group"),c(Xz,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Hz,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Jz,"href","/docs/transformers/pr_18244/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Yz,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Kz,"href","/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Zz,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(eQ,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(oQ,"href","/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(rQ,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(tQ,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(aQ,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(nQ,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(sQ,"href","/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(lQ,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(iQ,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(dQ,"href","/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(cQ,"href","/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(fQ,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(mQ,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(gQ,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(hQ,"href","/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(pQ,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(_Q,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(uQ,"href","/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(bQ,"href","/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(vQ,"href","/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(FQ,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(TQ,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(MQ,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(EQ,"href","/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(CQ,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(wQ,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(AQ,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(LQ,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(yQ,"href","/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForQuestionAnswering"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForQuestionAnswering"),c(pd,"class","relative group"),c(xQ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Q,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kQ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SQ,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_18244/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_18244/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_18244/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(QQ,"href","/docs/transformers/pr_18244/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_18244/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_18244/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_18244/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_18244/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_18244/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_18244/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_18244/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_18244/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(iW,"href","/docs/transformers/pr_18244/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(dW,"href","/docs/transformers/pr_18244/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(cW,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(fW,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(mW,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(gW,"href","/docs/transformers/pr_18244/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(hW,"href","/docs/transformers/pr_18244/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(pW,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(_W,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(uW,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(bW,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(vW,"href","/docs/transformers/pr_18244/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForTableQuestionAnswering"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(bd,"class","relative group"),c(FW,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.AutoModelForImageClassification"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.AutoModelForImageClassification"),c(Td,"class","relative group"),c(CW,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_18244/en/model_doc/beit#transformers.BeitForImageClassification"),c(yW,"href","/docs/transformers/pr_18244/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(xW,"href","/docs/transformers/pr_18244/en/model_doc/cvt#transformers.CvtForImageClassification"),c($W,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(kW,"href","/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTForImageClassification"),c(SW,"href","/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(RW,"href","/docs/transformers/pr_18244/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(PW,"href","/docs/transformers/pr_18244/en/model_doc/levit#transformers.LevitForImageClassification"),c(BW,"href","/docs/transformers/pr_18244/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(IW,"href","/docs/transformers/pr_18244/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(NW,"href","/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(qW,"href","/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(jW,"href","/docs/transformers/pr_18244/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(DW,"href","/docs/transformers/pr_18244/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(GW,"href","/docs/transformers/pr_18244/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(OW,"href","/docs/transformers/pr_18244/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(VW,"href","/docs/transformers/pr_18244/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(XW,"href","/docs/transformers/pr_18244/en/model_doc/swin#transformers.SwinForImageClassification"),c(zW,"href","/docs/transformers/pr_18244/en/model_doc/van#transformers.VanForImageClassification"),c(QW,"href","/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.AutoModelForVision2Seq"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(WW,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/pr_18244/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ld,"class","relative group"),c(YW,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZW,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/pr_18244/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.AutoModelForAudioClassification"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.AutoModelForAudioClassification"),c($d,"class","relative group"),c(oH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aH,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(nH,"href","/docs/transformers/pr_18244/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(sH,"href","/docs/transformers/pr_18244/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(lH,"href","/docs/transformers/pr_18244/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(iH,"href","/docs/transformers/pr_18244/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(dH,"href","/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(cH,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(fH,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(mH,"href","/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n8,"id","transformers.AutoModelForAudioFrameClassification"),c(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n8,"href","#transformers.AutoModelForAudioFrameClassification"),c(Rd,"class","relative group"),c(gH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(uH,"href","/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(bH,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(vH,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(FH,"href","/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h8,"id","transformers.AutoModelForCTC"),c(h8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h8,"href","#transformers.AutoModelForCTC"),c(Id,"class","relative group"),c(TH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(wH,"href","/docs/transformers/pr_18244/en/model_doc/hubert#transformers.HubertForCTC"),c(AH,"href","/docs/transformers/pr_18244/en/model_doc/mctct#transformers.MCTCTForCTC"),c(LH,"href","/docs/transformers/pr_18244/en/model_doc/sew#transformers.SEWForCTC"),c(yH,"href","/docs/transformers/pr_18244/en/model_doc/sew-d#transformers.SEWDForCTC"),c(xH,"href","/docs/transformers/pr_18244/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c($H,"href","/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(kH,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(SH,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(RH,"href","/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(y8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(jd,"class","relative group"),c(PH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_18244/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(qH,"href","/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P8,"id","transformers.AutoModelForAudioXVector"),c(P8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P8,"href","#transformers.AutoModelForAudioXVector"),c(Od,"class","relative group"),c(jH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(VH,"href","/docs/transformers/pr_18244/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(XH,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(zH,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(QH,"href","/docs/transformers/pr_18244/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V8,"id","transformers.AutoModelForMaskedImageModeling"),c(V8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V8,"href","#transformers.AutoModelForMaskedImageModeling"),c(zd,"class","relative group"),c(WH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_18244/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(YH,"href","/docs/transformers/pr_18244/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(KH,"href","/docs/transformers/pr_18244/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J8,"id","transformers.AutoModelForObjectDetection"),c(J8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J8,"href","#transformers.AutoModelForObjectDetection"),c(Ud,"class","relative group"),c(ZH,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_18244/en/model_doc/detr#transformers.DetrForObjectDetection"),c(tU,"href","/docs/transformers/pr_18244/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.AutoModelForImageSegmentation"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.AutoModelForImageSegmentation"),c(Kd,"class","relative group"),c(aU,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/pr_18244/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.AutoModelForSemanticSegmentation"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.AutoModelForSemanticSegmentation"),c(oc,"class","relative group"),c(iU,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/pr_18244/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(mU,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(gU,"href","/docs/transformers/pr_18244/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(hU,"href","/docs/transformers/pr_18244/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(pU,"href","/docs/transformers/pr_18244/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_M,"id","transformers.AutoModelForInstanceSegmentation"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.AutoModelForInstanceSegmentation"),c(ac,"class","relative group"),c(_U,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uU,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/pr_18244/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModel"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModel"),c(lc,"class","relative group"),c(FU,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TU,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MU,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EU,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.TFAlbertModel"),c(CU,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.TFBartModel"),c(wU,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertModel"),c(AU,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(LU,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(yU,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertModel"),c(xU,"href","/docs/transformers/pr_18244/en/model_doc/clip#transformers.TFCLIPModel"),c($U,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.TFConvBertModel"),c(kU,"href","/docs/transformers/pr_18244/en/model_doc/convnext#transformers.TFConvNextModel"),c(SU,"href","/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.TFCTRLModel"),c(RU,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(PU,"href","/docs/transformers/pr_18244/en/model_doc/deberta#transformers.TFDebertaModel"),c(BU,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(IU,"href","/docs/transformers/pr_18244/en/model_doc/deit#transformers.TFDeiTModel"),c(NU,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(qU,"href","/docs/transformers/pr_18244/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(jU,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.TFElectraModel"),c(DU,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(GU,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelModel"),c(OU,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(VU,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.TFGPT2Model"),c(XU,"href","/docs/transformers/pr_18244/en/model_doc/gptj#transformers.TFGPTJModel"),c(zU,"href","/docs/transformers/pr_18244/en/model_doc/hubert#transformers.TFHubertModel"),c(QU,"href","/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(WU,"href","/docs/transformers/pr_18244/en/model_doc/led#transformers.TFLEDModel"),c(HU,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.TFLongformerModel"),c(UU,"href","/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.TFLxmertModel"),c(JU,"href","/docs/transformers/pr_18244/en/model_doc/marian#transformers.TFMarianModel"),c(YU,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.TFMBartModel"),c(KU,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(ZU,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.TFMPNetModel"),c(eJ,"href","/docs/transformers/pr_18244/en/model_doc/mt5#transformers.TFMT5Model"),c(oJ,"href","/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(rJ,"href","/docs/transformers/pr_18244/en/model_doc/opt#transformers.TFOPTModel"),c(tJ,"href","/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.TFPegasusModel"),c(aJ,"href","/docs/transformers/pr_18244/en/model_doc/regnet#transformers.TFRegNetModel"),c(nJ,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.TFRemBertModel"),c(sJ,"href","/docs/transformers/pr_18244/en/model_doc/resnet#transformers.TFResNetModel"),c(lJ,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaModel"),c(iJ,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.TFRoFormerModel"),c(dJ,"href","/docs/transformers/pr_18244/en/model_doc/segformer#transformers.TFSegformerModel"),c(cJ,"href","/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(fJ,"href","/docs/transformers/pr_18244/en/model_doc/swin#transformers.TFSwinModel"),c(mJ,"href","/docs/transformers/pr_18244/en/model_doc/t5#transformers.TFT5Model"),c(gJ,"href","/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TFTapasModel"),c(hJ,"href","/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(pJ,"href","/docs/transformers/pr_18244/en/model_doc/vit#transformers.TFViTModel"),c(_J,"href","/docs/transformers/pr_18244/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(uJ,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(bJ,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMModel"),c(vJ,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(FJ,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.TFXLNetModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.TFAutoModelForPreTraining"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.TFAutoModelForPreTraining"),c(cc,"class","relative group"),c(TJ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(wJ,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(AJ,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertForPreTraining"),c(LJ,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(yJ,"href","/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(xJ,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($J,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(kJ,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(SJ,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(RJ,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PJ,"href","/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BJ,"href","/docs/transformers/pr_18244/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(IJ,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(NJ,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(qJ,"href","/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jJ,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DJ,"href","/docs/transformers/pr_18244/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(GJ,"href","/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OJ,"href","/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(VJ,"href","/docs/transformers/pr_18244/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(XJ,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zJ,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(QJ,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.TFAutoModelForCausalLM"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.TFAutoModelForCausalLM"),c(gc,"class","relative group"),c(WJ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(YJ,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(KJ,"href","/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ZJ,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(eY,"href","/docs/transformers/pr_18244/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(oY,"href","/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(rY,"href","/docs/transformers/pr_18244/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(tY,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(aY,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(nY,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(sY,"href","/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lY,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iY,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.TFAutoModelForImageClassification"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.TFAutoModelForImageClassification"),c(_c,"class","relative group"),c(dY,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_18244/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(gY,"href","/docs/transformers/pr_18244/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(hY,"href","/docs/transformers/pr_18244/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(pY,"href","/docs/transformers/pr_18244/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(_Y,"href","/docs/transformers/pr_18244/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(uY,"href","/docs/transformers/pr_18244/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(bY,"href","/docs/transformers/pr_18244/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(vY,"href","/docs/transformers/pr_18244/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(FY,"href","/docs/transformers/pr_18244/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bC,"id","transformers.TFAutoModelForMaskedLM"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.TFAutoModelForMaskedLM"),c(vc,"class","relative group"),c(TY,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(wY,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(AY,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(LY,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(yY,"href","/docs/transformers/pr_18244/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(xY,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c($Y,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(kY,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(SY,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RY,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(PY,"href","/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BY,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(IY,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(NY,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(qY,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(jY,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DY,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(GY,"href","/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OY,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VY,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Mc,"class","relative group"),c(XY,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(HY,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_18244/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(YY,"href","/docs/transformers/pr_18244/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(KY,"href","/docs/transformers/pr_18244/en/model_doc/marian#transformers.TFMarianMTModel"),c(ZY,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(eK,"href","/docs/transformers/pr_18244/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(oK,"href","/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(rK,"href","/docs/transformers/pr_18244/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.TFAutoModelForSequenceClassification"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.TFAutoModelForSequenceClassification"),c(wc,"class","relative group"),c(tK,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aK,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nK,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sK,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(lK,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(iK,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(dK,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(cK,"href","/docs/transformers/pr_18244/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(fK,"href","/docs/transformers/pr_18244/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(mK,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(gK,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(hK,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(pK,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(_K,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(uK,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(bK,"href","/docs/transformers/pr_18244/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(vK,"href","/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(FK,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(TK,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(MK,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(EK,"href","/docs/transformers/pr_18244/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(CK,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(wK,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(AK,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(LK,"href","/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(yK,"href","/docs/transformers/pr_18244/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(xK,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c($K,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(kK,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.TFAutoModelForMultipleChoice"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.TFAutoModelForMultipleChoice"),c(yc,"class","relative group"),c(SK,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RK,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PK,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BK,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(IK,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(NK,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(qK,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(jK,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(DK,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(GK,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(OK,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(VK,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(XK,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(zK,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(QK,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(WK,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(HK,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(UK,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(JK,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(YK,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.TFAutoModelForNextSentencePrediction"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(kc,"class","relative group"),c(KK,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(rZ,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Pc,"class","relative group"),c(tZ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aZ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nZ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sZ,"href","/docs/transformers/pr_18244/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.TFAutoModelForTokenClassification"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.TFAutoModelForTokenClassification"),c(Nc,"class","relative group"),c(lZ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iZ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dZ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cZ,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(fZ,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(mZ,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(gZ,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(hZ,"href","/docs/transformers/pr_18244/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(pZ,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(_Z,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(uZ,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(bZ,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(vZ,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(FZ,"href","/docs/transformers/pr_18244/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(TZ,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(MZ,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(EZ,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(CZ,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(wZ,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(AZ,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(LZ,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(yZ,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(xZ,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.TFAutoModelForQuestionAnswering"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Dc,"class","relative group"),c($Z,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_18244/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(IZ,"href","/docs/transformers/pr_18244/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_18244/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(qZ,"href","/docs/transformers/pr_18244/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(jZ,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(DZ,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(GZ,"href","/docs/transformers/pr_18244/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(OZ,"href","/docs/transformers/pr_18244/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(VZ,"href","/docs/transformers/pr_18244/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(XZ,"href","/docs/transformers/pr_18244/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(zZ,"href","/docs/transformers/pr_18244/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(QZ,"href","/docs/transformers/pr_18244/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(WZ,"href","/docs/transformers/pr_18244/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(HZ,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(UZ,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(JZ,"href","/docs/transformers/pr_18244/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(YZ,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(KZ,"href","/docs/transformers/pr_18244/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.TFAutoModelForVision2Seq"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.TFAutoModelForVision2Seq"),c(Vc,"class","relative group"),c(ZZ,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/pr_18244/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e0,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(e0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e0,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Qc,"class","relative group"),c(tee,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aee,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nee,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(see,"href","/docs/transformers/pr_18244/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.FlaxAutoModel"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.FlaxAutoModel"),c(Uc,"class","relative group"),c(lee,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iee,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dee,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cee,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.FlaxAlbertModel"),c(fee,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.FlaxBartModel"),c(mee,"href","/docs/transformers/pr_18244/en/model_doc/beit#transformers.FlaxBeitModel"),c(gee,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertModel"),c(hee,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(pee,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(_ee,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(uee,"href","/docs/transformers/pr_18244/en/model_doc/clip#transformers.FlaxCLIPModel"),c(bee,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(vee,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraModel"),c(Fee,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Tee,"href","/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Mee,"href","/docs/transformers/pr_18244/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Eee,"href","/docs/transformers/pr_18244/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Cee,"href","/docs/transformers/pr_18244/en/model_doc/marian#transformers.FlaxMarianModel"),c(wee,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Aee,"href","/docs/transformers/pr_18244/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Lee,"href","/docs/transformers/pr_18244/en/model_doc/opt#transformers.FlaxOPTModel"),c(yee,"href","/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(xee,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaModel"),c($ee,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(kee,"href","/docs/transformers/pr_18244/en/model_doc/t5#transformers.FlaxT5Model"),c(See,"href","/docs/transformers/pr_18244/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Ree,"href","/docs/transformers/pr_18244/en/model_doc/vit#transformers.FlaxViTModel"),c(Pee,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Bee,"href","/docs/transformers/pr_18244/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Iee,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P0,"id","transformers.FlaxAutoModelForCausalLM"),c(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P0,"href","#transformers.FlaxAutoModelForCausalLM"),c(Kc,"class","relative group"),c(Nee,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qee,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jee,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dee,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Gee,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Oee,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Vee,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Xee,"href","/docs/transformers/pr_18244/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(zee,"href","/docs/transformers/pr_18244/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Qee,"href","/docs/transformers/pr_18244/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Wee,"href","/docs/transformers/pr_18244/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Hee,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Uee,"href","/docs/transformers/pr_18244/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W0,"id","transformers.FlaxAutoModelForPreTraining"),c(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W0,"href","#transformers.FlaxAutoModelForPreTraining"),c(of,"class","relative group"),c(Jee,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yee,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kee,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zee,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(eoe,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ooe,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(roe,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(toe,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(aoe,"href","/docs/transformers/pr_18244/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(noe,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(soe,"href","/docs/transformers/pr_18244/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(loe,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ioe,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(doe,"href","/docs/transformers/pr_18244/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(coe,"href","/docs/transformers/pr_18244/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(foe,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dw,"id","transformers.FlaxAutoModelForMaskedLM"),c(dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(af,"class","relative group"),c(moe,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(goe,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hoe,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(poe,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(_oe,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uoe,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(boe,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(voe,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Foe,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Toe,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Moe,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Eoe,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Coe,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(lf,"class","relative group"),c(woe,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aoe,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Loe,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yoe,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xoe,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c($oe,"href","/docs/transformers/pr_18244/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(koe,"href","/docs/transformers/pr_18244/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Soe,"href","/docs/transformers/pr_18244/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Roe,"href","/docs/transformers/pr_18244/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Poe,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Boe,"href","/docs/transformers/pr_18244/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Ioe,"href","/docs/transformers/pr_18244/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Noe,"href","/docs/transformers/pr_18244/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(ff,"class","relative group"),c(qoe,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(joe,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Doe,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Goe,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Ooe,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Voe,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Xoe,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(zoe,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Qoe,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Woe,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Hoe,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Uoe,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Joe,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(hf,"class","relative group"),c(Yoe,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Koe,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zoe,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ere,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(ore,"href","/docs/transformers/pr_18244/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(rre,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(tre,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(are,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(nre,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(sre,"href","/docs/transformers/pr_18244/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(lre,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(ire,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(dre,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lA,"id","transformers.FlaxAutoModelForTokenClassification"),c(lA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(uf,"class","relative group"),c(cre,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fre,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mre,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gre,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(hre,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(pre,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(_re,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(ure,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(bre,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(vre,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Fre,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(bA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Ff,"class","relative group"),c(Tre,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mre,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ere,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cre,"href","/docs/transformers/pr_18244/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(wre,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Are,"href","/docs/transformers/pr_18244/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Lre,"href","/docs/transformers/pr_18244/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(yre,"href","/docs/transformers/pr_18244/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(xre,"href","/docs/transformers/pr_18244/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c($re,"href","/docs/transformers/pr_18244/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(kre,"href","/docs/transformers/pr_18244/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(xA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Ef,"class","relative group"),c(Sre,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rre,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pre,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bre,"href","/docs/transformers/pr_18244/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RA,"id","transformers.FlaxAutoModelForImageClassification"),c(RA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RA,"href","#transformers.FlaxAutoModelForImageClassification"),c(Af,"class","relative group"),c(Ire,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nre,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qre,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jre,"href","/docs/transformers/pr_18244/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Dre,"href","/docs/transformers/pr_18244/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qA,"id","transformers.FlaxAutoModelForVision2Seq"),c(qA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(xf,"class","relative group"),c(Gre,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ore,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vre,"href","/docs/transformers/pr_18244/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xre,"href","/docs/transformers/pr_18244/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,wo),e(wo,yi),b(f,Bf,u),b(f,lt,u),e(lt,xi),e(lt,$i),e($i,sL),e(lt,If),b(f,Oe,u),b(f,We,u),e(We,ki),e(We,Pn),e(Pn,lL),e(We,Bn),e(We,In),e(In,iL),e(We,Si),e(We,Nn),e(Nn,dL),e(We,Ri),b(f,Nf,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,OS),e(Ae,Pi),e(Pi,VS),e(Ae,XS),b(f,Ao,u),b(f,Ra,u),e(Ra,zS),e(Ra,qf),e(qf,QS),e(Ra,NHe),b(f,MXe,u),b(f,Bi,u),e(Bi,jf),e(jf,jae),M(cL,jae,null),e(Bi,qHe),e(Bi,Dae),e(Dae,jHe),b(f,EXe,u),b(f,qn,u),e(qn,DHe),e(qn,Gae),e(Gae,GHe),e(qn,OHe),e(qn,Oae),e(Oae,VHe),e(qn,XHe),b(f,CXe,u),M(fL,f,u),b(f,wXe,u),b(f,WS,u),e(WS,zHe),b(f,AXe,u),M(Df,f,u),b(f,LXe,u),b(f,Ii,u),e(Ii,Gf),e(Gf,Vae),M(mL,Vae,null),e(Ii,QHe),e(Ii,Xae),e(Xae,WHe),b(f,yXe,u),b(f,Lo,u),M(gL,Lo,null),e(Lo,HHe),e(Lo,hL),e(hL,UHe),e(hL,HS),e(HS,JHe),e(hL,YHe),e(Lo,KHe),e(Lo,pL),e(pL,ZHe),e(pL,zae),e(zae,eUe),e(pL,oUe),e(Lo,rUe),e(Lo,yr),M(_L,yr,null),e(yr,tUe),e(yr,Qae),e(Qae,aUe),e(yr,nUe),e(yr,Ni),e(Ni,sUe),e(Ni,Wae),e(Wae,lUe),e(Ni,iUe),e(Ni,Hae),e(Hae,dUe),e(Ni,cUe),e(yr,fUe),e(yr,A),e(A,Of),e(Of,Uae),e(Uae,mUe),e(Of,gUe),e(Of,US),e(US,hUe),e(Of,pUe),e(A,_Ue),e(A,Vf),e(Vf,Jae),e(Jae,uUe),e(Vf,bUe),e(Vf,JS),e(JS,vUe),e(Vf,FUe),e(A,TUe),e(A,Xf),e(Xf,Yae),e(Yae,MUe),e(Xf,EUe),e(Xf,YS),e(YS,CUe),e(Xf,wUe),e(A,AUe),e(A,zf),e(zf,Kae),e(Kae,LUe),e(zf,yUe),e(zf,KS),e(KS,xUe),e(zf,$Ue),e(A,kUe),e(A,Qf),e(Qf,Zae),e(Zae,SUe),e(Qf,RUe),e(Qf,ZS),e(ZS,PUe),e(Qf,BUe),e(A,IUe),e(A,Wf),e(Wf,ene),e(ene,NUe),e(Wf,qUe),e(Wf,eR),e(eR,jUe),e(Wf,DUe),e(A,GUe),e(A,Hf),e(Hf,one),e(one,OUe),e(Hf,VUe),e(Hf,oR),e(oR,XUe),e(Hf,zUe),e(A,QUe),e(A,Uf),e(Uf,rne),e(rne,WUe),e(Uf,HUe),e(Uf,rR),e(rR,UUe),e(Uf,JUe),e(A,YUe),e(A,Jf),e(Jf,tne),e(tne,KUe),e(Jf,ZUe),e(Jf,tR),e(tR,eJe),e(Jf,oJe),e(A,rJe),e(A,Yf),e(Yf,ane),e(ane,tJe),e(Yf,aJe),e(Yf,aR),e(aR,nJe),e(Yf,sJe),e(A,lJe),e(A,Kf),e(Kf,nne),e(nne,iJe),e(Kf,dJe),e(Kf,nR),e(nR,cJe),e(Kf,fJe),e(A,mJe),e(A,Zf),e(Zf,sne),e(sne,gJe),e(Zf,hJe),e(Zf,sR),e(sR,pJe),e(Zf,_Je),e(A,uJe),e(A,em),e(em,lne),e(lne,bJe),e(em,vJe),e(em,lR),e(lR,FJe),e(em,TJe),e(A,MJe),e(A,om),e(om,ine),e(ine,EJe),e(om,CJe),e(om,iR),e(iR,wJe),e(om,AJe),e(A,LJe),e(A,rm),e(rm,dne),e(dne,yJe),e(rm,xJe),e(rm,dR),e(dR,$Je),e(rm,kJe),e(A,SJe),e(A,tm),e(tm,cne),e(cne,RJe),e(tm,PJe),e(tm,cR),e(cR,BJe),e(tm,IJe),e(A,NJe),e(A,am),e(am,fne),e(fne,qJe),e(am,jJe),e(am,fR),e(fR,DJe),e(am,GJe),e(A,OJe),e(A,nm),e(nm,mne),e(mne,VJe),e(nm,XJe),e(nm,mR),e(mR,zJe),e(nm,QJe),e(A,WJe),e(A,sm),e(sm,gne),e(gne,HJe),e(sm,UJe),e(sm,gR),e(gR,JJe),e(sm,YJe),e(A,KJe),e(A,lm),e(lm,hne),e(hne,ZJe),e(lm,eYe),e(lm,hR),e(hR,oYe),e(lm,rYe),e(A,tYe),e(A,im),e(im,pne),e(pne,aYe),e(im,nYe),e(im,pR),e(pR,sYe),e(im,lYe),e(A,iYe),e(A,dm),e(dm,_ne),e(_ne,dYe),e(dm,cYe),e(dm,_R),e(_R,fYe),e(dm,mYe),e(A,gYe),e(A,cm),e(cm,une),e(une,hYe),e(cm,pYe),e(cm,uR),e(uR,_Ye),e(cm,uYe),e(A,bYe),e(A,fm),e(fm,bne),e(bne,vYe),e(fm,FYe),e(fm,bR),e(bR,TYe),e(fm,MYe),e(A,EYe),e(A,mm),e(mm,vne),e(vne,CYe),e(mm,wYe),e(mm,vR),e(vR,AYe),e(mm,LYe),e(A,yYe),e(A,gm),e(gm,Fne),e(Fne,xYe),e(gm,$Ye),e(gm,FR),e(FR,kYe),e(gm,SYe),e(A,RYe),e(A,hm),e(hm,Tne),e(Tne,PYe),e(hm,BYe),e(hm,TR),e(TR,IYe),e(hm,NYe),e(A,qYe),e(A,pm),e(pm,Mne),e(Mne,jYe),e(pm,DYe),e(pm,MR),e(MR,GYe),e(pm,OYe),e(A,VYe),e(A,_m),e(_m,Ene),e(Ene,XYe),e(_m,zYe),e(_m,ER),e(ER,QYe),e(_m,WYe),e(A,HYe),e(A,um),e(um,Cne),e(Cne,UYe),e(um,JYe),e(um,CR),e(CR,YYe),e(um,KYe),e(A,ZYe),e(A,bm),e(bm,wne),e(wne,eKe),e(bm,oKe),e(bm,wR),e(wR,rKe),e(bm,tKe),e(A,aKe),e(A,vm),e(vm,Ane),e(Ane,nKe),e(vm,sKe),e(vm,AR),e(AR,lKe),e(vm,iKe),e(A,dKe),e(A,Fm),e(Fm,Lne),e(Lne,cKe),e(Fm,fKe),e(Fm,LR),e(LR,mKe),e(Fm,gKe),e(A,hKe),e(A,Tm),e(Tm,yne),e(yne,pKe),e(Tm,_Ke),e(Tm,yR),e(yR,uKe),e(Tm,bKe),e(A,vKe),e(A,Mm),e(Mm,xne),e(xne,FKe),e(Mm,TKe),e(Mm,xR),e(xR,MKe),e(Mm,EKe),e(A,CKe),e(A,Em),e(Em,$ne),e($ne,wKe),e(Em,AKe),e(Em,$R),e($R,LKe),e(Em,yKe),e(A,xKe),e(A,Cm),e(Cm,kne),e(kne,$Ke),e(Cm,kKe),e(Cm,kR),e(kR,SKe),e(Cm,RKe),e(A,PKe),e(A,wm),e(wm,Sne),e(Sne,BKe),e(wm,IKe),e(wm,SR),e(SR,NKe),e(wm,qKe),e(A,jKe),e(A,Am),e(Am,Rne),e(Rne,DKe),e(Am,GKe),e(Am,RR),e(RR,OKe),e(Am,VKe),e(A,XKe),e(A,Lm),e(Lm,Pne),e(Pne,zKe),e(Lm,QKe),e(Lm,PR),e(PR,WKe),e(Lm,HKe),e(A,UKe),e(A,ym),e(ym,Bne),e(Bne,JKe),e(ym,YKe),e(ym,BR),e(BR,KKe),e(ym,ZKe),e(A,eZe),e(A,xm),e(xm,Ine),e(Ine,oZe),e(xm,rZe),e(xm,IR),e(IR,tZe),e(xm,aZe),e(A,nZe),e(A,$m),e($m,Nne),e(Nne,sZe),e($m,lZe),e($m,NR),e(NR,iZe),e($m,dZe),e(A,cZe),e(A,km),e(km,qne),e(qne,fZe),e(km,mZe),e(km,qR),e(qR,gZe),e(km,hZe),e(A,pZe),e(A,Sm),e(Sm,jne),e(jne,_Ze),e(Sm,uZe),e(Sm,jR),e(jR,bZe),e(Sm,vZe),e(A,FZe),e(A,Rm),e(Rm,Dne),e(Dne,TZe),e(Rm,MZe),e(Rm,DR),e(DR,EZe),e(Rm,CZe),e(A,wZe),e(A,Pm),e(Pm,Gne),e(Gne,AZe),e(Pm,LZe),e(Pm,GR),e(GR,yZe),e(Pm,xZe),e(A,$Ze),e(A,Bm),e(Bm,One),e(One,kZe),e(Bm,SZe),e(Bm,OR),e(OR,RZe),e(Bm,PZe),e(A,BZe),e(A,Im),e(Im,Vne),e(Vne,IZe),e(Im,NZe),e(Im,VR),e(VR,qZe),e(Im,jZe),e(A,DZe),e(A,Nm),e(Nm,Xne),e(Xne,GZe),e(Nm,OZe),e(Nm,XR),e(XR,VZe),e(Nm,XZe),e(A,zZe),e(A,qm),e(qm,zne),e(zne,QZe),e(qm,WZe),e(qm,zR),e(zR,HZe),e(qm,UZe),e(A,JZe),e(A,jm),e(jm,Qne),e(Qne,YZe),e(jm,KZe),e(jm,QR),e(QR,ZZe),e(jm,eeo),e(A,oeo),e(A,Dm),e(Dm,Wne),e(Wne,reo),e(Dm,teo),e(Dm,WR),e(WR,aeo),e(Dm,neo),e(A,seo),e(A,Gm),e(Gm,Hne),e(Hne,leo),e(Gm,ieo),e(Gm,HR),e(HR,deo),e(Gm,ceo),e(A,feo),e(A,Om),e(Om,Une),e(Une,meo),e(Om,geo),e(Om,UR),e(UR,heo),e(Om,peo),e(A,_eo),e(A,Vm),e(Vm,Jne),e(Jne,ueo),e(Vm,beo),e(Vm,JR),e(JR,veo),e(Vm,Feo),e(A,Teo),e(A,Xm),e(Xm,Yne),e(Yne,Meo),e(Xm,Eeo),e(Xm,YR),e(YR,Ceo),e(Xm,weo),e(A,Aeo),e(A,zm),e(zm,Kne),e(Kne,Leo),e(zm,yeo),e(zm,KR),e(KR,xeo),e(zm,$eo),e(A,keo),e(A,Qm),e(Qm,Zne),e(Zne,Seo),e(Qm,Reo),e(Qm,ZR),e(ZR,Peo),e(Qm,Beo),e(A,Ieo),e(A,Wm),e(Wm,ese),e(ese,Neo),e(Wm,qeo),e(Wm,eP),e(eP,jeo),e(Wm,Deo),e(A,Geo),e(A,Hm),e(Hm,ose),e(ose,Oeo),e(Hm,Veo),e(Hm,oP),e(oP,Xeo),e(Hm,zeo),e(A,Qeo),e(A,Um),e(Um,rse),e(rse,Weo),e(Um,Heo),e(Um,rP),e(rP,Ueo),e(Um,Jeo),e(A,Yeo),e(A,Jm),e(Jm,tse),e(tse,Keo),e(Jm,Zeo),e(Jm,tP),e(tP,eoo),e(Jm,ooo),e(A,roo),e(A,Ym),e(Ym,ase),e(ase,too),e(Ym,aoo),e(Ym,aP),e(aP,noo),e(Ym,soo),e(A,loo),e(A,Km),e(Km,nse),e(nse,ioo),e(Km,doo),e(Km,nP),e(nP,coo),e(Km,foo),e(A,moo),e(A,Zm),e(Zm,sse),e(sse,goo),e(Zm,hoo),e(Zm,sP),e(sP,poo),e(Zm,_oo),e(A,uoo),e(A,eg),e(eg,lse),e(lse,boo),e(eg,voo),e(eg,lP),e(lP,Foo),e(eg,Too),e(A,Moo),e(A,og),e(og,ise),e(ise,Eoo),e(og,Coo),e(og,iP),e(iP,woo),e(og,Aoo),e(A,Loo),e(A,rg),e(rg,dse),e(dse,yoo),e(rg,xoo),e(rg,dP),e(dP,$oo),e(rg,koo),e(A,Soo),e(A,tg),e(tg,cse),e(cse,Roo),e(tg,Poo),e(tg,cP),e(cP,Boo),e(tg,Ioo),e(A,Noo),e(A,ag),e(ag,fse),e(fse,qoo),e(ag,joo),e(ag,fP),e(fP,Doo),e(ag,Goo),e(A,Ooo),e(A,ng),e(ng,mse),e(mse,Voo),e(ng,Xoo),e(ng,mP),e(mP,zoo),e(ng,Qoo),e(A,Woo),e(A,sg),e(sg,gse),e(gse,Hoo),e(sg,Uoo),e(sg,gP),e(gP,Joo),e(sg,Yoo),e(A,Koo),e(A,lg),e(lg,hse),e(hse,Zoo),e(lg,ero),e(lg,hP),e(hP,oro),e(lg,rro),e(A,tro),e(A,ig),e(ig,pse),e(pse,aro),e(ig,nro),e(ig,pP),e(pP,sro),e(ig,lro),e(A,iro),e(A,dg),e(dg,_se),e(_se,dro),e(dg,cro),e(dg,_P),e(_P,fro),e(dg,mro),e(A,gro),e(A,cg),e(cg,use),e(use,hro),e(cg,pro),e(cg,uP),e(uP,_ro),e(cg,uro),e(A,bro),e(A,fg),e(fg,bse),e(bse,vro),e(fg,Fro),e(fg,bP),e(bP,Tro),e(fg,Mro),e(A,Ero),e(A,mg),e(mg,vse),e(vse,Cro),e(mg,wro),e(mg,vP),e(vP,Aro),e(mg,Lro),e(A,yro),e(A,gg),e(gg,Fse),e(Fse,xro),e(gg,$ro),e(gg,FP),e(FP,kro),e(gg,Sro),e(A,Rro),e(A,hg),e(hg,Tse),e(Tse,Pro),e(hg,Bro),e(hg,TP),e(TP,Iro),e(hg,Nro),e(A,qro),e(A,pg),e(pg,Mse),e(Mse,jro),e(pg,Dro),e(pg,MP),e(MP,Gro),e(pg,Oro),e(A,Vro),e(A,_g),e(_g,Ese),e(Ese,Xro),e(_g,zro),e(_g,EP),e(EP,Qro),e(_g,Wro),e(A,Hro),e(A,ug),e(ug,Cse),e(Cse,Uro),e(ug,Jro),e(ug,CP),e(CP,Yro),e(ug,Kro),e(A,Zro),e(A,bg),e(bg,wse),e(wse,eto),e(bg,oto),e(bg,wP),e(wP,rto),e(bg,tto),e(A,ato),e(A,vg),e(vg,Ase),e(Ase,nto),e(vg,sto),e(vg,AP),e(AP,lto),e(vg,ito),e(A,dto),e(A,Fg),e(Fg,Lse),e(Lse,cto),e(Fg,fto),e(Fg,LP),e(LP,mto),e(Fg,gto),e(A,hto),e(A,Tg),e(Tg,yse),e(yse,pto),e(Tg,_to),e(Tg,yP),e(yP,uto),e(Tg,bto),e(A,vto),e(A,Mg),e(Mg,xse),e(xse,Fto),e(Mg,Tto),e(Mg,xP),e(xP,Mto),e(Mg,Eto),e(A,Cto),e(A,Eg),e(Eg,$se),e($se,wto),e(Eg,Ato),e(Eg,$P),e($P,Lto),e(Eg,yto),e(A,xto),e(A,Cg),e(Cg,kse),e(kse,$to),e(Cg,kto),e(Cg,kP),e(kP,Sto),e(Cg,Rto),e(A,Pto),e(A,wg),e(wg,Sse),e(Sse,Bto),e(wg,Ito),e(wg,SP),e(SP,Nto),e(wg,qto),e(A,jto),e(A,Ag),e(Ag,Rse),e(Rse,Dto),e(Ag,Gto),e(Ag,RP),e(RP,Oto),e(Ag,Vto),e(A,Xto),e(A,Lg),e(Lg,Pse),e(Pse,zto),e(Lg,Qto),e(Lg,PP),e(PP,Wto),e(Lg,Hto),e(A,Uto),e(A,yg),e(yg,Bse),e(Bse,Jto),e(yg,Yto),e(yg,BP),e(BP,Kto),e(yg,Zto),e(A,eao),e(A,xg),e(xg,Ise),e(Ise,oao),e(xg,rao),e(xg,IP),e(IP,tao),e(xg,aao),e(A,nao),e(A,$g),e($g,Nse),e(Nse,sao),e($g,lao),e($g,NP),e(NP,iao),e($g,dao),e(A,cao),e(A,kg),e(kg,qse),e(qse,fao),e(kg,mao),e(kg,qP),e(qP,gao),e(kg,hao),e(A,pao),e(A,Sg),e(Sg,jse),e(jse,_ao),e(Sg,uao),e(Sg,jP),e(jP,bao),e(Sg,vao),e(A,Fao),e(A,Rg),e(Rg,Dse),e(Dse,Tao),e(Rg,Mao),e(Rg,DP),e(DP,Eao),e(Rg,Cao),e(A,wao),e(A,Pg),e(Pg,Gse),e(Gse,Aao),e(Pg,Lao),e(Pg,GP),e(GP,yao),e(Pg,xao),e(A,$ao),e(A,Bg),e(Bg,Ose),e(Ose,kao),e(Bg,Sao),e(Bg,OP),e(OP,Rao),e(Bg,Pao),e(A,Bao),e(A,Ig),e(Ig,Vse),e(Vse,Iao),e(Ig,Nao),e(Ig,VP),e(VP,qao),e(Ig,jao),e(A,Dao),e(A,Ng),e(Ng,Xse),e(Xse,Gao),e(Ng,Oao),e(Ng,XP),e(XP,Vao),e(Ng,Xao),e(A,zao),e(A,qg),e(qg,zse),e(zse,Qao),e(qg,Wao),e(qg,zP),e(zP,Hao),e(qg,Uao),e(A,Jao),e(A,jg),e(jg,Qse),e(Qse,Yao),e(jg,Kao),e(jg,QP),e(QP,Zao),e(jg,eno),e(A,ono),e(A,Dg),e(Dg,Wse),e(Wse,rno),e(Dg,tno),e(Dg,WP),e(WP,ano),e(Dg,nno),e(A,sno),e(A,Gg),e(Gg,Hse),e(Hse,lno),e(Gg,ino),e(Gg,HP),e(HP,dno),e(Gg,cno),e(A,fno),e(A,Og),e(Og,Use),e(Use,mno),e(Og,gno),e(Og,UP),e(UP,hno),e(Og,pno),e(A,_no),e(A,Vg),e(Vg,Jse),e(Jse,uno),e(Vg,bno),e(Vg,JP),e(JP,vno),e(Vg,Fno),e(A,Tno),e(A,Xg),e(Xg,Yse),e(Yse,Mno),e(Xg,Eno),e(Xg,YP),e(YP,Cno),e(Xg,wno),e(A,Ano),e(A,zg),e(zg,Kse),e(Kse,Lno),e(zg,yno),e(zg,KP),e(KP,xno),e(zg,$no),e(A,kno),e(A,Qg),e(Qg,Zse),e(Zse,Sno),e(Qg,Rno),e(Qg,ZP),e(ZP,Pno),e(Qg,Bno),e(A,Ino),e(A,Wg),e(Wg,ele),e(ele,Nno),e(Wg,qno),e(Wg,eB),e(eB,jno),e(Wg,Dno),e(A,Gno),e(A,Hg),e(Hg,ole),e(ole,Ono),e(Hg,Vno),e(Hg,oB),e(oB,Xno),e(Hg,zno),e(A,Qno),e(A,Ug),e(Ug,rle),e(rle,Wno),e(Ug,Hno),e(Ug,rB),e(rB,Uno),e(Ug,Jno),e(A,Yno),e(A,Jg),e(Jg,tle),e(tle,Kno),e(Jg,Zno),e(Jg,tB),e(tB,eso),e(Jg,oso),e(A,rso),e(A,Yg),e(Yg,ale),e(ale,tso),e(Yg,aso),e(Yg,aB),e(aB,nso),e(Yg,sso),e(yr,lso),M(Kg,yr,null),e(Lo,iso),e(Lo,Zg),M(uL,Zg,null),e(Zg,dso),e(Zg,nle),e(nle,cso),b(f,xXe,u),b(f,qi,u),e(qi,eh),e(eh,sle),M(bL,sle,null),e(qi,fso),e(qi,lle),e(lle,mso),b(f,$Xe,u),b(f,yo,u),M(vL,yo,null),e(yo,gso),e(yo,FL),e(FL,hso),e(FL,nB),e(nB,pso),e(FL,_so),e(yo,uso),e(yo,TL),e(TL,bso),e(TL,ile),e(ile,vso),e(TL,Fso),e(yo,Tso),e(yo,xr),M(ML,xr,null),e(xr,Mso),e(xr,dle),e(dle,Eso),e(xr,Cso),e(xr,Pa),e(Pa,wso),e(Pa,cle),e(cle,Aso),e(Pa,Lso),e(Pa,fle),e(fle,yso),e(Pa,xso),e(Pa,mle),e(mle,$so),e(Pa,kso),e(xr,Sso),e(xr,k),e(k,jn),e(jn,gle),e(gle,Rso),e(jn,Pso),e(jn,sB),e(sB,Bso),e(jn,Iso),e(jn,lB),e(lB,Nso),e(jn,qso),e(k,jso),e(k,Dn),e(Dn,hle),e(hle,Dso),e(Dn,Gso),e(Dn,iB),e(iB,Oso),e(Dn,Vso),e(Dn,dB),e(dB,Xso),e(Dn,zso),e(k,Qso),e(k,Gn),e(Gn,ple),e(ple,Wso),e(Gn,Hso),e(Gn,cB),e(cB,Uso),e(Gn,Jso),e(Gn,fB),e(fB,Yso),e(Gn,Kso),e(k,Zso),e(k,oh),e(oh,_le),e(_le,elo),e(oh,olo),e(oh,mB),e(mB,rlo),e(oh,tlo),e(k,alo),e(k,On),e(On,ule),e(ule,nlo),e(On,slo),e(On,gB),e(gB,llo),e(On,ilo),e(On,hB),e(hB,dlo),e(On,clo),e(k,flo),e(k,rh),e(rh,ble),e(ble,mlo),e(rh,glo),e(rh,pB),e(pB,hlo),e(rh,plo),e(k,_lo),e(k,th),e(th,vle),e(vle,ulo),e(th,blo),e(th,_B),e(_B,vlo),e(th,Flo),e(k,Tlo),e(k,ah),e(ah,Fle),e(Fle,Mlo),e(ah,Elo),e(ah,uB),e(uB,Clo),e(ah,wlo),e(k,Alo),e(k,Vn),e(Vn,Tle),e(Tle,Llo),e(Vn,ylo),e(Vn,bB),e(bB,xlo),e(Vn,$lo),e(Vn,vB),e(vB,klo),e(Vn,Slo),e(k,Rlo),e(k,Xn),e(Xn,Mle),e(Mle,Plo),e(Xn,Blo),e(Xn,FB),e(FB,Ilo),e(Xn,Nlo),e(Xn,TB),e(TB,qlo),e(Xn,jlo),e(k,Dlo),e(k,zn),e(zn,Ele),e(Ele,Glo),e(zn,Olo),e(zn,MB),e(MB,Vlo),e(zn,Xlo),e(zn,EB),e(EB,zlo),e(zn,Qlo),e(k,Wlo),e(k,nh),e(nh,Cle),e(Cle,Hlo),e(nh,Ulo),e(nh,CB),e(CB,Jlo),e(nh,Ylo),e(k,Klo),e(k,sh),e(sh,wle),e(wle,Zlo),e(sh,eio),e(sh,wB),e(wB,oio),e(sh,rio),e(k,tio),e(k,lh),e(lh,Ale),e(Ale,aio),e(lh,nio),e(lh,AB),e(AB,sio),e(lh,lio),e(k,iio),e(k,Qn),e(Qn,Lle),e(Lle,dio),e(Qn,cio),e(Qn,LB),e(LB,fio),e(Qn,mio),e(Qn,yB),e(yB,gio),e(Qn,hio),e(k,pio),e(k,ih),e(ih,yle),e(yle,_io),e(ih,uio),e(ih,xB),e(xB,bio),e(ih,vio),e(k,Fio),e(k,Wn),e(Wn,xle),e(xle,Tio),e(Wn,Mio),e(Wn,$B),e($B,Eio),e(Wn,Cio),e(Wn,kB),e(kB,wio),e(Wn,Aio),e(k,Lio),e(k,Hn),e(Hn,$le),e($le,yio),e(Hn,xio),e(Hn,SB),e(SB,$io),e(Hn,kio),e(Hn,RB),e(RB,Sio),e(Hn,Rio),e(k,Pio),e(k,Un),e(Un,kle),e(kle,Bio),e(Un,Iio),e(Un,PB),e(PB,Nio),e(Un,qio),e(Un,BB),e(BB,jio),e(Un,Dio),e(k,Gio),e(k,Jn),e(Jn,Sle),e(Sle,Oio),e(Jn,Vio),e(Jn,IB),e(IB,Xio),e(Jn,zio),e(Jn,NB),e(NB,Qio),e(Jn,Wio),e(k,Hio),e(k,dh),e(dh,Rle),e(Rle,Uio),e(dh,Jio),e(dh,qB),e(qB,Yio),e(dh,Kio),e(k,Zio),e(k,Yn),e(Yn,Ple),e(Ple,edo),e(Yn,odo),e(Yn,jB),e(jB,rdo),e(Yn,tdo),e(Yn,DB),e(DB,ado),e(Yn,ndo),e(k,sdo),e(k,Kn),e(Kn,Ble),e(Ble,ldo),e(Kn,ido),e(Kn,GB),e(GB,ddo),e(Kn,cdo),e(Kn,OB),e(OB,fdo),e(Kn,mdo),e(k,gdo),e(k,Zn),e(Zn,Ile),e(Ile,hdo),e(Zn,pdo),e(Zn,VB),e(VB,_do),e(Zn,udo),e(Zn,XB),e(XB,bdo),e(Zn,vdo),e(k,Fdo),e(k,es),e(es,Nle),e(Nle,Tdo),e(es,Mdo),e(es,zB),e(zB,Edo),e(es,Cdo),e(es,QB),e(QB,wdo),e(es,Ado),e(k,Ldo),e(k,os),e(os,qle),e(qle,ydo),e(os,xdo),e(os,WB),e(WB,$do),e(os,kdo),e(os,HB),e(HB,Sdo),e(os,Rdo),e(k,Pdo),e(k,rs),e(rs,jle),e(jle,Bdo),e(rs,Ido),e(rs,UB),e(UB,Ndo),e(rs,qdo),e(rs,JB),e(JB,jdo),e(rs,Ddo),e(k,Gdo),e(k,ch),e(ch,Dle),e(Dle,Odo),e(ch,Vdo),e(ch,YB),e(YB,Xdo),e(ch,zdo),e(k,Qdo),e(k,ts),e(ts,Gle),e(Gle,Wdo),e(ts,Hdo),e(ts,KB),e(KB,Udo),e(ts,Jdo),e(ts,ZB),e(ZB,Ydo),e(ts,Kdo),e(k,Zdo),e(k,fh),e(fh,Ole),e(Ole,eco),e(fh,oco),e(fh,eI),e(eI,rco),e(fh,tco),e(k,aco),e(k,as),e(as,Vle),e(Vle,nco),e(as,sco),e(as,oI),e(oI,lco),e(as,ico),e(as,rI),e(rI,dco),e(as,cco),e(k,fco),e(k,ns),e(ns,Xle),e(Xle,mco),e(ns,gco),e(ns,tI),e(tI,hco),e(ns,pco),e(ns,aI),e(aI,_co),e(ns,uco),e(k,bco),e(k,ss),e(ss,zle),e(zle,vco),e(ss,Fco),e(ss,nI),e(nI,Tco),e(ss,Mco),e(ss,sI),e(sI,Eco),e(ss,Cco),e(k,wco),e(k,mh),e(mh,Qle),e(Qle,Aco),e(mh,Lco),e(mh,lI),e(lI,yco),e(mh,xco),e(k,$co),e(k,ls),e(ls,Wle),e(Wle,kco),e(ls,Sco),e(ls,iI),e(iI,Rco),e(ls,Pco),e(ls,dI),e(dI,Bco),e(ls,Ico),e(k,Nco),e(k,is),e(is,Hle),e(Hle,qco),e(is,jco),e(is,cI),e(cI,Dco),e(is,Gco),e(is,fI),e(fI,Oco),e(is,Vco),e(k,Xco),e(k,ds),e(ds,Ule),e(Ule,zco),e(ds,Qco),e(ds,mI),e(mI,Wco),e(ds,Hco),e(ds,gI),e(gI,Uco),e(ds,Jco),e(k,Yco),e(k,gh),e(gh,Jle),e(Jle,Kco),e(gh,Zco),e(gh,hI),e(hI,efo),e(gh,ofo),e(k,rfo),e(k,cs),e(cs,Yle),e(Yle,tfo),e(cs,afo),e(cs,pI),e(pI,nfo),e(cs,sfo),e(cs,_I),e(_I,lfo),e(cs,ifo),e(k,dfo),e(k,fs),e(fs,Kle),e(Kle,cfo),e(fs,ffo),e(fs,uI),e(uI,mfo),e(fs,gfo),e(fs,bI),e(bI,hfo),e(fs,pfo),e(k,_fo),e(k,ms),e(ms,Zle),e(Zle,ufo),e(ms,bfo),e(ms,vI),e(vI,vfo),e(ms,Ffo),e(ms,FI),e(FI,Tfo),e(ms,Mfo),e(k,Efo),e(k,gs),e(gs,eie),e(eie,Cfo),e(gs,wfo),e(gs,TI),e(TI,Afo),e(gs,Lfo),e(gs,MI),e(MI,yfo),e(gs,xfo),e(k,$fo),e(k,hs),e(hs,oie),e(oie,kfo),e(hs,Sfo),e(hs,EI),e(EI,Rfo),e(hs,Pfo),e(hs,CI),e(CI,Bfo),e(hs,Ifo),e(k,Nfo),e(k,ps),e(ps,rie),e(rie,qfo),e(ps,jfo),e(ps,wI),e(wI,Dfo),e(ps,Gfo),e(ps,AI),e(AI,Ofo),e(ps,Vfo),e(k,Xfo),e(k,_s),e(_s,tie),e(tie,zfo),e(_s,Qfo),e(_s,LI),e(LI,Wfo),e(_s,Hfo),e(_s,yI),e(yI,Ufo),e(_s,Jfo),e(k,Yfo),e(k,us),e(us,aie),e(aie,Kfo),e(us,Zfo),e(us,xI),e(xI,emo),e(us,omo),e(us,$I),e($I,rmo),e(us,tmo),e(k,amo),e(k,hh),e(hh,nie),e(nie,nmo),e(hh,smo),e(hh,kI),e(kI,lmo),e(hh,imo),e(k,dmo),e(k,bs),e(bs,sie),e(sie,cmo),e(bs,fmo),e(bs,SI),e(SI,mmo),e(bs,gmo),e(bs,RI),e(RI,hmo),e(bs,pmo),e(k,_mo),e(k,ph),e(ph,lie),e(lie,umo),e(ph,bmo),e(ph,PI),e(PI,vmo),e(ph,Fmo),e(k,Tmo),e(k,_h),e(_h,iie),e(iie,Mmo),e(_h,Emo),e(_h,BI),e(BI,Cmo),e(_h,wmo),e(k,Amo),e(k,vs),e(vs,die),e(die,Lmo),e(vs,ymo),e(vs,II),e(II,xmo),e(vs,$mo),e(vs,NI),e(NI,kmo),e(vs,Smo),e(k,Rmo),e(k,Fs),e(Fs,cie),e(cie,Pmo),e(Fs,Bmo),e(Fs,qI),e(qI,Imo),e(Fs,Nmo),e(Fs,jI),e(jI,qmo),e(Fs,jmo),e(k,Dmo),e(k,Ts),e(Ts,fie),e(fie,Gmo),e(Ts,Omo),e(Ts,DI),e(DI,Vmo),e(Ts,Xmo),e(Ts,GI),e(GI,zmo),e(Ts,Qmo),e(k,Wmo),e(k,uh),e(uh,mie),e(mie,Hmo),e(uh,Umo),e(uh,OI),e(OI,Jmo),e(uh,Ymo),e(k,Kmo),e(k,Ms),e(Ms,gie),e(gie,Zmo),e(Ms,ego),e(Ms,VI),e(VI,ogo),e(Ms,rgo),e(Ms,XI),e(XI,tgo),e(Ms,ago),e(k,ngo),e(k,Es),e(Es,hie),e(hie,sgo),e(Es,lgo),e(Es,zI),e(zI,igo),e(Es,dgo),e(Es,QI),e(QI,cgo),e(Es,fgo),e(k,mgo),e(k,Cs),e(Cs,pie),e(pie,ggo),e(Cs,hgo),e(Cs,WI),e(WI,pgo),e(Cs,_go),e(Cs,HI),e(HI,ugo),e(Cs,bgo),e(k,vgo),e(k,ws),e(ws,_ie),e(_ie,Fgo),e(ws,Tgo),e(ws,UI),e(UI,Mgo),e(ws,Ego),e(ws,JI),e(JI,Cgo),e(ws,wgo),e(k,Ago),e(k,As),e(As,uie),e(uie,Lgo),e(As,ygo),e(As,YI),e(YI,xgo),e(As,$go),e(As,KI),e(KI,kgo),e(As,Sgo),e(k,Rgo),e(k,Ls),e(Ls,bie),e(bie,Pgo),e(Ls,Bgo),e(Ls,ZI),e(ZI,Igo),e(Ls,Ngo),e(Ls,eN),e(eN,qgo),e(Ls,jgo),e(k,Dgo),e(k,ys),e(ys,vie),e(vie,Ggo),e(ys,Ogo),e(ys,oN),e(oN,Vgo),e(ys,Xgo),e(ys,rN),e(rN,zgo),e(ys,Qgo),e(k,Wgo),e(k,xs),e(xs,Fie),e(Fie,Hgo),e(xs,Ugo),e(xs,tN),e(tN,Jgo),e(xs,Ygo),e(xs,aN),e(aN,Kgo),e(xs,Zgo),e(k,eho),e(k,bh),e(bh,Tie),e(Tie,oho),e(bh,rho),e(bh,nN),e(nN,tho),e(bh,aho),e(k,nho),e(k,$s),e($s,Mie),e(Mie,sho),e($s,lho),e($s,sN),e(sN,iho),e($s,dho),e($s,lN),e(lN,cho),e($s,fho),e(k,mho),e(k,vh),e(vh,Eie),e(Eie,gho),e(vh,hho),e(vh,iN),e(iN,pho),e(vh,_ho),e(k,uho),e(k,Fh),e(Fh,Cie),e(Cie,bho),e(Fh,vho),e(Fh,dN),e(dN,Fho),e(Fh,Tho),e(k,Mho),e(k,Th),e(Th,wie),e(wie,Eho),e(Th,Cho),e(Th,cN),e(cN,who),e(Th,Aho),e(k,Lho),e(k,Mh),e(Mh,Aie),e(Aie,yho),e(Mh,xho),e(Mh,fN),e(fN,$ho),e(Mh,kho),e(k,Sho),e(k,ks),e(ks,Lie),e(Lie,Rho),e(ks,Pho),e(ks,mN),e(mN,Bho),e(ks,Iho),e(ks,gN),e(gN,Nho),e(ks,qho),e(k,jho),e(k,Eh),e(Eh,yie),e(yie,Dho),e(Eh,Gho),e(Eh,hN),e(hN,Oho),e(Eh,Vho),e(k,Xho),e(k,Ss),e(Ss,xie),e(xie,zho),e(Ss,Qho),e(Ss,pN),e(pN,Who),e(Ss,Hho),e(Ss,_N),e(_N,Uho),e(Ss,Jho),e(k,Yho),e(k,Rs),e(Rs,$ie),e($ie,Kho),e(Rs,Zho),e(Rs,uN),e(uN,epo),e(Rs,opo),e(Rs,bN),e(bN,rpo),e(Rs,tpo),e(k,apo),e(k,Ps),e(Ps,kie),e(kie,npo),e(Ps,spo),e(Ps,vN),e(vN,lpo),e(Ps,ipo),e(Ps,FN),e(FN,dpo),e(Ps,cpo),e(k,fpo),e(k,Bs),e(Bs,Sie),e(Sie,mpo),e(Bs,gpo),e(Bs,TN),e(TN,hpo),e(Bs,ppo),e(Bs,MN),e(MN,_po),e(Bs,upo),e(k,bpo),e(k,Is),e(Is,Rie),e(Rie,vpo),e(Is,Fpo),e(Is,EN),e(EN,Tpo),e(Is,Mpo),e(Is,CN),e(CN,Epo),e(Is,Cpo),e(k,wpo),e(k,Ns),e(Ns,Pie),e(Pie,Apo),e(Ns,Lpo),e(Ns,wN),e(wN,ypo),e(Ns,xpo),e(Ns,AN),e(AN,$po),e(Ns,kpo),e(k,Spo),e(k,Ch),e(Ch,Bie),e(Bie,Rpo),e(Ch,Ppo),e(Ch,LN),e(LN,Bpo),e(Ch,Ipo),e(k,Npo),e(k,wh),e(wh,Iie),e(Iie,qpo),e(wh,jpo),e(wh,yN),e(yN,Dpo),e(wh,Gpo),e(k,Opo),e(k,qs),e(qs,Nie),e(Nie,Vpo),e(qs,Xpo),e(qs,xN),e(xN,zpo),e(qs,Qpo),e(qs,$N),e($N,Wpo),e(qs,Hpo),e(k,Upo),e(k,js),e(js,qie),e(qie,Jpo),e(js,Ypo),e(js,kN),e(kN,Kpo),e(js,Zpo),e(js,SN),e(SN,e_o),e(js,o_o),e(k,r_o),e(k,Ds),e(Ds,jie),e(jie,t_o),e(Ds,a_o),e(Ds,RN),e(RN,n_o),e(Ds,s_o),e(Ds,PN),e(PN,l_o),e(Ds,i_o),e(k,d_o),e(k,Ah),e(Ah,Die),e(Die,c_o),e(Ah,f_o),e(Ah,BN),e(BN,m_o),e(Ah,g_o),e(k,h_o),e(k,Lh),e(Lh,Gie),e(Gie,p_o),e(Lh,__o),e(Lh,IN),e(IN,u_o),e(Lh,b_o),e(k,v_o),e(k,yh),e(yh,Oie),e(Oie,F_o),e(yh,T_o),e(yh,NN),e(NN,M_o),e(yh,E_o),e(k,C_o),e(k,Gs),e(Gs,Vie),e(Vie,w_o),e(Gs,A_o),e(Gs,qN),e(qN,L_o),e(Gs,y_o),e(Gs,jN),e(jN,x_o),e(Gs,$_o),e(k,k_o),e(k,Os),e(Os,Xie),e(Xie,S_o),e(Os,R_o),e(Os,DN),e(DN,P_o),e(Os,B_o),e(Os,GN),e(GN,I_o),e(Os,N_o),e(k,q_o),e(k,xh),e(xh,zie),e(zie,j_o),e(xh,D_o),e(xh,ON),e(ON,G_o),e(xh,O_o),e(k,V_o),e(k,$h),e($h,Qie),e(Qie,X_o),e($h,z_o),e($h,VN),e(VN,Q_o),e($h,W_o),e(k,H_o),e(k,kh),e(kh,Wie),e(Wie,U_o),e(kh,J_o),e(kh,XN),e(XN,Y_o),e(kh,K_o),e(k,Z_o),e(k,Vs),e(Vs,Hie),e(Hie,euo),e(Vs,ouo),e(Vs,zN),e(zN,ruo),e(Vs,tuo),e(Vs,QN),e(QN,auo),e(Vs,nuo),e(k,suo),e(k,Sh),e(Sh,Uie),e(Uie,luo),e(Sh,iuo),e(Sh,WN),e(WN,duo),e(Sh,cuo),e(k,fuo),e(k,Rh),e(Rh,Jie),e(Jie,muo),e(Rh,guo),e(Rh,HN),e(HN,huo),e(Rh,puo),e(k,_uo),e(k,Xs),e(Xs,Yie),e(Yie,uuo),e(Xs,buo),e(Xs,UN),e(UN,vuo),e(Xs,Fuo),e(Xs,JN),e(JN,Tuo),e(Xs,Muo),e(k,Euo),e(k,zs),e(zs,Kie),e(Kie,Cuo),e(zs,wuo),e(zs,YN),e(YN,Auo),e(zs,Luo),e(zs,KN),e(KN,yuo),e(zs,xuo),e(k,$uo),e(k,Qs),e(Qs,Zie),e(Zie,kuo),e(Qs,Suo),e(Qs,ZN),e(ZN,Ruo),e(Qs,Puo),e(Qs,eq),e(eq,Buo),e(Qs,Iuo),e(k,Nuo),e(k,Ws),e(Ws,ede),e(ede,quo),e(Ws,juo),e(Ws,oq),e(oq,Duo),e(Ws,Guo),e(Ws,rq),e(rq,Ouo),e(Ws,Vuo),e(xr,Xuo),M(Ph,xr,null),e(yo,zuo),e(yo,Bh),M(EL,Bh,null),e(Bh,Quo),e(Bh,ode),e(ode,Wuo),b(f,kXe,u),b(f,ji,u),e(ji,Ih),e(Ih,rde),M(CL,rde,null),e(ji,Huo),e(ji,tde),e(tde,Uuo),b(f,SXe,u),b(f,xo,u),M(wL,xo,null),e(xo,Juo),e(xo,AL),e(AL,Yuo),e(AL,tq),e(tq,Kuo),e(AL,Zuo),e(xo,e4o),e(xo,LL),e(LL,o4o),e(LL,ade),e(ade,r4o),e(LL,t4o),e(xo,a4o),e(xo,Ue),M(yL,Ue,null),e(Ue,n4o),e(Ue,nde),e(nde,s4o),e(Ue,l4o),e(Ue,Ba),e(Ba,i4o),e(Ba,sde),e(sde,d4o),e(Ba,c4o),e(Ba,lde),e(lde,f4o),e(Ba,m4o),e(Ba,ide),e(ide,g4o),e(Ba,h4o),e(Ue,p4o),e(Ue,Y),e(Y,Nh),e(Nh,dde),e(dde,_4o),e(Nh,u4o),e(Nh,aq),e(aq,b4o),e(Nh,v4o),e(Y,F4o),e(Y,qh),e(qh,cde),e(cde,T4o),e(qh,M4o),e(qh,nq),e(nq,E4o),e(qh,C4o),e(Y,w4o),e(Y,jh),e(jh,fde),e(fde,A4o),e(jh,L4o),e(jh,sq),e(sq,y4o),e(jh,x4o),e(Y,$4o),e(Y,Dh),e(Dh,mde),e(mde,k4o),e(Dh,S4o),e(Dh,lq),e(lq,R4o),e(Dh,P4o),e(Y,B4o),e(Y,Gh),e(Gh,gde),e(gde,I4o),e(Gh,N4o),e(Gh,iq),e(iq,q4o),e(Gh,j4o),e(Y,D4o),e(Y,Oh),e(Oh,hde),e(hde,G4o),e(Oh,O4o),e(Oh,dq),e(dq,V4o),e(Oh,X4o),e(Y,z4o),e(Y,Vh),e(Vh,pde),e(pde,Q4o),e(Vh,W4o),e(Vh,cq),e(cq,H4o),e(Vh,U4o),e(Y,J4o),e(Y,Xh),e(Xh,_de),e(_de,Y4o),e(Xh,K4o),e(Xh,fq),e(fq,Z4o),e(Xh,e2o),e(Y,o2o),e(Y,zh),e(zh,ude),e(ude,r2o),e(zh,t2o),e(zh,mq),e(mq,a2o),e(zh,n2o),e(Y,s2o),e(Y,Qh),e(Qh,bde),e(bde,l2o),e(Qh,i2o),e(Qh,gq),e(gq,d2o),e(Qh,c2o),e(Y,f2o),e(Y,Wh),e(Wh,vde),e(vde,m2o),e(Wh,g2o),e(Wh,hq),e(hq,h2o),e(Wh,p2o),e(Y,_2o),e(Y,Hh),e(Hh,Fde),e(Fde,u2o),e(Hh,b2o),e(Hh,pq),e(pq,v2o),e(Hh,F2o),e(Y,T2o),e(Y,Uh),e(Uh,Tde),e(Tde,M2o),e(Uh,E2o),e(Uh,_q),e(_q,C2o),e(Uh,w2o),e(Y,A2o),e(Y,Jh),e(Jh,Mde),e(Mde,L2o),e(Jh,y2o),e(Jh,uq),e(uq,x2o),e(Jh,$2o),e(Y,k2o),e(Y,Yh),e(Yh,Ede),e(Ede,S2o),e(Yh,R2o),e(Yh,bq),e(bq,P2o),e(Yh,B2o),e(Y,I2o),e(Y,Kh),e(Kh,Cde),e(Cde,N2o),e(Kh,q2o),e(Kh,vq),e(vq,j2o),e(Kh,D2o),e(Y,G2o),e(Y,Zh),e(Zh,wde),e(wde,O2o),e(Zh,V2o),e(Zh,Fq),e(Fq,X2o),e(Zh,z2o),e(Y,Q2o),e(Y,ep),e(ep,Ade),e(Ade,W2o),e(ep,H2o),e(ep,Tq),e(Tq,U2o),e(ep,J2o),e(Y,Y2o),e(Y,op),e(op,Lde),e(Lde,K2o),e(op,Z2o),e(op,Mq),e(Mq,e1o),e(op,o1o),e(Y,r1o),e(Y,rp),e(rp,yde),e(yde,t1o),e(rp,a1o),e(rp,Eq),e(Eq,n1o),e(rp,s1o),e(Y,l1o),e(Y,tp),e(tp,xde),e(xde,i1o),e(tp,d1o),e(tp,Cq),e(Cq,c1o),e(tp,f1o),e(Y,m1o),e(Y,ap),e(ap,$de),e($de,g1o),e(ap,h1o),e(ap,wq),e(wq,p1o),e(ap,_1o),e(Y,u1o),e(Y,np),e(np,kde),e(kde,b1o),e(np,v1o),e(np,Aq),e(Aq,F1o),e(np,T1o),e(Y,M1o),e(Y,sp),e(sp,Sde),e(Sde,E1o),e(sp,C1o),e(sp,Lq),e(Lq,w1o),e(sp,A1o),e(Y,L1o),e(Y,lp),e(lp,Rde),e(Rde,y1o),e(lp,x1o),e(lp,yq),e(yq,$1o),e(lp,k1o),e(Y,S1o),e(Y,ip),e(ip,Pde),e(Pde,R1o),e(ip,P1o),e(ip,xq),e(xq,B1o),e(ip,I1o),e(Y,N1o),e(Y,dp),e(dp,Bde),e(Bde,q1o),e(dp,j1o),e(dp,$q),e($q,D1o),e(dp,G1o),e(Y,O1o),e(Y,cp),e(cp,Ide),e(Ide,V1o),e(cp,X1o),e(cp,kq),e(kq,z1o),e(cp,Q1o),e(Y,W1o),e(Y,fp),e(fp,Nde),e(Nde,H1o),e(fp,U1o),e(fp,Sq),e(Sq,J1o),e(fp,Y1o),e(Y,K1o),e(Y,mp),e(mp,qde),e(qde,Z1o),e(mp,ebo),e(mp,Rq),e(Rq,obo),e(mp,rbo),e(Y,tbo),e(Y,gp),e(gp,jde),e(jde,abo),e(gp,nbo),e(gp,Pq),e(Pq,sbo),e(gp,lbo),e(Y,ibo),e(Y,hp),e(hp,Dde),e(Dde,dbo),e(hp,cbo),e(hp,Bq),e(Bq,fbo),e(hp,mbo),e(Y,gbo),e(Y,pp),e(pp,Gde),e(Gde,hbo),e(pp,pbo),e(pp,Iq),e(Iq,_bo),e(pp,ubo),e(Y,bbo),e(Y,_p),e(_p,Ode),e(Ode,vbo),e(_p,Fbo),e(_p,Nq),e(Nq,Tbo),e(_p,Mbo),e(Ue,Ebo),M(up,Ue,null),e(Ue,Cbo),M(bp,Ue,null),e(xo,wbo),e(xo,vp),M(xL,vp,null),e(vp,Abo),e(vp,Vde),e(Vde,Lbo),b(f,RXe,u),b(f,Di,u),e(Di,Fp),e(Fp,Xde),M($L,Xde,null),e(Di,ybo),e(Di,zde),e(zde,xbo),b(f,PXe,u),b(f,$o,u),M(kL,$o,null),e($o,$bo),e($o,SL),e(SL,kbo),e(SL,qq),e(qq,Sbo),e(SL,Rbo),e($o,Pbo),e($o,RL),e(RL,Bbo),e(RL,Qde),e(Qde,Ibo),e(RL,Nbo),e($o,qbo),e($o,Je),M(PL,Je,null),e(Je,jbo),e(Je,Wde),e(Wde,Dbo),e(Je,Gbo),e(Je,Gi),e(Gi,Obo),e(Gi,Hde),e(Hde,Vbo),e(Gi,Xbo),e(Gi,Ude),e(Ude,zbo),e(Gi,Qbo),e(Je,Wbo),e(Je,pe),e(pe,Tp),e(Tp,Jde),e(Jde,Hbo),e(Tp,Ubo),e(Tp,jq),e(jq,Jbo),e(Tp,Ybo),e(pe,Kbo),e(pe,Mp),e(Mp,Yde),e(Yde,Zbo),e(Mp,evo),e(Mp,Dq),e(Dq,ovo),e(Mp,rvo),e(pe,tvo),e(pe,Ep),e(Ep,Kde),e(Kde,avo),e(Ep,nvo),e(Ep,Gq),e(Gq,svo),e(Ep,lvo),e(pe,ivo),e(pe,Cp),e(Cp,Zde),e(Zde,dvo),e(Cp,cvo),e(Cp,Oq),e(Oq,fvo),e(Cp,mvo),e(pe,gvo),e(pe,wp),e(wp,ece),e(ece,hvo),e(wp,pvo),e(wp,Vq),e(Vq,_vo),e(wp,uvo),e(pe,bvo),e(pe,Ap),e(Ap,oce),e(oce,vvo),e(Ap,Fvo),e(Ap,Xq),e(Xq,Tvo),e(Ap,Mvo),e(pe,Evo),e(pe,Lp),e(Lp,rce),e(rce,Cvo),e(Lp,wvo),e(Lp,zq),e(zq,Avo),e(Lp,Lvo),e(pe,yvo),e(pe,yp),e(yp,tce),e(tce,xvo),e(yp,$vo),e(yp,Qq),e(Qq,kvo),e(yp,Svo),e(pe,Rvo),e(pe,xp),e(xp,ace),e(ace,Pvo),e(xp,Bvo),e(xp,Wq),e(Wq,Ivo),e(xp,Nvo),e(pe,qvo),e(pe,$p),e($p,nce),e(nce,jvo),e($p,Dvo),e($p,Hq),e(Hq,Gvo),e($p,Ovo),e(pe,Vvo),e(pe,kp),e(kp,sce),e(sce,Xvo),e(kp,zvo),e(kp,Uq),e(Uq,Qvo),e(kp,Wvo),e(pe,Hvo),e(pe,Sp),e(Sp,lce),e(lce,Uvo),e(Sp,Jvo),e(Sp,Jq),e(Jq,Yvo),e(Sp,Kvo),e(pe,Zvo),e(pe,Rp),e(Rp,ice),e(ice,eFo),e(Rp,oFo),e(Rp,Yq),e(Yq,rFo),e(Rp,tFo),e(pe,aFo),e(pe,Pp),e(Pp,dce),e(dce,nFo),e(Pp,sFo),e(Pp,Kq),e(Kq,lFo),e(Pp,iFo),e(pe,dFo),e(pe,Bp),e(Bp,cce),e(cce,cFo),e(Bp,fFo),e(Bp,Zq),e(Zq,mFo),e(Bp,gFo),e(pe,hFo),e(pe,Ip),e(Ip,fce),e(fce,pFo),e(Ip,_Fo),e(Ip,ej),e(ej,uFo),e(Ip,bFo),e(pe,vFo),e(pe,Np),e(Np,mce),e(mce,FFo),e(Np,TFo),e(Np,oj),e(oj,MFo),e(Np,EFo),e(pe,CFo),e(pe,qp),e(qp,gce),e(gce,wFo),e(qp,AFo),e(qp,rj),e(rj,LFo),e(qp,yFo),e(Je,xFo),M(jp,Je,null),e(Je,$Fo),M(Dp,Je,null),e($o,kFo),e($o,Gp),M(BL,Gp,null),e(Gp,SFo),e(Gp,hce),e(hce,RFo),b(f,BXe,u),b(f,Oi,u),e(Oi,Op),e(Op,pce),M(IL,pce,null),e(Oi,PFo),e(Oi,_ce),e(_ce,BFo),b(f,IXe,u),b(f,ko,u),M(NL,ko,null),e(ko,IFo),e(ko,Vi),e(Vi,NFo),e(Vi,tj),e(tj,qFo),e(Vi,jFo),e(Vi,aj),e(aj,DFo),e(Vi,GFo),e(ko,OFo),e(ko,qL),e(qL,VFo),e(qL,uce),e(uce,XFo),e(qL,zFo),e(ko,QFo),e(ko,it),M(jL,it,null),e(it,WFo),e(it,bce),e(bce,HFo),e(it,UFo),e(it,Xi),e(Xi,JFo),e(Xi,vce),e(vce,YFo),e(Xi,KFo),e(Xi,nj),e(nj,ZFo),e(Xi,eTo),e(it,oTo),M(Vp,it,null),e(ko,rTo),e(ko,Ye),M(DL,Ye,null),e(Ye,tTo),e(Ye,Fce),e(Fce,aTo),e(Ye,nTo),e(Ye,Ia),e(Ia,sTo),e(Ia,Tce),e(Tce,lTo),e(Ia,iTo),e(Ia,Mce),e(Mce,dTo),e(Ia,cTo),e(Ia,Ece),e(Ece,fTo),e(Ia,mTo),e(Ye,gTo),e(Ye,y),e(y,Xp),e(Xp,Cce),e(Cce,hTo),e(Xp,pTo),e(Xp,sj),e(sj,_To),e(Xp,uTo),e(y,bTo),e(y,zp),e(zp,wce),e(wce,vTo),e(zp,FTo),e(zp,lj),e(lj,TTo),e(zp,MTo),e(y,ETo),e(y,Qp),e(Qp,Ace),e(Ace,CTo),e(Qp,wTo),e(Qp,ij),e(ij,ATo),e(Qp,LTo),e(y,yTo),e(y,Wp),e(Wp,Lce),e(Lce,xTo),e(Wp,$To),e(Wp,dj),e(dj,kTo),e(Wp,STo),e(y,RTo),e(y,Hp),e(Hp,yce),e(yce,PTo),e(Hp,BTo),e(Hp,cj),e(cj,ITo),e(Hp,NTo),e(y,qTo),e(y,Up),e(Up,xce),e(xce,jTo),e(Up,DTo),e(Up,fj),e(fj,GTo),e(Up,OTo),e(y,VTo),e(y,Jp),e(Jp,$ce),e($ce,XTo),e(Jp,zTo),e(Jp,mj),e(mj,QTo),e(Jp,WTo),e(y,HTo),e(y,Yp),e(Yp,kce),e(kce,UTo),e(Yp,JTo),e(Yp,gj),e(gj,YTo),e(Yp,KTo),e(y,ZTo),e(y,Kp),e(Kp,Sce),e(Sce,e8o),e(Kp,o8o),e(Kp,hj),e(hj,r8o),e(Kp,t8o),e(y,a8o),e(y,Zp),e(Zp,Rce),e(Rce,n8o),e(Zp,s8o),e(Zp,pj),e(pj,l8o),e(Zp,i8o),e(y,d8o),e(y,e_),e(e_,Pce),e(Pce,c8o),e(e_,f8o),e(e_,_j),e(_j,m8o),e(e_,g8o),e(y,h8o),e(y,o_),e(o_,Bce),e(Bce,p8o),e(o_,_8o),e(o_,uj),e(uj,u8o),e(o_,b8o),e(y,v8o),e(y,r_),e(r_,Ice),e(Ice,F8o),e(r_,T8o),e(r_,bj),e(bj,M8o),e(r_,E8o),e(y,C8o),e(y,t_),e(t_,Nce),e(Nce,w8o),e(t_,A8o),e(t_,vj),e(vj,L8o),e(t_,y8o),e(y,x8o),e(y,a_),e(a_,qce),e(qce,$8o),e(a_,k8o),e(a_,Fj),e(Fj,S8o),e(a_,R8o),e(y,P8o),e(y,n_),e(n_,jce),e(jce,B8o),e(n_,I8o),e(n_,Tj),e(Tj,N8o),e(n_,q8o),e(y,j8o),e(y,s_),e(s_,Dce),e(Dce,D8o),e(s_,G8o),e(s_,Mj),e(Mj,O8o),e(s_,V8o),e(y,X8o),e(y,l_),e(l_,Gce),e(Gce,z8o),e(l_,Q8o),e(l_,Ej),e(Ej,W8o),e(l_,H8o),e(y,U8o),e(y,i_),e(i_,Oce),e(Oce,J8o),e(i_,Y8o),e(i_,Cj),e(Cj,K8o),e(i_,Z8o),e(y,eMo),e(y,d_),e(d_,Vce),e(Vce,oMo),e(d_,rMo),e(d_,wj),e(wj,tMo),e(d_,aMo),e(y,nMo),e(y,c_),e(c_,Xce),e(Xce,sMo),e(c_,lMo),e(c_,Aj),e(Aj,iMo),e(c_,dMo),e(y,cMo),e(y,f_),e(f_,zce),e(zce,fMo),e(f_,mMo),e(f_,Lj),e(Lj,gMo),e(f_,hMo),e(y,pMo),e(y,m_),e(m_,Qce),e(Qce,_Mo),e(m_,uMo),e(m_,yj),e(yj,bMo),e(m_,vMo),e(y,FMo),e(y,g_),e(g_,Wce),e(Wce,TMo),e(g_,MMo),e(g_,xj),e(xj,EMo),e(g_,CMo),e(y,wMo),e(y,h_),e(h_,Hce),e(Hce,AMo),e(h_,LMo),e(h_,$j),e($j,yMo),e(h_,xMo),e(y,$Mo),e(y,p_),e(p_,Uce),e(Uce,kMo),e(p_,SMo),e(p_,kj),e(kj,RMo),e(p_,PMo),e(y,BMo),e(y,__),e(__,Jce),e(Jce,IMo),e(__,NMo),e(__,Sj),e(Sj,qMo),e(__,jMo),e(y,DMo),e(y,u_),e(u_,Yce),e(Yce,GMo),e(u_,OMo),e(u_,Rj),e(Rj,VMo),e(u_,XMo),e(y,zMo),e(y,b_),e(b_,Kce),e(Kce,QMo),e(b_,WMo),e(b_,Pj),e(Pj,HMo),e(b_,UMo),e(y,JMo),e(y,v_),e(v_,Zce),e(Zce,YMo),e(v_,KMo),e(v_,Bj),e(Bj,ZMo),e(v_,eEo),e(y,oEo),e(y,F_),e(F_,efe),e(efe,rEo),e(F_,tEo),e(F_,Ij),e(Ij,aEo),e(F_,nEo),e(y,sEo),e(y,T_),e(T_,ofe),e(ofe,lEo),e(T_,iEo),e(T_,Nj),e(Nj,dEo),e(T_,cEo),e(y,fEo),e(y,M_),e(M_,rfe),e(rfe,mEo),e(M_,gEo),e(M_,qj),e(qj,hEo),e(M_,pEo),e(y,_Eo),e(y,E_),e(E_,tfe),e(tfe,uEo),e(E_,bEo),e(E_,jj),e(jj,vEo),e(E_,FEo),e(y,TEo),e(y,Hs),e(Hs,afe),e(afe,MEo),e(Hs,EEo),e(Hs,Dj),e(Dj,CEo),e(Hs,wEo),e(Hs,Gj),e(Gj,AEo),e(Hs,LEo),e(y,yEo),e(y,C_),e(C_,nfe),e(nfe,xEo),e(C_,$Eo),e(C_,Oj),e(Oj,kEo),e(C_,SEo),e(y,REo),e(y,w_),e(w_,sfe),e(sfe,PEo),e(w_,BEo),e(w_,Vj),e(Vj,IEo),e(w_,NEo),e(y,qEo),e(y,A_),e(A_,lfe),e(lfe,jEo),e(A_,DEo),e(A_,Xj),e(Xj,GEo),e(A_,OEo),e(y,VEo),e(y,L_),e(L_,ife),e(ife,XEo),e(L_,zEo),e(L_,zj),e(zj,QEo),e(L_,WEo),e(y,HEo),e(y,y_),e(y_,dfe),e(dfe,UEo),e(y_,JEo),e(y_,Qj),e(Qj,YEo),e(y_,KEo),e(y,ZEo),e(y,x_),e(x_,cfe),e(cfe,eCo),e(x_,oCo),e(x_,Wj),e(Wj,rCo),e(x_,tCo),e(y,aCo),e(y,$_),e($_,ffe),e(ffe,nCo),e($_,sCo),e($_,Hj),e(Hj,lCo),e($_,iCo),e(y,dCo),e(y,k_),e(k_,mfe),e(mfe,cCo),e(k_,fCo),e(k_,Uj),e(Uj,mCo),e(k_,gCo),e(y,hCo),e(y,S_),e(S_,gfe),e(gfe,pCo),e(S_,_Co),e(S_,Jj),e(Jj,uCo),e(S_,bCo),e(y,vCo),e(y,R_),e(R_,hfe),e(hfe,FCo),e(R_,TCo),e(R_,Yj),e(Yj,MCo),e(R_,ECo),e(y,CCo),e(y,P_),e(P_,pfe),e(pfe,wCo),e(P_,ACo),e(P_,Kj),e(Kj,LCo),e(P_,yCo),e(y,xCo),e(y,B_),e(B_,_fe),e(_fe,$Co),e(B_,kCo),e(B_,Zj),e(Zj,SCo),e(B_,RCo),e(y,PCo),e(y,I_),e(I_,ufe),e(ufe,BCo),e(I_,ICo),e(I_,eD),e(eD,NCo),e(I_,qCo),e(y,jCo),e(y,N_),e(N_,bfe),e(bfe,DCo),e(N_,GCo),e(N_,oD),e(oD,OCo),e(N_,VCo),e(y,XCo),e(y,q_),e(q_,vfe),e(vfe,zCo),e(q_,QCo),e(q_,rD),e(rD,WCo),e(q_,HCo),e(y,UCo),e(y,j_),e(j_,Ffe),e(Ffe,JCo),e(j_,YCo),e(j_,tD),e(tD,KCo),e(j_,ZCo),e(y,e3o),e(y,D_),e(D_,Tfe),e(Tfe,o3o),e(D_,r3o),e(D_,aD),e(aD,t3o),e(D_,a3o),e(y,n3o),e(y,G_),e(G_,Mfe),e(Mfe,s3o),e(G_,l3o),e(G_,nD),e(nD,i3o),e(G_,d3o),e(y,c3o),e(y,O_),e(O_,Efe),e(Efe,f3o),e(O_,m3o),e(O_,sD),e(sD,g3o),e(O_,h3o),e(y,p3o),e(y,V_),e(V_,Cfe),e(Cfe,_3o),e(V_,u3o),e(V_,lD),e(lD,b3o),e(V_,v3o),e(y,F3o),e(y,X_),e(X_,wfe),e(wfe,T3o),e(X_,M3o),e(X_,iD),e(iD,E3o),e(X_,C3o),e(y,w3o),e(y,z_),e(z_,Afe),e(Afe,A3o),e(z_,L3o),e(z_,dD),e(dD,y3o),e(z_,x3o),e(y,$3o),e(y,Q_),e(Q_,Lfe),e(Lfe,k3o),e(Q_,S3o),e(Q_,cD),e(cD,R3o),e(Q_,P3o),e(y,B3o),e(y,W_),e(W_,yfe),e(yfe,I3o),e(W_,N3o),e(W_,fD),e(fD,q3o),e(W_,j3o),e(y,D3o),e(y,H_),e(H_,xfe),e(xfe,G3o),e(H_,O3o),e(H_,mD),e(mD,V3o),e(H_,X3o),e(y,z3o),e(y,U_),e(U_,$fe),e($fe,Q3o),e(U_,W3o),e(U_,gD),e(gD,H3o),e(U_,U3o),e(y,J3o),e(y,J_),e(J_,kfe),e(kfe,Y3o),e(J_,K3o),e(J_,hD),e(hD,Z3o),e(J_,e5o),e(y,o5o),e(y,Y_),e(Y_,Sfe),e(Sfe,r5o),e(Y_,t5o),e(Y_,pD),e(pD,a5o),e(Y_,n5o),e(y,s5o),e(y,K_),e(K_,Rfe),e(Rfe,l5o),e(K_,i5o),e(K_,_D),e(_D,d5o),e(K_,c5o),e(y,f5o),e(y,Z_),e(Z_,Pfe),e(Pfe,m5o),e(Z_,g5o),e(Z_,uD),e(uD,h5o),e(Z_,p5o),e(y,_5o),e(y,eu),e(eu,Bfe),e(Bfe,u5o),e(eu,b5o),e(eu,bD),e(bD,v5o),e(eu,F5o),e(y,T5o),e(y,ou),e(ou,Ife),e(Ife,M5o),e(ou,E5o),e(ou,vD),e(vD,C5o),e(ou,w5o),e(y,A5o),e(y,ru),e(ru,Nfe),e(Nfe,L5o),e(ru,y5o),e(ru,FD),e(FD,x5o),e(ru,$5o),e(y,k5o),e(y,tu),e(tu,qfe),e(qfe,S5o),e(tu,R5o),e(tu,TD),e(TD,P5o),e(tu,B5o),e(y,I5o),e(y,au),e(au,jfe),e(jfe,N5o),e(au,q5o),e(au,MD),e(MD,j5o),e(au,D5o),e(y,G5o),e(y,nu),e(nu,Dfe),e(Dfe,O5o),e(nu,V5o),e(nu,ED),e(ED,X5o),e(nu,z5o),e(y,Q5o),e(y,su),e(su,Gfe),e(Gfe,W5o),e(su,H5o),e(su,CD),e(CD,U5o),e(su,J5o),e(y,Y5o),e(y,lu),e(lu,Ofe),e(Ofe,K5o),e(lu,Z5o),e(lu,wD),e(wD,e0o),e(lu,o0o),e(y,r0o),e(y,iu),e(iu,Vfe),e(Vfe,t0o),e(iu,a0o),e(iu,AD),e(AD,n0o),e(iu,s0o),e(y,l0o),e(y,du),e(du,Xfe),e(Xfe,i0o),e(du,d0o),e(du,LD),e(LD,c0o),e(du,f0o),e(y,m0o),e(y,cu),e(cu,zfe),e(zfe,g0o),e(cu,h0o),e(cu,yD),e(yD,p0o),e(cu,_0o),e(y,u0o),e(y,fu),e(fu,Qfe),e(Qfe,b0o),e(fu,v0o),e(fu,xD),e(xD,F0o),e(fu,T0o),e(y,M0o),e(y,mu),e(mu,Wfe),e(Wfe,E0o),e(mu,C0o),e(mu,$D),e($D,w0o),e(mu,A0o),e(y,L0o),e(y,gu),e(gu,Hfe),e(Hfe,y0o),e(gu,x0o),e(gu,kD),e(kD,$0o),e(gu,k0o),e(y,S0o),e(y,hu),e(hu,Ufe),e(Ufe,R0o),e(hu,P0o),e(hu,SD),e(SD,B0o),e(hu,I0o),e(y,N0o),e(y,pu),e(pu,Jfe),e(Jfe,q0o),e(pu,j0o),e(pu,RD),e(RD,D0o),e(pu,G0o),e(y,O0o),e(y,_u),e(_u,Yfe),e(Yfe,V0o),e(_u,X0o),e(_u,PD),e(PD,z0o),e(_u,Q0o),e(y,W0o),e(y,uu),e(uu,Kfe),e(Kfe,H0o),e(uu,U0o),e(uu,BD),e(BD,J0o),e(uu,Y0o),e(y,K0o),e(y,bu),e(bu,Zfe),e(Zfe,Z0o),e(bu,ewo),e(bu,ID),e(ID,owo),e(bu,rwo),e(y,two),e(y,vu),e(vu,eme),e(eme,awo),e(vu,nwo),e(vu,ND),e(ND,swo),e(vu,lwo),e(y,iwo),e(y,Fu),e(Fu,ome),e(ome,dwo),e(Fu,cwo),e(Fu,qD),e(qD,fwo),e(Fu,mwo),e(y,gwo),e(y,Tu),e(Tu,rme),e(rme,hwo),e(Tu,pwo),e(Tu,jD),e(jD,_wo),e(Tu,uwo),e(y,bwo),e(y,Mu),e(Mu,tme),e(tme,vwo),e(Mu,Fwo),e(Mu,DD),e(DD,Two),e(Mu,Mwo),e(y,Ewo),e(y,Eu),e(Eu,ame),e(ame,Cwo),e(Eu,wwo),e(Eu,GD),e(GD,Awo),e(Eu,Lwo),e(y,ywo),e(y,Cu),e(Cu,nme),e(nme,xwo),e(Cu,$wo),e(Cu,OD),e(OD,kwo),e(Cu,Swo),e(y,Rwo),e(y,wu),e(wu,sme),e(sme,Pwo),e(wu,Bwo),e(wu,VD),e(VD,Iwo),e(wu,Nwo),e(y,qwo),e(y,Au),e(Au,lme),e(lme,jwo),e(Au,Dwo),e(Au,XD),e(XD,Gwo),e(Au,Owo),e(y,Vwo),e(y,Lu),e(Lu,ime),e(ime,Xwo),e(Lu,zwo),e(Lu,zD),e(zD,Qwo),e(Lu,Wwo),e(y,Hwo),e(y,yu),e(yu,dme),e(dme,Uwo),e(yu,Jwo),e(yu,QD),e(QD,Ywo),e(yu,Kwo),e(y,Zwo),e(y,xu),e(xu,cme),e(cme,eAo),e(xu,oAo),e(xu,WD),e(WD,rAo),e(xu,tAo),e(y,aAo),e(y,$u),e($u,fme),e(fme,nAo),e($u,sAo),e($u,HD),e(HD,lAo),e($u,iAo),e(y,dAo),e(y,ku),e(ku,mme),e(mme,cAo),e(ku,fAo),e(ku,UD),e(UD,mAo),e(ku,gAo),e(y,hAo),e(y,Su),e(Su,gme),e(gme,pAo),e(Su,_Ao),e(Su,JD),e(JD,uAo),e(Su,bAo),e(y,vAo),e(y,Ru),e(Ru,hme),e(hme,FAo),e(Ru,TAo),e(Ru,YD),e(YD,MAo),e(Ru,EAo),e(y,CAo),e(y,Pu),e(Pu,pme),e(pme,wAo),e(Pu,AAo),e(Pu,KD),e(KD,LAo),e(Pu,yAo),e(y,xAo),e(y,Bu),e(Bu,_me),e(_me,$Ao),e(Bu,kAo),e(Bu,ZD),e(ZD,SAo),e(Bu,RAo),e(y,PAo),e(y,Iu),e(Iu,ume),e(ume,BAo),e(Iu,IAo),e(Iu,eG),e(eG,NAo),e(Iu,qAo),e(y,jAo),e(y,Nu),e(Nu,bme),e(bme,DAo),e(Nu,GAo),e(Nu,oG),e(oG,OAo),e(Nu,VAo),e(y,XAo),e(y,qu),e(qu,vme),e(vme,zAo),e(qu,QAo),e(qu,rG),e(rG,WAo),e(qu,HAo),e(y,UAo),e(y,ju),e(ju,Fme),e(Fme,JAo),e(ju,YAo),e(ju,tG),e(tG,KAo),e(ju,ZAo),e(y,e6o),e(y,Du),e(Du,Tme),e(Tme,o6o),e(Du,r6o),e(Du,aG),e(aG,t6o),e(Du,a6o),e(y,n6o),e(y,Gu),e(Gu,Mme),e(Mme,s6o),e(Gu,l6o),e(Gu,nG),e(nG,i6o),e(Gu,d6o),e(y,c6o),e(y,Ou),e(Ou,Eme),e(Eme,f6o),e(Ou,m6o),e(Ou,sG),e(sG,g6o),e(Ou,h6o),e(y,p6o),e(y,Vu),e(Vu,Cme),e(Cme,_6o),e(Vu,u6o),e(Vu,lG),e(lG,b6o),e(Vu,v6o),e(y,F6o),e(y,Xu),e(Xu,wme),e(wme,T6o),e(Xu,M6o),e(Xu,iG),e(iG,E6o),e(Xu,C6o),e(y,w6o),e(y,zu),e(zu,Ame),e(Ame,A6o),e(zu,L6o),e(zu,dG),e(dG,y6o),e(zu,x6o),e(y,$6o),e(y,Qu),e(Qu,Lme),e(Lme,k6o),e(Qu,S6o),e(Qu,cG),e(cG,R6o),e(Qu,P6o),e(Ye,B6o),e(Ye,Wu),e(Wu,I6o),e(Wu,yme),e(yme,N6o),e(Wu,q6o),e(Wu,xme),e(xme,j6o),e(Ye,D6o),M(Hu,Ye,null),b(f,NXe,u),b(f,zi,u),e(zi,Uu),e(Uu,$me),M(GL,$me,null),e(zi,G6o),e(zi,kme),e(kme,O6o),b(f,qXe,u),b(f,So,u),M(OL,So,null),e(So,V6o),e(So,Qi),e(Qi,X6o),e(Qi,fG),e(fG,z6o),e(Qi,Q6o),e(Qi,mG),e(mG,W6o),e(Qi,H6o),e(So,U6o),e(So,VL),e(VL,J6o),e(VL,Sme),e(Sme,Y6o),e(VL,K6o),e(So,Z6o),e(So,dt),M(XL,dt,null),e(dt,e7o),e(dt,Rme),e(Rme,o7o),e(dt,r7o),e(dt,Wi),e(Wi,t7o),e(Wi,Pme),e(Pme,a7o),e(Wi,n7o),e(Wi,gG),e(gG,s7o),e(Wi,l7o),e(dt,i7o),M(Ju,dt,null),e(So,d7o),e(So,Ke),M(zL,Ke,null),e(Ke,c7o),e(Ke,Bme),e(Bme,f7o),e(Ke,m7o),e(Ke,Na),e(Na,g7o),e(Na,Ime),e(Ime,h7o),e(Na,p7o),e(Na,Nme),e(Nme,_7o),e(Na,u7o),e(Na,qme),e(qme,b7o),e(Na,v7o),e(Ke,F7o),e(Ke,G),e(G,Yu),e(Yu,jme),e(jme,T7o),e(Yu,M7o),e(Yu,hG),e(hG,E7o),e(Yu,C7o),e(G,w7o),e(G,Ku),e(Ku,Dme),e(Dme,A7o),e(Ku,L7o),e(Ku,pG),e(pG,y7o),e(Ku,x7o),e(G,$7o),e(G,Zu),e(Zu,Gme),e(Gme,k7o),e(Zu,S7o),e(Zu,_G),e(_G,R7o),e(Zu,P7o),e(G,B7o),e(G,e4),e(e4,Ome),e(Ome,I7o),e(e4,N7o),e(e4,uG),e(uG,q7o),e(e4,j7o),e(G,D7o),e(G,o4),e(o4,Vme),e(Vme,G7o),e(o4,O7o),e(o4,bG),e(bG,V7o),e(o4,X7o),e(G,z7o),e(G,r4),e(r4,Xme),e(Xme,Q7o),e(r4,W7o),e(r4,vG),e(vG,H7o),e(r4,U7o),e(G,J7o),e(G,t4),e(t4,zme),e(zme,Y7o),e(t4,K7o),e(t4,FG),e(FG,Z7o),e(t4,eLo),e(G,oLo),e(G,a4),e(a4,Qme),e(Qme,rLo),e(a4,tLo),e(a4,TG),e(TG,aLo),e(a4,nLo),e(G,sLo),e(G,n4),e(n4,Wme),e(Wme,lLo),e(n4,iLo),e(n4,MG),e(MG,dLo),e(n4,cLo),e(G,fLo),e(G,s4),e(s4,Hme),e(Hme,mLo),e(s4,gLo),e(s4,EG),e(EG,hLo),e(s4,pLo),e(G,_Lo),e(G,l4),e(l4,Ume),e(Ume,uLo),e(l4,bLo),e(l4,CG),e(CG,vLo),e(l4,FLo),e(G,TLo),e(G,i4),e(i4,Jme),e(Jme,MLo),e(i4,ELo),e(i4,wG),e(wG,CLo),e(i4,wLo),e(G,ALo),e(G,d4),e(d4,Yme),e(Yme,LLo),e(d4,yLo),e(d4,AG),e(AG,xLo),e(d4,$Lo),e(G,kLo),e(G,c4),e(c4,Kme),e(Kme,SLo),e(c4,RLo),e(c4,LG),e(LG,PLo),e(c4,BLo),e(G,ILo),e(G,f4),e(f4,Zme),e(Zme,NLo),e(f4,qLo),e(f4,yG),e(yG,jLo),e(f4,DLo),e(G,GLo),e(G,m4),e(m4,ege),e(ege,OLo),e(m4,VLo),e(m4,xG),e(xG,XLo),e(m4,zLo),e(G,QLo),e(G,g4),e(g4,oge),e(oge,WLo),e(g4,HLo),e(g4,$G),e($G,ULo),e(g4,JLo),e(G,YLo),e(G,h4),e(h4,rge),e(rge,KLo),e(h4,ZLo),e(h4,kG),e(kG,eyo),e(h4,oyo),e(G,ryo),e(G,p4),e(p4,tge),e(tge,tyo),e(p4,ayo),e(p4,SG),e(SG,nyo),e(p4,syo),e(G,lyo),e(G,_4),e(_4,age),e(age,iyo),e(_4,dyo),e(_4,RG),e(RG,cyo),e(_4,fyo),e(G,myo),e(G,u4),e(u4,nge),e(nge,gyo),e(u4,hyo),e(u4,PG),e(PG,pyo),e(u4,_yo),e(G,uyo),e(G,b4),e(b4,sge),e(sge,byo),e(b4,vyo),e(b4,BG),e(BG,Fyo),e(b4,Tyo),e(G,Myo),e(G,v4),e(v4,lge),e(lge,Eyo),e(v4,Cyo),e(v4,IG),e(IG,wyo),e(v4,Ayo),e(G,Lyo),e(G,F4),e(F4,ige),e(ige,yyo),e(F4,xyo),e(F4,NG),e(NG,$yo),e(F4,kyo),e(G,Syo),e(G,T4),e(T4,dge),e(dge,Ryo),e(T4,Pyo),e(T4,qG),e(qG,Byo),e(T4,Iyo),e(G,Nyo),e(G,M4),e(M4,cge),e(cge,qyo),e(M4,jyo),e(M4,jG),e(jG,Dyo),e(M4,Gyo),e(G,Oyo),e(G,E4),e(E4,fge),e(fge,Vyo),e(E4,Xyo),e(E4,DG),e(DG,zyo),e(E4,Qyo),e(G,Wyo),e(G,C4),e(C4,mge),e(mge,Hyo),e(C4,Uyo),e(C4,GG),e(GG,Jyo),e(C4,Yyo),e(G,Kyo),e(G,w4),e(w4,gge),e(gge,Zyo),e(w4,e9o),e(w4,OG),e(OG,o9o),e(w4,r9o),e(G,t9o),e(G,A4),e(A4,hge),e(hge,a9o),e(A4,n9o),e(A4,VG),e(VG,s9o),e(A4,l9o),e(G,i9o),e(G,L4),e(L4,pge),e(pge,d9o),e(L4,c9o),e(L4,XG),e(XG,f9o),e(L4,m9o),e(G,g9o),e(G,y4),e(y4,_ge),e(_ge,h9o),e(y4,p9o),e(y4,zG),e(zG,_9o),e(y4,u9o),e(G,b9o),e(G,x4),e(x4,uge),e(uge,v9o),e(x4,F9o),e(x4,QG),e(QG,T9o),e(x4,M9o),e(G,E9o),e(G,$4),e($4,bge),e(bge,C9o),e($4,w9o),e($4,WG),e(WG,A9o),e($4,L9o),e(G,y9o),e(G,k4),e(k4,vge),e(vge,x9o),e(k4,$9o),e(k4,HG),e(HG,k9o),e(k4,S9o),e(G,R9o),e(G,S4),e(S4,Fge),e(Fge,P9o),e(S4,B9o),e(S4,UG),e(UG,I9o),e(S4,N9o),e(G,q9o),e(G,R4),e(R4,Tge),e(Tge,j9o),e(R4,D9o),e(R4,JG),e(JG,G9o),e(R4,O9o),e(G,V9o),e(G,P4),e(P4,Mge),e(Mge,X9o),e(P4,z9o),e(P4,YG),e(YG,Q9o),e(P4,W9o),e(G,H9o),e(G,B4),e(B4,Ege),e(Ege,U9o),e(B4,J9o),e(B4,KG),e(KG,Y9o),e(B4,K9o),e(G,Z9o),e(G,I4),e(I4,Cge),e(Cge,exo),e(I4,oxo),e(I4,ZG),e(ZG,rxo),e(I4,txo),e(G,axo),e(G,N4),e(N4,wge),e(wge,nxo),e(N4,sxo),e(N4,eO),e(eO,lxo),e(N4,ixo),e(G,dxo),e(G,q4),e(q4,Age),e(Age,cxo),e(q4,fxo),e(q4,oO),e(oO,mxo),e(q4,gxo),e(G,hxo),e(G,j4),e(j4,Lge),e(Lge,pxo),e(j4,_xo),e(j4,rO),e(rO,uxo),e(j4,bxo),e(G,vxo),e(G,D4),e(D4,yge),e(yge,Fxo),e(D4,Txo),e(D4,tO),e(tO,Mxo),e(D4,Exo),e(G,Cxo),e(G,G4),e(G4,xge),e(xge,wxo),e(G4,Axo),e(G4,aO),e(aO,Lxo),e(G4,yxo),e(Ke,xxo),e(Ke,O4),e(O4,$xo),e(O4,$ge),e($ge,kxo),e(O4,Sxo),e(O4,kge),e(kge,Rxo),e(Ke,Pxo),M(V4,Ke,null),b(f,jXe,u),b(f,Hi,u),e(Hi,X4),e(X4,Sge),M(QL,Sge,null),e(Hi,Bxo),e(Hi,Rge),e(Rge,Ixo),b(f,DXe,u),b(f,Ro,u),M(WL,Ro,null),e(Ro,Nxo),e(Ro,Ui),e(Ui,qxo),e(Ui,nO),e(nO,jxo),e(Ui,Dxo),e(Ui,sO),e(sO,Gxo),e(Ui,Oxo),e(Ro,Vxo),e(Ro,HL),e(HL,Xxo),e(HL,Pge),e(Pge,zxo),e(HL,Qxo),e(Ro,Wxo),e(Ro,ct),M(UL,ct,null),e(ct,Hxo),e(ct,Bge),e(Bge,Uxo),e(ct,Jxo),e(ct,Ji),e(Ji,Yxo),e(Ji,Ige),e(Ige,Kxo),e(Ji,Zxo),e(Ji,lO),e(lO,e$o),e(Ji,o$o),e(ct,r$o),M(z4,ct,null),e(Ro,t$o),e(Ro,Ze),M(JL,Ze,null),e(Ze,a$o),e(Ze,Nge),e(Nge,n$o),e(Ze,s$o),e(Ze,qa),e(qa,l$o),e(qa,qge),e(qge,i$o),e(qa,d$o),e(qa,jge),e(jge,c$o),e(qa,f$o),e(qa,Dge),e(Dge,m$o),e(qa,g$o),e(Ze,h$o),e(Ze,z),e(z,Q4),e(Q4,Gge),e(Gge,p$o),e(Q4,_$o),e(Q4,iO),e(iO,u$o),e(Q4,b$o),e(z,v$o),e(z,W4),e(W4,Oge),e(Oge,F$o),e(W4,T$o),e(W4,dO),e(dO,M$o),e(W4,E$o),e(z,C$o),e(z,H4),e(H4,Vge),e(Vge,w$o),e(H4,A$o),e(H4,cO),e(cO,L$o),e(H4,y$o),e(z,x$o),e(z,U4),e(U4,Xge),e(Xge,$$o),e(U4,k$o),e(U4,fO),e(fO,S$o),e(U4,R$o),e(z,P$o),e(z,J4),e(J4,zge),e(zge,B$o),e(J4,I$o),e(J4,mO),e(mO,N$o),e(J4,q$o),e(z,j$o),e(z,Y4),e(Y4,Qge),e(Qge,D$o),e(Y4,G$o),e(Y4,gO),e(gO,O$o),e(Y4,V$o),e(z,X$o),e(z,K4),e(K4,Wge),e(Wge,z$o),e(K4,Q$o),e(K4,hO),e(hO,W$o),e(K4,H$o),e(z,U$o),e(z,Z4),e(Z4,Hge),e(Hge,J$o),e(Z4,Y$o),e(Z4,pO),e(pO,K$o),e(Z4,Z$o),e(z,eko),e(z,e2),e(e2,Uge),e(Uge,oko),e(e2,rko),e(e2,_O),e(_O,tko),e(e2,ako),e(z,nko),e(z,o2),e(o2,Jge),e(Jge,sko),e(o2,lko),e(o2,uO),e(uO,iko),e(o2,dko),e(z,cko),e(z,r2),e(r2,Yge),e(Yge,fko),e(r2,mko),e(r2,bO),e(bO,gko),e(r2,hko),e(z,pko),e(z,t2),e(t2,Kge),e(Kge,_ko),e(t2,uko),e(t2,vO),e(vO,bko),e(t2,vko),e(z,Fko),e(z,a2),e(a2,Zge),e(Zge,Tko),e(a2,Mko),e(a2,FO),e(FO,Eko),e(a2,Cko),e(z,wko),e(z,n2),e(n2,ehe),e(ehe,Ako),e(n2,Lko),e(n2,TO),e(TO,yko),e(n2,xko),e(z,$ko),e(z,s2),e(s2,ohe),e(ohe,kko),e(s2,Sko),e(s2,MO),e(MO,Rko),e(s2,Pko),e(z,Bko),e(z,l2),e(l2,rhe),e(rhe,Iko),e(l2,Nko),e(l2,EO),e(EO,qko),e(l2,jko),e(z,Dko),e(z,i2),e(i2,the),e(the,Gko),e(i2,Oko),e(i2,CO),e(CO,Vko),e(i2,Xko),e(z,zko),e(z,d2),e(d2,ahe),e(ahe,Qko),e(d2,Wko),e(d2,wO),e(wO,Hko),e(d2,Uko),e(z,Jko),e(z,c2),e(c2,nhe),e(nhe,Yko),e(c2,Kko),e(c2,AO),e(AO,Zko),e(c2,eSo),e(z,oSo),e(z,f2),e(f2,she),e(she,rSo),e(f2,tSo),e(f2,LO),e(LO,aSo),e(f2,nSo),e(z,sSo),e(z,m2),e(m2,lhe),e(lhe,lSo),e(m2,iSo),e(m2,yO),e(yO,dSo),e(m2,cSo),e(z,fSo),e(z,g2),e(g2,ihe),e(ihe,mSo),e(g2,gSo),e(g2,xO),e(xO,hSo),e(g2,pSo),e(z,_So),e(z,h2),e(h2,dhe),e(dhe,uSo),e(h2,bSo),e(h2,$O),e($O,vSo),e(h2,FSo),e(z,TSo),e(z,p2),e(p2,che),e(che,MSo),e(p2,ESo),e(p2,kO),e(kO,CSo),e(p2,wSo),e(z,ASo),e(z,_2),e(_2,fhe),e(fhe,LSo),e(_2,ySo),e(_2,SO),e(SO,xSo),e(_2,$So),e(z,kSo),e(z,u2),e(u2,mhe),e(mhe,SSo),e(u2,RSo),e(u2,RO),e(RO,PSo),e(u2,BSo),e(z,ISo),e(z,b2),e(b2,ghe),e(ghe,NSo),e(b2,qSo),e(b2,PO),e(PO,jSo),e(b2,DSo),e(z,GSo),e(z,v2),e(v2,hhe),e(hhe,OSo),e(v2,VSo),e(v2,BO),e(BO,XSo),e(v2,zSo),e(z,QSo),e(z,F2),e(F2,phe),e(phe,WSo),e(F2,HSo),e(F2,IO),e(IO,USo),e(F2,JSo),e(z,YSo),e(z,T2),e(T2,_he),e(_he,KSo),e(T2,ZSo),e(T2,NO),e(NO,eRo),e(T2,oRo),e(z,rRo),e(z,M2),e(M2,uhe),e(uhe,tRo),e(M2,aRo),e(M2,qO),e(qO,nRo),e(M2,sRo),e(z,lRo),e(z,E2),e(E2,bhe),e(bhe,iRo),e(E2,dRo),e(E2,jO),e(jO,cRo),e(E2,fRo),e(z,mRo),e(z,C2),e(C2,vhe),e(vhe,gRo),e(C2,hRo),e(C2,DO),e(DO,pRo),e(C2,_Ro),e(z,uRo),e(z,w2),e(w2,Fhe),e(Fhe,bRo),e(w2,vRo),e(w2,GO),e(GO,FRo),e(w2,TRo),e(z,MRo),e(z,A2),e(A2,The),e(The,ERo),e(A2,CRo),e(A2,OO),e(OO,wRo),e(A2,ARo),e(z,LRo),e(z,L2),e(L2,Mhe),e(Mhe,yRo),e(L2,xRo),e(L2,VO),e(VO,$Ro),e(L2,kRo),e(z,SRo),e(z,y2),e(y2,Ehe),e(Ehe,RRo),e(y2,PRo),e(y2,XO),e(XO,BRo),e(y2,IRo),e(z,NRo),e(z,x2),e(x2,Che),e(Che,qRo),e(x2,jRo),e(x2,zO),e(zO,DRo),e(x2,GRo),e(z,ORo),e(z,$2),e($2,whe),e(whe,VRo),e($2,XRo),e($2,QO),e(QO,zRo),e($2,QRo),e(z,WRo),e(z,k2),e(k2,Ahe),e(Ahe,HRo),e(k2,URo),e(k2,WO),e(WO,JRo),e(k2,YRo),e(Ze,KRo),e(Ze,S2),e(S2,ZRo),e(S2,Lhe),e(Lhe,ePo),e(S2,oPo),e(S2,yhe),e(yhe,rPo),e(Ze,tPo),M(R2,Ze,null),b(f,GXe,u),b(f,Yi,u),e(Yi,P2),e(P2,xhe),M(YL,xhe,null),e(Yi,aPo),e(Yi,$he),e($he,nPo),b(f,OXe,u),b(f,Po,u),M(KL,Po,null),e(Po,sPo),e(Po,Ki),e(Ki,lPo),e(Ki,HO),e(HO,iPo),e(Ki,dPo),e(Ki,UO),e(UO,cPo),e(Ki,fPo),e(Po,mPo),e(Po,ZL),e(ZL,gPo),e(ZL,khe),e(khe,hPo),e(ZL,pPo),e(Po,_Po),e(Po,ft),M(ey,ft,null),e(ft,uPo),e(ft,She),e(She,bPo),e(ft,vPo),e(ft,Zi),e(Zi,FPo),e(Zi,Rhe),e(Rhe,TPo),e(Zi,MPo),e(Zi,JO),e(JO,EPo),e(Zi,CPo),e(ft,wPo),M(B2,ft,null),e(Po,APo),e(Po,eo),M(oy,eo,null),e(eo,LPo),e(eo,Phe),e(Phe,yPo),e(eo,xPo),e(eo,ja),e(ja,$Po),e(ja,Bhe),e(Bhe,kPo),e(ja,SPo),e(ja,Ihe),e(Ihe,RPo),e(ja,PPo),e(ja,Nhe),e(Nhe,BPo),e(ja,IPo),e(eo,NPo),e(eo,W),e(W,I2),e(I2,qhe),e(qhe,qPo),e(I2,jPo),e(I2,YO),e(YO,DPo),e(I2,GPo),e(W,OPo),e(W,N2),e(N2,jhe),e(jhe,VPo),e(N2,XPo),e(N2,KO),e(KO,zPo),e(N2,QPo),e(W,WPo),e(W,q2),e(q2,Dhe),e(Dhe,HPo),e(q2,UPo),e(q2,ZO),e(ZO,JPo),e(q2,YPo),e(W,KPo),e(W,j2),e(j2,Ghe),e(Ghe,ZPo),e(j2,eBo),e(j2,eV),e(eV,oBo),e(j2,rBo),e(W,tBo),e(W,D2),e(D2,Ohe),e(Ohe,aBo),e(D2,nBo),e(D2,oV),e(oV,sBo),e(D2,lBo),e(W,iBo),e(W,G2),e(G2,Vhe),e(Vhe,dBo),e(G2,cBo),e(G2,rV),e(rV,fBo),e(G2,mBo),e(W,gBo),e(W,O2),e(O2,Xhe),e(Xhe,hBo),e(O2,pBo),e(O2,tV),e(tV,_Bo),e(O2,uBo),e(W,bBo),e(W,V2),e(V2,zhe),e(zhe,vBo),e(V2,FBo),e(V2,aV),e(aV,TBo),e(V2,MBo),e(W,EBo),e(W,X2),e(X2,Qhe),e(Qhe,CBo),e(X2,wBo),e(X2,nV),e(nV,ABo),e(X2,LBo),e(W,yBo),e(W,z2),e(z2,Whe),e(Whe,xBo),e(z2,$Bo),e(z2,sV),e(sV,kBo),e(z2,SBo),e(W,RBo),e(W,Q2),e(Q2,Hhe),e(Hhe,PBo),e(Q2,BBo),e(Q2,lV),e(lV,IBo),e(Q2,NBo),e(W,qBo),e(W,W2),e(W2,Uhe),e(Uhe,jBo),e(W2,DBo),e(W2,iV),e(iV,GBo),e(W2,OBo),e(W,VBo),e(W,H2),e(H2,Jhe),e(Jhe,XBo),e(H2,zBo),e(H2,dV),e(dV,QBo),e(H2,WBo),e(W,HBo),e(W,U2),e(U2,Yhe),e(Yhe,UBo),e(U2,JBo),e(U2,cV),e(cV,YBo),e(U2,KBo),e(W,ZBo),e(W,J2),e(J2,Khe),e(Khe,eIo),e(J2,oIo),e(J2,fV),e(fV,rIo),e(J2,tIo),e(W,aIo),e(W,Y2),e(Y2,Zhe),e(Zhe,nIo),e(Y2,sIo),e(Y2,mV),e(mV,lIo),e(Y2,iIo),e(W,dIo),e(W,K2),e(K2,epe),e(epe,cIo),e(K2,fIo),e(K2,gV),e(gV,mIo),e(K2,gIo),e(W,hIo),e(W,Z2),e(Z2,ope),e(ope,pIo),e(Z2,_Io),e(Z2,hV),e(hV,uIo),e(Z2,bIo),e(W,vIo),e(W,e1),e(e1,rpe),e(rpe,FIo),e(e1,TIo),e(e1,pV),e(pV,MIo),e(e1,EIo),e(W,CIo),e(W,o1),e(o1,tpe),e(tpe,wIo),e(o1,AIo),e(o1,_V),e(_V,LIo),e(o1,yIo),e(W,xIo),e(W,r1),e(r1,ape),e(ape,$Io),e(r1,kIo),e(r1,uV),e(uV,SIo),e(r1,RIo),e(W,PIo),e(W,t1),e(t1,npe),e(npe,BIo),e(t1,IIo),e(t1,bV),e(bV,NIo),e(t1,qIo),e(W,jIo),e(W,a1),e(a1,spe),e(spe,DIo),e(a1,GIo),e(a1,vV),e(vV,OIo),e(a1,VIo),e(W,XIo),e(W,n1),e(n1,lpe),e(lpe,zIo),e(n1,QIo),e(n1,FV),e(FV,WIo),e(n1,HIo),e(W,UIo),e(W,s1),e(s1,ipe),e(ipe,JIo),e(s1,YIo),e(s1,TV),e(TV,KIo),e(s1,ZIo),e(W,eNo),e(W,l1),e(l1,dpe),e(dpe,oNo),e(l1,rNo),e(l1,MV),e(MV,tNo),e(l1,aNo),e(W,nNo),e(W,i1),e(i1,cpe),e(cpe,sNo),e(i1,lNo),e(i1,EV),e(EV,iNo),e(i1,dNo),e(W,cNo),e(W,d1),e(d1,fpe),e(fpe,fNo),e(d1,mNo),e(d1,CV),e(CV,gNo),e(d1,hNo),e(W,pNo),e(W,c1),e(c1,mpe),e(mpe,_No),e(c1,uNo),e(c1,wV),e(wV,bNo),e(c1,vNo),e(W,FNo),e(W,f1),e(f1,gpe),e(gpe,TNo),e(f1,MNo),e(f1,AV),e(AV,ENo),e(f1,CNo),e(W,wNo),e(W,m1),e(m1,hpe),e(hpe,ANo),e(m1,LNo),e(m1,LV),e(LV,yNo),e(m1,xNo),e(W,$No),e(W,g1),e(g1,ppe),e(ppe,kNo),e(g1,SNo),e(g1,yV),e(yV,RNo),e(g1,PNo),e(W,BNo),e(W,h1),e(h1,_pe),e(_pe,INo),e(h1,NNo),e(h1,xV),e(xV,qNo),e(h1,jNo),e(W,DNo),e(W,p1),e(p1,upe),e(upe,GNo),e(p1,ONo),e(p1,bpe),e(bpe,VNo),e(p1,XNo),e(W,zNo),e(W,_1),e(_1,vpe),e(vpe,QNo),e(_1,WNo),e(_1,$V),e($V,HNo),e(_1,UNo),e(W,JNo),e(W,u1),e(u1,Fpe),e(Fpe,YNo),e(u1,KNo),e(u1,kV),e(kV,ZNo),e(u1,eqo),e(W,oqo),e(W,b1),e(b1,Tpe),e(Tpe,rqo),e(b1,tqo),e(b1,SV),e(SV,aqo),e(b1,nqo),e(W,sqo),e(W,v1),e(v1,Mpe),e(Mpe,lqo),e(v1,iqo),e(v1,RV),e(RV,dqo),e(v1,cqo),e(eo,fqo),e(eo,F1),e(F1,mqo),e(F1,Epe),e(Epe,gqo),e(F1,hqo),e(F1,Cpe),e(Cpe,pqo),e(eo,_qo),M(T1,eo,null),b(f,VXe,u),b(f,ed,u),e(ed,M1),e(M1,wpe),M(ry,wpe,null),e(ed,uqo),e(ed,Ape),e(Ape,bqo),b(f,XXe,u),b(f,Bo,u),M(ty,Bo,null),e(Bo,vqo),e(Bo,od),e(od,Fqo),e(od,PV),e(PV,Tqo),e(od,Mqo),e(od,BV),e(BV,Eqo),e(od,Cqo),e(Bo,wqo),e(Bo,ay),e(ay,Aqo),e(ay,Lpe),e(Lpe,Lqo),e(ay,yqo),e(Bo,xqo),e(Bo,mt),M(ny,mt,null),e(mt,$qo),e(mt,ype),e(ype,kqo),e(mt,Sqo),e(mt,rd),e(rd,Rqo),e(rd,xpe),e(xpe,Pqo),e(rd,Bqo),e(rd,IV),e(IV,Iqo),e(rd,Nqo),e(mt,qqo),M(E1,mt,null),e(Bo,jqo),e(Bo,oo),M(sy,oo,null),e(oo,Dqo),e(oo,$pe),e($pe,Gqo),e(oo,Oqo),e(oo,Da),e(Da,Vqo),e(Da,kpe),e(kpe,Xqo),e(Da,zqo),e(Da,Spe),e(Spe,Qqo),e(Da,Wqo),e(Da,Rpe),e(Rpe,Hqo),e(Da,Uqo),e(oo,Jqo),e(oo,fe),e(fe,C1),e(C1,Ppe),e(Ppe,Yqo),e(C1,Kqo),e(C1,NV),e(NV,Zqo),e(C1,ejo),e(fe,ojo),e(fe,w1),e(w1,Bpe),e(Bpe,rjo),e(w1,tjo),e(w1,qV),e(qV,ajo),e(w1,njo),e(fe,sjo),e(fe,A1),e(A1,Ipe),e(Ipe,ljo),e(A1,ijo),e(A1,jV),e(jV,djo),e(A1,cjo),e(fe,fjo),e(fe,L1),e(L1,Npe),e(Npe,mjo),e(L1,gjo),e(L1,DV),e(DV,hjo),e(L1,pjo),e(fe,_jo),e(fe,y1),e(y1,qpe),e(qpe,ujo),e(y1,bjo),e(y1,GV),e(GV,vjo),e(y1,Fjo),e(fe,Tjo),e(fe,x1),e(x1,jpe),e(jpe,Mjo),e(x1,Ejo),e(x1,OV),e(OV,Cjo),e(x1,wjo),e(fe,Ajo),e(fe,$1),e($1,Dpe),e(Dpe,Ljo),e($1,yjo),e($1,VV),e(VV,xjo),e($1,$jo),e(fe,kjo),e(fe,k1),e(k1,Gpe),e(Gpe,Sjo),e(k1,Rjo),e(k1,XV),e(XV,Pjo),e(k1,Bjo),e(fe,Ijo),e(fe,S1),e(S1,Ope),e(Ope,Njo),e(S1,qjo),e(S1,zV),e(zV,jjo),e(S1,Djo),e(fe,Gjo),e(fe,R1),e(R1,Vpe),e(Vpe,Ojo),e(R1,Vjo),e(R1,QV),e(QV,Xjo),e(R1,zjo),e(fe,Qjo),e(fe,P1),e(P1,Xpe),e(Xpe,Wjo),e(P1,Hjo),e(P1,WV),e(WV,Ujo),e(P1,Jjo),e(fe,Yjo),e(fe,B1),e(B1,zpe),e(zpe,Kjo),e(B1,Zjo),e(B1,HV),e(HV,eDo),e(B1,oDo),e(fe,rDo),e(fe,I1),e(I1,Qpe),e(Qpe,tDo),e(I1,aDo),e(I1,UV),e(UV,nDo),e(I1,sDo),e(fe,lDo),e(fe,N1),e(N1,Wpe),e(Wpe,iDo),e(N1,dDo),e(N1,JV),e(JV,cDo),e(N1,fDo),e(fe,mDo),e(fe,q1),e(q1,Hpe),e(Hpe,gDo),e(q1,hDo),e(q1,YV),e(YV,pDo),e(q1,_Do),e(fe,uDo),e(fe,j1),e(j1,Upe),e(Upe,bDo),e(j1,vDo),e(j1,KV),e(KV,FDo),e(j1,TDo),e(fe,MDo),e(fe,D1),e(D1,Jpe),e(Jpe,EDo),e(D1,CDo),e(D1,ZV),e(ZV,wDo),e(D1,ADo),e(fe,LDo),e(fe,G1),e(G1,Ype),e(Ype,yDo),e(G1,xDo),e(G1,eX),e(eX,$Do),e(G1,kDo),e(fe,SDo),e(fe,O1),e(O1,Kpe),e(Kpe,RDo),e(O1,PDo),e(O1,oX),e(oX,BDo),e(O1,IDo),e(oo,NDo),e(oo,V1),e(V1,qDo),e(V1,Zpe),e(Zpe,jDo),e(V1,DDo),e(V1,e_e),e(e_e,GDo),e(oo,ODo),M(X1,oo,null),b(f,zXe,u),b(f,td,u),e(td,z1),e(z1,o_e),M(ly,o_e,null),e(td,VDo),e(td,r_e),e(r_e,XDo),b(f,QXe,u),b(f,Io,u),M(iy,Io,null),e(Io,zDo),e(Io,ad),e(ad,QDo),e(ad,rX),e(rX,WDo),e(ad,HDo),e(ad,tX),e(tX,UDo),e(ad,JDo),e(Io,YDo),e(Io,dy),e(dy,KDo),e(dy,t_e),e(t_e,ZDo),e(dy,eGo),e(Io,oGo),e(Io,gt),M(cy,gt,null),e(gt,rGo),e(gt,a_e),e(a_e,tGo),e(gt,aGo),e(gt,nd),e(nd,nGo),e(nd,n_e),e(n_e,sGo),e(nd,lGo),e(nd,aX),e(aX,iGo),e(nd,dGo),e(gt,cGo),M(Q1,gt,null),e(Io,fGo),e(Io,ro),M(fy,ro,null),e(ro,mGo),e(ro,s_e),e(s_e,gGo),e(ro,hGo),e(ro,Ga),e(Ga,pGo),e(Ga,l_e),e(l_e,_Go),e(Ga,uGo),e(Ga,i_e),e(i_e,bGo),e(Ga,vGo),e(Ga,d_e),e(d_e,FGo),e(Ga,TGo),e(ro,MGo),e(ro,B),e(B,W1),e(W1,c_e),e(c_e,EGo),e(W1,CGo),e(W1,nX),e(nX,wGo),e(W1,AGo),e(B,LGo),e(B,H1),e(H1,f_e),e(f_e,yGo),e(H1,xGo),e(H1,sX),e(sX,$Go),e(H1,kGo),e(B,SGo),e(B,U1),e(U1,m_e),e(m_e,RGo),e(U1,PGo),e(U1,lX),e(lX,BGo),e(U1,IGo),e(B,NGo),e(B,J1),e(J1,g_e),e(g_e,qGo),e(J1,jGo),e(J1,iX),e(iX,DGo),e(J1,GGo),e(B,OGo),e(B,Y1),e(Y1,h_e),e(h_e,VGo),e(Y1,XGo),e(Y1,dX),e(dX,zGo),e(Y1,QGo),e(B,WGo),e(B,K1),e(K1,p_e),e(p_e,HGo),e(K1,UGo),e(K1,cX),e(cX,JGo),e(K1,YGo),e(B,KGo),e(B,Z1),e(Z1,__e),e(__e,ZGo),e(Z1,eOo),e(Z1,fX),e(fX,oOo),e(Z1,rOo),e(B,tOo),e(B,eb),e(eb,u_e),e(u_e,aOo),e(eb,nOo),e(eb,mX),e(mX,sOo),e(eb,lOo),e(B,iOo),e(B,ob),e(ob,b_e),e(b_e,dOo),e(ob,cOo),e(ob,gX),e(gX,fOo),e(ob,mOo),e(B,gOo),e(B,rb),e(rb,v_e),e(v_e,hOo),e(rb,pOo),e(rb,hX),e(hX,_Oo),e(rb,uOo),e(B,bOo),e(B,tb),e(tb,F_e),e(F_e,vOo),e(tb,FOo),e(tb,pX),e(pX,TOo),e(tb,MOo),e(B,EOo),e(B,ab),e(ab,T_e),e(T_e,COo),e(ab,wOo),e(ab,_X),e(_X,AOo),e(ab,LOo),e(B,yOo),e(B,nb),e(nb,M_e),e(M_e,xOo),e(nb,$Oo),e(nb,uX),e(uX,kOo),e(nb,SOo),e(B,ROo),e(B,sb),e(sb,E_e),e(E_e,POo),e(sb,BOo),e(sb,bX),e(bX,IOo),e(sb,NOo),e(B,qOo),e(B,lb),e(lb,C_e),e(C_e,jOo),e(lb,DOo),e(lb,vX),e(vX,GOo),e(lb,OOo),e(B,VOo),e(B,ib),e(ib,w_e),e(w_e,XOo),e(ib,zOo),e(ib,FX),e(FX,QOo),e(ib,WOo),e(B,HOo),e(B,db),e(db,A_e),e(A_e,UOo),e(db,JOo),e(db,TX),e(TX,YOo),e(db,KOo),e(B,ZOo),e(B,cb),e(cb,L_e),e(L_e,eVo),e(cb,oVo),e(cb,MX),e(MX,rVo),e(cb,tVo),e(B,aVo),e(B,fb),e(fb,y_e),e(y_e,nVo),e(fb,sVo),e(fb,EX),e(EX,lVo),e(fb,iVo),e(B,dVo),e(B,mb),e(mb,x_e),e(x_e,cVo),e(mb,fVo),e(mb,CX),e(CX,mVo),e(mb,gVo),e(B,hVo),e(B,gb),e(gb,$_e),e($_e,pVo),e(gb,_Vo),e(gb,wX),e(wX,uVo),e(gb,bVo),e(B,vVo),e(B,hb),e(hb,k_e),e(k_e,FVo),e(hb,TVo),e(hb,AX),e(AX,MVo),e(hb,EVo),e(B,CVo),e(B,pb),e(pb,S_e),e(S_e,wVo),e(pb,AVo),e(pb,LX),e(LX,LVo),e(pb,yVo),e(B,xVo),e(B,_b),e(_b,R_e),e(R_e,$Vo),e(_b,kVo),e(_b,yX),e(yX,SVo),e(_b,RVo),e(B,PVo),e(B,ub),e(ub,P_e),e(P_e,BVo),e(ub,IVo),e(ub,xX),e(xX,NVo),e(ub,qVo),e(B,jVo),e(B,bb),e(bb,B_e),e(B_e,DVo),e(bb,GVo),e(bb,$X),e($X,OVo),e(bb,VVo),e(B,XVo),e(B,vb),e(vb,I_e),e(I_e,zVo),e(vb,QVo),e(vb,kX),e(kX,WVo),e(vb,HVo),e(B,UVo),e(B,Fb),e(Fb,N_e),e(N_e,JVo),e(Fb,YVo),e(Fb,SX),e(SX,KVo),e(Fb,ZVo),e(B,eXo),e(B,Tb),e(Tb,q_e),e(q_e,oXo),e(Tb,rXo),e(Tb,RX),e(RX,tXo),e(Tb,aXo),e(B,nXo),e(B,Mb),e(Mb,j_e),e(j_e,sXo),e(Mb,lXo),e(Mb,PX),e(PX,iXo),e(Mb,dXo),e(B,cXo),e(B,Eb),e(Eb,D_e),e(D_e,fXo),e(Eb,mXo),e(Eb,BX),e(BX,gXo),e(Eb,hXo),e(B,pXo),e(B,Cb),e(Cb,G_e),e(G_e,_Xo),e(Cb,uXo),e(Cb,IX),e(IX,bXo),e(Cb,vXo),e(B,FXo),e(B,wb),e(wb,O_e),e(O_e,TXo),e(wb,MXo),e(wb,NX),e(NX,EXo),e(wb,CXo),e(B,wXo),e(B,Ab),e(Ab,V_e),e(V_e,AXo),e(Ab,LXo),e(Ab,qX),e(qX,yXo),e(Ab,xXo),e(B,$Xo),e(B,Lb),e(Lb,X_e),e(X_e,kXo),e(Lb,SXo),e(Lb,jX),e(jX,RXo),e(Lb,PXo),e(B,BXo),e(B,yb),e(yb,z_e),e(z_e,IXo),e(yb,NXo),e(yb,DX),e(DX,qXo),e(yb,jXo),e(B,DXo),e(B,xb),e(xb,Q_e),e(Q_e,GXo),e(xb,OXo),e(xb,GX),e(GX,VXo),e(xb,XXo),e(B,zXo),e(B,$b),e($b,W_e),e(W_e,QXo),e($b,WXo),e($b,OX),e(OX,HXo),e($b,UXo),e(B,JXo),e(B,kb),e(kb,H_e),e(H_e,YXo),e(kb,KXo),e(kb,VX),e(VX,ZXo),e(kb,ezo),e(B,ozo),e(B,Sb),e(Sb,U_e),e(U_e,rzo),e(Sb,tzo),e(Sb,XX),e(XX,azo),e(Sb,nzo),e(B,szo),e(B,Rb),e(Rb,J_e),e(J_e,lzo),e(Rb,izo),e(Rb,zX),e(zX,dzo),e(Rb,czo),e(B,fzo),e(B,Pb),e(Pb,Y_e),e(Y_e,mzo),e(Pb,gzo),e(Pb,QX),e(QX,hzo),e(Pb,pzo),e(B,_zo),e(B,Bb),e(Bb,K_e),e(K_e,uzo),e(Bb,bzo),e(Bb,WX),e(WX,vzo),e(Bb,Fzo),e(B,Tzo),e(B,Ib),e(Ib,Z_e),e(Z_e,Mzo),e(Ib,Ezo),e(Ib,HX),e(HX,Czo),e(Ib,wzo),e(B,Azo),e(B,Nb),e(Nb,eue),e(eue,Lzo),e(Nb,yzo),e(Nb,UX),e(UX,xzo),e(Nb,$zo),e(B,kzo),e(B,qb),e(qb,oue),e(oue,Szo),e(qb,Rzo),e(qb,JX),e(JX,Pzo),e(qb,Bzo),e(B,Izo),e(B,jb),e(jb,rue),e(rue,Nzo),e(jb,qzo),e(jb,YX),e(YX,jzo),e(jb,Dzo),e(B,Gzo),e(B,Db),e(Db,tue),e(tue,Ozo),e(Db,Vzo),e(Db,KX),e(KX,Xzo),e(Db,zzo),e(B,Qzo),e(B,Gb),e(Gb,aue),e(aue,Wzo),e(Gb,Hzo),e(Gb,ZX),e(ZX,Uzo),e(Gb,Jzo),e(B,Yzo),e(B,Ob),e(Ob,nue),e(nue,Kzo),e(Ob,Zzo),e(Ob,ez),e(ez,eQo),e(Ob,oQo),e(B,rQo),e(B,Vb),e(Vb,sue),e(sue,tQo),e(Vb,aQo),e(Vb,oz),e(oz,nQo),e(Vb,sQo),e(ro,lQo),e(ro,Xb),e(Xb,iQo),e(Xb,lue),e(lue,dQo),e(Xb,cQo),e(Xb,iue),e(iue,fQo),e(ro,mQo),M(zb,ro,null),b(f,WXe,u),b(f,sd,u),e(sd,Qb),e(Qb,due),M(my,due,null),e(sd,gQo),e(sd,cue),e(cue,hQo),b(f,HXe,u),b(f,No,u),M(gy,No,null),e(No,pQo),e(No,ld),e(ld,_Qo),e(ld,rz),e(rz,uQo),e(ld,bQo),e(ld,tz),e(tz,vQo),e(ld,FQo),e(No,TQo),e(No,hy),e(hy,MQo),e(hy,fue),e(fue,EQo),e(hy,CQo),e(No,wQo),e(No,ht),M(py,ht,null),e(ht,AQo),e(ht,mue),e(mue,LQo),e(ht,yQo),e(ht,id),e(id,xQo),e(id,gue),e(gue,$Qo),e(id,kQo),e(id,az),e(az,SQo),e(id,RQo),e(ht,PQo),M(Wb,ht,null),e(No,BQo),e(No,to),M(_y,to,null),e(to,IQo),e(to,hue),e(hue,NQo),e(to,qQo),e(to,Oa),e(Oa,jQo),e(Oa,pue),e(pue,DQo),e(Oa,GQo),e(Oa,_ue),e(_ue,OQo),e(Oa,VQo),e(Oa,uue),e(uue,XQo),e(Oa,zQo),e(to,QQo),e(to,Z),e(Z,Hb),e(Hb,bue),e(bue,WQo),e(Hb,HQo),e(Hb,nz),e(nz,UQo),e(Hb,JQo),e(Z,YQo),e(Z,Ub),e(Ub,vue),e(vue,KQo),e(Ub,ZQo),e(Ub,sz),e(sz,eWo),e(Ub,oWo),e(Z,rWo),e(Z,Jb),e(Jb,Fue),e(Fue,tWo),e(Jb,aWo),e(Jb,lz),e(lz,nWo),e(Jb,sWo),e(Z,lWo),e(Z,Yb),e(Yb,Tue),e(Tue,iWo),e(Yb,dWo),e(Yb,iz),e(iz,cWo),e(Yb,fWo),e(Z,mWo),e(Z,Kb),e(Kb,Mue),e(Mue,gWo),e(Kb,hWo),e(Kb,dz),e(dz,pWo),e(Kb,_Wo),e(Z,uWo),e(Z,Zb),e(Zb,Eue),e(Eue,bWo),e(Zb,vWo),e(Zb,cz),e(cz,FWo),e(Zb,TWo),e(Z,MWo),e(Z,ev),e(ev,Cue),e(Cue,EWo),e(ev,CWo),e(ev,fz),e(fz,wWo),e(ev,AWo),e(Z,LWo),e(Z,ov),e(ov,wue),e(wue,yWo),e(ov,xWo),e(ov,mz),e(mz,$Wo),e(ov,kWo),e(Z,SWo),e(Z,rv),e(rv,Aue),e(Aue,RWo),e(rv,PWo),e(rv,gz),e(gz,BWo),e(rv,IWo),e(Z,NWo),e(Z,tv),e(tv,Lue),e(Lue,qWo),e(tv,jWo),e(tv,hz),e(hz,DWo),e(tv,GWo),e(Z,OWo),e(Z,av),e(av,yue),e(yue,VWo),e(av,XWo),e(av,pz),e(pz,zWo),e(av,QWo),e(Z,WWo),e(Z,nv),e(nv,xue),e(xue,HWo),e(nv,UWo),e(nv,_z),e(_z,JWo),e(nv,YWo),e(Z,KWo),e(Z,sv),e(sv,$ue),e($ue,ZWo),e(sv,eHo),e(sv,uz),e(uz,oHo),e(sv,rHo),e(Z,tHo),e(Z,lv),e(lv,kue),e(kue,aHo),e(lv,nHo),e(lv,bz),e(bz,sHo),e(lv,lHo),e(Z,iHo),e(Z,iv),e(iv,Sue),e(Sue,dHo),e(iv,cHo),e(iv,vz),e(vz,fHo),e(iv,mHo),e(Z,gHo),e(Z,dv),e(dv,Rue),e(Rue,hHo),e(dv,pHo),e(dv,Fz),e(Fz,_Ho),e(dv,uHo),e(Z,bHo),e(Z,cv),e(cv,Pue),e(Pue,vHo),e(cv,FHo),e(cv,Tz),e(Tz,THo),e(cv,MHo),e(Z,EHo),e(Z,fv),e(fv,Bue),e(Bue,CHo),e(fv,wHo),e(fv,Mz),e(Mz,AHo),e(fv,LHo),e(Z,yHo),e(Z,mv),e(mv,Iue),e(Iue,xHo),e(mv,$Ho),e(mv,Ez),e(Ez,kHo),e(mv,SHo),e(Z,RHo),e(Z,gv),e(gv,Nue),e(Nue,PHo),e(gv,BHo),e(gv,Cz),e(Cz,IHo),e(gv,NHo),e(Z,qHo),e(Z,hv),e(hv,que),e(que,jHo),e(hv,DHo),e(hv,wz),e(wz,GHo),e(hv,OHo),e(Z,VHo),e(Z,pv),e(pv,jue),e(jue,XHo),e(pv,zHo),e(pv,Az),e(Az,QHo),e(pv,WHo),e(Z,HHo),e(Z,_v),e(_v,Due),e(Due,UHo),e(_v,JHo),e(_v,Lz),e(Lz,YHo),e(_v,KHo),e(Z,ZHo),e(Z,uv),e(uv,Gue),e(Gue,eUo),e(uv,oUo),e(uv,yz),e(yz,rUo),e(uv,tUo),e(Z,aUo),e(Z,bv),e(bv,Oue),e(Oue,nUo),e(bv,sUo),e(bv,xz),e(xz,lUo),e(bv,iUo),e(Z,dUo),e(Z,vv),e(vv,Vue),e(Vue,cUo),e(vv,fUo),e(vv,$z),e($z,mUo),e(vv,gUo),e(Z,hUo),e(Z,Fv),e(Fv,Xue),e(Xue,pUo),e(Fv,_Uo),e(Fv,kz),e(kz,uUo),e(Fv,bUo),e(Z,vUo),e(Z,Tv),e(Tv,zue),e(zue,FUo),e(Tv,TUo),e(Tv,Sz),e(Sz,MUo),e(Tv,EUo),e(Z,CUo),e(Z,Mv),e(Mv,Que),e(Que,wUo),e(Mv,AUo),e(Mv,Rz),e(Rz,LUo),e(Mv,yUo),e(Z,xUo),e(Z,Ev),e(Ev,Wue),e(Wue,$Uo),e(Ev,kUo),e(Ev,Pz),e(Pz,SUo),e(Ev,RUo),e(to,PUo),e(to,Cv),e(Cv,BUo),e(Cv,Hue),e(Hue,IUo),e(Cv,NUo),e(Cv,Uue),e(Uue,qUo),e(to,jUo),M(wv,to,null),b(f,UXe,u),b(f,dd,u),e(dd,Av),e(Av,Jue),M(uy,Jue,null),e(dd,DUo),e(dd,Yue),e(Yue,GUo),b(f,JXe,u),b(f,qo,u),M(by,qo,null),e(qo,OUo),e(qo,cd),e(cd,VUo),e(cd,Bz),e(Bz,XUo),e(cd,zUo),e(cd,Iz),e(Iz,QUo),e(cd,WUo),e(qo,HUo),e(qo,vy),e(vy,UUo),e(vy,Kue),e(Kue,JUo),e(vy,YUo),e(qo,KUo),e(qo,pt),M(Fy,pt,null),e(pt,ZUo),e(pt,Zue),e(Zue,eJo),e(pt,oJo),e(pt,fd),e(fd,rJo),e(fd,e4e),e(e4e,tJo),e(fd,aJo),e(fd,Nz),e(Nz,nJo),e(fd,sJo),e(pt,lJo),M(Lv,pt,null),e(qo,iJo),e(qo,ao),M(Ty,ao,null),e(ao,dJo),e(ao,o4e),e(o4e,cJo),e(ao,fJo),e(ao,Va),e(Va,mJo),e(Va,r4e),e(r4e,gJo),e(Va,hJo),e(Va,t4e),e(t4e,pJo),e(Va,_Jo),e(Va,a4e),e(a4e,uJo),e(Va,bJo),e(ao,vJo),e(ao,jo),e(jo,yv),e(yv,n4e),e(n4e,FJo),e(yv,TJo),e(yv,qz),e(qz,MJo),e(yv,EJo),e(jo,CJo),e(jo,xv),e(xv,s4e),e(s4e,wJo),e(xv,AJo),e(xv,jz),e(jz,LJo),e(xv,yJo),e(jo,xJo),e(jo,$v),e($v,l4e),e(l4e,$Jo),e($v,kJo),e($v,Dz),e(Dz,SJo),e($v,RJo),e(jo,PJo),e(jo,kv),e(kv,i4e),e(i4e,BJo),e(kv,IJo),e(kv,Gz),e(Gz,NJo),e(kv,qJo),e(jo,jJo),e(jo,Sv),e(Sv,d4e),e(d4e,DJo),e(Sv,GJo),e(Sv,Oz),e(Oz,OJo),e(Sv,VJo),e(jo,XJo),e(jo,Rv),e(Rv,c4e),e(c4e,zJo),e(Rv,QJo),e(Rv,Vz),e(Vz,WJo),e(Rv,HJo),e(ao,UJo),e(ao,Pv),e(Pv,JJo),e(Pv,f4e),e(f4e,YJo),e(Pv,KJo),e(Pv,m4e),e(m4e,ZJo),e(ao,eYo),M(Bv,ao,null),b(f,YXe,u),b(f,md,u),e(md,Iv),e(Iv,g4e),M(My,g4e,null),e(md,oYo),e(md,h4e),e(h4e,rYo),b(f,KXe,u),b(f,Do,u),M(Ey,Do,null),e(Do,tYo),e(Do,gd),e(gd,aYo),e(gd,Xz),e(Xz,nYo),e(gd,sYo),e(gd,zz),e(zz,lYo),e(gd,iYo),e(Do,dYo),e(Do,Cy),e(Cy,cYo),e(Cy,p4e),e(p4e,fYo),e(Cy,mYo),e(Do,gYo),e(Do,_t),M(wy,_t,null),e(_t,hYo),e(_t,_4e),e(_4e,pYo),e(_t,_Yo),e(_t,hd),e(hd,uYo),e(hd,u4e),e(u4e,bYo),e(hd,vYo),e(hd,Qz),e(Qz,FYo),e(hd,TYo),e(_t,MYo),M(Nv,_t,null),e(Do,EYo),e(Do,no),M(Ay,no,null),e(no,CYo),e(no,b4e),e(b4e,wYo),e(no,AYo),e(no,Xa),e(Xa,LYo),e(Xa,v4e),e(v4e,yYo),e(Xa,xYo),e(Xa,F4e),e(F4e,$Yo),e(Xa,kYo),e(Xa,T4e),e(T4e,SYo),e(Xa,RYo),e(no,PYo),e(no,U),e(U,qv),e(qv,M4e),e(M4e,BYo),e(qv,IYo),e(qv,Wz),e(Wz,NYo),e(qv,qYo),e(U,jYo),e(U,jv),e(jv,E4e),e(E4e,DYo),e(jv,GYo),e(jv,Hz),e(Hz,OYo),e(jv,VYo),e(U,XYo),e(U,Dv),e(Dv,C4e),e(C4e,zYo),e(Dv,QYo),e(Dv,Uz),e(Uz,WYo),e(Dv,HYo),e(U,UYo),e(U,Gv),e(Gv,w4e),e(w4e,JYo),e(Gv,YYo),e(Gv,Jz),e(Jz,KYo),e(Gv,ZYo),e(U,eKo),e(U,Ov),e(Ov,A4e),e(A4e,oKo),e(Ov,rKo),e(Ov,Yz),e(Yz,tKo),e(Ov,aKo),e(U,nKo),e(U,Vv),e(Vv,L4e),e(L4e,sKo),e(Vv,lKo),e(Vv,Kz),e(Kz,iKo),e(Vv,dKo),e(U,cKo),e(U,Xv),e(Xv,y4e),e(y4e,fKo),e(Xv,mKo),e(Xv,Zz),e(Zz,gKo),e(Xv,hKo),e(U,pKo),e(U,zv),e(zv,x4e),e(x4e,_Ko),e(zv,uKo),e(zv,eQ),e(eQ,bKo),e(zv,vKo),e(U,FKo),e(U,Qv),e(Qv,$4e),e($4e,TKo),e(Qv,MKo),e(Qv,oQ),e(oQ,EKo),e(Qv,CKo),e(U,wKo),e(U,Wv),e(Wv,k4e),e(k4e,AKo),e(Wv,LKo),e(Wv,rQ),e(rQ,yKo),e(Wv,xKo),e(U,$Ko),e(U,Hv),e(Hv,S4e),e(S4e,kKo),e(Hv,SKo),e(Hv,tQ),e(tQ,RKo),e(Hv,PKo),e(U,BKo),e(U,Uv),e(Uv,R4e),e(R4e,IKo),e(Uv,NKo),e(Uv,aQ),e(aQ,qKo),e(Uv,jKo),e(U,DKo),e(U,Jv),e(Jv,P4e),e(P4e,GKo),e(Jv,OKo),e(Jv,nQ),e(nQ,VKo),e(Jv,XKo),e(U,zKo),e(U,Yv),e(Yv,B4e),e(B4e,QKo),e(Yv,WKo),e(Yv,sQ),e(sQ,HKo),e(Yv,UKo),e(U,JKo),e(U,Kv),e(Kv,I4e),e(I4e,YKo),e(Kv,KKo),e(Kv,lQ),e(lQ,ZKo),e(Kv,eZo),e(U,oZo),e(U,Zv),e(Zv,N4e),e(N4e,rZo),e(Zv,tZo),e(Zv,iQ),e(iQ,aZo),e(Zv,nZo),e(U,sZo),e(U,eF),e(eF,q4e),e(q4e,lZo),e(eF,iZo),e(eF,dQ),e(dQ,dZo),e(eF,cZo),e(U,fZo),e(U,oF),e(oF,j4e),e(j4e,mZo),e(oF,gZo),e(oF,cQ),e(cQ,hZo),e(oF,pZo),e(U,_Zo),e(U,rF),e(rF,D4e),e(D4e,uZo),e(rF,bZo),e(rF,fQ),e(fQ,vZo),e(rF,FZo),e(U,TZo),e(U,tF),e(tF,G4e),e(G4e,MZo),e(tF,EZo),e(tF,mQ),e(mQ,CZo),e(tF,wZo),e(U,AZo),e(U,aF),e(aF,O4e),e(O4e,LZo),e(aF,yZo),e(aF,gQ),e(gQ,xZo),e(aF,$Zo),e(U,kZo),e(U,nF),e(nF,V4e),e(V4e,SZo),e(nF,RZo),e(nF,hQ),e(hQ,PZo),e(nF,BZo),e(U,IZo),e(U,sF),e(sF,X4e),e(X4e,NZo),e(sF,qZo),e(sF,pQ),e(pQ,jZo),e(sF,DZo),e(U,GZo),e(U,lF),e(lF,z4e),e(z4e,OZo),e(lF,VZo),e(lF,_Q),e(_Q,XZo),e(lF,zZo),e(U,QZo),e(U,iF),e(iF,Q4e),e(Q4e,WZo),e(iF,HZo),e(iF,uQ),e(uQ,UZo),e(iF,JZo),e(U,YZo),e(U,dF),e(dF,W4e),e(W4e,KZo),e(dF,ZZo),e(dF,bQ),e(bQ,eer),e(dF,oer),e(U,rer),e(U,cF),e(cF,H4e),e(H4e,ter),e(cF,aer),e(cF,vQ),e(vQ,ner),e(cF,ser),e(U,ler),e(U,fF),e(fF,U4e),e(U4e,ier),e(fF,der),e(fF,FQ),e(FQ,cer),e(fF,fer),e(U,mer),e(U,mF),e(mF,J4e),e(J4e,ger),e(mF,her),e(mF,TQ),e(TQ,per),e(mF,_er),e(U,uer),e(U,gF),e(gF,Y4e),e(Y4e,ber),e(gF,ver),e(gF,MQ),e(MQ,Fer),e(gF,Ter),e(U,Mer),e(U,hF),e(hF,K4e),e(K4e,Eer),e(hF,Cer),e(hF,EQ),e(EQ,wer),e(hF,Aer),e(U,Ler),e(U,pF),e(pF,Z4e),e(Z4e,yer),e(pF,xer),e(pF,CQ),e(CQ,$er),e(pF,ker),e(U,Ser),e(U,_F),e(_F,e2e),e(e2e,Rer),e(_F,Per),e(_F,wQ),e(wQ,Ber),e(_F,Ier),e(U,Ner),e(U,uF),e(uF,o2e),e(o2e,qer),e(uF,jer),e(uF,AQ),e(AQ,Der),e(uF,Ger),e(U,Oer),e(U,bF),e(bF,r2e),e(r2e,Ver),e(bF,Xer),e(bF,LQ),e(LQ,zer),e(bF,Qer),e(U,Wer),e(U,vF),e(vF,t2e),e(t2e,Her),e(vF,Uer),e(vF,yQ),e(yQ,Jer),e(vF,Yer),e(no,Ker),e(no,FF),e(FF,Zer),e(FF,a2e),e(a2e,eor),e(FF,oor),e(FF,n2e),e(n2e,ror),e(no,tor),M(TF,no,null),b(f,ZXe,u),b(f,pd,u),e(pd,MF),e(MF,s2e),M(Ly,s2e,null),e(pd,aor),e(pd,l2e),e(l2e,nor),b(f,eze,u),b(f,Go,u),M(yy,Go,null),e(Go,sor),e(Go,_d),e(_d,lor),e(_d,xQ),e(xQ,ior),e(_d,dor),e(_d,$Q),e($Q,cor),e(_d,mor),e(Go,gor),e(Go,xy),e(xy,hor),e(xy,i2e),e(i2e,por),e(xy,_or),e(Go,uor),e(Go,ut),M($y,ut,null),e(ut,bor),e(ut,d2e),e(d2e,vor),e(ut,For),e(ut,ud),e(ud,Tor),e(ud,c2e),e(c2e,Mor),e(ud,Eor),e(ud,kQ),e(kQ,Cor),e(ud,wor),e(ut,Aor),M(EF,ut,null),e(Go,Lor),e(Go,so),M(ky,so,null),e(so,yor),e(so,f2e),e(f2e,xor),e(so,$or),e(so,za),e(za,kor),e(za,m2e),e(m2e,Sor),e(za,Ror),e(za,g2e),e(g2e,Por),e(za,Bor),e(za,h2e),e(h2e,Ior),e(za,Nor),e(so,qor),e(so,V),e(V,CF),e(CF,p2e),e(p2e,jor),e(CF,Dor),e(CF,SQ),e(SQ,Gor),e(CF,Oor),e(V,Vor),e(V,wF),e(wF,_2e),e(_2e,Xor),e(wF,zor),e(wF,RQ),e(RQ,Qor),e(wF,Wor),e(V,Hor),e(V,AF),e(AF,u2e),e(u2e,Uor),e(AF,Jor),e(AF,PQ),e(PQ,Yor),e(AF,Kor),e(V,Zor),e(V,LF),e(LF,b2e),e(b2e,err),e(LF,orr),e(LF,BQ),e(BQ,rrr),e(LF,trr),e(V,arr),e(V,yF),e(yF,v2e),e(v2e,nrr),e(yF,srr),e(yF,IQ),e(IQ,lrr),e(yF,irr),e(V,drr),e(V,xF),e(xF,F2e),e(F2e,crr),e(xF,frr),e(xF,NQ),e(NQ,mrr),e(xF,grr),e(V,hrr),e(V,$F),e($F,T2e),e(T2e,prr),e($F,_rr),e($F,qQ),e(qQ,urr),e($F,brr),e(V,vrr),e(V,kF),e(kF,M2e),e(M2e,Frr),e(kF,Trr),e(kF,jQ),e(jQ,Mrr),e(kF,Err),e(V,Crr),e(V,SF),e(SF,E2e),e(E2e,wrr),e(SF,Arr),e(SF,DQ),e(DQ,Lrr),e(SF,yrr),e(V,xrr),e(V,RF),e(RF,C2e),e(C2e,$rr),e(RF,krr),e(RF,GQ),e(GQ,Srr),e(RF,Rrr),e(V,Prr),e(V,PF),e(PF,w2e),e(w2e,Brr),e(PF,Irr),e(PF,OQ),e(OQ,Nrr),e(PF,qrr),e(V,jrr),e(V,BF),e(BF,A2e),e(A2e,Drr),e(BF,Grr),e(BF,VQ),e(VQ,Orr),e(BF,Vrr),e(V,Xrr),e(V,IF),e(IF,L2e),e(L2e,zrr),e(IF,Qrr),e(IF,XQ),e(XQ,Wrr),e(IF,Hrr),e(V,Urr),e(V,NF),e(NF,y2e),e(y2e,Jrr),e(NF,Yrr),e(NF,zQ),e(zQ,Krr),e(NF,Zrr),e(V,etr),e(V,qF),e(qF,x2e),e(x2e,otr),e(qF,rtr),e(qF,QQ),e(QQ,ttr),e(qF,atr),e(V,ntr),e(V,jF),e(jF,$2e),e($2e,str),e(jF,ltr),e(jF,WQ),e(WQ,itr),e(jF,dtr),e(V,ctr),e(V,DF),e(DF,k2e),e(k2e,ftr),e(DF,mtr),e(DF,HQ),e(HQ,gtr),e(DF,htr),e(V,ptr),e(V,GF),e(GF,S2e),e(S2e,_tr),e(GF,utr),e(GF,UQ),e(UQ,btr),e(GF,vtr),e(V,Ftr),e(V,OF),e(OF,R2e),e(R2e,Ttr),e(OF,Mtr),e(OF,JQ),e(JQ,Etr),e(OF,Ctr),e(V,wtr),e(V,VF),e(VF,P2e),e(P2e,Atr),e(VF,Ltr),e(VF,YQ),e(YQ,ytr),e(VF,xtr),e(V,$tr),e(V,XF),e(XF,B2e),e(B2e,ktr),e(XF,Str),e(XF,KQ),e(KQ,Rtr),e(XF,Ptr),e(V,Btr),e(V,zF),e(zF,I2e),e(I2e,Itr),e(zF,Ntr),e(zF,ZQ),e(ZQ,qtr),e(zF,jtr),e(V,Dtr),e(V,QF),e(QF,N2e),e(N2e,Gtr),e(QF,Otr),e(QF,eW),e(eW,Vtr),e(QF,Xtr),e(V,ztr),e(V,WF),e(WF,q2e),e(q2e,Qtr),e(WF,Wtr),e(WF,oW),e(oW,Htr),e(WF,Utr),e(V,Jtr),e(V,HF),e(HF,j2e),e(j2e,Ytr),e(HF,Ktr),e(HF,rW),e(rW,Ztr),e(HF,ear),e(V,oar),e(V,UF),e(UF,D2e),e(D2e,rar),e(UF,tar),e(UF,tW),e(tW,aar),e(UF,nar),e(V,sar),e(V,JF),e(JF,G2e),e(G2e,lar),e(JF,iar),e(JF,aW),e(aW,dar),e(JF,car),e(V,far),e(V,YF),e(YF,O2e),e(O2e,mar),e(YF,gar),e(YF,nW),e(nW,har),e(YF,par),e(V,_ar),e(V,KF),e(KF,V2e),e(V2e,uar),e(KF,bar),e(KF,sW),e(sW,Far),e(KF,Tar),e(V,Mar),e(V,ZF),e(ZF,X2e),e(X2e,Ear),e(ZF,Car),e(ZF,lW),e(lW,war),e(ZF,Aar),e(V,Lar),e(V,eT),e(eT,z2e),e(z2e,yar),e(eT,xar),e(eT,iW),e(iW,$ar),e(eT,kar),e(V,Sar),e(V,oT),e(oT,Q2e),e(Q2e,Rar),e(oT,Par),e(oT,dW),e(dW,Bar),e(oT,Iar),e(V,Nar),e(V,rT),e(rT,W2e),e(W2e,qar),e(rT,jar),e(rT,cW),e(cW,Dar),e(rT,Gar),e(V,Oar),e(V,tT),e(tT,H2e),e(H2e,Var),e(tT,Xar),e(tT,fW),e(fW,zar),e(tT,Qar),e(V,War),e(V,aT),e(aT,U2e),e(U2e,Har),e(aT,Uar),e(aT,mW),e(mW,Jar),e(aT,Yar),e(V,Kar),e(V,nT),e(nT,J2e),e(J2e,Zar),e(nT,enr),e(nT,gW),e(gW,onr),e(nT,rnr),e(V,tnr),e(V,sT),e(sT,Y2e),e(Y2e,anr),e(sT,nnr),e(sT,hW),e(hW,snr),e(sT,lnr),e(V,inr),e(V,lT),e(lT,K2e),e(K2e,dnr),e(lT,cnr),e(lT,pW),e(pW,fnr),e(lT,mnr),e(V,gnr),e(V,iT),e(iT,Z2e),e(Z2e,hnr),e(iT,pnr),e(iT,_W),e(_W,_nr),e(iT,unr),e(V,bnr),e(V,dT),e(dT,e1e),e(e1e,vnr),e(dT,Fnr),e(dT,uW),e(uW,Tnr),e(dT,Mnr),e(V,Enr),e(V,cT),e(cT,o1e),e(o1e,Cnr),e(cT,wnr),e(cT,bW),e(bW,Anr),e(cT,Lnr),e(V,ynr),e(V,fT),e(fT,r1e),e(r1e,xnr),e(fT,$nr),e(fT,vW),e(vW,knr),e(fT,Snr),e(so,Rnr),e(so,mT),e(mT,Pnr),e(mT,t1e),e(t1e,Bnr),e(mT,Inr),e(mT,a1e),e(a1e,Nnr),e(so,qnr),M(gT,so,null),b(f,oze,u),b(f,bd,u),e(bd,hT),e(hT,n1e),M(Sy,n1e,null),e(bd,jnr),e(bd,s1e),e(s1e,Dnr),b(f,rze,u),b(f,Oo,u),M(Ry,Oo,null),e(Oo,Gnr),e(Oo,vd),e(vd,Onr),e(vd,FW),e(FW,Vnr),e(vd,Xnr),e(vd,TW),e(TW,znr),e(vd,Qnr),e(Oo,Wnr),e(Oo,Py),e(Py,Hnr),e(Py,l1e),e(l1e,Unr),e(Py,Jnr),e(Oo,Ynr),e(Oo,bt),M(By,bt,null),e(bt,Knr),e(bt,i1e),e(i1e,Znr),e(bt,esr),e(bt,Fd),e(Fd,osr),e(Fd,d1e),e(d1e,rsr),e(Fd,tsr),e(Fd,MW),e(MW,asr),e(Fd,nsr),e(bt,ssr),M(pT,bt,null),e(Oo,lsr),e(Oo,lo),M(Iy,lo,null),e(lo,isr),e(lo,c1e),e(c1e,dsr),e(lo,csr),e(lo,Qa),e(Qa,fsr),e(Qa,f1e),e(f1e,msr),e(Qa,gsr),e(Qa,m1e),e(m1e,hsr),e(Qa,psr),e(Qa,g1e),e(g1e,_sr),e(Qa,usr),e(lo,bsr),e(lo,h1e),e(h1e,_T),e(_T,p1e),e(p1e,vsr),e(_T,Fsr),e(_T,EW),e(EW,Tsr),e(_T,Msr),e(lo,Esr),e(lo,uT),e(uT,Csr),e(uT,_1e),e(_1e,wsr),e(uT,Asr),e(uT,u1e),e(u1e,Lsr),e(lo,ysr),M(bT,lo,null),b(f,tze,u),b(f,Td,u),e(Td,vT),e(vT,b1e),M(Ny,b1e,null),e(Td,xsr),e(Td,v1e),e(v1e,$sr),b(f,aze,u),b(f,Vo,u),M(qy,Vo,null),e(Vo,ksr),e(Vo,Md),e(Md,Ssr),e(Md,CW),e(CW,Rsr),e(Md,Psr),e(Md,wW),e(wW,Bsr),e(Md,Isr),e(Vo,Nsr),e(Vo,jy),e(jy,qsr),e(jy,F1e),e(F1e,jsr),e(jy,Dsr),e(Vo,Gsr),e(Vo,vt),M(Dy,vt,null),e(vt,Osr),e(vt,T1e),e(T1e,Vsr),e(vt,Xsr),e(vt,Ed),e(Ed,zsr),e(Ed,M1e),e(M1e,Qsr),e(Ed,Wsr),e(Ed,AW),e(AW,Hsr),e(Ed,Usr),e(vt,Jsr),M(FT,vt,null),e(Vo,Ysr),e(Vo,io),M(Gy,io,null),e(io,Ksr),e(io,E1e),e(E1e,Zsr),e(io,elr),e(io,Wa),e(Wa,olr),e(Wa,C1e),e(C1e,rlr),e(Wa,tlr),e(Wa,w1e),e(w1e,alr),e(Wa,nlr),e(Wa,A1e),e(A1e,slr),e(Wa,llr),e(io,ilr),e(io,ve),e(ve,TT),e(TT,L1e),e(L1e,dlr),e(TT,clr),e(TT,LW),e(LW,flr),e(TT,mlr),e(ve,glr),e(ve,MT),e(MT,y1e),e(y1e,hlr),e(MT,plr),e(MT,yW),e(yW,_lr),e(MT,ulr),e(ve,blr),e(ve,ET),e(ET,x1e),e(x1e,vlr),e(ET,Flr),e(ET,xW),e(xW,Tlr),e(ET,Mlr),e(ve,Elr),e(ve,CT),e(CT,$1e),e($1e,Clr),e(CT,wlr),e(CT,$W),e($W,Alr),e(CT,Llr),e(ve,ylr),e(ve,Us),e(Us,k1e),e(k1e,xlr),e(Us,$lr),e(Us,kW),e(kW,klr),e(Us,Slr),e(Us,SW),e(SW,Rlr),e(Us,Plr),e(ve,Blr),e(ve,wT),e(wT,S1e),e(S1e,Ilr),e(wT,Nlr),e(wT,RW),e(RW,qlr),e(wT,jlr),e(ve,Dlr),e(ve,Js),e(Js,R1e),e(R1e,Glr),e(Js,Olr),e(Js,PW),e(PW,Vlr),e(Js,Xlr),e(Js,BW),e(BW,zlr),e(Js,Qlr),e(ve,Wlr),e(ve,AT),e(AT,P1e),e(P1e,Hlr),e(AT,Ulr),e(AT,IW),e(IW,Jlr),e(AT,Ylr),e(ve,Klr),e(ve,Ft),e(Ft,B1e),e(B1e,Zlr),e(Ft,eir),e(Ft,NW),e(NW,oir),e(Ft,rir),e(Ft,qW),e(qW,tir),e(Ft,air),e(Ft,jW),e(jW,nir),e(Ft,sir),e(ve,lir),e(ve,LT),e(LT,I1e),e(I1e,iir),e(LT,dir),e(LT,DW),e(DW,cir),e(LT,fir),e(ve,mir),e(ve,yT),e(yT,N1e),e(N1e,gir),e(yT,hir),e(yT,GW),e(GW,pir),e(yT,_ir),e(ve,uir),e(ve,xT),e(xT,q1e),e(q1e,bir),e(xT,vir),e(xT,OW),e(OW,Fir),e(xT,Tir),e(ve,Mir),e(ve,$T),e($T,j1e),e(j1e,Eir),e($T,Cir),e($T,VW),e(VW,wir),e($T,Air),e(ve,Lir),e(ve,kT),e(kT,D1e),e(D1e,yir),e(kT,xir),e(kT,XW),e(XW,$ir),e(kT,kir),e(ve,Sir),e(ve,ST),e(ST,G1e),e(G1e,Rir),e(ST,Pir),e(ST,zW),e(zW,Bir),e(ST,Iir),e(ve,Nir),e(ve,RT),e(RT,O1e),e(O1e,qir),e(RT,jir),e(RT,QW),e(QW,Dir),e(RT,Gir),e(io,Oir),e(io,PT),e(PT,Vir),e(PT,V1e),e(V1e,Xir),e(PT,zir),e(PT,X1e),e(X1e,Qir),e(io,Wir),M(BT,io,null),b(f,nze,u),b(f,Cd,u),e(Cd,IT),e(IT,z1e),M(Oy,z1e,null),e(Cd,Hir),e(Cd,Q1e),e(Q1e,Uir),b(f,sze,u),b(f,Xo,u),M(Vy,Xo,null),e(Xo,Jir),e(Xo,wd),e(wd,Yir),e(wd,WW),e(WW,Kir),e(wd,Zir),e(wd,HW),e(HW,edr),e(wd,odr),e(Xo,rdr),e(Xo,Xy),e(Xy,tdr),e(Xy,W1e),e(W1e,adr),e(Xy,ndr),e(Xo,sdr),e(Xo,Tt),M(zy,Tt,null),e(Tt,ldr),e(Tt,H1e),e(H1e,idr),e(Tt,ddr),e(Tt,Ad),e(Ad,cdr),e(Ad,U1e),e(U1e,fdr),e(Ad,mdr),e(Ad,UW),e(UW,gdr),e(Ad,hdr),e(Tt,pdr),M(NT,Tt,null),e(Xo,_dr),e(Xo,co),M(Qy,co,null),e(co,udr),e(co,J1e),e(J1e,bdr),e(co,vdr),e(co,Ha),e(Ha,Fdr),e(Ha,Y1e),e(Y1e,Tdr),e(Ha,Mdr),e(Ha,K1e),e(K1e,Edr),e(Ha,Cdr),e(Ha,Z1e),e(Z1e,wdr),e(Ha,Adr),e(co,Ldr),e(co,ebe),e(ebe,qT),e(qT,obe),e(obe,ydr),e(qT,xdr),e(qT,JW),e(JW,$dr),e(qT,kdr),e(co,Sdr),e(co,jT),e(jT,Rdr),e(jT,rbe),e(rbe,Pdr),e(jT,Bdr),e(jT,tbe),e(tbe,Idr),e(co,Ndr),M(DT,co,null),b(f,lze,u),b(f,Ld,u),e(Ld,GT),e(GT,abe),M(Wy,abe,null),e(Ld,qdr),e(Ld,nbe),e(nbe,jdr),b(f,ize,u),b(f,zo,u),M(Hy,zo,null),e(zo,Ddr),e(zo,yd),e(yd,Gdr),e(yd,YW),e(YW,Odr),e(yd,Vdr),e(yd,KW),e(KW,Xdr),e(yd,zdr),e(zo,Qdr),e(zo,Uy),e(Uy,Wdr),e(Uy,sbe),e(sbe,Hdr),e(Uy,Udr),e(zo,Jdr),e(zo,Mt),M(Jy,Mt,null),e(Mt,Ydr),e(Mt,lbe),e(lbe,Kdr),e(Mt,Zdr),e(Mt,xd),e(xd,ecr),e(xd,ibe),e(ibe,ocr),e(xd,rcr),e(xd,ZW),e(ZW,tcr),e(xd,acr),e(Mt,ncr),M(OT,Mt,null),e(zo,scr),e(zo,fo),M(Yy,fo,null),e(fo,lcr),e(fo,dbe),e(dbe,icr),e(fo,dcr),e(fo,Ua),e(Ua,ccr),e(Ua,cbe),e(cbe,fcr),e(Ua,mcr),e(Ua,fbe),e(fbe,gcr),e(Ua,hcr),e(Ua,mbe),e(mbe,pcr),e(Ua,_cr),e(fo,ucr),e(fo,gbe),e(gbe,VT),e(VT,hbe),e(hbe,bcr),e(VT,vcr),e(VT,eH),e(eH,Fcr),e(VT,Tcr),e(fo,Mcr),e(fo,XT),e(XT,Ecr),e(XT,pbe),e(pbe,Ccr),e(XT,wcr),e(XT,_be),e(_be,Acr),e(fo,Lcr),M(zT,fo,null),b(f,dze,u),b(f,$d,u),e($d,QT),e(QT,ube),M(Ky,ube,null),e($d,ycr),e($d,bbe),e(bbe,xcr),b(f,cze,u),b(f,Qo,u),M(Zy,Qo,null),e(Qo,$cr),e(Qo,kd),e(kd,kcr),e(kd,oH),e(oH,Scr),e(kd,Rcr),e(kd,rH),e(rH,Pcr),e(kd,Bcr),e(Qo,Icr),e(Qo,e9),e(e9,Ncr),e(e9,vbe),e(vbe,qcr),e(e9,jcr),e(Qo,Dcr),e(Qo,Et),M(o9,Et,null),e(Et,Gcr),e(Et,Fbe),e(Fbe,Ocr),e(Et,Vcr),e(Et,Sd),e(Sd,Xcr),e(Sd,Tbe),e(Tbe,zcr),e(Sd,Qcr),e(Sd,tH),e(tH,Wcr),e(Sd,Hcr),e(Et,Ucr),M(WT,Et,null),e(Qo,Jcr),e(Qo,mo),M(r9,mo,null),e(mo,Ycr),e(mo,Mbe),e(Mbe,Kcr),e(mo,Zcr),e(mo,Ja),e(Ja,efr),e(Ja,Ebe),e(Ebe,ofr),e(Ja,rfr),e(Ja,Cbe),e(Cbe,tfr),e(Ja,afr),e(Ja,wbe),e(wbe,nfr),e(Ja,sfr),e(mo,lfr),e(mo,Pe),e(Pe,HT),e(HT,Abe),e(Abe,ifr),e(HT,dfr),e(HT,aH),e(aH,cfr),e(HT,ffr),e(Pe,mfr),e(Pe,UT),e(UT,Lbe),e(Lbe,gfr),e(UT,hfr),e(UT,nH),e(nH,pfr),e(UT,_fr),e(Pe,ufr),e(Pe,JT),e(JT,ybe),e(ybe,bfr),e(JT,vfr),e(JT,sH),e(sH,Ffr),e(JT,Tfr),e(Pe,Mfr),e(Pe,YT),e(YT,xbe),e(xbe,Efr),e(YT,Cfr),e(YT,lH),e(lH,wfr),e(YT,Afr),e(Pe,Lfr),e(Pe,KT),e(KT,$be),e($be,yfr),e(KT,xfr),e(KT,iH),e(iH,$fr),e(KT,kfr),e(Pe,Sfr),e(Pe,ZT),e(ZT,kbe),e(kbe,Rfr),e(ZT,Pfr),e(ZT,dH),e(dH,Bfr),e(ZT,Ifr),e(Pe,Nfr),e(Pe,e8),e(e8,Sbe),e(Sbe,qfr),e(e8,jfr),e(e8,cH),e(cH,Dfr),e(e8,Gfr),e(Pe,Ofr),e(Pe,o8),e(o8,Rbe),e(Rbe,Vfr),e(o8,Xfr),e(o8,fH),e(fH,zfr),e(o8,Qfr),e(Pe,Wfr),e(Pe,r8),e(r8,Pbe),e(Pbe,Hfr),e(r8,Ufr),e(r8,mH),e(mH,Jfr),e(r8,Yfr),e(mo,Kfr),e(mo,t8),e(t8,Zfr),e(t8,Bbe),e(Bbe,emr),e(t8,omr),e(t8,Ibe),e(Ibe,rmr),e(mo,tmr),M(a8,mo,null),b(f,fze,u),b(f,Rd,u),e(Rd,n8),e(n8,Nbe),M(t9,Nbe,null),e(Rd,amr),e(Rd,qbe),e(qbe,nmr),b(f,mze,u),b(f,Wo,u),M(a9,Wo,null),e(Wo,smr),e(Wo,Pd),e(Pd,lmr),e(Pd,gH),e(gH,imr),e(Pd,dmr),e(Pd,hH),e(hH,cmr),e(Pd,fmr),e(Wo,mmr),e(Wo,n9),e(n9,gmr),e(n9,jbe),e(jbe,hmr),e(n9,pmr),e(Wo,_mr),e(Wo,Ct),M(s9,Ct,null),e(Ct,umr),e(Ct,Dbe),e(Dbe,bmr),e(Ct,vmr),e(Ct,Bd),e(Bd,Fmr),e(Bd,Gbe),e(Gbe,Tmr),e(Bd,Mmr),e(Bd,pH),e(pH,Emr),e(Bd,Cmr),e(Ct,wmr),M(s8,Ct,null),e(Wo,Amr),e(Wo,go),M(l9,go,null),e(go,Lmr),e(go,Obe),e(Obe,ymr),e(go,xmr),e(go,Ya),e(Ya,$mr),e(Ya,Vbe),e(Vbe,kmr),e(Ya,Smr),e(Ya,Xbe),e(Xbe,Rmr),e(Ya,Pmr),e(Ya,zbe),e(zbe,Bmr),e(Ya,Imr),e(go,Nmr),e(go,rt),e(rt,l8),e(l8,Qbe),e(Qbe,qmr),e(l8,jmr),e(l8,_H),e(_H,Dmr),e(l8,Gmr),e(rt,Omr),e(rt,i8),e(i8,Wbe),e(Wbe,Vmr),e(i8,Xmr),e(i8,uH),e(uH,zmr),e(i8,Qmr),e(rt,Wmr),e(rt,d8),e(d8,Hbe),e(Hbe,Hmr),e(d8,Umr),e(d8,bH),e(bH,Jmr),e(d8,Ymr),e(rt,Kmr),e(rt,c8),e(c8,Ube),e(Ube,Zmr),e(c8,egr),e(c8,vH),e(vH,ogr),e(c8,rgr),e(rt,tgr),e(rt,f8),e(f8,Jbe),e(Jbe,agr),e(f8,ngr),e(f8,FH),e(FH,sgr),e(f8,lgr),e(go,igr),e(go,m8),e(m8,dgr),e(m8,Ybe),e(Ybe,cgr),e(m8,fgr),e(m8,Kbe),e(Kbe,mgr),e(go,ggr),M(g8,go,null),b(f,gze,u),b(f,Id,u),e(Id,h8),e(h8,Zbe),M(i9,Zbe,null),e(Id,hgr),e(Id,eve),e(eve,pgr),b(f,hze,u),b(f,Ho,u),M(d9,Ho,null),e(Ho,_gr),e(Ho,Nd),e(Nd,ugr),e(Nd,TH),e(TH,bgr),e(Nd,vgr),e(Nd,MH),e(MH,Fgr),e(Nd,Tgr),e(Ho,Mgr),e(Ho,c9),e(c9,Egr),e(c9,ove),e(ove,Cgr),e(c9,wgr),e(Ho,Agr),e(Ho,wt),M(f9,wt,null),e(wt,Lgr),e(wt,rve),e(rve,ygr),e(wt,xgr),e(wt,qd),e(qd,$gr),e(qd,tve),e(tve,kgr),e(qd,Sgr),e(qd,EH),e(EH,Rgr),e(qd,Pgr),e(wt,Bgr),M(p8,wt,null),e(Ho,Igr),e(Ho,ho),M(m9,ho,null),e(ho,Ngr),e(ho,ave),e(ave,qgr),e(ho,jgr),e(ho,Ka),e(Ka,Dgr),e(Ka,nve),e(nve,Ggr),e(Ka,Ogr),e(Ka,sve),e(sve,Vgr),e(Ka,Xgr),e(Ka,lve),e(lve,zgr),e(Ka,Qgr),e(ho,Wgr),e(ho,Le),e(Le,_8),e(_8,ive),e(ive,Hgr),e(_8,Ugr),e(_8,CH),e(CH,Jgr),e(_8,Ygr),e(Le,Kgr),e(Le,u8),e(u8,dve),e(dve,Zgr),e(u8,ehr),e(u8,wH),e(wH,ohr),e(u8,rhr),e(Le,thr),e(Le,b8),e(b8,cve),e(cve,ahr),e(b8,nhr),e(b8,AH),e(AH,shr),e(b8,lhr),e(Le,ihr),e(Le,v8),e(v8,fve),e(fve,dhr),e(v8,chr),e(v8,LH),e(LH,fhr),e(v8,mhr),e(Le,ghr),e(Le,F8),e(F8,mve),e(mve,hhr),e(F8,phr),e(F8,yH),e(yH,_hr),e(F8,uhr),e(Le,bhr),e(Le,T8),e(T8,gve),e(gve,vhr),e(T8,Fhr),e(T8,xH),e(xH,Thr),e(T8,Mhr),e(Le,Ehr),e(Le,M8),e(M8,hve),e(hve,Chr),e(M8,whr),e(M8,$H),e($H,Ahr),e(M8,Lhr),e(Le,yhr),e(Le,E8),e(E8,pve),e(pve,xhr),e(E8,$hr),e(E8,kH),e(kH,khr),e(E8,Shr),e(Le,Rhr),e(Le,C8),e(C8,_ve),e(_ve,Phr),e(C8,Bhr),e(C8,SH),e(SH,Ihr),e(C8,Nhr),e(Le,qhr),e(Le,w8),e(w8,uve),e(uve,jhr),e(w8,Dhr),e(w8,RH),e(RH,Ghr),e(w8,Ohr),e(ho,Vhr),e(ho,A8),e(A8,Xhr),e(A8,bve),e(bve,zhr),e(A8,Qhr),e(A8,vve),e(vve,Whr),e(ho,Hhr),M(L8,ho,null),b(f,pze,u),b(f,jd,u),e(jd,y8),e(y8,Fve),M(g9,Fve,null),e(jd,Uhr),e(jd,Tve),e(Tve,Jhr),b(f,_ze,u),b(f,Uo,u),M(h9,Uo,null),e(Uo,Yhr),e(Uo,Dd),e(Dd,Khr),e(Dd,PH),e(PH,Zhr),e(Dd,epr),e(Dd,BH),e(BH,opr),e(Dd,rpr),e(Uo,tpr),e(Uo,p9),e(p9,apr),e(p9,Mve),e(Mve,npr),e(p9,spr),e(Uo,lpr),e(Uo,At),M(_9,At,null),e(At,ipr),e(At,Eve),e(Eve,dpr),e(At,cpr),e(At,Gd),e(Gd,fpr),e(Gd,Cve),e(Cve,mpr),e(Gd,gpr),e(Gd,IH),e(IH,hpr),e(Gd,ppr),e(At,_pr),M(x8,At,null),e(Uo,upr),e(Uo,po),M(u9,po,null),e(po,bpr),e(po,wve),e(wve,vpr),e(po,Fpr),e(po,Za),e(Za,Tpr),e(Za,Ave),e(Ave,Mpr),e(Za,Epr),e(Za,Lve),e(Lve,Cpr),e(Za,wpr),e(Za,yve),e(yve,Apr),e(Za,Lpr),e(po,ypr),e(po,b9),e(b9,$8),e($8,xve),e(xve,xpr),e($8,$pr),e($8,NH),e(NH,kpr),e($8,Spr),e(b9,Rpr),e(b9,k8),e(k8,$ve),e($ve,Ppr),e(k8,Bpr),e(k8,qH),e(qH,Ipr),e(k8,Npr),e(po,qpr),e(po,S8),e(S8,jpr),e(S8,kve),e(kve,Dpr),e(S8,Gpr),e(S8,Sve),e(Sve,Opr),e(po,Vpr),M(R8,po,null),b(f,uze,u),b(f,Od,u),e(Od,P8),e(P8,Rve),M(v9,Rve,null),e(Od,Xpr),e(Od,Pve),e(Pve,zpr),b(f,bze,u),b(f,Jo,u),M(F9,Jo,null),e(Jo,Qpr),e(Jo,Vd),e(Vd,Wpr),e(Vd,jH),e(jH,Hpr),e(Vd,Upr),e(Vd,DH),e(DH,Jpr),e(Vd,Ypr),e(Jo,Kpr),e(Jo,T9),e(T9,Zpr),e(T9,Bve),e(Bve,e_r),e(T9,o_r),e(Jo,r_r),e(Jo,Lt),M(M9,Lt,null),e(Lt,t_r),e(Lt,Ive),e(Ive,a_r),e(Lt,n_r),e(Lt,Xd),e(Xd,s_r),e(Xd,Nve),e(Nve,l_r),e(Xd,i_r),e(Xd,GH),e(GH,d_r),e(Xd,c_r),e(Lt,f_r),M(B8,Lt,null),e(Jo,m_r),e(Jo,_o),M(E9,_o,null),e(_o,g_r),e(_o,qve),e(qve,h_r),e(_o,p_r),e(_o,en),e(en,__r),e(en,jve),e(jve,u_r),e(en,b_r),e(en,Dve),e(Dve,v_r),e(en,F_r),e(en,Gve),e(Gve,T_r),e(en,M_r),e(_o,E_r),e(_o,tt),e(tt,I8),e(I8,Ove),e(Ove,C_r),e(I8,w_r),e(I8,OH),e(OH,A_r),e(I8,L_r),e(tt,y_r),e(tt,N8),e(N8,Vve),e(Vve,x_r),e(N8,$_r),e(N8,VH),e(VH,k_r),e(N8,S_r),e(tt,R_r),e(tt,q8),e(q8,Xve),e(Xve,P_r),e(q8,B_r),e(q8,XH),e(XH,I_r),e(q8,N_r),e(tt,q_r),e(tt,j8),e(j8,zve),e(zve,j_r),e(j8,D_r),e(j8,zH),e(zH,G_r),e(j8,O_r),e(tt,V_r),e(tt,D8),e(D8,Qve),e(Qve,X_r),e(D8,z_r),e(D8,QH),e(QH,Q_r),e(D8,W_r),e(_o,H_r),e(_o,G8),e(G8,U_r),e(G8,Wve),e(Wve,J_r),e(G8,Y_r),e(G8,Hve),e(Hve,K_r),e(_o,Z_r),M(O8,_o,null),b(f,vze,u),b(f,zd,u),e(zd,V8),e(V8,Uve),M(C9,Uve,null),e(zd,eur),e(zd,Jve),e(Jve,our),b(f,Fze,u),b(f,Yo,u),M(w9,Yo,null),e(Yo,rur),e(Yo,Qd),e(Qd,tur),e(Qd,WH),e(WH,aur),e(Qd,nur),e(Qd,HH),e(HH,sur),e(Qd,lur),e(Yo,iur),e(Yo,A9),e(A9,dur),e(A9,Yve),e(Yve,cur),e(A9,fur),e(Yo,mur),e(Yo,yt),M(L9,yt,null),e(yt,gur),e(yt,Kve),e(Kve,hur),e(yt,pur),e(yt,Wd),e(Wd,_ur),e(Wd,Zve),e(Zve,uur),e(Wd,bur),e(Wd,UH),e(UH,vur),e(Wd,Fur),e(yt,Tur),M(X8,yt,null),e(Yo,Mur),e(Yo,uo),M(y9,uo,null),e(uo,Eur),e(uo,eFe),e(eFe,Cur),e(uo,wur),e(uo,on),e(on,Aur),e(on,oFe),e(oFe,Lur),e(on,yur),e(on,rFe),e(rFe,xur),e(on,$ur),e(on,tFe),e(tFe,kur),e(on,Sur),e(uo,Rur),e(uo,Hd),e(Hd,z8),e(z8,aFe),e(aFe,Pur),e(z8,Bur),e(z8,JH),e(JH,Iur),e(z8,Nur),e(Hd,qur),e(Hd,Q8),e(Q8,nFe),e(nFe,jur),e(Q8,Dur),e(Q8,YH),e(YH,Gur),e(Q8,Our),e(Hd,Vur),e(Hd,W8),e(W8,sFe),e(sFe,Xur),e(W8,zur),e(W8,KH),e(KH,Qur),e(W8,Wur),e(uo,Hur),e(uo,H8),e(H8,Uur),e(H8,lFe),e(lFe,Jur),e(H8,Yur),e(H8,iFe),e(iFe,Kur),e(uo,Zur),M(U8,uo,null),b(f,Tze,u),b(f,Ud,u),e(Ud,J8),e(J8,dFe),M(x9,dFe,null),e(Ud,e4r),e(Ud,cFe),e(cFe,o4r),b(f,Mze,u),b(f,Ko,u),M($9,Ko,null),e(Ko,r4r),e(Ko,Jd),e(Jd,t4r),e(Jd,ZH),e(ZH,a4r),e(Jd,n4r),e(Jd,eU),e(eU,s4r),e(Jd,l4r),e(Ko,i4r),e(Ko,k9),e(k9,d4r),e(k9,fFe),e(fFe,c4r),e(k9,f4r),e(Ko,m4r),e(Ko,xt),M(S9,xt,null),e(xt,g4r),e(xt,mFe),e(mFe,h4r),e(xt,p4r),e(xt,Yd),e(Yd,_4r),e(Yd,gFe),e(gFe,u4r),e(Yd,b4r),e(Yd,oU),e(oU,v4r),e(Yd,F4r),e(xt,T4r),M(Y8,xt,null),e(Ko,M4r),e(Ko,bo),M(R9,bo,null),e(bo,E4r),e(bo,hFe),e(hFe,C4r),e(bo,w4r),e(bo,rn),e(rn,A4r),e(rn,pFe),e(pFe,L4r),e(rn,y4r),e(rn,_Fe),e(_Fe,x4r),e(rn,$4r),e(rn,uFe),e(uFe,k4r),e(rn,S4r),e(bo,R4r),e(bo,P9),e(P9,K8),e(K8,bFe),e(bFe,P4r),e(K8,B4r),e(K8,rU),e(rU,I4r),e(K8,N4r),e(P9,q4r),e(P9,Z8),e(Z8,vFe),e(vFe,j4r),e(Z8,D4r),e(Z8,tU),e(tU,G4r),e(Z8,O4r),e(bo,V4r),e(bo,eM),e(eM,X4r),e(eM,FFe),e(FFe,z4r),e(eM,Q4r),e(eM,TFe),e(TFe,W4r),e(bo,H4r),M(oM,bo,null),b(f,Eze,u),b(f,Kd,u),e(Kd,rM),e(rM,MFe),M(B9,MFe,null),e(Kd,U4r),e(Kd,EFe),e(EFe,J4r),b(f,Cze,u),b(f,Zo,u),M(I9,Zo,null),e(Zo,Y4r),e(Zo,Zd),e(Zd,K4r),e(Zd,aU),e(aU,Z4r),e(Zd,e2r),e(Zd,nU),e(nU,o2r),e(Zd,r2r),e(Zo,t2r),e(Zo,N9),e(N9,a2r),e(N9,CFe),e(CFe,n2r),e(N9,s2r),e(Zo,l2r),e(Zo,$t),M(q9,$t,null),e($t,i2r),e($t,wFe),e(wFe,d2r),e($t,c2r),e($t,ec),e(ec,f2r),e(ec,AFe),e(AFe,m2r),e(ec,g2r),e(ec,sU),e(sU,h2r),e(ec,p2r),e($t,_2r),M(tM,$t,null),e(Zo,u2r),e(Zo,vo),M(j9,vo,null),e(vo,b2r),e(vo,LFe),e(LFe,v2r),e(vo,F2r),e(vo,tn),e(tn,T2r),e(tn,yFe),e(yFe,M2r),e(tn,E2r),e(tn,xFe),e(xFe,C2r),e(tn,w2r),e(tn,$Fe),e($Fe,A2r),e(tn,L2r),e(vo,y2r),e(vo,kFe),e(kFe,aM),e(aM,SFe),e(SFe,x2r),e(aM,$2r),e(aM,lU),e(lU,k2r),e(aM,S2r),e(vo,R2r),e(vo,nM),e(nM,P2r),e(nM,RFe),e(RFe,B2r),e(nM,I2r),e(nM,PFe),e(PFe,N2r),e(vo,q2r),M(sM,vo,null),b(f,wze,u),b(f,oc,u),e(oc,lM),e(lM,BFe),M(D9,BFe,null),e(oc,j2r),e(oc,IFe),e(IFe,D2r),b(f,Aze,u),b(f,er,u),M(G9,er,null),e(er,G2r),e(er,rc),e(rc,O2r),e(rc,iU),e(iU,V2r),e(rc,X2r),e(rc,dU),e(dU,z2r),e(rc,Q2r),e(er,W2r),e(er,O9),e(O9,H2r),e(O9,NFe),e(NFe,U2r),e(O9,J2r),e(er,Y2r),e(er,kt),M(V9,kt,null),e(kt,K2r),e(kt,qFe),e(qFe,Z2r),e(kt,e1r),e(kt,tc),e(tc,o1r),e(tc,jFe),e(jFe,r1r),e(tc,t1r),e(tc,cU),e(cU,a1r),e(tc,n1r),e(kt,s1r),M(iM,kt,null),e(er,l1r),e(er,Fo),M(X9,Fo,null),e(Fo,i1r),e(Fo,DFe),e(DFe,d1r),e(Fo,c1r),e(Fo,an),e(an,f1r),e(an,GFe),e(GFe,m1r),e(an,g1r),e(an,OFe),e(OFe,h1r),e(an,p1r),e(an,VFe),e(VFe,_1r),e(an,u1r),e(Fo,b1r),e(Fo,at),e(at,dM),e(dM,XFe),e(XFe,v1r),e(dM,F1r),e(dM,fU),e(fU,T1r),e(dM,M1r),e(at,E1r),e(at,cM),e(cM,zFe),e(zFe,C1r),e(cM,w1r),e(cM,mU),e(mU,A1r),e(cM,L1r),e(at,y1r),e(at,fM),e(fM,QFe),e(QFe,x1r),e(fM,$1r),e(fM,gU),e(gU,k1r),e(fM,S1r),e(at,R1r),e(at,mM),e(mM,WFe),e(WFe,P1r),e(mM,B1r),e(mM,hU),e(hU,I1r),e(mM,N1r),e(at,q1r),e(at,gM),e(gM,HFe),e(HFe,j1r),e(gM,D1r),e(gM,pU),e(pU,G1r),e(gM,O1r),e(Fo,V1r),e(Fo,hM),e(hM,X1r),e(hM,UFe),e(UFe,z1r),e(hM,Q1r),e(hM,JFe),e(JFe,W1r),e(Fo,H1r),M(pM,Fo,null),b(f,Lze,u),b(f,ac,u),e(ac,_M),e(_M,YFe),M(z9,YFe,null),e(ac,U1r),e(ac,KFe),e(KFe,J1r),b(f,yze,u),b(f,or,u),M(Q9,or,null),e(or,Y1r),e(or,nc),e(nc,K1r),e(nc,_U),e(_U,Z1r),e(nc,ebr),e(nc,uU),e(uU,obr),e(nc,rbr),e(or,tbr),e(or,W9),e(W9,abr),e(W9,ZFe),e(ZFe,nbr),e(W9,sbr),e(or,lbr),e(or,St),M(H9,St,null),e(St,ibr),e(St,eTe),e(eTe,dbr),e(St,cbr),e(St,sc),e(sc,fbr),e(sc,oTe),e(oTe,mbr),e(sc,gbr),e(sc,bU),e(bU,hbr),e(sc,pbr),e(St,_br),M(uM,St,null),e(or,ubr),e(or,To),M(U9,To,null),e(To,bbr),e(To,rTe),e(rTe,vbr),e(To,Fbr),e(To,nn),e(nn,Tbr),e(nn,tTe),e(tTe,Mbr),e(nn,Ebr),e(nn,aTe),e(aTe,Cbr),e(nn,wbr),e(nn,nTe),e(nTe,Abr),e(nn,Lbr),e(To,ybr),e(To,sTe),e(sTe,bM),e(bM,lTe),e(lTe,xbr),e(bM,$br),e(bM,vU),e(vU,kbr),e(bM,Sbr),e(To,Rbr),e(To,vM),e(vM,Pbr),e(vM,iTe),e(iTe,Bbr),e(vM,Ibr),e(vM,dTe),e(dTe,Nbr),e(To,qbr),M(FM,To,null),b(f,xze,u),b(f,lc,u),e(lc,TM),e(TM,cTe),M(J9,cTe,null),e(lc,jbr),e(lc,fTe),e(fTe,Dbr),b(f,$ze,u),b(f,rr,u),M(Y9,rr,null),e(rr,Gbr),e(rr,ic),e(ic,Obr),e(ic,FU),e(FU,Vbr),e(ic,Xbr),e(ic,TU),e(TU,zbr),e(ic,Qbr),e(rr,Wbr),e(rr,K9),e(K9,Hbr),e(K9,mTe),e(mTe,Ubr),e(K9,Jbr),e(rr,Ybr),e(rr,Rt),M(Z9,Rt,null),e(Rt,Kbr),e(Rt,gTe),e(gTe,Zbr),e(Rt,evr),e(Rt,dc),e(dc,ovr),e(dc,hTe),e(hTe,rvr),e(dc,tvr),e(dc,MU),e(MU,avr),e(dc,nvr),e(Rt,svr),M(MM,Rt,null),e(rr,lvr),e(rr,$r),M(ex,$r,null),e($r,ivr),e($r,pTe),e(pTe,dvr),e($r,cvr),e($r,sn),e(sn,fvr),e(sn,_Te),e(_Te,mvr),e(sn,gvr),e(sn,uTe),e(uTe,hvr),e(sn,pvr),e(sn,bTe),e(bTe,_vr),e(sn,uvr),e($r,bvr),e($r,I),e(I,EM),e(EM,vTe),e(vTe,vvr),e(EM,Fvr),e(EM,EU),e(EU,Tvr),e(EM,Mvr),e(I,Evr),e(I,CM),e(CM,FTe),e(FTe,Cvr),e(CM,wvr),e(CM,CU),e(CU,Avr),e(CM,Lvr),e(I,yvr),e(I,wM),e(wM,TTe),e(TTe,xvr),e(wM,$vr),e(wM,wU),e(wU,kvr),e(wM,Svr),e(I,Rvr),e(I,AM),e(AM,MTe),e(MTe,Pvr),e(AM,Bvr),e(AM,AU),e(AU,Ivr),e(AM,Nvr),e(I,qvr),e(I,LM),e(LM,ETe),e(ETe,jvr),e(LM,Dvr),e(LM,LU),e(LU,Gvr),e(LM,Ovr),e(I,Vvr),e(I,yM),e(yM,CTe),e(CTe,Xvr),e(yM,zvr),e(yM,yU),e(yU,Qvr),e(yM,Wvr),e(I,Hvr),e(I,xM),e(xM,wTe),e(wTe,Uvr),e(xM,Jvr),e(xM,xU),e(xU,Yvr),e(xM,Kvr),e(I,Zvr),e(I,$M),e($M,ATe),e(ATe,eFr),e($M,oFr),e($M,$U),e($U,rFr),e($M,tFr),e(I,aFr),e(I,kM),e(kM,LTe),e(LTe,nFr),e(kM,sFr),e(kM,kU),e(kU,lFr),e(kM,iFr),e(I,dFr),e(I,SM),e(SM,yTe),e(yTe,cFr),e(SM,fFr),e(SM,SU),e(SU,mFr),e(SM,gFr),e(I,hFr),e(I,RM),e(RM,xTe),e(xTe,pFr),e(RM,_Fr),e(RM,RU),e(RU,uFr),e(RM,bFr),e(I,vFr),e(I,PM),e(PM,$Te),e($Te,FFr),e(PM,TFr),e(PM,PU),e(PU,MFr),e(PM,EFr),e(I,CFr),e(I,BM),e(BM,kTe),e(kTe,wFr),e(BM,AFr),e(BM,BU),e(BU,LFr),e(BM,yFr),e(I,xFr),e(I,IM),e(IM,STe),e(STe,$Fr),e(IM,kFr),e(IM,IU),e(IU,SFr),e(IM,RFr),e(I,PFr),e(I,NM),e(NM,RTe),e(RTe,BFr),e(NM,IFr),e(NM,NU),e(NU,NFr),e(NM,qFr),e(I,jFr),e(I,qM),e(qM,PTe),e(PTe,DFr),e(qM,GFr),e(qM,qU),e(qU,OFr),e(qM,VFr),e(I,XFr),e(I,jM),e(jM,BTe),e(BTe,zFr),e(jM,QFr),e(jM,jU),e(jU,WFr),e(jM,HFr),e(I,UFr),e(I,DM),e(DM,ITe),e(ITe,JFr),e(DM,YFr),e(DM,DU),e(DU,KFr),e(DM,ZFr),e(I,eTr),e(I,Ys),e(Ys,NTe),e(NTe,oTr),e(Ys,rTr),e(Ys,GU),e(GU,tTr),e(Ys,aTr),e(Ys,OU),e(OU,nTr),e(Ys,sTr),e(I,lTr),e(I,GM),e(GM,qTe),e(qTe,iTr),e(GM,dTr),e(GM,VU),e(VU,cTr),e(GM,fTr),e(I,mTr),e(I,OM),e(OM,jTe),e(jTe,gTr),e(OM,hTr),e(OM,XU),e(XU,pTr),e(OM,_Tr),e(I,uTr),e(I,VM),e(VM,DTe),e(DTe,bTr),e(VM,vTr),e(VM,zU),e(zU,FTr),e(VM,TTr),e(I,MTr),e(I,XM),e(XM,GTe),e(GTe,ETr),e(XM,CTr),e(XM,QU),e(QU,wTr),e(XM,ATr),e(I,LTr),e(I,zM),e(zM,OTe),e(OTe,yTr),e(zM,xTr),e(zM,WU),e(WU,$Tr),e(zM,kTr),e(I,STr),e(I,QM),e(QM,VTe),e(VTe,RTr),e(QM,PTr),e(QM,HU),e(HU,BTr),e(QM,ITr),e(I,NTr),e(I,WM),e(WM,XTe),e(XTe,qTr),e(WM,jTr),e(WM,UU),e(UU,DTr),e(WM,GTr),e(I,OTr),e(I,HM),e(HM,zTe),e(zTe,VTr),e(HM,XTr),e(HM,JU),e(JU,zTr),e(HM,QTr),e(I,WTr),e(I,UM),e(UM,QTe),e(QTe,HTr),e(UM,UTr),e(UM,YU),e(YU,JTr),e(UM,YTr),e(I,KTr),e(I,JM),e(JM,WTe),e(WTe,ZTr),e(JM,e8r),e(JM,KU),e(KU,o8r),e(JM,r8r),e(I,t8r),e(I,YM),e(YM,HTe),e(HTe,a8r),e(YM,n8r),e(YM,ZU),e(ZU,s8r),e(YM,l8r),e(I,i8r),e(I,KM),e(KM,UTe),e(UTe,d8r),e(KM,c8r),e(KM,eJ),e(eJ,f8r),e(KM,m8r),e(I,g8r),e(I,ZM),e(ZM,JTe),e(JTe,h8r),e(ZM,p8r),e(ZM,oJ),e(oJ,_8r),e(ZM,u8r),e(I,b8r),e(I,eE),e(eE,YTe),e(YTe,v8r),e(eE,F8r),e(eE,rJ),e(rJ,T8r),e(eE,M8r),e(I,E8r),e(I,oE),e(oE,KTe),e(KTe,C8r),e(oE,w8r),e(oE,tJ),e(tJ,A8r),e(oE,L8r),e(I,y8r),e(I,rE),e(rE,ZTe),e(ZTe,x8r),e(rE,$8r),e(rE,aJ),e(aJ,k8r),e(rE,S8r),e(I,R8r),e(I,tE),e(tE,e8e),e(e8e,P8r),e(tE,B8r),e(tE,nJ),e(nJ,I8r),e(tE,N8r),e(I,q8r),e(I,aE),e(aE,o8e),e(o8e,j8r),e(aE,D8r),e(aE,sJ),e(sJ,G8r),e(aE,O8r),e(I,V8r),e(I,nE),e(nE,r8e),e(r8e,X8r),e(nE,z8r),e(nE,lJ),e(lJ,Q8r),e(nE,W8r),e(I,H8r),e(I,sE),e(sE,t8e),e(t8e,U8r),e(sE,J8r),e(sE,iJ),e(iJ,Y8r),e(sE,K8r),e(I,Z8r),e(I,lE),e(lE,a8e),e(a8e,eMr),e(lE,oMr),e(lE,dJ),e(dJ,rMr),e(lE,tMr),e(I,aMr),e(I,iE),e(iE,n8e),e(n8e,nMr),e(iE,sMr),e(iE,cJ),e(cJ,lMr),e(iE,iMr),e(I,dMr),e(I,dE),e(dE,s8e),e(s8e,cMr),e(dE,fMr),e(dE,fJ),e(fJ,mMr),e(dE,gMr),e(I,hMr),e(I,cE),e(cE,l8e),e(l8e,pMr),e(cE,_Mr),e(cE,mJ),e(mJ,uMr),e(cE,bMr),e(I,vMr),e(I,fE),e(fE,i8e),e(i8e,FMr),e(fE,TMr),e(fE,gJ),e(gJ,MMr),e(fE,EMr),e(I,CMr),e(I,mE),e(mE,d8e),e(d8e,wMr),e(mE,AMr),e(mE,hJ),e(hJ,LMr),e(mE,yMr),e(I,xMr),e(I,gE),e(gE,c8e),e(c8e,$Mr),e(gE,kMr),e(gE,pJ),e(pJ,SMr),e(gE,RMr),e(I,PMr),e(I,hE),e(hE,f8e),e(f8e,BMr),e(hE,IMr),e(hE,_J),e(_J,NMr),e(hE,qMr),e(I,jMr),e(I,pE),e(pE,m8e),e(m8e,DMr),e(pE,GMr),e(pE,uJ),e(uJ,OMr),e(pE,VMr),e(I,XMr),e(I,_E),e(_E,g8e),e(g8e,zMr),e(_E,QMr),e(_E,bJ),e(bJ,WMr),e(_E,HMr),e(I,UMr),e(I,uE),e(uE,h8e),e(h8e,JMr),e(uE,YMr),e(uE,vJ),e(vJ,KMr),e(uE,ZMr),e(I,eEr),e(I,bE),e(bE,p8e),e(p8e,oEr),e(bE,rEr),e(bE,FJ),e(FJ,tEr),e(bE,aEr),e($r,nEr),M(vE,$r,null),b(f,kze,u),b(f,cc,u),e(cc,FE),e(FE,_8e),M(ox,_8e,null),e(cc,sEr),e(cc,u8e),e(u8e,lEr),b(f,Sze,u),b(f,tr,u),M(rx,tr,null),e(tr,iEr),e(tr,fc),e(fc,dEr),e(fc,TJ),e(TJ,cEr),e(fc,fEr),e(fc,MJ),e(MJ,mEr),e(fc,gEr),e(tr,hEr),e(tr,tx),e(tx,pEr),e(tx,b8e),e(b8e,_Er),e(tx,uEr),e(tr,bEr),e(tr,Pt),M(ax,Pt,null),e(Pt,vEr),e(Pt,v8e),e(v8e,FEr),e(Pt,TEr),e(Pt,mc),e(mc,MEr),e(mc,F8e),e(F8e,EEr),e(mc,CEr),e(mc,EJ),e(EJ,wEr),e(mc,AEr),e(Pt,LEr),M(TE,Pt,null),e(tr,yEr),e(tr,kr),M(nx,kr,null),e(kr,xEr),e(kr,T8e),e(T8e,$Er),e(kr,kEr),e(kr,ln),e(ln,SEr),e(ln,M8e),e(M8e,REr),e(ln,PEr),e(ln,E8e),e(E8e,BEr),e(ln,IEr),e(ln,C8e),e(C8e,NEr),e(ln,qEr),e(kr,jEr),e(kr,se),e(se,ME),e(ME,w8e),e(w8e,DEr),e(ME,GEr),e(ME,CJ),e(CJ,OEr),e(ME,VEr),e(se,XEr),e(se,EE),e(EE,A8e),e(A8e,zEr),e(EE,QEr),e(EE,wJ),e(wJ,WEr),e(EE,HEr),e(se,UEr),e(se,CE),e(CE,L8e),e(L8e,JEr),e(CE,YEr),e(CE,AJ),e(AJ,KEr),e(CE,ZEr),e(se,eCr),e(se,wE),e(wE,y8e),e(y8e,oCr),e(wE,rCr),e(wE,LJ),e(LJ,tCr),e(wE,aCr),e(se,nCr),e(se,AE),e(AE,x8e),e(x8e,sCr),e(AE,lCr),e(AE,yJ),e(yJ,iCr),e(AE,dCr),e(se,cCr),e(se,LE),e(LE,$8e),e($8e,fCr),e(LE,mCr),e(LE,xJ),e(xJ,gCr),e(LE,hCr),e(se,pCr),e(se,yE),e(yE,k8e),e(k8e,_Cr),e(yE,uCr),e(yE,$J),e($J,bCr),e(yE,vCr),e(se,FCr),e(se,xE),e(xE,S8e),e(S8e,TCr),e(xE,MCr),e(xE,kJ),e(kJ,ECr),e(xE,CCr),e(se,wCr),e(se,$E),e($E,R8e),e(R8e,ACr),e($E,LCr),e($E,SJ),e(SJ,yCr),e($E,xCr),e(se,$Cr),e(se,kE),e(kE,P8e),e(P8e,kCr),e(kE,SCr),e(kE,RJ),e(RJ,RCr),e(kE,PCr),e(se,BCr),e(se,SE),e(SE,B8e),e(B8e,ICr),e(SE,NCr),e(SE,PJ),e(PJ,qCr),e(SE,jCr),e(se,DCr),e(se,RE),e(RE,I8e),e(I8e,GCr),e(RE,OCr),e(RE,BJ),e(BJ,VCr),e(RE,XCr),e(se,zCr),e(se,PE),e(PE,N8e),e(N8e,QCr),e(PE,WCr),e(PE,IJ),e(IJ,HCr),e(PE,UCr),e(se,JCr),e(se,BE),e(BE,q8e),e(q8e,YCr),e(BE,KCr),e(BE,NJ),e(NJ,ZCr),e(BE,e3r),e(se,o3r),e(se,IE),e(IE,j8e),e(j8e,r3r),e(IE,t3r),e(IE,qJ),e(qJ,a3r),e(IE,n3r),e(se,s3r),e(se,NE),e(NE,D8e),e(D8e,l3r),e(NE,i3r),e(NE,jJ),e(jJ,d3r),e(NE,c3r),e(se,f3r),e(se,qE),e(qE,G8e),e(G8e,m3r),e(qE,g3r),e(qE,DJ),e(DJ,h3r),e(qE,p3r),e(se,_3r),e(se,jE),e(jE,O8e),e(O8e,u3r),e(jE,b3r),e(jE,GJ),e(GJ,v3r),e(jE,F3r),e(se,T3r),e(se,DE),e(DE,V8e),e(V8e,M3r),e(DE,E3r),e(DE,OJ),e(OJ,C3r),e(DE,w3r),e(se,A3r),e(se,GE),e(GE,X8e),e(X8e,L3r),e(GE,y3r),e(GE,VJ),e(VJ,x3r),e(GE,$3r),e(se,k3r),e(se,OE),e(OE,z8e),e(z8e,S3r),e(OE,R3r),e(OE,XJ),e(XJ,P3r),e(OE,B3r),e(se,I3r),e(se,VE),e(VE,Q8e),e(Q8e,N3r),e(VE,q3r),e(VE,zJ),e(zJ,j3r),e(VE,D3r),e(se,G3r),e(se,XE),e(XE,W8e),e(W8e,O3r),e(XE,V3r),e(XE,QJ),e(QJ,X3r),e(XE,z3r),e(kr,Q3r),M(zE,kr,null),b(f,Rze,u),b(f,gc,u),e(gc,QE),e(QE,H8e),M(sx,H8e,null),e(gc,W3r),e(gc,U8e),e(U8e,H3r),b(f,Pze,u),b(f,ar,u),M(lx,ar,null),e(ar,U3r),e(ar,hc),e(hc,J3r),e(hc,WJ),e(WJ,Y3r),e(hc,K3r),e(hc,HJ),e(HJ,Z3r),e(hc,e5r),e(ar,o5r),e(ar,ix),e(ix,r5r),e(ix,J8e),e(J8e,t5r),e(ix,a5r),e(ar,n5r),e(ar,Bt),M(dx,Bt,null),e(Bt,s5r),e(Bt,Y8e),e(Y8e,l5r),e(Bt,i5r),e(Bt,pc),e(pc,d5r),e(pc,K8e),e(K8e,c5r),e(pc,f5r),e(pc,UJ),e(UJ,m5r),e(pc,g5r),e(Bt,h5r),M(WE,Bt,null),e(ar,p5r),e(ar,Sr),M(cx,Sr,null),e(Sr,_5r),e(Sr,Z8e),e(Z8e,u5r),e(Sr,b5r),e(Sr,dn),e(dn,v5r),e(dn,eMe),e(eMe,F5r),e(dn,T5r),e(dn,oMe),e(oMe,M5r),e(dn,E5r),e(dn,rMe),e(rMe,C5r),e(dn,w5r),e(Sr,A5r),e(Sr,Me),e(Me,HE),e(HE,tMe),e(tMe,L5r),e(HE,y5r),e(HE,JJ),e(JJ,x5r),e(HE,$5r),e(Me,k5r),e(Me,UE),e(UE,aMe),e(aMe,S5r),e(UE,R5r),e(UE,YJ),e(YJ,P5r),e(UE,B5r),e(Me,I5r),e(Me,JE),e(JE,nMe),e(nMe,N5r),e(JE,q5r),e(JE,KJ),e(KJ,j5r),e(JE,D5r),e(Me,G5r),e(Me,YE),e(YE,sMe),e(sMe,O5r),e(YE,V5r),e(YE,ZJ),e(ZJ,X5r),e(YE,z5r),e(Me,Q5r),e(Me,KE),e(KE,lMe),e(lMe,W5r),e(KE,H5r),e(KE,eY),e(eY,U5r),e(KE,J5r),e(Me,Y5r),e(Me,ZE),e(ZE,iMe),e(iMe,K5r),e(ZE,Z5r),e(ZE,oY),e(oY,e0r),e(ZE,o0r),e(Me,r0r),e(Me,eC),e(eC,dMe),e(dMe,t0r),e(eC,a0r),e(eC,rY),e(rY,n0r),e(eC,s0r),e(Me,l0r),e(Me,oC),e(oC,cMe),e(cMe,i0r),e(oC,d0r),e(oC,tY),e(tY,c0r),e(oC,f0r),e(Me,m0r),e(Me,rC),e(rC,fMe),e(fMe,g0r),e(rC,h0r),e(rC,aY),e(aY,p0r),e(rC,_0r),e(Me,u0r),e(Me,tC),e(tC,mMe),e(mMe,b0r),e(tC,v0r),e(tC,nY),e(nY,F0r),e(tC,T0r),e(Me,M0r),e(Me,aC),e(aC,gMe),e(gMe,E0r),e(aC,C0r),e(aC,sY),e(sY,w0r),e(aC,A0r),e(Me,L0r),e(Me,nC),e(nC,hMe),e(hMe,y0r),e(nC,x0r),e(nC,lY),e(lY,$0r),e(nC,k0r),e(Me,S0r),e(Me,sC),e(sC,pMe),e(pMe,R0r),e(sC,P0r),e(sC,iY),e(iY,B0r),e(sC,I0r),e(Sr,N0r),M(lC,Sr,null),b(f,Bze,u),b(f,_c,u),e(_c,iC),e(iC,_Me),M(fx,_Me,null),e(_c,q0r),e(_c,uMe),e(uMe,j0r),b(f,Ize,u),b(f,nr,u),M(mx,nr,null),e(nr,D0r),e(nr,uc),e(uc,G0r),e(uc,dY),e(dY,O0r),e(uc,V0r),e(uc,cY),e(cY,X0r),e(uc,z0r),e(nr,Q0r),e(nr,gx),e(gx,W0r),e(gx,bMe),e(bMe,H0r),e(gx,U0r),e(nr,J0r),e(nr,It),M(hx,It,null),e(It,Y0r),e(It,vMe),e(vMe,K0r),e(It,Z0r),e(It,bc),e(bc,ewr),e(bc,FMe),e(FMe,owr),e(bc,rwr),e(bc,fY),e(fY,twr),e(bc,awr),e(It,nwr),M(dC,It,null),e(nr,swr),e(nr,Rr),M(px,Rr,null),e(Rr,lwr),e(Rr,TMe),e(TMe,iwr),e(Rr,dwr),e(Rr,cn),e(cn,cwr),e(cn,MMe),e(MMe,fwr),e(cn,mwr),e(cn,EMe),e(EMe,gwr),e(cn,hwr),e(cn,CMe),e(CMe,pwr),e(cn,_wr),e(Rr,uwr),e(Rr,Ve),e(Ve,cC),e(cC,wMe),e(wMe,bwr),e(cC,vwr),e(cC,mY),e(mY,Fwr),e(cC,Twr),e(Ve,Mwr),e(Ve,fC),e(fC,AMe),e(AMe,Ewr),e(fC,Cwr),e(fC,gY),e(gY,wwr),e(fC,Awr),e(Ve,Lwr),e(Ve,Ks),e(Ks,LMe),e(LMe,ywr),e(Ks,xwr),e(Ks,hY),e(hY,$wr),e(Ks,kwr),e(Ks,pY),e(pY,Swr),e(Ks,Rwr),e(Ve,Pwr),e(Ve,mC),e(mC,yMe),e(yMe,Bwr),e(mC,Iwr),e(mC,_Y),e(_Y,Nwr),e(mC,qwr),e(Ve,jwr),e(Ve,gC),e(gC,xMe),e(xMe,Dwr),e(gC,Gwr),e(gC,uY),e(uY,Owr),e(gC,Vwr),e(Ve,Xwr),e(Ve,hC),e(hC,$Me),e($Me,zwr),e(hC,Qwr),e(hC,bY),e(bY,Wwr),e(hC,Hwr),e(Ve,Uwr),e(Ve,pC),e(pC,kMe),e(kMe,Jwr),e(pC,Ywr),e(pC,vY),e(vY,Kwr),e(pC,Zwr),e(Ve,eAr),e(Ve,_C),e(_C,SMe),e(SMe,oAr),e(_C,rAr),e(_C,FY),e(FY,tAr),e(_C,aAr),e(Rr,nAr),M(uC,Rr,null),b(f,Nze,u),b(f,vc,u),e(vc,bC),e(bC,RMe),M(_x,RMe,null),e(vc,sAr),e(vc,PMe),e(PMe,lAr),b(f,qze,u),b(f,sr,u),M(ux,sr,null),e(sr,iAr),e(sr,Fc),e(Fc,dAr),e(Fc,TY),e(TY,cAr),e(Fc,fAr),e(Fc,MY),e(MY,mAr),e(Fc,gAr),e(sr,hAr),e(sr,bx),e(bx,pAr),e(bx,BMe),e(BMe,_Ar),e(bx,uAr),e(sr,bAr),e(sr,Nt),M(vx,Nt,null),e(Nt,vAr),e(Nt,IMe),e(IMe,FAr),e(Nt,TAr),e(Nt,Tc),e(Tc,MAr),e(Tc,NMe),e(NMe,EAr),e(Tc,CAr),e(Tc,EY),e(EY,wAr),e(Tc,AAr),e(Nt,LAr),M(vC,Nt,null),e(sr,yAr),e(sr,Pr),M(Fx,Pr,null),e(Pr,xAr),e(Pr,qMe),e(qMe,$Ar),e(Pr,kAr),e(Pr,fn),e(fn,SAr),e(fn,jMe),e(jMe,RAr),e(fn,PAr),e(fn,DMe),e(DMe,BAr),e(fn,IAr),e(fn,GMe),e(GMe,NAr),e(fn,qAr),e(Pr,jAr),e(Pr,ie),e(ie,FC),e(FC,OMe),e(OMe,DAr),e(FC,GAr),e(FC,CY),e(CY,OAr),e(FC,VAr),e(ie,XAr),e(ie,TC),e(TC,VMe),e(VMe,zAr),e(TC,QAr),e(TC,wY),e(wY,WAr),e(TC,HAr),e(ie,UAr),e(ie,MC),e(MC,XMe),e(XMe,JAr),e(MC,YAr),e(MC,AY),e(AY,KAr),e(MC,ZAr),e(ie,e6r),e(ie,EC),e(EC,zMe),e(zMe,o6r),e(EC,r6r),e(EC,LY),e(LY,t6r),e(EC,a6r),e(ie,n6r),e(ie,CC),e(CC,QMe),e(QMe,s6r),e(CC,l6r),e(CC,yY),e(yY,i6r),e(CC,d6r),e(ie,c6r),e(ie,wC),e(wC,WMe),e(WMe,f6r),e(wC,m6r),e(wC,xY),e(xY,g6r),e(wC,h6r),e(ie,p6r),e(ie,AC),e(AC,HMe),e(HMe,_6r),e(AC,u6r),e(AC,$Y),e($Y,b6r),e(AC,v6r),e(ie,F6r),e(ie,LC),e(LC,UMe),e(UMe,T6r),e(LC,M6r),e(LC,kY),e(kY,E6r),e(LC,C6r),e(ie,w6r),e(ie,yC),e(yC,JMe),e(JMe,A6r),e(yC,L6r),e(yC,SY),e(SY,y6r),e(yC,x6r),e(ie,$6r),e(ie,xC),e(xC,YMe),e(YMe,k6r),e(xC,S6r),e(xC,RY),e(RY,R6r),e(xC,P6r),e(ie,B6r),e(ie,$C),e($C,KMe),e(KMe,I6r),e($C,N6r),e($C,PY),e(PY,q6r),e($C,j6r),e(ie,D6r),e(ie,kC),e(kC,ZMe),e(ZMe,G6r),e(kC,O6r),e(kC,BY),e(BY,V6r),e(kC,X6r),e(ie,z6r),e(ie,SC),e(SC,eEe),e(eEe,Q6r),e(SC,W6r),e(SC,IY),e(IY,H6r),e(SC,U6r),e(ie,J6r),e(ie,RC),e(RC,oEe),e(oEe,Y6r),e(RC,K6r),e(RC,NY),e(NY,Z6r),e(RC,e7r),e(ie,o7r),e(ie,PC),e(PC,rEe),e(rEe,r7r),e(PC,t7r),e(PC,qY),e(qY,a7r),e(PC,n7r),e(ie,s7r),e(ie,BC),e(BC,tEe),e(tEe,l7r),e(BC,i7r),e(BC,jY),e(jY,d7r),e(BC,c7r),e(ie,f7r),e(ie,IC),e(IC,aEe),e(aEe,m7r),e(IC,g7r),e(IC,DY),e(DY,h7r),e(IC,p7r),e(ie,_7r),e(ie,NC),e(NC,nEe),e(nEe,u7r),e(NC,b7r),e(NC,GY),e(GY,v7r),e(NC,F7r),e(ie,T7r),e(ie,qC),e(qC,sEe),e(sEe,M7r),e(qC,E7r),e(qC,OY),e(OY,C7r),e(qC,w7r),e(ie,A7r),e(ie,jC),e(jC,lEe),e(lEe,L7r),e(jC,y7r),e(jC,VY),e(VY,x7r),e(jC,$7r),e(Pr,k7r),M(DC,Pr,null),b(f,jze,u),b(f,Mc,u),e(Mc,GC),e(GC,iEe),M(Tx,iEe,null),e(Mc,S7r),e(Mc,dEe),e(dEe,R7r),b(f,Dze,u),b(f,lr,u),M(Mx,lr,null),e(lr,P7r),e(lr,Ec),e(Ec,B7r),e(Ec,XY),e(XY,I7r),e(Ec,N7r),e(Ec,zY),e(zY,q7r),e(Ec,j7r),e(lr,D7r),e(lr,Ex),e(Ex,G7r),e(Ex,cEe),e(cEe,O7r),e(Ex,V7r),e(lr,X7r),e(lr,qt),M(Cx,qt,null),e(qt,z7r),e(qt,fEe),e(fEe,Q7r),e(qt,W7r),e(qt,Cc),e(Cc,H7r),e(Cc,mEe),e(mEe,U7r),e(Cc,J7r),e(Cc,QY),e(QY,Y7r),e(Cc,K7r),e(qt,Z7r),M(OC,qt,null),e(lr,eLr),e(lr,Br),M(wx,Br,null),e(Br,oLr),e(Br,gEe),e(gEe,rLr),e(Br,tLr),e(Br,mn),e(mn,aLr),e(mn,hEe),e(hEe,nLr),e(mn,sLr),e(mn,pEe),e(pEe,lLr),e(mn,iLr),e(mn,_Ee),e(_Ee,dLr),e(mn,cLr),e(Br,fLr),e(Br,ye),e(ye,VC),e(VC,uEe),e(uEe,mLr),e(VC,gLr),e(VC,WY),e(WY,hLr),e(VC,pLr),e(ye,_Lr),e(ye,XC),e(XC,bEe),e(bEe,uLr),e(XC,bLr),e(XC,HY),e(HY,vLr),e(XC,FLr),e(ye,TLr),e(ye,zC),e(zC,vEe),e(vEe,MLr),e(zC,ELr),e(zC,UY),e(UY,CLr),e(zC,wLr),e(ye,ALr),e(ye,QC),e(QC,FEe),e(FEe,LLr),e(QC,yLr),e(QC,JY),e(JY,xLr),e(QC,$Lr),e(ye,kLr),e(ye,WC),e(WC,TEe),e(TEe,SLr),e(WC,RLr),e(WC,YY),e(YY,PLr),e(WC,BLr),e(ye,ILr),e(ye,HC),e(HC,MEe),e(MEe,NLr),e(HC,qLr),e(HC,KY),e(KY,jLr),e(HC,DLr),e(ye,GLr),e(ye,UC),e(UC,EEe),e(EEe,OLr),e(UC,VLr),e(UC,ZY),e(ZY,XLr),e(UC,zLr),e(ye,QLr),e(ye,JC),e(JC,CEe),e(CEe,WLr),e(JC,HLr),e(JC,eK),e(eK,ULr),e(JC,JLr),e(ye,YLr),e(ye,YC),e(YC,wEe),e(wEe,KLr),e(YC,ZLr),e(YC,oK),e(oK,eyr),e(YC,oyr),e(ye,ryr),e(ye,KC),e(KC,AEe),e(AEe,tyr),e(KC,ayr),e(KC,rK),e(rK,nyr),e(KC,syr),e(Br,lyr),M(ZC,Br,null),b(f,Gze,u),b(f,wc,u),e(wc,e3),e(e3,LEe),M(Ax,LEe,null),e(wc,iyr),e(wc,yEe),e(yEe,dyr),b(f,Oze,u),b(f,ir,u),M(Lx,ir,null),e(ir,cyr),e(ir,Ac),e(Ac,fyr),e(Ac,tK),e(tK,myr),e(Ac,gyr),e(Ac,aK),e(aK,hyr),e(Ac,pyr),e(ir,_yr),e(ir,yx),e(yx,uyr),e(yx,xEe),e(xEe,byr),e(yx,vyr),e(ir,Fyr),e(ir,jt),M(xx,jt,null),e(jt,Tyr),e(jt,$Ee),e($Ee,Myr),e(jt,Eyr),e(jt,Lc),e(Lc,Cyr),e(Lc,kEe),e(kEe,wyr),e(Lc,Ayr),e(Lc,nK),e(nK,Lyr),e(Lc,yyr),e(jt,xyr),M(o3,jt,null),e(ir,$yr),e(ir,Ir),M($x,Ir,null),e(Ir,kyr),e(Ir,SEe),e(SEe,Syr),e(Ir,Ryr),e(Ir,gn),e(gn,Pyr),e(gn,REe),e(REe,Byr),e(gn,Iyr),e(gn,PEe),e(PEe,Nyr),e(gn,qyr),e(gn,BEe),e(BEe,jyr),e(gn,Dyr),e(Ir,Gyr),e(Ir,te),e(te,r3),e(r3,IEe),e(IEe,Oyr),e(r3,Vyr),e(r3,sK),e(sK,Xyr),e(r3,zyr),e(te,Qyr),e(te,t3),e(t3,NEe),e(NEe,Wyr),e(t3,Hyr),e(t3,lK),e(lK,Uyr),e(t3,Jyr),e(te,Yyr),e(te,a3),e(a3,qEe),e(qEe,Kyr),e(a3,Zyr),e(a3,iK),e(iK,e9r),e(a3,o9r),e(te,r9r),e(te,n3),e(n3,jEe),e(jEe,t9r),e(n3,a9r),e(n3,dK),e(dK,n9r),e(n3,s9r),e(te,l9r),e(te,s3),e(s3,DEe),e(DEe,i9r),e(s3,d9r),e(s3,cK),e(cK,c9r),e(s3,f9r),e(te,m9r),e(te,l3),e(l3,GEe),e(GEe,g9r),e(l3,h9r),e(l3,fK),e(fK,p9r),e(l3,_9r),e(te,u9r),e(te,i3),e(i3,OEe),e(OEe,b9r),e(i3,v9r),e(i3,mK),e(mK,F9r),e(i3,T9r),e(te,M9r),e(te,d3),e(d3,VEe),e(VEe,E9r),e(d3,C9r),e(d3,gK),e(gK,w9r),e(d3,A9r),e(te,L9r),e(te,c3),e(c3,XEe),e(XEe,y9r),e(c3,x9r),e(c3,hK),e(hK,$9r),e(c3,k9r),e(te,S9r),e(te,f3),e(f3,zEe),e(zEe,R9r),e(f3,P9r),e(f3,pK),e(pK,B9r),e(f3,I9r),e(te,N9r),e(te,m3),e(m3,QEe),e(QEe,q9r),e(m3,j9r),e(m3,_K),e(_K,D9r),e(m3,G9r),e(te,O9r),e(te,g3),e(g3,WEe),e(WEe,V9r),e(g3,X9r),e(g3,uK),e(uK,z9r),e(g3,Q9r),e(te,W9r),e(te,h3),e(h3,HEe),e(HEe,H9r),e(h3,U9r),e(h3,bK),e(bK,J9r),e(h3,Y9r),e(te,K9r),e(te,p3),e(p3,UEe),e(UEe,Z9r),e(p3,exr),e(p3,vK),e(vK,oxr),e(p3,rxr),e(te,txr),e(te,_3),e(_3,JEe),e(JEe,axr),e(_3,nxr),e(_3,FK),e(FK,sxr),e(_3,lxr),e(te,ixr),e(te,u3),e(u3,YEe),e(YEe,dxr),e(u3,cxr),e(u3,TK),e(TK,fxr),e(u3,mxr),e(te,gxr),e(te,b3),e(b3,KEe),e(KEe,hxr),e(b3,pxr),e(b3,MK),e(MK,_xr),e(b3,uxr),e(te,bxr),e(te,v3),e(v3,ZEe),e(ZEe,vxr),e(v3,Fxr),e(v3,EK),e(EK,Txr),e(v3,Mxr),e(te,Exr),e(te,F3),e(F3,eCe),e(eCe,Cxr),e(F3,wxr),e(F3,CK),e(CK,Axr),e(F3,Lxr),e(te,yxr),e(te,T3),e(T3,oCe),e(oCe,xxr),e(T3,$xr),e(T3,wK),e(wK,kxr),e(T3,Sxr),e(te,Rxr),e(te,M3),e(M3,rCe),e(rCe,Pxr),e(M3,Bxr),e(M3,AK),e(AK,Ixr),e(M3,Nxr),e(te,qxr),e(te,E3),e(E3,tCe),e(tCe,jxr),e(E3,Dxr),e(E3,LK),e(LK,Gxr),e(E3,Oxr),e(te,Vxr),e(te,C3),e(C3,aCe),e(aCe,Xxr),e(C3,zxr),e(C3,yK),e(yK,Qxr),e(C3,Wxr),e(te,Hxr),e(te,w3),e(w3,nCe),e(nCe,Uxr),e(w3,Jxr),e(w3,xK),e(xK,Yxr),e(w3,Kxr),e(te,Zxr),e(te,A3),e(A3,sCe),e(sCe,e$r),e(A3,o$r),e(A3,$K),e($K,r$r),e(A3,t$r),e(te,a$r),e(te,L3),e(L3,lCe),e(lCe,n$r),e(L3,s$r),e(L3,kK),e(kK,l$r),e(L3,i$r),e(Ir,d$r),M(y3,Ir,null),b(f,Vze,u),b(f,yc,u),e(yc,x3),e(x3,iCe),M(kx,iCe,null),e(yc,c$r),e(yc,dCe),e(dCe,f$r),b(f,Xze,u),b(f,dr,u),M(Sx,dr,null),e(dr,m$r),e(dr,xc),e(xc,g$r),e(xc,SK),e(SK,h$r),e(xc,p$r),e(xc,RK),e(RK,_$r),e(xc,u$r),e(dr,b$r),e(dr,Rx),e(Rx,v$r),e(Rx,cCe),e(cCe,F$r),e(Rx,T$r),e(dr,M$r),e(dr,Dt),M(Px,Dt,null),e(Dt,E$r),e(Dt,fCe),e(fCe,C$r),e(Dt,w$r),e(Dt,$c),e($c,A$r),e($c,mCe),e(mCe,L$r),e($c,y$r),e($c,PK),e(PK,x$r),e($c,$$r),e(Dt,k$r),M($3,Dt,null),e(dr,S$r),e(dr,Nr),M(Bx,Nr,null),e(Nr,R$r),e(Nr,gCe),e(gCe,P$r),e(Nr,B$r),e(Nr,hn),e(hn,I$r),e(hn,hCe),e(hCe,N$r),e(hn,q$r),e(hn,pCe),e(pCe,j$r),e(hn,D$r),e(hn,_Ce),e(_Ce,G$r),e(hn,O$r),e(Nr,V$r),e(Nr,ue),e(ue,k3),e(k3,uCe),e(uCe,X$r),e(k3,z$r),e(k3,BK),e(BK,Q$r),e(k3,W$r),e(ue,H$r),e(ue,S3),e(S3,bCe),e(bCe,U$r),e(S3,J$r),e(S3,IK),e(IK,Y$r),e(S3,K$r),e(ue,Z$r),e(ue,R3),e(R3,vCe),e(vCe,ekr),e(R3,okr),e(R3,NK),e(NK,rkr),e(R3,tkr),e(ue,akr),e(ue,P3),e(P3,FCe),e(FCe,nkr),e(P3,skr),e(P3,qK),e(qK,lkr),e(P3,ikr),e(ue,dkr),e(ue,B3),e(B3,TCe),e(TCe,ckr),e(B3,fkr),e(B3,jK),e(jK,mkr),e(B3,gkr),e(ue,hkr),e(ue,I3),e(I3,MCe),e(MCe,pkr),e(I3,_kr),e(I3,DK),e(DK,ukr),e(I3,bkr),e(ue,vkr),e(ue,N3),e(N3,ECe),e(ECe,Fkr),e(N3,Tkr),e(N3,GK),e(GK,Mkr),e(N3,Ekr),e(ue,Ckr),e(ue,q3),e(q3,CCe),e(CCe,wkr),e(q3,Akr),e(q3,OK),e(OK,Lkr),e(q3,ykr),e(ue,xkr),e(ue,j3),e(j3,wCe),e(wCe,$kr),e(j3,kkr),e(j3,VK),e(VK,Skr),e(j3,Rkr),e(ue,Pkr),e(ue,D3),e(D3,ACe),e(ACe,Bkr),e(D3,Ikr),e(D3,XK),e(XK,Nkr),e(D3,qkr),e(ue,jkr),e(ue,G3),e(G3,LCe),e(LCe,Dkr),e(G3,Gkr),e(G3,zK),e(zK,Okr),e(G3,Vkr),e(ue,Xkr),e(ue,O3),e(O3,yCe),e(yCe,zkr),e(O3,Qkr),e(O3,QK),e(QK,Wkr),e(O3,Hkr),e(ue,Ukr),e(ue,V3),e(V3,xCe),e(xCe,Jkr),e(V3,Ykr),e(V3,WK),e(WK,Kkr),e(V3,Zkr),e(ue,eSr),e(ue,X3),e(X3,$Ce),e($Ce,oSr),e(X3,rSr),e(X3,HK),e(HK,tSr),e(X3,aSr),e(ue,nSr),e(ue,z3),e(z3,kCe),e(kCe,sSr),e(z3,lSr),e(z3,UK),e(UK,iSr),e(z3,dSr),e(ue,cSr),e(ue,Q3),e(Q3,SCe),e(SCe,fSr),e(Q3,mSr),e(Q3,JK),e(JK,gSr),e(Q3,hSr),e(ue,pSr),e(ue,W3),e(W3,RCe),e(RCe,_Sr),e(W3,uSr),e(W3,YK),e(YK,bSr),e(W3,vSr),e(Nr,FSr),M(H3,Nr,null),b(f,zze,u),b(f,kc,u),e(kc,U3),e(U3,PCe),M(Ix,PCe,null),e(kc,TSr),e(kc,BCe),e(BCe,MSr),b(f,Qze,u),b(f,cr,u),M(Nx,cr,null),e(cr,ESr),e(cr,Sc),e(Sc,CSr),e(Sc,KK),e(KK,wSr),e(Sc,ASr),e(Sc,ZK),e(ZK,LSr),e(Sc,ySr),e(cr,xSr),e(cr,qx),e(qx,$Sr),e(qx,ICe),e(ICe,kSr),e(qx,SSr),e(cr,RSr),e(cr,Gt),M(jx,Gt,null),e(Gt,PSr),e(Gt,NCe),e(NCe,BSr),e(Gt,ISr),e(Gt,Rc),e(Rc,NSr),e(Rc,qCe),e(qCe,qSr),e(Rc,jSr),e(Rc,eZ),e(eZ,DSr),e(Rc,GSr),e(Gt,OSr),M(J3,Gt,null),e(cr,VSr),e(cr,qr),M(Dx,qr,null),e(qr,XSr),e(qr,jCe),e(jCe,zSr),e(qr,QSr),e(qr,pn),e(pn,WSr),e(pn,DCe),e(DCe,HSr),e(pn,USr),e(pn,GCe),e(GCe,JSr),e(pn,YSr),e(pn,OCe),e(OCe,KSr),e(pn,ZSr),e(qr,eRr),e(qr,Gx),e(Gx,Y3),e(Y3,VCe),e(VCe,oRr),e(Y3,rRr),e(Y3,oZ),e(oZ,tRr),e(Y3,aRr),e(Gx,nRr),e(Gx,K3),e(K3,XCe),e(XCe,sRr),e(K3,lRr),e(K3,rZ),e(rZ,iRr),e(K3,dRr),e(qr,cRr),M(Z3,qr,null),b(f,Wze,u),b(f,Pc,u),e(Pc,e5),e(e5,zCe),M(Ox,zCe,null),e(Pc,fRr),e(Pc,QCe),e(QCe,mRr),b(f,Hze,u),b(f,fr,u),M(Vx,fr,null),e(fr,gRr),e(fr,Bc),e(Bc,hRr),e(Bc,tZ),e(tZ,pRr),e(Bc,_Rr),e(Bc,aZ),e(aZ,uRr),e(Bc,bRr),e(fr,vRr),e(fr,Xx),e(Xx,FRr),e(Xx,WCe),e(WCe,TRr),e(Xx,MRr),e(fr,ERr),e(fr,Ot),M(zx,Ot,null),e(Ot,CRr),e(Ot,HCe),e(HCe,wRr),e(Ot,ARr),e(Ot,Ic),e(Ic,LRr),e(Ic,UCe),e(UCe,yRr),e(Ic,xRr),e(Ic,nZ),e(nZ,$Rr),e(Ic,kRr),e(Ot,SRr),M(o5,Ot,null),e(fr,RRr),e(fr,jr),M(Qx,jr,null),e(jr,PRr),e(jr,JCe),e(JCe,BRr),e(jr,IRr),e(jr,_n),e(_n,NRr),e(_n,YCe),e(YCe,qRr),e(_n,jRr),e(_n,KCe),e(KCe,DRr),e(_n,GRr),e(_n,ZCe),e(ZCe,ORr),e(_n,VRr),e(jr,XRr),e(jr,e3e),e(e3e,r5),e(r5,o3e),e(o3e,zRr),e(r5,QRr),e(r5,sZ),e(sZ,WRr),e(r5,HRr),e(jr,URr),M(t5,jr,null),b(f,Uze,u),b(f,Nc,u),e(Nc,a5),e(a5,r3e),M(Wx,r3e,null),e(Nc,JRr),e(Nc,t3e),e(t3e,YRr),b(f,Jze,u),b(f,mr,u),M(Hx,mr,null),e(mr,KRr),e(mr,qc),e(qc,ZRr),e(qc,lZ),e(lZ,ePr),e(qc,oPr),e(qc,iZ),e(iZ,rPr),e(qc,tPr),e(mr,aPr),e(mr,Ux),e(Ux,nPr),e(Ux,a3e),e(a3e,sPr),e(Ux,lPr),e(mr,iPr),e(mr,Vt),M(Jx,Vt,null),e(Vt,dPr),e(Vt,n3e),e(n3e,cPr),e(Vt,fPr),e(Vt,jc),e(jc,mPr),e(jc,s3e),e(s3e,gPr),e(jc,hPr),e(jc,dZ),e(dZ,pPr),e(jc,_Pr),e(Vt,uPr),M(n5,Vt,null),e(mr,bPr),e(mr,Dr),M(Yx,Dr,null),e(Dr,vPr),e(Dr,l3e),e(l3e,FPr),e(Dr,TPr),e(Dr,un),e(un,MPr),e(un,i3e),e(i3e,EPr),e(un,CPr),e(un,d3e),e(d3e,wPr),e(un,APr),e(un,c3e),e(c3e,LPr),e(un,yPr),e(Dr,xPr),e(Dr,de),e(de,s5),e(s5,f3e),e(f3e,$Pr),e(s5,kPr),e(s5,cZ),e(cZ,SPr),e(s5,RPr),e(de,PPr),e(de,l5),e(l5,m3e),e(m3e,BPr),e(l5,IPr),e(l5,fZ),e(fZ,NPr),e(l5,qPr),e(de,jPr),e(de,i5),e(i5,g3e),e(g3e,DPr),e(i5,GPr),e(i5,mZ),e(mZ,OPr),e(i5,VPr),e(de,XPr),e(de,d5),e(d5,h3e),e(h3e,zPr),e(d5,QPr),e(d5,gZ),e(gZ,WPr),e(d5,HPr),e(de,UPr),e(de,c5),e(c5,p3e),e(p3e,JPr),e(c5,YPr),e(c5,hZ),e(hZ,KPr),e(c5,ZPr),e(de,eBr),e(de,f5),e(f5,_3e),e(_3e,oBr),e(f5,rBr),e(f5,pZ),e(pZ,tBr),e(f5,aBr),e(de,nBr),e(de,m5),e(m5,u3e),e(u3e,sBr),e(m5,lBr),e(m5,_Z),e(_Z,iBr),e(m5,dBr),e(de,cBr),e(de,g5),e(g5,b3e),e(b3e,fBr),e(g5,mBr),e(g5,uZ),e(uZ,gBr),e(g5,hBr),e(de,pBr),e(de,h5),e(h5,v3e),e(v3e,_Br),e(h5,uBr),e(h5,bZ),e(bZ,bBr),e(h5,vBr),e(de,FBr),e(de,p5),e(p5,F3e),e(F3e,TBr),e(p5,MBr),e(p5,vZ),e(vZ,EBr),e(p5,CBr),e(de,wBr),e(de,_5),e(_5,T3e),e(T3e,ABr),e(_5,LBr),e(_5,FZ),e(FZ,yBr),e(_5,xBr),e(de,$Br),e(de,u5),e(u5,M3e),e(M3e,kBr),e(u5,SBr),e(u5,TZ),e(TZ,RBr),e(u5,PBr),e(de,BBr),e(de,b5),e(b5,E3e),e(E3e,IBr),e(b5,NBr),e(b5,MZ),e(MZ,qBr),e(b5,jBr),e(de,DBr),e(de,v5),e(v5,C3e),e(C3e,GBr),e(v5,OBr),e(v5,EZ),e(EZ,VBr),e(v5,XBr),e(de,zBr),e(de,F5),e(F5,w3e),e(w3e,QBr),e(F5,WBr),e(F5,CZ),e(CZ,HBr),e(F5,UBr),e(de,JBr),e(de,T5),e(T5,A3e),e(A3e,YBr),e(T5,KBr),e(T5,wZ),e(wZ,ZBr),e(T5,eIr),e(de,oIr),e(de,M5),e(M5,L3e),e(L3e,rIr),e(M5,tIr),e(M5,AZ),e(AZ,aIr),e(M5,nIr),e(de,sIr),e(de,E5),e(E5,y3e),e(y3e,lIr),e(E5,iIr),e(E5,LZ),e(LZ,dIr),e(E5,cIr),e(de,fIr),e(de,C5),e(C5,x3e),e(x3e,mIr),e(C5,gIr),e(C5,yZ),e(yZ,hIr),e(C5,pIr),e(de,_Ir),e(de,w5),e(w5,$3e),e($3e,uIr),e(w5,bIr),e(w5,xZ),e(xZ,vIr),e(w5,FIr),e(Dr,TIr),M(A5,Dr,null),b(f,Yze,u),b(f,Dc,u),e(Dc,L5),e(L5,k3e),M(Kx,k3e,null),e(Dc,MIr),e(Dc,S3e),e(S3e,EIr),b(f,Kze,u),b(f,gr,u),M(Zx,gr,null),e(gr,CIr),e(gr,Gc),e(Gc,wIr),e(Gc,$Z),e($Z,AIr),e(Gc,LIr),e(Gc,kZ),e(kZ,yIr),e(Gc,xIr),e(gr,$Ir),e(gr,e$),e(e$,kIr),e(e$,R3e),e(R3e,SIr),e(e$,RIr),e(gr,PIr),e(gr,Xt),M(o$,Xt,null),e(Xt,BIr),e(Xt,P3e),e(P3e,IIr),e(Xt,NIr),e(Xt,Oc),e(Oc,qIr),e(Oc,B3e),e(B3e,jIr),e(Oc,DIr),e(Oc,SZ),e(SZ,GIr),e(Oc,OIr),e(Xt,VIr),M(y5,Xt,null),e(gr,XIr),e(gr,Gr),M(r$,Gr,null),e(Gr,zIr),e(Gr,I3e),e(I3e,QIr),e(Gr,WIr),e(Gr,bn),e(bn,HIr),e(bn,N3e),e(N3e,UIr),e(bn,JIr),e(bn,q3e),e(q3e,YIr),e(bn,KIr),e(bn,j3e),e(j3e,ZIr),e(bn,eNr),e(Gr,oNr),e(Gr,ce),e(ce,x5),e(x5,D3e),e(D3e,rNr),e(x5,tNr),e(x5,RZ),e(RZ,aNr),e(x5,nNr),e(ce,sNr),e(ce,$5),e($5,G3e),e(G3e,lNr),e($5,iNr),e($5,PZ),e(PZ,dNr),e($5,cNr),e(ce,fNr),e(ce,k5),e(k5,O3e),e(O3e,mNr),e(k5,gNr),e(k5,BZ),e(BZ,hNr),e(k5,pNr),e(ce,_Nr),e(ce,S5),e(S5,V3e),e(V3e,uNr),e(S5,bNr),e(S5,IZ),e(IZ,vNr),e(S5,FNr),e(ce,TNr),e(ce,R5),e(R5,X3e),e(X3e,MNr),e(R5,ENr),e(R5,NZ),e(NZ,CNr),e(R5,wNr),e(ce,ANr),e(ce,P5),e(P5,z3e),e(z3e,LNr),e(P5,yNr),e(P5,qZ),e(qZ,xNr),e(P5,$Nr),e(ce,kNr),e(ce,B5),e(B5,Q3e),e(Q3e,SNr),e(B5,RNr),e(B5,jZ),e(jZ,PNr),e(B5,BNr),e(ce,INr),e(ce,I5),e(I5,W3e),e(W3e,NNr),e(I5,qNr),e(I5,DZ),e(DZ,jNr),e(I5,DNr),e(ce,GNr),e(ce,N5),e(N5,H3e),e(H3e,ONr),e(N5,VNr),e(N5,GZ),e(GZ,XNr),e(N5,zNr),e(ce,QNr),e(ce,q5),e(q5,U3e),e(U3e,WNr),e(q5,HNr),e(q5,OZ),e(OZ,UNr),e(q5,JNr),e(ce,YNr),e(ce,j5),e(j5,J3e),e(J3e,KNr),e(j5,ZNr),e(j5,VZ),e(VZ,eqr),e(j5,oqr),e(ce,rqr),e(ce,D5),e(D5,Y3e),e(Y3e,tqr),e(D5,aqr),e(D5,XZ),e(XZ,nqr),e(D5,sqr),e(ce,lqr),e(ce,G5),e(G5,K3e),e(K3e,iqr),e(G5,dqr),e(G5,zZ),e(zZ,cqr),e(G5,fqr),e(ce,mqr),e(ce,O5),e(O5,Z3e),e(Z3e,gqr),e(O5,hqr),e(O5,QZ),e(QZ,pqr),e(O5,_qr),e(ce,uqr),e(ce,V5),e(V5,e5e),e(e5e,bqr),e(V5,vqr),e(V5,WZ),e(WZ,Fqr),e(V5,Tqr),e(ce,Mqr),e(ce,X5),e(X5,o5e),e(o5e,Eqr),e(X5,Cqr),e(X5,HZ),e(HZ,wqr),e(X5,Aqr),e(ce,Lqr),e(ce,z5),e(z5,r5e),e(r5e,yqr),e(z5,xqr),e(z5,UZ),e(UZ,$qr),e(z5,kqr),e(ce,Sqr),e(ce,Q5),e(Q5,t5e),e(t5e,Rqr),e(Q5,Pqr),e(Q5,JZ),e(JZ,Bqr),e(Q5,Iqr),e(ce,Nqr),e(ce,W5),e(W5,a5e),e(a5e,qqr),e(W5,jqr),e(W5,YZ),e(YZ,Dqr),e(W5,Gqr),e(ce,Oqr),e(ce,H5),e(H5,n5e),e(n5e,Vqr),e(H5,Xqr),e(H5,KZ),e(KZ,zqr),e(H5,Qqr),e(Gr,Wqr),M(U5,Gr,null),b(f,Zze,u),b(f,Vc,u),e(Vc,J5),e(J5,s5e),M(t$,s5e,null),e(Vc,Hqr),e(Vc,l5e),e(l5e,Uqr),b(f,eQe,u),b(f,hr,u),M(a$,hr,null),e(hr,Jqr),e(hr,Xc),e(Xc,Yqr),e(Xc,ZZ),e(ZZ,Kqr),e(Xc,Zqr),e(Xc,eee),e(eee,ejr),e(Xc,ojr),e(hr,rjr),e(hr,n$),e(n$,tjr),e(n$,i5e),e(i5e,ajr),e(n$,njr),e(hr,sjr),e(hr,zt),M(s$,zt,null),e(zt,ljr),e(zt,d5e),e(d5e,ijr),e(zt,djr),e(zt,zc),e(zc,cjr),e(zc,c5e),e(c5e,fjr),e(zc,mjr),e(zc,oee),e(oee,gjr),e(zc,hjr),e(zt,pjr),M(Y5,zt,null),e(hr,_jr),e(hr,Or),M(l$,Or,null),e(Or,ujr),e(Or,f5e),e(f5e,bjr),e(Or,vjr),e(Or,vn),e(vn,Fjr),e(vn,m5e),e(m5e,Tjr),e(vn,Mjr),e(vn,g5e),e(g5e,Ejr),e(vn,Cjr),e(vn,h5e),e(h5e,wjr),e(vn,Ajr),e(Or,Ljr),e(Or,p5e),e(p5e,K5),e(K5,_5e),e(_5e,yjr),e(K5,xjr),e(K5,ree),e(ree,$jr),e(K5,kjr),e(Or,Sjr),M(Z5,Or,null),b(f,oQe,u),b(f,Qc,u),e(Qc,e0),e(e0,u5e),M(i$,u5e,null),e(Qc,Rjr),e(Qc,b5e),e(b5e,Pjr),b(f,rQe,u),b(f,pr,u),M(d$,pr,null),e(pr,Bjr),e(pr,Wc),e(Wc,Ijr),e(Wc,tee),e(tee,Njr),e(Wc,qjr),e(Wc,aee),e(aee,jjr),e(Wc,Djr),e(pr,Gjr),e(pr,c$),e(c$,Ojr),e(c$,v5e),e(v5e,Vjr),e(c$,Xjr),e(pr,zjr),e(pr,Qt),M(f$,Qt,null),e(Qt,Qjr),e(Qt,F5e),e(F5e,Wjr),e(Qt,Hjr),e(Qt,Hc),e(Hc,Ujr),e(Hc,T5e),e(T5e,Jjr),e(Hc,Yjr),e(Hc,nee),e(nee,Kjr),e(Hc,Zjr),e(Qt,eDr),M(o0,Qt,null),e(pr,oDr),e(pr,Vr),M(m$,Vr,null),e(Vr,rDr),e(Vr,M5e),e(M5e,tDr),e(Vr,aDr),e(Vr,Fn),e(Fn,nDr),e(Fn,E5e),e(E5e,sDr),e(Fn,lDr),e(Fn,C5e),e(C5e,iDr),e(Fn,dDr),e(Fn,w5e),e(w5e,cDr),e(Fn,fDr),e(Vr,mDr),e(Vr,A5e),e(A5e,r0),e(r0,L5e),e(L5e,gDr),e(r0,hDr),e(r0,see),e(see,pDr),e(r0,_Dr),e(Vr,uDr),M(t0,Vr,null),b(f,tQe,u),b(f,Uc,u),e(Uc,a0),e(a0,y5e),M(g$,y5e,null),e(Uc,bDr),e(Uc,x5e),e(x5e,vDr),b(f,aQe,u),b(f,_r,u),M(h$,_r,null),e(_r,FDr),e(_r,Jc),e(Jc,TDr),e(Jc,lee),e(lee,MDr),e(Jc,EDr),e(Jc,iee),e(iee,CDr),e(Jc,wDr),e(_r,ADr),e(_r,p$),e(p$,LDr),e(p$,$5e),e($5e,yDr),e(p$,xDr),e(_r,$Dr),e(_r,Wt),M(_$,Wt,null),e(Wt,kDr),e(Wt,k5e),e(k5e,SDr),e(Wt,RDr),e(Wt,Yc),e(Yc,PDr),e(Yc,S5e),e(S5e,BDr),e(Yc,IDr),e(Yc,dee),e(dee,NDr),e(Yc,qDr),e(Wt,jDr),M(n0,Wt,null),e(_r,DDr),e(_r,Xr),M(u$,Xr,null),e(Xr,GDr),e(Xr,R5e),e(R5e,ODr),e(Xr,VDr),e(Xr,Tn),e(Tn,XDr),e(Tn,P5e),e(P5e,zDr),e(Tn,QDr),e(Tn,B5e),e(B5e,WDr),e(Tn,HDr),e(Tn,I5e),e(I5e,UDr),e(Tn,JDr),e(Xr,YDr),e(Xr,oe),e(oe,s0),e(s0,N5e),e(N5e,KDr),e(s0,ZDr),e(s0,cee),e(cee,eGr),e(s0,oGr),e(oe,rGr),e(oe,l0),e(l0,q5e),e(q5e,tGr),e(l0,aGr),e(l0,fee),e(fee,nGr),e(l0,sGr),e(oe,lGr),e(oe,i0),e(i0,j5e),e(j5e,iGr),e(i0,dGr),e(i0,mee),e(mee,cGr),e(i0,fGr),e(oe,mGr),e(oe,d0),e(d0,D5e),e(D5e,gGr),e(d0,hGr),e(d0,gee),e(gee,pGr),e(d0,_Gr),e(oe,uGr),e(oe,c0),e(c0,G5e),e(G5e,bGr),e(c0,vGr),e(c0,hee),e(hee,FGr),e(c0,TGr),e(oe,MGr),e(oe,f0),e(f0,O5e),e(O5e,EGr),e(f0,CGr),e(f0,pee),e(pee,wGr),e(f0,AGr),e(oe,LGr),e(oe,m0),e(m0,V5e),e(V5e,yGr),e(m0,xGr),e(m0,_ee),e(_ee,$Gr),e(m0,kGr),e(oe,SGr),e(oe,g0),e(g0,X5e),e(X5e,RGr),e(g0,PGr),e(g0,uee),e(uee,BGr),e(g0,IGr),e(oe,NGr),e(oe,h0),e(h0,z5e),e(z5e,qGr),e(h0,jGr),e(h0,bee),e(bee,DGr),e(h0,GGr),e(oe,OGr),e(oe,p0),e(p0,Q5e),e(Q5e,VGr),e(p0,XGr),e(p0,vee),e(vee,zGr),e(p0,QGr),e(oe,WGr),e(oe,_0),e(_0,W5e),e(W5e,HGr),e(_0,UGr),e(_0,Fee),e(Fee,JGr),e(_0,YGr),e(oe,KGr),e(oe,u0),e(u0,H5e),e(H5e,ZGr),e(u0,eOr),e(u0,Tee),e(Tee,oOr),e(u0,rOr),e(oe,tOr),e(oe,b0),e(b0,U5e),e(U5e,aOr),e(b0,nOr),e(b0,Mee),e(Mee,sOr),e(b0,lOr),e(oe,iOr),e(oe,v0),e(v0,J5e),e(J5e,dOr),e(v0,cOr),e(v0,Eee),e(Eee,fOr),e(v0,mOr),e(oe,gOr),e(oe,F0),e(F0,Y5e),e(Y5e,hOr),e(F0,pOr),e(F0,Cee),e(Cee,_Or),e(F0,uOr),e(oe,bOr),e(oe,T0),e(T0,K5e),e(K5e,vOr),e(T0,FOr),e(T0,wee),e(wee,TOr),e(T0,MOr),e(oe,EOr),e(oe,M0),e(M0,Z5e),e(Z5e,COr),e(M0,wOr),e(M0,Aee),e(Aee,AOr),e(M0,LOr),e(oe,yOr),e(oe,E0),e(E0,e0e),e(e0e,xOr),e(E0,$Or),e(E0,Lee),e(Lee,kOr),e(E0,SOr),e(oe,ROr),e(oe,C0),e(C0,o0e),e(o0e,POr),e(C0,BOr),e(C0,yee),e(yee,IOr),e(C0,NOr),e(oe,qOr),e(oe,w0),e(w0,r0e),e(r0e,jOr),e(w0,DOr),e(w0,xee),e(xee,GOr),e(w0,OOr),e(oe,VOr),e(oe,A0),e(A0,t0e),e(t0e,XOr),e(A0,zOr),e(A0,$ee),e($ee,QOr),e(A0,WOr),e(oe,HOr),e(oe,L0),e(L0,a0e),e(a0e,UOr),e(L0,JOr),e(L0,kee),e(kee,YOr),e(L0,KOr),e(oe,ZOr),e(oe,y0),e(y0,n0e),e(n0e,eVr),e(y0,oVr),e(y0,See),e(See,rVr),e(y0,tVr),e(oe,aVr),e(oe,x0),e(x0,s0e),e(s0e,nVr),e(x0,sVr),e(x0,Ree),e(Ree,lVr),e(x0,iVr),e(oe,dVr),e(oe,$0),e($0,l0e),e(l0e,cVr),e($0,fVr),e($0,Pee),e(Pee,mVr),e($0,gVr),e(oe,hVr),e(oe,k0),e(k0,i0e),e(i0e,pVr),e(k0,_Vr),e(k0,Bee),e(Bee,uVr),e(k0,bVr),e(oe,vVr),e(oe,S0),e(S0,d0e),e(d0e,FVr),e(S0,TVr),e(S0,Iee),e(Iee,MVr),e(S0,EVr),e(Xr,CVr),M(R0,Xr,null),b(f,nQe,u),b(f,Kc,u),e(Kc,P0),e(P0,c0e),M(b$,c0e,null),e(Kc,wVr),e(Kc,f0e),e(f0e,AVr),b(f,sQe,u),b(f,ur,u),M(v$,ur,null),e(ur,LVr),e(ur,Zc),e(Zc,yVr),e(Zc,Nee),e(Nee,xVr),e(Zc,$Vr),e(Zc,qee),e(qee,kVr),e(Zc,SVr),e(ur,RVr),e(ur,F$),e(F$,PVr),e(F$,m0e),e(m0e,BVr),e(F$,IVr),e(ur,NVr),e(ur,Ht),M(T$,Ht,null),e(Ht,qVr),e(Ht,g0e),e(g0e,jVr),e(Ht,DVr),e(Ht,ef),e(ef,GVr),e(ef,h0e),e(h0e,OVr),e(ef,VVr),e(ef,jee),e(jee,XVr),e(ef,zVr),e(Ht,QVr),M(B0,Ht,null),e(ur,WVr),e(ur,zr),M(M$,zr,null),e(zr,HVr),e(zr,p0e),e(p0e,UVr),e(zr,JVr),e(zr,Mn),e(Mn,YVr),e(Mn,_0e),e(_0e,KVr),e(Mn,ZVr),e(Mn,u0e),e(u0e,eXr),e(Mn,oXr),e(Mn,b0e),e(b0e,rXr),e(Mn,tXr),e(zr,aXr),e(zr,xe),e(xe,I0),e(I0,v0e),e(v0e,nXr),e(I0,sXr),e(I0,Dee),e(Dee,lXr),e(I0,iXr),e(xe,dXr),e(xe,N0),e(N0,F0e),e(F0e,cXr),e(N0,fXr),e(N0,Gee),e(Gee,mXr),e(N0,gXr),e(xe,hXr),e(xe,q0),e(q0,T0e),e(T0e,pXr),e(q0,_Xr),e(q0,Oee),e(Oee,uXr),e(q0,bXr),e(xe,vXr),e(xe,j0),e(j0,M0e),e(M0e,FXr),e(j0,TXr),e(j0,Vee),e(Vee,MXr),e(j0,EXr),e(xe,CXr),e(xe,D0),e(D0,E0e),e(E0e,wXr),e(D0,AXr),e(D0,Xee),e(Xee,LXr),e(D0,yXr),e(xe,xXr),e(xe,G0),e(G0,C0e),e(C0e,$Xr),e(G0,kXr),e(G0,zee),e(zee,SXr),e(G0,RXr),e(xe,PXr),e(xe,O0),e(O0,w0e),e(w0e,BXr),e(O0,IXr),e(O0,Qee),e(Qee,NXr),e(O0,qXr),e(xe,jXr),e(xe,V0),e(V0,A0e),e(A0e,DXr),e(V0,GXr),e(V0,Wee),e(Wee,OXr),e(V0,VXr),e(xe,XXr),e(xe,X0),e(X0,L0e),e(L0e,zXr),e(X0,QXr),e(X0,Hee),e(Hee,WXr),e(X0,HXr),e(xe,UXr),e(xe,z0),e(z0,y0e),e(y0e,JXr),e(z0,YXr),e(z0,Uee),e(Uee,KXr),e(z0,ZXr),e(zr,ezr),M(Q0,zr,null),b(f,lQe,u),b(f,of,u),e(of,W0),e(W0,x0e),M(E$,x0e,null),e(of,ozr),e(of,$0e),e($0e,rzr),b(f,iQe,u),b(f,br,u),M(C$,br,null),e(br,tzr),e(br,rf),e(rf,azr),e(rf,Jee),e(Jee,nzr),e(rf,szr),e(rf,Yee),e(Yee,lzr),e(rf,izr),e(br,dzr),e(br,w$),e(w$,czr),e(w$,k0e),e(k0e,fzr),e(w$,mzr),e(br,gzr),e(br,Ut),M(A$,Ut,null),e(Ut,hzr),e(Ut,S0e),e(S0e,pzr),e(Ut,_zr),e(Ut,tf),e(tf,uzr),e(tf,R0e),e(R0e,bzr),e(tf,vzr),e(tf,Kee),e(Kee,Fzr),e(tf,Tzr),e(Ut,Mzr),M(H0,Ut,null),e(br,Ezr),e(br,Qr),M(L$,Qr,null),e(Qr,Czr),e(Qr,P0e),e(P0e,wzr),e(Qr,Azr),e(Qr,En),e(En,Lzr),e(En,B0e),e(B0e,yzr),e(En,xzr),e(En,I0e),e(I0e,$zr),e(En,kzr),e(En,N0e),e(N0e,Szr),e(En,Rzr),e(Qr,Pzr),e(Qr,Ee),e(Ee,U0),e(U0,q0e),e(q0e,Bzr),e(U0,Izr),e(U0,Zee),e(Zee,Nzr),e(U0,qzr),e(Ee,jzr),e(Ee,J0),e(J0,j0e),e(j0e,Dzr),e(J0,Gzr),e(J0,eoe),e(eoe,Ozr),e(J0,Vzr),e(Ee,Xzr),e(Ee,Y0),e(Y0,D0e),e(D0e,zzr),e(Y0,Qzr),e(Y0,ooe),e(ooe,Wzr),e(Y0,Hzr),e(Ee,Uzr),e(Ee,K0),e(K0,G0e),e(G0e,Jzr),e(K0,Yzr),e(K0,roe),e(roe,Kzr),e(K0,Zzr),e(Ee,eQr),e(Ee,Z0),e(Z0,O0e),e(O0e,oQr),e(Z0,rQr),e(Z0,toe),e(toe,tQr),e(Z0,aQr),e(Ee,nQr),e(Ee,ew),e(ew,V0e),e(V0e,sQr),e(ew,lQr),e(ew,aoe),e(aoe,iQr),e(ew,dQr),e(Ee,cQr),e(Ee,ow),e(ow,X0e),e(X0e,fQr),e(ow,mQr),e(ow,noe),e(noe,gQr),e(ow,hQr),e(Ee,pQr),e(Ee,rw),e(rw,z0e),e(z0e,_Qr),e(rw,uQr),e(rw,soe),e(soe,bQr),e(rw,vQr),e(Ee,FQr),e(Ee,tw),e(tw,Q0e),e(Q0e,TQr),e(tw,MQr),e(tw,loe),e(loe,EQr),e(tw,CQr),e(Ee,wQr),e(Ee,aw),e(aw,W0e),e(W0e,AQr),e(aw,LQr),e(aw,ioe),e(ioe,yQr),e(aw,xQr),e(Ee,$Qr),e(Ee,nw),e(nw,H0e),e(H0e,kQr),e(nw,SQr),e(nw,doe),e(doe,RQr),e(nw,PQr),e(Ee,BQr),e(Ee,sw),e(sw,U0e),e(U0e,IQr),e(sw,NQr),e(sw,coe),e(coe,qQr),e(sw,jQr),e(Ee,DQr),e(Ee,lw),e(lw,J0e),e(J0e,GQr),e(lw,OQr),e(lw,foe),e(foe,VQr),e(lw,XQr),e(Qr,zQr),M(iw,Qr,null),b(f,dQe,u),b(f,af,u),e(af,dw),e(dw,Y0e),M(y$,Y0e,null),e(af,QQr),e(af,K0e),e(K0e,WQr),b(f,cQe,u),b(f,vr,u),M(x$,vr,null),e(vr,HQr),e(vr,nf),e(nf,UQr),e(nf,moe),e(moe,JQr),e(nf,YQr),e(nf,goe),e(goe,KQr),e(nf,ZQr),e(vr,eWr),e(vr,$$),e($$,oWr),e($$,Z0e),e(Z0e,rWr),e($$,tWr),e(vr,aWr),e(vr,Jt),M(k$,Jt,null),e(Jt,nWr),e(Jt,ewe),e(ewe,sWr),e(Jt,lWr),e(Jt,sf),e(sf,iWr),e(sf,owe),e(owe,dWr),e(sf,cWr),e(sf,hoe),e(hoe,fWr),e(sf,mWr),e(Jt,gWr),M(cw,Jt,null),e(vr,hWr),e(vr,Wr),M(S$,Wr,null),e(Wr,pWr),e(Wr,rwe),e(rwe,_Wr),e(Wr,uWr),e(Wr,Cn),e(Cn,bWr),e(Cn,twe),e(twe,vWr),e(Cn,FWr),e(Cn,awe),e(awe,TWr),e(Cn,MWr),e(Cn,nwe),e(nwe,EWr),e(Cn,CWr),e(Wr,wWr),e(Wr,$e),e($e,fw),e(fw,swe),e(swe,AWr),e(fw,LWr),e(fw,poe),e(poe,yWr),e(fw,xWr),e($e,$Wr),e($e,mw),e(mw,lwe),e(lwe,kWr),e(mw,SWr),e(mw,_oe),e(_oe,RWr),e(mw,PWr),e($e,BWr),e($e,gw),e(gw,iwe),e(iwe,IWr),e(gw,NWr),e(gw,uoe),e(uoe,qWr),e(gw,jWr),e($e,DWr),e($e,hw),e(hw,dwe),e(dwe,GWr),e(hw,OWr),e(hw,boe),e(boe,VWr),e(hw,XWr),e($e,zWr),e($e,pw),e(pw,cwe),e(cwe,QWr),e(pw,WWr),e(pw,voe),e(voe,HWr),e(pw,UWr),e($e,JWr),e($e,_w),e(_w,fwe),e(fwe,YWr),e(_w,KWr),e(_w,Foe),e(Foe,ZWr),e(_w,eHr),e($e,oHr),e($e,uw),e(uw,mwe),e(mwe,rHr),e(uw,tHr),e(uw,Toe),e(Toe,aHr),e(uw,nHr),e($e,sHr),e($e,bw),e(bw,gwe),e(gwe,lHr),e(bw,iHr),e(bw,Moe),e(Moe,dHr),e(bw,cHr),e($e,fHr),e($e,vw),e(vw,hwe),e(hwe,mHr),e(vw,gHr),e(vw,Eoe),e(Eoe,hHr),e(vw,pHr),e($e,_Hr),e($e,Fw),e(Fw,pwe),e(pwe,uHr),e(Fw,bHr),e(Fw,Coe),e(Coe,vHr),e(Fw,FHr),e(Wr,THr),M(Tw,Wr,null),b(f,fQe,u),b(f,lf,u),e(lf,Mw),e(Mw,_we),M(R$,_we,null),e(lf,MHr),e(lf,uwe),e(uwe,EHr),b(f,mQe,u),b(f,Fr,u),M(P$,Fr,null),e(Fr,CHr),e(Fr,df),e(df,wHr),e(df,woe),e(woe,AHr),e(df,LHr),e(df,Aoe),e(Aoe,yHr),e(df,xHr),e(Fr,$Hr),e(Fr,B$),e(B$,kHr),e(B$,bwe),e(bwe,SHr),e(B$,RHr),e(Fr,PHr),e(Fr,Yt),M(I$,Yt,null),e(Yt,BHr),e(Yt,vwe),e(vwe,IHr),e(Yt,NHr),e(Yt,cf),e(cf,qHr),e(cf,Fwe),e(Fwe,jHr),e(cf,DHr),e(cf,Loe),e(Loe,GHr),e(cf,OHr),e(Yt,VHr),M(Ew,Yt,null),e(Fr,XHr),e(Fr,Hr),M(N$,Hr,null),e(Hr,zHr),e(Hr,Twe),e(Twe,QHr),e(Hr,WHr),e(Hr,wn),e(wn,HHr),e(wn,Mwe),e(Mwe,UHr),e(wn,JHr),e(wn,Ewe),e(Ewe,YHr),e(wn,KHr),e(wn,Cwe),e(Cwe,ZHr),e(wn,eUr),e(Hr,oUr),e(Hr,ke),e(ke,Cw),e(Cw,wwe),e(wwe,rUr),e(Cw,tUr),e(Cw,yoe),e(yoe,aUr),e(Cw,nUr),e(ke,sUr),e(ke,ww),e(ww,Awe),e(Awe,lUr),e(ww,iUr),e(ww,xoe),e(xoe,dUr),e(ww,cUr),e(ke,fUr),e(ke,Aw),e(Aw,Lwe),e(Lwe,mUr),e(Aw,gUr),e(Aw,$oe),e($oe,hUr),e(Aw,pUr),e(ke,_Ur),e(ke,Lw),e(Lw,ywe),e(ywe,uUr),e(Lw,bUr),e(Lw,koe),e(koe,vUr),e(Lw,FUr),e(ke,TUr),e(ke,yw),e(yw,xwe),e(xwe,MUr),e(yw,EUr),e(yw,Soe),e(Soe,CUr),e(yw,wUr),e(ke,AUr),e(ke,xw),e(xw,$we),e($we,LUr),e(xw,yUr),e(xw,Roe),e(Roe,xUr),e(xw,$Ur),e(ke,kUr),e(ke,$w),e($w,kwe),e(kwe,SUr),e($w,RUr),e($w,Poe),e(Poe,PUr),e($w,BUr),e(ke,IUr),e(ke,kw),e(kw,Swe),e(Swe,NUr),e(kw,qUr),e(kw,Boe),e(Boe,jUr),e(kw,DUr),e(ke,GUr),e(ke,Sw),e(Sw,Rwe),e(Rwe,OUr),e(Sw,VUr),e(Sw,Ioe),e(Ioe,XUr),e(Sw,zUr),e(ke,QUr),e(ke,Rw),e(Rw,Pwe),e(Pwe,WUr),e(Rw,HUr),e(Rw,Noe),e(Noe,UUr),e(Rw,JUr),e(Hr,YUr),M(Pw,Hr,null),b(f,gQe,u),b(f,ff,u),e(ff,Bw),e(Bw,Bwe),M(q$,Bwe,null),e(ff,KUr),e(ff,Iwe),e(Iwe,ZUr),b(f,hQe,u),b(f,Tr,u),M(j$,Tr,null),e(Tr,eJr),e(Tr,mf),e(mf,oJr),e(mf,qoe),e(qoe,rJr),e(mf,tJr),e(mf,joe),e(joe,aJr),e(mf,nJr),e(Tr,sJr),e(Tr,D$),e(D$,lJr),e(D$,Nwe),e(Nwe,iJr),e(D$,dJr),e(Tr,cJr),e(Tr,Kt),M(G$,Kt,null),e(Kt,fJr),e(Kt,qwe),e(qwe,mJr),e(Kt,gJr),e(Kt,gf),e(gf,hJr),e(gf,jwe),e(jwe,pJr),e(gf,_Jr),e(gf,Doe),e(Doe,uJr),e(gf,bJr),e(Kt,vJr),M(Iw,Kt,null),e(Tr,FJr),e(Tr,Ur),M(O$,Ur,null),e(Ur,TJr),e(Ur,Dwe),e(Dwe,MJr),e(Ur,EJr),e(Ur,An),e(An,CJr),e(An,Gwe),e(Gwe,wJr),e(An,AJr),e(An,Owe),e(Owe,LJr),e(An,yJr),e(An,Vwe),e(Vwe,xJr),e(An,$Jr),e(Ur,kJr),e(Ur,Se),e(Se,Nw),e(Nw,Xwe),e(Xwe,SJr),e(Nw,RJr),e(Nw,Goe),e(Goe,PJr),e(Nw,BJr),e(Se,IJr),e(Se,qw),e(qw,zwe),e(zwe,NJr),e(qw,qJr),e(qw,Ooe),e(Ooe,jJr),e(qw,DJr),e(Se,GJr),e(Se,jw),e(jw,Qwe),e(Qwe,OJr),e(jw,VJr),e(jw,Voe),e(Voe,XJr),e(jw,zJr),e(Se,QJr),e(Se,Dw),e(Dw,Wwe),e(Wwe,WJr),e(Dw,HJr),e(Dw,Xoe),e(Xoe,UJr),e(Dw,JJr),e(Se,YJr),e(Se,Gw),e(Gw,Hwe),e(Hwe,KJr),e(Gw,ZJr),e(Gw,zoe),e(zoe,eYr),e(Gw,oYr),e(Se,rYr),e(Se,Ow),e(Ow,Uwe),e(Uwe,tYr),e(Ow,aYr),e(Ow,Qoe),e(Qoe,nYr),e(Ow,sYr),e(Se,lYr),e(Se,Vw),e(Vw,Jwe),e(Jwe,iYr),e(Vw,dYr),e(Vw,Woe),e(Woe,cYr),e(Vw,fYr),e(Se,mYr),e(Se,Xw),e(Xw,Ywe),e(Ywe,gYr),e(Xw,hYr),e(Xw,Hoe),e(Hoe,pYr),e(Xw,_Yr),e(Se,uYr),e(Se,zw),e(zw,Kwe),e(Kwe,bYr),e(zw,vYr),e(zw,Uoe),e(Uoe,FYr),e(zw,TYr),e(Se,MYr),e(Se,Qw),e(Qw,Zwe),e(Zwe,EYr),e(Qw,CYr),e(Qw,Joe),e(Joe,wYr),e(Qw,AYr),e(Ur,LYr),M(Ww,Ur,null),b(f,pQe,u),b(f,hf,u),e(hf,Hw),e(Hw,eAe),M(V$,eAe,null),e(hf,yYr),e(hf,oAe),e(oAe,xYr),b(f,_Qe,u),b(f,Mr,u),M(X$,Mr,null),e(Mr,$Yr),e(Mr,pf),e(pf,kYr),e(pf,Yoe),e(Yoe,SYr),e(pf,RYr),e(pf,Koe),e(Koe,PYr),e(pf,BYr),e(Mr,IYr),e(Mr,z$),e(z$,NYr),e(z$,rAe),e(rAe,qYr),e(z$,jYr),e(Mr,DYr),e(Mr,Zt),M(Q$,Zt,null),e(Zt,GYr),e(Zt,tAe),e(tAe,OYr),e(Zt,VYr),e(Zt,_f),e(_f,XYr),e(_f,aAe),e(aAe,zYr),e(_f,QYr),e(_f,Zoe),e(Zoe,WYr),e(_f,HYr),e(Zt,UYr),M(Uw,Zt,null),e(Mr,JYr),e(Mr,Jr),M(W$,Jr,null),e(Jr,YYr),e(Jr,nAe),e(nAe,KYr),e(Jr,ZYr),e(Jr,Ln),e(Ln,eKr),e(Ln,sAe),e(sAe,oKr),e(Ln,rKr),e(Ln,lAe),e(lAe,tKr),e(Ln,aKr),e(Ln,iAe),e(iAe,nKr),e(Ln,sKr),e(Jr,lKr),e(Jr,Re),e(Re,Jw),e(Jw,dAe),e(dAe,iKr),e(Jw,dKr),e(Jw,ere),e(ere,cKr),e(Jw,fKr),e(Re,mKr),e(Re,Yw),e(Yw,cAe),e(cAe,gKr),e(Yw,hKr),e(Yw,ore),e(ore,pKr),e(Yw,_Kr),e(Re,uKr),e(Re,Kw),e(Kw,fAe),e(fAe,bKr),e(Kw,vKr),e(Kw,rre),e(rre,FKr),e(Kw,TKr),e(Re,MKr),e(Re,Zw),e(Zw,mAe),e(mAe,EKr),e(Zw,CKr),e(Zw,tre),e(tre,wKr),e(Zw,AKr),e(Re,LKr),e(Re,eA),e(eA,gAe),e(gAe,yKr),e(eA,xKr),e(eA,are),e(are,$Kr),e(eA,kKr),e(Re,SKr),e(Re,oA),e(oA,hAe),e(hAe,RKr),e(oA,PKr),e(oA,nre),e(nre,BKr),e(oA,IKr),e(Re,NKr),e(Re,rA),e(rA,pAe),e(pAe,qKr),e(rA,jKr),e(rA,sre),e(sre,DKr),e(rA,GKr),e(Re,OKr),e(Re,tA),e(tA,_Ae),e(_Ae,VKr),e(tA,XKr),e(tA,lre),e(lre,zKr),e(tA,QKr),e(Re,WKr),e(Re,aA),e(aA,uAe),e(uAe,HKr),e(aA,UKr),e(aA,ire),e(ire,JKr),e(aA,YKr),e(Re,KKr),e(Re,nA),e(nA,bAe),e(bAe,ZKr),e(nA,eZr),e(nA,dre),e(dre,oZr),e(nA,rZr),e(Jr,tZr),M(sA,Jr,null),b(f,uQe,u),b(f,uf,u),e(uf,lA),e(lA,vAe),M(H$,vAe,null),e(uf,aZr),e(uf,FAe),e(FAe,nZr),b(f,bQe,u),b(f,Er,u),M(U$,Er,null),e(Er,sZr),e(Er,bf),e(bf,lZr),e(bf,cre),e(cre,iZr),e(bf,dZr),e(bf,fre),e(fre,cZr),e(bf,fZr),e(Er,mZr),e(Er,J$),e(J$,gZr),e(J$,TAe),e(TAe,hZr),e(J$,pZr),e(Er,_Zr),e(Er,ea),M(Y$,ea,null),e(ea,uZr),e(ea,MAe),e(MAe,bZr),e(ea,vZr),e(ea,vf),e(vf,FZr),e(vf,EAe),e(EAe,TZr),e(vf,MZr),e(vf,mre),e(mre,EZr),e(vf,CZr),e(ea,wZr),M(iA,ea,null),e(Er,AZr),e(Er,Yr),M(K$,Yr,null),e(Yr,LZr),e(Yr,CAe),e(CAe,yZr),e(Yr,xZr),e(Yr,yn),e(yn,$Zr),e(yn,wAe),e(wAe,kZr),e(yn,SZr),e(yn,AAe),e(AAe,RZr),e(yn,PZr),e(yn,LAe),e(LAe,BZr),e(yn,IZr),e(Yr,NZr),e(Yr,Xe),e(Xe,dA),e(dA,yAe),e(yAe,qZr),e(dA,jZr),e(dA,gre),e(gre,DZr),e(dA,GZr),e(Xe,OZr),e(Xe,cA),e(cA,xAe),e(xAe,VZr),e(cA,XZr),e(cA,hre),e(hre,zZr),e(cA,QZr),e(Xe,WZr),e(Xe,fA),e(fA,$Ae),e($Ae,HZr),e(fA,UZr),e(fA,pre),e(pre,JZr),e(fA,YZr),e(Xe,KZr),e(Xe,mA),e(mA,kAe),e(kAe,ZZr),e(mA,eet),e(mA,_re),e(_re,oet),e(mA,ret),e(Xe,tet),e(Xe,gA),e(gA,SAe),e(SAe,aet),e(gA,net),e(gA,ure),e(ure,set),e(gA,iet),e(Xe,det),e(Xe,hA),e(hA,RAe),e(RAe,cet),e(hA,fet),e(hA,bre),e(bre,met),e(hA,get),e(Xe,het),e(Xe,pA),e(pA,PAe),e(PAe,pet),e(pA,_et),e(pA,vre),e(vre,uet),e(pA,bet),e(Xe,vet),e(Xe,_A),e(_A,BAe),e(BAe,Fet),e(_A,Tet),e(_A,Fre),e(Fre,Met),e(_A,Eet),e(Yr,Cet),M(uA,Yr,null),b(f,vQe,u),b(f,Ff,u),e(Ff,bA),e(bA,IAe),M(Z$,IAe,null),e(Ff,wet),e(Ff,NAe),e(NAe,Aet),b(f,FQe,u),b(f,Cr,u),M(ek,Cr,null),e(Cr,Let),e(Cr,Tf),e(Tf,yet),e(Tf,Tre),e(Tre,xet),e(Tf,$et),e(Tf,Mre),e(Mre,ket),e(Tf,Set),e(Cr,Ret),e(Cr,ok),e(ok,Pet),e(ok,qAe),e(qAe,Bet),e(ok,Iet),e(Cr,Net),e(Cr,oa),M(rk,oa,null),e(oa,qet),e(oa,jAe),e(jAe,jet),e(oa,Det),e(oa,Mf),e(Mf,Get),e(Mf,DAe),e(DAe,Oet),e(Mf,Vet),e(Mf,Ere),e(Ere,Xet),e(Mf,zet),e(oa,Qet),M(vA,oa,null),e(Cr,Wet),e(Cr,Kr),M(tk,Kr,null),e(Kr,Het),e(Kr,GAe),e(GAe,Uet),e(Kr,Jet),e(Kr,xn),e(xn,Yet),e(xn,OAe),e(OAe,Ket),e(xn,Zet),e(xn,VAe),e(VAe,eot),e(xn,oot),e(xn,XAe),e(XAe,rot),e(xn,tot),e(Kr,aot),e(Kr,ze),e(ze,FA),e(FA,zAe),e(zAe,not),e(FA,sot),e(FA,Cre),e(Cre,lot),e(FA,iot),e(ze,dot),e(ze,TA),e(TA,QAe),e(QAe,cot),e(TA,fot),e(TA,wre),e(wre,mot),e(TA,got),e(ze,hot),e(ze,MA),e(MA,WAe),e(WAe,pot),e(MA,_ot),e(MA,Are),e(Are,uot),e(MA,bot),e(ze,vot),e(ze,EA),e(EA,HAe),e(HAe,Fot),e(EA,Tot),e(EA,Lre),e(Lre,Mot),e(EA,Eot),e(ze,Cot),e(ze,CA),e(CA,UAe),e(UAe,wot),e(CA,Aot),e(CA,yre),e(yre,Lot),e(CA,yot),e(ze,xot),e(ze,wA),e(wA,JAe),e(JAe,$ot),e(wA,kot),e(wA,xre),e(xre,Sot),e(wA,Rot),e(ze,Pot),e(ze,AA),e(AA,YAe),e(YAe,Bot),e(AA,Iot),e(AA,$re),e($re,Not),e(AA,qot),e(ze,jot),e(ze,LA),e(LA,KAe),e(KAe,Dot),e(LA,Got),e(LA,kre),e(kre,Oot),e(LA,Vot),e(Kr,Xot),M(yA,Kr,null),b(f,TQe,u),b(f,Ef,u),e(Ef,xA),e(xA,ZAe),M(ak,ZAe,null),e(Ef,zot),e(Ef,e6e),e(e6e,Qot),b(f,MQe,u),b(f,wr,u),M(nk,wr,null),e(wr,Wot),e(wr,Cf),e(Cf,Hot),e(Cf,Sre),e(Sre,Uot),e(Cf,Jot),e(Cf,Rre),e(Rre,Yot),e(Cf,Kot),e(wr,Zot),e(wr,sk),e(sk,ert),e(sk,o6e),e(o6e,ort),e(sk,rrt),e(wr,trt),e(wr,ra),M(lk,ra,null),e(ra,art),e(ra,r6e),e(r6e,nrt),e(ra,srt),e(ra,wf),e(wf,lrt),e(wf,t6e),e(t6e,irt),e(wf,drt),e(wf,Pre),e(Pre,crt),e(wf,frt),e(ra,mrt),M($A,ra,null),e(wr,grt),e(wr,Zr),M(ik,Zr,null),e(Zr,hrt),e(Zr,a6e),e(a6e,prt),e(Zr,_rt),e(Zr,$n),e($n,urt),e($n,n6e),e(n6e,brt),e($n,vrt),e($n,s6e),e(s6e,Frt),e($n,Trt),e($n,l6e),e(l6e,Mrt),e($n,Ert),e(Zr,Crt),e(Zr,i6e),e(i6e,kA),e(kA,d6e),e(d6e,wrt),e(kA,Art),e(kA,Bre),e(Bre,Lrt),e(kA,yrt),e(Zr,xrt),M(SA,Zr,null),b(f,EQe,u),b(f,Af,u),e(Af,RA),e(RA,c6e),M(dk,c6e,null),e(Af,$rt),e(Af,f6e),e(f6e,krt),b(f,CQe,u),b(f,Ar,u),M(ck,Ar,null),e(Ar,Srt),e(Ar,Lf),e(Lf,Rrt),e(Lf,Ire),e(Ire,Prt),e(Lf,Brt),e(Lf,Nre),e(Nre,Irt),e(Lf,Nrt),e(Ar,qrt),e(Ar,fk),e(fk,jrt),e(fk,m6e),e(m6e,Drt),e(fk,Grt),e(Ar,Ort),e(Ar,ta),M(mk,ta,null),e(ta,Vrt),e(ta,g6e),e(g6e,Xrt),e(ta,zrt),e(ta,yf),e(yf,Qrt),e(yf,h6e),e(h6e,Wrt),e(yf,Hrt),e(yf,qre),e(qre,Urt),e(yf,Jrt),e(ta,Yrt),M(PA,ta,null),e(Ar,Krt),e(Ar,et),M(gk,et,null),e(et,Zrt),e(et,p6e),e(p6e,ett),e(et,ott),e(et,kn),e(kn,rtt),e(kn,_6e),e(_6e,ttt),e(kn,att),e(kn,u6e),e(u6e,ntt),e(kn,stt),e(kn,b6e),e(b6e,ltt),e(kn,itt),e(et,dtt),e(et,hk),e(hk,BA),e(BA,v6e),e(v6e,ctt),e(BA,ftt),e(BA,jre),e(jre,mtt),e(BA,gtt),e(hk,htt),e(hk,IA),e(IA,F6e),e(F6e,ptt),e(IA,_tt),e(IA,Dre),e(Dre,utt),e(IA,btt),e(et,vtt),M(NA,et,null),b(f,wQe,u),b(f,xf,u),e(xf,qA),e(qA,T6e),M(pk,T6e,null),e(xf,Ftt),e(xf,M6e),e(M6e,Ttt),b(f,AQe,u),b(f,Lr,u),M(_k,Lr,null),e(Lr,Mtt),e(Lr,$f),e($f,Ett),e($f,Gre),e(Gre,Ctt),e($f,wtt),e($f,Ore),e(Ore,Att),e($f,Ltt),e(Lr,ytt),e(Lr,uk),e(uk,xtt),e(uk,E6e),e(E6e,$tt),e(uk,ktt),e(Lr,Stt),e(Lr,aa),M(bk,aa,null),e(aa,Rtt),e(aa,C6e),e(C6e,Ptt),e(aa,Btt),e(aa,kf),e(kf,Itt),e(kf,w6e),e(w6e,Ntt),e(kf,qtt),e(kf,Vre),e(Vre,jtt),e(kf,Dtt),e(aa,Gtt),M(jA,aa,null),e(Lr,Ott),e(Lr,ot),M(vk,ot,null),e(ot,Vtt),e(ot,A6e),e(A6e,Xtt),e(ot,ztt),e(ot,Sn),e(Sn,Qtt),e(Sn,L6e),e(L6e,Wtt),e(Sn,Htt),e(Sn,y6e),e(y6e,Utt),e(Sn,Jtt),e(Sn,x6e),e(x6e,Ytt),e(Sn,Ktt),e(ot,Ztt),e(ot,$6e),e($6e,DA),e(DA,k6e),e(k6e,eat),e(DA,oat),e(DA,Xre),e(Xre,rat),e(DA,tat),e(ot,aat),M(GA,ot,null),LQe=!0},p(f,[u]){const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),Df.$set(Fk);const S6e={};u&2&&(S6e.$$scope={dirty:u,ctx:f}),Kg.$set(S6e);const R6e={};u&2&&(R6e.$$scope={dirty:u,ctx:f}),Ph.$set(R6e);const P6e={};u&2&&(P6e.$$scope={dirty:u,ctx:f}),up.$set(P6e);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),bp.$set(Tk);const B6e={};u&2&&(B6e.$$scope={dirty:u,ctx:f}),jp.$set(B6e);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Dp.$set(Rn);const I6e={};u&2&&(I6e.$$scope={dirty:u,ctx:f}),Vp.$set(I6e);const N6e={};u&2&&(N6e.$$scope={dirty:u,ctx:f}),Hu.$set(N6e);const q6e={};u&2&&(q6e.$$scope={dirty:u,ctx:f}),Ju.$set(q6e);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),V4.$set(Mk);const j6e={};u&2&&(j6e.$$scope={dirty:u,ctx:f}),z4.$set(j6e);const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),R2.$set(Ek);const D6e={};u&2&&(D6e.$$scope={dirty:u,ctx:f}),B2.$set(D6e);const Ck={};u&2&&(Ck.$$scope={dirty:u,ctx:f}),T1.$set(Ck);const G6e={};u&2&&(G6e.$$scope={dirty:u,ctx:f}),E1.$set(G6e);const O6e={};u&2&&(O6e.$$scope={dirty:u,ctx:f}),X1.$set(O6e);const V6e={};u&2&&(V6e.$$scope={dirty:u,ctx:f}),Q1.$set(V6e);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),zb.$set(Sf);const X6e={};u&2&&(X6e.$$scope={dirty:u,ctx:f}),Wb.$set(X6e);const z6e={};u&2&&(z6e.$$scope={dirty:u,ctx:f}),wv.$set(z6e);const Q6e={};u&2&&(Q6e.$$scope={dirty:u,ctx:f}),Lv.$set(Q6e);const wk={};u&2&&(wk.$$scope={dirty:u,ctx:f}),Bv.$set(wk);const W6e={};u&2&&(W6e.$$scope={dirty:u,ctx:f}),Nv.$set(W6e);const H6e={};u&2&&(H6e.$$scope={dirty:u,ctx:f}),TF.$set(H6e);const U6e={};u&2&&(U6e.$$scope={dirty:u,ctx:f}),EF.$set(U6e);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),gT.$set(nt);const Ak={};u&2&&(Ak.$$scope={dirty:u,ctx:f}),pT.$set(Ak);const J6e={};u&2&&(J6e.$$scope={dirty:u,ctx:f}),bT.$set(J6e);const Lk={};u&2&&(Lk.$$scope={dirty:u,ctx:f}),FT.$set(Lk);const Y6e={};u&2&&(Y6e.$$scope={dirty:u,ctx:f}),BT.$set(Y6e);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),NT.$set(st);const K6e={};u&2&&(K6e.$$scope={dirty:u,ctx:f}),DT.$set(K6e);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),OT.$set(Rf);const Z6e={};u&2&&(Z6e.$$scope={dirty:u,ctx:f}),zT.$set(Z6e);const e7e={};u&2&&(e7e.$$scope={dirty:u,ctx:f}),WT.$set(e7e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),a8.$set(L);const OA={};u&2&&(OA.$$scope={dirty:u,ctx:f}),s8.$set(OA);const o7e={};u&2&&(o7e.$$scope={dirty:u,ctx:f}),g8.$set(o7e);const r7e={};u&2&&(r7e.$$scope={dirty:u,ctx:f}),p8.$set(r7e);const VA={};u&2&&(VA.$$scope={dirty:u,ctx:f}),L8.$set(VA);const t7e={};u&2&&(t7e.$$scope={dirty:u,ctx:f}),x8.$set(t7e);const a7e={};u&2&&(a7e.$$scope={dirty:u,ctx:f}),R8.$set(a7e);const XA={};u&2&&(XA.$$scope={dirty:u,ctx:f}),B8.$set(XA);const n7e={};u&2&&(n7e.$$scope={dirty:u,ctx:f}),O8.$set(n7e);const s7e={};u&2&&(s7e.$$scope={dirty:u,ctx:f}),X8.$set(s7e);const zA={};u&2&&(zA.$$scope={dirty:u,ctx:f}),U8.$set(zA);const l7e={};u&2&&(l7e.$$scope={dirty:u,ctx:f}),Y8.$set(l7e);const i7e={};u&2&&(i7e.$$scope={dirty:u,ctx:f}),oM.$set(i7e);const QA={};u&2&&(QA.$$scope={dirty:u,ctx:f}),tM.$set(QA);const d7e={};u&2&&(d7e.$$scope={dirty:u,ctx:f}),sM.$set(d7e);const c7e={};u&2&&(c7e.$$scope={dirty:u,ctx:f}),iM.$set(c7e);const WA={};u&2&&(WA.$$scope={dirty:u,ctx:f}),pM.$set(WA);const f7e={};u&2&&(f7e.$$scope={dirty:u,ctx:f}),uM.$set(f7e);const m7e={};u&2&&(m7e.$$scope={dirty:u,ctx:f}),FM.$set(m7e);const HA={};u&2&&(HA.$$scope={dirty:u,ctx:f}),MM.$set(HA);const g7e={};u&2&&(g7e.$$scope={dirty:u,ctx:f}),vE.$set(g7e);const h7e={};u&2&&(h7e.$$scope={dirty:u,ctx:f}),TE.$set(h7e);const UA={};u&2&&(UA.$$scope={dirty:u,ctx:f}),zE.$set(UA);const p7e={};u&2&&(p7e.$$scope={dirty:u,ctx:f}),WE.$set(p7e);const _7e={};u&2&&(_7e.$$scope={dirty:u,ctx:f}),lC.$set(_7e);const JA={};u&2&&(JA.$$scope={dirty:u,ctx:f}),dC.$set(JA);const u7e={};u&2&&(u7e.$$scope={dirty:u,ctx:f}),uC.$set(u7e);const b7e={};u&2&&(b7e.$$scope={dirty:u,ctx:f}),vC.$set(b7e);const YA={};u&2&&(YA.$$scope={dirty:u,ctx:f}),DC.$set(YA);const v7e={};u&2&&(v7e.$$scope={dirty:u,ctx:f}),OC.$set(v7e);const F7e={};u&2&&(F7e.$$scope={dirty:u,ctx:f}),ZC.$set(F7e);const KA={};u&2&&(KA.$$scope={dirty:u,ctx:f}),o3.$set(KA);const T7e={};u&2&&(T7e.$$scope={dirty:u,ctx:f}),y3.$set(T7e);const M7e={};u&2&&(M7e.$$scope={dirty:u,ctx:f}),$3.$set(M7e);const ZA={};u&2&&(ZA.$$scope={dirty:u,ctx:f}),H3.$set(ZA);const E7e={};u&2&&(E7e.$$scope={dirty:u,ctx:f}),J3.$set(E7e);const C7e={};u&2&&(C7e.$$scope={dirty:u,ctx:f}),Z3.$set(C7e);const e6={};u&2&&(e6.$$scope={dirty:u,ctx:f}),o5.$set(e6);const w7e={};u&2&&(w7e.$$scope={dirty:u,ctx:f}),t5.$set(w7e);const A7e={};u&2&&(A7e.$$scope={dirty:u,ctx:f}),n5.$set(A7e);const o6={};u&2&&(o6.$$scope={dirty:u,ctx:f}),A5.$set(o6);const L7e={};u&2&&(L7e.$$scope={dirty:u,ctx:f}),y5.$set(L7e);const y7e={};u&2&&(y7e.$$scope={dirty:u,ctx:f}),U5.$set(y7e);const r6={};u&2&&(r6.$$scope={dirty:u,ctx:f}),Y5.$set(r6);const x7e={};u&2&&(x7e.$$scope={dirty:u,ctx:f}),Z5.$set(x7e);const $7e={};u&2&&($7e.$$scope={dirty:u,ctx:f}),o0.$set($7e);const t6={};u&2&&(t6.$$scope={dirty:u,ctx:f}),t0.$set(t6);const k7e={};u&2&&(k7e.$$scope={dirty:u,ctx:f}),n0.$set(k7e);const S7e={};u&2&&(S7e.$$scope={dirty:u,ctx:f}),R0.$set(S7e);const a6={};u&2&&(a6.$$scope={dirty:u,ctx:f}),B0.$set(a6);const R7e={};u&2&&(R7e.$$scope={dirty:u,ctx:f}),Q0.$set(R7e);const P7e={};u&2&&(P7e.$$scope={dirty:u,ctx:f}),H0.$set(P7e);const n6={};u&2&&(n6.$$scope={dirty:u,ctx:f}),iw.$set(n6);const B7e={};u&2&&(B7e.$$scope={dirty:u,ctx:f}),cw.$set(B7e);const I7e={};u&2&&(I7e.$$scope={dirty:u,ctx:f}),Tw.$set(I7e);const s6={};u&2&&(s6.$$scope={dirty:u,ctx:f}),Ew.$set(s6);const N7e={};u&2&&(N7e.$$scope={dirty:u,ctx:f}),Pw.$set(N7e);const q7e={};u&2&&(q7e.$$scope={dirty:u,ctx:f}),Iw.$set(q7e);const l6={};u&2&&(l6.$$scope={dirty:u,ctx:f}),Ww.$set(l6);const j7e={};u&2&&(j7e.$$scope={dirty:u,ctx:f}),Uw.$set(j7e);const D7e={};u&2&&(D7e.$$scope={dirty:u,ctx:f}),sA.$set(D7e);const i6={};u&2&&(i6.$$scope={dirty:u,ctx:f}),iA.$set(i6);const G7e={};u&2&&(G7e.$$scope={dirty:u,ctx:f}),uA.$set(G7e);const O7e={};u&2&&(O7e.$$scope={dirty:u,ctx:f}),vA.$set(O7e);const d6={};u&2&&(d6.$$scope={dirty:u,ctx:f}),yA.$set(d6);const V7e={};u&2&&(V7e.$$scope={dirty:u,ctx:f}),$A.$set(V7e);const X7e={};u&2&&(X7e.$$scope={dirty:u,ctx:f}),SA.$set(X7e);const c6={};u&2&&(c6.$$scope={dirty:u,ctx:f}),PA.$set(c6);const z7e={};u&2&&(z7e.$$scope={dirty:u,ctx:f}),NA.$set(z7e);const Q7e={};u&2&&(Q7e.$$scope={dirty:u,ctx:f}),jA.$set(Q7e);const f6={};u&2&&(f6.$$scope={dirty:u,ctx:f}),GA.$set(f6)},i(f){LQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(Df.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(_L.$$.fragment,f),E(Kg.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(ML.$$.fragment,f),E(Ph.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(up.$$.fragment,f),E(bp.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(PL.$$.fragment,f),E(jp.$$.fragment,f),E(Dp.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(Vp.$$.fragment,f),E(DL.$$.fragment,f),E(Hu.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(Ju.$$.fragment,f),E(zL.$$.fragment,f),E(V4.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(z4.$$.fragment,f),E(JL.$$.fragment,f),E(R2.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(B2.$$.fragment,f),E(oy.$$.fragment,f),E(T1.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(E1.$$.fragment,f),E(sy.$$.fragment,f),E(X1.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(Q1.$$.fragment,f),E(fy.$$.fragment,f),E(zb.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(Wb.$$.fragment,f),E(_y.$$.fragment,f),E(wv.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(Lv.$$.fragment,f),E(Ty.$$.fragment,f),E(Bv.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(Nv.$$.fragment,f),E(Ay.$$.fragment,f),E(TF.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(EF.$$.fragment,f),E(ky.$$.fragment,f),E(gT.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(pT.$$.fragment,f),E(Iy.$$.fragment,f),E(bT.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(FT.$$.fragment,f),E(Gy.$$.fragment,f),E(BT.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(NT.$$.fragment,f),E(Qy.$$.fragment,f),E(DT.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(OT.$$.fragment,f),E(Yy.$$.fragment,f),E(zT.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o9.$$.fragment,f),E(WT.$$.fragment,f),E(r9.$$.fragment,f),E(a8.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(s8.$$.fragment,f),E(l9.$$.fragment,f),E(g8.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(p8.$$.fragment,f),E(m9.$$.fragment,f),E(L8.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(_9.$$.fragment,f),E(x8.$$.fragment,f),E(u9.$$.fragment,f),E(R8.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(B8.$$.fragment,f),E(E9.$$.fragment,f),E(O8.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(X8.$$.fragment,f),E(y9.$$.fragment,f),E(U8.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(Y8.$$.fragment,f),E(R9.$$.fragment,f),E(oM.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(tM.$$.fragment,f),E(j9.$$.fragment,f),E(sM.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(iM.$$.fragment,f),E(X9.$$.fragment,f),E(pM.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(uM.$$.fragment,f),E(U9.$$.fragment,f),E(FM.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(MM.$$.fragment,f),E(ex.$$.fragment,f),E(vE.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(TE.$$.fragment,f),E(nx.$$.fragment,f),E(zE.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(WE.$$.fragment,f),E(cx.$$.fragment,f),E(lC.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(dC.$$.fragment,f),E(px.$$.fragment,f),E(uC.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(vC.$$.fragment,f),E(Fx.$$.fragment,f),E(DC.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(OC.$$.fragment,f),E(wx.$$.fragment,f),E(ZC.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(o3.$$.fragment,f),E($x.$$.fragment,f),E(y3.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E($3.$$.fragment,f),E(Bx.$$.fragment,f),E(H3.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(J3.$$.fragment,f),E(Dx.$$.fragment,f),E(Z3.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(o5.$$.fragment,f),E(Qx.$$.fragment,f),E(t5.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(n5.$$.fragment,f),E(Yx.$$.fragment,f),E(A5.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(y5.$$.fragment,f),E(r$.$$.fragment,f),E(U5.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(Y5.$$.fragment,f),E(l$.$$.fragment,f),E(Z5.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(o0.$$.fragment,f),E(m$.$$.fragment,f),E(t0.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E(n0.$$.fragment,f),E(u$.$$.fragment,f),E(R0.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(B0.$$.fragment,f),E(M$.$$.fragment,f),E(Q0.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(H0.$$.fragment,f),E(L$.$$.fragment,f),E(iw.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(cw.$$.fragment,f),E(S$.$$.fragment,f),E(Tw.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(Ew.$$.fragment,f),E(N$.$$.fragment,f),E(Pw.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(Iw.$$.fragment,f),E(O$.$$.fragment,f),E(Ww.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(Q$.$$.fragment,f),E(Uw.$$.fragment,f),E(W$.$$.fragment,f),E(sA.$$.fragment,f),E(H$.$$.fragment,f),E(U$.$$.fragment,f),E(Y$.$$.fragment,f),E(iA.$$.fragment,f),E(K$.$$.fragment,f),E(uA.$$.fragment,f),E(Z$.$$.fragment,f),E(ek.$$.fragment,f),E(rk.$$.fragment,f),E(vA.$$.fragment,f),E(tk.$$.fragment,f),E(yA.$$.fragment,f),E(ak.$$.fragment,f),E(nk.$$.fragment,f),E(lk.$$.fragment,f),E($A.$$.fragment,f),E(ik.$$.fragment,f),E(SA.$$.fragment,f),E(dk.$$.fragment,f),E(ck.$$.fragment,f),E(mk.$$.fragment,f),E(PA.$$.fragment,f),E(gk.$$.fragment,f),E(NA.$$.fragment,f),E(pk.$$.fragment,f),E(_k.$$.fragment,f),E(bk.$$.fragment,f),E(jA.$$.fragment,f),E(vk.$$.fragment,f),E(GA.$$.fragment,f),LQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(Df.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(_L.$$.fragment,f),C(Kg.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(ML.$$.fragment,f),C(Ph.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(up.$$.fragment,f),C(bp.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(PL.$$.fragment,f),C(jp.$$.fragment,f),C(Dp.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(Vp.$$.fragment,f),C(DL.$$.fragment,f),C(Hu.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(Ju.$$.fragment,f),C(zL.$$.fragment,f),C(V4.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(z4.$$.fragment,f),C(JL.$$.fragment,f),C(R2.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(B2.$$.fragment,f),C(oy.$$.fragment,f),C(T1.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(E1.$$.fragment,f),C(sy.$$.fragment,f),C(X1.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(Q1.$$.fragment,f),C(fy.$$.fragment,f),C(zb.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(Wb.$$.fragment,f),C(_y.$$.fragment,f),C(wv.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(Lv.$$.fragment,f),C(Ty.$$.fragment,f),C(Bv.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(Nv.$$.fragment,f),C(Ay.$$.fragment,f),C(TF.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(EF.$$.fragment,f),C(ky.$$.fragment,f),C(gT.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(pT.$$.fragment,f),C(Iy.$$.fragment,f),C(bT.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(FT.$$.fragment,f),C(Gy.$$.fragment,f),C(BT.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(NT.$$.fragment,f),C(Qy.$$.fragment,f),C(DT.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(OT.$$.fragment,f),C(Yy.$$.fragment,f),C(zT.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o9.$$.fragment,f),C(WT.$$.fragment,f),C(r9.$$.fragment,f),C(a8.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(s8.$$.fragment,f),C(l9.$$.fragment,f),C(g8.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(p8.$$.fragment,f),C(m9.$$.fragment,f),C(L8.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(_9.$$.fragment,f),C(x8.$$.fragment,f),C(u9.$$.fragment,f),C(R8.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(B8.$$.fragment,f),C(E9.$$.fragment,f),C(O8.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(X8.$$.fragment,f),C(y9.$$.fragment,f),C(U8.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(Y8.$$.fragment,f),C(R9.$$.fragment,f),C(oM.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(tM.$$.fragment,f),C(j9.$$.fragment,f),C(sM.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(iM.$$.fragment,f),C(X9.$$.fragment,f),C(pM.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(uM.$$.fragment,f),C(U9.$$.fragment,f),C(FM.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(MM.$$.fragment,f),C(ex.$$.fragment,f),C(vE.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(TE.$$.fragment,f),C(nx.$$.fragment,f),C(zE.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(WE.$$.fragment,f),C(cx.$$.fragment,f),C(lC.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(dC.$$.fragment,f),C(px.$$.fragment,f),C(uC.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(vC.$$.fragment,f),C(Fx.$$.fragment,f),C(DC.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(OC.$$.fragment,f),C(wx.$$.fragment,f),C(ZC.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(o3.$$.fragment,f),C($x.$$.fragment,f),C(y3.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C($3.$$.fragment,f),C(Bx.$$.fragment,f),C(H3.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(J3.$$.fragment,f),C(Dx.$$.fragment,f),C(Z3.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(o5.$$.fragment,f),C(Qx.$$.fragment,f),C(t5.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(n5.$$.fragment,f),C(Yx.$$.fragment,f),C(A5.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(y5.$$.fragment,f),C(r$.$$.fragment,f),C(U5.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(Y5.$$.fragment,f),C(l$.$$.fragment,f),C(Z5.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(o0.$$.fragment,f),C(m$.$$.fragment,f),C(t0.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C(n0.$$.fragment,f),C(u$.$$.fragment,f),C(R0.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(B0.$$.fragment,f),C(M$.$$.fragment,f),C(Q0.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(H0.$$.fragment,f),C(L$.$$.fragment,f),C(iw.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(cw.$$.fragment,f),C(S$.$$.fragment,f),C(Tw.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(Ew.$$.fragment,f),C(N$.$$.fragment,f),C(Pw.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(Iw.$$.fragment,f),C(O$.$$.fragment,f),C(Ww.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(Q$.$$.fragment,f),C(Uw.$$.fragment,f),C(W$.$$.fragment,f),C(sA.$$.fragment,f),C(H$.$$.fragment,f),C(U$.$$.fragment,f),C(Y$.$$.fragment,f),C(iA.$$.fragment,f),C(K$.$$.fragment,f),C(uA.$$.fragment,f),C(Z$.$$.fragment,f),C(ek.$$.fragment,f),C(rk.$$.fragment,f),C(vA.$$.fragment,f),C(tk.$$.fragment,f),C(yA.$$.fragment,f),C(ak.$$.fragment,f),C(nk.$$.fragment,f),C(lk.$$.fragment,f),C($A.$$.fragment,f),C(ik.$$.fragment,f),C(SA.$$.fragment,f),C(dk.$$.fragment,f),C(ck.$$.fragment,f),C(mk.$$.fragment,f),C(PA.$$.fragment,f),C(gk.$$.fragment,f),C(NA.$$.fragment,f),C(pk.$$.fragment,f),C(_k.$$.fragment,f),C(bk.$$.fragment,f),C(jA.$$.fragment,f),C(vk.$$.fragment,f),C(GA.$$.fragment,f),LQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Bf),f&&t(lt),f&&t(Oe),f&&t(We),f&&t(Nf),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(Ao),f&&t(Ra),f&&t(MXe),f&&t(Bi),w(cL),f&&t(EXe),f&&t(qn),f&&t(CXe),w(fL,f),f&&t(wXe),f&&t(WS),f&&t(AXe),w(Df,f),f&&t(LXe),f&&t(Ii),w(mL),f&&t(yXe),f&&t(Lo),w(gL),w(_L),w(Kg),w(uL),f&&t(xXe),f&&t(qi),w(bL),f&&t($Xe),f&&t(yo),w(vL),w(ML),w(Ph),w(EL),f&&t(kXe),f&&t(ji),w(CL),f&&t(SXe),f&&t(xo),w(wL),w(yL),w(up),w(bp),w(xL),f&&t(RXe),f&&t(Di),w($L),f&&t(PXe),f&&t($o),w(kL),w(PL),w(jp),w(Dp),w(BL),f&&t(BXe),f&&t(Oi),w(IL),f&&t(IXe),f&&t(ko),w(NL),w(jL),w(Vp),w(DL),w(Hu),f&&t(NXe),f&&t(zi),w(GL),f&&t(qXe),f&&t(So),w(OL),w(XL),w(Ju),w(zL),w(V4),f&&t(jXe),f&&t(Hi),w(QL),f&&t(DXe),f&&t(Ro),w(WL),w(UL),w(z4),w(JL),w(R2),f&&t(GXe),f&&t(Yi),w(YL),f&&t(OXe),f&&t(Po),w(KL),w(ey),w(B2),w(oy),w(T1),f&&t(VXe),f&&t(ed),w(ry),f&&t(XXe),f&&t(Bo),w(ty),w(ny),w(E1),w(sy),w(X1),f&&t(zXe),f&&t(td),w(ly),f&&t(QXe),f&&t(Io),w(iy),w(cy),w(Q1),w(fy),w(zb),f&&t(WXe),f&&t(sd),w(my),f&&t(HXe),f&&t(No),w(gy),w(py),w(Wb),w(_y),w(wv),f&&t(UXe),f&&t(dd),w(uy),f&&t(JXe),f&&t(qo),w(by),w(Fy),w(Lv),w(Ty),w(Bv),f&&t(YXe),f&&t(md),w(My),f&&t(KXe),f&&t(Do),w(Ey),w(wy),w(Nv),w(Ay),w(TF),f&&t(ZXe),f&&t(pd),w(Ly),f&&t(eze),f&&t(Go),w(yy),w($y),w(EF),w(ky),w(gT),f&&t(oze),f&&t(bd),w(Sy),f&&t(rze),f&&t(Oo),w(Ry),w(By),w(pT),w(Iy),w(bT),f&&t(tze),f&&t(Td),w(Ny),f&&t(aze),f&&t(Vo),w(qy),w(Dy),w(FT),w(Gy),w(BT),f&&t(nze),f&&t(Cd),w(Oy),f&&t(sze),f&&t(Xo),w(Vy),w(zy),w(NT),w(Qy),w(DT),f&&t(lze),f&&t(Ld),w(Wy),f&&t(ize),f&&t(zo),w(Hy),w(Jy),w(OT),w(Yy),w(zT),f&&t(dze),f&&t($d),w(Ky),f&&t(cze),f&&t(Qo),w(Zy),w(o9),w(WT),w(r9),w(a8),f&&t(fze),f&&t(Rd),w(t9),f&&t(mze),f&&t(Wo),w(a9),w(s9),w(s8),w(l9),w(g8),f&&t(gze),f&&t(Id),w(i9),f&&t(hze),f&&t(Ho),w(d9),w(f9),w(p8),w(m9),w(L8),f&&t(pze),f&&t(jd),w(g9),f&&t(_ze),f&&t(Uo),w(h9),w(_9),w(x8),w(u9),w(R8),f&&t(uze),f&&t(Od),w(v9),f&&t(bze),f&&t(Jo),w(F9),w(M9),w(B8),w(E9),w(O8),f&&t(vze),f&&t(zd),w(C9),f&&t(Fze),f&&t(Yo),w(w9),w(L9),w(X8),w(y9),w(U8),f&&t(Tze),f&&t(Ud),w(x9),f&&t(Mze),f&&t(Ko),w($9),w(S9),w(Y8),w(R9),w(oM),f&&t(Eze),f&&t(Kd),w(B9),f&&t(Cze),f&&t(Zo),w(I9),w(q9),w(tM),w(j9),w(sM),f&&t(wze),f&&t(oc),w(D9),f&&t(Aze),f&&t(er),w(G9),w(V9),w(iM),w(X9),w(pM),f&&t(Lze),f&&t(ac),w(z9),f&&t(yze),f&&t(or),w(Q9),w(H9),w(uM),w(U9),w(FM),f&&t(xze),f&&t(lc),w(J9),f&&t($ze),f&&t(rr),w(Y9),w(Z9),w(MM),w(ex),w(vE),f&&t(kze),f&&t(cc),w(ox),f&&t(Sze),f&&t(tr),w(rx),w(ax),w(TE),w(nx),w(zE),f&&t(Rze),f&&t(gc),w(sx),f&&t(Pze),f&&t(ar),w(lx),w(dx),w(WE),w(cx),w(lC),f&&t(Bze),f&&t(_c),w(fx),f&&t(Ize),f&&t(nr),w(mx),w(hx),w(dC),w(px),w(uC),f&&t(Nze),f&&t(vc),w(_x),f&&t(qze),f&&t(sr),w(ux),w(vx),w(vC),w(Fx),w(DC),f&&t(jze),f&&t(Mc),w(Tx),f&&t(Dze),f&&t(lr),w(Mx),w(Cx),w(OC),w(wx),w(ZC),f&&t(Gze),f&&t(wc),w(Ax),f&&t(Oze),f&&t(ir),w(Lx),w(xx),w(o3),w($x),w(y3),f&&t(Vze),f&&t(yc),w(kx),f&&t(Xze),f&&t(dr),w(Sx),w(Px),w($3),w(Bx),w(H3),f&&t(zze),f&&t(kc),w(Ix),f&&t(Qze),f&&t(cr),w(Nx),w(jx),w(J3),w(Dx),w(Z3),f&&t(Wze),f&&t(Pc),w(Ox),f&&t(Hze),f&&t(fr),w(Vx),w(zx),w(o5),w(Qx),w(t5),f&&t(Uze),f&&t(Nc),w(Wx),f&&t(Jze),f&&t(mr),w(Hx),w(Jx),w(n5),w(Yx),w(A5),f&&t(Yze),f&&t(Dc),w(Kx),f&&t(Kze),f&&t(gr),w(Zx),w(o$),w(y5),w(r$),w(U5),f&&t(Zze),f&&t(Vc),w(t$),f&&t(eQe),f&&t(hr),w(a$),w(s$),w(Y5),w(l$),w(Z5),f&&t(oQe),f&&t(Qc),w(i$),f&&t(rQe),f&&t(pr),w(d$),w(f$),w(o0),w(m$),w(t0),f&&t(tQe),f&&t(Uc),w(g$),f&&t(aQe),f&&t(_r),w(h$),w(_$),w(n0),w(u$),w(R0),f&&t(nQe),f&&t(Kc),w(b$),f&&t(sQe),f&&t(ur),w(v$),w(T$),w(B0),w(M$),w(Q0),f&&t(lQe),f&&t(of),w(E$),f&&t(iQe),f&&t(br),w(C$),w(A$),w(H0),w(L$),w(iw),f&&t(dQe),f&&t(af),w(y$),f&&t(cQe),f&&t(vr),w(x$),w(k$),w(cw),w(S$),w(Tw),f&&t(fQe),f&&t(lf),w(R$),f&&t(mQe),f&&t(Fr),w(P$),w(I$),w(Ew),w(N$),w(Pw),f&&t(gQe),f&&t(ff),w(q$),f&&t(hQe),f&&t(Tr),w(j$),w(G$),w(Iw),w(O$),w(Ww),f&&t(pQe),f&&t(hf),w(V$),f&&t(_Qe),f&&t(Mr),w(X$),w(Q$),w(Uw),w(W$),w(sA),f&&t(uQe),f&&t(uf),w(H$),f&&t(bQe),f&&t(Er),w(U$),w(Y$),w(iA),w(K$),w(uA),f&&t(vQe),f&&t(Ff),w(Z$),f&&t(FQe),f&&t(Cr),w(ek),w(rk),w(vA),w(tk),w(yA),f&&t(TQe),f&&t(Ef),w(ak),f&&t(MQe),f&&t(wr),w(nk),w(lk),w($A),w(ik),w(SA),f&&t(EQe),f&&t(Af),w(dk),f&&t(CQe),f&&t(Ar),w(ck),w(mk),w(PA),w(gk),w(NA),f&&t(wQe),f&&t(xf),w(pk),f&&t(AQe),f&&t(Lr),w(_k),w(bk),w(jA),w(vk),w(GA)}}}const YUt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function KUt($){return JWt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class nJt extends QWt{constructor(g){super();WWt(this,g,KUt,JUt,HWt,{})}}export{nJt as default,YUt as metadata};
